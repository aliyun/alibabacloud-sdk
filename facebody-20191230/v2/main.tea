/**
 *
 */
import Credential;
import OpenApi;
import OpenApi.OpenApiUtil;

extends OpenApi;


init(config: OpenApiUtil.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('facebody', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!$isNull(endpoint)) {
    return endpoint;
  }
  
  if (!$isNull(endpointMap) && !$isNull(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return OpenApiUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddFaceRequest {
  dbName?: string(name='DbName', description='This parameter is required.', example='default'),
  entityId?: string(name='EntityId', description='This parameter is required.', example='U1'),
  extraData?: string(name='ExtraData'),
  imageUrl?: string(name='ImageUrl', description='This parameter is required.', example='https://viapi-test.oss-cn-shanghai.aliyuncs.com/test/imgsearch/demo/1.png'),
  qualityScoreThreshold?: float(name='QualityScoreThreshold', example='50.0'),
  similarityScoreThresholdBetweenEntity?: float(name='SimilarityScoreThresholdBetweenEntity', example='50.0'),
  similarityScoreThresholdInEntity?: float(name='SimilarityScoreThresholdInEntity', example='50.0'),
}

model AddFaceAdvanceRequest {
  dbName?: string(name='DbName', description='This parameter is required.', example='default'),
  entityId?: string(name='EntityId', description='This parameter is required.', example='U1'),
  extraData?: string(name='ExtraData'),
  imageUrlObject?: readable(name='ImageUrl', description='This parameter is required.', example='https://viapi-test.oss-cn-shanghai.aliyuncs.com/test/imgsearch/demo/1.png'),
  qualityScoreThreshold?: float(name='QualityScoreThreshold', example='50.0'),
  similarityScoreThresholdBetweenEntity?: float(name='SimilarityScoreThresholdBetweenEntity', example='50.0'),
  similarityScoreThresholdInEntity?: float(name='SimilarityScoreThresholdInEntity', example='50.0'),
}

model AddFaceResponseBody = {
  data?: {
    faceId?: string(name='FaceId', example='5'),
    qualitieScore?: float(name='QualitieScore', example='99.79581'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='2B93C43A-F824-40C8-AF79-844342B0F43A'),
}

model AddFaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddFaceResponseBody(name='body'),
}

/**
 * @param request AddFaceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddFaceResponse
 */
@context("addFaceWithContext")
async function addFaceWithOptions(request: AddFaceRequest, runtime: $RuntimeOptions): AddFaceResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.dbName)) {
    body['DbName'] = request.dbName;
  }
  if (!$isNull(request.entityId)) {
    body['EntityId'] = request.entityId;
  }
  if (!$isNull(request.extraData)) {
    body['ExtraData'] = request.extraData;
  }
  if (!$isNull(request.imageUrl)) {
    body['ImageUrl'] = request.imageUrl;
  }
  if (!$isNull(request.qualityScoreThreshold)) {
    body['QualityScoreThreshold'] = request.qualityScoreThreshold;
  }
  if (!$isNull(request.similarityScoreThresholdBetweenEntity)) {
    body['SimilarityScoreThresholdBetweenEntity'] = request.similarityScoreThresholdBetweenEntity;
  }
  if (!$isNull(request.similarityScoreThresholdInEntity)) {
    body['SimilarityScoreThresholdInEntity'] = request.similarityScoreThresholdInEntity;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'AddFace',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request AddFaceRequest
 * @return AddFaceResponse
 */
async function addFace(request: AddFaceRequest): AddFaceResponse {
  var runtime = new $RuntimeOptions{};
  return addFaceWithOptions(request, runtime);
}

async function addFaceAdvance(request: AddFaceAdvanceRequest, runtime: $RuntimeOptions): AddFaceResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'facebody',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var addFaceReq = new AddFaceRequest{};
  OpenApiUtil.convert(request, addFaceReq);

  if(!$isNull(request.imageUrlObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.imageUrlObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    addFaceReq.imageUrl = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var addFaceResp = addFaceWithOptions(addFaceReq, runtime);
  return addFaceResp;
}

model AddFaceEntityRequest {
  dbName?: string(name='DbName', description='This parameter is required.', example='default'),
  entityId?: string(name='EntityId', description='This parameter is required.', example='mm2'),
  labels?: string(name='Labels'),
}

model AddFaceEntityResponseBody = {
  requestId?: string(name='RequestId', example='DA7CAFEB-0A37-4496-9CDF-E3DBB6309CB2'),
}

model AddFaceEntityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddFaceEntityResponseBody(name='body'),
}

/**
 * @param request AddFaceEntityRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddFaceEntityResponse
 */
@context("addFaceEntityWithContext")
async function addFaceEntityWithOptions(request: AddFaceEntityRequest, runtime: $RuntimeOptions): AddFaceEntityResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.dbName)) {
    body['DbName'] = request.dbName;
  }
  if (!$isNull(request.entityId)) {
    body['EntityId'] = request.entityId;
  }
  if (!$isNull(request.labels)) {
    body['Labels'] = request.labels;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'AddFaceEntity',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request AddFaceEntityRequest
 * @return AddFaceEntityResponse
 */
async function addFaceEntity(request: AddFaceEntityRequest): AddFaceEntityResponse {
  var runtime = new $RuntimeOptions{};
  return addFaceEntityWithOptions(request, runtime);
}

model AddFaceImageTemplateRequest {
  imageURL?: string(name='ImageURL', description='This parameter is required.', example='https://invi-label.oss-cn-shanghai.aliyuncs.com/label/temp/faceswap/img_facefusion/template/sucai1.jpg'),
}

model AddFaceImageTemplateAdvanceRequest {
  imageURLObject?: readable(name='ImageURL', description='This parameter is required.', example='https://invi-label.oss-cn-shanghai.aliyuncs.com/label/temp/faceswap/img_facefusion/template/sucai1.jpg'),
}

model AddFaceImageTemplateResponseBody = {
  data?: {
    faceInfos?: [ 
      {
        faceRect?: {
          height?: string(name='Height', example='94'),
          width?: string(name='Width', example='89'),
          x?: string(name='X', example='254'),
          y?: string(name='Y', example='318'),
        }(name='FaceRect'),
        templateFaceID?: string(name='TemplateFaceID', example='string 6cd509ea-54fa-4730-8e9d-c94cadcda048_0'),
      }
    ](name='FaceInfos'),
    templateId?: string(name='TemplateId', example='6cd509ea-54fa-4730-8e9d-c94cadcda048'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='798A721D-7C7F-4D87-A125-1D04B3055C2C'),
}

model AddFaceImageTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddFaceImageTemplateResponseBody(name='body'),
}

/**
 * @summary 图像人脸融合模板增加
 *
 * @param request AddFaceImageTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddFaceImageTemplateResponse
 */
@context("addFaceImageTemplateWithContext")
async function addFaceImageTemplateWithOptions(request: AddFaceImageTemplateRequest, runtime: $RuntimeOptions): AddFaceImageTemplateResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'AddFaceImageTemplate',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 图像人脸融合模板增加
 *
 * @param request AddFaceImageTemplateRequest
 * @return AddFaceImageTemplateResponse
 */
async function addFaceImageTemplate(request: AddFaceImageTemplateRequest): AddFaceImageTemplateResponse {
  var runtime = new $RuntimeOptions{};
  return addFaceImageTemplateWithOptions(request, runtime);
}

async function addFaceImageTemplateAdvance(request: AddFaceImageTemplateAdvanceRequest, runtime: $RuntimeOptions): AddFaceImageTemplateResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'facebody',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var addFaceImageTemplateReq = new AddFaceImageTemplateRequest{};
  OpenApiUtil.convert(request, addFaceImageTemplateReq);

  if(!$isNull(request.imageURLObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    addFaceImageTemplateReq.imageURL = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var addFaceImageTemplateResp = addFaceImageTemplateWithOptions(addFaceImageTemplateReq, runtime);
  return addFaceImageTemplateResp;
}

model BatchAddFacesRequest {
  dbName?: string(name='DbName', description='This parameter is required.', example='default'),
  entityId?: string(name='EntityId', description='This parameter is required.', example='U1'),
  faces?: [ 
    {
      extraData?: string(name='ExtraData'),
      imageURL?: string(name='ImageURL', description='This parameter is required.', example='https://viapi-test.oss-cn-shanghai.aliyuncs.com/test/imgsearch/demo/1.png'),
    }
  ](name='Faces', description='This parameter is required.'),
  qualityScoreThreshold?: float(name='QualityScoreThreshold', example='50.0'),
  similarityScoreThresholdBetweenEntity?: float(name='SimilarityScoreThresholdBetweenEntity', example='50.0'),
  similarityScoreThresholdInEntity?: float(name='SimilarityScoreThresholdInEntity', example='50.0'),
}

model BatchAddFacesAdvanceRequest {
  dbName?: string(name='DbName', description='This parameter is required.', example='default'),
  entityId?: string(name='EntityId', description='This parameter is required.', example='U1'),
  faces?: [ 
    {
      extraData?: string(name='ExtraData'),
      imageURLObject?: readable(name='ImageURL', description='This parameter is required.', example='https://viapi-test.oss-cn-shanghai.aliyuncs.com/test/imgsearch/demo/1.png'),
    }
  ](name='Faces', description='This parameter is required.'),
  qualityScoreThreshold?: float(name='QualityScoreThreshold', example='50.0'),
  similarityScoreThresholdBetweenEntity?: float(name='SimilarityScoreThresholdBetweenEntity', example='50.0'),
  similarityScoreThresholdInEntity?: float(name='SimilarityScoreThresholdInEntity', example='50.0'),
}

model BatchAddFacesShrinkRequest {
  dbName?: string(name='DbName', description='This parameter is required.', example='default'),
  entityId?: string(name='EntityId', description='This parameter is required.', example='U1'),
  facesShrink?: string(name='Faces', description='This parameter is required.'),
  qualityScoreThreshold?: float(name='QualityScoreThreshold', example='50.0'),
  similarityScoreThresholdBetweenEntity?: float(name='SimilarityScoreThresholdBetweenEntity', example='50.0'),
  similarityScoreThresholdInEntity?: float(name='SimilarityScoreThresholdInEntity', example='50.0'),
}

model BatchAddFacesResponseBody = {
  data?: {
    failedFaces?: [ 
      {
        code?: string(name='Code', example='ClientError.IllegalArgument'),
        imageURL?: string(name='ImageURL', example='https://viapi-test.oss-cn-shanghai.aliyuncs.com/test/imgsearch/demo/xxxx.png'),
        message?: string(name='Message', example='not found the db=test'),
      }
    ](name='FailedFaces'),
    insertedFaces?: [ 
      {
        faceId?: string(name='FaceId', example='16350536'),
        imageURL?: string(name='ImageURL', example='https://viapi-test.oss-cn-shanghai.aliyuncs.com/test/imgsearch/demo/xxxx.png'),
        qualitieScore?: float(name='QualitieScore', example='99.79581'),
      }
    ](name='InsertedFaces'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='C46A46D0-3263-181A-A1EE-0901E4595390'),
}

model BatchAddFacesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchAddFacesResponseBody(name='body'),
}

/**
 * @summary 批量添加人脸数据
 *
 * @param tmpReq BatchAddFacesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BatchAddFacesResponse
 */
@context("batchAddFacesWithContext")
async function batchAddFacesWithOptions(tmpReq: BatchAddFacesRequest, runtime: $RuntimeOptions): BatchAddFacesResponse {
  tmpReq.validate();
  var request = new BatchAddFacesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.faces)) {
    request.facesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.faces, 'Faces', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.dbName)) {
    body['DbName'] = request.dbName;
  }
  if (!$isNull(request.entityId)) {
    body['EntityId'] = request.entityId;
  }
  if (!$isNull(request.facesShrink)) {
    body['Faces'] = request.facesShrink;
  }
  if (!$isNull(request.qualityScoreThreshold)) {
    body['QualityScoreThreshold'] = request.qualityScoreThreshold;
  }
  if (!$isNull(request.similarityScoreThresholdBetweenEntity)) {
    body['SimilarityScoreThresholdBetweenEntity'] = request.similarityScoreThresholdBetweenEntity;
  }
  if (!$isNull(request.similarityScoreThresholdInEntity)) {
    body['SimilarityScoreThresholdInEntity'] = request.similarityScoreThresholdInEntity;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'BatchAddFaces',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 批量添加人脸数据
 *
 * @param request BatchAddFacesRequest
 * @return BatchAddFacesResponse
 */
async function batchAddFaces(request: BatchAddFacesRequest): BatchAddFacesResponse {
  var runtime = new $RuntimeOptions{};
  return batchAddFacesWithOptions(request, runtime);
}

async function batchAddFacesAdvance(request: BatchAddFacesAdvanceRequest, runtime: $RuntimeOptions): BatchAddFacesResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'facebody',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var batchAddFacesReq = new BatchAddFacesRequest{};
  OpenApiUtil.convert(request, batchAddFacesReq);

  if(!$isNull(request.faces)) {
    var i0 : integer = 0;
    for (var item0 : request.faces) {
      if(!$isNull(item0.imageURLObject)) {
        authResponse = authClient.callApi(authParams, authReq, runtime);
        tmpBody = $object(authResponse['body']);
        useAccelerate = $boolean(tmpBody['UseAccelerate']);
        authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
        fileObj = new $FileField{
          filename = authResponseBody['ObjectKey'],
          content = item0.imageURLObject,
          contentType = '',
        };
        ossHeader = {
          host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
          OSSAccessKeyId = authResponseBody['AccessKeyId'],
          policy = authResponseBody['EncodedPolicy'],
          Signature = authResponseBody['Signature'],
          key = authResponseBody['ObjectKey'],
          file = fileObj,
          success_action_status = '201',
        };
        _postOSSObject(authResponseBody['Bucket'], ossHeader);
        var tmpObj : BatchAddFacesRequest.faces = batchAddFacesReq.faces[i0];
        tmpObj.imageURL = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
        i0++;
      }
    }
  }
  var batchAddFacesResp = batchAddFacesWithOptions(batchAddFacesReq, runtime);
  return batchAddFacesResp;
}

model BlurFaceRequest {
  imageURL?: string(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/BlurFace/BlurFace1.png'),
}

model BlurFaceAdvanceRequest {
  imageURLObject?: readable(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/BlurFace/BlurFace1.png'),
}

model BlurFaceResponseBody = {
  data?: {
    imageURL?: string(name='ImageURL', example='http://viapi-cn-shanghai-dha-segmenter.oss-cn-shanghai.aliyuncs.com/upload/result_FaceBlur/2020-8-5/invi_FaceBlur_015966077063461060948_IBdDsq.jpg?Expires=1596609506&OSSAccessKeyId=LTAI4FoLmvQ9urWXgSRp****&Signature=x8n3jq1X91Sq7BKWE4vRHSu6g9****'),
    maskURL?: string(name='MaskURL'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='4C6080B0-64C4-488E-BBA6-245749CA11AD'),
}

model BlurFaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BlurFaceResponseBody(name='body'),
}

/**
 * @param request BlurFaceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BlurFaceResponse
 */
@context("blurFaceWithContext")
async function blurFaceWithOptions(request: BlurFaceRequest, runtime: $RuntimeOptions): BlurFaceResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'BlurFace',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request BlurFaceRequest
 * @return BlurFaceResponse
 */
async function blurFace(request: BlurFaceRequest): BlurFaceResponse {
  var runtime = new $RuntimeOptions{};
  return blurFaceWithOptions(request, runtime);
}

async function blurFaceAdvance(request: BlurFaceAdvanceRequest, runtime: $RuntimeOptions): BlurFaceResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'facebody',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var blurFaceReq = new BlurFaceRequest{};
  OpenApiUtil.convert(request, blurFaceReq);

  if(!$isNull(request.imageURLObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    blurFaceReq.imageURL = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var blurFaceResp = blurFaceWithOptions(blurFaceReq, runtime);
  return blurFaceResp;
}

model BodyPostureRequest {
  imageURL?: string(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/BodyPosture/BodyPosture4.jpg'),
}

model BodyPostureAdvanceRequest {
  imageURLObject?: readable(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/BodyPosture/BodyPosture4.jpg'),
}

model BodyPostureResponseBody = {
  data?: {
    metaObject?: {
      height?: int32(name='Height', example='500'),
      width?: int32(name='Width', example='500'),
    }(name='MetaObject'),
    outputs?: [ 
      {
        humanCount?: int32(name='HumanCount', example='1'),
        results?: [ 
          {
            bodies?: [ 
              {
                confident?: float(name='Confident', example='0.91309475898742676'),
                label?: string(name='Label', example='nose'),
                positions?: [ 
                  {
                    points?: [ float ](name='Points'),
                  }
                ](name='Positions'),
              }
            ](name='Bodies'),
          }
        ](name='Results'),
      }
    ](name='Outputs'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='B854094B-9231-4A54-89AB-C377CB0D237D'),
}

model BodyPostureResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BodyPostureResponseBody(name='body'),
}

/**
 * @param request BodyPostureRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BodyPostureResponse
 */
@context("bodyPostureWithContext")
async function bodyPostureWithOptions(request: BodyPostureRequest, runtime: $RuntimeOptions): BodyPostureResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'BodyPosture',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request BodyPostureRequest
 * @return BodyPostureResponse
 */
async function bodyPosture(request: BodyPostureRequest): BodyPostureResponse {
  var runtime = new $RuntimeOptions{};
  return bodyPostureWithOptions(request, runtime);
}

async function bodyPostureAdvance(request: BodyPostureAdvanceRequest, runtime: $RuntimeOptions): BodyPostureResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'facebody',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var bodyPostureReq = new BodyPostureRequest{};
  OpenApiUtil.convert(request, bodyPostureReq);

  if(!$isNull(request.imageURLObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    bodyPostureReq.imageURL = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var bodyPostureResp = bodyPostureWithOptions(bodyPostureReq, runtime);
  return bodyPostureResp;
}

model CompareFaceRequest {
  imageDataA?: string(name='ImageDataA', example='/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAgGBgcGBQgHBwcJCQgK****'),
  imageDataB?: string(name='ImageDataB', example='/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAgGBgcGBQgHBwcJCQgQ****'),
  imageURLA?: string(name='ImageURLA', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/CompareFace/CompareFace-right1.png'),
  imageURLB?: string(name='ImageURLB', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/CompareFace/CompareFace-left1.png'),
  qualityScoreThreshold?: float(name='QualityScoreThreshold', example='75.12'),
}

model CompareFaceAdvanceRequest {
  imageDataA?: string(name='ImageDataA', example='/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAgGBgcGBQgHBwcJCQgK****'),
  imageDataB?: string(name='ImageDataB', example='/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAgGBgcGBQgHBwcJCQgQ****'),
  imageURLAObject?: readable(name='ImageURLA', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/CompareFace/CompareFace-right1.png'),
  imageURLBObject?: readable(name='ImageURLB', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/CompareFace/CompareFace-left1.png'),
  qualityScoreThreshold?: float(name='QualityScoreThreshold', example='75.12'),
}

model CompareFaceResponseBody = {
  data?: {
    confidence?: float(name='Confidence'),
    isMaskA?: long(name='IsMaskA'),
    isMaskB?: long(name='IsMaskB'),
    landmarksAList?: [ long ](name='LandmarksAList'),
    landmarksBList?: [ long ](name='LandmarksBList'),
    messageTips?: string(name='MessageTips', example='imageB quality score less threshold'),
    qualityScoreA?: float(name='QualityScoreA', example='75.16'),
    qualityScoreB?: float(name='QualityScoreB', example='75.20'),
    rectAList?: [ int32 ](name='RectAList', description='1'),
    rectBList?: [ int32 ](name='RectBList', description='1'),
    thresholds?: [ float ](name='Thresholds', description='1'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model CompareFaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CompareFaceResponseBody(name='body'),
}

/**
 * @summary 人脸比对(1:1)
 *
 * @param request CompareFaceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CompareFaceResponse
 */
@context("compareFaceWithContext")
async function compareFaceWithOptions(request: CompareFaceRequest, runtime: $RuntimeOptions): CompareFaceResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.imageDataA)) {
    body['ImageDataA'] = request.imageDataA;
  }
  if (!$isNull(request.imageDataB)) {
    body['ImageDataB'] = request.imageDataB;
  }
  if (!$isNull(request.imageURLA)) {
    body['ImageURLA'] = request.imageURLA;
  }
  if (!$isNull(request.imageURLB)) {
    body['ImageURLB'] = request.imageURLB;
  }
  if (!$isNull(request.qualityScoreThreshold)) {
    body['QualityScoreThreshold'] = request.qualityScoreThreshold;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CompareFace',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 人脸比对(1:1)
 *
 * @param request CompareFaceRequest
 * @return CompareFaceResponse
 */
async function compareFace(request: CompareFaceRequest): CompareFaceResponse {
  var runtime = new $RuntimeOptions{};
  return compareFaceWithOptions(request, runtime);
}

async function compareFaceAdvance(request: CompareFaceAdvanceRequest, runtime: $RuntimeOptions): CompareFaceResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'facebody',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var compareFaceReq = new CompareFaceRequest{};
  OpenApiUtil.convert(request, compareFaceReq);

  if(!$isNull(request.imageURLAObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.imageURLAObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    compareFaceReq.imageURLA = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  if(!$isNull(request.imageURLBObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.imageURLBObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    compareFaceReq.imageURLB = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var compareFaceResp = compareFaceWithOptions(compareFaceReq, runtime);
  return compareFaceResp;
}

model CompareFaceWithMaskRequest {
  imageURLA?: string(name='ImageURLA', description='This parameter is required.'),
  imageURLB?: string(name='ImageURLB', description='This parameter is required.'),
  qualityScoreThreshold?: float(name='QualityScoreThreshold', example='97.0'),
}

model CompareFaceWithMaskAdvanceRequest {
  imageURLAObject?: readable(name='ImageURLA', description='This parameter is required.'),
  imageURLBObject?: readable(name='ImageURLB', description='This parameter is required.'),
  qualityScoreThreshold?: float(name='QualityScoreThreshold', example='97.0'),
}

model CompareFaceWithMaskResponseBody = {
  data?: {
    confidence?: float(name='Confidence'),
    isMaskA?: long(name='IsMaskA'),
    isMaskB?: long(name='IsMaskB'),
    landmarksAList?: [ long ](name='LandmarksAList'),
    landmarksBList?: [ long ](name='LandmarksBList'),
    messageTips?: string(name='MessageTips', example='imageB quality score less threshold'),
    qualityScoreA?: float(name='QualityScoreA'),
    qualityScoreB?: float(name='QualityScoreB'),
    rectAList?: [ long ](name='RectAList'),
    rectBList?: [ long ](name='RectBList'),
    thresholds?: [ long ](name='Thresholds'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='C6499918-E932-41B3-96F5-A18F50D262DD'),
}

model CompareFaceWithMaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CompareFaceWithMaskResponseBody(name='body'),
}

/**
 * @summary 口罩人脸比对1:1
 *
 * @param request CompareFaceWithMaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CompareFaceWithMaskResponse
 */
@context("compareFaceWithMaskWithContext")
async function compareFaceWithMaskWithOptions(request: CompareFaceWithMaskRequest, runtime: $RuntimeOptions): CompareFaceWithMaskResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.imageURLA)) {
    body['ImageURLA'] = request.imageURLA;
  }
  if (!$isNull(request.imageURLB)) {
    body['ImageURLB'] = request.imageURLB;
  }
  if (!$isNull(request.qualityScoreThreshold)) {
    body['QualityScoreThreshold'] = request.qualityScoreThreshold;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CompareFaceWithMask',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 口罩人脸比对1:1
 *
 * @param request CompareFaceWithMaskRequest
 * @return CompareFaceWithMaskResponse
 */
async function compareFaceWithMask(request: CompareFaceWithMaskRequest): CompareFaceWithMaskResponse {
  var runtime = new $RuntimeOptions{};
  return compareFaceWithMaskWithOptions(request, runtime);
}

async function compareFaceWithMaskAdvance(request: CompareFaceWithMaskAdvanceRequest, runtime: $RuntimeOptions): CompareFaceWithMaskResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'facebody',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var compareFaceWithMaskReq = new CompareFaceWithMaskRequest{};
  OpenApiUtil.convert(request, compareFaceWithMaskReq);

  if(!$isNull(request.imageURLAObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.imageURLAObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    compareFaceWithMaskReq.imageURLA = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  if(!$isNull(request.imageURLBObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.imageURLBObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    compareFaceWithMaskReq.imageURLB = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var compareFaceWithMaskResp = compareFaceWithMaskWithOptions(compareFaceWithMaskReq, runtime);
  return compareFaceWithMaskResp;
}

model CreateFaceDbRequest {
  name?: string(name='Name', description='This parameter is required.', example='default'),
}

model CreateFaceDbResponseBody = {
  requestId?: string(name='RequestId', example='818D24A6-E368-46B3-99C5-3CF36D98CCA3'),
}

model CreateFaceDbResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFaceDbResponseBody(name='body'),
}

/**
 * @param request CreateFaceDbRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateFaceDbResponse
 */
@context("createFaceDbWithContext")
async function createFaceDbWithOptions(request: CreateFaceDbRequest, runtime: $RuntimeOptions): CreateFaceDbResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateFaceDb',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request CreateFaceDbRequest
 * @return CreateFaceDbResponse
 */
async function createFaceDb(request: CreateFaceDbRequest): CreateFaceDbResponse {
  var runtime = new $RuntimeOptions{};
  return createFaceDbWithOptions(request, runtime);
}

model DeepfakeFaceRequest {
  tasks?: [ 
    {
      imageData?: string(name='ImageData', example='/9j/4AAQSkZJRgABAQAAAQABAAD/2****'),
      imageURL?: string(name='ImageURL', example='https://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/DeepfakeFace/DeepfakeFace1.jpg'),
    }
  ](name='Tasks', description='This parameter is required.'),
}

model DeepfakeFaceAdvanceRequest {
  tasks?: [ 
    {
      imageData?: string(name='ImageData', example='/9j/4AAQSkZJRgABAQAAAQABAAD/2****'),
      imageURLObject?: readable(name='ImageURL', example='https://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/DeepfakeFace/DeepfakeFace1.jpg'),
    }
  ](name='Tasks', description='This parameter is required.'),
}

model DeepfakeFaceResponseBody = {
  data?: {
    elements?: [ 
      {
        faceNumber?: long(name='FaceNumber', example='1'),
        imageURL?: string(name='ImageURL', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/DeepfakeFace/DeepfakeFace1.jpg'),
        results?: [ 
          {
            confidence?: float(name='Confidence', example='36.6455'),
            label?: string(name='Label', example='normalface'),
            messageTips?: string(name='MessageTips', example='blurred, occluded or large angle face, please check.'),
            rect?: {
              height?: long(name='Height', example='284'),
              left?: long(name='Left', example='373'),
              top?: long(name='Top', example='111'),
              width?: long(name='Width', example='207'),
            }(name='Rect'),
          }
        ](name='Results'),
        taskId?: string(name='TaskId', example='8E6F65D5-62A1-1E5B-BC0B-00508034AC92'),
      }
    ](name='Elements'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='8E6F65D5-62A1-1E5B-BC0B-00508034AC92'),
}

model DeepfakeFaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeepfakeFaceResponseBody(name='body'),
}

/**
 * @summary 换脸鉴别
 *
 * @param request DeepfakeFaceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeepfakeFaceResponse
 */
@context("deepfakeFaceWithContext")
async function deepfakeFaceWithOptions(request: DeepfakeFaceRequest, runtime: $RuntimeOptions): DeepfakeFaceResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.tasks)) {
    body['Tasks'] = request.tasks;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeepfakeFace',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 换脸鉴别
 *
 * @param request DeepfakeFaceRequest
 * @return DeepfakeFaceResponse
 */
async function deepfakeFace(request: DeepfakeFaceRequest): DeepfakeFaceResponse {
  var runtime = new $RuntimeOptions{};
  return deepfakeFaceWithOptions(request, runtime);
}

async function deepfakeFaceAdvance(request: DeepfakeFaceAdvanceRequest, runtime: $RuntimeOptions): DeepfakeFaceResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'facebody',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var deepfakeFaceReq = new DeepfakeFaceRequest{};
  OpenApiUtil.convert(request, deepfakeFaceReq);

  if(!$isNull(request.tasks)) {
    var i0 : integer = 0;
    for (var item0 : request.tasks) {
      if(!$isNull(item0.imageURLObject)) {
        authResponse = authClient.callApi(authParams, authReq, runtime);
        tmpBody = $object(authResponse['body']);
        useAccelerate = $boolean(tmpBody['UseAccelerate']);
        authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
        fileObj = new $FileField{
          filename = authResponseBody['ObjectKey'],
          content = item0.imageURLObject,
          contentType = '',
        };
        ossHeader = {
          host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
          OSSAccessKeyId = authResponseBody['AccessKeyId'],
          policy = authResponseBody['EncodedPolicy'],
          Signature = authResponseBody['Signature'],
          key = authResponseBody['ObjectKey'],
          file = fileObj,
          success_action_status = '201',
        };
        _postOSSObject(authResponseBody['Bucket'], ossHeader);
        var tmpObj : DeepfakeFaceRequest.tasks = deepfakeFaceReq.tasks[i0];
        tmpObj.imageURL = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
        i0++;
      }
    }
  }
  var deepfakeFaceResp = deepfakeFaceWithOptions(deepfakeFaceReq, runtime);
  return deepfakeFaceResp;
}

model DeleteFaceRequest {
  dbName?: string(name='DbName', description='This parameter is required.', example='default'),
  faceId?: string(name='FaceId', description='This parameter is required.', example='001'),
}

model DeleteFaceResponseBody = {
  requestId?: string(name='RequestId', example='FAC90D32-2F04-5AD4-B94B-BAA163AB3724'),
}

model DeleteFaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFaceResponseBody(name='body'),
}

/**
 * @param request DeleteFaceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteFaceResponse
 */
@context("deleteFaceWithContext")
async function deleteFaceWithOptions(request: DeleteFaceRequest, runtime: $RuntimeOptions): DeleteFaceResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.dbName)) {
    body['DbName'] = request.dbName;
  }
  if (!$isNull(request.faceId)) {
    body['FaceId'] = request.faceId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteFace',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request DeleteFaceRequest
 * @return DeleteFaceResponse
 */
async function deleteFace(request: DeleteFaceRequest): DeleteFaceResponse {
  var runtime = new $RuntimeOptions{};
  return deleteFaceWithOptions(request, runtime);
}

model DeleteFaceDbRequest {
  name?: string(name='Name', description='This parameter is required.', example='default'),
}

model DeleteFaceDbResponseBody = {
  requestId?: string(name='RequestId', example='203AE658-CFE1-507D-B105-F88CD1F1F71B'),
}

model DeleteFaceDbResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFaceDbResponseBody(name='body'),
}

/**
 * @param request DeleteFaceDbRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteFaceDbResponse
 */
@context("deleteFaceDbWithContext")
async function deleteFaceDbWithOptions(request: DeleteFaceDbRequest, runtime: $RuntimeOptions): DeleteFaceDbResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteFaceDb',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request DeleteFaceDbRequest
 * @return DeleteFaceDbResponse
 */
async function deleteFaceDb(request: DeleteFaceDbRequest): DeleteFaceDbResponse {
  var runtime = new $RuntimeOptions{};
  return deleteFaceDbWithOptions(request, runtime);
}

model DeleteFaceEntityRequest {
  dbName?: string(name='DbName', description='This parameter is required.', example='default'),
  entityId?: string(name='EntityId', description='This parameter is required.', example='wood'),
}

model DeleteFaceEntityResponseBody = {
  requestId?: string(name='RequestId', example='DA7CAFEB-0A37-4496-9CDF-E3DBB6309CB2'),
}

model DeleteFaceEntityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFaceEntityResponseBody(name='body'),
}

/**
 * @param request DeleteFaceEntityRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteFaceEntityResponse
 */
@context("deleteFaceEntityWithContext")
async function deleteFaceEntityWithOptions(request: DeleteFaceEntityRequest, runtime: $RuntimeOptions): DeleteFaceEntityResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.dbName)) {
    body['DbName'] = request.dbName;
  }
  if (!$isNull(request.entityId)) {
    body['EntityId'] = request.entityId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteFaceEntity',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request DeleteFaceEntityRequest
 * @return DeleteFaceEntityResponse
 */
async function deleteFaceEntity(request: DeleteFaceEntityRequest): DeleteFaceEntityResponse {
  var runtime = new $RuntimeOptions{};
  return deleteFaceEntityWithOptions(request, runtime);
}

model DeleteFaceImageTemplateRequest {
  templateId?: string(name='TemplateId', description='This parameter is required.', example='6cd509ea-54fa-4730-8e9d-c94cadcda048'),
}

model DeleteFaceImageTemplateResponseBody = {
  requestId?: string(name='RequestId', example='F9E76786-3A85-43C3-B79C-3175B4536252'),
}

model DeleteFaceImageTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFaceImageTemplateResponseBody(name='body'),
}

/**
 * @summary 图像人脸融合模板删除
 *
 * @param request DeleteFaceImageTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteFaceImageTemplateResponse
 */
@context("deleteFaceImageTemplateWithContext")
async function deleteFaceImageTemplateWithOptions(request: DeleteFaceImageTemplateRequest, runtime: $RuntimeOptions): DeleteFaceImageTemplateResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.templateId)) {
    body['TemplateId'] = request.templateId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteFaceImageTemplate',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 图像人脸融合模板删除
 *
 * @param request DeleteFaceImageTemplateRequest
 * @return DeleteFaceImageTemplateResponse
 */
async function deleteFaceImageTemplate(request: DeleteFaceImageTemplateRequest): DeleteFaceImageTemplateResponse {
  var runtime = new $RuntimeOptions{};
  return deleteFaceImageTemplateWithOptions(request, runtime);
}

model DetectBodyCountRequest {
  imageURL?: string(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/DetectBodyCount/DetectBodyCount3.jpg'),
}

model DetectBodyCountAdvanceRequest {
  imageURLObject?: readable(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/DetectBodyCount/DetectBodyCount3.jpg'),
}

model DetectBodyCountResponseBody = {
  data?: {
    personNumber?: int32(name='PersonNumber', example='6'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='1C709078-8886-4C91-AEDE-4E04EED0A689'),
}

model DetectBodyCountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetectBodyCountResponseBody(name='body'),
}

/**
 * @param request DetectBodyCountRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DetectBodyCountResponse
 */
@context("detectBodyCountWithContext")
async function detectBodyCountWithOptions(request: DetectBodyCountRequest, runtime: $RuntimeOptions): DetectBodyCountResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DetectBodyCount',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request DetectBodyCountRequest
 * @return DetectBodyCountResponse
 */
async function detectBodyCount(request: DetectBodyCountRequest): DetectBodyCountResponse {
  var runtime = new $RuntimeOptions{};
  return detectBodyCountWithOptions(request, runtime);
}

async function detectBodyCountAdvance(request: DetectBodyCountAdvanceRequest, runtime: $RuntimeOptions): DetectBodyCountResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'facebody',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var detectBodyCountReq = new DetectBodyCountRequest{};
  OpenApiUtil.convert(request, detectBodyCountReq);

  if(!$isNull(request.imageURLObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    detectBodyCountReq.imageURL = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var detectBodyCountResp = detectBodyCountWithOptions(detectBodyCountReq, runtime);
  return detectBodyCountResp;
}

model DetectCelebrityRequest {
  imageURL?: string(name='ImageURL', description='This parameter is required.', example='https://viapi-oss.oss-cn-shanghai.aliyuncs.com/doc/facebody/xxx.jpg'),
}

model DetectCelebrityAdvanceRequest {
  imageURLObject?: readable(name='ImageURL', description='This parameter is required.', example='https://viapi-oss.oss-cn-shanghai.aliyuncs.com/doc/facebody/xxx.jpg'),
}

model DetectCelebrityResponseBody = {
  data?: {
    faceRecognizeResults?: [ 
      {
        faceBoxes?: [ float ](name='FaceBoxes', description='1'),
        name?: string(name='Name'),
      }
    ](name='FaceRecognizeResults'),
    height?: int32(name='Height', example='1000'),
    width?: int32(name='Width', example='1000'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='4E92C0D4-BB0F-4F25-AD13-E87D02FAA205'),
}

model DetectCelebrityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetectCelebrityResponseBody(name='body'),
}

/**
 * @param request DetectCelebrityRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DetectCelebrityResponse
 */
@context("detectCelebrityWithContext")
async function detectCelebrityWithOptions(request: DetectCelebrityRequest, runtime: $RuntimeOptions): DetectCelebrityResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DetectCelebrity',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request DetectCelebrityRequest
 * @return DetectCelebrityResponse
 */
async function detectCelebrity(request: DetectCelebrityRequest): DetectCelebrityResponse {
  var runtime = new $RuntimeOptions{};
  return detectCelebrityWithOptions(request, runtime);
}

async function detectCelebrityAdvance(request: DetectCelebrityAdvanceRequest, runtime: $RuntimeOptions): DetectCelebrityResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'facebody',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var detectCelebrityReq = new DetectCelebrityRequest{};
  OpenApiUtil.convert(request, detectCelebrityReq);

  if(!$isNull(request.imageURLObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    detectCelebrityReq.imageURL = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var detectCelebrityResp = detectCelebrityWithOptions(detectCelebrityReq, runtime);
  return detectCelebrityResp;
}

model DetectFaceRequest {
  imageURL?: string(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/DetectFace/DetectFace1.png'),
  landmark?: boolean(name='Landmark', example='true'),
  maxFaceNumber?: long(name='MaxFaceNumber', example='1'),
  pose?: boolean(name='Pose', example='true'),
  quality?: boolean(name='Quality', example='true'),
}

model DetectFaceAdvanceRequest {
  imageURLObject?: readable(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/DetectFace/DetectFace1.png'),
  landmark?: boolean(name='Landmark', example='true'),
  maxFaceNumber?: long(name='MaxFaceNumber', example='1'),
  pose?: boolean(name='Pose', example='true'),
  quality?: boolean(name='Quality', example='true'),
}

model DetectFaceResponseBody = {
  data?: {
    faceCount?: int32(name='FaceCount', example='1'),
    faceProbabilityList?: [ float ](name='FaceProbabilityList', description='1'),
    faceRectangles?: [ int32 ](name='FaceRectangles', description='1'),
    landmarkCount?: int32(name='LandmarkCount', example='105'),
    landmarkScore?: [ float ](name='LandmarkScore'),
    landmarks?: [ float ](name='Landmarks', description='1'),
    poseList?: [ float ](name='PoseList', description='1'),
    pupils?: [ double ](name='Pupils', description='1'),
    qualities?: {
      blurList?: [ float ](name='BlurList', description='1'),
      fnfList?: [ float ](name='FnfList', description='1'),
      glassList?: [ float ](name='GlassList', description='1'),
      illuList?: [ float ](name='IlluList', description='1'),
      maskList?: [ float ](name='MaskList', description='1'),
      noiseList?: [ float ](name='NoiseList', description='1'),
      poseList?: [ float ](name='PoseList', description='1'),
      scoreList?: [ float ](name='ScoreList', description='1'),
    }(name='Qualities'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DetectFaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetectFaceResponseBody(name='body'),
}

/**
 * @param request DetectFaceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DetectFaceResponse
 */
@context("detectFaceWithContext")
async function detectFaceWithOptions(request: DetectFaceRequest, runtime: $RuntimeOptions): DetectFaceResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  if (!$isNull(request.landmark)) {
    body['Landmark'] = request.landmark;
  }
  if (!$isNull(request.maxFaceNumber)) {
    body['MaxFaceNumber'] = request.maxFaceNumber;
  }
  if (!$isNull(request.pose)) {
    body['Pose'] = request.pose;
  }
  if (!$isNull(request.quality)) {
    body['Quality'] = request.quality;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DetectFace',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request DetectFaceRequest
 * @return DetectFaceResponse
 */
async function detectFace(request: DetectFaceRequest): DetectFaceResponse {
  var runtime = new $RuntimeOptions{};
  return detectFaceWithOptions(request, runtime);
}

async function detectFaceAdvance(request: DetectFaceAdvanceRequest, runtime: $RuntimeOptions): DetectFaceResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'facebody',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var detectFaceReq = new DetectFaceRequest{};
  OpenApiUtil.convert(request, detectFaceReq);

  if(!$isNull(request.imageURLObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    detectFaceReq.imageURL = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var detectFaceResp = detectFaceWithOptions(detectFaceReq, runtime);
  return detectFaceResp;
}

model DetectInfraredLivingFaceRequest {
  tasks?: [ 
    {
      imageURL?: string(name='ImageURL', description='This parameter is required.', example='https://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/DetectInfraredLivingFace/DetectInfraredLivingFace.jpeg'),
    }
  ](name='Tasks', description='This parameter is required.'),
}

model DetectInfraredLivingFaceAdvanceRequest {
  tasks?: [ 
    {
      imageURLObject?: readable(name='ImageURL', description='This parameter is required.', example='https://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/DetectInfraredLivingFace/DetectInfraredLivingFace.jpeg'),
    }
  ](name='Tasks', description='This parameter is required.'),
}

model DetectInfraredLivingFaceResponseBody = {
  data?: {
    elements?: [ 
      {
        faceNumber?: long(name='FaceNumber', example='1'),
        imageURL?: string(name='ImageURL', example='http://viapi-demo.oss-cn-shanghai.aliyuncs.com/viapi-demo/images/SegmentCommonImage/segmentimage-src-hu.jpeg'),
        results?: [ 
          {
            label?: string(name='Label', example='liveness'),
            messageTips?: string(name='MessageTips', example='blurred, occluded or large angle face, please check.'),
            rate?: float(name='Rate', example='83.3848'),
            rect?: {
              height?: long(name='Height', example='20'),
              left?: long(name='Left', example='60'),
              top?: long(name='Top', example='50'),
              width?: long(name='Width', example='30'),
            }(name='Rect'),
            suggestion?: string(name='Suggestion', example='review'),
          }
        ](name='Results'),
      }
    ](name='Elements'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='68DF6EC7-3B1D-11EE-9FA7-1122F1AE92DD'),
}

model DetectInfraredLivingFaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetectInfraredLivingFaceResponseBody(name='body'),
}

/**
 * @summary 红外人脸活体检测
 *
 * @param request DetectInfraredLivingFaceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DetectInfraredLivingFaceResponse
 */
@context("detectInfraredLivingFaceWithContext")
async function detectInfraredLivingFaceWithOptions(request: DetectInfraredLivingFaceRequest, runtime: $RuntimeOptions): DetectInfraredLivingFaceResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.tasks)) {
    body['Tasks'] = request.tasks;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DetectInfraredLivingFace',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 红外人脸活体检测
 *
 * @param request DetectInfraredLivingFaceRequest
 * @return DetectInfraredLivingFaceResponse
 */
async function detectInfraredLivingFace(request: DetectInfraredLivingFaceRequest): DetectInfraredLivingFaceResponse {
  var runtime = new $RuntimeOptions{};
  return detectInfraredLivingFaceWithOptions(request, runtime);
}

async function detectInfraredLivingFaceAdvance(request: DetectInfraredLivingFaceAdvanceRequest, runtime: $RuntimeOptions): DetectInfraredLivingFaceResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'facebody',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var detectInfraredLivingFaceReq = new DetectInfraredLivingFaceRequest{};
  OpenApiUtil.convert(request, detectInfraredLivingFaceReq);

  if(!$isNull(request.tasks)) {
    var i0 : integer = 0;
    for (var item0 : request.tasks) {
      if(!$isNull(item0.imageURLObject)) {
        authResponse = authClient.callApi(authParams, authReq, runtime);
        tmpBody = $object(authResponse['body']);
        useAccelerate = $boolean(tmpBody['UseAccelerate']);
        authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
        fileObj = new $FileField{
          filename = authResponseBody['ObjectKey'],
          content = item0.imageURLObject,
          contentType = '',
        };
        ossHeader = {
          host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
          OSSAccessKeyId = authResponseBody['AccessKeyId'],
          policy = authResponseBody['EncodedPolicy'],
          Signature = authResponseBody['Signature'],
          key = authResponseBody['ObjectKey'],
          file = fileObj,
          success_action_status = '201',
        };
        _postOSSObject(authResponseBody['Bucket'], ossHeader);
        var tmpObj : DetectInfraredLivingFaceRequest.tasks = detectInfraredLivingFaceReq.tasks[i0];
        tmpObj.imageURL = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
        i0++;
      }
    }
  }
  var detectInfraredLivingFaceResp = detectInfraredLivingFaceWithOptions(detectInfraredLivingFaceReq, runtime);
  return detectInfraredLivingFaceResp;
}

model DetectLivingFaceRequest {
  tasks?: [ 
    {
      imageData?: string(name='ImageData'),
      imageURL?: string(name='ImageURL', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/DetectLivingFace/DetectLivingFace4.jpg'),
    }
  ](name='Tasks', description='This parameter is required.'),
}

model DetectLivingFaceAdvanceRequest {
  tasks?: [ 
    {
      imageData?: string(name='ImageData'),
      imageURLObject?: readable(name='ImageURL', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/DetectLivingFace/DetectLivingFace4.jpg'),
    }
  ](name='Tasks', description='This parameter is required.'),
}

model DetectLivingFaceResponseBody = {
  data?: {
    elements?: [ 
      {
        faceNumber?: long(name='FaceNumber', example='1'),
        imageURL?: string(name='ImageURL', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/DetectLivingFace/DetectLivingFace4.jpg'),
        results?: [ 
          {
            frames?: [ 
              {
                rate?: float(name='Rate', example='84.83'),
                url?: string(name='Url', example='http://aligreen-shanghai.oss-cn-shanghai.aliyuncs.com/prod/hammal/26210da42/28118541_TB1urBOQFXXXXbMXFXXXXXXXXXX-1442-257.png?Expires=1582703593&OSSAccessKeyId=H4sp5QfNbuDg****&Signature=%2B8iUkb5YjomYR8ujV2c8wMAavs****&x-oss-process=image%2Fcrop%2Cx_0%2Cw_288%2Fauto-orient%2C0'),
              }
            ](name='Frames'),
            label?: string(name='Label', example='liveness'),
            messageTips?: string(name='MessageTips', example='blurred, occluded or large angle face, please check.'),
            rate?: float(name='Rate', example='76.22'),
            rect?: {
              height?: long(name='Height', example='60'),
              left?: long(name='Left', example='20'),
              top?: long(name='Top', example='30'),
              width?: long(name='Width', example='50'),
            }(name='Rect'),
            suggestion?: string(name='Suggestion', example='review'),
          }
        ](name='Results'),
        taskId?: string(name='TaskId', example='img1owc8WGskNm78OEAPJTZal-1****'),
      }
    ](name='Elements'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='2EEA0396-BD84-5729-B8BD-D60776FCEF2B'),
}

model DetectLivingFaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetectLivingFaceResponseBody(name='body'),
}

/**
 * @summary 人脸活体检测(DetectLivingFace)
 *
 * @param request DetectLivingFaceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DetectLivingFaceResponse
 */
@context("detectLivingFaceWithContext")
async function detectLivingFaceWithOptions(request: DetectLivingFaceRequest, runtime: $RuntimeOptions): DetectLivingFaceResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.tasks)) {
    body['Tasks'] = request.tasks;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DetectLivingFace',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 人脸活体检测(DetectLivingFace)
 *
 * @param request DetectLivingFaceRequest
 * @return DetectLivingFaceResponse
 */
async function detectLivingFace(request: DetectLivingFaceRequest): DetectLivingFaceResponse {
  var runtime = new $RuntimeOptions{};
  return detectLivingFaceWithOptions(request, runtime);
}

async function detectLivingFaceAdvance(request: DetectLivingFaceAdvanceRequest, runtime: $RuntimeOptions): DetectLivingFaceResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'facebody',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var detectLivingFaceReq = new DetectLivingFaceRequest{};
  OpenApiUtil.convert(request, detectLivingFaceReq);

  if(!$isNull(request.tasks)) {
    var i0 : integer = 0;
    for (var item0 : request.tasks) {
      if(!$isNull(item0.imageURLObject)) {
        authResponse = authClient.callApi(authParams, authReq, runtime);
        tmpBody = $object(authResponse['body']);
        useAccelerate = $boolean(tmpBody['UseAccelerate']);
        authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
        fileObj = new $FileField{
          filename = authResponseBody['ObjectKey'],
          content = item0.imageURLObject,
          contentType = '',
        };
        ossHeader = {
          host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
          OSSAccessKeyId = authResponseBody['AccessKeyId'],
          policy = authResponseBody['EncodedPolicy'],
          Signature = authResponseBody['Signature'],
          key = authResponseBody['ObjectKey'],
          file = fileObj,
          success_action_status = '201',
        };
        _postOSSObject(authResponseBody['Bucket'], ossHeader);
        var tmpObj : DetectLivingFaceRequest.tasks = detectLivingFaceReq.tasks[i0];
        tmpObj.imageURL = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
        i0++;
      }
    }
  }
  var detectLivingFaceResp = detectLivingFaceWithOptions(detectLivingFaceReq, runtime);
  return detectLivingFaceResp;
}

model DetectPedestrianRequest {
  imageURL?: string(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/DetectPedestrian/DetectPedestrian8.jpg'),
}

model DetectPedestrianAdvanceRequest {
  imageURLObject?: readable(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/DetectPedestrian/DetectPedestrian8.jpg'),
}

model DetectPedestrianResponseBody = {
  data?: {
    elements?: [ 
      {
        boxes?: [ int32 ](name='Boxes', description='1'),
        score?: float(name='Score', example='0.999'),
        type?: string(name='Type', example='person'),
      }
    ](name='Elements'),
    height?: int32(name='Height', example='599'),
    width?: int32(name='Width', example='899'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='45DBA494-6250-42C4-80D1-7CF19BDD2CB1'),
}

model DetectPedestrianResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetectPedestrianResponseBody(name='body'),
}

/**
 * @param request DetectPedestrianRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DetectPedestrianResponse
 */
@context("detectPedestrianWithContext")
async function detectPedestrianWithOptions(request: DetectPedestrianRequest, runtime: $RuntimeOptions): DetectPedestrianResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DetectPedestrian',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request DetectPedestrianRequest
 * @return DetectPedestrianResponse
 */
async function detectPedestrian(request: DetectPedestrianRequest): DetectPedestrianResponse {
  var runtime = new $RuntimeOptions{};
  return detectPedestrianWithOptions(request, runtime);
}

async function detectPedestrianAdvance(request: DetectPedestrianAdvanceRequest, runtime: $RuntimeOptions): DetectPedestrianResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'facebody',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var detectPedestrianReq = new DetectPedestrianRequest{};
  OpenApiUtil.convert(request, detectPedestrianReq);

  if(!$isNull(request.imageURLObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    detectPedestrianReq.imageURL = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var detectPedestrianResp = detectPedestrianWithOptions(detectPedestrianReq, runtime);
  return detectPedestrianResp;
}

model DetectPedestrianIntrusionRequest {
  detectRegion?: [ 
    {
      line?: {
        x1?: long(name='X1', example='0'),
        x2?: long(name='X2', example='300'),
        y1?: long(name='Y1', example='0'),
        y2?: long(name='Y2', example='300'),
      }(name='Line'),
      rect?: {
        bottom?: long(name='Bottom', example='300'),
        left?: long(name='Left', example='0'),
        right?: long(name='Right', example='300'),
        top?: long(name='Top', example='0'),
      }(name='Rect'),
    }
  ](name='DetectRegion', description='This parameter is required.'),
  imageURL?: string(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/DetectPedestrianIntrusion/DetectPedestrianIntrusion2.jpg'),
  regionType?: string(name='RegionType', description='This parameter is required.', example='rectangle'),
}

model DetectPedestrianIntrusionAdvanceRequest {
  detectRegion?: [ 
    {
      line?: {
        x1?: long(name='X1', example='0'),
        x2?: long(name='X2', example='300'),
        y1?: long(name='Y1', example='0'),
        y2?: long(name='Y2', example='300'),
      }(name='Line'),
      rect?: {
        bottom?: long(name='Bottom', example='300'),
        left?: long(name='Left', example='0'),
        right?: long(name='Right', example='300'),
        top?: long(name='Top', example='0'),
      }(name='Rect'),
    }
  ](name='DetectRegion', description='This parameter is required.'),
  imageURLObject?: readable(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/DetectPedestrianIntrusion/DetectPedestrianIntrusion2.jpg'),
  regionType?: string(name='RegionType', description='This parameter is required.', example='rectangle'),
}

model DetectPedestrianIntrusionShrinkRequest {
  detectRegionShrink?: string(name='DetectRegion', description='This parameter is required.'),
  imageURL?: string(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/DetectPedestrianIntrusion/DetectPedestrianIntrusion2.jpg'),
  regionType?: string(name='RegionType', description='This parameter is required.', example='rectangle'),
}

model DetectPedestrianIntrusionResponseBody = {
  data?: {
    elements?: [ 
      {
        box?: {
          bottom?: long(name='Bottom', example='551'),
          left?: long(name='Left', example='175'),
          right?: long(name='Right', example='418'),
          top?: long(name='Top', example='153'),
        }(name='Box'),
        boxId?: long(name='BoxId', example='0'),
        isIntrude?: boolean(name='IsIntrude', example='false'),
        score?: long(name='Score', example='0.950289249420166'),
        type?: string(name='Type', example='person'),
      }
    ](name='Elements'),
    imageHeight?: long(name='ImageHeight', example='599'),
    imageWidth?: long(name='ImageWidth', example='899'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='AA2539F7-D139-458C-A9BA-3321318D6BC4'),
}

model DetectPedestrianIntrusionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetectPedestrianIntrusionResponseBody(name='body'),
}

/**
 * @summary 行人周界/区域入侵检测
 *
 * @param tmpReq DetectPedestrianIntrusionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DetectPedestrianIntrusionResponse
 */
@context("detectPedestrianIntrusionWithContext")
async function detectPedestrianIntrusionWithOptions(tmpReq: DetectPedestrianIntrusionRequest, runtime: $RuntimeOptions): DetectPedestrianIntrusionResponse {
  tmpReq.validate();
  var request = new DetectPedestrianIntrusionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.detectRegion)) {
    request.detectRegionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.detectRegion, 'DetectRegion', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.detectRegionShrink)) {
    body['DetectRegion'] = request.detectRegionShrink;
  }
  if (!$isNull(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  if (!$isNull(request.regionType)) {
    body['RegionType'] = request.regionType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DetectPedestrianIntrusion',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 行人周界/区域入侵检测
 *
 * @param request DetectPedestrianIntrusionRequest
 * @return DetectPedestrianIntrusionResponse
 */
async function detectPedestrianIntrusion(request: DetectPedestrianIntrusionRequest): DetectPedestrianIntrusionResponse {
  var runtime = new $RuntimeOptions{};
  return detectPedestrianIntrusionWithOptions(request, runtime);
}

async function detectPedestrianIntrusionAdvance(request: DetectPedestrianIntrusionAdvanceRequest, runtime: $RuntimeOptions): DetectPedestrianIntrusionResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'facebody',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var detectPedestrianIntrusionReq = new DetectPedestrianIntrusionRequest{};
  OpenApiUtil.convert(request, detectPedestrianIntrusionReq);

  if(!$isNull(request.imageURLObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    detectPedestrianIntrusionReq.imageURL = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var detectPedestrianIntrusionResp = detectPedestrianIntrusionWithOptions(detectPedestrianIntrusionReq, runtime);
  return detectPedestrianIntrusionResp;
}

model DetectVideoLivingFaceRequest {
  videoUrl?: string(name='VideoUrl', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/DetectVideoLivingFace/DetectVideoLivingFace1.mp4'),
}

model DetectVideoLivingFaceAdvanceRequest {
  videoUrlObject?: readable(name='VideoUrl', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/DetectVideoLivingFace/DetectVideoLivingFace1.mp4'),
}

model DetectVideoLivingFaceResponseBody = {
  data?: {
    elements?: [ 
      {
        faceConfidence?: float(name='FaceConfidence', example='0.84644949436187744'),
        liveConfidence?: float(name='LiveConfidence', example='0.72464925050735474'),
        rect?: [ int32 ](name='Rect'),
      }
    ](name='Elements'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='8E92F28B-F889-48CB-9FCC-3207CFA2215E'),
}

model DetectVideoLivingFaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetectVideoLivingFaceResponseBody(name='body'),
}

/**
 * @param request DetectVideoLivingFaceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DetectVideoLivingFaceResponse
 */
@context("detectVideoLivingFaceWithContext")
async function detectVideoLivingFaceWithOptions(request: DetectVideoLivingFaceRequest, runtime: $RuntimeOptions): DetectVideoLivingFaceResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.videoUrl)) {
    body['VideoUrl'] = request.videoUrl;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DetectVideoLivingFace',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request DetectVideoLivingFaceRequest
 * @return DetectVideoLivingFaceResponse
 */
async function detectVideoLivingFace(request: DetectVideoLivingFaceRequest): DetectVideoLivingFaceResponse {
  var runtime = new $RuntimeOptions{};
  return detectVideoLivingFaceWithOptions(request, runtime);
}

async function detectVideoLivingFaceAdvance(request: DetectVideoLivingFaceAdvanceRequest, runtime: $RuntimeOptions): DetectVideoLivingFaceResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'facebody',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var detectVideoLivingFaceReq = new DetectVideoLivingFaceRequest{};
  OpenApiUtil.convert(request, detectVideoLivingFaceReq);

  if(!$isNull(request.videoUrlObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.videoUrlObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    detectVideoLivingFaceReq.videoUrl = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var detectVideoLivingFaceResp = detectVideoLivingFaceWithOptions(detectVideoLivingFaceReq, runtime);
  return detectVideoLivingFaceResp;
}

model EnhanceFaceRequest {
  imageURL?: string(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/EnhanceFace/EnhanceFace1.png'),
}

model EnhanceFaceAdvanceRequest {
  imageURLObject?: readable(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/EnhanceFace/EnhanceFace1.png'),
}

model EnhanceFaceResponseBody = {
  data?: {
    imageURL?: string(name='ImageURL', example='http://vibktprfx-prod-prod-aic-vd-cn-shanghai.oss-cn-shanghai.aliyuncs.com/face-enhancement/2021-11-30/8e34b61c-abcf-4708-9d9d-6501968ee806/20211130_080644126523_47ct9w3pgh.jpg?Expires=1638261404&OSSAccessKeyId=LTAI4FoLmvQ9urWXgSRp****&Signature=2wPdcuCmr%2F86WpBL3HQJw5uCFl****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='8B031473-6773-4A4C-AF33-A233758E6E98'),
}

model EnhanceFaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnhanceFaceResponseBody(name='body'),
}

/**
 * @param request EnhanceFaceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return EnhanceFaceResponse
 */
@context("enhanceFaceWithContext")
async function enhanceFaceWithOptions(request: EnhanceFaceRequest, runtime: $RuntimeOptions): EnhanceFaceResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'EnhanceFace',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request EnhanceFaceRequest
 * @return EnhanceFaceResponse
 */
async function enhanceFace(request: EnhanceFaceRequest): EnhanceFaceResponse {
  var runtime = new $RuntimeOptions{};
  return enhanceFaceWithOptions(request, runtime);
}

async function enhanceFaceAdvance(request: EnhanceFaceAdvanceRequest, runtime: $RuntimeOptions): EnhanceFaceResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'facebody',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var enhanceFaceReq = new EnhanceFaceRequest{};
  OpenApiUtil.convert(request, enhanceFaceReq);

  if(!$isNull(request.imageURLObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    enhanceFaceReq.imageURL = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var enhanceFaceResp = enhanceFaceWithOptions(enhanceFaceReq, runtime);
  return enhanceFaceResp;
}

model ExtractFingerPrintRequest {
  imageData?: string(name='ImageData', example='iVBORw0KGgoAAAANSUhEUgAAASUAA****'),
  imageURL?: string(name='ImageURL', example='https://viapi-test.oss-cn-shanghai.aliyuncs.com/test-team/xuhan/ExtractFingerPrint.png'),
}

model ExtractFingerPrintAdvanceRequest {
  imageData?: string(name='ImageData', example='iVBORw0KGgoAAAANSUhEUgAAASUAA****'),
  imageURLObject?: readable(name='ImageURL', example='https://viapi-test.oss-cn-shanghai.aliyuncs.com/test-team/xuhan/ExtractFingerPrint.png'),
}

model ExtractFingerPrintResponseBody = {
  data?: {
    fingerPrint?: string(name='FingerPrint', example='/9j/4AAQSkZJRgABAQAAAQABAAD****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='D21978CC-C1E7-4A7A-A1B2-D5896BDC7ADF'),
}

model ExtractFingerPrintResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExtractFingerPrintResponseBody(name='body'),
}

/**
 * @summary 指纹提取
 *
 * @param request ExtractFingerPrintRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ExtractFingerPrintResponse
 */
@context("extractFingerPrintWithContext")
async function extractFingerPrintWithOptions(request: ExtractFingerPrintRequest, runtime: $RuntimeOptions): ExtractFingerPrintResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.imageData)) {
    body['ImageData'] = request.imageData;
  }
  if (!$isNull(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ExtractFingerPrint',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 指纹提取
 *
 * @param request ExtractFingerPrintRequest
 * @return ExtractFingerPrintResponse
 */
async function extractFingerPrint(request: ExtractFingerPrintRequest): ExtractFingerPrintResponse {
  var runtime = new $RuntimeOptions{};
  return extractFingerPrintWithOptions(request, runtime);
}

async function extractFingerPrintAdvance(request: ExtractFingerPrintAdvanceRequest, runtime: $RuntimeOptions): ExtractFingerPrintResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'facebody',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var extractFingerPrintReq = new ExtractFingerPrintRequest{};
  OpenApiUtil.convert(request, extractFingerPrintReq);

  if(!$isNull(request.imageURLObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    extractFingerPrintReq.imageURL = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var extractFingerPrintResp = extractFingerPrintWithOptions(extractFingerPrintReq, runtime);
  return extractFingerPrintResp;
}

model FaceBeautyRequest {
  imageURL?: string(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/FaceBeauty/FaceBeauty4.png'),
  sharp?: float(name='Sharp', description='This parameter is required.', example='1'),
  smooth?: float(name='Smooth', description='This parameter is required.', example='0.1'),
  white?: float(name='White', description='This parameter is required.', example='0.3'),
}

model FaceBeautyAdvanceRequest {
  imageURLObject?: readable(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/FaceBeauty/FaceBeauty4.png'),
  sharp?: float(name='Sharp', description='This parameter is required.', example='1'),
  smooth?: float(name='Smooth', description='This parameter is required.', example='0.1'),
  white?: float(name='White', description='This parameter is required.', example='0.3'),
}

model FaceBeautyResponseBody = {
  data?: {
    imageURL?: string(name='ImageURL', example='http://algo-app-taobao-mm-cn-shanghai-prod.oss-cn-shanghai.aliyuncs.com/pixelai-portrait-beauty/2020_03_24/2bbbdb7907901412_facebeauty.jpg?Expires=1585277923&OSSAccessKeyId=LTAI4FoLmvQ9urWXgSRp****&Signature=myOPfNQcRyijgrWBU%2BZ4dPuV5Q****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='35C284E1-C5F5-4E5E-B7AD-97BBF485CDC8'),
}

model FaceBeautyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FaceBeautyResponseBody(name='body'),
}

/**
 * @param request FaceBeautyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return FaceBeautyResponse
 */
@context("faceBeautyWithContext")
async function faceBeautyWithOptions(request: FaceBeautyRequest, runtime: $RuntimeOptions): FaceBeautyResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  if (!$isNull(request.sharp)) {
    body['Sharp'] = request.sharp;
  }
  if (!$isNull(request.smooth)) {
    body['Smooth'] = request.smooth;
  }
  if (!$isNull(request.white)) {
    body['White'] = request.white;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'FaceBeauty',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request FaceBeautyRequest
 * @return FaceBeautyResponse
 */
async function faceBeauty(request: FaceBeautyRequest): FaceBeautyResponse {
  var runtime = new $RuntimeOptions{};
  return faceBeautyWithOptions(request, runtime);
}

async function faceBeautyAdvance(request: FaceBeautyAdvanceRequest, runtime: $RuntimeOptions): FaceBeautyResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'facebody',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var faceBeautyReq = new FaceBeautyRequest{};
  OpenApiUtil.convert(request, faceBeautyReq);

  if(!$isNull(request.imageURLObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    faceBeautyReq.imageURL = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var faceBeautyResp = faceBeautyWithOptions(faceBeautyReq, runtime);
  return faceBeautyResp;
}

model FaceMakeupRequest {
  imageURL?: string(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/FaceMakeup/FaceMakeup8.png'),
  makeupType?: string(name='MakeupType', description='This parameter is required.', example='whole'),
  resourceType?: string(name='ResourceType', description='This parameter is required.', example='0'),
  strength?: float(name='Strength', description='This parameter is required.', example='1'),
}

model FaceMakeupAdvanceRequest {
  imageURLObject?: readable(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/FaceMakeup/FaceMakeup8.png'),
  makeupType?: string(name='MakeupType', description='This parameter is required.', example='whole'),
  resourceType?: string(name='ResourceType', description='This parameter is required.', example='0'),
  strength?: float(name='Strength', description='This parameter is required.', example='1'),
}

model FaceMakeupResponseBody = {
  data?: {
    imageURL?: string(name='ImageURL', example='http://algo-app-taobao-mm-cn-shanghai-prod.oss-cn-shanghai.aliyuncs.com/pixelai-portrait-makeup/2020_03_24/c0f815f46b3df61e_facebeauty.jpg?Expires=1585279130&OSSAccessKeyId=LTAI4FoLmvQ9urWXgSRp****&Signature=1QkDpev9B7ybzup1MN%2F72kzrKL****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='AAECB606-E752-4CEA-8EA5-6EBE942A7663'),
}

model FaceMakeupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FaceMakeupResponseBody(name='body'),
}

/**
 * @param request FaceMakeupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return FaceMakeupResponse
 */
@context("faceMakeupWithContext")
async function faceMakeupWithOptions(request: FaceMakeupRequest, runtime: $RuntimeOptions): FaceMakeupResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  if (!$isNull(request.makeupType)) {
    body['MakeupType'] = request.makeupType;
  }
  if (!$isNull(request.resourceType)) {
    body['ResourceType'] = request.resourceType;
  }
  if (!$isNull(request.strength)) {
    body['Strength'] = request.strength;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'FaceMakeup',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request FaceMakeupRequest
 * @return FaceMakeupResponse
 */
async function faceMakeup(request: FaceMakeupRequest): FaceMakeupResponse {
  var runtime = new $RuntimeOptions{};
  return faceMakeupWithOptions(request, runtime);
}

async function faceMakeupAdvance(request: FaceMakeupAdvanceRequest, runtime: $RuntimeOptions): FaceMakeupResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'facebody',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var faceMakeupReq = new FaceMakeupRequest{};
  OpenApiUtil.convert(request, faceMakeupReq);

  if(!$isNull(request.imageURLObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    faceMakeupReq.imageURL = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var faceMakeupResp = faceMakeupWithOptions(faceMakeupReq, runtime);
  return faceMakeupResp;
}

model FaceTidyupRequest {
  imageURL?: string(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/FaceTidyup/FaceTidyup5.png'),
  shapeType?: int32(name='ShapeType', description='This parameter is required.', example='0'),
  strength?: float(name='Strength', description='This parameter is required.', example='1'),
}

model FaceTidyupAdvanceRequest {
  imageURLObject?: readable(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/FaceTidyup/FaceTidyup5.png'),
  shapeType?: int32(name='ShapeType', description='This parameter is required.', example='0'),
  strength?: float(name='Strength', description='This parameter is required.', example='1'),
}

model FaceTidyupResponseBody = {
  data?: {
    imageURL?: string(name='ImageURL', example='http://algo-app-taobao-mm-cn-shanghai-prod.oss-cn-shanghai.aliyuncs.com/pixelai-portrait-shape/2020_03_24/7cb93b25ac5cbbb4_facetidy.jpg?Expires=1585280344&OSSAccessKeyId=LTAI4FoLmvQ9urWXgSRp****&Signature=RIPIlTZ2GNmdLyACGWz6wUzJxN****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='8F3BF64D-4FDF-4AAF-9B34-11B4EF4CE815'),
}

model FaceTidyupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FaceTidyupResponseBody(name='body'),
}

/**
 * @param request FaceTidyupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return FaceTidyupResponse
 */
@context("faceTidyupWithContext")
async function faceTidyupWithOptions(request: FaceTidyupRequest, runtime: $RuntimeOptions): FaceTidyupResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  if (!$isNull(request.shapeType)) {
    body['ShapeType'] = request.shapeType;
  }
  if (!$isNull(request.strength)) {
    body['Strength'] = request.strength;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'FaceTidyup',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request FaceTidyupRequest
 * @return FaceTidyupResponse
 */
async function faceTidyup(request: FaceTidyupRequest): FaceTidyupResponse {
  var runtime = new $RuntimeOptions{};
  return faceTidyupWithOptions(request, runtime);
}

async function faceTidyupAdvance(request: FaceTidyupAdvanceRequest, runtime: $RuntimeOptions): FaceTidyupResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'facebody',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var faceTidyupReq = new FaceTidyupRequest{};
  OpenApiUtil.convert(request, faceTidyupReq);

  if(!$isNull(request.imageURLObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    faceTidyupReq.imageURL = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var faceTidyupResp = faceTidyupWithOptions(faceTidyupReq, runtime);
  return faceTidyupResp;
}

model GenRealPersonVerificationTokenRequest {
  certificateName?: string(name='CertificateName', description='This parameter is required.'),
  certificateNumber?: string(name='CertificateNumber', description='This parameter is required.', example='33010219001123123X'),
  metaInfo?: string(name='MetaInfo', description='This parameter is required.', example='{"dwe":"ew4e"...}'),
}

model GenRealPersonVerificationTokenResponseBody = {
  data?: {
    verificationToken?: string(name='VerificationToken', example='9fca3791c158a479ead9f2ba65ab3XXX'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='A31006F2-22E7-4538-93BB-DE6B563643EE'),
}

model GenRealPersonVerificationTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenRealPersonVerificationTokenResponseBody(name='body'),
}

/**
 * @param request GenRealPersonVerificationTokenRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GenRealPersonVerificationTokenResponse
 */
@context("genRealPersonVerificationTokenWithContext")
async function genRealPersonVerificationTokenWithOptions(request: GenRealPersonVerificationTokenRequest, runtime: $RuntimeOptions): GenRealPersonVerificationTokenResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.certificateName)) {
    body['CertificateName'] = request.certificateName;
  }
  if (!$isNull(request.certificateNumber)) {
    body['CertificateNumber'] = request.certificateNumber;
  }
  if (!$isNull(request.metaInfo)) {
    body['MetaInfo'] = request.metaInfo;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'GenRealPersonVerificationToken',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request GenRealPersonVerificationTokenRequest
 * @return GenRealPersonVerificationTokenResponse
 */
async function genRealPersonVerificationToken(request: GenRealPersonVerificationTokenRequest): GenRealPersonVerificationTokenResponse {
  var runtime = new $RuntimeOptions{};
  return genRealPersonVerificationTokenWithOptions(request, runtime);
}

model GenerateHumanAnimeStyleRequest {
  algoType?: string(name='AlgoType', example='anime'),
  imageURL?: string(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/GenerateHumanAnimeStyle/GenerateHumanAnimeStyle8.png'),
}

model GenerateHumanAnimeStyleAdvanceRequest {
  algoType?: string(name='AlgoType', example='anime'),
  imageURLObject?: readable(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/GenerateHumanAnimeStyle/GenerateHumanAnimeStyle8.png'),
}

model GenerateHumanAnimeStyleResponseBody = {
  data?: {
    imageURL?: string(name='ImageURL', example='http://vibktprfx-prod-prod-aic-gd-cn-shanghai.oss-cn-shanghai.aliyuncs.com/person-image-cartoonizer/59697D68-2A6E-4553-89BD-0FADD07881E8_7ee5_20201027-070958.jpg?Expires=1603784400&OSSAccessKeyId=LTAI4FoLmvQ9urWXgSR****&Signature=ut2kn46Lz%2FRwqJ9jWJ0RBDut12****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='59697D68-2A6E-4553-89BD-0FADD07881E8'),
}

model GenerateHumanAnimeStyleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateHumanAnimeStyleResponseBody(name='body'),
}

/**
 * @param request GenerateHumanAnimeStyleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GenerateHumanAnimeStyleResponse
 */
@context("generateHumanAnimeStyleWithContext")
async function generateHumanAnimeStyleWithOptions(request: GenerateHumanAnimeStyleRequest, runtime: $RuntimeOptions): GenerateHumanAnimeStyleResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.algoType)) {
    query['AlgoType'] = request.algoType;
  }
  if (!$isNull(request.imageURL)) {
    query['ImageURL'] = request.imageURL;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GenerateHumanAnimeStyle',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request GenerateHumanAnimeStyleRequest
 * @return GenerateHumanAnimeStyleResponse
 */
async function generateHumanAnimeStyle(request: GenerateHumanAnimeStyleRequest): GenerateHumanAnimeStyleResponse {
  var runtime = new $RuntimeOptions{};
  return generateHumanAnimeStyleWithOptions(request, runtime);
}

async function generateHumanAnimeStyleAdvance(request: GenerateHumanAnimeStyleAdvanceRequest, runtime: $RuntimeOptions): GenerateHumanAnimeStyleResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'facebody',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var generateHumanAnimeStyleReq = new GenerateHumanAnimeStyleRequest{};
  OpenApiUtil.convert(request, generateHumanAnimeStyleReq);

  if(!$isNull(request.imageURLObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    generateHumanAnimeStyleReq.imageURL = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var generateHumanAnimeStyleResp = generateHumanAnimeStyleWithOptions(generateHumanAnimeStyleReq, runtime);
  return generateHumanAnimeStyleResp;
}

model GenerateHumanSketchStyleRequest {
  imageURL?: string(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/GenerateHumanSketchStyle/GenerateHumanSketchStyle7.png'),
  returnType?: string(name='ReturnType', example='head'),
}

model GenerateHumanSketchStyleAdvanceRequest {
  imageURLObject?: readable(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/GenerateHumanSketchStyle/GenerateHumanSketchStyle7.png'),
  returnType?: string(name='ReturnType', example='head'),
}

model GenerateHumanSketchStyleResponseBody = {
  data?: {
    imageURL?: string(name='ImageURL', example='http://vibktprfx-prod-prod-aic-gd-cn-shanghai.oss-cn-shanghai.aliyuncs.com/person-image-pencil/fd49dd0a-9e24-4bb5-b303-0745cdb453e0_7aa6_20210128-073045.jpg?Expires=1611820849&OSSAccessKeyId=LTAI4FoLmvQ9urWXgSRp****&Signature=1oLYG%2FPe%2BNRIK7XcsUQYaKF%2B1C****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='E499788C-22DA-4F0E-B9C0-0E9D30A25716'),
}

model GenerateHumanSketchStyleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateHumanSketchStyleResponseBody(name='body'),
}

/**
 * @summary 人像素描风格化
 *
 * @param request GenerateHumanSketchStyleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GenerateHumanSketchStyleResponse
 */
@context("generateHumanSketchStyleWithContext")
async function generateHumanSketchStyleWithOptions(request: GenerateHumanSketchStyleRequest, runtime: $RuntimeOptions): GenerateHumanSketchStyleResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  if (!$isNull(request.returnType)) {
    body['ReturnType'] = request.returnType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'GenerateHumanSketchStyle',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 人像素描风格化
 *
 * @param request GenerateHumanSketchStyleRequest
 * @return GenerateHumanSketchStyleResponse
 */
async function generateHumanSketchStyle(request: GenerateHumanSketchStyleRequest): GenerateHumanSketchStyleResponse {
  var runtime = new $RuntimeOptions{};
  return generateHumanSketchStyleWithOptions(request, runtime);
}

async function generateHumanSketchStyleAdvance(request: GenerateHumanSketchStyleAdvanceRequest, runtime: $RuntimeOptions): GenerateHumanSketchStyleResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'facebody',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var generateHumanSketchStyleReq = new GenerateHumanSketchStyleRequest{};
  OpenApiUtil.convert(request, generateHumanSketchStyleReq);

  if(!$isNull(request.imageURLObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    generateHumanSketchStyleReq.imageURL = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var generateHumanSketchStyleResp = generateHumanSketchStyleWithOptions(generateHumanSketchStyleReq, runtime);
  return generateHumanSketchStyleResp;
}

model GetFaceEntityRequest {
  dbName?: string(name='DbName', description='This parameter is required.', example='default'),
  entityId?: string(name='EntityId', description='This parameter is required.', example='66'),
}

model GetFaceEntityResponseBody = {
  data?: {
    dbName?: string(name='DbName', example='default'),
    entityId?: string(name='EntityId', example='66'),
    faces?: [ 
      {
        faceId?: string(name='FaceId', example='3'),
      }
    ](name='Faces'),
    labels?: string(name='Labels'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='DA7CAFEB-0A37-4496-9CDF-E3DBB6309CB2'),
}

model GetFaceEntityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFaceEntityResponseBody(name='body'),
}

/**
 * @param request GetFaceEntityRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetFaceEntityResponse
 */
@context("getFaceEntityWithContext")
async function getFaceEntityWithOptions(request: GetFaceEntityRequest, runtime: $RuntimeOptions): GetFaceEntityResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.dbName)) {
    body['DbName'] = request.dbName;
  }
  if (!$isNull(request.entityId)) {
    body['EntityId'] = request.entityId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetFaceEntity',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request GetFaceEntityRequest
 * @return GetFaceEntityResponse
 */
async function getFaceEntity(request: GetFaceEntityRequest): GetFaceEntityResponse {
  var runtime = new $RuntimeOptions{};
  return getFaceEntityWithOptions(request, runtime);
}

model GetRealPersonVerificationResultRequest {
  verificationToken?: string(name='VerificationToken', description='This parameter is required.', example='cwek23dw24geor89230hf2rw'),
}

model GetRealPersonVerificationResultResponseBody = {
  data?: {
    passed?: boolean(name='Passed', example='true'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='10FC953D-7C0C-4915-8949-34E3246E5B79'),
}

model GetRealPersonVerificationResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRealPersonVerificationResultResponseBody(name='body'),
}

/**
 * @param request GetRealPersonVerificationResultRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetRealPersonVerificationResultResponse
 */
@context("getRealPersonVerificationResultWithContext")
async function getRealPersonVerificationResultWithOptions(request: GetRealPersonVerificationResultRequest, runtime: $RuntimeOptions): GetRealPersonVerificationResultResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.verificationToken)) {
    body['VerificationToken'] = request.verificationToken;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetRealPersonVerificationResult',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request GetRealPersonVerificationResultRequest
 * @return GetRealPersonVerificationResultResponse
 */
async function getRealPersonVerificationResult(request: GetRealPersonVerificationResultRequest): GetRealPersonVerificationResultResponse {
  var runtime = new $RuntimeOptions{};
  return getRealPersonVerificationResultWithOptions(request, runtime);
}

model HandPostureRequest {
  imageURL?: string(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/HandPosture/HandPosture3.jpg'),
}

model HandPostureAdvanceRequest {
  imageURLObject?: readable(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/HandPosture/HandPosture3.jpg'),
}

model HandPostureResponseBody = {
  data?: {
    metaObject?: {
      height?: int32(name='Height', example='600'),
      width?: int32(name='Width', example='500'),
    }(name='MetaObject'),
    outputs?: [ 
      {
        handCount?: int32(name='HandCount', example='1'),
        results?: [ 
          {
            box?: {
              confident?: float(name='Confident', example='0.555'),
              positions?: [ 
                {
                  points?: [ float ](name='Points'),
                }
              ](name='Positions'),
            }(name='Box'),
            hands?: {
              confident?: float(name='Confident', example='0.555'),
              keyPoints?: [ 
                {
                  label?: string(name='Label', example='thumb'),
                  positions?: [ 
                    {
                      points?: [ float ](name='Points'),
                    }
                  ](name='Positions'),
                }
              ](name='KeyPoints'),
            }(name='Hands'),
          }
        ](name='Results'),
      }
    ](name='Outputs'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='99CE0601-FA61-4A41-BBF0-72D3E1FF5139'),
}

model HandPostureResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: HandPostureResponseBody(name='body'),
}

/**
 * @param request HandPostureRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return HandPostureResponse
 */
@context("handPostureWithContext")
async function handPostureWithOptions(request: HandPostureRequest, runtime: $RuntimeOptions): HandPostureResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'HandPosture',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request HandPostureRequest
 * @return HandPostureResponse
 */
async function handPosture(request: HandPostureRequest): HandPostureResponse {
  var runtime = new $RuntimeOptions{};
  return handPostureWithOptions(request, runtime);
}

async function handPostureAdvance(request: HandPostureAdvanceRequest, runtime: $RuntimeOptions): HandPostureResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'facebody',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var handPostureReq = new HandPostureRequest{};
  OpenApiUtil.convert(request, handPostureReq);

  if(!$isNull(request.imageURLObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    handPostureReq.imageURL = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var handPostureResp = handPostureWithOptions(handPostureReq, runtime);
  return handPostureResp;
}

model LiquifyFaceRequest {
  imageURL?: string(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/LiquifyFace/LiquifyFace1.png'),
  slimDegree?: float(name='SlimDegree', example='1.0'),
}

model LiquifyFaceAdvanceRequest {
  imageURLObject?: readable(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/LiquifyFace/LiquifyFace1.png'),
  slimDegree?: float(name='SlimDegree', example='1.0'),
}

model LiquifyFaceResponseBody = {
  data?: {
    imageURL?: string(name='ImageURL', example='http://vibktprfx-prod-prod-aic-gd-cn-shanghai.oss-cn-shanghai.aliyuncs.com/face-liquify/CA1C8937-B30C-15E6-B804-41C357BA413B_5eca_20210923-093411.jpg?Expires=1632391451&OSSAccessKeyId=LTAI4FoLmvQ9urWXgSRp****&Signature=46apJQVNBz%2FFzDLEYn2M1w9MKA****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='CA1C8937-B30C-15E6-B804-41C357BA413B'),
}

model LiquifyFaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: LiquifyFaceResponseBody(name='body'),
}

/**
 * @summary 智能瘦脸
 *
 * @param request LiquifyFaceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return LiquifyFaceResponse
 */
@context("liquifyFaceWithContext")
async function liquifyFaceWithOptions(request: LiquifyFaceRequest, runtime: $RuntimeOptions): LiquifyFaceResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  if (!$isNull(request.slimDegree)) {
    body['SlimDegree'] = request.slimDegree;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'LiquifyFace',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 智能瘦脸
 *
 * @param request LiquifyFaceRequest
 * @return LiquifyFaceResponse
 */
async function liquifyFace(request: LiquifyFaceRequest): LiquifyFaceResponse {
  var runtime = new $RuntimeOptions{};
  return liquifyFaceWithOptions(request, runtime);
}

async function liquifyFaceAdvance(request: LiquifyFaceAdvanceRequest, runtime: $RuntimeOptions): LiquifyFaceResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'facebody',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var liquifyFaceReq = new LiquifyFaceRequest{};
  OpenApiUtil.convert(request, liquifyFaceReq);

  if(!$isNull(request.imageURLObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    liquifyFaceReq.imageURL = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var liquifyFaceResp = liquifyFaceWithOptions(liquifyFaceReq, runtime);
  return liquifyFaceResp;
}

model ListFaceDbsRequest {
  limit?: long(name='Limit', example='50'),
  offset?: long(name='Offset', example='1'),
}

model ListFaceDbsResponseBody = {
  data?: {
    dbList?: [ 
      {
        name?: string(name='Name', example='default'),
      }
    ](name='DbList'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='2B93C43A-F824-40C8-AF79-844342B0F43A'),
}

model ListFaceDbsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFaceDbsResponseBody(name='body'),
}

/**
 * @param request ListFaceDbsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListFaceDbsResponse
 */
@context("listFaceDbsWithContext")
async function listFaceDbsWithOptions(request: ListFaceDbsRequest, runtime: $RuntimeOptions): ListFaceDbsResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.limit)) {
    body['Limit'] = request.limit;
  }
  if (!$isNull(request.offset)) {
    body['Offset'] = request.offset;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListFaceDbs',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request ListFaceDbsRequest
 * @return ListFaceDbsResponse
 */
async function listFaceDbs(request: ListFaceDbsRequest): ListFaceDbsResponse {
  var runtime = new $RuntimeOptions{};
  return listFaceDbsWithOptions(request, runtime);
}

model ListFaceEntitiesRequest {
  dbName?: string(name='DbName', description='This parameter is required.', example='default'),
  entityIdPrefix?: string(name='EntityIdPrefix', example='U1'),
  labels?: string(name='Labels'),
  limit?: int32(name='Limit', example='50'),
  offset?: int32(name='Offset', example='1'),
  order?: string(name='Order', example='asc'),
  token?: string(name='Token', example='2'),
}

model ListFaceEntitiesResponseBody = {
  data?: {
    entities?: [ 
      {
        createdAt?: long(name='CreatedAt', example='1589203871832'),
        dbName?: string(name='DbName', example='default'),
        entityId?: string(name='EntityId', example='222'),
        faceCount?: int32(name='FaceCount', example='3'),
        labels?: string(name='Labels'),
        updatedAt?: long(name='UpdatedAt', example='1589203871832'),
      }
    ](name='Entities'),
    token?: string(name='Token', example='2'),
    totalCount?: int32(name='TotalCount', example='200'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='DA7CAFEB-0A37-4496-9CDF-E3DBB6309CB2'),
}

model ListFaceEntitiesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFaceEntitiesResponseBody(name='body'),
}

/**
 * @param request ListFaceEntitiesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListFaceEntitiesResponse
 */
@context("listFaceEntitiesWithContext")
async function listFaceEntitiesWithOptions(request: ListFaceEntitiesRequest, runtime: $RuntimeOptions): ListFaceEntitiesResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.dbName)) {
    body['DbName'] = request.dbName;
  }
  if (!$isNull(request.entityIdPrefix)) {
    body['EntityIdPrefix'] = request.entityIdPrefix;
  }
  if (!$isNull(request.labels)) {
    body['Labels'] = request.labels;
  }
  if (!$isNull(request.limit)) {
    body['Limit'] = request.limit;
  }
  if (!$isNull(request.offset)) {
    body['Offset'] = request.offset;
  }
  if (!$isNull(request.order)) {
    body['Order'] = request.order;
  }
  if (!$isNull(request.token)) {
    body['Token'] = request.token;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListFaceEntities',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request ListFaceEntitiesRequest
 * @return ListFaceEntitiesResponse
 */
async function listFaceEntities(request: ListFaceEntitiesRequest): ListFaceEntitiesResponse {
  var runtime = new $RuntimeOptions{};
  return listFaceEntitiesWithOptions(request, runtime);
}

model MergeImageFaceRequest {
  addWatermark?: boolean(name='AddWatermark', example='False'),
  imageURL?: string(name='ImageURL', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/MergeImageFace/MergeImageFace-1.png'),
  mergeInfos?: [ 
    {
      imageURL?: string(name='ImageURL', example='http://invi-label.oss-cn-shanghai.aliyuncs.com/label/temp/faceswap/ref/ref.jpg'),
      templateFaceID?: string(name='TemplateFaceID', example='6cd509ea-54fa-4730-8e9d-c94cadcda048_0'),
    }
  ](name='MergeInfos'),
  modelVersion?: string(name='ModelVersion', example='v1'),
  templateId?: string(name='TemplateId', description='This parameter is required.', example='6cd509ea-54fa-4730-8e9d-c94cadcda048'),
  watermarkType?: string(name='WatermarkType'),
}

model MergeImageFaceAdvanceRequest {
  addWatermark?: boolean(name='AddWatermark', example='False'),
  imageURLObject?: readable(name='ImageURL', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/MergeImageFace/MergeImageFace-1.png'),
  mergeInfos?: [ 
    {
      imageURL?: string(name='ImageURL', example='http://invi-label.oss-cn-shanghai.aliyuncs.com/label/temp/faceswap/ref/ref.jpg'),
      templateFaceID?: string(name='TemplateFaceID', example='6cd509ea-54fa-4730-8e9d-c94cadcda048_0'),
    }
  ](name='MergeInfos'),
  modelVersion?: string(name='ModelVersion', example='v1'),
  templateId?: string(name='TemplateId', description='This parameter is required.', example='6cd509ea-54fa-4730-8e9d-c94cadcda048'),
  watermarkType?: string(name='WatermarkType'),
}

model MergeImageFaceResponseBody = {
  data?: {
    imageURL?: string(name='ImageURL', example='http://vibktprfx-prod-prod-aic-gd-cn-shanghai.oss-cn-shanghai.aliyuncs.com/image-face-fusion/09dedc78-c355-442a-9312-7ab074d6de49_54dc_20210129-025407.jpg?Expires=1611890647&OSSAccessKeyId=LTAI4FoLmvQ9urWXgSRp****&Signature=2mk2OgIrwMqrvA%2FvDdp0MNaoVU****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='8473A5E5-488E-4612-800E-F95B42381570'),
}

model MergeImageFaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MergeImageFaceResponseBody(name='body'),
}

/**
 * @summary 图像人脸融合
 *
 * @param request MergeImageFaceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return MergeImageFaceResponse
 */
@context("mergeImageFaceWithContext")
async function mergeImageFaceWithOptions(request: MergeImageFaceRequest, runtime: $RuntimeOptions): MergeImageFaceResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.addWatermark)) {
    body['AddWatermark'] = request.addWatermark;
  }
  if (!$isNull(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  if (!$isNull(request.mergeInfos)) {
    body['MergeInfos'] = request.mergeInfos;
  }
  if (!$isNull(request.modelVersion)) {
    body['ModelVersion'] = request.modelVersion;
  }
  if (!$isNull(request.templateId)) {
    body['TemplateId'] = request.templateId;
  }
  if (!$isNull(request.watermarkType)) {
    body['WatermarkType'] = request.watermarkType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'MergeImageFace',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 图像人脸融合
 *
 * @param request MergeImageFaceRequest
 * @return MergeImageFaceResponse
 */
async function mergeImageFace(request: MergeImageFaceRequest): MergeImageFaceResponse {
  var runtime = new $RuntimeOptions{};
  return mergeImageFaceWithOptions(request, runtime);
}

async function mergeImageFaceAdvance(request: MergeImageFaceAdvanceRequest, runtime: $RuntimeOptions): MergeImageFaceResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'facebody',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var mergeImageFaceReq = new MergeImageFaceRequest{};
  OpenApiUtil.convert(request, mergeImageFaceReq);

  if(!$isNull(request.imageURLObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    mergeImageFaceReq.imageURL = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var mergeImageFaceResp = mergeImageFaceWithOptions(mergeImageFaceReq, runtime);
  return mergeImageFaceResp;
}

model MonitorExaminationRequest {
  imageURL?: string(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/MonitorExamination/1MonitorExamination1.jpg'),
  type?: long(name='Type', description='This parameter is required.', example='1'),
}

model MonitorExaminationAdvanceRequest {
  imageURLObject?: readable(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/MonitorExamination/1MonitorExamination1.jpg'),
  type?: long(name='Type', description='This parameter is required.', example='1'),
}

model MonitorExaminationResponseBody = {
  data?: {
    chatScore?: float(name='ChatScore', example='0.28805577754974365'),
    faceInfo?: {
      completeness?: float(name='Completeness', example='1'),
      faceNumber?: long(name='FaceNumber', example='1'),
      pose?: {
        pitch?: float(name='Pitch', example='-0.9185499548912048'),
        roll?: float(name='Roll', example='-0.18541647493839264'),
        yaw?: float(name='Yaw', example='8.095342636108398'),
      }(name='Pose'),
    }(name='FaceInfo'),
    personInfo?: {
      cellPhone?: {
        score?: float(name='Score', example='0.39076218008995056'),
        threshold?: float(name='Threshold', example='0.6'),
      }(name='CellPhone'),
      earPhone?: {
        score?: float(name='Score', example='0.7980290651321411'),
        threshold?: float(name='Threshold', example='0.6'),
      }(name='EarPhone'),
      personNumber?: long(name='PersonNumber', example='1'),
    }(name='PersonInfo'),
    threshold?: float(name='Threshold', example='0.5'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='D0F6EB94-73B6-4CB8-B266-22D2F221C475'),
}

model MonitorExaminationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MonitorExaminationResponseBody(name='body'),
}

/**
 * @summary 线上监考
 *
 * @param request MonitorExaminationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return MonitorExaminationResponse
 */
@context("monitorExaminationWithContext")
async function monitorExaminationWithOptions(request: MonitorExaminationRequest, runtime: $RuntimeOptions): MonitorExaminationResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  if (!$isNull(request.type)) {
    body['Type'] = request.type;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'MonitorExamination',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 线上监考
 *
 * @param request MonitorExaminationRequest
 * @return MonitorExaminationResponse
 */
async function monitorExamination(request: MonitorExaminationRequest): MonitorExaminationResponse {
  var runtime = new $RuntimeOptions{};
  return monitorExaminationWithOptions(request, runtime);
}

async function monitorExaminationAdvance(request: MonitorExaminationAdvanceRequest, runtime: $RuntimeOptions): MonitorExaminationResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'facebody',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var monitorExaminationReq = new MonitorExaminationRequest{};
  OpenApiUtil.convert(request, monitorExaminationReq);

  if(!$isNull(request.imageURLObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    monitorExaminationReq.imageURL = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var monitorExaminationResp = monitorExaminationWithOptions(monitorExaminationReq, runtime);
  return monitorExaminationResp;
}

model PedestrianDetectAttributeRequest {
  imageURL?: string(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/PedestrianDetectAttribute/PedestrianDetectAttribute1.jpg'),
}

model PedestrianDetectAttributeAdvanceRequest {
  imageURLObject?: readable(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/PedestrianDetectAttribute/PedestrianDetectAttribute1.jpg'),
}

model PedestrianDetectAttributeResponseBody = {
  data?: {
    attributes?: [ 
      {
        age?: {
          name?: string(name='Name', example='Age18-60'),
          score?: float(name='Score', example='0.99590516090393066'),
        }(name='Age'),
        backpack?: {
          name?: string(name='Name', example='No'),
          score?: float(name='Score', example='0.96486538648605347'),
        }(name='Backpack'),
        gender?: {
          name?: string(name='Name', example='female'),
          score?: float(name='Score', example='0.97989875078201294'),
        }(name='Gender'),
        glasses?: {
          name?: string(name='Name', example='No'),
          score?: float(name='Score', example='0.87284471094608307'),
        }(name='Glasses'),
        handbag?: {
          name?: string(name='Name', example='Yes'),
          score?: float(name='Score', example='0.55011671781539917'),
        }(name='Handbag'),
        hat?: {
          name?: string(name='Name', example='No'),
          score?: float(name='Score', example='0.98272394016385078'),
        }(name='Hat'),
        lowerColor?: {
          name?: string(name='Name'),
          score?: float(name='Score', example='0.69961744546890259'),
        }(name='LowerColor'),
        lowerWear?: {
          name?: string(name='Name', example='Trousers'),
          score?: float(name='Score', example='0.6424860954284668'),
        }(name='LowerWear'),
        orient?: {
          name?: string(name='Name', example='Front'),
          score?: float(name='Score', example='0.97838658094406128'),
        }(name='Orient'),
        shoulderBag?: {
          name?: string(name='Name', example='No'),
          score?: float(name='Score', example='0.91198787838220596'),
        }(name='ShoulderBag'),
        upperColor?: {
          name?: string(name='Name'),
          score?: float(name='Score', example='0.97796273231506348'),
        }(name='UpperColor'),
        upperWear?: {
          name?: string(name='Name', example='ShortSleeve'),
          score?: float(name='Score', example='0.89291918277740479'),
        }(name='UpperWear'),
      }
    ](name='Attributes'),
    boxes?: [ 
      {
        bottomRightX?: float(name='BottomRightX', example='584'),
        bottomRightY?: float(name='BottomRightY', example='218'),
        score?: float(name='Score', example='0.88381063938140869'),
        topLeftX?: float(name='TopLeftX', example='36'),
        topLeftY?: float(name='TopLeftY', example='27'),
      }
    ](name='Boxes'),
    height?: long(name='Height', example='584'),
    personNumber?: int32(name='PersonNumber', example='1'),
    width?: long(name='Width', example='264'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='4F609A30-F645-481E-A513-CADAA14DFB0A'),
}

model PedestrianDetectAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PedestrianDetectAttributeResponseBody(name='body'),
}

/**
 * @param request PedestrianDetectAttributeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PedestrianDetectAttributeResponse
 */
@context("pedestrianDetectAttributeWithContext")
async function pedestrianDetectAttributeWithOptions(request: PedestrianDetectAttributeRequest, runtime: $RuntimeOptions): PedestrianDetectAttributeResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'PedestrianDetectAttribute',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request PedestrianDetectAttributeRequest
 * @return PedestrianDetectAttributeResponse
 */
async function pedestrianDetectAttribute(request: PedestrianDetectAttributeRequest): PedestrianDetectAttributeResponse {
  var runtime = new $RuntimeOptions{};
  return pedestrianDetectAttributeWithOptions(request, runtime);
}

async function pedestrianDetectAttributeAdvance(request: PedestrianDetectAttributeAdvanceRequest, runtime: $RuntimeOptions): PedestrianDetectAttributeResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'facebody',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var pedestrianDetectAttributeReq = new PedestrianDetectAttributeRequest{};
  OpenApiUtil.convert(request, pedestrianDetectAttributeReq);

  if(!$isNull(request.imageURLObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    pedestrianDetectAttributeReq.imageURL = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var pedestrianDetectAttributeResp = pedestrianDetectAttributeWithOptions(pedestrianDetectAttributeReq, runtime);
  return pedestrianDetectAttributeResp;
}

model QueryFaceImageTemplateRequest {
  pageNo?: long(name='PageNo'),
  pageSize?: long(name='PageSize', example='100'),
  templateId?: string(name='TemplateId', example='6cd509ea-54fa-4730-8e9d-c94cadcda048'),
}

model QueryFaceImageTemplateResponseBody = {
  data?: {
    elements?: [ 
      {
        createTime?: string(name='CreateTime', example='2021-01-29 10:19:05'),
        faceInfos?: [ 
          {
            faceRect?: {
              height?: string(name='Height', example='94'),
              width?: string(name='Width', example='89'),
              x?: string(name='X', example='254'),
              y?: string(name='Y', example='318'),
            }(name='FaceRect'),
            templateFaceID?: string(name='TemplateFaceID', example='6cd509ea-54fa-4730-8e9d-c94cadcda048'),
          }
        ](name='FaceInfos'),
        templateId?: string(name='TemplateId', example='6cd509ea-54fa-4730-8e9d-c94cadcda048'),
        templateURL?: string(name='TemplateURL', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/MergeImageFace/MergeImageFace-1.png'),
        updateTime?: string(name='UpdateTime', example='2021-01-29 10:19:05'),
        userId?: string(name='UserId', example='zhangsan'),
      }
    ](name='Elements'),
    total?: long(name='Total'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='7C29675C-751F-4D2F-86FB-2BD8D69AC860'),
}

model QueryFaceImageTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryFaceImageTemplateResponseBody(name='body'),
}

/**
 * @summary 图像人脸融合模板查询
 *
 * @param request QueryFaceImageTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryFaceImageTemplateResponse
 */
@context("queryFaceImageTemplateWithContext")
async function queryFaceImageTemplateWithOptions(request: QueryFaceImageTemplateRequest, runtime: $RuntimeOptions): QueryFaceImageTemplateResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryFaceImageTemplate',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 图像人脸融合模板查询
 *
 * @param request QueryFaceImageTemplateRequest
 * @return QueryFaceImageTemplateResponse
 */
async function queryFaceImageTemplate(request: QueryFaceImageTemplateRequest): QueryFaceImageTemplateResponse {
  var runtime = new $RuntimeOptions{};
  return queryFaceImageTemplateWithOptions(request, runtime);
}

model RecognizeActionRequest {
  type?: int32(name='Type', description='This parameter is required.', example='0'),
  URLList?: [ 
    {
      URL?: string(name='URL', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/RecognizeAction/1RecognizeAction1.png'),
      imageData?: string(name='imageData', example='/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAgGBgcGBQgHBwcJCQgQ****'),
    }
  ](name='URLList'),
  videoData?: string(name='VideoData', example='iVBORw0KGgoAAAANSUhEUgAAAoAAAAHJCAIAAACaEB9NAAEAAElEQVR4nNT9Wb****'),
  videoUrl?: string(name='VideoUrl', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/RecognizeAction/RecognizeAction-video1.mp4'),
}

model RecognizeActionAdvanceRequest {
  type?: int32(name='Type', description='This parameter is required.', example='0'),
  URLList?: [ 
    {
      URLObject?: readable(name='URL', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/RecognizeAction/1RecognizeAction1.png'),
      imageData?: string(name='imageData', example='/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAgGBgcGBQgHBwcJCQgQ****'),
    }
  ](name='URLList'),
  videoData?: string(name='VideoData', example='iVBORw0KGgoAAAANSUhEUgAAAoAAAAHJCAIAAACaEB9NAAEAAElEQVR4nNT9Wb****'),
  videoUrlObject?: readable(name='VideoUrl', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/RecognizeAction/RecognizeAction-video1.mp4'),
}

model RecognizeActionResponseBody = {
  data?: {
    elements?: [ 
      {
        boxes?: [ 
          {
            box?: [ int32 ](name='Box'),
          }
        ](name='Boxes'),
        labels?: [ string ](name='Labels'),
        scores?: [ float ](name='Scores'),
        timestamp?: int32(name='Timestamp', example='3'),
      }
    ](name='Elements'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='E9C40AF5-A7F8-49D5-8A0C-B21F15A07F17'),
}

model RecognizeActionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RecognizeActionResponseBody(name='body'),
}

/**
 * @summary 动作行为识别(RecognizeAction)
 *
 * @param request RecognizeActionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RecognizeActionResponse
 */
@context("recognizeActionWithContext")
async function recognizeActionWithOptions(request: RecognizeActionRequest, runtime: $RuntimeOptions): RecognizeActionResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.type)) {
    body['Type'] = request.type;
  }
  if (!$isNull(request.URLList)) {
    body['URLList'] = request.URLList;
  }
  if (!$isNull(request.videoData)) {
    body['VideoData'] = request.videoData;
  }
  if (!$isNull(request.videoUrl)) {
    body['VideoUrl'] = request.videoUrl;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'RecognizeAction',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 动作行为识别(RecognizeAction)
 *
 * @param request RecognizeActionRequest
 * @return RecognizeActionResponse
 */
async function recognizeAction(request: RecognizeActionRequest): RecognizeActionResponse {
  var runtime = new $RuntimeOptions{};
  return recognizeActionWithOptions(request, runtime);
}

async function recognizeActionAdvance(request: RecognizeActionAdvanceRequest, runtime: $RuntimeOptions): RecognizeActionResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'facebody',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var recognizeActionReq = new RecognizeActionRequest{};
  OpenApiUtil.convert(request, recognizeActionReq);

  if(!$isNull(request.URLList)) {
    var i0 : integer = 0;
    for (var item0 : request.URLList) {
      if(!$isNull(item0.URLObject)) {
        authResponse = authClient.callApi(authParams, authReq, runtime);
        tmpBody = $object(authResponse['body']);
        useAccelerate = $boolean(tmpBody['UseAccelerate']);
        authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
        fileObj = new $FileField{
          filename = authResponseBody['ObjectKey'],
          content = item0.URLObject,
          contentType = '',
        };
        ossHeader = {
          host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
          OSSAccessKeyId = authResponseBody['AccessKeyId'],
          policy = authResponseBody['EncodedPolicy'],
          Signature = authResponseBody['Signature'],
          key = authResponseBody['ObjectKey'],
          file = fileObj,
          success_action_status = '201',
        };
        _postOSSObject(authResponseBody['Bucket'], ossHeader);
        var tmpObj : RecognizeActionRequest.URLList = recognizeActionReq.URLList[i0];
        tmpObj.URL = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
        i0++;
      }
    }
  }
  if(!$isNull(request.videoUrlObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.videoUrlObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    recognizeActionReq.videoUrl = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var recognizeActionResp = recognizeActionWithOptions(recognizeActionReq, runtime);
  return recognizeActionResp;
}

model RecognizeExpressionRequest {
  imageURL?: string(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/RecognizeExpression/RecognizeExpression10.jpg'),
}

model RecognizeExpressionAdvanceRequest {
  imageURLObject?: readable(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/RecognizeExpression/RecognizeExpression10.jpg'),
}

model RecognizeExpressionResponseBody = {
  data?: {
    elements?: [ 
      {
        expression?: string(name='Expression', example='surprise'),
        faceProbability?: float(name='FaceProbability', example='0.99651491641998291'),
        faceRectangle?: {
          height?: int32(name='Height', example='174'),
          left?: int32(name='Left', example='196'),
          top?: int32(name='Top', example='41'),
          width?: int32(name='Width', example='121'),
        }(name='FaceRectangle'),
      }
    ](name='Elements'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='E1C4C576-1799-4079-A934-15BC406A54EF'),
}

model RecognizeExpressionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RecognizeExpressionResponseBody(name='body'),
}

/**
 * @param request RecognizeExpressionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RecognizeExpressionResponse
 */
@context("recognizeExpressionWithContext")
async function recognizeExpressionWithOptions(request: RecognizeExpressionRequest, runtime: $RuntimeOptions): RecognizeExpressionResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'RecognizeExpression',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request RecognizeExpressionRequest
 * @return RecognizeExpressionResponse
 */
async function recognizeExpression(request: RecognizeExpressionRequest): RecognizeExpressionResponse {
  var runtime = new $RuntimeOptions{};
  return recognizeExpressionWithOptions(request, runtime);
}

async function recognizeExpressionAdvance(request: RecognizeExpressionAdvanceRequest, runtime: $RuntimeOptions): RecognizeExpressionResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'facebody',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var recognizeExpressionReq = new RecognizeExpressionRequest{};
  OpenApiUtil.convert(request, recognizeExpressionReq);

  if(!$isNull(request.imageURLObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    recognizeExpressionReq.imageURL = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var recognizeExpressionResp = recognizeExpressionWithOptions(recognizeExpressionReq, runtime);
  return recognizeExpressionResp;
}

model RecognizeFaceRequest {
  age?: boolean(name='Age', example='false'),
  beauty?: boolean(name='Beauty', example='false'),
  expression?: boolean(name='Expression', example='false'),
  gender?: boolean(name='Gender', example='false'),
  glass?: boolean(name='Glass', example='false'),
  hat?: boolean(name='Hat', example='false'),
  imageURL?: string(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/RecognizeFace/RecognizeFace1.png'),
  mask?: boolean(name='Mask', example='false'),
  maxFaceNumber?: long(name='MaxFaceNumber', example='1'),
  quality?: boolean(name='Quality', example='false'),
}

model RecognizeFaceAdvanceRequest {
  age?: boolean(name='Age', example='false'),
  beauty?: boolean(name='Beauty', example='false'),
  expression?: boolean(name='Expression', example='false'),
  gender?: boolean(name='Gender', example='false'),
  glass?: boolean(name='Glass', example='false'),
  hat?: boolean(name='Hat', example='false'),
  imageURLObject?: readable(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/RecognizeFace/RecognizeFace1.png'),
  mask?: boolean(name='Mask', example='false'),
  maxFaceNumber?: long(name='MaxFaceNumber', example='1'),
  quality?: boolean(name='Quality', example='false'),
}

model RecognizeFaceResponseBody = {
  data?: {
    ageList?: [ int32 ](name='AgeList', description='1'),
    beautyList?: [ float ](name='BeautyList', description='1'),
    denseFeatureLength?: int32(name='DenseFeatureLength', example='1024'),
    denseFeatures?: [ string ](name='DenseFeatures', description='1'),
    expressions?: [ int32 ](name='Expressions', description='1'),
    faceCount?: int32(name='FaceCount', example='1'),
    faceProbabilityList?: [ float ](name='FaceProbabilityList', description='1'),
    faceRectangles?: [ int32 ](name='FaceRectangles', description='1'),
    genderList?: [ int32 ](name='GenderList', description='1'),
    glasses?: [ int32 ](name='Glasses', description='1'),
    hatList?: [ int32 ](name='HatList', description='1'),
    landmarkCount?: int32(name='LandmarkCount', example='105'),
    landmarks?: [ float ](name='Landmarks', description='1'),
    masks?: [ long ](name='Masks', description='1'),
    poseList?: [ float ](name='PoseList', description='1'),
    pupils?: [ float ](name='Pupils', description='1'),
    qualities?: {
      blurList?: [ float ](name='BlurList', description='1'),
      fnfList?: [ float ](name='FnfList', description='1'),
      glassList?: [ float ](name='GlassList', description='1'),
      illuList?: [ float ](name='IlluList', description='1'),
      maskList?: [ float ](name='MaskList', description='1'),
      noiseList?: [ float ](name='NoiseList', description='1'),
      poseList?: [ float ](name='PoseList', description='1'),
      scoreList?: [ float ](name='ScoreList', description='1'),
    }(name='Qualities'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='8251C88E-8273-4DBF-94FB-A6BCB268CEA2'),
}

model RecognizeFaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RecognizeFaceResponseBody(name='body'),
}

/**
 * @param request RecognizeFaceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RecognizeFaceResponse
 */
@context("recognizeFaceWithContext")
async function recognizeFaceWithOptions(request: RecognizeFaceRequest, runtime: $RuntimeOptions): RecognizeFaceResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.age)) {
    body['Age'] = request.age;
  }
  if (!$isNull(request.beauty)) {
    body['Beauty'] = request.beauty;
  }
  if (!$isNull(request.expression)) {
    body['Expression'] = request.expression;
  }
  if (!$isNull(request.gender)) {
    body['Gender'] = request.gender;
  }
  if (!$isNull(request.glass)) {
    body['Glass'] = request.glass;
  }
  if (!$isNull(request.hat)) {
    body['Hat'] = request.hat;
  }
  if (!$isNull(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  if (!$isNull(request.mask)) {
    body['Mask'] = request.mask;
  }
  if (!$isNull(request.maxFaceNumber)) {
    body['MaxFaceNumber'] = request.maxFaceNumber;
  }
  if (!$isNull(request.quality)) {
    body['Quality'] = request.quality;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'RecognizeFace',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request RecognizeFaceRequest
 * @return RecognizeFaceResponse
 */
async function recognizeFace(request: RecognizeFaceRequest): RecognizeFaceResponse {
  var runtime = new $RuntimeOptions{};
  return recognizeFaceWithOptions(request, runtime);
}

async function recognizeFaceAdvance(request: RecognizeFaceAdvanceRequest, runtime: $RuntimeOptions): RecognizeFaceResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'facebody',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var recognizeFaceReq = new RecognizeFaceRequest{};
  OpenApiUtil.convert(request, recognizeFaceReq);

  if(!$isNull(request.imageURLObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    recognizeFaceReq.imageURL = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var recognizeFaceResp = recognizeFaceWithOptions(recognizeFaceReq, runtime);
  return recognizeFaceResp;
}

model RecognizeHandGestureRequest {
  appId?: string(name='AppId', description='This parameter is required.', example='gesture_app'),
  gestureType?: string(name='GestureType', description='This parameter is required.', example='gesture_recognition'),
  imageURL?: string(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/cc/RecognizeHandGesture1.jpg'),
}

model RecognizeHandGestureAdvanceRequest {
  appId?: string(name='AppId', description='This parameter is required.', example='gesture_app'),
  gestureType?: string(name='GestureType', description='This parameter is required.', example='gesture_recognition'),
  imageURLObject?: readable(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/cc/RecognizeHandGesture1.jpg'),
}

model RecognizeHandGestureResponseBody = {
  data?: {
    height?: long(name='Height', example='53'),
    score?: float(name='Score', example='0.921875'),
    type?: string(name='Type', example='right'),
    width?: long(name='Width', example='46'),
    x?: long(name='X', example='237'),
    y?: long(name='Y', example='216'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='99AC4489-693D-4DF1-8BB7-7451DD71A16E'),
}

model RecognizeHandGestureResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RecognizeHandGestureResponseBody(name='body'),
}

/**
 * @summary 静态手势识别
 *
 * @param request RecognizeHandGestureRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RecognizeHandGestureResponse
 */
@context("recognizeHandGestureWithContext")
async function recognizeHandGestureWithOptions(request: RecognizeHandGestureRequest, runtime: $RuntimeOptions): RecognizeHandGestureResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!$isNull(request.gestureType)) {
    body['GestureType'] = request.gestureType;
  }
  if (!$isNull(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'RecognizeHandGesture',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 静态手势识别
 *
 * @param request RecognizeHandGestureRequest
 * @return RecognizeHandGestureResponse
 */
async function recognizeHandGesture(request: RecognizeHandGestureRequest): RecognizeHandGestureResponse {
  var runtime = new $RuntimeOptions{};
  return recognizeHandGestureWithOptions(request, runtime);
}

async function recognizeHandGestureAdvance(request: RecognizeHandGestureAdvanceRequest, runtime: $RuntimeOptions): RecognizeHandGestureResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'facebody',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var recognizeHandGestureReq = new RecognizeHandGestureRequest{};
  OpenApiUtil.convert(request, recognizeHandGestureReq);

  if(!$isNull(request.imageURLObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    recognizeHandGestureReq.imageURL = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var recognizeHandGestureResp = recognizeHandGestureWithOptions(recognizeHandGestureReq, runtime);
  return recognizeHandGestureResp;
}

model RecognizePublicFaceRequest {
  task?: [ 
    {
      imageData?: string(name='ImageData'),
      imageURL?: string(name='ImageURL', example='https://viapi-oss.oss-cn-shanghai.aliyuncs.com/doc/facebody/xxx.jpg'),
    }
  ](name='Task', description='1'),
}

model RecognizePublicFaceAdvanceRequest {
  task?: [ 
    {
      imageData?: string(name='ImageData'),
      imageURLObject?: readable(name='ImageURL', example='https://viapi-oss.oss-cn-shanghai.aliyuncs.com/doc/facebody/xxx.jpg'),
    }
  ](name='Task', description='1'),
}

model RecognizePublicFaceResponseBody = {
  data?: {
    elements?: [ 
      {
        imageURL?: string(name='ImageURL', example='https://viapi-oss.oss-cn-shanghai.aliyuncs.com/doc/facebody/xxx.jpg'),
        results?: [ 
          {
            label?: string(name='Label', example='sface'),
            rate?: float(name='Rate', example='98.35'),
            subResults?: [ 
              {
                faces?: [ 
                  {
                    id?: string(name='Id', example='AliFace_0006272'),
                    name?: string(name='Name'),
                    rate?: float(name='Rate', example='98.35'),
                  }
                ](name='Faces'),
                h?: float(name='H', example='153'),
                w?: float(name='W', example='132'),
                x?: float(name='X', example='182'),
                y?: float(name='Y', example='153'),
              }
            ](name='SubResults'),
            suggestion?: string(name='Suggestion', example='review'),
          }
        ](name='Results'),
        taskId?: string(name='TaskId', example='img3dhYqt1e4wO77Wnf2y@t@E-1tYAEt'),
      }
    ](name='Elements'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='AC4D107C-29E3-4873-A719-0D2217EA28A8'),
}

model RecognizePublicFaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RecognizePublicFaceResponseBody(name='body'),
}

/**
 * @summary 公众人脸识别(RecognizePublicFace)
 *
 * @param request RecognizePublicFaceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RecognizePublicFaceResponse
 */
@context("recognizePublicFaceWithContext")
async function recognizePublicFaceWithOptions(request: RecognizePublicFaceRequest, runtime: $RuntimeOptions): RecognizePublicFaceResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.task)) {
    body['Task'] = request.task;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'RecognizePublicFace',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 公众人脸识别(RecognizePublicFace)
 *
 * @param request RecognizePublicFaceRequest
 * @return RecognizePublicFaceResponse
 */
async function recognizePublicFace(request: RecognizePublicFaceRequest): RecognizePublicFaceResponse {
  var runtime = new $RuntimeOptions{};
  return recognizePublicFaceWithOptions(request, runtime);
}

async function recognizePublicFaceAdvance(request: RecognizePublicFaceAdvanceRequest, runtime: $RuntimeOptions): RecognizePublicFaceResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'facebody',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var recognizePublicFaceReq = new RecognizePublicFaceRequest{};
  OpenApiUtil.convert(request, recognizePublicFaceReq);

  if(!$isNull(request.task)) {
    var i0 : integer = 0;
    for (var item0 : request.task) {
      if(!$isNull(item0.imageURLObject)) {
        authResponse = authClient.callApi(authParams, authReq, runtime);
        tmpBody = $object(authResponse['body']);
        useAccelerate = $boolean(tmpBody['UseAccelerate']);
        authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
        fileObj = new $FileField{
          filename = authResponseBody['ObjectKey'],
          content = item0.imageURLObject,
          contentType = '',
        };
        ossHeader = {
          host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
          OSSAccessKeyId = authResponseBody['AccessKeyId'],
          policy = authResponseBody['EncodedPolicy'],
          Signature = authResponseBody['Signature'],
          key = authResponseBody['ObjectKey'],
          file = fileObj,
          success_action_status = '201',
        };
        _postOSSObject(authResponseBody['Bucket'], ossHeader);
        var tmpObj : RecognizePublicFaceRequest.task = recognizePublicFaceReq.task[i0];
        tmpObj.imageURL = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
        i0++;
      }
    }
  }
  var recognizePublicFaceResp = recognizePublicFaceWithOptions(recognizePublicFaceReq, runtime);
  return recognizePublicFaceResp;
}

model RetouchSkinRequest {
  imageURL?: string(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/RetouchSkin/RetouchSkin3.png'),
  retouchDegree?: float(name='RetouchDegree', example='1.0'),
  whiteningDegree?: float(name='WhiteningDegree', example='1.0'),
}

model RetouchSkinAdvanceRequest {
  imageURLObject?: readable(name='ImageURL', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/RetouchSkin/RetouchSkin3.png'),
  retouchDegree?: float(name='RetouchDegree', example='1.0'),
  whiteningDegree?: float(name='WhiteningDegree', example='1.0'),
}

model RetouchSkinResponseBody = {
  data?: {
    imageURL?: string(name='ImageURL', example='http://vibktprfx-prod-prod-aic-gd-cn-shanghai.oss-cn-shanghai.aliyuncs.com/skin-retouch/FD2BF3DF-3D98-1D5D-85BB-C8EC3A9FE347_3467_20210923-094238.jpg?Expires=1632391959&OSSAccessKeyId=LTAI4FoLmvQ9urWXgSRp****&Signature=jXJcFTv3no7Gx%2BLuPvANhRSnc2****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='FD2BF3DF-3D98-1D5D-85BB-C8EC3A9FE347'),
}

model RetouchSkinResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RetouchSkinResponseBody(name='body'),
}

/**
 * @summary 美肤
 *
 * @param request RetouchSkinRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RetouchSkinResponse
 */
@context("retouchSkinWithContext")
async function retouchSkinWithOptions(request: RetouchSkinRequest, runtime: $RuntimeOptions): RetouchSkinResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.imageURL)) {
    body['ImageURL'] = request.imageURL;
  }
  if (!$isNull(request.retouchDegree)) {
    body['RetouchDegree'] = request.retouchDegree;
  }
  if (!$isNull(request.whiteningDegree)) {
    body['WhiteningDegree'] = request.whiteningDegree;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'RetouchSkin',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 美肤
 *
 * @param request RetouchSkinRequest
 * @return RetouchSkinResponse
 */
async function retouchSkin(request: RetouchSkinRequest): RetouchSkinResponse {
  var runtime = new $RuntimeOptions{};
  return retouchSkinWithOptions(request, runtime);
}

async function retouchSkinAdvance(request: RetouchSkinAdvanceRequest, runtime: $RuntimeOptions): RetouchSkinResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'facebody',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var retouchSkinReq = new RetouchSkinRequest{};
  OpenApiUtil.convert(request, retouchSkinReq);

  if(!$isNull(request.imageURLObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.imageURLObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    retouchSkinReq.imageURL = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var retouchSkinResp = retouchSkinWithOptions(retouchSkinReq, runtime);
  return retouchSkinResp;
}

model SearchFaceRequest {
  dbName?: string(name='DbName', example='default'),
  dbNames?: string(name='DbNames', example='test1,test2,test3'),
  imageUrl?: string(name='ImageUrl', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/SearchFace/SearchFace1.png'),
  limit?: int32(name='Limit', description='This parameter is required.', example='2'),
  maxFaceNum?: long(name='MaxFaceNum', example='5'),
  qualityScoreThreshold?: float(name='QualityScoreThreshold', example='50.0'),
}

model SearchFaceAdvanceRequest {
  dbName?: string(name='DbName', example='default'),
  dbNames?: string(name='DbNames', example='test1,test2,test3'),
  imageUrlObject?: readable(name='ImageUrl', description='This parameter is required.', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/SearchFace/SearchFace1.png'),
  limit?: int32(name='Limit', description='This parameter is required.', example='2'),
  maxFaceNum?: long(name='MaxFaceNum', example='5'),
  qualityScoreThreshold?: float(name='QualityScoreThreshold', example='50.0'),
}

model SearchFaceResponseBody = {
  data?: {
    matchList?: [ 
      {
        faceItems?: [ 
          {
            confidence?: float(name='Confidence', example='36.820168'),
            dbName?: string(name='DbName', example='default'),
            entityId?: string(name='EntityId', example='U1'),
            extraData?: string(name='ExtraData'),
            faceId?: string(name='FaceId', example='001'),
            score?: float(name='Score', example='0.892133'),
          }
        ](name='FaceItems'),
        location?: {
          height?: int32(name='Height', example='200'),
          width?: int32(name='Width', example='200'),
          x?: int32(name='X', example='5'),
          y?: int32(name='Y', example='6'),
        }(name='Location'),
        qualitieScore?: float(name='QualitieScore', example='71.7349'),
      }
    ](name='MatchList'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='4159e64a-0fe8-436c-a8de-ee531555db3c'),
}

model SearchFaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchFaceResponseBody(name='body'),
}

/**
 * @summary summary
 *
 * @param request SearchFaceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SearchFaceResponse
 */
@context("searchFaceWithContext")
async function searchFaceWithOptions(request: SearchFaceRequest, runtime: $RuntimeOptions): SearchFaceResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.dbName)) {
    body['DbName'] = request.dbName;
  }
  if (!$isNull(request.dbNames)) {
    body['DbNames'] = request.dbNames;
  }
  if (!$isNull(request.imageUrl)) {
    body['ImageUrl'] = request.imageUrl;
  }
  if (!$isNull(request.limit)) {
    body['Limit'] = request.limit;
  }
  if (!$isNull(request.maxFaceNum)) {
    body['MaxFaceNum'] = request.maxFaceNum;
  }
  if (!$isNull(request.qualityScoreThreshold)) {
    body['QualityScoreThreshold'] = request.qualityScoreThreshold;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'SearchFace',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary summary
 *
 * @param request SearchFaceRequest
 * @return SearchFaceResponse
 */
async function searchFace(request: SearchFaceRequest): SearchFaceResponse {
  var runtime = new $RuntimeOptions{};
  return searchFaceWithOptions(request, runtime);
}

async function searchFaceAdvance(request: SearchFaceAdvanceRequest, runtime: $RuntimeOptions): SearchFaceResponse {
  // Step 0: init client
  if ($isNull(@credential)) {
    throw new OpenApi.Client{
      code = 'InvalidCredentials',
      message = 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
    }
  }
  var credentialModel = @credential.getCredential();
  var accessKeyId = credentialModel.accessKeyId;
  var accessKeySecret = credentialModel.accessKeySecret;
  var securityToken = credentialModel.securityToken;
  var credentialType = credentialModel.type;
  var openPlatformEndpoint = @openPlatformEndpoint;
  if($isNull(openPlatformEndpoint) || openPlatformEndpoint == "") {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if($isNull(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new OpenApiUtil.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenApi(authConfig);
  var authRequest = {
    Product = 'facebody',
    RegionId = @regionId,
  };
  var authReq = new OpenApiUtil.OpenApiRequest{
    query = OpenApiUtil.query(authRequest),
  };
  var authParams = new OpenApiUtil.Params{
    action = 'AuthorizeFileUpload',
    version = '2019-12-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  var authResponse : object = {};
  var fileObj = new $FileField{};
  var ossHeader: object = {};
  var tmpBody: object = {};
  var useAccelerate: boolean = false;
  var authResponseBody: map[string]string = {};
  var searchFaceReq = new SearchFaceRequest{};
  OpenApiUtil.convert(request, searchFaceReq);

  if(!$isNull(request.imageUrlObject)) {
    authResponse = authClient.callApi(authParams, authReq, runtime);
    tmpBody = $object(authResponse['body']);
    useAccelerate = $boolean(tmpBody['UseAccelerate']);
    authResponseBody = OpenApiUtil.stringifyMapValue(tmpBody);
    fileObj = new $FileField{
      filename = authResponseBody['ObjectKey'],
      content = request.imageUrlObject,
      contentType = '',
    };
    ossHeader = {
      host = `${authResponseBody['Bucket']}.${OpenApiUtil.getEndpoint(authResponseBody['Endpoint'], useAccelerate, @endpointType)}`,
      OSSAccessKeyId = authResponseBody['AccessKeyId'],
      policy = authResponseBody['EncodedPolicy'],
      Signature = authResponseBody['Signature'],
      key = authResponseBody['ObjectKey'],
      file = fileObj,
      success_action_status = '201',
    };
    _postOSSObject(authResponseBody['Bucket'], ossHeader);
    searchFaceReq.imageUrl = `http://${authResponseBody['Bucket']}.${authResponseBody['Endpoint']}/${authResponseBody['ObjectKey']}`;
  }
  var searchFaceResp = searchFaceWithOptions(searchFaceReq, runtime);
  return searchFaceResp;
}

model UpdateFaceEntityRequest {
  dbName?: string(name='DbName', description='This parameter is required.', example='default'),
  entityId?: string(name='EntityId', description='This parameter is required.', example='mm2'),
  labels?: string(name='Labels'),
}

model UpdateFaceEntityResponseBody = {
  requestId?: string(name='RequestId', example='DA7CAFEB-0A37-4496-9CDF-E3DBB6309CB2'),
}

model UpdateFaceEntityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateFaceEntityResponseBody(name='body'),
}

/**
 * @param request UpdateFaceEntityRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateFaceEntityResponse
 */
@context("updateFaceEntityWithContext")
async function updateFaceEntityWithOptions(request: UpdateFaceEntityRequest, runtime: $RuntimeOptions): UpdateFaceEntityResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.dbName)) {
    body['DbName'] = request.dbName;
  }
  if (!$isNull(request.entityId)) {
    body['EntityId'] = request.entityId;
  }
  if (!$isNull(request.labels)) {
    body['Labels'] = request.labels;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateFaceEntity',
    version = '2019-12-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request UpdateFaceEntityRequest
 * @return UpdateFaceEntityResponse
 */
async function updateFaceEntity(request: UpdateFaceEntityRequest): UpdateFaceEntityResponse {
  var runtime = new $RuntimeOptions{};
  return updateFaceEntityWithOptions(request, runtime);
}

api _postOSSObject(bucketName: string, form: object): object {
  var boundary = $Form.getBoundary();
  __request.protocol = 'HTTPS';
  __request.method = 'POST';
  __request.pathname = `/`;
  __request.headers = {
    host = $string(form.host),
    date = OpenApiUtil.getDateUTCString(),
    user-agent = OpenApiUtil.getUserAgent(''),
  };
  __request.headers.content-type = `multipart/form-data; boundary=${boundary}`;
  __request.body = $Form.toFileForm(form, boundary);
} returns {
  var respMap : object = null;
  var bodyStr = $Stream.readAsString(__response.body);
  if ((__response.statusCode >= 400) && (__response.statusCode < 600)) {
    respMap = $XML.parseXml(bodyStr, null);
    var err = $object(respMap.Error);
    throw new OpenApi.Client{
      code = $string(err.Code),
      message = $string(err.Message),
      data = {
        httpCode = __response.statusCode,
        requestId = $string(err.RequestId),
        hostId = $string(err.HostId),
      }
    };
  }
  respMap = $XML.parseXml(bodyStr, null);
  return {
    ...respMap,
  };
}
