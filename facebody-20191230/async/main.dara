/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'facebody';
  @version = '2019-12-30';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddFaceEntityRequest {
  dbName: string(name='DbName', example='default', position='Body'),
  entityId: string(name='EntityId', example='mm2', position='Body'),
  labels?: string(name='Labels', position='Body'),
}

model AddFaceEntityResponseBody = {
  requestId?: string(name='RequestId', example='DA7CAFEB-0A37-4496-9CDF-E3DBB6309CB2'),
}

model AddFaceEntityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddFaceEntityResponseBody(name='body'),
}

async function addFaceEntity(request: AddFaceEntityRequest): AddFaceEntityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddFaceEntity', 'POST', '/', 'json', true, 'form', request);
}

model CreateFaceDbRequest {
  name: string(name='Name', example='default', position='Body'),
}

model CreateFaceDbResponseBody = {
  requestId?: string(name='RequestId', example='818D24A6-E368-46B3-99C5-3CF36D98CCA3'),
}

model CreateFaceDbResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFaceDbResponseBody(name='body'),
}

async function createFaceDb(request: CreateFaceDbRequest): CreateFaceDbResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFaceDb', 'POST', '/', 'json', true, 'form', request);
}

model DeleteFaceRequest {
  dbName: string(name='DbName', example='default', position='Body'),
  faceId: string(name='FaceId', example='001', position='Body'),
}

model DeleteFaceResponseBody = {
  requestId?: string(name='RequestId', example='FAC90D32-2F04-5AD4-B94B-BAA163AB3724'),
}

model DeleteFaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFaceResponseBody(name='body'),
}

async function deleteFace(request: DeleteFaceRequest): DeleteFaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFace', 'POST', '/', 'json', true, 'form', request);
}

model DeleteFaceDbRequest {
  name: string(name='Name', example='default', position='Body'),
}

model DeleteFaceDbResponseBody = {
  requestId?: string(name='RequestId', example='203AE658-CFE1-507D-B105-F88CD1F1F71B'),
}

model DeleteFaceDbResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFaceDbResponseBody(name='body'),
}

async function deleteFaceDb(request: DeleteFaceDbRequest): DeleteFaceDbResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFaceDb', 'POST', '/', 'json', true, 'form', request);
}

model DeleteFaceEntityRequest {
  dbName: string(name='DbName', example='default', position='Body'),
  entityId: string(name='EntityId', example='wood', position='Body'),
}

model DeleteFaceEntityResponseBody = {
  requestId?: string(name='RequestId', example='DA7CAFEB-0A37-4496-9CDF-E3DBB6309CB2'),
}

model DeleteFaceEntityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFaceEntityResponseBody(name='body'),
}

async function deleteFaceEntity(request: DeleteFaceEntityRequest): DeleteFaceEntityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFaceEntity', 'POST', '/', 'json', true, 'form', request);
}

model DeleteFaceImageTemplateRequest {
  templateId: string(name='TemplateId', example='6cd509ea-54fa-4730-8e9d-c94cadcda048', position='Body'),
}

model DeleteFaceImageTemplateResponseBody = {
  requestId?: string(name='RequestId', example='F9E76786-3A85-43C3-B79C-3175B4536252'),
}

model DeleteFaceImageTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFaceImageTemplateResponseBody(name='body'),
}

async function deleteFaceImageTemplate(request: DeleteFaceImageTemplateRequest): DeleteFaceImageTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFaceImageTemplate', 'POST', '/', 'json', true, 'form', request);
}

model GenRealPersonVerificationTokenRequest {
  certificateName: string(name='CertificateName', position='Body'),
  certificateNumber: string(name='CertificateNumber', example='33010219001123123X', position='Body'),
  metaInfo: string(name='MetaInfo', example='{"dwe":"ew4e"...}', position='Body'),
}

model GenRealPersonVerificationTokenResponseBody = {
  data?: {
    verificationToken?: string(name='VerificationToken', example='9fca3791c158a479ead9f2ba65ab3XXX'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='A31006F2-22E7-4538-93BB-DE6B563643EE'),
}

model GenRealPersonVerificationTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenRealPersonVerificationTokenResponseBody(name='body'),
}

async function genRealPersonVerificationToken(request: GenRealPersonVerificationTokenRequest): GenRealPersonVerificationTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenRealPersonVerificationToken', 'POST', '/', 'json', true, 'form', request);
}

model GetFaceEntityRequest {
  dbName: string(name='DbName', example='default', position='Body'),
  entityId: string(name='EntityId', example='66', position='Body'),
}

model GetFaceEntityResponseBody = {
  data?: {
    dbName?: string(name='DbName', example='default'),
    entityId?: string(name='EntityId', example='66'),
    faces?: [ 
      {
        faceId?: string(name='FaceId', example='3'),
      }
    ](name='Faces'),
    labels?: string(name='Labels'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='DA7CAFEB-0A37-4496-9CDF-E3DBB6309CB2'),
}

model GetFaceEntityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFaceEntityResponseBody(name='body'),
}

async function getFaceEntity(request: GetFaceEntityRequest): GetFaceEntityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFaceEntity', 'POST', '/', 'json', true, 'form', request);
}

model GetRealPersonVerificationResultRequest {
  verificationToken: string(name='VerificationToken', example='cwek23dw24geor89230hf2rw', position='Body'),
}

model GetRealPersonVerificationResultResponseBody = {
  data?: {
    passed?: boolean(name='Passed', example='true'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='10FC953D-7C0C-4915-8949-34E3246E5B79'),
}

model GetRealPersonVerificationResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRealPersonVerificationResultResponseBody(name='body'),
}

async function getRealPersonVerificationResult(request: GetRealPersonVerificationResultRequest): GetRealPersonVerificationResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRealPersonVerificationResult', 'POST', '/', 'json', true, 'form', request);
}

model ListFaceDbsRequest {
  limit?: long(name='Limit', example='50', position='Body'),
  offset?: long(name='Offset', example='1', position='Body'),
}

model ListFaceDbsResponseBody = {
  data?: {
    dbList?: [ 
      {
        name?: string(name='Name', example='default'),
      }
    ](name='DbList'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='2B93C43A-F824-40C8-AF79-844342B0F43A'),
}

model ListFaceDbsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFaceDbsResponseBody(name='body'),
}

async function listFaceDbs(request: ListFaceDbsRequest): ListFaceDbsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFaceDbs', 'POST', '/', 'json', true, 'form', request);
}

model ListFaceEntitiesRequest {
  dbName: string(name='DbName', example='default', position='Body'),
  entityIdPrefix?: string(name='EntityIdPrefix', example='U1', position='Body'),
  labels?: string(name='Labels', position='Body'),
  limit?: int32(name='Limit', example='50', position='Body'),
  offset?: int32(name='Offset', example='1', position='Body'),
  order?: string(name='Order', example='asc', position='Body'),
  token?: string(name='Token', example='2', position='Body'),
}

model ListFaceEntitiesResponseBody = {
  data?: {
    entities?: [ 
      {
        createdAt?: long(name='CreatedAt', example='1589203871832'),
        dbName?: string(name='DbName', example='default'),
        entityId?: string(name='EntityId', example='222'),
        faceCount?: int32(name='FaceCount', example='3'),
        labels?: string(name='Labels'),
        updatedAt?: long(name='UpdatedAt', example='1589203871832'),
      }
    ](name='Entities'),
    token?: string(name='Token', example='2'),
    totalCount?: int32(name='TotalCount', example='200'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='DA7CAFEB-0A37-4496-9CDF-E3DBB6309CB2'),
}

model ListFaceEntitiesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFaceEntitiesResponseBody(name='body'),
}

async function listFaceEntities(request: ListFaceEntitiesRequest): ListFaceEntitiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFaceEntities', 'POST', '/', 'json', true, 'form', request);
}

model QueryFaceImageTemplateRequest {
  pageNo?: long(name='PageNo', minimum=1, maximum=5000, position='Query'),
  pageSize?: long(name='PageSize', example='100', minimum=1, maximum=500, position='Query'),
  templateId?: string(name='TemplateId', example='6cd509ea-54fa-4730-8e9d-c94cadcda048', position='Query'),
}

model QueryFaceImageTemplateResponseBody = {
  data?: {
    elements?: [ 
      {
        createTime?: string(name='CreateTime', example='2021-01-29 10:19:05'),
        faceInfos?: [ 
          {
            faceRect?: {
              height?: string(name='Height', example='94'),
              width?: string(name='Width', example='89'),
              x?: string(name='X', example='254'),
              y?: string(name='Y', example='318'),
            }(name='FaceRect'),
            templateFaceID?: string(name='TemplateFaceID', example='6cd509ea-54fa-4730-8e9d-c94cadcda048'),
          }
        ](name='FaceInfos'),
        templateId?: string(name='TemplateId', example='6cd509ea-54fa-4730-8e9d-c94cadcda048'),
        templateURL?: string(name='TemplateURL', example='http://viapi-test.oss-cn-shanghai.aliyuncs.com/viapi-3.0domepic/facebody/MergeImageFace/MergeImageFace-1.png'),
        updateTime?: string(name='UpdateTime', example='2021-01-29 10:19:05'),
        userId?: string(name='UserId', example='zhangsan'),
      }
    ](name='Elements'),
    total?: long(name='Total'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='7C29675C-751F-4D2F-86FB-2BD8D69AC860'),
}

model QueryFaceImageTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryFaceImageTemplateResponseBody(name='body'),
}

async function queryFaceImageTemplate(request: QueryFaceImageTemplateRequest): QueryFaceImageTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryFaceImageTemplate', 'GET', '/', 'json', false, 'json', request);
}

model UpdateFaceEntityRequest {
  dbName: string(name='DbName', example='default', position='Body'),
  entityId: string(name='EntityId', example='mm2', position='Body'),
  labels?: string(name='Labels', position='Body'),
}

model UpdateFaceEntityResponseBody = {
  requestId?: string(name='RequestId', example='DA7CAFEB-0A37-4496-9CDF-E3DBB6309CB2'),
}

model UpdateFaceEntityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateFaceEntityResponseBody(name='body'),
}

async function updateFaceEntity(request: UpdateFaceEntityRequest): UpdateFaceEntityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateFaceEntity', 'POST', '/', 'json', true, 'form', request);
}

