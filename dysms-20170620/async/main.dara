/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Dysms';
  @version = '2017-06-20';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddDomainRequest {
  domain?: string(name='Domain', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AddDomainResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model AddDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddDomainResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddDomain  AddDomainRequest
  * @return AddDomainResponse
 */
async function addDomain(request: AddDomainRequest): AddDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddDomain', 'POST', '/', 'json', false, 'json', request);
}

model AddDomainNewRequest {
  domain?: string(name='Domain', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AddDomainNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model AddDomainNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddDomainNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddDomainNew  AddDomainNewRequest
  * @return AddDomainNewResponse
 */
async function addDomainNew(request: AddDomainNewRequest): AddDomainNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddDomainNew', 'POST', '/', 'json', false, 'json', request);
}

model ApplyExportSmsSendRecordNewRequest {
  bizType?: long(name='BizType', position='Query'),
  endDate?: string(name='EndDate', position='Query'),
  errorCode?: string(name='ErrorCode', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNum?: string(name='PhoneNum', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  realTimeDataFlag?: int32(name='RealTimeDataFlag', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sendDate?: string(name='SendDate', position='Query'),
  sendStatus?: long(name='SendStatus', position='Query'),
  signName?: string(name='SignName', position='Query'),
  startDate?: string(name='StartDate', position='Query'),
  templateCode?: string(name='TemplateCode', position='Query'),
}

model ApplyExportSmsSendRecordNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model ApplyExportSmsSendRecordNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApplyExportSmsSendRecordNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ApplyExportSmsSendRecordNew  ApplyExportSmsSendRecordNewRequest
  * @return ApplyExportSmsSendRecordNewResponse
 */
async function applyExportSmsSendRecordNew(request: ApplyExportSmsSendRecordNewRequest): ApplyExportSmsSendRecordNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplyExportSmsSendRecordNew', 'POST', '/', 'json', false, 'json', request);
}

model BatchCreateSmsSignRequest {
  columnIndexMappingRule?: {
    adminIdentifiedNumber?: int32(name='AdminIdentifiedNumber'),
    adminName?: int32(name='AdminName'),
    companyName?: int32(name='CompanyName'),
    legalPersonIdentifiedNumber?: int32(name='LegalPersonIdentifiedNumber'),
    legalPersonName?: int32(name='LegalPersonName'),
    organizationCode?: int32(name='OrganizationCode'),
    remark?: int32(name='Remark'),
    sceneDescription?: int32(name='SceneDescription'),
    signatureName?: int32(name='SignatureName'),
    signatureSource?: int32(name='SignatureSource'),
    templateContent?: int32(name='TemplateContent'),
  }(name='ColumnIndexMappingRule', shrink='json', position='Query'),
  extendMessage?: string(name='ExtendMessage', position='Query'),
  fileName?: string(name='FileName', position='Query'),
  moreData?: [ string ](name='MoreData', shrink='json', position='Query'),
  operationType?: int32(name='OperationType', position='Query'),
  ossKeys?: string(name='OssKeys', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  remark?: string(name='Remark', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sceneType: int32(name='SceneType', description='This parameter is required.', position='Query'),
  serviceType?: int32(name='ServiceType', position='Query'),
  signOssKey: string(name='SignOssKey', description='This parameter is required.', position='Query'),
  userViewFileName?: string(name='UserViewFileName', position='Query'),
}

model BatchCreateSmsSignResponseBody = {
  code?: string(name='Code'),
  data?: {
    appliedNum?: int32(name='AppliedNum'),
    availableNum?: int32(name='AvailableNum'),
    batchCreateSmsSignResult?: string(name='BatchCreateSmsSignResult'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BatchCreateSmsSignResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchCreateSmsSignResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchCreateSmsSign  BatchCreateSmsSignRequest
  * @return BatchCreateSmsSignResponse
 */
async function batchCreateSmsSign(request: BatchCreateSmsSignRequest): BatchCreateSmsSignResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchCreateSmsSign', 'POST', '/', 'json', false, 'json', request);
}

model BatchDeleteExportSendRecordNewRequest {
  ids?: string(name='Ids', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model BatchDeleteExportSendRecordNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model BatchDeleteExportSendRecordNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchDeleteExportSendRecordNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchDeleteExportSendRecordNew  BatchDeleteExportSendRecordNewRequest
  * @return BatchDeleteExportSendRecordNewResponse
 */
async function batchDeleteExportSendRecordNew(request: BatchDeleteExportSendRecordNewRequest): BatchDeleteExportSendRecordNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchDeleteExportSendRecordNew', 'POST', '/', 'json', false, 'json', request);
}

model BatchDeleteTaskNewRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  taskIds: string(name='TaskIds', description='This parameter is required.', position='Query'),
}

model BatchDeleteTaskNewResponseBody = {
  failList?: [ string ](name='FailList'),
  requestId?: string(name='RequestId'),
  successList?: [ string ](name='SuccessList'),
}

model BatchDeleteTaskNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchDeleteTaskNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchDeleteTaskNew  BatchDeleteTaskNewRequest
  * @return BatchDeleteTaskNewResponse
 */
async function batchDeleteTaskNew(request: BatchDeleteTaskNewRequest): BatchDeleteTaskNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchDeleteTaskNew', 'POST', '/', 'json', false, 'json', request);
}

model CalculateSmsLengthNewRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  smsContent?: string(name='SmsContent', position='Query'),
}

model CalculateSmsLengthNewResponseBody = {
  length?: int32(name='Length'),
  number?: int32(name='Number'),
  requestId?: string(name='RequestId'),
}

model CalculateSmsLengthNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CalculateSmsLengthNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CalculateSmsLengthNew  CalculateSmsLengthNewRequest
  * @return CalculateSmsLengthNewResponse
 */
async function calculateSmsLengthNew(request: CalculateSmsLengthNewRequest): CalculateSmsLengthNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CalculateSmsLengthNew', 'POST', '/', 'json', false, 'json', request);
}

model CancelSmsSignRequest {
  orderId?: string(name='OrderId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  qualificationId?: long(name='QualificationId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  signatureCode?: string(name='SignatureCode', position='Query'),
  signatureId?: long(name='SignatureId', position='Query'),
}

model CancelSmsSignResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model CancelSmsSignResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelSmsSignResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CancelSmsSign  CancelSmsSignRequest
  * @return CancelSmsSignResponse
 */
async function cancelSmsSign(request: CancelSmsSignRequest): CancelSmsSignResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelSmsSign', 'POST', '/', 'json', false, 'json', request);
}

model CancelSmsTemplateRequest {
  orderId?: long(name='OrderId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  templateCode?: string(name='TemplateCode', position='Query'),
}

model CancelSmsTemplateResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model CancelSmsTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelSmsTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CancelSmsTemplate  CancelSmsTemplateRequest
  * @return CancelSmsTemplateResponse
 */
async function cancelSmsTemplate(request: CancelSmsTemplateRequest): CancelSmsTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelSmsTemplate', 'POST', '/', 'json', false, 'json', request);
}

model CancelSmsTemplateNewRequest {
  intelligentApproval?: boolean(name='IntelligentApproval', position='Query'),
  orderId?: long(name='OrderId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  templateCode?: string(name='TemplateCode', position='Query'),
}

model CancelSmsTemplateNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model CancelSmsTemplateNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelSmsTemplateNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CancelSmsTemplateNew  CancelSmsTemplateNewRequest
  * @return CancelSmsTemplateNewResponse
 */
async function cancelSmsTemplateNew(request: CancelSmsTemplateNewRequest): CancelSmsTemplateNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelSmsTemplateNew', 'POST', '/', 'json', false, 'json', request);
}

model CheckSmsSignNewRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CheckSmsSignNewResponseBody = {
  common?: boolean(name='Common'),
  requestId?: string(name='RequestId'),
  verification?: boolean(name='Verification'),
}

model CheckSmsSignNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckSmsSignNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckSmsSignNew  CheckSmsSignNewRequest
  * @return CheckSmsSignNewResponse
 */
async function checkSmsSignNew(request: CheckSmsSignNewRequest): CheckSmsSignNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckSmsSignNew', 'POST', '/', 'json', false, 'json', request);
}

model CreateAlicomProductRequest {
  busOffer?: long(name='BusOffer', position='Query'),
  busOffers?: string(name='BusOffers', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  prodId: string(name='ProdId', description='This parameter is required.', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateAlicomProductResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model CreateAlicomProductResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAlicomProductResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateAlicomProduct  CreateAlicomProductRequest
  * @return CreateAlicomProductResponse
 */
async function createAlicomProduct(request: CreateAlicomProductRequest): CreateAlicomProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAlicomProduct', 'POST', '/', 'json', false, 'json', request);
}

model CreateAuthorizationRequest {
  authorizeCode?: string(name='AuthorizeCode', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateAuthorizationResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model CreateAuthorizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAuthorizationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateAuthorization  CreateAuthorizationRequest
  * @return CreateAuthorizationResponse
 */
async function createAuthorization(request: CreateAuthorizationRequest): CreateAuthorizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAuthorization', 'POST', '/', 'json', false, 'json', request);
}

model CreateCardMessageCallbackRequest {
  bizType: string(name='BizType', description='This parameter is required.', position='Query'),
  callbackUrl: string(name='CallbackUrl', description='This parameter is required.', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateCardMessageCallbackResponseBody = {
  requestId?: string(name='RequestId'),
  testFailCode?: string(name='TestFailCode'),
  testResponse?: string(name='TestResponse'),
  testSuccess?: boolean(name='TestSuccess'),
}

model CreateCardMessageCallbackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCardMessageCallbackResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateCardMessageCallback  CreateCardMessageCallbackRequest
  * @return CreateCardMessageCallbackResponse
 */
async function createCardMessageCallback(request: CreateCardMessageCallbackRequest): CreateCardMessageCallbackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCardMessageCallback', 'POST', '/', 'json', false, 'json', request);
}

model CreateCardMessageQueueRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  queueType: string(name='QueueType', description='This parameter is required.', position='Query'),
  region?: string(name='Region', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateCardMessageQueueResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model CreateCardMessageQueueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCardMessageQueueResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateCardMessageQueue  CreateCardMessageQueueRequest
  * @return CreateCardMessageQueueResponse
 */
async function createCardMessageQueue(request: CreateCardMessageQueueRequest): CreateCardMessageQueueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCardMessageQueue', 'POST', '/', 'json', false, 'json', request);
}

model CreateDigitalSmsTemplateNewRequest {
  bizType?: string(name='BizType', position='Query'),
  contentOssKeys?: string(name='ContentOssKeys', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  remark?: string(name='Remark', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  templateContent?: string(name='TemplateContent', position='Query'),
  templateName?: string(name='TemplateName', position='Query'),
}

model CreateDigitalSmsTemplateNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model CreateDigitalSmsTemplateNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDigitalSmsTemplateNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDigitalSmsTemplateNew  CreateDigitalSmsTemplateNewRequest
  * @return CreateDigitalSmsTemplateNewResponse
 */
async function createDigitalSmsTemplateNew(request: CreateDigitalSmsTemplateNewRequest): CreateDigitalSmsTemplateNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDigitalSmsTemplateNew', 'POST', '/', 'json', false, 'json', request);
}

model CreateFileByBizRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateFileByBizResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model CreateFileByBizResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFileByBizResponseBody(name='body'),
}

/**
  * @deprecated OpenAPI CreateFileByBiz is deprecated  * @param request  the request parameters of CreateFileByBiz  CreateFileByBizRequest
  * @return CreateFileByBizResponse
 */
// Deprecated
async function createFileByBiz(request: CreateFileByBizRequest): CreateFileByBizResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFileByBiz', 'POST', '/', 'json', false, 'json', request);
}

model CreateFlowLimitRequest {
  dailyLimit?: string(name='DailyLimit', position='Query'),
  hourLimit?: string(name='HourLimit', position='Query'),
  minuteLimit?: string(name='MinuteLimit', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateFlowLimitResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model CreateFlowLimitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFlowLimitResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateFlowLimit  CreateFlowLimitRequest
  * @return CreateFlowLimitResponse
 */
async function createFlowLimit(request: CreateFlowLimitRequest): CreateFlowLimitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFlowLimit', 'POST', '/', 'json', false, 'json', request);
}

model CreateFlowLimitNewRequest {
  bizType?: string(name='BizType', position='Query'),
  dailyLimit?: string(name='DailyLimit', position='Query'),
  hourLimit?: string(name='HourLimit', position='Query'),
  minuteLimit?: string(name='MinuteLimit', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateFlowLimitNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model CreateFlowLimitNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFlowLimitNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateFlowLimitNew  CreateFlowLimitNewRequest
  * @return CreateFlowLimitNewResponse
 */
async function createFlowLimitNew(request: CreateFlowLimitNewRequest): CreateFlowLimitNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFlowLimitNew', 'POST', '/', 'json', false, 'json', request);
}

model CreateMessageCallbackNewRequest {
  bizType: string(name='BizType', description='This parameter is required.', position='Query'),
  callbackUrl: string(name='CallbackUrl', description='This parameter is required.', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateMessageCallbackNewResponseBody = {
  requestId?: string(name='RequestId'),
  testFailCode?: string(name='TestFailCode'),
  testResponse?: string(name='TestResponse'),
  testSuccess?: boolean(name='TestSuccess'),
}

model CreateMessageCallbackNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMessageCallbackNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateMessageCallbackNew  CreateMessageCallbackNewRequest
  * @return CreateMessageCallbackNewResponse
 */
async function createMessageCallbackNew(request: CreateMessageCallbackNewRequest): CreateMessageCallbackNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMessageCallbackNew', 'POST', '/', 'json', false, 'json', request);
}

model CreateMessageCallbackTestNewRequest {
  bizType?: string(name='BizType', position='Query'),
  content?: string(name='Content', position='Query'),
  method?: string(name='Method', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  url?: string(name='Url', position='Query'),
}

model CreateMessageCallbackTestNewResponseBody = {
  requestId?: string(name='RequestId'),
  testFailCode?: string(name='TestFailCode'),
  testResponse?: string(name='TestResponse'),
  testSuccess?: boolean(name='TestSuccess'),
}

model CreateMessageCallbackTestNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMessageCallbackTestNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateMessageCallbackTestNew  CreateMessageCallbackTestNewRequest
  * @return CreateMessageCallbackTestNewResponse
 */
async function createMessageCallbackTestNew(request: CreateMessageCallbackTestNewRequest): CreateMessageCallbackTestNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMessageCallbackTestNew', 'POST', '/', 'json', false, 'json', request);
}

model CreateMessageQueueNewRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  queueType?: string(name='QueueType', position='Query'),
  region?: string(name='Region', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateMessageQueueNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model CreateMessageQueueNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMessageQueueNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateMessageQueueNew  CreateMessageQueueNewRequest
  * @return CreateMessageQueueNewResponse
 */
async function createMessageQueueNew(request: CreateMessageQueueNewRequest): CreateMessageQueueNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMessageQueueNew', 'POST', '/', 'json', false, 'json', request);
}

model CreatePhoneWhiteListRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumbers?: string(name='PhoneNumbers', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreatePhoneWhiteListResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model CreatePhoneWhiteListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePhoneWhiteListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreatePhoneWhiteList  CreatePhoneWhiteListRequest
  * @return CreatePhoneWhiteListResponse
 */
async function createPhoneWhiteList(request: CreatePhoneWhiteListRequest): CreatePhoneWhiteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePhoneWhiteList', 'POST', '/', 'json', false, 'json', request);
}

model CreatePhoneWhiteListNewRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumbers?: string(name='PhoneNumbers', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  remarks?: [ string ](name='Remarks', shrink='json', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreatePhoneWhiteListNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model CreatePhoneWhiteListNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePhoneWhiteListNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreatePhoneWhiteListNew  CreatePhoneWhiteListNewRequest
  * @return CreatePhoneWhiteListNewResponse
 */
async function createPhoneWhiteListNew(request: CreatePhoneWhiteListNewRequest): CreatePhoneWhiteListNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePhoneWhiteListNew', 'POST', '/', 'json', false, 'json', request);
}

model CreatePkgThresholdRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  packageWarningLimit?: string(name='PackageWarningLimit', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreatePkgThresholdResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model CreatePkgThresholdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePkgThresholdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreatePkgThreshold  CreatePkgThresholdRequest
  * @return CreatePkgThresholdResponse
 */
async function createPkgThreshold(request: CreatePkgThresholdRequest): CreatePkgThresholdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePkgThreshold', 'POST', '/', 'json', false, 'json', request);
}

model CreatePkgThresholdNewRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  packageWarningLimit?: string(name='PackageWarningLimit', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreatePkgThresholdNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model CreatePkgThresholdNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePkgThresholdNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreatePkgThresholdNew  CreatePkgThresholdNewRequest
  * @return CreatePkgThresholdNewResponse
 */
async function createPkgThresholdNew(request: CreatePkgThresholdNewRequest): CreatePkgThresholdNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePkgThresholdNew', 'POST', '/', 'json', false, 'json', request);
}

model CreatePrevLimitNewRequest {
  hourLimit: long(name='HourLimit', description='This parameter is required.', minimum=-9223372036854775808, maximum=9223372036854775807, position='Query'),
  increaseRate: int32(name='IncreaseRate', description='This parameter is required.', minimum=-2147483648, maximum=2147483647, position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  successRate: int32(name='SuccessRate', description='This parameter is required.', minimum=-2147483648, maximum=2147483647, position='Query'),
}

model CreatePrevLimitNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model CreatePrevLimitNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePrevLimitNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreatePrevLimitNew  CreatePrevLimitNewRequest
  * @return CreatePrevLimitNewResponse
 */
async function createPrevLimitNew(request: CreatePrevLimitNewRequest): CreatePrevLimitNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePrevLimitNew', 'POST', '/', 'json', false, 'json', request);
}

model CreateProductRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  prodId: string(name='ProdId', description='This parameter is required.', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateProductResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: boolean(name='data'),
}

model CreateProductResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateProductResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateProduct  CreateProductRequest
  * @return CreateProductResponse
 */
async function createProduct(request: CreateProductRequest): CreateProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateProduct', 'POST', '/', 'json', false, 'json', request);
}

model CreateProductNewRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  prodId: string(name='ProdId', description='This parameter is required.', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateProductNewResponseBody = {
  openResult?: boolean(name='OpenResult'),
  requestId?: string(name='RequestId'),
}

model CreateProductNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateProductNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateProductNew  CreateProductNewRequest
  * @return CreateProductNewResponse
 */
async function createProductNew(request: CreateProductNewRequest): CreateProductNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateProductNew', 'POST', '/', 'json', false, 'json', request);
}

model CreateShortUrlNewRequest {
  effectDay?: int32(name='EffectDay', position='Query'),
  eventName?: string(name='EventName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceUrl?: string(name='SourceUrl', position='Query'),
}

model CreateShortUrlNewResponseBody = {
  eventName?: string(name='EventName'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtInvalidTime?: string(name='GmtInvalidTime'),
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
  shortUrl?: string(name='ShortUrl'),
  sourceUrl?: string(name='SourceUrl'),
}

model CreateShortUrlNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateShortUrlNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateShortUrlNew  CreateShortUrlNewRequest
  * @return CreateShortUrlNewResponse
 */
async function createShortUrlNew(request: CreateShortUrlNewRequest): CreateShortUrlNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateShortUrlNew', 'POST', '/', 'json', false, 'json', request);
}

model CreateSmsDetectTaskNewRequest {
  check: boolean(name='Check', description='This parameter is required.', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  signName: string(name='SignName', description='This parameter is required.', position='Query'),
  smsContent: string(name='SmsContent', description='This parameter is required.', position='Query'),
  templateCode: string(name='TemplateCode', description='This parameter is required.', position='Query'),
  templateParam: string(name='TemplateParam', description='This parameter is required.', position='Query'),
}

model CreateSmsDetectTaskNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model CreateSmsDetectTaskNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSmsDetectTaskNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateSmsDetectTaskNew  CreateSmsDetectTaskNewRequest
  * @return CreateSmsDetectTaskNewResponse
 */
async function createSmsDetectTaskNew(request: CreateSmsDetectTaskNewRequest): CreateSmsDetectTaskNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSmsDetectTaskNew', 'POST', '/', 'json', false, 'json', request);
}

model CreateSmsInternalApplyRequest {
  appDownloadLink?: string(name='AppDownloadLink', position='Query'),
  country?: string(name='Country', position='Query'),
  industry?: string(name='Industry', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageLink?: string(name='PageLink', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  remark?: string(name='Remark', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  templateName?: string(name='TemplateName', position='Query'),
}

model CreateSmsInternalApplyResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model CreateSmsInternalApplyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSmsInternalApplyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateSmsInternalApply  CreateSmsInternalApplyRequest
  * @return CreateSmsInternalApplyResponse
 */
async function createSmsInternalApply(request: CreateSmsInternalApplyRequest): CreateSmsInternalApplyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSmsInternalApply', 'POST', '/', 'json', false, 'json', request);
}

model CreateSmsProductForChannelCustRequest {
  channelId?: int32(name='ChannelId', position='Query'),
  onlyCheckOpened?: boolean(name='OnlyCheckOpened', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateSmsProductForChannelCustResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model CreateSmsProductForChannelCustResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSmsProductForChannelCustResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateSmsProductForChannelCust  CreateSmsProductForChannelCustRequest
  * @return CreateSmsProductForChannelCustResponse
 */
async function createSmsProductForChannelCust(request: CreateSmsProductForChannelCustRequest): CreateSmsProductForChannelCustResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSmsProductForChannelCust', 'POST', '/', 'json', false, 'json', request);
}

model CreateSmsSaasTaskRequest {
  bizType?: string(name='BizType', position='Query'),
  clientIp?: string(name='ClientIp', position='Query'),
  dataType?: string(name='DataType', position='Query'),
  orderTime?: string(name='OrderTime', position='Query'),
  ossFileName?: string(name='OssFileName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneList?: string(name='PhoneList', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  scheduleType?: string(name='ScheduleType', position='Query'),
  signName?: string(name='SignName', position='Query'),
  smsContent?: string(name='SmsContent', position='Query'),
  smsTemplateCode?: string(name='SmsTemplateCode', position='Query'),
  taskName?: string(name='TaskName', position='Query'),
  validCount?: string(name='ValidCount', position='Query'),
}

model CreateSmsSaasTaskResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model CreateSmsSaasTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSmsSaasTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateSmsSaasTask  CreateSmsSaasTaskRequest
  * @return CreateSmsSaasTaskResponse
 */
async function createSmsSaasTask(request: CreateSmsSaasTaskRequest): CreateSmsSaasTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSmsSaasTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateSmsSaasTaskNewRequest {
  bizType?: string(name='BizType', position='Query'),
  dataAbilityTaskId?: string(name='DataAbilityTaskId', position='Query'),
  dataType?: string(name='DataType', position='Query'),
  orderTime?: string(name='OrderTime', position='Query'),
  ossFileName?: string(name='OssFileName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneList?: string(name='PhoneList', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  scheduleType?: string(name='ScheduleType', position='Query'),
  signName?: string(name='SignName', position='Query'),
  smsContent?: string(name='SmsContent', position='Query'),
  smsTemplateCode?: string(name='SmsTemplateCode', position='Query'),
  taskName?: string(name='TaskName', position='Query'),
  validCount?: string(name='ValidCount', position='Query'),
}

model CreateSmsSaasTaskNewResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateSmsSaasTaskNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSmsSaasTaskNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateSmsSaasTaskNew  CreateSmsSaasTaskNewRequest
  * @return CreateSmsSaasTaskNewResponse
 */
async function createSmsSaasTaskNew(request: CreateSmsSaasTaskNewRequest): CreateSmsSaasTaskNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSmsSaasTaskNew', 'POST', '/', 'json', false, 'json', request);
}

model CreateSmsSendFailDetailsDownloadRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  prodId?: string(name='ProdId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sendDate?: string(name='SendDate', position='Query'),
}

model CreateSmsSendFailDetailsDownloadResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model CreateSmsSendFailDetailsDownloadResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSmsSendFailDetailsDownloadResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateSmsSendFailDetailsDownload  CreateSmsSendFailDetailsDownloadRequest
  * @return CreateSmsSendFailDetailsDownloadResponse
 */
async function createSmsSendFailDetailsDownload(request: CreateSmsSendFailDetailsDownloadRequest): CreateSmsSendFailDetailsDownloadResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSmsSendFailDetailsDownload', 'POST', '/', 'json', false, 'json', request);
}

model CreateSmsSignRequest {
  extendMessage?: string(name='ExtendMessage', position='Query'),
  fileIds?: string(name='FileIds', position='Query'),
  orderId?: string(name='OrderId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  remark?: string(name='Remark', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sceneType?: int32(name='SceneType', position='Query'),
  serviceType?: int32(name='ServiceType', position='Query'),
  signName?: string(name='SignName', position='Query'),
}

model CreateSmsSignResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model CreateSmsSignResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSmsSignResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateSmsSign  CreateSmsSignRequest
  * @return CreateSmsSignResponse
 */
async function createSmsSign(request: CreateSmsSignRequest): CreateSmsSignResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSmsSign', 'POST', '/', 'json', false, 'json', request);
}

model CreateSmsSignNewRequest {
  applicationSceneId?: long(name='ApplicationSceneId', position='Query'),
  applySource?: string(name='ApplySource', position='Query'),
  authorization?: string(name='Authorization', position='Query'),
  authorizationEffTime?: string(name='AuthorizationEffTime', position='Query'),
  authorizationLetter?: string(name='AuthorizationLetter', position='Query'),
  authorizationLetterAuditPass?: boolean(name='AuthorizationLetterAuditPass', position='Query'),
  authorizationLetterId?: long(name='AuthorizationLetterId', position='Query'),
  authorizationLetterName?: string(name='AuthorizationLetterName', position='Query'),
  authorizationSignScope?: string(name='AuthorizationSignScope', position='Query'),
  createSignGray?: boolean(name='CreateSignGray', position='Query'),
  enableAuthorizationLetter?: boolean(name='EnableAuthorizationLetter', position='Query'),
  extendMessage?: string(name='ExtendMessage', position='Query'),
  fileIds?: string(name='FileIds', position='Query'),
  isAuthorizationLetterOCRComplete?: boolean(name='IsAuthorizationLetterOCRComplete', position='Query'),
  isAuthorizationLetterOCRDiff?: boolean(name='IsAuthorizationLetterOCRDiff', position='Query'),
  isSignScopeOCRDiff?: boolean(name='IsSignScopeOCRDiff', position='Query'),
  moreData?: [ string ](name='MoreData', shrink='json', position='Query'),
  orderId?: string(name='OrderId', position='Query'),
  organizationCode?: string(name='OrganizationCode', position='Query'),
  ossKeys?: string(name='OssKeys', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  proxyAuthorization?: string(name='ProxyAuthorization', position='Query'),
  qualificationId?: long(name='QualificationId', position='Query'),
  qualificationType?: long(name='QualificationType', position='Query'),
  qualificationVersion?: long(name='QualificationVersion', position='Query'),
  remark?: string(name='Remark', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sceneType?: int32(name='SceneType', position='Query'),
  serviceType?: int32(name='ServiceType', position='Query'),
  signCode?: string(name='SignCode', position='Query'),
  signId?: string(name='SignId', position='Query'),
  signName?: string(name='SignName', position='Query'),
  signScopeOCR?: string(name='SignScopeOCR', position='Query'),
  signUpgrade?: boolean(name='SignUpgrade', position='Query'),
  thirdParty?: boolean(name='ThirdParty', position='Query'),
  userViewFileName?: string(name='UserViewFileName', position='Query'),
}

model CreateSmsSignNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model CreateSmsSignNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSmsSignNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateSmsSignNew  CreateSmsSignNewRequest
  * @return CreateSmsSignNewResponse
 */
async function createSmsSignNew(request: CreateSmsSignNewRequest): CreateSmsSignNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSmsSignNew', 'POST', '/', 'json', false, 'json', request);
}

model CreateSmsTemplateNewRequest {
  aiTemplate?: long(name='AiTemplate', position='Query'),
  aiTemplateUuid?: string(name='AiTemplateUuid', position='Query'),
  applicationSceneId?: long(name='ApplicationSceneId', position='Query'),
  applySource?: string(name='ApplySource', position='Query'),
  bizType?: string(name='BizType', position='Query'),
  intlType?: int32(name='IntlType', position='Query'),
  moreData?: [ string ](name='MoreData', shrink='json', position='Query'),
  orderId?: string(name='OrderId', position='Query'),
  ossKeys?: string(name='OssKeys', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  productUrl?: string(name='ProductUrl', position='Query'),
  relatedSignName?: string(name='RelatedSignName', position='Query'),
  relatedSignOrderId?: string(name='RelatedSignOrderId', position='Query'),
  relatedSignUsageName?: string(name='RelatedSignUsageName', position='Query'),
  remark?: string(name='Remark', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  rmdTemplateId?: long(name='RmdTemplateId', position='Query'),
  templateCode?: string(name='TemplateCode', position='Query'),
  templateContent?: string(name='TemplateContent', position='Query'),
  templateName?: string(name='TemplateName', position='Query'),
  templateRule?: string(name='TemplateRule', position='Query'),
  userViewFileName?: string(name='UserViewFileName', position='Query'),
}

model CreateSmsTemplateNewResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model CreateSmsTemplateNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSmsTemplateNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateSmsTemplateNew  CreateSmsTemplateNewRequest
  * @return CreateSmsTemplateNewResponse
 */
async function createSmsTemplateNew(request: CreateSmsTemplateNewRequest): CreateSmsTemplateNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSmsTemplateNew', 'POST', '/', 'json', false, 'json', request);
}

model CreateWarningThresholdRequest {
  bizType?: string(name='BizType', position='Query'),
  dailyHaltLimit?: int32(name='DailyHaltLimit', position='Query'),
  dailyWarningLimit?: int32(name='DailyWarningLimit', position='Query'),
  monthlyHaltLimit?: int32(name='MonthlyHaltLimit', position='Query'),
  monthlyWarningLimit?: int32(name='MonthlyWarningLimit', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateWarningThresholdResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model CreateWarningThresholdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWarningThresholdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateWarningThreshold  CreateWarningThresholdRequest
  * @return CreateWarningThresholdResponse
 */
async function createWarningThreshold(request: CreateWarningThresholdRequest): CreateWarningThresholdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateWarningThreshold', 'POST', '/', 'json', false, 'json', request);
}

model CreateWarningThresholdNewRequest {
  bizType?: string(name='BizType', position='Query'),
  dailyHaltLimit?: int32(name='DailyHaltLimit', position='Query'),
  dailyWarningLimit?: int32(name='DailyWarningLimit', position='Query'),
  monthlyHaltLimit?: int32(name='MonthlyHaltLimit', position='Query'),
  monthlyWarningLimit?: int32(name='MonthlyWarningLimit', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateWarningThresholdNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model CreateWarningThresholdNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWarningThresholdNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateWarningThresholdNew  CreateWarningThresholdNewRequest
  * @return CreateWarningThresholdNewResponse
 */
async function createWarningThresholdNew(request: CreateWarningThresholdNewRequest): CreateWarningThresholdNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateWarningThresholdNew', 'POST', '/', 'json', false, 'json', request);
}

model DelCardSendExportInfoRequest {
  ids?: [ long ](name='Ids', position='Query'),
}

model DelCardSendExportInfoResponseBody = {
  code?: string(name='Code'),
  model?: string(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DelCardSendExportInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DelCardSendExportInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DelCardSendExportInfo  DelCardSendExportInfoRequest
  * @return DelCardSendExportInfoResponse
 */
async function delCardSendExportInfo(request: DelCardSendExportInfoRequest): DelCardSendExportInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DelCardSendExportInfo', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCardMessageCallbackRequest {
  bizType: string(name='BizType', description='This parameter is required.', position='Query'),
  callbackUrl: string(name='CallbackUrl', description='This parameter is required.', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteCardMessageCallbackResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model DeleteCardMessageCallbackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCardMessageCallbackResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteCardMessageCallback  DeleteCardMessageCallbackRequest
  * @return DeleteCardMessageCallbackResponse
 */
async function deleteCardMessageCallback(request: DeleteCardMessageCallbackRequest): DeleteCardMessageCallbackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCardMessageCallback', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCardMessageQueueRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  queueType: string(name='QueueType', description='This parameter is required.', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteCardMessageQueueResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model DeleteCardMessageQueueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCardMessageQueueResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteCardMessageQueue  DeleteCardMessageQueueRequest
  * @return DeleteCardMessageQueueResponse
 */
async function deleteCardMessageQueue(request: DeleteCardMessageQueueRequest): DeleteCardMessageQueueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCardMessageQueue', 'POST', '/', 'json', false, 'json', request);
}

model DeleteContactsRequest {
  ids?: string(name='Ids', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteContactsResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model DeleteContactsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteContactsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteContacts  DeleteContactsRequest
  * @return DeleteContactsResponse
 */
async function deleteContacts(request: DeleteContactsRequest): DeleteContactsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteContacts', 'POST', '/', 'json', false, 'json', request);
}

model DeleteContactsNewRequest {
  ids?: string(name='Ids', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteContactsNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model DeleteContactsNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteContactsNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteContactsNew  DeleteContactsNewRequest
  * @return DeleteContactsNewResponse
 */
async function deleteContactsNew(request: DeleteContactsNewRequest): DeleteContactsNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteContactsNew', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDigitalTemplateNewRequest {
  auditState?: string(name='AuditState', position='Query'),
  bizType?: string(name='BizType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  templateCode?: string(name='TemplateCode', position='Query'),
  templateName?: string(name='TemplateName', position='Query'),
}

model DeleteDigitalTemplateNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model DeleteDigitalTemplateNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDigitalTemplateNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDigitalTemplateNew  DeleteDigitalTemplateNewRequest
  * @return DeleteDigitalTemplateNewResponse
 */
async function deleteDigitalTemplateNew(request: DeleteDigitalTemplateNewRequest): DeleteDigitalTemplateNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDigitalTemplateNew', 'POST', '/', 'json', false, 'json', request);
}

model DeleteMessageCallbackNewRequest {
  bizType: string(name='BizType', description='This parameter is required.', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteMessageCallbackNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model DeleteMessageCallbackNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMessageCallbackNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteMessageCallbackNew  DeleteMessageCallbackNewRequest
  * @return DeleteMessageCallbackNewResponse
 */
async function deleteMessageCallbackNew(request: DeleteMessageCallbackNewRequest): DeleteMessageCallbackNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteMessageCallbackNew', 'POST', '/', 'json', false, 'json', request);
}

model DeleteMessageQueueNewRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  queueType?: string(name='QueueType', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteMessageQueueNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model DeleteMessageQueueNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMessageQueueNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteMessageQueueNew  DeleteMessageQueueNewRequest
  * @return DeleteMessageQueueNewResponse
 */
async function deleteMessageQueueNew(request: DeleteMessageQueueNewRequest): DeleteMessageQueueNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteMessageQueueNew', 'POST', '/', 'json', false, 'json', request);
}

model DeleteOrCanceleTaskRequest {
  isDeleted?: int32(name='IsDeleted', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: string(name='Status', position='Query'),
  taskId?: long(name='TaskId', position='Query'),
}

model DeleteOrCanceleTaskResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model DeleteOrCanceleTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteOrCanceleTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteOrCanceleTask  DeleteOrCanceleTaskRequest
  * @return DeleteOrCanceleTaskResponse
 */
async function deleteOrCanceleTask(request: DeleteOrCanceleTaskRequest): DeleteOrCanceleTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteOrCanceleTask', 'POST', '/', 'json', false, 'json', request);
}

model DeleteOrCanceleTaskNewRequest {
  isDeleted?: int32(name='IsDeleted', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: string(name='Status', position='Query'),
  taskId?: long(name='TaskId', position='Query'),
}

model DeleteOrCanceleTaskNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: long(name='Result'),
}

model DeleteOrCanceleTaskNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteOrCanceleTaskNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteOrCanceleTaskNew  DeleteOrCanceleTaskNewRequest
  * @return DeleteOrCanceleTaskNewResponse
 */
async function deleteOrCanceleTaskNew(request: DeleteOrCanceleTaskNewRequest): DeleteOrCanceleTaskNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteOrCanceleTaskNew', 'POST', '/', 'json', false, 'json', request);
}

model DeletePhoneWhiteListRequest {
  ids: string(name='Ids', description='This parameter is required.', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeletePhoneWhiteListResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model DeletePhoneWhiteListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePhoneWhiteListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeletePhoneWhiteList  DeletePhoneWhiteListRequest
  * @return DeletePhoneWhiteListResponse
 */
async function deletePhoneWhiteList(request: DeletePhoneWhiteListRequest): DeletePhoneWhiteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePhoneWhiteList', 'POST', '/', 'json', false, 'json', request);
}

model DeletePhoneWhiteListNewRequest {
  ids: string(name='Ids', description='This parameter is required.', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeletePhoneWhiteListNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model DeletePhoneWhiteListNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePhoneWhiteListNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeletePhoneWhiteListNew  DeletePhoneWhiteListNewRequest
  * @return DeletePhoneWhiteListNewResponse
 */
async function deletePhoneWhiteListNew(request: DeletePhoneWhiteListNewRequest): DeletePhoneWhiteListNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePhoneWhiteListNew', 'POST', '/', 'json', false, 'json', request);
}

model DeleteShortUrlNewRequest {
  ids: string(name='Ids', description='This parameter is required.', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteShortUrlNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model DeleteShortUrlNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteShortUrlNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteShortUrlNew  DeleteShortUrlNewRequest
  * @return DeleteShortUrlNewResponse
 */
async function deleteShortUrlNew(request: DeleteShortUrlNewRequest): DeleteShortUrlNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteShortUrlNew', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSmsTemplateNewRequest {
  isSmsSign?: boolean(name='IsSmsSign', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  smsTemplateIds: string(name='SmsTemplateIds', description='This parameter is required.', position='Query'),
}

model DeleteSmsTemplateNewResponseBody = {
  failList?: {
    fail?: [ string ](name='Fail')
  }(name='FailList'),
  requestId?: string(name='RequestId'),
  successList?: {
    succes?: [ string ](name='Succes')
  }(name='SuccessList'),
}

model DeleteSmsTemplateNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSmsTemplateNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteSmsTemplateNew  DeleteSmsTemplateNewRequest
  * @return DeleteSmsTemplateNewResponse
 */
async function deleteSmsTemplateNew(request: DeleteSmsTemplateNewRequest): DeleteSmsTemplateNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSmsTemplateNew', 'POST', '/', 'json', false, 'json', request);
}

model ExportCardSmsHistoryRequest {
  apiSend?: long(name='ApiSend', position='Query'),
  cardTemplateType?: string(name='CardTemplateType', position='Query'),
  gmtCreate: string(name='GmtCreate', description='This parameter is required.', position='Query'),
  receiveState?: long(name='ReceiveState', position='Query'),
  receiver?: string(name='Receiver', position='Query'),
  renderState?: long(name='RenderState', position='Query'),
  signName?: string(name='SignName', position='Query'),
  tmpCode?: string(name='TmpCode', position='Query'),
}

model ExportCardSmsHistoryResponseBody = {
  code?: string(name='Code'),
  model?: {
    pageNo?: long(name='PageNo'),
    pageSize?: long(name='PageSize'),
    records?: [ 
      {
        acceptDate?: long(name='AcceptDate'),
        apiSend?: long(name='ApiSend'),
        cardTemplateType?: string(name='CardTemplateType'),
        customTmpCode?: string(name='CustomTmpCode'),
        description?: string(name='Description'),
        fuuId?: string(name='FuuId'),
        gmtCreate?: long(name='GmtCreate'),
        gmtModified?: long(name='GmtModified'),
        id?: long(name='Id'),
        isSupport?: long(name='IsSupport'),
        outId?: string(name='OutId'),
        pid?: long(name='Pid'),
        receiveState?: long(name='ReceiveState'),
        receiver?: string(name='Receiver'),
        renderDate?: long(name='RenderDate'),
        renderState?: long(name='RenderState'),
        shortUrl?: string(name='ShortUrl'),
        signName?: string(name='SignName'),
        smsContent?: string(name='SmsContent'),
        suggestion?: string(name='Suggestion'),
        tmpCode?: string(name='TmpCode'),
        tmpId?: string(name='TmpId'),
        tmpType?: long(name='TmpType'),
        tmpTypeName?: string(name='TmpTypeName'),
      }
    ](name='Records'),
    totalCount?: long(name='TotalCount'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ExportCardSmsHistoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportCardSmsHistoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ExportCardSmsHistory  ExportCardSmsHistoryRequest
  * @return ExportCardSmsHistoryResponse
 */
async function exportCardSmsHistory(request: ExportCardSmsHistoryRequest): ExportCardSmsHistoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportCardSmsHistory', 'POST', '/', 'json', false, 'json', request);
}

model ExportCardSmsStatisticsRequest {
  customTmpCode?: string(name='CustomTmpCode', position='Query'),
  sendDateEnd?: string(name='SendDateEnd', position='Query'),
  sendDateStart?: string(name='SendDateStart', position='Query'),
  signName?: string(name='SignName', position='Query'),
  tmpCode?: string(name='TmpCode', position='Query'),
  tmpName?: string(name='TmpName', position='Query'),
}

model ExportCardSmsStatisticsResponseBody = {
  code?: string(name='Code'),
  model?: string(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ExportCardSmsStatisticsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportCardSmsStatisticsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ExportCardSmsStatistics  ExportCardSmsStatisticsRequest
  * @return ExportCardSmsStatisticsResponse
 */
async function exportCardSmsStatistics(request: ExportCardSmsStatisticsRequest): ExportCardSmsStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportCardSmsStatistics', 'POST', '/', 'json', false, 'json', request);
}

model ExportCardSmsStatisticsSendRequest {
  customTmpCode?: string(name='CustomTmpCode', position='Query'),
  sendDateEnd: string(name='SendDateEnd', description='This parameter is required.', position='Query'),
  sendDateStart: string(name='SendDateStart', description='This parameter is required.', position='Query'),
  signName?: string(name='SignName', position='Query'),
  tmpCode?: string(name='TmpCode', position='Query'),
}

model ExportCardSmsStatisticsSendResponseBody = {
  code?: string(name='Code'),
  model?: string(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ExportCardSmsStatisticsSendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportCardSmsStatisticsSendResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ExportCardSmsStatisticsSend  ExportCardSmsStatisticsSendRequest
  * @return ExportCardSmsStatisticsSendResponse
 */
async function exportCardSmsStatisticsSend(request: ExportCardSmsStatisticsSendRequest): ExportCardSmsStatisticsSendResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportCardSmsStatisticsSend', 'POST', '/', 'json', false, 'json', request);
}

model ExportTmpEffectReportDataRequest {
  endDate: string(name='EndDate', description='This parameter is required.', position='Query'),
  startDate: string(name='StartDate', description='This parameter is required.', position='Query'),
  tmpCode?: string(name='TmpCode', position='Query'),
  tmpName?: string(name='TmpName', position='Query'),
  vendorCode?: string(name='VendorCode', position='Query'),
  vendorName?: string(name='VendorName', position='Query'),
}

model ExportTmpEffectReportDataResponseBody = {
  code?: string(name='Code'),
  model?: string(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ExportTmpEffectReportDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportTmpEffectReportDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ExportTmpEffectReportData  ExportTmpEffectReportDataRequest
  * @return ExportTmpEffectReportDataResponse
 */
async function exportTmpEffectReportData(request: ExportTmpEffectReportDataRequest): ExportTmpEffectReportDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportTmpEffectReportData', 'POST', '/', 'json', false, 'json', request);
}

model GetLetterOfAuthorizationRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  signName?: string(name='SignName', position='Query'),
}

model GetLetterOfAuthorizationResponseBody = {
  code?: string(name='Code'),
  fileUrl?: string(name='FileUrl'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model GetLetterOfAuthorizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLetterOfAuthorizationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetLetterOfAuthorization  GetLetterOfAuthorizationRequest
  * @return GetLetterOfAuthorizationResponse
 */
async function getLetterOfAuthorization(request: GetLetterOfAuthorizationRequest): GetLetterOfAuthorizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLetterOfAuthorization', 'POST', '/', 'json', false, 'json', request);
}

model ListPushMsgRequest {
  id?: string(name='Id', position='Query'),
  msgType?: string(name='MsgType', position='Query'),
  name?: string(name='Name', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pushTime?: string(name='PushTime', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: string(name='Status', position='Query'),
}

model ListPushMsgResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: {
    createdDate?: string(name='CreatedDate'),
    createdDateStr?: string(name='CreatedDateStr'),
    id?: string(name='Id'),
    pushTime?: string(name='PushTime'),
    pushTimeStr?: string(name='PushTimeStr'),
    spec?: string(name='Spec'),
    status?: string(name='Status'),
    statusStr?: string(name='StatusStr'),
    title?: string(name='Title'),
    userNum?: long(name='UserNum'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
}

model ListPushMsgResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPushMsgResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPushMsg  ListPushMsgRequest
  * @return ListPushMsgResponse
 */
async function listPushMsg(request: ListPushMsgRequest): ListPushMsgResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPushMsg', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  category?: string(name='Category', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', position='Query'),
  resourceId?: [ string ](name='ResourceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', description='This parameter is required.', position='Query'),
  scope?: string(name='Scope', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
  tagOwnerUid: long(name='TagOwnerUid', description='This parameter is required.', minimum=0, maximum=999999999999999999, position='Query'),
}

model ListTagResourcesResponseBody = {
  code?: string(name='Code'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTagResources  ListTagResourcesRequest
  * @return ListTagResourcesResponse
 */
async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model OpenShortUrlProductRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model OpenShortUrlProductResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model OpenShortUrlProductResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OpenShortUrlProductResponseBody(name='body'),
}

/**
  * @param request  the request parameters of OpenShortUrlProduct  OpenShortUrlProductRequest
  * @return OpenShortUrlProductResponse
 */
async function openShortUrlProduct(request: OpenShortUrlProductRequest): OpenShortUrlProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenShortUrlProduct', 'POST', '/', 'json', false, 'json', request);
}

model OpenShortUrlProductNewRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model OpenShortUrlProductNewResponseBody = {
  requestId?: string(name='RequestId'),
  rusult?: boolean(name='Rusult'),
}

model OpenShortUrlProductNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OpenShortUrlProductNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of OpenShortUrlProductNew  OpenShortUrlProductNewRequest
  * @return OpenShortUrlProductNewResponse
 */
async function openShortUrlProductNew(request: OpenShortUrlProductNewRequest): OpenShortUrlProductNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenShortUrlProductNew', 'POST', '/', 'json', false, 'json', request);
}

model OpencPrevFlagNewRequest {
  isOpen: int32(name='IsOpen', description='This parameter is required.', minimum=-2147483648, maximum=2147483647, position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model OpencPrevFlagNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model OpencPrevFlagNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OpencPrevFlagNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of OpencPrevFlagNew  OpencPrevFlagNewRequest
  * @return OpencPrevFlagNewResponse
 */
async function opencPrevFlagNew(request: OpencPrevFlagNewRequest): OpencPrevFlagNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpencPrevFlagNew', 'POST', '/', 'json', false, 'json', request);
}

model QueryAnyParamTemplateUserRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryAnyParamTemplateUserResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryAnyParamTemplateUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAnyParamTemplateUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryAnyParamTemplateUser  QueryAnyParamTemplateUserRequest
  * @return QueryAnyParamTemplateUserResponse
 */
async function queryAnyParamTemplateUser(request: QueryAnyParamTemplateUserRequest): QueryAnyParamTemplateUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAnyParamTemplateUser', 'POST', '/', 'json', false, 'json', request);
}

model QueryAuthorizationRequest {
  authorizeCode?: string(name='AuthorizeCode', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryAuthorizationResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      aliyunUid?: long(name='AliyunUid'),
      authorizeCode?: string(name='AuthorizeCode'),
      authorizeStatus?: boolean(name='AuthorizeStatus'),
      authorizeTime?: string(name='AuthorizeTime'),
      productCode?: string(name='ProductCode'),
      unAuthorizeTime?: string(name='UnAuthorizeTime'),
    }
  ](name='Result'),
}

model QueryAuthorizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAuthorizationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryAuthorization  QueryAuthorizationRequest
  * @return QueryAuthorizationResponse
 */
async function queryAuthorization(request: QueryAuthorizationRequest): QueryAuthorizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAuthorization', 'POST', '/', 'json', false, 'json', request);
}

model QueryBillingStatisticsRequest {
  billCycle?: string(name='BillCycle', position='Query'),
  itemName?: string(name='ItemName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryBillingStatisticsResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryBillingStatisticsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryBillingStatisticsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryBillingStatistics  QueryBillingStatisticsRequest
  * @return QueryBillingStatisticsResponse
 */
async function queryBillingStatistics(request: QueryBillingStatisticsRequest): QueryBillingStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryBillingStatistics', 'POST', '/', 'json', false, 'json', request);
}

model QueryCardMessageQueueRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  queueTypes: string(name='QueueTypes', description='This parameter is required.', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryCardMessageQueueResponseBody = {
  list?: [ 
    {
      isCreated?: boolean(name='IsCreated'),
      queueName?: string(name='QueueName'),
      queueType?: string(name='QueueType'),
      region?: string(name='Region'),
    }
  ](name='List'),
  requestId?: string(name='RequestId'),
}

model QueryCardMessageQueueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryCardMessageQueueResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryCardMessageQueue  QueryCardMessageQueueRequest
  * @return QueryCardMessageQueueResponse
 */
async function queryCardMessageQueue(request: QueryCardMessageQueueRequest): QueryCardMessageQueueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCardMessageQueue', 'POST', '/', 'json', false, 'json', request);
}

model QueryCardSendExportInfoRequest {
  pageNo?: long(name='PageNo', minimum=0, maximum=10000, position='Query'),
  pageSize?: long(name='PageSize', minimum=0, maximum=10000, position='Query'),
  status?: long(name='Status', position='Query'),
  type?: long(name='Type', position='Query'),
}

model QueryCardSendExportInfoResponseBody = {
  code?: string(name='Code'),
  model?: {
    pageNo?: long(name='PageNo'),
    pageSize?: long(name='PageSize'),
    records?: [ 
      {
        ext?: string(name='Ext'),
        fileName?: string(name='FileName'),
        gmtCreate?: long(name='GmtCreate'),
        gmtModified?: long(name='GmtModified'),
        id?: long(name='Id'),
        ossUrl?: string(name='OssUrl'),
        pid?: long(name='Pid'),
        status?: long(name='Status'),
        type?: long(name='Type'),
        userId?: string(name='UserId'),
      }
    ](name='Records'),
    totalCount?: long(name='TotalCount'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryCardSendExportInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryCardSendExportInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryCardSendExportInfo  QueryCardSendExportInfoRequest
  * @return QueryCardSendExportInfoResponse
 */
async function queryCardSendExportInfo(request: QueryCardSendExportInfoRequest): QueryCardSendExportInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCardSendExportInfo', 'POST', '/', 'json', false, 'json', request);
}

model QueryCardSmsHistoryRequest {
  apiSend?: long(name='ApiSend', position='Query'),
  cardTemplateType?: string(name='CardTemplateType', position='Query'),
  gmtCreate?: string(name='GmtCreate', position='Query'),
  maxId?: long(name='MaxId', position='Query'),
  minId?: long(name='MinId', position='Query'),
  pageNo?: long(name='PageNo', minimum=0, maximum=20000000, position='Query'),
  pageSize?: long(name='PageSize', minimum=0, maximum=10000, position='Query'),
  receiveState?: long(name='ReceiveState', position='Query'),
  receiver?: string(name='Receiver', position='Query'),
  renderState?: long(name='RenderState', position='Query'),
  signName?: string(name='SignName', position='Query'),
  tmpCode?: string(name='TmpCode', position='Query'),
  type?: long(name='Type', position='Query'),
}

model QueryCardSmsHistoryResponseBody = {
  code?: string(name='Code'),
  model?: {
    pageNo?: long(name='PageNo'),
    pageSize?: long(name='PageSize'),
    records?: [ 
      {
        acceptDate?: long(name='AcceptDate'),
        apiSend?: long(name='ApiSend'),
        cardTemplateType?: string(name='CardTemplateType'),
        customTmpCode?: string(name='CustomTmpCode'),
        description?: string(name='Description'),
        fuuId?: string(name='FuuId'),
        gmtCreate?: long(name='GmtCreate'),
        gmtModified?: long(name='GmtModified'),
        id?: long(name='Id'),
        isSupport?: long(name='IsSupport'),
        outId?: string(name='OutId'),
        pid?: long(name='Pid'),
        receiveState?: long(name='ReceiveState'),
        receiver?: string(name='Receiver'),
        renderDate?: long(name='RenderDate'),
        renderState?: long(name='RenderState'),
        shortUrl?: string(name='ShortUrl'),
        signName?: string(name='SignName'),
        smsContent?: string(name='SmsContent'),
        suggestion?: string(name='Suggestion'),
        tmpCode?: string(name='TmpCode'),
        tmpId?: string(name='TmpId'),
        tmpType?: long(name='TmpType'),
        tmpTypeName?: string(name='TmpTypeName'),
      }
    ](name='Records'),
    totalCount?: long(name='TotalCount'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryCardSmsHistoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryCardSmsHistoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryCardSmsHistory  QueryCardSmsHistoryRequest
  * @return QueryCardSmsHistoryResponse
 */
async function queryCardSmsHistory(request: QueryCardSmsHistoryRequest): QueryCardSmsHistoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCardSmsHistory', 'POST', '/', 'json', false, 'json', request);
}

model QueryCardSmsHistoryDetailRequest {
  gmtCreate: string(name='GmtCreate', description='This parameter is required.', position='Query'),
  id?: string(name='Id', position='Query'),
}

model QueryCardSmsHistoryDetailResponseBody = {
  code?: string(name='Code'),
  model?: string(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryCardSmsHistoryDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryCardSmsHistoryDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryCardSmsHistoryDetail  QueryCardSmsHistoryDetailRequest
  * @return QueryCardSmsHistoryDetailResponse
 */
async function queryCardSmsHistoryDetail(request: QueryCardSmsHistoryDetailRequest): QueryCardSmsHistoryDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCardSmsHistoryDetail', 'POST', '/', 'json', false, 'json', request);
}

model QueryCardSmsStatisticsRequest {
  customTmpCode?: string(name='CustomTmpCode', position='Query'),
  pageNo: long(name='PageNo', description='This parameter is required.', minimum=0, maximum=10000, position='Query'),
  pageSize: long(name='PageSize', description='This parameter is required.', minimum=0, maximum=10000, position='Query'),
  sendDateEnd?: string(name='SendDateEnd', position='Query'),
  sendDateStart?: string(name='SendDateStart', position='Query'),
  signName?: string(name='SignName', position='Query'),
  tmpCode?: string(name='TmpCode', position='Query'),
  tmpName?: string(name='TmpName', position='Query'),
}

model QueryCardSmsStatisticsResponseBody = {
  code?: string(name='Code'),
  model?: {
    pageNo?: long(name='PageNo'),
    pageSize?: long(name='PageSize'),
    records?: [ 
      {
        renderSuccessTotal?: long(name='RenderSuccessTotal'),
        sendDate?: string(name='SendDate'),
        signName?: string(name='SignName'),
        tmpCode?: string(name='TmpCode'),
        tmpName?: string(name='TmpName'),
        urlGenerateTotal?: long(name='UrlGenerateTotal'),
      }
    ](name='Records'),
    totalCount?: long(name='TotalCount'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryCardSmsStatisticsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryCardSmsStatisticsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryCardSmsStatistics  QueryCardSmsStatisticsRequest
  * @return QueryCardSmsStatisticsResponse
 */
async function queryCardSmsStatistics(request: QueryCardSmsStatisticsRequest): QueryCardSmsStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCardSmsStatistics', 'POST', '/', 'json', false, 'json', request);
}

model QueryCardSmsStatisticsListRequest {
  customTmpCode?: string(name='CustomTmpCode', position='Query'),
  sendDateEnd?: string(name='SendDateEnd', position='Query'),
  sendDateStart?: string(name='SendDateStart', position='Query'),
  signName?: string(name='SignName', position='Query'),
  tmpCode?: string(name='TmpCode', position='Query'),
  tmpName?: string(name='TmpName', position='Query'),
}

model QueryCardSmsStatisticsListResponseBody = {
  code?: string(name='Code'),
  model?: [ 
    {
      renderSuccessTotal?: long(name='RenderSuccessTotal'),
      sendDate?: string(name='SendDate'),
      urlGenerateTotal?: long(name='UrlGenerateTotal'),
    }
  ](name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryCardSmsStatisticsListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryCardSmsStatisticsListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryCardSmsStatisticsList  QueryCardSmsStatisticsListRequest
  * @return QueryCardSmsStatisticsListResponse
 */
async function queryCardSmsStatisticsList(request: QueryCardSmsStatisticsListRequest): QueryCardSmsStatisticsListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCardSmsStatisticsList', 'POST', '/', 'json', false, 'json', request);
}

model QueryCardSmsStatisticsSendRequest {
  customTmpCode?: string(name='CustomTmpCode', position='Query'),
  pageNo: long(name='PageNo', description='This parameter is required.', minimum=0, maximum=10000, position='Query'),
  pageSize: long(name='PageSize', description='This parameter is required.', minimum=0, maximum=10000, position='Query'),
  sendDateEnd?: string(name='SendDateEnd', position='Query'),
  sendDateStart?: string(name='SendDateStart', position='Query'),
  signName?: string(name='SignName', position='Query'),
  tmpCode?: string(name='TmpCode', position='Query'),
}

model QueryCardSmsStatisticsSendResponseBody = {
  code?: string(name='Code'),
  model?: {
    pageNo?: long(name='PageNo'),
    pageSize?: long(name='PageSize'),
    records?: [ 
      {
        customTmpCode?: string(name='CustomTmpCode'),
        renderSuccessRate?: double(name='RenderSuccessRate'),
        renderSuccessTotal?: long(name='RenderSuccessTotal'),
        sendDate?: string(name='SendDate'),
        sendFailTotal?: long(name='SendFailTotal'),
        sendProcessTotal?: long(name='SendProcessTotal'),
        sendSuccessRate?: double(name='SendSuccessRate'),
        sendSuccessTotal?: long(name='SendSuccessTotal'),
        sendTotal?: long(name='SendTotal'),
        signName?: string(name='SignName'),
        supportRate?: double(name='SupportRate'),
        supportTotal?: long(name='SupportTotal'),
        tmpCode?: string(name='TmpCode'),
      }
    ](name='Records'),
    totalCount?: long(name='TotalCount'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryCardSmsStatisticsSendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryCardSmsStatisticsSendResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryCardSmsStatisticsSend  QueryCardSmsStatisticsSendRequest
  * @return QueryCardSmsStatisticsSendResponse
 */
async function queryCardSmsStatisticsSend(request: QueryCardSmsStatisticsSendRequest): QueryCardSmsStatisticsSendResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCardSmsStatisticsSend', 'POST', '/', 'json', false, 'json', request);
}

model QueryCardSmsStatisticsSendListRequest {
  customTmpCode?: string(name='CustomTmpCode', position='Query'),
  sendDateEnd?: string(name='SendDateEnd', position='Query'),
  sendDateStart?: string(name='SendDateStart', position='Query'),
  signName?: string(name='SignName', position='Query'),
  tmpCode?: string(name='TmpCode', position='Query'),
}

model QueryCardSmsStatisticsSendListResponseBody = {
  code?: string(name='Code'),
  model?: [ 
    {
      renderSuccessRate?: double(name='RenderSuccessRate'),
      renderSuccessTotal?: long(name='RenderSuccessTotal'),
      sendDate?: string(name='SendDate'),
      sendFailTotal?: long(name='SendFailTotal'),
      sendProcessTotal?: long(name='SendProcessTotal'),
      sendSuccessRate?: double(name='SendSuccessRate'),
      sendSuccessTotal?: long(name='SendSuccessTotal'),
      sendTotal?: long(name='SendTotal'),
      supportRate?: double(name='SupportRate'),
      supportTotal?: long(name='SupportTotal'),
    }
  ](name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryCardSmsStatisticsSendListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryCardSmsStatisticsSendListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryCardSmsStatisticsSendList  QueryCardSmsStatisticsSendListRequest
  * @return QueryCardSmsStatisticsSendListResponse
 */
async function queryCardSmsStatisticsSendList(request: QueryCardSmsStatisticsSendListRequest): QueryCardSmsStatisticsSendListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCardSmsStatisticsSendList', 'POST', '/', 'json', false, 'json', request);
}

model QueryCommonCustInfoRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryCommonCustInfoResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryCommonCustInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryCommonCustInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryCommonCustInfo  QueryCommonCustInfoRequest
  * @return QueryCommonCustInfoResponse
 */
async function queryCommonCustInfo(request: QueryCommonCustInfoRequest): QueryCommonCustInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCommonCustInfo', 'POST', '/', 'json', false, 'json', request);
}

model QueryContactsListRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryContactsListResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryContactsListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryContactsListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryContactsList  QueryContactsListRequest
  * @return QueryContactsListResponse
 */
async function queryContactsList(request: QueryContactsListRequest): QueryContactsListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryContactsList', 'POST', '/', 'json', false, 'json', request);
}

model QueryContactsListNewRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryContactsListNewResponseBody = {
  list?: [ 
    {
      email?: string(name='Email'),
      id?: long(name='Id'),
      name?: string(name='Name'),
      openPkgWarning?: int32(name='OpenPkgWarning'),
      openPreventBrushWarning?: int32(name='OpenPreventBrushWarning'),
      openSendWarning?: int32(name='OpenSendWarning'),
      phone?: string(name='Phone'),
      receiveSignTemplateAuditResult?: int32(name='ReceiveSignTemplateAuditResult'),
    }
  ](name='List'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model QueryContactsListNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryContactsListNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryContactsListNew  QueryContactsListNewRequest
  * @return QueryContactsListNewResponse
 */
async function queryContactsListNew(request: QueryContactsListNewRequest): QueryContactsListNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryContactsListNew', 'POST', '/', 'json', false, 'json', request);
}

model QueryDailyBillInfoLeafNewRequest {
  billCycle?: string(name='BillCycle', position='Query'),
  itemId?: string(name='ItemId', position='Query'),
  itemName?: string(name='ItemName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  subjectItemId?: string(name='SubjectItemId', position='Query'),
}

model QueryDailyBillInfoLeafNewResponseBody = {
  list?: {
    dailyBillDetailInfoDTO?: [ 
    {
      addCount?: long(name='AddCount'),
      addDate?: string(name='AddDate'),
      addUnit?: string(name='AddUnit'),
      billAmount?: string(name='BillAmount'),
      detailItemName?: string(name='DetailItemName'),
      singlePrice?: string(name='SinglePrice'),
    }
  ](name='DailyBillDetailInfoDTO')
  }(name='List'),
  requestId?: string(name='RequestId'),
}

model QueryDailyBillInfoLeafNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDailyBillInfoLeafNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryDailyBillInfoLeafNew  QueryDailyBillInfoLeafNewRequest
  * @return QueryDailyBillInfoLeafNewResponse
 */
async function queryDailyBillInfoLeafNew(request: QueryDailyBillInfoLeafNewRequest): QueryDailyBillInfoLeafNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDailyBillInfoLeafNew', 'POST', '/', 'json', false, 'json', request);
}

model QueryDigitalTemplateDetailRequest {
  auditState?: string(name='AuditState', position='Query'),
  bizType?: string(name='BizType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  templateCode?: string(name='TemplateCode', position='Query'),
  templateName?: string(name='TemplateName', position='Query'),
}

model QueryDigitalTemplateDetailResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryDigitalTemplateDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDigitalTemplateDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryDigitalTemplateDetail  QueryDigitalTemplateDetailRequest
  * @return QueryDigitalTemplateDetailResponse
 */
async function queryDigitalTemplateDetail(request: QueryDigitalTemplateDetailRequest): QueryDigitalTemplateDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDigitalTemplateDetail', 'POST', '/', 'json', false, 'json', request);
}

model QueryDigitalTemplateDetailNewRequest {
  auditState?: string(name='AuditState', position='Query'),
  bizType?: string(name='BizType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  templateCode?: string(name='TemplateCode', position='Query'),
  templateName?: string(name='TemplateName', position='Query'),
}

model QueryDigitalTemplateDetailNewResponseBody = {
  auditInfo?: string(name='AuditInfo'),
  auditRemarkInfo?: string(name='AuditRemarkInfo'),
  auditState?: string(name='AuditState'),
  bizType?: string(name='BizType'),
  expireDateStr?: string(name='ExpireDateStr'),
  gmtCreateStr?: string(name='GmtCreateStr'),
  id?: string(name='Id'),
  isAnyParam?: boolean(name='IsAnyParam'),
  isDefaultTemplate?: boolean(name='IsDefaultTemplate'),
  isRecently?: boolean(name='IsRecently'),
  orderId?: string(name='OrderId'),
  ossKeys?: {
    ossKey?: [ string ](name='OssKey')
  }(name='OssKeys'),
  passErrType?: string(name='PassErrType'),
  remark?: string(name='Remark'),
  requestId?: string(name='RequestId'),
  signType?: int32(name='SignType'),
  smsContent?: string(name='SmsContent'),
  supportVendor?: string(name='SupportVendor'),
  tags?: {
    tag?: [ 
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='Tag')
  }(name='Tags'),
  templateCode?: string(name='TemplateCode'),
  templateContent?: string(name='TemplateContent'),
  templateName?: string(name='TemplateName'),
  templateRule?: string(name='TemplateRule'),
}

model QueryDigitalTemplateDetailNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDigitalTemplateDetailNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryDigitalTemplateDetailNew  QueryDigitalTemplateDetailNewRequest
  * @return QueryDigitalTemplateDetailNewResponse
 */
async function queryDigitalTemplateDetailNew(request: QueryDigitalTemplateDetailNewRequest): QueryDigitalTemplateDetailNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDigitalTemplateDetailNew', 'POST', '/', 'json', false, 'json', request);
}

model QueryDigitalTemplateLastRangeRequest {
  bizType?: string(name='BizType', position='Query'),
  limit?: int32(name='Limit', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  templateName?: string(name='TemplateName', position='Query'),
}

model QueryDigitalTemplateLastRangeResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryDigitalTemplateLastRangeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDigitalTemplateLastRangeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryDigitalTemplateLastRange  QueryDigitalTemplateLastRangeRequest
  * @return QueryDigitalTemplateLastRangeResponse
 */
async function queryDigitalTemplateLastRange(request: QueryDigitalTemplateLastRangeRequest): QueryDigitalTemplateLastRangeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDigitalTemplateLastRange', 'POST', '/', 'json', false, 'json', request);
}

model QueryDigitalTemplateLastRangeNewRequest {
  auditState?: string(name='AuditState', position='Query'),
  bizType?: string(name='BizType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  prodType?: string(name='ProdType', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  templateName?: string(name='TemplateName', position='Query'),
}

model QueryDigitalTemplateLastRangeNewResponseBody = {
  list?: {
    smsTemplate?: [ 
    {
      auditInfo?: string(name='AuditInfo'),
      auditRemarkInfo?: string(name='AuditRemarkInfo'),
      auditState?: string(name='AuditState'),
      bizType?: string(name='BizType'),
      expireDateStr?: string(name='ExpireDateStr'),
      gmtCreateStr?: string(name='GmtCreateStr'),
      id?: string(name='Id'),
      isAnyParam?: boolean(name='IsAnyParam'),
      isDefaultTemplate?: boolean(name='IsDefaultTemplate'),
      isRecently?: boolean(name='IsRecently'),
      orderId?: string(name='OrderId'),
      passErrType?: string(name='PassErrType'),
      remark?: string(name='Remark'),
      signType?: int32(name='SignType'),
      smsContent?: string(name='SmsContent'),
      supportVendor?: string(name='SupportVendor'),
      templateCode?: string(name='TemplateCode'),
      templateContent?: string(name='TemplateContent'),
      templateName?: string(name='TemplateName'),
      templateRule?: string(name='TemplateRule'),
    }
  ](name='SmsTemplate')
  }(name='List'),
  requestId?: string(name='RequestId'),
  tags?: {
    tag?: [ 
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='Tag')
  }(name='Tags'),
}

model QueryDigitalTemplateLastRangeNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDigitalTemplateLastRangeNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryDigitalTemplateLastRangeNew  QueryDigitalTemplateLastRangeNewRequest
  * @return QueryDigitalTemplateLastRangeNewResponse
 */
async function queryDigitalTemplateLastRangeNew(request: QueryDigitalTemplateLastRangeNewRequest): QueryDigitalTemplateLastRangeNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDigitalTemplateLastRangeNew', 'POST', '/', 'json', false, 'json', request);
}

model QueryDigitalTemplatePageListRequest {
  auditState?: string(name='AuditState', position='Query'),
  bizType?: string(name='BizType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  templateCode?: string(name='TemplateCode', position='Query'),
  templateName?: string(name='TemplateName', position='Query'),
}

model QueryDigitalTemplatePageListResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryDigitalTemplatePageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDigitalTemplatePageListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryDigitalTemplatePageList  QueryDigitalTemplatePageListRequest
  * @return QueryDigitalTemplatePageListResponse
 */
async function queryDigitalTemplatePageList(request: QueryDigitalTemplatePageListRequest): QueryDigitalTemplatePageListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDigitalTemplatePageList', 'POST', '/', 'json', false, 'json', request);
}

model QueryDigitalTemplatePageListNewRequest {
  auditState?: string(name='AuditState', position='Query'),
  bizType?: string(name='BizType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  templateCode?: string(name='TemplateCode', position='Query'),
  templateName?: string(name='TemplateName', position='Query'),
}

model QueryDigitalTemplatePageListNewResponseBody = {
  list?: {
    smsTemplate?: [ 
    {
      auditInfo?: string(name='AuditInfo'),
      auditRemarkInfo?: string(name='AuditRemarkInfo'),
      auditState?: string(name='AuditState'),
      bizType?: string(name='BizType'),
      expireDateStr?: string(name='ExpireDateStr'),
      gmtCreateStr?: string(name='GmtCreateStr'),
      id?: string(name='Id'),
      isAnyParam?: boolean(name='IsAnyParam'),
      isDefaultTemplate?: boolean(name='IsDefaultTemplate'),
      isRecently?: boolean(name='IsRecently'),
      orderId?: string(name='OrderId'),
      passErrType?: string(name='PassErrType'),
      remark?: string(name='Remark'),
      signType?: int32(name='SignType'),
      smsContent?: string(name='SmsContent'),
      supportVendor?: string(name='SupportVendor'),
      tags?: {
        tag?: [ 
        {
          resourceId?: string(name='ResourceId'),
          resourceType?: string(name='ResourceType'),
          tagKey?: string(name='TagKey'),
          tagValue?: string(name='TagValue'),
        }
      ](name='Tag')
      }(name='Tags'),
      templateCode?: string(name='TemplateCode'),
      templateContent?: string(name='TemplateContent'),
      templateName?: string(name='TemplateName'),
      templateRule?: string(name='TemplateRule'),
    }
  ](name='SmsTemplate')
  }(name='List'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model QueryDigitalTemplatePageListNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDigitalTemplatePageListNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryDigitalTemplatePageListNew  QueryDigitalTemplatePageListNewRequest
  * @return QueryDigitalTemplatePageListNewResponse
 */
async function queryDigitalTemplatePageListNew(request: QueryDigitalTemplatePageListNewRequest): QueryDigitalTemplatePageListNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDigitalTemplatePageListNew', 'POST', '/', 'json', false, 'json', request);
}

model QueryDomainListRequest {
  domain?: string(name='Domain', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: long(name='PageNo', position='Query'),
  pageSize?: string(name='PageSize', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryDomainListResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model QueryDomainListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDomainListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryDomainList  QueryDomainListRequest
  * @return QueryDomainListResponse
 */
async function queryDomainList(request: QueryDomainListRequest): QueryDomainListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDomainList', 'POST', '/', 'json', false, 'json', request);
}

model QueryDomainListNewRequest {
  domain?: string(name='Domain', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: long(name='PageNo', position='Query'),
  pageSize?: string(name='PageSize', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryDomainListNewResponseBody = {
  list?: [ 
    {
      auditStatus?: int32(name='AuditStatus'),
      domain?: string(name='Domain'),
      gmtCreate?: string(name='GmtCreate'),
    }
  ](name='List'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model QueryDomainListNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDomainListNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryDomainListNew  QueryDomainListNewRequest
  * @return QueryDomainListNewResponse
 */
async function queryDomainListNew(request: QueryDomainListNewRequest): QueryDomainListNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDomainListNew', 'POST', '/', 'json', false, 'json', request);
}

model QueryExportSendRecordListNewRequest {
  applyStatus?: int32(name='ApplyStatus', position='Query'),
  bizType?: string(name='BizType', example='SMS_TEMPLATE_EXPORT / SMS_SIGN_EXPORT', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryExportSendRecordListNewResponseBody = {
  list?: {
    fcFileUpInsResponse?: [ 
    {
      fileFeature?: string(name='FileFeature'),
      fileUrl?: string(name='FileUrl'),
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      handlerStatus?: int32(name='HandlerStatus'),
      id?: long(name='Id'),
    }
  ](name='FcFileUpInsResponse')
  }(name='List'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model QueryExportSendRecordListNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryExportSendRecordListNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryExportSendRecordListNew  QueryExportSendRecordListNewRequest
  * @return QueryExportSendRecordListNewResponse
 */
async function queryExportSendRecordListNew(request: QueryExportSendRecordListNewRequest): QueryExportSendRecordListNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryExportSendRecordListNew', 'POST', '/', 'json', false, 'json', request);
}

model QueryFailDetailDownloadRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: string(name='Status', position='Query'),
  taskId: long(name='TaskId', description='This parameter is required.', position='Query'),
  taskInstanceId: long(name='TaskInstanceId', description='This parameter is required.', position='Query'),
}

model QueryFailDetailDownloadResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryFailDetailDownloadResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryFailDetailDownloadResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryFailDetailDownload  QueryFailDetailDownloadRequest
  * @return QueryFailDetailDownloadResponse
 */
async function queryFailDetailDownload(request: QueryFailDetailDownloadRequest): QueryFailDetailDownloadResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryFailDetailDownload', 'POST', '/', 'json', false, 'json', request);
}

model QueryFailDetailDownloadNewRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: string(name='Status', position='Query'),
  taskId: long(name='TaskId', description='This parameter is required.', minimum=-9223372036854775808, maximum=9223372036854775807, position='Query'),
  taskInstanceId: long(name='TaskInstanceId', description='This parameter is required.', minimum=-9223372036854775808, maximum=9223372036854775807, position='Query'),
}

model QueryFailDetailDownloadNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model QueryFailDetailDownloadNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryFailDetailDownloadNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryFailDetailDownloadNew  QueryFailDetailDownloadNewRequest
  * @return QueryFailDetailDownloadNewResponse
 */
async function queryFailDetailDownloadNew(request: QueryFailDetailDownloadNewRequest): QueryFailDetailDownloadNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryFailDetailDownloadNew', 'POST', '/', 'json', false, 'json', request);
}

model QueryFlowLimitRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryFlowLimitResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryFlowLimitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryFlowLimitResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryFlowLimit  QueryFlowLimitRequest
  * @return QueryFlowLimitResponse
 */
async function queryFlowLimit(request: QueryFlowLimitRequest): QueryFlowLimitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryFlowLimit', 'POST', '/', 'json', false, 'json', request);
}

model QueryFlowLimitNewRequest {
  bizType?: string(name='BizType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryFlowLimitNewResponseBody = {
  dailyLimit?: long(name='DailyLimit'),
  hourLimit?: long(name='HourLimit'),
  minuteLimit?: long(name='MinuteLimit'),
  requestId?: string(name='RequestId'),
}

model QueryFlowLimitNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryFlowLimitNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryFlowLimitNew  QueryFlowLimitNewRequest
  * @return QueryFlowLimitNewResponse
 */
async function queryFlowLimitNew(request: QueryFlowLimitNewRequest): QueryFlowLimitNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryFlowLimitNew', 'POST', '/', 'json', false, 'json', request);
}

model QueryIndexColRecordRequest {
  bizType: string(name='BizType', description='This parameter is required.', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: string(name='Status', position='Query'),
  taskId: long(name='TaskId', description='This parameter is required.', position='Query'),
  taskInstanceId: long(name='TaskInstanceId', description='This parameter is required.', position='Query'),
}

model QueryIndexColRecordResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryIndexColRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryIndexColRecordResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryIndexColRecord  QueryIndexColRecordRequest
  * @return QueryIndexColRecordResponse
 */
async function queryIndexColRecord(request: QueryIndexColRecordRequest): QueryIndexColRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryIndexColRecord', 'POST', '/', 'json', false, 'json', request);
}

model QueryLearningStatusNewRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  type?: string(name='Type', position='Query'),
}

model QueryLearningStatusNewResponseBody = {
  learningStatus?: string(name='LearningStatus'),
  requestId?: string(name='RequestId'),
}

model QueryLearningStatusNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryLearningStatusNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryLearningStatusNew  QueryLearningStatusNewRequest
  * @return QueryLearningStatusNewResponse
 */
async function queryLearningStatusNew(request: QueryLearningStatusNewRequest): QueryLearningStatusNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryLearningStatusNew', 'POST', '/', 'json', false, 'json', request);
}

model QueryMarketingAssistantStatusRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryMarketingAssistantStatusResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model QueryMarketingAssistantStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMarketingAssistantStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryMarketingAssistantStatus  QueryMarketingAssistantStatusRequest
  * @return QueryMarketingAssistantStatusResponse
 */
async function queryMarketingAssistantStatus(request: QueryMarketingAssistantStatusRequest): QueryMarketingAssistantStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMarketingAssistantStatus', 'POST', '/', 'json', false, 'json', request);
}

model QueryMessageCallbackNewRequest {
  bizType?: string(name='BizType', position='Query'),
  callbackUrl?: string(name='CallbackUrl', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryMessageCallbackNewResponseBody = {
  aiccsCallMidRecordCallbackUrl?: string(name='AiccsCallMidRecordCallbackUrl'),
  aiccsCallRecordCallbackUrl?: string(name='AiccsCallRecordCallbackUrl'),
  aiccsSentRecordCallbackUrl?: string(name='AiccsSentRecordCallbackUrl'),
  artcCdrReportCallBackUrl?: string(name='ArtcCdrReportCallBackUrl'),
  artcTempStatusReportCallBackUrl?: string(name='ArtcTempStatusReportCallBackUrl'),
  cardDyncResCallbackUrl?: string(name='CardDyncResCallbackUrl'),
  cardTemplateCallBackUrl?: string(name='CardTemplateCallBackUrl'),
  cardVerderCallBackUrl?: string(name='CardVerderCallBackUrl'),
  dcdpCallbackUrl?: string(name='DcdpCallbackUrl'),
  digitSmsTemplateCallBackUrl?: string(name='DigitSmsTemplateCallBackUrl'),
  globeSmsReportCallback?: boolean(name='GlobeSmsReportCallback'),
  globeSmsReportCallbackUrl?: string(name='GlobeSmsReportCallbackUrl'),
  isAiccsCallMidRecord?: boolean(name='IsAiccsCallMidRecord'),
  isAiccsCallRecord?: boolean(name='IsAiccsCallRecord'),
  isAiccsSentRecord?: boolean(name='IsAiccsSentRecord'),
  isArtcCdrReportCallBack?: boolean(name='IsArtcCdrReportCallBack'),
  isArtcTempStatusReportCallBack?: boolean(name='IsArtcTempStatusReportCallBack'),
  isDcdpCallback?: boolean(name='IsDcdpCallback'),
  isDigitSmsTemplateCallBack?: boolean(name='IsDigitSmsTemplateCallBack'),
  isGlobeSmsReportCallback?: boolean(name='IsGlobeSmsReportCallback'),
  isOpened?: boolean(name='IsOpened'),
  isSecretReportMessageCallback?: boolean(name='IsSecretReportMessageCallback'),
  isSecretSmsMessageCallback?: boolean(name='IsSecretSmsMessageCallback'),
  isSignReportCallback?: boolean(name='IsSignReportCallback'),
  isSmartCallAsrCallBack?: boolean(name='IsSmartCallAsrCallBack'),
  isSmsReportMessageCallback?: boolean(name='IsSmsReportMessageCallback'),
  isSmsUpMessageCallback?: boolean(name='IsSmsUpMessageCallback'),
  isTemplateReportCallback?: boolean(name='IsTemplateReportCallback'),
  isVoiceAsrCallBack?: boolean(name='IsVoiceAsrCallBack'),
  isVoiceCallMidStateCallBack?: boolean(name='IsVoiceCallMidStateCallBack'),
  isVoiceCallRecordCallBack?: boolean(name='IsVoiceCallRecordCallBack'),
  isVoiceRecordingCallBack?: boolean(name='IsVoiceRecordingCallBack'),
  reportCallbackUrl?: string(name='ReportCallbackUrl'),
  requestId?: string(name='RequestId'),
  secretCallbackUrl?: string(name='SecretCallbackUrl'),
  secretSmsCallbackUrl?: string(name='SecretSmsCallbackUrl'),
  shortLinkCallBackUrl?: string(name='ShortLinkCallBackUrl'),
  signReportCallbackUrl?: string(name='SignReportCallbackUrl'),
  smartCallAsrCallBackUrl?: string(name='SmartCallAsrCallBackUrl'),
  templateReportCallbackUrl?: string(name='TemplateReportCallbackUrl'),
  upCallbackUrl?: string(name='UpCallbackUrl'),
  voiceAsrCallBackUrl?: string(name='VoiceAsrCallBackUrl'),
  voiceCallMidStateCallBackUrl?: string(name='VoiceCallMidStateCallBackUrl'),
  voiceCallRecordCallBackUrl?: string(name='VoiceCallRecordCallBackUrl'),
  voiceRecordingCallBackUrl?: string(name='VoiceRecordingCallBackUrl'),
}

model QueryMessageCallbackNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMessageCallbackNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryMessageCallbackNew  QueryMessageCallbackNewRequest
  * @return QueryMessageCallbackNewResponse
 */
async function queryMessageCallbackNew(request: QueryMessageCallbackNewRequest): QueryMessageCallbackNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMessageCallbackNew', 'POST', '/', 'json', false, 'json', request);
}

model QueryMessageQueueNewRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  queueTypes?: string(name='QueueTypes', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryMessageQueueNewResponseBody = {
  list?: [ 
    {
      isCreated?: boolean(name='IsCreated'),
      queueName?: string(name='QueueName'),
      queueType?: string(name='QueueType'),
      region?: string(name='Region'),
    }
  ](name='List'),
  requestId?: string(name='RequestId'),
}

model QueryMessageQueueNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMessageQueueNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryMessageQueueNew  QueryMessageQueueNewRequest
  * @return QueryMessageQueueNewResponse
 */
async function queryMessageQueueNew(request: QueryMessageQueueNewRequest): QueryMessageQueueNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMessageQueueNew', 'POST', '/', 'json', false, 'json', request);
}

model QueryMonthlyBillInfoLeafNewRequest {
  billCycle?: string(name='BillCycle', position='Query'),
  itemId?: string(name='ItemId', position='Query'),
  itemName?: string(name='ItemName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  subjectItemId?: string(name='SubjectItemId', position='Query'),
}

model QueryMonthlyBillInfoLeafNewResponseBody = {
  couponPayment?: string(name='CouponPayment'),
  isSeparatedPrice?: boolean(name='IsSeparatedPrice'),
  layeredBillDOList?: [ 
    {
      addCount?: long(name='AddCount'),
      addUnit?: string(name='AddUnit'),
      billAmount?: string(name='BillAmount'),
      itemId?: string(name='ItemId'),
      itemName?: string(name='ItemName'),
      operator?: string(name='Operator'),
      packageBill?: string(name='PackageBill'),
      singlePrice?: string(name='SinglePrice'),
      subjectDetailList?: [ 
        {
          addCount?: long(name='AddCount'),
          addUnit?: string(name='AddUnit'),
          billAmount?: string(name='BillAmount'),
          itemId?: string(name='ItemId'),
          itemName?: string(name='ItemName'),
          operator?: string(name='Operator'),
          packageBill?: string(name='PackageBill'),
          singlePrice?: string(name='SinglePrice'),
          subjectItemId?: string(name='SubjectItemId'),
          subjectName?: string(name='SubjectName'),
        }
      ](name='SubjectDetailList'),
      subjectItemId?: string(name='SubjectItemId'),
      subjectName?: string(name='SubjectName'),
    }
  ](name='LayeredBillDOList'),
  packageAmount?: string(name='PackageAmount'),
  realPayment?: string(name='RealPayment'),
  requestId?: string(name='RequestId'),
  totalPayment?: string(name='TotalPayment'),
}

model QueryMonthlyBillInfoLeafNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMonthlyBillInfoLeafNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryMonthlyBillInfoLeafNew  QueryMonthlyBillInfoLeafNewRequest
  * @return QueryMonthlyBillInfoLeafNewResponse
 */
async function queryMonthlyBillInfoLeafNew(request: QueryMonthlyBillInfoLeafNewRequest): QueryMonthlyBillInfoLeafNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMonthlyBillInfoLeafNew', 'POST', '/', 'json', false, 'json', request);
}

model QueryMonthlyBillRentalRequest {
  billCycle: string(name='BillCycle', description='This parameter is required.', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', minimum=1, maximum=999, position='Query'),
  pageSize?: int32(name='PageSize', minimum=0, maximum=9999, position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryMonthlyBillRentalResponseBody = {
  code?: string(name='Code'),
  data?: {
    pageNo?: int32(name='pageNo'),
    pageSize?: int32(name='pageSize'),
    records?: [ 
      {
        billTime?: long(name='billTime'),
        itemId?: string(name='itemId'),
        itemName?: string(name='itemName'),
        offerTime?: long(name='offerTime'),
        rental?: string(name='rental'),
        subItemId?: string(name='subItemId'),
        subItemName?: string(name='subItemName'),
      }
    ](name='records'),
    rentalSum?: string(name='rentalSum'),
    total?: long(name='total'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryMonthlyBillRentalResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMonthlyBillRentalResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryMonthlyBillRental  QueryMonthlyBillRentalRequest
  * @return QueryMonthlyBillRentalResponse
 */
async function queryMonthlyBillRental(request: QueryMonthlyBillRentalRequest): QueryMonthlyBillRentalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMonthlyBillRental', 'POST', '/', 'json', false, 'json', request);
}

model QueryMonthlyBillRentalNewRequest {
  billCycle: string(name='BillCycle', description='This parameter is required.', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', minimum=1, maximum=999, position='Query'),
  pageSize?: int32(name='PageSize', minimum=0, maximum=9999, position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryMonthlyBillRentalNewResponseBody = {
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  records?: [ 
    {
      billTime?: long(name='BillTime'),
      itemId?: string(name='ItemId'),
      itemName?: string(name='ItemName'),
      offerTime?: long(name='OfferTime'),
      rental?: string(name='Rental'),
      subItemId?: string(name='SubItemId'),
      subItemName?: string(name='SubItemName'),
    }
  ](name='Records'),
  rentalSum?: string(name='RentalSum'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model QueryMonthlyBillRentalNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMonthlyBillRentalNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryMonthlyBillRentalNew  QueryMonthlyBillRentalNewRequest
  * @return QueryMonthlyBillRentalNewResponse
 */
async function queryMonthlyBillRentalNew(request: QueryMonthlyBillRentalNewRequest): QueryMonthlyBillRentalNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMonthlyBillRentalNew', 'POST', '/', 'json', false, 'json', request);
}

model QueryMsgCountRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryMsgCountResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryMsgCountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMsgCountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryMsgCount  QueryMsgCountRequest
  * @return QueryMsgCountResponse
 */
async function queryMsgCount(request: QueryMsgCountRequest): QueryMsgCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMsgCount', 'POST', '/', 'json', false, 'json', request);
}

model QueryOpenStatusRequest {
  busOffer?: long(name='BusOffer', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  prodId: string(name='ProdId', description='This parameter is required.', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryOpenStatusResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: boolean(name='data'),
}

model QueryOpenStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryOpenStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryOpenStatus  QueryOpenStatusRequest
  * @return QueryOpenStatusResponse
 */
async function queryOpenStatus(request: QueryOpenStatusRequest): QueryOpenStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryOpenStatus', 'POST', '/', 'json', false, 'json', request);
}

model QueryOpencFlagNewRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryOpencFlagNewResponseBody = {
  isOpen?: int32(name='IsOpen'),
  requestId?: string(name='RequestId'),
}

model QueryOpencFlagNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryOpencFlagNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryOpencFlagNew  QueryOpencFlagNewRequest
  * @return QueryOpencFlagNewResponse
 */
async function queryOpencFlagNew(request: QueryOpencFlagNewRequest): QueryOpencFlagNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryOpencFlagNew', 'POST', '/', 'json', false, 'json', request);
}

model QueryPhoneWhiteListRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  phoneNumber?: string(name='PhoneNumber', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryPhoneWhiteListResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryPhoneWhiteListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryPhoneWhiteListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryPhoneWhiteList  QueryPhoneWhiteListRequest
  * @return QueryPhoneWhiteListResponse
 */
async function queryPhoneWhiteList(request: QueryPhoneWhiteListRequest): QueryPhoneWhiteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPhoneWhiteList', 'POST', '/', 'json', false, 'json', request);
}

model QueryPhoneWhiteListNewRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  phoneNumber?: string(name='PhoneNumber', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryPhoneWhiteListNewResponseBody = {
  list?: [ 
    {
      id?: long(name='Id'),
      phoneNumber?: string(name='PhoneNumber'),
      remark?: string(name='Remark'),
    }
  ](name='List'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
  totalWithoutFilter?: long(name='TotalWithoutFilter'),
}

model QueryPhoneWhiteListNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryPhoneWhiteListNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryPhoneWhiteListNew  QueryPhoneWhiteListNewRequest
  * @return QueryPhoneWhiteListNewResponse
 */
async function queryPhoneWhiteListNew(request: QueryPhoneWhiteListNewRequest): QueryPhoneWhiteListNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPhoneWhiteListNew', 'POST', '/', 'json', false, 'json', request);
}

model QueryPkgThresholdRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryPkgThresholdResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryPkgThresholdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryPkgThresholdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryPkgThreshold  QueryPkgThresholdRequest
  * @return QueryPkgThresholdResponse
 */
async function queryPkgThreshold(request: QueryPkgThresholdRequest): QueryPkgThresholdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPkgThreshold', 'POST', '/', 'json', false, 'json', request);
}

model QueryPkgThresholdNewRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryPkgThresholdNewResponseBody = {
  packageWarningLimit?: long(name='PackageWarningLimit'),
  requestId?: string(name='RequestId'),
}

model QueryPkgThresholdNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryPkgThresholdNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryPkgThresholdNew  QueryPkgThresholdNewRequest
  * @return QueryPkgThresholdNewResponse
 */
async function queryPkgThresholdNew(request: QueryPkgThresholdNewRequest): QueryPkgThresholdNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPkgThresholdNew', 'POST', '/', 'json', false, 'json', request);
}

model QueryPrevLimitNewRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryPrevLimitNewResponseBody = {
  hourLimit?: long(name='HourLimit'),
  increaseRate?: int32(name='IncreaseRate'),
  requestId?: string(name='RequestId'),
  successRate?: int32(name='SuccessRate'),
}

model QueryPrevLimitNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryPrevLimitNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryPrevLimitNew  QueryPrevLimitNewRequest
  * @return QueryPrevLimitNewResponse
 */
async function queryPrevLimitNew(request: QueryPrevLimitNewRequest): QueryPrevLimitNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPrevLimitNew', 'POST', '/', 'json', false, 'json', request);
}

model QuerySaasRecordRequest {
  bizType?: string(name='BizType', position='Query'),
  indexCol?: string(name='IndexCol', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo: int32(name='PageNo', description='This parameter is required.', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  result?: long(name='Result', position='Query'),
  taskId: long(name='TaskId', description='This parameter is required.', position='Query'),
  taskInstanceId: long(name='TaskInstanceId', description='This parameter is required.', position='Query'),
}

model QuerySaasRecordResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QuerySaasRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySaasRecordResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySaasRecord  QuerySaasRecordRequest
  * @return QuerySaasRecordResponse
 */
async function querySaasRecord(request: QuerySaasRecordRequest): QuerySaasRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySaasRecord', 'POST', '/', 'json', false, 'json', request);
}

model QuerySaasRecordNewRequest {
  bizType: string(name='BizType', description='This parameter is required.', position='Query'),
  indexCol?: string(name='IndexCol', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  result?: long(name='Result', position='Query'),
  taskId: long(name='TaskId', description='This parameter is required.', minimum=-9223372036854775808, maximum=9223372036854775807, position='Query'),
  taskInstanceId: long(name='TaskInstanceId', description='This parameter is required.', minimum=-9223372036854775808, maximum=9223372036854775807, position='Query'),
}

model QuerySaasRecordNewResponseBody = {
  list?: {
    saasRecord?: [ 
    {
      bizType?: string(name='BizType'),
      detailPkId?: long(name='DetailPkId'),
      indexCol?: string(name='IndexCol'),
      lastDealDate?: string(name='LastDealDate'),
      recordBizExpireDate?: string(name='RecordBizExpireDate'),
      result?: string(name='Result'),
      resultDesc?: string(name='ResultDesc'),
      saasContent?: string(name='SaasContent'),
      suggestion?: string(name='Suggestion'),
    }
  ](name='SaasRecord')
  }(name='List'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model QuerySaasRecordNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySaasRecordNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySaasRecordNew  QuerySaasRecordNewRequest
  * @return QuerySaasRecordNewResponse
 */
async function querySaasRecordNew(request: QuerySaasRecordNewRequest): QuerySaasRecordNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySaasRecordNew', 'POST', '/', 'json', false, 'json', request);
}

model QuerySendDetailsByPhoneNumRequest {
  bizType?: long(name='BizType', position='Query'),
  errorCode?: string(name='ErrorCode', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  phoneNum?: string(name='PhoneNum', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sendDate: string(name='SendDate', description='This parameter is required.', position='Query'),
  sendStatus?: long(name='SendStatus', position='Query'),
  signName?: string(name='SignName', position='Query'),
  templateCode?: string(name='TemplateCode', position='Query'),
}

model QuerySendDetailsByPhoneNumResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QuerySendDetailsByPhoneNumResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySendDetailsByPhoneNumResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySendDetailsByPhoneNum  QuerySendDetailsByPhoneNumRequest
  * @return QuerySendDetailsByPhoneNumResponse
 */
async function querySendDetailsByPhoneNum(request: QuerySendDetailsByPhoneNumRequest): QuerySendDetailsByPhoneNumResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySendDetailsByPhoneNum', 'POST', '/', 'json', false, 'json', request);
}

model QuerySendDetailsByPhoneNumNewRequest {
  bizId?: string(name='BizId', position='Query'),
  bizType?: long(name='BizType', position='Query'),
  errorCode?: string(name='ErrorCode', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  phoneNum?: string(name='PhoneNum', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sendDate: string(name='SendDate', description='This parameter is required.', position='Query'),
  sendStatus?: long(name='SendStatus', position='Query'),
  signName?: string(name='SignName', position='Query'),
  statisticsStatus?: int32(name='StatisticsStatus', position='Query'),
  templateCode?: string(name='TemplateCode', position='Query'),
}

model QuerySendDetailsByPhoneNumNewResponseBody = {
  list?: {
    smsSendDetailResponse?: [ 
    {
      applyDateStr?: string(name='ApplyDateStr'),
      billCount?: long(name='BillCount'),
      bizId?: string(name='BizId'),
      bizType?: long(name='BizType'),
      blackListStatus?: int32(name='BlackListStatus'),
      content?: string(name='Content'),
      errCode?: string(name='ErrCode'),
      errCodeDesc?: string(name='ErrCodeDesc'),
      innerErrCode?: string(name='InnerErrCode'),
      outId?: string(name='OutId'),
      phoneNum?: string(name='PhoneNum'),
      receiveDateStr?: string(name='ReceiveDateStr'),
      sendDateStr?: string(name='SendDateStr'),
      sendStatus?: long(name='SendStatus'),
      smsLength?: long(name='SmsLength'),
      statisticsStatus?: int32(name='StatisticsStatus'),
      suggestion?: string(name='Suggestion'),
      templateCode?: string(name='TemplateCode'),
    }
  ](name='SmsSendDetailResponse')
  }(name='List'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model QuerySendDetailsByPhoneNumNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySendDetailsByPhoneNumNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySendDetailsByPhoneNumNew  QuerySendDetailsByPhoneNumNewRequest
  * @return QuerySendDetailsByPhoneNumNewResponse
 */
async function querySendDetailsByPhoneNumNew(request: QuerySendDetailsByPhoneNumNewRequest): QuerySendDetailsByPhoneNumNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySendDetailsByPhoneNumNew', 'POST', '/', 'json', false, 'json', request);
}

model QuerySendFailDetailsRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  prodId?: string(name='ProdId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sendDate: string(name='SendDate', description='This parameter is required.', position='Query'),
}

model QuerySendFailDetailsResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QuerySendFailDetailsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySendFailDetailsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySendFailDetails  QuerySendFailDetailsRequest
  * @return QuerySendFailDetailsResponse
 */
async function querySendFailDetails(request: QuerySendFailDetailsRequest): QuerySendFailDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySendFailDetails', 'POST', '/', 'json', false, 'json', request);
}

model QuerySendFailDetailsNewRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  prodId?: string(name='ProdId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sendDate: string(name='SendDate', description='This parameter is required.', position='Query'),
}

model QuerySendFailDetailsNewResponseBody = {
  applyDateStr?: string(name='ApplyDateStr'),
  billCount?: long(name='BillCount'),
  bizType?: long(name='BizType'),
  innerErrCode?: string(name='InnerErrCode'),
  list?: {
    smsSendDetailResponse?: [ 
    {
      blackListStatus?: int32(name='BlackListStatus'),
      content?: string(name='Content'),
      errCode?: string(name='ErrCode'),
      errCodeDesc?: string(name='ErrCodeDesc'),
      outId?: string(name='OutId'),
      phoneNum?: string(name='PhoneNum'),
      receiveDateStr?: string(name='ReceiveDateStr'),
      sendDateStr?: string(name='SendDateStr'),
      sendStatus?: long(name='SendStatus'),
      suggestion?: string(name='Suggestion'),
      templateCode?: string(name='TemplateCode'),
    }
  ](name='SmsSendDetailResponse')
  }(name='List'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  smsLength?: long(name='SmsLength'),
  total?: long(name='Total'),
}

model QuerySendFailDetailsNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySendFailDetailsNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySendFailDetailsNew  QuerySendFailDetailsNewRequest
  * @return QuerySendFailDetailsNewResponse
 */
async function querySendFailDetailsNew(request: QuerySendFailDetailsNewRequest): QuerySendFailDetailsNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySendFailDetailsNew', 'POST', '/', 'json', false, 'json', request);
}

model QuerySendToGlobeStatusRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QuerySendToGlobeStatusResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
}

model QuerySendToGlobeStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySendToGlobeStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySendToGlobeStatus  QuerySendToGlobeStatusRequest
  * @return QuerySendToGlobeStatusResponse
 */
async function querySendToGlobeStatus(request: QuerySendToGlobeStatusRequest): QuerySendToGlobeStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySendToGlobeStatus', 'POST', '/', 'json', false, 'json', request);
}

model QueryShortUrlDetailNewRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  shortUrlId: string(name='ShortUrlId', description='This parameter is required.', position='Query'),
}

model QueryShortUrlDetailNewResponseBody = {
  eventName?: string(name='EventName'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtInvalidTime?: string(name='GmtInvalidTime'),
  id?: string(name='Id'),
  record?: [ 
    {
      eventName?: string(name='EventName'),
      gmtCreateTime?: string(name='GmtCreateTime'),
      gmtInvalidTime?: string(name='GmtInvalidTime'),
      id?: string(name='Id'),
      shortUrl?: string(name='ShortUrl'),
      sourceUrl?: string(name='SourceUrl'),
      status?: int32(name='Status'),
      totalPv?: string(name='TotalPv'),
      totalUv?: string(name='TotalUv'),
    }
  ](name='Record'),
  requestId?: string(name='RequestId'),
  shortUrl?: string(name='ShortUrl'),
  sourceUrl?: string(name='SourceUrl'),
  status?: int32(name='Status'),
  totalPv?: string(name='TotalPv'),
  totalUv?: string(name='TotalUv'),
}

model QueryShortUrlDetailNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryShortUrlDetailNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryShortUrlDetailNew  QueryShortUrlDetailNewRequest
  * @return QueryShortUrlDetailNewResponse
 */
async function queryShortUrlDetailNew(request: QueryShortUrlDetailNewRequest): QueryShortUrlDetailNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryShortUrlDetailNew', 'POST', '/', 'json', false, 'json', request);
}

model QueryShortUrlListNewRequest {
  eventName?: string(name='EventName', position='Query'),
  keyWord?: string(name='KeyWord', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  shortUrl?: string(name='ShortUrl', position='Query'),
}

model QueryShortUrlListNewResponseBody = {
  list?: [ 
    {
      eventName?: string(name='EventName'),
      gmtCreateTime?: string(name='GmtCreateTime'),
      gmtInvalidTime?: string(name='GmtInvalidTime'),
      id?: string(name='Id'),
      reason?: string(name='Reason'),
      record?: [ 
        {
          eventName?: string(name='EventName'),
          gmtCreateTime?: string(name='GmtCreateTime'),
          gmtInvalidTime?: string(name='GmtInvalidTime'),
          id?: string(name='Id'),
          reason?: string(name='Reason'),
          shortUrl?: string(name='ShortUrl'),
          sourceUrl?: string(name='SourceUrl'),
          status?: int32(name='Status'),
          totalPv?: string(name='TotalPv'),
          totalUv?: string(name='TotalUv'),
        }
      ](name='Record'),
      shortUrl?: string(name='ShortUrl'),
      sourceUrl?: string(name='SourceUrl'),
      status?: int32(name='Status'),
      totalPv?: string(name='TotalPv'),
      totalUv?: string(name='TotalUv'),
    }
  ](name='List'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model QueryShortUrlListNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryShortUrlListNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryShortUrlListNew  QueryShortUrlListNewRequest
  * @return QueryShortUrlListNewResponse
 */
async function queryShortUrlListNew(request: QueryShortUrlListNewRequest): QueryShortUrlListNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryShortUrlListNew', 'POST', '/', 'json', false, 'json', request);
}

model QueryShortUrlStatusRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryShortUrlStatusResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryShortUrlStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryShortUrlStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryShortUrlStatus  QueryShortUrlStatusRequest
  * @return QueryShortUrlStatusResponse
 */
async function queryShortUrlStatus(request: QueryShortUrlStatusRequest): QueryShortUrlStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryShortUrlStatus', 'POST', '/', 'json', false, 'json', request);
}

model QuerySlsStatusNewRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QuerySlsStatusNewResponseBody = {
  authorizeStatus?: boolean(name='AuthorizeStatus'),
  openStatus?: boolean(name='OpenStatus'),
  prodCode?: string(name='ProdCode'),
  requestId?: string(name='RequestId'),
  saveTime?: int32(name='SaveTime'),
  uid?: string(name='Uid'),
}

model QuerySlsStatusNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySlsStatusNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySlsStatusNew  QuerySlsStatusNewRequest
  * @return QuerySlsStatusNewResponse
 */
async function querySlsStatusNew(request: QuerySlsStatusNewRequest): QuerySlsStatusNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySlsStatusNew', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmsBaseScreenNewRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QuerySmsBaseScreenNewResponseBody = {
  accountBalance?: string(name='AccountBalance'),
  cardAbilityMark?: string(name='CardAbilityMark'),
  cardCustomerMark?: string(name='CardCustomerMark'),
  certifyType?: string(name='CertifyType'),
  channelType?: string(name='ChannelType'),
  childAccountAuth?: string(name='ChildAccountAuth'),
  creditValue?: string(name='CreditValue'),
  currentLocale?: string(name='CurrentLocale'),
  custFrom?: int32(name='CustFrom'),
  custName?: string(name='CustName'),
  dataAbilityMark?: string(name='DataAbilityMark'),
  dayuMigrateStatus?: int32(name='DayuMigrateStatus'),
  invoiceBalance?: string(name='InvoiceBalance'),
  ipSmsAbilityMark?: string(name='IpSmsAbilityMark'),
  isAccountMerged?: boolean(name='IsAccountMerged'),
  isAliInnerUser?: boolean(name='IsAliInnerUser'),
  isChineseUser?: boolean(name='IsChineseUser'),
  isDayuCustomer?: boolean(name='IsDayuCustomer'),
  isDayuTopCust?: boolean(name='IsDayuTopCust'),
  isMnsForceMigratingCustomer?: boolean(name='IsMnsForceMigratingCustomer'),
  isMnsMigratingCustomer?: boolean(name='IsMnsMigratingCustomer'),
  isNeedAuth?: boolean(name='IsNeedAuth'),
  isOldFisCust?: boolean(name='IsOldFisCust'),
  isOldSms?: boolean(name='IsOldSms'),
  isOpened?: boolean(name='IsOpened'),
  isRemainMnsPackage?: boolean(name='IsRemainMnsPackage'),
  isSendSmsToGlobeUser?: boolean(name='IsSendSmsToGlobeUser'),
  isShortUrlNormalUse?: boolean(name='IsShortUrlNormalUse'),
  isShortUrlOpened?: boolean(name='IsShortUrlOpened'),
  isSilentCust?: boolean(name='IsSilentCust'),
  osStatus?: int32(name='OsStatus'),
  prodCode?: string(name='ProdCode'),
  requestId?: string(name='RequestId'),
  shortUrlServeTag?: boolean(name='ShortUrlServeTag'),
  smsMarketingAssistantTag?: boolean(name='SmsMarketingAssistantTag'),
  textAbilityMark?: string(name='TextAbilityMark'),
  voucherNum?: int32(name='VoucherNum'),
}

model QuerySmsBaseScreenNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsBaseScreenNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySmsBaseScreenNew  QuerySmsBaseScreenNewRequest
  * @return QuerySmsBaseScreenNewResponse
 */
async function querySmsBaseScreenNew(request: QuerySmsBaseScreenNewRequest): QuerySmsBaseScreenNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmsBaseScreenNew', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmsDetectCountsRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QuerySmsDetectCountsResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model QuerySmsDetectCountsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsDetectCountsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySmsDetectCounts  QuerySmsDetectCountsRequest
  * @return QuerySmsDetectCountsResponse
 */
async function querySmsDetectCounts(request: QuerySmsDetectCountsRequest): QuerySmsDetectCountsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmsDetectCounts', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmsDetectCountsNewRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QuerySmsDetectCountsNewResponseBody = {
  detectedTimes?: int32(name='DetectedTimes'),
  leftTimes?: int32(name='LeftTimes'),
  requestId?: string(name='RequestId'),
}

model QuerySmsDetectCountsNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsDetectCountsNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySmsDetectCountsNew  QuerySmsDetectCountsNewRequest
  * @return QuerySmsDetectCountsNewResponse
 */
async function querySmsDetectCountsNew(request: QuerySmsDetectCountsNewRequest): QuerySmsDetectCountsNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmsDetectCountsNew', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmsDetectListRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QuerySmsDetectListResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model QuerySmsDetectListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsDetectListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySmsDetectList  QuerySmsDetectListRequest
  * @return QuerySmsDetectListResponse
 */
async function querySmsDetectList(request: QuerySmsDetectListRequest): QuerySmsDetectListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmsDetectList', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmsDetectListNewRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QuerySmsDetectListNewResponseBody = {
  list?: [ 
    {
      detectContent?: string(name='DetectContent'),
      detectSignName?: string(name='DetectSignName'),
      detectTime?: string(name='DetectTime'),
      status?: int32(name='Status'),
      successRate?: string(name='SuccessRate'),
      templateCode?: string(name='TemplateCode'),
      templateParam?: string(name='TemplateParam'),
    }
  ](name='List'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model QuerySmsDetectListNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsDetectListNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySmsDetectListNew  QuerySmsDetectListNewRequest
  * @return QuerySmsDetectListNewResponse
 */
async function querySmsDetectListNew(request: QuerySmsDetectListNewRequest): QuerySmsDetectListNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmsDetectListNew', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmsPackageDetailRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  packageType?: string(name='PackageType', position='Query'),
  pageNo?: long(name='PageNo', position='Query'),
  pageSize?: long(name='PageSize', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: int32(name='Status', position='Query'),
}

model QuerySmsPackageDetailResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QuerySmsPackageDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsPackageDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySmsPackageDetail  QuerySmsPackageDetailRequest
  * @return QuerySmsPackageDetailResponse
 */
async function querySmsPackageDetail(request: QuerySmsPackageDetailRequest): QuerySmsPackageDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmsPackageDetail', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmsPackageDetailNewRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  packageType?: string(name='PackageType', position='Query'),
  pageNo?: long(name='PageNo', position='Query'),
  pageSize?: long(name='PageSize', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: int32(name='Status', position='Query'),
}

model QuerySmsPackageDetailNewResponseBody = {
  list?: {
    smsPackageDetailDTO?: [ 
    {
      invalidTime?: long(name='InvalidTime'),
      orderTime?: long(name='OrderTime'),
      packageType?: string(name='PackageType'),
      remainCount?: long(name='RemainCount'),
      status?: int32(name='Status'),
      totalCount?: long(name='TotalCount'),
    }
  ](name='SmsPackageDetailDTO')
  }(name='List'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  remainSmsCount?: long(name='RemainSmsCount'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
  totalSmsCount?: long(name='TotalSmsCount'),
}

model QuerySmsPackageDetailNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsPackageDetailNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySmsPackageDetailNew  QuerySmsPackageDetailNewRequest
  * @return QuerySmsPackageDetailNewResponse
 */
async function querySmsPackageDetailNew(request: QuerySmsPackageDetailNewRequest): QuerySmsPackageDetailNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmsPackageDetailNew', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmsPackageNewRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  packageType?: string(name='PackageType', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  productName?: string(name='ProductName', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  state?: int32(name='State', position='Query'),
  time?: string(name='Time', position='Query'),
}

model QuerySmsPackageNewResponseBody = {
  list?: {
    smsPackageInfo?: [ 
    {
      buyTime?: string(name='BuyTime'),
      detailOrderId?: string(name='DetailOrderId'),
      effTime?: string(name='EffTime'),
      expTime?: string(name='ExpTime'),
      orderId?: string(name='OrderId'),
      packageName?: string(name='PackageName'),
      packageType?: string(name='PackageType'),
      payPrice?: float(name='PayPrice'),
      pkgId?: long(name='PkgId'),
      refundStatus?: int32(name='RefundStatus'),
      state?: int32(name='State'),
      total?: long(name='Total'),
      usage?: long(name='Usage'),
    }
  ](name='SmsPackageInfo')
  }(name='List'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model QuerySmsPackageNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsPackageNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySmsPackageNew  QuerySmsPackageNewRequest
  * @return QuerySmsPackageNewResponse
 */
async function querySmsPackageNew(request: QuerySmsPackageNewRequest): QuerySmsPackageNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmsPackageNew', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmsPackageOrderListRequest {
  billCycle?: string(name='BillCycle', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QuerySmsPackageOrderListResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QuerySmsPackageOrderListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsPackageOrderListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySmsPackageOrderList  QuerySmsPackageOrderListRequest
  * @return QuerySmsPackageOrderListResponse
 */
async function querySmsPackageOrderList(request: QuerySmsPackageOrderListRequest): QuerySmsPackageOrderListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmsPackageOrderList', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmsPackageOrderListNewRequest {
  billCycle?: string(name='BillCycle', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QuerySmsPackageOrderListNewResponseBody = {
  list?: {
    smsPackageOrderResponse?: [ 
    {
      effectDate?: string(name='EffectDate'),
      expireDate?: string(name='ExpireDate'),
      name?: string(name='Name'),
      payPrice?: string(name='PayPrice'),
      state?: int32(name='State'),
    }
  ](name='SmsPackageOrderResponse')
  }(name='List'),
  requestId?: string(name='RequestId'),
}

model QuerySmsPackageOrderListNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsPackageOrderListNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySmsPackageOrderListNew  QuerySmsPackageOrderListNewRequest
  * @return QuerySmsPackageOrderListNewResponse
 */
async function querySmsPackageOrderListNew(request: QuerySmsPackageOrderListNewRequest): QuerySmsPackageOrderListNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmsPackageOrderListNew', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmsPackageSummaryRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QuerySmsPackageSummaryResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QuerySmsPackageSummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsPackageSummaryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySmsPackageSummary  QuerySmsPackageSummaryRequest
  * @return QuerySmsPackageSummaryResponse
 */
async function querySmsPackageSummary(request: QuerySmsPackageSummaryRequest): QuerySmsPackageSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmsPackageSummary', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmsPackageSummaryNewRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QuerySmsPackageSummaryNewResponseBody = {
  certifyType?: int32(name='CertifyType'),
  interPackageCount?: long(name='InterPackageCount'),
  interPackageSum?: long(name='InterPackageSum'),
  mktPackageCount?: long(name='MktPackageCount'),
  mktPackageSum?: long(name='MktPackageSum'),
  requestId?: string(name='RequestId'),
  smsPackageCount?: long(name='SmsPackageCount'),
  smsPackageSum?: long(name='SmsPackageSum'),
  sysPackageCount?: long(name='SysPackageCount'),
  sysPackageSum?: long(name='SysPackageSum'),
}

model QuerySmsPackageSummaryNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsPackageSummaryNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySmsPackageSummaryNew  QuerySmsPackageSummaryNewRequest
  * @return QuerySmsPackageSummaryNewResponse
 */
async function querySmsPackageSummaryNew(request: QuerySmsPackageSummaryNewRequest): QuerySmsPackageSummaryNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmsPackageSummaryNew', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmsSaasTaskDetailRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  taskId?: long(name='TaskId', position='Query'),
  taskInstanceId?: long(name='TaskInstanceId', position='Query'),
}

model QuerySmsSaasTaskDetailResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QuerySmsSaasTaskDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsSaasTaskDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySmsSaasTaskDetail  QuerySmsSaasTaskDetailRequest
  * @return QuerySmsSaasTaskDetailResponse
 */
async function querySmsSaasTaskDetail(request: QuerySmsSaasTaskDetailRequest): QuerySmsSaasTaskDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmsSaasTaskDetail', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmsSaasTaskDetailNewRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  taskId?: long(name='TaskId', position='Query'),
}

model QuerySmsSaasTaskDetailNewResponseBody = {
  bizType?: string(name='BizType'),
  detailDownloadUrl?: string(name='DetailDownloadUrl'),
  detailDownloadUrlForSuccess?: string(name='DetailDownloadUrlForSuccess'),
  extParams?: string(name='ExtParams'),
  failCount?: int32(name='FailCount'),
  fireTime?: string(name='FireTime'),
  gmtCreate?: string(name='GmtCreate'),
  isDeleted?: boolean(name='IsDeleted'),
  isPermitOrder?: boolean(name='IsPermitOrder'),
  isPermitOrderForSuccess?: boolean(name='IsPermitOrderForSuccess'),
  ossFilePath?: string(name='OssFilePath'),
  phoneList?: {
    phoneNum?: [ string ](name='phoneNum')
  }(name='PhoneList'),
  requestId?: string(name='RequestId'),
  saasBaseCommParam?: {
    aliyunUid?: long(name='AliyunUid'),
    billCount?: int32(name='BillCount'),
    byteCount?: int32(name='ByteCount'),
    clientIp?: string(name='ClientIp'),
    custId?: long(name='CustId'),
    cycleNum?: int32(name='CycleNum'),
    paramList?: {
      param?: [ string ](name='Param')
    }(name='ParamList'),
    partnerId?: long(name='PartnerId'),
    signature?: string(name='Signature'),
    smsContent?: string(name='SmsContent'),
    smsTemplateCode?: string(name='SmsTemplateCode'),
    taskErrorCase?: string(name='TaskErrorCase'),
    taskErrorSuggestion?: string(name='TaskErrorSuggestion'),
  }(name='SaasBaseCommParam'),
  saasFileUrl?: string(name='SaasFileUrl'),
  scheduleType?: string(name='ScheduleType'),
  status?: string(name='Status'),
  successCount?: int32(name='SuccessCount'),
  taskId?: long(name='TaskId'),
  taskInstanceId?: long(name='TaskInstanceId'),
  taskName?: string(name='TaskName'),
  totalCount?: int32(name='TotalCount'),
}

model QuerySmsSaasTaskDetailNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsSaasTaskDetailNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySmsSaasTaskDetailNew  QuerySmsSaasTaskDetailNewRequest
  * @return QuerySmsSaasTaskDetailNewResponse
 */
async function querySmsSaasTaskDetailNew(request: QuerySmsSaasTaskDetailNewRequest): QuerySmsSaasTaskDetailNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmsSaasTaskDetailNew', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmsSaasTaskListRequest {
  bizType?: string(name='BizType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  serviceType?: string(name='ServiceType', position='Query'),
  status?: string(name='Status', position='Query'),
  taskName?: string(name='TaskName', position='Query'),
}

model QuerySmsSaasTaskListResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QuerySmsSaasTaskListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsSaasTaskListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySmsSaasTaskList  QuerySmsSaasTaskListRequest
  * @return QuerySmsSaasTaskListResponse
 */
async function querySmsSaasTaskList(request: QuerySmsSaasTaskListRequest): QuerySmsSaasTaskListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmsSaasTaskList', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmsSaasTaskListNewRequest {
  bizType?: string(name='BizType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: string(name='Status', position='Query'),
  taskName?: string(name='TaskName', position='Query'),
}

model QuerySmsSaasTaskListNewResponseBody = {
  list?: {
    fcSaasTaskDTO?: [ 
    {
      bizType?: string(name='BizType'),
      commParams?: {
        aliyunUid?: long(name='AliyunUid'),
        custId?: long(name='CustId'),
        cycleNum?: int32(name='CycleNum'),
        partnerId?: long(name='PartnerId'),
      }(name='CommParams'),
      detailDownloadUrl?: string(name='DetailDownloadUrl'),
      detailDownloadUrlForSuccess?: string(name='DetailDownloadUrlForSuccess'),
      extParams?: string(name='ExtParams'),
      failCount?: int32(name='FailCount'),
      fireTime?: string(name='FireTime'),
      gmtCreate?: string(name='GmtCreate'),
      isDeleted?: boolean(name='IsDeleted'),
      isPermitOrder?: boolean(name='IsPermitOrder'),
      isPermitOrderForSuccess?: boolean(name='IsPermitOrderForSuccess'),
      ossFilePath?: string(name='OssFilePath'),
      scheduleType?: string(name='ScheduleType'),
      status?: string(name='Status'),
      successCount?: int32(name='SuccessCount'),
      taskId?: long(name='TaskId'),
      taskInstanceId?: long(name='TaskInstanceId'),
      taskName?: string(name='TaskName'),
      totalCount?: int32(name='TotalCount'),
    }
  ](name='FcSaasTaskDTO')
  }(name='List'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model QuerySmsSaasTaskListNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsSaasTaskListNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySmsSaasTaskListNew  QuerySmsSaasTaskListNewRequest
  * @return QuerySmsSaasTaskListNewResponse
 */
async function querySmsSaasTaskListNew(request: QuerySmsSaasTaskListNewRequest): QuerySmsSaasTaskListNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmsSaasTaskListNew', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmsSendFailDetailsUrlRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  prodId?: string(name='ProdId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sendDate?: string(name='SendDate', position='Query'),
}

model QuerySmsSendFailDetailsUrlResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QuerySmsSendFailDetailsUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsSendFailDetailsUrlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySmsSendFailDetailsUrl  QuerySmsSendFailDetailsUrlRequest
  * @return QuerySmsSendFailDetailsUrlResponse
 */
async function querySmsSendFailDetailsUrl(request: QuerySmsSendFailDetailsUrlRequest): QuerySmsSendFailDetailsUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmsSendFailDetailsUrl', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmsSendFailDetailsUrlNewRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  prodId?: string(name='ProdId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sendDate?: string(name='SendDate', position='Query'),
}

model QuerySmsSendFailDetailsUrlNewResponseBody = {
  downloadUrl?: string(name='DownloadUrl'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model QuerySmsSendFailDetailsUrlNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsSendFailDetailsUrlNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySmsSendFailDetailsUrlNew  QuerySmsSendFailDetailsUrlNewRequest
  * @return QuerySmsSendFailDetailsUrlNewResponse
 */
async function querySmsSendFailDetailsUrlNew(request: QuerySmsSendFailDetailsUrlNewRequest): QuerySmsSendFailDetailsUrlNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmsSendFailDetailsUrlNew', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmsSignDetailBySignIdNewRequest {
  id: string(name='Id', description='This parameter is required.', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  signGray?: boolean(name='SignGray', position='Query'),
}

model QuerySmsSignDetailBySignIdNewResponseBody = {
  accessToken?: string(name='AccessToken'),
  applicationScene?: {
    content?: string(name='Content'),
    id?: long(name='Id'),
    name?: string(name='Name'),
  }(name='ApplicationScene'),
  auditInfo?: string(name='AuditInfo'),
  auditRemarkInfo?: string(name='AuditRemarkInfo'),
  auditState?: string(name='AuditState'),
  authorization?: string(name='Authorization'),
  authorizationEffTime?: string(name='AuthorizationEffTime'),
  authorizationLetter?: string(name='AuthorizationLetter'),
  authorizationLetterAuditPass?: boolean(name='AuthorizationLetterAuditPass'),
  authorizationLetterId?: string(name='AuthorizationLetterId'),
  authorizationLetterName?: string(name='AuthorizationLetterName'),
  authorizationLetterState?: string(name='AuthorizationLetterState'),
  authorizationLetterStatus?: string(name='AuthorizationLetterStatus'),
  authorizationSignScope?: string(name='AuthorizationSignScope'),
  effectSceneType?: int32(name='EffectSceneType'),
  enableAuthorizationLetter?: boolean(name='EnableAuthorizationLetter'),
  extendMessage?: string(name='ExtendMessage'),
  fileIds?: [ long ](name='FileIds'),
  fileUrlList?: [ string ](name='FileUrlList'),
  from?: string(name='From'),
  gmtCreateStr?: string(name='GmtCreateStr'),
  id?: string(name='Id'),
  isAuthorizationLetterOCRComplete?: boolean(name='IsAuthorizationLetterOCRComplete'),
  isAuthorizationLetterOCRDiff?: boolean(name='IsAuthorizationLetterOCRDiff'),
  isSignScopeOCRDiff?: boolean(name='IsSignScopeOCRDiff'),
  list?: [ 
    {
      auditState?: string(name='AuditState'),
      sceneType?: int32(name='SceneType'),
    }
  ](name='List'),
  needAuthorized?: boolean(name='NeedAuthorized'),
  openTag?: boolean(name='OpenTag'),
  orderId?: string(name='OrderId'),
  organizationCode?: string(name='OrganizationCode'),
  ossKeys?: [ string ](name='OssKeys'),
  proxyAuthorization?: string(name='ProxyAuthorization'),
  remark?: string(name='Remark'),
  requestId?: string(name='RequestId'),
  sceneType?: int32(name='SceneType'),
  serviceType?: int32(name='ServiceType'),
  signCode?: string(name='SignCode'),
  signName?: string(name='SignName'),
  signScopeOCR?: string(name='SignScopeOCR'),
  signUpgrade?: string(name='SignUpgrade'),
}

model QuerySmsSignDetailBySignIdNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsSignDetailBySignIdNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySmsSignDetailBySignIdNew  QuerySmsSignDetailBySignIdNewRequest
  * @return QuerySmsSignDetailBySignIdNewResponse
 */
async function querySmsSignDetailBySignIdNew(request: QuerySmsSignDetailBySignIdNewRequest): QuerySmsSignDetailBySignIdNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmsSignDetailBySignIdNew', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmsSignLastRangeRequest {
  auditState?: string(name='AuditState', position='Query'),
  bizType?: string(name='BizType', position='Query'),
  isGlobeSign?: int32(name='IsGlobeSign', position='Query'),
  limit?: int32(name='Limit', position='Query'),
  needDefaultSign?: boolean(name='NeedDefaultSign', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  signName?: string(name='SignName', position='Query'),
}

model QuerySmsSignLastRangeResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QuerySmsSignLastRangeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsSignLastRangeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySmsSignLastRange  QuerySmsSignLastRangeRequest
  * @return QuerySmsSignLastRangeResponse
 */
async function querySmsSignLastRange(request: QuerySmsSignLastRangeRequest): QuerySmsSignLastRangeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmsSignLastRange', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmsSignLastRangeNewRequest {
  auditState?: string(name='AuditState', position='Query'),
  isGlobeSign?: int32(name='IsGlobeSign', position='Query'),
  limit?: int32(name='Limit', position='Query'),
  needDefaultSign?: boolean(name='NeedDefaultSign', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageIndex?: int32(name='PageIndex', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sceneType?: int32(name='SceneType', position='Query'),
  signName?: string(name='SignName', position='Query'),
}

model QuerySmsSignLastRangeNewResponseBody = {
  list?: {
    smsSign?: [ 
    {
      auditInfo?: string(name='AuditInfo'),
      auditRemarkInfo?: string(name='AuditRemarkInfo'),
      auditState?: string(name='AuditState'),
      extendMessage?: string(name='ExtendMessage'),
      fileIds?: {
        fileId?: [ long ](name='FileId')
      }(name='FileIds'),
      fileUrlList?: {
        fileUrl?: [ string ](name='FileUrl')
      }(name='FileUrlList'),
      gmtCreateStr?: string(name='GmtCreateStr'),
      id?: string(name='Id'),
      isDefaultSign?: boolean(name='IsDefaultSign'),
      operateDateStr?: string(name='OperateDateStr'),
      orderId?: string(name='OrderId'),
      remark?: string(name='Remark'),
      sceneType?: int32(name='SceneType'),
      serviceType?: int32(name='ServiceType'),
      signName?: string(name='SignName'),
      signSceneDetailList?: {
        signSceneDetail?: [ 
        {
          auditState?: string(name='AuditState'),
          sceneType?: int32(name='SceneType'),
        }
      ](name='SignSceneDetail')
      }(name='SignSceneDetailList'),
      signType?: int32(name='SignType'),
      signUsageName?: string(name='SignUsageName'),
    }
  ](name='SmsSign')
  }(name='List'),
  requestId?: string(name='RequestId'),
}

model QuerySmsSignLastRangeNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsSignLastRangeNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySmsSignLastRangeNew  QuerySmsSignLastRangeNewRequest
  * @return QuerySmsSignLastRangeNewResponse
 */
async function querySmsSignLastRangeNew(request: QuerySmsSignLastRangeNewRequest): QuerySmsSignLastRangeNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmsSignLastRangeNew', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmsSignListRequest {
  auditState?: string(name='AuditState', position='Query'),
  bizType?: string(name='BizType', position='Query'),
  isGlobeSign?: int32(name='IsGlobeSign', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  serviceType?: string(name='ServiceType', position='Query'),
  signName?: string(name='SignName', position='Query'),
}

model QuerySmsSignListResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QuerySmsSignListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsSignListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySmsSignList  QuerySmsSignListRequest
  * @return QuerySmsSignListResponse
 */
async function querySmsSignList(request: QuerySmsSignListRequest): QuerySmsSignListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmsSignList', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmsSignListNewRequest {
  aggregatedRegisterStatus?: int32(name='AggregatedRegisterStatus', position='Query'),
  auditState?: string(name='AuditState', position='Query'),
  bizType?: string(name='BizType', position='Query'),
  isGlobeSign?: int32(name='IsGlobeSign', position='Query'),
  operatorCodes?: [ string ](name='OperatorCodes', shrink='json', position='Query'),
  operatorRegisterStatus?: int32(name='OperatorRegisterStatus', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: long(name='PageNo', position='Query'),
  pageSize?: long(name='PageSize', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  qualificationName?: string(name='QualificationName', position='Query'),
  registerResult?: int32(name='RegisterResult', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  serviceType?: string(name='ServiceType', position='Query'),
  signName?: string(name='SignName', position='Query'),
  signSource?: string(name='SignSource', position='Query'),
}

model QuerySmsSignListNewResponseBody = {
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  smsSign?: {
    smsSign?: [ 
    {
      aggregatedRegisterStatus?: int32(name='AggregatedRegisterStatus'),
      applySource?: string(name='ApplySource'),
      auditInfo?: string(name='AuditInfo'),
      auditRemarkInfo?: string(name='AuditRemarkInfo'),
      auditState?: string(name='AuditState'),
      authorization?: string(name='Authorization'),
      authorizationEffTime?: string(name='AuthorizationEffTime'),
      authorizationLetter?: string(name='AuthorizationLetter'),
      authorizationLetterAuditPass?: boolean(name='AuthorizationLetterAuditPass'),
      authorizationLetterId?: long(name='AuthorizationLetterId'),
      authorizationLetterName?: string(name='AuthorizationLetterName'),
      authorizationLetterStatus?: string(name='AuthorizationLetterStatus'),
      authorizationSignScope?: string(name='AuthorizationSignScope'),
      canRegister?: boolean(name='CanRegister'),
      enableAuthorizationLetter?: boolean(name='EnableAuthorizationLetter'),
      extendMessage?: string(name='ExtendMessage'),
      fileIds?: {
        fileId?: [ long ](name='FileId')
      }(name='FileIds'),
      fileUrlList?: {
        fileUrl?: [ string ](name='FileUrl')
      }(name='FileUrlList'),
      gmtCreateStr?: string(name='GmtCreateStr'),
      id?: string(name='Id'),
      isAuthorizationLetterOCRComplete?: boolean(name='IsAuthorizationLetterOCRComplete'),
      isAuthorizationLetterOCRDiff?: boolean(name='IsAuthorizationLetterOCRDiff'),
      isDefaultSign?: boolean(name='IsDefaultSign'),
      isSignScopeOCRDiff?: boolean(name='IsSignScopeOCRDiff'),
      mobileRegisterStatus?: int32(name='MobileRegisterStatus'),
      operateDateStr?: string(name='OperateDateStr'),
      orderCount?: long(name='OrderCount'),
      orderId?: string(name='OrderId'),
      organizationCode?: string(name='OrganizationCode'),
      proxyAuthorization?: string(name='ProxyAuthorization'),
      qualificationId?: long(name='QualificationId'),
      qualificationName?: string(name='QualificationName'),
      qualificationState?: string(name='QualificationState'),
      qualificationVersion?: long(name='QualificationVersion'),
      qualificationWorkOrderId?: long(name='QualificationWorkOrderId'),
      registerResult?: int32(name='RegisterResult'),
      registerTime?: long(name='RegisterTime'),
      remark?: string(name='Remark'),
      resultReason?: string(name='ResultReason'),
      sceneType?: int32(name='SceneType'),
      serviceType?: int32(name='ServiceType'),
      signCode?: string(name='SignCode'),
      signName?: string(name='SignName'),
      signSceneDetailList?: {
        signSceneDetail?: [ 
        {
          auditState?: string(name='AuditState'),
          sceneType?: int32(name='SceneType'),
        }
      ](name='SignSceneDetail')
      }(name='SignSceneDetailList'),
      signScopeOCR?: string(name='SignScopeOCR'),
      signSource?: string(name='SignSource'),
      signType?: int32(name='SignType'),
      telecomRegisterStatus?: int32(name='TelecomRegisterStatus'),
      unicomRegisterStatus?: int32(name='UnicomRegisterStatus'),
    }
  ](name='SmsSign')
  }(name='SmsSign'),
  total?: long(name='Total'),
}

model QuerySmsSignListNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsSignListNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySmsSignListNew  QuerySmsSignListNewRequest
  * @return QuerySmsSignListNewResponse
 */
async function querySmsSignListNew(request: QuerySmsSignListNewRequest): QuerySmsSignListNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmsSignListNew', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmsSignValidRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  serviceType?: int32(name='ServiceType', position='Query'),
  signName?: string(name='SignName', position='Query'),
}

model QuerySmsSignValidResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QuerySmsSignValidResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsSignValidResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySmsSignValid  QuerySmsSignValidRequest
  * @return QuerySmsSignValidResponse
 */
async function querySmsSignValid(request: QuerySmsSignValidRequest): QuerySmsSignValidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmsSignValid', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmsSignValidNewRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  serviceType?: int32(name='ServiceType', position='Query'),
  signName?: string(name='SignName', position='Query'),
  signUpgrade?: boolean(name='SignUpgrade', position='Query'),
}

model QuerySmsSignValidNewResponseBody = {
  code?: string(name='Code'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
}

model QuerySmsSignValidNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsSignValidNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySmsSignValidNew  QuerySmsSignValidNewRequest
  * @return QuerySmsSignValidNewResponse
 */
async function querySmsSignValidNew(request: QuerySmsSignValidNewRequest): QuerySmsSignValidNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmsSignValidNew', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmsStatisticsRequest {
  endDate: string(name='EndDate', description='This parameter is required.', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  prodId?: string(name='ProdId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  signName?: string(name='SignName', position='Query'),
  startDate: string(name='StartDate', description='This parameter is required.', position='Query'),
  template?: string(name='Template', position='Query'),
}

model QuerySmsStatisticsResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QuerySmsStatisticsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsStatisticsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySmsStatistics  QuerySmsStatisticsRequest
  * @return QuerySmsStatisticsResponse
 */
async function querySmsStatistics(request: QuerySmsStatisticsRequest): QuerySmsStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmsStatistics', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmsStatisticsByTemplateRequest {
  endDate: string(name='EndDate', description='This parameter is required.', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  prodId?: string(name='ProdId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startDate: string(name='StartDate', description='This parameter is required.', position='Query'),
  template?: string(name='Template', position='Query'),
}

model QuerySmsStatisticsByTemplateResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QuerySmsStatisticsByTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsStatisticsByTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySmsStatisticsByTemplate  QuerySmsStatisticsByTemplateRequest
  * @return QuerySmsStatisticsByTemplateResponse
 */
async function querySmsStatisticsByTemplate(request: QuerySmsStatisticsByTemplateRequest): QuerySmsStatisticsByTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmsStatisticsByTemplate', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmsStatisticsByTemplateNewRequest {
  endDate: string(name='EndDate', description='This parameter is required.', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  prodId?: string(name='ProdId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startDate: string(name='StartDate', description='This parameter is required.', position='Query'),
  template?: string(name='Template', position='Query'),
}

model QuerySmsStatisticsByTemplateNewResponseBody = {
  list?: {
    smsStatisticsResponse?: [ 
    {
      detailStsDate?: string(name='DetailStsDate'),
      downloadUrl?: string(name='DownloadUrl'),
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      id?: long(name='Id'),
      sendSuccessRate?: string(name='SendSuccessRate'),
      sendTotal?: long(name='SendTotal'),
      sendTotalFail?: long(name='SendTotalFail'),
      sendTotalSuccess?: long(name='SendTotalSuccess'),
      sendTotalUnknown?: long(name='SendTotalUnknown'),
      status?: string(name='Status'),
      templateCode?: string(name='TemplateCode'),
      templateName?: string(name='TemplateName'),
    }
  ](name='SmsStatisticsResponse')
  }(name='List'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model QuerySmsStatisticsByTemplateNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsStatisticsByTemplateNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySmsStatisticsByTemplateNew  QuerySmsStatisticsByTemplateNewRequest
  * @return QuerySmsStatisticsByTemplateNewResponse
 */
async function querySmsStatisticsByTemplateNew(request: QuerySmsStatisticsByTemplateNewRequest): QuerySmsStatisticsByTemplateNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmsStatisticsByTemplateNew', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmsStatisticsNewRequest {
  endDate: string(name='EndDate', description='This parameter is required.', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  prodId?: long(name='ProdId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  signName?: string(name='SignName', position='Query'),
  startDate: string(name='StartDate', description='This parameter is required.', position='Query'),
  template?: string(name='Template', position='Query'),
}

model QuerySmsStatisticsNewResponseBody = {
  list?: [ 
    {
      bizType?: int32(name='BizType'),
      detailStsDate?: string(name='DetailStsDate'),
      downloadUrl?: string(name='DownloadUrl'),
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      id?: long(name='Id'),
      sendSuccessRate?: string(name='SendSuccessRate'),
      sendTotal?: long(name='SendTotal'),
      sendTotalFail?: long(name='SendTotalFail'),
      sendTotalSuccess?: long(name='SendTotalSuccess'),
      sendTotalUnknown?: long(name='SendTotalUnknown'),
      signName?: string(name='SignName'),
      status?: string(name='Status'),
      templateCode?: string(name='TemplateCode'),
      templateName?: string(name='TemplateName'),
    }
  ](name='List'),
  requestId?: string(name='RequestId'),
}

model QuerySmsStatisticsNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsStatisticsNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySmsStatisticsNew  QuerySmsStatisticsNewRequest
  * @return QuerySmsStatisticsNewResponse
 */
async function querySmsStatisticsNew(request: QuerySmsStatisticsNewRequest): QuerySmsStatisticsNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmsStatisticsNew', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmsStatisticsUrlRequest {
  endDate: string(name='EndDate', description='This parameter is required.', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  prodId?: string(name='ProdId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  signName?: string(name='SignName', position='Query'),
  startDate: string(name='StartDate', description='This parameter is required.', position='Query'),
  template?: string(name='Template', position='Query'),
}

model QuerySmsStatisticsUrlResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QuerySmsStatisticsUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsStatisticsUrlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySmsStatisticsUrl  QuerySmsStatisticsUrlRequest
  * @return QuerySmsStatisticsUrlResponse
 */
async function querySmsStatisticsUrl(request: QuerySmsStatisticsUrlRequest): QuerySmsStatisticsUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmsStatisticsUrl', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmsStatisticsUrlNewRequest {
  endDate: string(name='EndDate', description='This parameter is required.', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  prodId?: long(name='ProdId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  signName?: string(name='SignName', position='Query'),
  startDate: string(name='StartDate', description='This parameter is required.', position='Query'),
  template?: string(name='Template', position='Query'),
}

model QuerySmsStatisticsUrlNewResponseBody = {
  downloadUrl?: string(name='DownloadUrl'),
  requestId?: string(name='RequestId'),
}

model QuerySmsStatisticsUrlNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsStatisticsUrlNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySmsStatisticsUrlNew  QuerySmsStatisticsUrlNewRequest
  * @return QuerySmsStatisticsUrlNewResponse
 */
async function querySmsStatisticsUrlNew(request: QuerySmsStatisticsUrlNewRequest): QuerySmsStatisticsUrlNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmsStatisticsUrlNew', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmsStepRequest {
  billCycle?: string(name='BillCycle', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QuerySmsStepResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QuerySmsStepResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsStepResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySmsStep  QuerySmsStepRequest
  * @return QuerySmsStepResponse
 */
async function querySmsStep(request: QuerySmsStepRequest): QuerySmsStepResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmsStep', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmsTemplateByCodeRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  templateCode: string(name='TemplateCode', description='This parameter is required.', position='Query'),
}

model QuerySmsTemplateByCodeResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QuerySmsTemplateByCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsTemplateByCodeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySmsTemplateByCode  QuerySmsTemplateByCodeRequest
  * @return QuerySmsTemplateByCodeResponse
 */
async function querySmsTemplateByCode(request: QuerySmsTemplateByCodeRequest): QuerySmsTemplateByCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmsTemplateByCode', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmsTemplateByCodeNewRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  templateCode: string(name='TemplateCode', description='This parameter is required.', position='Query'),
}

model QuerySmsTemplateByCodeNewResponseBody = {
  accessToken?: string(name='AccessToken'),
  applicationScene?: {
    content?: string(name='Content'),
    id?: long(name='Id'),
    name?: string(name='Name'),
  }(name='ApplicationScene'),
  auditInfo?: string(name='AuditInfo'),
  auditRemarkInfo?: string(name='AuditRemarkInfo'),
  bizType?: string(name='BizType'),
  fileIds?: {
    fileId?: [ long ](name='FileId')
  }(name='FileIds'),
  fileUrlList?: {
    fileUrl?: [ string ](name='FileUrl')
  }(name='FileUrlList'),
  from?: string(name='From'),
  gmtCreateStr?: string(name='GmtCreateStr'),
  intlType?: int32(name='IntlType'),
  moreDataFileIds?: {
    moreDataFileId?: [ long ](name='MoreDataFileId')
  }(name='MoreDataFileIds'),
  moreDataFileUrls?: {
    moreDataFileUrl?: [ string ](name='MoreDataFileUrl')
  }(name='MoreDataFileUrls'),
  moreDataOssKeys?: {
    moreDataOssKey?: [ string ](name='MoreDataOssKey')
  }(name='MoreDataOssKeys'),
  needAuthorized?: boolean(name='NeedAuthorized'),
  openTag?: boolean(name='OpenTag'),
  orderId?: string(name='OrderId'),
  ossKeys?: {
    ossKey?: [ string ](name='OssKey')
  }(name='OssKeys'),
  productUrl?: string(name='ProductUrl'),
  relatedSignName?: string(name='RelatedSignName'),
  remark?: string(name='Remark'),
  requestId?: string(name='RequestId'),
  rmdTemplateId?: int32(name='RmdTemplateId'),
  rmdTemplateVariableNum?: int32(name='RmdTemplateVariableNum'),
  signName?: string(name='SignName'),
  signType?: int32(name='SignType'),
  smsContent?: string(name='SmsContent'),
  tags?: {
    tagInfo?: [ 
    {
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagInfo')
  }(name='Tags'),
  templateCode?: string(name='TemplateCode'),
  templateName?: string(name='TemplateName'),
  templateRule?: string(name='TemplateRule'),
}

model QuerySmsTemplateByCodeNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsTemplateByCodeNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySmsTemplateByCodeNew  QuerySmsTemplateByCodeNewRequest
  * @return QuerySmsTemplateByCodeNewResponse
 */
async function querySmsTemplateByCodeNew(request: QuerySmsTemplateByCodeNewRequest): QuerySmsTemplateByCodeNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmsTemplateByCodeNew', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmsTemplateLastRangeRequest {
  bizType?: string(name='BizType', position='Query'),
  limit?: int32(name='Limit', position='Query'),
  needDefaultTemplate?: boolean(name='NeedDefaultTemplate', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  prodId?: string(name='ProdId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  templateName?: string(name='TemplateName', position='Query'),
}

model QuerySmsTemplateLastRangeResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QuerySmsTemplateLastRangeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsTemplateLastRangeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySmsTemplateLastRange  QuerySmsTemplateLastRangeRequest
  * @return QuerySmsTemplateLastRangeResponse
 */
async function querySmsTemplateLastRange(request: QuerySmsTemplateLastRangeRequest): QuerySmsTemplateLastRangeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmsTemplateLastRange', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmsTemplateLastRangeNewRequest {
  bizType?: string(name='BizType', position='Query'),
  filterAnyParam?: boolean(name='FilterAnyParam', position='Query'),
  limit?: int32(name='Limit', position='Query'),
  needDefaultTemplate?: boolean(name='NeedDefaultTemplate', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  prodId?: string(name='ProdId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  templateName?: string(name='TemplateName', position='Query'),
}

model QuerySmsTemplateLastRangeNewResponseBody = {
  list?: {
    smsTemplate?: [ 
    {
      auditInfo?: string(name='AuditInfo'),
      auditRemarkInfo?: string(name='AuditRemarkInfo'),
      auditState?: string(name='AuditState'),
      bizType?: string(name='BizType'),
      expireDateStr?: string(name='ExpireDateStr'),
      gmtCreateStr?: string(name='GmtCreateStr'),
      id?: string(name='Id'),
      isAnyParam?: boolean(name='IsAnyParam'),
      isDefaultTemplate?: boolean(name='IsDefaultTemplate'),
      isRecently?: boolean(name='IsRecently'),
      orderId?: string(name='OrderId'),
      passErrType?: string(name='PassErrType'),
      remark?: string(name='Remark'),
      signType?: int32(name='SignType'),
      smsContent?: string(name='SmsContent'),
      supportVendor?: string(name='SupportVendor'),
      tags?: {
        tag?: [ 
        {
          resourceId?: string(name='ResourceId'),
          resourceType?: string(name='ResourceType'),
          tagKey?: string(name='TagKey'),
          tagValue?: string(name='TagValue'),
        }
      ](name='Tag')
      }(name='Tags'),
      templateCode?: string(name='TemplateCode'),
      templateContent?: string(name='TemplateContent'),
      templateName?: string(name='TemplateName'),
      templateRule?: string(name='TemplateRule'),
    }
  ](name='SmsTemplate')
  }(name='List'),
  requestId?: string(name='RequestId'),
}

model QuerySmsTemplateLastRangeNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsTemplateLastRangeNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySmsTemplateLastRangeNew  QuerySmsTemplateLastRangeNewRequest
  * @return QuerySmsTemplateLastRangeNewResponse
 */
async function querySmsTemplateLastRangeNew(request: QuerySmsTemplateLastRangeNewRequest): QuerySmsTemplateLastRangeNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmsTemplateLastRangeNew', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmsTemplateListRequest {
  auditState?: string(name='AuditState', position='Query'),
  bizType?: string(name='BizType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  prodType?: string(name='ProdType', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tags?: [ 
    {
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='Tags', position='Query'),
  templateName?: string(name='TemplateName', position='Query'),
}

model QuerySmsTemplateListResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QuerySmsTemplateListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsTemplateListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySmsTemplateList  QuerySmsTemplateListRequest
  * @return QuerySmsTemplateListResponse
 */
async function querySmsTemplateList(request: QuerySmsTemplateListRequest): QuerySmsTemplateListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmsTemplateList', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmsTemplateListNewRequest {
  auditState?: string(name='AuditState', position='Query'),
  bizType?: string(name='BizType', position='Query'),
  intlType?: int32(name='IntlType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  prodType?: string(name='ProdType', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tagListString?: string(name='TagListString', position='Query'),
  tags?: [ 
    {
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='Tags', position='Query'),
  templateName?: string(name='TemplateName', position='Query'),
}

model QuerySmsTemplateListNewResponseBody = {
  list?: {
    smsTemplate?: [ 
    {
      auditInfo?: string(name='AuditInfo'),
      auditRemarkInfo?: string(name='AuditRemarkInfo'),
      auditState?: string(name='AuditState'),
      bizType?: string(name='BizType'),
      expireDateStr?: string(name='ExpireDateStr'),
      gmtCreateStr?: string(name='GmtCreateStr'),
      id?: string(name='Id'),
      intelligentApproval?: boolean(name='IntelligentApproval'),
      intlType?: int32(name='IntlType'),
      isAnyParam?: boolean(name='IsAnyParam'),
      isDefaultTemplate?: boolean(name='IsDefaultTemplate'),
      isRecently?: boolean(name='IsRecently'),
      orderCount?: long(name='OrderCount'),
      orderId?: string(name='OrderId'),
      passErrType?: string(name='PassErrType'),
      productUrl?: string(name='ProductUrl'),
      relatedSignName?: string(name='RelatedSignName'),
      remark?: string(name='Remark'),
      signType?: int32(name='SignType'),
      smsContent?: string(name='SmsContent'),
      supportVendor?: string(name='SupportVendor'),
      tags?: {
        tag?: [ 
        {
          resourceId?: string(name='ResourceId'),
          resourceType?: string(name='ResourceType'),
          tagKey?: string(name='TagKey'),
          tagValue?: string(name='TagValue'),
        }
      ](name='Tag')
      }(name='Tags'),
      templateCode?: string(name='TemplateCode'),
      templateContent?: string(name='TemplateContent'),
      templateName?: string(name='TemplateName'),
      templateRule?: string(name='TemplateRule'),
    }
  ](name='SmsTemplate')
  }(name='List'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model QuerySmsTemplateListNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsTemplateListNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySmsTemplateListNew  QuerySmsTemplateListNewRequest
  * @return QuerySmsTemplateListNewResponse
 */
async function querySmsTemplateListNew(request: QuerySmsTemplateListNewRequest): QuerySmsTemplateListNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmsTemplateListNew', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmsUserTagsRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QuerySmsUserTagsResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QuerySmsUserTagsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsUserTagsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySmsUserTags  QuerySmsUserTagsRequest
  * @return QuerySmsUserTagsResponse
 */
async function querySmsUserTags(request: QuerySmsUserTagsRequest): QuerySmsUserTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmsUserTags', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmsUserTagsNewRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QuerySmsUserTagsNewResponseBody = {
  isAnyParamTemplateUser?: boolean(name='IsAnyParamTemplateUser'),
  isBatchCreateSmsSign?: boolean(name='IsBatchCreateSmsSign'),
  isInnerUser?: boolean(name='IsInnerUser'),
  isNewUser?: boolean(name='IsNewUser'),
  isNoneStatusNoChargeCust?: boolean(name='IsNoneStatusNoChargeCust'),
  isOpenTemplateRule?: boolean(name='IsOpenTemplateRule'),
  isOpenedCard?: boolean(name='IsOpenedCard'),
  isOpenedDigit?: boolean(name='IsOpenedDigit'),
  isOpenedInternationalSms?: boolean(name='IsOpenedInternationalSms'),
  isOpenedMarket?: boolean(name='IsOpenedMarket'),
  isOpenedSaas?: boolean(name='IsOpenedSaas'),
  isOpenedSmppStandardProtocol?: boolean(name='IsOpenedSmppStandardProtocol'),
  isOpenedStandardProtocol?: boolean(name='IsOpenedStandardProtocol'),
  isVirtualCust?: boolean(name='IsVirtualCust'),
  requestId?: boolean(name='RequestId'),
  signCheckCommon?: boolean(name='SignCheckCommon'),
  signCheckVerification?: boolean(name='SignCheckVerification'),
  smsInformationSupervision?: boolean(name='SmsInformationSupervision'),
}

model QuerySmsUserTagsNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsUserTagsNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySmsUserTagsNew  QuerySmsUserTagsNewRequest
  * @return QuerySmsUserTagsNewResponse
 */
async function querySmsUserTagsNew(request: QuerySmsUserTagsNewRequest): QuerySmsUserTagsNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmsUserTagsNew', 'POST', '/', 'json', false, 'json', request);
}

model QueryStandarTemplateCollectionsRequest {
  bizType?: string(name='BizType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  templateContent?: string(name='TemplateContent', position='Query'),
}

model QueryStandarTemplateCollectionsResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryStandarTemplateCollectionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryStandarTemplateCollectionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryStandarTemplateCollections  QueryStandarTemplateCollectionsRequest
  * @return QueryStandarTemplateCollectionsResponse
 */
async function queryStandarTemplateCollections(request: QueryStandarTemplateCollectionsRequest): QueryStandarTemplateCollectionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryStandarTemplateCollections', 'POST', '/', 'json', false, 'json', request);
}

model QueryStandarTemplateCollectionsNewRequest {
  bizType?: string(name='BizType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  templateContent?: string(name='TemplateContent', position='Query'),
}

model QueryStandarTemplateCollectionsNewResponseBody = {
  list?: {
    fcPartnerTemplateDTO?: [ 
    {
      businessType?: int32(name='BusinessType'),
      fcTag?: long(name='FcTag'),
      i18n?: string(name='I18n'),
      id?: long(name='Id'),
      isDeleted?: int32(name='IsDeleted'),
      mcBusinessType?: int32(name='McBusinessType'),
      mcCategory?: int32(name='McCategory'),
      mcSignature?: string(name='McSignature'),
      messageTypeId?: long(name='MessageTypeId'),
      opNick?: string(name='OpNick'),
      partnerId?: long(name='PartnerId'),
      qualificationId?: long(name='QualificationId'),
      remark?: string(name='Remark'),
      signTemplateId?: long(name='SignTemplateId'),
      signType?: int32(name='SignType'),
      sourceId?: string(name='SourceId'),
      speedLevel?: int32(name='SpeedLevel'),
      state?: int32(name='State'),
      templateCode?: string(name='TemplateCode'),
      templateContent?: string(name='TemplateContent'),
      templateId?: long(name='TemplateId'),
      templateName?: string(name='TemplateName'),
      templateParamRule?: string(name='TemplateParamRule'),
      templateSenderType?: int32(name='TemplateSenderType'),
      templateType?: int32(name='TemplateType'),
      totalCountLimit?: long(name='TotalCountLimit'),
      voiceType?: int32(name='VoiceType'),
    }
  ](name='FcPartnerTemplateDTO')
  }(name='List'),
  requestId?: string(name='RequestId'),
}

model QueryStandarTemplateCollectionsNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryStandarTemplateCollectionsNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryStandarTemplateCollectionsNew  QueryStandarTemplateCollectionsNewRequest
  * @return QueryStandarTemplateCollectionsNewResponse
 */
async function queryStandarTemplateCollectionsNew(request: QueryStandarTemplateCollectionsNewRequest): QueryStandarTemplateCollectionsNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryStandarTemplateCollectionsNew', 'POST', '/', 'json', false, 'json', request);
}

model QueryStandardProtocolRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  protocolType: int32(name='ProtocolType', description='This parameter is required.', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryStandardProtocolResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryStandardProtocolResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryStandardProtocolResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryStandardProtocol  QueryStandardProtocolRequest
  * @return QueryStandardProtocolResponse
 */
async function queryStandardProtocol(request: QueryStandardProtocolRequest): QueryStandardProtocolResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryStandardProtocol', 'POST', '/', 'json', false, 'json', request);
}

model QueryStandardProtocolListNewRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  protocolType: int32(name='ProtocolType', description='This parameter is required.', minimum=-2147483648, maximum=2147483647, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryStandardProtocolListNewResponseBody = {
  list?: [ 
    {
      auditOrderId?: string(name='AuditOrderId'),
      corpCode?: string(name='CorpCode'),
      effIpWhiteList?: string(name='EffIpWhiteList'),
      featureCode?: int32(name='FeatureCode'),
      ip?: string(name='Ip'),
      ipAuditStatus?: int32(name='IpAuditStatus'),
      ipWhiteList?: string(name='IpWhiteList'),
      partnerId?: long(name='PartnerId'),
      port?: string(name='Port'),
      profileId?: long(name='ProfileId'),
      protocolType?: int32(name='ProtocolType'),
      protocolTypeStr?: string(name='ProtocolTypeStr'),
      realNameInsId?: long(name='RealNameInsId'),
      resCode?: string(name='ResCode'),
      smsSign?: string(name='SmsSign'),
      smsType?: string(name='SmsType'),
      spCode?: string(name='SpCode'),
      status?: string(name='Status'),
      templateCode?: string(name='TemplateCode'),
      userLimit?: int32(name='UserLimit'),
      userMaxChannel?: int32(name='UserMaxChannel'),
      userName?: string(name='UserName'),
      userPwd?: string(name='UserPwd'),
    }
  ](name='List'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model QueryStandardProtocolListNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryStandardProtocolListNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryStandardProtocolListNew  QueryStandardProtocolListNewRequest
  * @return QueryStandardProtocolListNewResponse
 */
async function queryStandardProtocolListNew(request: QueryStandardProtocolListNewRequest): QueryStandardProtocolListNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryStandardProtocolListNew', 'POST', '/', 'json', false, 'json', request);
}

model QueryTagResourcesRequest {
  category?: string(name='Category', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', position='Query'),
  resourceId?: [ string ](name='ResourceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', description='This parameter is required.', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model QueryTagResourcesResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagResources'),
}

model QueryTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryTagResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryTagResources  QueryTagResourcesRequest
  * @return QueryTagResourcesResponse
 */
async function queryTagResources(request: QueryTagResourcesRequest): QueryTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTagResources', 'POST', '/', 'json', false, 'json', request);
}

model QueryTagResourcesNewRequest {
  category?: string(name='Category', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', position='Query'),
  resourceId?: [ string ](name='ResourceId', position='Query'),
  resourceIdListString?: string(name='ResourceIdListString', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', description='This parameter is required.', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
  tagListString?: string(name='TagListString', position='Query'),
}

model QueryTagResourcesNewResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagResources'),
}

model QueryTagResourcesNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryTagResourcesNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryTagResourcesNew  QueryTagResourcesNewRequest
  * @return QueryTagResourcesNewResponse
 */
async function queryTagResourcesNew(request: QueryTagResourcesNewRequest): QueryTagResourcesNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTagResourcesNew', 'POST', '/', 'json', false, 'json', request);
}

model QueryTmpEffectReportDataRequest {
  endDate: string(name='EndDate', description='This parameter is required.', position='Query'),
  pageNo: long(name='PageNo', description='This parameter is required.', minimum=0, maximum=10000, position='Query'),
  pageSize: long(name='PageSize', description='This parameter is required.', minimum=0, maximum=10000, position='Query'),
  startDate: string(name='StartDate', description='This parameter is required.', position='Query'),
  tmpCode?: string(name='TmpCode', position='Query'),
  tmpName?: string(name='TmpName', position='Query'),
  vendorCode?: string(name='VendorCode', position='Query'),
  vendorName?: string(name='VendorName', position='Query'),
}

model QueryTmpEffectReportDataResponseBody = {
  code?: string(name='Code'),
  model?: {
    pageNo?: long(name='PageNo'),
    pageSize?: long(name='PageSize'),
    records?: [ 
      {
        clickPv?: string(name='ClickPv'),
        clickUv?: string(name='ClickUv'),
        date?: string(name='Date'),
        exposePv?: string(name='ExposePv'),
        exposeUv?: string(name='ExposeUv'),
        id?: long(name='Id'),
        rptSuccessCount?: string(name='RptSuccessCount'),
        tmpCode?: string(name='TmpCode'),
        tmpName?: string(name='TmpName'),
        vendorName?: string(name='VendorName'),
      }
    ](name='Records'),
    totalCount?: long(name='TotalCount'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryTmpEffectReportDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryTmpEffectReportDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryTmpEffectReportData  QueryTmpEffectReportDataRequest
  * @return QueryTmpEffectReportDataResponse
 */
async function queryTmpEffectReportData(request: QueryTmpEffectReportDataRequest): QueryTmpEffectReportDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTmpEffectReportData', 'POST', '/', 'json', false, 'json', request);
}

model QueryTmpEffectReportDayDataRequest {
  endDate: string(name='EndDate', description='This parameter is required.', position='Query'),
  pageNo: long(name='PageNo', description='This parameter is required.', minimum=0, maximum=10000, position='Query'),
  pageSize: long(name='PageSize', description='This parameter is required.', minimum=0, maximum=10000, position='Query'),
  startDate: string(name='StartDate', description='This parameter is required.', position='Query'),
  tmpCode?: string(name='TmpCode', position='Query'),
  tmpName?: string(name='TmpName', position='Query'),
  vendorName?: string(name='VendorName', position='Query'),
}

model QueryTmpEffectReportDayDataResponseBody = {
  code?: string(name='Code'),
  model?: {
    pageNo?: long(name='PageNo'),
    pageSize?: long(name='PageSize'),
    records?: [ 
      {
        clickPv?: string(name='ClickPv'),
        clickUv?: string(name='ClickUv'),
        date?: string(name='Date'),
        exposePv?: string(name='ExposePv'),
        exposeUv?: string(name='ExposeUv'),
        rptSuccessCount?: string(name='RptSuccessCount'),
        tmpCode?: string(name='TmpCode'),
        tmpName?: string(name='TmpName'),
        vendorName?: string(name='VendorName'),
      }
    ](name='Records'),
    totalCount?: long(name='TotalCount'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryTmpEffectReportDayDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryTmpEffectReportDayDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryTmpEffectReportDayData  QueryTmpEffectReportDayDataRequest
  * @return QueryTmpEffectReportDayDataResponse
 */
async function queryTmpEffectReportDayData(request: QueryTmpEffectReportDayDataRequest): QueryTmpEffectReportDayDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTmpEffectReportDayData', 'POST', '/', 'json', false, 'json', request);
}

model QueryUsertagExistenceRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  usertagPosition: int32(name='UsertagPosition', description='This parameter is required.', position='Query'),
}

model QueryUsertagExistenceResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: boolean(name='data'),
}

model QueryUsertagExistenceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryUsertagExistenceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryUsertagExistence  QueryUsertagExistenceRequest
  * @return QueryUsertagExistenceResponse
 */
async function queryUsertagExistence(request: QueryUsertagExistenceRequest): QueryUsertagExistenceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryUsertagExistence', 'POST', '/', 'json', false, 'json', request);
}

model QueryWarningThresholdRequest {
  bizType?: string(name='BizType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryWarningThresholdResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryWarningThresholdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryWarningThresholdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryWarningThreshold  QueryWarningThresholdRequest
  * @return QueryWarningThresholdResponse
 */
async function queryWarningThreshold(request: QueryWarningThresholdRequest): QueryWarningThresholdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryWarningThreshold', 'POST', '/', 'json', false, 'json', request);
}

model QueryWarningThresholdNewRequest {
  bizType?: string(name='BizType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryWarningThresholdNewResponseBody = {
  bizType?: string(name='BizType'),
  contactPhone?: string(name='ContactPhone'),
  dailyHaltLimit?: int32(name='DailyHaltLimit'),
  dailyWarningLimit?: int32(name='DailyWarningLimit'),
  domesticDailySuccess?: long(name='DomesticDailySuccess'),
  domesticDailyTotal?: long(name='DomesticDailyTotal'),
  domesticMonthlySuccess?: long(name='DomesticMonthlySuccess'),
  domesticMonthlyTotal?: long(name='DomesticMonthlyTotal'),
  monthlyHaltLimit?: int32(name='MonthlyHaltLimit'),
  monthlyWarningLimit?: int32(name='MonthlyWarningLimit'),
  outDailySuccess?: long(name='OutDailySuccess'),
  outDailyTotal?: long(name='OutDailyTotal'),
  outMonthlySuccess?: long(name='OutMonthlySuccess'),
  outMonthlyTotal?: long(name='OutMonthlyTotal'),
  prevWaringNotice?: boolean(name='PrevWaringNotice'),
  requestId?: string(name='RequestId'),
}

model QueryWarningThresholdNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryWarningThresholdNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryWarningThresholdNew  QueryWarningThresholdNewRequest
  * @return QueryWarningThresholdNewResponse
 */
async function queryWarningThresholdNew(request: QueryWarningThresholdNewRequest): QueryWarningThresholdNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryWarningThresholdNew', 'POST', '/', 'json', false, 'json', request);
}

model QueryWorkOrdAuditListNewRequest {
  orderId?: string(name='OrderId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryWorkOrdAuditListNewResponseBody = {
  list?: [ 
    {
      auditRemark?: string(name='AuditRemark'),
      auditResult?: string(name='AuditResult'),
      bizType?: string(name='BizType'),
      createDate?: string(name='CreateDate'),
      ordId?: string(name='OrdId'),
      ordStatus?: string(name='OrdStatus'),
      param?: {
        auditInfo?: string(name='AuditInfo'),
        auditRemarkInfo?: {
          rejectDate?: string(name='RejectDate'),
          rejectInfo?: string(name='RejectInfo'),
          rejectSubInfo?: string(name='RejectSubInfo'),
        }(name='AuditRemarkInfo'),
        auditState?: {
          key?: string(name='Key'),
          name?: string(name='Name'),
          value?: int32(name='Value'),
        }(name='AuditState'),
        businessType?: int32(name='BusinessType'),
        extendMessage?: string(name='ExtendMessage'),
        fileIds?: [ long ](name='FileIds'),
        fileUrlList?: [ string ](name='FileUrlList'),
        gmtCreateStr?: string(name='GmtCreateStr'),
        id?: long(name='Id'),
        orderId?: string(name='OrderId'),
        partnerId?: long(name='PartnerId'),
        remark?: string(name='Remark'),
        sceneType?: int32(name='SceneType'),
        signName?: string(name='SignName'),
        signType?: int32(name='SignType'),
      }(name='Param'),
    }
  ](name='List'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model QueryWorkOrdAuditListNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryWorkOrdAuditListNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryWorkOrdAuditListNew  QueryWorkOrdAuditListNewRequest
  * @return QueryWorkOrdAuditListNewResponse
 */
async function queryWorkOrdAuditListNew(request: QueryWorkOrdAuditListNewRequest): QueryWorkOrdAuditListNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryWorkOrdAuditListNew', 'POST', '/', 'json', false, 'json', request);
}

model SaveContactsNewRequest {
  email?: string(name='Email', position='Query'),
  id?: long(name='Id', position='Query'),
  name?: string(name='Name', position='Query'),
  openPkgWarning?: int32(name='OpenPkgWarning', position='Query'),
  openPreventBrushWarning?: int32(name='OpenPreventBrushWarning', position='Query'),
  openSendWarning?: int32(name='OpenSendWarning', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phone?: string(name='Phone', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  receiveSignTemplateAuditResult?: int32(name='ReceiveSignTemplateAuditResult', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  verificationCode?: string(name='VerificationCode', position='Query'),
}

model SaveContactsNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model SaveContactsNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveContactsNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SaveContactsNew  SaveContactsNewRequest
  * @return SaveContactsNewResponse
 */
async function saveContactsNew(request: SaveContactsNewRequest): SaveContactsNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveContactsNew', 'POST', '/', 'json', false, 'json', request);
}

model SaveLearningStatusNewRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  type?: string(name='Type', position='Query'),
  value?: string(name='Value', position='Query'),
}

model SaveLearningStatusNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model SaveLearningStatusNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveLearningStatusNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SaveLearningStatusNew  SaveLearningStatusNewRequest
  * @return SaveLearningStatusNewResponse
 */
async function saveLearningStatusNew(request: SaveLearningStatusNewRequest): SaveLearningStatusNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveLearningStatusNew', 'POST', '/', 'json', false, 'json', request);
}

model SelectTagResourceRequest {
  nextToken?: string(name='NextToken', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType?: string(name='ResourceType', position='Query'),
  tagKey?: string(name='TagKey', position='Query'),
  tagValue?: string(name='TagValue', position='Query'),
  type: string(name='Type', description='This parameter is required.', position='Query'),
}

model SelectTagResourceResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model SelectTagResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SelectTagResourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SelectTagResource  SelectTagResourceRequest
  * @return SelectTagResourceResponse
 */
async function selectTagResource(request: SelectTagResourceRequest): SelectTagResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SelectTagResource', 'POST', '/', 'json', false, 'json', request);
}

model SelectTagResourceNewRequest {
  nextToken?: string(name='NextToken', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType?: string(name='ResourceType', position='Query'),
  tagKey?: string(name='TagKey', position='Query'),
  tagValue?: string(name='TagValue', position='Query'),
  type: string(name='Type', description='This parameter is required.', position='Query'),
}

model SelectTagResourceNewResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tags?: {
    tag?: [ string ](name='Tag')
  }(name='Tags'),
}

model SelectTagResourceNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SelectTagResourceNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SelectTagResourceNew  SelectTagResourceNewRequest
  * @return SelectTagResourceNewResponse
 */
async function selectTagResourceNew(request: SelectTagResourceNewRequest): SelectTagResourceNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SelectTagResourceNew', 'POST', '/', 'json', false, 'json', request);
}

model SendSmsTestRequest {
  ncToken?: string(name='NcToken', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumber: string(name='PhoneNumber', description='This parameter is required.', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  remoteIp?: string(name='RemoteIp', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sessionId?: string(name='SessionId', position='Query'),
  sig?: string(name='Sig', position='Query'),
  signName?: string(name='SignName', position='Query'),
  templateCode?: string(name='TemplateCode', position='Query'),
  templateParam?: string(name='TemplateParam', position='Query'),
  testType?: string(name='TestType', position='Query'),
}

model SendSmsTestResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model SendSmsTestResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendSmsTestResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SendSmsTest  SendSmsTestRequest
  * @return SendSmsTestResponse
 */
async function sendSmsTest(request: SendSmsTestRequest): SendSmsTestResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendSmsTest', 'POST', '/', 'json', false, 'json', request);
}

model SendSmsTestNewRequest {
  ncToken?: string(name='NcToken', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumber: string(name='PhoneNumber', description='This parameter is required.', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  remoteIp?: string(name='RemoteIp', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sessionId?: string(name='SessionId', position='Query'),
  sig?: string(name='Sig', position='Query'),
  signName?: string(name='SignName', position='Query'),
  templateCode?: string(name='TemplateCode', position='Query'),
  templateParam?: string(name='TemplateParam', position='Query'),
  testType?: string(name='TestType', position='Query'),
}

model SendSmsTestNewResponseBody = {
  code?: string(name='Code'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
}

model SendSmsTestNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendSmsTestNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SendSmsTestNew  SendSmsTestNewRequest
  * @return SendSmsTestNewResponse
 */
async function sendSmsTestNew(request: SendSmsTestNewRequest): SendSmsTestNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendSmsTestNew', 'POST', '/', 'json', false, 'json', request);
}

model SendVerificationRequest {
  bizType: string(name='BizType', description='This parameter is required.', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  target?: string(name='Target', position='Query'),
  verifyType: string(name='VerifyType', description='This parameter is required.', position='Query'),
}

model SendVerificationResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model SendVerificationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendVerificationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SendVerification  SendVerificationRequest
  * @return SendVerificationResponse
 */
async function sendVerification(request: SendVerificationRequest): SendVerificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendVerification', 'POST', '/', 'json', false, 'json', request);
}

model SendVerificationNewRequest {
  bizType: string(name='BizType', description='This parameter is required.', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  target?: string(name='Target', position='Query'),
  verifyType: string(name='VerifyType', description='This parameter is required.', position='Query'),
}

model SendVerificationNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model SendVerificationNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendVerificationNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SendVerificationNew  SendVerificationNewRequest
  * @return SendVerificationNewResponse
 */
async function sendVerificationNew(request: SendVerificationNewRequest): SendVerificationNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendVerificationNew', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', position='Query'),
  resourceId: [ string ](name='ResourceId', description='This parameter is required.', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', description='This parameter is required.', position='Query'),
  tag: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', description='This parameter is required.', position='Query'),
}

model TagResourcesResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of TagResources  TagResourcesRequest
  * @return TagResourcesResponse
 */
async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesNewRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', position='Query'),
  resourceId?: [ string ](name='ResourceId', position='Query'),
  resourceIdListString?: string(name='ResourceIdListString', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', description='This parameter is required.', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
  tagListString?: string(name='TagListString', position='Query'),
}

model TagResourcesNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model TagResourcesNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of TagResourcesNew  TagResourcesNewRequest
  * @return TagResourcesNewResponse
 */
async function tagResourcesNew(request: TagResourcesNewRequest): TagResourcesNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResourcesNew', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesSystemTagsRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', position='Query'),
  resourceId: [ string ](name='ResourceId', description='This parameter is required.', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', description='This parameter is required.', position='Query'),
  scope?: string(name='Scope', position='Query'),
  tag: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', description='This parameter is required.', position='Query'),
  tagOwnerUid: long(name='TagOwnerUid', description='This parameter is required.', minimum=0, maximum=999999999999999999, position='Query'),
}

model TagResourcesSystemTagsResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model TagResourcesSystemTagsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesSystemTagsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of TagResourcesSystemTags  TagResourcesSystemTagsRequest
  * @return TagResourcesSystemTagsResponse
 */
async function tagResourcesSystemTags(request: TagResourcesSystemTagsRequest): TagResourcesSystemTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResourcesSystemTags', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', position='Query'),
  resourceId: [ string ](name='ResourceId', description='This parameter is required.', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', description='This parameter is required.', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags', position='Query'),
}

model UntagResourcesResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model UntagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UntagResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UntagResources  UntagResourcesRequest
  * @return UntagResourcesResponse
 */
async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesNewRequest {
  all?: boolean(name='All', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', position='Query'),
  resourceId?: [ string ](name='ResourceId', position='Query'),
  resourceIdListString?: string(name='ResourceIdListString', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', description='This parameter is required.', position='Query'),
  tagListString?: string(name='TagListString', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags', position='Query'),
}

model UntagResourcesNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model UntagResourcesNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UntagResourcesNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UntagResourcesNew  UntagResourcesNewRequest
  * @return UntagResourcesNewResponse
 */
async function untagResourcesNew(request: UntagResourcesNewRequest): UntagResourcesNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResourcesNew', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesSystemTagsRequest {
  all?: boolean(name='All', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', position='Query'),
  resourceId: [ string ](name='ResourceId', description='This parameter is required.', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', description='This parameter is required.', position='Query'),
  tagKey?: [ string ](name='TagKey', position='Query'),
  tagOwnerUid: long(name='TagOwnerUid', description='This parameter is required.', minimum=0, maximum=999999999999999999, position='Query'),
}

model UntagResourcesSystemTagsResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model UntagResourcesSystemTagsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UntagResourcesSystemTagsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UntagResourcesSystemTags  UntagResourcesSystemTagsRequest
  * @return UntagResourcesSystemTagsResponse
 */
async function untagResourcesSystemTags(request: UntagResourcesSystemTagsRequest): UntagResourcesSystemTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResourcesSystemTags', 'POST', '/', 'json', false, 'json', request);
}

model UpdateIpWhiteListNewRequest {
  featureCode: int32(name='FeatureCode', description='This parameter is required.', minimum=-2147483648, maximum=2147483647, position='Query'),
  ipWhiteList: string(name='IpWhiteList', description='This parameter is required.', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  realNameInsId?: long(name='RealNameInsId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  userName?: string(name='UserName', position='Query'),
}

model UpdateIpWhiteListNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model UpdateIpWhiteListNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateIpWhiteListNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateIpWhiteListNew  UpdateIpWhiteListNewRequest
  * @return UpdateIpWhiteListNewResponse
 */
async function updateIpWhiteListNew(request: UpdateIpWhiteListNewRequest): UpdateIpWhiteListNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateIpWhiteListNew', 'POST', '/', 'json', false, 'json', request);
}

model UpdatePartnerTemplateNewRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  templateCode?: string(name='TemplateCode', position='Query'),
  templateName?: string(name='TemplateName', position='Query'),
}

model UpdatePartnerTemplateNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model UpdatePartnerTemplateNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePartnerTemplateNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdatePartnerTemplateNew  UpdatePartnerTemplateNewRequest
  * @return UpdatePartnerTemplateNewResponse
 */
async function updatePartnerTemplateNew(request: UpdatePartnerTemplateNewRequest): UpdatePartnerTemplateNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdatePartnerTemplateNew', 'POST', '/', 'json', false, 'json', request);
}

model UpdateSlsStatusNewRequest {
  authStatus?: boolean(name='AuthStatus', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  saveTime?: int32(name='SaveTime', position='Query'),
}

model UpdateSlsStatusNewResponseBody = {
  authorizeStatus?: boolean(name='AuthorizeStatus'),
  openStatus?: boolean(name='OpenStatus'),
  prodCode?: string(name='ProdCode'),
  requestId?: string(name='RequestId'),
  saveTime?: int32(name='SaveTime'),
  uid?: string(name='Uid'),
}

model UpdateSlsStatusNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSlsStatusNewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateSlsStatusNew  UpdateSlsStatusNewRequest
  * @return UpdateSlsStatusNewResponse
 */
async function updateSlsStatusNew(request: UpdateSlsStatusNewRequest): UpdateSlsStatusNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSlsStatusNew', 'POST', '/', 'json', false, 'json', request);
}

model UploadCardResRequest {
  callerParentId?: string(name='CallerParentId', example='示例值示例值', position='Query'),
  callerType?: string(name='CallerType', example='示例值示例值', position='Query'),
  callerUid?: string(name='CallerUid', example='示例值示例值示例值', position='Query'),
  extendInfo?: string(name='ExtendInfo', example='示例值示例值', position='Query'),
  fileSize?: long(name='FileSize', example='46', position='Query'),
  fileUrl?: string(name='FileUrl', example='示例值', position='Query'),
  memo?: string(name='Memo', example='示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType?: string(name='ResourceType', example='示例值示例值示例值', position='Query'),
}

model UploadCardResResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', example='示例值'),
  message?: string(name='Message', example='示例值示例值示例值'),
  model?: {
    resourceId?: string(name='ResourceId', example='示例值示例值'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='示例值示例值'),
  success?: boolean(name='Success', example='true'),
}

model UploadCardResResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UploadCardResResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UploadCardRes  UploadCardResRequest
  * @return UploadCardResResponse
 */
async function uploadCardRes(request: UploadCardResRequest): UploadCardResResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UploadCardRes', 'POST', '/', 'json', false, 'json', request);
}

model UploadCardResWithDyncParamRequest {
  dynamicParam?: string(name='DynamicParam', example='示例值示例值示例值', position='Query'),
  expiredTimes?: long(name='ExpiredTimes', example='48', position='Query'),
  fileSize?: long(name='FileSize', example='73', position='Query'),
  fileUrl?: string(name='FileUrl', example='示例值示例值示例值', position='Query'),
  memo?: string(name='Memo', example='示例值示例值示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType?: string(name='ResourceType', example='示例值示例值', position='Query'),
  templateCode?: string(name='TemplateCode', example='示例值示例值', position='Query'),
}

model UploadCardResWithDyncParamResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', example='示例值示例值'),
  data?: {
    resourceId?: long(name='ResourceId', example='25'),
  }(name='Data'),
  message?: string(name='Message', example='示例值示例值'),
  requestId?: string(name='RequestId', example='示例值'),
  success?: boolean(name='Success', example='false'),
}

model UploadCardResWithDyncParamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UploadCardResWithDyncParamResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UploadCardResWithDyncParam  UploadCardResWithDyncParamRequest
  * @return UploadCardResWithDyncParamResponse
 */
async function uploadCardResWithDyncParam(request: UploadCardResWithDyncParamRequest): UploadCardResWithDyncParamResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UploadCardResWithDyncParam', 'POST', '/', 'json', false, 'json', request);
}

model ValidatYunSmsIdRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  data: string(name='data', description='This parameter is required.', position='Query'),
}

model ValidatYunSmsIdResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model ValidatYunSmsIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ValidatYunSmsIdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ValidatYunSmsId  ValidatYunSmsIdRequest
  * @return ValidatYunSmsIdResponse
 */
async function validatYunSmsId(request: ValidatYunSmsIdRequest): ValidatYunSmsIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ValidatYunSmsId', 'POST', '/', 'json', false, 'json', request);
}

