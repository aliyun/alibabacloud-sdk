/**
 *
 */
import OpenApi;
import OpenApi.OpenApiUtil;

extends OpenApi;


init(config: OpenApiUtil.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('dysms', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!$isNull(endpoint)) {
    return endpoint;
  }
  
  if (!$isNull(endpointMap) && !$isNull(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return OpenApiUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddDomainRequest {
  domain?: string(name='Domain'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model AddDomainResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model AddDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddDomainResponseBody(name='body'),
}

/**
 * @param request AddDomainRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddDomainResponse
 */
async function addDomainWithOptions(request: AddDomainRequest, runtime: $RuntimeOptions): AddDomainResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'AddDomain',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request AddDomainRequest
 * @return AddDomainResponse
 */
async function addDomain(request: AddDomainRequest): AddDomainResponse {
  var runtime = new $RuntimeOptions{};
  return addDomainWithOptions(request, runtime);
}

model AddDomainNewRequest {
  domain?: string(name='Domain'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model AddDomainNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model AddDomainNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddDomainNewResponseBody(name='body'),
}

/**
 * @param request AddDomainNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddDomainNewResponse
 */
async function addDomainNewWithOptions(request: AddDomainNewRequest, runtime: $RuntimeOptions): AddDomainNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'AddDomainNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request AddDomainNewRequest
 * @return AddDomainNewResponse
 */
async function addDomainNew(request: AddDomainNewRequest): AddDomainNewResponse {
  var runtime = new $RuntimeOptions{};
  return addDomainNewWithOptions(request, runtime);
}

model ApplyExportSmsSendRecordNewRequest {
  bizType?: long(name='BizType'),
  endDate?: string(name='EndDate'),
  errorCode?: string(name='ErrorCode'),
  ownerId?: long(name='OwnerId'),
  phoneNum?: string(name='PhoneNum'),
  prodCode?: string(name='ProdCode'),
  realTimeDataFlag?: int32(name='RealTimeDataFlag'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sendDate?: string(name='SendDate'),
  sendStatus?: long(name='SendStatus'),
  signName?: string(name='SignName'),
  startDate?: string(name='StartDate'),
  templateCode?: string(name='TemplateCode'),
}

model ApplyExportSmsSendRecordNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model ApplyExportSmsSendRecordNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApplyExportSmsSendRecordNewResponseBody(name='body'),
}

/**
 * @param request ApplyExportSmsSendRecordNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ApplyExportSmsSendRecordNewResponse
 */
async function applyExportSmsSendRecordNewWithOptions(request: ApplyExportSmsSendRecordNewRequest, runtime: $RuntimeOptions): ApplyExportSmsSendRecordNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!$isNull(request.endDate)) {
    query['EndDate'] = request.endDate;
  }
  if (!$isNull(request.errorCode)) {
    query['ErrorCode'] = request.errorCode;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.phoneNum)) {
    query['PhoneNum'] = request.phoneNum;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.realTimeDataFlag)) {
    query['RealTimeDataFlag'] = request.realTimeDataFlag;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.sendDate)) {
    query['SendDate'] = request.sendDate;
  }
  if (!$isNull(request.sendStatus)) {
    query['SendStatus'] = request.sendStatus;
  }
  if (!$isNull(request.signName)) {
    query['SignName'] = request.signName;
  }
  if (!$isNull(request.startDate)) {
    query['StartDate'] = request.startDate;
  }
  if (!$isNull(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ApplyExportSmsSendRecordNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request ApplyExportSmsSendRecordNewRequest
 * @return ApplyExportSmsSendRecordNewResponse
 */
async function applyExportSmsSendRecordNew(request: ApplyExportSmsSendRecordNewRequest): ApplyExportSmsSendRecordNewResponse {
  var runtime = new $RuntimeOptions{};
  return applyExportSmsSendRecordNewWithOptions(request, runtime);
}

model BatchCreateSmsSignRequest {
  columnIndexMappingRule?: {
    adminIdentifiedNumber?: int32(name='AdminIdentifiedNumber'),
    adminName?: int32(name='AdminName'),
    companyName?: int32(name='CompanyName'),
    legalPersonIdentifiedNumber?: int32(name='LegalPersonIdentifiedNumber'),
    legalPersonName?: int32(name='LegalPersonName'),
    organizationCode?: int32(name='OrganizationCode'),
    remark?: int32(name='Remark'),
    sceneDescription?: int32(name='SceneDescription'),
    signatureName?: int32(name='SignatureName'),
    signatureSource?: int32(name='SignatureSource'),
    templateContent?: int32(name='TemplateContent'),
  }(name='ColumnIndexMappingRule'),
  extendMessage?: string(name='ExtendMessage'),
  fileName?: string(name='FileName'),
  moreData?: [ string ](name='MoreData'),
  operationType?: int32(name='OperationType'),
  ossKeys?: string(name='OssKeys'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  remark?: string(name='Remark'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sceneType?: int32(name='SceneType', description='This parameter is required.'),
  serviceType?: int32(name='ServiceType'),
  signOssKey?: string(name='SignOssKey', description='This parameter is required.'),
  userViewFileName?: string(name='UserViewFileName'),
}

model BatchCreateSmsSignShrinkRequest {
  columnIndexMappingRuleShrink?: string(name='ColumnIndexMappingRule'),
  extendMessage?: string(name='ExtendMessage'),
  fileName?: string(name='FileName'),
  moreDataShrink?: string(name='MoreData'),
  operationType?: int32(name='OperationType'),
  ossKeys?: string(name='OssKeys'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  remark?: string(name='Remark'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sceneType?: int32(name='SceneType', description='This parameter is required.'),
  serviceType?: int32(name='ServiceType'),
  signOssKey?: string(name='SignOssKey', description='This parameter is required.'),
  userViewFileName?: string(name='UserViewFileName'),
}

model BatchCreateSmsSignResponseBody = {
  code?: string(name='Code'),
  data?: {
    appliedNum?: int32(name='AppliedNum'),
    availableNum?: int32(name='AvailableNum'),
    batchCreateSmsSignResult?: string(name='BatchCreateSmsSignResult'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BatchCreateSmsSignResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchCreateSmsSignResponseBody(name='body'),
}

/**
 * @summary 批量创建签名
 *
 * @param tmpReq BatchCreateSmsSignRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BatchCreateSmsSignResponse
 */
async function batchCreateSmsSignWithOptions(tmpReq: BatchCreateSmsSignRequest, runtime: $RuntimeOptions): BatchCreateSmsSignResponse {
  tmpReq.validate();
  var request = new BatchCreateSmsSignShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.columnIndexMappingRule)) {
    request.columnIndexMappingRuleShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.columnIndexMappingRule, 'ColumnIndexMappingRule', 'json');
  }
  if (!$isNull(tmpReq.moreData)) {
    request.moreDataShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.moreData, 'MoreData', 'json');
  }
  var query = {};
  if (!$isNull(request.columnIndexMappingRuleShrink)) {
    query['ColumnIndexMappingRule'] = request.columnIndexMappingRuleShrink;
  }
  if (!$isNull(request.extendMessage)) {
    query['ExtendMessage'] = request.extendMessage;
  }
  if (!$isNull(request.fileName)) {
    query['FileName'] = request.fileName;
  }
  if (!$isNull(request.moreDataShrink)) {
    query['MoreData'] = request.moreDataShrink;
  }
  if (!$isNull(request.operationType)) {
    query['OperationType'] = request.operationType;
  }
  if (!$isNull(request.ossKeys)) {
    query['OssKeys'] = request.ossKeys;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.sceneType)) {
    query['SceneType'] = request.sceneType;
  }
  if (!$isNull(request.serviceType)) {
    query['ServiceType'] = request.serviceType;
  }
  if (!$isNull(request.signOssKey)) {
    query['SignOssKey'] = request.signOssKey;
  }
  if (!$isNull(request.userViewFileName)) {
    query['UserViewFileName'] = request.userViewFileName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'BatchCreateSmsSign',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 批量创建签名
 *
 * @param request BatchCreateSmsSignRequest
 * @return BatchCreateSmsSignResponse
 */
async function batchCreateSmsSign(request: BatchCreateSmsSignRequest): BatchCreateSmsSignResponse {
  var runtime = new $RuntimeOptions{};
  return batchCreateSmsSignWithOptions(request, runtime);
}

model BatchDeleteExportSendRecordNewRequest {
  ids?: string(name='Ids'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model BatchDeleteExportSendRecordNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model BatchDeleteExportSendRecordNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchDeleteExportSendRecordNewResponseBody(name='body'),
}

/**
 * @param request BatchDeleteExportSendRecordNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BatchDeleteExportSendRecordNewResponse
 */
async function batchDeleteExportSendRecordNewWithOptions(request: BatchDeleteExportSendRecordNewRequest, runtime: $RuntimeOptions): BatchDeleteExportSendRecordNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ids)) {
    query['Ids'] = request.ids;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'BatchDeleteExportSendRecordNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request BatchDeleteExportSendRecordNewRequest
 * @return BatchDeleteExportSendRecordNewResponse
 */
async function batchDeleteExportSendRecordNew(request: BatchDeleteExportSendRecordNewRequest): BatchDeleteExportSendRecordNewResponse {
  var runtime = new $RuntimeOptions{};
  return batchDeleteExportSendRecordNewWithOptions(request, runtime);
}

model BatchDeleteTaskNewRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  taskIds?: string(name='TaskIds', description='This parameter is required.'),
}

model BatchDeleteTaskNewResponseBody = {
  failList?: [ string ](name='FailList'),
  requestId?: string(name='RequestId'),
  successList?: [ string ](name='SuccessList'),
}

model BatchDeleteTaskNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchDeleteTaskNewResponseBody(name='body'),
}

/**
 * @param request BatchDeleteTaskNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BatchDeleteTaskNewResponse
 */
async function batchDeleteTaskNewWithOptions(request: BatchDeleteTaskNewRequest, runtime: $RuntimeOptions): BatchDeleteTaskNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.taskIds)) {
    query['TaskIds'] = request.taskIds;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'BatchDeleteTaskNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request BatchDeleteTaskNewRequest
 * @return BatchDeleteTaskNewResponse
 */
async function batchDeleteTaskNew(request: BatchDeleteTaskNewRequest): BatchDeleteTaskNewResponse {
  var runtime = new $RuntimeOptions{};
  return batchDeleteTaskNewWithOptions(request, runtime);
}

model CalculateSmsLengthNewRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smsContent?: string(name='SmsContent'),
}

model CalculateSmsLengthNewResponseBody = {
  length?: int32(name='Length'),
  number?: int32(name='Number'),
  requestId?: string(name='RequestId'),
}

model CalculateSmsLengthNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CalculateSmsLengthNewResponseBody(name='body'),
}

/**
 * @param request CalculateSmsLengthNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CalculateSmsLengthNewResponse
 */
async function calculateSmsLengthNewWithOptions(request: CalculateSmsLengthNewRequest, runtime: $RuntimeOptions): CalculateSmsLengthNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.smsContent)) {
    query['SmsContent'] = request.smsContent;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CalculateSmsLengthNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request CalculateSmsLengthNewRequest
 * @return CalculateSmsLengthNewResponse
 */
async function calculateSmsLengthNew(request: CalculateSmsLengthNewRequest): CalculateSmsLengthNewResponse {
  var runtime = new $RuntimeOptions{};
  return calculateSmsLengthNewWithOptions(request, runtime);
}

model CancelSmsSignRequest {
  orderId?: string(name='OrderId'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  qualificationId?: long(name='QualificationId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  signatureCode?: string(name='SignatureCode'),
  signatureId?: long(name='SignatureId'),
}

model CancelSmsSignResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model CancelSmsSignResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelSmsSignResponseBody(name='body'),
}

/**
 * @summary 签名取消审核
 *
 * @param request CancelSmsSignRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CancelSmsSignResponse
 */
async function cancelSmsSignWithOptions(request: CancelSmsSignRequest, runtime: $RuntimeOptions): CancelSmsSignResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.qualificationId)) {
    query['QualificationId'] = request.qualificationId;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.signatureCode)) {
    query['SignatureCode'] = request.signatureCode;
  }
  if (!$isNull(request.signatureId)) {
    query['SignatureId'] = request.signatureId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CancelSmsSign',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 签名取消审核
 *
 * @param request CancelSmsSignRequest
 * @return CancelSmsSignResponse
 */
async function cancelSmsSign(request: CancelSmsSignRequest): CancelSmsSignResponse {
  var runtime = new $RuntimeOptions{};
  return cancelSmsSignWithOptions(request, runtime);
}

model CancelSmsTemplateRequest {
  orderId?: long(name='OrderId'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateCode?: string(name='TemplateCode'),
}

model CancelSmsTemplateResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model CancelSmsTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelSmsTemplateResponseBody(name='body'),
}

/**
 * @param request CancelSmsTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CancelSmsTemplateResponse
 */
async function cancelSmsTemplateWithOptions(request: CancelSmsTemplateRequest, runtime: $RuntimeOptions): CancelSmsTemplateResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CancelSmsTemplate',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request CancelSmsTemplateRequest
 * @return CancelSmsTemplateResponse
 */
async function cancelSmsTemplate(request: CancelSmsTemplateRequest): CancelSmsTemplateResponse {
  var runtime = new $RuntimeOptions{};
  return cancelSmsTemplateWithOptions(request, runtime);
}

model CancelSmsTemplateNewRequest {
  intelligentApproval?: boolean(name='IntelligentApproval'),
  orderId?: long(name='OrderId'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateCode?: string(name='TemplateCode'),
}

model CancelSmsTemplateNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model CancelSmsTemplateNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelSmsTemplateNewResponseBody(name='body'),
}

/**
 * @param request CancelSmsTemplateNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CancelSmsTemplateNewResponse
 */
async function cancelSmsTemplateNewWithOptions(request: CancelSmsTemplateNewRequest, runtime: $RuntimeOptions): CancelSmsTemplateNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.intelligentApproval)) {
    query['IntelligentApproval'] = request.intelligentApproval;
  }
  if (!$isNull(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CancelSmsTemplateNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request CancelSmsTemplateNewRequest
 * @return CancelSmsTemplateNewResponse
 */
async function cancelSmsTemplateNew(request: CancelSmsTemplateNewRequest): CancelSmsTemplateNewResponse {
  var runtime = new $RuntimeOptions{};
  return cancelSmsTemplateNewWithOptions(request, runtime);
}

model CheckSmsSignNewRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CheckSmsSignNewResponseBody = {
  common?: boolean(name='Common'),
  requestId?: string(name='RequestId'),
  verification?: boolean(name='Verification'),
}

model CheckSmsSignNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckSmsSignNewResponseBody(name='body'),
}

/**
 * @param request CheckSmsSignNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CheckSmsSignNewResponse
 */
async function checkSmsSignNewWithOptions(request: CheckSmsSignNewRequest, runtime: $RuntimeOptions): CheckSmsSignNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CheckSmsSignNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request CheckSmsSignNewRequest
 * @return CheckSmsSignNewResponse
 */
async function checkSmsSignNew(request: CheckSmsSignNewRequest): CheckSmsSignNewResponse {
  var runtime = new $RuntimeOptions{};
  return checkSmsSignNewWithOptions(request, runtime);
}

model CreateAlicomProductRequest {
  busOffer?: long(name='BusOffer'),
  busOffers?: string(name='BusOffers'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  prodId?: string(name='ProdId', description='This parameter is required.'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreateAlicomProductResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model CreateAlicomProductResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAlicomProductResponseBody(name='body'),
}

/**
 * @param request CreateAlicomProductRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateAlicomProductResponse
 */
async function createAlicomProductWithOptions(request: CreateAlicomProductRequest, runtime: $RuntimeOptions): CreateAlicomProductResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.busOffer)) {
    query['BusOffer'] = request.busOffer;
  }
  if (!$isNull(request.busOffers)) {
    query['BusOffers'] = request.busOffers;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.prodId)) {
    query['ProdId'] = request.prodId;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateAlicomProduct',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request CreateAlicomProductRequest
 * @return CreateAlicomProductResponse
 */
async function createAlicomProduct(request: CreateAlicomProductRequest): CreateAlicomProductResponse {
  var runtime = new $RuntimeOptions{};
  return createAlicomProductWithOptions(request, runtime);
}

model CreateAuthorizationRequest {
  authorizeCode?: string(name='AuthorizeCode'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreateAuthorizationResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model CreateAuthorizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAuthorizationResponseBody(name='body'),
}

/**
 * @summary 创建授权
 *
 * @param request CreateAuthorizationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateAuthorizationResponse
 */
async function createAuthorizationWithOptions(request: CreateAuthorizationRequest, runtime: $RuntimeOptions): CreateAuthorizationResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.authorizeCode)) {
    query['AuthorizeCode'] = request.authorizeCode;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateAuthorization',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建授权
 *
 * @param request CreateAuthorizationRequest
 * @return CreateAuthorizationResponse
 */
async function createAuthorization(request: CreateAuthorizationRequest): CreateAuthorizationResponse {
  var runtime = new $RuntimeOptions{};
  return createAuthorizationWithOptions(request, runtime);
}

model CreateCardMessageCallbackRequest {
  bizType?: string(name='BizType', description='This parameter is required.'),
  callbackUrl?: string(name='CallbackUrl', description='This parameter is required.'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreateCardMessageCallbackResponseBody = {
  requestId?: string(name='RequestId'),
  testFailCode?: string(name='TestFailCode'),
  testResponse?: string(name='TestResponse'),
  testSuccess?: boolean(name='TestSuccess'),
}

model CreateCardMessageCallbackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCardMessageCallbackResponseBody(name='body'),
}

/**
 * @summary 创建消息回调
 *
 * @param request CreateCardMessageCallbackRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateCardMessageCallbackResponse
 */
async function createCardMessageCallbackWithOptions(request: CreateCardMessageCallbackRequest, runtime: $RuntimeOptions): CreateCardMessageCallbackResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!$isNull(request.callbackUrl)) {
    query['CallbackUrl'] = request.callbackUrl;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateCardMessageCallback',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建消息回调
 *
 * @param request CreateCardMessageCallbackRequest
 * @return CreateCardMessageCallbackResponse
 */
async function createCardMessageCallback(request: CreateCardMessageCallbackRequest): CreateCardMessageCallbackResponse {
  var runtime = new $RuntimeOptions{};
  return createCardMessageCallbackWithOptions(request, runtime);
}

model CreateCardMessageQueueRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  queueType?: string(name='QueueType', description='This parameter is required.'),
  region?: string(name='Region'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreateCardMessageQueueResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model CreateCardMessageQueueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCardMessageQueueResponseBody(name='body'),
}

/**
 * @summary 创建mns
 *
 * @param request CreateCardMessageQueueRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateCardMessageQueueResponse
 */
async function createCardMessageQueueWithOptions(request: CreateCardMessageQueueRequest, runtime: $RuntimeOptions): CreateCardMessageQueueResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.queueType)) {
    query['QueueType'] = request.queueType;
  }
  if (!$isNull(request.region)) {
    query['Region'] = request.region;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateCardMessageQueue',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建mns
 *
 * @param request CreateCardMessageQueueRequest
 * @return CreateCardMessageQueueResponse
 */
async function createCardMessageQueue(request: CreateCardMessageQueueRequest): CreateCardMessageQueueResponse {
  var runtime = new $RuntimeOptions{};
  return createCardMessageQueueWithOptions(request, runtime);
}

model CreateDigitalSmsTemplateNewRequest {
  bizType?: string(name='BizType'),
  contentOssKeys?: string(name='ContentOssKeys'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  remark?: string(name='Remark'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateContent?: string(name='TemplateContent'),
  templateName?: string(name='TemplateName'),
}

model CreateDigitalSmsTemplateNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model CreateDigitalSmsTemplateNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDigitalSmsTemplateNewResponseBody(name='body'),
}

/**
 * @param request CreateDigitalSmsTemplateNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDigitalSmsTemplateNewResponse
 */
async function createDigitalSmsTemplateNewWithOptions(request: CreateDigitalSmsTemplateNewRequest, runtime: $RuntimeOptions): CreateDigitalSmsTemplateNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!$isNull(request.contentOssKeys)) {
    query['ContentOssKeys'] = request.contentOssKeys;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.templateContent)) {
    query['TemplateContent'] = request.templateContent;
  }
  if (!$isNull(request.templateName)) {
    query['TemplateName'] = request.templateName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateDigitalSmsTemplateNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request CreateDigitalSmsTemplateNewRequest
 * @return CreateDigitalSmsTemplateNewResponse
 */
async function createDigitalSmsTemplateNew(request: CreateDigitalSmsTemplateNewRequest): CreateDigitalSmsTemplateNewResponse {
  var runtime = new $RuntimeOptions{};
  return createDigitalSmsTemplateNewWithOptions(request, runtime);
}

model CreateFileByBizRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreateFileByBizResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model CreateFileByBizResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFileByBizResponseBody(name='body'),
}

/**
 * @deprecated OpenAPI CreateFileByBiz is deprecated
 *
 * @param request CreateFileByBizRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateFileByBizResponse
 */
// Deprecated
async function createFileByBizWithOptions(request: CreateFileByBizRequest, runtime: $RuntimeOptions): CreateFileByBizResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateFileByBiz',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @deprecated OpenAPI CreateFileByBiz is deprecated
 *
 * @param request CreateFileByBizRequest
 * @return CreateFileByBizResponse
 */
// Deprecated
async function createFileByBiz(request: CreateFileByBizRequest): CreateFileByBizResponse {
  var runtime = new $RuntimeOptions{};
  return createFileByBizWithOptions(request, runtime);
}

model CreateFlowLimitRequest {
  dailyLimit?: string(name='DailyLimit'),
  hourLimit?: string(name='HourLimit'),
  minuteLimit?: string(name='MinuteLimit'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreateFlowLimitResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model CreateFlowLimitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFlowLimitResponseBody(name='body'),
}

/**
 * @param request CreateFlowLimitRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateFlowLimitResponse
 */
async function createFlowLimitWithOptions(request: CreateFlowLimitRequest, runtime: $RuntimeOptions): CreateFlowLimitResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.dailyLimit)) {
    query['DailyLimit'] = request.dailyLimit;
  }
  if (!$isNull(request.hourLimit)) {
    query['HourLimit'] = request.hourLimit;
  }
  if (!$isNull(request.minuteLimit)) {
    query['MinuteLimit'] = request.minuteLimit;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateFlowLimit',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request CreateFlowLimitRequest
 * @return CreateFlowLimitResponse
 */
async function createFlowLimit(request: CreateFlowLimitRequest): CreateFlowLimitResponse {
  var runtime = new $RuntimeOptions{};
  return createFlowLimitWithOptions(request, runtime);
}

model CreateFlowLimitNewRequest {
  bizType?: string(name='BizType'),
  dailyLimit?: string(name='DailyLimit'),
  hourLimit?: string(name='HourLimit'),
  minuteLimit?: string(name='MinuteLimit'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreateFlowLimitNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model CreateFlowLimitNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFlowLimitNewResponseBody(name='body'),
}

/**
 * @param request CreateFlowLimitNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateFlowLimitNewResponse
 */
async function createFlowLimitNewWithOptions(request: CreateFlowLimitNewRequest, runtime: $RuntimeOptions): CreateFlowLimitNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!$isNull(request.dailyLimit)) {
    query['DailyLimit'] = request.dailyLimit;
  }
  if (!$isNull(request.hourLimit)) {
    query['HourLimit'] = request.hourLimit;
  }
  if (!$isNull(request.minuteLimit)) {
    query['MinuteLimit'] = request.minuteLimit;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateFlowLimitNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request CreateFlowLimitNewRequest
 * @return CreateFlowLimitNewResponse
 */
async function createFlowLimitNew(request: CreateFlowLimitNewRequest): CreateFlowLimitNewResponse {
  var runtime = new $RuntimeOptions{};
  return createFlowLimitNewWithOptions(request, runtime);
}

model CreateMessageCallbackNewRequest {
  bizType?: string(name='BizType', description='This parameter is required.'),
  callbackUrl?: string(name='CallbackUrl', description='This parameter is required.'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreateMessageCallbackNewResponseBody = {
  requestId?: string(name='RequestId'),
  testFailCode?: string(name='TestFailCode'),
  testResponse?: string(name='TestResponse'),
  testSuccess?: boolean(name='TestSuccess'),
}

model CreateMessageCallbackNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMessageCallbackNewResponseBody(name='body'),
}

/**
 * @param request CreateMessageCallbackNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateMessageCallbackNewResponse
 */
async function createMessageCallbackNewWithOptions(request: CreateMessageCallbackNewRequest, runtime: $RuntimeOptions): CreateMessageCallbackNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!$isNull(request.callbackUrl)) {
    query['CallbackUrl'] = request.callbackUrl;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateMessageCallbackNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request CreateMessageCallbackNewRequest
 * @return CreateMessageCallbackNewResponse
 */
async function createMessageCallbackNew(request: CreateMessageCallbackNewRequest): CreateMessageCallbackNewResponse {
  var runtime = new $RuntimeOptions{};
  return createMessageCallbackNewWithOptions(request, runtime);
}

model CreateMessageCallbackTestNewRequest {
  bizType?: string(name='BizType'),
  content?: string(name='Content'),
  method?: string(name='Method'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  url?: string(name='Url'),
}

model CreateMessageCallbackTestNewResponseBody = {
  requestId?: string(name='RequestId'),
  testFailCode?: string(name='TestFailCode'),
  testResponse?: string(name='TestResponse'),
  testSuccess?: boolean(name='TestSuccess'),
}

model CreateMessageCallbackTestNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMessageCallbackTestNewResponseBody(name='body'),
}

/**
 * @param request CreateMessageCallbackTestNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateMessageCallbackTestNewResponse
 */
async function createMessageCallbackTestNewWithOptions(request: CreateMessageCallbackTestNewRequest, runtime: $RuntimeOptions): CreateMessageCallbackTestNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!$isNull(request.content)) {
    query['Content'] = request.content;
  }
  if (!$isNull(request.method)) {
    query['Method'] = request.method;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateMessageCallbackTestNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request CreateMessageCallbackTestNewRequest
 * @return CreateMessageCallbackTestNewResponse
 */
async function createMessageCallbackTestNew(request: CreateMessageCallbackTestNewRequest): CreateMessageCallbackTestNewResponse {
  var runtime = new $RuntimeOptions{};
  return createMessageCallbackTestNewWithOptions(request, runtime);
}

model CreateMessageQueueNewRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  queueType?: string(name='QueueType'),
  region?: string(name='Region'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreateMessageQueueNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model CreateMessageQueueNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMessageQueueNewResponseBody(name='body'),
}

/**
 * @param request CreateMessageQueueNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateMessageQueueNewResponse
 */
async function createMessageQueueNewWithOptions(request: CreateMessageQueueNewRequest, runtime: $RuntimeOptions): CreateMessageQueueNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.queueType)) {
    query['QueueType'] = request.queueType;
  }
  if (!$isNull(request.region)) {
    query['Region'] = request.region;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateMessageQueueNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request CreateMessageQueueNewRequest
 * @return CreateMessageQueueNewResponse
 */
async function createMessageQueueNew(request: CreateMessageQueueNewRequest): CreateMessageQueueNewResponse {
  var runtime = new $RuntimeOptions{};
  return createMessageQueueNewWithOptions(request, runtime);
}

model CreatePhoneWhiteListRequest {
  ownerId?: long(name='OwnerId'),
  phoneNumbers?: string(name='PhoneNumbers'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreatePhoneWhiteListResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model CreatePhoneWhiteListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePhoneWhiteListResponseBody(name='body'),
}

/**
 * @param request CreatePhoneWhiteListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreatePhoneWhiteListResponse
 */
async function createPhoneWhiteListWithOptions(request: CreatePhoneWhiteListRequest, runtime: $RuntimeOptions): CreatePhoneWhiteListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.phoneNumbers)) {
    query['PhoneNumbers'] = request.phoneNumbers;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreatePhoneWhiteList',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request CreatePhoneWhiteListRequest
 * @return CreatePhoneWhiteListResponse
 */
async function createPhoneWhiteList(request: CreatePhoneWhiteListRequest): CreatePhoneWhiteListResponse {
  var runtime = new $RuntimeOptions{};
  return createPhoneWhiteListWithOptions(request, runtime);
}

model CreatePhoneWhiteListNewRequest {
  ownerId?: long(name='OwnerId'),
  phoneNumbers?: string(name='PhoneNumbers'),
  prodCode?: string(name='ProdCode'),
  remarks?: [ string ](name='Remarks'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreatePhoneWhiteListNewShrinkRequest {
  ownerId?: long(name='OwnerId'),
  phoneNumbers?: string(name='PhoneNumbers'),
  prodCode?: string(name='ProdCode'),
  remarksShrink?: string(name='Remarks'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreatePhoneWhiteListNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model CreatePhoneWhiteListNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePhoneWhiteListNewResponseBody(name='body'),
}

/**
 * @param tmpReq CreatePhoneWhiteListNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreatePhoneWhiteListNewResponse
 */
async function createPhoneWhiteListNewWithOptions(tmpReq: CreatePhoneWhiteListNewRequest, runtime: $RuntimeOptions): CreatePhoneWhiteListNewResponse {
  tmpReq.validate();
  var request = new CreatePhoneWhiteListNewShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.remarks)) {
    request.remarksShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.remarks, 'Remarks', 'json');
  }
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.phoneNumbers)) {
    query['PhoneNumbers'] = request.phoneNumbers;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.remarksShrink)) {
    query['Remarks'] = request.remarksShrink;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreatePhoneWhiteListNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request CreatePhoneWhiteListNewRequest
 * @return CreatePhoneWhiteListNewResponse
 */
async function createPhoneWhiteListNew(request: CreatePhoneWhiteListNewRequest): CreatePhoneWhiteListNewResponse {
  var runtime = new $RuntimeOptions{};
  return createPhoneWhiteListNewWithOptions(request, runtime);
}

model CreatePkgThresholdRequest {
  ownerId?: long(name='OwnerId'),
  packageWarningLimit?: string(name='PackageWarningLimit'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreatePkgThresholdResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model CreatePkgThresholdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePkgThresholdResponseBody(name='body'),
}

/**
 * @param request CreatePkgThresholdRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreatePkgThresholdResponse
 */
async function createPkgThresholdWithOptions(request: CreatePkgThresholdRequest, runtime: $RuntimeOptions): CreatePkgThresholdResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.packageWarningLimit)) {
    query['PackageWarningLimit'] = request.packageWarningLimit;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreatePkgThreshold',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request CreatePkgThresholdRequest
 * @return CreatePkgThresholdResponse
 */
async function createPkgThreshold(request: CreatePkgThresholdRequest): CreatePkgThresholdResponse {
  var runtime = new $RuntimeOptions{};
  return createPkgThresholdWithOptions(request, runtime);
}

model CreatePkgThresholdNewRequest {
  ownerId?: long(name='OwnerId'),
  packageWarningLimit?: string(name='PackageWarningLimit'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreatePkgThresholdNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model CreatePkgThresholdNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePkgThresholdNewResponseBody(name='body'),
}

/**
 * @param request CreatePkgThresholdNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreatePkgThresholdNewResponse
 */
async function createPkgThresholdNewWithOptions(request: CreatePkgThresholdNewRequest, runtime: $RuntimeOptions): CreatePkgThresholdNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.packageWarningLimit)) {
    query['PackageWarningLimit'] = request.packageWarningLimit;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreatePkgThresholdNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request CreatePkgThresholdNewRequest
 * @return CreatePkgThresholdNewResponse
 */
async function createPkgThresholdNew(request: CreatePkgThresholdNewRequest): CreatePkgThresholdNewResponse {
  var runtime = new $RuntimeOptions{};
  return createPkgThresholdNewWithOptions(request, runtime);
}

model CreatePrevLimitNewRequest {
  hourLimit?: long(name='HourLimit', description='This parameter is required.'),
  increaseRate?: int32(name='IncreaseRate', description='This parameter is required.'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  successRate?: int32(name='SuccessRate', description='This parameter is required.'),
}

model CreatePrevLimitNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model CreatePrevLimitNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePrevLimitNewResponseBody(name='body'),
}

/**
 * @param request CreatePrevLimitNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreatePrevLimitNewResponse
 */
async function createPrevLimitNewWithOptions(request: CreatePrevLimitNewRequest, runtime: $RuntimeOptions): CreatePrevLimitNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.hourLimit)) {
    query['HourLimit'] = request.hourLimit;
  }
  if (!$isNull(request.increaseRate)) {
    query['IncreaseRate'] = request.increaseRate;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.successRate)) {
    query['SuccessRate'] = request.successRate;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreatePrevLimitNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request CreatePrevLimitNewRequest
 * @return CreatePrevLimitNewResponse
 */
async function createPrevLimitNew(request: CreatePrevLimitNewRequest): CreatePrevLimitNewResponse {
  var runtime = new $RuntimeOptions{};
  return createPrevLimitNewWithOptions(request, runtime);
}

model CreateProductRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  prodId?: string(name='ProdId', description='This parameter is required.'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreateProductResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: boolean(name='data'),
}

model CreateProductResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateProductResponseBody(name='body'),
}

/**
 * @param request CreateProductRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateProductResponse
 */
async function createProductWithOptions(request: CreateProductRequest, runtime: $RuntimeOptions): CreateProductResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.prodId)) {
    query['ProdId'] = request.prodId;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateProduct',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request CreateProductRequest
 * @return CreateProductResponse
 */
async function createProduct(request: CreateProductRequest): CreateProductResponse {
  var runtime = new $RuntimeOptions{};
  return createProductWithOptions(request, runtime);
}

model CreateProductNewRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  prodId?: string(name='ProdId', description='This parameter is required.'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreateProductNewResponseBody = {
  openResult?: boolean(name='OpenResult'),
  requestId?: string(name='RequestId'),
}

model CreateProductNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateProductNewResponseBody(name='body'),
}

/**
 * @param request CreateProductNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateProductNewResponse
 */
async function createProductNewWithOptions(request: CreateProductNewRequest, runtime: $RuntimeOptions): CreateProductNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.prodId)) {
    query['ProdId'] = request.prodId;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateProductNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request CreateProductNewRequest
 * @return CreateProductNewResponse
 */
async function createProductNew(request: CreateProductNewRequest): CreateProductNewResponse {
  var runtime = new $RuntimeOptions{};
  return createProductNewWithOptions(request, runtime);
}

model CreateShortUrlNewRequest {
  effectDay?: int32(name='EffectDay'),
  eventName?: string(name='EventName'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceUrl?: string(name='SourceUrl'),
}

model CreateShortUrlNewResponseBody = {
  eventName?: string(name='EventName'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtInvalidTime?: string(name='GmtInvalidTime'),
  id?: string(name='Id'),
  requestId?: string(name='RequestId'),
  shortUrl?: string(name='ShortUrl'),
  sourceUrl?: string(name='SourceUrl'),
}

model CreateShortUrlNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateShortUrlNewResponseBody(name='body'),
}

/**
 * @param request CreateShortUrlNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateShortUrlNewResponse
 */
async function createShortUrlNewWithOptions(request: CreateShortUrlNewRequest, runtime: $RuntimeOptions): CreateShortUrlNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.effectDay)) {
    query['EffectDay'] = request.effectDay;
  }
  if (!$isNull(request.eventName)) {
    query['EventName'] = request.eventName;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.sourceUrl)) {
    query['SourceUrl'] = request.sourceUrl;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateShortUrlNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request CreateShortUrlNewRequest
 * @return CreateShortUrlNewResponse
 */
async function createShortUrlNew(request: CreateShortUrlNewRequest): CreateShortUrlNewResponse {
  var runtime = new $RuntimeOptions{};
  return createShortUrlNewWithOptions(request, runtime);
}

model CreateSmsDetectTaskNewRequest {
  check?: boolean(name='Check', description='This parameter is required.'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  signName?: string(name='SignName', description='This parameter is required.'),
  smsContent?: string(name='SmsContent', description='This parameter is required.'),
  templateCode?: string(name='TemplateCode', description='This parameter is required.'),
  templateParam?: string(name='TemplateParam', description='This parameter is required.'),
}

model CreateSmsDetectTaskNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model CreateSmsDetectTaskNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSmsDetectTaskNewResponseBody(name='body'),
}

/**
 * @param request CreateSmsDetectTaskNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateSmsDetectTaskNewResponse
 */
async function createSmsDetectTaskNewWithOptions(request: CreateSmsDetectTaskNewRequest, runtime: $RuntimeOptions): CreateSmsDetectTaskNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.check)) {
    query['Check'] = request.check;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.signName)) {
    query['SignName'] = request.signName;
  }
  if (!$isNull(request.smsContent)) {
    query['SmsContent'] = request.smsContent;
  }
  if (!$isNull(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  if (!$isNull(request.templateParam)) {
    query['TemplateParam'] = request.templateParam;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateSmsDetectTaskNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request CreateSmsDetectTaskNewRequest
 * @return CreateSmsDetectTaskNewResponse
 */
async function createSmsDetectTaskNew(request: CreateSmsDetectTaskNewRequest): CreateSmsDetectTaskNewResponse {
  var runtime = new $RuntimeOptions{};
  return createSmsDetectTaskNewWithOptions(request, runtime);
}

model CreateSmsInternalApplyRequest {
  appDownloadLink?: string(name='AppDownloadLink'),
  country?: string(name='Country'),
  industry?: string(name='Industry'),
  ownerId?: long(name='OwnerId'),
  pageLink?: string(name='PageLink'),
  prodCode?: string(name='ProdCode'),
  remark?: string(name='Remark'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateName?: string(name='TemplateName'),
}

model CreateSmsInternalApplyResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model CreateSmsInternalApplyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSmsInternalApplyResponseBody(name='body'),
}

/**
 * @param request CreateSmsInternalApplyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateSmsInternalApplyResponse
 */
async function createSmsInternalApplyWithOptions(request: CreateSmsInternalApplyRequest, runtime: $RuntimeOptions): CreateSmsInternalApplyResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.appDownloadLink)) {
    query['AppDownloadLink'] = request.appDownloadLink;
  }
  if (!$isNull(request.country)) {
    query['Country'] = request.country;
  }
  if (!$isNull(request.industry)) {
    query['Industry'] = request.industry;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.pageLink)) {
    query['PageLink'] = request.pageLink;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.templateName)) {
    query['TemplateName'] = request.templateName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateSmsInternalApply',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request CreateSmsInternalApplyRequest
 * @return CreateSmsInternalApplyResponse
 */
async function createSmsInternalApply(request: CreateSmsInternalApplyRequest): CreateSmsInternalApplyResponse {
  var runtime = new $RuntimeOptions{};
  return createSmsInternalApplyWithOptions(request, runtime);
}

model CreateSmsProductForChannelCustRequest {
  channelId?: int32(name='ChannelId'),
  onlyCheckOpened?: boolean(name='OnlyCheckOpened'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreateSmsProductForChannelCustResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model CreateSmsProductForChannelCustResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSmsProductForChannelCustResponseBody(name='body'),
}

/**
 * @param request CreateSmsProductForChannelCustRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateSmsProductForChannelCustResponse
 */
async function createSmsProductForChannelCustWithOptions(request: CreateSmsProductForChannelCustRequest, runtime: $RuntimeOptions): CreateSmsProductForChannelCustResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!$isNull(request.onlyCheckOpened)) {
    query['OnlyCheckOpened'] = request.onlyCheckOpened;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateSmsProductForChannelCust',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request CreateSmsProductForChannelCustRequest
 * @return CreateSmsProductForChannelCustResponse
 */
async function createSmsProductForChannelCust(request: CreateSmsProductForChannelCustRequest): CreateSmsProductForChannelCustResponse {
  var runtime = new $RuntimeOptions{};
  return createSmsProductForChannelCustWithOptions(request, runtime);
}

model CreateSmsSaasTaskRequest {
  bizType?: string(name='BizType'),
  clientIp?: string(name='ClientIp'),
  dataType?: string(name='DataType'),
  orderTime?: string(name='OrderTime'),
  ossFileName?: string(name='OssFileName'),
  ownerId?: long(name='OwnerId'),
  phoneList?: string(name='PhoneList'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  scheduleType?: string(name='ScheduleType'),
  signName?: string(name='SignName'),
  smsContent?: string(name='SmsContent'),
  smsTemplateCode?: string(name='SmsTemplateCode'),
  taskName?: string(name='TaskName'),
  validCount?: string(name='ValidCount'),
}

model CreateSmsSaasTaskResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model CreateSmsSaasTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSmsSaasTaskResponseBody(name='body'),
}

/**
 * @param request CreateSmsSaasTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateSmsSaasTaskResponse
 */
async function createSmsSaasTaskWithOptions(request: CreateSmsSaasTaskRequest, runtime: $RuntimeOptions): CreateSmsSaasTaskResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!$isNull(request.clientIp)) {
    query['ClientIp'] = request.clientIp;
  }
  if (!$isNull(request.dataType)) {
    query['DataType'] = request.dataType;
  }
  if (!$isNull(request.orderTime)) {
    query['OrderTime'] = request.orderTime;
  }
  if (!$isNull(request.ossFileName)) {
    query['OssFileName'] = request.ossFileName;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.phoneList)) {
    query['PhoneList'] = request.phoneList;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.scheduleType)) {
    query['ScheduleType'] = request.scheduleType;
  }
  if (!$isNull(request.signName)) {
    query['SignName'] = request.signName;
  }
  if (!$isNull(request.smsContent)) {
    query['SmsContent'] = request.smsContent;
  }
  if (!$isNull(request.smsTemplateCode)) {
    query['SmsTemplateCode'] = request.smsTemplateCode;
  }
  if (!$isNull(request.taskName)) {
    query['TaskName'] = request.taskName;
  }
  if (!$isNull(request.validCount)) {
    query['ValidCount'] = request.validCount;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateSmsSaasTask',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request CreateSmsSaasTaskRequest
 * @return CreateSmsSaasTaskResponse
 */
async function createSmsSaasTask(request: CreateSmsSaasTaskRequest): CreateSmsSaasTaskResponse {
  var runtime = new $RuntimeOptions{};
  return createSmsSaasTaskWithOptions(request, runtime);
}

model CreateSmsSaasTaskNewRequest {
  bizType?: string(name='BizType'),
  dataAbilityTaskId?: string(name='DataAbilityTaskId'),
  dataType?: string(name='DataType'),
  orderTime?: string(name='OrderTime'),
  ossFileName?: string(name='OssFileName'),
  ownerId?: long(name='OwnerId'),
  phoneList?: string(name='PhoneList'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  scheduleType?: string(name='ScheduleType'),
  signName?: string(name='SignName'),
  smsContent?: string(name='SmsContent'),
  smsTemplateCode?: string(name='SmsTemplateCode'),
  taskName?: string(name='TaskName'),
  validCount?: string(name='ValidCount'),
}

model CreateSmsSaasTaskNewResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateSmsSaasTaskNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSmsSaasTaskNewResponseBody(name='body'),
}

/**
 * @param request CreateSmsSaasTaskNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateSmsSaasTaskNewResponse
 */
async function createSmsSaasTaskNewWithOptions(request: CreateSmsSaasTaskNewRequest, runtime: $RuntimeOptions): CreateSmsSaasTaskNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!$isNull(request.dataAbilityTaskId)) {
    query['DataAbilityTaskId'] = request.dataAbilityTaskId;
  }
  if (!$isNull(request.dataType)) {
    query['DataType'] = request.dataType;
  }
  if (!$isNull(request.orderTime)) {
    query['OrderTime'] = request.orderTime;
  }
  if (!$isNull(request.ossFileName)) {
    query['OssFileName'] = request.ossFileName;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.phoneList)) {
    query['PhoneList'] = request.phoneList;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.scheduleType)) {
    query['ScheduleType'] = request.scheduleType;
  }
  if (!$isNull(request.signName)) {
    query['SignName'] = request.signName;
  }
  if (!$isNull(request.smsContent)) {
    query['SmsContent'] = request.smsContent;
  }
  if (!$isNull(request.smsTemplateCode)) {
    query['SmsTemplateCode'] = request.smsTemplateCode;
  }
  if (!$isNull(request.taskName)) {
    query['TaskName'] = request.taskName;
  }
  if (!$isNull(request.validCount)) {
    query['ValidCount'] = request.validCount;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateSmsSaasTaskNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request CreateSmsSaasTaskNewRequest
 * @return CreateSmsSaasTaskNewResponse
 */
async function createSmsSaasTaskNew(request: CreateSmsSaasTaskNewRequest): CreateSmsSaasTaskNewResponse {
  var runtime = new $RuntimeOptions{};
  return createSmsSaasTaskNewWithOptions(request, runtime);
}

model CreateSmsSendFailDetailsDownloadRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  prodId?: string(name='ProdId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sendDate?: string(name='SendDate'),
}

model CreateSmsSendFailDetailsDownloadResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model CreateSmsSendFailDetailsDownloadResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSmsSendFailDetailsDownloadResponseBody(name='body'),
}

/**
 * @param request CreateSmsSendFailDetailsDownloadRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateSmsSendFailDetailsDownloadResponse
 */
async function createSmsSendFailDetailsDownloadWithOptions(request: CreateSmsSendFailDetailsDownloadRequest, runtime: $RuntimeOptions): CreateSmsSendFailDetailsDownloadResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.prodId)) {
    query['ProdId'] = request.prodId;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.sendDate)) {
    query['SendDate'] = request.sendDate;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateSmsSendFailDetailsDownload',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request CreateSmsSendFailDetailsDownloadRequest
 * @return CreateSmsSendFailDetailsDownloadResponse
 */
async function createSmsSendFailDetailsDownload(request: CreateSmsSendFailDetailsDownloadRequest): CreateSmsSendFailDetailsDownloadResponse {
  var runtime = new $RuntimeOptions{};
  return createSmsSendFailDetailsDownloadWithOptions(request, runtime);
}

model CreateSmsSignRequest {
  extendMessage?: string(name='ExtendMessage'),
  fileIds?: string(name='FileIds'),
  orderId?: string(name='OrderId'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  remark?: string(name='Remark'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sceneType?: int32(name='SceneType'),
  serviceType?: int32(name='ServiceType'),
  signName?: string(name='SignName'),
}

model CreateSmsSignResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model CreateSmsSignResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSmsSignResponseBody(name='body'),
}

/**
 * @param request CreateSmsSignRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateSmsSignResponse
 */
async function createSmsSignWithOptions(request: CreateSmsSignRequest, runtime: $RuntimeOptions): CreateSmsSignResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.extendMessage)) {
    query['ExtendMessage'] = request.extendMessage;
  }
  if (!$isNull(request.fileIds)) {
    query['FileIds'] = request.fileIds;
  }
  if (!$isNull(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.sceneType)) {
    query['SceneType'] = request.sceneType;
  }
  if (!$isNull(request.serviceType)) {
    query['ServiceType'] = request.serviceType;
  }
  if (!$isNull(request.signName)) {
    query['SignName'] = request.signName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateSmsSign',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request CreateSmsSignRequest
 * @return CreateSmsSignResponse
 */
async function createSmsSign(request: CreateSmsSignRequest): CreateSmsSignResponse {
  var runtime = new $RuntimeOptions{};
  return createSmsSignWithOptions(request, runtime);
}

model CreateSmsSignNewRequest {
  applicationSceneId?: long(name='ApplicationSceneId'),
  applySource?: string(name='ApplySource'),
  authorization?: string(name='Authorization'),
  authorizationEffTime?: string(name='AuthorizationEffTime'),
  authorizationLetter?: string(name='AuthorizationLetter'),
  authorizationLetterAuditPass?: boolean(name='AuthorizationLetterAuditPass'),
  authorizationLetterId?: long(name='AuthorizationLetterId'),
  authorizationLetterName?: string(name='AuthorizationLetterName'),
  authorizationSignScope?: string(name='AuthorizationSignScope'),
  createSignGray?: boolean(name='CreateSignGray'),
  enableAuthorizationLetter?: boolean(name='EnableAuthorizationLetter'),
  extendMessage?: string(name='ExtendMessage'),
  fileIds?: string(name='FileIds'),
  isAuthorizationLetterOCRComplete?: boolean(name='IsAuthorizationLetterOCRComplete'),
  isAuthorizationLetterOCRDiff?: boolean(name='IsAuthorizationLetterOCRDiff'),
  isSignScopeOCRDiff?: boolean(name='IsSignScopeOCRDiff'),
  moreData?: [ string ](name='MoreData'),
  orderId?: string(name='OrderId'),
  organizationCode?: string(name='OrganizationCode'),
  ossKeys?: string(name='OssKeys'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  proxyAuthorization?: string(name='ProxyAuthorization'),
  qualificationId?: long(name='QualificationId'),
  qualificationType?: long(name='QualificationType'),
  qualificationVersion?: long(name='QualificationVersion'),
  remark?: string(name='Remark'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sceneType?: int32(name='SceneType'),
  serviceType?: int32(name='ServiceType'),
  signCode?: string(name='SignCode'),
  signId?: string(name='SignId'),
  signName?: string(name='SignName'),
  signScopeOCR?: string(name='SignScopeOCR'),
  signUpgrade?: boolean(name='SignUpgrade'),
  thirdParty?: boolean(name='ThirdParty'),
  userViewFileName?: string(name='UserViewFileName'),
}

model CreateSmsSignNewShrinkRequest {
  applicationSceneId?: long(name='ApplicationSceneId'),
  applySource?: string(name='ApplySource'),
  authorization?: string(name='Authorization'),
  authorizationEffTime?: string(name='AuthorizationEffTime'),
  authorizationLetter?: string(name='AuthorizationLetter'),
  authorizationLetterAuditPass?: boolean(name='AuthorizationLetterAuditPass'),
  authorizationLetterId?: long(name='AuthorizationLetterId'),
  authorizationLetterName?: string(name='AuthorizationLetterName'),
  authorizationSignScope?: string(name='AuthorizationSignScope'),
  createSignGray?: boolean(name='CreateSignGray'),
  enableAuthorizationLetter?: boolean(name='EnableAuthorizationLetter'),
  extendMessage?: string(name='ExtendMessage'),
  fileIds?: string(name='FileIds'),
  isAuthorizationLetterOCRComplete?: boolean(name='IsAuthorizationLetterOCRComplete'),
  isAuthorizationLetterOCRDiff?: boolean(name='IsAuthorizationLetterOCRDiff'),
  isSignScopeOCRDiff?: boolean(name='IsSignScopeOCRDiff'),
  moreDataShrink?: string(name='MoreData'),
  orderId?: string(name='OrderId'),
  organizationCode?: string(name='OrganizationCode'),
  ossKeys?: string(name='OssKeys'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  proxyAuthorization?: string(name='ProxyAuthorization'),
  qualificationId?: long(name='QualificationId'),
  qualificationType?: long(name='QualificationType'),
  qualificationVersion?: long(name='QualificationVersion'),
  remark?: string(name='Remark'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sceneType?: int32(name='SceneType'),
  serviceType?: int32(name='ServiceType'),
  signCode?: string(name='SignCode'),
  signId?: string(name='SignId'),
  signName?: string(name='SignName'),
  signScopeOCR?: string(name='SignScopeOCR'),
  signUpgrade?: boolean(name='SignUpgrade'),
  thirdParty?: boolean(name='ThirdParty'),
  userViewFileName?: string(name='UserViewFileName'),
}

model CreateSmsSignNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model CreateSmsSignNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSmsSignNewResponseBody(name='body'),
}

/**
 * @param tmpReq CreateSmsSignNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateSmsSignNewResponse
 */
async function createSmsSignNewWithOptions(tmpReq: CreateSmsSignNewRequest, runtime: $RuntimeOptions): CreateSmsSignNewResponse {
  tmpReq.validate();
  var request = new CreateSmsSignNewShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.moreData)) {
    request.moreDataShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.moreData, 'MoreData', 'json');
  }
  var query = {};
  if (!$isNull(request.applicationSceneId)) {
    query['ApplicationSceneId'] = request.applicationSceneId;
  }
  if (!$isNull(request.applySource)) {
    query['ApplySource'] = request.applySource;
  }
  if (!$isNull(request.authorization)) {
    query['Authorization'] = request.authorization;
  }
  if (!$isNull(request.authorizationEffTime)) {
    query['AuthorizationEffTime'] = request.authorizationEffTime;
  }
  if (!$isNull(request.authorizationLetter)) {
    query['AuthorizationLetter'] = request.authorizationLetter;
  }
  if (!$isNull(request.authorizationLetterAuditPass)) {
    query['AuthorizationLetterAuditPass'] = request.authorizationLetterAuditPass;
  }
  if (!$isNull(request.authorizationLetterId)) {
    query['AuthorizationLetterId'] = request.authorizationLetterId;
  }
  if (!$isNull(request.authorizationLetterName)) {
    query['AuthorizationLetterName'] = request.authorizationLetterName;
  }
  if (!$isNull(request.authorizationSignScope)) {
    query['AuthorizationSignScope'] = request.authorizationSignScope;
  }
  if (!$isNull(request.createSignGray)) {
    query['CreateSignGray'] = request.createSignGray;
  }
  if (!$isNull(request.enableAuthorizationLetter)) {
    query['EnableAuthorizationLetter'] = request.enableAuthorizationLetter;
  }
  if (!$isNull(request.extendMessage)) {
    query['ExtendMessage'] = request.extendMessage;
  }
  if (!$isNull(request.fileIds)) {
    query['FileIds'] = request.fileIds;
  }
  if (!$isNull(request.isAuthorizationLetterOCRComplete)) {
    query['IsAuthorizationLetterOCRComplete'] = request.isAuthorizationLetterOCRComplete;
  }
  if (!$isNull(request.isAuthorizationLetterOCRDiff)) {
    query['IsAuthorizationLetterOCRDiff'] = request.isAuthorizationLetterOCRDiff;
  }
  if (!$isNull(request.isSignScopeOCRDiff)) {
    query['IsSignScopeOCRDiff'] = request.isSignScopeOCRDiff;
  }
  if (!$isNull(request.moreDataShrink)) {
    query['MoreData'] = request.moreDataShrink;
  }
  if (!$isNull(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!$isNull(request.organizationCode)) {
    query['OrganizationCode'] = request.organizationCode;
  }
  if (!$isNull(request.ossKeys)) {
    query['OssKeys'] = request.ossKeys;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.proxyAuthorization)) {
    query['ProxyAuthorization'] = request.proxyAuthorization;
  }
  if (!$isNull(request.qualificationId)) {
    query['QualificationId'] = request.qualificationId;
  }
  if (!$isNull(request.qualificationType)) {
    query['QualificationType'] = request.qualificationType;
  }
  if (!$isNull(request.qualificationVersion)) {
    query['QualificationVersion'] = request.qualificationVersion;
  }
  if (!$isNull(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.sceneType)) {
    query['SceneType'] = request.sceneType;
  }
  if (!$isNull(request.serviceType)) {
    query['ServiceType'] = request.serviceType;
  }
  if (!$isNull(request.signCode)) {
    query['SignCode'] = request.signCode;
  }
  if (!$isNull(request.signId)) {
    query['SignId'] = request.signId;
  }
  if (!$isNull(request.signName)) {
    query['SignName'] = request.signName;
  }
  if (!$isNull(request.signScopeOCR)) {
    query['SignScopeOCR'] = request.signScopeOCR;
  }
  if (!$isNull(request.signUpgrade)) {
    query['SignUpgrade'] = request.signUpgrade;
  }
  if (!$isNull(request.thirdParty)) {
    query['ThirdParty'] = request.thirdParty;
  }
  if (!$isNull(request.userViewFileName)) {
    query['UserViewFileName'] = request.userViewFileName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateSmsSignNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request CreateSmsSignNewRequest
 * @return CreateSmsSignNewResponse
 */
async function createSmsSignNew(request: CreateSmsSignNewRequest): CreateSmsSignNewResponse {
  var runtime = new $RuntimeOptions{};
  return createSmsSignNewWithOptions(request, runtime);
}

model CreateSmsTemplateNewRequest {
  aiTemplate?: long(name='AiTemplate'),
  aiTemplateUuid?: string(name='AiTemplateUuid'),
  applicationSceneId?: long(name='ApplicationSceneId'),
  applySource?: string(name='ApplySource'),
  bizType?: string(name='BizType'),
  intlType?: int32(name='IntlType'),
  moreData?: [ string ](name='MoreData'),
  orderId?: string(name='OrderId'),
  ossKeys?: string(name='OssKeys'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  productUrl?: string(name='ProductUrl'),
  relatedSignName?: string(name='RelatedSignName'),
  relatedSignOrderId?: string(name='RelatedSignOrderId'),
  relatedSignUsageName?: string(name='RelatedSignUsageName'),
  remark?: string(name='Remark'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  rmdTemplateId?: long(name='RmdTemplateId'),
  templateCode?: string(name='TemplateCode'),
  templateContent?: string(name='TemplateContent'),
  templateName?: string(name='TemplateName'),
  templateRule?: string(name='TemplateRule'),
  userViewFileName?: string(name='UserViewFileName'),
}

model CreateSmsTemplateNewShrinkRequest {
  aiTemplate?: long(name='AiTemplate'),
  aiTemplateUuid?: string(name='AiTemplateUuid'),
  applicationSceneId?: long(name='ApplicationSceneId'),
  applySource?: string(name='ApplySource'),
  bizType?: string(name='BizType'),
  intlType?: int32(name='IntlType'),
  moreDataShrink?: string(name='MoreData'),
  orderId?: string(name='OrderId'),
  ossKeys?: string(name='OssKeys'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  productUrl?: string(name='ProductUrl'),
  relatedSignName?: string(name='RelatedSignName'),
  relatedSignOrderId?: string(name='RelatedSignOrderId'),
  relatedSignUsageName?: string(name='RelatedSignUsageName'),
  remark?: string(name='Remark'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  rmdTemplateId?: long(name='RmdTemplateId'),
  templateCode?: string(name='TemplateCode'),
  templateContent?: string(name='TemplateContent'),
  templateName?: string(name='TemplateName'),
  templateRule?: string(name='TemplateRule'),
  userViewFileName?: string(name='UserViewFileName'),
}

model CreateSmsTemplateNewResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model CreateSmsTemplateNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSmsTemplateNewResponseBody(name='body'),
}

/**
 * @param tmpReq CreateSmsTemplateNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateSmsTemplateNewResponse
 */
async function createSmsTemplateNewWithOptions(tmpReq: CreateSmsTemplateNewRequest, runtime: $RuntimeOptions): CreateSmsTemplateNewResponse {
  tmpReq.validate();
  var request = new CreateSmsTemplateNewShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.moreData)) {
    request.moreDataShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.moreData, 'MoreData', 'json');
  }
  var query = {};
  if (!$isNull(request.aiTemplate)) {
    query['AiTemplate'] = request.aiTemplate;
  }
  if (!$isNull(request.aiTemplateUuid)) {
    query['AiTemplateUuid'] = request.aiTemplateUuid;
  }
  if (!$isNull(request.applicationSceneId)) {
    query['ApplicationSceneId'] = request.applicationSceneId;
  }
  if (!$isNull(request.applySource)) {
    query['ApplySource'] = request.applySource;
  }
  if (!$isNull(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!$isNull(request.intlType)) {
    query['IntlType'] = request.intlType;
  }
  if (!$isNull(request.moreDataShrink)) {
    query['MoreData'] = request.moreDataShrink;
  }
  if (!$isNull(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!$isNull(request.ossKeys)) {
    query['OssKeys'] = request.ossKeys;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.productUrl)) {
    query['ProductUrl'] = request.productUrl;
  }
  if (!$isNull(request.relatedSignName)) {
    query['RelatedSignName'] = request.relatedSignName;
  }
  if (!$isNull(request.relatedSignOrderId)) {
    query['RelatedSignOrderId'] = request.relatedSignOrderId;
  }
  if (!$isNull(request.relatedSignUsageName)) {
    query['RelatedSignUsageName'] = request.relatedSignUsageName;
  }
  if (!$isNull(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.rmdTemplateId)) {
    query['RmdTemplateId'] = request.rmdTemplateId;
  }
  if (!$isNull(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  if (!$isNull(request.templateContent)) {
    query['TemplateContent'] = request.templateContent;
  }
  if (!$isNull(request.templateName)) {
    query['TemplateName'] = request.templateName;
  }
  if (!$isNull(request.templateRule)) {
    query['TemplateRule'] = request.templateRule;
  }
  if (!$isNull(request.userViewFileName)) {
    query['UserViewFileName'] = request.userViewFileName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateSmsTemplateNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request CreateSmsTemplateNewRequest
 * @return CreateSmsTemplateNewResponse
 */
async function createSmsTemplateNew(request: CreateSmsTemplateNewRequest): CreateSmsTemplateNewResponse {
  var runtime = new $RuntimeOptions{};
  return createSmsTemplateNewWithOptions(request, runtime);
}

model CreateWarningThresholdRequest {
  bizType?: string(name='BizType'),
  dailyHaltLimit?: int32(name='DailyHaltLimit'),
  dailyWarningLimit?: int32(name='DailyWarningLimit'),
  monthlyHaltLimit?: int32(name='MonthlyHaltLimit'),
  monthlyWarningLimit?: int32(name='MonthlyWarningLimit'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreateWarningThresholdResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model CreateWarningThresholdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWarningThresholdResponseBody(name='body'),
}

/**
 * @param request CreateWarningThresholdRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateWarningThresholdResponse
 */
async function createWarningThresholdWithOptions(request: CreateWarningThresholdRequest, runtime: $RuntimeOptions): CreateWarningThresholdResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!$isNull(request.dailyHaltLimit)) {
    query['DailyHaltLimit'] = request.dailyHaltLimit;
  }
  if (!$isNull(request.dailyWarningLimit)) {
    query['DailyWarningLimit'] = request.dailyWarningLimit;
  }
  if (!$isNull(request.monthlyHaltLimit)) {
    query['MonthlyHaltLimit'] = request.monthlyHaltLimit;
  }
  if (!$isNull(request.monthlyWarningLimit)) {
    query['MonthlyWarningLimit'] = request.monthlyWarningLimit;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateWarningThreshold',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request CreateWarningThresholdRequest
 * @return CreateWarningThresholdResponse
 */
async function createWarningThreshold(request: CreateWarningThresholdRequest): CreateWarningThresholdResponse {
  var runtime = new $RuntimeOptions{};
  return createWarningThresholdWithOptions(request, runtime);
}

model CreateWarningThresholdNewRequest {
  bizType?: string(name='BizType'),
  dailyHaltLimit?: int32(name='DailyHaltLimit'),
  dailyWarningLimit?: int32(name='DailyWarningLimit'),
  monthlyHaltLimit?: int32(name='MonthlyHaltLimit'),
  monthlyWarningLimit?: int32(name='MonthlyWarningLimit'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreateWarningThresholdNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model CreateWarningThresholdNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWarningThresholdNewResponseBody(name='body'),
}

/**
 * @param request CreateWarningThresholdNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateWarningThresholdNewResponse
 */
async function createWarningThresholdNewWithOptions(request: CreateWarningThresholdNewRequest, runtime: $RuntimeOptions): CreateWarningThresholdNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!$isNull(request.dailyHaltLimit)) {
    query['DailyHaltLimit'] = request.dailyHaltLimit;
  }
  if (!$isNull(request.dailyWarningLimit)) {
    query['DailyWarningLimit'] = request.dailyWarningLimit;
  }
  if (!$isNull(request.monthlyHaltLimit)) {
    query['MonthlyHaltLimit'] = request.monthlyHaltLimit;
  }
  if (!$isNull(request.monthlyWarningLimit)) {
    query['MonthlyWarningLimit'] = request.monthlyWarningLimit;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateWarningThresholdNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request CreateWarningThresholdNewRequest
 * @return CreateWarningThresholdNewResponse
 */
async function createWarningThresholdNew(request: CreateWarningThresholdNewRequest): CreateWarningThresholdNewResponse {
  var runtime = new $RuntimeOptions{};
  return createWarningThresholdNewWithOptions(request, runtime);
}

model DelCardSendExportInfoRequest {
  ids?: [ long ](name='Ids'),
}

model DelCardSendExportInfoResponseBody = {
  code?: string(name='Code'),
  model?: string(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DelCardSendExportInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DelCardSendExportInfoResponseBody(name='body'),
}

/**
 * @summary 删除导出记录
 *
 * @param request DelCardSendExportInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DelCardSendExportInfoResponse
 */
async function delCardSendExportInfoWithOptions(request: DelCardSendExportInfoRequest, runtime: $RuntimeOptions): DelCardSendExportInfoResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ids)) {
    query['Ids'] = request.ids;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DelCardSendExportInfo',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除导出记录
 *
 * @param request DelCardSendExportInfoRequest
 * @return DelCardSendExportInfoResponse
 */
async function delCardSendExportInfo(request: DelCardSendExportInfoRequest): DelCardSendExportInfoResponse {
  var runtime = new $RuntimeOptions{};
  return delCardSendExportInfoWithOptions(request, runtime);
}

model DeleteCardMessageCallbackRequest {
  bizType?: string(name='BizType', description='This parameter is required.'),
  callbackUrl?: string(name='CallbackUrl', description='This parameter is required.'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteCardMessageCallbackResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model DeleteCardMessageCallbackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCardMessageCallbackResponseBody(name='body'),
}

/**
 * @summary 删除消息回调
 *
 * @param request DeleteCardMessageCallbackRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteCardMessageCallbackResponse
 */
async function deleteCardMessageCallbackWithOptions(request: DeleteCardMessageCallbackRequest, runtime: $RuntimeOptions): DeleteCardMessageCallbackResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!$isNull(request.callbackUrl)) {
    query['CallbackUrl'] = request.callbackUrl;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteCardMessageCallback',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除消息回调
 *
 * @param request DeleteCardMessageCallbackRequest
 * @return DeleteCardMessageCallbackResponse
 */
async function deleteCardMessageCallback(request: DeleteCardMessageCallbackRequest): DeleteCardMessageCallbackResponse {
  var runtime = new $RuntimeOptions{};
  return deleteCardMessageCallbackWithOptions(request, runtime);
}

model DeleteCardMessageQueueRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  queueType?: string(name='QueueType', description='This parameter is required.'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteCardMessageQueueResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model DeleteCardMessageQueueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCardMessageQueueResponseBody(name='body'),
}

/**
 * @param request DeleteCardMessageQueueRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteCardMessageQueueResponse
 */
async function deleteCardMessageQueueWithOptions(request: DeleteCardMessageQueueRequest, runtime: $RuntimeOptions): DeleteCardMessageQueueResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.queueType)) {
    query['QueueType'] = request.queueType;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteCardMessageQueue',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request DeleteCardMessageQueueRequest
 * @return DeleteCardMessageQueueResponse
 */
async function deleteCardMessageQueue(request: DeleteCardMessageQueueRequest): DeleteCardMessageQueueResponse {
  var runtime = new $RuntimeOptions{};
  return deleteCardMessageQueueWithOptions(request, runtime);
}

model DeleteContactsRequest {
  ids?: string(name='Ids'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteContactsResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model DeleteContactsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteContactsResponseBody(name='body'),
}

/**
 * @param request DeleteContactsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteContactsResponse
 */
async function deleteContactsWithOptions(request: DeleteContactsRequest, runtime: $RuntimeOptions): DeleteContactsResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ids)) {
    query['Ids'] = request.ids;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteContacts',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request DeleteContactsRequest
 * @return DeleteContactsResponse
 */
async function deleteContacts(request: DeleteContactsRequest): DeleteContactsResponse {
  var runtime = new $RuntimeOptions{};
  return deleteContactsWithOptions(request, runtime);
}

model DeleteContactsNewRequest {
  ids?: string(name='Ids'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteContactsNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model DeleteContactsNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteContactsNewResponseBody(name='body'),
}

/**
 * @param request DeleteContactsNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteContactsNewResponse
 */
async function deleteContactsNewWithOptions(request: DeleteContactsNewRequest, runtime: $RuntimeOptions): DeleteContactsNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ids)) {
    query['Ids'] = request.ids;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteContactsNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request DeleteContactsNewRequest
 * @return DeleteContactsNewResponse
 */
async function deleteContactsNew(request: DeleteContactsNewRequest): DeleteContactsNewResponse {
  var runtime = new $RuntimeOptions{};
  return deleteContactsNewWithOptions(request, runtime);
}

model DeleteDigitalTemplateNewRequest {
  auditState?: string(name='AuditState'),
  bizType?: string(name='BizType'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateCode?: string(name='TemplateCode'),
  templateName?: string(name='TemplateName'),
}

model DeleteDigitalTemplateNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model DeleteDigitalTemplateNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDigitalTemplateNewResponseBody(name='body'),
}

/**
 * @param request DeleteDigitalTemplateNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDigitalTemplateNewResponse
 */
async function deleteDigitalTemplateNewWithOptions(request: DeleteDigitalTemplateNewRequest, runtime: $RuntimeOptions): DeleteDigitalTemplateNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.auditState)) {
    query['AuditState'] = request.auditState;
  }
  if (!$isNull(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  if (!$isNull(request.templateName)) {
    query['TemplateName'] = request.templateName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteDigitalTemplateNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request DeleteDigitalTemplateNewRequest
 * @return DeleteDigitalTemplateNewResponse
 */
async function deleteDigitalTemplateNew(request: DeleteDigitalTemplateNewRequest): DeleteDigitalTemplateNewResponse {
  var runtime = new $RuntimeOptions{};
  return deleteDigitalTemplateNewWithOptions(request, runtime);
}

model DeleteMessageCallbackNewRequest {
  bizType?: string(name='BizType', description='This parameter is required.'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteMessageCallbackNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model DeleteMessageCallbackNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMessageCallbackNewResponseBody(name='body'),
}

/**
 * @param request DeleteMessageCallbackNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteMessageCallbackNewResponse
 */
async function deleteMessageCallbackNewWithOptions(request: DeleteMessageCallbackNewRequest, runtime: $RuntimeOptions): DeleteMessageCallbackNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteMessageCallbackNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request DeleteMessageCallbackNewRequest
 * @return DeleteMessageCallbackNewResponse
 */
async function deleteMessageCallbackNew(request: DeleteMessageCallbackNewRequest): DeleteMessageCallbackNewResponse {
  var runtime = new $RuntimeOptions{};
  return deleteMessageCallbackNewWithOptions(request, runtime);
}

model DeleteMessageQueueNewRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  queueType?: string(name='QueueType'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteMessageQueueNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model DeleteMessageQueueNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMessageQueueNewResponseBody(name='body'),
}

/**
 * @param request DeleteMessageQueueNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteMessageQueueNewResponse
 */
async function deleteMessageQueueNewWithOptions(request: DeleteMessageQueueNewRequest, runtime: $RuntimeOptions): DeleteMessageQueueNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.queueType)) {
    query['QueueType'] = request.queueType;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteMessageQueueNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request DeleteMessageQueueNewRequest
 * @return DeleteMessageQueueNewResponse
 */
async function deleteMessageQueueNew(request: DeleteMessageQueueNewRequest): DeleteMessageQueueNewResponse {
  var runtime = new $RuntimeOptions{};
  return deleteMessageQueueNewWithOptions(request, runtime);
}

model DeleteOrCanceleTaskRequest {
  isDeleted?: int32(name='IsDeleted'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: string(name='Status'),
  taskId?: long(name='TaskId'),
}

model DeleteOrCanceleTaskResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model DeleteOrCanceleTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteOrCanceleTaskResponseBody(name='body'),
}

/**
 * @param request DeleteOrCanceleTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteOrCanceleTaskResponse
 */
async function deleteOrCanceleTaskWithOptions(request: DeleteOrCanceleTaskRequest, runtime: $RuntimeOptions): DeleteOrCanceleTaskResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.isDeleted)) {
    query['IsDeleted'] = request.isDeleted;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.status)) {
    query['Status'] = request.status;
  }
  if (!$isNull(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteOrCanceleTask',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request DeleteOrCanceleTaskRequest
 * @return DeleteOrCanceleTaskResponse
 */
async function deleteOrCanceleTask(request: DeleteOrCanceleTaskRequest): DeleteOrCanceleTaskResponse {
  var runtime = new $RuntimeOptions{};
  return deleteOrCanceleTaskWithOptions(request, runtime);
}

model DeleteOrCanceleTaskNewRequest {
  isDeleted?: int32(name='IsDeleted'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: string(name='Status'),
  taskId?: long(name='TaskId'),
}

model DeleteOrCanceleTaskNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: long(name='Result'),
}

model DeleteOrCanceleTaskNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteOrCanceleTaskNewResponseBody(name='body'),
}

/**
 * @param request DeleteOrCanceleTaskNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteOrCanceleTaskNewResponse
 */
async function deleteOrCanceleTaskNewWithOptions(request: DeleteOrCanceleTaskNewRequest, runtime: $RuntimeOptions): DeleteOrCanceleTaskNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.isDeleted)) {
    query['IsDeleted'] = request.isDeleted;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.status)) {
    query['Status'] = request.status;
  }
  if (!$isNull(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteOrCanceleTaskNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request DeleteOrCanceleTaskNewRequest
 * @return DeleteOrCanceleTaskNewResponse
 */
async function deleteOrCanceleTaskNew(request: DeleteOrCanceleTaskNewRequest): DeleteOrCanceleTaskNewResponse {
  var runtime = new $RuntimeOptions{};
  return deleteOrCanceleTaskNewWithOptions(request, runtime);
}

model DeletePhoneWhiteListRequest {
  ids?: string(name='Ids', description='This parameter is required.'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeletePhoneWhiteListResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model DeletePhoneWhiteListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePhoneWhiteListResponseBody(name='body'),
}

/**
 * @param request DeletePhoneWhiteListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeletePhoneWhiteListResponse
 */
async function deletePhoneWhiteListWithOptions(request: DeletePhoneWhiteListRequest, runtime: $RuntimeOptions): DeletePhoneWhiteListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ids)) {
    query['Ids'] = request.ids;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeletePhoneWhiteList',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request DeletePhoneWhiteListRequest
 * @return DeletePhoneWhiteListResponse
 */
async function deletePhoneWhiteList(request: DeletePhoneWhiteListRequest): DeletePhoneWhiteListResponse {
  var runtime = new $RuntimeOptions{};
  return deletePhoneWhiteListWithOptions(request, runtime);
}

model DeletePhoneWhiteListNewRequest {
  ids?: string(name='Ids', description='This parameter is required.'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeletePhoneWhiteListNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model DeletePhoneWhiteListNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePhoneWhiteListNewResponseBody(name='body'),
}

/**
 * @param request DeletePhoneWhiteListNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeletePhoneWhiteListNewResponse
 */
async function deletePhoneWhiteListNewWithOptions(request: DeletePhoneWhiteListNewRequest, runtime: $RuntimeOptions): DeletePhoneWhiteListNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ids)) {
    query['Ids'] = request.ids;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeletePhoneWhiteListNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request DeletePhoneWhiteListNewRequest
 * @return DeletePhoneWhiteListNewResponse
 */
async function deletePhoneWhiteListNew(request: DeletePhoneWhiteListNewRequest): DeletePhoneWhiteListNewResponse {
  var runtime = new $RuntimeOptions{};
  return deletePhoneWhiteListNewWithOptions(request, runtime);
}

model DeleteShortUrlNewRequest {
  ids?: string(name='Ids', description='This parameter is required.'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteShortUrlNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model DeleteShortUrlNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteShortUrlNewResponseBody(name='body'),
}

/**
 * @param request DeleteShortUrlNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteShortUrlNewResponse
 */
async function deleteShortUrlNewWithOptions(request: DeleteShortUrlNewRequest, runtime: $RuntimeOptions): DeleteShortUrlNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ids)) {
    query['Ids'] = request.ids;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteShortUrlNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request DeleteShortUrlNewRequest
 * @return DeleteShortUrlNewResponse
 */
async function deleteShortUrlNew(request: DeleteShortUrlNewRequest): DeleteShortUrlNewResponse {
  var runtime = new $RuntimeOptions{};
  return deleteShortUrlNewWithOptions(request, runtime);
}

model DeleteSmsTemplateNewRequest {
  isSmsSign?: boolean(name='IsSmsSign'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  smsTemplateIds?: string(name='SmsTemplateIds', description='This parameter is required.'),
}

model DeleteSmsTemplateNewResponseBody = {
  failList?: {
    fail?: [ string ](name='Fail')
  }(name='FailList'),
  requestId?: string(name='RequestId'),
  successList?: {
    succes?: [ string ](name='Succes')
  }(name='SuccessList'),
}

model DeleteSmsTemplateNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSmsTemplateNewResponseBody(name='body'),
}

/**
 * @param request DeleteSmsTemplateNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteSmsTemplateNewResponse
 */
async function deleteSmsTemplateNewWithOptions(request: DeleteSmsTemplateNewRequest, runtime: $RuntimeOptions): DeleteSmsTemplateNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.isSmsSign)) {
    query['IsSmsSign'] = request.isSmsSign;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.smsTemplateIds)) {
    query['SmsTemplateIds'] = request.smsTemplateIds;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteSmsTemplateNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request DeleteSmsTemplateNewRequest
 * @return DeleteSmsTemplateNewResponse
 */
async function deleteSmsTemplateNew(request: DeleteSmsTemplateNewRequest): DeleteSmsTemplateNewResponse {
  var runtime = new $RuntimeOptions{};
  return deleteSmsTemplateNewWithOptions(request, runtime);
}

model ExportCardSmsHistoryRequest {
  apiSend?: long(name='ApiSend'),
  cardTemplateType?: string(name='CardTemplateType'),
  gmtCreate?: string(name='GmtCreate', description='This parameter is required.'),
  receiveState?: long(name='ReceiveState'),
  receiver?: string(name='Receiver'),
  renderState?: long(name='RenderState'),
  signName?: string(name='SignName'),
  tmpCode?: string(name='TmpCode'),
}

model ExportCardSmsHistoryResponseBody = {
  code?: string(name='Code'),
  model?: {
    pageNo?: long(name='PageNo'),
    pageSize?: long(name='PageSize'),
    records?: [ 
      {
        acceptDate?: long(name='AcceptDate'),
        apiSend?: long(name='ApiSend'),
        cardTemplateType?: string(name='CardTemplateType'),
        customTmpCode?: string(name='CustomTmpCode'),
        description?: string(name='Description'),
        fuuId?: string(name='FuuId'),
        gmtCreate?: long(name='GmtCreate'),
        gmtModified?: long(name='GmtModified'),
        id?: long(name='Id'),
        isSupport?: long(name='IsSupport'),
        outId?: string(name='OutId'),
        pid?: long(name='Pid'),
        receiveState?: long(name='ReceiveState'),
        receiver?: string(name='Receiver'),
        renderDate?: long(name='RenderDate'),
        renderState?: long(name='RenderState'),
        shortUrl?: string(name='ShortUrl'),
        signName?: string(name='SignName'),
        smsContent?: string(name='SmsContent'),
        suggestion?: string(name='Suggestion'),
        tmpCode?: string(name='TmpCode'),
        tmpId?: string(name='TmpId'),
        tmpType?: long(name='TmpType'),
        tmpTypeName?: string(name='TmpTypeName'),
      }
    ](name='Records'),
    totalCount?: long(name='TotalCount'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ExportCardSmsHistoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportCardSmsHistoryResponseBody(name='body'),
}

/**
 * @summary 发送纪录信息导出
 *
 * @param request ExportCardSmsHistoryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ExportCardSmsHistoryResponse
 */
async function exportCardSmsHistoryWithOptions(request: ExportCardSmsHistoryRequest, runtime: $RuntimeOptions): ExportCardSmsHistoryResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.apiSend)) {
    query['ApiSend'] = request.apiSend;
  }
  if (!$isNull(request.cardTemplateType)) {
    query['CardTemplateType'] = request.cardTemplateType;
  }
  if (!$isNull(request.gmtCreate)) {
    query['GmtCreate'] = request.gmtCreate;
  }
  if (!$isNull(request.receiveState)) {
    query['ReceiveState'] = request.receiveState;
  }
  if (!$isNull(request.receiver)) {
    query['Receiver'] = request.receiver;
  }
  if (!$isNull(request.renderState)) {
    query['RenderState'] = request.renderState;
  }
  if (!$isNull(request.signName)) {
    query['SignName'] = request.signName;
  }
  if (!$isNull(request.tmpCode)) {
    query['TmpCode'] = request.tmpCode;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ExportCardSmsHistory',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 发送纪录信息导出
 *
 * @param request ExportCardSmsHistoryRequest
 * @return ExportCardSmsHistoryResponse
 */
async function exportCardSmsHistory(request: ExportCardSmsHistoryRequest): ExportCardSmsHistoryResponse {
  var runtime = new $RuntimeOptions{};
  return exportCardSmsHistoryWithOptions(request, runtime);
}

model ExportCardSmsStatisticsRequest {
  customTmpCode?: string(name='CustomTmpCode'),
  sendDateEnd?: string(name='SendDateEnd'),
  sendDateStart?: string(name='SendDateStart'),
  signName?: string(name='SignName'),
  tmpCode?: string(name='TmpCode'),
  tmpName?: string(name='TmpName'),
}

model ExportCardSmsStatisticsResponseBody = {
  code?: string(name='Code'),
  model?: string(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ExportCardSmsStatisticsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportCardSmsStatisticsResponseBody(name='body'),
}

/**
 * @summary 导出发送统计信息-解析统计
 *
 * @param request ExportCardSmsStatisticsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ExportCardSmsStatisticsResponse
 */
async function exportCardSmsStatisticsWithOptions(request: ExportCardSmsStatisticsRequest, runtime: $RuntimeOptions): ExportCardSmsStatisticsResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.customTmpCode)) {
    query['CustomTmpCode'] = request.customTmpCode;
  }
  if (!$isNull(request.sendDateEnd)) {
    query['SendDateEnd'] = request.sendDateEnd;
  }
  if (!$isNull(request.sendDateStart)) {
    query['SendDateStart'] = request.sendDateStart;
  }
  if (!$isNull(request.signName)) {
    query['SignName'] = request.signName;
  }
  if (!$isNull(request.tmpCode)) {
    query['TmpCode'] = request.tmpCode;
  }
  if (!$isNull(request.tmpName)) {
    query['TmpName'] = request.tmpName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ExportCardSmsStatistics',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 导出发送统计信息-解析统计
 *
 * @param request ExportCardSmsStatisticsRequest
 * @return ExportCardSmsStatisticsResponse
 */
async function exportCardSmsStatistics(request: ExportCardSmsStatisticsRequest): ExportCardSmsStatisticsResponse {
  var runtime = new $RuntimeOptions{};
  return exportCardSmsStatisticsWithOptions(request, runtime);
}

model ExportCardSmsStatisticsSendRequest {
  customTmpCode?: string(name='CustomTmpCode'),
  sendDateEnd?: string(name='SendDateEnd', description='This parameter is required.'),
  sendDateStart?: string(name='SendDateStart', description='This parameter is required.'),
  signName?: string(name='SignName'),
  tmpCode?: string(name='TmpCode'),
}

model ExportCardSmsStatisticsSendResponseBody = {
  code?: string(name='Code'),
  model?: string(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ExportCardSmsStatisticsSendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportCardSmsStatisticsSendResponseBody(name='body'),
}

/**
 * @summary 导出发送统计信息-发送+解析统计
 *
 * @param request ExportCardSmsStatisticsSendRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ExportCardSmsStatisticsSendResponse
 */
async function exportCardSmsStatisticsSendWithOptions(request: ExportCardSmsStatisticsSendRequest, runtime: $RuntimeOptions): ExportCardSmsStatisticsSendResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.customTmpCode)) {
    query['CustomTmpCode'] = request.customTmpCode;
  }
  if (!$isNull(request.sendDateEnd)) {
    query['SendDateEnd'] = request.sendDateEnd;
  }
  if (!$isNull(request.sendDateStart)) {
    query['SendDateStart'] = request.sendDateStart;
  }
  if (!$isNull(request.signName)) {
    query['SignName'] = request.signName;
  }
  if (!$isNull(request.tmpCode)) {
    query['TmpCode'] = request.tmpCode;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ExportCardSmsStatisticsSend',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 导出发送统计信息-发送+解析统计
 *
 * @param request ExportCardSmsStatisticsSendRequest
 * @return ExportCardSmsStatisticsSendResponse
 */
async function exportCardSmsStatisticsSend(request: ExportCardSmsStatisticsSendRequest): ExportCardSmsStatisticsSendResponse {
  var runtime = new $RuntimeOptions{};
  return exportCardSmsStatisticsSendWithOptions(request, runtime);
}

model ExportTmpEffectReportDataRequest {
  endDate?: string(name='EndDate', description='This parameter is required.'),
  startDate?: string(name='StartDate', description='This parameter is required.'),
  tmpCode?: string(name='TmpCode'),
  tmpName?: string(name='TmpName'),
  vendorCode?: string(name='VendorCode'),
  vendorName?: string(name='VendorName'),
}

model ExportTmpEffectReportDataResponseBody = {
  code?: string(name='Code'),
  model?: string(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ExportTmpEffectReportDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportTmpEffectReportDataResponseBody(name='body'),
}

/**
 * @summary 发送效果统计导出
 *
 * @param request ExportTmpEffectReportDataRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ExportTmpEffectReportDataResponse
 */
async function exportTmpEffectReportDataWithOptions(request: ExportTmpEffectReportDataRequest, runtime: $RuntimeOptions): ExportTmpEffectReportDataResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.endDate)) {
    query['EndDate'] = request.endDate;
  }
  if (!$isNull(request.startDate)) {
    query['StartDate'] = request.startDate;
  }
  if (!$isNull(request.tmpCode)) {
    query['TmpCode'] = request.tmpCode;
  }
  if (!$isNull(request.tmpName)) {
    query['TmpName'] = request.tmpName;
  }
  if (!$isNull(request.vendorCode)) {
    query['VendorCode'] = request.vendorCode;
  }
  if (!$isNull(request.vendorName)) {
    query['VendorName'] = request.vendorName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ExportTmpEffectReportData',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 发送效果统计导出
 *
 * @param request ExportTmpEffectReportDataRequest
 * @return ExportTmpEffectReportDataResponse
 */
async function exportTmpEffectReportData(request: ExportTmpEffectReportDataRequest): ExportTmpEffectReportDataResponse {
  var runtime = new $RuntimeOptions{};
  return exportTmpEffectReportDataWithOptions(request, runtime);
}

model GetLetterOfAuthorizationRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  signName?: string(name='SignName'),
}

model GetLetterOfAuthorizationResponseBody = {
  code?: string(name='Code'),
  fileUrl?: string(name='FileUrl'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model GetLetterOfAuthorizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLetterOfAuthorizationResponseBody(name='body'),
}

/**
 * @summary 授权书下载
 *
 * @param request GetLetterOfAuthorizationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetLetterOfAuthorizationResponse
 */
async function getLetterOfAuthorizationWithOptions(request: GetLetterOfAuthorizationRequest, runtime: $RuntimeOptions): GetLetterOfAuthorizationResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.signName)) {
    query['SignName'] = request.signName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetLetterOfAuthorization',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 授权书下载
 *
 * @param request GetLetterOfAuthorizationRequest
 * @return GetLetterOfAuthorizationResponse
 */
async function getLetterOfAuthorization(request: GetLetterOfAuthorizationRequest): GetLetterOfAuthorizationResponse {
  var runtime = new $RuntimeOptions{};
  return getLetterOfAuthorizationWithOptions(request, runtime);
}

model ListPushMsgRequest {
  id?: string(name='Id'),
  msgType?: string(name='MsgType'),
  name?: string(name='Name'),
  ownerId?: long(name='OwnerId'),
  pushTime?: string(name='PushTime'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: string(name='Status'),
}

model ListPushMsgResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: {
    createdDate?: string(name='CreatedDate'),
    createdDateStr?: string(name='CreatedDateStr'),
    id?: string(name='Id'),
    pushTime?: string(name='PushTime'),
    pushTimeStr?: string(name='PushTimeStr'),
    spec?: string(name='Spec'),
    status?: string(name='Status'),
    statusStr?: string(name='StatusStr'),
    title?: string(name='Title'),
    userNum?: long(name='UserNum'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
}

model ListPushMsgResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPushMsgResponseBody(name='body'),
}

/**
 * @summary 获取推送的消息信息
 *
 * @param request ListPushMsgRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListPushMsgResponse
 */
async function listPushMsgWithOptions(request: ListPushMsgRequest, runtime: $RuntimeOptions): ListPushMsgResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.id)) {
    query['Id'] = request.id;
  }
  if (!$isNull(request.msgType)) {
    query['MsgType'] = request.msgType;
  }
  if (!$isNull(request.name)) {
    query['Name'] = request.name;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.pushTime)) {
    query['PushTime'] = request.pushTime;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListPushMsg',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取推送的消息信息
 *
 * @param request ListPushMsgRequest
 * @return ListPushMsgResponse
 */
async function listPushMsg(request: ListPushMsgRequest): ListPushMsgResponse {
  var runtime = new $RuntimeOptions{};
  return listPushMsgWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  category?: string(name='Category'),
  nextToken?: string(name='NextToken'),
  ownerId?: long(name='OwnerId'),
  pageSize?: int32(name='PageSize'),
  prodCode?: string(name='ProdCode'),
  regionId?: string(name='RegionId', description='This parameter is required.'),
  resourceId?: [ string ](name='ResourceId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', description='This parameter is required.'),
  scope?: string(name='Scope'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  tagOwnerUid?: long(name='TagOwnerUid', description='This parameter is required.'),
}

model ListTagResourcesResponseBody = {
  code?: string(name='Code'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagResourcesResponseBody(name='body'),
}

/**
 * @param request ListTagResourcesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListTagResourcesResponse
 */
async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: $RuntimeOptions): ListTagResourcesResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.category)) {
    query['Category'] = request.category;
  }
  if (!$isNull(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!$isNull(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!$isNull(request.scope)) {
    query['Scope'] = request.scope;
  }
  if (!$isNull(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!$isNull(request.tagOwnerUid)) {
    query['TagOwnerUid'] = request.tagOwnerUid;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListTagResources',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request ListTagResourcesRequest
 * @return ListTagResourcesResponse
 */
async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new $RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model OpenShortUrlProductRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model OpenShortUrlProductResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model OpenShortUrlProductResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OpenShortUrlProductResponseBody(name='body'),
}

/**
 * @param request OpenShortUrlProductRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return OpenShortUrlProductResponse
 */
async function openShortUrlProductWithOptions(request: OpenShortUrlProductRequest, runtime: $RuntimeOptions): OpenShortUrlProductResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'OpenShortUrlProduct',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request OpenShortUrlProductRequest
 * @return OpenShortUrlProductResponse
 */
async function openShortUrlProduct(request: OpenShortUrlProductRequest): OpenShortUrlProductResponse {
  var runtime = new $RuntimeOptions{};
  return openShortUrlProductWithOptions(request, runtime);
}

model OpenShortUrlProductNewRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model OpenShortUrlProductNewResponseBody = {
  requestId?: string(name='RequestId'),
  rusult?: boolean(name='Rusult'),
}

model OpenShortUrlProductNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OpenShortUrlProductNewResponseBody(name='body'),
}

/**
 * @param request OpenShortUrlProductNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return OpenShortUrlProductNewResponse
 */
async function openShortUrlProductNewWithOptions(request: OpenShortUrlProductNewRequest, runtime: $RuntimeOptions): OpenShortUrlProductNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'OpenShortUrlProductNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request OpenShortUrlProductNewRequest
 * @return OpenShortUrlProductNewResponse
 */
async function openShortUrlProductNew(request: OpenShortUrlProductNewRequest): OpenShortUrlProductNewResponse {
  var runtime = new $RuntimeOptions{};
  return openShortUrlProductNewWithOptions(request, runtime);
}

model OpencPrevFlagNewRequest {
  isOpen?: int32(name='IsOpen', description='This parameter is required.'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model OpencPrevFlagNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model OpencPrevFlagNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OpencPrevFlagNewResponseBody(name='body'),
}

/**
 * @param request OpencPrevFlagNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return OpencPrevFlagNewResponse
 */
async function opencPrevFlagNewWithOptions(request: OpencPrevFlagNewRequest, runtime: $RuntimeOptions): OpencPrevFlagNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.isOpen)) {
    query['IsOpen'] = request.isOpen;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'OpencPrevFlagNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request OpencPrevFlagNewRequest
 * @return OpencPrevFlagNewResponse
 */
async function opencPrevFlagNew(request: OpencPrevFlagNewRequest): OpencPrevFlagNewResponse {
  var runtime = new $RuntimeOptions{};
  return opencPrevFlagNewWithOptions(request, runtime);
}

model QueryAnyParamTemplateUserRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryAnyParamTemplateUserResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryAnyParamTemplateUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAnyParamTemplateUserResponseBody(name='body'),
}

/**
 * @param request QueryAnyParamTemplateUserRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryAnyParamTemplateUserResponse
 */
async function queryAnyParamTemplateUserWithOptions(request: QueryAnyParamTemplateUserRequest, runtime: $RuntimeOptions): QueryAnyParamTemplateUserResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryAnyParamTemplateUser',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryAnyParamTemplateUserRequest
 * @return QueryAnyParamTemplateUserResponse
 */
async function queryAnyParamTemplateUser(request: QueryAnyParamTemplateUserRequest): QueryAnyParamTemplateUserResponse {
  var runtime = new $RuntimeOptions{};
  return queryAnyParamTemplateUserWithOptions(request, runtime);
}

model QueryAuthorizationRequest {
  authorizeCode?: string(name='AuthorizeCode'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryAuthorizationResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      aliyunUid?: long(name='AliyunUid'),
      authorizeCode?: string(name='AuthorizeCode'),
      authorizeStatus?: boolean(name='AuthorizeStatus'),
      authorizeTime?: string(name='AuthorizeTime'),
      productCode?: string(name='ProductCode'),
      unAuthorizeTime?: string(name='UnAuthorizeTime'),
    }
  ](name='Result'),
}

model QueryAuthorizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAuthorizationResponseBody(name='body'),
}

/**
 * @summary 获取授权状态
 *
 * @param request QueryAuthorizationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryAuthorizationResponse
 */
async function queryAuthorizationWithOptions(request: QueryAuthorizationRequest, runtime: $RuntimeOptions): QueryAuthorizationResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.authorizeCode)) {
    query['AuthorizeCode'] = request.authorizeCode;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryAuthorization',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取授权状态
 *
 * @param request QueryAuthorizationRequest
 * @return QueryAuthorizationResponse
 */
async function queryAuthorization(request: QueryAuthorizationRequest): QueryAuthorizationResponse {
  var runtime = new $RuntimeOptions{};
  return queryAuthorizationWithOptions(request, runtime);
}

model QueryBillingStatisticsRequest {
  billCycle?: string(name='BillCycle'),
  itemName?: string(name='ItemName'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryBillingStatisticsResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryBillingStatisticsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryBillingStatisticsResponseBody(name='body'),
}

/**
 * @param request QueryBillingStatisticsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryBillingStatisticsResponse
 */
async function queryBillingStatisticsWithOptions(request: QueryBillingStatisticsRequest, runtime: $RuntimeOptions): QueryBillingStatisticsResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.billCycle)) {
    query['BillCycle'] = request.billCycle;
  }
  if (!$isNull(request.itemName)) {
    query['ItemName'] = request.itemName;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryBillingStatistics',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryBillingStatisticsRequest
 * @return QueryBillingStatisticsResponse
 */
async function queryBillingStatistics(request: QueryBillingStatisticsRequest): QueryBillingStatisticsResponse {
  var runtime = new $RuntimeOptions{};
  return queryBillingStatisticsWithOptions(request, runtime);
}

model QueryCardMessageQueueRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  queueTypes?: string(name='QueueTypes', description='This parameter is required.'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryCardMessageQueueResponseBody = {
  list?: [ 
    {
      isCreated?: boolean(name='IsCreated'),
      queueName?: string(name='QueueName'),
      queueType?: string(name='QueueType'),
      region?: string(name='Region'),
    }
  ](name='List'),
  requestId?: string(name='RequestId'),
}

model QueryCardMessageQueueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryCardMessageQueueResponseBody(name='body'),
}

/**
 * @param request QueryCardMessageQueueRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryCardMessageQueueResponse
 */
async function queryCardMessageQueueWithOptions(request: QueryCardMessageQueueRequest, runtime: $RuntimeOptions): QueryCardMessageQueueResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.queueTypes)) {
    query['QueueTypes'] = request.queueTypes;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryCardMessageQueue',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryCardMessageQueueRequest
 * @return QueryCardMessageQueueResponse
 */
async function queryCardMessageQueue(request: QueryCardMessageQueueRequest): QueryCardMessageQueueResponse {
  var runtime = new $RuntimeOptions{};
  return queryCardMessageQueueWithOptions(request, runtime);
}

model QueryCardSendExportInfoRequest {
  pageNo?: long(name='PageNo'),
  pageSize?: long(name='PageSize'),
  status?: long(name='Status'),
  type?: long(name='Type'),
}

model QueryCardSendExportInfoResponseBody = {
  code?: string(name='Code'),
  model?: {
    pageNo?: long(name='PageNo'),
    pageSize?: long(name='PageSize'),
    records?: [ 
      {
        ext?: string(name='Ext'),
        fileName?: string(name='FileName'),
        gmtCreate?: long(name='GmtCreate'),
        gmtModified?: long(name='GmtModified'),
        id?: long(name='Id'),
        ossUrl?: string(name='OssUrl'),
        pid?: long(name='Pid'),
        status?: long(name='Status'),
        type?: long(name='Type'),
        userId?: string(name='UserId'),
      }
    ](name='Records'),
    totalCount?: long(name='TotalCount'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryCardSendExportInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryCardSendExportInfoResponseBody(name='body'),
}

/**
 * @summary 查询发送记录导出信息
 *
 * @param request QueryCardSendExportInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryCardSendExportInfoResponse
 */
async function queryCardSendExportInfoWithOptions(request: QueryCardSendExportInfoRequest, runtime: $RuntimeOptions): QueryCardSendExportInfoResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.status)) {
    query['Status'] = request.status;
  }
  if (!$isNull(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryCardSendExportInfo',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询发送记录导出信息
 *
 * @param request QueryCardSendExportInfoRequest
 * @return QueryCardSendExportInfoResponse
 */
async function queryCardSendExportInfo(request: QueryCardSendExportInfoRequest): QueryCardSendExportInfoResponse {
  var runtime = new $RuntimeOptions{};
  return queryCardSendExportInfoWithOptions(request, runtime);
}

model QueryCardSmsHistoryRequest {
  apiSend?: long(name='ApiSend'),
  cardTemplateType?: string(name='CardTemplateType'),
  gmtCreate?: string(name='GmtCreate'),
  maxId?: long(name='MaxId'),
  minId?: long(name='MinId'),
  pageNo?: long(name='PageNo'),
  pageSize?: long(name='PageSize'),
  receiveState?: long(name='ReceiveState'),
  receiver?: string(name='Receiver'),
  renderState?: long(name='RenderState'),
  signName?: string(name='SignName'),
  tmpCode?: string(name='TmpCode'),
  type?: long(name='Type'),
}

model QueryCardSmsHistoryResponseBody = {
  code?: string(name='Code'),
  model?: {
    pageNo?: long(name='PageNo'),
    pageSize?: long(name='PageSize'),
    records?: [ 
      {
        acceptDate?: long(name='AcceptDate'),
        apiSend?: long(name='ApiSend'),
        cardTemplateType?: string(name='CardTemplateType'),
        customTmpCode?: string(name='CustomTmpCode'),
        description?: string(name='Description'),
        fuuId?: string(name='FuuId'),
        gmtCreate?: long(name='GmtCreate'),
        gmtModified?: long(name='GmtModified'),
        id?: long(name='Id'),
        isSupport?: long(name='IsSupport'),
        outId?: string(name='OutId'),
        pid?: long(name='Pid'),
        receiveState?: long(name='ReceiveState'),
        receiver?: string(name='Receiver'),
        renderDate?: long(name='RenderDate'),
        renderState?: long(name='RenderState'),
        shortUrl?: string(name='ShortUrl'),
        signName?: string(name='SignName'),
        smsContent?: string(name='SmsContent'),
        suggestion?: string(name='Suggestion'),
        tmpCode?: string(name='TmpCode'),
        tmpId?: string(name='TmpId'),
        tmpType?: long(name='TmpType'),
        tmpTypeName?: string(name='TmpTypeName'),
      }
    ](name='Records'),
    totalCount?: long(name='TotalCount'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryCardSmsHistoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryCardSmsHistoryResponseBody(name='body'),
}

/**
 * @summary 分页查询发送纪录信息
 *
 * @param request QueryCardSmsHistoryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryCardSmsHistoryResponse
 */
async function queryCardSmsHistoryWithOptions(request: QueryCardSmsHistoryRequest, runtime: $RuntimeOptions): QueryCardSmsHistoryResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.apiSend)) {
    query['ApiSend'] = request.apiSend;
  }
  if (!$isNull(request.cardTemplateType)) {
    query['CardTemplateType'] = request.cardTemplateType;
  }
  if (!$isNull(request.gmtCreate)) {
    query['GmtCreate'] = request.gmtCreate;
  }
  if (!$isNull(request.maxId)) {
    query['MaxId'] = request.maxId;
  }
  if (!$isNull(request.minId)) {
    query['MinId'] = request.minId;
  }
  if (!$isNull(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.receiveState)) {
    query['ReceiveState'] = request.receiveState;
  }
  if (!$isNull(request.receiver)) {
    query['Receiver'] = request.receiver;
  }
  if (!$isNull(request.renderState)) {
    query['RenderState'] = request.renderState;
  }
  if (!$isNull(request.signName)) {
    query['SignName'] = request.signName;
  }
  if (!$isNull(request.tmpCode)) {
    query['TmpCode'] = request.tmpCode;
  }
  if (!$isNull(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryCardSmsHistory',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 分页查询发送纪录信息
 *
 * @param request QueryCardSmsHistoryRequest
 * @return QueryCardSmsHistoryResponse
 */
async function queryCardSmsHistory(request: QueryCardSmsHistoryRequest): QueryCardSmsHistoryResponse {
  var runtime = new $RuntimeOptions{};
  return queryCardSmsHistoryWithOptions(request, runtime);
}

model QueryCardSmsHistoryDetailRequest {
  gmtCreate?: string(name='GmtCreate', description='This parameter is required.'),
  id?: string(name='Id'),
}

model QueryCardSmsHistoryDetailResponseBody = {
  code?: string(name='Code'),
  model?: string(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryCardSmsHistoryDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryCardSmsHistoryDetailResponseBody(name='body'),
}

/**
 * @summary 查询发送纪录信息详情
 *
 * @param request QueryCardSmsHistoryDetailRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryCardSmsHistoryDetailResponse
 */
async function queryCardSmsHistoryDetailWithOptions(request: QueryCardSmsHistoryDetailRequest, runtime: $RuntimeOptions): QueryCardSmsHistoryDetailResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.gmtCreate)) {
    query['GmtCreate'] = request.gmtCreate;
  }
  if (!$isNull(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryCardSmsHistoryDetail',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询发送纪录信息详情
 *
 * @param request QueryCardSmsHistoryDetailRequest
 * @return QueryCardSmsHistoryDetailResponse
 */
async function queryCardSmsHistoryDetail(request: QueryCardSmsHistoryDetailRequest): QueryCardSmsHistoryDetailResponse {
  var runtime = new $RuntimeOptions{};
  return queryCardSmsHistoryDetailWithOptions(request, runtime);
}

model QueryCardSmsStatisticsRequest {
  customTmpCode?: string(name='CustomTmpCode'),
  pageNo?: long(name='PageNo', description='This parameter is required.'),
  pageSize?: long(name='PageSize', description='This parameter is required.'),
  sendDateEnd?: string(name='SendDateEnd'),
  sendDateStart?: string(name='SendDateStart'),
  signName?: string(name='SignName'),
  tmpCode?: string(name='TmpCode'),
  tmpName?: string(name='TmpName'),
}

model QueryCardSmsStatisticsResponseBody = {
  code?: string(name='Code'),
  model?: {
    pageNo?: long(name='PageNo'),
    pageSize?: long(name='PageSize'),
    records?: [ 
      {
        renderSuccessTotal?: long(name='RenderSuccessTotal'),
        sendDate?: string(name='SendDate'),
        signName?: string(name='SignName'),
        tmpCode?: string(name='TmpCode'),
        tmpName?: string(name='TmpName'),
        urlGenerateTotal?: long(name='UrlGenerateTotal'),
      }
    ](name='Records'),
    totalCount?: long(name='TotalCount'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryCardSmsStatisticsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryCardSmsStatisticsResponseBody(name='body'),
}

/**
 * @summary 分页查询发送统计信息-解析统计
 *
 * @param request QueryCardSmsStatisticsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryCardSmsStatisticsResponse
 */
async function queryCardSmsStatisticsWithOptions(request: QueryCardSmsStatisticsRequest, runtime: $RuntimeOptions): QueryCardSmsStatisticsResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.customTmpCode)) {
    query['CustomTmpCode'] = request.customTmpCode;
  }
  if (!$isNull(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.sendDateEnd)) {
    query['SendDateEnd'] = request.sendDateEnd;
  }
  if (!$isNull(request.sendDateStart)) {
    query['SendDateStart'] = request.sendDateStart;
  }
  if (!$isNull(request.signName)) {
    query['SignName'] = request.signName;
  }
  if (!$isNull(request.tmpCode)) {
    query['TmpCode'] = request.tmpCode;
  }
  if (!$isNull(request.tmpName)) {
    query['TmpName'] = request.tmpName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryCardSmsStatistics',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 分页查询发送统计信息-解析统计
 *
 * @param request QueryCardSmsStatisticsRequest
 * @return QueryCardSmsStatisticsResponse
 */
async function queryCardSmsStatistics(request: QueryCardSmsStatisticsRequest): QueryCardSmsStatisticsResponse {
  var runtime = new $RuntimeOptions{};
  return queryCardSmsStatisticsWithOptions(request, runtime);
}

model QueryCardSmsStatisticsListRequest {
  customTmpCode?: string(name='CustomTmpCode'),
  sendDateEnd?: string(name='SendDateEnd'),
  sendDateStart?: string(name='SendDateStart'),
  signName?: string(name='SignName'),
  tmpCode?: string(name='TmpCode'),
  tmpName?: string(name='TmpName'),
}

model QueryCardSmsStatisticsListResponseBody = {
  code?: string(name='Code'),
  model?: [ 
    {
      renderSuccessTotal?: long(name='RenderSuccessTotal'),
      sendDate?: string(name='SendDate'),
      urlGenerateTotal?: long(name='UrlGenerateTotal'),
    }
  ](name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryCardSmsStatisticsListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryCardSmsStatisticsListResponseBody(name='body'),
}

/**
 * @summary 按时间查询发送统计信息-解析统计
 *
 * @param request QueryCardSmsStatisticsListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryCardSmsStatisticsListResponse
 */
async function queryCardSmsStatisticsListWithOptions(request: QueryCardSmsStatisticsListRequest, runtime: $RuntimeOptions): QueryCardSmsStatisticsListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.customTmpCode)) {
    query['CustomTmpCode'] = request.customTmpCode;
  }
  if (!$isNull(request.sendDateEnd)) {
    query['SendDateEnd'] = request.sendDateEnd;
  }
  if (!$isNull(request.sendDateStart)) {
    query['SendDateStart'] = request.sendDateStart;
  }
  if (!$isNull(request.signName)) {
    query['SignName'] = request.signName;
  }
  if (!$isNull(request.tmpCode)) {
    query['TmpCode'] = request.tmpCode;
  }
  if (!$isNull(request.tmpName)) {
    query['TmpName'] = request.tmpName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryCardSmsStatisticsList',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 按时间查询发送统计信息-解析统计
 *
 * @param request QueryCardSmsStatisticsListRequest
 * @return QueryCardSmsStatisticsListResponse
 */
async function queryCardSmsStatisticsList(request: QueryCardSmsStatisticsListRequest): QueryCardSmsStatisticsListResponse {
  var runtime = new $RuntimeOptions{};
  return queryCardSmsStatisticsListWithOptions(request, runtime);
}

model QueryCardSmsStatisticsSendRequest {
  customTmpCode?: string(name='CustomTmpCode'),
  pageNo?: long(name='PageNo', description='This parameter is required.'),
  pageSize?: long(name='PageSize', description='This parameter is required.'),
  sendDateEnd?: string(name='SendDateEnd'),
  sendDateStart?: string(name='SendDateStart'),
  signName?: string(name='SignName'),
  tmpCode?: string(name='TmpCode'),
}

model QueryCardSmsStatisticsSendResponseBody = {
  code?: string(name='Code'),
  model?: {
    pageNo?: long(name='PageNo'),
    pageSize?: long(name='PageSize'),
    records?: [ 
      {
        customTmpCode?: string(name='CustomTmpCode'),
        renderSuccessRate?: double(name='RenderSuccessRate'),
        renderSuccessTotal?: long(name='RenderSuccessTotal'),
        sendDate?: string(name='SendDate'),
        sendFailTotal?: long(name='SendFailTotal'),
        sendProcessTotal?: long(name='SendProcessTotal'),
        sendSuccessRate?: double(name='SendSuccessRate'),
        sendSuccessTotal?: long(name='SendSuccessTotal'),
        sendTotal?: long(name='SendTotal'),
        signName?: string(name='SignName'),
        supportRate?: double(name='SupportRate'),
        supportTotal?: long(name='SupportTotal'),
        tmpCode?: string(name='TmpCode'),
      }
    ](name='Records'),
    totalCount?: long(name='TotalCount'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryCardSmsStatisticsSendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryCardSmsStatisticsSendResponseBody(name='body'),
}

/**
 * @summary 分页查询发送统计信息-发送+解析统计
 *
 * @param request QueryCardSmsStatisticsSendRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryCardSmsStatisticsSendResponse
 */
async function queryCardSmsStatisticsSendWithOptions(request: QueryCardSmsStatisticsSendRequest, runtime: $RuntimeOptions): QueryCardSmsStatisticsSendResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.customTmpCode)) {
    query['CustomTmpCode'] = request.customTmpCode;
  }
  if (!$isNull(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.sendDateEnd)) {
    query['SendDateEnd'] = request.sendDateEnd;
  }
  if (!$isNull(request.sendDateStart)) {
    query['SendDateStart'] = request.sendDateStart;
  }
  if (!$isNull(request.signName)) {
    query['SignName'] = request.signName;
  }
  if (!$isNull(request.tmpCode)) {
    query['TmpCode'] = request.tmpCode;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryCardSmsStatisticsSend',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 分页查询发送统计信息-发送+解析统计
 *
 * @param request QueryCardSmsStatisticsSendRequest
 * @return QueryCardSmsStatisticsSendResponse
 */
async function queryCardSmsStatisticsSend(request: QueryCardSmsStatisticsSendRequest): QueryCardSmsStatisticsSendResponse {
  var runtime = new $RuntimeOptions{};
  return queryCardSmsStatisticsSendWithOptions(request, runtime);
}

model QueryCardSmsStatisticsSendListRequest {
  customTmpCode?: string(name='CustomTmpCode'),
  sendDateEnd?: string(name='SendDateEnd'),
  sendDateStart?: string(name='SendDateStart'),
  signName?: string(name='SignName'),
  tmpCode?: string(name='TmpCode'),
}

model QueryCardSmsStatisticsSendListResponseBody = {
  code?: string(name='Code'),
  model?: [ 
    {
      renderSuccessRate?: double(name='RenderSuccessRate'),
      renderSuccessTotal?: long(name='RenderSuccessTotal'),
      sendDate?: string(name='SendDate'),
      sendFailTotal?: long(name='SendFailTotal'),
      sendProcessTotal?: long(name='SendProcessTotal'),
      sendSuccessRate?: double(name='SendSuccessRate'),
      sendSuccessTotal?: long(name='SendSuccessTotal'),
      sendTotal?: long(name='SendTotal'),
      supportRate?: double(name='SupportRate'),
      supportTotal?: long(name='SupportTotal'),
    }
  ](name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryCardSmsStatisticsSendListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryCardSmsStatisticsSendListResponseBody(name='body'),
}

/**
 * @summary 按日期查询发送统计信息-发送+解析统计
 *
 * @param request QueryCardSmsStatisticsSendListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryCardSmsStatisticsSendListResponse
 */
async function queryCardSmsStatisticsSendListWithOptions(request: QueryCardSmsStatisticsSendListRequest, runtime: $RuntimeOptions): QueryCardSmsStatisticsSendListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.customTmpCode)) {
    query['CustomTmpCode'] = request.customTmpCode;
  }
  if (!$isNull(request.sendDateEnd)) {
    query['SendDateEnd'] = request.sendDateEnd;
  }
  if (!$isNull(request.sendDateStart)) {
    query['SendDateStart'] = request.sendDateStart;
  }
  if (!$isNull(request.signName)) {
    query['SignName'] = request.signName;
  }
  if (!$isNull(request.tmpCode)) {
    query['TmpCode'] = request.tmpCode;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryCardSmsStatisticsSendList',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 按日期查询发送统计信息-发送+解析统计
 *
 * @param request QueryCardSmsStatisticsSendListRequest
 * @return QueryCardSmsStatisticsSendListResponse
 */
async function queryCardSmsStatisticsSendList(request: QueryCardSmsStatisticsSendListRequest): QueryCardSmsStatisticsSendListResponse {
  var runtime = new $RuntimeOptions{};
  return queryCardSmsStatisticsSendListWithOptions(request, runtime);
}

model QueryCommonCustInfoRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryCommonCustInfoResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryCommonCustInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryCommonCustInfoResponseBody(name='body'),
}

/**
 * @param request QueryCommonCustInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryCommonCustInfoResponse
 */
async function queryCommonCustInfoWithOptions(request: QueryCommonCustInfoRequest, runtime: $RuntimeOptions): QueryCommonCustInfoResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryCommonCustInfo',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryCommonCustInfoRequest
 * @return QueryCommonCustInfoResponse
 */
async function queryCommonCustInfo(request: QueryCommonCustInfoRequest): QueryCommonCustInfoResponse {
  var runtime = new $RuntimeOptions{};
  return queryCommonCustInfoWithOptions(request, runtime);
}

model QueryContactsListRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryContactsListResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryContactsListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryContactsListResponseBody(name='body'),
}

/**
 * @param request QueryContactsListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryContactsListResponse
 */
async function queryContactsListWithOptions(request: QueryContactsListRequest, runtime: $RuntimeOptions): QueryContactsListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryContactsList',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryContactsListRequest
 * @return QueryContactsListResponse
 */
async function queryContactsList(request: QueryContactsListRequest): QueryContactsListResponse {
  var runtime = new $RuntimeOptions{};
  return queryContactsListWithOptions(request, runtime);
}

model QueryContactsListNewRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryContactsListNewResponseBody = {
  list?: [ 
    {
      email?: string(name='Email'),
      id?: long(name='Id'),
      name?: string(name='Name'),
      openPkgWarning?: int32(name='OpenPkgWarning'),
      openPreventBrushWarning?: int32(name='OpenPreventBrushWarning'),
      openSendWarning?: int32(name='OpenSendWarning'),
      phone?: string(name='Phone'),
      receiveSignTemplateAuditResult?: int32(name='ReceiveSignTemplateAuditResult'),
    }
  ](name='List'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model QueryContactsListNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryContactsListNewResponseBody(name='body'),
}

/**
 * @param request QueryContactsListNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryContactsListNewResponse
 */
async function queryContactsListNewWithOptions(request: QueryContactsListNewRequest, runtime: $RuntimeOptions): QueryContactsListNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryContactsListNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryContactsListNewRequest
 * @return QueryContactsListNewResponse
 */
async function queryContactsListNew(request: QueryContactsListNewRequest): QueryContactsListNewResponse {
  var runtime = new $RuntimeOptions{};
  return queryContactsListNewWithOptions(request, runtime);
}

model QueryDailyBillInfoLeafNewRequest {
  billCycle?: string(name='BillCycle'),
  itemId?: string(name='ItemId'),
  itemName?: string(name='ItemName'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  subjectItemId?: string(name='SubjectItemId'),
}

model QueryDailyBillInfoLeafNewResponseBody = {
  list?: {
    dailyBillDetailInfoDTO?: [ 
    {
      addCount?: long(name='AddCount'),
      addDate?: string(name='AddDate'),
      addUnit?: string(name='AddUnit'),
      billAmount?: string(name='BillAmount'),
      detailItemName?: string(name='DetailItemName'),
      singlePrice?: string(name='SinglePrice'),
    }
  ](name='DailyBillDetailInfoDTO')
  }(name='List'),
  requestId?: string(name='RequestId'),
}

model QueryDailyBillInfoLeafNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDailyBillInfoLeafNewResponseBody(name='body'),
}

/**
 * @param request QueryDailyBillInfoLeafNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryDailyBillInfoLeafNewResponse
 */
async function queryDailyBillInfoLeafNewWithOptions(request: QueryDailyBillInfoLeafNewRequest, runtime: $RuntimeOptions): QueryDailyBillInfoLeafNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.billCycle)) {
    query['BillCycle'] = request.billCycle;
  }
  if (!$isNull(request.itemId)) {
    query['ItemId'] = request.itemId;
  }
  if (!$isNull(request.itemName)) {
    query['ItemName'] = request.itemName;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.subjectItemId)) {
    query['SubjectItemId'] = request.subjectItemId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryDailyBillInfoLeafNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryDailyBillInfoLeafNewRequest
 * @return QueryDailyBillInfoLeafNewResponse
 */
async function queryDailyBillInfoLeafNew(request: QueryDailyBillInfoLeafNewRequest): QueryDailyBillInfoLeafNewResponse {
  var runtime = new $RuntimeOptions{};
  return queryDailyBillInfoLeafNewWithOptions(request, runtime);
}

model QueryDigitalTemplateDetailRequest {
  auditState?: string(name='AuditState'),
  bizType?: string(name='BizType'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateCode?: string(name='TemplateCode'),
  templateName?: string(name='TemplateName'),
}

model QueryDigitalTemplateDetailResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryDigitalTemplateDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDigitalTemplateDetailResponseBody(name='body'),
}

/**
 * @param request QueryDigitalTemplateDetailRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryDigitalTemplateDetailResponse
 */
async function queryDigitalTemplateDetailWithOptions(request: QueryDigitalTemplateDetailRequest, runtime: $RuntimeOptions): QueryDigitalTemplateDetailResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.auditState)) {
    query['AuditState'] = request.auditState;
  }
  if (!$isNull(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  if (!$isNull(request.templateName)) {
    query['TemplateName'] = request.templateName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryDigitalTemplateDetail',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryDigitalTemplateDetailRequest
 * @return QueryDigitalTemplateDetailResponse
 */
async function queryDigitalTemplateDetail(request: QueryDigitalTemplateDetailRequest): QueryDigitalTemplateDetailResponse {
  var runtime = new $RuntimeOptions{};
  return queryDigitalTemplateDetailWithOptions(request, runtime);
}

model QueryDigitalTemplateDetailNewRequest {
  auditState?: string(name='AuditState'),
  bizType?: string(name='BizType'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateCode?: string(name='TemplateCode'),
  templateName?: string(name='TemplateName'),
}

model QueryDigitalTemplateDetailNewResponseBody = {
  auditInfo?: string(name='AuditInfo'),
  auditRemarkInfo?: string(name='AuditRemarkInfo'),
  auditState?: string(name='AuditState'),
  bizType?: string(name='BizType'),
  expireDateStr?: string(name='ExpireDateStr'),
  gmtCreateStr?: string(name='GmtCreateStr'),
  id?: string(name='Id'),
  isAnyParam?: boolean(name='IsAnyParam'),
  isDefaultTemplate?: boolean(name='IsDefaultTemplate'),
  isRecently?: boolean(name='IsRecently'),
  orderId?: string(name='OrderId'),
  ossKeys?: {
    ossKey?: [ string ](name='OssKey')
  }(name='OssKeys'),
  passErrType?: string(name='PassErrType'),
  remark?: string(name='Remark'),
  requestId?: string(name='RequestId'),
  signType?: int32(name='SignType'),
  smsContent?: string(name='SmsContent'),
  supportVendor?: string(name='SupportVendor'),
  tags?: {
    tag?: [ 
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='Tag')
  }(name='Tags'),
  templateCode?: string(name='TemplateCode'),
  templateContent?: string(name='TemplateContent'),
  templateName?: string(name='TemplateName'),
  templateRule?: string(name='TemplateRule'),
}

model QueryDigitalTemplateDetailNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDigitalTemplateDetailNewResponseBody(name='body'),
}

/**
 * @param request QueryDigitalTemplateDetailNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryDigitalTemplateDetailNewResponse
 */
async function queryDigitalTemplateDetailNewWithOptions(request: QueryDigitalTemplateDetailNewRequest, runtime: $RuntimeOptions): QueryDigitalTemplateDetailNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.auditState)) {
    query['AuditState'] = request.auditState;
  }
  if (!$isNull(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  if (!$isNull(request.templateName)) {
    query['TemplateName'] = request.templateName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryDigitalTemplateDetailNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryDigitalTemplateDetailNewRequest
 * @return QueryDigitalTemplateDetailNewResponse
 */
async function queryDigitalTemplateDetailNew(request: QueryDigitalTemplateDetailNewRequest): QueryDigitalTemplateDetailNewResponse {
  var runtime = new $RuntimeOptions{};
  return queryDigitalTemplateDetailNewWithOptions(request, runtime);
}

model QueryDigitalTemplateLastRangeRequest {
  bizType?: string(name='BizType'),
  limit?: int32(name='Limit'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateName?: string(name='TemplateName'),
}

model QueryDigitalTemplateLastRangeResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryDigitalTemplateLastRangeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDigitalTemplateLastRangeResponseBody(name='body'),
}

/**
 * @param request QueryDigitalTemplateLastRangeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryDigitalTemplateLastRangeResponse
 */
async function queryDigitalTemplateLastRangeWithOptions(request: QueryDigitalTemplateLastRangeRequest, runtime: $RuntimeOptions): QueryDigitalTemplateLastRangeResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!$isNull(request.limit)) {
    query['Limit'] = request.limit;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.templateName)) {
    query['TemplateName'] = request.templateName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryDigitalTemplateLastRange',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryDigitalTemplateLastRangeRequest
 * @return QueryDigitalTemplateLastRangeResponse
 */
async function queryDigitalTemplateLastRange(request: QueryDigitalTemplateLastRangeRequest): QueryDigitalTemplateLastRangeResponse {
  var runtime = new $RuntimeOptions{};
  return queryDigitalTemplateLastRangeWithOptions(request, runtime);
}

model QueryDigitalTemplateLastRangeNewRequest {
  auditState?: string(name='AuditState'),
  bizType?: string(name='BizType'),
  ownerId?: long(name='OwnerId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  prodCode?: string(name='ProdCode'),
  prodType?: string(name='ProdType'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateName?: string(name='TemplateName'),
}

model QueryDigitalTemplateLastRangeNewResponseBody = {
  list?: {
    smsTemplate?: [ 
    {
      auditInfo?: string(name='AuditInfo'),
      auditRemarkInfo?: string(name='AuditRemarkInfo'),
      auditState?: string(name='AuditState'),
      bizType?: string(name='BizType'),
      expireDateStr?: string(name='ExpireDateStr'),
      gmtCreateStr?: string(name='GmtCreateStr'),
      id?: string(name='Id'),
      isAnyParam?: boolean(name='IsAnyParam'),
      isDefaultTemplate?: boolean(name='IsDefaultTemplate'),
      isRecently?: boolean(name='IsRecently'),
      orderId?: string(name='OrderId'),
      passErrType?: string(name='PassErrType'),
      remark?: string(name='Remark'),
      signType?: int32(name='SignType'),
      smsContent?: string(name='SmsContent'),
      supportVendor?: string(name='SupportVendor'),
      templateCode?: string(name='TemplateCode'),
      templateContent?: string(name='TemplateContent'),
      templateName?: string(name='TemplateName'),
      templateRule?: string(name='TemplateRule'),
    }
  ](name='SmsTemplate')
  }(name='List'),
  requestId?: string(name='RequestId'),
  tags?: {
    tag?: [ 
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='Tag')
  }(name='Tags'),
}

model QueryDigitalTemplateLastRangeNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDigitalTemplateLastRangeNewResponseBody(name='body'),
}

/**
 * @param request QueryDigitalTemplateLastRangeNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryDigitalTemplateLastRangeNewResponse
 */
async function queryDigitalTemplateLastRangeNewWithOptions(request: QueryDigitalTemplateLastRangeNewRequest, runtime: $RuntimeOptions): QueryDigitalTemplateLastRangeNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.auditState)) {
    query['AuditState'] = request.auditState;
  }
  if (!$isNull(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.prodType)) {
    query['ProdType'] = request.prodType;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.templateName)) {
    query['TemplateName'] = request.templateName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryDigitalTemplateLastRangeNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryDigitalTemplateLastRangeNewRequest
 * @return QueryDigitalTemplateLastRangeNewResponse
 */
async function queryDigitalTemplateLastRangeNew(request: QueryDigitalTemplateLastRangeNewRequest): QueryDigitalTemplateLastRangeNewResponse {
  var runtime = new $RuntimeOptions{};
  return queryDigitalTemplateLastRangeNewWithOptions(request, runtime);
}

model QueryDigitalTemplatePageListRequest {
  auditState?: string(name='AuditState'),
  bizType?: string(name='BizType'),
  ownerId?: long(name='OwnerId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateCode?: string(name='TemplateCode'),
  templateName?: string(name='TemplateName'),
}

model QueryDigitalTemplatePageListResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryDigitalTemplatePageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDigitalTemplatePageListResponseBody(name='body'),
}

/**
 * @param request QueryDigitalTemplatePageListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryDigitalTemplatePageListResponse
 */
async function queryDigitalTemplatePageListWithOptions(request: QueryDigitalTemplatePageListRequest, runtime: $RuntimeOptions): QueryDigitalTemplatePageListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.auditState)) {
    query['AuditState'] = request.auditState;
  }
  if (!$isNull(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  if (!$isNull(request.templateName)) {
    query['TemplateName'] = request.templateName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryDigitalTemplatePageList',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryDigitalTemplatePageListRequest
 * @return QueryDigitalTemplatePageListResponse
 */
async function queryDigitalTemplatePageList(request: QueryDigitalTemplatePageListRequest): QueryDigitalTemplatePageListResponse {
  var runtime = new $RuntimeOptions{};
  return queryDigitalTemplatePageListWithOptions(request, runtime);
}

model QueryDigitalTemplatePageListNewRequest {
  auditState?: string(name='AuditState'),
  bizType?: string(name='BizType'),
  ownerId?: long(name='OwnerId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateCode?: string(name='TemplateCode'),
  templateName?: string(name='TemplateName'),
}

model QueryDigitalTemplatePageListNewResponseBody = {
  list?: {
    smsTemplate?: [ 
    {
      auditInfo?: string(name='AuditInfo'),
      auditRemarkInfo?: string(name='AuditRemarkInfo'),
      auditState?: string(name='AuditState'),
      bizType?: string(name='BizType'),
      expireDateStr?: string(name='ExpireDateStr'),
      gmtCreateStr?: string(name='GmtCreateStr'),
      id?: string(name='Id'),
      isAnyParam?: boolean(name='IsAnyParam'),
      isDefaultTemplate?: boolean(name='IsDefaultTemplate'),
      isRecently?: boolean(name='IsRecently'),
      orderId?: string(name='OrderId'),
      passErrType?: string(name='PassErrType'),
      remark?: string(name='Remark'),
      signType?: int32(name='SignType'),
      smsContent?: string(name='SmsContent'),
      supportVendor?: string(name='SupportVendor'),
      tags?: {
        tag?: [ 
        {
          resourceId?: string(name='ResourceId'),
          resourceType?: string(name='ResourceType'),
          tagKey?: string(name='TagKey'),
          tagValue?: string(name='TagValue'),
        }
      ](name='Tag')
      }(name='Tags'),
      templateCode?: string(name='TemplateCode'),
      templateContent?: string(name='TemplateContent'),
      templateName?: string(name='TemplateName'),
      templateRule?: string(name='TemplateRule'),
    }
  ](name='SmsTemplate')
  }(name='List'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model QueryDigitalTemplatePageListNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDigitalTemplatePageListNewResponseBody(name='body'),
}

/**
 * @param request QueryDigitalTemplatePageListNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryDigitalTemplatePageListNewResponse
 */
async function queryDigitalTemplatePageListNewWithOptions(request: QueryDigitalTemplatePageListNewRequest, runtime: $RuntimeOptions): QueryDigitalTemplatePageListNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.auditState)) {
    query['AuditState'] = request.auditState;
  }
  if (!$isNull(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  if (!$isNull(request.templateName)) {
    query['TemplateName'] = request.templateName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryDigitalTemplatePageListNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryDigitalTemplatePageListNewRequest
 * @return QueryDigitalTemplatePageListNewResponse
 */
async function queryDigitalTemplatePageListNew(request: QueryDigitalTemplatePageListNewRequest): QueryDigitalTemplatePageListNewResponse {
  var runtime = new $RuntimeOptions{};
  return queryDigitalTemplatePageListNewWithOptions(request, runtime);
}

model QueryDomainListRequest {
  domain?: string(name='Domain'),
  ownerId?: long(name='OwnerId'),
  pageNo?: long(name='PageNo'),
  pageSize?: string(name='PageSize'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryDomainListResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model QueryDomainListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDomainListResponseBody(name='body'),
}

/**
 * @param request QueryDomainListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryDomainListResponse
 */
async function queryDomainListWithOptions(request: QueryDomainListRequest, runtime: $RuntimeOptions): QueryDomainListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryDomainList',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryDomainListRequest
 * @return QueryDomainListResponse
 */
async function queryDomainList(request: QueryDomainListRequest): QueryDomainListResponse {
  var runtime = new $RuntimeOptions{};
  return queryDomainListWithOptions(request, runtime);
}

model QueryDomainListNewRequest {
  domain?: string(name='Domain'),
  ownerId?: long(name='OwnerId'),
  pageNo?: long(name='PageNo'),
  pageSize?: string(name='PageSize'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryDomainListNewResponseBody = {
  list?: [ 
    {
      auditStatus?: int32(name='AuditStatus'),
      domain?: string(name='Domain'),
      gmtCreate?: string(name='GmtCreate'),
    }
  ](name='List'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model QueryDomainListNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDomainListNewResponseBody(name='body'),
}

/**
 * @param request QueryDomainListNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryDomainListNewResponse
 */
async function queryDomainListNewWithOptions(request: QueryDomainListNewRequest, runtime: $RuntimeOptions): QueryDomainListNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryDomainListNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryDomainListNewRequest
 * @return QueryDomainListNewResponse
 */
async function queryDomainListNew(request: QueryDomainListNewRequest): QueryDomainListNewResponse {
  var runtime = new $RuntimeOptions{};
  return queryDomainListNewWithOptions(request, runtime);
}

model QueryExportSendRecordListNewRequest {
  applyStatus?: int32(name='ApplyStatus'),
  bizType?: string(name='BizType', example='SMS_TEMPLATE_EXPORT / SMS_SIGN_EXPORT'),
  ownerId?: long(name='OwnerId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryExportSendRecordListNewResponseBody = {
  list?: {
    fcFileUpInsResponse?: [ 
    {
      fileFeature?: string(name='FileFeature'),
      fileUrl?: string(name='FileUrl'),
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      handlerStatus?: int32(name='HandlerStatus'),
      id?: long(name='Id'),
    }
  ](name='FcFileUpInsResponse')
  }(name='List'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model QueryExportSendRecordListNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryExportSendRecordListNewResponseBody(name='body'),
}

/**
 * @param request QueryExportSendRecordListNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryExportSendRecordListNewResponse
 */
async function queryExportSendRecordListNewWithOptions(request: QueryExportSendRecordListNewRequest, runtime: $RuntimeOptions): QueryExportSendRecordListNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.applyStatus)) {
    query['ApplyStatus'] = request.applyStatus;
  }
  if (!$isNull(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryExportSendRecordListNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryExportSendRecordListNewRequest
 * @return QueryExportSendRecordListNewResponse
 */
async function queryExportSendRecordListNew(request: QueryExportSendRecordListNewRequest): QueryExportSendRecordListNewResponse {
  var runtime = new $RuntimeOptions{};
  return queryExportSendRecordListNewWithOptions(request, runtime);
}

model QueryFailDetailDownloadRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: string(name='Status'),
  taskId?: long(name='TaskId', description='This parameter is required.'),
  taskInstanceId?: long(name='TaskInstanceId', description='This parameter is required.'),
}

model QueryFailDetailDownloadResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryFailDetailDownloadResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryFailDetailDownloadResponseBody(name='body'),
}

/**
 * @param request QueryFailDetailDownloadRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryFailDetailDownloadResponse
 */
async function queryFailDetailDownloadWithOptions(request: QueryFailDetailDownloadRequest, runtime: $RuntimeOptions): QueryFailDetailDownloadResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.status)) {
    query['Status'] = request.status;
  }
  if (!$isNull(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  if (!$isNull(request.taskInstanceId)) {
    query['TaskInstanceId'] = request.taskInstanceId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryFailDetailDownload',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryFailDetailDownloadRequest
 * @return QueryFailDetailDownloadResponse
 */
async function queryFailDetailDownload(request: QueryFailDetailDownloadRequest): QueryFailDetailDownloadResponse {
  var runtime = new $RuntimeOptions{};
  return queryFailDetailDownloadWithOptions(request, runtime);
}

model QueryFailDetailDownloadNewRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: string(name='Status'),
  taskId?: long(name='TaskId', description='This parameter is required.'),
  taskInstanceId?: long(name='TaskInstanceId', description='This parameter is required.'),
}

model QueryFailDetailDownloadNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model QueryFailDetailDownloadNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryFailDetailDownloadNewResponseBody(name='body'),
}

/**
 * @param request QueryFailDetailDownloadNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryFailDetailDownloadNewResponse
 */
async function queryFailDetailDownloadNewWithOptions(request: QueryFailDetailDownloadNewRequest, runtime: $RuntimeOptions): QueryFailDetailDownloadNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.status)) {
    query['Status'] = request.status;
  }
  if (!$isNull(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  if (!$isNull(request.taskInstanceId)) {
    query['TaskInstanceId'] = request.taskInstanceId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryFailDetailDownloadNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryFailDetailDownloadNewRequest
 * @return QueryFailDetailDownloadNewResponse
 */
async function queryFailDetailDownloadNew(request: QueryFailDetailDownloadNewRequest): QueryFailDetailDownloadNewResponse {
  var runtime = new $RuntimeOptions{};
  return queryFailDetailDownloadNewWithOptions(request, runtime);
}

model QueryFlowLimitRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryFlowLimitResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryFlowLimitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryFlowLimitResponseBody(name='body'),
}

/**
 * @param request QueryFlowLimitRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryFlowLimitResponse
 */
async function queryFlowLimitWithOptions(request: QueryFlowLimitRequest, runtime: $RuntimeOptions): QueryFlowLimitResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryFlowLimit',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryFlowLimitRequest
 * @return QueryFlowLimitResponse
 */
async function queryFlowLimit(request: QueryFlowLimitRequest): QueryFlowLimitResponse {
  var runtime = new $RuntimeOptions{};
  return queryFlowLimitWithOptions(request, runtime);
}

model QueryFlowLimitNewRequest {
  bizType?: string(name='BizType'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryFlowLimitNewResponseBody = {
  dailyLimit?: long(name='DailyLimit'),
  hourLimit?: long(name='HourLimit'),
  minuteLimit?: long(name='MinuteLimit'),
  requestId?: string(name='RequestId'),
}

model QueryFlowLimitNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryFlowLimitNewResponseBody(name='body'),
}

/**
 * @param request QueryFlowLimitNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryFlowLimitNewResponse
 */
async function queryFlowLimitNewWithOptions(request: QueryFlowLimitNewRequest, runtime: $RuntimeOptions): QueryFlowLimitNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryFlowLimitNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryFlowLimitNewRequest
 * @return QueryFlowLimitNewResponse
 */
async function queryFlowLimitNew(request: QueryFlowLimitNewRequest): QueryFlowLimitNewResponse {
  var runtime = new $RuntimeOptions{};
  return queryFlowLimitNewWithOptions(request, runtime);
}

model QueryIndexColRecordRequest {
  bizType?: string(name='BizType', description='This parameter is required.'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: string(name='Status'),
  taskId?: long(name='TaskId', description='This parameter is required.'),
  taskInstanceId?: long(name='TaskInstanceId', description='This parameter is required.'),
}

model QueryIndexColRecordResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryIndexColRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryIndexColRecordResponseBody(name='body'),
}

/**
 * @param request QueryIndexColRecordRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryIndexColRecordResponse
 */
async function queryIndexColRecordWithOptions(request: QueryIndexColRecordRequest, runtime: $RuntimeOptions): QueryIndexColRecordResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.status)) {
    query['Status'] = request.status;
  }
  if (!$isNull(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  if (!$isNull(request.taskInstanceId)) {
    query['TaskInstanceId'] = request.taskInstanceId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryIndexColRecord',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryIndexColRecordRequest
 * @return QueryIndexColRecordResponse
 */
async function queryIndexColRecord(request: QueryIndexColRecordRequest): QueryIndexColRecordResponse {
  var runtime = new $RuntimeOptions{};
  return queryIndexColRecordWithOptions(request, runtime);
}

model QueryLearningStatusNewRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  type?: string(name='Type'),
}

model QueryLearningStatusNewResponseBody = {
  learningStatus?: string(name='LearningStatus'),
  requestId?: string(name='RequestId'),
}

model QueryLearningStatusNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryLearningStatusNewResponseBody(name='body'),
}

/**
 * @param request QueryLearningStatusNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryLearningStatusNewResponse
 */
async function queryLearningStatusNewWithOptions(request: QueryLearningStatusNewRequest, runtime: $RuntimeOptions): QueryLearningStatusNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryLearningStatusNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryLearningStatusNewRequest
 * @return QueryLearningStatusNewResponse
 */
async function queryLearningStatusNew(request: QueryLearningStatusNewRequest): QueryLearningStatusNewResponse {
  var runtime = new $RuntimeOptions{};
  return queryLearningStatusNewWithOptions(request, runtime);
}

model QueryMarketingAssistantStatusRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryMarketingAssistantStatusResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model QueryMarketingAssistantStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMarketingAssistantStatusResponseBody(name='body'),
}

/**
 * @param request QueryMarketingAssistantStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryMarketingAssistantStatusResponse
 */
async function queryMarketingAssistantStatusWithOptions(request: QueryMarketingAssistantStatusRequest, runtime: $RuntimeOptions): QueryMarketingAssistantStatusResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryMarketingAssistantStatus',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryMarketingAssistantStatusRequest
 * @return QueryMarketingAssistantStatusResponse
 */
async function queryMarketingAssistantStatus(request: QueryMarketingAssistantStatusRequest): QueryMarketingAssistantStatusResponse {
  var runtime = new $RuntimeOptions{};
  return queryMarketingAssistantStatusWithOptions(request, runtime);
}

model QueryMessageCallbackNewRequest {
  bizType?: string(name='BizType'),
  callbackUrl?: string(name='CallbackUrl'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryMessageCallbackNewResponseBody = {
  aiccsCallMidRecordCallbackUrl?: string(name='AiccsCallMidRecordCallbackUrl'),
  aiccsCallRecordCallbackUrl?: string(name='AiccsCallRecordCallbackUrl'),
  aiccsSentRecordCallbackUrl?: string(name='AiccsSentRecordCallbackUrl'),
  artcCdrReportCallBackUrl?: string(name='ArtcCdrReportCallBackUrl'),
  artcTempStatusReportCallBackUrl?: string(name='ArtcTempStatusReportCallBackUrl'),
  cardDyncResCallbackUrl?: string(name='CardDyncResCallbackUrl'),
  cardTemplateCallBackUrl?: string(name='CardTemplateCallBackUrl'),
  cardVerderCallBackUrl?: string(name='CardVerderCallBackUrl'),
  dcdpCallbackUrl?: string(name='DcdpCallbackUrl'),
  digitSmsTemplateCallBackUrl?: string(name='DigitSmsTemplateCallBackUrl'),
  globeSmsReportCallback?: boolean(name='GlobeSmsReportCallback'),
  globeSmsReportCallbackUrl?: string(name='GlobeSmsReportCallbackUrl'),
  isAiccsCallMidRecord?: boolean(name='IsAiccsCallMidRecord'),
  isAiccsCallRecord?: boolean(name='IsAiccsCallRecord'),
  isAiccsSentRecord?: boolean(name='IsAiccsSentRecord'),
  isArtcCdrReportCallBack?: boolean(name='IsArtcCdrReportCallBack'),
  isArtcTempStatusReportCallBack?: boolean(name='IsArtcTempStatusReportCallBack'),
  isDcdpCallback?: boolean(name='IsDcdpCallback'),
  isDigitSmsTemplateCallBack?: boolean(name='IsDigitSmsTemplateCallBack'),
  isGlobeSmsReportCallback?: boolean(name='IsGlobeSmsReportCallback'),
  isOpened?: boolean(name='IsOpened'),
  isSecretReportMessageCallback?: boolean(name='IsSecretReportMessageCallback'),
  isSecretSmsMessageCallback?: boolean(name='IsSecretSmsMessageCallback'),
  isSignReportCallback?: boolean(name='IsSignReportCallback'),
  isSmartCallAsrCallBack?: boolean(name='IsSmartCallAsrCallBack'),
  isSmsReportMessageCallback?: boolean(name='IsSmsReportMessageCallback'),
  isSmsUpMessageCallback?: boolean(name='IsSmsUpMessageCallback'),
  isTemplateReportCallback?: boolean(name='IsTemplateReportCallback'),
  isVoiceAsrCallBack?: boolean(name='IsVoiceAsrCallBack'),
  isVoiceCallMidStateCallBack?: boolean(name='IsVoiceCallMidStateCallBack'),
  isVoiceCallRecordCallBack?: boolean(name='IsVoiceCallRecordCallBack'),
  isVoiceRecordingCallBack?: boolean(name='IsVoiceRecordingCallBack'),
  reportCallbackUrl?: string(name='ReportCallbackUrl'),
  requestId?: string(name='RequestId'),
  secretCallbackUrl?: string(name='SecretCallbackUrl'),
  secretSmsCallbackUrl?: string(name='SecretSmsCallbackUrl'),
  shortLinkCallBackUrl?: string(name='ShortLinkCallBackUrl'),
  signReportCallbackUrl?: string(name='SignReportCallbackUrl'),
  smartCallAsrCallBackUrl?: string(name='SmartCallAsrCallBackUrl'),
  templateReportCallbackUrl?: string(name='TemplateReportCallbackUrl'),
  upCallbackUrl?: string(name='UpCallbackUrl'),
  voiceAsrCallBackUrl?: string(name='VoiceAsrCallBackUrl'),
  voiceCallMidStateCallBackUrl?: string(name='VoiceCallMidStateCallBackUrl'),
  voiceCallRecordCallBackUrl?: string(name='VoiceCallRecordCallBackUrl'),
  voiceRecordingCallBackUrl?: string(name='VoiceRecordingCallBackUrl'),
}

model QueryMessageCallbackNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMessageCallbackNewResponseBody(name='body'),
}

/**
 * @param request QueryMessageCallbackNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryMessageCallbackNewResponse
 */
async function queryMessageCallbackNewWithOptions(request: QueryMessageCallbackNewRequest, runtime: $RuntimeOptions): QueryMessageCallbackNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!$isNull(request.callbackUrl)) {
    query['CallbackUrl'] = request.callbackUrl;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryMessageCallbackNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryMessageCallbackNewRequest
 * @return QueryMessageCallbackNewResponse
 */
async function queryMessageCallbackNew(request: QueryMessageCallbackNewRequest): QueryMessageCallbackNewResponse {
  var runtime = new $RuntimeOptions{};
  return queryMessageCallbackNewWithOptions(request, runtime);
}

model QueryMessageQueueNewRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  queueTypes?: string(name='QueueTypes'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryMessageQueueNewResponseBody = {
  list?: [ 
    {
      isCreated?: boolean(name='IsCreated'),
      queueName?: string(name='QueueName'),
      queueType?: string(name='QueueType'),
      region?: string(name='Region'),
    }
  ](name='List'),
  requestId?: string(name='RequestId'),
}

model QueryMessageQueueNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMessageQueueNewResponseBody(name='body'),
}

/**
 * @param request QueryMessageQueueNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryMessageQueueNewResponse
 */
async function queryMessageQueueNewWithOptions(request: QueryMessageQueueNewRequest, runtime: $RuntimeOptions): QueryMessageQueueNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.queueTypes)) {
    query['QueueTypes'] = request.queueTypes;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryMessageQueueNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryMessageQueueNewRequest
 * @return QueryMessageQueueNewResponse
 */
async function queryMessageQueueNew(request: QueryMessageQueueNewRequest): QueryMessageQueueNewResponse {
  var runtime = new $RuntimeOptions{};
  return queryMessageQueueNewWithOptions(request, runtime);
}

model QueryMonthlyBillInfoLeafNewRequest {
  billCycle?: string(name='BillCycle'),
  itemId?: string(name='ItemId'),
  itemName?: string(name='ItemName'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  subjectItemId?: string(name='SubjectItemId'),
}

model QueryMonthlyBillInfoLeafNewResponseBody = {
  couponPayment?: string(name='CouponPayment'),
  isSeparatedPrice?: boolean(name='IsSeparatedPrice'),
  layeredBillDOList?: [ 
    {
      addCount?: long(name='AddCount'),
      addUnit?: string(name='AddUnit'),
      billAmount?: string(name='BillAmount'),
      itemId?: string(name='ItemId'),
      itemName?: string(name='ItemName'),
      operator?: string(name='Operator'),
      packageBill?: string(name='PackageBill'),
      singlePrice?: string(name='SinglePrice'),
      subjectDetailList?: [ 
        {
          addCount?: long(name='AddCount'),
          addUnit?: string(name='AddUnit'),
          billAmount?: string(name='BillAmount'),
          itemId?: string(name='ItemId'),
          itemName?: string(name='ItemName'),
          operator?: string(name='Operator'),
          packageBill?: string(name='PackageBill'),
          singlePrice?: string(name='SinglePrice'),
          subjectItemId?: string(name='SubjectItemId'),
          subjectName?: string(name='SubjectName'),
        }
      ](name='SubjectDetailList'),
      subjectItemId?: string(name='SubjectItemId'),
      subjectName?: string(name='SubjectName'),
    }
  ](name='LayeredBillDOList'),
  packageAmount?: string(name='PackageAmount'),
  realPayment?: string(name='RealPayment'),
  requestId?: string(name='RequestId'),
  totalPayment?: string(name='TotalPayment'),
}

model QueryMonthlyBillInfoLeafNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMonthlyBillInfoLeafNewResponseBody(name='body'),
}

/**
 * @param request QueryMonthlyBillInfoLeafNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryMonthlyBillInfoLeafNewResponse
 */
async function queryMonthlyBillInfoLeafNewWithOptions(request: QueryMonthlyBillInfoLeafNewRequest, runtime: $RuntimeOptions): QueryMonthlyBillInfoLeafNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.billCycle)) {
    query['BillCycle'] = request.billCycle;
  }
  if (!$isNull(request.itemId)) {
    query['ItemId'] = request.itemId;
  }
  if (!$isNull(request.itemName)) {
    query['ItemName'] = request.itemName;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.subjectItemId)) {
    query['SubjectItemId'] = request.subjectItemId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryMonthlyBillInfoLeafNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryMonthlyBillInfoLeafNewRequest
 * @return QueryMonthlyBillInfoLeafNewResponse
 */
async function queryMonthlyBillInfoLeafNew(request: QueryMonthlyBillInfoLeafNewRequest): QueryMonthlyBillInfoLeafNewResponse {
  var runtime = new $RuntimeOptions{};
  return queryMonthlyBillInfoLeafNewWithOptions(request, runtime);
}

model QueryMonthlyBillRentalRequest {
  billCycle?: string(name='BillCycle', description='This parameter is required.'),
  ownerId?: long(name='OwnerId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryMonthlyBillRentalResponseBody = {
  code?: string(name='Code'),
  data?: {
    pageNo?: int32(name='pageNo'),
    pageSize?: int32(name='pageSize'),
    records?: [ 
      {
        billTime?: long(name='billTime'),
        itemId?: string(name='itemId'),
        itemName?: string(name='itemName'),
        offerTime?: long(name='offerTime'),
        rental?: string(name='rental'),
        subItemId?: string(name='subItemId'),
        subItemName?: string(name='subItemName'),
      }
    ](name='records'),
    rentalSum?: string(name='rentalSum'),
    total?: long(name='total'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryMonthlyBillRentalResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMonthlyBillRentalResponseBody(name='body'),
}

/**
 * @param request QueryMonthlyBillRentalRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryMonthlyBillRentalResponse
 */
async function queryMonthlyBillRentalWithOptions(request: QueryMonthlyBillRentalRequest, runtime: $RuntimeOptions): QueryMonthlyBillRentalResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.billCycle)) {
    query['BillCycle'] = request.billCycle;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryMonthlyBillRental',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryMonthlyBillRentalRequest
 * @return QueryMonthlyBillRentalResponse
 */
async function queryMonthlyBillRental(request: QueryMonthlyBillRentalRequest): QueryMonthlyBillRentalResponse {
  var runtime = new $RuntimeOptions{};
  return queryMonthlyBillRentalWithOptions(request, runtime);
}

model QueryMonthlyBillRentalNewRequest {
  billCycle?: string(name='BillCycle', description='This parameter is required.'),
  ownerId?: long(name='OwnerId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryMonthlyBillRentalNewResponseBody = {
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  records?: [ 
    {
      billTime?: long(name='BillTime'),
      itemId?: string(name='ItemId'),
      itemName?: string(name='ItemName'),
      offerTime?: long(name='OfferTime'),
      rental?: string(name='Rental'),
      subItemId?: string(name='SubItemId'),
      subItemName?: string(name='SubItemName'),
    }
  ](name='Records'),
  rentalSum?: string(name='RentalSum'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model QueryMonthlyBillRentalNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMonthlyBillRentalNewResponseBody(name='body'),
}

/**
 * @param request QueryMonthlyBillRentalNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryMonthlyBillRentalNewResponse
 */
async function queryMonthlyBillRentalNewWithOptions(request: QueryMonthlyBillRentalNewRequest, runtime: $RuntimeOptions): QueryMonthlyBillRentalNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.billCycle)) {
    query['BillCycle'] = request.billCycle;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryMonthlyBillRentalNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryMonthlyBillRentalNewRequest
 * @return QueryMonthlyBillRentalNewResponse
 */
async function queryMonthlyBillRentalNew(request: QueryMonthlyBillRentalNewRequest): QueryMonthlyBillRentalNewResponse {
  var runtime = new $RuntimeOptions{};
  return queryMonthlyBillRentalNewWithOptions(request, runtime);
}

model QueryMsgCountRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryMsgCountResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryMsgCountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMsgCountResponseBody(name='body'),
}

/**
 * @param request QueryMsgCountRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryMsgCountResponse
 */
async function queryMsgCountWithOptions(request: QueryMsgCountRequest, runtime: $RuntimeOptions): QueryMsgCountResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryMsgCount',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryMsgCountRequest
 * @return QueryMsgCountResponse
 */
async function queryMsgCount(request: QueryMsgCountRequest): QueryMsgCountResponse {
  var runtime = new $RuntimeOptions{};
  return queryMsgCountWithOptions(request, runtime);
}

model QueryOpenStatusRequest {
  busOffer?: long(name='BusOffer'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  prodId?: string(name='ProdId', description='This parameter is required.'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryOpenStatusResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: boolean(name='data'),
}

model QueryOpenStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryOpenStatusResponseBody(name='body'),
}

/**
 * @param request QueryOpenStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryOpenStatusResponse
 */
async function queryOpenStatusWithOptions(request: QueryOpenStatusRequest, runtime: $RuntimeOptions): QueryOpenStatusResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.busOffer)) {
    query['BusOffer'] = request.busOffer;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.prodId)) {
    query['ProdId'] = request.prodId;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryOpenStatus',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryOpenStatusRequest
 * @return QueryOpenStatusResponse
 */
async function queryOpenStatus(request: QueryOpenStatusRequest): QueryOpenStatusResponse {
  var runtime = new $RuntimeOptions{};
  return queryOpenStatusWithOptions(request, runtime);
}

model QueryOpencFlagNewRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryOpencFlagNewResponseBody = {
  isOpen?: int32(name='IsOpen'),
  requestId?: string(name='RequestId'),
}

model QueryOpencFlagNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryOpencFlagNewResponseBody(name='body'),
}

/**
 * @param request QueryOpencFlagNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryOpencFlagNewResponse
 */
async function queryOpencFlagNewWithOptions(request: QueryOpencFlagNewRequest, runtime: $RuntimeOptions): QueryOpencFlagNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryOpencFlagNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryOpencFlagNewRequest
 * @return QueryOpencFlagNewResponse
 */
async function queryOpencFlagNew(request: QueryOpencFlagNewRequest): QueryOpencFlagNewResponse {
  var runtime = new $RuntimeOptions{};
  return queryOpencFlagNewWithOptions(request, runtime);
}

model QueryPhoneWhiteListRequest {
  ownerId?: long(name='OwnerId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  phoneNumber?: string(name='PhoneNumber'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryPhoneWhiteListResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryPhoneWhiteListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryPhoneWhiteListResponseBody(name='body'),
}

/**
 * @param request QueryPhoneWhiteListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryPhoneWhiteListResponse
 */
async function queryPhoneWhiteListWithOptions(request: QueryPhoneWhiteListRequest, runtime: $RuntimeOptions): QueryPhoneWhiteListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryPhoneWhiteList',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryPhoneWhiteListRequest
 * @return QueryPhoneWhiteListResponse
 */
async function queryPhoneWhiteList(request: QueryPhoneWhiteListRequest): QueryPhoneWhiteListResponse {
  var runtime = new $RuntimeOptions{};
  return queryPhoneWhiteListWithOptions(request, runtime);
}

model QueryPhoneWhiteListNewRequest {
  ownerId?: long(name='OwnerId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  phoneNumber?: string(name='PhoneNumber'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryPhoneWhiteListNewResponseBody = {
  list?: [ 
    {
      id?: long(name='Id'),
      phoneNumber?: string(name='PhoneNumber'),
      remark?: string(name='Remark'),
    }
  ](name='List'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
  totalWithoutFilter?: long(name='TotalWithoutFilter'),
}

model QueryPhoneWhiteListNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryPhoneWhiteListNewResponseBody(name='body'),
}

/**
 * @param request QueryPhoneWhiteListNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryPhoneWhiteListNewResponse
 */
async function queryPhoneWhiteListNewWithOptions(request: QueryPhoneWhiteListNewRequest, runtime: $RuntimeOptions): QueryPhoneWhiteListNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryPhoneWhiteListNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryPhoneWhiteListNewRequest
 * @return QueryPhoneWhiteListNewResponse
 */
async function queryPhoneWhiteListNew(request: QueryPhoneWhiteListNewRequest): QueryPhoneWhiteListNewResponse {
  var runtime = new $RuntimeOptions{};
  return queryPhoneWhiteListNewWithOptions(request, runtime);
}

model QueryPkgThresholdRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryPkgThresholdResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryPkgThresholdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryPkgThresholdResponseBody(name='body'),
}

/**
 * @param request QueryPkgThresholdRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryPkgThresholdResponse
 */
async function queryPkgThresholdWithOptions(request: QueryPkgThresholdRequest, runtime: $RuntimeOptions): QueryPkgThresholdResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryPkgThreshold',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryPkgThresholdRequest
 * @return QueryPkgThresholdResponse
 */
async function queryPkgThreshold(request: QueryPkgThresholdRequest): QueryPkgThresholdResponse {
  var runtime = new $RuntimeOptions{};
  return queryPkgThresholdWithOptions(request, runtime);
}

model QueryPkgThresholdNewRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryPkgThresholdNewResponseBody = {
  packageWarningLimit?: long(name='PackageWarningLimit'),
  requestId?: string(name='RequestId'),
}

model QueryPkgThresholdNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryPkgThresholdNewResponseBody(name='body'),
}

/**
 * @param request QueryPkgThresholdNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryPkgThresholdNewResponse
 */
async function queryPkgThresholdNewWithOptions(request: QueryPkgThresholdNewRequest, runtime: $RuntimeOptions): QueryPkgThresholdNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryPkgThresholdNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryPkgThresholdNewRequest
 * @return QueryPkgThresholdNewResponse
 */
async function queryPkgThresholdNew(request: QueryPkgThresholdNewRequest): QueryPkgThresholdNewResponse {
  var runtime = new $RuntimeOptions{};
  return queryPkgThresholdNewWithOptions(request, runtime);
}

model QueryPrevLimitNewRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryPrevLimitNewResponseBody = {
  hourLimit?: long(name='HourLimit'),
  increaseRate?: int32(name='IncreaseRate'),
  requestId?: string(name='RequestId'),
  successRate?: int32(name='SuccessRate'),
}

model QueryPrevLimitNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryPrevLimitNewResponseBody(name='body'),
}

/**
 * @param request QueryPrevLimitNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryPrevLimitNewResponse
 */
async function queryPrevLimitNewWithOptions(request: QueryPrevLimitNewRequest, runtime: $RuntimeOptions): QueryPrevLimitNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryPrevLimitNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryPrevLimitNewRequest
 * @return QueryPrevLimitNewResponse
 */
async function queryPrevLimitNew(request: QueryPrevLimitNewRequest): QueryPrevLimitNewResponse {
  var runtime = new $RuntimeOptions{};
  return queryPrevLimitNewWithOptions(request, runtime);
}

model QuerySaasRecordRequest {
  bizType?: string(name='BizType'),
  indexCol?: string(name='IndexCol'),
  ownerId?: long(name='OwnerId'),
  pageNo?: int32(name='PageNo', description='This parameter is required.'),
  pageSize?: int32(name='PageSize', description='This parameter is required.'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  result?: long(name='Result'),
  taskId?: long(name='TaskId', description='This parameter is required.'),
  taskInstanceId?: long(name='TaskInstanceId', description='This parameter is required.'),
}

model QuerySaasRecordResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QuerySaasRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySaasRecordResponseBody(name='body'),
}

/**
 * @param request QuerySaasRecordRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySaasRecordResponse
 */
async function querySaasRecordWithOptions(request: QuerySaasRecordRequest, runtime: $RuntimeOptions): QuerySaasRecordResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!$isNull(request.indexCol)) {
    query['IndexCol'] = request.indexCol;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.result)) {
    query['Result'] = request.result;
  }
  if (!$isNull(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  if (!$isNull(request.taskInstanceId)) {
    query['TaskInstanceId'] = request.taskInstanceId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySaasRecord',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySaasRecordRequest
 * @return QuerySaasRecordResponse
 */
async function querySaasRecord(request: QuerySaasRecordRequest): QuerySaasRecordResponse {
  var runtime = new $RuntimeOptions{};
  return querySaasRecordWithOptions(request, runtime);
}

model QuerySaasRecordNewRequest {
  bizType?: string(name='BizType', description='This parameter is required.'),
  indexCol?: string(name='IndexCol'),
  ownerId?: long(name='OwnerId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  result?: long(name='Result'),
  taskId?: long(name='TaskId', description='This parameter is required.'),
  taskInstanceId?: long(name='TaskInstanceId', description='This parameter is required.'),
}

model QuerySaasRecordNewResponseBody = {
  list?: {
    saasRecord?: [ 
    {
      bizType?: string(name='BizType'),
      detailPkId?: long(name='DetailPkId'),
      indexCol?: string(name='IndexCol'),
      lastDealDate?: string(name='LastDealDate'),
      recordBizExpireDate?: string(name='RecordBizExpireDate'),
      result?: string(name='Result'),
      resultDesc?: string(name='ResultDesc'),
      saasContent?: string(name='SaasContent'),
      suggestion?: string(name='Suggestion'),
    }
  ](name='SaasRecord')
  }(name='List'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model QuerySaasRecordNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySaasRecordNewResponseBody(name='body'),
}

/**
 * @param request QuerySaasRecordNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySaasRecordNewResponse
 */
async function querySaasRecordNewWithOptions(request: QuerySaasRecordNewRequest, runtime: $RuntimeOptions): QuerySaasRecordNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!$isNull(request.indexCol)) {
    query['IndexCol'] = request.indexCol;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.result)) {
    query['Result'] = request.result;
  }
  if (!$isNull(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  if (!$isNull(request.taskInstanceId)) {
    query['TaskInstanceId'] = request.taskInstanceId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySaasRecordNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySaasRecordNewRequest
 * @return QuerySaasRecordNewResponse
 */
async function querySaasRecordNew(request: QuerySaasRecordNewRequest): QuerySaasRecordNewResponse {
  var runtime = new $RuntimeOptions{};
  return querySaasRecordNewWithOptions(request, runtime);
}

model QuerySendDetailsByPhoneNumRequest {
  bizType?: long(name='BizType'),
  errorCode?: string(name='ErrorCode'),
  ownerId?: long(name='OwnerId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  phoneNum?: string(name='PhoneNum'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sendDate?: string(name='SendDate', description='This parameter is required.'),
  sendStatus?: long(name='SendStatus'),
  signName?: string(name='SignName'),
  templateCode?: string(name='TemplateCode'),
}

model QuerySendDetailsByPhoneNumResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QuerySendDetailsByPhoneNumResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySendDetailsByPhoneNumResponseBody(name='body'),
}

/**
 * @param request QuerySendDetailsByPhoneNumRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySendDetailsByPhoneNumResponse
 */
async function querySendDetailsByPhoneNumWithOptions(request: QuerySendDetailsByPhoneNumRequest, runtime: $RuntimeOptions): QuerySendDetailsByPhoneNumResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!$isNull(request.errorCode)) {
    query['ErrorCode'] = request.errorCode;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.phoneNum)) {
    query['PhoneNum'] = request.phoneNum;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.sendDate)) {
    query['SendDate'] = request.sendDate;
  }
  if (!$isNull(request.sendStatus)) {
    query['SendStatus'] = request.sendStatus;
  }
  if (!$isNull(request.signName)) {
    query['SignName'] = request.signName;
  }
  if (!$isNull(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySendDetailsByPhoneNum',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySendDetailsByPhoneNumRequest
 * @return QuerySendDetailsByPhoneNumResponse
 */
async function querySendDetailsByPhoneNum(request: QuerySendDetailsByPhoneNumRequest): QuerySendDetailsByPhoneNumResponse {
  var runtime = new $RuntimeOptions{};
  return querySendDetailsByPhoneNumWithOptions(request, runtime);
}

model QuerySendDetailsByPhoneNumNewRequest {
  bizId?: string(name='BizId'),
  bizType?: long(name='BizType'),
  errorCode?: string(name='ErrorCode'),
  ownerId?: long(name='OwnerId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  phoneNum?: string(name='PhoneNum'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sendDate?: string(name='SendDate', description='This parameter is required.'),
  sendStatus?: long(name='SendStatus'),
  signName?: string(name='SignName'),
  statisticsStatus?: int32(name='StatisticsStatus'),
  templateCode?: string(name='TemplateCode'),
}

model QuerySendDetailsByPhoneNumNewResponseBody = {
  list?: {
    smsSendDetailResponse?: [ 
    {
      applyDateStr?: string(name='ApplyDateStr'),
      billCount?: long(name='BillCount'),
      bizId?: string(name='BizId'),
      bizType?: long(name='BizType'),
      blackListStatus?: int32(name='BlackListStatus'),
      content?: string(name='Content'),
      errCode?: string(name='ErrCode'),
      errCodeDesc?: string(name='ErrCodeDesc'),
      innerErrCode?: string(name='InnerErrCode'),
      outId?: string(name='OutId'),
      phoneNum?: string(name='PhoneNum'),
      receiveDateStr?: string(name='ReceiveDateStr'),
      sendDateStr?: string(name='SendDateStr'),
      sendStatus?: long(name='SendStatus'),
      smsLength?: long(name='SmsLength'),
      statisticsStatus?: int32(name='StatisticsStatus'),
      suggestion?: string(name='Suggestion'),
      templateCode?: string(name='TemplateCode'),
    }
  ](name='SmsSendDetailResponse')
  }(name='List'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model QuerySendDetailsByPhoneNumNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySendDetailsByPhoneNumNewResponseBody(name='body'),
}

/**
 * @param request QuerySendDetailsByPhoneNumNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySendDetailsByPhoneNumNewResponse
 */
async function querySendDetailsByPhoneNumNewWithOptions(request: QuerySendDetailsByPhoneNumNewRequest, runtime: $RuntimeOptions): QuerySendDetailsByPhoneNumNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bizId)) {
    query['BizId'] = request.bizId;
  }
  if (!$isNull(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!$isNull(request.errorCode)) {
    query['ErrorCode'] = request.errorCode;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.phoneNum)) {
    query['PhoneNum'] = request.phoneNum;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.sendDate)) {
    query['SendDate'] = request.sendDate;
  }
  if (!$isNull(request.sendStatus)) {
    query['SendStatus'] = request.sendStatus;
  }
  if (!$isNull(request.signName)) {
    query['SignName'] = request.signName;
  }
  if (!$isNull(request.statisticsStatus)) {
    query['StatisticsStatus'] = request.statisticsStatus;
  }
  if (!$isNull(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySendDetailsByPhoneNumNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySendDetailsByPhoneNumNewRequest
 * @return QuerySendDetailsByPhoneNumNewResponse
 */
async function querySendDetailsByPhoneNumNew(request: QuerySendDetailsByPhoneNumNewRequest): QuerySendDetailsByPhoneNumNewResponse {
  var runtime = new $RuntimeOptions{};
  return querySendDetailsByPhoneNumNewWithOptions(request, runtime);
}

model QuerySendFailDetailsRequest {
  ownerId?: long(name='OwnerId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  prodCode?: string(name='ProdCode'),
  prodId?: string(name='ProdId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sendDate?: string(name='SendDate', description='This parameter is required.'),
}

model QuerySendFailDetailsResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QuerySendFailDetailsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySendFailDetailsResponseBody(name='body'),
}

/**
 * @param request QuerySendFailDetailsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySendFailDetailsResponse
 */
async function querySendFailDetailsWithOptions(request: QuerySendFailDetailsRequest, runtime: $RuntimeOptions): QuerySendFailDetailsResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.prodId)) {
    query['ProdId'] = request.prodId;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.sendDate)) {
    query['SendDate'] = request.sendDate;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySendFailDetails',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySendFailDetailsRequest
 * @return QuerySendFailDetailsResponse
 */
async function querySendFailDetails(request: QuerySendFailDetailsRequest): QuerySendFailDetailsResponse {
  var runtime = new $RuntimeOptions{};
  return querySendFailDetailsWithOptions(request, runtime);
}

model QuerySendFailDetailsNewRequest {
  ownerId?: long(name='OwnerId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  prodCode?: string(name='ProdCode'),
  prodId?: string(name='ProdId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sendDate?: string(name='SendDate', description='This parameter is required.'),
}

model QuerySendFailDetailsNewResponseBody = {
  applyDateStr?: string(name='ApplyDateStr'),
  billCount?: long(name='BillCount'),
  bizType?: long(name='BizType'),
  innerErrCode?: string(name='InnerErrCode'),
  list?: {
    smsSendDetailResponse?: [ 
    {
      blackListStatus?: int32(name='BlackListStatus'),
      content?: string(name='Content'),
      errCode?: string(name='ErrCode'),
      errCodeDesc?: string(name='ErrCodeDesc'),
      outId?: string(name='OutId'),
      phoneNum?: string(name='PhoneNum'),
      receiveDateStr?: string(name='ReceiveDateStr'),
      sendDateStr?: string(name='SendDateStr'),
      sendStatus?: long(name='SendStatus'),
      suggestion?: string(name='Suggestion'),
      templateCode?: string(name='TemplateCode'),
    }
  ](name='SmsSendDetailResponse')
  }(name='List'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  smsLength?: long(name='SmsLength'),
  total?: long(name='Total'),
}

model QuerySendFailDetailsNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySendFailDetailsNewResponseBody(name='body'),
}

/**
 * @param request QuerySendFailDetailsNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySendFailDetailsNewResponse
 */
async function querySendFailDetailsNewWithOptions(request: QuerySendFailDetailsNewRequest, runtime: $RuntimeOptions): QuerySendFailDetailsNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.prodId)) {
    query['ProdId'] = request.prodId;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.sendDate)) {
    query['SendDate'] = request.sendDate;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySendFailDetailsNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySendFailDetailsNewRequest
 * @return QuerySendFailDetailsNewResponse
 */
async function querySendFailDetailsNew(request: QuerySendFailDetailsNewRequest): QuerySendFailDetailsNewResponse {
  var runtime = new $RuntimeOptions{};
  return querySendFailDetailsNewWithOptions(request, runtime);
}

model QuerySendToGlobeStatusRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QuerySendToGlobeStatusResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
}

model QuerySendToGlobeStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySendToGlobeStatusResponseBody(name='body'),
}

/**
 * @param request QuerySendToGlobeStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySendToGlobeStatusResponse
 */
async function querySendToGlobeStatusWithOptions(request: QuerySendToGlobeStatusRequest, runtime: $RuntimeOptions): QuerySendToGlobeStatusResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySendToGlobeStatus',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySendToGlobeStatusRequest
 * @return QuerySendToGlobeStatusResponse
 */
async function querySendToGlobeStatus(request: QuerySendToGlobeStatusRequest): QuerySendToGlobeStatusResponse {
  var runtime = new $RuntimeOptions{};
  return querySendToGlobeStatusWithOptions(request, runtime);
}

model QueryShortUrlDetailNewRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  shortUrlId?: string(name='ShortUrlId', description='This parameter is required.'),
}

model QueryShortUrlDetailNewResponseBody = {
  eventName?: string(name='EventName'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtInvalidTime?: string(name='GmtInvalidTime'),
  id?: string(name='Id'),
  record?: [ 
    {
      eventName?: string(name='EventName'),
      gmtCreateTime?: string(name='GmtCreateTime'),
      gmtInvalidTime?: string(name='GmtInvalidTime'),
      id?: string(name='Id'),
      shortUrl?: string(name='ShortUrl'),
      sourceUrl?: string(name='SourceUrl'),
      status?: int32(name='Status'),
      totalPv?: string(name='TotalPv'),
      totalUv?: string(name='TotalUv'),
    }
  ](name='Record'),
  requestId?: string(name='RequestId'),
  shortUrl?: string(name='ShortUrl'),
  sourceUrl?: string(name='SourceUrl'),
  status?: int32(name='Status'),
  totalPv?: string(name='TotalPv'),
  totalUv?: string(name='TotalUv'),
}

model QueryShortUrlDetailNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryShortUrlDetailNewResponseBody(name='body'),
}

/**
 * @param request QueryShortUrlDetailNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryShortUrlDetailNewResponse
 */
async function queryShortUrlDetailNewWithOptions(request: QueryShortUrlDetailNewRequest, runtime: $RuntimeOptions): QueryShortUrlDetailNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.shortUrlId)) {
    query['ShortUrlId'] = request.shortUrlId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryShortUrlDetailNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryShortUrlDetailNewRequest
 * @return QueryShortUrlDetailNewResponse
 */
async function queryShortUrlDetailNew(request: QueryShortUrlDetailNewRequest): QueryShortUrlDetailNewResponse {
  var runtime = new $RuntimeOptions{};
  return queryShortUrlDetailNewWithOptions(request, runtime);
}

model QueryShortUrlListNewRequest {
  eventName?: string(name='EventName'),
  keyWord?: string(name='KeyWord'),
  ownerId?: long(name='OwnerId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  shortUrl?: string(name='ShortUrl'),
}

model QueryShortUrlListNewResponseBody = {
  list?: [ 
    {
      eventName?: string(name='EventName'),
      gmtCreateTime?: string(name='GmtCreateTime'),
      gmtInvalidTime?: string(name='GmtInvalidTime'),
      id?: string(name='Id'),
      reason?: string(name='Reason'),
      record?: [ 
        {
          eventName?: string(name='EventName'),
          gmtCreateTime?: string(name='GmtCreateTime'),
          gmtInvalidTime?: string(name='GmtInvalidTime'),
          id?: string(name='Id'),
          reason?: string(name='Reason'),
          shortUrl?: string(name='ShortUrl'),
          sourceUrl?: string(name='SourceUrl'),
          status?: int32(name='Status'),
          totalPv?: string(name='TotalPv'),
          totalUv?: string(name='TotalUv'),
        }
      ](name='Record'),
      shortUrl?: string(name='ShortUrl'),
      sourceUrl?: string(name='SourceUrl'),
      status?: int32(name='Status'),
      totalPv?: string(name='TotalPv'),
      totalUv?: string(name='TotalUv'),
    }
  ](name='List'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model QueryShortUrlListNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryShortUrlListNewResponseBody(name='body'),
}

/**
 * @param request QueryShortUrlListNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryShortUrlListNewResponse
 */
async function queryShortUrlListNewWithOptions(request: QueryShortUrlListNewRequest, runtime: $RuntimeOptions): QueryShortUrlListNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.eventName)) {
    query['EventName'] = request.eventName;
  }
  if (!$isNull(request.keyWord)) {
    query['KeyWord'] = request.keyWord;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.shortUrl)) {
    query['ShortUrl'] = request.shortUrl;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryShortUrlListNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryShortUrlListNewRequest
 * @return QueryShortUrlListNewResponse
 */
async function queryShortUrlListNew(request: QueryShortUrlListNewRequest): QueryShortUrlListNewResponse {
  var runtime = new $RuntimeOptions{};
  return queryShortUrlListNewWithOptions(request, runtime);
}

model QueryShortUrlStatusRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryShortUrlStatusResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryShortUrlStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryShortUrlStatusResponseBody(name='body'),
}

/**
 * @param request QueryShortUrlStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryShortUrlStatusResponse
 */
async function queryShortUrlStatusWithOptions(request: QueryShortUrlStatusRequest, runtime: $RuntimeOptions): QueryShortUrlStatusResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryShortUrlStatus',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryShortUrlStatusRequest
 * @return QueryShortUrlStatusResponse
 */
async function queryShortUrlStatus(request: QueryShortUrlStatusRequest): QueryShortUrlStatusResponse {
  var runtime = new $RuntimeOptions{};
  return queryShortUrlStatusWithOptions(request, runtime);
}

model QuerySlsStatusNewRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QuerySlsStatusNewResponseBody = {
  authorizeStatus?: boolean(name='AuthorizeStatus'),
  openStatus?: boolean(name='OpenStatus'),
  prodCode?: string(name='ProdCode'),
  requestId?: string(name='RequestId'),
  saveTime?: int32(name='SaveTime'),
  uid?: string(name='Uid'),
}

model QuerySlsStatusNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySlsStatusNewResponseBody(name='body'),
}

/**
 * @param request QuerySlsStatusNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySlsStatusNewResponse
 */
async function querySlsStatusNewWithOptions(request: QuerySlsStatusNewRequest, runtime: $RuntimeOptions): QuerySlsStatusNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySlsStatusNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySlsStatusNewRequest
 * @return QuerySlsStatusNewResponse
 */
async function querySlsStatusNew(request: QuerySlsStatusNewRequest): QuerySlsStatusNewResponse {
  var runtime = new $RuntimeOptions{};
  return querySlsStatusNewWithOptions(request, runtime);
}

model QuerySmsBaseScreenNewRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QuerySmsBaseScreenNewResponseBody = {
  accountBalance?: string(name='AccountBalance'),
  cardAbilityMark?: string(name='CardAbilityMark'),
  cardCustomerMark?: string(name='CardCustomerMark'),
  certifyType?: string(name='CertifyType'),
  channelType?: string(name='ChannelType'),
  childAccountAuth?: string(name='ChildAccountAuth'),
  creditValue?: string(name='CreditValue'),
  currentLocale?: string(name='CurrentLocale'),
  custFrom?: int32(name='CustFrom'),
  custName?: string(name='CustName'),
  dataAbilityMark?: string(name='DataAbilityMark'),
  dayuMigrateStatus?: int32(name='DayuMigrateStatus'),
  invoiceBalance?: string(name='InvoiceBalance'),
  ipSmsAbilityMark?: string(name='IpSmsAbilityMark'),
  isAccountMerged?: boolean(name='IsAccountMerged'),
  isAliInnerUser?: boolean(name='IsAliInnerUser'),
  isChineseUser?: boolean(name='IsChineseUser'),
  isDayuCustomer?: boolean(name='IsDayuCustomer'),
  isDayuTopCust?: boolean(name='IsDayuTopCust'),
  isMnsForceMigratingCustomer?: boolean(name='IsMnsForceMigratingCustomer'),
  isMnsMigratingCustomer?: boolean(name='IsMnsMigratingCustomer'),
  isNeedAuth?: boolean(name='IsNeedAuth'),
  isOldFisCust?: boolean(name='IsOldFisCust'),
  isOldSms?: boolean(name='IsOldSms'),
  isOpened?: boolean(name='IsOpened'),
  isRemainMnsPackage?: boolean(name='IsRemainMnsPackage'),
  isSendSmsToGlobeUser?: boolean(name='IsSendSmsToGlobeUser'),
  isShortUrlNormalUse?: boolean(name='IsShortUrlNormalUse'),
  isShortUrlOpened?: boolean(name='IsShortUrlOpened'),
  isSilentCust?: boolean(name='IsSilentCust'),
  osStatus?: int32(name='OsStatus'),
  prodCode?: string(name='ProdCode'),
  requestId?: string(name='RequestId'),
  shortUrlServeTag?: boolean(name='ShortUrlServeTag'),
  smsMarketingAssistantTag?: boolean(name='SmsMarketingAssistantTag'),
  textAbilityMark?: string(name='TextAbilityMark'),
  voucherNum?: int32(name='VoucherNum'),
}

model QuerySmsBaseScreenNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsBaseScreenNewResponseBody(name='body'),
}

/**
 * @param request QuerySmsBaseScreenNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySmsBaseScreenNewResponse
 */
async function querySmsBaseScreenNewWithOptions(request: QuerySmsBaseScreenNewRequest, runtime: $RuntimeOptions): QuerySmsBaseScreenNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySmsBaseScreenNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySmsBaseScreenNewRequest
 * @return QuerySmsBaseScreenNewResponse
 */
async function querySmsBaseScreenNew(request: QuerySmsBaseScreenNewRequest): QuerySmsBaseScreenNewResponse {
  var runtime = new $RuntimeOptions{};
  return querySmsBaseScreenNewWithOptions(request, runtime);
}

model QuerySmsDetectCountsRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QuerySmsDetectCountsResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model QuerySmsDetectCountsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsDetectCountsResponseBody(name='body'),
}

/**
 * @param request QuerySmsDetectCountsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySmsDetectCountsResponse
 */
async function querySmsDetectCountsWithOptions(request: QuerySmsDetectCountsRequest, runtime: $RuntimeOptions): QuerySmsDetectCountsResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySmsDetectCounts',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySmsDetectCountsRequest
 * @return QuerySmsDetectCountsResponse
 */
async function querySmsDetectCounts(request: QuerySmsDetectCountsRequest): QuerySmsDetectCountsResponse {
  var runtime = new $RuntimeOptions{};
  return querySmsDetectCountsWithOptions(request, runtime);
}

model QuerySmsDetectCountsNewRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QuerySmsDetectCountsNewResponseBody = {
  detectedTimes?: int32(name='DetectedTimes'),
  leftTimes?: int32(name='LeftTimes'),
  requestId?: string(name='RequestId'),
}

model QuerySmsDetectCountsNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsDetectCountsNewResponseBody(name='body'),
}

/**
 * @param request QuerySmsDetectCountsNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySmsDetectCountsNewResponse
 */
async function querySmsDetectCountsNewWithOptions(request: QuerySmsDetectCountsNewRequest, runtime: $RuntimeOptions): QuerySmsDetectCountsNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySmsDetectCountsNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySmsDetectCountsNewRequest
 * @return QuerySmsDetectCountsNewResponse
 */
async function querySmsDetectCountsNew(request: QuerySmsDetectCountsNewRequest): QuerySmsDetectCountsNewResponse {
  var runtime = new $RuntimeOptions{};
  return querySmsDetectCountsNewWithOptions(request, runtime);
}

model QuerySmsDetectListRequest {
  ownerId?: long(name='OwnerId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QuerySmsDetectListResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model QuerySmsDetectListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsDetectListResponseBody(name='body'),
}

/**
 * @param request QuerySmsDetectListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySmsDetectListResponse
 */
async function querySmsDetectListWithOptions(request: QuerySmsDetectListRequest, runtime: $RuntimeOptions): QuerySmsDetectListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySmsDetectList',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySmsDetectListRequest
 * @return QuerySmsDetectListResponse
 */
async function querySmsDetectList(request: QuerySmsDetectListRequest): QuerySmsDetectListResponse {
  var runtime = new $RuntimeOptions{};
  return querySmsDetectListWithOptions(request, runtime);
}

model QuerySmsDetectListNewRequest {
  ownerId?: long(name='OwnerId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QuerySmsDetectListNewResponseBody = {
  list?: [ 
    {
      detectContent?: string(name='DetectContent'),
      detectSignName?: string(name='DetectSignName'),
      detectTime?: string(name='DetectTime'),
      status?: int32(name='Status'),
      successRate?: string(name='SuccessRate'),
      templateCode?: string(name='TemplateCode'),
      templateParam?: string(name='TemplateParam'),
    }
  ](name='List'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model QuerySmsDetectListNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsDetectListNewResponseBody(name='body'),
}

/**
 * @param request QuerySmsDetectListNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySmsDetectListNewResponse
 */
async function querySmsDetectListNewWithOptions(request: QuerySmsDetectListNewRequest, runtime: $RuntimeOptions): QuerySmsDetectListNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySmsDetectListNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySmsDetectListNewRequest
 * @return QuerySmsDetectListNewResponse
 */
async function querySmsDetectListNew(request: QuerySmsDetectListNewRequest): QuerySmsDetectListNewResponse {
  var runtime = new $RuntimeOptions{};
  return querySmsDetectListNewWithOptions(request, runtime);
}

model QuerySmsPackageDetailRequest {
  ownerId?: long(name='OwnerId'),
  packageType?: string(name='PackageType'),
  pageNo?: long(name='PageNo'),
  pageSize?: long(name='PageSize'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: int32(name='Status'),
}

model QuerySmsPackageDetailResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QuerySmsPackageDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsPackageDetailResponseBody(name='body'),
}

/**
 * @param request QuerySmsPackageDetailRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySmsPackageDetailResponse
 */
async function querySmsPackageDetailWithOptions(request: QuerySmsPackageDetailRequest, runtime: $RuntimeOptions): QuerySmsPackageDetailResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.packageType)) {
    query['PackageType'] = request.packageType;
  }
  if (!$isNull(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySmsPackageDetail',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySmsPackageDetailRequest
 * @return QuerySmsPackageDetailResponse
 */
async function querySmsPackageDetail(request: QuerySmsPackageDetailRequest): QuerySmsPackageDetailResponse {
  var runtime = new $RuntimeOptions{};
  return querySmsPackageDetailWithOptions(request, runtime);
}

model QuerySmsPackageDetailNewRequest {
  ownerId?: long(name='OwnerId'),
  packageType?: string(name='PackageType'),
  pageNo?: long(name='PageNo'),
  pageSize?: long(name='PageSize'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: int32(name='Status'),
}

model QuerySmsPackageDetailNewResponseBody = {
  list?: {
    smsPackageDetailDTO?: [ 
    {
      invalidTime?: long(name='InvalidTime'),
      orderTime?: long(name='OrderTime'),
      packageType?: string(name='PackageType'),
      remainCount?: long(name='RemainCount'),
      status?: int32(name='Status'),
      totalCount?: long(name='TotalCount'),
    }
  ](name='SmsPackageDetailDTO')
  }(name='List'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  remainSmsCount?: long(name='RemainSmsCount'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
  totalSmsCount?: long(name='TotalSmsCount'),
}

model QuerySmsPackageDetailNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsPackageDetailNewResponseBody(name='body'),
}

/**
 * @param request QuerySmsPackageDetailNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySmsPackageDetailNewResponse
 */
async function querySmsPackageDetailNewWithOptions(request: QuerySmsPackageDetailNewRequest, runtime: $RuntimeOptions): QuerySmsPackageDetailNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.packageType)) {
    query['PackageType'] = request.packageType;
  }
  if (!$isNull(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySmsPackageDetailNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySmsPackageDetailNewRequest
 * @return QuerySmsPackageDetailNewResponse
 */
async function querySmsPackageDetailNew(request: QuerySmsPackageDetailNewRequest): QuerySmsPackageDetailNewResponse {
  var runtime = new $RuntimeOptions{};
  return querySmsPackageDetailNewWithOptions(request, runtime);
}

model QuerySmsPackageNewRequest {
  ownerId?: long(name='OwnerId'),
  packageType?: string(name='PackageType'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  prodCode?: string(name='ProdCode'),
  productName?: string(name='ProductName'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  state?: int32(name='State'),
  time?: string(name='Time'),
}

model QuerySmsPackageNewResponseBody = {
  list?: {
    smsPackageInfo?: [ 
    {
      buyTime?: string(name='BuyTime'),
      detailOrderId?: string(name='DetailOrderId'),
      effTime?: string(name='EffTime'),
      expTime?: string(name='ExpTime'),
      orderId?: string(name='OrderId'),
      packageName?: string(name='PackageName'),
      packageType?: string(name='PackageType'),
      payPrice?: float(name='PayPrice'),
      pkgId?: long(name='PkgId'),
      refundStatus?: int32(name='RefundStatus'),
      state?: int32(name='State'),
      total?: long(name='Total'),
      usage?: long(name='Usage'),
    }
  ](name='SmsPackageInfo')
  }(name='List'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model QuerySmsPackageNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsPackageNewResponseBody(name='body'),
}

/**
 * @param request QuerySmsPackageNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySmsPackageNewResponse
 */
async function querySmsPackageNewWithOptions(request: QuerySmsPackageNewRequest, runtime: $RuntimeOptions): QuerySmsPackageNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.packageType)) {
    query['PackageType'] = request.packageType;
  }
  if (!$isNull(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.productName)) {
    query['ProductName'] = request.productName;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.state)) {
    query['State'] = request.state;
  }
  if (!$isNull(request.time)) {
    query['Time'] = request.time;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySmsPackageNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySmsPackageNewRequest
 * @return QuerySmsPackageNewResponse
 */
async function querySmsPackageNew(request: QuerySmsPackageNewRequest): QuerySmsPackageNewResponse {
  var runtime = new $RuntimeOptions{};
  return querySmsPackageNewWithOptions(request, runtime);
}

model QuerySmsPackageOrderListRequest {
  billCycle?: string(name='BillCycle'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QuerySmsPackageOrderListResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QuerySmsPackageOrderListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsPackageOrderListResponseBody(name='body'),
}

/**
 * @param request QuerySmsPackageOrderListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySmsPackageOrderListResponse
 */
async function querySmsPackageOrderListWithOptions(request: QuerySmsPackageOrderListRequest, runtime: $RuntimeOptions): QuerySmsPackageOrderListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.billCycle)) {
    query['BillCycle'] = request.billCycle;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySmsPackageOrderList',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySmsPackageOrderListRequest
 * @return QuerySmsPackageOrderListResponse
 */
async function querySmsPackageOrderList(request: QuerySmsPackageOrderListRequest): QuerySmsPackageOrderListResponse {
  var runtime = new $RuntimeOptions{};
  return querySmsPackageOrderListWithOptions(request, runtime);
}

model QuerySmsPackageOrderListNewRequest {
  billCycle?: string(name='BillCycle'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QuerySmsPackageOrderListNewResponseBody = {
  list?: {
    smsPackageOrderResponse?: [ 
    {
      effectDate?: string(name='EffectDate'),
      expireDate?: string(name='ExpireDate'),
      name?: string(name='Name'),
      payPrice?: string(name='PayPrice'),
      state?: int32(name='State'),
    }
  ](name='SmsPackageOrderResponse')
  }(name='List'),
  requestId?: string(name='RequestId'),
}

model QuerySmsPackageOrderListNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsPackageOrderListNewResponseBody(name='body'),
}

/**
 * @param request QuerySmsPackageOrderListNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySmsPackageOrderListNewResponse
 */
async function querySmsPackageOrderListNewWithOptions(request: QuerySmsPackageOrderListNewRequest, runtime: $RuntimeOptions): QuerySmsPackageOrderListNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.billCycle)) {
    query['BillCycle'] = request.billCycle;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySmsPackageOrderListNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySmsPackageOrderListNewRequest
 * @return QuerySmsPackageOrderListNewResponse
 */
async function querySmsPackageOrderListNew(request: QuerySmsPackageOrderListNewRequest): QuerySmsPackageOrderListNewResponse {
  var runtime = new $RuntimeOptions{};
  return querySmsPackageOrderListNewWithOptions(request, runtime);
}

model QuerySmsPackageSummaryRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QuerySmsPackageSummaryResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QuerySmsPackageSummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsPackageSummaryResponseBody(name='body'),
}

/**
 * @param request QuerySmsPackageSummaryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySmsPackageSummaryResponse
 */
async function querySmsPackageSummaryWithOptions(request: QuerySmsPackageSummaryRequest, runtime: $RuntimeOptions): QuerySmsPackageSummaryResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySmsPackageSummary',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySmsPackageSummaryRequest
 * @return QuerySmsPackageSummaryResponse
 */
async function querySmsPackageSummary(request: QuerySmsPackageSummaryRequest): QuerySmsPackageSummaryResponse {
  var runtime = new $RuntimeOptions{};
  return querySmsPackageSummaryWithOptions(request, runtime);
}

model QuerySmsPackageSummaryNewRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QuerySmsPackageSummaryNewResponseBody = {
  certifyType?: int32(name='CertifyType'),
  interPackageCount?: long(name='InterPackageCount'),
  interPackageSum?: long(name='InterPackageSum'),
  mktPackageCount?: long(name='MktPackageCount'),
  mktPackageSum?: long(name='MktPackageSum'),
  requestId?: string(name='RequestId'),
  smsPackageCount?: long(name='SmsPackageCount'),
  smsPackageSum?: long(name='SmsPackageSum'),
  sysPackageCount?: long(name='SysPackageCount'),
  sysPackageSum?: long(name='SysPackageSum'),
}

model QuerySmsPackageSummaryNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsPackageSummaryNewResponseBody(name='body'),
}

/**
 * @param request QuerySmsPackageSummaryNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySmsPackageSummaryNewResponse
 */
async function querySmsPackageSummaryNewWithOptions(request: QuerySmsPackageSummaryNewRequest, runtime: $RuntimeOptions): QuerySmsPackageSummaryNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySmsPackageSummaryNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySmsPackageSummaryNewRequest
 * @return QuerySmsPackageSummaryNewResponse
 */
async function querySmsPackageSummaryNew(request: QuerySmsPackageSummaryNewRequest): QuerySmsPackageSummaryNewResponse {
  var runtime = new $RuntimeOptions{};
  return querySmsPackageSummaryNewWithOptions(request, runtime);
}

model QuerySmsSaasTaskDetailRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  taskId?: long(name='TaskId'),
  taskInstanceId?: long(name='TaskInstanceId'),
}

model QuerySmsSaasTaskDetailResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QuerySmsSaasTaskDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsSaasTaskDetailResponseBody(name='body'),
}

/**
 * @param request QuerySmsSaasTaskDetailRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySmsSaasTaskDetailResponse
 */
async function querySmsSaasTaskDetailWithOptions(request: QuerySmsSaasTaskDetailRequest, runtime: $RuntimeOptions): QuerySmsSaasTaskDetailResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  if (!$isNull(request.taskInstanceId)) {
    query['TaskInstanceId'] = request.taskInstanceId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySmsSaasTaskDetail',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySmsSaasTaskDetailRequest
 * @return QuerySmsSaasTaskDetailResponse
 */
async function querySmsSaasTaskDetail(request: QuerySmsSaasTaskDetailRequest): QuerySmsSaasTaskDetailResponse {
  var runtime = new $RuntimeOptions{};
  return querySmsSaasTaskDetailWithOptions(request, runtime);
}

model QuerySmsSaasTaskDetailNewRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  taskId?: long(name='TaskId'),
}

model QuerySmsSaasTaskDetailNewResponseBody = {
  bizType?: string(name='BizType'),
  detailDownloadUrl?: string(name='DetailDownloadUrl'),
  detailDownloadUrlForSuccess?: string(name='DetailDownloadUrlForSuccess'),
  extParams?: string(name='ExtParams'),
  failCount?: int32(name='FailCount'),
  fireTime?: string(name='FireTime'),
  gmtCreate?: string(name='GmtCreate'),
  isDeleted?: boolean(name='IsDeleted'),
  isPermitOrder?: boolean(name='IsPermitOrder'),
  isPermitOrderForSuccess?: boolean(name='IsPermitOrderForSuccess'),
  ossFilePath?: string(name='OssFilePath'),
  phoneList?: {
    phoneNum?: [ string ](name='phoneNum')
  }(name='PhoneList'),
  requestId?: string(name='RequestId'),
  saasBaseCommParam?: {
    aliyunUid?: long(name='AliyunUid'),
    billCount?: int32(name='BillCount'),
    byteCount?: int32(name='ByteCount'),
    clientIp?: string(name='ClientIp'),
    custId?: long(name='CustId'),
    cycleNum?: int32(name='CycleNum'),
    paramList?: {
      param?: [ string ](name='Param')
    }(name='ParamList'),
    partnerId?: long(name='PartnerId'),
    signature?: string(name='Signature'),
    smsContent?: string(name='SmsContent'),
    smsTemplateCode?: string(name='SmsTemplateCode'),
    taskErrorCase?: string(name='TaskErrorCase'),
    taskErrorSuggestion?: string(name='TaskErrorSuggestion'),
  }(name='SaasBaseCommParam'),
  saasFileUrl?: string(name='SaasFileUrl'),
  scheduleType?: string(name='ScheduleType'),
  status?: string(name='Status'),
  successCount?: int32(name='SuccessCount'),
  taskId?: long(name='TaskId'),
  taskInstanceId?: long(name='TaskInstanceId'),
  taskName?: string(name='TaskName'),
  totalCount?: int32(name='TotalCount'),
}

model QuerySmsSaasTaskDetailNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsSaasTaskDetailNewResponseBody(name='body'),
}

/**
 * @param request QuerySmsSaasTaskDetailNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySmsSaasTaskDetailNewResponse
 */
async function querySmsSaasTaskDetailNewWithOptions(request: QuerySmsSaasTaskDetailNewRequest, runtime: $RuntimeOptions): QuerySmsSaasTaskDetailNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySmsSaasTaskDetailNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySmsSaasTaskDetailNewRequest
 * @return QuerySmsSaasTaskDetailNewResponse
 */
async function querySmsSaasTaskDetailNew(request: QuerySmsSaasTaskDetailNewRequest): QuerySmsSaasTaskDetailNewResponse {
  var runtime = new $RuntimeOptions{};
  return querySmsSaasTaskDetailNewWithOptions(request, runtime);
}

model QuerySmsSaasTaskListRequest {
  bizType?: string(name='BizType'),
  ownerId?: long(name='OwnerId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  serviceType?: string(name='ServiceType'),
  status?: string(name='Status'),
  taskName?: string(name='TaskName'),
}

model QuerySmsSaasTaskListResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QuerySmsSaasTaskListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsSaasTaskListResponseBody(name='body'),
}

/**
 * @param request QuerySmsSaasTaskListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySmsSaasTaskListResponse
 */
async function querySmsSaasTaskListWithOptions(request: QuerySmsSaasTaskListRequest, runtime: $RuntimeOptions): QuerySmsSaasTaskListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.serviceType)) {
    query['ServiceType'] = request.serviceType;
  }
  if (!$isNull(request.status)) {
    query['Status'] = request.status;
  }
  if (!$isNull(request.taskName)) {
    query['TaskName'] = request.taskName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySmsSaasTaskList',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySmsSaasTaskListRequest
 * @return QuerySmsSaasTaskListResponse
 */
async function querySmsSaasTaskList(request: QuerySmsSaasTaskListRequest): QuerySmsSaasTaskListResponse {
  var runtime = new $RuntimeOptions{};
  return querySmsSaasTaskListWithOptions(request, runtime);
}

model QuerySmsSaasTaskListNewRequest {
  bizType?: string(name='BizType'),
  ownerId?: long(name='OwnerId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: string(name='Status'),
  taskName?: string(name='TaskName'),
}

model QuerySmsSaasTaskListNewResponseBody = {
  list?: {
    fcSaasTaskDTO?: [ 
    {
      bizType?: string(name='BizType'),
      commParams?: {
        aliyunUid?: long(name='AliyunUid'),
        custId?: long(name='CustId'),
        cycleNum?: int32(name='CycleNum'),
        partnerId?: long(name='PartnerId'),
      }(name='CommParams'),
      detailDownloadUrl?: string(name='DetailDownloadUrl'),
      detailDownloadUrlForSuccess?: string(name='DetailDownloadUrlForSuccess'),
      extParams?: string(name='ExtParams'),
      failCount?: int32(name='FailCount'),
      fireTime?: string(name='FireTime'),
      gmtCreate?: string(name='GmtCreate'),
      isDeleted?: boolean(name='IsDeleted'),
      isPermitOrder?: boolean(name='IsPermitOrder'),
      isPermitOrderForSuccess?: boolean(name='IsPermitOrderForSuccess'),
      ossFilePath?: string(name='OssFilePath'),
      scheduleType?: string(name='ScheduleType'),
      status?: string(name='Status'),
      successCount?: int32(name='SuccessCount'),
      taskId?: long(name='TaskId'),
      taskInstanceId?: long(name='TaskInstanceId'),
      taskName?: string(name='TaskName'),
      totalCount?: int32(name='TotalCount'),
    }
  ](name='FcSaasTaskDTO')
  }(name='List'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model QuerySmsSaasTaskListNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsSaasTaskListNewResponseBody(name='body'),
}

/**
 * @param request QuerySmsSaasTaskListNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySmsSaasTaskListNewResponse
 */
async function querySmsSaasTaskListNewWithOptions(request: QuerySmsSaasTaskListNewRequest, runtime: $RuntimeOptions): QuerySmsSaasTaskListNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.status)) {
    query['Status'] = request.status;
  }
  if (!$isNull(request.taskName)) {
    query['TaskName'] = request.taskName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySmsSaasTaskListNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySmsSaasTaskListNewRequest
 * @return QuerySmsSaasTaskListNewResponse
 */
async function querySmsSaasTaskListNew(request: QuerySmsSaasTaskListNewRequest): QuerySmsSaasTaskListNewResponse {
  var runtime = new $RuntimeOptions{};
  return querySmsSaasTaskListNewWithOptions(request, runtime);
}

model QuerySmsSendFailDetailsUrlRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  prodId?: string(name='ProdId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sendDate?: string(name='SendDate'),
}

model QuerySmsSendFailDetailsUrlResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QuerySmsSendFailDetailsUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsSendFailDetailsUrlResponseBody(name='body'),
}

/**
 * @param request QuerySmsSendFailDetailsUrlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySmsSendFailDetailsUrlResponse
 */
async function querySmsSendFailDetailsUrlWithOptions(request: QuerySmsSendFailDetailsUrlRequest, runtime: $RuntimeOptions): QuerySmsSendFailDetailsUrlResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.prodId)) {
    query['ProdId'] = request.prodId;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.sendDate)) {
    query['SendDate'] = request.sendDate;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySmsSendFailDetailsUrl',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySmsSendFailDetailsUrlRequest
 * @return QuerySmsSendFailDetailsUrlResponse
 */
async function querySmsSendFailDetailsUrl(request: QuerySmsSendFailDetailsUrlRequest): QuerySmsSendFailDetailsUrlResponse {
  var runtime = new $RuntimeOptions{};
  return querySmsSendFailDetailsUrlWithOptions(request, runtime);
}

model QuerySmsSendFailDetailsUrlNewRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  prodId?: string(name='ProdId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sendDate?: string(name='SendDate'),
}

model QuerySmsSendFailDetailsUrlNewResponseBody = {
  downloadUrl?: string(name='DownloadUrl'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model QuerySmsSendFailDetailsUrlNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsSendFailDetailsUrlNewResponseBody(name='body'),
}

/**
 * @param request QuerySmsSendFailDetailsUrlNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySmsSendFailDetailsUrlNewResponse
 */
async function querySmsSendFailDetailsUrlNewWithOptions(request: QuerySmsSendFailDetailsUrlNewRequest, runtime: $RuntimeOptions): QuerySmsSendFailDetailsUrlNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.prodId)) {
    query['ProdId'] = request.prodId;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.sendDate)) {
    query['SendDate'] = request.sendDate;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySmsSendFailDetailsUrlNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySmsSendFailDetailsUrlNewRequest
 * @return QuerySmsSendFailDetailsUrlNewResponse
 */
async function querySmsSendFailDetailsUrlNew(request: QuerySmsSendFailDetailsUrlNewRequest): QuerySmsSendFailDetailsUrlNewResponse {
  var runtime = new $RuntimeOptions{};
  return querySmsSendFailDetailsUrlNewWithOptions(request, runtime);
}

model QuerySmsSignDetailBySignIdNewRequest {
  id?: string(name='Id', description='This parameter is required.'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  signGray?: boolean(name='SignGray'),
}

model QuerySmsSignDetailBySignIdNewResponseBody = {
  accessToken?: string(name='AccessToken'),
  applicationScene?: {
    content?: string(name='Content'),
    id?: long(name='Id'),
    name?: string(name='Name'),
  }(name='ApplicationScene'),
  auditInfo?: string(name='AuditInfo'),
  auditRemarkInfo?: string(name='AuditRemarkInfo'),
  auditState?: string(name='AuditState'),
  authorization?: string(name='Authorization'),
  authorizationEffTime?: string(name='AuthorizationEffTime'),
  authorizationLetter?: string(name='AuthorizationLetter'),
  authorizationLetterAuditPass?: boolean(name='AuthorizationLetterAuditPass'),
  authorizationLetterId?: string(name='AuthorizationLetterId'),
  authorizationLetterName?: string(name='AuthorizationLetterName'),
  authorizationLetterState?: string(name='AuthorizationLetterState'),
  authorizationLetterStatus?: string(name='AuthorizationLetterStatus'),
  authorizationSignScope?: string(name='AuthorizationSignScope'),
  effectSceneType?: int32(name='EffectSceneType'),
  enableAuthorizationLetter?: boolean(name='EnableAuthorizationLetter'),
  extendMessage?: string(name='ExtendMessage'),
  fileIds?: [ long ](name='FileIds'),
  fileUrlList?: [ string ](name='FileUrlList'),
  from?: string(name='From'),
  gmtCreateStr?: string(name='GmtCreateStr'),
  id?: string(name='Id'),
  isAuthorizationLetterOCRComplete?: boolean(name='IsAuthorizationLetterOCRComplete'),
  isAuthorizationLetterOCRDiff?: boolean(name='IsAuthorizationLetterOCRDiff'),
  isSignScopeOCRDiff?: boolean(name='IsSignScopeOCRDiff'),
  list?: [ 
    {
      auditState?: string(name='AuditState'),
      sceneType?: int32(name='SceneType'),
    }
  ](name='List'),
  needAuthorized?: boolean(name='NeedAuthorized'),
  openTag?: boolean(name='OpenTag'),
  orderId?: string(name='OrderId'),
  organizationCode?: string(name='OrganizationCode'),
  ossKeys?: [ string ](name='OssKeys'),
  proxyAuthorization?: string(name='ProxyAuthorization'),
  remark?: string(name='Remark'),
  requestId?: string(name='RequestId'),
  sceneType?: int32(name='SceneType'),
  serviceType?: int32(name='ServiceType'),
  signCode?: string(name='SignCode'),
  signName?: string(name='SignName'),
  signScopeOCR?: string(name='SignScopeOCR'),
  signUpgrade?: string(name='SignUpgrade'),
}

model QuerySmsSignDetailBySignIdNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsSignDetailBySignIdNewResponseBody(name='body'),
}

/**
 * @param request QuerySmsSignDetailBySignIdNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySmsSignDetailBySignIdNewResponse
 */
async function querySmsSignDetailBySignIdNewWithOptions(request: QuerySmsSignDetailBySignIdNewRequest, runtime: $RuntimeOptions): QuerySmsSignDetailBySignIdNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.id)) {
    query['Id'] = request.id;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.signGray)) {
    query['SignGray'] = request.signGray;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySmsSignDetailBySignIdNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySmsSignDetailBySignIdNewRequest
 * @return QuerySmsSignDetailBySignIdNewResponse
 */
async function querySmsSignDetailBySignIdNew(request: QuerySmsSignDetailBySignIdNewRequest): QuerySmsSignDetailBySignIdNewResponse {
  var runtime = new $RuntimeOptions{};
  return querySmsSignDetailBySignIdNewWithOptions(request, runtime);
}

model QuerySmsSignLastRangeRequest {
  auditState?: string(name='AuditState'),
  bizType?: string(name='BizType'),
  isGlobeSign?: int32(name='IsGlobeSign'),
  limit?: int32(name='Limit'),
  needDefaultSign?: boolean(name='NeedDefaultSign'),
  ownerId?: long(name='OwnerId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  signName?: string(name='SignName'),
}

model QuerySmsSignLastRangeResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QuerySmsSignLastRangeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsSignLastRangeResponseBody(name='body'),
}

/**
 * @param request QuerySmsSignLastRangeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySmsSignLastRangeResponse
 */
async function querySmsSignLastRangeWithOptions(request: QuerySmsSignLastRangeRequest, runtime: $RuntimeOptions): QuerySmsSignLastRangeResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.auditState)) {
    query['AuditState'] = request.auditState;
  }
  if (!$isNull(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!$isNull(request.isGlobeSign)) {
    query['IsGlobeSign'] = request.isGlobeSign;
  }
  if (!$isNull(request.limit)) {
    query['Limit'] = request.limit;
  }
  if (!$isNull(request.needDefaultSign)) {
    query['NeedDefaultSign'] = request.needDefaultSign;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.signName)) {
    query['SignName'] = request.signName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySmsSignLastRange',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySmsSignLastRangeRequest
 * @return QuerySmsSignLastRangeResponse
 */
async function querySmsSignLastRange(request: QuerySmsSignLastRangeRequest): QuerySmsSignLastRangeResponse {
  var runtime = new $RuntimeOptions{};
  return querySmsSignLastRangeWithOptions(request, runtime);
}

model QuerySmsSignLastRangeNewRequest {
  auditState?: string(name='AuditState'),
  isGlobeSign?: int32(name='IsGlobeSign'),
  limit?: int32(name='Limit'),
  needDefaultSign?: boolean(name='NeedDefaultSign'),
  ownerId?: long(name='OwnerId'),
  pageIndex?: int32(name='PageIndex'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sceneType?: int32(name='SceneType'),
  signName?: string(name='SignName'),
}

model QuerySmsSignLastRangeNewResponseBody = {
  list?: {
    smsSign?: [ 
    {
      auditInfo?: string(name='AuditInfo'),
      auditRemarkInfo?: string(name='AuditRemarkInfo'),
      auditState?: string(name='AuditState'),
      extendMessage?: string(name='ExtendMessage'),
      fileIds?: {
        fileId?: [ long ](name='FileId')
      }(name='FileIds'),
      fileUrlList?: {
        fileUrl?: [ string ](name='FileUrl')
      }(name='FileUrlList'),
      gmtCreateStr?: string(name='GmtCreateStr'),
      id?: string(name='Id'),
      isDefaultSign?: boolean(name='IsDefaultSign'),
      operateDateStr?: string(name='OperateDateStr'),
      orderId?: string(name='OrderId'),
      remark?: string(name='Remark'),
      sceneType?: int32(name='SceneType'),
      serviceType?: int32(name='ServiceType'),
      signName?: string(name='SignName'),
      signSceneDetailList?: {
        signSceneDetail?: [ 
        {
          auditState?: string(name='AuditState'),
          sceneType?: int32(name='SceneType'),
        }
      ](name='SignSceneDetail')
      }(name='SignSceneDetailList'),
      signType?: int32(name='SignType'),
      signUsageName?: string(name='SignUsageName'),
    }
  ](name='SmsSign')
  }(name='List'),
  requestId?: string(name='RequestId'),
}

model QuerySmsSignLastRangeNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsSignLastRangeNewResponseBody(name='body'),
}

/**
 * @param request QuerySmsSignLastRangeNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySmsSignLastRangeNewResponse
 */
async function querySmsSignLastRangeNewWithOptions(request: QuerySmsSignLastRangeNewRequest, runtime: $RuntimeOptions): QuerySmsSignLastRangeNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.auditState)) {
    query['AuditState'] = request.auditState;
  }
  if (!$isNull(request.isGlobeSign)) {
    query['IsGlobeSign'] = request.isGlobeSign;
  }
  if (!$isNull(request.limit)) {
    query['Limit'] = request.limit;
  }
  if (!$isNull(request.needDefaultSign)) {
    query['NeedDefaultSign'] = request.needDefaultSign;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.pageIndex)) {
    query['PageIndex'] = request.pageIndex;
  }
  if (!$isNull(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.sceneType)) {
    query['SceneType'] = request.sceneType;
  }
  if (!$isNull(request.signName)) {
    query['SignName'] = request.signName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySmsSignLastRangeNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySmsSignLastRangeNewRequest
 * @return QuerySmsSignLastRangeNewResponse
 */
async function querySmsSignLastRangeNew(request: QuerySmsSignLastRangeNewRequest): QuerySmsSignLastRangeNewResponse {
  var runtime = new $RuntimeOptions{};
  return querySmsSignLastRangeNewWithOptions(request, runtime);
}

model QuerySmsSignListRequest {
  auditState?: string(name='AuditState'),
  bizType?: string(name='BizType'),
  isGlobeSign?: int32(name='IsGlobeSign'),
  ownerId?: long(name='OwnerId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  serviceType?: string(name='ServiceType'),
  signName?: string(name='SignName'),
}

model QuerySmsSignListResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QuerySmsSignListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsSignListResponseBody(name='body'),
}

/**
 * @param request QuerySmsSignListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySmsSignListResponse
 */
async function querySmsSignListWithOptions(request: QuerySmsSignListRequest, runtime: $RuntimeOptions): QuerySmsSignListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.auditState)) {
    query['AuditState'] = request.auditState;
  }
  if (!$isNull(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!$isNull(request.isGlobeSign)) {
    query['IsGlobeSign'] = request.isGlobeSign;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.serviceType)) {
    query['ServiceType'] = request.serviceType;
  }
  if (!$isNull(request.signName)) {
    query['SignName'] = request.signName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySmsSignList',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySmsSignListRequest
 * @return QuerySmsSignListResponse
 */
async function querySmsSignList(request: QuerySmsSignListRequest): QuerySmsSignListResponse {
  var runtime = new $RuntimeOptions{};
  return querySmsSignListWithOptions(request, runtime);
}

model QuerySmsSignListNewRequest {
  aggregatedRegisterStatus?: int32(name='AggregatedRegisterStatus'),
  auditState?: string(name='AuditState'),
  bizType?: string(name='BizType'),
  isGlobeSign?: int32(name='IsGlobeSign'),
  operatorCodes?: [ string ](name='OperatorCodes'),
  operatorRegisterStatus?: int32(name='OperatorRegisterStatus'),
  ownerId?: long(name='OwnerId'),
  pageNo?: long(name='PageNo'),
  pageSize?: long(name='PageSize'),
  prodCode?: string(name='ProdCode'),
  qualificationName?: string(name='QualificationName'),
  registerResult?: int32(name='RegisterResult'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  serviceType?: string(name='ServiceType'),
  signName?: string(name='SignName'),
  signSource?: string(name='SignSource'),
}

model QuerySmsSignListNewShrinkRequest {
  aggregatedRegisterStatus?: int32(name='AggregatedRegisterStatus'),
  auditState?: string(name='AuditState'),
  bizType?: string(name='BizType'),
  isGlobeSign?: int32(name='IsGlobeSign'),
  operatorCodesShrink?: string(name='OperatorCodes'),
  operatorRegisterStatus?: int32(name='OperatorRegisterStatus'),
  ownerId?: long(name='OwnerId'),
  pageNo?: long(name='PageNo'),
  pageSize?: long(name='PageSize'),
  prodCode?: string(name='ProdCode'),
  qualificationName?: string(name='QualificationName'),
  registerResult?: int32(name='RegisterResult'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  serviceType?: string(name='ServiceType'),
  signName?: string(name='SignName'),
  signSource?: string(name='SignSource'),
}

model QuerySmsSignListNewResponseBody = {
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  smsSign?: {
    smsSign?: [ 
    {
      aggregatedRegisterStatus?: int32(name='AggregatedRegisterStatus'),
      applySource?: string(name='ApplySource'),
      auditInfo?: string(name='AuditInfo'),
      auditRemarkInfo?: string(name='AuditRemarkInfo'),
      auditState?: string(name='AuditState'),
      authorization?: string(name='Authorization'),
      authorizationEffTime?: string(name='AuthorizationEffTime'),
      authorizationLetter?: string(name='AuthorizationLetter'),
      authorizationLetterAuditPass?: boolean(name='AuthorizationLetterAuditPass'),
      authorizationLetterId?: long(name='AuthorizationLetterId'),
      authorizationLetterName?: string(name='AuthorizationLetterName'),
      authorizationLetterStatus?: string(name='AuthorizationLetterStatus'),
      authorizationSignScope?: string(name='AuthorizationSignScope'),
      canRegister?: boolean(name='CanRegister'),
      enableAuthorizationLetter?: boolean(name='EnableAuthorizationLetter'),
      extendMessage?: string(name='ExtendMessage'),
      fileIds?: {
        fileId?: [ long ](name='FileId')
      }(name='FileIds'),
      fileUrlList?: {
        fileUrl?: [ string ](name='FileUrl')
      }(name='FileUrlList'),
      gmtCreateStr?: string(name='GmtCreateStr'),
      id?: string(name='Id'),
      isAuthorizationLetterOCRComplete?: boolean(name='IsAuthorizationLetterOCRComplete'),
      isAuthorizationLetterOCRDiff?: boolean(name='IsAuthorizationLetterOCRDiff'),
      isDefaultSign?: boolean(name='IsDefaultSign'),
      isSignScopeOCRDiff?: boolean(name='IsSignScopeOCRDiff'),
      mobileRegisterStatus?: int32(name='MobileRegisterStatus'),
      operateDateStr?: string(name='OperateDateStr'),
      orderCount?: long(name='OrderCount'),
      orderId?: string(name='OrderId'),
      organizationCode?: string(name='OrganizationCode'),
      proxyAuthorization?: string(name='ProxyAuthorization'),
      qualificationId?: long(name='QualificationId'),
      qualificationName?: string(name='QualificationName'),
      qualificationState?: string(name='QualificationState'),
      qualificationVersion?: long(name='QualificationVersion'),
      qualificationWorkOrderId?: long(name='QualificationWorkOrderId'),
      registerResult?: int32(name='RegisterResult'),
      registerTime?: long(name='RegisterTime'),
      remark?: string(name='Remark'),
      resultReason?: string(name='ResultReason'),
      sceneType?: int32(name='SceneType'),
      serviceType?: int32(name='ServiceType'),
      signCode?: string(name='SignCode'),
      signName?: string(name='SignName'),
      signSceneDetailList?: {
        signSceneDetail?: [ 
        {
          auditState?: string(name='AuditState'),
          sceneType?: int32(name='SceneType'),
        }
      ](name='SignSceneDetail')
      }(name='SignSceneDetailList'),
      signScopeOCR?: string(name='SignScopeOCR'),
      signSource?: string(name='SignSource'),
      signType?: int32(name='SignType'),
      telecomRegisterStatus?: int32(name='TelecomRegisterStatus'),
      unicomRegisterStatus?: int32(name='UnicomRegisterStatus'),
    }
  ](name='SmsSign')
  }(name='SmsSign'),
  total?: long(name='Total'),
}

model QuerySmsSignListNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsSignListNewResponseBody(name='body'),
}

/**
 * @param tmpReq QuerySmsSignListNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySmsSignListNewResponse
 */
async function querySmsSignListNewWithOptions(tmpReq: QuerySmsSignListNewRequest, runtime: $RuntimeOptions): QuerySmsSignListNewResponse {
  tmpReq.validate();
  var request = new QuerySmsSignListNewShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.operatorCodes)) {
    request.operatorCodesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.operatorCodes, 'OperatorCodes', 'json');
  }
  var query = {};
  if (!$isNull(request.aggregatedRegisterStatus)) {
    query['AggregatedRegisterStatus'] = request.aggregatedRegisterStatus;
  }
  if (!$isNull(request.auditState)) {
    query['AuditState'] = request.auditState;
  }
  if (!$isNull(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!$isNull(request.isGlobeSign)) {
    query['IsGlobeSign'] = request.isGlobeSign;
  }
  if (!$isNull(request.operatorCodesShrink)) {
    query['OperatorCodes'] = request.operatorCodesShrink;
  }
  if (!$isNull(request.operatorRegisterStatus)) {
    query['OperatorRegisterStatus'] = request.operatorRegisterStatus;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.qualificationName)) {
    query['QualificationName'] = request.qualificationName;
  }
  if (!$isNull(request.registerResult)) {
    query['RegisterResult'] = request.registerResult;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.serviceType)) {
    query['ServiceType'] = request.serviceType;
  }
  if (!$isNull(request.signName)) {
    query['SignName'] = request.signName;
  }
  if (!$isNull(request.signSource)) {
    query['SignSource'] = request.signSource;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySmsSignListNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySmsSignListNewRequest
 * @return QuerySmsSignListNewResponse
 */
async function querySmsSignListNew(request: QuerySmsSignListNewRequest): QuerySmsSignListNewResponse {
  var runtime = new $RuntimeOptions{};
  return querySmsSignListNewWithOptions(request, runtime);
}

model QuerySmsSignValidRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  serviceType?: int32(name='ServiceType'),
  signName?: string(name='SignName'),
}

model QuerySmsSignValidResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QuerySmsSignValidResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsSignValidResponseBody(name='body'),
}

/**
 * @param request QuerySmsSignValidRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySmsSignValidResponse
 */
async function querySmsSignValidWithOptions(request: QuerySmsSignValidRequest, runtime: $RuntimeOptions): QuerySmsSignValidResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.serviceType)) {
    query['ServiceType'] = request.serviceType;
  }
  if (!$isNull(request.signName)) {
    query['SignName'] = request.signName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySmsSignValid',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySmsSignValidRequest
 * @return QuerySmsSignValidResponse
 */
async function querySmsSignValid(request: QuerySmsSignValidRequest): QuerySmsSignValidResponse {
  var runtime = new $RuntimeOptions{};
  return querySmsSignValidWithOptions(request, runtime);
}

model QuerySmsSignValidNewRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  serviceType?: int32(name='ServiceType'),
  signName?: string(name='SignName'),
  signUpgrade?: boolean(name='SignUpgrade'),
}

model QuerySmsSignValidNewResponseBody = {
  code?: string(name='Code'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
}

model QuerySmsSignValidNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsSignValidNewResponseBody(name='body'),
}

/**
 * @param request QuerySmsSignValidNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySmsSignValidNewResponse
 */
async function querySmsSignValidNewWithOptions(request: QuerySmsSignValidNewRequest, runtime: $RuntimeOptions): QuerySmsSignValidNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.serviceType)) {
    query['ServiceType'] = request.serviceType;
  }
  if (!$isNull(request.signName)) {
    query['SignName'] = request.signName;
  }
  if (!$isNull(request.signUpgrade)) {
    query['SignUpgrade'] = request.signUpgrade;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySmsSignValidNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySmsSignValidNewRequest
 * @return QuerySmsSignValidNewResponse
 */
async function querySmsSignValidNew(request: QuerySmsSignValidNewRequest): QuerySmsSignValidNewResponse {
  var runtime = new $RuntimeOptions{};
  return querySmsSignValidNewWithOptions(request, runtime);
}

model QuerySmsStatisticsRequest {
  endDate?: string(name='EndDate', description='This parameter is required.'),
  ownerId?: long(name='OwnerId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  prodCode?: string(name='ProdCode'),
  prodId?: string(name='ProdId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  signName?: string(name='SignName'),
  startDate?: string(name='StartDate', description='This parameter is required.'),
  template?: string(name='Template'),
}

model QuerySmsStatisticsResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QuerySmsStatisticsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsStatisticsResponseBody(name='body'),
}

/**
 * @param request QuerySmsStatisticsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySmsStatisticsResponse
 */
async function querySmsStatisticsWithOptions(request: QuerySmsStatisticsRequest, runtime: $RuntimeOptions): QuerySmsStatisticsResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.endDate)) {
    query['EndDate'] = request.endDate;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.prodId)) {
    query['ProdId'] = request.prodId;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.signName)) {
    query['SignName'] = request.signName;
  }
  if (!$isNull(request.startDate)) {
    query['StartDate'] = request.startDate;
  }
  if (!$isNull(request.template)) {
    query['Template'] = request.template;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySmsStatistics',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySmsStatisticsRequest
 * @return QuerySmsStatisticsResponse
 */
async function querySmsStatistics(request: QuerySmsStatisticsRequest): QuerySmsStatisticsResponse {
  var runtime = new $RuntimeOptions{};
  return querySmsStatisticsWithOptions(request, runtime);
}

model QuerySmsStatisticsByTemplateRequest {
  endDate?: string(name='EndDate', description='This parameter is required.'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  prodId?: string(name='ProdId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  startDate?: string(name='StartDate', description='This parameter is required.'),
  template?: string(name='Template'),
}

model QuerySmsStatisticsByTemplateResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QuerySmsStatisticsByTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsStatisticsByTemplateResponseBody(name='body'),
}

/**
 * @param request QuerySmsStatisticsByTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySmsStatisticsByTemplateResponse
 */
async function querySmsStatisticsByTemplateWithOptions(request: QuerySmsStatisticsByTemplateRequest, runtime: $RuntimeOptions): QuerySmsStatisticsByTemplateResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.endDate)) {
    query['EndDate'] = request.endDate;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.prodId)) {
    query['ProdId'] = request.prodId;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.startDate)) {
    query['StartDate'] = request.startDate;
  }
  if (!$isNull(request.template)) {
    query['Template'] = request.template;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySmsStatisticsByTemplate',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySmsStatisticsByTemplateRequest
 * @return QuerySmsStatisticsByTemplateResponse
 */
async function querySmsStatisticsByTemplate(request: QuerySmsStatisticsByTemplateRequest): QuerySmsStatisticsByTemplateResponse {
  var runtime = new $RuntimeOptions{};
  return querySmsStatisticsByTemplateWithOptions(request, runtime);
}

model QuerySmsStatisticsByTemplateNewRequest {
  endDate?: string(name='EndDate', description='This parameter is required.'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  prodId?: string(name='ProdId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  startDate?: string(name='StartDate', description='This parameter is required.'),
  template?: string(name='Template'),
}

model QuerySmsStatisticsByTemplateNewResponseBody = {
  list?: {
    smsStatisticsResponse?: [ 
    {
      detailStsDate?: string(name='DetailStsDate'),
      downloadUrl?: string(name='DownloadUrl'),
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      id?: long(name='Id'),
      sendSuccessRate?: string(name='SendSuccessRate'),
      sendTotal?: long(name='SendTotal'),
      sendTotalFail?: long(name='SendTotalFail'),
      sendTotalSuccess?: long(name='SendTotalSuccess'),
      sendTotalUnknown?: long(name='SendTotalUnknown'),
      status?: string(name='Status'),
      templateCode?: string(name='TemplateCode'),
      templateName?: string(name='TemplateName'),
    }
  ](name='SmsStatisticsResponse')
  }(name='List'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model QuerySmsStatisticsByTemplateNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsStatisticsByTemplateNewResponseBody(name='body'),
}

/**
 * @param request QuerySmsStatisticsByTemplateNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySmsStatisticsByTemplateNewResponse
 */
async function querySmsStatisticsByTemplateNewWithOptions(request: QuerySmsStatisticsByTemplateNewRequest, runtime: $RuntimeOptions): QuerySmsStatisticsByTemplateNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.endDate)) {
    query['EndDate'] = request.endDate;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.prodId)) {
    query['ProdId'] = request.prodId;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.startDate)) {
    query['StartDate'] = request.startDate;
  }
  if (!$isNull(request.template)) {
    query['Template'] = request.template;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySmsStatisticsByTemplateNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySmsStatisticsByTemplateNewRequest
 * @return QuerySmsStatisticsByTemplateNewResponse
 */
async function querySmsStatisticsByTemplateNew(request: QuerySmsStatisticsByTemplateNewRequest): QuerySmsStatisticsByTemplateNewResponse {
  var runtime = new $RuntimeOptions{};
  return querySmsStatisticsByTemplateNewWithOptions(request, runtime);
}

model QuerySmsStatisticsNewRequest {
  endDate?: string(name='EndDate', description='This parameter is required.'),
  ownerId?: long(name='OwnerId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  prodCode?: string(name='ProdCode'),
  prodId?: long(name='ProdId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  signName?: string(name='SignName'),
  startDate?: string(name='StartDate', description='This parameter is required.'),
  template?: string(name='Template'),
}

model QuerySmsStatisticsNewResponseBody = {
  list?: [ 
    {
      bizType?: int32(name='BizType'),
      detailStsDate?: string(name='DetailStsDate'),
      downloadUrl?: string(name='DownloadUrl'),
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      id?: long(name='Id'),
      sendSuccessRate?: string(name='SendSuccessRate'),
      sendTotal?: long(name='SendTotal'),
      sendTotalFail?: long(name='SendTotalFail'),
      sendTotalSuccess?: long(name='SendTotalSuccess'),
      sendTotalUnknown?: long(name='SendTotalUnknown'),
      signName?: string(name='SignName'),
      status?: string(name='Status'),
      templateCode?: string(name='TemplateCode'),
      templateName?: string(name='TemplateName'),
    }
  ](name='List'),
  requestId?: string(name='RequestId'),
}

model QuerySmsStatisticsNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsStatisticsNewResponseBody(name='body'),
}

/**
 * @param request QuerySmsStatisticsNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySmsStatisticsNewResponse
 */
async function querySmsStatisticsNewWithOptions(request: QuerySmsStatisticsNewRequest, runtime: $RuntimeOptions): QuerySmsStatisticsNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.endDate)) {
    query['EndDate'] = request.endDate;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.prodId)) {
    query['ProdId'] = request.prodId;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.signName)) {
    query['SignName'] = request.signName;
  }
  if (!$isNull(request.startDate)) {
    query['StartDate'] = request.startDate;
  }
  if (!$isNull(request.template)) {
    query['Template'] = request.template;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySmsStatisticsNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySmsStatisticsNewRequest
 * @return QuerySmsStatisticsNewResponse
 */
async function querySmsStatisticsNew(request: QuerySmsStatisticsNewRequest): QuerySmsStatisticsNewResponse {
  var runtime = new $RuntimeOptions{};
  return querySmsStatisticsNewWithOptions(request, runtime);
}

model QuerySmsStatisticsUrlRequest {
  endDate?: string(name='EndDate', description='This parameter is required.'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  prodId?: string(name='ProdId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  signName?: string(name='SignName'),
  startDate?: string(name='StartDate', description='This parameter is required.'),
  template?: string(name='Template'),
}

model QuerySmsStatisticsUrlResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QuerySmsStatisticsUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsStatisticsUrlResponseBody(name='body'),
}

/**
 * @param request QuerySmsStatisticsUrlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySmsStatisticsUrlResponse
 */
async function querySmsStatisticsUrlWithOptions(request: QuerySmsStatisticsUrlRequest, runtime: $RuntimeOptions): QuerySmsStatisticsUrlResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.endDate)) {
    query['EndDate'] = request.endDate;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.prodId)) {
    query['ProdId'] = request.prodId;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.signName)) {
    query['SignName'] = request.signName;
  }
  if (!$isNull(request.startDate)) {
    query['StartDate'] = request.startDate;
  }
  if (!$isNull(request.template)) {
    query['Template'] = request.template;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySmsStatisticsUrl',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySmsStatisticsUrlRequest
 * @return QuerySmsStatisticsUrlResponse
 */
async function querySmsStatisticsUrl(request: QuerySmsStatisticsUrlRequest): QuerySmsStatisticsUrlResponse {
  var runtime = new $RuntimeOptions{};
  return querySmsStatisticsUrlWithOptions(request, runtime);
}

model QuerySmsStatisticsUrlNewRequest {
  endDate?: string(name='EndDate', description='This parameter is required.'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  prodId?: long(name='ProdId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  signName?: string(name='SignName'),
  startDate?: string(name='StartDate', description='This parameter is required.'),
  template?: string(name='Template'),
}

model QuerySmsStatisticsUrlNewResponseBody = {
  downloadUrl?: string(name='DownloadUrl'),
  requestId?: string(name='RequestId'),
}

model QuerySmsStatisticsUrlNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsStatisticsUrlNewResponseBody(name='body'),
}

/**
 * @param request QuerySmsStatisticsUrlNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySmsStatisticsUrlNewResponse
 */
async function querySmsStatisticsUrlNewWithOptions(request: QuerySmsStatisticsUrlNewRequest, runtime: $RuntimeOptions): QuerySmsStatisticsUrlNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.endDate)) {
    query['EndDate'] = request.endDate;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.prodId)) {
    query['ProdId'] = request.prodId;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.signName)) {
    query['SignName'] = request.signName;
  }
  if (!$isNull(request.startDate)) {
    query['StartDate'] = request.startDate;
  }
  if (!$isNull(request.template)) {
    query['Template'] = request.template;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySmsStatisticsUrlNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySmsStatisticsUrlNewRequest
 * @return QuerySmsStatisticsUrlNewResponse
 */
async function querySmsStatisticsUrlNew(request: QuerySmsStatisticsUrlNewRequest): QuerySmsStatisticsUrlNewResponse {
  var runtime = new $RuntimeOptions{};
  return querySmsStatisticsUrlNewWithOptions(request, runtime);
}

model QuerySmsStepRequest {
  billCycle?: string(name='BillCycle'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QuerySmsStepResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QuerySmsStepResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsStepResponseBody(name='body'),
}

/**
 * @param request QuerySmsStepRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySmsStepResponse
 */
async function querySmsStepWithOptions(request: QuerySmsStepRequest, runtime: $RuntimeOptions): QuerySmsStepResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.billCycle)) {
    query['BillCycle'] = request.billCycle;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySmsStep',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySmsStepRequest
 * @return QuerySmsStepResponse
 */
async function querySmsStep(request: QuerySmsStepRequest): QuerySmsStepResponse {
  var runtime = new $RuntimeOptions{};
  return querySmsStepWithOptions(request, runtime);
}

model QuerySmsTemplateByCodeRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateCode?: string(name='TemplateCode', description='This parameter is required.'),
}

model QuerySmsTemplateByCodeResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QuerySmsTemplateByCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsTemplateByCodeResponseBody(name='body'),
}

/**
 * @param request QuerySmsTemplateByCodeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySmsTemplateByCodeResponse
 */
async function querySmsTemplateByCodeWithOptions(request: QuerySmsTemplateByCodeRequest, runtime: $RuntimeOptions): QuerySmsTemplateByCodeResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySmsTemplateByCode',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySmsTemplateByCodeRequest
 * @return QuerySmsTemplateByCodeResponse
 */
async function querySmsTemplateByCode(request: QuerySmsTemplateByCodeRequest): QuerySmsTemplateByCodeResponse {
  var runtime = new $RuntimeOptions{};
  return querySmsTemplateByCodeWithOptions(request, runtime);
}

model QuerySmsTemplateByCodeNewRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateCode?: string(name='TemplateCode', description='This parameter is required.'),
}

model QuerySmsTemplateByCodeNewResponseBody = {
  accessToken?: string(name='AccessToken'),
  applicationScene?: {
    content?: string(name='Content'),
    id?: long(name='Id'),
    name?: string(name='Name'),
  }(name='ApplicationScene'),
  auditInfo?: string(name='AuditInfo'),
  auditRemarkInfo?: string(name='AuditRemarkInfo'),
  bizType?: string(name='BizType'),
  fileIds?: {
    fileId?: [ long ](name='FileId')
  }(name='FileIds'),
  fileUrlList?: {
    fileUrl?: [ string ](name='FileUrl')
  }(name='FileUrlList'),
  from?: string(name='From'),
  gmtCreateStr?: string(name='GmtCreateStr'),
  intlType?: int32(name='IntlType'),
  moreDataFileIds?: {
    moreDataFileId?: [ long ](name='MoreDataFileId')
  }(name='MoreDataFileIds'),
  moreDataFileUrls?: {
    moreDataFileUrl?: [ string ](name='MoreDataFileUrl')
  }(name='MoreDataFileUrls'),
  moreDataOssKeys?: {
    moreDataOssKey?: [ string ](name='MoreDataOssKey')
  }(name='MoreDataOssKeys'),
  needAuthorized?: boolean(name='NeedAuthorized'),
  openTag?: boolean(name='OpenTag'),
  orderId?: string(name='OrderId'),
  ossKeys?: {
    ossKey?: [ string ](name='OssKey')
  }(name='OssKeys'),
  productUrl?: string(name='ProductUrl'),
  relatedSignName?: string(name='RelatedSignName'),
  remark?: string(name='Remark'),
  requestId?: string(name='RequestId'),
  rmdTemplateId?: int32(name='RmdTemplateId'),
  rmdTemplateVariableNum?: int32(name='RmdTemplateVariableNum'),
  signName?: string(name='SignName'),
  signType?: int32(name='SignType'),
  smsContent?: string(name='SmsContent'),
  tags?: {
    tagInfo?: [ 
    {
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagInfo')
  }(name='Tags'),
  templateCode?: string(name='TemplateCode'),
  templateName?: string(name='TemplateName'),
  templateRule?: string(name='TemplateRule'),
}

model QuerySmsTemplateByCodeNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsTemplateByCodeNewResponseBody(name='body'),
}

/**
 * @param request QuerySmsTemplateByCodeNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySmsTemplateByCodeNewResponse
 */
async function querySmsTemplateByCodeNewWithOptions(request: QuerySmsTemplateByCodeNewRequest, runtime: $RuntimeOptions): QuerySmsTemplateByCodeNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySmsTemplateByCodeNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySmsTemplateByCodeNewRequest
 * @return QuerySmsTemplateByCodeNewResponse
 */
async function querySmsTemplateByCodeNew(request: QuerySmsTemplateByCodeNewRequest): QuerySmsTemplateByCodeNewResponse {
  var runtime = new $RuntimeOptions{};
  return querySmsTemplateByCodeNewWithOptions(request, runtime);
}

model QuerySmsTemplateLastRangeRequest {
  bizType?: string(name='BizType'),
  limit?: int32(name='Limit'),
  needDefaultTemplate?: boolean(name='NeedDefaultTemplate'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  prodId?: string(name='ProdId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateName?: string(name='TemplateName'),
}

model QuerySmsTemplateLastRangeResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QuerySmsTemplateLastRangeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsTemplateLastRangeResponseBody(name='body'),
}

/**
 * @param request QuerySmsTemplateLastRangeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySmsTemplateLastRangeResponse
 */
async function querySmsTemplateLastRangeWithOptions(request: QuerySmsTemplateLastRangeRequest, runtime: $RuntimeOptions): QuerySmsTemplateLastRangeResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!$isNull(request.limit)) {
    query['Limit'] = request.limit;
  }
  if (!$isNull(request.needDefaultTemplate)) {
    query['NeedDefaultTemplate'] = request.needDefaultTemplate;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.prodId)) {
    query['ProdId'] = request.prodId;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.templateName)) {
    query['TemplateName'] = request.templateName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySmsTemplateLastRange',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySmsTemplateLastRangeRequest
 * @return QuerySmsTemplateLastRangeResponse
 */
async function querySmsTemplateLastRange(request: QuerySmsTemplateLastRangeRequest): QuerySmsTemplateLastRangeResponse {
  var runtime = new $RuntimeOptions{};
  return querySmsTemplateLastRangeWithOptions(request, runtime);
}

model QuerySmsTemplateLastRangeNewRequest {
  bizType?: string(name='BizType'),
  filterAnyParam?: boolean(name='FilterAnyParam'),
  limit?: int32(name='Limit'),
  needDefaultTemplate?: boolean(name='NeedDefaultTemplate'),
  ownerId?: long(name='OwnerId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  prodCode?: string(name='ProdCode'),
  prodId?: string(name='ProdId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateName?: string(name='TemplateName'),
}

model QuerySmsTemplateLastRangeNewResponseBody = {
  list?: {
    smsTemplate?: [ 
    {
      auditInfo?: string(name='AuditInfo'),
      auditRemarkInfo?: string(name='AuditRemarkInfo'),
      auditState?: string(name='AuditState'),
      bizType?: string(name='BizType'),
      expireDateStr?: string(name='ExpireDateStr'),
      gmtCreateStr?: string(name='GmtCreateStr'),
      id?: string(name='Id'),
      isAnyParam?: boolean(name='IsAnyParam'),
      isDefaultTemplate?: boolean(name='IsDefaultTemplate'),
      isRecently?: boolean(name='IsRecently'),
      orderId?: string(name='OrderId'),
      passErrType?: string(name='PassErrType'),
      remark?: string(name='Remark'),
      signType?: int32(name='SignType'),
      smsContent?: string(name='SmsContent'),
      supportVendor?: string(name='SupportVendor'),
      tags?: {
        tag?: [ 
        {
          resourceId?: string(name='ResourceId'),
          resourceType?: string(name='ResourceType'),
          tagKey?: string(name='TagKey'),
          tagValue?: string(name='TagValue'),
        }
      ](name='Tag')
      }(name='Tags'),
      templateCode?: string(name='TemplateCode'),
      templateContent?: string(name='TemplateContent'),
      templateName?: string(name='TemplateName'),
      templateRule?: string(name='TemplateRule'),
    }
  ](name='SmsTemplate')
  }(name='List'),
  requestId?: string(name='RequestId'),
}

model QuerySmsTemplateLastRangeNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsTemplateLastRangeNewResponseBody(name='body'),
}

/**
 * @param request QuerySmsTemplateLastRangeNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySmsTemplateLastRangeNewResponse
 */
async function querySmsTemplateLastRangeNewWithOptions(request: QuerySmsTemplateLastRangeNewRequest, runtime: $RuntimeOptions): QuerySmsTemplateLastRangeNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!$isNull(request.filterAnyParam)) {
    query['FilterAnyParam'] = request.filterAnyParam;
  }
  if (!$isNull(request.limit)) {
    query['Limit'] = request.limit;
  }
  if (!$isNull(request.needDefaultTemplate)) {
    query['NeedDefaultTemplate'] = request.needDefaultTemplate;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.prodId)) {
    query['ProdId'] = request.prodId;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.templateName)) {
    query['TemplateName'] = request.templateName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySmsTemplateLastRangeNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySmsTemplateLastRangeNewRequest
 * @return QuerySmsTemplateLastRangeNewResponse
 */
async function querySmsTemplateLastRangeNew(request: QuerySmsTemplateLastRangeNewRequest): QuerySmsTemplateLastRangeNewResponse {
  var runtime = new $RuntimeOptions{};
  return querySmsTemplateLastRangeNewWithOptions(request, runtime);
}

model QuerySmsTemplateListRequest {
  auditState?: string(name='AuditState'),
  bizType?: string(name='BizType'),
  ownerId?: long(name='OwnerId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  prodCode?: string(name='ProdCode'),
  prodType?: string(name='ProdType'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tags?: [ 
    {
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='Tags'),
  templateName?: string(name='TemplateName'),
}

model QuerySmsTemplateListResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QuerySmsTemplateListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsTemplateListResponseBody(name='body'),
}

/**
 * @param request QuerySmsTemplateListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySmsTemplateListResponse
 */
async function querySmsTemplateListWithOptions(request: QuerySmsTemplateListRequest, runtime: $RuntimeOptions): QuerySmsTemplateListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.auditState)) {
    query['AuditState'] = request.auditState;
  }
  if (!$isNull(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.prodType)) {
    query['ProdType'] = request.prodType;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.tags)) {
    query['Tags'] = request.tags;
  }
  if (!$isNull(request.templateName)) {
    query['TemplateName'] = request.templateName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySmsTemplateList',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySmsTemplateListRequest
 * @return QuerySmsTemplateListResponse
 */
async function querySmsTemplateList(request: QuerySmsTemplateListRequest): QuerySmsTemplateListResponse {
  var runtime = new $RuntimeOptions{};
  return querySmsTemplateListWithOptions(request, runtime);
}

model QuerySmsTemplateListNewRequest {
  auditState?: string(name='AuditState'),
  bizType?: string(name='BizType'),
  intlType?: int32(name='IntlType'),
  ownerId?: long(name='OwnerId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  prodCode?: string(name='ProdCode'),
  prodType?: string(name='ProdType'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tagListString?: string(name='TagListString'),
  tags?: [ 
    {
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='Tags'),
  templateName?: string(name='TemplateName'),
}

model QuerySmsTemplateListNewResponseBody = {
  list?: {
    smsTemplate?: [ 
    {
      auditInfo?: string(name='AuditInfo'),
      auditRemarkInfo?: string(name='AuditRemarkInfo'),
      auditState?: string(name='AuditState'),
      bizType?: string(name='BizType'),
      expireDateStr?: string(name='ExpireDateStr'),
      gmtCreateStr?: string(name='GmtCreateStr'),
      id?: string(name='Id'),
      intelligentApproval?: boolean(name='IntelligentApproval'),
      intlType?: int32(name='IntlType'),
      isAnyParam?: boolean(name='IsAnyParam'),
      isDefaultTemplate?: boolean(name='IsDefaultTemplate'),
      isRecently?: boolean(name='IsRecently'),
      orderCount?: long(name='OrderCount'),
      orderId?: string(name='OrderId'),
      passErrType?: string(name='PassErrType'),
      productUrl?: string(name='ProductUrl'),
      relatedSignName?: string(name='RelatedSignName'),
      remark?: string(name='Remark'),
      signType?: int32(name='SignType'),
      smsContent?: string(name='SmsContent'),
      supportVendor?: string(name='SupportVendor'),
      tags?: {
        tag?: [ 
        {
          resourceId?: string(name='ResourceId'),
          resourceType?: string(name='ResourceType'),
          tagKey?: string(name='TagKey'),
          tagValue?: string(name='TagValue'),
        }
      ](name='Tag')
      }(name='Tags'),
      templateCode?: string(name='TemplateCode'),
      templateContent?: string(name='TemplateContent'),
      templateName?: string(name='TemplateName'),
      templateRule?: string(name='TemplateRule'),
    }
  ](name='SmsTemplate')
  }(name='List'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model QuerySmsTemplateListNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsTemplateListNewResponseBody(name='body'),
}

/**
 * @param request QuerySmsTemplateListNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySmsTemplateListNewResponse
 */
async function querySmsTemplateListNewWithOptions(request: QuerySmsTemplateListNewRequest, runtime: $RuntimeOptions): QuerySmsTemplateListNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.auditState)) {
    query['AuditState'] = request.auditState;
  }
  if (!$isNull(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!$isNull(request.intlType)) {
    query['IntlType'] = request.intlType;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.prodType)) {
    query['ProdType'] = request.prodType;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.tagListString)) {
    query['TagListString'] = request.tagListString;
  }
  if (!$isNull(request.tags)) {
    query['Tags'] = request.tags;
  }
  if (!$isNull(request.templateName)) {
    query['TemplateName'] = request.templateName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySmsTemplateListNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySmsTemplateListNewRequest
 * @return QuerySmsTemplateListNewResponse
 */
async function querySmsTemplateListNew(request: QuerySmsTemplateListNewRequest): QuerySmsTemplateListNewResponse {
  var runtime = new $RuntimeOptions{};
  return querySmsTemplateListNewWithOptions(request, runtime);
}

model QuerySmsUserTagsRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QuerySmsUserTagsResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QuerySmsUserTagsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsUserTagsResponseBody(name='body'),
}

/**
 * @param request QuerySmsUserTagsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySmsUserTagsResponse
 */
async function querySmsUserTagsWithOptions(request: QuerySmsUserTagsRequest, runtime: $RuntimeOptions): QuerySmsUserTagsResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySmsUserTags',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySmsUserTagsRequest
 * @return QuerySmsUserTagsResponse
 */
async function querySmsUserTags(request: QuerySmsUserTagsRequest): QuerySmsUserTagsResponse {
  var runtime = new $RuntimeOptions{};
  return querySmsUserTagsWithOptions(request, runtime);
}

model QuerySmsUserTagsNewRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QuerySmsUserTagsNewResponseBody = {
  isAnyParamTemplateUser?: boolean(name='IsAnyParamTemplateUser'),
  isBatchCreateSmsSign?: boolean(name='IsBatchCreateSmsSign'),
  isInnerUser?: boolean(name='IsInnerUser'),
  isNewUser?: boolean(name='IsNewUser'),
  isNoneStatusNoChargeCust?: boolean(name='IsNoneStatusNoChargeCust'),
  isOpenTemplateRule?: boolean(name='IsOpenTemplateRule'),
  isOpenedCard?: boolean(name='IsOpenedCard'),
  isOpenedDigit?: boolean(name='IsOpenedDigit'),
  isOpenedInternationalSms?: boolean(name='IsOpenedInternationalSms'),
  isOpenedMarket?: boolean(name='IsOpenedMarket'),
  isOpenedSaas?: boolean(name='IsOpenedSaas'),
  isOpenedSmppStandardProtocol?: boolean(name='IsOpenedSmppStandardProtocol'),
  isOpenedStandardProtocol?: boolean(name='IsOpenedStandardProtocol'),
  isVirtualCust?: boolean(name='IsVirtualCust'),
  requestId?: boolean(name='RequestId'),
  signCheckCommon?: boolean(name='SignCheckCommon'),
  signCheckVerification?: boolean(name='SignCheckVerification'),
  smsInformationSupervision?: boolean(name='SmsInformationSupervision'),
}

model QuerySmsUserTagsNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmsUserTagsNewResponseBody(name='body'),
}

/**
 * @param request QuerySmsUserTagsNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySmsUserTagsNewResponse
 */
async function querySmsUserTagsNewWithOptions(request: QuerySmsUserTagsNewRequest, runtime: $RuntimeOptions): QuerySmsUserTagsNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySmsUserTagsNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySmsUserTagsNewRequest
 * @return QuerySmsUserTagsNewResponse
 */
async function querySmsUserTagsNew(request: QuerySmsUserTagsNewRequest): QuerySmsUserTagsNewResponse {
  var runtime = new $RuntimeOptions{};
  return querySmsUserTagsNewWithOptions(request, runtime);
}

model QueryStandarTemplateCollectionsRequest {
  bizType?: string(name='BizType'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateContent?: string(name='TemplateContent'),
}

model QueryStandarTemplateCollectionsResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryStandarTemplateCollectionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryStandarTemplateCollectionsResponseBody(name='body'),
}

/**
 * @param request QueryStandarTemplateCollectionsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryStandarTemplateCollectionsResponse
 */
async function queryStandarTemplateCollectionsWithOptions(request: QueryStandarTemplateCollectionsRequest, runtime: $RuntimeOptions): QueryStandarTemplateCollectionsResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.templateContent)) {
    query['TemplateContent'] = request.templateContent;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryStandarTemplateCollections',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryStandarTemplateCollectionsRequest
 * @return QueryStandarTemplateCollectionsResponse
 */
async function queryStandarTemplateCollections(request: QueryStandarTemplateCollectionsRequest): QueryStandarTemplateCollectionsResponse {
  var runtime = new $RuntimeOptions{};
  return queryStandarTemplateCollectionsWithOptions(request, runtime);
}

model QueryStandarTemplateCollectionsNewRequest {
  bizType?: string(name='BizType'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateContent?: string(name='TemplateContent'),
}

model QueryStandarTemplateCollectionsNewResponseBody = {
  list?: {
    fcPartnerTemplateDTO?: [ 
    {
      businessType?: int32(name='BusinessType'),
      fcTag?: long(name='FcTag'),
      i18n?: string(name='I18n'),
      id?: long(name='Id'),
      isDeleted?: int32(name='IsDeleted'),
      mcBusinessType?: int32(name='McBusinessType'),
      mcCategory?: int32(name='McCategory'),
      mcSignature?: string(name='McSignature'),
      messageTypeId?: long(name='MessageTypeId'),
      opNick?: string(name='OpNick'),
      partnerId?: long(name='PartnerId'),
      qualificationId?: long(name='QualificationId'),
      remark?: string(name='Remark'),
      signTemplateId?: long(name='SignTemplateId'),
      signType?: int32(name='SignType'),
      sourceId?: string(name='SourceId'),
      speedLevel?: int32(name='SpeedLevel'),
      state?: int32(name='State'),
      templateCode?: string(name='TemplateCode'),
      templateContent?: string(name='TemplateContent'),
      templateId?: long(name='TemplateId'),
      templateName?: string(name='TemplateName'),
      templateParamRule?: string(name='TemplateParamRule'),
      templateSenderType?: int32(name='TemplateSenderType'),
      templateType?: int32(name='TemplateType'),
      totalCountLimit?: long(name='TotalCountLimit'),
      voiceType?: int32(name='VoiceType'),
    }
  ](name='FcPartnerTemplateDTO')
  }(name='List'),
  requestId?: string(name='RequestId'),
}

model QueryStandarTemplateCollectionsNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryStandarTemplateCollectionsNewResponseBody(name='body'),
}

/**
 * @param request QueryStandarTemplateCollectionsNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryStandarTemplateCollectionsNewResponse
 */
async function queryStandarTemplateCollectionsNewWithOptions(request: QueryStandarTemplateCollectionsNewRequest, runtime: $RuntimeOptions): QueryStandarTemplateCollectionsNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.templateContent)) {
    query['TemplateContent'] = request.templateContent;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryStandarTemplateCollectionsNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryStandarTemplateCollectionsNewRequest
 * @return QueryStandarTemplateCollectionsNewResponse
 */
async function queryStandarTemplateCollectionsNew(request: QueryStandarTemplateCollectionsNewRequest): QueryStandarTemplateCollectionsNewResponse {
  var runtime = new $RuntimeOptions{};
  return queryStandarTemplateCollectionsNewWithOptions(request, runtime);
}

model QueryStandardProtocolRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  protocolType?: int32(name='ProtocolType', description='This parameter is required.'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryStandardProtocolResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryStandardProtocolResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryStandardProtocolResponseBody(name='body'),
}

/**
 * @param request QueryStandardProtocolRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryStandardProtocolResponse
 */
async function queryStandardProtocolWithOptions(request: QueryStandardProtocolRequest, runtime: $RuntimeOptions): QueryStandardProtocolResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.protocolType)) {
    query['ProtocolType'] = request.protocolType;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryStandardProtocol',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryStandardProtocolRequest
 * @return QueryStandardProtocolResponse
 */
async function queryStandardProtocol(request: QueryStandardProtocolRequest): QueryStandardProtocolResponse {
  var runtime = new $RuntimeOptions{};
  return queryStandardProtocolWithOptions(request, runtime);
}

model QueryStandardProtocolListNewRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  protocolType?: int32(name='ProtocolType', description='This parameter is required.'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryStandardProtocolListNewResponseBody = {
  list?: [ 
    {
      auditOrderId?: string(name='AuditOrderId'),
      corpCode?: string(name='CorpCode'),
      effIpWhiteList?: string(name='EffIpWhiteList'),
      featureCode?: int32(name='FeatureCode'),
      ip?: string(name='Ip'),
      ipAuditStatus?: int32(name='IpAuditStatus'),
      ipWhiteList?: string(name='IpWhiteList'),
      partnerId?: long(name='PartnerId'),
      port?: string(name='Port'),
      profileId?: long(name='ProfileId'),
      protocolType?: int32(name='ProtocolType'),
      protocolTypeStr?: string(name='ProtocolTypeStr'),
      realNameInsId?: long(name='RealNameInsId'),
      resCode?: string(name='ResCode'),
      smsSign?: string(name='SmsSign'),
      smsType?: string(name='SmsType'),
      spCode?: string(name='SpCode'),
      status?: string(name='Status'),
      templateCode?: string(name='TemplateCode'),
      userLimit?: int32(name='UserLimit'),
      userMaxChannel?: int32(name='UserMaxChannel'),
      userName?: string(name='UserName'),
      userPwd?: string(name='UserPwd'),
    }
  ](name='List'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model QueryStandardProtocolListNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryStandardProtocolListNewResponseBody(name='body'),
}

/**
 * @param request QueryStandardProtocolListNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryStandardProtocolListNewResponse
 */
async function queryStandardProtocolListNewWithOptions(request: QueryStandardProtocolListNewRequest, runtime: $RuntimeOptions): QueryStandardProtocolListNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.protocolType)) {
    query['ProtocolType'] = request.protocolType;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryStandardProtocolListNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryStandardProtocolListNewRequest
 * @return QueryStandardProtocolListNewResponse
 */
async function queryStandardProtocolListNew(request: QueryStandardProtocolListNewRequest): QueryStandardProtocolListNewResponse {
  var runtime = new $RuntimeOptions{};
  return queryStandardProtocolListNewWithOptions(request, runtime);
}

model QueryTagResourcesRequest {
  category?: string(name='Category'),
  nextToken?: string(name='NextToken'),
  ownerId?: long(name='OwnerId'),
  pageSize?: int32(name='PageSize'),
  prodCode?: string(name='ProdCode'),
  regionId?: string(name='RegionId', description='This parameter is required.'),
  resourceId?: [ string ](name='ResourceId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', description='This parameter is required.'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model QueryTagResourcesResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagResources'),
}

model QueryTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryTagResourcesResponseBody(name='body'),
}

/**
 * @param request QueryTagResourcesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryTagResourcesResponse
 */
async function queryTagResourcesWithOptions(request: QueryTagResourcesRequest, runtime: $RuntimeOptions): QueryTagResourcesResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.category)) {
    query['Category'] = request.category;
  }
  if (!$isNull(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!$isNull(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!$isNull(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryTagResources',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryTagResourcesRequest
 * @return QueryTagResourcesResponse
 */
async function queryTagResources(request: QueryTagResourcesRequest): QueryTagResourcesResponse {
  var runtime = new $RuntimeOptions{};
  return queryTagResourcesWithOptions(request, runtime);
}

model QueryTagResourcesNewRequest {
  category?: string(name='Category'),
  nextToken?: string(name='NextToken'),
  ownerId?: long(name='OwnerId'),
  pageSize?: int32(name='PageSize'),
  prodCode?: string(name='ProdCode'),
  regionId?: string(name='RegionId', description='This parameter is required.'),
  resourceId?: [ string ](name='ResourceId'),
  resourceIdListString?: string(name='ResourceIdListString'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', description='This parameter is required.'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  tagListString?: string(name='TagListString'),
}

model QueryTagResourcesNewResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagResources'),
}

model QueryTagResourcesNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryTagResourcesNewResponseBody(name='body'),
}

/**
 * @param request QueryTagResourcesNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryTagResourcesNewResponse
 */
async function queryTagResourcesNewWithOptions(request: QueryTagResourcesNewRequest, runtime: $RuntimeOptions): QueryTagResourcesNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.category)) {
    query['Category'] = request.category;
  }
  if (!$isNull(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!$isNull(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!$isNull(request.resourceIdListString)) {
    query['ResourceIdListString'] = request.resourceIdListString;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!$isNull(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!$isNull(request.tagListString)) {
    query['TagListString'] = request.tagListString;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryTagResourcesNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryTagResourcesNewRequest
 * @return QueryTagResourcesNewResponse
 */
async function queryTagResourcesNew(request: QueryTagResourcesNewRequest): QueryTagResourcesNewResponse {
  var runtime = new $RuntimeOptions{};
  return queryTagResourcesNewWithOptions(request, runtime);
}

model QueryTmpEffectReportDataRequest {
  endDate?: string(name='EndDate', description='This parameter is required.'),
  pageNo?: long(name='PageNo', description='This parameter is required.'),
  pageSize?: long(name='PageSize', description='This parameter is required.'),
  startDate?: string(name='StartDate', description='This parameter is required.'),
  tmpCode?: string(name='TmpCode'),
  tmpName?: string(name='TmpName'),
  vendorCode?: string(name='VendorCode'),
  vendorName?: string(name='VendorName'),
}

model QueryTmpEffectReportDataResponseBody = {
  code?: string(name='Code'),
  model?: {
    pageNo?: long(name='PageNo'),
    pageSize?: long(name='PageSize'),
    records?: [ 
      {
        clickPv?: string(name='ClickPv'),
        clickUv?: string(name='ClickUv'),
        date?: string(name='Date'),
        exposePv?: string(name='ExposePv'),
        exposeUv?: string(name='ExposeUv'),
        id?: long(name='Id'),
        rptSuccessCount?: string(name='RptSuccessCount'),
        tmpCode?: string(name='TmpCode'),
        tmpName?: string(name='TmpName'),
        vendorName?: string(name='VendorName'),
      }
    ](name='Records'),
    totalCount?: long(name='TotalCount'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryTmpEffectReportDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryTmpEffectReportDataResponseBody(name='body'),
}

/**
 * @summary 发送效果统计
 *
 * @param request QueryTmpEffectReportDataRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryTmpEffectReportDataResponse
 */
async function queryTmpEffectReportDataWithOptions(request: QueryTmpEffectReportDataRequest, runtime: $RuntimeOptions): QueryTmpEffectReportDataResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.endDate)) {
    query['EndDate'] = request.endDate;
  }
  if (!$isNull(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.startDate)) {
    query['StartDate'] = request.startDate;
  }
  if (!$isNull(request.tmpCode)) {
    query['TmpCode'] = request.tmpCode;
  }
  if (!$isNull(request.tmpName)) {
    query['TmpName'] = request.tmpName;
  }
  if (!$isNull(request.vendorCode)) {
    query['VendorCode'] = request.vendorCode;
  }
  if (!$isNull(request.vendorName)) {
    query['VendorName'] = request.vendorName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryTmpEffectReportData',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 发送效果统计
 *
 * @param request QueryTmpEffectReportDataRequest
 * @return QueryTmpEffectReportDataResponse
 */
async function queryTmpEffectReportData(request: QueryTmpEffectReportDataRequest): QueryTmpEffectReportDataResponse {
  var runtime = new $RuntimeOptions{};
  return queryTmpEffectReportDataWithOptions(request, runtime);
}

model QueryTmpEffectReportDayDataRequest {
  endDate?: string(name='EndDate', description='This parameter is required.'),
  pageNo?: long(name='PageNo', description='This parameter is required.'),
  pageSize?: long(name='PageSize', description='This parameter is required.'),
  startDate?: string(name='StartDate', description='This parameter is required.'),
  tmpCode?: string(name='TmpCode'),
  tmpName?: string(name='TmpName'),
  vendorName?: string(name='VendorName'),
}

model QueryTmpEffectReportDayDataResponseBody = {
  code?: string(name='Code'),
  model?: {
    pageNo?: long(name='PageNo'),
    pageSize?: long(name='PageSize'),
    records?: [ 
      {
        clickPv?: string(name='ClickPv'),
        clickUv?: string(name='ClickUv'),
        date?: string(name='Date'),
        exposePv?: string(name='ExposePv'),
        exposeUv?: string(name='ExposeUv'),
        rptSuccessCount?: string(name='RptSuccessCount'),
        tmpCode?: string(name='TmpCode'),
        tmpName?: string(name='TmpName'),
        vendorName?: string(name='VendorName'),
      }
    ](name='Records'),
    totalCount?: long(name='TotalCount'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryTmpEffectReportDayDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryTmpEffectReportDayDataResponseBody(name='body'),
}

/**
 * @summary 发送效果统计-日报
 *
 * @param request QueryTmpEffectReportDayDataRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryTmpEffectReportDayDataResponse
 */
async function queryTmpEffectReportDayDataWithOptions(request: QueryTmpEffectReportDayDataRequest, runtime: $RuntimeOptions): QueryTmpEffectReportDayDataResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.endDate)) {
    query['EndDate'] = request.endDate;
  }
  if (!$isNull(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.startDate)) {
    query['StartDate'] = request.startDate;
  }
  if (!$isNull(request.tmpCode)) {
    query['TmpCode'] = request.tmpCode;
  }
  if (!$isNull(request.tmpName)) {
    query['TmpName'] = request.tmpName;
  }
  if (!$isNull(request.vendorName)) {
    query['VendorName'] = request.vendorName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryTmpEffectReportDayData',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 发送效果统计-日报
 *
 * @param request QueryTmpEffectReportDayDataRequest
 * @return QueryTmpEffectReportDayDataResponse
 */
async function queryTmpEffectReportDayData(request: QueryTmpEffectReportDayDataRequest): QueryTmpEffectReportDayDataResponse {
  var runtime = new $RuntimeOptions{};
  return queryTmpEffectReportDayDataWithOptions(request, runtime);
}

model QueryUsertagExistenceRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  usertagPosition?: int32(name='UsertagPosition', description='This parameter is required.'),
}

model QueryUsertagExistenceResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: boolean(name='data'),
}

model QueryUsertagExistenceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryUsertagExistenceResponseBody(name='body'),
}

/**
 * @param request QueryUsertagExistenceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryUsertagExistenceResponse
 */
async function queryUsertagExistenceWithOptions(request: QueryUsertagExistenceRequest, runtime: $RuntimeOptions): QueryUsertagExistenceResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.usertagPosition)) {
    query['UsertagPosition'] = request.usertagPosition;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryUsertagExistence',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryUsertagExistenceRequest
 * @return QueryUsertagExistenceResponse
 */
async function queryUsertagExistence(request: QueryUsertagExistenceRequest): QueryUsertagExistenceResponse {
  var runtime = new $RuntimeOptions{};
  return queryUsertagExistenceWithOptions(request, runtime);
}

model QueryWarningThresholdRequest {
  bizType?: string(name='BizType'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryWarningThresholdResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryWarningThresholdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryWarningThresholdResponseBody(name='body'),
}

/**
 * @param request QueryWarningThresholdRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryWarningThresholdResponse
 */
async function queryWarningThresholdWithOptions(request: QueryWarningThresholdRequest, runtime: $RuntimeOptions): QueryWarningThresholdResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryWarningThreshold',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryWarningThresholdRequest
 * @return QueryWarningThresholdResponse
 */
async function queryWarningThreshold(request: QueryWarningThresholdRequest): QueryWarningThresholdResponse {
  var runtime = new $RuntimeOptions{};
  return queryWarningThresholdWithOptions(request, runtime);
}

model QueryWarningThresholdNewRequest {
  bizType?: string(name='BizType'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryWarningThresholdNewResponseBody = {
  bizType?: string(name='BizType'),
  contactPhone?: string(name='ContactPhone'),
  dailyHaltLimit?: int32(name='DailyHaltLimit'),
  dailyWarningLimit?: int32(name='DailyWarningLimit'),
  domesticDailySuccess?: long(name='DomesticDailySuccess'),
  domesticDailyTotal?: long(name='DomesticDailyTotal'),
  domesticMonthlySuccess?: long(name='DomesticMonthlySuccess'),
  domesticMonthlyTotal?: long(name='DomesticMonthlyTotal'),
  monthlyHaltLimit?: int32(name='MonthlyHaltLimit'),
  monthlyWarningLimit?: int32(name='MonthlyWarningLimit'),
  outDailySuccess?: long(name='OutDailySuccess'),
  outDailyTotal?: long(name='OutDailyTotal'),
  outMonthlySuccess?: long(name='OutMonthlySuccess'),
  outMonthlyTotal?: long(name='OutMonthlyTotal'),
  prevWaringNotice?: boolean(name='PrevWaringNotice'),
  requestId?: string(name='RequestId'),
}

model QueryWarningThresholdNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryWarningThresholdNewResponseBody(name='body'),
}

/**
 * @param request QueryWarningThresholdNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryWarningThresholdNewResponse
 */
async function queryWarningThresholdNewWithOptions(request: QueryWarningThresholdNewRequest, runtime: $RuntimeOptions): QueryWarningThresholdNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryWarningThresholdNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryWarningThresholdNewRequest
 * @return QueryWarningThresholdNewResponse
 */
async function queryWarningThresholdNew(request: QueryWarningThresholdNewRequest): QueryWarningThresholdNewResponse {
  var runtime = new $RuntimeOptions{};
  return queryWarningThresholdNewWithOptions(request, runtime);
}

model QueryWorkOrdAuditListNewRequest {
  orderId?: string(name='OrderId'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryWorkOrdAuditListNewResponseBody = {
  list?: [ 
    {
      auditRemark?: string(name='AuditRemark'),
      auditResult?: string(name='AuditResult'),
      bizType?: string(name='BizType'),
      createDate?: string(name='CreateDate'),
      ordId?: string(name='OrdId'),
      ordStatus?: string(name='OrdStatus'),
      param?: {
        auditInfo?: string(name='AuditInfo'),
        auditRemarkInfo?: {
          rejectDate?: string(name='RejectDate'),
          rejectInfo?: string(name='RejectInfo'),
          rejectSubInfo?: string(name='RejectSubInfo'),
        }(name='AuditRemarkInfo'),
        auditState?: {
          key?: string(name='Key'),
          name?: string(name='Name'),
          value?: int32(name='Value'),
        }(name='AuditState'),
        businessType?: int32(name='BusinessType'),
        extendMessage?: string(name='ExtendMessage'),
        fileIds?: [ long ](name='FileIds'),
        fileUrlList?: [ string ](name='FileUrlList'),
        gmtCreateStr?: string(name='GmtCreateStr'),
        id?: long(name='Id'),
        orderId?: string(name='OrderId'),
        partnerId?: long(name='PartnerId'),
        remark?: string(name='Remark'),
        sceneType?: int32(name='SceneType'),
        signName?: string(name='SignName'),
        signType?: int32(name='SignType'),
      }(name='Param'),
    }
  ](name='List'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model QueryWorkOrdAuditListNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryWorkOrdAuditListNewResponseBody(name='body'),
}

/**
 * @param request QueryWorkOrdAuditListNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryWorkOrdAuditListNewResponse
 */
async function queryWorkOrdAuditListNewWithOptions(request: QueryWorkOrdAuditListNewRequest, runtime: $RuntimeOptions): QueryWorkOrdAuditListNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryWorkOrdAuditListNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryWorkOrdAuditListNewRequest
 * @return QueryWorkOrdAuditListNewResponse
 */
async function queryWorkOrdAuditListNew(request: QueryWorkOrdAuditListNewRequest): QueryWorkOrdAuditListNewResponse {
  var runtime = new $RuntimeOptions{};
  return queryWorkOrdAuditListNewWithOptions(request, runtime);
}

model SaveContactsNewRequest {
  email?: string(name='Email'),
  id?: long(name='Id'),
  name?: string(name='Name'),
  openPkgWarning?: int32(name='OpenPkgWarning'),
  openPreventBrushWarning?: int32(name='OpenPreventBrushWarning'),
  openSendWarning?: int32(name='OpenSendWarning'),
  ownerId?: long(name='OwnerId'),
  phone?: string(name='Phone'),
  prodCode?: string(name='ProdCode'),
  receiveSignTemplateAuditResult?: int32(name='ReceiveSignTemplateAuditResult'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  verificationCode?: string(name='VerificationCode'),
}

model SaveContactsNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model SaveContactsNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveContactsNewResponseBody(name='body'),
}

/**
 * @param request SaveContactsNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SaveContactsNewResponse
 */
async function saveContactsNewWithOptions(request: SaveContactsNewRequest, runtime: $RuntimeOptions): SaveContactsNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.email)) {
    query['Email'] = request.email;
  }
  if (!$isNull(request.id)) {
    query['Id'] = request.id;
  }
  if (!$isNull(request.name)) {
    query['Name'] = request.name;
  }
  if (!$isNull(request.openPkgWarning)) {
    query['OpenPkgWarning'] = request.openPkgWarning;
  }
  if (!$isNull(request.openPreventBrushWarning)) {
    query['OpenPreventBrushWarning'] = request.openPreventBrushWarning;
  }
  if (!$isNull(request.openSendWarning)) {
    query['OpenSendWarning'] = request.openSendWarning;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.phone)) {
    query['Phone'] = request.phone;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.receiveSignTemplateAuditResult)) {
    query['ReceiveSignTemplateAuditResult'] = request.receiveSignTemplateAuditResult;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.verificationCode)) {
    query['VerificationCode'] = request.verificationCode;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'SaveContactsNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request SaveContactsNewRequest
 * @return SaveContactsNewResponse
 */
async function saveContactsNew(request: SaveContactsNewRequest): SaveContactsNewResponse {
  var runtime = new $RuntimeOptions{};
  return saveContactsNewWithOptions(request, runtime);
}

model SaveLearningStatusNewRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  type?: string(name='Type'),
  value?: string(name='Value'),
}

model SaveLearningStatusNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model SaveLearningStatusNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveLearningStatusNewResponseBody(name='body'),
}

/**
 * @param request SaveLearningStatusNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SaveLearningStatusNewResponse
 */
async function saveLearningStatusNewWithOptions(request: SaveLearningStatusNewRequest, runtime: $RuntimeOptions): SaveLearningStatusNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.type)) {
    query['Type'] = request.type;
  }
  if (!$isNull(request.value)) {
    query['Value'] = request.value;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'SaveLearningStatusNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request SaveLearningStatusNewRequest
 * @return SaveLearningStatusNewResponse
 */
async function saveLearningStatusNew(request: SaveLearningStatusNewRequest): SaveLearningStatusNewResponse {
  var runtime = new $RuntimeOptions{};
  return saveLearningStatusNewWithOptions(request, runtime);
}

model SelectTagResourceRequest {
  nextToken?: string(name='NextToken'),
  ownerId?: long(name='OwnerId'),
  pageSize?: int32(name='PageSize'),
  prodCode?: string(name='ProdCode'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType'),
  tagKey?: string(name='TagKey'),
  tagValue?: string(name='TagValue'),
  type?: string(name='Type', description='This parameter is required.'),
}

model SelectTagResourceResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model SelectTagResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SelectTagResourceResponseBody(name='body'),
}

/**
 * @param request SelectTagResourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SelectTagResourceResponse
 */
async function selectTagResourceWithOptions(request: SelectTagResourceRequest, runtime: $RuntimeOptions): SelectTagResourceResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!$isNull(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  if (!$isNull(request.tagValue)) {
    query['TagValue'] = request.tagValue;
  }
  if (!$isNull(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'SelectTagResource',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request SelectTagResourceRequest
 * @return SelectTagResourceResponse
 */
async function selectTagResource(request: SelectTagResourceRequest): SelectTagResourceResponse {
  var runtime = new $RuntimeOptions{};
  return selectTagResourceWithOptions(request, runtime);
}

model SelectTagResourceNewRequest {
  nextToken?: string(name='NextToken'),
  ownerId?: long(name='OwnerId'),
  pageSize?: int32(name='PageSize'),
  prodCode?: string(name='ProdCode'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType'),
  tagKey?: string(name='TagKey'),
  tagValue?: string(name='TagValue'),
  type?: string(name='Type', description='This parameter is required.'),
}

model SelectTagResourceNewResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tags?: {
    tag?: [ string ](name='Tag')
  }(name='Tags'),
}

model SelectTagResourceNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SelectTagResourceNewResponseBody(name='body'),
}

/**
 * @param request SelectTagResourceNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SelectTagResourceNewResponse
 */
async function selectTagResourceNewWithOptions(request: SelectTagResourceNewRequest, runtime: $RuntimeOptions): SelectTagResourceNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!$isNull(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  if (!$isNull(request.tagValue)) {
    query['TagValue'] = request.tagValue;
  }
  if (!$isNull(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'SelectTagResourceNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request SelectTagResourceNewRequest
 * @return SelectTagResourceNewResponse
 */
async function selectTagResourceNew(request: SelectTagResourceNewRequest): SelectTagResourceNewResponse {
  var runtime = new $RuntimeOptions{};
  return selectTagResourceNewWithOptions(request, runtime);
}

model SendSmsTestRequest {
  ncToken?: string(name='NcToken'),
  ownerId?: long(name='OwnerId'),
  phoneNumber?: string(name='PhoneNumber', description='This parameter is required.'),
  prodCode?: string(name='ProdCode'),
  remoteIp?: string(name='RemoteIp'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sessionId?: string(name='SessionId'),
  sig?: string(name='Sig'),
  signName?: string(name='SignName'),
  templateCode?: string(name='TemplateCode'),
  templateParam?: string(name='TemplateParam'),
  testType?: string(name='TestType'),
}

model SendSmsTestResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model SendSmsTestResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendSmsTestResponseBody(name='body'),
}

/**
 * @param request SendSmsTestRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SendSmsTestResponse
 */
async function sendSmsTestWithOptions(request: SendSmsTestRequest, runtime: $RuntimeOptions): SendSmsTestResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ncToken)) {
    query['NcToken'] = request.ncToken;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.remoteIp)) {
    query['RemoteIp'] = request.remoteIp;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.sessionId)) {
    query['SessionId'] = request.sessionId;
  }
  if (!$isNull(request.sig)) {
    query['Sig'] = request.sig;
  }
  if (!$isNull(request.signName)) {
    query['SignName'] = request.signName;
  }
  if (!$isNull(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  if (!$isNull(request.templateParam)) {
    query['TemplateParam'] = request.templateParam;
  }
  if (!$isNull(request.testType)) {
    query['TestType'] = request.testType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'SendSmsTest',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request SendSmsTestRequest
 * @return SendSmsTestResponse
 */
async function sendSmsTest(request: SendSmsTestRequest): SendSmsTestResponse {
  var runtime = new $RuntimeOptions{};
  return sendSmsTestWithOptions(request, runtime);
}

model SendSmsTestNewRequest {
  ncToken?: string(name='NcToken'),
  ownerId?: long(name='OwnerId'),
  phoneNumber?: string(name='PhoneNumber', description='This parameter is required.'),
  prodCode?: string(name='ProdCode'),
  remoteIp?: string(name='RemoteIp'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sessionId?: string(name='SessionId'),
  sig?: string(name='Sig'),
  signName?: string(name='SignName'),
  templateCode?: string(name='TemplateCode'),
  templateParam?: string(name='TemplateParam'),
  testType?: string(name='TestType'),
}

model SendSmsTestNewResponseBody = {
  code?: string(name='Code'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
}

model SendSmsTestNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendSmsTestNewResponseBody(name='body'),
}

/**
 * @param request SendSmsTestNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SendSmsTestNewResponse
 */
async function sendSmsTestNewWithOptions(request: SendSmsTestNewRequest, runtime: $RuntimeOptions): SendSmsTestNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ncToken)) {
    query['NcToken'] = request.ncToken;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.remoteIp)) {
    query['RemoteIp'] = request.remoteIp;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.sessionId)) {
    query['SessionId'] = request.sessionId;
  }
  if (!$isNull(request.sig)) {
    query['Sig'] = request.sig;
  }
  if (!$isNull(request.signName)) {
    query['SignName'] = request.signName;
  }
  if (!$isNull(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  if (!$isNull(request.templateParam)) {
    query['TemplateParam'] = request.templateParam;
  }
  if (!$isNull(request.testType)) {
    query['TestType'] = request.testType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'SendSmsTestNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request SendSmsTestNewRequest
 * @return SendSmsTestNewResponse
 */
async function sendSmsTestNew(request: SendSmsTestNewRequest): SendSmsTestNewResponse {
  var runtime = new $RuntimeOptions{};
  return sendSmsTestNewWithOptions(request, runtime);
}

model SendVerificationRequest {
  bizType?: string(name='BizType', description='This parameter is required.'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  target?: string(name='Target'),
  verifyType?: string(name='VerifyType', description='This parameter is required.'),
}

model SendVerificationResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model SendVerificationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendVerificationResponseBody(name='body'),
}

/**
 * @param request SendVerificationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SendVerificationResponse
 */
async function sendVerificationWithOptions(request: SendVerificationRequest, runtime: $RuntimeOptions): SendVerificationResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.target)) {
    query['Target'] = request.target;
  }
  if (!$isNull(request.verifyType)) {
    query['VerifyType'] = request.verifyType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'SendVerification',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request SendVerificationRequest
 * @return SendVerificationResponse
 */
async function sendVerification(request: SendVerificationRequest): SendVerificationResponse {
  var runtime = new $RuntimeOptions{};
  return sendVerificationWithOptions(request, runtime);
}

model SendVerificationNewRequest {
  bizType?: string(name='BizType', description='This parameter is required.'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  target?: string(name='Target'),
  verifyType?: string(name='VerifyType', description='This parameter is required.'),
}

model SendVerificationNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model SendVerificationNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendVerificationNewResponseBody(name='body'),
}

/**
 * @param request SendVerificationNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SendVerificationNewResponse
 */
async function sendVerificationNewWithOptions(request: SendVerificationNewRequest, runtime: $RuntimeOptions): SendVerificationNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.target)) {
    query['Target'] = request.target;
  }
  if (!$isNull(request.verifyType)) {
    query['VerifyType'] = request.verifyType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'SendVerificationNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request SendVerificationNewRequest
 * @return SendVerificationNewResponse
 */
async function sendVerificationNew(request: SendVerificationNewRequest): SendVerificationNewResponse {
  var runtime = new $RuntimeOptions{};
  return sendVerificationNewWithOptions(request, runtime);
}

model TagResourcesRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  regionId?: string(name='RegionId', description='This parameter is required.'),
  resourceId?: [ string ](name='ResourceId', description='This parameter is required.'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', description='This parameter is required.'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', description='This parameter is required.'),
}

model TagResourcesResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesResponseBody(name='body'),
}

/**
 * @param request TagResourcesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return TagResourcesResponse
 */
async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: $RuntimeOptions): TagResourcesResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!$isNull(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!$isNull(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'TagResources',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request TagResourcesRequest
 * @return TagResourcesResponse
 */
async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new $RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model TagResourcesNewRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  regionId?: string(name='RegionId', description='This parameter is required.'),
  resourceId?: [ string ](name='ResourceId'),
  resourceIdListString?: string(name='ResourceIdListString'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', description='This parameter is required.'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  tagListString?: string(name='TagListString'),
}

model TagResourcesNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model TagResourcesNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesNewResponseBody(name='body'),
}

/**
 * @param request TagResourcesNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return TagResourcesNewResponse
 */
async function tagResourcesNewWithOptions(request: TagResourcesNewRequest, runtime: $RuntimeOptions): TagResourcesNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!$isNull(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!$isNull(request.resourceIdListString)) {
    query['ResourceIdListString'] = request.resourceIdListString;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!$isNull(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!$isNull(request.tagListString)) {
    query['TagListString'] = request.tagListString;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'TagResourcesNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request TagResourcesNewRequest
 * @return TagResourcesNewResponse
 */
async function tagResourcesNew(request: TagResourcesNewRequest): TagResourcesNewResponse {
  var runtime = new $RuntimeOptions{};
  return tagResourcesNewWithOptions(request, runtime);
}

model TagResourcesSystemTagsRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  regionId?: string(name='RegionId', description='This parameter is required.'),
  resourceId?: [ string ](name='ResourceId', description='This parameter is required.'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', description='This parameter is required.'),
  scope?: string(name='Scope'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', description='This parameter is required.'),
  tagOwnerUid?: long(name='TagOwnerUid', description='This parameter is required.'),
}

model TagResourcesSystemTagsResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model TagResourcesSystemTagsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesSystemTagsResponseBody(name='body'),
}

/**
 * @param request TagResourcesSystemTagsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return TagResourcesSystemTagsResponse
 */
async function tagResourcesSystemTagsWithOptions(request: TagResourcesSystemTagsRequest, runtime: $RuntimeOptions): TagResourcesSystemTagsResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!$isNull(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!$isNull(request.scope)) {
    query['Scope'] = request.scope;
  }
  if (!$isNull(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!$isNull(request.tagOwnerUid)) {
    query['TagOwnerUid'] = request.tagOwnerUid;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'TagResourcesSystemTags',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request TagResourcesSystemTagsRequest
 * @return TagResourcesSystemTagsResponse
 */
async function tagResourcesSystemTags(request: TagResourcesSystemTagsRequest): TagResourcesSystemTagsResponse {
  var runtime = new $RuntimeOptions{};
  return tagResourcesSystemTagsWithOptions(request, runtime);
}

model UntagResourcesRequest {
  all?: boolean(name='All'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  regionId?: string(name='RegionId', description='This parameter is required.'),
  resourceId?: [ string ](name='ResourceId', description='This parameter is required.'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', description='This parameter is required.'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags'),
}

model UntagResourcesResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model UntagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UntagResourcesResponseBody(name='body'),
}

/**
 * @param request UntagResourcesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UntagResourcesResponse
 */
async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: $RuntimeOptions): UntagResourcesResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.all)) {
    query['All'] = request.all;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!$isNull(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!$isNull(request.tags)) {
    query['Tags'] = request.tags;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UntagResources',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request UntagResourcesRequest
 * @return UntagResourcesResponse
 */
async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new $RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model UntagResourcesNewRequest {
  all?: boolean(name='All'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  regionId?: string(name='RegionId', description='This parameter is required.'),
  resourceId?: [ string ](name='ResourceId'),
  resourceIdListString?: string(name='ResourceIdListString'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', description='This parameter is required.'),
  tagListString?: string(name='TagListString'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags'),
}

model UntagResourcesNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model UntagResourcesNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UntagResourcesNewResponseBody(name='body'),
}

/**
 * @param request UntagResourcesNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UntagResourcesNewResponse
 */
async function untagResourcesNewWithOptions(request: UntagResourcesNewRequest, runtime: $RuntimeOptions): UntagResourcesNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.all)) {
    query['All'] = request.all;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!$isNull(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!$isNull(request.resourceIdListString)) {
    query['ResourceIdListString'] = request.resourceIdListString;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!$isNull(request.tagListString)) {
    query['TagListString'] = request.tagListString;
  }
  if (!$isNull(request.tags)) {
    query['Tags'] = request.tags;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UntagResourcesNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request UntagResourcesNewRequest
 * @return UntagResourcesNewResponse
 */
async function untagResourcesNew(request: UntagResourcesNewRequest): UntagResourcesNewResponse {
  var runtime = new $RuntimeOptions{};
  return untagResourcesNewWithOptions(request, runtime);
}

model UntagResourcesSystemTagsRequest {
  all?: boolean(name='All'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  regionId?: string(name='RegionId', description='This parameter is required.'),
  resourceId?: [ string ](name='ResourceId', description='This parameter is required.'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', description='This parameter is required.'),
  tagKey?: [ string ](name='TagKey'),
  tagOwnerUid?: long(name='TagOwnerUid', description='This parameter is required.'),
}

model UntagResourcesSystemTagsResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model UntagResourcesSystemTagsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UntagResourcesSystemTagsResponseBody(name='body'),
}

/**
 * @param request UntagResourcesSystemTagsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UntagResourcesSystemTagsResponse
 */
async function untagResourcesSystemTagsWithOptions(request: UntagResourcesSystemTagsRequest, runtime: $RuntimeOptions): UntagResourcesSystemTagsResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.all)) {
    query['All'] = request.all;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!$isNull(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!$isNull(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  if (!$isNull(request.tagOwnerUid)) {
    query['TagOwnerUid'] = request.tagOwnerUid;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UntagResourcesSystemTags',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request UntagResourcesSystemTagsRequest
 * @return UntagResourcesSystemTagsResponse
 */
async function untagResourcesSystemTags(request: UntagResourcesSystemTagsRequest): UntagResourcesSystemTagsResponse {
  var runtime = new $RuntimeOptions{};
  return untagResourcesSystemTagsWithOptions(request, runtime);
}

model UpdateIpWhiteListNewRequest {
  featureCode?: int32(name='FeatureCode', description='This parameter is required.'),
  ipWhiteList?: string(name='IpWhiteList', description='This parameter is required.'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  realNameInsId?: long(name='RealNameInsId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  userName?: string(name='UserName'),
}

model UpdateIpWhiteListNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model UpdateIpWhiteListNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateIpWhiteListNewResponseBody(name='body'),
}

/**
 * @param request UpdateIpWhiteListNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateIpWhiteListNewResponse
 */
async function updateIpWhiteListNewWithOptions(request: UpdateIpWhiteListNewRequest, runtime: $RuntimeOptions): UpdateIpWhiteListNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.featureCode)) {
    query['FeatureCode'] = request.featureCode;
  }
  if (!$isNull(request.ipWhiteList)) {
    query['IpWhiteList'] = request.ipWhiteList;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.realNameInsId)) {
    query['RealNameInsId'] = request.realNameInsId;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.userName)) {
    query['UserName'] = request.userName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateIpWhiteListNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request UpdateIpWhiteListNewRequest
 * @return UpdateIpWhiteListNewResponse
 */
async function updateIpWhiteListNew(request: UpdateIpWhiteListNewRequest): UpdateIpWhiteListNewResponse {
  var runtime = new $RuntimeOptions{};
  return updateIpWhiteListNewWithOptions(request, runtime);
}

model UpdatePartnerTemplateNewRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateCode?: string(name='TemplateCode'),
  templateName?: string(name='TemplateName'),
}

model UpdatePartnerTemplateNewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model UpdatePartnerTemplateNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePartnerTemplateNewResponseBody(name='body'),
}

/**
 * @param request UpdatePartnerTemplateNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdatePartnerTemplateNewResponse
 */
async function updatePartnerTemplateNewWithOptions(request: UpdatePartnerTemplateNewRequest, runtime: $RuntimeOptions): UpdatePartnerTemplateNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  if (!$isNull(request.templateName)) {
    query['TemplateName'] = request.templateName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdatePartnerTemplateNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request UpdatePartnerTemplateNewRequest
 * @return UpdatePartnerTemplateNewResponse
 */
async function updatePartnerTemplateNew(request: UpdatePartnerTemplateNewRequest): UpdatePartnerTemplateNewResponse {
  var runtime = new $RuntimeOptions{};
  return updatePartnerTemplateNewWithOptions(request, runtime);
}

model UpdateSlsStatusNewRequest {
  authStatus?: boolean(name='AuthStatus'),
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  saveTime?: int32(name='SaveTime'),
}

model UpdateSlsStatusNewResponseBody = {
  authorizeStatus?: boolean(name='AuthorizeStatus'),
  openStatus?: boolean(name='OpenStatus'),
  prodCode?: string(name='ProdCode'),
  requestId?: string(name='RequestId'),
  saveTime?: int32(name='SaveTime'),
  uid?: string(name='Uid'),
}

model UpdateSlsStatusNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSlsStatusNewResponseBody(name='body'),
}

/**
 * @param request UpdateSlsStatusNewRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateSlsStatusNewResponse
 */
async function updateSlsStatusNewWithOptions(request: UpdateSlsStatusNewRequest, runtime: $RuntimeOptions): UpdateSlsStatusNewResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.authStatus)) {
    query['AuthStatus'] = request.authStatus;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.saveTime)) {
    query['SaveTime'] = request.saveTime;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateSlsStatusNew',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request UpdateSlsStatusNewRequest
 * @return UpdateSlsStatusNewResponse
 */
async function updateSlsStatusNew(request: UpdateSlsStatusNewRequest): UpdateSlsStatusNewResponse {
  var runtime = new $RuntimeOptions{};
  return updateSlsStatusNewWithOptions(request, runtime);
}

model UploadCardResRequest {
  callerParentId?: string(name='CallerParentId', example='示例值示例值'),
  callerType?: string(name='CallerType', example='示例值示例值'),
  callerUid?: string(name='CallerUid', example='示例值示例值示例值'),
  extendInfo?: string(name='ExtendInfo', example='示例值示例值'),
  fileSize?: long(name='FileSize', example='46'),
  fileUrl?: string(name='FileUrl', example='示例值'),
  memo?: string(name='Memo', example='示例值'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', example='示例值示例值示例值'),
}

model UploadCardResResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', example='示例值'),
  message?: string(name='Message', example='示例值示例值示例值'),
  model?: {
    resourceId?: string(name='ResourceId', example='示例值示例值'),
  }(name='Model'),
  requestId?: string(name='RequestId', example='示例值示例值'),
  success?: boolean(name='Success', example='true'),
}

model UploadCardResResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UploadCardResResponseBody(name='body'),
}

/**
 * @summary 上传卡片素材并获取素材id
 *
 * @param request UploadCardResRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UploadCardResResponse
 */
async function uploadCardResWithOptions(request: UploadCardResRequest, runtime: $RuntimeOptions): UploadCardResResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.callerParentId)) {
    query['CallerParentId'] = request.callerParentId;
  }
  if (!$isNull(request.callerType)) {
    query['CallerType'] = request.callerType;
  }
  if (!$isNull(request.callerUid)) {
    query['CallerUid'] = request.callerUid;
  }
  if (!$isNull(request.extendInfo)) {
    query['ExtendInfo'] = request.extendInfo;
  }
  if (!$isNull(request.fileSize)) {
    query['FileSize'] = request.fileSize;
  }
  if (!$isNull(request.fileUrl)) {
    query['FileUrl'] = request.fileUrl;
  }
  if (!$isNull(request.memo)) {
    query['Memo'] = request.memo;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UploadCardRes',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 上传卡片素材并获取素材id
 *
 * @param request UploadCardResRequest
 * @return UploadCardResResponse
 */
async function uploadCardRes(request: UploadCardResRequest): UploadCardResResponse {
  var runtime = new $RuntimeOptions{};
  return uploadCardResWithOptions(request, runtime);
}

model UploadCardResWithDyncParamRequest {
  dynamicParam?: string(name='DynamicParam', example='示例值示例值示例值'),
  expiredTimes?: long(name='ExpiredTimes', example='48'),
  fileSize?: long(name='FileSize', example='73'),
  fileUrl?: string(name='FileUrl', example='示例值示例值示例值'),
  memo?: string(name='Memo', example='示例值示例值示例值'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', example='示例值示例值'),
  templateCode?: string(name='TemplateCode', example='示例值示例值'),
}

model UploadCardResWithDyncParamResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', example='示例值示例值'),
  data?: {
    resourceId?: long(name='ResourceId', example='25'),
  }(name='Data'),
  message?: string(name='Message', example='示例值示例值'),
  requestId?: string(name='RequestId', example='示例值'),
  success?: boolean(name='Success', example='false'),
}

model UploadCardResWithDyncParamResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UploadCardResWithDyncParamResponseBody(name='body'),
}

/**
 * @summary 上传动参图片素材
 *
 * @param request UploadCardResWithDyncParamRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UploadCardResWithDyncParamResponse
 */
async function uploadCardResWithDyncParamWithOptions(request: UploadCardResWithDyncParamRequest, runtime: $RuntimeOptions): UploadCardResWithDyncParamResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.dynamicParam)) {
    query['DynamicParam'] = request.dynamicParam;
  }
  if (!$isNull(request.expiredTimes)) {
    query['ExpiredTimes'] = request.expiredTimes;
  }
  if (!$isNull(request.fileSize)) {
    query['FileSize'] = request.fileSize;
  }
  if (!$isNull(request.fileUrl)) {
    query['FileUrl'] = request.fileUrl;
  }
  if (!$isNull(request.memo)) {
    query['Memo'] = request.memo;
  }
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!$isNull(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UploadCardResWithDyncParam',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 上传动参图片素材
 *
 * @param request UploadCardResWithDyncParamRequest
 * @return UploadCardResWithDyncParamResponse
 */
async function uploadCardResWithDyncParam(request: UploadCardResWithDyncParamRequest): UploadCardResWithDyncParamResponse {
  var runtime = new $RuntimeOptions{};
  return uploadCardResWithDyncParamWithOptions(request, runtime);
}

model ValidatYunSmsIdRequest {
  ownerId?: long(name='OwnerId'),
  prodCode?: string(name='ProdCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  data?: string(name='data', description='This parameter is required.'),
}

model ValidatYunSmsIdResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model ValidatYunSmsIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ValidatYunSmsIdResponseBody(name='body'),
}

/**
 * @param request ValidatYunSmsIdRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ValidatYunSmsIdResponse
 */
async function validatYunSmsIdWithOptions(request: ValidatYunSmsIdRequest, runtime: $RuntimeOptions): ValidatYunSmsIdResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!$isNull(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!$isNull(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!$isNull(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!$isNull(request.data)) {
    query['data'] = request.data;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ValidatYunSmsId',
    version = '2017-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request ValidatYunSmsIdRequest
 * @return ValidatYunSmsIdResponse
 */
async function validatYunSmsId(request: ValidatYunSmsIdRequest): ValidatYunSmsIdResponse {
  var runtime = new $RuntimeOptions{};
  return validatYunSmsIdWithOptions(request, runtime);
}

