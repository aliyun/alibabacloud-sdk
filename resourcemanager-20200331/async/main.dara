/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'ResourceManager';
  @version = '2020-03-31';
  @endpointRule = 'central';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AcceptHandshakeRequest {
  handshakeId: string(name='HandshakeId', position='Query'),
}

model AcceptHandshakeResponseBody = {
  handshake?: {
    createTime?: string(name='CreateTime'),
    expireTime?: string(name='ExpireTime'),
    handshakeId?: string(name='HandshakeId'),
    masterAccountId?: string(name='MasterAccountId'),
    masterAccountName?: string(name='MasterAccountName'),
    modifyTime?: string(name='ModifyTime'),
    note?: string(name='Note'),
    resourceDirectoryId?: string(name='ResourceDirectoryId'),
    status?: string(name='Status'),
    targetEntity?: string(name='TargetEntity'),
    targetType?: string(name='TargetType'),
  }(name='Handshake'),
  requestId?: string(name='RequestId'),
}

model AcceptHandshakeResponse = {
  headers: map[string]string(name='headers'),
  body: AcceptHandshakeResponseBody(name='body'),
}

async function acceptHandshake(request: AcceptHandshakeRequest): AcceptHandshakeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AcceptHandshake', 'POST', '/', 'json', false, 'json', request);
}

model AttachControlPolicyRequest {
  policyId: string(name='PolicyId', position='Query'),
  targetId: string(name='TargetId', position='Query'),
}

model AttachControlPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model AttachControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: AttachControlPolicyResponseBody(name='body'),
}

async function attachControlPolicy(request: AttachControlPolicyRequest): AttachControlPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachControlPolicy', 'POST', '/', 'json', false, 'json', request);
}

model AttachPolicyRequest {
  policyName: string(name='PolicyName', position='Query'),
  policyType: string(name='PolicyType', position='Query'),
  principalName: string(name='PrincipalName', position='Query'),
  principalType: string(name='PrincipalType', position='Query'),
  resourceGroupId: string(name='ResourceGroupId', position='Query'),
}

model AttachPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model AttachPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: AttachPolicyResponseBody(name='body'),
}

async function attachPolicy(request: AttachPolicyRequest): AttachPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachPolicy', 'POST', '/', 'json', false, 'json', request);
}

model BindSecureMobilePhoneRequest {
  accountId: string(name='AccountId', position='Query'),
  secureMobilePhone: string(name='SecureMobilePhone', position='Query'),
  verificationCode: string(name='VerificationCode', position='Query'),
}

model BindSecureMobilePhoneResponseBody = {
  requestId?: string(name='RequestId'),
}

model BindSecureMobilePhoneResponse = {
  headers: map[string]string(name='headers'),
  body: BindSecureMobilePhoneResponseBody(name='body'),
}

async function bindSecureMobilePhone(request: BindSecureMobilePhoneRequest): BindSecureMobilePhoneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindSecureMobilePhone', 'POST', '/', 'json', false, 'json', request);
}

model CancelCreateCloudAccountRequest {
  recordId: string(name='RecordId', position='Query'),
}

model CancelCreateCloudAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model CancelCreateCloudAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CancelCreateCloudAccountResponseBody(name='body'),
}

async function cancelCreateCloudAccount(request: CancelCreateCloudAccountRequest): CancelCreateCloudAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelCreateCloudAccount', 'POST', '/', 'json', false, 'json', request);
}

model CancelHandshakeRequest {
  handshakeId: string(name='HandshakeId', position='Query'),
}

model CancelHandshakeResponseBody = {
  handshake?: {
    createTime?: string(name='CreateTime'),
    expireTime?: string(name='ExpireTime'),
    handshakeId?: string(name='HandshakeId'),
    masterAccountId?: string(name='MasterAccountId'),
    masterAccountName?: string(name='MasterAccountName'),
    modifyTime?: string(name='ModifyTime'),
    note?: string(name='Note'),
    resourceDirectoryId?: string(name='ResourceDirectoryId'),
    status?: string(name='Status'),
    targetEntity?: string(name='TargetEntity'),
    targetType?: string(name='TargetType'),
  }(name='Handshake'),
  requestId?: string(name='RequestId'),
}

model CancelHandshakeResponse = {
  headers: map[string]string(name='headers'),
  body: CancelHandshakeResponseBody(name='body'),
}

async function cancelHandshake(request: CancelHandshakeRequest): CancelHandshakeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelHandshake', 'POST', '/', 'json', false, 'json', request);
}

model CancelPromoteResourceAccountRequest {
  recordId: string(name='RecordId', position='Query'),
}

model CancelPromoteResourceAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model CancelPromoteResourceAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CancelPromoteResourceAccountResponseBody(name='body'),
}

async function cancelPromoteResourceAccount(request: CancelPromoteResourceAccountRequest): CancelPromoteResourceAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelPromoteResourceAccount', 'POST', '/', 'json', false, 'json', request);
}

model CreateCloudAccountRequest {
  displayName: string(name='DisplayName', position='Query'),
  email: string(name='Email', position='Query'),
  parentFolderId?: string(name='ParentFolderId', position='Query'),
  payerAccountId?: string(name='PayerAccountId', position='Query'),
}

model CreateCloudAccountResponseBody = {
  account?: {
    accountId?: string(name='AccountId'),
    accountName?: string(name='AccountName'),
    displayName?: string(name='DisplayName'),
    folderId?: string(name='FolderId'),
    joinMethod?: string(name='JoinMethod'),
    modifyTime?: string(name='ModifyTime'),
    recordId?: string(name='RecordId'),
    resourceDirectoryId?: string(name='ResourceDirectoryId'),
    status?: string(name='Status'),
    type?: string(name='Type'),
  }(name='Account'),
  requestId?: string(name='RequestId'),
}

model CreateCloudAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCloudAccountResponseBody(name='body'),
}

async function createCloudAccount(request: CreateCloudAccountRequest): CreateCloudAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCloudAccount', 'POST', '/', 'json', false, 'json', request);
}

model CreateControlPolicyRequest {
  description?: string(name='Description', position='Query'),
  effectScope: string(name='EffectScope', position='Query'),
  policyDocument: string(name='PolicyDocument', position='Query'),
  policyName: string(name='PolicyName', position='Query'),
}

model CreateControlPolicyResponseBody = {
  controlPolicy?: {
    attachmentCount?: string(name='AttachmentCount'),
    createDate?: string(name='CreateDate'),
    description?: string(name='Description'),
    effectScope?: string(name='EffectScope'),
    policyId?: string(name='PolicyId'),
    policyName?: string(name='PolicyName'),
    policyType?: string(name='PolicyType'),
    updateDate?: string(name='UpdateDate'),
  }(name='ControlPolicy'),
  requestId?: string(name='RequestId'),
}

model CreateControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateControlPolicyResponseBody(name='body'),
}

async function createControlPolicy(request: CreateControlPolicyRequest): CreateControlPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateControlPolicy', 'POST', '/', 'json', false, 'json', request);
}

model CreateFolderRequest {
  folderName: string(name='FolderName', position='Query'),
  parentFolderId?: string(name='ParentFolderId', position='Query'),
}

model CreateFolderResponseBody = {
  folder?: {
    createTime?: string(name='CreateTime'),
    folderId?: string(name='FolderId'),
    folderName?: string(name='FolderName'),
    parentFolderId?: string(name='ParentFolderId'),
  }(name='Folder'),
  requestId?: string(name='RequestId'),
}

model CreateFolderResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFolderResponseBody(name='body'),
}

async function createFolder(request: CreateFolderRequest): CreateFolderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFolder', 'POST', '/', 'json', false, 'json', request);
}

model CreatePolicyRequest {
  description?: string(name='Description', position='Query'),
  policyDocument: string(name='PolicyDocument', position='Query'),
  policyName: string(name='PolicyName', position='Query'),
}

model CreatePolicyResponseBody = {
  policy?: {
    createDate?: string(name='CreateDate'),
    defaultVersion?: string(name='DefaultVersion'),
    description?: string(name='Description'),
    policyName?: string(name='PolicyName'),
    policyType?: string(name='PolicyType'),
  }(name='Policy'),
  requestId?: string(name='RequestId'),
}

model CreatePolicyResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePolicyResponseBody(name='body'),
}

async function createPolicy(request: CreatePolicyRequest): CreatePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePolicy', 'POST', '/', 'json', false, 'json', request);
}

model CreatePolicyVersionRequest {
  policyDocument: string(name='PolicyDocument', position='Query'),
  policyName: string(name='PolicyName', position='Query'),
  setAsDefault?: boolean(name='SetAsDefault', position='Query'),
}

model CreatePolicyVersionResponseBody = {
  policyVersion?: {
    createDate?: string(name='CreateDate'),
    isDefaultVersion?: boolean(name='IsDefaultVersion'),
    versionId?: string(name='VersionId'),
  }(name='PolicyVersion'),
  requestId?: string(name='RequestId'),
}

model CreatePolicyVersionResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePolicyVersionResponseBody(name='body'),
}

async function createPolicyVersion(request: CreatePolicyVersionRequest): CreatePolicyVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePolicyVersion', 'POST', '/', 'json', false, 'json', request);
}

model CreateResourceAccountRequest {
  accountNamePrefix?: string(name='AccountNamePrefix', position='Query'),
  displayName: string(name='DisplayName', position='Query'),
  parentFolderId?: string(name='ParentFolderId', position='Query'),
  payerAccountId?: string(name='PayerAccountId', position='Query'),
}

model CreateResourceAccountResponseBody = {
  account?: {
    accountId?: string(name='AccountId'),
    accountName?: string(name='AccountName'),
    displayName?: string(name='DisplayName'),
    folderId?: string(name='FolderId'),
    joinMethod?: string(name='JoinMethod'),
    joinTime?: string(name='JoinTime'),
    modifyTime?: string(name='ModifyTime'),
    resourceDirectoryId?: string(name='ResourceDirectoryId'),
    status?: string(name='Status'),
    type?: string(name='Type'),
  }(name='Account'),
  requestId?: string(name='RequestId'),
}

model CreateResourceAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CreateResourceAccountResponseBody(name='body'),
}

async function createResourceAccount(request: CreateResourceAccountRequest): CreateResourceAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateResourceAccount', 'POST', '/', 'json', false, 'json', request);
}

model CreateResourceGroupRequest {
  displayName: string(name='DisplayName', position='Query'),
  name: string(name='Name', position='Query'),
}

model CreateResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
  resourceGroup?: {
    accountId?: string(name='AccountId'),
    createDate?: string(name='CreateDate'),
    displayName?: string(name='DisplayName'),
    id?: string(name='Id'),
    name?: string(name='Name'),
    regionStatuses?: {
      regionStatus?: [ 
      {
        regionId?: string(name='RegionId'),
        status?: string(name='Status'),
      }
    ](name='RegionStatus')
    }(name='RegionStatuses'),
    status?: string(name='Status'),
  }(name='ResourceGroup'),
}

model CreateResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateResourceGroupResponseBody(name='body'),
}

async function createResourceGroup(request: CreateResourceGroupRequest): CreateResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateRoleRequest {
  assumeRolePolicyDocument: string(name='AssumeRolePolicyDocument', position='Query'),
  description?: string(name='Description', position='Query'),
  maxSessionDuration?: long(name='MaxSessionDuration', position='Query'),
  roleName: string(name='RoleName', position='Query'),
}

model CreateRoleResponseBody = {
  requestId?: string(name='RequestId'),
  role?: {
    arn?: string(name='Arn'),
    assumeRolePolicyDocument?: string(name='AssumeRolePolicyDocument'),
    createDate?: string(name='CreateDate'),
    description?: string(name='Description'),
    maxSessionDuration?: long(name='MaxSessionDuration'),
    roleId?: string(name='RoleId'),
    roleName?: string(name='RoleName'),
    rolePrincipalName?: string(name='RolePrincipalName'),
  }(name='Role'),
}

model CreateRoleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRoleResponseBody(name='body'),
}

async function createRole(request: CreateRoleRequest): CreateRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRole', 'POST', '/', 'json', false, 'json', request);
}

model CreateServiceLinkedRoleRequest {
  customSuffix?: string(name='CustomSuffix', position='Query'),
  description?: string(name='Description', position='Query'),
  serviceName: string(name='ServiceName', position='Query'),
}

model CreateServiceLinkedRoleResponseBody = {
  requestId?: string(name='RequestId'),
  role?: {
    arn?: string(name='Arn'),
    assumeRolePolicyDocument?: string(name='AssumeRolePolicyDocument'),
    createDate?: string(name='CreateDate'),
    description?: string(name='Description'),
    isServiceLinkedRole?: boolean(name='IsServiceLinkedRole'),
    roleId?: string(name='RoleId'),
    roleName?: string(name='RoleName'),
    rolePrincipalName?: string(name='RolePrincipalName'),
  }(name='Role'),
}

model CreateServiceLinkedRoleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateServiceLinkedRoleResponseBody(name='body'),
}

async function createServiceLinkedRole(request: CreateServiceLinkedRoleRequest): CreateServiceLinkedRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateServiceLinkedRole', 'POST', '/', 'json', false, 'json', request);
}

model DeclineHandshakeRequest {
  handshakeId: string(name='HandshakeId', position='Query'),
}

model DeclineHandshakeResponseBody = {
  handshake?: {
    createTime?: string(name='CreateTime'),
    expireTime?: string(name='ExpireTime'),
    handshakeId?: string(name='HandshakeId'),
    masterAccountId?: string(name='MasterAccountId'),
    masterAccountName?: string(name='MasterAccountName'),
    modifyTime?: string(name='ModifyTime'),
    note?: string(name='Note'),
    resourceDirectoryId?: string(name='ResourceDirectoryId'),
    status?: string(name='Status'),
    targetEntity?: string(name='TargetEntity'),
    targetType?: string(name='TargetType'),
  }(name='Handshake'),
  requestId?: string(name='RequestId'),
}

model DeclineHandshakeResponse = {
  headers: map[string]string(name='headers'),
  body: DeclineHandshakeResponseBody(name='body'),
}

async function declineHandshake(request: DeclineHandshakeRequest): DeclineHandshakeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeclineHandshake', 'POST', '/', 'json', false, 'json', request);
}

model DeleteControlPolicyRequest {
  policyId: string(name='PolicyId', position='Query'),
}

model DeleteControlPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteControlPolicyResponseBody(name='body'),
}

async function deleteControlPolicy(request: DeleteControlPolicyRequest): DeleteControlPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteControlPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DeleteFolderRequest {
  folderId: string(name='FolderId', position='Query'),
}

model DeleteFolderResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteFolderResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFolderResponseBody(name='body'),
}

async function deleteFolder(request: DeleteFolderRequest): DeleteFolderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFolder', 'POST', '/', 'json', false, 'json', request);
}

model DeletePolicyRequest {
  policyName: string(name='PolicyName', position='Query'),
}

model DeletePolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeletePolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePolicyResponseBody(name='body'),
}

async function deletePolicy(request: DeletePolicyRequest): DeletePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePolicy', 'POST', '/', 'json', false, 'json', request);
}

model DeletePolicyVersionRequest {
  policyName: string(name='PolicyName', position='Query'),
  versionId: string(name='VersionId', position='Query'),
}

model DeletePolicyVersionResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeletePolicyVersionResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePolicyVersionResponseBody(name='body'),
}

async function deletePolicyVersion(request: DeletePolicyVersionRequest): DeletePolicyVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePolicyVersion', 'POST', '/', 'json', false, 'json', request);
}

model DeleteResourceGroupRequest {
  resourceGroupId: string(name='ResourceGroupId', position='Query'),
}

model DeleteResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
  resourceGroup?: {
    accountId?: string(name='AccountId'),
    createDate?: string(name='CreateDate'),
    displayName?: string(name='DisplayName'),
    id?: string(name='Id'),
    name?: string(name='Name'),
    regionStatuses?: {
      regionStatus?: [ 
      {
        regionId?: string(name='RegionId'),
        status?: string(name='Status'),
      }
    ](name='RegionStatus')
    }(name='RegionStatuses'),
    status?: string(name='Status'),
  }(name='ResourceGroup'),
}

model DeleteResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteResourceGroupResponseBody(name='body'),
}

async function deleteResourceGroup(request: DeleteResourceGroupRequest): DeleteResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRoleRequest {
  roleName: string(name='RoleName', position='Query'),
}

model DeleteRoleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteRoleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRoleResponseBody(name='body'),
}

async function deleteRole(request: DeleteRoleRequest): DeleteRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRole', 'POST', '/', 'json', false, 'json', request);
}

model DeleteServiceLinkedRoleRequest {
  roleName: string(name='RoleName', position='Query'),
}

model DeleteServiceLinkedRoleResponseBody = {
  deletionTaskId?: string(name='DeletionTaskId'),
  requestId?: string(name='RequestId'),
}

model DeleteServiceLinkedRoleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteServiceLinkedRoleResponseBody(name='body'),
}

async function deleteServiceLinkedRole(request: DeleteServiceLinkedRoleRequest): DeleteServiceLinkedRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteServiceLinkedRole', 'POST', '/', 'json', false, 'json', request);
}

model DeregisterDelegatedAdministratorRequest {
  accountId: string(name='AccountId', position='Query'),
  servicePrincipal: string(name='ServicePrincipal', position='Query'),
}

model DeregisterDelegatedAdministratorResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeregisterDelegatedAdministratorResponse = {
  headers: map[string]string(name='headers'),
  body: DeregisterDelegatedAdministratorResponseBody(name='body'),
}

async function deregisterDelegatedAdministrator(request: DeregisterDelegatedAdministratorRequest): DeregisterDelegatedAdministratorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeregisterDelegatedAdministrator', 'POST', '/', 'json', false, 'json', request);
}

model DestroyResourceDirectoryRequest {
}

model DestroyResourceDirectoryResponseBody = {
  requestId?: string(name='RequestId'),
}

model DestroyResourceDirectoryResponse = {
  headers: map[string]string(name='headers'),
  body: DestroyResourceDirectoryResponseBody(name='body'),
}

async function destroyResourceDirectory(request: DestroyResourceDirectoryRequest): DestroyResourceDirectoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DestroyResourceDirectory', 'POST', '/', 'json', false, 'json', request);
}

model DetachControlPolicyRequest {
  policyId: string(name='PolicyId', position='Query'),
  targetId: string(name='TargetId', position='Query'),
}

model DetachControlPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model DetachControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DetachControlPolicyResponseBody(name='body'),
}

async function detachControlPolicy(request: DetachControlPolicyRequest): DetachControlPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachControlPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DetachPolicyRequest {
  policyName: string(name='PolicyName', position='Query'),
  policyType: string(name='PolicyType', position='Query'),
  principalName: string(name='PrincipalName', position='Query'),
  principalType: string(name='PrincipalType', position='Query'),
  resourceGroupId: string(name='ResourceGroupId', position='Query'),
}

model DetachPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model DetachPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DetachPolicyResponseBody(name='body'),
}

async function detachPolicy(request: DetachPolicyRequest): DetachPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DisableControlPolicyRequest {
}

model DisableControlPolicyResponseBody = {
  enablementStatus?: string(name='EnablementStatus'),
  requestId?: string(name='RequestId'),
}

model DisableControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DisableControlPolicyResponseBody(name='body'),
}

async function disableControlPolicy(request: DisableControlPolicyRequest): DisableControlPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableControlPolicy', 'POST', '/', 'json', false, 'json', request);
}

model EnableControlPolicyRequest {
}

model EnableControlPolicyResponseBody = {
  enablementStatus?: string(name='EnablementStatus'),
  requestId?: string(name='RequestId'),
}

model EnableControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: EnableControlPolicyResponseBody(name='body'),
}

async function enableControlPolicy(request: EnableControlPolicyRequest): EnableControlPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableControlPolicy', 'POST', '/', 'json', false, 'json', request);
}

model EnableResourceDirectoryRequest {
  enableMode: string(name='EnableMode', position='Query'),
  MAName?: string(name='MAName', position='Query'),
  MASecureMobilePhone?: string(name='MASecureMobilePhone', position='Query'),
  verificationCode?: string(name='VerificationCode', position='Query'),
}

model EnableResourceDirectoryResponseBody = {
  requestId?: string(name='RequestId'),
  resourceDirectory?: {
    createTime?: string(name='CreateTime'),
    masterAccountId?: string(name='MasterAccountId'),
    masterAccountName?: string(name='MasterAccountName'),
    resourceDirectoryId?: string(name='ResourceDirectoryId'),
    rootFolderId?: string(name='RootFolderId'),
  }(name='ResourceDirectory'),
}

model EnableResourceDirectoryResponse = {
  headers: map[string]string(name='headers'),
  body: EnableResourceDirectoryResponseBody(name='body'),
}

async function enableResourceDirectory(request: EnableResourceDirectoryRequest): EnableResourceDirectoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableResourceDirectory', 'POST', '/', 'json', false, 'json', request);
}

model GetAccountRequest {
  accountId: string(name='AccountId', position='Query'),
}

model GetAccountResponseBody = {
  account?: {
    accountId?: string(name='AccountId'),
    accountName?: string(name='AccountName'),
    displayName?: string(name='DisplayName'),
    folderId?: string(name='FolderId'),
    identityInformation?: string(name='IdentityInformation'),
    joinMethod?: string(name='JoinMethod'),
    joinTime?: string(name='JoinTime'),
    modifyTime?: string(name='ModifyTime'),
    resourceDirectoryId?: string(name='ResourceDirectoryId'),
    resourceDirectoryPath?: string(name='ResourceDirectoryPath'),
    status?: string(name='Status'),
    type?: string(name='Type'),
  }(name='Account'),
  requestId?: string(name='RequestId'),
}

model GetAccountResponse = {
  headers: map[string]string(name='headers'),
  body: GetAccountResponseBody(name='body'),
}

async function getAccount(request: GetAccountRequest): GetAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAccount', 'POST', '/', 'json', false, 'json', request);
}

model GetControlPolicyRequest {
  language?: string(name='Language', position='Query'),
  policyId: string(name='PolicyId', position='Query'),
}

model GetControlPolicyResponseBody = {
  controlPolicy?: {
    attachmentCount?: string(name='AttachmentCount'),
    createDate?: string(name='CreateDate'),
    description?: string(name='Description'),
    effectScope?: string(name='EffectScope'),
    policyDocument?: string(name='PolicyDocument'),
    policyId?: string(name='PolicyId'),
    policyName?: string(name='PolicyName'),
    policyType?: string(name='PolicyType'),
    updateDate?: string(name='UpdateDate'),
  }(name='ControlPolicy'),
  requestId?: string(name='RequestId'),
}

model GetControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: GetControlPolicyResponseBody(name='body'),
}

async function getControlPolicy(request: GetControlPolicyRequest): GetControlPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetControlPolicy', 'POST', '/', 'json', false, 'json', request);
}

model GetControlPolicyEnablementStatusRequest {
}

model GetControlPolicyEnablementStatusResponseBody = {
  enablementStatus?: string(name='EnablementStatus'),
  requestId?: string(name='RequestId'),
}

model GetControlPolicyEnablementStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetControlPolicyEnablementStatusResponseBody(name='body'),
}

async function getControlPolicyEnablementStatus(request: GetControlPolicyEnablementStatusRequest): GetControlPolicyEnablementStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetControlPolicyEnablementStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetFolderRequest {
  folderId: string(name='FolderId', position='Query'),
}

model GetFolderResponseBody = {
  folder?: {
    createTime?: string(name='CreateTime'),
    folderId?: string(name='FolderId'),
    folderName?: string(name='FolderName'),
    parentFolderId?: string(name='ParentFolderId'),
    resourceDirectoryPath?: string(name='ResourceDirectoryPath'),
  }(name='Folder'),
  requestId?: string(name='RequestId'),
}

model GetFolderResponse = {
  headers: map[string]string(name='headers'),
  body: GetFolderResponseBody(name='body'),
}

async function getFolder(request: GetFolderRequest): GetFolderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFolder', 'POST', '/', 'json', false, 'json', request);
}

model GetHandshakeRequest {
  handshakeId: string(name='HandshakeId', position='Query'),
}

model GetHandshakeResponseBody = {
  handshake?: {
    createTime?: string(name='CreateTime'),
    expireTime?: string(name='ExpireTime'),
    handshakeId?: string(name='HandshakeId'),
    invitedAccountRealName?: string(name='InvitedAccountRealName'),
    masterAccountId?: string(name='MasterAccountId'),
    masterAccountName?: string(name='MasterAccountName'),
    masterAccountRealName?: string(name='MasterAccountRealName'),
    modifyTime?: string(name='ModifyTime'),
    note?: string(name='Note'),
    resourceDirectoryId?: string(name='ResourceDirectoryId'),
    status?: string(name='Status'),
    targetEntity?: string(name='TargetEntity'),
    targetType?: string(name='TargetType'),
  }(name='Handshake'),
  requestId?: string(name='RequestId'),
}

model GetHandshakeResponse = {
  headers: map[string]string(name='headers'),
  body: GetHandshakeResponseBody(name='body'),
}

async function getHandshake(request: GetHandshakeRequest): GetHandshakeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetHandshake', 'POST', '/', 'json', false, 'json', request);
}

model GetPayerForAccountRequest {
  accountId: string(name='AccountId', position='Query'),
}

model GetPayerForAccountResponseBody = {
  payerAccountId?: string(name='PayerAccountId'),
  payerAccountName?: string(name='PayerAccountName'),
  requestId?: string(name='RequestId'),
}

model GetPayerForAccountResponse = {
  headers: map[string]string(name='headers'),
  body: GetPayerForAccountResponseBody(name='body'),
}

async function getPayerForAccount(request: GetPayerForAccountRequest): GetPayerForAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPayerForAccount', 'POST', '/', 'json', false, 'json', request);
}

model GetPolicyRequest {
  language?: string(name='Language', position='Query'),
  policyName: string(name='PolicyName', position='Query'),
  policyType: string(name='PolicyType', position='Query'),
}

model GetPolicyResponseBody = {
  policy?: {
    attachmentCount?: int32(name='AttachmentCount'),
    createDate?: string(name='CreateDate'),
    defaultVersion?: string(name='DefaultVersion'),
    description?: string(name='Description'),
    policyDocument?: string(name='PolicyDocument'),
    policyName?: string(name='PolicyName'),
    policyType?: string(name='PolicyType'),
    updateDate?: string(name='UpdateDate'),
  }(name='Policy'),
  requestId?: string(name='RequestId'),
}

model GetPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: GetPolicyResponseBody(name='body'),
}

async function getPolicy(request: GetPolicyRequest): GetPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPolicy', 'POST', '/', 'json', false, 'json', request);
}

model GetPolicyVersionRequest {
  policyName: string(name='PolicyName', position='Query'),
  policyType: string(name='PolicyType', position='Query'),
  versionId: string(name='VersionId', position='Query'),
}

model GetPolicyVersionResponseBody = {
  policyVersion?: {
    createDate?: string(name='CreateDate'),
    isDefaultVersion?: boolean(name='IsDefaultVersion'),
    policyDocument?: string(name='PolicyDocument'),
    versionId?: string(name='VersionId'),
  }(name='PolicyVersion'),
  requestId?: string(name='RequestId'),
}

model GetPolicyVersionResponse = {
  headers: map[string]string(name='headers'),
  body: GetPolicyVersionResponseBody(name='body'),
}

async function getPolicyVersion(request: GetPolicyVersionRequest): GetPolicyVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPolicyVersion', 'POST', '/', 'json', false, 'json', request);
}

model GetResourceDirectoryRequest {
}

model GetResourceDirectoryResponseBody = {
  requestId?: string(name='RequestId'),
  resourceDirectory?: {
    controlPolicyStatus?: string(name='ControlPolicyStatus'),
    createTime?: string(name='CreateTime'),
    masterAccountId?: string(name='MasterAccountId'),
    masterAccountName?: string(name='MasterAccountName'),
    memberDeletionStatus?: string(name='MemberDeletionStatus'),
    resourceDirectoryId?: string(name='ResourceDirectoryId'),
    rootFolderId?: string(name='RootFolderId'),
  }(name='ResourceDirectory'),
}

model GetResourceDirectoryResponse = {
  headers: map[string]string(name='headers'),
  body: GetResourceDirectoryResponseBody(name='body'),
}

async function getResourceDirectory(request: GetResourceDirectoryRequest): GetResourceDirectoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetResourceDirectory', 'POST', '/', 'json', false, 'json', request);
}

model GetResourceGroupRequest {
  resourceGroupId: string(name='ResourceGroupId', position='Query'),
}

model GetResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
  resourceGroup?: {
    accountId?: string(name='AccountId'),
    createDate?: string(name='CreateDate'),
    displayName?: string(name='DisplayName'),
    id?: string(name='Id'),
    name?: string(name='Name'),
    regionStatuses?: {
      regionStatus?: [ 
      {
        regionId?: string(name='RegionId'),
        status?: string(name='Status'),
      }
    ](name='RegionStatus')
    }(name='RegionStatuses'),
    status?: string(name='Status'),
  }(name='ResourceGroup'),
}

model GetResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: GetResourceGroupResponseBody(name='body'),
}

async function getResourceGroup(request: GetResourceGroupRequest): GetResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model GetRoleRequest {
  language?: string(name='Language', position='Query'),
  roleName: string(name='RoleName', position='Query'),
}

model GetRoleResponseBody = {
  requestId?: string(name='RequestId'),
  role?: {
    arn?: string(name='Arn'),
    assumeRolePolicyDocument?: string(name='AssumeRolePolicyDocument'),
    createDate?: string(name='CreateDate'),
    description?: string(name='Description'),
    isServiceLinkedRole?: boolean(name='IsServiceLinkedRole'),
    latestDeletionTask?: {
      createDate?: string(name='CreateDate'),
      deletionTaskId?: string(name='DeletionTaskId'),
    }(name='LatestDeletionTask'),
    maxSessionDuration?: long(name='MaxSessionDuration'),
    roleId?: string(name='RoleId'),
    roleName?: string(name='RoleName'),
    rolePrincipalName?: string(name='RolePrincipalName'),
    updateDate?: string(name='UpdateDate'),
  }(name='Role'),
}

model GetRoleResponse = {
  headers: map[string]string(name='headers'),
  body: GetRoleResponseBody(name='body'),
}

async function getRole(request: GetRoleRequest): GetRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRole', 'POST', '/', 'json', false, 'json', request);
}

model GetServiceLinkedRoleDeletionStatusRequest {
  deletionTaskId?: string(name='DeletionTaskId', position='Query'),
}

model GetServiceLinkedRoleDeletionStatusResponseBody = {
  reason?: {
    message?: string(name='Message'),
    roleUsages?: {
      roleUsage?: [ 
      {
        region?: string(name='Region'),
        resources?: {
          resource?: [ string ](name='Resource')
        }(name='Resources'),
      }
    ](name='RoleUsage')
    }(name='RoleUsages'),
  }(name='Reason'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetServiceLinkedRoleDeletionStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetServiceLinkedRoleDeletionStatusResponseBody(name='body'),
}

async function getServiceLinkedRoleDeletionStatus(request: GetServiceLinkedRoleDeletionStatusRequest): GetServiceLinkedRoleDeletionStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetServiceLinkedRoleDeletionStatus', 'POST', '/', 'json', false, 'json', request);
}

model InitResourceDirectoryRequest {
}

model InitResourceDirectoryResponseBody = {
  requestId?: string(name='RequestId'),
  resourceDirectory?: {
    createTime?: string(name='CreateTime'),
    masterAccountId?: string(name='MasterAccountId'),
    masterAccountName?: string(name='MasterAccountName'),
    resourceDirectoryId?: string(name='ResourceDirectoryId'),
    rootFolderId?: string(name='RootFolderId'),
  }(name='ResourceDirectory'),
}

model InitResourceDirectoryResponse = {
  headers: map[string]string(name='headers'),
  body: InitResourceDirectoryResponseBody(name='body'),
}

async function initResourceDirectory(request: InitResourceDirectoryRequest): InitResourceDirectoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InitResourceDirectory', 'POST', '/', 'json', false, 'json', request);
}

model InviteAccountToResourceDirectoryRequest {
  note?: string(name='Note', position='Query'),
  targetEntity: string(name='TargetEntity', position='Query'),
  targetType: string(name='TargetType', position='Query'),
}

model InviteAccountToResourceDirectoryResponseBody = {
  handshake?: {
    createTime?: string(name='CreateTime'),
    expireTime?: string(name='ExpireTime'),
    handshakeId?: string(name='HandshakeId'),
    masterAccountId?: string(name='MasterAccountId'),
    masterAccountName?: string(name='MasterAccountName'),
    modifyTime?: string(name='ModifyTime'),
    note?: string(name='Note'),
    resourceDirectoryId?: string(name='ResourceDirectoryId'),
    status?: string(name='Status'),
    targetEntity?: string(name='TargetEntity'),
    targetType?: string(name='TargetType'),
  }(name='Handshake'),
  requestId?: string(name='RequestId'),
}

model InviteAccountToResourceDirectoryResponse = {
  headers: map[string]string(name='headers'),
  body: InviteAccountToResourceDirectoryResponseBody(name='body'),
}

async function inviteAccountToResourceDirectory(request: InviteAccountToResourceDirectoryRequest): InviteAccountToResourceDirectoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InviteAccountToResourceDirectory', 'POST', '/', 'json', false, 'json', request);
}

model ListAccountsRequest {
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model ListAccountsResponseBody = {
  accounts?: {
    account?: [ 
    {
      accountId?: string(name='AccountId'),
      displayName?: string(name='DisplayName'),
      folderId?: string(name='FolderId'),
      joinMethod?: string(name='JoinMethod'),
      joinTime?: string(name='JoinTime'),
      modifyTime?: string(name='ModifyTime'),
      resourceDirectoryId?: string(name='ResourceDirectoryId'),
      resourceDirectoryPath?: string(name='ResourceDirectoryPath'),
      status?: string(name='Status'),
      type?: string(name='Type'),
    }
  ](name='Account')
  }(name='Accounts'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListAccountsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAccountsResponseBody(name='body'),
}

async function listAccounts(request: ListAccountsRequest): ListAccountsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAccounts', 'POST', '/', 'json', false, 'json', request);
}

model ListAccountsForParentRequest {
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  parentFolderId?: string(name='ParentFolderId', position='Query'),
  queryKeyword?: string(name='QueryKeyword', position='Query'),
}

model ListAccountsForParentResponseBody = {
  accounts?: {
    account?: [ 
    {
      accountId?: string(name='AccountId'),
      displayName?: string(name='DisplayName'),
      folderId?: string(name='FolderId'),
      joinMethod?: string(name='JoinMethod'),
      joinTime?: string(name='JoinTime'),
      modifyTime?: string(name='ModifyTime'),
      resourceDirectoryId?: string(name='ResourceDirectoryId'),
      status?: string(name='Status'),
      type?: string(name='Type'),
    }
  ](name='Account')
  }(name='Accounts'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListAccountsForParentResponse = {
  headers: map[string]string(name='headers'),
  body: ListAccountsForParentResponseBody(name='body'),
}

async function listAccountsForParent(request: ListAccountsForParentRequest): ListAccountsForParentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAccountsForParent', 'POST', '/', 'json', false, 'json', request);
}

model ListAncestorsRequest {
  childId: string(name='ChildId', position='Query'),
}

model ListAncestorsResponseBody = {
  folders?: {
    folder?: [ 
    {
      createTime?: string(name='CreateTime'),
      folderId?: string(name='FolderId'),
      folderName?: string(name='FolderName'),
    }
  ](name='Folder')
  }(name='Folders'),
  requestId?: string(name='RequestId'),
}

model ListAncestorsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAncestorsResponseBody(name='body'),
}

async function listAncestors(request: ListAncestorsRequest): ListAncestorsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAncestors', 'POST', '/', 'json', false, 'json', request);
}

model ListControlPoliciesRequest {
  language?: string(name='Language', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, maximum=200000, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  policyType?: string(name='PolicyType', position='Query'),
}

model ListControlPoliciesResponseBody = {
  controlPolicies?: {
    controlPolicy?: [ 
    {
      attachmentCount?: string(name='AttachmentCount'),
      createDate?: string(name='CreateDate'),
      description?: string(name='Description'),
      effectScope?: string(name='EffectScope'),
      policyId?: string(name='PolicyId'),
      policyName?: string(name='PolicyName'),
      policyType?: string(name='PolicyType'),
      updateDate?: string(name='UpdateDate'),
    }
  ](name='ControlPolicy')
  }(name='ControlPolicies'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListControlPoliciesResponse = {
  headers: map[string]string(name='headers'),
  body: ListControlPoliciesResponseBody(name='body'),
}

async function listControlPolicies(request: ListControlPoliciesRequest): ListControlPoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListControlPolicies', 'POST', '/', 'json', false, 'json', request);
}

model ListControlPolicyAttachmentsForTargetRequest {
  language?: string(name='Language', position='Query'),
  targetId: string(name='TargetId', position='Query'),
}

model ListControlPolicyAttachmentsForTargetResponseBody = {
  controlPolicyAttachments?: {
    controlPolicyAttachment?: [ 
    {
      attachDate?: string(name='AttachDate'),
      description?: string(name='Description'),
      effectScope?: string(name='EffectScope'),
      policyId?: string(name='PolicyId'),
      policyName?: string(name='PolicyName'),
      policyType?: string(name='PolicyType'),
    }
  ](name='ControlPolicyAttachment')
  }(name='ControlPolicyAttachments'),
  requestId?: string(name='RequestId'),
}

model ListControlPolicyAttachmentsForTargetResponse = {
  headers: map[string]string(name='headers'),
  body: ListControlPolicyAttachmentsForTargetResponseBody(name='body'),
}

async function listControlPolicyAttachmentsForTarget(request: ListControlPolicyAttachmentsForTargetRequest): ListControlPolicyAttachmentsForTargetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListControlPolicyAttachmentsForTarget', 'POST', '/', 'json', false, 'json', request);
}

model ListDelegatedAdministratorsRequest {
  pageNumber?: long(name='PageNumber', position='Query'),
  pageSize?: long(name='PageSize', position='Query'),
  servicePrincipal?: string(name='ServicePrincipal', position='Query'),
}

model ListDelegatedAdministratorsResponseBody = {
  accounts?: {
    account?: [ 
    {
      accountId?: string(name='AccountId'),
      delegationEnabledTime?: string(name='DelegationEnabledTime'),
      displayName?: string(name='DisplayName'),
      joinMethod?: string(name='JoinMethod'),
      servicePrincipal?: string(name='ServicePrincipal'),
    }
  ](name='Account')
  }(name='Accounts'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListDelegatedAdministratorsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDelegatedAdministratorsResponseBody(name='body'),
}

async function listDelegatedAdministrators(request: ListDelegatedAdministratorsRequest): ListDelegatedAdministratorsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDelegatedAdministrators', 'POST', '/', 'json', false, 'json', request);
}

model ListDelegatedServicesForAccountRequest {
  accountId: string(name='AccountId', position='Query'),
}

model ListDelegatedServicesForAccountResponseBody = {
  delegatedServices?: {
    delegatedService?: [ 
    {
      delegationEnabledTime?: string(name='DelegationEnabledTime'),
      servicePrincipal?: string(name='ServicePrincipal'),
    }
  ](name='DelegatedService')
  }(name='DelegatedServices'),
  requestId?: string(name='RequestId'),
}

model ListDelegatedServicesForAccountResponse = {
  headers: map[string]string(name='headers'),
  body: ListDelegatedServicesForAccountResponseBody(name='body'),
}

async function listDelegatedServicesForAccount(request: ListDelegatedServicesForAccountRequest): ListDelegatedServicesForAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDelegatedServicesForAccount', 'POST', '/', 'json', false, 'json', request);
}

model ListFoldersForParentRequest {
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  parentFolderId?: string(name='ParentFolderId', position='Query'),
  queryKeyword?: string(name='QueryKeyword', position='Query'),
}

model ListFoldersForParentResponseBody = {
  folders?: {
    folder?: [ 
    {
      createTime?: string(name='CreateTime'),
      folderId?: string(name='FolderId'),
      folderName?: string(name='FolderName'),
    }
  ](name='Folder')
  }(name='Folders'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListFoldersForParentResponse = {
  headers: map[string]string(name='headers'),
  body: ListFoldersForParentResponseBody(name='body'),
}

async function listFoldersForParent(request: ListFoldersForParentRequest): ListFoldersForParentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFoldersForParent', 'POST', '/', 'json', false, 'json', request);
}

model ListHandshakesForAccountRequest {
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model ListHandshakesForAccountResponseBody = {
  handshakes?: {
    handshake?: [ 
    {
      createTime?: string(name='CreateTime'),
      expireTime?: string(name='ExpireTime'),
      handshakeId?: string(name='HandshakeId'),
      masterAccountId?: string(name='MasterAccountId'),
      masterAccountName?: string(name='MasterAccountName'),
      modifyTime?: string(name='ModifyTime'),
      note?: string(name='Note'),
      resourceDirectoryId?: string(name='ResourceDirectoryId'),
      status?: string(name='Status'),
      targetEntity?: string(name='TargetEntity'),
      targetType?: string(name='TargetType'),
    }
  ](name='Handshake')
  }(name='Handshakes'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListHandshakesForAccountResponse = {
  headers: map[string]string(name='headers'),
  body: ListHandshakesForAccountResponseBody(name='body'),
}

async function listHandshakesForAccount(request: ListHandshakesForAccountRequest): ListHandshakesForAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHandshakesForAccount', 'POST', '/', 'json', false, 'json', request);
}

model ListHandshakesForResourceDirectoryRequest {
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model ListHandshakesForResourceDirectoryResponseBody = {
  handshakes?: {
    handshake?: [ 
    {
      createTime?: string(name='CreateTime'),
      expireTime?: string(name='ExpireTime'),
      handshakeId?: string(name='HandshakeId'),
      masterAccountId?: string(name='MasterAccountId'),
      masterAccountName?: string(name='MasterAccountName'),
      modifyTime?: string(name='ModifyTime'),
      note?: string(name='Note'),
      resourceDirectoryId?: string(name='ResourceDirectoryId'),
      status?: string(name='Status'),
      targetEntity?: string(name='TargetEntity'),
      targetType?: string(name='TargetType'),
    }
  ](name='Handshake')
  }(name='Handshakes'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListHandshakesForResourceDirectoryResponse = {
  headers: map[string]string(name='headers'),
  body: ListHandshakesForResourceDirectoryResponseBody(name='body'),
}

async function listHandshakesForResourceDirectory(request: ListHandshakesForResourceDirectoryRequest): ListHandshakesForResourceDirectoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHandshakesForResourceDirectory', 'POST', '/', 'json', false, 'json', request);
}

model ListPoliciesRequest {
  language?: string(name='Language', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  policyType?: string(name='PolicyType', position='Query'),
}

model ListPoliciesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  policies?: {
    policy?: [ 
    {
      attachmentCount?: int32(name='AttachmentCount'),
      createDate?: string(name='CreateDate'),
      defaultVersion?: string(name='DefaultVersion'),
      description?: string(name='Description'),
      policyName?: string(name='PolicyName'),
      policyType?: string(name='PolicyType'),
      updateDate?: string(name='UpdateDate'),
    }
  ](name='Policy')
  }(name='Policies'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListPoliciesResponse = {
  headers: map[string]string(name='headers'),
  body: ListPoliciesResponseBody(name='body'),
}

async function listPolicies(request: ListPoliciesRequest): ListPoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPolicies', 'POST', '/', 'json', false, 'json', request);
}

model ListPolicyAttachmentsRequest {
  language?: string(name='Language', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  policyName?: string(name='PolicyName', position='Query'),
  policyType?: string(name='PolicyType', position='Query'),
  principalName?: string(name='PrincipalName', position='Query'),
  principalType?: string(name='PrincipalType', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model ListPolicyAttachmentsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  policyAttachments?: {
    policyAttachment?: [ 
    {
      attachDate?: string(name='AttachDate'),
      description?: string(name='Description'),
      policyName?: string(name='PolicyName'),
      policyType?: string(name='PolicyType'),
      principalName?: string(name='PrincipalName'),
      principalType?: string(name='PrincipalType'),
      resourceGroupId?: string(name='ResourceGroupId'),
    }
  ](name='PolicyAttachment')
  }(name='PolicyAttachments'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListPolicyAttachmentsResponse = {
  headers: map[string]string(name='headers'),
  body: ListPolicyAttachmentsResponseBody(name='body'),
}

async function listPolicyAttachments(request: ListPolicyAttachmentsRequest): ListPolicyAttachmentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPolicyAttachments', 'POST', '/', 'json', false, 'json', request);
}

model ListPolicyVersionsRequest {
  policyName: string(name='PolicyName', position='Query'),
  policyType: string(name='PolicyType', position='Query'),
}

model ListPolicyVersionsResponseBody = {
  policyVersions?: {
    policyVersion?: [ 
    {
      createDate?: string(name='CreateDate'),
      isDefaultVersion?: boolean(name='IsDefaultVersion'),
      versionId?: string(name='VersionId'),
    }
  ](name='PolicyVersion')
  }(name='PolicyVersions'),
  requestId?: string(name='RequestId'),
}

model ListPolicyVersionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListPolicyVersionsResponseBody(name='body'),
}

async function listPolicyVersions(request: ListPolicyVersionsRequest): ListPolicyVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPolicyVersions', 'POST', '/', 'json', false, 'json', request);
}

model ListResourceGroupsRequest {
  displayName?: string(name='DisplayName', position='Query'),
  name?: string(name='Name', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  status?: string(name='Status', position='Query'),
}

model ListResourceGroupsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  resourceGroups?: {
    resourceGroup?: [ 
    {
      accountId?: string(name='AccountId'),
      createDate?: string(name='CreateDate'),
      displayName?: string(name='DisplayName'),
      id?: string(name='Id'),
      name?: string(name='Name'),
      status?: string(name='Status'),
    }
  ](name='ResourceGroup')
  }(name='ResourceGroups'),
  totalCount?: int32(name='TotalCount'),
}

model ListResourceGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListResourceGroupsResponseBody(name='body'),
}

async function listResourceGroups(request: ListResourceGroupsRequest): ListResourceGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListResourceGroups', 'POST', '/', 'json', false, 'json', request);
}

model ListResourcesRequest {
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  region?: string(name='Region', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceId?: string(name='ResourceId', position='Query'),
  resourceType?: string(name='ResourceType', position='Query'),
  service?: string(name='Service', position='Query'),
}

model ListResourcesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  resources?: {
    resource?: [ 
    {
      createDate?: string(name='CreateDate'),
      regionId?: string(name='RegionId'),
      resourceGroupId?: string(name='ResourceGroupId'),
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      service?: string(name='Service'),
    }
  ](name='Resource')
  }(name='Resources'),
  totalCount?: int32(name='TotalCount'),
}

model ListResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListResourcesResponseBody(name='body'),
}

async function listResources(request: ListResourcesRequest): ListResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListResources', 'POST', '/', 'json', false, 'json', request);
}

model ListRolesRequest {
  language?: string(name='Language', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model ListRolesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  roles?: {
    role?: [ 
    {
      arn?: string(name='Arn'),
      createDate?: string(name='CreateDate'),
      description?: string(name='Description'),
      isServiceLinkedRole?: boolean(name='IsServiceLinkedRole'),
      latestDeletionTask?: {
        createDate?: string(name='CreateDate'),
        deletionTaskId?: string(name='DeletionTaskId'),
      }(name='LatestDeletionTask'),
      maxSessionDuration?: long(name='MaxSessionDuration'),
      roleId?: string(name='RoleId'),
      roleName?: string(name='RoleName'),
      rolePrincipalName?: string(name='RolePrincipalName'),
      updateDate?: string(name='UpdateDate'),
    }
  ](name='Role')
  }(name='Roles'),
  totalCount?: int32(name='TotalCount'),
}

model ListRolesResponse = {
  headers: map[string]string(name='headers'),
  body: ListRolesResponseBody(name='body'),
}

async function listRoles(request: ListRolesRequest): ListRolesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRoles', 'POST', '/', 'json', false, 'json', request);
}

model ListTargetAttachmentsForControlPolicyRequest {
  pageNumber?: int32(name='PageNumber', minimum=1, maximum=200000, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  policyId: string(name='PolicyId', position='Query'),
}

model ListTargetAttachmentsForControlPolicyResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  targetAttachments?: {
    targetAttachment?: [ 
    {
      attachDate?: string(name='AttachDate'),
      targetId?: string(name='TargetId'),
      targetName?: string(name='TargetName'),
      targetType?: string(name='TargetType'),
    }
  ](name='TargetAttachment')
  }(name='TargetAttachments'),
  totalCount?: int32(name='TotalCount'),
}

model ListTargetAttachmentsForControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ListTargetAttachmentsForControlPolicyResponseBody(name='body'),
}

async function listTargetAttachmentsForControlPolicy(request: ListTargetAttachmentsForControlPolicyRequest): ListTargetAttachmentsForControlPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTargetAttachmentsForControlPolicy', 'POST', '/', 'json', false, 'json', request);
}

model ListTrustedServiceStatusRequest {
  adminAccountId?: string(name='AdminAccountId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model ListTrustedServiceStatusResponseBody = {
  enabledServicePrincipals?: {
    enabledServicePrincipal?: [ 
    {
      enableTime?: string(name='EnableTime'),
      servicePrincipal?: string(name='ServicePrincipal'),
    }
  ](name='EnabledServicePrincipal')
  }(name='EnabledServicePrincipals'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListTrustedServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ListTrustedServiceStatusResponseBody(name='body'),
}

async function listTrustedServiceStatus(request: ListTrustedServiceStatusRequest): ListTrustedServiceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTrustedServiceStatus', 'POST', '/', 'json', false, 'json', request);
}

model MoveAccountRequest {
  accountId: string(name='AccountId', position='Query'),
  destinationFolderId: string(name='DestinationFolderId', position='Query'),
}

model MoveAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model MoveAccountResponse = {
  headers: map[string]string(name='headers'),
  body: MoveAccountResponseBody(name='body'),
}

async function moveAccount(request: MoveAccountRequest): MoveAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MoveAccount', 'POST', '/', 'json', false, 'json', request);
}

model MoveResourcesRequest {
  resourceGroupId: string(name='ResourceGroupId', position='Query'),
  resources: [ 
    {
      regionId?: string(name='RegionId'),
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      service?: string(name='Service'),
    }
  ](name='Resources', position='Query'),
}

model MoveResourcesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  responses?: [ 
    {
      errorCode?: string(name='ErrorCode'),
      errorMsg?: string(name='ErrorMsg'),
      regionId?: string(name='RegionId'),
      requestId?: string(name='RequestId'),
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      service?: string(name='Service'),
      status?: string(name='Status'),
    }
  ](name='Responses'),
}

model MoveResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: MoveResourcesResponseBody(name='body'),
}

async function moveResources(request: MoveResourcesRequest): MoveResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MoveResources', 'POST', '/', 'json', false, 'json', request);
}

model PromoteResourceAccountRequest {
  accountId: string(name='AccountId', position='Query'),
  email: string(name='Email', position='Query'),
}

model PromoteResourceAccountResponseBody = {
  account?: {
    accountId?: string(name='AccountId'),
    accountName?: string(name='AccountName'),
    displayName?: string(name='DisplayName'),
    folderId?: string(name='FolderId'),
    joinMethod?: string(name='JoinMethod'),
    joinTime?: string(name='JoinTime'),
    modifyTime?: string(name='ModifyTime'),
    recordId?: string(name='RecordId'),
    resourceDirectoryId?: string(name='ResourceDirectoryId'),
    status?: string(name='Status'),
    type?: string(name='Type'),
  }(name='Account'),
  requestId?: string(name='RequestId'),
}

model PromoteResourceAccountResponse = {
  headers: map[string]string(name='headers'),
  body: PromoteResourceAccountResponseBody(name='body'),
}

async function promoteResourceAccount(request: PromoteResourceAccountRequest): PromoteResourceAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PromoteResourceAccount', 'POST', '/', 'json', false, 'json', request);
}

model RegisterDelegatedAdministratorRequest {
  accountId: string(name='AccountId', position='Query'),
  servicePrincipal: string(name='ServicePrincipal', position='Query'),
}

model RegisterDelegatedAdministratorResponseBody = {
  requestId?: string(name='RequestId'),
}

model RegisterDelegatedAdministratorResponse = {
  headers: map[string]string(name='headers'),
  body: RegisterDelegatedAdministratorResponseBody(name='body'),
}

async function registerDelegatedAdministrator(request: RegisterDelegatedAdministratorRequest): RegisterDelegatedAdministratorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RegisterDelegatedAdministrator', 'POST', '/', 'json', false, 'json', request);
}

model RemoveCloudAccountRequest {
  accountId: string(name='AccountId', position='Query'),
}

model RemoveCloudAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveCloudAccountResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveCloudAccountResponseBody(name='body'),
}

async function removeCloudAccount(request: RemoveCloudAccountRequest): RemoveCloudAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveCloudAccount', 'POST', '/', 'json', false, 'json', request);
}

model ResendCreateCloudAccountEmailRequest {
  recordId: string(name='RecordId', position='Query'),
}

model ResendCreateCloudAccountEmailResponseBody = {
  account?: {
    accountId?: string(name='AccountId'),
    accountName?: string(name='AccountName'),
    displayName?: string(name='DisplayName'),
    folderId?: string(name='FolderId'),
    joinMethod?: string(name='JoinMethod'),
    joinTime?: string(name='JoinTime'),
    modifyTime?: string(name='ModifyTime'),
    recordId?: string(name='RecordId'),
    resourceDirectoryId?: string(name='ResourceDirectoryId'),
    status?: string(name='Status'),
    type?: string(name='Type'),
  }(name='Account'),
  requestId?: string(name='RequestId'),
}

model ResendCreateCloudAccountEmailResponse = {
  headers: map[string]string(name='headers'),
  body: ResendCreateCloudAccountEmailResponseBody(name='body'),
}

async function resendCreateCloudAccountEmail(request: ResendCreateCloudAccountEmailRequest): ResendCreateCloudAccountEmailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResendCreateCloudAccountEmail', 'POST', '/', 'json', false, 'json', request);
}

model ResendPromoteResourceAccountEmailRequest {
  recordId: string(name='RecordId', position='Query'),
}

model ResendPromoteResourceAccountEmailResponseBody = {
  account?: {
    accountId?: string(name='AccountId'),
    accountName?: string(name='AccountName'),
    displayName?: string(name='DisplayName'),
    folderId?: string(name='FolderId'),
    joinMethod?: string(name='JoinMethod'),
    joinTime?: string(name='JoinTime'),
    modifyTime?: string(name='ModifyTime'),
    recordId?: string(name='RecordId'),
    resourceDirectoryId?: string(name='ResourceDirectoryId'),
    status?: string(name='Status'),
    type?: string(name='Type'),
  }(name='Account'),
  requestId?: string(name='RequestId'),
}

model ResendPromoteResourceAccountEmailResponse = {
  headers: map[string]string(name='headers'),
  body: ResendPromoteResourceAccountEmailResponseBody(name='body'),
}

async function resendPromoteResourceAccountEmail(request: ResendPromoteResourceAccountEmailRequest): ResendPromoteResourceAccountEmailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResendPromoteResourceAccountEmail', 'POST', '/', 'json', false, 'json', request);
}

model SendVerificationCodeForBindSecureMobilePhoneRequest {
  accountId: string(name='AccountId', position='Query'),
  secureMobilePhone: string(name='SecureMobilePhone', position='Query'),
}

model SendVerificationCodeForBindSecureMobilePhoneResponseBody = {
  expirationDate?: string(name='ExpirationDate'),
  requestId?: string(name='RequestId'),
}

model SendVerificationCodeForBindSecureMobilePhoneResponse = {
  headers: map[string]string(name='headers'),
  body: SendVerificationCodeForBindSecureMobilePhoneResponseBody(name='body'),
}

async function sendVerificationCodeForBindSecureMobilePhone(request: SendVerificationCodeForBindSecureMobilePhoneRequest): SendVerificationCodeForBindSecureMobilePhoneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendVerificationCodeForBindSecureMobilePhone', 'POST', '/', 'json', false, 'json', request);
}

model SendVerificationCodeForEnableRDRequest {
  secureMobilePhone?: string(name='SecureMobilePhone', position='Query'),
}

model SendVerificationCodeForEnableRDResponseBody = {
  requestId?: string(name='RequestId'),
}

model SendVerificationCodeForEnableRDResponse = {
  headers: map[string]string(name='headers'),
  body: SendVerificationCodeForEnableRDResponseBody(name='body'),
}

async function sendVerificationCodeForEnableRD(request: SendVerificationCodeForEnableRDRequest): SendVerificationCodeForEnableRDResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendVerificationCodeForEnableRD', 'POST', '/', 'json', false, 'json', request);
}

model SetDefaultPolicyVersionRequest {
  policyName: string(name='PolicyName', position='Query'),
  versionId: string(name='VersionId', position='Query'),
}

model SetDefaultPolicyVersionResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetDefaultPolicyVersionResponse = {
  headers: map[string]string(name='headers'),
  body: SetDefaultPolicyVersionResponseBody(name='body'),
}

async function setDefaultPolicyVersion(request: SetDefaultPolicyVersionRequest): SetDefaultPolicyVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDefaultPolicyVersion', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAccountRequest {
  accountId: string(name='AccountId', position='Query'),
  newAccountType?: string(name='NewAccountType', position='Query'),
  newDisplayName?: string(name='NewDisplayName', position='Query'),
}

model UpdateAccountResponseBody = {
  account?: {
    accountId?: string(name='AccountId'),
    accountName?: string(name='AccountName'),
    displayName?: string(name='DisplayName'),
    folderId?: string(name='FolderId'),
    joinMethod?: string(name='JoinMethod'),
    joinTime?: string(name='JoinTime'),
    modifyTime?: string(name='ModifyTime'),
    resourceDirectoryId?: string(name='ResourceDirectoryId'),
    status?: string(name='Status'),
    type?: string(name='Type'),
  }(name='Account'),
  requestId?: string(name='RequestId'),
}

model UpdateAccountResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAccountResponseBody(name='body'),
}

async function updateAccount(request: UpdateAccountRequest): UpdateAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAccount', 'POST', '/', 'json', false, 'json', request);
}

model UpdateControlPolicyRequest {
  newDescription?: string(name='NewDescription', position='Query'),
  newPolicyDocument?: string(name='NewPolicyDocument', position='Query'),
  newPolicyName?: string(name='NewPolicyName', position='Query'),
  policyId: string(name='PolicyId', position='Query'),
}

model UpdateControlPolicyResponseBody = {
  controlPolicy?: {
    attachmentCount?: string(name='AttachmentCount'),
    createDate?: string(name='CreateDate'),
    description?: string(name='Description'),
    effectScope?: string(name='EffectScope'),
    policyId?: string(name='PolicyId'),
    policyName?: string(name='PolicyName'),
    policyType?: string(name='PolicyType'),
    updateDate?: string(name='UpdateDate'),
  }(name='ControlPolicy'),
  requestId?: string(name='RequestId'),
}

model UpdateControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateControlPolicyResponseBody(name='body'),
}

async function updateControlPolicy(request: UpdateControlPolicyRequest): UpdateControlPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateControlPolicy', 'POST', '/', 'json', false, 'json', request);
}

model UpdateFolderRequest {
  folderId: string(name='FolderId', position='Query'),
  newFolderName: string(name='NewFolderName', position='Query'),
}

model UpdateFolderResponseBody = {
  folder?: {
    createTime?: string(name='CreateTime'),
    folderId?: string(name='FolderId'),
    folderName?: string(name='FolderName'),
    parentFolderId?: string(name='ParentFolderId'),
  }(name='Folder'),
  requestId?: string(name='RequestId'),
}

model UpdateFolderResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateFolderResponseBody(name='body'),
}

async function updateFolder(request: UpdateFolderRequest): UpdateFolderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateFolder', 'POST', '/', 'json', false, 'json', request);
}

model UpdateResourceGroupRequest {
  newDisplayName: string(name='NewDisplayName', position='Query'),
  resourceGroupId: string(name='ResourceGroupId', position='Query'),
}

model UpdateResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
  resourceGroup?: {
    accountId?: string(name='AccountId'),
    createDate?: string(name='CreateDate'),
    displayName?: string(name='DisplayName'),
    id?: string(name='Id'),
    name?: string(name='Name'),
  }(name='ResourceGroup'),
}

model UpdateResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateResourceGroupResponseBody(name='body'),
}

async function updateResourceGroup(request: UpdateResourceGroupRequest): UpdateResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model UpdateRoleRequest {
  newAssumeRolePolicyDocument?: string(name='NewAssumeRolePolicyDocument', position='Query'),
  newDescription?: string(name='NewDescription', position='Query'),
  newMaxSessionDuration?: long(name='NewMaxSessionDuration', position='Query'),
  roleName: string(name='RoleName', position='Query'),
}

model UpdateRoleResponseBody = {
  requestId?: string(name='RequestId'),
  role?: {
    arn?: string(name='Arn'),
    assumeRolePolicyDocument?: string(name='AssumeRolePolicyDocument'),
    createDate?: string(name='CreateDate'),
    description?: string(name='Description'),
    maxSessionDuration?: long(name='MaxSessionDuration'),
    roleId?: string(name='RoleId'),
    roleName?: string(name='RoleName'),
    rolePrincipalName?: string(name='RolePrincipalName'),
    updateDate?: string(name='UpdateDate'),
  }(name='Role'),
}

model UpdateRoleResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateRoleResponseBody(name='body'),
}

async function updateRole(request: UpdateRoleRequest): UpdateRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateRole', 'POST', '/', 'json', false, 'json', request);
}

