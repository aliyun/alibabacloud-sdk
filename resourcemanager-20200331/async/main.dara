/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'ResourceManager';
  @version = '2020-03-31';
  @endpointRule = 'central';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AcceptHandshakeRequest {
  handshakeId: string(name='HandshakeId', description='The ID of the invitation.

You can call the [ListHandshakesForAccount](https://help.aliyun.com/document_detail/160006.html) operation to obtain the ID.

This parameter is required.', example='h-Ih8IuPfvV0t0****', position='Query'),
}

model AcceptHandshakeResponseBody = {
  handshake?: {
    createTime?: string(name='CreateTime', description='The time when the invitation was created. The time is displayed in UTC.', example='2021-01-06T02:15:40Z'),
    expireTime?: string(name='ExpireTime', description='The time when the invitation expires. The time is displayed in UTC.', example='2021-01-20T02:15:40Z'),
    handshakeId?: string(name='HandshakeId', description='The ID of the invitation.', example='h-Ih8IuPfvV0t0****'),
    masterAccountId?: string(name='MasterAccountId', description='The ID of the management account of the resource directory.', example='151266687691****'),
    masterAccountName?: string(name='MasterAccountName', description='The name of the management account of the resource directory.', example='CompanyA'),
    modifyTime?: string(name='ModifyTime', description='The time when the invitation was modified. The time is displayed in UTC.', example='2021-01-06T02:16:40Z'),
    note?: string(name='Note', description='The comment on the invitation.', example='Welcome'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', description='The ID of the resource directory.', example='rd-3G****'),
    status?: string(name='Status', description='The status of the invitation. Valid values:

*   Pending: The invitation is waiting for confirmation.
*   Accepted: The invitation is accepted.
*   Cancelled: The invitation is canceled.
*   Declined: The invitation is rejected.
*   Expired: The invitation expires.', example='Accepted'),
    targetEntity?: string(name='TargetEntity', description='The ID or logon email address of the invited Alibaba Cloud account.', example='177242285274****'),
    targetType?: string(name='TargetType', description='The type of the invited Alibaba Cloud account. Valid values:

*   Account: indicates the ID of the Alibaba Cloud account.
*   Email: indicates the logon email address of the Alibaba Cloud account.', example='Account'),
  }(name='Handshake', description='The information of the invitation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5828C836-3286-49A6-9006-15231BB19342'),
}

model AcceptHandshakeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AcceptHandshakeResponseBody(name='body'),
}

/**
  * @description After an invited Alibaba Cloud account joins a resource directory, it becomes a member of the resource directory. By default, the name of the invited Alibaba Cloud account is used as the display name of the account in the resource directory.
  * This topic provides an example on how to call the API operation to accept the invitation `h-Ih8IuPfvV0t0****` that is initiated to invite the Alibaba Cloud account `177242285274****` to join the resource directory `rd-3G****`.
  * @param request  the request parameters of AcceptHandshake  AcceptHandshakeRequest
  * @return AcceptHandshakeResponse
 */
async function acceptHandshake(request: AcceptHandshakeRequest): AcceptHandshakeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AcceptHandshake', 'POST', '/', 'json', false, 'json', request);
}

model AttachControlPolicyRequest {
  policyId: string(name='PolicyId', description='The ID of the access control policy.

This parameter is required.', example='cp-jExXAqIYkwHN****', position='Query'),
  targetId: string(name='TargetId', description='The ID of the object to which you want to attach the access control policy. Access control policies can be attached to the following objects:

*   Root folder
*   Subfolders of the Root folder
*   Members

This parameter is required.', example='fd-ZDNPiT****', position='Query'),
}

model AttachControlPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='95060F1D-6990-4645-8920-A81D1BBFE992'),
}

model AttachControlPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AttachControlPolicyResponseBody(name='body'),
}

/**
  * @description After you attach an access control policy, the operations performed on resources by using members are limited by the policy. Make sure that the attached policy meets your expectations. Otherwise, your business may be affected.
  * By default, the system access control policy FullAliyunAccess is attached to each folder and member.
  * The access control policy that is attached to a folder also applies to all its subfolders and all members in the subfolders.
  * A maximum of 10 access control policies can be attached to a folder or member.
  * This topic provides an example on how to call the API operation to attach the custom access control policy `cp-jExXAqIYkwHN****` to the folder `fd-ZDNPiT****`.
  * @param request  the request parameters of AttachControlPolicy  AttachControlPolicyRequest
  * @return AttachControlPolicyResponse
 */
async function attachControlPolicy(request: AttachControlPolicyRequest): AttachControlPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachControlPolicy', 'POST', '/', 'json', false, 'json', request);
}

model AttachPolicyRequest {
  policyName: string(name='PolicyName', description='The name of the policy.

The name must be 1 to 128 characters in length and can contain letters, digits, and hyphens (-).

This parameter is required.', example='AdministratorAccess', position='Query'),
  policyType: string(name='PolicyType', description='The type of the policy. Valid values:

*   Custom: custom policy
*   System: system policy

This parameter is required.', example='System', position='Query'),
  principalName: string(name='PrincipalName', description='The name of the object to which you want to attach the policy.

*   If you want to attach the policy to a RAM user, specify the name in the \\<UserName>@\\<AccountAlias>.onaliyun.com format. \\<UserName> indicates the name of the RAM user, and \\<AccountAlias> indicates the alias of the Alibaba Cloud account to which the RAM user belongs.
*   If you want to attach the policy to a RAM user group, specify the name in the \\<GroupName>@group.\\<AccountAlias>.onaliyun.com format. \\<GroupName> indicates the name of the RAM user group, and \\<AccountAlias> indicates the alias of the Alibaba Cloud account to which the RAM user group belongs.
*   If you want to attach the policy to a RAM role, specify the name in the \\<RoleName>@role.\\<AccountAlias>.onaliyun.com format. \\<RoleName> indicates the name of the RAM role, and \\<AccountAlias> indicates the alias of the Alibaba Cloud account to which the RAM role belongs.

>  The alias of an Alibaba Cloud account is a part of the default domain name. You can call the [GetDefaultDomain](https://help.aliyun.com/document_detail/186720.html) operation to obtain the alias of an Alibaba Cloud account.

This parameter is required.', example='alice@demo.onaliyun.com', position='Query'),
  principalType: string(name='PrincipalType', description='The type of the object to which you want to attach the policy. Valid values:

*   IMSUser: RAM user
*   IMSGroup: RAM user group
*   ServiceRole: RAM role

This parameter is required.', example='IMSUser', position='Query'),
  resourceGroupId: string(name='ResourceGroupId', description='The effective scope of the policy. You can set this parameter to one of the following items:

*   ID of a resource group: indicates that the policy takes effect for the resources in the resource group.
*   ID of the Alibaba Cloud account to which the authorized object belongs: indicates that the policy takes effect for the resources within the Alibaba Cloud account.

This parameter is required.', example='rg-9gLOoK****', position='Query'),
}

model AttachPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='697852FB-50D7-44D9-9774-530C31EAC572'),
}

model AttachPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AttachPolicyResponseBody(name='body'),
}

/**
  * @description In this example, the policy `AdministratorAccess` is attached to the RAM user `alice@demo.onaliyun.com` and takes effect only for resources in the `rg-9gLOoK****` resource group.
  * @param request  the request parameters of AttachPolicy  AttachPolicyRequest
  * @return AttachPolicyResponse
 */
async function attachPolicy(request: AttachPolicyRequest): AttachPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachPolicy', 'POST', '/', 'json', false, 'json', request);
}

model BindSecureMobilePhoneRequest {
  accountId: string(name='AccountId', description='The Alibaba Cloud account ID of the member.

This parameter is required.', example='138660628348****', position='Query'),
  secureMobilePhone: string(name='SecureMobilePhone', description='The mobile phone number that you want to bind to the member for security purposes.

The mobile phone number you specify must be the same as the mobile phone number that you specify when you call the [SendVerificationCodeForBindSecureMobilePhone](https://help.aliyun.com/document_detail/372556.html) operation to obtain a verification code.

Specify the mobile phone number in the \\<Country code>-\\<Mobile phone number> format.

>  Mobile phone numbers in the `86-<Mobile phone number>` format in the Chinese mainland are not supported.

This parameter is required.', example='xx-13900001234', position='Query'),
  verificationCode: string(name='VerificationCode', description='The verification code.

You can call the [SendVerificationCodeForBindSecureMobilePhone](https://help.aliyun.com/document_detail/372556.html) operation to obtain the verification code.

This parameter is required.', example='123456', position='Query'),
}

model BindSecureMobilePhoneResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0217AFEB-5318-56D4-B167-1933D83EDF3F'),
}

model BindSecureMobilePhoneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BindSecureMobilePhoneResponseBody(name='body'),
}

/**
  * @description You can call this API operation only to bind a mobile phone number to a member of the resource account type. You cannot call this API operation to change the mobile phone number that is bound to a member of the resource account type.
  * To ensure that the system can record the operators of management operations, you must use a RAM user or RAM role to which the AliyunResourceDirectoryFullAccess policy is attached within the management account of your resource directory to call this API operation.
  * This topic provides an example on how to call the API operation to bind a mobile phone number to the member `138660628348****` for security purposes.
  * @param request  the request parameters of BindSecureMobilePhone  BindSecureMobilePhoneRequest
  * @return BindSecureMobilePhoneResponse
 */
async function bindSecureMobilePhone(request: BindSecureMobilePhoneRequest): BindSecureMobilePhoneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindSecureMobilePhone', 'POST', '/', 'json', false, 'json', request);
}

model CancelChangeAccountEmailRequest {
  accountId: string(name='AccountId', description='The Alibaba Cloud account ID of the member.

This parameter is required.', example='181761095690****', position='Query'),
}

model CancelChangeAccountEmailResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model CancelChangeAccountEmailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelChangeAccountEmailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CancelChangeAccountEmail  CancelChangeAccountEmailRequest
  * @return CancelChangeAccountEmailResponse
 */
async function cancelChangeAccountEmail(request: CancelChangeAccountEmailRequest): CancelChangeAccountEmailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelChangeAccountEmail', 'POST', '/', 'json', false, 'json', request);
}

model CancelCreateCloudAccountRequest {
  recordId: string(name='RecordId', description='The account record ID.

This parameter is required.', example='06950264-3f0d-4ca9-82dd-6ee7a3d33d6b', position='Query'),
}

model CancelCreateCloudAccountResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model CancelCreateCloudAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelCreateCloudAccountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CancelCreateCloudAccount  CancelCreateCloudAccountRequest
  * @return CancelCreateCloudAccountResponse
 */
async function cancelCreateCloudAccount(request: CancelCreateCloudAccountRequest): CancelCreateCloudAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelCreateCloudAccount', 'POST', '/', 'json', false, 'json', request);
}

model CancelHandshakeRequest {
  handshakeId: string(name='HandshakeId', description='The ID of the invitation.

This parameter is required.', example='h-ycm4rp****', position='Query'),
}

model CancelHandshakeResponseBody = {
  handshake?: {
    createTime?: string(name='CreateTime', description='The time when the invitation was created. The time is displayed in UTC.', example='2018-08-10T09:55:41Z'),
    expireTime?: string(name='ExpireTime', description='The time when the invitation expires. The time is displayed in UTC.', example='2018-08-24T09:55:41Z'),
    handshakeId?: string(name='HandshakeId', description='The ID of the invitation.', example='h-ycm4rp****'),
    masterAccountId?: string(name='MasterAccountId', description='The ID of the management account of the resource directory.', example='172841235500****'),
    masterAccountName?: string(name='MasterAccountName', description='The name of the management account of the resource directory.', example='Alice'),
    modifyTime?: string(name='ModifyTime', description='The time when the invitation was modified. The time is displayed in UTC.', example='2018-08-10T09:55:41Z'),
    note?: string(name='Note', description='The comment on the invitation.', example='Welcome'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', description='The ID of the resource directory.', example='h-ycm4rp****'),
    status?: string(name='Status', description='The status of the invitation. Valid values:

*   Pending: The invitation is waiting for confirmation.
*   Accepted: The invitation is accepted.
*   Cancelled: The invitation is canceled.
*   Declined: The invitation is rejected.
*   Expired: The invitation expires.', example='Cancelled'),
    targetEntity?: string(name='TargetEntity', description='The ID or logon email address of the invited account.', example='someone@example.com'),
    targetType?: string(name='TargetType', description='The type of the invited account. Valid values:

*   Account: indicates the ID of the account.
*   Email: indicates the logon email address of the account.', example='Email'),
  }(name='Handshake', description='The information of the invitation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model CancelHandshakeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelHandshakeResponseBody(name='body'),
}

/**
  * @description This topic provides an example on how to call the API operation to cancel the invitation whose ID is `h-ycm4rp****`.
  * @param request  the request parameters of CancelHandshake  CancelHandshakeRequest
  * @return CancelHandshakeResponse
 */
async function cancelHandshake(request: CancelHandshakeRequest): CancelHandshakeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelHandshake', 'POST', '/', 'json', false, 'json', request);
}

model CancelPromoteResourceAccountRequest {
  recordId: string(name='RecordId', description='The account record ID.

This parameter is required.', example='06950264-3f0d-4ca9-82dd-6ee7a3d33d6b', position='Query'),
}

model CancelPromoteResourceAccountResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model CancelPromoteResourceAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelPromoteResourceAccountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CancelPromoteResourceAccount  CancelPromoteResourceAccountRequest
  * @return CancelPromoteResourceAccountResponse
 */
async function cancelPromoteResourceAccount(request: CancelPromoteResourceAccountRequest): CancelPromoteResourceAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelPromoteResourceAccount', 'POST', '/', 'json', false, 'json', request);
}

model ChangeAccountEmailRequest {
  accountId: string(name='AccountId', description='The Alibaba Cloud account ID of the member.

This parameter is required.', example='181761095690****', position='Query'),
  email: string(name='Email', description='The email address to be bound to the member.

>  The system automatically sends a verification email to the email address. After the verification is passed, the email address takes effect, and the system changes both the logon email address and secure email address of the member.

This parameter is required.', example='someone@example.com', position='Query'),
}

model ChangeAccountEmailResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model ChangeAccountEmailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeAccountEmailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ChangeAccountEmail  ChangeAccountEmailRequest
  * @return ChangeAccountEmailResponse
 */
async function changeAccountEmail(request: ChangeAccountEmailRequest): ChangeAccountEmailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeAccountEmail', 'POST', '/', 'json', false, 'json', request);
}

model CheckAccountDeleteRequest {
  accountId: string(name='AccountId', description='The ID of the member that you want to delete.

This parameter is required.', example='179855839641****', position='Query'),
}

model CheckAccountDeleteResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='7CDDDCEF-CDFD-0825-B7D7-217BE0897B22'),
}

model CheckAccountDeleteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckAccountDeleteResponseBody(name='body'),
}

/**
  * @description Before you delete a member, you must call this API operation to check whether the member can be deleted.
  * This topic provides an example on how to call the API operation to perform a deletion check on the member whose ID is `179855839641****`.
  * @param request  the request parameters of CheckAccountDelete  CheckAccountDeleteRequest
  * @return CheckAccountDeleteResponse
 */
async function checkAccountDelete(request: CheckAccountDeleteRequest): CheckAccountDeleteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckAccountDelete', 'POST', '/', 'json', false, 'json', request);
}

model CreateAutoGroupingRuleRequest {
  excludeRegionIdsScope?: string(name='ExcludeRegionIdsScope', description='The IDs of regions to be excluded. Separate multiple IDs with commas (,).', example='cn-beijing,cn-guangzhou', maxLength=2000, position='Query'),
  excludeResourceGroupIdsScope?: string(name='ExcludeResourceGroupIdsScope', description='The IDs of resource groups to be excluded. Separate multiple IDs with commas (,).', example='rg-aekz******zj2oi,rg-aekz******r62ua', maxLength=8000, position='Query'),
  excludeResourceIdsScope?: string(name='ExcludeResourceIdsScope', description='The IDs of resources to be excluded. Separate multiple IDs with commas (,).', example='pc-uf6p******4h784y,rmq-cn-******ny0y', maxLength=5000, position='Query'),
  excludeResourceTypesScope?: string(name='ExcludeResourceTypesScope', description='The resource types to be excluded. Separate multiple resource types with commas (,).', example='mse.cluster,slb.loadbalancer', maxLength=2000, position='Query'),
  regionIdsScope?: string(name='RegionIdsScope', description='The IDs of regions. Separate multiple IDs with commas (,).', example='cn-hangzhou,cn-shanghai', maxLength=2000, position='Query'),
  resourceGroupIdsScope?: string(name='ResourceGroupIdsScope', description='The IDs of resource groups. Separate multiple IDs with commas (,).', example='rg-aekz******4b5ea,rg-aek2******fxykq', maxLength=8000, position='Query'),
  resourceIdsScope?: string(name='ResourceIdsScope', description='The IDs of resources. Separate multiple IDs with commas (,).', example='i-2zee******ym49kfmwis,vpc-5ts6******fnw493g849a', maxLength=5000, position='Query'),
  resourceTypesScope?: string(name='ResourceTypesScope', description='The resource types. Separate multiple resource types with commas (,).', example='rds.dbinstance,oss.bucket', maxLength=2000, position='Query'),
  ruleContents: [ 
    {
      autoGroupingScopeCondition?: string(name='AutoGroupingScopeCondition', description='The condition for the range of resources to be automatically transferred.', example='{"children":[{"desired":"{\\"env\\":\\"online\\", \\"project\\":\\"A\\"}","featurePath":"$.tags","featureSource":"RESOURCE","operator":"TagMatchAll"}],"operator":"and"}', maxLength=50000),
      targetResourceGroupCondition: string(name='TargetResourceGroupCondition', description='The condition for the destination resource group.

This parameter is required.', example='{"children":[{"desired":"rg-aek2********qcy","featurePath":"$.resourceGroupId","featureSource":"RESOURCE","operator":"StringEquals"}],"operator":"and"}', maxLength=255),
    }
  ](name='RuleContents', description='The content records of the rule.

This parameter is required.', position='Query'),
  ruleDesc?: string(name='RuleDesc', description='The description of the rule.', example='Transfer resources to which the {"env": "online"} and {"project": "A"} tags are added to the resource group rg-aek2********qcy.', maxLength=512, position='Query'),
  ruleName: string(name='RuleName', description='The name of the rule.

This parameter is required.', example='Custom Transfer Rule for Online Resources of Project A', maxLength=128, position='Query'),
  ruleType: string(name='RuleType', description='The type of the rule. Valid values:

*   custom_condition: custom transfer rule
*   associated_transfer: transfer rule for associated resources

This parameter is required.', example='custom_condition', position='Query'),
}

model CreateAutoGroupingRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='F7701451-340B-5CB3-AEA7-7D831F7F38C0'),
  ruleId?: string(name='RuleId', description='The ID of the rule.', example='gr-acfo******hy6a'),
}

model CreateAutoGroupingRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAutoGroupingRuleResponseBody(name='body'),
}

/**
  * @description You can create up to 10 custom transfer rules. Each custom transfer rule can contain up to 10 content records.
  * @param request  the request parameters of CreateAutoGroupingRule  CreateAutoGroupingRuleRequest
  * @return CreateAutoGroupingRuleResponse
 */
async function createAutoGroupingRule(request: CreateAutoGroupingRuleRequest): CreateAutoGroupingRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAutoGroupingRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateCloudAccountRequest {
  displayName: string(name='DisplayName', description='The display name of the member account.

The name must be 2 to 50 characters in length and can contain letters, digits, underscores (_), periods (.), and hyphens (-).

The name must be unique in the current resource directory.

This parameter is required.', example='admin-****', position='Query'),
  email: string(name='Email', description='The email address used to log on to the cloud account.

This parameter is required.', example='someone@example.com', position='Query'),
  parentFolderId?: string(name='ParentFolderId', description='The ID of the parent folder.', example='fd-bVaRIG****', position='Query'),
  payerAccountId?: string(name='PayerAccountId', description='The ID of the settlement account. If you do not specify this parameter, the current account is used for settlement.', example='12323344****', position='Query'),
}

model CreateCloudAccountResponseBody = {
  account?: {
    accountId?: string(name='AccountId', description='The ID of the member account.', example='12323344****'),
    accountName?: string(name='AccountName', description='The name of the member account.', example='someone@example.com'),
    displayName?: string(name='DisplayName', description='The display name of the member account.', example='admin-****'),
    folderId?: string(name='FolderId', description='The ID of the folder.', example='fd-bVaRIG****'),
    joinMethod?: string(name='JoinMethod', description='The way in which the member account joined the resource directory. Valid values:

*   invited: The member account is invited to join the resource directory.
*   created: The member account is directly created in the resource directory.', example='created'),
    modifyTime?: string(name='ModifyTime', description='The time when the member account was modified.', example='2015-01-23T12:33:18Z'),
    recordId?: string(name='RecordId', description='The account record ID.', example='06950264-3f0d-4ca9-82dd-6ee7a3d3****'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', description='The ID of the resource directory.', example='rd-k3****'),
    status?: string(name='Status', description='The status of the member account. Valid values:

*   CreateSuccess: The member account is created.
*   CreateVerifying: The creation of the member account is under confirmation.
*   CreateFailed: The member account failed to be created.
*   CreateExpired: The creation of the member account expired.
*   CreateCancelled: The creation of the member account is canceled.
*   PromoteVerifying: The upgrade of the member account is under confirmation.
*   PromoteFailed: The member account failed to be upgraded.
*   PromoteExpired: The upgrade of the member account expired.
*   PromoteCancelled: The upgrade of the member account is canceled.
*   PromoteSuccess: The member account is upgraded.
*   InviteSuccess: The owner of the member account accepted the invitation.
*   Removed: The member account is removed from the resource directory.', example='CreateVerifying'),
    type?: string(name='Type', description='The type of the member account. The value CloudAccount indicates that the member account is a cloud account.', example='CloudAccount'),
  }(name='Account', description='The information of the member account.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model CreateCloudAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCloudAccountResponseBody(name='body'),
}

/**
  * @description A resource directory supports two types of member accounts: resource accounts and cloud accounts.
  * *   Resource account (recommended): A resource account is only used as a resource container and fully depends on a resource directory. Such member accounts are secure and easy-to-create. For more information about how to create a resource account, see [CreateResourceAccount](https://help.aliyun.com/document_detail/159392.html).
  * >  A resource account can be upgraded to a cloud account. For more information, see [PromoteResourceAccount](https://help.aliyun.com/document_detail/159395.html) .
  * *   Cloud account: A cloud account has all the features of an Alibaba Cloud account, including root permissions.
  * @param request  the request parameters of CreateCloudAccount  CreateCloudAccountRequest
  * @return CreateCloudAccountResponse
 */
async function createCloudAccount(request: CreateCloudAccountRequest): CreateCloudAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCloudAccount', 'POST', '/', 'json', false, 'json', request);
}

model CreateControlPolicyRequest {
  description?: string(name='Description', description='The description of the access control policy.

The description must be 1 to 1,024 characters in length. The description can contain letters, digits, underscores (_), and hyphens (-) and must start with a letter.', example='ExampleControlPolicy', position='Query'),
  effectScope: string(name='EffectScope', description='The effective scope of the access control policy.

The value RAM indicates that the access control policy takes effect only for RAM users and RAM roles.

This parameter is required.', example='RAM', position='Query'),
  policyDocument: string(name='PolicyDocument', description='The document of the access control policy.

The document can be a maximum of 4,096 characters in length.

For more information about the languages of access control policies, see [Languages of access control policies](https://help.aliyun.com/document_detail/179096.html).

For more information about the examples of access control policies, see [Examples of custom access control policies](https://help.aliyun.com/document_detail/181474.html).

This parameter is required.', example='{"Version":"1","Statement":[{"Effect":"Deny","Action":["ram:UpdateRole","ram:DeleteRole","ram:AttachPolicyToRole","ram:DetachPolicyFromRole"],"Resource":"acs:ram:*:*:role/ResourceDirectoryAccountAccessRole"}]}', position='Query'),
  policyName: string(name='PolicyName', description='The name of the access control policy.

The name must be 1 to 128 characters in length. The name can contain letters, digits, and hyphens (-) and must start with a letter.

This parameter is required.', example='ExampleControlPolicy', position='Query'),
}

model CreateControlPolicyResponseBody = {
  controlPolicy?: {
    attachmentCount?: string(name='AttachmentCount', description='The number of times that the access control policy is referenced.', example='0'),
    createDate?: string(name='CreateDate', description='The time when the access control policy was created.', example='2021-03-18T09:24:19Z'),
    description?: string(name='Description', description='The description of the access control policy.', example='ExampleControlPolicy'),
    effectScope?: string(name='EffectScope', description='The effective scope of the access control policy.

The value RAM indicates that the access control policy takes effect only for RAM users and RAM roles.', example='RAM'),
    policyId?: string(name='PolicyId', description='The ID of the access control policy.', example='cp-jExXAqIYkwHN****'),
    policyName?: string(name='PolicyName', description='The name of the access control policy.', example='ExampleControlPolicy'),
    policyType?: string(name='PolicyType', description='The type of the access control policy. Valid values:

*   System: system access control policy
*   Custom: custom access control policy', example='Custom'),
    updateDate?: string(name='UpdateDate', description='The time when the access control policy was updated.', example='2021-03-18T09:24:19Z'),
  }(name='ControlPolicy', description='The details of the access control policy.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='776B05B3-A0B0-464B-A191-F4E1119A94B2'),
}

model CreateControlPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateControlPolicyResponseBody(name='body'),
}

/**
  * @description This topic provides an example on how to call the API operation to create a custom access control policy named `ExampleControlPolicy`. This access control policy is used to prohibit modifications to the ResourceDirectoryAccountAccessRole role and the permissions of the role.
  * @param request  the request parameters of CreateControlPolicy  CreateControlPolicyRequest
  * @return CreateControlPolicyResponse
 */
async function createControlPolicy(request: CreateControlPolicyRequest): CreateControlPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateControlPolicy', 'POST', '/', 'json', false, 'json', request);
}

model CreateFolderRequest {
  folderName: string(name='FolderName', description='The name of the folder.

The name must be 1 to 24 characters in length and can contain letters, digits, underscores (_), periods (.),and hyphens (-).

This parameter is required.', example='rdFolder', position='Query'),
  parentFolderId?: string(name='ParentFolderId', description='The ID of the parent folder.', example='r-b1****', position='Query'),
}

model CreateFolderResponseBody = {
  folder?: {
    createTime?: string(name='CreateTime', description='The time when the folder was created.', example='2019-02-19T09:34:50.757Z'),
    folderId?: string(name='FolderId', description='The ID of the folder.', example='fd-u8B321****'),
    folderName?: string(name='FolderName', description='The name of the folder.', example='rdFolder'),
    parentFolderId?: string(name='ParentFolderId', description='The ID of the parent folder.', example='r-b1****'),
  }(name='Folder', description='The information of the folder.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C2CBCA30-C8DD-423E-B4AD-4FB694C9180C'),
}

model CreateFolderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFolderResponseBody(name='body'),
}

/**
  * @description >  A maximum of five levels of folders can be created under the root folder.
  * In this example, a folder named `rdFolder` is created under the root folder.
  * @param request  the request parameters of CreateFolder  CreateFolderRequest
  * @return CreateFolderResponse
 */
async function createFolder(request: CreateFolderRequest): CreateFolderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFolder', 'POST', '/', 'json', false, 'json', request);
}

model CreatePolicyRequest {
  description?: string(name='Description', description='The description of the policy.

The description must be 1 to 1,024 characters in length.', example='OSS administrator', position='Query'),
  policyDocument: string(name='PolicyDocument', description='The document of the policy.

The document must be 1 to 2,048 characters in length.

This parameter is required.', example='{ "Statement": [{ "Action": ["oss:*"], "Effect": "Allow", "Resource": ["acs:oss:*:*:*"]}], "Version": "1"}', position='Query'),
  policyName: string(name='PolicyName', description='The name of the policy.

The name must be 1 to 128 characters in length and can contain letters, digits, and hyphens (-).

This parameter is required.', example='OSS-Administrator', position='Query'),
}

model CreatePolicyResponseBody = {
  policy?: {
    createDate?: string(name='CreateDate', description='The time when the policy was created.', example='2015-01-23T12:33:18Z'),
    defaultVersion?: string(name='DefaultVersion', description='The version number of the policy. Default value: v1.', example='v1'),
    description?: string(name='Description', description='The description of the policy.', example='OSS administrator'),
    policyName?: string(name='PolicyName', description='The name of the policy.', example='OSS-Administrator'),
    policyType?: string(name='PolicyType', description='The type of the policy. Valid values:

*   Custom: custom policy
*   System: system policy', example='Custom'),
  }(name='Policy', description='The information of the policy.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model CreatePolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreatePolicy  CreatePolicyRequest
  * @return CreatePolicyResponse
 */
async function createPolicy(request: CreatePolicyRequest): CreatePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePolicy', 'POST', '/', 'json', false, 'json', request);
}

model CreatePolicyVersionRequest {
  policyDocument: string(name='PolicyDocument', description='The document of the policy.

The document must be 1 to 2,048 characters in length.

This parameter is required.', example='{ "Statement": [{ "Action": ["oss:*"], "Effect": "Allow", "Resource": ["acs:oss:*:*:*"]}], "Version": "1"}', position='Query'),
  policyName: string(name='PolicyName', description='The name of the policy.

The name must be 1 to 128 characters in length and can contain letters, digits, and hyphens (-).

This parameter is required.', example='OSS-Administrator', position='Query'),
  setAsDefault?: boolean(name='SetAsDefault', description='Specifies whether to set the policy version as the default version. Valid values:

*   false: The policy version is not set as the default version.
*   true: The policy version is set as the default version.

Default value: false.', example='false', position='Query'),
}

model CreatePolicyVersionResponseBody = {
  policyVersion?: {
    createDate?: string(name='CreateDate', description='The time when the policy version was created.', example='2015-01-23T12:33:18'),
    isDefaultVersion?: boolean(name='IsDefaultVersion', description='Indicates whether the policy version is the default version.', example='false'),
    versionId?: string(name='VersionId', description='The ID of the policy version.', example='v3'),
  }(name='PolicyVersion', description='The information of the policy version.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model CreatePolicyVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePolicyVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreatePolicyVersion  CreatePolicyVersionRequest
  * @return CreatePolicyVersionResponse
 */
async function createPolicyVersion(request: CreatePolicyVersionRequest): CreatePolicyVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePolicyVersion', 'POST', '/', 'json', false, 'json', request);
}

model CreateResourceAccountRequest {
  accountNamePrefix?: string(name='AccountNamePrefix', description='The prefix for the Alibaba Cloud account name of the member. If you leave this parameter empty, the system randomly generates a prefix.

The prefix must be 2 to 37 characters in length.

The prefix can contain letters, digits, and special characters but cannot contain consecutive special characters. The prefix must start with a letter or digit and end with a letter or digit. Valid special characters include underscores (`_`), periods (`.`), and hyphens (-).

The complete Alibaba Cloud account name of a member is in the @.aliyunid.com format, such as `alice@rd-3G****.aliyunid.com`.

Each name must be unique in the resource directory.', example='alice', position='Query'),
  displayName: string(name='DisplayName', description='The display name of the member.

The name must be 2 to 50 characters in length.

The name can contain letters, digits, underscores (_), periods (.), hyphens (-), and spaces.

The name must be unique in the resource directory.

This parameter is required.', example='Dev', position='Query'),
  parentFolderId?: string(name='ParentFolderId', description='The ID of the parent folder.', example='fd-r23M55****', position='Query'),
  payerAccountId?: string(name='PayerAccountId', description='The ID of the billing account. If you leave this parameter empty, the newly created member is used as its billing account.', example='12323344****', position='Query'),
  resellAccountType?: string(name='ResellAccountType', description='The identity type of the member. Valid values:

*   resell (default): The member is an account for a reseller. A relationship is automatically established between the member and the reseller. The management account of the resource directory must be used as the billing account of the member.
*   non_resell: The member is not an account for a reseller. The member is an account that is not associated with a reseller. You can directly use the account to purchase Alibaba Cloud resources. The member is used as its own billing account.

>  This parameter is available only for resellers at the international site (alibabacloud.com).', example='resell', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='k1'),
      value?: string(name='Value', description='The tag value.', example='v1'),
    }
  ](name='Tag', description='The tag of the member.', position='Query'),
}

model CreateResourceAccountResponseBody = {
  account?: {
    accountId?: string(name='AccountId', description='The ID of the member.', example='112730938585****'),
    accountName?: string(name='AccountName', description='The Alibaba Cloud account ID of the member.', example='alice@rd-3g****.aliyunid.com'),
    displayName?: string(name='DisplayName', description='The display name of the member.', example='Dev'),
    folderId?: string(name='FolderId', description='The ID of the folder.', example='fd-r23M55****'),
    joinMethod?: string(name='JoinMethod', description='The way in which the member joins the resource directory. Valid values:

*   invited: The member is invited to join the resource directory.
*   created: The member is directly created in the resource directory.', example='created'),
    joinTime?: string(name='JoinTime', description='The time when the member joined the resource directory. The time is displayed in UTC.', example='2020-12-31T03:37:39.456Z'),
    modifyTime?: string(name='ModifyTime', description='The time when the member was modified. The time is displayed in UTC.', example='2020-12-31T03:37:39.456Z'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', description='The ID of the resource directory.', example='rd-3G****'),
    status?: string(name='Status', description='The status of the member. The value CreateSuccess indicates that the member is created.', example='CreateSuccess'),
    type?: string(name='Type', description='The type of the member. The value ResourceAccount indicates that the member is a resource account.', example='ResourceAccount'),
  }(name='Account', description='The information about the member.'),
  requestId?: string(name='RequestId', description='The request ID.', example='B356A415-D860-43E5-865A-E2193D62BBD6'),
}

model CreateResourceAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateResourceAccountResponseBody(name='body'),
}

/**
  * @description A member serves as a container for resources and is also an organizational unit in a resource directory. A member indicates a project or application. The resources of different members are isolated.
  * @param request  the request parameters of CreateResourceAccount  CreateResourceAccountRequest
  * @return CreateResourceAccountResponse
 */
async function createResourceAccount(request: CreateResourceAccountRequest): CreateResourceAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateResourceAccount', 'POST', '/', 'json', false, 'json', request);
}

model CreateResourceGroupRequest {
  displayName: string(name='DisplayName', description='The display name of the resource group.

The name must be 1 to 50 characters in length.

This parameter is required.', example='my-project', position='Query'),
  name: string(name='Name', description='The unique identifier of the resource group.

The identifier must be 3 to 50 characters in length and can contain letters, digits, and hyphens (-). The identifier must start with a letter.

This parameter is required.', example='my-project', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag. 

The tag key can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag key cannot start with `acs:` or `aliyun`.', example='k1'),
      value?: string(name='Value', description='The value of the tag. 

The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag key cannot start with `acs:` or `aliyun`.', example='v1'),
    }
  ](name='Tag', description='The tags.', position='Query'),
}

model CreateResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  resourceGroup?: {
    accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account to which the resource group belongs.', example='151266687691****'),
    createDate?: string(name='CreateDate', description='The time when the resource group was created. The time is displayed in UTC.', example='2021-06-05T14:39:13+08:00'),
    displayName?: string(name='DisplayName', description='The display name of the resource group.', example='my-project'),
    id?: string(name='Id', description='The ID of the resource group.', example='rg-9gLOoK****'),
    name?: string(name='Name', description='The unique identifier of the resource group.', example='my-project'),
    regionStatuses?: {
      regionStatus?: [ 
      {
        regionId?: string(name='RegionId', description='The region ID.', example='cn-qingdao'),
        status?: string(name='Status', description='The status of the resource group. Valid values:

*   Creating: The resource group is being created.
*   OK: The resource group is created.', example='Creating'),
      }
    ](name='RegionStatus')
    }(name='RegionStatuses', description='The status of the resource group in all regions.'),
    status?: string(name='Status', description='The status of the resource group. Valid values:

*   Creating: The resource group is being created.
*   OK: The resource group is created.', example='Creating'),
  }(name='ResourceGroup', description='The information of the resource group.'),
}

model CreateResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateResourceGroupResponseBody(name='body'),
}

/**
  * @description >  A maximum of 30 resource groups can be created within an Alibaba Cloud account.
  * @param request  the request parameters of CreateResourceGroup  CreateResourceGroupRequest
  * @return CreateResourceGroupResponse
 */
async function createResourceGroup(request: CreateResourceGroupRequest): CreateResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateRoleRequest {
  assumeRolePolicyDocument: string(name='AssumeRolePolicyDocument', description='The document of the policy that specifies one or more trusted entities to assume the RAM role. The trusted entities can be Alibaba Cloud accounts, Alibaba Cloud services, or identity providers (IdPs).

>  RAM users cannot assume the RAM roles of trusted Alibaba Cloud services.

This parameter is required.', example='{ "Statement": [ { "Action": "sts:AssumeRole", "Effect": "Allow", "Principal": { "RAM": "acs:ram::12345678901234****:root" } } ], "Version": "1" }', position='Query'),
  description?: string(name='Description', description='The description of the RAM role.

The description must be 1 to 1,024 characters in length.', example='ECS administrator', position='Query'),
  maxSessionDuration?: long(name='MaxSessionDuration', description='The maximum session duration of the RAM role.

Unit: seconds. Valid values: 3600 to 43200. Default value: 3600.

If you do not specify this parameter, the default value is used.', example='3600', position='Query'),
  roleName: string(name='RoleName', description='The name of the RAM role.

The name must be 1 to 64 characters in length and can contain letters, digits, periods (.), and hyphens (-).

This parameter is required.', example='ECSAdmin', position='Query'),
}

model CreateRoleResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  role?: {
    arn?: string(name='Arn', description='The Alibaba Cloud Resource Name (ARN) of the RAM role.', example='acs:ram::123456789012****:role/ECSAdmin'),
    assumeRolePolicyDocument?: string(name='AssumeRolePolicyDocument', description='The document of the policy that specifies the trusted entity to assume the RAM role.', example='{ \\"Statement\\": [ { \\"Action\\": \\"sts:AssumeRole\\", \\"Effect\\": \\"Allow\\", \\"Principal\\": { \\"RAM\\": \\"acs:ram::12345678901234****:root\\" } } ], \\"Version\\": \\"1\\" }'),
    createDate?: string(name='CreateDate', description='The time when the RAM role was created.', example='2015-01-23T12:33:18Z'),
    description?: string(name='Description', description='The description of the RAM role.', example='ECS administrator'),
    maxSessionDuration?: long(name='MaxSessionDuration', description='The maximum session duration of the RAM role.', example='3600'),
    roleId?: string(name='RoleId', description='The ID of the RAM role.', example='90123456789****'),
    roleName?: string(name='RoleName', description='The name of the RAM role.', example='ECSAdmin'),
    rolePrincipalName?: string(name='RolePrincipalName', description='The name of the RAM role after authorization.', example='ECSAdmin@role.123456.onaliyunservice.com'),
  }(name='Role', description='The information of the RAM role.'),
}

model CreateRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRoleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateRole  CreateRoleRequest
  * @return CreateRoleResponse
 */
async function createRole(request: CreateRoleRequest): CreateRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRole', 'POST', '/', 'json', false, 'json', request);
}

model CreateServiceLinkedRoleRequest {
  customSuffix?: string(name='CustomSuffix', description='The suffix of the role name.

The role name (including its suffix) must be 1 to 64 characters in length and can contain letters, digits, periods (.), and hyphens (-).

For example, if the suffix is `Example`, the role name is `ServiceLinkedRoleName_Example`.', example='Example', position='Query'),
  description?: string(name='Description', description='The description of the service-linked role.

You must configure this parameter for service-linked roles that support custom suffixes. Otherwise, the preset value is used and cannot be modified.

The description must be 1 to 1,024 characters in length.', example='Service Linked Role for PolarDB. PolarDB will use this role to access your resources in other services.', position='Query'),
  serviceName: string(name='ServiceName', description='The name of the service.

For more information about the service name, see [Alibaba Cloud services that support service-linked roles](https://help.aliyun.com/document_detail/461722.html).

This parameter is required.', example='polardb.aliyuncs.com', position='Query'),
}

model CreateServiceLinkedRoleResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='FE58D7CF-03BC-432A-B42D-BC3390C8C2E1'),
  role?: {
    arn?: string(name='Arn', description='The Alibaba Cloud Resource Name (ARN) of the role.', example='acs:ram::177242285274****:role/aliyunserviceroleforpolardb'),
    assumeRolePolicyDocument?: string(name='AssumeRolePolicyDocument', description='The document of the trust policy for the role.', example='{\\"Statement\\":[{\\"Action\\":\\"sts:AssumeRole\\",\\"Effect\\":\\"Allow\\",\\"Principal\\":{\\"Service\\":[\\"polardb.aliyuncs.com\\"]}}],\\"Version\\":\\"1\\"}'),
    createDate?: string(name='CreateDate', description='The time when the role was created. The time is displayed in UTC.', example='2020-06-30T08:14:16Z'),
    description?: string(name='Description', description='The description of the role.', example='Service Linked Role for PolarDB. PolarDB will use this role to access your resources in other services.'),
    isServiceLinkedRole?: boolean(name='IsServiceLinkedRole', description='Indicates whether the role is a service-linked role. Valid values:

*   true: The role is a service-linked role.
*   false: The role is not a service-linked role.', example='true'),
    roleId?: string(name='RoleId', description='The ID of the role.', example='32833240981067****'),
    roleName?: string(name='RoleName', description='The name of the role.', example='AliyunServiceRoleForPolarDB'),
    rolePrincipalName?: string(name='RolePrincipalName', description='The role name that uses a domain name as the suffix.', example='AliyunServiceRoleForPolarDB@role.test.onaliyunservice.com'),
  }(name='Role', description='The information about the role.'),
}

model CreateServiceLinkedRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateServiceLinkedRoleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateServiceLinkedRole  CreateServiceLinkedRoleRequest
  * @return CreateServiceLinkedRoleResponse
 */
async function createServiceLinkedRole(request: CreateServiceLinkedRoleRequest): CreateServiceLinkedRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateServiceLinkedRole', 'POST', '/', 'json', false, 'json', request);
}

model DeclineHandshakeRequest {
  handshakeId: string(name='HandshakeId', description='The ID of the invitation.

This parameter is required.', example='h-ycm4rp****', position='Query'),
}

model DeclineHandshakeResponseBody = {
  handshake?: {
    createTime?: string(name='CreateTime', description='The time when the invitation was created.', example='2018-08-10T09:55:41Z'),
    expireTime?: string(name='ExpireTime', description='The time when the invitation expires.', example='2018-08-10T09:55:41Z'),
    handshakeId?: string(name='HandshakeId', description='The ID of the invitation.', example='h-ycm4rp****'),
    masterAccountId?: string(name='MasterAccountId', description='The ID of the enterprise management account of the resource directory.', example='172841235500****'),
    masterAccountName?: string(name='MasterAccountName', description='The name of the enterprise management account of the resource directory.', example='Alice'),
    modifyTime?: string(name='ModifyTime', description='The time when the invitation was modified.', example='2018-08-10T09:55:41Z'),
    note?: string(name='Note', description='The invitation note.', example='Welcome'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', description='The ID of the resource directory.', example='rd-abcdef****'),
    status?: string(name='Status', description='The status of the invitation. Valid values:

*   Pending: The invitation is waiting for confirmation.
*   Accepted: The invitation is accepted.
*   Cancelled: The invitation is canceled.
*   Declined: The invitation is rejected.
*   Expired: The invitation expired.', example='Declined'),
    targetEntity?: string(name='TargetEntity', description='The ID or logon email address of the invited account.', example='someone@example.com'),
    targetType?: string(name='TargetType', description='The type of the invited account. Valid values:

*   Account: indicates the ID of the account.
*   Email: indicates the logon email address of the account.', example='Email'),
  }(name='Handshake', description='The information of the invitation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model DeclineHandshakeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeclineHandshakeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeclineHandshake  DeclineHandshakeRequest
  * @return DeclineHandshakeResponse
 */
async function declineHandshake(request: DeclineHandshakeRequest): DeclineHandshakeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeclineHandshake', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAccountRequest {
  abandonableCheckId?: [ string ](name='AbandonableCheckId', shrink='json', position='Query'),
  accountId: string(name='AccountId', description='The type of the deletion. Valid values:

*   0: direct deletion. If the member does not have pay-as-you-go resources that are purchased within the previous 30 days, the system directly deletes the member.
*   1: deletion with a silence period. If the member has pay-as-you-go resources that are purchased within the previous 30 days, the member enters a silence period of 45 days. The system starts to delete the member until the silence period ends. For more information about the silence period, see [What is the silence period for member deletion?](https://help.aliyun.com/document_detail/446079.html)

This parameter is required.', example='169946124551****', position='Query'),
}

model DeleteAccountResponseBody = {
  deletionType?: string(name='DeletionType', example='0'),
  requestId?: string(name='RequestId', example='009429F8-C1C0-5872-B674-A6C2333B9647'),
}

model DeleteAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAccountResponseBody(name='body'),
}

/**
  * @description The ID of the member that you want to delete.
  * @param request  the request parameters of DeleteAccount  DeleteAccountRequest
  * @return DeleteAccountResponse
 */
async function deleteAccount(request: DeleteAccountRequest): DeleteAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAccount', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAutoGroupingRuleRequest {
  ruleId: string(name='RuleId', description='The ID of the rule.

This parameter is required.', example='gr-acfo******hy6a', position='Query'),
}

model DeleteAutoGroupingRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model DeleteAutoGroupingRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAutoGroupingRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteAutoGroupingRule  DeleteAutoGroupingRuleRequest
  * @return DeleteAutoGroupingRuleResponse
 */
async function deleteAutoGroupingRule(request: DeleteAutoGroupingRuleRequest): DeleteAutoGroupingRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAutoGroupingRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteControlPolicyRequest {
  policyId: string(name='PolicyId', description='The ID of the control policy.

This parameter is required.', example='cp-SImPt8GCEwiq****', position='Query'),
}

model DeleteControlPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='C8541E06-B207-46BF-92C9-DC8DE4609D75'),
}

model DeleteControlPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteControlPolicyResponseBody(name='body'),
}

/**
  * @description If you want to delete a custom control policy that is attached to folders or member accounts, you must call the [DetachControlPolicy](https://help.aliyun.com/document_detail/208331.html) operation to detach the policy before you delete it.
  * In this example, the custom control policy `cp-SImPt8GCEwiq****` is deleted.
  * @param request  the request parameters of DeleteControlPolicy  DeleteControlPolicyRequest
  * @return DeleteControlPolicyResponse
 */
async function deleteControlPolicy(request: DeleteControlPolicyRequest): DeleteControlPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteControlPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DeleteFolderRequest {
  folderId: string(name='FolderId', description='The ID of the folder.

This parameter is required.', example='fd-ae1in7****', position='Query'),
}

model DeleteFolderResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model DeleteFolderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFolderResponseBody(name='body'),
}

/**
  * @description >  Before you delete a folder, make sure that the folder does not contain any member accounts or child folders.
  * @param request  the request parameters of DeleteFolder  DeleteFolderRequest
  * @return DeleteFolderResponse
 */
async function deleteFolder(request: DeleteFolderRequest): DeleteFolderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFolder', 'POST', '/', 'json', false, 'json', request);
}

model DeletePolicyRequest {
  policyName: string(name='PolicyName', description='The name of the policy.

The name must be 1 to 128 characters in length and can contain letters, digits, and hyphens (-).

This parameter is required.', example='OSS-Administrator', position='Query'),
}

model DeletePolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='898FAB24-7509-43EE-A287-086FE4C44394'),
}

model DeletePolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePolicyResponseBody(name='body'),
}

/**
  * @description > 
  * *   Before you delete a policy, you must delete all non-default versions of the policy. For more information about how to delete a policy version, see [DeletePolicyVersion](https://help.aliyun.com/document_detail/159041.html).
  * *   Before you delete a policy, make sure that the policy is not referenced. This means that the policy is not attached to RAM users, RAM user groups, or RAM roles. For more information about how to detach a policy, see [DetachPolicy](https://help.aliyun.com/document_detail/159168.html).
  * @param request  the request parameters of DeletePolicy  DeletePolicyRequest
  * @return DeletePolicyResponse
 */
async function deletePolicy(request: DeletePolicyRequest): DeletePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePolicy', 'POST', '/', 'json', false, 'json', request);
}

model DeletePolicyVersionRequest {
  policyName: string(name='PolicyName', description='The name of the policy.

The name must be 1 to 128 characters in length and can contain letters, digits, and hyphens (-).

This parameter is required.', example='OSS-Administrator', position='Query'),
  versionId: string(name='VersionId', description='The ID of the policy version.

You can call the [ListPolicyVersions](https://help.aliyun.com/document_detail/159982.html) operation to query the ID.

This parameter is required.', example='v3', position='Query'),
}

model DeletePolicyVersionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model DeletePolicyVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePolicyVersionResponseBody(name='body'),
}

/**
  * @description >  The default version of a permission policy cannot be deleted.
  * @param request  the request parameters of DeletePolicyVersion  DeletePolicyVersionRequest
  * @return DeletePolicyVersionResponse
 */
async function deletePolicyVersion(request: DeletePolicyVersionRequest): DeletePolicyVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePolicyVersion', 'POST', '/', 'json', false, 'json', request);
}

model DeleteResourceGroupRequest {
  resourceGroupId: string(name='ResourceGroupId', description='The ID of the resource group.

You can call the [ListResourceGroups](https://help.aliyun.com/document_detail/158855.html) operation to obtain the ID.

This parameter is required.', example='rg-9gLOoK****', position='Query'),
}

model DeleteResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1C488B66-B819-4D14-8711-C4EAAA13AC01'),
  resourceGroup?: {
    accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account to which the resource group belongs.', example='123456789****'),
    createDate?: string(name='CreateDate', description='The time when the resource group was created. The time is displayed in UTC.', example='2015-01-23T12:33:18Z'),
    displayName?: string(name='DisplayName', description='The display name of the resource group.', example='my-project'),
    id?: string(name='Id', description='The ID of the resource group.', example='rg-9gLOoK****'),
    name?: string(name='Name', description='The unique identifier of the resource group.', example='my-project'),
    regionStatuses?: {
      regionStatus?: [ 
      {
        regionId?: string(name='RegionId', description='The region ID.', example='cn-qingdao'),
        status?: string(name='Status', description='The status of the resource group. Valid values:

*   Creating: The resource group is being created.
*   OK: The resource group is created.
*   PendingDelete: The resource group is waiting to be deleted.
*   Deleting: The resource group is being deleted.', example='PendingDelete'),
      }
    ](name='RegionStatus')
    }(name='RegionStatuses', description='The status of the resource group in all regions.'),
    status?: string(name='Status', description='The status of the resource group. Valid values:

*   Creating: The resource group is being created.
*   OK: The resource group is created.
*   PendingDelete: The resource group is waiting to be deleted.', example='PendingDelete'),
  }(name='ResourceGroup', description='The information of the resource group.'),
}

model DeleteResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteResourceGroupResponseBody(name='body'),
}

/**
  * @description >  Before you delete a resource group, you must delete all the resources in it.
  * In this example, the resource group whose ID is `rg-9gLOoK****` is deleted.
  * @param request  the request parameters of DeleteResourceGroup  DeleteResourceGroupRequest
  * @return DeleteResourceGroupResponse
 */
async function deleteResourceGroup(request: DeleteResourceGroupRequest): DeleteResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRoleRequest {
  roleName: string(name='RoleName', description='The name of the RAM role.

The name must be 1 to 64 characters in length and can contain letters, digits, periods (.), and hyphens (-).

This parameter is required.', example='ECSAdmin', position='Query'),
}

model DeleteRoleResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='898FAB24-7509-43EE-A287-086FE4C44394'),
}

model DeleteRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRoleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteRole  DeleteRoleRequest
  * @return DeleteRoleResponse
 */
async function deleteRole(request: DeleteRoleRequest): DeleteRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRole', 'POST', '/', 'json', false, 'json', request);
}

model DeleteServiceLinkedRoleRequest {
  roleName: string(name='RoleName', description='The name of the role.

This parameter is required.', example='AliyunServiceRoleForPolarDB', position='Query'),
}

model DeleteServiceLinkedRoleResponseBody = {
  deletionTaskId?: string(name='DeletionTaskId', description='The ID of the deletion task.', example='task/acs-service-role/polardb.aliyuncs.com/AliyunServiceRoleForPolarDB/64c4f9cc-fac2-4692-ae1b-804ae4b9****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B595E5BF-FF5F-4E7F-B95A-B90FE242FEB6'),
}

model DeleteServiceLinkedRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteServiceLinkedRoleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteServiceLinkedRole  DeleteServiceLinkedRoleRequest
  * @return DeleteServiceLinkedRoleResponse
 */
async function deleteServiceLinkedRole(request: DeleteServiceLinkedRoleRequest): DeleteServiceLinkedRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteServiceLinkedRole', 'POST', '/', 'json', false, 'json', request);
}

model DeregisterDelegatedAdministratorRequest {
  accountId: string(name='AccountId', description='The ID of the member in the resource directory.

This parameter is required.', example='181761095690****', position='Query'),
  servicePrincipal: string(name='ServicePrincipal', description='The identifier of the trusted service.

For more information, see the `Trusted service identifier` column in [Supported trusted services](https://help.aliyun.com/document_detail/208133.html).

This parameter is required.', example='cloudfw.aliyuncs.com', position='Query'),
}

model DeregisterDelegatedAdministratorResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='DF5D5C52-7BD0-40E7-94C6-23A1505038A2'),
}

model DeregisterDelegatedAdministratorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeregisterDelegatedAdministratorResponseBody(name='body'),
}

/**
  * @description >  If the delegated administrator account that you want to remove has historical management tasks in the related trusted service, the trusted service may be affected after the delegated administrator account is removed. Therefore, proceed with caution.
  * This topic provides an example on how to call the API operation to remove the delegated administrator account `181761095690****` for Cloud Firewall.
  * @param request  the request parameters of DeregisterDelegatedAdministrator  DeregisterDelegatedAdministratorRequest
  * @return DeregisterDelegatedAdministratorResponse
 */
async function deregisterDelegatedAdministrator(request: DeregisterDelegatedAdministratorRequest): DeregisterDelegatedAdministratorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeregisterDelegatedAdministrator', 'POST', '/', 'json', false, 'json', request);
}

model DestroyResourceDirectoryRequest {
}

model DestroyResourceDirectoryResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model DestroyResourceDirectoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DestroyResourceDirectoryResponseBody(name='body'),
}

/**
  * @description Before you disable a resource directory, make sure that the following requirements are met:
  * *   All member accounts must be removed from the resource directory. For more information about how to remove a member account, see [RemoveCloudAccount](https://help.aliyun.com/document_detail/159431.html).
  * *   All folders except the root folder must be deleted from the resource directory. For more information about how to delete a folder, see [DeleteFolder](https://help.aliyun.com/document_detail/159432.html).
  * @param request  the request parameters of DestroyResourceDirectory  DestroyResourceDirectoryRequest
  * @return DestroyResourceDirectoryResponse
 */
async function destroyResourceDirectory(request: DestroyResourceDirectoryRequest): DestroyResourceDirectoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DestroyResourceDirectory', 'POST', '/', 'json', false, 'json', request);
}

model DetachControlPolicyRequest {
  policyId: string(name='PolicyId', description='The ID of the access control policy.

This parameter is required.', example='cp-jExXAqIYkwHN****', position='Query'),
  targetId: string(name='TargetId', description='The ID of the object from which you want to detach the access control policy. Access control policies can be attached to the following objects:

*   Root folder
*   Subfolders of the Root folder
*   Members

This parameter is required.', example='fd-ZDNPiT****', position='Query'),
}

model DetachControlPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9EA4F962-1A2E-4AFE-BE0C-B14736FC46CC'),
}

model DetachControlPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetachControlPolicyResponseBody(name='body'),
}

/**
  * @description After you detach an access control policy, the operations performed on resources by using members are not limited by the policy. Make sure that the detached policy meets your expectations. Otherwise, your business may be affected.
  * Both the system and custom access control policies can be detached. If an object has only one access control policy attached, the policy cannot be detached.
  * This topic provides an example on how to call the API operation to detach the custom control policy `cp-jExXAqIYkwHN****` from the folder `fd-ZDNPiT****`.
  * @param request  the request parameters of DetachControlPolicy  DetachControlPolicyRequest
  * @return DetachControlPolicyResponse
 */
async function detachControlPolicy(request: DetachControlPolicyRequest): DetachControlPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachControlPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DetachPolicyRequest {
  policyName: string(name='PolicyName', description='The name of the policy.

The name must be 1 to 128 characters in length and can contain letters, digits, and hyphens (-).

This parameter is required.', example='OSS-Administrator', position='Query'),
  policyType: string(name='PolicyType', description='The type of the policy. Valid values:

*   Custom: custom policy
*   System: system policy

This parameter is required.', example='Custom', position='Query'),
  principalName: string(name='PrincipalName', description='The name of the object to which the policy is attached.

This parameter is required.', example='alice@demo.onaliyun.com', position='Query'),
  principalType: string(name='PrincipalType', description='The type of the object to which the policy is attached. Valid values:

*   IMSUser: RAM user
*   IMSGroup: RAM user group
*   ServiceRole: RAM role

This parameter is required.', example='IMSUser', position='Query'),
  resourceGroupId: string(name='ResourceGroupId', description='The ID of the resource group or the ID of the Alibaba Cloud account to which the resource group belongs.

This parameter specifies the resource group or Alibaba Cloud account for which you want to revoke permissions.

This parameter is required.', example='rg-9gLOoK****', position='Query'),
}

model DetachPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='697852FB-50D7-44D9-9774-530C31EAC572'),
}

model DetachPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetachPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DetachPolicy  DetachPolicyRequest
  * @return DetachPolicyResponse
 */
async function detachPolicy(request: DetachPolicyRequest): DetachPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DisableAssociatedTransferRequest {
}

model DisableAssociatedTransferResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='7CE0AE54-6F27-5522-A429-4C5EE8FD40C8'),
}

model DisableAssociatedTransferResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisableAssociatedTransferResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DisableAssociatedTransfer  DisableAssociatedTransferRequest
  * @return DisableAssociatedTransferResponse
 */
async function disableAssociatedTransfer(request: DisableAssociatedTransferRequest): DisableAssociatedTransferResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableAssociatedTransfer', 'POST', '/', 'json', false, 'json', request);
}

model DisableAutoGroupingRequest {
}

model DisableAutoGroupingResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='898FAB24-7509-43EE-A287-086FE4C44394'),
}

model DisableAutoGroupingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisableAutoGroupingResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DisableAutoGrouping  DisableAutoGroupingRequest
  * @return DisableAutoGroupingResponse
 */
async function disableAutoGrouping(request: DisableAutoGroupingRequest): DisableAutoGroupingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableAutoGrouping', 'POST', '/', 'json', false, 'json', request);
}

model DisableControlPolicyRequest {
}

model DisableControlPolicyResponseBody = {
  enablementStatus?: string(name='EnablementStatus', description='The status of the Control Policy feature. Valid values:

*   Enabled: The Control Policy feature is enabled.
*   PendingEnable: The Control Policy feature is being enabled.
*   Disabled: The Control Policy feature is disabled.
*   PendingDisable: The Control Policy feature is being disabled.', example='PendingDisable'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7C709979-451D-4C92-835D-7DDCCAA562E9'),
}

model DisableControlPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisableControlPolicyResponseBody(name='body'),
}

/**
  * @description After you disable the Control Policy feature, the system automatically detaches all control policies that are attached to folders and member accounts. The system does not delete these control policies, but you cannot attach them to folders or member accounts again.
  * >  If you disable the Control Policy feature, the permissions of all folders and member accounts in a resource directory are affected. You must proceed with caution.
  * @param request  the request parameters of DisableControlPolicy  DisableControlPolicyRequest
  * @return DisableControlPolicyResponse
 */
async function disableControlPolicy(request: DisableControlPolicyRequest): DisableControlPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableControlPolicy', 'POST', '/', 'json', false, 'json', request);
}

model EnableAssociatedTransferRequest {
}

model EnableAssociatedTransferResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='2D69A58F-345C-4FDE-88E4-BF5189484114'),
}

model EnableAssociatedTransferResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableAssociatedTransferResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnableAssociatedTransfer  EnableAssociatedTransferRequest
  * @return EnableAssociatedTransferResponse
 */
async function enableAssociatedTransfer(request: EnableAssociatedTransferRequest): EnableAssociatedTransferResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableAssociatedTransfer', 'POST', '/', 'json', false, 'json', request);
}

model EnableAutoGroupingRequest {
}

model EnableAutoGroupingResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='DF5D5C52-7BD0-40E7-94C6-23A1505038A2'),
}

model EnableAutoGroupingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableAutoGroupingResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnableAutoGrouping  EnableAutoGroupingRequest
  * @return EnableAutoGroupingResponse
 */
async function enableAutoGrouping(request: EnableAutoGroupingRequest): EnableAutoGroupingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableAutoGrouping', 'POST', '/', 'json', false, 'json', request);
}

model EnableControlPolicyRequest {
}

model EnableControlPolicyResponseBody = {
  enablementStatus?: string(name='EnablementStatus', description='The status of the Control Policy feature. Valid values:

*   Enabled: The Control Policy feature is enabled.
*   PendingEnable: The Control Policy feature is being enabled.
*   Disabled: The Control Policy feature is disabled.
*   PendingDisable: The Control Policy feature is being disabled.', example='PendingEnable'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8CE7BD95-EFFA-4911-A1E0-BD4412697FEB'),
}

model EnableControlPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableControlPolicyResponseBody(name='body'),
}

/**
  * @description The Control Policy feature allows you to manage the permission boundaries of the folders or member accounts in a resource directory in a centralized manner. This feature is implemented based on the resource directory. You can use this feature to develop common or dedicated rules for access control. The Control Policy feature does not grant permissions but only defines permission boundaries. A member account in a resource directory can be used to access resources only after it is granted the required permissions by using the Resource Access Management (RAM) service. For more information, see [Overview of the Control Policy feature](https://help.aliyun.com/document_detail/178671.html).
  * @param request  the request parameters of EnableControlPolicy  EnableControlPolicyRequest
  * @return EnableControlPolicyResponse
 */
async function enableControlPolicy(request: EnableControlPolicyRequest): EnableControlPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableControlPolicy', 'POST', '/', 'json', false, 'json', request);
}

model EnableResourceDirectoryRequest {
  enableMode: string(name='EnableMode', description='The mode in which you enable a resource directory. Valid values:

*   CurrentAccount: indicates that the current account is used to enable a resource directory.
*   NewManagementAccount: indicates that a newly created account is used to enable a resource directory. If you select this mode, you must configure the `MAName`, `MASecureMobilePhone`, and `VerificationCode` parameters.

This parameter is required.', example='CurrentAccount', position='Query'),
  MAName?: string(name='MAName', description='The name of the newly created account.

Specify the name in the `<Prefix>@rdadmin.aliyunid.com` format. The prefix can contain letters, digits, and special characters but cannot contain consecutive special characters. The prefix must start with a letter or digit and end with a letter or digit. Valid special characters include underscores (_), periods (.), and hyphens (-). The prefix must be 2 to 50 characters in length.', example='user01@rdadmin.aliyunid.com', position='Query'),
  MASecureMobilePhone?: string(name='MASecureMobilePhone', description='The mobile phone number that is bound to the newly created account.

If you leave this parameter empty, the mobile phone number that is bound to the current account is used. The mobile phone number you specify must be the same as the mobile phone number that you specify when you call the [SendVerificationCodeForEnableRD](https://help.aliyun.com/document_detail/364248.html) operation to obtain a verification code.

Specify the mobile phone number in the `<Country code>-<Mobile phone number>` format.

>  Mobile phone numbers in the `86-<Mobile phone number>` format in the Chinese mainland are not supported.', example='xx-13900001234', position='Query'),
  verificationCode?: string(name='VerificationCode', description='The verification code.

You can call the [SendVerificationCodeForEnableRD](https://help.aliyun.com/document_detail/364248.html) operation to obtain the verification code.', example='123456', position='Query'),
}

model EnableResourceDirectoryResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='EC2FE94D-A4A2-51A1-A493-5C273A36C46A'),
  resourceDirectory?: {
    createTime?: string(name='CreateTime', description='The time when the resource directory was enabled.', example='2021-12-08T02:15:31.744Z'),
    masterAccountId?: string(name='MasterAccountId', description='The ID of the management account.', example='507408460615****'),
    masterAccountName?: string(name='MasterAccountName', description='The name of the management account.', example='alice@example.com'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', description='The ID of the resource directory.', example='rd-54****'),
    rootFolderId?: string(name='RootFolderId', description='The ID of the Root folder.', example='r-G9****'),
  }(name='ResourceDirectory', description='The information of the resource directory.'),
}

model EnableResourceDirectoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableResourceDirectoryResponseBody(name='body'),
}

/**
  * @description You can use the current account or a newly created account to enable a resource directory. For more information, see [Enable a resource directory](https://help.aliyun.com/document_detail/111215.html).
  * In this example, the current account is used to enable a resource directory.
  * @param request  the request parameters of EnableResourceDirectory  EnableResourceDirectoryRequest
  * @return EnableResourceDirectoryResponse
 */
async function enableResourceDirectory(request: EnableResourceDirectoryRequest): EnableResourceDirectoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableResourceDirectory', 'POST', '/', 'json', false, 'json', request);
}

model GetAccountRequest {
  accountId: string(name='AccountId', description='The Alibaba Cloud account ID of the member.

This parameter is required.', example='181761095690****', position='Query'),
  includeTags?: boolean(name='IncludeTags', description='Specifies whether to return the information of tags. Valid values:

*   false (default value)
*   true', example='true', position='Query'),
}

model GetAccountResponseBody = {
  account?: {
    accountId?: string(name='AccountId', description='The Alibaba Cloud account ID of the member.', example='181761095690****'),
    accountName?: string(name='AccountName', description='The Alibaba Cloud account name of the member.', example='someone@example.com'),
    displayName?: string(name='DisplayName', description='The display name of the member.', example='admin'),
    emailStatus?: string(name='EmailStatus', description='The status of the modification for the email address bound to the member. Valid values:

*   WAIT_MODIFY: in progress
*   CANCELLED: canceled
*   EXPIRED: expired

If the value of this parameter is empty, no modification is performed for the email address.', example='WAIT_MODIFY'),
    folderId?: string(name='FolderId', description='The ID of the folder.', example='fd-bVaRIG****'),
    identityInformation?: string(name='IdentityInformation', description='The real-name verification information.', example='aliyun-admin'),
    joinMethod?: string(name='JoinMethod', description='The way in which the member joins the resource directory. Valid values:

*   invited: The member is invited to join the resource directory.
*   created: The member is directly created in the resource directory.', example='created'),
    joinTime?: string(name='JoinTime', description='The time when the member joined the resource directory.', example='2015-01-23T12:33:18Z'),
    location?: string(name='Location', description='The location of the member in the resource directory.'),
    modifyTime?: string(name='ModifyTime', description='The time when the member was modified.', example='2015-01-23T12:33:18Z'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', description='The ID of the resource directory.', example='rd-k3****'),
    resourceDirectoryPath?: string(name='ResourceDirectoryPath', description='The path of the member in the resource directory.'),
    status?: string(name='Status', description='The status of the member. Valid values:

*   CreateSuccess: The member is created.
*   PromoteVerifying: The upgrade of the member is being confirmed.
*   PromoteFailed: The upgrade of the member fails.
*   PromoteExpired: The upgrade of the member expires.
*   PromoteCancelled: The upgrade of the member is canceled.
*   PromoteSuccess: The member is upgraded.
*   InviteSuccess: The member accepts the invitation.', example='CreateSuccess'),
    tags?: [ 
      {
        key?: string(name='Key', description='A tag key.', example='tag_key'),
        value?: string(name='Value', description='A tag value.', example='tag_value'),
      }
    ](name='Tags', description='The tags that are added to the member.'),
    type?: string(name='Type', description='The type of the member. Valid values:

*   CloudAccount: cloud account
*   ResourceAccount: resource account', example='ResourceAccount'),
  }(name='Account', description='The information of the member.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model GetAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAccountResponseBody(name='body'),
}

/**
  * @description This topic provides an example on how to call the API operation to query the information of the member whose Alibaba Cloud account ID is `181761095690****`.
  * @param request  the request parameters of GetAccount  GetAccountRequest
  * @return GetAccountResponse
 */
async function getAccount(request: GetAccountRequest): GetAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAccount', 'POST', '/', 'json', false, 'json', request);
}

model GetAccountDeletionCheckResultRequest {
  accountId: string(name='AccountId', description='The ID of the member that you want to delete.

This parameter is required.', example='179855839641****', position='Query'),
}

model GetAccountDeletionCheckResultResponseBody = {
  accountDeletionCheckResultInfo?: {
    abandonableChecks?: [ 
      {
        checkId?: string(name='CheckId', description='The ID of the check item.', example='NON_SP_cs'),
        checkName?: string(name='CheckName', description='The name of the cloud service to which the check item belongs.', example='Container Service for Kubernetes'),
        description?: string(name='Description', description='The description of the check item.', example='An instance of a cloud service is running within the member. Submit a ticket to contact Alibaba Cloud technical support.'),
      }
    ](name='AbandonableChecks', description='The check items that you can choose to ignore for the member deletion.

>  This parameter may be returned if the value of AllowDelete is true.'),
    allowDelete?: string(name='AllowDelete', description='Indicates whether the member can be deleted. Valid values:

*   true: The member can be deleted.
*   false: The member cannot be deleted.', example='false'),
    notAllowReason?: [ 
      {
        checkId?: string(name='CheckId', description='The ID of the check item.', example='NON_SP_efc'),
        checkName?: string(name='CheckName', description='The name of the cloud service to which the check item belongs.', example='Enterprise finance'),
        description?: string(name='Description', description='The description of the check item.', example='This account is an Enterprise Finance associated account. Please remove the financial association of this account before deleting it.'),
      }
    ](name='NotAllowReason', description='The reasons why the member cannot be deleted.

>  This parameter is returned only if the value of AllowDelete is false.'),
    status?: string(name='Status', description='The status of the check. Valid values:

*   PreCheckComplete: The check is complete.
*   PreChecking: The check is in progress.', example='PreCheckComplete'),
  }(name='AccountDeletionCheckResultInfo', description='The result of the deletion check for the member.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='54AC391D-4F7F-5F08-B8D3-0AECDE6EC5BD'),
}

model GetAccountDeletionCheckResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAccountDeletionCheckResultResponseBody(name='body'),
}

/**
  * @description After you call the [CheckAccountDelete](https://help.aliyun.com/document_detail/448542.html) operation to perform a member deletion check, you can call the GetAccountDeletionCheckResult operation to query the check result. If the check result shows that the member meets deletion requirements, you can delete the member. Otherwise, you need to first modify the items that do not meet requirements.
  * This topic provides an example on how to call the API operation to query the result of the deletion check for the member whose ID is `179855839641****`. The response shows that the member does not meet deletion requirements.
  * @param request  the request parameters of GetAccountDeletionCheckResult  GetAccountDeletionCheckResultRequest
  * @return GetAccountDeletionCheckResultResponse
 */
async function getAccountDeletionCheckResult(request: GetAccountDeletionCheckResultRequest): GetAccountDeletionCheckResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAccountDeletionCheckResult', 'POST', '/', 'json', false, 'json', request);
}

model GetAccountDeletionStatusRequest {
  accountId: string(name='AccountId', description='The Alibaba Cloud account ID of the member.

This parameter is required.', example='169946124551****', position='Query'),
}

model GetAccountDeletionStatusResponseBody = {
  rdAccountDeletionStatus?: {
    accountId?: string(name='AccountId', description='The Alibaba Cloud account ID of the member.', example='169946124551****'),
    createTime?: string(name='CreateTime', description='The start time of the deletion.', example='2022-08-23T17:05:30+08:00'),
    deletionTime: string(name='DeletionTime', description='The end time of the deletion.

This parameter is required.', example='2022-08-23T17:06:01+08:00'),
    deletionType?: string(name='DeletionType', description='The type of the deletion. Valid values:

*   0: direct deletion. If the member does not have pay-as-you-go resources that are purchased within the previous 30 days, the system directly deletes the member.
*   1: deletion with a silence period. If the member has pay-as-you-go resources that are purchased within the previous 30 days, the member enters a silence period. The system starts to delete the member until the silence period ends. For more information about the silence period, see [What is the silence period for member deletion?](https://help.aliyun.com/document_detail/446079.html)', example='0'),
    failReasonList?: [ 
      {
        description?: string(name='Description', description='The description of the check item.', example='This account has a payer account. Please release the financial relationship of this account first.'),
        name?: string(name='Name', description='The name of the cloud service to which the check item belongs.', example='Others'),
      }
    ](name='FailReasonList', description='The reasons why the member fails to be deleted.'),
    status?: string(name='Status', description='The status. Valid values:

*   Success: The member is deleted.
*   Checking: A deletion check is being performed for the member.
*   Deleting: The member is being deleted.
*   CheckFailed: The deletion check for the member fails.
*   DeleteFailed: The member fails to be deleted.', example='Success'),
  }(name='RdAccountDeletionStatus', description='The deletion status of the member.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8AA43293-7C8F-5730-8F2D-7F864EC092C5'),
}

model GetAccountDeletionStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAccountDeletionStatusResponseBody(name='body'),
}

/**
  * @description This topic provides an example on how to call the API operation to query the deletion status of the member whose Alibaba Cloud account ID is `169946124551****`. The response shows that the member is deleted.
  * @param request  the request parameters of GetAccountDeletionStatus  GetAccountDeletionStatusRequest
  * @return GetAccountDeletionStatusResponse
 */
async function getAccountDeletionStatus(request: GetAccountDeletionStatusRequest): GetAccountDeletionStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAccountDeletionStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetAutoGroupingRuleRequest {
  ruleId: string(name='RuleId', description='The ID of the rule.

This parameter is required.', example='gr-acfo******hy6a', position='Query'),
}

model GetAutoGroupingRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='9EA4F962-1A2E-4AFE-BE0C-B14736FC46CC'),
  rule?: {
    createTime?: string(name='CreateTime', description='The time when the rule was created.', example='2025-01-01T10:00:00+08:00'),
    excludeRegionIdsScope?: string(name='ExcludeRegionIdsScope', description='The IDs of excluded regions. Multiple IDs are separated by commas (,).', example='cn-hangzhou,cn-shanghai'),
    excludeResourceGroupIdsScope?: string(name='ExcludeResourceGroupIdsScope', description='The IDs of excluded resource groups. Multiple IDs are separated by commas (,).', example='rg-aekz******4b5ea,rg-aek2******fxykq'),
    excludeResourceIdsScope?: string(name='ExcludeResourceIdsScope', description='The IDs of excluded resources. Multiple IDs are separated by commas (,).', example='i-2zee******ym49kfmwis,vpc-5ts6******fnw493g849a'),
    excludeResourceTypesScope?: string(name='ExcludeResourceTypesScope', description='The excluded resource types. Multiple resource types are separated by commas (,).', example='ecs.instance,vpc.vpc'),
    modifyTime?: string(name='ModifyTime', description='The time when the rule was modified.', example='2025-01-01T10:00:00+08:00'),
    regionIdsScope?: string(name='RegionIdsScope', description='The IDs of regions. Multiple IDs are separated by commas (,).', example='cn-hangzhou,cn-shanghai'),
    resourceGroupIdsScope?: string(name='ResourceGroupIdsScope', description='The IDs of resource groups. Multiple IDs are separated by commas (,).', example='rg-aekz******4b5ea,rg-aek2******fxykq'),
    resourceIdsScope?: string(name='ResourceIdsScope', description='The IDs of resources. Multiple IDs are separated by commas (,).', example='i-2zee******ym49kfmwis,vpc-5ts6******fnw493g849a'),
    resourceTypesScope?: string(name='ResourceTypesScope', description='The resource types. Multiple resource types are separated by commas (,).', example='ecs.instance,vpc.vpc'),
    ruleContents?: [ 
      {
        autoGroupingScopeCondition?: string(name='AutoGroupingScopeCondition', description='The condition for the range of resources that are automatically transferred.', example='{"children":[{"desired":"{\\"env\\":\\"online\\", \\"project\\":\\"A\\"}","featurePath":"$.tags","featureSource":"RESOURCE","operator":"TagMatchAll"}],"operator":"and"}'),
        ruleContentId?: string(name='RuleContentId', description='The ID of the content record.', example='grc-acfo******fwybpq'),
        targetResourceGroupCondition?: string(name='TargetResourceGroupCondition', description='The condition for the destination resource group.', example='{"children":[{"desired":"rg-aek2********qcy","featurePath":"$.resourceGroupId","featureSource":"RESOURCE","operator":"StringEquals"}],"operator":"and"}'),
      }
    ](name='RuleContents', description='The content records of the rule.'),
    ruleDesc?: string(name='RuleDesc', description='The description of the rule.', example='Transfer resources to which the {"env": "online"} and {"project": "A"} tags are added to the resource group rg-aek2********qcy.'),
    ruleId?: string(name='RuleId', description='The ID of the rule.', example='gr-acfo******hy6a'),
    ruleName?: string(name='RuleName', description='The name of the rule.', example='Custom Transfer Rule for Online Resources of Project A'),
    ruleType?: string(name='RuleType', description='The type of the rule. Valid values:

*   custom_condition: custom transfer rule
*   associated_transfer: transfer rule for associated resources', example='associated_transfer'),
  }(name='Rule', description='The information about the rule.'),
}

model GetAutoGroupingRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAutoGroupingRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAutoGroupingRule  GetAutoGroupingRuleRequest
  * @return GetAutoGroupingRuleResponse
 */
async function getAutoGroupingRule(request: GetAutoGroupingRuleRequest): GetAutoGroupingRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAutoGroupingRule', 'POST', '/', 'json', false, 'json', request);
}

model GetAutoGroupingStatusRequest {
}

model GetAutoGroupingStatusResponseBody = {
  enableExistedResourcesTransfer?: boolean(name='EnableExistedResourcesTransfer', description='Indicates whether the Transfer Existing Associated Resources feature is enabled. Valid values:

*   true
*   false', example='true'),
  enableStatus?: string(name='EnableStatus', description='The status of the Automatic Resource Transfer feature. Valid values:

*   Enabling: The feature is being enabled.
*   Enable: The feature is enabled.
*   Partial_Enable: The transfer of associated resources is enabled, but custom transfer rule-based resource transfer is disabled. You can call the [EnableAutoGrouping](https://help.aliyun.com/document_detail/2870380.html) operation to enable custom transfer rule-based resource transfer.
*   Disable: The feature is disabled.', example='Enable'),
  requestId?: string(name='RequestId', description='The request ID.', example='0217AFEB-5318-56D4-B167-1933D83EDF3F'),
}

model GetAutoGroupingStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAutoGroupingStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAutoGroupingStatus  GetAutoGroupingStatusRequest
  * @return GetAutoGroupingStatusResponse
 */
async function getAutoGroupingStatus(request: GetAutoGroupingStatusRequest): GetAutoGroupingStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAutoGroupingStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetControlPolicyRequest {
  language?: string(name='Language', description='The language in which you want to return the description of the access control policy. Valid values:

*   zh-CN (default value): Chinese
*   en: English
*   ja: Japanese

>  This parameter is valid only for system access control policies.', example='zh-CN', position='Query'),
  policyId: string(name='PolicyId', description='The ID of the access control policy.

This parameter is required.', example='cp-SImPt8GCEwiq****', position='Query'),
}

model GetControlPolicyResponseBody = {
  controlPolicy?: {
    attachmentCount?: string(name='AttachmentCount', description='The number of times that the access control policy is referenced.', example='0'),
    createDate?: string(name='CreateDate', description='The time when the access control policy was created.', example='2021-03-18T08:51:33Z'),
    description?: string(name='Description', description='The description of the access control policy.', example='ExampleControlPolicy'),
    effectScope?: string(name='EffectScope', description='The effective scope of the access control policy. Valid values:

*   All: The access control policy is in effect for Alibaba Cloud accounts, RAM users, and RAM roles.
*   RAM: The access control policy is in effect only for RAM users and RAM roles.', example='RAM'),
    policyDocument?: string(name='PolicyDocument', description='The document of the access control policy.', example='{\\"Version\\":\\"1\\",\\"Statement\\":[{\\"Effect\\":\\"Deny\\",\\"Action\\":[\\"ram:UpdateRole\\",\\"ram:DeleteRole\\",\\"ram:AttachPolicyToRole\\",\\"ram:DetachPolicyFromRole\\"],\\"Resource\\":\\"acs:ram:*:*:role/ResourceDirectoryAccountAccessRole\\"}]}'),
    policyId?: string(name='PolicyId', description='The ID of the access control policy.', example='cp-SImPt8GCEwiq****'),
    policyName?: string(name='PolicyName', description='The name of the access control policy.', example='test'),
    policyType?: string(name='PolicyType', description='The type of the access control policy. Valid values:

*   System: system access control policy
*   Custom: custom access control policy', example='Custom'),
    updateDate?: string(name='UpdateDate', description='The time when the access control policy was updated.', example='2021-03-18T08:51:33Z'),
  }(name='ControlPolicy', description='The details of the access control policy.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='AB769936-CDFA-4D52-8CE2-A3581800044A'),
}

model GetControlPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetControlPolicyResponseBody(name='body'),
}

/**
  * @description This topic provides an example on how to call the API operation to query the details of the access control policy whose ID is `cp-SImPt8GCEwiq****`.
  * @param request  the request parameters of GetControlPolicy  GetControlPolicyRequest
  * @return GetControlPolicyResponse
 */
async function getControlPolicy(request: GetControlPolicyRequest): GetControlPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetControlPolicy', 'POST', '/', 'json', false, 'json', request);
}

model GetControlPolicyEnablementStatusRequest {
}

model GetControlPolicyEnablementStatusResponseBody = {
  enablementStatus?: string(name='EnablementStatus', description='The status of the Control Policy feature. Valid values:

*   Enabled: The Control Policy feature is enabled.
*   PendingEnable: The Control Policy feature is being enabled.
*   Disabled: The Control Policy feature is disabled.
*   PendingDisable: The Control Policy feature is being disabled.', example='Disabled'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1DC39A4E-3B52-4EFE-9F93-4897D7FFA0C4'),
}

model GetControlPolicyEnablementStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetControlPolicyEnablementStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetControlPolicyEnablementStatus  GetControlPolicyEnablementStatusRequest
  * @return GetControlPolicyEnablementStatusResponse
 */
async function getControlPolicyEnablementStatus(request: GetControlPolicyEnablementStatusRequest): GetControlPolicyEnablementStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetControlPolicyEnablementStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetFolderRequest {
  folderId: string(name='FolderId', description='The ID of the folder.

This parameter is required.', example='fd-Jyl5U7****', position='Query'),
}

model GetFolderResponseBody = {
  folder?: {
    createTime?: string(name='CreateTime', description='The time when the folder was created.', example='2021-06-15T06:39:08.521Z'),
    folderId?: string(name='FolderId', description='The ID of the folder.', example='fd-Jyl5U7****'),
    folderName?: string(name='FolderName', description='The name of the folder.', example='Applications'),
    parentFolderId?: string(name='ParentFolderId', description='The ID of the parent folder.', example='r-Wm****'),
    resourceDirectoryPath?: string(name='ResourceDirectoryPath', description='The path of the folder in the resource directory.'),
  }(name='Folder', description='The information of the folder.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C2CBCA30-C8DD-423E-B4AD-4FB694C9180C'),
}

model GetFolderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFolderResponseBody(name='body'),
}

/**
  * @description In this example, the information of the folder `fd-Jyl5U7****` is queried.
  * @param request  the request parameters of GetFolder  GetFolderRequest
  * @return GetFolderResponse
 */
async function getFolder(request: GetFolderRequest): GetFolderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFolder', 'POST', '/', 'json', false, 'json', request);
}

model GetHandshakeRequest {
  handshakeId: string(name='HandshakeId', description='The ID of the invitation.

This parameter is required.', example='h-ycm4rp****', position='Query'),
}

model GetHandshakeResponseBody = {
  handshake?: {
    createTime?: string(name='CreateTime', description='The time when the invitation was created. The time is displayed in UTC.', example='2018-08-10T09:55:41Z'),
    expireTime?: string(name='ExpireTime', description='The time when the invitation expires. The time is displayed in UTC.', example='2018-08-24T09:55:41Z'),
    handshakeId?: string(name='HandshakeId', description='The ID of the invitation.', example='h-ycm4rp****'),
    invitedAccountRealName?: string(name='InvitedAccountRealName', description='The real-name verification information of the invitee.

>  This parameter is available only when an invitee calls this operation.', example='Alice'),
    masterAccountId?: string(name='MasterAccountId', description='The ID of the management account of the resource directory.', example='172841235500****'),
    masterAccountName?: string(name='MasterAccountName', description='The name of the management account of the resource directory.', example='company@example.com'),
    masterAccountRealName?: string(name='MasterAccountRealName', description='The real-name verification information of the management account of the resource directory.

>  This parameter is available only when an invitee calls this operation.', example='company'),
    modifyTime?: string(name='ModifyTime', description='The time when the invitation was modified. The time is displayed in UTC.', example='2018-08-10T09:55:41Z'),
    note?: string(name='Note', description='The comment on the invitation.', example='Welcome'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', description='The ID of the resource directory.', example='rd-abcdef****'),
    status?: string(name='Status', description='The status of the invitation. Valid values:

*   Pending: The invitation is waiting for confirmation.
*   Accepted: The invitation is accepted.
*   Cancelled: The invitation is canceled.
*   Declined: The invitation is rejected.
*   Expired: The invitation expires.', example='Pending'),
    targetEntity?: string(name='TargetEntity', description='The ID or logon email address of the invited account.', example='someone@example.com'),
    targetType?: string(name='TargetType', description='The type of the invited account. Valid values:

*   Account: indicates the ID of the account.
*   Email: indicates the logon email address of the account.', example='Email'),
  }(name='Handshake', description='The information of the invitation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model GetHandshakeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHandshakeResponseBody(name='body'),
}

/**
  * @description In this example, the information of the invitation whose ID is `h-ycm4rp****` is queried.
  * @param request  the request parameters of GetHandshake  GetHandshakeRequest
  * @return GetHandshakeResponse
 */
async function getHandshake(request: GetHandshakeRequest): GetHandshakeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetHandshake', 'POST', '/', 'json', false, 'json', request);
}

model GetPayerForAccountRequest {
  accountId: string(name='AccountId', description='The ID of the account.

This parameter is required.', example='12323344****', position='Query'),
}

model GetPayerForAccountResponseBody = {
  payerAccountId?: string(name='PayerAccountId', description='The ID of the settlement account.', example='172841235500****'),
  payerAccountName?: string(name='PayerAccountName', description='The name of the settlement account.', example='Alice'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model GetPayerForAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPayerForAccountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPayerForAccount  GetPayerForAccountRequest
  * @return GetPayerForAccountResponse
 */
async function getPayerForAccount(request: GetPayerForAccountRequest): GetPayerForAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPayerForAccount', 'POST', '/', 'json', false, 'json', request);
}

model GetPolicyRequest {
  language?: string(name='Language', description='The language that is used to return the description of the system policy. Valid values:

*   en: English
*   zh-CN: Chinese
*   ja: Japanese', example='zh-CN', position='Query'),
  policyName: string(name='PolicyName', description='The name of the policy.

The name must be 1 to 128 characters in length and can contain letters, digits, and hyphens (-).

This parameter is required.', example='OSS-Administrator', position='Query'),
  policyType: string(name='PolicyType', description='The type of the policy. Valid values:

*   Custom: custom policy
*   System: system policy

This parameter is required.', example='Custom', position='Query'),
}

model GetPolicyResponseBody = {
  policy?: {
    attachmentCount?: int32(name='AttachmentCount', description='The number of times the policy is referenced.', example='0'),
    createDate?: string(name='CreateDate', description='The time when the policy was created.', example='2015-01-23T12:33:18Z'),
    defaultVersion?: string(name='DefaultVersion', description='The default version of the policy.', example='v1'),
    description?: string(name='Description', description='The description of the policy.', example='OSS administrator'),
    policyDocument?: string(name='PolicyDocument', description='The document of the policy.', example='{ "Statement": [{ "Action": ["oss:*"], "Effect": "Allow", "Resource": ["acs:oss:*:*:*"]}], "Version": "1"}'),
    policyName?: string(name='PolicyName', description='The name of the policy.', example='OSS-Administrator'),
    policyType?: string(name='PolicyType', description='The type of the policy. Valid values:

*   Custom: custom policy
*   System: system policy', example='Custom'),
    updateDate?: string(name='UpdateDate', description='The time when the policy was updated.', example='2016-01-23T12:33:18Z'),
  }(name='Policy', description='The information of the policy.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='697852FB-50D7-44D9-9774-530C31EAC572'),
}

model GetPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPolicy  GetPolicyRequest
  * @return GetPolicyResponse
 */
async function getPolicy(request: GetPolicyRequest): GetPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPolicy', 'POST', '/', 'json', false, 'json', request);
}

model GetPolicyVersionRequest {
  policyName: string(name='PolicyName', description='The name of the policy.

The name must be 1 to 128 characters in length and can contain letters, digits, and hyphens (-).

This parameter is required.', example='OSS-Administrator', position='Query'),
  policyType: string(name='PolicyType', description='The type of the policy. Valid values:

*   Custom: custom policy
*   System: system policy

This parameter is required.', example='Custom', position='Query'),
  versionId: string(name='VersionId', description='The ID of the policy version.

This parameter is required.', example='v3', position='Query'),
}

model GetPolicyVersionResponseBody = {
  policyVersion?: {
    createDate?: string(name='CreateDate', description='The time when the policy version was created.', example='2015-01-23T12:33:18Z'),
    isDefaultVersion?: boolean(name='IsDefaultVersion', description='Indicates whether the policy version is the default version.', example='false'),
    policyDocument?: string(name='PolicyDocument', description='The document of the policy.', example='{ \\"Statement\\": [{ \\"Action\\": [\\"oss:*\\"], \\"Effect\\": \\"Allow\\", \\"Resource\\": [\\"acs:oss:*:*:*\\"]}], \\"Version\\": \\"1\\"}'),
    versionId?: string(name='VersionId', description='The ID of the policy version.', example='v3'),
  }(name='PolicyVersion', description='The information of the policy version.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model GetPolicyVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPolicyVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPolicyVersion  GetPolicyVersionRequest
  * @return GetPolicyVersionResponse
 */
async function getPolicyVersion(request: GetPolicyVersionRequest): GetPolicyVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPolicyVersion', 'POST', '/', 'json', false, 'json', request);
}

model GetResourceDirectoryRequest {
}

model GetResourceDirectoryResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CD76D376-2517-4924-92C5-DBC52262F93A'),
  resourceDirectory?: {
    controlPolicyStatus?: string(name='ControlPolicyStatus', description='The status of the Control Policy feature. Valid values:

*   Enabled: The feature is enabled.
*   PendingEnable: The feature is being enabled.
*   Disabled: The feature is disabled.
*   PendingDisable: The feature is being disabled.', example='Enabled'),
    createTime?: string(name='CreateTime', description='The time when the resource directory was enabled.', example='2019-02-18T15:32:10.473Z'),
    identityInformation?: string(name='IdentityInformation', description='The real-name verification information.', example='\\*\\*\\* Co., Ltd.'),
    masterAccountId?: string(name='MasterAccountId', description='The ID of the management account.', example='172845045600****'),
    masterAccountName?: string(name='MasterAccountName', description='The name of the management account.', example='aliyun-admin'),
    memberDeletionStatus?: string(name='MemberDeletionStatus', description='The status of the member deletion feature. Valid values:

*   Enabled: The feature is enabled. You can call the [DeleteAccount](https://help.aliyun.com/document_detail/311546.html) operation to delete members of the resource account type.
*   Disabled: The feature is disabled. You cannot delete members of the resource account type.', example='Enabled'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', description='The ID of the resource directory.', example='rd-St****'),
    rootFolderId?: string(name='RootFolderId', description='The ID of the Root folder.', example='r-Zo****'),
  }(name='ResourceDirectory', description='The information of the resource directory.'),
}

model GetResourceDirectoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetResourceDirectoryResponseBody(name='body'),
}

/**
  * @description This topic provides an example on how to use a management account to call the API operation to query the information of the resource directory that is enabled by using the management account.
  * @param request  the request parameters of GetResourceDirectory  GetResourceDirectoryRequest
  * @return GetResourceDirectoryResponse
 */
async function getResourceDirectory(request: GetResourceDirectoryRequest): GetResourceDirectoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetResourceDirectory', 'POST', '/', 'json', false, 'json', request);
}

model GetResourceGroupRequest {
  includeTags?: boolean(name='IncludeTags', description='The ID of the request.', example='true', position='Query'),
  resourceGroupId: string(name='ResourceGroupId', description='Specifies whether to return the information of tags. Valid values:

*   false (default value)
*   true

This parameter is required.', example='rg-9gLOoK****', position='Query'),
}

model GetResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The information of the resource group.', example='2D69A58F-345C-4FDE-88E4-BF5189484043'),
  resourceGroup?: {
    accountId?: string(name='AccountId', description='The identifier of the resource group.', example='123456789****'),
    createDate?: string(name='CreateDate', description='The ID of the resource group.', example='2015-01-23T12:33:18Z'),
    displayName?: string(name='DisplayName', description='The status of the resource group. Valid values:

*   Creating: The resource group is being created.
*   OK: The resource group is created.
*   PendingDelete: The resource group is waiting to be deleted.', example='my-project'),
    id?: string(name='Id', description='The tags that are added to the resource group.', example='rg-9gLOoK****'),
    name?: string(name='Name', description='The time when the resource group was created. The time is displayed in UTC.', example='my-project'),
    regionStatuses?: {
      regionStatus?: [ 
      {
        regionId?: string(name='RegionId', description='The ID of the Alibaba Cloud account to which the resource group belongs.', example='cn-qingdao'),
        status?: string(name='Status', description='The region ID.', example='OK'),
      }
    ](name='RegionStatus')
    }(name='RegionStatuses', description='The status of the resource group. Valid values:

*   Creating: The resource group is being created.
*   OK: The resource group is created.
*   PendingDelete: The resource group is waiting to be deleted.
*   Deleting: The resource group is being deleted.'),
    status?: string(name='Status', description='The status of the resource group in all regions.', example='OK'),
    tags?: {
      tag?: [ 
      {
        tagKey?: string(name='TagKey', description='The tag value.', example='k1'),
        tagValue?: string(name='TagValue', example='v1'),
      }
    ](name='Tag')
    }(name='Tags', description='The tag key.'),
  }(name='ResourceGroup', description='The display name of the resource group.'),
}

model GetResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetResourceGroupResponseBody(name='body'),
}

/**
  * @description For more information about common request parameters, see [Common parameters](https://help.aliyun.com/document_detail/159973.html).
  * @param request  the request parameters of GetResourceGroup  GetResourceGroupRequest
  * @return GetResourceGroupResponse
 */
async function getResourceGroup(request: GetResourceGroupRequest): GetResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model GetRoleRequest {
  language?: string(name='Language', description='The language that is used to return the description of the RAM role. Valid values:

*   en: English
*   zh-CN: Chinese
*   ja: Japanese', example='zh-CN', position='Query'),
  roleName: string(name='RoleName', description='The name of the RAM role.

The name must be 1 to 64 characters in length and can contain letters, digits, periods (.), and hyphens (-).

This parameter is required.', example='ECSAdmin', position='Query'),
}

model GetRoleResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  role?: {
    arn?: string(name='Arn', description='The Alibaba Cloud Resource Name (ARN) of the RAM role.', example='acs:ram::123456789012****:role/ECSAdmin'),
    assumeRolePolicyDocument?: string(name='AssumeRolePolicyDocument', description='The document of the policy that specifies the trusted entity to assume the RAM role.', example='{ \\"Statement\\": [ { \\"Action\\": \\"sts:AssumeRole\\", \\"Effect\\": \\"Allow\\", \\"Principal\\": { \\"RAM\\": \\"acs:ram::12345678901234****:root\\" } } ], \\"Version\\": \\"1\\" }'),
    createDate?: string(name='CreateDate', description='The time when the RAM role was created.', example='2015-01-23T12:33:18Z'),
    description?: string(name='Description', description='The description of the RAM role.', example='ECS administrator'),
    isServiceLinkedRole?: boolean(name='IsServiceLinkedRole', description='Indicates whether the RAM role is a service linked role.', example='true'),
    latestDeletionTask?: {
      createDate?: string(name='CreateDate', description='The time when the deletion task was created.', example='2018-10-23T12:33:18Z'),
      deletionTaskId?: string(name='DeletionTaskId', description='The ID of the deletion task.', example='ECSAdmin/cc61514b-26eb-4453-ab53-b142eb702a3d'),
    }(name='LatestDeletionTask', description='The information of the most recent deletion task.'),
    maxSessionDuration?: long(name='MaxSessionDuration', description='The maximum session duration of the RAM role.', example='3600'),
    roleId?: string(name='RoleId', description='The ID of the RAM role.', example='90123456789****'),
    roleName?: string(name='RoleName', description='The name of the RAM role.', example='ECSAdmin'),
    rolePrincipalName?: string(name='RolePrincipalName', description='The name of the RAM role after authorization.', example='ECSAdmin@role.123456.onaliyunservice.com'),
    updateDate?: string(name='UpdateDate', description='The time when the RAM role was updated.', example='2016-01-23T12:33:18Z'),
  }(name='Role', description='The information of the RAM role.'),
}

model GetRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRoleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetRole  GetRoleRequest
  * @return GetRoleResponse
 */
async function getRole(request: GetRoleRequest): GetRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRole', 'POST', '/', 'json', false, 'json', request);
}

model GetServiceLinkedRoleDeletionStatusRequest {
  deletionTaskId?: string(name='DeletionTaskId', description='The ID of the deletion task.', example='task/acs-service-role/hdr.aliyuncs.com/AliyunServiceRoleForHdr/c4d22c52-247f-4ee1-83a2-6c0460bd****', position='Query'),
}

model GetServiceLinkedRoleDeletionStatusResponseBody = {
  reason?: {
    message?: string(name='Message', description='Failure information.', example='Service-Linked Role acs:ram::196813227629****:role/aliyunserviceroleforhdr cannot be deleted as it is in use by hdr.aliyuncs.com.'),
    roleUsages?: {
      roleUsage?: [ 
      {
        region?: string(name='Region', description='The IDs of the regions in which the resources are to be queried.', example='global'),
        resources?: {
          resource?: [ string ](name='Resource')
        }(name='Resources', description='The returned resources.'),
      }
    ](name='RoleUsage')
    }(name='RoleUsages', description='Use resource information of the service linked role.'),
  }(name='Reason', description='The reason why the deletion task failed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='07194EB1-DB50-4513-A51D-99B30D635AEF'),
  status?: string(name='Status', description='The status of the task.

- SUCCEEDED
- IN_PROGRESS
- FAILED
- NOT_STARTED
- INTERNAL_ERROR', example='FAILED'),
}

model GetServiceLinkedRoleDeletionStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetServiceLinkedRoleDeletionStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetServiceLinkedRoleDeletionStatus  GetServiceLinkedRoleDeletionStatusRequest
  * @return GetServiceLinkedRoleDeletionStatusResponse
 */
async function getServiceLinkedRoleDeletionStatus(request: GetServiceLinkedRoleDeletionStatusRequest): GetServiceLinkedRoleDeletionStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetServiceLinkedRoleDeletionStatus', 'POST', '/', 'json', false, 'json', request);
}

model InitResourceDirectoryRequest {
}

model InitResourceDirectoryResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CD76D376-2517-4924-92C5-DBC52262F93A'),
  resourceDirectory?: {
    createTime?: string(name='CreateTime', description='The time when the resource directory was enabled.', example='2019-02-18T15:32:10.473Z'),
    masterAccountId?: string(name='MasterAccountId', description='The ID of the enterprise management account.', example='172841235500****'),
    masterAccountName?: string(name='MasterAccountName', description='The name of the enterprise management account.', example='aliyun-****'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', description='The ID of the resource directory.', example='rd-Ss****'),
    rootFolderId?: string(name='RootFolderId', description='The ID of the root folder.', example='r-Zo****'),
  }(name='ResourceDirectory', description='The information of the resource directory.'),
}

model InitResourceDirectoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InitResourceDirectoryResponseBody(name='body'),
}

/**
  * @description > 
  * *   An account can be used to enable a resource directory only after it passes enterprise real-name verification. An account that only passed individual real-name verification cannot be used to enable a resource directory.
  * *   We recommend that you only use the enterprise management account as the administrator of the resource directory. Do not use the enterprise management account to purchase cloud resources.
  * @param request  the request parameters of InitResourceDirectory  InitResourceDirectoryRequest
  * @return InitResourceDirectoryResponse
 */
async function initResourceDirectory(request: InitResourceDirectoryRequest): InitResourceDirectoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InitResourceDirectory', 'POST', '/', 'json', false, 'json', request);
}

model InviteAccountToResourceDirectoryRequest {
  note?: string(name='Note', description='The comment on the invitation.

The comment can be up to 1,024 characters in length.', example='Welcome', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='A tag key.', example='k1'),
      value?: string(name='Value', description='A tag value.', example='v1'),
    }
  ](name='Tag', description='The tag key and value.', position='Query'),
  targetEntity: string(name='TargetEntity', description='The ID or logon email address of the account that you want to invite.

This parameter is required.', example='someone@example.com', position='Query'),
  targetType: string(name='TargetType', description='The type of the account. Valid values:

*   Account: indicates the ID of the account.
*   Email: indicates the logon email address of the account.

This parameter is required.', example='Email', position='Query'),
}

model InviteAccountToResourceDirectoryResponseBody = {
  handshake?: {
    createTime?: string(name='CreateTime', description='The time when the invitation was created. The time is displayed in UTC.', example='2018-08-10T09:55:41Z'),
    expireTime?: string(name='ExpireTime', description='The time when the invitation expires. The time is displayed in UTC.', example='2018-08-24T09:55:41Z'),
    handshakeId?: string(name='HandshakeId', description='The ID of the invitation.', example='h-ycm4rp****'),
    masterAccountId?: string(name='MasterAccountId', description='The ID of the management account of the resource directory.', example='172841235500****'),
    masterAccountName?: string(name='MasterAccountName', description='The name of the management account of the resource directory.', example='Alice'),
    modifyTime?: string(name='ModifyTime', description='The time when the invitation was modified. The time is displayed in UTC.', example='2018-08-10T09:55:41Z'),
    note?: string(name='Note', description='The comment on the invitation.', example='Welcome'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', description='The ID of the resource directory.', example='rd-abcdef****'),
    status?: string(name='Status', description='The status of the invitation.

*   Pending: The invitation is waiting for confirmation.
*   Accepted: The invitation is accepted.
*   Cancelled: The invitation is canceled.
*   Declined: The invitation is rejected.
*   Expired: The invitation expires.', example='Pending'),
    targetEntity?: string(name='TargetEntity', description='The ID or logon email address of the invited account.', example='someone@example.com'),
    targetType?: string(name='TargetType', description='The type of the invited account. Valid values:

*   Account: indicates the ID of the account.
*   Email: indicates the logon email address of the account.', example='Email'),
  }(name='Handshake', description='The information of the invitation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model InviteAccountToResourceDirectoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InviteAccountToResourceDirectoryResponseBody(name='body'),
}

/**
  * @description This topic provides an example on how to call the API operation to invite the account `someone@example.com` to join a resource directory.
  * @param request  the request parameters of InviteAccountToResourceDirectory  InviteAccountToResourceDirectoryRequest
  * @return InviteAccountToResourceDirectoryResponse
 */
async function inviteAccountToResourceDirectory(request: InviteAccountToResourceDirectoryRequest): InviteAccountToResourceDirectoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InviteAccountToResourceDirectory', 'POST', '/', 'json', false, 'json', request);
}

model ListAccountsRequest {
  includeTags?: boolean(name='IncludeTags', description='Specifies whether to return the information of tags. Valid values:

*   false (default value)
*   true', example='true', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Valid values: 1 to 100. Default value: 10.', example='10', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='A tag key.', example='tag_key'),
      value?: string(name='Value', description='A tag value.', example='tag_value'),
    }
  ](name='Tag', description='The tag key and value.', position='Query'),
}

model ListAccountsResponseBody = {
  accounts?: {
    account?: [ 
    {
      accountId?: string(name='AccountId', description='The Alibaba Cloud account ID of the member.', example='181761095690****'),
      displayName?: string(name='DisplayName', description='The display name of the member.', example='test'),
      folderId?: string(name='FolderId', description='The ID of the folder.', example='fd-QRzuim****'),
      joinMethod?: string(name='JoinMethod', description='The way in which the member joins the resource directory. Valid values:

*   invited: The member is invited to join the resource directory.
*   created: The member is directly created in the resource directory.', example='created'),
      joinTime?: string(name='JoinTime', description='The time when the member joined the resource directory. The time is displayed in UTC.', example='2021-01-18T08:01:50.522Z'),
      modifyTime?: string(name='ModifyTime', description='The time when the member was modified. The time is displayed in UTC.', example='2021-01-18T08:04:37.668Z'),
      resourceDirectoryId?: string(name='ResourceDirectoryId', description='The ID of the resource directory.', example='rd-3G****'),
      resourceDirectoryPath?: string(name='ResourceDirectoryPath', description='The path of the member in the resource directory.'),
      status?: string(name='Status', description='The status of the member. Valid values:

*   CreateSuccess: The member is created.
*   PromoteVerifying: The upgrade of the member is being confirmed.
*   PromoteFailed: The upgrade of the member fails.
*   PromoteExpired: The upgrade of the member expires.
*   PromoteCancelled: The upgrade of the member is canceled.
*   PromoteSuccess: The member is upgraded.
*   InviteSuccess: The member accepts the invitation.', example='CreateSuccess'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', description='A tag key.', example='tag_key'),
          value?: string(name='Value', description='A tag value.', example='tag_value'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags that are added to the member.'),
      type?: string(name='Type', description='The type of the member. Valid values:

*   CloudAccount: cloud account
*   ResourceAccount: resource account', example='ResourceAccount'),
    }
  ](name='Account')
  }(name='Accounts', description='The members returned.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='5'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7B8A4E7D-6CFF-471D-84DF-195A7A241ECB'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model ListAccountsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAccountsResponseBody(name='body'),
}

/**
  * @description You can use only the management account of a resource directory or a delegated administrator account of a trusted service to call this operation.
  * @param request  the request parameters of ListAccounts  ListAccountsRequest
  * @return ListAccountsResponse
 */
async function listAccounts(request: ListAccountsRequest): ListAccountsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAccounts', 'POST', '/', 'json', false, 'json', request);
}

model ListAccountsForParentRequest {
  includeTags?: boolean(name='IncludeTags', description='Specifies whether to return the information of tags. Valid values:

false (default value)

true', example='true', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Valid values: 1 to 100. Default value: 10.', example='10', position='Query'),
  parentFolderId?: string(name='ParentFolderId', description='The ID of the folder.', example='fd-bVaRIG****', position='Query'),
  queryKeyword?: string(name='QueryKeyword', description='The keyword used for the query, such as the display name of a member.

Fuzzy match is supported.', example='admin', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='A tag key.', example='tag_key'),
      value?: string(name='Value', description='A tag value.', example='tag_value'),
    }
  ](name='Tag', description='The tag key and value.', position='Query'),
}

model ListAccountsForParentResponseBody = {
  accounts?: {
    account?: [ 
    {
      accountId?: string(name='AccountId', description='The Alibaba Cloud account ID of the member.', example='184311716100****'),
      displayName?: string(name='DisplayName', description='The display name of the member.', example='admin'),
      folderId?: string(name='FolderId', description='The ID of the folder.', example='fd-bVaRIG****'),
      joinMethod?: string(name='JoinMethod', description='The way in which the member joins the resource directory.

*   invited: The member is invited to join the resource directory.
*   created: The member is directly created in the resource directory.', example='created'),
      joinTime?: string(name='JoinTime', description='The time when the member joined the resource directory. The time is displayed in UTC.', example='2015-01-23T12:33:18Z'),
      modifyTime?: string(name='ModifyTime', description='The time when the member was modified. The time is displayed in UTC.', example='2015-01-23T12:33:18Z'),
      resourceDirectoryId?: string(name='ResourceDirectoryId', description='The ID of the resource directory.', example='rd-k4****'),
      status?: string(name='Status', description='The status of the member. Valid values:

*   CreateSuccess: The member is created.
*   PromoteVerifying: The upgrade of the member is being confirmed.
*   PromoteFailed: The upgrade of the member fails.
*   PromoteExpired: The upgrade of the member expires.
*   PromoteCancelled: The upgrade of the member is canceled.
*   PromoteSuccess: The member is upgraded.
*   InviteSuccess: The member accepts the invitation.', example='CreateSuccess'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', description='A tag key.', example='tag_key'),
          value?: string(name='Value', description='A tag value.', example='tag_value'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags that are added to the member.'),
      type?: string(name='Type', description='The type of the member.

*   CloudAccount: cloud account
*   ResourceAccount: resource account', example='ResourceAccount'),
    }
  ](name='Account')
  }(name='Accounts', description='The information of the members.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='5'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7B8A4E7D-6CFF-471D-84DF-195A7A241ECB'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model ListAccountsForParentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAccountsForParentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAccountsForParent  ListAccountsForParentRequest
  * @return ListAccountsForParentResponse
 */
async function listAccountsForParent(request: ListAccountsForParentRequest): ListAccountsForParentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAccountsForParent', 'POST', '/', 'json', false, 'json', request);
}

model ListAncestorsRequest {
  childId: string(name='ChildId', description='The ID of the child folder.

This parameter is required.', example='fd-i1c9nr****', position='Query'),
}

model ListAncestorsResponseBody = {
  folders?: {
    folder?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the folder was created.', example='2019-01-18T10:03:35.217Z'),
      folderId?: string(name='FolderId', description='The ID of the folder.', example='r-b1****'),
      folderName?: string(name='FolderName', description='The name of the folder.', example='root'),
    }
  ](name='Folder')
  }(name='Folders', description='The information of the folders.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='83AFBEB6-DC03-406E-9686-867461FF6698'),
}

model ListAncestorsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAncestorsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAncestors  ListAncestorsRequest
  * @return ListAncestorsResponse
 */
async function listAncestors(request: ListAncestorsRequest): ListAncestorsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAncestors', 'POST', '/', 'json', false, 'json', request);
}

model ListAssociatedTransferSettingRequest {
}

model ListAssociatedTransferSettingResponseBody = {
  associatedTransferSetting?: {
    accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account.', example='121998723923****'),
    enableExistingResourcesTransfer?: string(name='EnableExistingResourcesTransfer', description='Indicates whether the Transfer Existing Associated Resources feature is enabled. Valid values:

*   false
*   true', example='true'),
    ruleSettings?: [ 
      {
        associatedResourceType?: string(name='AssociatedResourceType', description='The type of the associated resource.', example='disk'),
        associatedService?: string(name='AssociatedService', description='The service code of the associated resource.', example='ecs'),
        masterResourceType?: string(name='MasterResourceType', description='The type of the primary resource.', example='instance'),
        masterService?: string(name='MasterService', description='The service code of the primary resource.', example='ecs'),
        status?: string(name='Status', description='The status of the Transfer Associated Resources feature. Valid values:

*   Enable: enabled
*   Disable: disabled', example='Enable'),
      }
    ](name='RuleSettings', description='The settings of transfer rules.'),
    status?: string(name='Status', description='The status of the Transfer Associated Resources feature. Valid values:

*   Enable: enabled
*   Disable: disabled', example='Enable'),
  }(name='AssociatedTransferSetting', description='The settings of the Transfer Associated Resources feature.'),
  requestId?: string(name='RequestId', description='The request ID.', example='7556FD65-45D2-5C45-9FC9-A7DE831C775C'),
}

model ListAssociatedTransferSettingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAssociatedTransferSettingResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAssociatedTransferSetting  ListAssociatedTransferSettingRequest
  * @return ListAssociatedTransferSettingResponse
 */
async function listAssociatedTransferSetting(request: ListAssociatedTransferSettingRequest): ListAssociatedTransferSettingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAssociatedTransferSetting', 'POST', '/', 'json', false, 'json', request);
}

model ListAutoGroupingRulesRequest {
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return for a single request. Valid values: 1 to 50.', example='10', minimum=0, maximum=50, position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request. You must specify the token that is obtained from the previous query as the value of NextToken.', example='TGlzdFJlc291cm****', position='Query'),
  ruleId?: string(name='RuleId', description='The ID of the rule.', example='gr-acfo******hy6a', position='Query'),
  ruleName?: string(name='RuleName', description='The name of the rule.', example='Custom Transfer Rule for Online Resources of Project A', position='Query'),
  ruleType?: string(name='RuleType', description='The type of the rule. Valid values:

*   custom_condition: custom transfer rule
*   associated_transfer: transfer rule for associated resources', example='custom_condition', position='Query'),
}

model ListAutoGroupingRulesResponseBody = {
  maxResults?: int32(name='MaxResults', description='The maximum number of entries returned for a single request. Valid values: 1 to 50.', example='10'),
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results.', example='TGlzdFJlc291cm****'),
  requestId?: string(name='RequestId', description='The request ID.', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
  rules?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the rule was created.', example='2025-01-01T10:00:00+08:00'),
      excludeRegionIdsScope?: string(name='ExcludeRegionIdsScope', description='The IDs of excluded regions. Multiple IDs are separated by commas (,).', example='cn-hangzhou,cn-shanghai'),
      excludeResourceGroupIdsScope?: string(name='ExcludeResourceGroupIdsScope', description='The IDs of excluded resource groups. Multiple IDs are separated by commas (,).', example='rg-aekz****ql4b5ea,rg-aek2****akfxykq'),
      excludeResourceIdsScope?: string(name='ExcludeResourceIdsScope', description='The IDs of excluded resources. Multiple IDs are separated by commas (,).', example='i-2zee******ym49kfmwis,vpc-5ts6******fnw493g849a'),
      excludeResourceTypesScope?: string(name='ExcludeResourceTypesScope', description='The excluded resource types. Multiple resource types are separated by commas (,).', example='ecs.instance,vpc.vpc'),
      modifyTime?: string(name='ModifyTime', description='The time when the rule was updated.', example='2025-01-01T10:00:00+08:00'),
      regionIdsScope?: string(name='RegionIdsScope', description='The IDs of regions. Multiple IDs are separated by commas (,).', example='cn-hangzhou,cn-shanghai'),
      resourceGroupIdsScope?: string(name='ResourceGroupIdsScope', description='The IDs of resource groups. Multiple IDs are separated by commas (,).', example='rg-aekz****ql4b5ea,rg-aek2****akfxykq'),
      resourceIdsScope?: string(name='ResourceIdsScope', description='The IDs of resources. Multiple IDs are separated by commas (,).', example='i-2zee******ym49kfmwis,vpc-5ts6******fnw493g849a'),
      resourceTypesScope?: string(name='ResourceTypesScope', description='The resource types. Multiple resource types are separated by commas (,).', example='ecs.instance,vpc.vpc'),
      ruleContents?: [ 
        {
          autoGroupingScopeCondition?: string(name='AutoGroupingScopeCondition', description='The condition for the range of resources that are automatically transferred.', example='{"children":[{"desired":"{\\"env\\":\\"online\\", \\"project\\":\\"A\\"}","featurePath":"$.tags","featureSource":"RESOURCE","operator":"TagMatchAll"}],"operator":"and"}'),
          ruleContentId?: string(name='RuleContentId', description='The ID of the content record.', example='grc-acfo******fwybpq'),
          targetResourceGroupCondition?: string(name='TargetResourceGroupCondition', description='The condition for the destination resource group.', example='{"children":[{"desired":"rg-aek2********qcy","featurePath":"$.resourceGroupId","featureSource":"RESOURCE","operator":"StringEquals"}],"operator":"and"}'),
        }
      ](name='RuleContents', description='The content records of the rule.'),
      ruleDesc?: string(name='RuleDesc', description='The description of the rule.', example='Transfer resources to which the {"env": "online"} and {"project": "A"} tags are added to the resource group rg-aek2********qcy.'),
      ruleId?: string(name='RuleId', description='The ID of the rule.', example='gr-acfo******hy6a'),
      ruleName?: string(name='RuleName', description='The name of the rule.', example='Custom Transfer Rule for Online Resources of Project A'),
      ruleType?: string(name='RuleType', description='The type of the rule. Valid values:

*   custom_condition: custom transfer rule
*   associated_transfer: transfer rule for associated resources', example='custom_condition'),
    }
  ](name='Rules', description='The queried rules.'),
}

model ListAutoGroupingRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAutoGroupingRulesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAutoGroupingRules  ListAutoGroupingRulesRequest
  * @return ListAutoGroupingRulesResponse
 */
async function listAutoGroupingRules(request: ListAutoGroupingRulesRequest): ListAutoGroupingRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAutoGroupingRules', 'POST', '/', 'json', false, 'json', request);
}

model ListControlPoliciesRequest {
  language?: string(name='Language', description='The language in which you want to return the descriptions of the access control policies. Valid values:

- zh-CN (default value): Chinese
- en: English
- ja: Japanese

>  This parameter is valid only for system access control policies.', example='zh-CN', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. 

Page start from page 1. Default value: 1.', example='1', minimum=1, maximum=200000, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. 

Valid values: 1 to 100. Default value: 10.', example='10', minimum=1, maximum=100, position='Query'),
  policyType?: string(name='PolicyType', description='The type of the access control policy. Valid values:

- System: system access control policy
- Custom: custom access control policy', example='System', position='Query'),
}

model ListControlPoliciesResponseBody = {
  controlPolicies?: {
    controlPolicy?: [ 
    {
      attachmentCount?: string(name='AttachmentCount', description='The number of times that the access control policy is referenced.', example='44'),
      createDate?: string(name='CreateDate', description='The time when the access control policy was created.', example='2020-08-05T06:32:24Z'),
      description?: string(name='Description', description='The description of the access control policy.', example='System access control policy available for all operations on the cloud'),
      effectScope?: string(name='EffectScope', description='The effective scope of the access control policy. Valid values:

- All: The access control policy is in effect for Alibaba Cloud accounts, RAM users, and RAM roles.
- RAM: The access control policy is in effect only for RAM users and RAM roles.', example='All'),
      policyId?: string(name='PolicyId', description='The ID of the access control policy.', example='cp-FullAliyunAccess'),
      policyName?: string(name='PolicyName', description='The name of the access control policy.', example='FullAliyunAccess'),
      policyType?: string(name='PolicyType', description='The type of the access control policy. Valid values:

- System: system access control policy
- Custom: custom access control policy', example='System'),
      updateDate?: string(name='UpdateDate', description='The time when the access control policy was updated.', example='2020-08-05T06:32:24Z'),
    }
  ](name='ControlPolicy')
  }(name='ControlPolicies', description='The access control policies.'),
  pageNumber?: int32(name='PageNumber', description='The number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9424A34C-3471-45AD-B6AB-924BBDFE42F9'),
  totalCount?: int32(name='TotalCount', description='The number of access control policies.', example='1'),
}

model ListControlPoliciesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListControlPoliciesResponseBody(name='body'),
}

/**
  * @description This topic provides an example on how to call the API operation to query the system access control policies within a resource directory. The response shows that the resource directory has only one system access control policy. The policy is named `FullAliyunAccess`.
  * @param request  the request parameters of ListControlPolicies  ListControlPoliciesRequest
  * @return ListControlPoliciesResponse
 */
async function listControlPolicies(request: ListControlPoliciesRequest): ListControlPoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListControlPolicies', 'POST', '/', 'json', false, 'json', request);
}

model ListControlPolicyAttachmentsForTargetRequest {
  language?: string(name='Language', description='The language in which you want to return the descriptions of the access control policies. Valid values:

*   zh-CN (default value): Chinese
*   en: English
*   ja: Japanese

>  This parameter is valid only for system access control policies.', example='zh-CN', position='Query'),
  targetId: string(name='TargetId', description='The ID of the object whose access control policies you want to query. Access control policies can be attached to the following objects:

*   Root folder
*   Subfolders of the Root folder
*   Members

This parameter is required.', example='fd-ZDNPiT****', position='Query'),
}

model ListControlPolicyAttachmentsForTargetResponseBody = {
  controlPolicyAttachments?: {
    controlPolicyAttachment?: [ 
    {
      attachDate?: string(name='AttachDate', description='The time when the access control policy was attached.', example='2021-03-19T02:56:24Z'),
      description?: string(name='Description', description='The description of the access control policy.', example='ExampleControlPolicy'),
      effectScope?: string(name='EffectScope', description='The effective scope of the access control policy. Valid values:

*   All: The access control policy is in effect for Alibaba Cloud accounts, RAM users, and RAM roles.
*   RAM: The access control policy is in effect only for RAM users and RAM roles.', example='RAM'),
      policyId?: string(name='PolicyId', description='The ID of the access control policy.', example='cp-jExXAqIYkwHN****'),
      policyName?: string(name='PolicyName', description='The name of the access control policy.', example='ExampleControlPolicy'),
      policyType?: string(name='PolicyType', description='The type of the access control policy. Valid values:

*   System: system access control policy
*   Custom: custom access control policy', example='Custom'),
    }
  ](name='ControlPolicyAttachment')
  }(name='ControlPolicyAttachments', description='The attached access control policies.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C276B600-7B7A-49E8-938C-E16CFA955A82'),
}

model ListControlPolicyAttachmentsForTargetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListControlPolicyAttachmentsForTargetResponseBody(name='body'),
}

/**
  * @description This topic provides an example on how to call the API operation to query the access control policies that are attached to the folder `fd-ZDNPiT****`.
  * @param request  the request parameters of ListControlPolicyAttachmentsForTarget  ListControlPolicyAttachmentsForTargetRequest
  * @return ListControlPolicyAttachmentsForTargetResponse
 */
async function listControlPolicyAttachmentsForTarget(request: ListControlPolicyAttachmentsForTargetRequest): ListControlPolicyAttachmentsForTargetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListControlPolicyAttachmentsForTarget', 'POST', '/', 'json', false, 'json', request);
}

model ListDelegatedAdministratorsRequest {
  pageNumber?: long(name='PageNumber', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page.

Valid values: 1 to 100. Default value: 10.', example='10', position='Query'),
  servicePrincipal?: string(name='ServicePrincipal', description='The identifier of the trusted service.

For more information, see the `Trusted service identifier` column in [Supported trusted services](https://help.aliyun.com/document_detail/208133.html).', example='cloudfw.aliyuncs.com', position='Query'),
}

model ListDelegatedAdministratorsResponseBody = {
  accounts?: {
    account?: [ 
    {
      accountId?: string(name='AccountId', description='The ID of the member.', example='138660628348****'),
      delegationEnabledTime?: string(name='DelegationEnabledTime', description='The time when the member was specified as a delegated administrator account.', example='1616652684164'),
      displayName?: string(name='DisplayName', description='The display name of the member.', example='abc'),
      joinMethod?: string(name='JoinMethod', description='The way in which the member joins the resource directory. Valid values:

*   invited: The member is invited to join the resource directory.
*   created: The member is directly created in the resource directory.', example='created'),
      servicePrincipal?: string(name='ServicePrincipal', description='The identifier of the trusted service.', example='cloudfw.aliyuncs.com'),
    }
  ](name='Account')
  }(name='Accounts', description='The information of the delegated administrator accounts.'),
  pageNumber?: long(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='009C3A02-7D4B-416C-9CE7-548C91508F1E'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model ListDelegatedAdministratorsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDelegatedAdministratorsResponseBody(name='body'),
}

/**
  * @description This topic provides an example on how to call the API operation to query all delegated administrator accounts in a resource directory. The response shows that two delegated administrator accounts for Cloud Firewall exist in the resource directory.
  * @param request  the request parameters of ListDelegatedAdministrators  ListDelegatedAdministratorsRequest
  * @return ListDelegatedAdministratorsResponse
 */
async function listDelegatedAdministrators(request: ListDelegatedAdministratorsRequest): ListDelegatedAdministratorsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDelegatedAdministrators', 'POST', '/', 'json', false, 'json', request);
}

model ListDelegatedServicesForAccountRequest {
  accountId: string(name='AccountId', description='The ID of the member.

This parameter is required.', example='138660628348****', position='Query'),
}

model ListDelegatedServicesForAccountResponseBody = {
  delegatedServices?: {
    delegatedService?: [ 
    {
      delegationEnabledTime?: string(name='DelegationEnabledTime', description='The time when the member was specified as a delegated administrator account of the trusted service.', example='1616652684164'),
      servicePrincipal?: string(name='ServicePrincipal', description='The identification of the trusted service.', example='cloudfw.aliyuncs.com'),
      status?: string(name='Status', description='The status of the trusted service. Valid values:

*   ENABLED: enabled
*   DISABLED: disabled', example='ENABLED'),
    }
  ](name='DelegatedService')
  }(name='DelegatedServices', description='The trusted services.

>  If the value of this parameter is empty, the member is not specified as a delegated administrator account.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D9C03B94-9396-4794-A74B-13DC437556A6'),
}

model ListDelegatedServicesForAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDelegatedServicesForAccountResponseBody(name='body'),
}

/**
  * @description This topic provides an example on how to call the API operation to query the trusted services for which the member `138660628348****` is specified as a delegated administrator account. The response shows that the member is specified as a delegated administrator account of Cloud Firewall.
  * @param request  the request parameters of ListDelegatedServicesForAccount  ListDelegatedServicesForAccountRequest
  * @return ListDelegatedServicesForAccountResponse
 */
async function listDelegatedServicesForAccount(request: ListDelegatedServicesForAccountRequest): ListDelegatedServicesForAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDelegatedServicesForAccount', 'POST', '/', 'json', false, 'json', request);
}

model ListFoldersForParentRequest {
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Valid values: 1 to 100. Default value: 10.', example='10', position='Query'),
  parentFolderId?: string(name='ParentFolderId', description='The ID of the parent folder.

If you leave this parameter empty, the information of the first-level subfolders of the Root folder is queried.', example='r-b1****', position='Query'),
  queryKeyword?: string(name='QueryKeyword', description='The keyword used for the query, such as a folder name.

Fuzzy match is supported.', example='rdFolder', position='Query'),
}

model ListFoldersForParentResponseBody = {
  folders?: {
    folder?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the folder was created.', example='2015-01-23T12:33:18Z'),
      folderId?: string(name='FolderId', description='The ID of the folder.', example='rd-evic31****'),
      folderName?: string(name='FolderName', description='The name of the folder.', example='project-1'),
    }
  ](name='Folder')
  }(name='Folders', description='The information of the folders.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='5'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7B8A4E7D-6CFF-471D-84DF-195A7A241ECB'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model ListFoldersForParentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFoldersForParentResponseBody(name='body'),
}

/**
  * @description >  You can view the information of only the first-level subfolders of a folder.
  * @param request  the request parameters of ListFoldersForParent  ListFoldersForParentRequest
  * @return ListFoldersForParentResponse
 */
async function listFoldersForParent(request: ListFoldersForParentRequest): ListFoldersForParentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFoldersForParent', 'POST', '/', 'json', false, 'json', request);
}

model ListHandshakesForAccountRequest {
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Valid values: 1 to 100. Default value: 10.', example='10', position='Query'),
}

model ListHandshakesForAccountResponseBody = {
  handshakes?: {
    handshake?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the invitation was created. The time is displayed in UTC.', example='2018-08-10T09:55:41Z'),
      expireTime?: string(name='ExpireTime', description='The time when the invitation expires. The time is displayed in UTC.', example='2018-08-24T09:55:41Z'),
      handshakeId?: string(name='HandshakeId', description='The ID of the invitation.', example='h-4N57QZzCTtES****'),
      masterAccountId?: string(name='MasterAccountId', description='The ID of the management account of the resource directory.', example='172841235500****'),
      masterAccountName?: string(name='MasterAccountName', description='The name of the management account of the resource directory.', example='CompanyA'),
      modifyTime?: string(name='ModifyTime', description='The time when the invitation was modified. The time is displayed in UTC.', example='2018-08-10T09:55:41Z'),
      note?: string(name='Note', description='The comment on the invitation.', example='Welcome'),
      resourceDirectoryId?: string(name='ResourceDirectoryId', description='The ID of the resource directory.', example='rd-abcdef****'),
      status?: string(name='Status', description='The status of the invitation. Valid values:

*   Pending: The invitation is waiting for confirmation.
*   Accepted: The invitation is accepted.
*   Cancelled: The invitation is canceled.
*   Declined: The invitation is rejected.
*   Expired: The invitation expires.', example='Pending'),
      targetEntity?: string(name='TargetEntity', description='The ID or logon email address of the invited Alibaba Cloud account.', example='someone@example.com'),
      targetType?: string(name='TargetType', description='The type of the invited Alibaba Cloud account. Valid values:

*   Account: indicates the ID of the account.
*   Email: indicates the logon email address of the account.', example='Email'),
    }
  ](name='Handshake')
  }(name='Handshakes', description='The information of the invitations.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
  totalCount?: int32(name='TotalCount', description='The total number of invitations.', example='2'),
}

model ListHandshakesForAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHandshakesForAccountResponseBody(name='body'),
}

/**
  * @description This topic provides an example on how to call the API operation to query the invitations that are associated with the management account `172841235500****`. The response shows that two invitations are associated with the management account.
  * @param request  the request parameters of ListHandshakesForAccount  ListHandshakesForAccountRequest
  * @return ListHandshakesForAccountResponse
 */
async function listHandshakesForAccount(request: ListHandshakesForAccountRequest): ListHandshakesForAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHandshakesForAccount', 'POST', '/', 'json', false, 'json', request);
}

model ListHandshakesForResourceDirectoryRequest {
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Valid values: 1 to 100. Default value: 10.', example='10', position='Query'),
}

model ListHandshakesForResourceDirectoryResponseBody = {
  handshakes?: {
    handshake?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the invitation was created. The time is displayed in UTC.', example='2018-08-10T09:55:41Z'),
      expireTime?: string(name='ExpireTime', description='The time when the invitation expires. The time is displayed in UTC.', example='2018-08-24T09:55:41Z'),
      handshakeId?: string(name='HandshakeId', description='The ID of the invitation.', example='h-ycm4rp****'),
      masterAccountId?: string(name='MasterAccountId', description='The ID of the management account of the resource directory.', example='172841235500****'),
      masterAccountName?: string(name='MasterAccountName', description='The name of the management account of the resource directory.', example='Alice'),
      modifyTime?: string(name='ModifyTime', description='The time when the invitation was modified. The time is displayed in UTC.', example='2018-08-10T09:55:41Z'),
      note?: string(name='Note', description='The comment on the invitation.', example='Welcome'),
      resourceDirectoryId?: string(name='ResourceDirectoryId', description='The ID of the resource directory.', example='rd-abcdef****'),
      status?: string(name='Status', description='The status of the invitation. Valid values:

*   Pending: The invitation is waiting for confirmation.
*   Accepted: The invitation is accepted.
*   Cancelled: The invitation is canceled.
*   Declined: The invitation is rejected.
*   Expired: The invitation expires.', example='Pending'),
      targetEntity?: string(name='TargetEntity', description='The ID or logon email address of the invited account.', example='someone@example.com'),
      targetType?: string(name='TargetType', description='The type of the invited account. Valid values:

*   Account: indicates the ID of the account.
*   Email: indicates the logon email address of the account.', example='Email'),
    }
  ](name='Handshake')
  }(name='Handshakes', description='The information of the invitations.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model ListHandshakesForResourceDirectoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHandshakesForResourceDirectoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListHandshakesForResourceDirectory  ListHandshakesForResourceDirectoryRequest
  * @return ListHandshakesForResourceDirectoryResponse
 */
async function listHandshakesForResourceDirectory(request: ListHandshakesForResourceDirectoryRequest): ListHandshakesForResourceDirectoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHandshakesForResourceDirectory', 'POST', '/', 'json', false, 'json', request);
}

model ListPoliciesRequest {
  language?: string(name='Language', description='The language that is used to return the description of the system policy. Valid values:

*   en: English
*   zh-CN: Chinese
*   ja: Japanese', example='zh-CN', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Valid values: 1 to 100. Default value: 10.', example='10', position='Query'),
  policyType?: string(name='PolicyType', description='The type of the policy. If you do not specify this parameter, the system lists all types of policies. Valid values:

*   Custom: custom policy
*   System: system policy', example='Custom', position='Query'),
}

model ListPoliciesResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  policies?: {
    policy?: [ 
    {
      attachmentCount?: int32(name='AttachmentCount', description='The number of times the policy is referenced.', example='1'),
      createDate?: string(name='CreateDate', description='The time when the policy was created.', example='2015-01-23T12:33:18Z'),
      defaultVersion?: string(name='DefaultVersion', description='The default version of the policy.', example='v1'),
      description?: string(name='Description', description='The description of the policy.', example='OSS administrator'),
      policyName?: string(name='PolicyName', description='The name of the policy.', example='OSS-Administrator'),
      policyType?: string(name='PolicyType', description='The type of the policy. Valid values:

*   Custom: custom policy
*   System: system policy', example='Custom'),
      updateDate?: string(name='UpdateDate', description='The time when the policy was updated.', example='2016-02-11T18:39:12Z'),
    }
  ](name='Policy')
  }(name='Policies', description='The information of the policies.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7B8A4E7D-6CFF-471D-84DF-195A7A241ECB'),
  totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='2'),
}

model ListPoliciesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPoliciesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPolicies  ListPoliciesRequest
  * @return ListPoliciesResponse
 */
async function listPolicies(request: ListPoliciesRequest): ListPoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPolicies', 'POST', '/', 'json', false, 'json', request);
}

model ListPolicyAttachmentsRequest {
  language?: string(name='Language', description='The language that is used to return the description of the system policy. Valid values:

*   en: English
*   zh-CN: Chinese
*   ja: Japanese', example='zh-CN', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Valid values: 1 to 100. Default value: 10.', example='10', position='Query'),
  policyName?: string(name='PolicyName', description='The name of the policy.

The name must be 1 to 128 characters in length and can contain letters, digits, and hyphens (-).', example='AdministratorAccess', position='Query'),
  policyType?: string(name='PolicyType', description='The type of the policy. If you do not specify this parameter, the system lists all types of policies. Valid values:

*   Custom: custom policy
*   System: system policy', example='System', position='Query'),
  principalName?: string(name='PrincipalName', description='The name of the object to which the policy is attached.', example='alice@demo.onaliyun.com', position='Query'),
  principalType?: string(name='PrincipalType', description='The type of the object to which the policy is attached. If you do not specify this parameter, the system lists all types of objects. Valid values:

*   IMSUser: RAM user
*   IMSGroup: RAM user group
*   ServiceRole: RAM role', example='IMSUser', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group or the ID of the Alibaba Cloud account to which the resource group belongs. If you do not specify this parameter, the system lists all policy attachment records under the current account.', example='rg-001', position='Query'),
}

model ListPolicyAttachmentsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  policyAttachments?: {
    policyAttachment?: [ 
    {
      attachDate?: string(name='AttachDate', description='The time when the policy was attached.', example='2015-01-23T12:33:18Z'),
      description?: string(name='Description', description='The description of the policy.', example='The description of the policy.'),
      policyName?: string(name='PolicyName', description='The name of the policy.', example='AdministratorAccess'),
      policyType?: string(name='PolicyType', description='The type of the policy. Valid values:

*   Custom: custom policy
*   System: system policy', example='System'),
      principalName?: string(name='PrincipalName', description='The name of the object to which the policy is attached.', example='alice@demo.onaliyun.com'),
      principalType?: string(name='PrincipalType', description='The type of the object to which the policy is attached. Valid values:

*   IMSUser: RAM user
*   IMSGroup: RAM user group
*   ServiceRole: RAM role', example='IMSUser'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group or the ID of the Alibaba Cloud account to which the resource group belongs.', example='rg-9gLOoK****'),
    }
  ](name='PolicyAttachment')
  }(name='PolicyAttachments', description='The policy attachment records.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7B8A4E7D-6CFF-471D-84DF-195A7A241ECB'),
  totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='2'),
}

model ListPolicyAttachmentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPolicyAttachmentsResponseBody(name='body'),
}

/**
  * @description You can view the following information:
  * *   Policy attachment records under an Alibaba Cloud account or a resource group
  * *   Policies attached to RAM users, RAM user groups, or RAM roles
  * *   RAM users, RAM user groups, or RAM roles to which policies are attached under an Alibaba Cloud account or a resource group
  * @param request  the request parameters of ListPolicyAttachments  ListPolicyAttachmentsRequest
  * @return ListPolicyAttachmentsResponse
 */
async function listPolicyAttachments(request: ListPolicyAttachmentsRequest): ListPolicyAttachmentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPolicyAttachments', 'POST', '/', 'json', false, 'json', request);
}

model ListPolicyVersionsRequest {
  policyName: string(name='PolicyName', description='The name of the policy.

The name must be 1 to 128 characters in length and can contain letters, digits, and hyphens (-).

This parameter is required.', example='OSS-Administrator', position='Query'),
  policyType: string(name='PolicyType', description='The type of the policy. Valid values:

*   Custom: custom policy
*   System: system policy

This parameter is required.', example='Custom', position='Query'),
}

model ListPolicyVersionsResponseBody = {
  policyVersions?: {
    policyVersion?: [ 
    {
      createDate?: string(name='CreateDate', description='The time when the policy version was created.', example='2015-01-23T12:33:18Z'),
      isDefaultVersion?: boolean(name='IsDefaultVersion', description='Indicates whether the policy version is the default version.', example='false'),
      versionId?: string(name='VersionId', description='The ID of the policy version.', example='v3'),
    }
  ](name='PolicyVersion')
  }(name='PolicyVersions', description='The information of the policy versions.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7B8A4E7D-6CFF-471D-84DF-195A7A241ECB'),
}

model ListPolicyVersionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPolicyVersionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPolicyVersions  ListPolicyVersionsRequest
  * @return ListPolicyVersionsResponse
 */
async function listPolicyVersions(request: ListPolicyVersionsRequest): ListPolicyVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPolicyVersions', 'POST', '/', 'json', false, 'json', request);
}

model ListResourceGroupsRequest {
  displayName?: string(name='DisplayName', description='The display name of the resource group. This parameter specifies a filter condition for the query. Fuzzy match is supported.

The display name can be a maximum of 50 characters in length.', example='my-project', position='Query'),
  includeTags?: boolean(name='IncludeTags', description='Specifies whether to return the information of tags. Valid values:

*   false (default value)
*   true

>  If you configure the Tag parameter, the system returns the information of tags regardless of the setting of the `IncludeTags` parameter.', example='false', position='Query'),
  name?: string(name='Name', description='The identifier of the resource group. This parameter specifies a filter condition for the query. Fuzzy match is supported.

The identifier can be a maximum of 50 characters in length and can contain letters, digits, and hyphens (-).', example='my-project', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Valid values: 1 to 100. Default value: 10.', example='10', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. This parameter specifies a filter condition for the query.

The ID can be a maximum of 18 characters in length and must start with `rg-`.

>  This parameter is incorporated into the `ResourceGroupIds` parameter. If you configure both the `ResourceGroupId` and `ResourceGroupIds` parameters, the value of the `ResourceGroupIds` parameter prevails.', example='rg-9gLOoK****', position='Query'),
  resourceGroupIds?: [ string ](name='ResourceGroupIds', description='The IDs of the resource groups. This parameter specifies a filter condition for the query.

You can specify a maximum of 100 resource group IDs.

>  If you configure both the `ResourceGroupId` and `ResourceGroupIds` parameters, the value of the `ResourceGroupIds` parameter prevails.', position='Query'),
  status?: string(name='Status', description='The status of the resource group. This parameter specifies a filter condition for the query. Valid values:

*   Creating: The resource group is being created.
*   OK: The resource group is created.
*   PendingDelete: The resource group is waiting to be deleted.', example='OK', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='k1'),
      value?: string(name='Value', description='The tag value.', example='v1'),
    }
  ](name='Tag', description='The tag. This parameter specifies a filter condition for the query.', position='Query'),
}

model ListResourceGroupsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4B450CA1-36E8-4AA2-8461-86B42BF4CC4E'),
  resourceGroups?: {
    resourceGroup?: [ 
    {
      accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account to which the resource group belongs.', example='123456789****'),
      createDate?: string(name='CreateDate', description='The time when the resource group was created. The time is displayed in UTC.', example='2015-01-23T12:33:18Z'),
      displayName?: string(name='DisplayName', description='The display name of the resource group.', example='my-project'),
      id?: string(name='Id', description='The ID of the resource group.', example='rg-9gLOoK****'),
      name?: string(name='Name', description='The identifier of the resource group.', example='my-project'),
      status?: string(name='Status', description='The status of the resource group. Valid values:

*   Creating: The resource group is being created.
*   OK: The resource group is created.
*   PendingDelete: The resource group is waiting to be deleted.', example='OK'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', description='The tag key.', example='k1'),
          tagValue?: string(name='TagValue', description='The tag value.', example='v1'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags that are added to the resource group.'),
    }
  ](name='ResourceGroup')
  }(name='ResourceGroups', description='The information of the resource groups.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model ListResourceGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListResourceGroupsResponseBody(name='body'),
}

/**
  * @description You can call this API operation to query all resource groups within the current account. You can also call this API operation to query a specific resource group based on the status, ID, identifier, or display name of the resource group.
  * This topic provides an example on how to call the API operation to query the basic information about the resource groups `rg-1hSBH2****` and `rg-9gLOoK****` within the current account.
  * @param request  the request parameters of ListResourceGroups  ListResourceGroupsRequest
  * @return ListResourceGroupsResponse
 */
async function listResourceGroups(request: ListResourceGroupsRequest): ListResourceGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListResourceGroups', 'POST', '/', 'json', false, 'json', request);
}

model ListResourcesRequest {
  pageNumber?: int32(name='PageNumber', description='The page number.

Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.

Valid values: 1 to 100. Default value: 10.', example='10', minimum=1, maximum=100, position='Query'),
  region?: string(name='Region', description='The region ID.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-uPJpP****', position='Query'),
  resourceId?: string(name='ResourceId', description='The ID of the resource.', example='i-23v38****', position='Query'),
  resourceType?: string(name='ResourceType', description='The resource type.

For more information about the supported resource types, see the **Resource type** column in [Services that work with Resource Group](https://help.aliyun.com/document_detail/94479.html).', example='instance', position='Query'),
  resourceTypes?: [ 
    {
      resourceType?: string(name='ResourceType', description='The resource type.

Valid values of N: 1 to 50.

For more information about the supported resource types, see the **Resource type** column in [Services that work with Resource Group](https://help.aliyun.com/document_detail/94479.html).

>  You must configure both `Service` and `ResourceType` in `ResourceTypes`. Otherwise, the two parameters do not take effect.', example='instance'),
      service?: string(name='Service', description='The ID of the Alibaba Cloud service.

Valid values of N: 1 to 50.

You can obtain the ID from the **Service code** column in [Services that work with Resource Group](https://help.aliyun.com/document_detail/94479.html).

>  You must configure both `Service` and `ResourceType` in `ResourceTypes`. Otherwise, the two parameters do not take effect.', example='ecs'),
    }
  ](name='ResourceTypes', description='The resource types. A maximum of 50 resource types are supported.

>  If you configure `ResourceTypes`, you must configure both `Service` and `ResourceType`. Otherwise, the configured Service or ResourceType does not take effect.', position='Query'),
  service?: string(name='Service', description='The ID of the Alibaba Cloud service.

You can obtain the ID from the **Service code** column in [Services that work with Resource Group](https://help.aliyun.com/document_detail/94479.html).', example='ecs', position='Query'),
}

model ListResourcesResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  resources?: {
    resource?: [ 
    {
      createDate?: string(name='CreateDate', description='The time when the resource was created. The time is displayed in UTC.', example='2015-01-23T12:33:18Z'),
      regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-uPJpP****'),
      resourceId?: string(name='ResourceId', description='The ID of the resource.', example='i-23v38****'),
      resourceType?: string(name='ResourceType', description='The resource type.', example='instance'),
      service?: string(name='Service', description='The ID of the Alibaba Cloud service.', example='ecs'),
    }
  ](name='Resource')
  }(name='Resources', description='The information about the resources.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model ListResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListResourcesResponseBody(name='body'),
}

/**
  * @description >  You can use a RAM role that is not associated with a session policy to call this API operation.
  * This topic provides an example on how to call the API operation to query resources that can be accessed by the current account in resource groups. The response shows that the current account can access only the Elastic Compute Service (ECS) instance `i-23v38****` in the resource group `rg-uPJpP****`.
  * @param request  the request parameters of ListResources  ListResourcesRequest
  * @return ListResourcesResponse
 */
async function listResources(request: ListResourcesRequest): ListResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListResources', 'POST', '/', 'json', false, 'json', request);
}

model ListRolesRequest {
  language?: string(name='Language', description='The language that is used to return the descriptions of the RAM roles. Valid values:

*   en: English
*   zh-CN: Chinese
*   ja: Japanese', example='zh-CN', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Valid values: 1 to 100. Default value: 10.', example='10', position='Query'),
}

model ListRolesResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7B8A4E7D-6CFF-471D-84DF-195A7A241ECB'),
  roles?: {
    role?: [ 
    {
      arn?: string(name='Arn', description='The Alibaba Cloud Resource Name (ARN) of the RAM role.', example='acs:ram::123456789012****:role/ECSAdmin'),
      createDate?: string(name='CreateDate', description='The time when the RAM role was created.', example='2015-01-23T12:33:18Z'),
      description?: string(name='Description', description='The description of the RAM role.', example='ECS administrator'),
      isServiceLinkedRole?: boolean(name='IsServiceLinkedRole', description='Indicates whether the RAM role is a service linked role.', example='true'),
      latestDeletionTask?: {
        createDate?: string(name='CreateDate', description='The time when the deletion task was created.', example='2018-10-23T12:33:18Z'),
        deletionTaskId?: string(name='DeletionTaskId', description='The ID of the deletion task.', example='ECSAdmin/cc61514b-26eb-4453-ab53-b142eb70****'),
      }(name='LatestDeletionTask', description='The information of the most recent deletion task.'),
      maxSessionDuration?: long(name='MaxSessionDuration', description='The maximum session duration of the RAM role.', example='3600'),
      roleId?: string(name='RoleId', description='The ID of the RAM role.', example='90123456789****'),
      roleName?: string(name='RoleName', description='The name of the RAM role.', example='ECSAdmin'),
      rolePrincipalName?: string(name='RolePrincipalName', description='The name of the RAM role after authorization.', example='ECSAdmin@role.123456.onaliyunservice.com'),
      updateDate?: string(name='UpdateDate', description='The time when the RAM role was updated.', example='2016-01-23T12:33:18Z'),
    }
  ](name='Role')
  }(name='Roles', description='The information of the RAM roles.'),
  totalCount?: int32(name='TotalCount', description='The total number of RAM roles.', example='2'),
}

model ListRolesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRolesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListRoles  ListRolesRequest
  * @return ListRolesResponse
 */
async function listRoles(request: ListRolesRequest): ListRolesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRoles', 'POST', '/', 'json', false, 'json', request);
}

model ListTagKeysRequest {
  keyFilter?: string(name='KeyFilter', description='The tag key for a fuzzy query.', example='team', position='Query'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return for a single request.

Valid values: 1 to 100. Default value: 10.', example='10', position='Query'),
  nextToken?: string(name='NextToken', description='The token that is used to start the next query.', example='TGlzdFJlc291cm****', position='Query'),
  resourceType: string(name='ResourceType', description='The resource type.

The value Account indicates the members of the resource directory.

This parameter is required.', example='Account', position='Query'),
}

model ListTagKeysResponseBody = {
  nextToken?: string(name='NextToken', description='Indicates whether the next query is required.

*   If the value of this parameter is empty (`"NextToken": ""`), all results are returned, and the next query is not required.
*   If the value of this parameter is not empty, the next query is required, and the value is the token used to start the next query.', example='TGlzdFJlc291cm****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DC09A6AA-2713-4E10-A2E9-E6C5C43A8842'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='team'),
    }
  ](name='Tags', description='The information of the tag keys.'),
}

model ListTagKeysResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagKeysResponseBody(name='body'),
}

/**
  * @description This topic provides an example on how to call the API operation to query tag keys. The response shows that the custom tag key team exists.
  * @param request  the request parameters of ListTagKeys  ListTagKeysRequest
  * @return ListTagKeysResponse
 */
async function listTagKeys(request: ListTagKeysRequest): ListTagKeysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagKeys', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

Valid values: 1 to 100. Default value: 10.', example='10', position='Query'),
  nextToken?: string(name='NextToken', description='The token that is used to start the next query.', example='caeba0bbb2be03f84eb48b699f0a****', position='Query'),
  resourceId?: [ string ](name='ResourceId', description='The resource ID.', position='Query'),
  resourceType?: string(name='ResourceType', description='The type of the objects whose tags you want to query. This parameter specifies a filter condition for the query. Valid values:

*   ResourceGroup: resource group. This is the default value.
*   Account: member.', example='ResourceGroup', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='A tag key.', example='k1'),
      value?: string(name='Value', description='A tag value.', example='v1'),
    }
  ](name='Tag', description='The tag key and value.', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', description='Indicates whether the next query is required.

*   If the value of this parameter is empty (`"NextToken": ""`), all results are returned, and the next query is not required.
*   If the value of this parameter is not empty, the next query is required, and the value is the token used to start the next query.', example='caeba0bbb2be03f84eb48b699f0a****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8054B059-6B36-53BF-AA45-B8C9A0ED05AB'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', description='The ID of the resource group or member.', example='rg-aekz6bre2uq****'),
      resourceType?: string(name='ResourceType', description='The type of the object whose tags are queried. Valid values:

*   resourcegroup: resource group
*   Account: member', example='resourcegroup'),
      tagKey?: string(name='TagKey', description='The tag key.', example='k1'),
      tagValue?: string(name='TagValue', description='The tag value.', example='k1'),
    }
  ](name='TagResources', description='The tags.'),
}

model ListTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagResourcesResponseBody(name='body'),
}

/**
  * @description This topic provides an example on how to call the API operation to query the tags that are added to the resource group with an ID of `rg-aekz6bre2uq****`. The response shows that only the `k1:v1` tag is added to the resource group.
  * @param request  the request parameters of ListTagResources  ListTagResourcesRequest
  * @return ListTagResourcesResponse
 */
async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ListTagValuesRequest {
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return for a single request.

Valid values: 1 to 100. Default value: 10.', example='10', position='Query'),
  nextToken?: string(name='NextToken', description='The token that is used to start the next query.', example='TGlzdFJlc291cm****', position='Query'),
  resourceType: string(name='ResourceType', description='The resource type.

The value Account indicates the members of the resource directory.

This parameter is required.', example='Account', position='Query'),
  tagKey: string(name='TagKey', description='The tag key. This parameter specifies a filter condition for the query.

This parameter is required.', example='k1', position='Query'),
  valueFilter?: string(name='ValueFilter', description='The tag value for a fuzzy query.', example='v1', position='Query'),
}

model ListTagValuesResponseBody = {
  nextToken?: string(name='NextToken', description='Indicates whether the next query is required.

*   If the value of this parameter is empty (`"NextToken": ""`), all results are returned, and the next query is not required.
*   If the value of this parameter is not empty, the next query is required, and the value is the token used to start the next query.', example='TGlzdFJlc291cm****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DC09A6AA-2713-4E10-A2E9-E6C5C43A8842'),
  tags?: [ 
    {
      value?: string(name='Value', description='The tag value.', example='v1'),
    }
  ](name='Tags', description='The information of the tag values.'),
}

model ListTagValuesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagValuesResponseBody(name='body'),
}

/**
  * @description This topic provides an example on how to call the API operation to query the tag values of the tag key k1. The response shows that the tag value of the tag key k1 is v1.
  * @param request  the request parameters of ListTagValues  ListTagValuesRequest
  * @return ListTagValuesResponse
 */
async function listTagValues(request: ListTagValuesRequest): ListTagValuesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagValues', 'POST', '/', 'json', false, 'json', request);
}

model ListTargetAttachmentsForControlPolicyRequest {
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='1', minimum=1, maximum=200000, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Valid values: 1 to 100. Default value: 10.', example='10', minimum=1, maximum=100, position='Query'),
  policyId: string(name='PolicyId', description='The ID of the control policy.

This parameter is required.', example='cp-jExXAqIYkwHN****', position='Query'),
}

model ListTargetAttachmentsForControlPolicyResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B32BD3D6-1089-41F3-8E70-E0079BC7D760'),
  targetAttachments?: {
    targetAttachment?: [ 
    {
      attachDate?: string(name='AttachDate', description='The time when the control policy was attached to the object.', example='2021-03-19T02:56:24Z'),
      targetId?: string(name='TargetId', description='The ID of the object.', example='fd-ZDNPiT****'),
      targetName?: string(name='TargetName', description='The name of the object.', example='Dev_Department'),
      targetType?: string(name='TargetType', description='The type of the object. Valid values:

*   Root: Root folder
*   Folder: child folder of the Root folder
*   Account: member account', example='Folder'),
    }
  ](name='TargetAttachment')
  }(name='TargetAttachments', description='The list of objects to which the control policy is attached.'),
  totalCount?: int32(name='TotalCount', description='The total number of objects to which the control policy is attached.', example='1'),
}

model ListTargetAttachmentsForControlPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTargetAttachmentsForControlPolicyResponseBody(name='body'),
}

/**
  * @description In this example, the folders or member accounts to which the control policy `cp-jExXAqIYkwHN****` is attached are queried. The returned result shows that the control policy is attached to the folder `fd-ZDNPiT****`.
  * @param request  the request parameters of ListTargetAttachmentsForControlPolicy  ListTargetAttachmentsForControlPolicyRequest
  * @return ListTargetAttachmentsForControlPolicyResponse
 */
async function listTargetAttachmentsForControlPolicy(request: ListTargetAttachmentsForControlPolicyRequest): ListTargetAttachmentsForControlPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTargetAttachmentsForControlPolicy', 'POST', '/', 'json', false, 'json', request);
}

model ListTrustedServiceStatusRequest {
  adminAccountId?: string(name='AdminAccountId', description='The ID of the enterprise management account or delegated administrator account.

*   If you set this parameter to the ID of an enterprise management account, the trusted services that are enabled within the enterprise management account are queried. The default value of this parameter is the ID of an enterprise management account.
*   If you set this parameter to the ID of a delegated administrator account, the trusted services that are enabled within the delegated administrator account are queried.

For more information about trusted services and delegated administrator accounts, see [Overview of trusted services](https://help.aliyun.com/document_detail/208133.html) and [Delegated administrator accounts](https://help.aliyun.com/document_detail/208117.html).', example='177242285274****', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Valid values: 1 to 100. Default value: 10.', example='10', position='Query'),
}

model ListTrustedServiceStatusResponseBody = {
  enabledServicePrincipals?: {
    enabledServicePrincipal?: [ 
    {
      enableTime?: string(name='EnableTime', description='The time when the trusted service was enabled.', example='2019-02-18T15:32:10.473Z'),
      servicePrincipal?: string(name='ServicePrincipal', description='The identification of the trusted service.', example='config.aliyuncs.com'),
    }
  ](name='EnabledServicePrincipal')
  }(name='EnabledServicePrincipals', description='The trusted services that are enabled.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CD76D376-2517-4924-92C5-DBC52262F93A'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model ListTrustedServiceStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTrustedServiceStatusResponseBody(name='body'),
}

/**
  * @description >  Only an enterprise management account or delegated administrator account can be used to call this operation.
  * In this example, the trusted services that are enabled within an enterprise management account are queried. The returned result shows that the trusted services Cloud Config and ActionTrail are enabled within the enterprise management account.
  * @param request  the request parameters of ListTrustedServiceStatus  ListTrustedServiceStatusRequest
  * @return ListTrustedServiceStatusResponse
 */
async function listTrustedServiceStatus(request: ListTrustedServiceStatusRequest): ListTrustedServiceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTrustedServiceStatus', 'POST', '/', 'json', false, 'json', request);
}

model MoveAccountRequest {
  accountId: string(name='AccountId', description='The ID of the account you want to move.

This parameter is required.', example='12323344****', position='Query'),
  destinationFolderId: string(name='DestinationFolderId', description='The ID of the destination folder.

This parameter is required.', example='fd-bVaRIG****', position='Query'),
}

model MoveAccountResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model MoveAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MoveAccountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of MoveAccount  MoveAccountRequest
  * @return MoveAccountResponse
 */
async function moveAccount(request: MoveAccountRequest): MoveAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MoveAccount', 'POST', '/', 'json', false, 'json', request);
}

model MoveResourcesRequest {
  resourceGroupId: string(name='ResourceGroupId', description='The ID of the resource group to which you want to move the resources.

This parameter is required.', example='rg-aekzmeobk5w****', position='Query'),
  resources: [ 
    {
      regionId?: string(name='RegionId', description='The region ID of the resource.', example='cn-hangzhou'),
      resourceId?: string(name='ResourceId', description='The ID of the resource.', example='vpc-bp1sig0mjktx5ewx1****'),
      resourceType?: string(name='ResourceType', description='The type of the resource.', example='vpc'),
      service?: string(name='Service', description='The ID of the Alibaba Cloud service to which the resource belongs.', example='vpc'),
    }
  ](name='Resources', description='The resources that you want to move.

>  You can move a maximum of 10 resources at a time. If you want to move more than 10 resources, move them in batches.

This parameter is required.', position='Query'),
}

model MoveResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='C00B89D3-3247-11DE-95D8-A7C01FB0AB4F'),
  responses?: [ 
    {
      errorCode?: string(name='ErrorCode', description='The error code returned.

>  This parameter is returned if the resource failed to be moved.', example='NoPermission'),
      errorMsg?: string(name='ErrorMsg', description='The error message returned.

>  This parameter is returned if the resource failed to be moved.', example='No permissions'),
      regionId?: string(name='RegionId', description='The region ID of the resource.', example='cn-hangzhou'),
      requestId?: string(name='RequestId', description='The ID of the request.', example='C00B89D3-3247-11DE-95D8-A7C01FB0AB4F'),
      resourceId?: string(name='ResourceId', description='The ID of the resource.', example='vpc-bp1sig0mjktx5ewx1****'),
      resourceType?: string(name='ResourceType', description='The type of the resource.', example='vpc'),
      service?: string(name='Service', description='The ID of the Alibaba Cloud service.', example='vpc'),
      status?: string(name='Status', description='The status of the move task. Valid values:

*   SUCCESS
*   FAIL', example='FAIL'),
    }
  ](name='Responses', description='The returned results.'),
}

model MoveResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MoveResourcesResponseBody(name='body'),
}

/**
  * @description For more information about Alibaba Cloud services whose resources can be moved between resource groups, see the **Supported by the API** column in [Alibaba Cloud services that support resource groups](https://help.aliyun.com/document_detail/94479.html).
  * In this example, two virtual private clouds (VPCs) `vpc-bp1sig0mjktx5ewx1****` and `vpc-bp1visxm225pv49dz****` that reside in different regions and belong to different resource groups are moved to the resource group `rg-aekzmeobk5w****`.
  * @param request  the request parameters of MoveResources  MoveResourcesRequest
  * @return MoveResourcesResponse
 */
async function moveResources(request: MoveResourcesRequest): MoveResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MoveResources', 'POST', '/', 'json', false, 'json', request);
}

model PromoteResourceAccountRequest {
  accountId: string(name='AccountId', description='The ID of the resource account you want to upgrade.

This parameter is required.', example='12323344****', position='Query'),
  email: string(name='Email', description='The email address used to log on to the cloud account after the upgrade.

This parameter is required.', example='someone@example.com', position='Query'),
}

model PromoteResourceAccountResponseBody = {
  account?: {
    accountId?: string(name='AccountId', description='The ID of the member account.', example='12323344****'),
    accountName?: string(name='AccountName', description='The name of the member account.', example='someone@example.com'),
    displayName?: string(name='DisplayName', description='The display name of the member account.', example='admin'),
    folderId?: string(name='FolderId', description='The ID of the folder.', example='fd-bVaRIG****'),
    joinMethod?: string(name='JoinMethod', description='The way in which the member account joined the resource directory. Valid values:

*   invited: The member account is invited to join the resource directory.
*   created: The member account is directly created in the resource directory.', example='created'),
    joinTime?: string(name='JoinTime', description='The time when the member account joined the resource directory.', example='2015-01-23T12:33:18Z'),
    modifyTime?: string(name='ModifyTime', description='The time when the member account was modified.', example='2015-01-23T12:33:18Z'),
    recordId?: string(name='RecordId', description='The account record ID.', example='06950264-3f0d-4ca9-82dd-6ee7a3d33d6b'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', description='The ID of the resource directory.', example='rd-k3****'),
    status?: string(name='Status', description='The status of the member account. Valid values:

*   CreateSuccess: The member account is created.
*   CreateVerifying: The creation of the member account is under confirmation.
*   CreateFailed: The member account failed to be created.
*   CreateExpired: The creation of the member account expired.
*   CreateCancelled: The creation of the member account is canceled.
*   PromoteVerifying: The upgrade of the member account is under confirmation.
*   PromoteFailed: The member account failed to be upgraded.
*   PromoteExpired: The upgrade of the member account expired.
*   PromoteCancelled: The upgrade of the member account is canceled.
*   PromoteSuccess: The member account is upgraded.
*   InviteSuccess: The owner of the member account accepted the invitation.
*   Removed: The member account is removed from the resource directory.', example='PromoteVerifying'),
    type?: string(name='Type', description='The type of the member account. Valid values:

*   CloudAccount
*   ResourceAccount', example='ResourceAccount'),
  }(name='Account', description='The information of the member account.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model PromoteResourceAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PromoteResourceAccountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PromoteResourceAccount  PromoteResourceAccountRequest
  * @return PromoteResourceAccountResponse
 */
async function promoteResourceAccount(request: PromoteResourceAccountRequest): PromoteResourceAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PromoteResourceAccount', 'POST', '/', 'json', false, 'json', request);
}

model RegisterDelegatedAdministratorRequest {
  accountId: string(name='AccountId', description='The ID of the member in the resource directory.

This parameter is required.', example='181761095690****', position='Query'),
  servicePrincipal: string(name='ServicePrincipal', description='The identifier of the trusted service.

For more information, see the `Trusted service identifier` column in [Supported trusted services](https://help.aliyun.com/document_detail/208133.html).

This parameter is required.', example='cloudfw.aliyuncs.com', position='Query'),
}

model RegisterDelegatedAdministratorResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0A45FC8F-54D2-4A65-8338-25E5DEBDA304'),
}

model RegisterDelegatedAdministratorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RegisterDelegatedAdministratorResponseBody(name='body'),
}

/**
  * @description The delegated administrator account can be used to access the information of the resource directory and view the structure and members of the resource directory. The delegated administrator account can also be used to perform service-related management operations in the trusted service on behalf of the management account of the resource directory.
  * When you call this operation, you must take note of the following limits:
  * *   Only some trusted services support delegated administrator accounts. For more information, see [Supported trusted services](https://help.aliyun.com/document_detail/208133.html).
  * *   Only the management account of a resource directory or an authorized RAM user or RAM role of the management account can be used to call this operation.
  * *   The number of delegated administrator accounts that are allowed for a trusted service is defined by the trusted service.
  * This topic provides an example on how to call the API operation to specify the member `181761095690****` as a delegated administrator account of Cloud Firewall.
  * @param request  the request parameters of RegisterDelegatedAdministrator  RegisterDelegatedAdministratorRequest
  * @return RegisterDelegatedAdministratorResponse
 */
async function registerDelegatedAdministrator(request: RegisterDelegatedAdministratorRequest): RegisterDelegatedAdministratorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RegisterDelegatedAdministrator', 'POST', '/', 'json', false, 'json', request);
}

model RemoveCloudAccountRequest {
  accountId: string(name='AccountId', description='The ID of the member.

This parameter is required.', example='177242285274****', position='Query'),
}

model RemoveCloudAccountResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model RemoveCloudAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveCloudAccountResponseBody(name='body'),
}

/**
  * @description This topic provides an example on how to call the API operation to remove the member `177242285274****` from a resource directory.
  * @param request  the request parameters of RemoveCloudAccount  RemoveCloudAccountRequest
  * @return RemoveCloudAccountResponse
 */
async function removeCloudAccount(request: RemoveCloudAccountRequest): RemoveCloudAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveCloudAccount', 'POST', '/', 'json', false, 'json', request);
}

model ResendCreateCloudAccountEmailRequest {
  recordId: string(name='RecordId', description='The account record ID.

This parameter is required.', example='06950264-3f0d-4ca9-82dd-6ee7a3d33d6b', position='Query'),
}

model ResendCreateCloudAccountEmailResponseBody = {
  account?: {
    accountId?: string(name='AccountId', description='The ID of the account.', example='12323344****'),
    accountName?: string(name='AccountName', description='The name of the account.', example='someone@example.com'),
    displayName?: string(name='DisplayName', description='The display name of the member account.', example='admin'),
    folderId?: string(name='FolderId', description='The ID of the folder.', example='fd-bVaRIG****'),
    joinMethod?: string(name='JoinMethod', description='The way in which the member account joined the resource directory. Valid values:

*   invited: The member account is invited to join the resource directory.
*   created: The member account is directly created in the resource directory.', example='created'),
    joinTime?: string(name='JoinTime', description='The time when the member account joined the resource directory.', example='2015-01-23T12:33:18Z'),
    modifyTime?: string(name='ModifyTime', description='The time when the member account was modified.', example='2015-01-23T12:33:18Z'),
    recordId?: string(name='RecordId', description='The account record ID.', example='16950264-3f0d-4ca9-82dd-6ee7a3d33d6b'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', description='The ID of the resource directory.', example='rd-k3****'),
    status?: string(name='Status', description='The status of the member account. Valid values:

*   CreateSuccess: The member account is created.
*   CreateVerifying: The creation of the member account is under confirmation.
*   CreateFailed: The member account failed to be created.
*   CreateExpired: The creation of the member account expired.
*   CreateCancelled: The creation of the member account is canceled.
*   PromoteVerifying: The upgrade of the member account is under confirmation.
*   PromoteFailed: The member account failed to be upgraded.
*   PromoteExpired: The upgrade of the member account expired.
*   PromoteCancelled: The upgrade of the member account is canceled.
*   PromoteSuccess: The member account is upgraded.
*   InviteSuccess: The owner of the member account accepted the invitation.
*   Removed: The member account is removed from the resource directory.', example='CreateVerifying'),
    type?: string(name='Type', description='The type of the member account. The value CloudAccount indicates that the member account is a cloud account.', example='CloudAccount'),
  }(name='Account', description='The information of the member account.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model ResendCreateCloudAccountEmailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResendCreateCloudAccountEmailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ResendCreateCloudAccountEmail  ResendCreateCloudAccountEmailRequest
  * @return ResendCreateCloudAccountEmailResponse
 */
async function resendCreateCloudAccountEmail(request: ResendCreateCloudAccountEmailRequest): ResendCreateCloudAccountEmailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResendCreateCloudAccountEmail', 'POST', '/', 'json', false, 'json', request);
}

model ResendPromoteResourceAccountEmailRequest {
  recordId: string(name='RecordId', description='The account record ID.

This parameter is required.', example='06950264-3f0d-4ca9-82dd-6ee7a3d33d6b', position='Query'),
}

model ResendPromoteResourceAccountEmailResponseBody = {
  account?: {
    accountId?: string(name='AccountId', description='The ID of the account.', example='12323344****'),
    accountName?: string(name='AccountName', description='The name of the account.', example='someone@example.com'),
    displayName?: string(name='DisplayName', description='The display name of the member account.', example='admin'),
    folderId?: string(name='FolderId', description='The ID of the folder.', example='fd-bVaRIG****'),
    joinMethod?: string(name='JoinMethod', description='The way in which the member account joined the resource directory. Valid values:

*   invited: The member account is invited to join the resource directory.
*   created: The member account is directly created in the resource directory.', example='created'),
    joinTime?: string(name='JoinTime', description='The time when the member account joined the resource directory.', example='2015-01-23T12:33:18Z'),
    modifyTime?: string(name='ModifyTime', description='The time when the member account was modified.', example='2015-01-23T12:33:18Z'),
    recordId?: string(name='RecordId', description='The account record ID.', example='16950264-3f0d-4ca9-82dd-6ee7a3d33d6b'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', description='The ID of the resource directory.', example='rd-k3****'),
    status?: string(name='Status', description='The status of the member account. Valid values:

*   CreateSuccess: The member account is created.
*   CreateVerifying: The creation of the member account is under confirmation.
*   CreateFailed: The member account failed to be created.
*   CreateExpired: The creation of the member account expired.
*   CreateCancelled: The creation of the member account is canceled.
*   PromoteVerifying: The upgrade of the member account is under confirmation.
*   PromoteFailed: The member account failed to be upgraded.
*   PromoteExpired: The upgrade of the member account expired.
*   PromoteCancelled: The upgrade of the member account is canceled.
*   PromoteSuccess: The member account is upgraded.
*   InviteSuccess: The owner of the member account accepted the invitation.
*   Removed: The member account is removed from the resource directory.', example='PromoteVerifying'),
    type?: string(name='Type', description='The type of the member account. Valid values:

*   CloudAccount: cloud account
*   ResourceAccount: resource account', example='ResourceAccount'),
  }(name='Account', description='The information of the member account.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model ResendPromoteResourceAccountEmailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResendPromoteResourceAccountEmailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ResendPromoteResourceAccountEmail  ResendPromoteResourceAccountEmailRequest
  * @return ResendPromoteResourceAccountEmailResponse
 */
async function resendPromoteResourceAccountEmail(request: ResendPromoteResourceAccountEmailRequest): ResendPromoteResourceAccountEmailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResendPromoteResourceAccountEmail', 'POST', '/', 'json', false, 'json', request);
}

model RetryChangeAccountEmailRequest {
  accountId: string(name='AccountId', description='The Alibaba Cloud account ID of the member.

This parameter is required.', example='181761095690****', position='Query'),
}

model RetryChangeAccountEmailResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model RetryChangeAccountEmailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RetryChangeAccountEmailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RetryChangeAccountEmail  RetryChangeAccountEmailRequest
  * @return RetryChangeAccountEmailResponse
 */
async function retryChangeAccountEmail(request: RetryChangeAccountEmailRequest): RetryChangeAccountEmailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RetryChangeAccountEmail', 'POST', '/', 'json', false, 'json', request);
}

model SendVerificationCodeForBindSecureMobilePhoneRequest {
  accountId: string(name='AccountId', description='The ID of the resource account.

This parameter is required.', example='138660628348****', position='Query'),
  secureMobilePhone: string(name='SecureMobilePhone', description='The mobile phone number that you want to bind to the resource account.

Specify the mobile phone number in the \\<Country code>-\\<Mobile phone number> format.

>  Mobile phone numbers in the `86-<Mobile phone number>` format in the Chinese mainland are not supported.

This parameter is required.', example='xx-13900001234', position='Query'),
}

model SendVerificationCodeForBindSecureMobilePhoneResponseBody = {
  expirationDate?: string(name='ExpirationDate', description='The time when the verification code expires.', example='2021-12-17T07:38:41.747Z'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DCD43660-75DD-5D15-B342-1B83FCA5B913'),
}

model SendVerificationCodeForBindSecureMobilePhoneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendVerificationCodeForBindSecureMobilePhoneResponseBody(name='body'),
}

/**
  * @description To ensure that the system can record the operators of management operations, you must use a RAM user or RAM role to which the AliyunResourceDirectoryFullAccess policy is attached within the management account of your resource directory to call this operation.
  * In this example, a verification code is sent to the mobile phone number that you want to bind to the resource account `138660628348****`.
  * @param request  the request parameters of SendVerificationCodeForBindSecureMobilePhone  SendVerificationCodeForBindSecureMobilePhoneRequest
  * @return SendVerificationCodeForBindSecureMobilePhoneResponse
 */
async function sendVerificationCodeForBindSecureMobilePhone(request: SendVerificationCodeForBindSecureMobilePhoneRequest): SendVerificationCodeForBindSecureMobilePhoneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendVerificationCodeForBindSecureMobilePhone', 'POST', '/', 'json', false, 'json', request);
}

model SendVerificationCodeForEnableRDRequest {
  secureMobilePhone?: string(name='SecureMobilePhone', description='The mobile phone number that is bound to the newly created account. If you leave this parameter empty, the mobile phone number that is bound to the current account is used.

Specify the mobile phone number in the `<Country code>-<Mobile phone number>` format.

>  Mobile phone numbers in the `86-<Mobile phone number>` format in the Chinese mainland are not supported.', example='xx-13900001234', position='Query'),
}

model SendVerificationCodeForEnableRDResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='EC2FE94D-A4A2-51A1-A493-5C273A36C46A'),
}

model SendVerificationCodeForEnableRDResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendVerificationCodeForEnableRDResponseBody(name='body'),
}

/**
  * @description Each Alibaba Cloud account can be used to send a maximum of 100 verification codes per day.
  * @param request  the request parameters of SendVerificationCodeForEnableRD  SendVerificationCodeForEnableRDRequest
  * @return SendVerificationCodeForEnableRDResponse
 */
async function sendVerificationCodeForEnableRD(request: SendVerificationCodeForEnableRDRequest): SendVerificationCodeForEnableRDResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendVerificationCodeForEnableRD', 'POST', '/', 'json', false, 'json', request);
}

model SetDefaultPolicyVersionRequest {
  policyName: string(name='PolicyName', description='The name of the policy.

The name must be 1 to 128 characters in length and can contain letters, digits, and hyphens (-).

This parameter is required.', example='OSS-Administrator', position='Query'),
  versionId: string(name='VersionId', description='The ID of the policy version.

This parameter is required.', example='v2', position='Query'),
}

model SetDefaultPolicyVersionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model SetDefaultPolicyVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetDefaultPolicyVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetDefaultPolicyVersion  SetDefaultPolicyVersionRequest
  * @return SetDefaultPolicyVersionResponse
 */
async function setDefaultPolicyVersion(request: SetDefaultPolicyVersionRequest): SetDefaultPolicyVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDefaultPolicyVersion', 'POST', '/', 'json', false, 'json', request);
}

model SetMemberDeletionPermissionRequest {
  status: string(name='Status', description='Specifies whether to enable the member deletion feature. Valid values:

*   Enabled: enables the member deletion feature
*   Disabled: disables the member deletion feature

This parameter is required.', example='Enabled', position='Query'),
}

model SetMemberDeletionPermissionResponseBody = {
  managementAccountId?: string(name='ManagementAccountId', description='The ID of the management account of the resource directory.', example='151266687691****'),
  memberDeletionStatus?: string(name='MemberDeletionStatus', description='The status of the member deletion feature. Valid values:

*   Enabled: The feature is enabled.
*   Disabled: The feature is disabled.', example='Enabled'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C55A4CAA-9039-1DDF-91CE-FCC134513D29'),
  resourceDirectoryId?: string(name='ResourceDirectoryId', description='The ID of the resource directory.', example='rd-3G****'),
}

model SetMemberDeletionPermissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetMemberDeletionPermissionResponseBody(name='body'),
}

/**
  * @description Members of the resource account type can be deleted only after the member deletion feature is enabled.
  * @param request  the request parameters of SetMemberDeletionPermission  SetMemberDeletionPermissionRequest
  * @return SetMemberDeletionPermissionResponse
 */
async function setMemberDeletionPermission(request: SetMemberDeletionPermissionRequest): SetMemberDeletionPermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetMemberDeletionPermission', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  resourceId: [ string ](name='ResourceId', description='The ID of a resource group or member.

This parameter is required.', position='Query'),
  resourceType?: string(name='ResourceType', description='The type of the objects to which you want to add tags. Valid values:

*   ResourceGroup : resource group. This is the default value.
*   Account: member.

>  This parameter is required if you add tags to members in a resource directory.', example='ResourceGroup', position='Query'),
  tag: [ 
    {
      key?: string(name='Key', description='A tag key.

A tag key can be a maximum of 128 characters in length. It cannot contain `http://` or `https://` and cannot start with `acs:` or `aliyun`.', example='k1'),
      value?: string(name='Value', description='A tag value.

A tag value can be a maximum of 128 characters in length. It cannot contain `http://` or `https://` and cannot start with `acs:`.', example='v1'),
    }
  ](name='Tag', description='The tags.

This parameter is required.', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='E7747EDF-EDDC-5B38-9B6A-6392B9C92B1C'),
}

model TagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesResponseBody(name='body'),
}

/**
  * @description This topic provides an example on how to call the API operation to add the tag `k1:v1` to the resource group with an ID of `rg-aekz6bre2uq****`.
  * @param request  the request parameters of TagResources  TagResourcesRequest
  * @return TagResourcesResponse
 */
async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', description='Specifies whether to remove all tags from the specified resource groups or members. Valid values:

*   false (default value)
*   true', example='false', position='Query'),
  resourceId: [ string ](name='ResourceId', description='The ID of a resource group or member.

You can specify a maximum of 50 IDs.

This parameter is required.', position='Query'),
  resourceType?: string(name='ResourceType', description='The type of the objects from which you want to remove tags. Valid values:

*   ResourceGroup: resource group. This is the default value.
*   Account: member.

>  This parameter is required if you remove tags from members in a resource directory.', example='ResourceGroup', position='Query'),
  tagKey?: [ string ](name='TagKey', description='A tag key.

You can specify a maximum of 20 tag keys.

>  If you set the `All` parameter to `true`, you do not need to configure this parameter.', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='E7747EDF-EDDC-5B38-9B6A-6392B9C92B1C'),
}

model UntagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UntagResourcesResponseBody(name='body'),
}

/**
  * @description This topic provides an example on how to call the API operation to remove the tag whose tag key is `k1` from the resource group whose ID is `rg-aek2dpwyrfr****`.
  * @param request  the request parameters of UntagResources  UntagResourcesRequest
  * @return UntagResourcesResponse
 */
async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAccountRequest {
  accountId: string(name='AccountId', description='The ID of the Alibaba Cloud account that corresponds to the member.

This parameter is required.', example='12323344****', position='Query'),
  newAccountType?: string(name='NewAccountType', description='The new type of the member. Valid values:

*   ResourceAccount: resource account
*   CloudAccount: cloud account

>  You can configure either the `NewDisplayName` or `NewAccountType` parameter.', example='ResourceAccount', position='Query'),
  newDisplayName?: string(name='NewDisplayName', description='The new display name of the member.

>  You can configure either the `NewDisplayName` or `NewAccountType` parameter.', example='admin', position='Query'),
}

model UpdateAccountResponseBody = {
  account?: {
    accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account that corresponds to the member.', example='12323344****'),
    accountName?: string(name='AccountName', description='The name of the Alibaba Cloud account that corresponds to the member.', example='ecs-manager@aliyun.com'),
    displayName?: string(name='DisplayName', description='The display name of the member.', example='admin'),
    folderId?: string(name='FolderId', description='The ID of the folder.', example='fd-bVaRIG****'),
    joinMethod?: string(name='JoinMethod', description='The way in which the member joins the resource directory. Valid values:

*   invited: The member is invited to join the resource directory.
*   created: The member is directly created in the resource directory.', example='created'),
    joinTime?: string(name='JoinTime', description='The time when the member joined the resource directory. The time is displayed in UTC.', example='2015-01-23T12:33:18Z'),
    modifyTime?: string(name='ModifyTime', description='The time when the member was modified. The time is displayed in UTC.', example='2015-01-23T12:33:18Z'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', description='The ID of the resource directory.', example='rd-k3****'),
    status?: string(name='Status', description='The status of the member. Valid values:

*   CreateSuccess: The member is created.
*   InviteSuccess: The member accepts the invitation.
*   Removed: The member is removed.
*   SwitchSuccess: The type of the member is switched.', example='CreateSuccess'),
    type?: string(name='Type', description='The type of the member. Valid values:

*   CloudAccount: cloud account
*   ResourceAccount: resource account', example='ResourceAccount'),
  }(name='Account', description='The information of the member.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model UpdateAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAccountResponseBody(name='body'),
}

/**
  * @description *   To ensure that the system can record the operators of management operations, you must use a RAM user or RAM role to which the AliyunResourceDirectoryFullAccess policy is attached within the management account of your resource directory to call this operation.
  * *   Before you switch the type of a member from resource account to cloud account, make sure that specific conditions are met. For more information about the conditions, see [Switch a resource account to a cloud account](https://help.aliyun.com/document_detail/111233.html).
  * *   Before you switch the type of a member from cloud account to resource account, make sure that specific conditions are met. For more information about the conditions, see [Switch a cloud account to a resource account](https://help.aliyun.com/document_detail/209980.html).
  * This example provides an example on how to call the API operation to change the display name of the member `12323344****` to `admin`.
  * @param request  the request parameters of UpdateAccount  UpdateAccountRequest
  * @return UpdateAccountResponse
 */
async function updateAccount(request: UpdateAccountRequest): UpdateAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAccount', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAssociatedTransferSettingRequest {
  enableExistingResourcesTransfer?: string(name='EnableExistingResourcesTransfer', description='Specifies whether to enable the Transfer Existing Associated Resources feature. Valid values:

*   false
*   true', example='false', position='Query'),
  ruleSettings?: [ 
    {
      associatedResourceType?: string(name='AssociatedResourceType', description='The type of the associated resource.

You can obtain the resource type from the **Resource type** column in [Services that work with Resource Group](https://help.aliyun.com/document_detail/94479.html).', example='disk'),
      associatedService?: string(name='AssociatedService', description='The service code of the associated resource.

You can obtain the service code from the **Service code** column in [Services that work with Resource Group](https://help.aliyun.com/document_detail/94479.html).', example='ecs'),
      masterResourceType?: string(name='MasterResourceType', description='The type of the primary resource.

You can obtain the resource type from the **Resource type** column in [Services that work with Resource Group](https://help.aliyun.com/document_detail/94479.html).', example='instance'),
      masterService?: string(name='MasterService', description='The service code of the primary resource.

You can obtain the service code from the **Service code** column in [Services that work with Resource Group](https://help.aliyun.com/document_detail/94479.html).', example='ecs'),
      status: string(name='Status', description='The status of the Transfer Associated Resources feature. Valid values:

*   Enable: enabled
*   Disable: disabled

This parameter is required.', example='Enable'),
    }
  ](name='RuleSettings', description='The settings of transfer rules.', position='Query'),
}

model UpdateAssociatedTransferSettingResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='7B8A4E7D-6CFF-471D-84DF-195A7A241ECB'),
}

model UpdateAssociatedTransferSettingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAssociatedTransferSettingResponseBody(name='body'),
}

/**
  * @description For information about the resources that support the Transfer Associated Resources feature, see [Use the Transfer Associated Resources feature](https://help.aliyun.com/document_detail/606232.html).
  * @param request  the request parameters of UpdateAssociatedTransferSetting  UpdateAssociatedTransferSettingRequest
  * @return UpdateAssociatedTransferSettingResponse
 */
async function updateAssociatedTransferSetting(request: UpdateAssociatedTransferSettingRequest): UpdateAssociatedTransferSettingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAssociatedTransferSetting', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAutoGroupingConfigRequest {
  enableExistingResourcesTransfer?: boolean(name='EnableExistingResourcesTransfer', description='Specifies whether to enable the Transfer Existing Associated Resources feature. Valid values:

*   false
*   true', example='false', position='Query'),
}

model UpdateAutoGroupingConfigResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='C2CBCA30-C8DD-423E-B4AD-4FB694C9180C'),
}

model UpdateAutoGroupingConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAutoGroupingConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateAutoGroupingConfig  UpdateAutoGroupingConfigRequest
  * @return UpdateAutoGroupingConfigResponse
 */
async function updateAutoGroupingConfig(request: UpdateAutoGroupingConfigRequest): UpdateAutoGroupingConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAutoGroupingConfig', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAutoGroupingRuleRequest {
  excludeRegionIdsScope?: string(name='ExcludeRegionIdsScope', description='The IDs of regions to be excluded. Separate multiple IDs with commas (,).', example='cn-beijing,cn-guangzhou', maxLength=2000, position='Query'),
  excludeResourceGroupIdsScope?: string(name='ExcludeResourceGroupIdsScope', description='The IDs of resource groups to be excluded. Separate multiple IDs with commas (,).', example='rg-aekz******zj2oi,rg-aekz******r62ua', maxLength=8000, position='Query'),
  excludeResourceIdsScope?: string(name='ExcludeResourceIdsScope', description='The IDs of resources to be excluded. Separate multiple IDs with commas (,).', example='pc-uf6p******4h784y,rmq-cn-******ny0y', maxLength=5000, position='Query'),
  excludeResourceTypesScope?: string(name='ExcludeResourceTypesScope', description='The resource types to be excluded. Separate multiple resource types with commas (,).', example='mse.cluster,slb.loadbalancer', maxLength=2000, position='Query'),
  regionIdsScope?: string(name='RegionIdsScope', description='The IDs of regions. Separate multiple IDs with commas (,).', example='cn-hangzhou,cn-shanghai', maxLength=2000, position='Query'),
  resourceGroupIdsScope?: string(name='ResourceGroupIdsScope', description='The IDs of resource groups. Separate multiple IDs with commas (,).', example='rg-aekz******4b5ea,rg-aek2******fxykq', maxLength=8000, position='Query'),
  resourceIdsScope?: string(name='ResourceIdsScope', description='The IDs of resources. Separate multiple IDs with commas (,).', example='i-2zee******ym49kfmwis,vpc-5ts6******fnw493g849a', maxLength=5000, position='Query'),
  resourceTypesScope?: string(name='ResourceTypesScope', description='The resource types. Separate multiple resource types with commas (,).', example='rds.dbinstance,oss.bucket', maxLength=2000, position='Query'),
  ruleContents: [ 
    {
      autoGroupingScopeCondition?: string(name='AutoGroupingScopeCondition', description='The condition for the range of resources that are automatically transferred.', example='{"children":[{"desired":"{\\"env\\":\\"online\\", \\"project\\":\\"A\\"}","featurePath":"$.tags","featureSource":"RESOURCE","operator":"TagMatchAll"}],"operator":"and"}', maxLength=50000),
      ruleContentId?: string(name='RuleContentId', description='The ID of the content record.', example='grc-acfo******fwybpq'),
      targetResourceGroupCondition: string(name='TargetResourceGroupCondition', description='The condition for the destination resource group.

This parameter is required.', example='{"children":[{"desired":"rg-aek2********qcy","featurePath":"$.resourceGroupId","featureSource":"RESOURCE","operator":"StringEquals"}],"operator":"and"}', maxLength=255),
    }
  ](name='RuleContents', description='The content records of the rule.

This parameter is required.', position='Query'),
  ruleDesc?: string(name='RuleDesc', description='The description of the rule.', example='Transfer resources to which the {"env": "online"} and {"project": "A"} tags are added to the resource group rg-aek2********qcy.', maxLength=512, position='Query'),
  ruleId: string(name='RuleId', description='The ID of the rule.

This parameter is required.', example='gr-acfo******hy6a', position='Query'),
  ruleName: string(name='RuleName', description='The name of the rule.

This parameter is required.', example='Custom Transfer Rule for Online Resources of Project A', maxLength=128, position='Query'),
}

model UpdateAutoGroupingRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='7B8A4E7D-6CFF-471D-84DF-195A7A241ECB'),
}

model UpdateAutoGroupingRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAutoGroupingRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateAutoGroupingRule  UpdateAutoGroupingRuleRequest
  * @return UpdateAutoGroupingRuleResponse
 */
async function updateAutoGroupingRule(request: UpdateAutoGroupingRuleRequest): UpdateAutoGroupingRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAutoGroupingRule', 'POST', '/', 'json', false, 'json', request);
}

model UpdateControlPolicyRequest {
  newDescription?: string(name='NewDescription', description='The new description of the access control policy.

The description must be 1 to 1,024 characters in length. The description can contain letters, digits, underscores (_), and hyphens (-) and must start with a letter.', example='ExampleControlPolicy', position='Query'),
  newPolicyDocument?: string(name='NewPolicyDocument', description='The new document of the access control policy.

The document can be a maximum of 4,096 characters in length.

For more information about the languages of access control policies, see [Languages of access control policies](https://help.aliyun.com/document_detail/179096.html).

For more information about the examples of access control policies, see [Examples of custom access control policies](https://help.aliyun.com/document_detail/181474.html).', example='{"Version":"1","Statement":[{"Effect":"Deny","Action":["ram:UpdateRole","ram:DeleteRole","ram:AttachPolicyToRole","ram:DetachPolicyFromRole"],"Resource":"acs:ram:*:*:role/ResourceDirectoryAccountAccessRole"}]}', position='Query'),
  newPolicyName?: string(name='NewPolicyName', description='The new name of the access control policy.

The name must be 1 to 128 characters in length. The name can contain letters, digits, and hyphens (-) and must start with a letter.', example='NewControlPolicy', position='Query'),
  policyId: string(name='PolicyId', description='The ID of the access control policy.

This parameter is required.', example='cp-jExXAqIYkwHN****', position='Query'),
}

model UpdateControlPolicyResponseBody = {
  controlPolicy?: {
    attachmentCount?: string(name='AttachmentCount', description='The number of times that the access control policy is referenced.', example='0'),
    createDate?: string(name='CreateDate', description='The time when the access control policy was created.', example='2021-03-18T09:24:19Z'),
    description?: string(name='Description', description='The description of the access control policy.', example='ExampleControlPolicy'),
    effectScope?: string(name='EffectScope', description='The effective scope of the access control policy. Valid values:

*   All: The access control policy is in effect for Alibaba Cloud accounts, RAM users, and RAM roles.
*   RAM: The access control policy is in effect only for RAM users and RAM roles.', example='RAM'),
    policyId?: string(name='PolicyId', description='The ID of the access control policy.', example='cp-jExXAqIYkwHN****'),
    policyName?: string(name='PolicyName', description='The name of the access control policy.', example='NewControlPolicy'),
    policyType?: string(name='PolicyType', description='The type of the access control policy. Valid values:

*   System: system access control policy
*   Custom: custom access control policy', example='Custom'),
    updateDate?: string(name='UpdateDate', description='The time when the access control policy was updated.', example='2021-03-18T10:04:55Z'),
  }(name='ControlPolicy', description='The details of the access control policy.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2DFCE4C9-04A9-4C83-BB14-FE791275EC53'),
}

model UpdateControlPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateControlPolicyResponseBody(name='body'),
}

/**
  * @description In this example, the name of the access control policy whose ID is `cp-jExXAqIYkwHN****` is changed to `NewControlPolicy`.
  * @param request  the request parameters of UpdateControlPolicy  UpdateControlPolicyRequest
  * @return UpdateControlPolicyResponse
 */
async function updateControlPolicy(request: UpdateControlPolicyRequest): UpdateControlPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateControlPolicy', 'POST', '/', 'json', false, 'json', request);
}

model UpdateFolderRequest {
  folderId: string(name='FolderId', description='The ID of the folder.

This parameter is required.', example='fd-u8B321****', position='Query'),
  newFolderName: string(name='NewFolderName', description='The new name of the folder.

The name must be 1 to 24 characters in length and can contain letters, digits, underscores (_), periods (.), and hyphens (-).

This parameter is required.', example='rdFolder', position='Query'),
}

model UpdateFolderResponseBody = {
  folder?: {
    createTime?: string(name='CreateTime', description='The time when the folder was created.', example='2019-02-19T09:34:50.757Z'),
    folderId?: string(name='FolderId', description='The ID of the folder.', example='fd-u8B321****'),
    folderName?: string(name='FolderName', description='The name of the folder.', example='rdFolder'),
    parentFolderId?: string(name='ParentFolderId', description='The ID of the parent folder.', example='r-b1****'),
  }(name='Folder', description='The information of the folder.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C2CBCA30-C8DD-423E-B4AD-4FB694C9180C'),
}

model UpdateFolderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateFolderResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateFolder  UpdateFolderRequest
  * @return UpdateFolderResponse
 */
async function updateFolder(request: UpdateFolderRequest): UpdateFolderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateFolder', 'POST', '/', 'json', false, 'json', request);
}

model UpdateResourceGroupRequest {
  newDisplayName: string(name='NewDisplayName', description='The display name of the resource group.

The name must be 1 to 50 characters in length.

This parameter is required.', example='project', position='Query'),
  resourceGroupId: string(name='ResourceGroupId', description='The ID of the resource group.

You can call the [ListResourceGroups](https://help.aliyun.com/document_detail/158855.html) operation to obtain the ID.

This parameter is required.', example='rg-9gLOoK****', position='Query'),
}

model UpdateResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  resourceGroup?: {
    accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account to which the resource group belongs.', example='123456789****'),
    createDate?: string(name='CreateDate', description='The time when the resource group was created. The time is displayed in UTC.', example='2015-01-23T12:33:18+08:00'),
    displayName?: string(name='DisplayName', description='The display name of the resource group.', example='project'),
    id?: string(name='Id', description='The ID of the resource group.', example='rg-9gLOoK****'),
    name?: string(name='Name', description='The unique identifier of the resource group.', example='my-project'),
  }(name='ResourceGroup', description='The information of the resource group.'),
}

model UpdateResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateResourceGroupResponseBody(name='body'),
}

/**
  * @description In this example, the display name of the resource group `rg-9gLOoK****` is changed to `project`.
  * @param request  the request parameters of UpdateResourceGroup  UpdateResourceGroupRequest
  * @return UpdateResourceGroupResponse
 */
async function updateResourceGroup(request: UpdateResourceGroupRequest): UpdateResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model UpdateRoleRequest {
  newAssumeRolePolicyDocument?: string(name='NewAssumeRolePolicyDocument', description='The document of the policy that specifies the trusted entity to assume the RAM role.', example='{ "Statement": [ { "Action": "sts:AssumeRole", "Effect": "Allow", "Principal": { "RAM": "acs:ram::12345678901234****:root" } } ], "Version": "1" }', position='Query'),
  newDescription?: string(name='NewDescription', description='The description of the RAM role.

The description must be 1 to 1,024 characters in length.', example='ECS administrator', position='Query'),
  newMaxSessionDuration?: long(name='NewMaxSessionDuration', description='The maximum session duration of the RAM role.

Unit: seconds. Valid values: 3600 to 43200. Default value: 3600.

If you do not specify this parameter, the default value is used.', example='3600', position='Query'),
  roleName: string(name='RoleName', description='The name of the RAM role.

The name must be 1 to 64 characters in length and can contain letters, digits, periods (.),and hyphens (-).

This parameter is required.', example='ECSAdmin', position='Query'),
}

model UpdateRoleResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  role?: {
    arn?: string(name='Arn', description='The Alibaba Cloud Resource Name (ARN) of the RAM role.', example='acs:ram::123456789012****:role/ECSAdmin'),
    assumeRolePolicyDocument?: string(name='AssumeRolePolicyDocument', description='The document of the policy that specifies the trusted entity to assume the RAM role.', example='{ \\"Statement\\": [ { \\"Action\\": \\"sts:AssumeRole\\", \\"Effect\\": \\"Allow\\", \\"Principal\\": { \\"RAM\\": \\"acs:ram::12345678901234****:root\\" } } ], \\"Version\\": \\"1\\" }'),
    createDate?: string(name='CreateDate', description='The time when the RAM role was created.', example='2015-01-23T12:33:18Z'),
    description?: string(name='Description', description='The description of the RAM role.', example='ECS administrator'),
    maxSessionDuration?: long(name='MaxSessionDuration', description='The maximum session duration of the RAM role.', example='3600'),
    roleId?: string(name='RoleId', description='The ID of the RAM role.', example='90123456789****'),
    roleName?: string(name='RoleName', description='The name of the RAM role.', example='ECSAdmin'),
    rolePrincipalName?: string(name='RolePrincipalName', description='The name of the RAM role after authorization.', example='ECSAdmin@role.123456.onaliyunservice.com'),
    updateDate?: string(name='UpdateDate', description='The time when the RAM role was updated.', example='2016-01-23T12:33:18Z'),
  }(name='Role', description='The information of the RAM role.'),
}

model UpdateRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateRoleResponseBody(name='body'),
}

/**
  * @description In this example, the description of the RAM role `ECSAdmin` is updated to `ECS administrator`.
  * @param request  the request parameters of UpdateRole  UpdateRoleRequest
  * @return UpdateRoleResponse
 */
async function updateRole(request: UpdateRoleRequest): UpdateRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateRole', 'POST', '/', 'json', false, 'json', request);
}

