/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  
  checkConfig(config);
  @endpoint = getEndpoint('resourcemanager', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AcceptHandshakeRequest {
  handshakeId?: string(name='HandshakeId'),
}

model AcceptHandshakeResponseBody = {
  requestId?: string(name='RequestId'),
  handshake?: {
    status?: string(name='Status'),
    expireTime?: string(name='ExpireTime'),
    resourceDirectoryId?: string(name='ResourceDirectoryId'),
    createTime?: string(name='CreateTime'),
    note?: string(name='Note'),
    targetEntity?: string(name='TargetEntity'),
    masterAccountId?: string(name='MasterAccountId'),
    masterAccountName?: string(name='MasterAccountName'),
    modifyTime?: string(name='ModifyTime'),
    targetType?: string(name='TargetType'),
    handshakeId?: string(name='HandshakeId'),
  }(name='Handshake'),
}

model AcceptHandshakeResponse = {
  headers: map[string]string(name='headers'),
  body: AcceptHandshakeResponseBody(name='body'),
}

async function acceptHandshakeWithOptions(request: AcceptHandshakeRequest, runtime: Util.RuntimeOptions): AcceptHandshakeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AcceptHandshake', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function acceptHandshake(request: AcceptHandshakeRequest): AcceptHandshakeResponse {
  var runtime = new Util.RuntimeOptions{};
  return acceptHandshakeWithOptions(request, runtime);
}

model AttachControlPolicyRequest {
  policyId?: string(name='PolicyId'),
  targetId?: string(name='TargetId'),
}

model AttachControlPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model AttachControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: AttachControlPolicyResponseBody(name='body'),
}

async function attachControlPolicyWithOptions(request: AttachControlPolicyRequest, runtime: Util.RuntimeOptions): AttachControlPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AttachControlPolicy', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function attachControlPolicy(request: AttachControlPolicyRequest): AttachControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachControlPolicyWithOptions(request, runtime);
}

model AttachPolicyRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  policyType?: string(name='PolicyType'),
  policyName?: string(name='PolicyName'),
  principalType?: string(name='PrincipalType'),
  principalName?: string(name='PrincipalName'),
}

model AttachPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model AttachPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: AttachPolicyResponseBody(name='body'),
}

async function attachPolicyWithOptions(request: AttachPolicyRequest, runtime: Util.RuntimeOptions): AttachPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AttachPolicy', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function attachPolicy(request: AttachPolicyRequest): AttachPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachPolicyWithOptions(request, runtime);
}

model CancelCreateCloudAccountRequest {
  recordId?: string(name='RecordId'),
}

model CancelCreateCloudAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model CancelCreateCloudAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CancelCreateCloudAccountResponseBody(name='body'),
}

async function cancelCreateCloudAccountWithOptions(request: CancelCreateCloudAccountRequest, runtime: Util.RuntimeOptions): CancelCreateCloudAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CancelCreateCloudAccount', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function cancelCreateCloudAccount(request: CancelCreateCloudAccountRequest): CancelCreateCloudAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelCreateCloudAccountWithOptions(request, runtime);
}

model CancelHandshakeRequest {
  handshakeId?: string(name='HandshakeId'),
}

model CancelHandshakeResponseBody = {
  requestId?: string(name='RequestId'),
  handshake?: {
    status?: string(name='Status'),
    expireTime?: string(name='ExpireTime'),
    resourceDirectoryId?: string(name='ResourceDirectoryId'),
    createTime?: string(name='CreateTime'),
    note?: string(name='Note'),
    targetEntity?: string(name='TargetEntity'),
    masterAccountId?: string(name='MasterAccountId'),
    masterAccountName?: string(name='MasterAccountName'),
    modifyTime?: string(name='ModifyTime'),
    targetType?: string(name='TargetType'),
    handshakeId?: string(name='HandshakeId'),
  }(name='Handshake'),
}

model CancelHandshakeResponse = {
  headers: map[string]string(name='headers'),
  body: CancelHandshakeResponseBody(name='body'),
}

async function cancelHandshakeWithOptions(request: CancelHandshakeRequest, runtime: Util.RuntimeOptions): CancelHandshakeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CancelHandshake', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function cancelHandshake(request: CancelHandshakeRequest): CancelHandshakeResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelHandshakeWithOptions(request, runtime);
}

model CancelPromoteResourceAccountRequest {
  recordId?: string(name='RecordId'),
}

model CancelPromoteResourceAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model CancelPromoteResourceAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CancelPromoteResourceAccountResponseBody(name='body'),
}

async function cancelPromoteResourceAccountWithOptions(request: CancelPromoteResourceAccountRequest, runtime: Util.RuntimeOptions): CancelPromoteResourceAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CancelPromoteResourceAccount', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function cancelPromoteResourceAccount(request: CancelPromoteResourceAccountRequest): CancelPromoteResourceAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelPromoteResourceAccountWithOptions(request, runtime);
}

model CreateCloudAccountRequest {
  displayName?: string(name='DisplayName'),
  parentFolderId?: string(name='ParentFolderId'),
  email?: string(name='Email'),
  payerAccountId?: string(name='PayerAccountId'),
}

model CreateCloudAccountResponseBody = {
  requestId?: string(name='RequestId'),
  account?: {
    status?: string(name='Status'),
    type?: string(name='Type'),
    displayName?: string(name='DisplayName'),
    folderId?: string(name='FolderId'),
    resourceDirectoryId?: string(name='ResourceDirectoryId'),
    recordId?: string(name='RecordId'),
    accountId?: string(name='AccountId'),
    joinMethod?: string(name='JoinMethod'),
    modifyTime?: string(name='ModifyTime'),
    accountName?: string(name='AccountName'),
  }(name='Account'),
}

model CreateCloudAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCloudAccountResponseBody(name='body'),
}

async function createCloudAccountWithOptions(request: CreateCloudAccountRequest, runtime: Util.RuntimeOptions): CreateCloudAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateCloudAccount', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createCloudAccount(request: CreateCloudAccountRequest): CreateCloudAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCloudAccountWithOptions(request, runtime);
}

model CreateControlPolicyRequest {
  policyName?: string(name='PolicyName'),
  description?: string(name='Description'),
  effectScope?: string(name='EffectScope'),
  policyDocument?: string(name='PolicyDocument'),
}

model CreateControlPolicyResponseBody = {
  controlPolicy?: {
    updateDate?: string(name='UpdateDate'),
    description?: string(name='Description'),
    effectScope?: string(name='EffectScope'),
    attachmentCount?: string(name='AttachmentCount'),
    policyName?: string(name='PolicyName'),
    policyId?: string(name='PolicyId'),
    createDate?: string(name='CreateDate'),
    policyType?: string(name='PolicyType'),
  }(name='ControlPolicy'),
  requestId?: string(name='RequestId'),
}

model CreateControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateControlPolicyResponseBody(name='body'),
}

async function createControlPolicyWithOptions(request: CreateControlPolicyRequest, runtime: Util.RuntimeOptions): CreateControlPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateControlPolicy', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createControlPolicy(request: CreateControlPolicyRequest): CreateControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createControlPolicyWithOptions(request, runtime);
}

model CreateFolderRequest {
  parentFolderId?: string(name='ParentFolderId'),
  folderName?: string(name='FolderName'),
}

model CreateFolderResponseBody = {
  requestId?: string(name='RequestId'),
  folder?: {
    folderId?: string(name='FolderId'),
    createTime?: string(name='CreateTime'),
    parentFolderId?: string(name='ParentFolderId'),
    folderName?: string(name='FolderName'),
  }(name='Folder'),
}

model CreateFolderResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFolderResponseBody(name='body'),
}

async function createFolderWithOptions(request: CreateFolderRequest, runtime: Util.RuntimeOptions): CreateFolderResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateFolder', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createFolder(request: CreateFolderRequest): CreateFolderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFolderWithOptions(request, runtime);
}

model CreatePolicyRequest {
  policyName?: string(name='PolicyName'),
  description?: string(name='Description'),
  policyDocument?: string(name='PolicyDocument'),
}

model CreatePolicyResponseBody = {
  policy?: {
    defaultVersion?: string(name='DefaultVersion'),
    description?: string(name='Description'),
    policyName?: string(name='PolicyName'),
    createDate?: string(name='CreateDate'),
    policyType?: string(name='PolicyType'),
  }(name='Policy'),
  requestId?: string(name='RequestId'),
}

model CreatePolicyResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePolicyResponseBody(name='body'),
}

async function createPolicyWithOptions(request: CreatePolicyRequest, runtime: Util.RuntimeOptions): CreatePolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreatePolicy', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createPolicy(request: CreatePolicyRequest): CreatePolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPolicyWithOptions(request, runtime);
}

model CreatePolicyVersionRequest {
  policyName?: string(name='PolicyName'),
  policyDocument?: string(name='PolicyDocument'),
  setAsDefault?: boolean(name='SetAsDefault'),
}

model CreatePolicyVersionResponseBody = {
  policyVersion?: {
    isDefaultVersion?: boolean(name='IsDefaultVersion'),
    versionId?: string(name='VersionId'),
    createDate?: string(name='CreateDate'),
  }(name='PolicyVersion'),
  requestId?: string(name='RequestId'),
}

model CreatePolicyVersionResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePolicyVersionResponseBody(name='body'),
}

async function createPolicyVersionWithOptions(request: CreatePolicyVersionRequest, runtime: Util.RuntimeOptions): CreatePolicyVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreatePolicyVersion', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createPolicyVersion(request: CreatePolicyVersionRequest): CreatePolicyVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPolicyVersionWithOptions(request, runtime);
}

model CreateResourceAccountRequest {
  displayName?: string(name='DisplayName'),
  parentFolderId?: string(name='ParentFolderId'),
  payerAccountId?: string(name='PayerAccountId'),
  accountNamePrefix?: string(name='AccountNamePrefix'),
}

model CreateResourceAccountResponseBody = {
  account?: {
    status?: string(name='Status'),
    type?: string(name='Type'),
    displayName?: string(name='DisplayName'),
    folderId?: string(name='FolderId'),
    resourceDirectoryId?: string(name='ResourceDirectoryId'),
    joinTime?: string(name='JoinTime'),
    accountId?: string(name='AccountId'),
    joinMethod?: string(name='JoinMethod'),
    modifyTime?: string(name='ModifyTime'),
    accountName?: string(name='AccountName'),
  }(name='Account'),
  requestId?: string(name='RequestId'),
}

model CreateResourceAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CreateResourceAccountResponseBody(name='body'),
}

async function createResourceAccountWithOptions(request: CreateResourceAccountRequest, runtime: Util.RuntimeOptions): CreateResourceAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateResourceAccount', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createResourceAccount(request: CreateResourceAccountRequest): CreateResourceAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return createResourceAccountWithOptions(request, runtime);
}

model CreateResourceGroupRequest {
  name?: string(name='Name'),
  displayName?: string(name='DisplayName'),
}

model CreateResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
  resourceGroup?: {
    displayName?: string(name='DisplayName'),
    status?: string(name='Status'),
    regionStatuses?: {
      regionStatus?: [ 
      {
        status?: string(name='Status'),
        regionId?: string(name='RegionId'),
      }
    ](name='RegionStatus')
    }(name='RegionStatuses'),
    accountId?: string(name='AccountId'),
    name?: string(name='Name'),
    createDate?: string(name='CreateDate'),
    id?: string(name='Id'),
  }(name='ResourceGroup'),
}

model CreateResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateResourceGroupResponseBody(name='body'),
}

async function createResourceGroupWithOptions(request: CreateResourceGroupRequest, runtime: Util.RuntimeOptions): CreateResourceGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateResourceGroup', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createResourceGroup(request: CreateResourceGroupRequest): CreateResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createResourceGroupWithOptions(request, runtime);
}

model CreateRoleRequest {
  roleName?: string(name='RoleName'),
  description?: string(name='Description'),
  assumeRolePolicyDocument?: string(name='AssumeRolePolicyDocument'),
  maxSessionDuration?: long(name='MaxSessionDuration'),
}

model CreateRoleResponseBody = {
  role?: {
    assumeRolePolicyDocument?: string(name='AssumeRolePolicyDocument'),
    rolePrincipalName?: string(name='RolePrincipalName'),
    description?: string(name='Description'),
    maxSessionDuration?: long(name='MaxSessionDuration'),
    roleName?: string(name='RoleName'),
    createDate?: string(name='CreateDate'),
    arn?: string(name='Arn'),
    roleId?: string(name='RoleId'),
  }(name='Role'),
  requestId?: string(name='RequestId'),
}

model CreateRoleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRoleResponseBody(name='body'),
}

async function createRoleWithOptions(request: CreateRoleRequest, runtime: Util.RuntimeOptions): CreateRoleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateRole', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createRole(request: CreateRoleRequest): CreateRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRoleWithOptions(request, runtime);
}

model CreateServiceLinkedRoleRequest {
  serviceName?: string(name='ServiceName'),
  customSuffix?: string(name='CustomSuffix'),
  description?: string(name='Description'),
}

model CreateServiceLinkedRoleResponseBody = {
  role?: {
    assumeRolePolicyDocument?: string(name='AssumeRolePolicyDocument'),
    rolePrincipalName?: string(name='RolePrincipalName'),
    description?: string(name='Description'),
    roleName?: string(name='RoleName'),
    createDate?: string(name='CreateDate'),
    arn?: string(name='Arn'),
    roleId?: string(name='RoleId'),
    isServiceLinkedRole?: boolean(name='IsServiceLinkedRole'),
  }(name='Role'),
  requestId?: string(name='RequestId'),
}

model CreateServiceLinkedRoleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateServiceLinkedRoleResponseBody(name='body'),
}

async function createServiceLinkedRoleWithOptions(request: CreateServiceLinkedRoleRequest, runtime: Util.RuntimeOptions): CreateServiceLinkedRoleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateServiceLinkedRole', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createServiceLinkedRole(request: CreateServiceLinkedRoleRequest): CreateServiceLinkedRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createServiceLinkedRoleWithOptions(request, runtime);
}

model DeclineHandshakeRequest {
  handshakeId?: string(name='HandshakeId'),
}

model DeclineHandshakeResponseBody = {
  requestId?: string(name='RequestId'),
  handshake?: {
    status?: string(name='Status'),
    expireTime?: string(name='ExpireTime'),
    resourceDirectoryId?: string(name='ResourceDirectoryId'),
    createTime?: string(name='CreateTime'),
    note?: string(name='Note'),
    targetEntity?: string(name='TargetEntity'),
    masterAccountId?: string(name='MasterAccountId'),
    masterAccountName?: string(name='MasterAccountName'),
    modifyTime?: string(name='ModifyTime'),
    targetType?: string(name='TargetType'),
    handshakeId?: string(name='HandshakeId'),
  }(name='Handshake'),
}

model DeclineHandshakeResponse = {
  headers: map[string]string(name='headers'),
  body: DeclineHandshakeResponseBody(name='body'),
}

async function declineHandshakeWithOptions(request: DeclineHandshakeRequest, runtime: Util.RuntimeOptions): DeclineHandshakeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeclineHandshake', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function declineHandshake(request: DeclineHandshakeRequest): DeclineHandshakeResponse {
  var runtime = new Util.RuntimeOptions{};
  return declineHandshakeWithOptions(request, runtime);
}

model DeleteControlPolicyRequest {
  policyId?: string(name='PolicyId'),
}

model DeleteControlPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteControlPolicyResponseBody(name='body'),
}

async function deleteControlPolicyWithOptions(request: DeleteControlPolicyRequest, runtime: Util.RuntimeOptions): DeleteControlPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteControlPolicy', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteControlPolicy(request: DeleteControlPolicyRequest): DeleteControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteControlPolicyWithOptions(request, runtime);
}

model DeleteFolderRequest {
  folderId?: string(name='FolderId'),
}

model DeleteFolderResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteFolderResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFolderResponseBody(name='body'),
}

async function deleteFolderWithOptions(request: DeleteFolderRequest, runtime: Util.RuntimeOptions): DeleteFolderResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteFolder', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteFolder(request: DeleteFolderRequest): DeleteFolderResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFolderWithOptions(request, runtime);
}

model DeletePolicyRequest {
  policyName?: string(name='PolicyName'),
}

model DeletePolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeletePolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePolicyResponseBody(name='body'),
}

async function deletePolicyWithOptions(request: DeletePolicyRequest, runtime: Util.RuntimeOptions): DeletePolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeletePolicy', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deletePolicy(request: DeletePolicyRequest): DeletePolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePolicyWithOptions(request, runtime);
}

model DeletePolicyVersionRequest {
  policyName?: string(name='PolicyName'),
  versionId?: string(name='VersionId'),
}

model DeletePolicyVersionResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeletePolicyVersionResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePolicyVersionResponseBody(name='body'),
}

async function deletePolicyVersionWithOptions(request: DeletePolicyVersionRequest, runtime: Util.RuntimeOptions): DeletePolicyVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeletePolicyVersion', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deletePolicyVersion(request: DeletePolicyVersionRequest): DeletePolicyVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePolicyVersionWithOptions(request, runtime);
}

model DeleteResourceGroupRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DeleteResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
  resourceGroup?: {
    displayName?: string(name='DisplayName'),
    status?: string(name='Status'),
    regionStatuses?: {
      regionStatus?: [ 
      {
        status?: string(name='Status'),
        regionId?: string(name='RegionId'),
      }
    ](name='RegionStatus')
    }(name='RegionStatuses'),
    accountId?: string(name='AccountId'),
    name?: string(name='Name'),
    createDate?: string(name='CreateDate'),
    id?: string(name='Id'),
  }(name='ResourceGroup'),
}

model DeleteResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteResourceGroupResponseBody(name='body'),
}

async function deleteResourceGroupWithOptions(request: DeleteResourceGroupRequest, runtime: Util.RuntimeOptions): DeleteResourceGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteResourceGroup', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteResourceGroup(request: DeleteResourceGroupRequest): DeleteResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteResourceGroupWithOptions(request, runtime);
}

model DeleteRoleRequest {
  roleName?: string(name='RoleName'),
}

model DeleteRoleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteRoleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRoleResponseBody(name='body'),
}

async function deleteRoleWithOptions(request: DeleteRoleRequest, runtime: Util.RuntimeOptions): DeleteRoleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteRole', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteRole(request: DeleteRoleRequest): DeleteRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRoleWithOptions(request, runtime);
}

model DeleteServiceLinkedRoleRequest {
  roleName?: string(name='RoleName'),
}

model DeleteServiceLinkedRoleResponseBody = {
  requestId?: string(name='RequestId'),
  deletionTaskId?: string(name='DeletionTaskId'),
}

model DeleteServiceLinkedRoleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteServiceLinkedRoleResponseBody(name='body'),
}

async function deleteServiceLinkedRoleWithOptions(request: DeleteServiceLinkedRoleRequest, runtime: Util.RuntimeOptions): DeleteServiceLinkedRoleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteServiceLinkedRole', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteServiceLinkedRole(request: DeleteServiceLinkedRoleRequest): DeleteServiceLinkedRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteServiceLinkedRoleWithOptions(request, runtime);
}

model DeregisterDelegatedAdministratorRequest {
  accountId?: string(name='AccountId'),
  servicePrincipal?: string(name='ServicePrincipal'),
}

model DeregisterDelegatedAdministratorResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeregisterDelegatedAdministratorResponse = {
  headers: map[string]string(name='headers'),
  body: DeregisterDelegatedAdministratorResponseBody(name='body'),
}

async function deregisterDelegatedAdministratorWithOptions(request: DeregisterDelegatedAdministratorRequest, runtime: Util.RuntimeOptions): DeregisterDelegatedAdministratorResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeregisterDelegatedAdministrator', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deregisterDelegatedAdministrator(request: DeregisterDelegatedAdministratorRequest): DeregisterDelegatedAdministratorResponse {
  var runtime = new Util.RuntimeOptions{};
  return deregisterDelegatedAdministratorWithOptions(request, runtime);
}

model DestroyResourceDirectoryResponseBody = {
  requestId?: string(name='RequestId'),
}

model DestroyResourceDirectoryResponse = {
  headers: map[string]string(name='headers'),
  body: DestroyResourceDirectoryResponseBody(name='body'),
}

async function destroyResourceDirectoryWithOptions(runtime: Util.RuntimeOptions): DestroyResourceDirectoryResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('DestroyResourceDirectory', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function destroyResourceDirectory(): DestroyResourceDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return destroyResourceDirectoryWithOptions(runtime);
}

model DetachControlPolicyRequest {
  policyId?: string(name='PolicyId'),
  targetId?: string(name='TargetId'),
}

model DetachControlPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model DetachControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DetachControlPolicyResponseBody(name='body'),
}

async function detachControlPolicyWithOptions(request: DetachControlPolicyRequest, runtime: Util.RuntimeOptions): DetachControlPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DetachControlPolicy', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function detachControlPolicy(request: DetachControlPolicyRequest): DetachControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachControlPolicyWithOptions(request, runtime);
}

model DetachPolicyRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  policyType?: string(name='PolicyType'),
  policyName?: string(name='PolicyName'),
  principalType?: string(name='PrincipalType'),
  principalName?: string(name='PrincipalName'),
}

model DetachPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model DetachPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DetachPolicyResponseBody(name='body'),
}

async function detachPolicyWithOptions(request: DetachPolicyRequest, runtime: Util.RuntimeOptions): DetachPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DetachPolicy', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function detachPolicy(request: DetachPolicyRequest): DetachPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachPolicyWithOptions(request, runtime);
}

model DisableControlPolicyResponseBody = {
  enablementStatus?: string(name='EnablementStatus'),
  requestId?: string(name='RequestId'),
}

model DisableControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DisableControlPolicyResponseBody(name='body'),
}

async function disableControlPolicyWithOptions(runtime: Util.RuntimeOptions): DisableControlPolicyResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('DisableControlPolicy', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function disableControlPolicy(): DisableControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableControlPolicyWithOptions(runtime);
}

model EnableControlPolicyResponseBody = {
  enablementStatus?: string(name='EnablementStatus'),
  requestId?: string(name='RequestId'),
}

model EnableControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: EnableControlPolicyResponseBody(name='body'),
}

async function enableControlPolicyWithOptions(runtime: Util.RuntimeOptions): EnableControlPolicyResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('EnableControlPolicy', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function enableControlPolicy(): EnableControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableControlPolicyWithOptions(runtime);
}

model GetAccountRequest {
  accountId?: string(name='AccountId'),
}

model GetAccountResponseBody = {
  account?: {
    status?: string(name='Status'),
    type?: string(name='Type'),
    displayName?: string(name='DisplayName'),
    folderId?: string(name='FolderId'),
    resourceDirectoryId?: string(name='ResourceDirectoryId'),
    identityInformation?: string(name='IdentityInformation'),
    joinTime?: string(name='JoinTime'),
    accountId?: string(name='AccountId'),
    joinMethod?: string(name='JoinMethod'),
    modifyTime?: string(name='ModifyTime'),
    accountName?: string(name='AccountName'),
  }(name='Account'),
  requestId?: string(name='RequestId'),
}

model GetAccountResponse = {
  headers: map[string]string(name='headers'),
  body: GetAccountResponseBody(name='body'),
}

async function getAccountWithOptions(request: GetAccountRequest, runtime: Util.RuntimeOptions): GetAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetAccount', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getAccount(request: GetAccountRequest): GetAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAccountWithOptions(request, runtime);
}

model GetControlPolicyRequest {
  policyId?: string(name='PolicyId'),
  language?: string(name='Language'),
}

model GetControlPolicyResponseBody = {
  controlPolicy?: {
    policyDocument?: string(name='PolicyDocument'),
    updateDate?: string(name='UpdateDate'),
    description?: string(name='Description'),
    effectScope?: string(name='EffectScope'),
    attachmentCount?: string(name='AttachmentCount'),
    policyName?: string(name='PolicyName'),
    policyId?: string(name='PolicyId'),
    createDate?: string(name='CreateDate'),
    policyType?: string(name='PolicyType'),
  }(name='ControlPolicy'),
  requestId?: string(name='RequestId'),
}

model GetControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: GetControlPolicyResponseBody(name='body'),
}

async function getControlPolicyWithOptions(request: GetControlPolicyRequest, runtime: Util.RuntimeOptions): GetControlPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetControlPolicy', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getControlPolicy(request: GetControlPolicyRequest): GetControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return getControlPolicyWithOptions(request, runtime);
}

model GetControlPolicyEnablementStatusResponseBody = {
  enablementStatus?: string(name='EnablementStatus'),
  requestId?: string(name='RequestId'),
}

model GetControlPolicyEnablementStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetControlPolicyEnablementStatusResponseBody(name='body'),
}

async function getControlPolicyEnablementStatusWithOptions(runtime: Util.RuntimeOptions): GetControlPolicyEnablementStatusResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('GetControlPolicyEnablementStatus', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getControlPolicyEnablementStatus(): GetControlPolicyEnablementStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getControlPolicyEnablementStatusWithOptions(runtime);
}

model GetFolderRequest {
  folderId?: string(name='FolderId'),
}

model GetFolderResponseBody = {
  requestId?: string(name='RequestId'),
  folder?: {
    folderId?: string(name='FolderId'),
    createTime?: string(name='CreateTime'),
    folderName?: string(name='FolderName'),
    parentFolderId?: string(name='ParentFolderId'),
  }(name='Folder'),
}

model GetFolderResponse = {
  headers: map[string]string(name='headers'),
  body: GetFolderResponseBody(name='body'),
}

async function getFolderWithOptions(request: GetFolderRequest, runtime: Util.RuntimeOptions): GetFolderResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetFolder', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getFolder(request: GetFolderRequest): GetFolderResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFolderWithOptions(request, runtime);
}

model GetHandshakeRequest {
  handshakeId?: string(name='HandshakeId'),
}

model GetHandshakeResponseBody = {
  requestId?: string(name='RequestId'),
  handshake?: {
    status?: string(name='Status'),
    expireTime?: string(name='ExpireTime'),
    createTime?: string(name='CreateTime'),
    targetEntity?: string(name='TargetEntity'),
    masterAccountId?: string(name='MasterAccountId'),
    handshakeId?: string(name='HandshakeId'),
    masterAccountRealName?: string(name='MasterAccountRealName'),
    resourceDirectoryId?: string(name='ResourceDirectoryId'),
    invitedAccountRealName?: string(name='InvitedAccountRealName'),
    note?: string(name='Note'),
    masterAccountName?: string(name='MasterAccountName'),
    targetType?: string(name='TargetType'),
    modifyTime?: string(name='ModifyTime'),
  }(name='Handshake'),
}

model GetHandshakeResponse = {
  headers: map[string]string(name='headers'),
  body: GetHandshakeResponseBody(name='body'),
}

async function getHandshakeWithOptions(request: GetHandshakeRequest, runtime: Util.RuntimeOptions): GetHandshakeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetHandshake', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getHandshake(request: GetHandshakeRequest): GetHandshakeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getHandshakeWithOptions(request, runtime);
}

model GetPayerForAccountRequest {
  accountId?: string(name='AccountId'),
}

model GetPayerForAccountResponseBody = {
  payerAccountName?: string(name='PayerAccountName'),
  requestId?: string(name='RequestId'),
  payerAccountId?: string(name='PayerAccountId'),
}

model GetPayerForAccountResponse = {
  headers: map[string]string(name='headers'),
  body: GetPayerForAccountResponseBody(name='body'),
}

async function getPayerForAccountWithOptions(request: GetPayerForAccountRequest, runtime: Util.RuntimeOptions): GetPayerForAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetPayerForAccount', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getPayerForAccount(request: GetPayerForAccountRequest): GetPayerForAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPayerForAccountWithOptions(request, runtime);
}

model GetPolicyRequest {
  policyName?: string(name='PolicyName'),
  policyType?: string(name='PolicyType'),
  language?: string(name='Language'),
}

model GetPolicyResponseBody = {
  policy?: {
    defaultVersion?: string(name='DefaultVersion'),
    updateDate?: string(name='UpdateDate'),
    description?: string(name='Description'),
    policyDocument?: string(name='PolicyDocument'),
    attachmentCount?: int32(name='AttachmentCount'),
    policyName?: string(name='PolicyName'),
    createDate?: string(name='CreateDate'),
    policyType?: string(name='PolicyType'),
  }(name='Policy'),
  requestId?: string(name='RequestId'),
}

model GetPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: GetPolicyResponseBody(name='body'),
}

async function getPolicyWithOptions(request: GetPolicyRequest, runtime: Util.RuntimeOptions): GetPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetPolicy', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getPolicy(request: GetPolicyRequest): GetPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPolicyWithOptions(request, runtime);
}

model GetPolicyVersionRequest {
  policyType?: string(name='PolicyType'),
  policyName?: string(name='PolicyName'),
  versionId?: string(name='VersionId'),
}

model GetPolicyVersionResponseBody = {
  policyVersion?: {
    isDefaultVersion?: boolean(name='IsDefaultVersion'),
    policyDocument?: string(name='PolicyDocument'),
    versionId?: string(name='VersionId'),
    createDate?: string(name='CreateDate'),
  }(name='PolicyVersion'),
  requestId?: string(name='RequestId'),
}

model GetPolicyVersionResponse = {
  headers: map[string]string(name='headers'),
  body: GetPolicyVersionResponseBody(name='body'),
}

async function getPolicyVersionWithOptions(request: GetPolicyVersionRequest, runtime: Util.RuntimeOptions): GetPolicyVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetPolicyVersion', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getPolicyVersion(request: GetPolicyVersionRequest): GetPolicyVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPolicyVersionWithOptions(request, runtime);
}

model GetResourceDirectoryResponseBody = {
  requestId?: string(name='RequestId'),
  resourceDirectory?: {
    rootFolderId?: string(name='RootFolderId'),
    resourceDirectoryId?: string(name='ResourceDirectoryId'),
    createTime?: string(name='CreateTime'),
    masterAccountId?: string(name='MasterAccountId'),
    masterAccountName?: string(name='MasterAccountName'),
    controlPolicyStatus?: string(name='ControlPolicyStatus'),
  }(name='ResourceDirectory'),
}

model GetResourceDirectoryResponse = {
  headers: map[string]string(name='headers'),
  body: GetResourceDirectoryResponseBody(name='body'),
}

async function getResourceDirectoryWithOptions(runtime: Util.RuntimeOptions): GetResourceDirectoryResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('GetResourceDirectory', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getResourceDirectory(): GetResourceDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getResourceDirectoryWithOptions(runtime);
}

model GetResourceGroupRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
}

model GetResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
  resourceGroup?: {
    displayName?: string(name='DisplayName'),
    status?: string(name='Status'),
    regionStatuses?: {
      regionStatus?: [ 
      {
        status?: string(name='Status'),
        regionId?: string(name='RegionId'),
      }
    ](name='RegionStatus')
    }(name='RegionStatuses'),
    accountId?: string(name='AccountId'),
    name?: string(name='Name'),
    createDate?: string(name='CreateDate'),
    id?: string(name='Id'),
  }(name='ResourceGroup'),
}

model GetResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: GetResourceGroupResponseBody(name='body'),
}

async function getResourceGroupWithOptions(request: GetResourceGroupRequest, runtime: Util.RuntimeOptions): GetResourceGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetResourceGroup', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getResourceGroup(request: GetResourceGroupRequest): GetResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return getResourceGroupWithOptions(request, runtime);
}

model GetRoleRequest {
  roleName?: string(name='RoleName'),
  language?: string(name='Language'),
}

model GetRoleResponseBody = {
  role?: {
    assumeRolePolicyDocument?: string(name='AssumeRolePolicyDocument'),
    rolePrincipalName?: string(name='RolePrincipalName'),
    updateDate?: string(name='UpdateDate'),
    description?: string(name='Description'),
    maxSessionDuration?: long(name='MaxSessionDuration'),
    latestDeletionTask?: {
      deletionTaskId?: string(name='DeletionTaskId'),
      createDate?: string(name='CreateDate'),
    }(name='LatestDeletionTask'),
    roleName?: string(name='RoleName'),
    createDate?: string(name='CreateDate'),
    roleId?: string(name='RoleId'),
    arn?: string(name='Arn'),
    isServiceLinkedRole?: boolean(name='IsServiceLinkedRole'),
  }(name='Role'),
  requestId?: string(name='RequestId'),
}

model GetRoleResponse = {
  headers: map[string]string(name='headers'),
  body: GetRoleResponseBody(name='body'),
}

async function getRoleWithOptions(request: GetRoleRequest, runtime: Util.RuntimeOptions): GetRoleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetRole', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getRole(request: GetRoleRequest): GetRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRoleWithOptions(request, runtime);
}

model GetServiceLinkedRoleDeletionStatusRequest {
  deletionTaskId?: string(name='DeletionTaskId'),
}

model GetServiceLinkedRoleDeletionStatusResponseBody = {
  status?: string(name='Status'),
  requestId?: string(name='RequestId'),
  reason?: {
    message?: string(name='Message'),
    roleUsages?: {
      roleUsage?: [ 
      {
        region?: string(name='Region'),
        resources?: {
          resource?: [ string ](name='Resource')
        }(name='Resources'),
      }
    ](name='RoleUsage')
    }(name='RoleUsages'),
  }(name='Reason'),
}

model GetServiceLinkedRoleDeletionStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetServiceLinkedRoleDeletionStatusResponseBody(name='body'),
}

async function getServiceLinkedRoleDeletionStatusWithOptions(request: GetServiceLinkedRoleDeletionStatusRequest, runtime: Util.RuntimeOptions): GetServiceLinkedRoleDeletionStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetServiceLinkedRoleDeletionStatus', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getServiceLinkedRoleDeletionStatus(request: GetServiceLinkedRoleDeletionStatusRequest): GetServiceLinkedRoleDeletionStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getServiceLinkedRoleDeletionStatusWithOptions(request, runtime);
}

model InitResourceDirectoryResponseBody = {
  requestId?: string(name='RequestId'),
  resourceDirectory?: {
    rootFolderId?: string(name='RootFolderId'),
    masterAccountId?: string(name='MasterAccountId'),
    masterAccountName?: string(name='MasterAccountName'),
    resourceDirectoryId?: string(name='ResourceDirectoryId'),
    createTime?: string(name='CreateTime'),
  }(name='ResourceDirectory'),
}

model InitResourceDirectoryResponse = {
  headers: map[string]string(name='headers'),
  body: InitResourceDirectoryResponseBody(name='body'),
}

async function initResourceDirectoryWithOptions(runtime: Util.RuntimeOptions): InitResourceDirectoryResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('InitResourceDirectory', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function initResourceDirectory(): InitResourceDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return initResourceDirectoryWithOptions(runtime);
}

model InviteAccountToResourceDirectoryRequest {
  targetEntity?: string(name='TargetEntity'),
  targetType?: string(name='TargetType'),
  note?: string(name='Note'),
}

model InviteAccountToResourceDirectoryResponseBody = {
  requestId?: string(name='RequestId'),
  handshake?: {
    status?: string(name='Status'),
    expireTime?: string(name='ExpireTime'),
    resourceDirectoryId?: string(name='ResourceDirectoryId'),
    createTime?: string(name='CreateTime'),
    note?: string(name='Note'),
    targetEntity?: string(name='TargetEntity'),
    masterAccountId?: string(name='MasterAccountId'),
    masterAccountName?: string(name='MasterAccountName'),
    modifyTime?: string(name='ModifyTime'),
    targetType?: string(name='TargetType'),
    handshakeId?: string(name='HandshakeId'),
  }(name='Handshake'),
}

model InviteAccountToResourceDirectoryResponse = {
  headers: map[string]string(name='headers'),
  body: InviteAccountToResourceDirectoryResponseBody(name='body'),
}

async function inviteAccountToResourceDirectoryWithOptions(request: InviteAccountToResourceDirectoryRequest, runtime: Util.RuntimeOptions): InviteAccountToResourceDirectoryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('InviteAccountToResourceDirectory', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function inviteAccountToResourceDirectory(request: InviteAccountToResourceDirectoryRequest): InviteAccountToResourceDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return inviteAccountToResourceDirectoryWithOptions(request, runtime);
}

model ListAccountsRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListAccountsResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  accounts?: {
    account?: [ 
    {
      status?: string(name='Status'),
      type?: string(name='Type'),
      displayName?: string(name='DisplayName'),
      folderId?: string(name='FolderId'),
      resourceDirectoryId?: string(name='ResourceDirectoryId'),
      joinTime?: string(name='JoinTime'),
      accountId?: string(name='AccountId'),
      joinMethod?: string(name='JoinMethod'),
      modifyTime?: string(name='ModifyTime'),
    }
  ](name='Account')
  }(name='Accounts'),
}

model ListAccountsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAccountsResponseBody(name='body'),
}

async function listAccountsWithOptions(request: ListAccountsRequest, runtime: Util.RuntimeOptions): ListAccountsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListAccounts', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listAccounts(request: ListAccountsRequest): ListAccountsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAccountsWithOptions(request, runtime);
}

model ListAccountsForParentRequest {
  parentFolderId?: string(name='ParentFolderId'),
  queryKeyword?: string(name='QueryKeyword'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListAccountsForParentResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  accounts?: {
    account?: [ 
    {
      status?: string(name='Status'),
      type?: string(name='Type'),
      displayName?: string(name='DisplayName'),
      folderId?: string(name='FolderId'),
      resourceDirectoryId?: string(name='ResourceDirectoryId'),
      joinTime?: string(name='JoinTime'),
      accountId?: string(name='AccountId'),
      joinMethod?: string(name='JoinMethod'),
      modifyTime?: string(name='ModifyTime'),
    }
  ](name='Account')
  }(name='Accounts'),
}

model ListAccountsForParentResponse = {
  headers: map[string]string(name='headers'),
  body: ListAccountsForParentResponseBody(name='body'),
}

async function listAccountsForParentWithOptions(request: ListAccountsForParentRequest, runtime: Util.RuntimeOptions): ListAccountsForParentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListAccountsForParent', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listAccountsForParent(request: ListAccountsForParentRequest): ListAccountsForParentResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAccountsForParentWithOptions(request, runtime);
}

model ListAncestorsRequest {
  childId?: string(name='ChildId'),
}

model ListAncestorsResponseBody = {
  requestId?: string(name='RequestId'),
  folders?: {
    folder?: [ 
    {
      folderId?: string(name='FolderId'),
      createTime?: string(name='CreateTime'),
      folderName?: string(name='FolderName'),
    }
  ](name='Folder')
  }(name='Folders'),
}

model ListAncestorsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAncestorsResponseBody(name='body'),
}

async function listAncestorsWithOptions(request: ListAncestorsRequest, runtime: Util.RuntimeOptions): ListAncestorsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListAncestors', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listAncestors(request: ListAncestorsRequest): ListAncestorsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAncestorsWithOptions(request, runtime);
}

model ListControlPoliciesRequest {
  policyType?: string(name='PolicyType'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  language?: string(name='Language'),
}

model ListControlPoliciesResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  controlPolicies?: {
    controlPolicy?: [ 
    {
      updateDate?: string(name='UpdateDate'),
      description?: string(name='Description'),
      effectScope?: string(name='EffectScope'),
      attachmentCount?: string(name='AttachmentCount'),
      policyName?: string(name='PolicyName'),
      policyId?: string(name='PolicyId'),
      createDate?: string(name='CreateDate'),
      policyType?: string(name='PolicyType'),
    }
  ](name='ControlPolicy')
  }(name='ControlPolicies'),
}

model ListControlPoliciesResponse = {
  headers: map[string]string(name='headers'),
  body: ListControlPoliciesResponseBody(name='body'),
}

async function listControlPoliciesWithOptions(request: ListControlPoliciesRequest, runtime: Util.RuntimeOptions): ListControlPoliciesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListControlPolicies', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listControlPolicies(request: ListControlPoliciesRequest): ListControlPoliciesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listControlPoliciesWithOptions(request, runtime);
}

model ListControlPolicyAttachmentsForTargetRequest {
  targetId?: string(name='TargetId'),
  language?: string(name='Language'),
}

model ListControlPolicyAttachmentsForTargetResponseBody = {
  requestId?: string(name='RequestId'),
  controlPolicyAttachments?: {
    controlPolicyAttachment?: [ 
    {
      description?: string(name='Description'),
      effectScope?: string(name='EffectScope'),
      policyName?: string(name='PolicyName'),
      policyId?: string(name='PolicyId'),
      attachDate?: string(name='AttachDate'),
      policyType?: string(name='PolicyType'),
    }
  ](name='ControlPolicyAttachment')
  }(name='ControlPolicyAttachments'),
}

model ListControlPolicyAttachmentsForTargetResponse = {
  headers: map[string]string(name='headers'),
  body: ListControlPolicyAttachmentsForTargetResponseBody(name='body'),
}

async function listControlPolicyAttachmentsForTargetWithOptions(request: ListControlPolicyAttachmentsForTargetRequest, runtime: Util.RuntimeOptions): ListControlPolicyAttachmentsForTargetResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListControlPolicyAttachmentsForTarget', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listControlPolicyAttachmentsForTarget(request: ListControlPolicyAttachmentsForTargetRequest): ListControlPolicyAttachmentsForTargetResponse {
  var runtime = new Util.RuntimeOptions{};
  return listControlPolicyAttachmentsForTargetWithOptions(request, runtime);
}

model ListDelegatedAdministratorsRequest {
  servicePrincipal?: string(name='ServicePrincipal'),
}

model ListDelegatedAdministratorsResponseBody = {
  requestId?: string(name='RequestId'),
  accounts?: {
    account?: [ 
    {
      accountId?: string(name='AccountId'),
      displayName?: string(name='DisplayName'),
      joinMethod?: string(name='JoinMethod'),
      servicePrincipal?: string(name='ServicePrincipal'),
      delegationEnabledTime?: string(name='DelegationEnabledTime'),
    }
  ](name='Account')
  }(name='Accounts'),
}

model ListDelegatedAdministratorsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDelegatedAdministratorsResponseBody(name='body'),
}

async function listDelegatedAdministratorsWithOptions(request: ListDelegatedAdministratorsRequest, runtime: Util.RuntimeOptions): ListDelegatedAdministratorsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListDelegatedAdministrators', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listDelegatedAdministrators(request: ListDelegatedAdministratorsRequest): ListDelegatedAdministratorsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDelegatedAdministratorsWithOptions(request, runtime);
}

model ListDelegatedServicesForAccountRequest {
  accountId?: string(name='AccountId'),
}

model ListDelegatedServicesForAccountResponseBody = {
  requestId?: string(name='RequestId'),
  delegatedServices?: {
    delegatedService?: [ 
    {
      delegationEnabledTime?: string(name='DelegationEnabledTime'),
      servicePrincipal?: string(name='ServicePrincipal'),
    }
  ](name='DelegatedService')
  }(name='DelegatedServices'),
}

model ListDelegatedServicesForAccountResponse = {
  headers: map[string]string(name='headers'),
  body: ListDelegatedServicesForAccountResponseBody(name='body'),
}

async function listDelegatedServicesForAccountWithOptions(request: ListDelegatedServicesForAccountRequest, runtime: Util.RuntimeOptions): ListDelegatedServicesForAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListDelegatedServicesForAccount', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listDelegatedServicesForAccount(request: ListDelegatedServicesForAccountRequest): ListDelegatedServicesForAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDelegatedServicesForAccountWithOptions(request, runtime);
}

model ListFoldersForParentRequest {
  parentFolderId?: string(name='ParentFolderId'),
  queryKeyword?: string(name='QueryKeyword'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListFoldersForParentResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  folders?: {
    folder?: [ 
    {
      folderId?: string(name='FolderId'),
      createTime?: string(name='CreateTime'),
      folderName?: string(name='FolderName'),
    }
  ](name='Folder')
  }(name='Folders'),
}

model ListFoldersForParentResponse = {
  headers: map[string]string(name='headers'),
  body: ListFoldersForParentResponseBody(name='body'),
}

async function listFoldersForParentWithOptions(request: ListFoldersForParentRequest, runtime: Util.RuntimeOptions): ListFoldersForParentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListFoldersForParent', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listFoldersForParent(request: ListFoldersForParentRequest): ListFoldersForParentResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFoldersForParentWithOptions(request, runtime);
}

model ListHandshakesForAccountRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListHandshakesForAccountResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  handshakes?: {
    handshake?: [ 
    {
      status?: string(name='Status'),
      expireTime?: string(name='ExpireTime'),
      resourceDirectoryId?: string(name='ResourceDirectoryId'),
      createTime?: string(name='CreateTime'),
      note?: string(name='Note'),
      targetEntity?: string(name='TargetEntity'),
      masterAccountId?: string(name='MasterAccountId'),
      masterAccountName?: string(name='MasterAccountName'),
      modifyTime?: string(name='ModifyTime'),
      targetType?: string(name='TargetType'),
      handshakeId?: string(name='HandshakeId'),
    }
  ](name='Handshake')
  }(name='Handshakes'),
}

model ListHandshakesForAccountResponse = {
  headers: map[string]string(name='headers'),
  body: ListHandshakesForAccountResponseBody(name='body'),
}

async function listHandshakesForAccountWithOptions(request: ListHandshakesForAccountRequest, runtime: Util.RuntimeOptions): ListHandshakesForAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListHandshakesForAccount', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listHandshakesForAccount(request: ListHandshakesForAccountRequest): ListHandshakesForAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return listHandshakesForAccountWithOptions(request, runtime);
}

model ListHandshakesForResourceDirectoryRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListHandshakesForResourceDirectoryResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  handshakes?: {
    handshake?: [ 
    {
      status?: string(name='Status'),
      expireTime?: string(name='ExpireTime'),
      resourceDirectoryId?: string(name='ResourceDirectoryId'),
      createTime?: string(name='CreateTime'),
      note?: string(name='Note'),
      targetEntity?: string(name='TargetEntity'),
      masterAccountId?: string(name='MasterAccountId'),
      masterAccountName?: string(name='MasterAccountName'),
      modifyTime?: string(name='ModifyTime'),
      targetType?: string(name='TargetType'),
      handshakeId?: string(name='HandshakeId'),
    }
  ](name='Handshake')
  }(name='Handshakes'),
}

model ListHandshakesForResourceDirectoryResponse = {
  headers: map[string]string(name='headers'),
  body: ListHandshakesForResourceDirectoryResponseBody(name='body'),
}

async function listHandshakesForResourceDirectoryWithOptions(request: ListHandshakesForResourceDirectoryRequest, runtime: Util.RuntimeOptions): ListHandshakesForResourceDirectoryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListHandshakesForResourceDirectory', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listHandshakesForResourceDirectory(request: ListHandshakesForResourceDirectoryRequest): ListHandshakesForResourceDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return listHandshakesForResourceDirectoryWithOptions(request, runtime);
}

model ListPoliciesRequest {
  policyType?: string(name='PolicyType'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  language?: string(name='Language'),
}

model ListPoliciesResponseBody = {
  totalCount?: int32(name='TotalCount'),
  policies?: {
    policy?: [ 
    {
      defaultVersion?: string(name='DefaultVersion'),
      description?: string(name='Description'),
      updateDate?: string(name='UpdateDate'),
      attachmentCount?: int32(name='AttachmentCount'),
      policyName?: string(name='PolicyName'),
      createDate?: string(name='CreateDate'),
      policyType?: string(name='PolicyType'),
    }
  ](name='Policy')
  }(name='Policies'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model ListPoliciesResponse = {
  headers: map[string]string(name='headers'),
  body: ListPoliciesResponseBody(name='body'),
}

async function listPoliciesWithOptions(request: ListPoliciesRequest, runtime: Util.RuntimeOptions): ListPoliciesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListPolicies', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listPolicies(request: ListPoliciesRequest): ListPoliciesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPoliciesWithOptions(request, runtime);
}

model ListPolicyAttachmentsRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  policyType?: string(name='PolicyType'),
  policyName?: string(name='PolicyName'),
  principalType?: string(name='PrincipalType'),
  principalName?: string(name='PrincipalName'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  language?: string(name='Language'),
}

model ListPolicyAttachmentsResponseBody = {
  totalCount?: int32(name='TotalCount'),
  policyAttachments?: {
    policyAttachment?: [ 
    {
      description?: string(name='Description'),
      resourceGroupId?: string(name='ResourceGroupId'),
      policyName?: string(name='PolicyName'),
      principalName?: string(name='PrincipalName'),
      attachDate?: string(name='AttachDate'),
      policyType?: string(name='PolicyType'),
      principalType?: string(name='PrincipalType'),
    }
  ](name='PolicyAttachment')
  }(name='PolicyAttachments'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model ListPolicyAttachmentsResponse = {
  headers: map[string]string(name='headers'),
  body: ListPolicyAttachmentsResponseBody(name='body'),
}

async function listPolicyAttachmentsWithOptions(request: ListPolicyAttachmentsRequest, runtime: Util.RuntimeOptions): ListPolicyAttachmentsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListPolicyAttachments', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listPolicyAttachments(request: ListPolicyAttachmentsRequest): ListPolicyAttachmentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPolicyAttachmentsWithOptions(request, runtime);
}

model ListPolicyVersionsRequest {
  policyType?: string(name='PolicyType'),
  policyName?: string(name='PolicyName'),
}

model ListPolicyVersionsResponseBody = {
  requestId?: string(name='RequestId'),
  policyVersions?: {
    policyVersion?: [ 
    {
      isDefaultVersion?: boolean(name='IsDefaultVersion'),
      versionId?: string(name='VersionId'),
      createDate?: string(name='CreateDate'),
    }
  ](name='PolicyVersion')
  }(name='PolicyVersions'),
}

model ListPolicyVersionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListPolicyVersionsResponseBody(name='body'),
}

async function listPolicyVersionsWithOptions(request: ListPolicyVersionsRequest, runtime: Util.RuntimeOptions): ListPolicyVersionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListPolicyVersions', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listPolicyVersions(request: ListPolicyVersionsRequest): ListPolicyVersionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPolicyVersionsWithOptions(request, runtime);
}

model ListResourceGroupsRequest {
  status?: string(name='Status'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListResourceGroupsResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  resourceGroups?: {
    resourceGroup?: [ 
    {
      displayName?: string(name='DisplayName'),
      status?: string(name='Status'),
      accountId?: string(name='AccountId'),
      name?: string(name='Name'),
      createDate?: string(name='CreateDate'),
      id?: string(name='Id'),
    }
  ](name='ResourceGroup')
  }(name='ResourceGroups'),
}

model ListResourceGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListResourceGroupsResponseBody(name='body'),
}

async function listResourceGroupsWithOptions(request: ListResourceGroupsRequest, runtime: Util.RuntimeOptions): ListResourceGroupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListResourceGroups', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listResourceGroups(request: ListResourceGroupsRequest): ListResourceGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listResourceGroupsWithOptions(request, runtime);
}

model ListResourcesRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  service?: string(name='Service'),
  region?: string(name='Region'),
  resourceType?: string(name='ResourceType'),
  resourceId?: string(name='ResourceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  resourceIds?: string(name='ResourceIds'),
}

model ListResourcesResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  resources?: {
    resource?: [ 
    {
      service?: string(name='Service'),
      resourceType?: string(name='ResourceType'),
      resourceGroupId?: string(name='ResourceGroupId'),
      resourceId?: string(name='ResourceId'),
      createDate?: string(name='CreateDate'),
      regionId?: string(name='RegionId'),
    }
  ](name='Resource')
  }(name='Resources'),
}

model ListResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListResourcesResponseBody(name='body'),
}

async function listResourcesWithOptions(request: ListResourcesRequest, runtime: Util.RuntimeOptions): ListResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListResources', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listResources(request: ListResourcesRequest): ListResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listResourcesWithOptions(request, runtime);
}

model ListRolesRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  language?: string(name='Language'),
}

model ListRolesResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  roles?: {
    role?: [ 
    {
      rolePrincipalName?: string(name='RolePrincipalName'),
      updateDate?: string(name='UpdateDate'),
      description?: string(name='Description'),
      maxSessionDuration?: long(name='MaxSessionDuration'),
      latestDeletionTask?: {
        deletionTaskId?: string(name='DeletionTaskId'),
        createDate?: string(name='CreateDate'),
      }(name='LatestDeletionTask'),
      roleName?: string(name='RoleName'),
      createDate?: string(name='CreateDate'),
      roleId?: string(name='RoleId'),
      arn?: string(name='Arn'),
      isServiceLinkedRole?: boolean(name='IsServiceLinkedRole'),
    }
  ](name='Role')
  }(name='Roles'),
}

model ListRolesResponse = {
  headers: map[string]string(name='headers'),
  body: ListRolesResponseBody(name='body'),
}

async function listRolesWithOptions(request: ListRolesRequest, runtime: Util.RuntimeOptions): ListRolesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListRoles', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listRoles(request: ListRolesRequest): ListRolesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRolesWithOptions(request, runtime);
}

model ListTargetAttachmentsForControlPolicyRequest {
  policyId?: string(name='PolicyId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListTargetAttachmentsForControlPolicyResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  targetAttachments?: {
    targetAttachment?: [ 
    {
      targetId?: string(name='TargetId'),
      targetName?: string(name='TargetName'),
      attachDate?: string(name='AttachDate'),
      targetType?: string(name='TargetType'),
    }
  ](name='TargetAttachment')
  }(name='TargetAttachments'),
}

model ListTargetAttachmentsForControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ListTargetAttachmentsForControlPolicyResponseBody(name='body'),
}

async function listTargetAttachmentsForControlPolicyWithOptions(request: ListTargetAttachmentsForControlPolicyRequest, runtime: Util.RuntimeOptions): ListTargetAttachmentsForControlPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTargetAttachmentsForControlPolicy', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTargetAttachmentsForControlPolicy(request: ListTargetAttachmentsForControlPolicyRequest): ListTargetAttachmentsForControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTargetAttachmentsForControlPolicyWithOptions(request, runtime);
}

model ListTrustedServiceStatusRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  adminAccountId?: string(name='AdminAccountId'),
}

model ListTrustedServiceStatusResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  enabledServicePrincipals?: {
    enabledServicePrincipal?: [ 
    {
      servicePrincipal?: string(name='ServicePrincipal'),
      enableTime?: string(name='EnableTime'),
    }
  ](name='EnabledServicePrincipal')
  }(name='EnabledServicePrincipals'),
}

model ListTrustedServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ListTrustedServiceStatusResponseBody(name='body'),
}

async function listTrustedServiceStatusWithOptions(request: ListTrustedServiceStatusRequest, runtime: Util.RuntimeOptions): ListTrustedServiceStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTrustedServiceStatus', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTrustedServiceStatus(request: ListTrustedServiceStatusRequest): ListTrustedServiceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTrustedServiceStatusWithOptions(request, runtime);
}

model MoveAccountRequest {
  accountId?: string(name='AccountId'),
  destinationFolderId?: string(name='DestinationFolderId'),
}

model MoveAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model MoveAccountResponse = {
  headers: map[string]string(name='headers'),
  body: MoveAccountResponseBody(name='body'),
}

async function moveAccountWithOptions(request: MoveAccountRequest, runtime: Util.RuntimeOptions): MoveAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('MoveAccount', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function moveAccount(request: MoveAccountRequest): MoveAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return moveAccountWithOptions(request, runtime);
}

model PromoteResourceAccountRequest {
  accountId?: string(name='AccountId'),
  email?: string(name='Email'),
}

model PromoteResourceAccountResponseBody = {
  requestId?: string(name='RequestId'),
  account?: {
    status?: string(name='Status'),
    type?: string(name='Type'),
    displayName?: string(name='DisplayName'),
    folderId?: string(name='FolderId'),
    resourceDirectoryId?: string(name='ResourceDirectoryId'),
    recordId?: string(name='RecordId'),
    joinTime?: string(name='JoinTime'),
    accountId?: string(name='AccountId'),
    joinMethod?: string(name='JoinMethod'),
    accountName?: string(name='AccountName'),
    modifyTime?: string(name='ModifyTime'),
  }(name='Account'),
}

model PromoteResourceAccountResponse = {
  headers: map[string]string(name='headers'),
  body: PromoteResourceAccountResponseBody(name='body'),
}

async function promoteResourceAccountWithOptions(request: PromoteResourceAccountRequest, runtime: Util.RuntimeOptions): PromoteResourceAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PromoteResourceAccount', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function promoteResourceAccount(request: PromoteResourceAccountRequest): PromoteResourceAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return promoteResourceAccountWithOptions(request, runtime);
}

model RegisterDelegatedAdministratorRequest {
  accountId?: string(name='AccountId'),
  servicePrincipal?: string(name='ServicePrincipal'),
}

model RegisterDelegatedAdministratorResponseBody = {
  requestId?: string(name='RequestId'),
}

model RegisterDelegatedAdministratorResponse = {
  headers: map[string]string(name='headers'),
  body: RegisterDelegatedAdministratorResponseBody(name='body'),
}

async function registerDelegatedAdministratorWithOptions(request: RegisterDelegatedAdministratorRequest, runtime: Util.RuntimeOptions): RegisterDelegatedAdministratorResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RegisterDelegatedAdministrator', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function registerDelegatedAdministrator(request: RegisterDelegatedAdministratorRequest): RegisterDelegatedAdministratorResponse {
  var runtime = new Util.RuntimeOptions{};
  return registerDelegatedAdministratorWithOptions(request, runtime);
}

model RemoveCloudAccountRequest {
  accountId?: string(name='AccountId'),
}

model RemoveCloudAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveCloudAccountResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveCloudAccountResponseBody(name='body'),
}

async function removeCloudAccountWithOptions(request: RemoveCloudAccountRequest, runtime: Util.RuntimeOptions): RemoveCloudAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveCloudAccount', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeCloudAccount(request: RemoveCloudAccountRequest): RemoveCloudAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeCloudAccountWithOptions(request, runtime);
}

model ResendCreateCloudAccountEmailRequest {
  recordId?: string(name='RecordId'),
}

model ResendCreateCloudAccountEmailResponseBody = {
  requestId?: string(name='RequestId'),
  account?: {
    status?: string(name='Status'),
    type?: string(name='Type'),
    displayName?: string(name='DisplayName'),
    folderId?: string(name='FolderId'),
    resourceDirectoryId?: string(name='ResourceDirectoryId'),
    recordId?: string(name='RecordId'),
    joinTime?: string(name='JoinTime'),
    accountId?: string(name='AccountId'),
    joinMethod?: string(name='JoinMethod'),
    accountName?: string(name='AccountName'),
    modifyTime?: string(name='ModifyTime'),
  }(name='Account'),
}

model ResendCreateCloudAccountEmailResponse = {
  headers: map[string]string(name='headers'),
  body: ResendCreateCloudAccountEmailResponseBody(name='body'),
}

async function resendCreateCloudAccountEmailWithOptions(request: ResendCreateCloudAccountEmailRequest, runtime: Util.RuntimeOptions): ResendCreateCloudAccountEmailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ResendCreateCloudAccountEmail', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function resendCreateCloudAccountEmail(request: ResendCreateCloudAccountEmailRequest): ResendCreateCloudAccountEmailResponse {
  var runtime = new Util.RuntimeOptions{};
  return resendCreateCloudAccountEmailWithOptions(request, runtime);
}

model ResendPromoteResourceAccountEmailRequest {
  recordId?: string(name='RecordId'),
}

model ResendPromoteResourceAccountEmailResponseBody = {
  requestId?: string(name='RequestId'),
  account?: {
    status?: string(name='Status'),
    type?: string(name='Type'),
    displayName?: string(name='DisplayName'),
    folderId?: string(name='FolderId'),
    resourceDirectoryId?: string(name='ResourceDirectoryId'),
    recordId?: string(name='RecordId'),
    joinTime?: string(name='JoinTime'),
    accountId?: string(name='AccountId'),
    joinMethod?: string(name='JoinMethod'),
    accountName?: string(name='AccountName'),
    modifyTime?: string(name='ModifyTime'),
  }(name='Account'),
}

model ResendPromoteResourceAccountEmailResponse = {
  headers: map[string]string(name='headers'),
  body: ResendPromoteResourceAccountEmailResponseBody(name='body'),
}

async function resendPromoteResourceAccountEmailWithOptions(request: ResendPromoteResourceAccountEmailRequest, runtime: Util.RuntimeOptions): ResendPromoteResourceAccountEmailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ResendPromoteResourceAccountEmail', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function resendPromoteResourceAccountEmail(request: ResendPromoteResourceAccountEmailRequest): ResendPromoteResourceAccountEmailResponse {
  var runtime = new Util.RuntimeOptions{};
  return resendPromoteResourceAccountEmailWithOptions(request, runtime);
}

model SetDefaultPolicyVersionRequest {
  policyName?: string(name='PolicyName'),
  versionId?: string(name='VersionId'),
}

model SetDefaultPolicyVersionResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetDefaultPolicyVersionResponse = {
  headers: map[string]string(name='headers'),
  body: SetDefaultPolicyVersionResponseBody(name='body'),
}

async function setDefaultPolicyVersionWithOptions(request: SetDefaultPolicyVersionRequest, runtime: Util.RuntimeOptions): SetDefaultPolicyVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetDefaultPolicyVersion', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setDefaultPolicyVersion(request: SetDefaultPolicyVersionRequest): SetDefaultPolicyVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDefaultPolicyVersionWithOptions(request, runtime);
}

model UpdateAccountRequest {
  newDisplayName?: string(name='NewDisplayName'),
  newAccountType?: string(name='NewAccountType'),
  accountId?: string(name='AccountId'),
}

model UpdateAccountResponseBody = {
  account?: {
    status?: string(name='Status'),
    type?: string(name='Type'),
    displayName?: string(name='DisplayName'),
    folderId?: string(name='FolderId'),
    resourceDirectoryId?: string(name='ResourceDirectoryId'),
    joinTime?: string(name='JoinTime'),
    accountId?: string(name='AccountId'),
    joinMethod?: string(name='JoinMethod'),
    modifyTime?: string(name='ModifyTime'),
    accountName?: string(name='AccountName'),
  }(name='Account'),
  requestId?: string(name='RequestId'),
}

model UpdateAccountResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAccountResponseBody(name='body'),
}

async function updateAccountWithOptions(request: UpdateAccountRequest, runtime: Util.RuntimeOptions): UpdateAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateAccount', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateAccount(request: UpdateAccountRequest): UpdateAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAccountWithOptions(request, runtime);
}

model UpdateControlPolicyRequest {
  policyId?: string(name='PolicyId'),
  newPolicyName?: string(name='NewPolicyName'),
  newDescription?: string(name='NewDescription'),
  newPolicyDocument?: string(name='NewPolicyDocument'),
}

model UpdateControlPolicyResponseBody = {
  controlPolicy?: {
    updateDate?: string(name='UpdateDate'),
    description?: string(name='Description'),
    effectScope?: string(name='EffectScope'),
    attachmentCount?: string(name='AttachmentCount'),
    policyName?: string(name='PolicyName'),
    policyId?: string(name='PolicyId'),
    createDate?: string(name='CreateDate'),
    policyType?: string(name='PolicyType'),
  }(name='ControlPolicy'),
  requestId?: string(name='RequestId'),
}

model UpdateControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateControlPolicyResponseBody(name='body'),
}

async function updateControlPolicyWithOptions(request: UpdateControlPolicyRequest, runtime: Util.RuntimeOptions): UpdateControlPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateControlPolicy', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateControlPolicy(request: UpdateControlPolicyRequest): UpdateControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateControlPolicyWithOptions(request, runtime);
}

model UpdateFolderRequest {
  folderId?: string(name='FolderId'),
  newFolderName?: string(name='NewFolderName'),
}

model UpdateFolderResponseBody = {
  requestId?: string(name='RequestId'),
  folder?: {
    folderId?: string(name='FolderId'),
    createTime?: string(name='CreateTime'),
    parentFolderId?: string(name='ParentFolderId'),
    folderName?: string(name='FolderName'),
  }(name='Folder'),
}

model UpdateFolderResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateFolderResponseBody(name='body'),
}

async function updateFolderWithOptions(request: UpdateFolderRequest, runtime: Util.RuntimeOptions): UpdateFolderResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateFolder', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateFolder(request: UpdateFolderRequest): UpdateFolderResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateFolderWithOptions(request, runtime);
}

model UpdateResourceGroupRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  newDisplayName?: string(name='NewDisplayName'),
}

model UpdateResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
  resourceGroup?: {
    displayName?: string(name='DisplayName'),
    accountId?: string(name='AccountId'),
    name?: string(name='Name'),
    createDate?: string(name='CreateDate'),
    id?: string(name='Id'),
  }(name='ResourceGroup'),
}

model UpdateResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateResourceGroupResponseBody(name='body'),
}

async function updateResourceGroupWithOptions(request: UpdateResourceGroupRequest, runtime: Util.RuntimeOptions): UpdateResourceGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateResourceGroup', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateResourceGroup(request: UpdateResourceGroupRequest): UpdateResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateResourceGroupWithOptions(request, runtime);
}

model UpdateRoleRequest {
  roleName?: string(name='RoleName'),
  newAssumeRolePolicyDocument?: string(name='NewAssumeRolePolicyDocument'),
  newMaxSessionDuration?: long(name='NewMaxSessionDuration'),
  newDescription?: string(name='NewDescription'),
}

model UpdateRoleResponseBody = {
  role?: {
    assumeRolePolicyDocument?: string(name='AssumeRolePolicyDocument'),
    rolePrincipalName?: string(name='RolePrincipalName'),
    description?: string(name='Description'),
    updateDate?: string(name='UpdateDate'),
    maxSessionDuration?: long(name='MaxSessionDuration'),
    roleName?: string(name='RoleName'),
    createDate?: string(name='CreateDate'),
    roleId?: string(name='RoleId'),
    arn?: string(name='Arn'),
  }(name='Role'),
  requestId?: string(name='RequestId'),
}

model UpdateRoleResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateRoleResponseBody(name='body'),
}

async function updateRoleWithOptions(request: UpdateRoleRequest, runtime: Util.RuntimeOptions): UpdateRoleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateRole', '2020-03-31', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateRole(request: UpdateRoleRequest): UpdateRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateRoleWithOptions(request, runtime);
}

