/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  @endpointMap = {
    ap-northeast-1 = 'resourcemanager.ap-northeast-1.aliyuncs.com',
    ap-south-1 = 'resourcemanager.ap-south-1.aliyuncs.com',
    ap-southeast-1 = 'resourcemanager.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'resourcemanager.ap-southeast-2.aliyuncs.com',
    ap-southeast-3 = 'resourcemanager.ap-southeast-3.aliyuncs.com',
    ap-southeast-5 = 'resourcemanager.ap-southeast-5.aliyuncs.com',
    cn-beijing = 'resourcemanager.cn-beijing.aliyuncs.com',
    cn-chengdu = 'resourcemanager.cn-chengdu.aliyuncs.com',
    cn-hangzhou-finance = 'resourcemanager.cn-hangzhou-finance.aliyuncs.com',
    cn-hongkong = 'resourcemanager.cn-hongkong.aliyuncs.com',
    cn-huhehaote = 'resourcemanager.cn-huhehaote.aliyuncs.com',
    cn-north-2-gov-1 = 'resourcemanager.cn-north-2-gov-1.aliyuncs.com',
    cn-qingdao = 'resourcemanager.cn-qingdao.aliyuncs.com',
    cn-shanghai-finance-1 = 'resourcemanager.cn-shanghai-finance-1.aliyuncs.com',
    cn-shenzhen = 'resourcemanager.cn-shenzhen.aliyuncs.com',
    cn-shenzhen-finance-1 = 'resourcemanager.cn-shenzhen-finance-1.aliyuncs.com',
    cn-wulanchabu = 'resourcemanager.cn-wulanchabu.aliyuncs.com',
    cn-zhangjiakou = 'resourcemanager.cn-zhangjiakou.aliyuncs.com',
    eu-central-1 = 'resourcemanager.eu-central-1.aliyuncs.com',
    eu-west-1 = 'resourcemanager.eu-west-1.aliyuncs.com',
    me-east-1 = 'resourcemanager.me-east-1.aliyuncs.com',
    us-east-1 = 'resourcemanager.us-east-1.aliyuncs.com',
    us-west-1 = 'resourcemanager.us-west-1.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('resourcemanager', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AcceptHandshakeRequest {
  handshakeId?: string(name='HandshakeId', example='h-Ih8IuPfvV0t0****'),
}

model AcceptHandshakeResponseBody = {
  handshake?: {
    createTime?: string(name='CreateTime', example='2021-01-06T02:15:40Z'),
    expireTime?: string(name='ExpireTime', example='2021-01-20T02:15:40Z'),
    handshakeId?: string(name='HandshakeId', example='h-Ih8IuPfvV0t0****'),
    masterAccountId?: string(name='MasterAccountId', example='151266687691****'),
    masterAccountName?: string(name='MasterAccountName', example='CompanyA'),
    modifyTime?: string(name='ModifyTime', example='2021-01-06T02:16:40Z'),
    note?: string(name='Note'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', example='rd-3G****'),
    status?: string(name='Status', example='Accepted'),
    targetEntity?: string(name='TargetEntity', example='177242285274****'),
    targetType?: string(name='TargetType', example='Account'),
  }(name='Handshake'),
  requestId?: string(name='RequestId', example='5828C836-3286-49A6-9006-15231BB19342'),
}

model AcceptHandshakeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AcceptHandshakeResponseBody(name='body'),
}

async function acceptHandshakeWithOptions(request: AcceptHandshakeRequest, runtime: Util.RuntimeOptions): AcceptHandshakeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.handshakeId)) {
    query['HandshakeId'] = request.handshakeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AcceptHandshake',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function acceptHandshake(request: AcceptHandshakeRequest): AcceptHandshakeResponse {
  var runtime = new Util.RuntimeOptions{};
  return acceptHandshakeWithOptions(request, runtime);
}

model AttachControlPolicyRequest {
  policyId?: string(name='PolicyId', example='cp-jExXAqIYkwHN****'),
  targetId?: string(name='TargetId', example='fd-ZDNPiT****'),
}

model AttachControlPolicyResponseBody = {
  requestId?: string(name='RequestId', example='95060F1D-6990-4645-8920-A81D1BBFE992'),
}

model AttachControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AttachControlPolicyResponseBody(name='body'),
}

async function attachControlPolicyWithOptions(request: AttachControlPolicyRequest, runtime: Util.RuntimeOptions): AttachControlPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  if (!Util.isUnset(request.targetId)) {
    query['TargetId'] = request.targetId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AttachControlPolicy',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function attachControlPolicy(request: AttachControlPolicyRequest): AttachControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachControlPolicyWithOptions(request, runtime);
}

model AttachPolicyRequest {
  policyName?: string(name='PolicyName', example='AdministratorAccess'),
  policyType?: string(name='PolicyType', example='System'),
  principalName?: string(name='PrincipalName', example='alice@demo.onaliyun.com'),
  principalType?: string(name='PrincipalType', example='IMSUser'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-9gLOoK****'),
}

model AttachPolicyResponseBody = {
  requestId?: string(name='RequestId', example='697852FB-50D7-44D9-9774-530C31EAC572'),
}

model AttachPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AttachPolicyResponseBody(name='body'),
}

async function attachPolicyWithOptions(request: AttachPolicyRequest, runtime: Util.RuntimeOptions): AttachPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.policyName)) {
    query['PolicyName'] = request.policyName;
  }
  if (!Util.isUnset(request.policyType)) {
    query['PolicyType'] = request.policyType;
  }
  if (!Util.isUnset(request.principalName)) {
    query['PrincipalName'] = request.principalName;
  }
  if (!Util.isUnset(request.principalType)) {
    query['PrincipalType'] = request.principalType;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AttachPolicy',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function attachPolicy(request: AttachPolicyRequest): AttachPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachPolicyWithOptions(request, runtime);
}

model BindSecureMobilePhoneRequest {
  accountId?: string(name='AccountId', example='138660628348****'),
  secureMobilePhone?: string(name='SecureMobilePhone', example='xx-13900001234'),
  verificationCode?: string(name='VerificationCode', example='123456'),
}

model BindSecureMobilePhoneResponseBody = {
  requestId?: string(name='RequestId', example='0217AFEB-5318-56D4-B167-1933D83EDF3F'),
}

model BindSecureMobilePhoneResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BindSecureMobilePhoneResponseBody(name='body'),
}

async function bindSecureMobilePhoneWithOptions(request: BindSecureMobilePhoneRequest, runtime: Util.RuntimeOptions): BindSecureMobilePhoneResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.secureMobilePhone)) {
    query['SecureMobilePhone'] = request.secureMobilePhone;
  }
  if (!Util.isUnset(request.verificationCode)) {
    query['VerificationCode'] = request.verificationCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BindSecureMobilePhone',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function bindSecureMobilePhone(request: BindSecureMobilePhoneRequest): BindSecureMobilePhoneResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindSecureMobilePhoneWithOptions(request, runtime);
}

model CancelChangeAccountEmailRequest {
  accountId?: string(name='AccountId', example='181761095690****'),
}

model CancelChangeAccountEmailResponseBody = {
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model CancelChangeAccountEmailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelChangeAccountEmailResponseBody(name='body'),
}

async function cancelChangeAccountEmailWithOptions(request: CancelChangeAccountEmailRequest, runtime: Util.RuntimeOptions): CancelChangeAccountEmailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelChangeAccountEmail',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelChangeAccountEmail(request: CancelChangeAccountEmailRequest): CancelChangeAccountEmailResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelChangeAccountEmailWithOptions(request, runtime);
}

model CancelCreateCloudAccountRequest {
  recordId?: string(name='RecordId', example='06950264-3f0d-4ca9-82dd-6ee7a3d33d6b'),
}

model CancelCreateCloudAccountResponseBody = {
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model CancelCreateCloudAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelCreateCloudAccountResponseBody(name='body'),
}

async function cancelCreateCloudAccountWithOptions(request: CancelCreateCloudAccountRequest, runtime: Util.RuntimeOptions): CancelCreateCloudAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.recordId)) {
    query['RecordId'] = request.recordId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelCreateCloudAccount',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelCreateCloudAccount(request: CancelCreateCloudAccountRequest): CancelCreateCloudAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelCreateCloudAccountWithOptions(request, runtime);
}

model CancelHandshakeRequest {
  handshakeId?: string(name='HandshakeId', example='h-ycm4rp****'),
}

model CancelHandshakeResponseBody = {
  handshake?: {
    createTime?: string(name='CreateTime', example='2018-08-10T09:55:41Z'),
    expireTime?: string(name='ExpireTime', example='2018-08-24T09:55:41Z'),
    handshakeId?: string(name='HandshakeId', example='h-ycm4rp****'),
    masterAccountId?: string(name='MasterAccountId', example='172841235500****'),
    masterAccountName?: string(name='MasterAccountName', example='Alice'),
    modifyTime?: string(name='ModifyTime', example='2018-08-10T09:55:41Z'),
    note?: string(name='Note'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', example='h-ycm4rp****'),
    status?: string(name='Status', example='Cancelled'),
    targetEntity?: string(name='TargetEntity', example='someone@example.com'),
    targetType?: string(name='TargetType', example='Email'),
  }(name='Handshake'),
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model CancelHandshakeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelHandshakeResponseBody(name='body'),
}

async function cancelHandshakeWithOptions(request: CancelHandshakeRequest, runtime: Util.RuntimeOptions): CancelHandshakeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.handshakeId)) {
    query['HandshakeId'] = request.handshakeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelHandshake',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelHandshake(request: CancelHandshakeRequest): CancelHandshakeResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelHandshakeWithOptions(request, runtime);
}

model CancelPromoteResourceAccountRequest {
  recordId?: string(name='RecordId', example='06950264-3f0d-4ca9-82dd-6ee7a3d33d6b'),
}

model CancelPromoteResourceAccountResponseBody = {
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model CancelPromoteResourceAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelPromoteResourceAccountResponseBody(name='body'),
}

async function cancelPromoteResourceAccountWithOptions(request: CancelPromoteResourceAccountRequest, runtime: Util.RuntimeOptions): CancelPromoteResourceAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.recordId)) {
    query['RecordId'] = request.recordId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelPromoteResourceAccount',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelPromoteResourceAccount(request: CancelPromoteResourceAccountRequest): CancelPromoteResourceAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelPromoteResourceAccountWithOptions(request, runtime);
}

model ChangeAccountEmailRequest {
  accountId?: string(name='AccountId', example='181761095690****'),
  email?: string(name='Email', example='someone@example.com'),
}

model ChangeAccountEmailResponseBody = {
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model ChangeAccountEmailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChangeAccountEmailResponseBody(name='body'),
}

async function changeAccountEmailWithOptions(request: ChangeAccountEmailRequest, runtime: Util.RuntimeOptions): ChangeAccountEmailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.email)) {
    query['Email'] = request.email;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChangeAccountEmail',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function changeAccountEmail(request: ChangeAccountEmailRequest): ChangeAccountEmailResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeAccountEmailWithOptions(request, runtime);
}

model CheckAccountDeleteRequest {
  accountId?: string(name='AccountId', example='179855839641****'),
}

model CheckAccountDeleteResponseBody = {
  requestId?: string(name='RequestId', example='7CDDDCEF-CDFD-0825-B7D7-217BE0897B22'),
}

model CheckAccountDeleteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckAccountDeleteResponseBody(name='body'),
}

async function checkAccountDeleteWithOptions(request: CheckAccountDeleteRequest, runtime: Util.RuntimeOptions): CheckAccountDeleteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckAccountDelete',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkAccountDelete(request: CheckAccountDeleteRequest): CheckAccountDeleteResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkAccountDeleteWithOptions(request, runtime);
}

model CreateCloudAccountRequest {
  displayName?: string(name='DisplayName', example='admin-****'),
  email?: string(name='Email', example='someone@example.com'),
  parentFolderId?: string(name='ParentFolderId', example='fd-bVaRIG****'),
  payerAccountId?: string(name='PayerAccountId', example='12323344****'),
}

model CreateCloudAccountResponseBody = {
  account?: {
    accountId?: string(name='AccountId', example='12323344****'),
    accountName?: string(name='AccountName', example='someone@example.com'),
    displayName?: string(name='DisplayName', example='admin-****'),
    folderId?: string(name='FolderId', example='fd-bVaRIG****'),
    joinMethod?: string(name='JoinMethod', example='created'),
    modifyTime?: string(name='ModifyTime', example='2015-01-23T12:33:18Z'),
    recordId?: string(name='RecordId', example='06950264-3f0d-4ca9-82dd-6ee7a3d3****'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', example='rd-k3****'),
    status?: string(name='Status', example='CreateVerifying'),
    type?: string(name='Type', example='CloudAccount'),
  }(name='Account'),
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model CreateCloudAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCloudAccountResponseBody(name='body'),
}

async function createCloudAccountWithOptions(request: CreateCloudAccountRequest, runtime: Util.RuntimeOptions): CreateCloudAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.displayName)) {
    query['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.email)) {
    query['Email'] = request.email;
  }
  if (!Util.isUnset(request.parentFolderId)) {
    query['ParentFolderId'] = request.parentFolderId;
  }
  if (!Util.isUnset(request.payerAccountId)) {
    query['PayerAccountId'] = request.payerAccountId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCloudAccount',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCloudAccount(request: CreateCloudAccountRequest): CreateCloudAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCloudAccountWithOptions(request, runtime);
}

model CreateControlPolicyRequest {
  description?: string(name='Description', example='ExampleControlPolicy'),
  effectScope?: string(name='EffectScope', example='RAM'),
  policyDocument?: string(name='PolicyDocument', example='{"Version":"1","Statement":[{"Effect":"Deny","Action":["ram:UpdateRole","ram:DeleteRole","ram:AttachPolicyToRole","ram:DetachPolicyFromRole"],"Resource":"acs:ram:*:*:role/ResourceDirectoryAccountAccessRole"}]}'),
  policyName?: string(name='PolicyName', example='ExampleControlPolicy'),
}

model CreateControlPolicyResponseBody = {
  controlPolicy?: {
    attachmentCount?: string(name='AttachmentCount', example='0'),
    createDate?: string(name='CreateDate', example='2021-03-18T09:24:19Z'),
    description?: string(name='Description', example='ExampleControlPolicy'),
    effectScope?: string(name='EffectScope', example='RAM'),
    policyId?: string(name='PolicyId', example='cp-jExXAqIYkwHN****'),
    policyName?: string(name='PolicyName', example='ExampleControlPolicy'),
    policyType?: string(name='PolicyType', example='Custom'),
    updateDate?: string(name='UpdateDate', example='2021-03-18T09:24:19Z'),
  }(name='ControlPolicy'),
  requestId?: string(name='RequestId', example='776B05B3-A0B0-464B-A191-F4E1119A94B2'),
}

model CreateControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateControlPolicyResponseBody(name='body'),
}

async function createControlPolicyWithOptions(request: CreateControlPolicyRequest, runtime: Util.RuntimeOptions): CreateControlPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.effectScope)) {
    query['EffectScope'] = request.effectScope;
  }
  if (!Util.isUnset(request.policyDocument)) {
    query['PolicyDocument'] = request.policyDocument;
  }
  if (!Util.isUnset(request.policyName)) {
    query['PolicyName'] = request.policyName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateControlPolicy',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createControlPolicy(request: CreateControlPolicyRequest): CreateControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createControlPolicyWithOptions(request, runtime);
}

model CreateFolderRequest {
  folderName?: string(name='FolderName', example='rdFolder'),
  parentFolderId?: string(name='ParentFolderId', example='r-b1****'),
}

model CreateFolderResponseBody = {
  folder?: {
    createTime?: string(name='CreateTime', example='2019-02-19T09:34:50.757Z'),
    folderId?: string(name='FolderId', example='fd-u8B321****'),
    folderName?: string(name='FolderName', example='rdFolder'),
    parentFolderId?: string(name='ParentFolderId', example='r-b1****'),
  }(name='Folder'),
  requestId?: string(name='RequestId', example='C2CBCA30-C8DD-423E-B4AD-4FB694C9180C'),
}

model CreateFolderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFolderResponseBody(name='body'),
}

async function createFolderWithOptions(request: CreateFolderRequest, runtime: Util.RuntimeOptions): CreateFolderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.folderName)) {
    query['FolderName'] = request.folderName;
  }
  if (!Util.isUnset(request.parentFolderId)) {
    query['ParentFolderId'] = request.parentFolderId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateFolder',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createFolder(request: CreateFolderRequest): CreateFolderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFolderWithOptions(request, runtime);
}

model CreatePolicyRequest {
  description?: string(name='Description'),
  policyDocument?: string(name='PolicyDocument', example='{ "Statement": [{ "Action": ["oss:*"], "Effect": "Allow", "Resource": ["acs:oss:*:*:*"]}], "Version": "1"}'),
  policyName?: string(name='PolicyName', example='OSS-Administrator'),
}

model CreatePolicyResponseBody = {
  policy?: {
    createDate?: string(name='CreateDate', example='2015-01-23T12:33:18Z'),
    defaultVersion?: string(name='DefaultVersion', example='v1'),
    description?: string(name='Description'),
    policyName?: string(name='PolicyName', example='OSS-Administrator'),
    policyType?: string(name='PolicyType', example='Custom'),
  }(name='Policy'),
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model CreatePolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreatePolicyResponseBody(name='body'),
}

async function createPolicyWithOptions(request: CreatePolicyRequest, runtime: Util.RuntimeOptions): CreatePolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.policyDocument)) {
    query['PolicyDocument'] = request.policyDocument;
  }
  if (!Util.isUnset(request.policyName)) {
    query['PolicyName'] = request.policyName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreatePolicy',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createPolicy(request: CreatePolicyRequest): CreatePolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPolicyWithOptions(request, runtime);
}

model CreatePolicyVersionRequest {
  policyDocument?: string(name='PolicyDocument', example='{ "Statement": [{ "Action": ["oss:*"], "Effect": "Allow", "Resource": ["acs:oss:*:*:*"]}], "Version": "1"}'),
  policyName?: string(name='PolicyName', example='OSS-Administrator'),
  setAsDefault?: boolean(name='SetAsDefault', example='false'),
}

model CreatePolicyVersionResponseBody = {
  policyVersion?: {
    createDate?: string(name='CreateDate', example='2015-01-23T12:33:18'),
    isDefaultVersion?: boolean(name='IsDefaultVersion', example='false'),
    versionId?: string(name='VersionId', example='v3'),
  }(name='PolicyVersion'),
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model CreatePolicyVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreatePolicyVersionResponseBody(name='body'),
}

async function createPolicyVersionWithOptions(request: CreatePolicyVersionRequest, runtime: Util.RuntimeOptions): CreatePolicyVersionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.policyDocument)) {
    query['PolicyDocument'] = request.policyDocument;
  }
  if (!Util.isUnset(request.policyName)) {
    query['PolicyName'] = request.policyName;
  }
  if (!Util.isUnset(request.setAsDefault)) {
    query['SetAsDefault'] = request.setAsDefault;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreatePolicyVersion',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createPolicyVersion(request: CreatePolicyVersionRequest): CreatePolicyVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPolicyVersionWithOptions(request, runtime);
}

model CreateResourceAccountRequest {
  accountNamePrefix?: string(name='AccountNamePrefix', example='alice'),
  displayName?: string(name='DisplayName', example='Dev'),
  parentFolderId?: string(name='ParentFolderId', example='fd-r23M55****'),
  payerAccountId?: string(name='PayerAccountId', example='12323344****'),
  resellAccountType?: string(name='ResellAccountType'),
  tag?: [ 
    {
      key?: string(name='Key', example='k1'),
      value?: string(name='Value', example='v1'),
    }
  ](name='Tag'),
}

model CreateResourceAccountResponseBody = {
  account?: {
    accountId?: string(name='AccountId', example='112730938585****'),
    accountName?: string(name='AccountName', example='alice@rd-3g****.aliyunid.com'),
    displayName?: string(name='DisplayName', example='Dev'),
    folderId?: string(name='FolderId', example='fd-r23M55****'),
    joinMethod?: string(name='JoinMethod', example='created'),
    joinTime?: string(name='JoinTime', example='2020-12-31T03:37:39.456Z'),
    modifyTime?: string(name='ModifyTime', example='2020-12-31T03:37:39.456Z'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', example='rd-3G****'),
    status?: string(name='Status', example='CreateSuccess'),
    type?: string(name='Type', example='ResourceAccount'),
  }(name='Account'),
  requestId?: string(name='RequestId', example='B356A415-D860-43E5-865A-E2193D62BBD6'),
}

model CreateResourceAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateResourceAccountResponseBody(name='body'),
}

async function createResourceAccountWithOptions(request: CreateResourceAccountRequest, runtime: Util.RuntimeOptions): CreateResourceAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountNamePrefix)) {
    query['AccountNamePrefix'] = request.accountNamePrefix;
  }
  if (!Util.isUnset(request.displayName)) {
    query['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.parentFolderId)) {
    query['ParentFolderId'] = request.parentFolderId;
  }
  if (!Util.isUnset(request.payerAccountId)) {
    query['PayerAccountId'] = request.payerAccountId;
  }
  if (!Util.isUnset(request.resellAccountType)) {
    query['ResellAccountType'] = request.resellAccountType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateResourceAccount',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createResourceAccount(request: CreateResourceAccountRequest): CreateResourceAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return createResourceAccountWithOptions(request, runtime);
}

model CreateResourceGroupRequest {
  displayName?: string(name='DisplayName', example='my-project'),
  name?: string(name='Name', example='my-project'),
}

model CreateResourceGroupResponseBody = {
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  resourceGroup?: {
    accountId?: string(name='AccountId', example='151266687691****'),
    createDate?: string(name='CreateDate', example='2021-06-05T14:39:13+08:00'),
    displayName?: string(name='DisplayName', example='my-project'),
    id?: string(name='Id', example='rg-9gLOoK****'),
    name?: string(name='Name', example='my-project'),
    regionStatuses?: {
      regionStatus?: [ 
      {
        regionId?: string(name='RegionId', example='cn-qingdao'),
        status?: string(name='Status', example='Creating'),
      }
    ](name='RegionStatus')
    }(name='RegionStatuses'),
    status?: string(name='Status', example='Creating'),
  }(name='ResourceGroup'),
}

model CreateResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateResourceGroupResponseBody(name='body'),
}

async function createResourceGroupWithOptions(request: CreateResourceGroupRequest, runtime: Util.RuntimeOptions): CreateResourceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.displayName)) {
    query['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateResourceGroup',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createResourceGroup(request: CreateResourceGroupRequest): CreateResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createResourceGroupWithOptions(request, runtime);
}

model CreateRoleRequest {
  assumeRolePolicyDocument?: string(name='AssumeRolePolicyDocument', example='{ "Statement": [ { "Action": "sts:AssumeRole", "Effect": "Allow", "Principal": { "RAM": "acs:ram::12345678901234****:root" } } ], "Version": "1" }'),
  description?: string(name='Description'),
  maxSessionDuration?: long(name='MaxSessionDuration', example='3600'),
  roleName?: string(name='RoleName', example='ECSAdmin'),
}

model CreateRoleResponseBody = {
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  role?: {
    arn?: string(name='Arn', example='acs:ram::123456789012****:role/ECSAdmin'),
    assumeRolePolicyDocument?: string(name='AssumeRolePolicyDocument', example='{ \\"Statement\\": [ { \\"Action\\": \\"sts:AssumeRole\\", \\"Effect\\": \\"Allow\\", \\"Principal\\": { \\"RAM\\": \\"acs:ram::12345678901234****:root\\" } } ], \\"Version\\": \\"1\\" }'),
    createDate?: string(name='CreateDate', example='2015-01-23T12:33:18Z'),
    description?: string(name='Description'),
    maxSessionDuration?: long(name='MaxSessionDuration', example='3600'),
    roleId?: string(name='RoleId', example='90123456789****'),
    roleName?: string(name='RoleName', example='ECSAdmin'),
    rolePrincipalName?: string(name='RolePrincipalName', example='ECSAdmin@role.123456.onaliyunservice.com'),
  }(name='Role'),
}

model CreateRoleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateRoleResponseBody(name='body'),
}

async function createRoleWithOptions(request: CreateRoleRequest, runtime: Util.RuntimeOptions): CreateRoleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.assumeRolePolicyDocument)) {
    query['AssumeRolePolicyDocument'] = request.assumeRolePolicyDocument;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.maxSessionDuration)) {
    query['MaxSessionDuration'] = request.maxSessionDuration;
  }
  if (!Util.isUnset(request.roleName)) {
    query['RoleName'] = request.roleName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateRole',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createRole(request: CreateRoleRequest): CreateRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRoleWithOptions(request, runtime);
}

model CreateServiceLinkedRoleRequest {
  customSuffix?: string(name='CustomSuffix', example='Example'),
  description?: string(name='Description', example='Service Linked Role for PolarDB. PolarDB will use this role to access your resources in other services.'),
  serviceName?: string(name='ServiceName', example='polardb.aliyuncs.com'),
}

model CreateServiceLinkedRoleResponseBody = {
  requestId?: string(name='RequestId', example='FE58D7CF-03BC-432A-B42D-BC3390C8C2E1'),
  role?: {
    arn?: string(name='Arn', example='acs:ram::177242285274****:role/aliyunserviceroleforpolardb'),
    assumeRolePolicyDocument?: string(name='AssumeRolePolicyDocument', example='{\\"Statement\\":[{\\"Action\\":\\"sts:AssumeRole\\",\\"Effect\\":\\"Allow\\",\\"Principal\\":{\\"Service\\":[\\"polardb.aliyuncs.com\\"]}}],\\"Version\\":\\"1\\"}'),
    createDate?: string(name='CreateDate', example='2020-06-30T08:14:16Z'),
    description?: string(name='Description', example='Service Linked Role for PolarDB. PolarDB will use this role to access your resources in other services.'),
    isServiceLinkedRole?: boolean(name='IsServiceLinkedRole', example='true'),
    roleId?: string(name='RoleId', example='32833240981067****'),
    roleName?: string(name='RoleName', example='AliyunServiceRoleForPolarDB'),
    rolePrincipalName?: string(name='RolePrincipalName', example='AliyunServiceRoleForPolarDB@role.test.onaliyunservice.com'),
  }(name='Role'),
}

model CreateServiceLinkedRoleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateServiceLinkedRoleResponseBody(name='body'),
}

async function createServiceLinkedRoleWithOptions(request: CreateServiceLinkedRoleRequest, runtime: Util.RuntimeOptions): CreateServiceLinkedRoleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.customSuffix)) {
    query['CustomSuffix'] = request.customSuffix;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.serviceName)) {
    query['ServiceName'] = request.serviceName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateServiceLinkedRole',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createServiceLinkedRole(request: CreateServiceLinkedRoleRequest): CreateServiceLinkedRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createServiceLinkedRoleWithOptions(request, runtime);
}

model DeclineHandshakeRequest {
  handshakeId?: string(name='HandshakeId', example='h-ycm4rp****'),
}

model DeclineHandshakeResponseBody = {
  handshake?: {
    createTime?: string(name='CreateTime', example='2018-08-10T09:55:41Z'),
    expireTime?: string(name='ExpireTime', example='2018-08-10T09:55:41Z'),
    handshakeId?: string(name='HandshakeId', example='h-ycm4rp****'),
    masterAccountId?: string(name='MasterAccountId', example='172841235500****'),
    masterAccountName?: string(name='MasterAccountName', example='Alice'),
    modifyTime?: string(name='ModifyTime', example='2018-08-10T09:55:41Z'),
    note?: string(name='Note'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', example='rd-abcdef****'),
    status?: string(name='Status', example='Declined'),
    targetEntity?: string(name='TargetEntity', example='someone@example.com'),
    targetType?: string(name='TargetType', example='Email'),
  }(name='Handshake'),
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model DeclineHandshakeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeclineHandshakeResponseBody(name='body'),
}

async function declineHandshakeWithOptions(request: DeclineHandshakeRequest, runtime: Util.RuntimeOptions): DeclineHandshakeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.handshakeId)) {
    query['HandshakeId'] = request.handshakeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeclineHandshake',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function declineHandshake(request: DeclineHandshakeRequest): DeclineHandshakeResponse {
  var runtime = new Util.RuntimeOptions{};
  return declineHandshakeWithOptions(request, runtime);
}

model DeleteAccountRequest {
  abandonableCheckId?: [ string ](name='AbandonableCheckId'),
  accountId?: string(name='AccountId', example='169946124551****'),
}

model DeleteAccountShrinkRequest {
  abandonableCheckIdShrink?: string(name='AbandonableCheckId'),
  accountId?: string(name='AccountId', example='169946124551****'),
}

model DeleteAccountResponseBody = {
  deletionType?: string(name='DeletionType', example='0'),
  requestId?: string(name='RequestId', example='009429F8-C1C0-5872-B674-A6C2333B9647'),
}

model DeleteAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAccountResponseBody(name='body'),
}

async function deleteAccountWithOptions(tmpReq: DeleteAccountRequest, runtime: Util.RuntimeOptions): DeleteAccountResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteAccountShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.abandonableCheckId)) {
    request.abandonableCheckIdShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.abandonableCheckId, 'AbandonableCheckId', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.abandonableCheckIdShrink)) {
    query['AbandonableCheckId'] = request.abandonableCheckIdShrink;
  }
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAccount',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAccount(request: DeleteAccountRequest): DeleteAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAccountWithOptions(request, runtime);
}

model DeleteControlPolicyRequest {
  policyId?: string(name='PolicyId', example='cp-SImPt8GCEwiq****'),
}

model DeleteControlPolicyResponseBody = {
  requestId?: string(name='RequestId', example='C8541E06-B207-46BF-92C9-DC8DE4609D75'),
}

model DeleteControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteControlPolicyResponseBody(name='body'),
}

async function deleteControlPolicyWithOptions(request: DeleteControlPolicyRequest, runtime: Util.RuntimeOptions): DeleteControlPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteControlPolicy',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteControlPolicy(request: DeleteControlPolicyRequest): DeleteControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteControlPolicyWithOptions(request, runtime);
}

model DeleteFolderRequest {
  folderId?: string(name='FolderId', example='fd-ae1in7****'),
}

model DeleteFolderResponseBody = {
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model DeleteFolderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteFolderResponseBody(name='body'),
}

async function deleteFolderWithOptions(request: DeleteFolderRequest, runtime: Util.RuntimeOptions): DeleteFolderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.folderId)) {
    query['FolderId'] = request.folderId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFolder',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteFolder(request: DeleteFolderRequest): DeleteFolderResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFolderWithOptions(request, runtime);
}

model DeletePolicyRequest {
  policyName?: string(name='PolicyName', example='OSS-Administrator'),
}

model DeletePolicyResponseBody = {
  requestId?: string(name='RequestId', example='898FAB24-7509-43EE-A287-086FE4C44394'),
}

model DeletePolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeletePolicyResponseBody(name='body'),
}

async function deletePolicyWithOptions(request: DeletePolicyRequest, runtime: Util.RuntimeOptions): DeletePolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.policyName)) {
    query['PolicyName'] = request.policyName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeletePolicy',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deletePolicy(request: DeletePolicyRequest): DeletePolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePolicyWithOptions(request, runtime);
}

model DeletePolicyVersionRequest {
  policyName?: string(name='PolicyName', example='OSS-Administrator'),
  versionId?: string(name='VersionId', example='v3'),
}

model DeletePolicyVersionResponseBody = {
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model DeletePolicyVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeletePolicyVersionResponseBody(name='body'),
}

async function deletePolicyVersionWithOptions(request: DeletePolicyVersionRequest, runtime: Util.RuntimeOptions): DeletePolicyVersionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.policyName)) {
    query['PolicyName'] = request.policyName;
  }
  if (!Util.isUnset(request.versionId)) {
    query['VersionId'] = request.versionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeletePolicyVersion',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deletePolicyVersion(request: DeletePolicyVersionRequest): DeletePolicyVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePolicyVersionWithOptions(request, runtime);
}

model DeleteResourceGroupRequest {
  resourceGroupId?: string(name='ResourceGroupId', example='rg-9gLOoK****'),
}

model DeleteResourceGroupResponseBody = {
  requestId?: string(name='RequestId', example='1C488B66-B819-4D14-8711-C4EAAA13AC01'),
  resourceGroup?: {
    accountId?: string(name='AccountId', example='123456789****'),
    createDate?: string(name='CreateDate', example='2015-01-23T12:33:18Z'),
    displayName?: string(name='DisplayName', example='my-project'),
    id?: string(name='Id', example='rg-9gLOoK****'),
    name?: string(name='Name', example='my-project'),
    regionStatuses?: {
      regionStatus?: [ 
      {
        regionId?: string(name='RegionId', example='cn-qingdao'),
        status?: string(name='Status', example='PendingDelete'),
      }
    ](name='RegionStatus')
    }(name='RegionStatuses'),
    status?: string(name='Status', example='PendingDelete'),
  }(name='ResourceGroup'),
}

model DeleteResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteResourceGroupResponseBody(name='body'),
}

async function deleteResourceGroupWithOptions(request: DeleteResourceGroupRequest, runtime: Util.RuntimeOptions): DeleteResourceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteResourceGroup',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteResourceGroup(request: DeleteResourceGroupRequest): DeleteResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteResourceGroupWithOptions(request, runtime);
}

model DeleteRoleRequest {
  roleName?: string(name='RoleName', example='ECSAdmin'),
}

model DeleteRoleResponseBody = {
  requestId?: string(name='RequestId', example='898FAB24-7509-43EE-A287-086FE4C44394'),
}

model DeleteRoleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteRoleResponseBody(name='body'),
}

async function deleteRoleWithOptions(request: DeleteRoleRequest, runtime: Util.RuntimeOptions): DeleteRoleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.roleName)) {
    query['RoleName'] = request.roleName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRole',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteRole(request: DeleteRoleRequest): DeleteRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRoleWithOptions(request, runtime);
}

model DeleteServiceLinkedRoleRequest {
  roleName?: string(name='RoleName', example='AliyunServiceRoleForPolarDB'),
}

model DeleteServiceLinkedRoleResponseBody = {
  deletionTaskId?: string(name='DeletionTaskId', example='task/acs-service-role/polardb.aliyuncs.com/AliyunServiceRoleForPolarDB/64c4f9cc-fac2-4692-ae1b-804ae4b9****'),
  requestId?: string(name='RequestId', example='B595E5BF-FF5F-4E7F-B95A-B90FE242FEB6'),
}

model DeleteServiceLinkedRoleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteServiceLinkedRoleResponseBody(name='body'),
}

async function deleteServiceLinkedRoleWithOptions(request: DeleteServiceLinkedRoleRequest, runtime: Util.RuntimeOptions): DeleteServiceLinkedRoleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.roleName)) {
    query['RoleName'] = request.roleName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteServiceLinkedRole',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteServiceLinkedRole(request: DeleteServiceLinkedRoleRequest): DeleteServiceLinkedRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteServiceLinkedRoleWithOptions(request, runtime);
}

model DeregisterDelegatedAdministratorRequest {
  accountId?: string(name='AccountId', example='181761095690****'),
  servicePrincipal?: string(name='ServicePrincipal', example='cloudfw.aliyuncs.com'),
}

model DeregisterDelegatedAdministratorResponseBody = {
  requestId?: string(name='RequestId', example='DF5D5C52-7BD0-40E7-94C6-23A1505038A2'),
}

model DeregisterDelegatedAdministratorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeregisterDelegatedAdministratorResponseBody(name='body'),
}

async function deregisterDelegatedAdministratorWithOptions(request: DeregisterDelegatedAdministratorRequest, runtime: Util.RuntimeOptions): DeregisterDelegatedAdministratorResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.servicePrincipal)) {
    query['ServicePrincipal'] = request.servicePrincipal;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeregisterDelegatedAdministrator',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deregisterDelegatedAdministrator(request: DeregisterDelegatedAdministratorRequest): DeregisterDelegatedAdministratorResponse {
  var runtime = new Util.RuntimeOptions{};
  return deregisterDelegatedAdministratorWithOptions(request, runtime);
}

model DestroyResourceDirectoryResponseBody = {
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model DestroyResourceDirectoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DestroyResourceDirectoryResponseBody(name='body'),
}

async function destroyResourceDirectoryWithOptions(runtime: Util.RuntimeOptions): DestroyResourceDirectoryResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DestroyResourceDirectory',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function destroyResourceDirectory(): DestroyResourceDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return destroyResourceDirectoryWithOptions(runtime);
}

model DetachControlPolicyRequest {
  policyId?: string(name='PolicyId', example='cp-jExXAqIYkwHN****'),
  targetId?: string(name='TargetId', example='fd-ZDNPiT****'),
}

model DetachControlPolicyResponseBody = {
  requestId?: string(name='RequestId', example='9EA4F962-1A2E-4AFE-BE0C-B14736FC46CC'),
}

model DetachControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DetachControlPolicyResponseBody(name='body'),
}

async function detachControlPolicyWithOptions(request: DetachControlPolicyRequest, runtime: Util.RuntimeOptions): DetachControlPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  if (!Util.isUnset(request.targetId)) {
    query['TargetId'] = request.targetId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetachControlPolicy',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function detachControlPolicy(request: DetachControlPolicyRequest): DetachControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachControlPolicyWithOptions(request, runtime);
}

model DetachPolicyRequest {
  policyName?: string(name='PolicyName', example='OSS-Administrator'),
  policyType?: string(name='PolicyType', example='Custom'),
  principalName?: string(name='PrincipalName', example='alice@demo.onaliyun.com'),
  principalType?: string(name='PrincipalType', example='IMSUser'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-9gLOoK****'),
}

model DetachPolicyResponseBody = {
  requestId?: string(name='RequestId', example='697852FB-50D7-44D9-9774-530C31EAC572'),
}

model DetachPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DetachPolicyResponseBody(name='body'),
}

async function detachPolicyWithOptions(request: DetachPolicyRequest, runtime: Util.RuntimeOptions): DetachPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.policyName)) {
    query['PolicyName'] = request.policyName;
  }
  if (!Util.isUnset(request.policyType)) {
    query['PolicyType'] = request.policyType;
  }
  if (!Util.isUnset(request.principalName)) {
    query['PrincipalName'] = request.principalName;
  }
  if (!Util.isUnset(request.principalType)) {
    query['PrincipalType'] = request.principalType;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetachPolicy',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function detachPolicy(request: DetachPolicyRequest): DetachPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachPolicyWithOptions(request, runtime);
}

model DisableControlPolicyResponseBody = {
  enablementStatus?: string(name='EnablementStatus', example='PendingDisable'),
  requestId?: string(name='RequestId', example='7C709979-451D-4C92-835D-7DDCCAA562E9'),
}

model DisableControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableControlPolicyResponseBody(name='body'),
}

async function disableControlPolicyWithOptions(runtime: Util.RuntimeOptions): DisableControlPolicyResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DisableControlPolicy',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableControlPolicy(): DisableControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableControlPolicyWithOptions(runtime);
}

model EnableControlPolicyResponseBody = {
  enablementStatus?: string(name='EnablementStatus', example='PendingEnable'),
  requestId?: string(name='RequestId', example='8CE7BD95-EFFA-4911-A1E0-BD4412697FEB'),
}

model EnableControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableControlPolicyResponseBody(name='body'),
}

async function enableControlPolicyWithOptions(runtime: Util.RuntimeOptions): EnableControlPolicyResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'EnableControlPolicy',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableControlPolicy(): EnableControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableControlPolicyWithOptions(runtime);
}

model EnableResourceDirectoryRequest {
  enableMode?: string(name='EnableMode', example='CurrentAccount'),
  MAName?: string(name='MAName', example='user01@rdadmin.aliyunid.com'),
  MASecureMobilePhone?: string(name='MASecureMobilePhone', example='xx-13900001234'),
  verificationCode?: string(name='VerificationCode', example='123456'),
}

model EnableResourceDirectoryResponseBody = {
  requestId?: string(name='RequestId', example='EC2FE94D-A4A2-51A1-A493-5C273A36C46A'),
  resourceDirectory?: {
    createTime?: string(name='CreateTime', example='2021-12-08T02:15:31.744Z'),
    masterAccountId?: string(name='MasterAccountId', example='507408460615****'),
    masterAccountName?: string(name='MasterAccountName', example='alice@example.com'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', example='rd-54****'),
    rootFolderId?: string(name='RootFolderId', example='r-G9****'),
  }(name='ResourceDirectory'),
}

model EnableResourceDirectoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableResourceDirectoryResponseBody(name='body'),
}

async function enableResourceDirectoryWithOptions(request: EnableResourceDirectoryRequest, runtime: Util.RuntimeOptions): EnableResourceDirectoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.enableMode)) {
    query['EnableMode'] = request.enableMode;
  }
  if (!Util.isUnset(request.MAName)) {
    query['MAName'] = request.MAName;
  }
  if (!Util.isUnset(request.MASecureMobilePhone)) {
    query['MASecureMobilePhone'] = request.MASecureMobilePhone;
  }
  if (!Util.isUnset(request.verificationCode)) {
    query['VerificationCode'] = request.verificationCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableResourceDirectory',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableResourceDirectory(request: EnableResourceDirectoryRequest): EnableResourceDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableResourceDirectoryWithOptions(request, runtime);
}

model GetAccountRequest {
  accountId?: string(name='AccountId', example='181761095690****'),
  includeTags?: boolean(name='IncludeTags', example='true'),
}

model GetAccountResponseBody = {
  account?: {
    accountId?: string(name='AccountId', example='181761095690****'),
    accountName?: string(name='AccountName', example='someone@example.com'),
    displayName?: string(name='DisplayName', example='admin'),
    emailStatus?: string(name='EmailStatus'),
    folderId?: string(name='FolderId', example='fd-bVaRIG****'),
    identityInformation?: string(name='IdentityInformation', example='aliyun-admin'),
    joinMethod?: string(name='JoinMethod', example='created'),
    joinTime?: string(name='JoinTime', example='2015-01-23T12:33:18Z'),
    location?: string(name='Location', example='root/AlRd****/Z5Aa****'),
    modifyTime?: string(name='ModifyTime', example='2015-01-23T12:33:18Z'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', example='rd-k3****'),
    resourceDirectoryPath?: string(name='ResourceDirectoryPath', example='rd-k3****/r-Wm****/fd-bVaRIG****/181761095690****'),
    status?: string(name='Status', example='CreateSuccess'),
    tags?: [ 
      {
        key?: string(name='Key', example='tag_key'),
        value?: string(name='Value', example='tag_value'),
      }
    ](name='Tags'),
    type?: string(name='Type', example='ResourceAccount'),
  }(name='Account'),
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model GetAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAccountResponseBody(name='body'),
}

async function getAccountWithOptions(request: GetAccountRequest, runtime: Util.RuntimeOptions): GetAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.includeTags)) {
    query['IncludeTags'] = request.includeTags;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAccount',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAccount(request: GetAccountRequest): GetAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAccountWithOptions(request, runtime);
}

model GetAccountDeletionCheckResultRequest {
  accountId?: string(name='AccountId', example='179855839641****'),
}

model GetAccountDeletionCheckResultResponseBody = {
  accountDeletionCheckResultInfo?: {
    abandonableChecks?: [ 
      {
        checkId?: string(name='CheckId', example='NON_SP_cs'),
        checkName?: string(name='CheckName'),
        description?: string(name='Description'),
      }
    ](name='AbandonableChecks'),
    allowDelete?: string(name='AllowDelete', example='false'),
    notAllowReason?: [ 
      {
        checkId?: string(name='CheckId', example='NON_SP_efc'),
        checkName?: string(name='CheckName', example='Enterprise finance'),
        description?: string(name='Description', example='This account is an Enterprise Finance associated account. Please remove the financial association of this account before deleting it.'),
      }
    ](name='NotAllowReason'),
    status?: string(name='Status', example='PreCheckComplete'),
  }(name='AccountDeletionCheckResultInfo'),
  requestId?: string(name='RequestId', example='54AC391D-4F7F-5F08-B8D3-0AECDE6EC5BD'),
}

model GetAccountDeletionCheckResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAccountDeletionCheckResultResponseBody(name='body'),
}

async function getAccountDeletionCheckResultWithOptions(request: GetAccountDeletionCheckResultRequest, runtime: Util.RuntimeOptions): GetAccountDeletionCheckResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAccountDeletionCheckResult',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAccountDeletionCheckResult(request: GetAccountDeletionCheckResultRequest): GetAccountDeletionCheckResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAccountDeletionCheckResultWithOptions(request, runtime);
}

model GetAccountDeletionStatusRequest {
  accountId?: string(name='AccountId'),
}

model GetAccountDeletionStatusResponseBody = {
  rdAccountDeletionStatus?: {
    accountId?: string(name='AccountId'),
    createTime?: string(name='CreateTime'),
    deletionTime?: string(name='DeletionTime'),
    deletionType?: string(name='DeletionType'),
    failReasonList?: [ 
      {
        description?: string(name='Description'),
        name?: string(name='Name'),
      }
    ](name='FailReasonList'),
    status?: string(name='Status'),
  }(name='RdAccountDeletionStatus'),
  requestId?: string(name='RequestId'),
}

model GetAccountDeletionStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAccountDeletionStatusResponseBody(name='body'),
}

async function getAccountDeletionStatusWithOptions(request: GetAccountDeletionStatusRequest, runtime: Util.RuntimeOptions): GetAccountDeletionStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAccountDeletionStatus',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAccountDeletionStatus(request: GetAccountDeletionStatusRequest): GetAccountDeletionStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAccountDeletionStatusWithOptions(request, runtime);
}

model GetControlPolicyRequest {
  language?: string(name='Language', example='zh-CN'),
  policyId?: string(name='PolicyId', example='cp-SImPt8GCEwiq****'),
}

model GetControlPolicyResponseBody = {
  controlPolicy?: {
    attachmentCount?: string(name='AttachmentCount', example='0'),
    createDate?: string(name='CreateDate', example='2021-03-18T08:51:33Z'),
    description?: string(name='Description', example='ExampleControlPolicy'),
    effectScope?: string(name='EffectScope', example='RAM'),
    policyDocument?: string(name='PolicyDocument', example='{\\"Version\\":\\"1\\",\\"Statement\\":[{\\"Effect\\":\\"Deny\\",\\"Action\\":[\\"ram:UpdateRole\\",\\"ram:DeleteRole\\",\\"ram:AttachPolicyToRole\\",\\"ram:DetachPolicyFromRole\\"],\\"Resource\\":\\"acs:ram:*:*:role/ResourceDirectoryAccountAccessRole\\"}]}'),
    policyId?: string(name='PolicyId', example='cp-SImPt8GCEwiq****'),
    policyName?: string(name='PolicyName', example='test'),
    policyType?: string(name='PolicyType', example='Custom'),
    updateDate?: string(name='UpdateDate', example='2021-03-18T08:51:33Z'),
  }(name='ControlPolicy'),
  requestId?: string(name='RequestId', example='AB769936-CDFA-4D52-8CE2-A3581800044A'),
}

model GetControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetControlPolicyResponseBody(name='body'),
}

async function getControlPolicyWithOptions(request: GetControlPolicyRequest, runtime: Util.RuntimeOptions): GetControlPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetControlPolicy',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getControlPolicy(request: GetControlPolicyRequest): GetControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return getControlPolicyWithOptions(request, runtime);
}

model GetControlPolicyEnablementStatusResponseBody = {
  enablementStatus?: string(name='EnablementStatus', example='Disabled'),
  requestId?: string(name='RequestId', example='1DC39A4E-3B52-4EFE-9F93-4897D7FFA0C4'),
}

model GetControlPolicyEnablementStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetControlPolicyEnablementStatusResponseBody(name='body'),
}

async function getControlPolicyEnablementStatusWithOptions(runtime: Util.RuntimeOptions): GetControlPolicyEnablementStatusResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetControlPolicyEnablementStatus',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getControlPolicyEnablementStatus(): GetControlPolicyEnablementStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getControlPolicyEnablementStatusWithOptions(runtime);
}

model GetFolderRequest {
  folderId?: string(name='FolderId', example='fd-Jyl5U7****'),
}

model GetFolderResponseBody = {
  folder?: {
    createTime?: string(name='CreateTime', example='2021-06-15T06:39:08.521Z'),
    folderId?: string(name='FolderId', example='fd-Jyl5U7****'),
    folderName?: string(name='FolderName', example='Applications'),
    parentFolderId?: string(name='ParentFolderId', example='r-Wm****'),
    resourceDirectoryPath?: string(name='ResourceDirectoryPath', example='rd-3G****/r-Wm****/fd-Jyl5U7****'),
  }(name='Folder'),
  requestId?: string(name='RequestId', example='C2CBCA30-C8DD-423E-B4AD-4FB694C9180C'),
}

model GetFolderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFolderResponseBody(name='body'),
}

async function getFolderWithOptions(request: GetFolderRequest, runtime: Util.RuntimeOptions): GetFolderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.folderId)) {
    query['FolderId'] = request.folderId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetFolder',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getFolder(request: GetFolderRequest): GetFolderResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFolderWithOptions(request, runtime);
}

model GetHandshakeRequest {
  handshakeId?: string(name='HandshakeId', example='h-ycm4rp****'),
}

model GetHandshakeResponseBody = {
  handshake?: {
    createTime?: string(name='CreateTime', example='2018-08-10T09:55:41Z'),
    expireTime?: string(name='ExpireTime', example='2018-08-24T09:55:41Z'),
    handshakeId?: string(name='HandshakeId', example='h-ycm4rp****'),
    invitedAccountRealName?: string(name='InvitedAccountRealName', example='Alice'),
    masterAccountId?: string(name='MasterAccountId', example='172841235500****'),
    masterAccountName?: string(name='MasterAccountName', example='company@example.com'),
    masterAccountRealName?: string(name='MasterAccountRealName', example='company'),
    modifyTime?: string(name='ModifyTime', example='2018-08-10T09:55:41Z'),
    note?: string(name='Note'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', example='rd-abcdef****'),
    status?: string(name='Status', example='Pending'),
    targetEntity?: string(name='TargetEntity', example='someone@example.com'),
    targetType?: string(name='TargetType', example='Email'),
  }(name='Handshake'),
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model GetHandshakeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHandshakeResponseBody(name='body'),
}

async function getHandshakeWithOptions(request: GetHandshakeRequest, runtime: Util.RuntimeOptions): GetHandshakeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.handshakeId)) {
    query['HandshakeId'] = request.handshakeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetHandshake',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getHandshake(request: GetHandshakeRequest): GetHandshakeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getHandshakeWithOptions(request, runtime);
}

model GetPayerForAccountRequest {
  accountId?: string(name='AccountId', example='12323344****'),
}

model GetPayerForAccountResponseBody = {
  payerAccountId?: string(name='PayerAccountId', example='172841235500****'),
  payerAccountName?: string(name='PayerAccountName', example='Alice'),
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model GetPayerForAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPayerForAccountResponseBody(name='body'),
}

async function getPayerForAccountWithOptions(request: GetPayerForAccountRequest, runtime: Util.RuntimeOptions): GetPayerForAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPayerForAccount',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getPayerForAccount(request: GetPayerForAccountRequest): GetPayerForAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPayerForAccountWithOptions(request, runtime);
}

model GetPolicyRequest {
  language?: string(name='Language', example='zh-CN'),
  policyName?: string(name='PolicyName', example='OSS-Administrator'),
  policyType?: string(name='PolicyType', example='Custom'),
}

model GetPolicyResponseBody = {
  policy?: {
    attachmentCount?: int32(name='AttachmentCount', example='0'),
    createDate?: string(name='CreateDate', example='2015-01-23T12:33:18Z'),
    defaultVersion?: string(name='DefaultVersion', example='v1'),
    description?: string(name='Description'),
    policyDocument?: string(name='PolicyDocument', example='{ "Statement": [{ "Action": ["oss:*"], "Effect": "Allow", "Resource": ["acs:oss:*:*:*"]}], "Version": "1"}'),
    policyName?: string(name='PolicyName', example='OSS-Administrator'),
    policyType?: string(name='PolicyType', example='Custom'),
    updateDate?: string(name='UpdateDate', example='2016-01-23T12:33:18Z'),
  }(name='Policy'),
  requestId?: string(name='RequestId', example='697852FB-50D7-44D9-9774-530C31EAC572'),
}

model GetPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPolicyResponseBody(name='body'),
}

async function getPolicyWithOptions(request: GetPolicyRequest, runtime: Util.RuntimeOptions): GetPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.policyName)) {
    query['PolicyName'] = request.policyName;
  }
  if (!Util.isUnset(request.policyType)) {
    query['PolicyType'] = request.policyType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPolicy',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getPolicy(request: GetPolicyRequest): GetPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPolicyWithOptions(request, runtime);
}

model GetPolicyVersionRequest {
  policyName?: string(name='PolicyName', example='OSS-Administrator'),
  policyType?: string(name='PolicyType', example='Custom'),
  versionId?: string(name='VersionId', example='v3'),
}

model GetPolicyVersionResponseBody = {
  policyVersion?: {
    createDate?: string(name='CreateDate', example='2015-01-23T12:33:18Z'),
    isDefaultVersion?: boolean(name='IsDefaultVersion', example='false'),
    policyDocument?: string(name='PolicyDocument', example='{ \\"Statement\\": [{ \\"Action\\": [\\"oss:*\\"], \\"Effect\\": \\"Allow\\", \\"Resource\\": [\\"acs:oss:*:*:*\\"]}], \\"Version\\": \\"1\\"}'),
    versionId?: string(name='VersionId', example='v3'),
  }(name='PolicyVersion'),
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model GetPolicyVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPolicyVersionResponseBody(name='body'),
}

async function getPolicyVersionWithOptions(request: GetPolicyVersionRequest, runtime: Util.RuntimeOptions): GetPolicyVersionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.policyName)) {
    query['PolicyName'] = request.policyName;
  }
  if (!Util.isUnset(request.policyType)) {
    query['PolicyType'] = request.policyType;
  }
  if (!Util.isUnset(request.versionId)) {
    query['VersionId'] = request.versionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPolicyVersion',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getPolicyVersion(request: GetPolicyVersionRequest): GetPolicyVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPolicyVersionWithOptions(request, runtime);
}

model GetResourceDirectoryResponseBody = {
  requestId?: string(name='RequestId', example='CD76D376-2517-4924-92C5-DBC52262F93A'),
  resourceDirectory?: {
    controlPolicyStatus?: string(name='ControlPolicyStatus', example='Enabled'),
    createTime?: string(name='CreateTime', example='2019-02-18T15:32:10.473Z'),
    identityInformation?: string(name='IdentityInformation'),
    masterAccountId?: string(name='MasterAccountId', example='172845045600****'),
    masterAccountName?: string(name='MasterAccountName', example='aliyun-admin'),
    memberDeletionStatus?: string(name='MemberDeletionStatus', example='Enabled'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', example='rd-St****'),
    rootFolderId?: string(name='RootFolderId', example='r-Zo****'),
  }(name='ResourceDirectory'),
}

model GetResourceDirectoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetResourceDirectoryResponseBody(name='body'),
}

async function getResourceDirectoryWithOptions(runtime: Util.RuntimeOptions): GetResourceDirectoryResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetResourceDirectory',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getResourceDirectory(): GetResourceDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getResourceDirectoryWithOptions(runtime);
}

model GetResourceGroupRequest {
  includeTags?: boolean(name='IncludeTags', example='true'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-9gLOoK****'),
}

model GetResourceGroupResponseBody = {
  requestId?: string(name='RequestId', example='2D69A58F-345C-4FDE-88E4-BF5189484043'),
  resourceGroup?: {
    accountId?: string(name='AccountId', example='123456789****'),
    createDate?: string(name='CreateDate', example='2015-01-23T12:33:18Z'),
    displayName?: string(name='DisplayName', example='my-project'),
    id?: string(name='Id', example='rg-9gLOoK****'),
    name?: string(name='Name', example='my-project'),
    regionStatuses?: {
      regionStatus?: [ 
      {
        regionId?: string(name='RegionId', example='cn-qingdao'),
        status?: string(name='Status', example='OK'),
      }
    ](name='RegionStatus')
    }(name='RegionStatuses'),
    status?: string(name='Status', example='OK'),
    tags?: {
      tag?: [ 
      {
        tagKey?: string(name='TagKey', example='k1'),
        tagValue?: string(name='TagValue', example='v1'),
      }
    ](name='Tag')
    }(name='Tags'),
  }(name='ResourceGroup'),
}

model GetResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetResourceGroupResponseBody(name='body'),
}

async function getResourceGroupWithOptions(request: GetResourceGroupRequest, runtime: Util.RuntimeOptions): GetResourceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.includeTags)) {
    query['IncludeTags'] = request.includeTags;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetResourceGroup',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getResourceGroup(request: GetResourceGroupRequest): GetResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return getResourceGroupWithOptions(request, runtime);
}

model GetRoleRequest {
  language?: string(name='Language', example='zh-CN'),
  roleName?: string(name='RoleName', example='ECSAdmin'),
}

model GetRoleResponseBody = {
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  role?: {
    arn?: string(name='Arn', example='acs:ram::123456789012****:role/ECSAdmin'),
    assumeRolePolicyDocument?: string(name='AssumeRolePolicyDocument', example='{ \\"Statement\\": [ { \\"Action\\": \\"sts:AssumeRole\\", \\"Effect\\": \\"Allow\\", \\"Principal\\": { \\"RAM\\": \\"acs:ram::12345678901234****:root\\" } } ], \\"Version\\": \\"1\\" }'),
    createDate?: string(name='CreateDate', example='2015-01-23T12:33:18Z'),
    description?: string(name='Description'),
    isServiceLinkedRole?: boolean(name='IsServiceLinkedRole', example='true'),
    latestDeletionTask?: {
      createDate?: string(name='CreateDate', example='2018-10-23T12:33:18Z'),
      deletionTaskId?: string(name='DeletionTaskId', example='ECSAdmin/cc61514b-26eb-4453-ab53-b142eb702a3d'),
    }(name='LatestDeletionTask'),
    maxSessionDuration?: long(name='MaxSessionDuration', example='3600'),
    roleId?: string(name='RoleId', example='90123456789****'),
    roleName?: string(name='RoleName', example='ECSAdmin'),
    rolePrincipalName?: string(name='RolePrincipalName', example='ECSAdmin@role.123456.onaliyunservice.com'),
    updateDate?: string(name='UpdateDate', example='2016-01-23T12:33:18Z'),
  }(name='Role'),
}

model GetRoleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetRoleResponseBody(name='body'),
}

async function getRoleWithOptions(request: GetRoleRequest, runtime: Util.RuntimeOptions): GetRoleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.roleName)) {
    query['RoleName'] = request.roleName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetRole',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getRole(request: GetRoleRequest): GetRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRoleWithOptions(request, runtime);
}

model GetServiceLinkedRoleDeletionStatusRequest {
  deletionTaskId?: string(name='DeletionTaskId', example='task/acs-service-role/hdr.aliyuncs.com/AliyunServiceRoleForHdr/c4d22c52-247f-4ee1-83a2-6c0460bd****'),
}

model GetServiceLinkedRoleDeletionStatusResponseBody = {
  reason?: {
    message?: string(name='Message', example='Service-Linked Role acs:ram::196813227629****:role/aliyunserviceroleforhdr cannot be deleted as it is in use by hdr.aliyuncs.com.'),
    roleUsages?: {
      roleUsage?: [ 
      {
        region?: string(name='Region', example='global'),
        resources?: {
          resource?: [ string ](name='Resource')
        }(name='Resources'),
      }
    ](name='RoleUsage')
    }(name='RoleUsages'),
  }(name='Reason'),
  requestId?: string(name='RequestId', example='07194EB1-DB50-4513-A51D-99B30D635AEF'),
  status?: string(name='Status', example='FAILED'),
}

model GetServiceLinkedRoleDeletionStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetServiceLinkedRoleDeletionStatusResponseBody(name='body'),
}

async function getServiceLinkedRoleDeletionStatusWithOptions(request: GetServiceLinkedRoleDeletionStatusRequest, runtime: Util.RuntimeOptions): GetServiceLinkedRoleDeletionStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deletionTaskId)) {
    query['DeletionTaskId'] = request.deletionTaskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetServiceLinkedRoleDeletionStatus',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getServiceLinkedRoleDeletionStatus(request: GetServiceLinkedRoleDeletionStatusRequest): GetServiceLinkedRoleDeletionStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getServiceLinkedRoleDeletionStatusWithOptions(request, runtime);
}

model InitResourceDirectoryResponseBody = {
  requestId?: string(name='RequestId', example='CD76D376-2517-4924-92C5-DBC52262F93A'),
  resourceDirectory?: {
    createTime?: string(name='CreateTime', example='2019-02-18T15:32:10.473Z'),
    masterAccountId?: string(name='MasterAccountId', example='172841235500****'),
    masterAccountName?: string(name='MasterAccountName', example='aliyun-****'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', example='rd-Ss****'),
    rootFolderId?: string(name='RootFolderId', example='r-Zo****'),
  }(name='ResourceDirectory'),
}

model InitResourceDirectoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InitResourceDirectoryResponseBody(name='body'),
}

async function initResourceDirectoryWithOptions(runtime: Util.RuntimeOptions): InitResourceDirectoryResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'InitResourceDirectory',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function initResourceDirectory(): InitResourceDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return initResourceDirectoryWithOptions(runtime);
}

model InviteAccountToResourceDirectoryRequest {
  note?: string(name='Note'),
  tag?: [ 
    {
      key?: string(name='Key', example='k1'),
      value?: string(name='Value', example='v1'),
    }
  ](name='Tag'),
  targetEntity?: string(name='TargetEntity', example='someone@example.com'),
  targetType?: string(name='TargetType', example='Email'),
}

model InviteAccountToResourceDirectoryResponseBody = {
  handshake?: {
    createTime?: string(name='CreateTime', example='2018-08-10T09:55:41Z'),
    expireTime?: string(name='ExpireTime', example='2018-08-24T09:55:41Z'),
    handshakeId?: string(name='HandshakeId', example='h-ycm4rp****'),
    masterAccountId?: string(name='MasterAccountId', example='172841235500****'),
    masterAccountName?: string(name='MasterAccountName', example='Alice'),
    modifyTime?: string(name='ModifyTime', example='2018-08-10T09:55:41Z'),
    note?: string(name='Note'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', example='rd-abcdef****'),
    status?: string(name='Status', example='Pending'),
    targetEntity?: string(name='TargetEntity', example='someone@example.com'),
    targetType?: string(name='TargetType', example='Email'),
  }(name='Handshake'),
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model InviteAccountToResourceDirectoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InviteAccountToResourceDirectoryResponseBody(name='body'),
}

async function inviteAccountToResourceDirectoryWithOptions(request: InviteAccountToResourceDirectoryRequest, runtime: Util.RuntimeOptions): InviteAccountToResourceDirectoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.note)) {
    query['Note'] = request.note;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.targetEntity)) {
    query['TargetEntity'] = request.targetEntity;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InviteAccountToResourceDirectory',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function inviteAccountToResourceDirectory(request: InviteAccountToResourceDirectoryRequest): InviteAccountToResourceDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return inviteAccountToResourceDirectoryWithOptions(request, runtime);
}

model ListAccountsRequest {
  includeTags?: boolean(name='IncludeTags', example='true'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  tag?: [ 
    {
      key?: string(name='Key', example='tag_key'),
      value?: string(name='Value', example='tag_value'),
    }
  ](name='Tag'),
}

model ListAccountsResponseBody = {
  accounts?: {
    account?: [ 
    {
      accountId?: string(name='AccountId', example='181761095690****'),
      displayName?: string(name='DisplayName', example='test'),
      folderId?: string(name='FolderId', example='fd-QRzuim****'),
      joinMethod?: string(name='JoinMethod', example='created'),
      joinTime?: string(name='JoinTime', example='2021-01-18T08:01:50.522Z'),
      modifyTime?: string(name='ModifyTime', example='2021-01-18T08:04:37.668Z'),
      resourceDirectoryId?: string(name='ResourceDirectoryId', example='rd-3G****'),
      resourceDirectoryPath?: string(name='ResourceDirectoryPath', example='rd-3G****/r-Wm****/fd-QRzuim****/181761095690****'),
      status?: string(name='Status', example='CreateSuccess'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', example='tag_key'),
          value?: string(name='Value', example='tag_value'),
        }
      ](name='Tag')
      }(name='Tags'),
      type?: string(name='Type', example='ResourceAccount'),
    }
  ](name='Account')
  }(name='Accounts'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='5'),
  requestId?: string(name='RequestId', example='7B8A4E7D-6CFF-471D-84DF-195A7A241ECB'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model ListAccountsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAccountsResponseBody(name='body'),
}

async function listAccountsWithOptions(request: ListAccountsRequest, runtime: Util.RuntimeOptions): ListAccountsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.includeTags)) {
    query['IncludeTags'] = request.includeTags;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAccounts',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAccounts(request: ListAccountsRequest): ListAccountsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAccountsWithOptions(request, runtime);
}

model ListAccountsForParentRequest {
  includeTags?: boolean(name='IncludeTags', example='true'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  parentFolderId?: string(name='ParentFolderId', example='fd-bVaRIG****'),
  queryKeyword?: string(name='QueryKeyword', example='admin'),
  tag?: [ 
    {
      key?: string(name='Key', example='tag_key'),
      value?: string(name='Value', example='tag_value'),
    }
  ](name='Tag'),
}

model ListAccountsForParentResponseBody = {
  accounts?: {
    account?: [ 
    {
      accountId?: string(name='AccountId', example='184311716100****'),
      displayName?: string(name='DisplayName', example='admin'),
      folderId?: string(name='FolderId', example='fd-bVaRIG****'),
      joinMethod?: string(name='JoinMethod', example='created'),
      joinTime?: string(name='JoinTime', example='2015-01-23T12:33:18Z'),
      modifyTime?: string(name='ModifyTime', example='2015-01-23T12:33:18Z'),
      resourceDirectoryId?: string(name='ResourceDirectoryId', example='rd-k4****'),
      status?: string(name='Status', example='CreateSuccess'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', example='tag_key'),
          value?: string(name='Value', example='tag_value'),
        }
      ](name='Tag')
      }(name='Tags'),
      type?: string(name='Type', example='ResourceAccount'),
    }
  ](name='Account')
  }(name='Accounts'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='5'),
  requestId?: string(name='RequestId', example='7B8A4E7D-6CFF-471D-84DF-195A7A241ECB'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model ListAccountsForParentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAccountsForParentResponseBody(name='body'),
}

async function listAccountsForParentWithOptions(request: ListAccountsForParentRequest, runtime: Util.RuntimeOptions): ListAccountsForParentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.includeTags)) {
    query['IncludeTags'] = request.includeTags;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.parentFolderId)) {
    query['ParentFolderId'] = request.parentFolderId;
  }
  if (!Util.isUnset(request.queryKeyword)) {
    query['QueryKeyword'] = request.queryKeyword;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAccountsForParent',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAccountsForParent(request: ListAccountsForParentRequest): ListAccountsForParentResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAccountsForParentWithOptions(request, runtime);
}

model ListAncestorsRequest {
  childId?: string(name='ChildId', example='fd-i1c9nr****'),
}

model ListAncestorsResponseBody = {
  folders?: {
    folder?: [ 
    {
      createTime?: string(name='CreateTime', example='2019-01-18T10:03:35.217Z'),
      folderId?: string(name='FolderId', example='r-b1****'),
      folderName?: string(name='FolderName', example='root'),
    }
  ](name='Folder')
  }(name='Folders'),
  requestId?: string(name='RequestId', example='83AFBEB6-DC03-406E-9686-867461FF6698'),
}

model ListAncestorsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAncestorsResponseBody(name='body'),
}

async function listAncestorsWithOptions(request: ListAncestorsRequest, runtime: Util.RuntimeOptions): ListAncestorsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.childId)) {
    query['ChildId'] = request.childId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAncestors',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAncestors(request: ListAncestorsRequest): ListAncestorsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAncestorsWithOptions(request, runtime);
}

model ListControlPoliciesRequest {
  language?: string(name='Language', example='zh-CN'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  policyType?: string(name='PolicyType', example='System'),
}

model ListControlPoliciesResponseBody = {
  controlPolicies?: {
    controlPolicy?: [ 
    {
      attachmentCount?: string(name='AttachmentCount', example='44'),
      createDate?: string(name='CreateDate', example='2020-08-05T06:32:24Z'),
      description?: string(name='Description'),
      effectScope?: string(name='EffectScope', example='All'),
      policyId?: string(name='PolicyId', example='cp-FullAliyunAccess'),
      policyName?: string(name='PolicyName', example='FullAliyunAccess'),
      policyType?: string(name='PolicyType', example='System'),
      updateDate?: string(name='UpdateDate', example='2020-08-05T06:32:24Z'),
    }
  ](name='ControlPolicy')
  }(name='ControlPolicies'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='9424A34C-3471-45AD-B6AB-924BBDFE42F9'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListControlPoliciesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListControlPoliciesResponseBody(name='body'),
}

async function listControlPoliciesWithOptions(request: ListControlPoliciesRequest, runtime: Util.RuntimeOptions): ListControlPoliciesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.policyType)) {
    query['PolicyType'] = request.policyType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListControlPolicies',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listControlPolicies(request: ListControlPoliciesRequest): ListControlPoliciesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listControlPoliciesWithOptions(request, runtime);
}

model ListControlPolicyAttachmentsForTargetRequest {
  language?: string(name='Language', example='zh-CN'),
  targetId?: string(name='TargetId', example='fd-ZDNPiT****'),
}

model ListControlPolicyAttachmentsForTargetResponseBody = {
  controlPolicyAttachments?: {
    controlPolicyAttachment?: [ 
    {
      attachDate?: string(name='AttachDate', example='2021-03-19T02:56:24Z'),
      description?: string(name='Description', example='ExampleControlPolicy'),
      effectScope?: string(name='EffectScope'),
      policyId?: string(name='PolicyId', example='cp-jExXAqIYkwHN****'),
      policyName?: string(name='PolicyName', example='ExampleControlPolicy'),
      policyType?: string(name='PolicyType', example='Custom'),
    }
  ](name='ControlPolicyAttachment')
  }(name='ControlPolicyAttachments'),
  requestId?: string(name='RequestId', example='C276B600-7B7A-49E8-938C-E16CFA955A82'),
}

model ListControlPolicyAttachmentsForTargetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListControlPolicyAttachmentsForTargetResponseBody(name='body'),
}

async function listControlPolicyAttachmentsForTargetWithOptions(request: ListControlPolicyAttachmentsForTargetRequest, runtime: Util.RuntimeOptions): ListControlPolicyAttachmentsForTargetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.targetId)) {
    query['TargetId'] = request.targetId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListControlPolicyAttachmentsForTarget',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listControlPolicyAttachmentsForTarget(request: ListControlPolicyAttachmentsForTargetRequest): ListControlPolicyAttachmentsForTargetResponse {
  var runtime = new Util.RuntimeOptions{};
  return listControlPolicyAttachmentsForTargetWithOptions(request, runtime);
}

model ListDelegatedAdministratorsRequest {
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='10'),
  servicePrincipal?: string(name='ServicePrincipal', example='cloudfw.aliyuncs.com'),
}

model ListDelegatedAdministratorsResponseBody = {
  accounts?: {
    account?: [ 
    {
      accountId?: string(name='AccountId', example='138660628348****'),
      delegationEnabledTime?: string(name='DelegationEnabledTime', example='1616652684164'),
      displayName?: string(name='DisplayName', example='abc'),
      joinMethod?: string(name='JoinMethod', example='created'),
      servicePrincipal?: string(name='ServicePrincipal', example='cloudfw.aliyuncs.com'),
    }
  ](name='Account')
  }(name='Accounts'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='009C3A02-7D4B-416C-9CE7-548C91508F1E'),
  totalCount?: long(name='TotalCount', example='2'),
}

model ListDelegatedAdministratorsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDelegatedAdministratorsResponseBody(name='body'),
}

async function listDelegatedAdministratorsWithOptions(request: ListDelegatedAdministratorsRequest, runtime: Util.RuntimeOptions): ListDelegatedAdministratorsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.servicePrincipal)) {
    query['ServicePrincipal'] = request.servicePrincipal;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDelegatedAdministrators',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDelegatedAdministrators(request: ListDelegatedAdministratorsRequest): ListDelegatedAdministratorsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDelegatedAdministratorsWithOptions(request, runtime);
}

model ListDelegatedServicesForAccountRequest {
  accountId?: string(name='AccountId', example='138660628348****'),
}

model ListDelegatedServicesForAccountResponseBody = {
  delegatedServices?: {
    delegatedService?: [ 
    {
      delegationEnabledTime?: string(name='DelegationEnabledTime', example='1616652684164'),
      servicePrincipal?: string(name='ServicePrincipal', example='cloudfw.aliyuncs.com'),
      status?: string(name='Status', example='ENABLED'),
    }
  ](name='DelegatedService')
  }(name='DelegatedServices'),
  requestId?: string(name='RequestId', example='D9C03B94-9396-4794-A74B-13DC437556A6'),
}

model ListDelegatedServicesForAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDelegatedServicesForAccountResponseBody(name='body'),
}

async function listDelegatedServicesForAccountWithOptions(request: ListDelegatedServicesForAccountRequest, runtime: Util.RuntimeOptions): ListDelegatedServicesForAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDelegatedServicesForAccount',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDelegatedServicesForAccount(request: ListDelegatedServicesForAccountRequest): ListDelegatedServicesForAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDelegatedServicesForAccountWithOptions(request, runtime);
}

model ListFoldersForParentRequest {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  parentFolderId?: string(name='ParentFolderId', example='r-b1****'),
  queryKeyword?: string(name='QueryKeyword', example='rdFolder'),
}

model ListFoldersForParentResponseBody = {
  folders?: {
    folder?: [ 
    {
      createTime?: string(name='CreateTime', example='2015-01-23T12:33:18Z'),
      folderId?: string(name='FolderId', example='rd-evic31****'),
      folderName?: string(name='FolderName', example='project-1'),
    }
  ](name='Folder')
  }(name='Folders'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='5'),
  requestId?: string(name='RequestId', example='7B8A4E7D-6CFF-471D-84DF-195A7A241ECB'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model ListFoldersForParentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFoldersForParentResponseBody(name='body'),
}

async function listFoldersForParentWithOptions(request: ListFoldersForParentRequest, runtime: Util.RuntimeOptions): ListFoldersForParentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.parentFolderId)) {
    query['ParentFolderId'] = request.parentFolderId;
  }
  if (!Util.isUnset(request.queryKeyword)) {
    query['QueryKeyword'] = request.queryKeyword;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListFoldersForParent',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listFoldersForParent(request: ListFoldersForParentRequest): ListFoldersForParentResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFoldersForParentWithOptions(request, runtime);
}

model ListHandshakesForAccountRequest {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
}

model ListHandshakesForAccountResponseBody = {
  handshakes?: {
    handshake?: [ 
    {
      createTime?: string(name='CreateTime', example='2018-08-10T09:55:41Z'),
      expireTime?: string(name='ExpireTime', example='2018-08-24T09:55:41Z'),
      handshakeId?: string(name='HandshakeId', example='h-4N57QZzCTtES****'),
      masterAccountId?: string(name='MasterAccountId', example='172841235500****'),
      masterAccountName?: string(name='MasterAccountName', example='CompanyA'),
      modifyTime?: string(name='ModifyTime', example='2018-08-10T09:55:41Z'),
      note?: string(name='Note'),
      resourceDirectoryId?: string(name='ResourceDirectoryId', example='rd-abcdef****'),
      status?: string(name='Status', example='Pending'),
      targetEntity?: string(name='TargetEntity', example='someone@example.com'),
      targetType?: string(name='TargetType', example='Email'),
    }
  ](name='Handshake')
  }(name='Handshakes'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model ListHandshakesForAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHandshakesForAccountResponseBody(name='body'),
}

async function listHandshakesForAccountWithOptions(request: ListHandshakesForAccountRequest, runtime: Util.RuntimeOptions): ListHandshakesForAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListHandshakesForAccount',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listHandshakesForAccount(request: ListHandshakesForAccountRequest): ListHandshakesForAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return listHandshakesForAccountWithOptions(request, runtime);
}

model ListHandshakesForResourceDirectoryRequest {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
}

model ListHandshakesForResourceDirectoryResponseBody = {
  handshakes?: {
    handshake?: [ 
    {
      createTime?: string(name='CreateTime', example='2018-08-10T09:55:41Z'),
      expireTime?: string(name='ExpireTime', example='2018-08-24T09:55:41Z'),
      handshakeId?: string(name='HandshakeId', example='h-ycm4rp****'),
      masterAccountId?: string(name='MasterAccountId', example='172841235500****'),
      masterAccountName?: string(name='MasterAccountName', example='Alice'),
      modifyTime?: string(name='ModifyTime', example='2018-08-10T09:55:41Z'),
      note?: string(name='Note'),
      resourceDirectoryId?: string(name='ResourceDirectoryId', example='rd-abcdef****'),
      status?: string(name='Status', example='Pending'),
      targetEntity?: string(name='TargetEntity', example='someone@example.com'),
      targetType?: string(name='TargetType', example='Email'),
    }
  ](name='Handshake')
  }(name='Handshakes'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model ListHandshakesForResourceDirectoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHandshakesForResourceDirectoryResponseBody(name='body'),
}

async function listHandshakesForResourceDirectoryWithOptions(request: ListHandshakesForResourceDirectoryRequest, runtime: Util.RuntimeOptions): ListHandshakesForResourceDirectoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListHandshakesForResourceDirectory',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listHandshakesForResourceDirectory(request: ListHandshakesForResourceDirectoryRequest): ListHandshakesForResourceDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return listHandshakesForResourceDirectoryWithOptions(request, runtime);
}

model ListPoliciesRequest {
  language?: string(name='Language', example='zh-CN'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  policyType?: string(name='PolicyType', example='Custom'),
}

model ListPoliciesResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  policies?: {
    policy?: [ 
    {
      attachmentCount?: int32(name='AttachmentCount', example='1'),
      createDate?: string(name='CreateDate', example='2015-01-23T12:33:18Z'),
      defaultVersion?: string(name='DefaultVersion', example='v1'),
      description?: string(name='Description'),
      policyName?: string(name='PolicyName', example='OSS-Administrator'),
      policyType?: string(name='PolicyType', example='Custom'),
      updateDate?: string(name='UpdateDate', example='2016-02-11T18:39:12Z'),
    }
  ](name='Policy')
  }(name='Policies'),
  requestId?: string(name='RequestId', example='7B8A4E7D-6CFF-471D-84DF-195A7A241ECB'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model ListPoliciesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPoliciesResponseBody(name='body'),
}

async function listPoliciesWithOptions(request: ListPoliciesRequest, runtime: Util.RuntimeOptions): ListPoliciesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.policyType)) {
    query['PolicyType'] = request.policyType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPolicies',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPolicies(request: ListPoliciesRequest): ListPoliciesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPoliciesWithOptions(request, runtime);
}

model ListPolicyAttachmentsRequest {
  language?: string(name='Language', example='zh-CN'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  policyName?: string(name='PolicyName', example='AdministratorAccess'),
  policyType?: string(name='PolicyType', example='System'),
  principalName?: string(name='PrincipalName', example='alice@demo.onaliyun.com'),
  principalType?: string(name='PrincipalType', example='IMSUser'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-001'),
}

model ListPolicyAttachmentsResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  policyAttachments?: {
    policyAttachment?: [ 
    {
      attachDate?: string(name='AttachDate', example='2015-01-23T12:33:18Z'),
      description?: string(name='Description'),
      policyName?: string(name='PolicyName', example='AdministratorAccess'),
      policyType?: string(name='PolicyType', example='System'),
      principalName?: string(name='PrincipalName', example='alice@demo.onaliyun.com'),
      principalType?: string(name='PrincipalType', example='IMSUser'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-9gLOoK****'),
    }
  ](name='PolicyAttachment')
  }(name='PolicyAttachments'),
  requestId?: string(name='RequestId', example='7B8A4E7D-6CFF-471D-84DF-195A7A241ECB'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model ListPolicyAttachmentsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPolicyAttachmentsResponseBody(name='body'),
}

async function listPolicyAttachmentsWithOptions(request: ListPolicyAttachmentsRequest, runtime: Util.RuntimeOptions): ListPolicyAttachmentsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.policyName)) {
    query['PolicyName'] = request.policyName;
  }
  if (!Util.isUnset(request.policyType)) {
    query['PolicyType'] = request.policyType;
  }
  if (!Util.isUnset(request.principalName)) {
    query['PrincipalName'] = request.principalName;
  }
  if (!Util.isUnset(request.principalType)) {
    query['PrincipalType'] = request.principalType;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPolicyAttachments',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPolicyAttachments(request: ListPolicyAttachmentsRequest): ListPolicyAttachmentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPolicyAttachmentsWithOptions(request, runtime);
}

model ListPolicyVersionsRequest {
  policyName?: string(name='PolicyName', example='OSS-Administrator'),
  policyType?: string(name='PolicyType', example='Custom'),
}

model ListPolicyVersionsResponseBody = {
  policyVersions?: {
    policyVersion?: [ 
    {
      createDate?: string(name='CreateDate', example='2015-01-23T12:33:18Z'),
      isDefaultVersion?: boolean(name='IsDefaultVersion', example='false'),
      versionId?: string(name='VersionId', example='v3'),
    }
  ](name='PolicyVersion')
  }(name='PolicyVersions'),
  requestId?: string(name='RequestId', example='7B8A4E7D-6CFF-471D-84DF-195A7A241ECB'),
}

model ListPolicyVersionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPolicyVersionsResponseBody(name='body'),
}

async function listPolicyVersionsWithOptions(request: ListPolicyVersionsRequest, runtime: Util.RuntimeOptions): ListPolicyVersionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.policyName)) {
    query['PolicyName'] = request.policyName;
  }
  if (!Util.isUnset(request.policyType)) {
    query['PolicyType'] = request.policyType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPolicyVersions',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPolicyVersions(request: ListPolicyVersionsRequest): ListPolicyVersionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPolicyVersionsWithOptions(request, runtime);
}

model ListResourceGroupsRequest {
  displayName?: string(name='DisplayName', example='my-project'),
  includeTags?: boolean(name='IncludeTags', example='false'),
  name?: string(name='Name', example='my-project'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-9gLOoK****'),
  resourceGroupIds?: [ string ](name='ResourceGroupIds'),
  status?: string(name='Status', example='OK'),
  tag?: [ 
    {
      key?: string(name='Key', example='k1'),
      value?: string(name='Value', example='v1'),
    }
  ](name='Tag'),
}

model ListResourceGroupsResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='4B450CA1-36E8-4AA2-8461-86B42BF4CC4E'),
  resourceGroups?: {
    resourceGroup?: [ 
    {
      accountId?: string(name='AccountId', example='123456789****'),
      createDate?: string(name='CreateDate', example='2015-01-23T12:33:18Z'),
      displayName?: string(name='DisplayName', example='my-project'),
      id?: string(name='Id', example='rg-9gLOoK****'),
      name?: string(name='Name', example='my-project'),
      status?: string(name='Status', example='OK'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', example='k1'),
          tagValue?: string(name='TagValue', example='v1'),
        }
      ](name='Tag')
      }(name='Tags'),
    }
  ](name='ResourceGroup')
  }(name='ResourceGroups'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model ListResourceGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListResourceGroupsResponseBody(name='body'),
}

async function listResourceGroupsWithOptions(request: ListResourceGroupsRequest, runtime: Util.RuntimeOptions): ListResourceGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.displayName)) {
    query['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.includeTags)) {
    query['IncludeTags'] = request.includeTags;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceGroupIds)) {
    query['ResourceGroupIds'] = request.resourceGroupIds;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListResourceGroups',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listResourceGroups(request: ListResourceGroupsRequest): ListResourceGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listResourceGroupsWithOptions(request, runtime);
}

model ListResourcesRequest {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  region?: string(name='Region', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-uPJpP****'),
  resourceId?: string(name='ResourceId', example='i-23v38****'),
  resourceType?: string(name='ResourceType', example='instance'),
  service?: string(name='Service', example='ecs'),
}

model ListResourcesResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  resources?: {
    resource?: [ 
    {
      createDate?: string(name='CreateDate', example='2015-01-23T12:33:18Z'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-uPJpP****'),
      resourceId?: string(name='ResourceId', example='i-23v38****'),
      resourceType?: string(name='ResourceType', example='instance'),
      service?: string(name='Service', example='ecs'),
    }
  ](name='Resource')
  }(name='Resources'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListResourcesResponseBody(name='body'),
}

async function listResourcesWithOptions(request: ListResourcesRequest, runtime: Util.RuntimeOptions): ListResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.service)) {
    query['Service'] = request.service;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListResources',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listResources(request: ListResourcesRequest): ListResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listResourcesWithOptions(request, runtime);
}

model ListRolesRequest {
  language?: string(name='Language', example='zh-CN'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
}

model ListRolesResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='7B8A4E7D-6CFF-471D-84DF-195A7A241ECB'),
  roles?: {
    role?: [ 
    {
      arn?: string(name='Arn', example='acs:ram::123456789012****:role/ECSAdmin'),
      createDate?: string(name='CreateDate', example='2015-01-23T12:33:18Z'),
      description?: string(name='Description'),
      isServiceLinkedRole?: boolean(name='IsServiceLinkedRole', example='true'),
      latestDeletionTask?: {
        createDate?: string(name='CreateDate', example='2018-10-23T12:33:18Z'),
        deletionTaskId?: string(name='DeletionTaskId', example='ECSAdmin/cc61514b-26eb-4453-ab53-b142eb70****'),
      }(name='LatestDeletionTask'),
      maxSessionDuration?: long(name='MaxSessionDuration', example='3600'),
      roleId?: string(name='RoleId', example='90123456789****'),
      roleName?: string(name='RoleName', example='ECSAdmin'),
      rolePrincipalName?: string(name='RolePrincipalName', example='ECSAdmin@role.123456.onaliyunservice.com'),
      updateDate?: string(name='UpdateDate', example='2016-01-23T12:33:18Z'),
    }
  ](name='Role')
  }(name='Roles'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model ListRolesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRolesResponseBody(name='body'),
}

async function listRolesWithOptions(request: ListRolesRequest, runtime: Util.RuntimeOptions): ListRolesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRoles',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRoles(request: ListRolesRequest): ListRolesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRolesWithOptions(request, runtime);
}

model ListTagKeysRequest {
  keyFilter?: string(name='KeyFilter'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  resourceType?: string(name='ResourceType'),
}

model ListTagKeysResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tags?: [ 
    {
      key?: string(name='Key'),
    }
  ](name='Tags'),
}

model ListTagKeysResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagKeysResponseBody(name='body'),
}

async function listTagKeysWithOptions(request: ListTagKeysRequest, runtime: Util.RuntimeOptions): ListTagKeysResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.keyFilter)) {
    query['KeyFilter'] = request.keyFilter;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagKeys',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTagKeys(request: ListTagKeysRequest): ListTagKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagKeysWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a****'),
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType', example='ResourceGroup'),
  tag?: [ 
    {
      key?: string(name='Key', example='k1'),
      value?: string(name='Value', example='v1'),
    }
  ](name='Tag'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a****'),
  requestId?: string(name='RequestId', example='8054B059-6B36-53BF-AA45-B8C9A0ED05AB'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', example='rg-aekz6bre2uq****'),
      resourceType?: string(name='ResourceType', example='resourcegroup'),
      tagKey?: string(name='TagKey', example='k1'),
      tagValue?: string(name='TagValue', example='k1'),
    }
  ](name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagResources',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ListTagValuesRequest {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  resourceType?: string(name='ResourceType'),
  tagKey?: string(name='TagKey'),
  valueFilter?: string(name='ValueFilter'),
}

model ListTagValuesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tags?: [ 
    {
      value?: string(name='Value'),
    }
  ](name='Tags'),
}

model ListTagValuesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagValuesResponseBody(name='body'),
}

async function listTagValuesWithOptions(request: ListTagValuesRequest, runtime: Util.RuntimeOptions): ListTagValuesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  if (!Util.isUnset(request.valueFilter)) {
    query['ValueFilter'] = request.valueFilter;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagValues',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTagValues(request: ListTagValuesRequest): ListTagValuesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagValuesWithOptions(request, runtime);
}

model ListTargetAttachmentsForControlPolicyRequest {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  policyId?: string(name='PolicyId', example='cp-jExXAqIYkwHN****'),
}

model ListTargetAttachmentsForControlPolicyResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='B32BD3D6-1089-41F3-8E70-E0079BC7D760'),
  targetAttachments?: {
    targetAttachment?: [ 
    {
      attachDate?: string(name='AttachDate', example='2021-03-19T02:56:24Z'),
      targetId?: string(name='TargetId', example='fd-ZDNPiT****'),
      targetName?: string(name='TargetName', example='Dev_Department'),
      targetType?: string(name='TargetType', example='Folder'),
    }
  ](name='TargetAttachment')
  }(name='TargetAttachments'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListTargetAttachmentsForControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTargetAttachmentsForControlPolicyResponseBody(name='body'),
}

async function listTargetAttachmentsForControlPolicyWithOptions(request: ListTargetAttachmentsForControlPolicyRequest, runtime: Util.RuntimeOptions): ListTargetAttachmentsForControlPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTargetAttachmentsForControlPolicy',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTargetAttachmentsForControlPolicy(request: ListTargetAttachmentsForControlPolicyRequest): ListTargetAttachmentsForControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTargetAttachmentsForControlPolicyWithOptions(request, runtime);
}

model ListTrustedServiceStatusRequest {
  adminAccountId?: string(name='AdminAccountId', example='177242285274****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
}

model ListTrustedServiceStatusResponseBody = {
  enabledServicePrincipals?: {
    enabledServicePrincipal?: [ 
    {
      enableTime?: string(name='EnableTime', example='2019-02-18T15:32:10.473Z'),
      servicePrincipal?: string(name='ServicePrincipal', example='config.aliyuncs.com'),
    }
  ](name='EnabledServicePrincipal')
  }(name='EnabledServicePrincipals'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='CD76D376-2517-4924-92C5-DBC52262F93A'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model ListTrustedServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTrustedServiceStatusResponseBody(name='body'),
}

async function listTrustedServiceStatusWithOptions(request: ListTrustedServiceStatusRequest, runtime: Util.RuntimeOptions): ListTrustedServiceStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.adminAccountId)) {
    query['AdminAccountId'] = request.adminAccountId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTrustedServiceStatus',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTrustedServiceStatus(request: ListTrustedServiceStatusRequest): ListTrustedServiceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTrustedServiceStatusWithOptions(request, runtime);
}

model MoveAccountRequest {
  accountId?: string(name='AccountId', example='12323344****'),
  destinationFolderId?: string(name='DestinationFolderId', example='fd-bVaRIG****'),
}

model MoveAccountResponseBody = {
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model MoveAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: MoveAccountResponseBody(name='body'),
}

async function moveAccountWithOptions(request: MoveAccountRequest, runtime: Util.RuntimeOptions): MoveAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.destinationFolderId)) {
    query['DestinationFolderId'] = request.destinationFolderId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'MoveAccount',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function moveAccount(request: MoveAccountRequest): MoveAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return moveAccountWithOptions(request, runtime);
}

model MoveResourcesRequest {
  resourceGroupId?: string(name='ResourceGroupId', example='rg-aekzmeobk5w****'),
  resources?: [ 
    {
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      resourceId?: string(name='ResourceId', example='vpc-bp1sig0mjktx5ewx1****'),
      resourceType?: string(name='ResourceType', example='vpc'),
      service?: string(name='Service', example='vpc'),
    }
  ](name='Resources'),
}

model MoveResourcesResponseBody = {
  requestId?: string(name='RequestId', example='C00B89D3-3247-11DE-95D8-A7C01FB0AB4F'),
  responses?: [ 
    {
      errorCode?: string(name='ErrorCode', example='NoPermission'),
      errorMsg?: string(name='ErrorMsg'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      requestId?: string(name='RequestId', example='C00B89D3-3247-11DE-95D8-A7C01FB0AB4F'),
      resourceId?: string(name='ResourceId', example='vpc-bp1sig0mjktx5ewx1****'),
      resourceType?: string(name='ResourceType', example='vpc'),
      service?: string(name='Service', example='vpc'),
      status?: string(name='Status', example='FAIL'),
    }
  ](name='Responses'),
}

model MoveResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: MoveResourcesResponseBody(name='body'),
}

async function moveResourcesWithOptions(request: MoveResourcesRequest, runtime: Util.RuntimeOptions): MoveResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resources)) {
    query['Resources'] = request.resources;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'MoveResources',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function moveResources(request: MoveResourcesRequest): MoveResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return moveResourcesWithOptions(request, runtime);
}

model PromoteResourceAccountRequest {
  accountId?: string(name='AccountId', example='12323344****'),
  email?: string(name='Email', example='someone@example.com'),
}

model PromoteResourceAccountResponseBody = {
  account?: {
    accountId?: string(name='AccountId', example='12323344****'),
    accountName?: string(name='AccountName', example='someone@example.com'),
    displayName?: string(name='DisplayName', example='admin'),
    folderId?: string(name='FolderId', example='fd-bVaRIG****'),
    joinMethod?: string(name='JoinMethod', example='created'),
    joinTime?: string(name='JoinTime', example='2015-01-23T12:33:18Z'),
    modifyTime?: string(name='ModifyTime', example='2015-01-23T12:33:18Z'),
    recordId?: string(name='RecordId', example='06950264-3f0d-4ca9-82dd-6ee7a3d33d6b'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', example='rd-k3****'),
    status?: string(name='Status', example='PromoteVerifying'),
    type?: string(name='Type', example='ResourceAccount'),
  }(name='Account'),
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model PromoteResourceAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PromoteResourceAccountResponseBody(name='body'),
}

async function promoteResourceAccountWithOptions(request: PromoteResourceAccountRequest, runtime: Util.RuntimeOptions): PromoteResourceAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.email)) {
    query['Email'] = request.email;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PromoteResourceAccount',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function promoteResourceAccount(request: PromoteResourceAccountRequest): PromoteResourceAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return promoteResourceAccountWithOptions(request, runtime);
}

model RegisterDelegatedAdministratorRequest {
  accountId?: string(name='AccountId', example='181761095690****'),
  servicePrincipal?: string(name='ServicePrincipal', example='cloudfw.aliyuncs.com'),
}

model RegisterDelegatedAdministratorResponseBody = {
  requestId?: string(name='RequestId', example='0A45FC8F-54D2-4A65-8338-25E5DEBDA304'),
}

model RegisterDelegatedAdministratorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RegisterDelegatedAdministratorResponseBody(name='body'),
}

async function registerDelegatedAdministratorWithOptions(request: RegisterDelegatedAdministratorRequest, runtime: Util.RuntimeOptions): RegisterDelegatedAdministratorResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.servicePrincipal)) {
    query['ServicePrincipal'] = request.servicePrincipal;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RegisterDelegatedAdministrator',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function registerDelegatedAdministrator(request: RegisterDelegatedAdministratorRequest): RegisterDelegatedAdministratorResponse {
  var runtime = new Util.RuntimeOptions{};
  return registerDelegatedAdministratorWithOptions(request, runtime);
}

model RemoveCloudAccountRequest {
  accountId?: string(name='AccountId', example='177242285274****'),
}

model RemoveCloudAccountResponseBody = {
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model RemoveCloudAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveCloudAccountResponseBody(name='body'),
}

async function removeCloudAccountWithOptions(request: RemoveCloudAccountRequest, runtime: Util.RuntimeOptions): RemoveCloudAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveCloudAccount',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeCloudAccount(request: RemoveCloudAccountRequest): RemoveCloudAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeCloudAccountWithOptions(request, runtime);
}

model ResendCreateCloudAccountEmailRequest {
  recordId?: string(name='RecordId', example='06950264-3f0d-4ca9-82dd-6ee7a3d33d6b'),
}

model ResendCreateCloudAccountEmailResponseBody = {
  account?: {
    accountId?: string(name='AccountId', example='12323344****'),
    accountName?: string(name='AccountName', example='someone@example.com'),
    displayName?: string(name='DisplayName', example='admin'),
    folderId?: string(name='FolderId', example='fd-bVaRIG****'),
    joinMethod?: string(name='JoinMethod', example='created'),
    joinTime?: string(name='JoinTime', example='2015-01-23T12:33:18Z'),
    modifyTime?: string(name='ModifyTime', example='2015-01-23T12:33:18Z'),
    recordId?: string(name='RecordId', example='16950264-3f0d-4ca9-82dd-6ee7a3d33d6b'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', example='rd-k3****'),
    status?: string(name='Status', example='CreateVerifying'),
    type?: string(name='Type', example='CloudAccount'),
  }(name='Account'),
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model ResendCreateCloudAccountEmailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResendCreateCloudAccountEmailResponseBody(name='body'),
}

async function resendCreateCloudAccountEmailWithOptions(request: ResendCreateCloudAccountEmailRequest, runtime: Util.RuntimeOptions): ResendCreateCloudAccountEmailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.recordId)) {
    query['RecordId'] = request.recordId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResendCreateCloudAccountEmail',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resendCreateCloudAccountEmail(request: ResendCreateCloudAccountEmailRequest): ResendCreateCloudAccountEmailResponse {
  var runtime = new Util.RuntimeOptions{};
  return resendCreateCloudAccountEmailWithOptions(request, runtime);
}

model ResendPromoteResourceAccountEmailRequest {
  recordId?: string(name='RecordId', example='06950264-3f0d-4ca9-82dd-6ee7a3d33d6b'),
}

model ResendPromoteResourceAccountEmailResponseBody = {
  account?: {
    accountId?: string(name='AccountId', example='12323344****'),
    accountName?: string(name='AccountName', example='someone@example.com'),
    displayName?: string(name='DisplayName', example='admin'),
    folderId?: string(name='FolderId', example='fd-bVaRIG****'),
    joinMethod?: string(name='JoinMethod', example='created'),
    joinTime?: string(name='JoinTime', example='2015-01-23T12:33:18Z'),
    modifyTime?: string(name='ModifyTime', example='2015-01-23T12:33:18Z'),
    recordId?: string(name='RecordId', example='16950264-3f0d-4ca9-82dd-6ee7a3d33d6b'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', example='rd-k3****'),
    status?: string(name='Status', example='PromoteVerifying'),
    type?: string(name='Type', example='ResourceAccount'),
  }(name='Account'),
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model ResendPromoteResourceAccountEmailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResendPromoteResourceAccountEmailResponseBody(name='body'),
}

async function resendPromoteResourceAccountEmailWithOptions(request: ResendPromoteResourceAccountEmailRequest, runtime: Util.RuntimeOptions): ResendPromoteResourceAccountEmailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.recordId)) {
    query['RecordId'] = request.recordId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResendPromoteResourceAccountEmail',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resendPromoteResourceAccountEmail(request: ResendPromoteResourceAccountEmailRequest): ResendPromoteResourceAccountEmailResponse {
  var runtime = new Util.RuntimeOptions{};
  return resendPromoteResourceAccountEmailWithOptions(request, runtime);
}

model RetryChangeAccountEmailRequest {
  accountId?: string(name='AccountId', example='181761095690****'),
}

model RetryChangeAccountEmailResponseBody = {
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model RetryChangeAccountEmailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RetryChangeAccountEmailResponseBody(name='body'),
}

async function retryChangeAccountEmailWithOptions(request: RetryChangeAccountEmailRequest, runtime: Util.RuntimeOptions): RetryChangeAccountEmailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RetryChangeAccountEmail',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function retryChangeAccountEmail(request: RetryChangeAccountEmailRequest): RetryChangeAccountEmailResponse {
  var runtime = new Util.RuntimeOptions{};
  return retryChangeAccountEmailWithOptions(request, runtime);
}

model SendVerificationCodeForBindSecureMobilePhoneRequest {
  accountId?: string(name='AccountId', example='138660628348****'),
  secureMobilePhone?: string(name='SecureMobilePhone', example='xx-13900001234'),
}

model SendVerificationCodeForBindSecureMobilePhoneResponseBody = {
  expirationDate?: string(name='ExpirationDate', example='2021-12-17T07:38:41.747Z'),
  requestId?: string(name='RequestId', example='DCD43660-75DD-5D15-B342-1B83FCA5B913'),
}

model SendVerificationCodeForBindSecureMobilePhoneResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SendVerificationCodeForBindSecureMobilePhoneResponseBody(name='body'),
}

async function sendVerificationCodeForBindSecureMobilePhoneWithOptions(request: SendVerificationCodeForBindSecureMobilePhoneRequest, runtime: Util.RuntimeOptions): SendVerificationCodeForBindSecureMobilePhoneResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.secureMobilePhone)) {
    query['SecureMobilePhone'] = request.secureMobilePhone;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SendVerificationCodeForBindSecureMobilePhone',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sendVerificationCodeForBindSecureMobilePhone(request: SendVerificationCodeForBindSecureMobilePhoneRequest): SendVerificationCodeForBindSecureMobilePhoneResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendVerificationCodeForBindSecureMobilePhoneWithOptions(request, runtime);
}

model SendVerificationCodeForEnableRDRequest {
  secureMobilePhone?: string(name='SecureMobilePhone', example='xx-13900001234'),
}

model SendVerificationCodeForEnableRDResponseBody = {
  requestId?: string(name='RequestId', example='EC2FE94D-A4A2-51A1-A493-5C273A36C46A'),
}

model SendVerificationCodeForEnableRDResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SendVerificationCodeForEnableRDResponseBody(name='body'),
}

async function sendVerificationCodeForEnableRDWithOptions(request: SendVerificationCodeForEnableRDRequest, runtime: Util.RuntimeOptions): SendVerificationCodeForEnableRDResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.secureMobilePhone)) {
    query['SecureMobilePhone'] = request.secureMobilePhone;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SendVerificationCodeForEnableRD',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sendVerificationCodeForEnableRD(request: SendVerificationCodeForEnableRDRequest): SendVerificationCodeForEnableRDResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendVerificationCodeForEnableRDWithOptions(request, runtime);
}

model SetDefaultPolicyVersionRequest {
  policyName?: string(name='PolicyName', example='OSS-Administrator'),
  versionId?: string(name='VersionId', example='v2'),
}

model SetDefaultPolicyVersionResponseBody = {
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model SetDefaultPolicyVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetDefaultPolicyVersionResponseBody(name='body'),
}

async function setDefaultPolicyVersionWithOptions(request: SetDefaultPolicyVersionRequest, runtime: Util.RuntimeOptions): SetDefaultPolicyVersionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.policyName)) {
    query['PolicyName'] = request.policyName;
  }
  if (!Util.isUnset(request.versionId)) {
    query['VersionId'] = request.versionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetDefaultPolicyVersion',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setDefaultPolicyVersion(request: SetDefaultPolicyVersionRequest): SetDefaultPolicyVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDefaultPolicyVersionWithOptions(request, runtime);
}

model SetMemberDeletionPermissionRequest {
  status?: string(name='Status', example='Enabled'),
}

model SetMemberDeletionPermissionResponseBody = {
  managementAccountId?: string(name='ManagementAccountId', example='151266687691****'),
  memberDeletionStatus?: string(name='MemberDeletionStatus', example='Enabled'),
  requestId?: string(name='RequestId', example='C55A4CAA-9039-1DDF-91CE-FCC134513D29'),
  resourceDirectoryId?: string(name='ResourceDirectoryId', example='rd-3G****'),
}

model SetMemberDeletionPermissionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetMemberDeletionPermissionResponseBody(name='body'),
}

async function setMemberDeletionPermissionWithOptions(request: SetMemberDeletionPermissionRequest, runtime: Util.RuntimeOptions): SetMemberDeletionPermissionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetMemberDeletionPermission',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setMemberDeletionPermission(request: SetMemberDeletionPermissionRequest): SetMemberDeletionPermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return setMemberDeletionPermissionWithOptions(request, runtime);
}

model TagResourcesRequest {
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType', example='ResourceGroup'),
  tag?: [ 
    {
      key?: string(name='Key', example='k1'),
      value?: string(name='Value', example='v1'),
    }
  ](name='Tag'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='E7747EDF-EDDC-5B38-9B6A-6392B9C92B1C'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TagResources',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UntagResourcesRequest {
  all?: boolean(name='All', example='false'),
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType', example='ResourceGroup'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='E7747EDF-EDDC-5B38-9B6A-6392B9C92B1C'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.all)) {
    query['All'] = request.all;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UntagResources',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model UpdateAccountRequest {
  accountId?: string(name='AccountId', example='12323344****'),
  newAccountType?: string(name='NewAccountType', example='ResourceAccount'),
  newDisplayName?: string(name='NewDisplayName', example='admin'),
}

model UpdateAccountResponseBody = {
  account?: {
    accountId?: string(name='AccountId', example='12323344****'),
    accountName?: string(name='AccountName', example='ecs-manager@aliyun.com'),
    displayName?: string(name='DisplayName', example='admin'),
    folderId?: string(name='FolderId', example='fd-bVaRIG****'),
    joinMethod?: string(name='JoinMethod', example='created'),
    joinTime?: string(name='JoinTime', example='2015-01-23T12:33:18Z'),
    modifyTime?: string(name='ModifyTime', example='2015-01-23T12:33:18Z'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', example='rd-k3****'),
    status?: string(name='Status', example='CreateSuccess'),
    type?: string(name='Type', example='ResourceAccount'),
  }(name='Account'),
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model UpdateAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAccountResponseBody(name='body'),
}

async function updateAccountWithOptions(request: UpdateAccountRequest, runtime: Util.RuntimeOptions): UpdateAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.newAccountType)) {
    query['NewAccountType'] = request.newAccountType;
  }
  if (!Util.isUnset(request.newDisplayName)) {
    query['NewDisplayName'] = request.newDisplayName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAccount',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateAccount(request: UpdateAccountRequest): UpdateAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAccountWithOptions(request, runtime);
}

model UpdateControlPolicyRequest {
  newDescription?: string(name='NewDescription', example='ExampleControlPolicy'),
  newPolicyDocument?: string(name='NewPolicyDocument', example='{"Version":"1","Statement":[{"Effect":"Deny","Action":["ram:UpdateRole","ram:DeleteRole","ram:AttachPolicyToRole","ram:DetachPolicyFromRole"],"Resource":"acs:ram:*:*:role/ResourceDirectoryAccountAccessRole"}]}'),
  newPolicyName?: string(name='NewPolicyName', example='NewControlPolicy'),
  policyId?: string(name='PolicyId', example='cp-jExXAqIYkwHN****'),
}

model UpdateControlPolicyResponseBody = {
  controlPolicy?: {
    attachmentCount?: string(name='AttachmentCount', example='0'),
    createDate?: string(name='CreateDate', example='2021-03-18T09:24:19Z'),
    description?: string(name='Description', example='ExampleControlPolicy'),
    effectScope?: string(name='EffectScope', example='RAM'),
    policyId?: string(name='PolicyId', example='cp-jExXAqIYkwHN****'),
    policyName?: string(name='PolicyName', example='NewControlPolicy'),
    policyType?: string(name='PolicyType', example='Custom'),
    updateDate?: string(name='UpdateDate', example='2021-03-18T10:04:55Z'),
  }(name='ControlPolicy'),
  requestId?: string(name='RequestId', example='2DFCE4C9-04A9-4C83-BB14-FE791275EC53'),
}

model UpdateControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateControlPolicyResponseBody(name='body'),
}

async function updateControlPolicyWithOptions(request: UpdateControlPolicyRequest, runtime: Util.RuntimeOptions): UpdateControlPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.newDescription)) {
    query['NewDescription'] = request.newDescription;
  }
  if (!Util.isUnset(request.newPolicyDocument)) {
    query['NewPolicyDocument'] = request.newPolicyDocument;
  }
  if (!Util.isUnset(request.newPolicyName)) {
    query['NewPolicyName'] = request.newPolicyName;
  }
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateControlPolicy',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateControlPolicy(request: UpdateControlPolicyRequest): UpdateControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateControlPolicyWithOptions(request, runtime);
}

model UpdateFolderRequest {
  folderId?: string(name='FolderId', example='fd-u8B321****'),
  newFolderName?: string(name='NewFolderName', example='rdFolder'),
}

model UpdateFolderResponseBody = {
  folder?: {
    createTime?: string(name='CreateTime', example='2019-02-19T09:34:50.757Z'),
    folderId?: string(name='FolderId', example='fd-u8B321****'),
    folderName?: string(name='FolderName', example='rdFolder'),
    parentFolderId?: string(name='ParentFolderId', example='r-b1****'),
  }(name='Folder'),
  requestId?: string(name='RequestId', example='C2CBCA30-C8DD-423E-B4AD-4FB694C9180C'),
}

model UpdateFolderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateFolderResponseBody(name='body'),
}

async function updateFolderWithOptions(request: UpdateFolderRequest, runtime: Util.RuntimeOptions): UpdateFolderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.folderId)) {
    query['FolderId'] = request.folderId;
  }
  if (!Util.isUnset(request.newFolderName)) {
    query['NewFolderName'] = request.newFolderName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateFolder',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateFolder(request: UpdateFolderRequest): UpdateFolderResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateFolderWithOptions(request, runtime);
}

model UpdateResourceGroupRequest {
  newDisplayName?: string(name='NewDisplayName', example='project'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-9gLOoK****'),
}

model UpdateResourceGroupResponseBody = {
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  resourceGroup?: {
    accountId?: string(name='AccountId', example='123456789****'),
    createDate?: string(name='CreateDate', example='2015-01-23T12:33:18+08:00'),
    displayName?: string(name='DisplayName', example='project'),
    id?: string(name='Id', example='rg-9gLOoK****'),
    name?: string(name='Name', example='my-project'),
  }(name='ResourceGroup'),
}

model UpdateResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateResourceGroupResponseBody(name='body'),
}

async function updateResourceGroupWithOptions(request: UpdateResourceGroupRequest, runtime: Util.RuntimeOptions): UpdateResourceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.newDisplayName)) {
    query['NewDisplayName'] = request.newDisplayName;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateResourceGroup',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateResourceGroup(request: UpdateResourceGroupRequest): UpdateResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateResourceGroupWithOptions(request, runtime);
}

model UpdateRoleRequest {
  newAssumeRolePolicyDocument?: string(name='NewAssumeRolePolicyDocument', example='{ "Statement": [ { "Action": "sts:AssumeRole", "Effect": "Allow", "Principal": { "RAM": "acs:ram::12345678901234****:root" } } ], "Version": "1" }'),
  newDescription?: string(name='NewDescription'),
  newMaxSessionDuration?: long(name='NewMaxSessionDuration', example='3600'),
  roleName?: string(name='RoleName', example='ECSAdmin'),
}

model UpdateRoleResponseBody = {
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  role?: {
    arn?: string(name='Arn', example='acs:ram::123456789012****:role/ECSAdmin'),
    assumeRolePolicyDocument?: string(name='AssumeRolePolicyDocument', example='{ \\"Statement\\": [ { \\"Action\\": \\"sts:AssumeRole\\", \\"Effect\\": \\"Allow\\", \\"Principal\\": { \\"RAM\\": \\"acs:ram::12345678901234****:root\\" } } ], \\"Version\\": \\"1\\" }'),
    createDate?: string(name='CreateDate', example='2015-01-23T12:33:18Z'),
    description?: string(name='Description'),
    maxSessionDuration?: long(name='MaxSessionDuration', example='3600'),
    roleId?: string(name='RoleId', example='90123456789****'),
    roleName?: string(name='RoleName', example='ECSAdmin'),
    rolePrincipalName?: string(name='RolePrincipalName', example='ECSAdmin@role.123456.onaliyunservice.com'),
    updateDate?: string(name='UpdateDate', example='2016-01-23T12:33:18Z'),
  }(name='Role'),
}

model UpdateRoleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateRoleResponseBody(name='body'),
}

async function updateRoleWithOptions(request: UpdateRoleRequest, runtime: Util.RuntimeOptions): UpdateRoleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.newAssumeRolePolicyDocument)) {
    query['NewAssumeRolePolicyDocument'] = request.newAssumeRolePolicyDocument;
  }
  if (!Util.isUnset(request.newDescription)) {
    query['NewDescription'] = request.newDescription;
  }
  if (!Util.isUnset(request.newMaxSessionDuration)) {
    query['NewMaxSessionDuration'] = request.newMaxSessionDuration;
  }
  if (!Util.isUnset(request.roleName)) {
    query['RoleName'] = request.roleName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateRole',
    version = '2020-03-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateRole(request: UpdateRoleRequest): UpdateRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateRoleWithOptions(request, runtime);
}

