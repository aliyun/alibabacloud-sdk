/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('dfs', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AttachVscMountPointRequest {
  description?: string(name='Description'),
  fileSystemId?: string(name='FileSystemId', example='037****e1d'),
  inputRegionId?: string(name='InputRegionId', example='cn-hangzhou'),
  instanceIds?: map[string]any(name='InstanceIds', example='["ecs-instance1", "ecs-instance2"]'),
  mountPointId?: string(name='MountPointId', example='037cb49e1d-c***5'),
  vscIds?: [ string ](name='VscIds'),
  vscType?: string(name='VscType'),
}

model AttachVscMountPointShrinkRequest {
  description?: string(name='Description'),
  fileSystemId?: string(name='FileSystemId', example='037****e1d'),
  inputRegionId?: string(name='InputRegionId', example='cn-hangzhou'),
  instanceIdsShrink?: string(name='InstanceIds', example='["ecs-instance1", "ecs-instance2"]'),
  mountPointId?: string(name='MountPointId', example='037cb49e1d-c***5'),
  vscIdsShrink?: string(name='VscIds'),
  vscType?: string(name='VscType'),
}

model AttachVscMountPointResponseBody = {
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
}

model AttachVscMountPointResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AttachVscMountPointResponseBody(name='body'),
}

/**
  * ****
  *
  * @param tmpReq AttachVscMountPointRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return AttachVscMountPointResponse
 */
async function attachVscMountPointWithOptions(tmpReq: AttachVscMountPointRequest, runtime: Util.RuntimeOptions): AttachVscMountPointResponse {
  Util.validateModel(tmpReq);
  var request = new AttachVscMountPointShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.instanceIds)) {
    request.instanceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instanceIds, 'InstanceIds', 'json');
  }
  if (!Util.isUnset(tmpReq.vscIds)) {
    request.vscIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.vscIds, 'VscIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.inputRegionId)) {
    query['InputRegionId'] = request.inputRegionId;
  }
  if (!Util.isUnset(request.instanceIdsShrink)) {
    query['InstanceIds'] = request.instanceIdsShrink;
  }
  if (!Util.isUnset(request.mountPointId)) {
    query['MountPointId'] = request.mountPointId;
  }
  if (!Util.isUnset(request.vscIdsShrink)) {
    query['VscIds'] = request.vscIdsShrink;
  }
  if (!Util.isUnset(request.vscType)) {
    query['VscType'] = request.vscType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AttachVscMountPoint',
    version = '2018-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ****
  *
  * @param request AttachVscMountPointRequest
  * @return AttachVscMountPointResponse
 */
async function attachVscMountPoint(request: AttachVscMountPointRequest): AttachVscMountPointResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachVscMountPointWithOptions(request, runtime);
}

model BindVscMountPointAliasRequest {
  aliasPrefix?: string(name='AliasPrefix', example='sdfe'),
  fileSystemId?: string(name='FileSystemId', example='037****e1d'),
  inputRegionId?: string(name='InputRegionId', example='cn-hangzhou'),
  mountPointId?: string(name='MountPointId', example='037cb49e1d-c***5'),
}

model BindVscMountPointAliasResponseBody = {
  mountPointAlias?: string(name='MountPointAlias', example='sdfe'),
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
}

model BindVscMountPointAliasResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BindVscMountPointAliasResponseBody(name='body'),
}

async function bindVscMountPointAliasWithOptions(request: BindVscMountPointAliasRequest, runtime: Util.RuntimeOptions): BindVscMountPointAliasResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliasPrefix)) {
    query['AliasPrefix'] = request.aliasPrefix;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.inputRegionId)) {
    query['InputRegionId'] = request.inputRegionId;
  }
  if (!Util.isUnset(request.mountPointId)) {
    query['MountPointId'] = request.mountPointId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BindVscMountPointAlias',
    version = '2018-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function bindVscMountPointAlias(request: BindVscMountPointAliasRequest): BindVscMountPointAliasResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindVscMountPointAliasWithOptions(request, runtime);
}

model CreateAccessGroupRequest {
  accessGroupName?: string(name='AccessGroupName', example='my-online-cluster-policy'),
  description?: string(name='Description'),
  inputRegionId?: string(name='InputRegionId', example='cn-hangzhou'),
  networkType?: string(name='NetworkType', example='VPC'),
}

model CreateAccessGroupResponseBody = {
  accessGroupId?: string(name='AccessGroupId', example='acg-e3755fb0-358d-4286-9942-8d461048****'),
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
}

model CreateAccessGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAccessGroupResponseBody(name='body'),
}

async function createAccessGroupWithOptions(request: CreateAccessGroupRequest, runtime: Util.RuntimeOptions): CreateAccessGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessGroupName)) {
    query['AccessGroupName'] = request.accessGroupName;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.inputRegionId)) {
    query['InputRegionId'] = request.inputRegionId;
  }
  if (!Util.isUnset(request.networkType)) {
    query['NetworkType'] = request.networkType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAccessGroup',
    version = '2018-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAccessGroup(request: CreateAccessGroupRequest): CreateAccessGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAccessGroupWithOptions(request, runtime);
}

model CreateAccessRuleRequest {
  accessGroupId?: string(name='AccessGroupId', example='acg-e3755fb0-358d-4286-9942-8d461048****'),
  description?: string(name='Description'),
  inputRegionId?: string(name='InputRegionId', example='cn-hangzhou'),
  networkSegment?: string(name='NetworkSegment', example='192.0.2.0/24'),
  priority?: int32(name='Priority', example='2'),
  RWAccessType?: string(name='RWAccessType', example='RDWR'),
}

model CreateAccessRuleResponseBody = {
  accessRuleId?: string(name='AccessRuleId', example='acr-c38028f0-f313-4385-9456-3501b1f5****'),
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
}

model CreateAccessRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAccessRuleResponseBody(name='body'),
}

async function createAccessRuleWithOptions(request: CreateAccessRuleRequest, runtime: Util.RuntimeOptions): CreateAccessRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessGroupId)) {
    query['AccessGroupId'] = request.accessGroupId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.inputRegionId)) {
    query['InputRegionId'] = request.inputRegionId;
  }
  if (!Util.isUnset(request.networkSegment)) {
    query['NetworkSegment'] = request.networkSegment;
  }
  if (!Util.isUnset(request.priority)) {
    query['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.RWAccessType)) {
    query['RWAccessType'] = request.RWAccessType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAccessRule',
    version = '2018-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAccessRule(request: CreateAccessRuleRequest): CreateAccessRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAccessRuleWithOptions(request, runtime);
}

model CreateFileSystemRequest {
  dataRedundancyType?: string(name='DataRedundancyType', example='LRS'),
  description?: string(name='Description'),
  fileSystemName?: string(name='FileSystemName', example='MyFirstHDFS'),
  inputRegionId?: string(name='InputRegionId', example='cn-hangzhou'),
  partitionNumber?: int32(name='PartitionNumber', example='0'),
  protocolType?: string(name='ProtocolType', example='HDFS'),
  provisionedThroughputInMiBps?: long(name='ProvisionedThroughputInMiBps', example='1024'),
  spaceCapacity?: long(name='SpaceCapacity', example='1024'),
  storageSetName?: string(name='StorageSetName', example='AligroupStorageSet'),
  storageType?: string(name='StorageType', example='STANDARD'),
  throughputMode?: string(name='ThroughputMode', example='Standard'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-b'),
}

model CreateFileSystemResponseBody = {
  fileSystemId?: string(name='FileSystemId'),
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
}

model CreateFileSystemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFileSystemResponseBody(name='body'),
}

async function createFileSystemWithOptions(request: CreateFileSystemRequest, runtime: Util.RuntimeOptions): CreateFileSystemResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dataRedundancyType)) {
    query['DataRedundancyType'] = request.dataRedundancyType;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.fileSystemName)) {
    query['FileSystemName'] = request.fileSystemName;
  }
  if (!Util.isUnset(request.inputRegionId)) {
    query['InputRegionId'] = request.inputRegionId;
  }
  if (!Util.isUnset(request.partitionNumber)) {
    query['PartitionNumber'] = request.partitionNumber;
  }
  if (!Util.isUnset(request.protocolType)) {
    query['ProtocolType'] = request.protocolType;
  }
  if (!Util.isUnset(request.provisionedThroughputInMiBps)) {
    query['ProvisionedThroughputInMiBps'] = request.provisionedThroughputInMiBps;
  }
  if (!Util.isUnset(request.spaceCapacity)) {
    query['SpaceCapacity'] = request.spaceCapacity;
  }
  if (!Util.isUnset(request.storageSetName)) {
    query['StorageSetName'] = request.storageSetName;
  }
  if (!Util.isUnset(request.storageType)) {
    query['StorageType'] = request.storageType;
  }
  if (!Util.isUnset(request.throughputMode)) {
    query['ThroughputMode'] = request.throughputMode;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateFileSystem',
    version = '2018-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createFileSystem(request: CreateFileSystemRequest): CreateFileSystemResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFileSystemWithOptions(request, runtime);
}

model CreateMountPointRequest {
  accessGroupId?: string(name='AccessGroupId', example='acg-e3755fb0-358d-4286-9942-8d461048****'),
  description?: string(name='Description'),
  fileSystemId?: string(name='FileSystemId'),
  inputRegionId?: string(name='InputRegionId', example='cn-hangzhou'),
  networkType?: string(name='NetworkType', example='VPC'),
  vSwitchId?: string(name='VSwitchId', example='vsw-iq8fymi327krd14mt****'),
  vpcId?: string(name='VpcId', example='vpc-iq8hhsk3ymzv9m4wn****'),
}

model CreateMountPointResponseBody = {
  mountPointId?: string(name='MountPointId'),
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
}

model CreateMountPointResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateMountPointResponseBody(name='body'),
}

async function createMountPointWithOptions(request: CreateMountPointRequest, runtime: Util.RuntimeOptions): CreateMountPointResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessGroupId)) {
    query['AccessGroupId'] = request.accessGroupId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.inputRegionId)) {
    query['InputRegionId'] = request.inputRegionId;
  }
  if (!Util.isUnset(request.networkType)) {
    query['NetworkType'] = request.networkType;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateMountPoint',
    version = '2018-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createMountPoint(request: CreateMountPointRequest): CreateMountPointResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMountPointWithOptions(request, runtime);
}

model CreateUserGroupsMappingRequest {
  fileSystemId?: string(name='FileSystemId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
  groupNames?: [ string ](name='GroupNames', example='["group1","group2"]'),
  inputRegionId?: string(name='InputRegionId', example='cn-hangzhou'),
  userName?: string(name='UserName', example='user1'),
}

model CreateUserGroupsMappingShrinkRequest {
  fileSystemId?: string(name='FileSystemId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
  groupNamesShrink?: string(name='GroupNames', example='["group1","group2"]'),
  inputRegionId?: string(name='InputRegionId', example='cn-hangzhou'),
  userName?: string(name='UserName', example='user1'),
}

model CreateUserGroupsMappingResponseBody = {
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
}

model CreateUserGroupsMappingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateUserGroupsMappingResponseBody(name='body'),
}

async function createUserGroupsMappingWithOptions(tmpReq: CreateUserGroupsMappingRequest, runtime: Util.RuntimeOptions): CreateUserGroupsMappingResponse {
  Util.validateModel(tmpReq);
  var request = new CreateUserGroupsMappingShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.groupNames)) {
    request.groupNamesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.groupNames, 'GroupNames', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateUserGroupsMapping',
    version = '2018-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createUserGroupsMapping(request: CreateUserGroupsMappingRequest): CreateUserGroupsMappingResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUserGroupsMappingWithOptions(request, runtime);
}

model CreateVscMountPointRequest {
  description?: string(name='Description'),
  fileSystemId?: string(name='FileSystemId', example='e389e5c7-bcb4-4558-846a-e5afc444****'),
  inputRegionId?: string(name='InputRegionId', example='cn-hangzhou'),
  instanceIds?: map[string]any(name='InstanceIds', example='[
      "i-bp1g6zv0ce8oghu7****",
      "i-bp1g6zv0ce8oghu1****"
]'),
}

model CreateVscMountPointShrinkRequest {
  description?: string(name='Description'),
  fileSystemId?: string(name='FileSystemId', example='e389e5c7-bcb4-4558-846a-e5afc444****'),
  inputRegionId?: string(name='InputRegionId', example='cn-hangzhou'),
  instanceIdsShrink?: string(name='InstanceIds', example='[
      "i-bp1g6zv0ce8oghu7****",
      "i-bp1g6zv0ce8oghu1****"
]'),
}

model CreateVscMountPointResponseBody = {
  mountPointId?: string(name='MountPointId', example='e389e5c7-bcb4-4558-846a-e5afc444****'),
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
}

model CreateVscMountPointResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateVscMountPointResponseBody(name='body'),
}

async function createVscMountPointWithOptions(tmpReq: CreateVscMountPointRequest, runtime: Util.RuntimeOptions): CreateVscMountPointResponse {
  Util.validateModel(tmpReq);
  var request = new CreateVscMountPointShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.instanceIds)) {
    request.instanceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instanceIds, 'InstanceIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.inputRegionId)) {
    query['InputRegionId'] = request.inputRegionId;
  }
  if (!Util.isUnset(request.instanceIdsShrink)) {
    query['InstanceIds'] = request.instanceIdsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateVscMountPoint',
    version = '2018-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createVscMountPoint(request: CreateVscMountPointRequest): CreateVscMountPointResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVscMountPointWithOptions(request, runtime);
}

model DeleteAccessGroupRequest {
  accessGroupId?: string(name='AccessGroupId', example='acg-e3755fb0-358d-4286-9942-8d461048****'),
  inputRegionId?: string(name='InputRegionId', example='cn-hangzhou'),
}

model DeleteAccessGroupResponseBody = {
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
}

model DeleteAccessGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAccessGroupResponseBody(name='body'),
}

async function deleteAccessGroupWithOptions(request: DeleteAccessGroupRequest, runtime: Util.RuntimeOptions): DeleteAccessGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessGroupId)) {
    query['AccessGroupId'] = request.accessGroupId;
  }
  if (!Util.isUnset(request.inputRegionId)) {
    query['InputRegionId'] = request.inputRegionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAccessGroup',
    version = '2018-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAccessGroup(request: DeleteAccessGroupRequest): DeleteAccessGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAccessGroupWithOptions(request, runtime);
}

model DeleteAccessRuleRequest {
  accessGroupId?: string(name='AccessGroupId', example='acg-e3755fb0-358d-4286-9942-8d461048****'),
  accessRuleId?: string(name='AccessRuleId', example='acr-c38028f0-f313-4385-9456-3501b1f5****'),
  inputRegionId?: string(name='InputRegionId', example='cn-hangzhou'),
}

model DeleteAccessRuleResponseBody = {
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
}

model DeleteAccessRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAccessRuleResponseBody(name='body'),
}

async function deleteAccessRuleWithOptions(request: DeleteAccessRuleRequest, runtime: Util.RuntimeOptions): DeleteAccessRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessGroupId)) {
    query['AccessGroupId'] = request.accessGroupId;
  }
  if (!Util.isUnset(request.accessRuleId)) {
    query['AccessRuleId'] = request.accessRuleId;
  }
  if (!Util.isUnset(request.inputRegionId)) {
    query['InputRegionId'] = request.inputRegionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAccessRule',
    version = '2018-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAccessRule(request: DeleteAccessRuleRequest): DeleteAccessRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAccessRuleWithOptions(request, runtime);
}

model DeleteFileSystemRequest {
  fileSystemId?: string(name='FileSystemId'),
  inputRegionId?: string(name='InputRegionId', example='cn-hangzhou'),
}

model DeleteFileSystemResponseBody = {
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
}

model DeleteFileSystemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteFileSystemResponseBody(name='body'),
}

async function deleteFileSystemWithOptions(request: DeleteFileSystemRequest, runtime: Util.RuntimeOptions): DeleteFileSystemResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.inputRegionId)) {
    query['InputRegionId'] = request.inputRegionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFileSystem',
    version = '2018-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteFileSystem(request: DeleteFileSystemRequest): DeleteFileSystemResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFileSystemWithOptions(request, runtime);
}

model DeleteMountPointRequest {
  fileSystemId?: string(name='FileSystemId'),
  inputRegionId?: string(name='InputRegionId', example='cn-hangzhou'),
  mountPointId?: string(name='MountPointId'),
}

model DeleteMountPointResponseBody = {
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
}

model DeleteMountPointResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteMountPointResponseBody(name='body'),
}

async function deleteMountPointWithOptions(request: DeleteMountPointRequest, runtime: Util.RuntimeOptions): DeleteMountPointResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.inputRegionId)) {
    query['InputRegionId'] = request.inputRegionId;
  }
  if (!Util.isUnset(request.mountPointId)) {
    query['MountPointId'] = request.mountPointId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteMountPoint',
    version = '2018-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteMountPoint(request: DeleteMountPointRequest): DeleteMountPointResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMountPointWithOptions(request, runtime);
}

model DeleteUserGroupsMappingRequest {
  fileSystemId?: string(name='FileSystemId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
  groupNames?: map[string]any(name='GroupNames', example='["group1","group2"]'),
  inputRegionId?: string(name='InputRegionId', example='cn-hangzhou'),
  userName?: string(name='UserName', example='user1'),
}

model DeleteUserGroupsMappingShrinkRequest {
  fileSystemId?: string(name='FileSystemId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
  groupNamesShrink?: string(name='GroupNames', example='["group1","group2"]'),
  inputRegionId?: string(name='InputRegionId', example='cn-hangzhou'),
  userName?: string(name='UserName', example='user1'),
}

model DeleteUserGroupsMappingResponseBody = {
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
}

model DeleteUserGroupsMappingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteUserGroupsMappingResponseBody(name='body'),
}

async function deleteUserGroupsMappingWithOptions(tmpReq: DeleteUserGroupsMappingRequest, runtime: Util.RuntimeOptions): DeleteUserGroupsMappingResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteUserGroupsMappingShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.groupNames)) {
    request.groupNamesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.groupNames, 'GroupNames', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteUserGroupsMapping',
    version = '2018-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteUserGroupsMapping(request: DeleteUserGroupsMappingRequest): DeleteUserGroupsMappingResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteUserGroupsMappingWithOptions(request, runtime);
}

model DeleteVscMountPointRequest {
  fileSystemId?: string(name='FileSystemId', example='037c****1d'),
  inputRegionId?: string(name='InputRegionId', example='cn-hangzhou'),
  mountPointId?: string(name='MountPointId', example='037cb49e1d-c***5'),
}

model DeleteVscMountPointResponseBody = {
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
}

model DeleteVscMountPointResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteVscMountPointResponseBody(name='body'),
}

async function deleteVscMountPointWithOptions(request: DeleteVscMountPointRequest, runtime: Util.RuntimeOptions): DeleteVscMountPointResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.inputRegionId)) {
    query['InputRegionId'] = request.inputRegionId;
  }
  if (!Util.isUnset(request.mountPointId)) {
    query['MountPointId'] = request.mountPointId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteVscMountPoint',
    version = '2018-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteVscMountPoint(request: DeleteVscMountPointRequest): DeleteVscMountPointResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVscMountPointWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  inputRegionId?: string(name='InputRegionId', example='cn-hangzhou'),
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
      {
        localName?: string(name='LocalName'),
        regionEndpoint?: string(name='RegionEndpoint', example='dfs.cn-hangzhou.aliyuncs.com'),
        regionId?: string(name='RegionId', example='cn-hangzhou'),
      }
    ](name='Region'),
  }(name='Regions'),
  requestId?: string(name='RequestId', example='2B51751B-F837-49AA-8EF3-B2B10703****'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.inputRegionId)) {
    query['InputRegionId'] = request.inputRegionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2018-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeVscMountPointsRequest {
  fileSystemId?: string(name='FileSystemId', example='037****e1d'),
  inputRegionId?: string(name='InputRegionId', example='cn-hangzhou'),
  instanceId?: string(name='InstanceId', example='["ecs-instance1", "ecs-instance2"]'),
  mountPointId?: string(name='MountPointId', example='037cb49e1d-c***5'),
  status?: string(name='Status', example='NORMAL'),
  vscId?: string(name='VscId'),
}

model DescribeVscMountPointsResponseBody = {
  mountPoints?: [ 
    {
      description?: string(name='Description'),
      instanceTotalCount?: int32(name='InstanceTotalCount', example='1'),
      instances?: [ 
        {
          instanceId?: string(name='InstanceId', example='["ecs-instance1", "ecs-instance2"]'),
          status?: string(name='Status', example='AVAILABLE'),
          vscs?: [ 
            {
              vscId?: string(name='VscId'),
              vscStatus?: string(name='VscStatus'),
              vscType?: string(name='VscType'),
            }
          ](name='Vscs'),
        }
      ](name='Instances'),
      mountPointAlias?: string(name='MountPointAlias', example='hdfs1'),
      mountPointId?: string(name='MountPointId', example='037cb49e1d-c***5'),
    }
  ](name='MountPoints'),
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeVscMountPointsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVscMountPointsResponseBody(name='body'),
}

async function describeVscMountPointsWithOptions(request: DescribeVscMountPointsRequest, runtime: Util.RuntimeOptions): DescribeVscMountPointsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.inputRegionId)) {
    query['InputRegionId'] = request.inputRegionId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.mountPointId)) {
    query['MountPointId'] = request.mountPointId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.vscId)) {
    query['VscId'] = request.vscId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVscMountPoints',
    version = '2018-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVscMountPoints(request: DescribeVscMountPointsRequest): DescribeVscMountPointsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVscMountPointsWithOptions(request, runtime);
}

model DetachVscMountPointRequest {
  description?: string(name='Description'),
  fileSystemId?: string(name='FileSystemId', example='037****e1d'),
  inputRegionId?: string(name='InputRegionId', example='cn-hangzhou'),
  instanceIds?: map[string]any(name='InstanceIds', example='["ecs-instance1", "ecs-instance2"]'),
  mountPointId?: string(name='MountPointId', example='037cb49e1d-c***5'),
  vscIds?: [ string ](name='VscIds'),
}

model DetachVscMountPointShrinkRequest {
  description?: string(name='Description'),
  fileSystemId?: string(name='FileSystemId', example='037****e1d'),
  inputRegionId?: string(name='InputRegionId', example='cn-hangzhou'),
  instanceIdsShrink?: string(name='InstanceIds', example='["ecs-instance1", "ecs-instance2"]'),
  mountPointId?: string(name='MountPointId', example='037cb49e1d-c***5'),
  vscIdsShrink?: string(name='VscIds'),
}

model DetachVscMountPointResponseBody = {
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
}

model DetachVscMountPointResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DetachVscMountPointResponseBody(name='body'),
}

async function detachVscMountPointWithOptions(tmpReq: DetachVscMountPointRequest, runtime: Util.RuntimeOptions): DetachVscMountPointResponse {
  Util.validateModel(tmpReq);
  var request = new DetachVscMountPointShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.instanceIds)) {
    request.instanceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instanceIds, 'InstanceIds', 'json');
  }
  if (!Util.isUnset(tmpReq.vscIds)) {
    request.vscIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.vscIds, 'VscIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.inputRegionId)) {
    query['InputRegionId'] = request.inputRegionId;
  }
  if (!Util.isUnset(request.instanceIdsShrink)) {
    query['InstanceIds'] = request.instanceIdsShrink;
  }
  if (!Util.isUnset(request.mountPointId)) {
    query['MountPointId'] = request.mountPointId;
  }
  if (!Util.isUnset(request.vscIdsShrink)) {
    query['VscIds'] = request.vscIdsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetachVscMountPoint',
    version = '2018-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function detachVscMountPoint(request: DetachVscMountPointRequest): DetachVscMountPointResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachVscMountPointWithOptions(request, runtime);
}

model GetAccessGroupRequest {
  accessGroupId?: string(name='AccessGroupId', example='acg-e3755fb0-358d-4286-9942-8d461048****'),
  inputRegionId?: string(name='InputRegionId', example='cn-hangzhou'),
}

model GetAccessGroupResponseBody = {
  accessGroup?: {
    accessGroupId?: string(name='AccessGroupId', example='acg-e3755fb0-358d-4286-9942-8d461048****'),
    accessGroupName?: string(name='AccessGroupName', example='test-cluster-policy'),
    createTime?: string(name='CreateTime'),
    description?: string(name='Description'),
    isDefault?: boolean(name='IsDefault', example='false'),
    mountPointCount?: int32(name='MountPointCount', example='1'),
    networkType?: string(name='NetworkType', example='VPC'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    ruleCount?: int32(name='RuleCount', example='3'),
  }(name='AccessGroup'),
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
}

model GetAccessGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAccessGroupResponseBody(name='body'),
}

async function getAccessGroupWithOptions(request: GetAccessGroupRequest, runtime: Util.RuntimeOptions): GetAccessGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessGroupId)) {
    query['AccessGroupId'] = request.accessGroupId;
  }
  if (!Util.isUnset(request.inputRegionId)) {
    query['InputRegionId'] = request.inputRegionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAccessGroup',
    version = '2018-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAccessGroup(request: GetAccessGroupRequest): GetAccessGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAccessGroupWithOptions(request, runtime);
}

model GetAccessRuleRequest {
  accessGroupId?: string(name='AccessGroupId', example='acg-e3755fb0-358d-4286-9942-8d461048****'),
  accessRuleId?: string(name='AccessRuleId', example='acr-c38028f0-f313-4385-9456-3501b1f5****'),
  inputRegionId?: string(name='InputRegionId', example='cn-hangzhou'),
}

model GetAccessRuleResponseBody = {
  accessRule?: {
    accessGroupId?: string(name='AccessGroupId', example='acg-e3755fb0-358d-4286-9942-8d461048****'),
    accessRuleId?: string(name='AccessRuleId', example='acr-c38028f0-f313-4385-9456-3501b1f5****'),
    createTime?: string(name='CreateTime'),
    description?: string(name='Description'),
    networkSegment?: string(name='NetworkSegment', example='192.0.2.0/24'),
    priority?: int32(name='Priority', example='2'),
    RWAccessType?: string(name='RWAccessType', example='RDWR'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
  }(name='AccessRule'),
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
}

model GetAccessRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAccessRuleResponseBody(name='body'),
}

async function getAccessRuleWithOptions(request: GetAccessRuleRequest, runtime: Util.RuntimeOptions): GetAccessRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessGroupId)) {
    query['AccessGroupId'] = request.accessGroupId;
  }
  if (!Util.isUnset(request.accessRuleId)) {
    query['AccessRuleId'] = request.accessRuleId;
  }
  if (!Util.isUnset(request.inputRegionId)) {
    query['InputRegionId'] = request.inputRegionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAccessRule',
    version = '2018-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAccessRule(request: GetAccessRuleRequest): GetAccessRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAccessRuleWithOptions(request, runtime);
}

model GetFileSystemRequest {
  fileSystemId?: string(name='FileSystemId'),
  inputRegionId?: string(name='InputRegionId', example='cn-hangzhou'),
}

model GetFileSystemResponseBody = {
  fileSystem?: {
    createTime?: string(name='CreateTime'),
    description?: string(name='Description'),
    fileSystemId?: string(name='FileSystemId'),
    fileSystemName?: string(name='FileSystemName', example='MyFirstHDFS'),
    meteringSpaceSize?: float(name='MeteringSpaceSize', example='107374182400'),
    mountPointCount?: long(name='MountPointCount', example='2'),
    numberOfDirectories?: long(name='NumberOfDirectories', example='100'),
    numberOfFiles?: long(name='NumberOfFiles', example='1000'),
    protocolType?: string(name='ProtocolType', example='HDFS'),
    provisionedThroughputInMiBps?: long(name='ProvisionedThroughputInMiBps', example='1024'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    spaceCapacity?: long(name='SpaceCapacity', example='1024'),
    storagePackageId?: string(name='StoragePackageId', example='1'),
    storageType?: string(name='StorageType', example='STANDARD'),
    throughputMode?: string(name='ThroughputMode', example='Standard'),
    usedSpaceSize?: float(name='UsedSpaceSize', example='100'),
    version?: string(name='Version', example='1.0.0'),
    zoneId?: string(name='ZoneId', example='cn-hangzhou-b'),
  }(name='FileSystem'),
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
}

model GetFileSystemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFileSystemResponseBody(name='body'),
}

async function getFileSystemWithOptions(request: GetFileSystemRequest, runtime: Util.RuntimeOptions): GetFileSystemResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.inputRegionId)) {
    query['InputRegionId'] = request.inputRegionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetFileSystem',
    version = '2018-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getFileSystem(request: GetFileSystemRequest): GetFileSystemResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFileSystemWithOptions(request, runtime);
}

model GetMountPointRequest {
  fileSystemId?: string(name='FileSystemId'),
  inputRegionId?: string(name='InputRegionId', example='cn-hangzhou'),
  mountPointId?: string(name='MountPointId'),
}

model GetMountPointResponseBody = {
  mountPoint?: {
    accessGroupId?: string(name='AccessGroupId', example='acg-e3755fb0-358d-4286-9942-8d461048****'),
    createTime?: string(name='CreateTime'),
    description?: string(name='Description'),
    fileSystemId?: string(name='FileSystemId'),
    mountPointDomain?: string(name='MountPointDomain'),
    mountPointId?: string(name='MountPointId'),
    networkType?: string(name='NetworkType', example='VPC'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    status?: string(name='Status', example='Inactive'),
    vSwitchId?: string(name='VSwitchId', example='vsw-iq8fymi327krd14mt****'),
    vpcId?: string(name='VpcId', example='vpc-iq8hhsk3ymzv9m4wn****'),
  }(name='MountPoint'),
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
}

model GetMountPointResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMountPointResponseBody(name='body'),
}

async function getMountPointWithOptions(request: GetMountPointRequest, runtime: Util.RuntimeOptions): GetMountPointResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.inputRegionId)) {
    query['InputRegionId'] = request.inputRegionId;
  }
  if (!Util.isUnset(request.mountPointId)) {
    query['MountPointId'] = request.mountPointId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMountPoint',
    version = '2018-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMountPoint(request: GetMountPointRequest): GetMountPointResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMountPointWithOptions(request, runtime);
}

model GetRegionRequest {
  inputRegionId?: string(name='InputRegionId', example='cn-hangzhou'),
}

model GetRegionResponseBody = {
  availableZones?: [ 
    {
      options?: [ 
        {
          protocolType?: string(name='ProtocolType', example='HDFS'),
          storageType?: string(name='StorageType', example='STANDARD'),
        }
      ](name='Options'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-b'),
    }
  ](name='AvailableZones'),
  requestId?: string(name='RequestId', example='AEC07154-5A4C-4B34-BB74-0893C6E9****'),
}

model GetRegionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetRegionResponseBody(name='body'),
}

async function getRegionWithOptions(request: GetRegionRequest, runtime: Util.RuntimeOptions): GetRegionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.inputRegionId)) {
    query['InputRegionId'] = request.inputRegionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetRegion',
    version = '2018-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getRegion(request: GetRegionRequest): GetRegionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRegionWithOptions(request, runtime);
}

model ListAccessGroupsRequest {
  inputRegionId?: string(name='InputRegionId', example='cn-hangzhou'),
  limit?: int32(name='Limit', example='100'),
  orderBy?: string(name='OrderBy', example='CreateTime'),
  orderType?: string(name='OrderType', example='ASC'),
  startOffset?: int32(name='StartOffset', example='10'),
}

model ListAccessGroupsResponseBody = {
  accessGroups?: [ 
    {
      accessGroupId?: string(name='AccessGroupId', example='acg-e3755fb0-358d-4286-9942-8d461048****'),
      accessGroupName?: string(name='AccessGroupName', example='test-cluster-policy'),
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      isDefault?: boolean(name='IsDefault', example='false'),
      mountPointCount?: int32(name='MountPointCount', example='1'),
      networkType?: string(name='NetworkType', example='VPC'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      ruleCount?: int32(name='RuleCount', example='3'),
    }
  ](name='AccessGroups'),
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListAccessGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAccessGroupsResponseBody(name='body'),
}

async function listAccessGroupsWithOptions(request: ListAccessGroupsRequest, runtime: Util.RuntimeOptions): ListAccessGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.inputRegionId)) {
    query['InputRegionId'] = request.inputRegionId;
  }
  if (!Util.isUnset(request.limit)) {
    query['Limit'] = request.limit;
  }
  if (!Util.isUnset(request.orderBy)) {
    query['OrderBy'] = request.orderBy;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.startOffset)) {
    query['StartOffset'] = request.startOffset;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAccessGroups',
    version = '2018-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAccessGroups(request: ListAccessGroupsRequest): ListAccessGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAccessGroupsWithOptions(request, runtime);
}

model ListAccessRulesRequest {
  accessGroupId?: string(name='AccessGroupId', example='acg-e3755fb0-358d-4286-9942-8d461048****'),
  inputRegionId?: string(name='InputRegionId', example='cn-hangzhou'),
  limit?: int32(name='Limit', example='10'),
  orderBy?: string(name='OrderBy', example='Priority'),
  orderType?: string(name='OrderType', example='ASC'),
  startOffset?: int32(name='StartOffset', example='10'),
}

model ListAccessRulesResponseBody = {
  accessRules?: [ 
    {
      accessGroupId?: string(name='AccessGroupId', example='acg-e3755fb0-358d-4286-9942-8d461048****'),
      accessRuleId?: string(name='AccessRuleId', example='acr-c38028f0-f313-4385-9456-3501b1f5****'),
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      networkSegment?: string(name='NetworkSegment', example='192.0.2.0/24'),
      priority?: int32(name='Priority', example='2'),
      RWAccessType?: string(name='RWAccessType', example='RDWR'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
    }
  ](name='AccessRules'),
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListAccessRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAccessRulesResponseBody(name='body'),
}

async function listAccessRulesWithOptions(request: ListAccessRulesRequest, runtime: Util.RuntimeOptions): ListAccessRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessGroupId)) {
    query['AccessGroupId'] = request.accessGroupId;
  }
  if (!Util.isUnset(request.inputRegionId)) {
    query['InputRegionId'] = request.inputRegionId;
  }
  if (!Util.isUnset(request.limit)) {
    query['Limit'] = request.limit;
  }
  if (!Util.isUnset(request.orderBy)) {
    query['OrderBy'] = request.orderBy;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.startOffset)) {
    query['StartOffset'] = request.startOffset;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAccessRules',
    version = '2018-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAccessRules(request: ListAccessRulesRequest): ListAccessRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAccessRulesWithOptions(request, runtime);
}

model ListFileSystemsRequest {
  inputRegionId?: string(name='InputRegionId', example='cn-hangzhou'),
  limit?: int32(name='Limit', example='10'),
  orderBy?: string(name='OrderBy', example='CreateTime'),
  orderType?: string(name='OrderType', example='ASC'),
  startOffset?: int32(name='StartOffset', example='10'),
}

model ListFileSystemsResponseBody = {
  fileSystems?: [ 
    {
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      fileSystemId?: string(name='FileSystemId'),
      fileSystemName?: string(name='FileSystemName', example='MyFirstHDFS'),
      meteringSpaceSize?: float(name='MeteringSpaceSize', example='107374182400'),
      mountPointCount?: long(name='MountPointCount', example='2'),
      numberOfDirectories?: long(name='NumberOfDirectories', example='100'),
      numberOfFiles?: long(name='NumberOfFiles', example='1000'),
      protocolType?: string(name='ProtocolType', example='HDFS'),
      provisionedThroughputInMiBps?: long(name='ProvisionedThroughputInMiBps', example='1024'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      spaceCapacity?: long(name='SpaceCapacity', example='1024'),
      storagePackageId?: string(name='StoragePackageId', example='1'),
      storageType?: string(name='StorageType', example='STANDARD'),
      throughputMode?: string(name='ThroughputMode', example='Standard'),
      usedSpaceSize?: float(name='UsedSpaceSize', example='100'),
      version?: string(name='Version', example='1.0.0'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-b'),
    }
  ](name='FileSystems'),
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListFileSystemsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFileSystemsResponseBody(name='body'),
}

async function listFileSystemsWithOptions(request: ListFileSystemsRequest, runtime: Util.RuntimeOptions): ListFileSystemsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.inputRegionId)) {
    query['InputRegionId'] = request.inputRegionId;
  }
  if (!Util.isUnset(request.limit)) {
    query['Limit'] = request.limit;
  }
  if (!Util.isUnset(request.orderBy)) {
    query['OrderBy'] = request.orderBy;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.startOffset)) {
    query['StartOffset'] = request.startOffset;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListFileSystems',
    version = '2018-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listFileSystems(request: ListFileSystemsRequest): ListFileSystemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFileSystemsWithOptions(request, runtime);
}

model ListMountPointsRequest {
  fileSystemId?: string(name='FileSystemId'),
  inputRegionId?: string(name='InputRegionId', example='cn-hangzhou'),
  limit?: int32(name='Limit', example='10'),
  orderBy?: string(name='OrderBy', example='CreateTime'),
  orderType?: string(name='OrderType', example='ASC'),
  startOffset?: int32(name='StartOffset', example='10'),
}

model ListMountPointsResponseBody = {
  mountPoints?: [ 
    {
      accessGroupId?: string(name='AccessGroupId', example='acg-e3755fb0-358d-4286-9942-8d461048****'),
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      fileSystemId?: string(name='FileSystemId'),
      mountPointDomain?: string(name='MountPointDomain'),
      mountPointId?: string(name='MountPointId'),
      networkType?: string(name='NetworkType', example='VPC'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      status?: string(name='Status', example='Inactive'),
      vSwitchId?: string(name='VSwitchId', example='vsw-iq8fymi327krd14mt****'),
      vpcId?: string(name='VpcId', example='vpc-iq8hhsk3ymzv9m4wn****'),
    }
  ](name='MountPoints'),
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListMountPointsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListMountPointsResponseBody(name='body'),
}

async function listMountPointsWithOptions(request: ListMountPointsRequest, runtime: Util.RuntimeOptions): ListMountPointsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.inputRegionId)) {
    query['InputRegionId'] = request.inputRegionId;
  }
  if (!Util.isUnset(request.limit)) {
    query['Limit'] = request.limit;
  }
  if (!Util.isUnset(request.orderBy)) {
    query['OrderBy'] = request.orderBy;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.startOffset)) {
    query['StartOffset'] = request.startOffset;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListMountPoints',
    version = '2018-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listMountPoints(request: ListMountPointsRequest): ListMountPointsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMountPointsWithOptions(request, runtime);
}

model ListUserGroupsMappingsRequest {
  filesystemId?: string(name='FilesystemId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
  inputRegionId?: string(name='InputRegionId', example='cn-hangzhou'),
  limit?: int32(name='Limit', example='10'),
  nextToken?: string(name='NextToken', example='user1'),
}

model ListUserGroupsMappingsResponseBody = {
  hasMore?: boolean(name='HasMore', example='true'),
  nextToken?: string(name='NextToken', example='user1'),
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
  userGroupsMappings?: [ 
    {
      groupNames?: [ string ](name='GroupNames'),
      userName?: string(name='UserName', example='user1'),
    }
  ](name='UserGroupsMappings'),
}

model ListUserGroupsMappingsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUserGroupsMappingsResponseBody(name='body'),
}

async function listUserGroupsMappingsWithOptions(request: ListUserGroupsMappingsRequest, runtime: Util.RuntimeOptions): ListUserGroupsMappingsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.filesystemId)) {
    query['FilesystemId'] = request.filesystemId;
  }
  if (!Util.isUnset(request.inputRegionId)) {
    query['InputRegionId'] = request.inputRegionId;
  }
  if (!Util.isUnset(request.limit)) {
    query['Limit'] = request.limit;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListUserGroupsMappings',
    version = '2018-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listUserGroupsMappings(request: ListUserGroupsMappingsRequest): ListUserGroupsMappingsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUserGroupsMappingsWithOptions(request, runtime);
}

model ModifyAccessGroupRequest {
  accessGroupId?: string(name='AccessGroupId', example='acg-e3755fb0-358d-4286-9942-8d461048****'),
  accessGroupName?: string(name='AccessGroupName', example='my-online-cluster-policy'),
  description?: string(name='Description'),
  inputRegionId?: string(name='InputRegionId', example='cn-hangzhou'),
}

model ModifyAccessGroupResponseBody = {
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
}

model ModifyAccessGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAccessGroupResponseBody(name='body'),
}

async function modifyAccessGroupWithOptions(request: ModifyAccessGroupRequest, runtime: Util.RuntimeOptions): ModifyAccessGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessGroupId)) {
    query['AccessGroupId'] = request.accessGroupId;
  }
  if (!Util.isUnset(request.accessGroupName)) {
    query['AccessGroupName'] = request.accessGroupName;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.inputRegionId)) {
    query['InputRegionId'] = request.inputRegionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAccessGroup',
    version = '2018-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyAccessGroup(request: ModifyAccessGroupRequest): ModifyAccessGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAccessGroupWithOptions(request, runtime);
}

model ModifyAccessRuleRequest {
  accessGroupId?: string(name='AccessGroupId', example='acg-e3755fb0-358d-4286-9942-8d461048****'),
  accessRuleId?: string(name='AccessRuleId', example='acr-c38028f0-f313-4385-9456-3501b1f5****'),
  description?: string(name='Description'),
  inputRegionId?: string(name='InputRegionId', example='cn-hangzhou'),
  priority?: int32(name='Priority', example='2'),
  RWAccessType?: string(name='RWAccessType', example='RDWR'),
}

model ModifyAccessRuleResponseBody = {
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
}

model ModifyAccessRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAccessRuleResponseBody(name='body'),
}

async function modifyAccessRuleWithOptions(request: ModifyAccessRuleRequest, runtime: Util.RuntimeOptions): ModifyAccessRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessGroupId)) {
    query['AccessGroupId'] = request.accessGroupId;
  }
  if (!Util.isUnset(request.accessRuleId)) {
    query['AccessRuleId'] = request.accessRuleId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.inputRegionId)) {
    query['InputRegionId'] = request.inputRegionId;
  }
  if (!Util.isUnset(request.priority)) {
    query['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.RWAccessType)) {
    query['RWAccessType'] = request.RWAccessType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAccessRule',
    version = '2018-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyAccessRule(request: ModifyAccessRuleRequest): ModifyAccessRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAccessRuleWithOptions(request, runtime);
}

model ModifyFileSystemRequest {
  description?: string(name='Description'),
  fileSystemId?: string(name='FileSystemId'),
  fileSystemName?: string(name='FileSystemName', example='MyFirstModDFS'),
  inputRegionId?: string(name='InputRegionId', example='cn-hangzhou'),
  provisionedThroughputInMiBps?: long(name='ProvisionedThroughputInMiBps', example='1024'),
  spaceCapacity?: long(name='SpaceCapacity', example='1024'),
  throughputMode?: string(name='ThroughputMode', example='Standard'),
}

model ModifyFileSystemResponseBody = {
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
}

model ModifyFileSystemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyFileSystemResponseBody(name='body'),
}

async function modifyFileSystemWithOptions(request: ModifyFileSystemRequest, runtime: Util.RuntimeOptions): ModifyFileSystemResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.fileSystemName)) {
    query['FileSystemName'] = request.fileSystemName;
  }
  if (!Util.isUnset(request.inputRegionId)) {
    query['InputRegionId'] = request.inputRegionId;
  }
  if (!Util.isUnset(request.provisionedThroughputInMiBps)) {
    query['ProvisionedThroughputInMiBps'] = request.provisionedThroughputInMiBps;
  }
  if (!Util.isUnset(request.spaceCapacity)) {
    query['SpaceCapacity'] = request.spaceCapacity;
  }
  if (!Util.isUnset(request.throughputMode)) {
    query['ThroughputMode'] = request.throughputMode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyFileSystem',
    version = '2018-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyFileSystem(request: ModifyFileSystemRequest): ModifyFileSystemResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyFileSystemWithOptions(request, runtime);
}

model ModifyMountPointRequest {
  accessGroupId?: string(name='AccessGroupId', example='acg-e3755fb0-358d-4286-9942-8d461048****'),
  description?: string(name='Description'),
  fileSystemId?: string(name='FileSystemId'),
  inputRegionId?: string(name='InputRegionId', example='cn-hangzhou'),
  mountPointId?: string(name='MountPointId'),
  status?: string(name='Status', example='Inactive'),
}

model ModifyMountPointResponseBody = {
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
}

model ModifyMountPointResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyMountPointResponseBody(name='body'),
}

async function modifyMountPointWithOptions(request: ModifyMountPointRequest, runtime: Util.RuntimeOptions): ModifyMountPointResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessGroupId)) {
    query['AccessGroupId'] = request.accessGroupId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.inputRegionId)) {
    query['InputRegionId'] = request.inputRegionId;
  }
  if (!Util.isUnset(request.mountPointId)) {
    query['MountPointId'] = request.mountPointId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyMountPoint',
    version = '2018-06-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyMountPoint(request: ModifyMountPointRequest): ModifyMountPointResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyMountPointWithOptions(request, runtime);
}

