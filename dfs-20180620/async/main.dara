/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'DFS';
  @version = '2018-06-20';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AttachVscMountPointRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou-b', position='Host'),
  description?: string(name='Description', position='Query'),
  fileSystemId: string(name='FileSystemId', description='This parameter is required.', example='037****e1d', position='Query'),
  inputRegionId: string(name='InputRegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  instanceIds?: [ string ](name='InstanceIds', example='["ecs-instance1", "ecs-instance2"]', shrink='json', position='Query'),
  mountPointId: string(name='MountPointId', description='This parameter is required.', example='037cb49e1d-c***5', position='Query'),
  useAssumeRoleChkServerPerm?: boolean(name='UseAssumeRoleChkServerPerm', position='Query'),
  vscIds?: [ string ](name='VscIds', shrink='json', position='Query'),
  vscName?: string(name='VscName', position='Query'),
  vscType?: string(name='VscType', position='Query'),
}

model AttachVscMountPointResponseBody = {
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
}

model AttachVscMountPointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AttachVscMountPointResponseBody(name='body'),
}

/**
  * @description ****
  * @param request  the request parameters of AttachVscMountPoint  AttachVscMountPointRequest
  * @return AttachVscMountPointResponse
 */
async function attachVscMountPoint(request: AttachVscMountPointRequest): AttachVscMountPointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachVscMountPoint', 'POST', '/', 'json', false, 'json', request);
}

model AttachVscToMountPointsRequest {
  regionId?: string(name='RegionId', position='Host'),
  attachInfos?: [ 
    {
      instanceId?: string(name='InstanceId', example='i-2zehyz70ednszl6rrfj6'),
      mountPointId?: string(name='MountPointId', example='f-cfea9ae2ref87.cn-zhangjiakou.dfs.aliyuncs.com'),
      vscId?: string(name='VscId', example='vsc-bp19yqmujug2r762cnabal'),
      vscName?: string(name='VscName', example='xc'),
      vscType?: string(name='VscType', example='Primary'),
    }
  ](name='AttachInfos', shrink='json', position='Query'),
  inputRegionId: string(name='InputRegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  useAssumeRoleChkServerPerm?: boolean(name='UseAssumeRoleChkServerPerm', example='false', position='Query'),
}

model AttachVscToMountPointsResponseBody = {
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
}

model AttachVscToMountPointsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AttachVscToMountPointsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AttachVscToMountPoints  AttachVscToMountPointsRequest
  * @return AttachVscToMountPointsResponse
 */
async function attachVscToMountPoints(request: AttachVscToMountPointsRequest): AttachVscToMountPointsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachVscToMountPoints', 'POST', '/', 'json', false, 'json', request);
}

model BindVscMountPointAliasRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  aliasPrefix: string(name='AliasPrefix', description='This parameter is required.', example='sdfe', position='Query'),
  fileSystemId: string(name='FileSystemId', description='This parameter is required.', example='037****e1d', position='Query'),
  inputRegionId: string(name='InputRegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  mountPointId: string(name='MountPointId', description='This parameter is required.', example='037cb49e1d-c***5', position='Query'),
}

model BindVscMountPointAliasResponseBody = {
  mountPointAlias?: string(name='MountPointAlias', example='sdfe'),
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
}

model BindVscMountPointAliasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BindVscMountPointAliasResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BindVscMountPointAlias  BindVscMountPointAliasRequest
  * @return BindVscMountPointAliasResponse
 */
async function bindVscMountPointAlias(request: BindVscMountPointAliasRequest): BindVscMountPointAliasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindVscMountPointAlias', 'POST', '/', 'json', false, 'json', request);
}

model CreateAccessGroupRequest {
  regionId?: string(name='RegionId', position='Host'),
  accessGroupName: string(name='AccessGroupName', description='This parameter is required.', example='my-online-cluster-policy', position='Query'),
  description?: string(name='Description', position='Query'),
  inputRegionId: string(name='InputRegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  networkType: string(name='NetworkType', description='This parameter is required.', example='VPC', position='Query'),
}

model CreateAccessGroupResponseBody = {
  accessGroupId?: string(name='AccessGroupId', example='acg-e3755fb0-358d-4286-9942-8d461048****'),
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
}

model CreateAccessGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAccessGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateAccessGroup  CreateAccessGroupRequest
  * @return CreateAccessGroupResponse
 */
async function createAccessGroup(request: CreateAccessGroupRequest): CreateAccessGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAccessGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateAccessRuleRequest {
  regionId?: string(name='RegionId', position='Host'),
  accessGroupId: string(name='AccessGroupId', description='This parameter is required.', example='acg-e3755fb0-358d-4286-9942-8d461048****', position='Query'),
  description?: string(name='Description', position='Query'),
  inputRegionId: string(name='InputRegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  networkSegment: string(name='NetworkSegment', description='This parameter is required.', example='192.0.2.0/24', position='Query'),
  priority: int32(name='Priority', description='This parameter is required.', example='2', minimum=1, maximum=100, position='Query'),
  RWAccessType: string(name='RWAccessType', description='This parameter is required.', example='RDWR', position='Query'),
}

model CreateAccessRuleResponseBody = {
  accessRuleId?: string(name='AccessRuleId', example='acr-c38028f0-f313-4385-9456-3501b1f5****'),
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
}

model CreateAccessRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAccessRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateAccessRule  CreateAccessRuleRequest
  * @return CreateAccessRuleResponse
 */
async function createAccessRule(request: CreateAccessRuleRequest): CreateAccessRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAccessRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateFileSystemRequest {
  regionId?: string(name='RegionId', position='Host'),
  dataRedundancyType?: string(name='DataRedundancyType', example='LRS', position='Query'),
  dedicatedClusterId?: string(name='DedicatedClusterId', position='Query'),
  description?: string(name='Description', position='Query'),
  fileSystemName: string(name='FileSystemName', description='This parameter is required.', example='MyFirstHDFS', position='Query'),
  inputRegionId: string(name='InputRegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  partitionNumber?: int32(name='PartitionNumber', example='0', position='Query'),
  protocolType: string(name='ProtocolType', description='This parameter is required.', example='HDFS', position='Query'),
  provisionedThroughputInMiBps?: long(name='ProvisionedThroughputInMiBps', example='1024', minimum=1, maximum=5120, position='Query'),
  spaceCapacity: long(name='SpaceCapacity', description='This parameter is required.', example='1024', minimum=1, maximum=10485760, position='Query'),
  storageSetName?: string(name='StorageSetName', example='AligroupStorageSet', position='Query'),
  storageType: string(name='StorageType', description='This parameter is required.', example='STANDARD', position='Query'),
  throughputMode?: string(name='ThroughputMode', example='Standard', position='Query'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-b', position='Query'),
}

model CreateFileSystemResponseBody = {
  fileSystemId?: string(name='FileSystemId'),
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
}

model CreateFileSystemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFileSystemResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateFileSystem  CreateFileSystemRequest
  * @return CreateFileSystemResponse
 */
async function createFileSystem(request: CreateFileSystemRequest): CreateFileSystemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFileSystem', 'POST', '/', 'json', false, 'json', request);
}

model CreateMountPointRequest {
  regionId?: string(name='RegionId', position='Host'),
  accessGroupId: string(name='AccessGroupId', description='This parameter is required.', example='acg-e3755fb0-358d-4286-9942-8d461048****', position='Query'),
  description?: string(name='Description', position='Query'),
  fileSystemId: string(name='FileSystemId', description='This parameter is required.', position='Query'),
  inputRegionId: string(name='InputRegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  networkType: string(name='NetworkType', description='This parameter is required.', example='VPC', position='Query'),
  usePerformanceMode?: boolean(name='UsePerformanceMode', position='Query'),
  vSwitchId: string(name='VSwitchId', description='This parameter is required.', example='vsw-iq8fymi327krd14mt****', position='Query'),
  vpcId: string(name='VpcId', description='This parameter is required.', example='vpc-iq8hhsk3ymzv9m4wn****', position='Query'),
}

model CreateMountPointResponseBody = {
  mountPointId?: string(name='MountPointId'),
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
}

model CreateMountPointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMountPointResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateMountPoint  CreateMountPointRequest
  * @return CreateMountPointResponse
 */
async function createMountPoint(request: CreateMountPointRequest): CreateMountPointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMountPoint', 'POST', '/', 'json', false, 'json', request);
}

model CreateQosPolicyRequest {
  description?: string(name='Description', position='Query'),
  federationId?: string(name='FederationId', position='Query'),
  fileSystemId?: string(name='FileSystemId', position='Query'),
  flowIds?: [ int32 ](name='FlowIds', shrink='json', position='Query'),
  inputRegionId: string(name='InputRegionId', description='This parameter is required.', position='Query'),
  maxIOBandWidth?: long(name='MaxIOBandWidth', position='Query'),
  maxIOps?: long(name='MaxIOps', position='Query'),
  maxMetaQps?: long(name='MaxMetaQps', position='Query'),
  reqTags?: [ string ](name='ReqTags', shrink='json', position='Query'),
  zoneIds?: [ string ](name='ZoneIds', shrink='json', position='Query'),
}

model CreateQosPolicyResponseBody = {
  errorMessages?: string(name='ErrorMessages'),
  qosPolicyId?: string(name='QosPolicyId'),
  requestId?: string(name='RequestId'),
}

model CreateQosPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateQosPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateQosPolicy  CreateQosPolicyRequest
  * @return CreateQosPolicyResponse
 */
async function createQosPolicy(request: CreateQosPolicyRequest): CreateQosPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateQosPolicy', 'POST', '/', 'json', false, 'json', request);
}

model CreateUserGroupsMappingRequest {
  regionId?: string(name='RegionId', position='Host'),
  fileSystemId: string(name='FileSystemId', description='This parameter is required.', example='55C5FFD6-BF99-41BD-9C66-FFF39189****', position='Query'),
  groupNames?: [ string ](name='GroupNames', example='["group1","group2"]', shrink='json', position='Query'),
  inputRegionId: string(name='InputRegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  userName: string(name='UserName', description='This parameter is required.', example='user1', position='Query'),
}

model CreateUserGroupsMappingResponseBody = {
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
}

model CreateUserGroupsMappingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateUserGroupsMappingResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateUserGroupsMapping  CreateUserGroupsMappingRequest
  * @return CreateUserGroupsMappingResponse
 */
async function createUserGroupsMapping(request: CreateUserGroupsMappingRequest): CreateUserGroupsMappingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateUserGroupsMapping', 'GET', '/', 'json', false, 'json', request);
}

model CreateVscMountPointRequest {
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='Description', position='Query'),
  fileSystemId: string(name='FileSystemId', description='This parameter is required.', example='e389e5c7-bcb4-4558-846a-e5afc444****', position='Query'),
  inputRegionId: string(name='InputRegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  instanceIds?: [ string ](name='InstanceIds', example='[
      "i-bp1g6zv0ce8oghu7****",
      "i-bp1g6zv0ce8oghu1****"
]', shrink='json', position='Query'),
}

model CreateVscMountPointResponseBody = {
  mountPointId?: string(name='MountPointId', example='e389e5c7-bcb4-4558-846a-e5afc444****'),
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
}

model CreateVscMountPointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateVscMountPointResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateVscMountPoint  CreateVscMountPointRequest
  * @return CreateVscMountPointResponse
 */
async function createVscMountPoint(request: CreateVscMountPointRequest): CreateVscMountPointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVscMountPoint', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAccessGroupRequest {
  regionId?: string(name='RegionId', position='Host'),
  accessGroupId: string(name='AccessGroupId', description='This parameter is required.', example='acg-e3755fb0-358d-4286-9942-8d461048****', position='Query'),
  inputRegionId: string(name='InputRegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DeleteAccessGroupResponseBody = {
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
}

model DeleteAccessGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAccessGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteAccessGroup  DeleteAccessGroupRequest
  * @return DeleteAccessGroupResponse
 */
async function deleteAccessGroup(request: DeleteAccessGroupRequest): DeleteAccessGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAccessGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAccessRuleRequest {
  regionId?: string(name='RegionId', position='Host'),
  accessGroupId: string(name='AccessGroupId', description='This parameter is required.', example='acg-e3755fb0-358d-4286-9942-8d461048****', position='Query'),
  accessRuleId: string(name='AccessRuleId', description='This parameter is required.', example='acr-c38028f0-f313-4385-9456-3501b1f5****', position='Query'),
  inputRegionId: string(name='InputRegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DeleteAccessRuleResponseBody = {
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
}

model DeleteAccessRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAccessRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteAccessRule  DeleteAccessRuleRequest
  * @return DeleteAccessRuleResponse
 */
async function deleteAccessRule(request: DeleteAccessRuleRequest): DeleteAccessRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAccessRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteFileSystemRequest {
  regionId?: string(name='RegionId', position='Host'),
  fileSystemId: string(name='FileSystemId', description='This parameter is required.', position='Query'),
  inputRegionId: string(name='InputRegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DeleteFileSystemResponseBody = {
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
}

model DeleteFileSystemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFileSystemResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteFileSystem  DeleteFileSystemRequest
  * @return DeleteFileSystemResponse
 */
async function deleteFileSystem(request: DeleteFileSystemRequest): DeleteFileSystemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFileSystem', 'POST', '/', 'json', false, 'json', request);
}

model DeleteMountPointRequest {
  regionId?: string(name='RegionId', position='Host'),
  fileSystemId: string(name='FileSystemId', description='This parameter is required.', position='Query'),
  inputRegionId: string(name='InputRegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  mountPointId: string(name='MountPointId', description='This parameter is required.', position='Query'),
}

model DeleteMountPointResponseBody = {
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
}

model DeleteMountPointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMountPointResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteMountPoint  DeleteMountPointRequest
  * @return DeleteMountPointResponse
 */
async function deleteMountPoint(request: DeleteMountPointRequest): DeleteMountPointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteMountPoint', 'POST', '/', 'json', false, 'json', request);
}

model DeleteQosPolicyRequest {
  federationId?: string(name='FederationId', position='Query'),
  fileSystemId?: string(name='FileSystemId', position='Query'),
  inputRegionId: string(name='InputRegionId', description='This parameter is required.', position='Query'),
  qosPolicyId: string(name='QosPolicyId', description='This parameter is required.', position='Query'),
}

model DeleteQosPolicyResponseBody = {
  errorMessages?: string(name='ErrorMessages'),
  requestId?: string(name='RequestId'),
}

model DeleteQosPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteQosPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteQosPolicy  DeleteQosPolicyRequest
  * @return DeleteQosPolicyResponse
 */
async function deleteQosPolicy(request: DeleteQosPolicyRequest): DeleteQosPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteQosPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DeleteUserGroupsMappingRequest {
  regionId?: string(name='RegionId', position='Host'),
  fileSystemId: string(name='FileSystemId', description='This parameter is required.', example='55C5FFD6-BF99-41BD-9C66-FFF39189****', position='Query'),
  groupNames?: [ string ](name='GroupNames', example='["group1","group2"]', shrink='json', position='Query'),
  inputRegionId: string(name='InputRegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  userName: string(name='UserName', description='This parameter is required.', example='user1', position='Query'),
}

model DeleteUserGroupsMappingResponseBody = {
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
}

model DeleteUserGroupsMappingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteUserGroupsMappingResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteUserGroupsMapping  DeleteUserGroupsMappingRequest
  * @return DeleteUserGroupsMappingResponse
 */
async function deleteUserGroupsMapping(request: DeleteUserGroupsMappingRequest): DeleteUserGroupsMappingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUserGroupsMapping', 'GET', '/', 'json', false, 'json', request);
}

model DeleteVscMountPointRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  fileSystemId: string(name='FileSystemId', description='This parameter is required.', example='037c****1d', position='Query'),
  inputRegionId: string(name='InputRegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  mountPointId: string(name='MountPointId', description='This parameter is required.', example='037cb49e1d-c***5', position='Query'),
}

model DeleteVscMountPointResponseBody = {
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
}

model DeleteVscMountPointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteVscMountPointResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteVscMountPoint  DeleteVscMountPointRequest
  * @return DeleteVscMountPointResponse
 */
async function deleteVscMountPoint(request: DeleteVscMountPointRequest): DeleteVscMountPointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVscMountPoint', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMountPointsVscAttachInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  inputRegionId: string(name='InputRegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  maxResults?: int32(name='MaxResults', example='50', position='Query'),
  nextToken?: string(name='NextToken', example='MYR6sz6qkmauspAy8oxjHP-tOLtD4KSv3DzI7G6iywTx1ZCExO50GtSuiTB9z0JppvYQ2iUa8s4HbcFanMQfDIlds4da87_Ax4UJMva****', position='Query'),
  queryInfos?: [ 
    {
      instanceId?: string(name='InstanceId', example='i-2zehyz70ednszl6rrfj6'),
      mountPointId?: string(name='MountPointId', example='f-9dd3c6bajmy110.cn-zhangjiakou.dfs.aliyuncs.com'),
      vscId?: string(name='VscId', example='vsc-bp19yqmujug2r18z0h9qal'),
    }
  ](name='QueryInfos', shrink='json', position='Query'),
  useAssumeRoleChkServerPerm?: boolean(name='UseAssumeRoleChkServerPerm', example='false', position='Query'),
}

model DescribeMountPointsVscAttachInfoResponseBody = {
  attachInfos?: [ 
    {
      instanceId?: string(name='InstanceId', example='vsc-agent-f5a9bb4b041541f595a0c239c9e0f971-cn-shanghai'),
      mountPointId?: string(name='MountPointId', example='f-9dd3c6bajmy110.cn-zhangjiakou.dfs.aliyuncs.com'),
      vscId?: string(name='VscId', example='vsc-bp18fhqie89loyqixyieal'),
      vscName?: string(name='VscName', example='cxc'),
      vscStatus?: string(name='VscStatus'),
      vscType?: string(name='VscType', example='Primary'),
    }
  ](name='AttachInfos'),
  maxResults?: int32(name='MaxResults', example='50'),
  nextToken?: string(name='NextToken', example='asd0daj****'),
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
  totalCount?: string(name='TotalCount', example='1'),
}

model DescribeMountPointsVscAttachInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMountPointsVscAttachInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeMountPointsVscAttachInfo  DescribeMountPointsVscAttachInfoRequest
  * @return DescribeMountPointsVscAttachInfoResponse
 */
async function describeMountPointsVscAttachInfo(request: DescribeMountPointsVscAttachInfoRequest): DescribeMountPointsVscAttachInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMountPointsVscAttachInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh', position='Query'),
  inputRegionId?: string(name='InputRegionId', example='cn-hangzhou', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
      {
        localName?: string(name='LocalName'),
        regionEndpoint?: string(name='RegionEndpoint', example='dfs.cn-hangzhou.aliyuncs.com'),
        regionId?: string(name='RegionId', example='cn-hangzhou'),
      }
    ](name='Region'),
  }(name='Regions'),
  requestId?: string(name='RequestId', example='2B51751B-F837-49AA-8EF3-B2B10703****'),
}

model DescribeRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRegions  DescribeRegionsRequest
  * @return DescribeRegionsResponse
 */
async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVscMountPointsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  fileSystemId: string(name='FileSystemId', description='This parameter is required.', example='037****e1d', position='Query'),
  inputRegionId: string(name='InputRegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  instanceId?: string(name='InstanceId', example='["ecs-instance1", "ecs-instance2"]', position='Query'),
  mountPointId?: string(name='MountPointId', example='037cb49e1d-c***5', position='Query'),
  status?: string(name='Status', example='NORMAL', position='Query'),
  vscId?: string(name='VscId', position='Query'),
}

model DescribeVscMountPointsResponseBody = {
  mountPoints?: [ 
    {
      description?: string(name='Description'),
      instanceTotalCount?: int32(name='InstanceTotalCount', example='1'),
      instances?: [ 
        {
          instanceId?: string(name='InstanceId', example='["ecs-instance1", "ecs-instance2"]'),
          status?: string(name='Status', example='AVAILABLE'),
          vscs?: [ 
            {
              vscId?: string(name='VscId'),
              vscName?: string(name='VscName'),
              vscStatus?: string(name='VscStatus'),
              vscType?: string(name='VscType'),
            }
          ](name='Vscs'),
        }
      ](name='Instances'),
      mountPointAlias?: string(name='MountPointAlias', example='hdfs1'),
      mountPointId?: string(name='MountPointId', example='037cb49e1d-c***5'),
    }
  ](name='MountPoints'),
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeVscMountPointsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVscMountPointsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVscMountPoints  DescribeVscMountPointsRequest
  * @return DescribeVscMountPointsResponse
 */
async function describeVscMountPoints(request: DescribeVscMountPointsRequest): DescribeVscMountPointsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVscMountPoints', 'POST', '/', 'json', false, 'json', request);
}

model DetachVscMountPointRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  description?: string(name='Description', position='Query'),
  fileSystemId: string(name='FileSystemId', description='This parameter is required.', example='037****e1d', position='Query'),
  inputRegionId: string(name='InputRegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  instanceIds?: [ string ](name='InstanceIds', example='["ecs-instance1", "ecs-instance2"]', shrink='json', position='Query'),
  mountPointId: string(name='MountPointId', description='This parameter is required.', example='037cb49e1d-c***5', position='Query'),
  useAssumeRoleChkServerPerm?: boolean(name='UseAssumeRoleChkServerPerm', position='Query'),
  vscIds?: [ string ](name='VscIds', shrink='json', position='Query'),
}

model DetachVscMountPointResponseBody = {
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
}

model DetachVscMountPointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetachVscMountPointResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DetachVscMountPoint  DetachVscMountPointRequest
  * @return DetachVscMountPointResponse
 */
async function detachVscMountPoint(request: DetachVscMountPointRequest): DetachVscMountPointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachVscMountPoint', 'POST', '/', 'json', false, 'json', request);
}

model GetAccessGroupRequest {
  regionId?: string(name='RegionId', position='Host'),
  accessGroupId: string(name='AccessGroupId', description='This parameter is required.', example='acg-e3755fb0-358d-4286-9942-8d461048****', position='Query'),
  inputRegionId: string(name='InputRegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
}

model GetAccessGroupResponseBody = {
  accessGroup?: {
    accessGroupId?: string(name='AccessGroupId', example='acg-e3755fb0-358d-4286-9942-8d461048****'),
    accessGroupName?: string(name='AccessGroupName', example='test-cluster-policy'),
    createTime?: string(name='CreateTime'),
    description?: string(name='Description'),
    isDefault?: boolean(name='IsDefault', example='false'),
    mountPointCount?: int32(name='MountPointCount', example='1'),
    networkType?: string(name='NetworkType', example='VPC'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    ruleCount?: int32(name='RuleCount', example='3'),
  }(name='AccessGroup'),
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
}

model GetAccessGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAccessGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAccessGroup  GetAccessGroupRequest
  * @return GetAccessGroupResponse
 */
async function getAccessGroup(request: GetAccessGroupRequest): GetAccessGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAccessGroup', 'POST', '/', 'json', false, 'json', request);
}

model GetAccessRuleRequest {
  regionId?: string(name='RegionId', position='Host'),
  accessGroupId: string(name='AccessGroupId', description='This parameter is required.', example='acg-e3755fb0-358d-4286-9942-8d461048****', position='Query'),
  accessRuleId: string(name='AccessRuleId', description='This parameter is required.', example='acr-c38028f0-f313-4385-9456-3501b1f5****', position='Query'),
  inputRegionId: string(name='InputRegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
}

model GetAccessRuleResponseBody = {
  accessRule?: {
    accessGroupId?: string(name='AccessGroupId', example='acg-e3755fb0-358d-4286-9942-8d461048****'),
    accessRuleId?: string(name='AccessRuleId', example='acr-c38028f0-f313-4385-9456-3501b1f5****'),
    createTime?: string(name='CreateTime'),
    description?: string(name='Description'),
    networkSegment?: string(name='NetworkSegment', example='192.0.2.0/24'),
    priority?: int32(name='Priority', example='2'),
    RWAccessType?: string(name='RWAccessType', example='RDWR'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
  }(name='AccessRule'),
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
}

model GetAccessRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAccessRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAccessRule  GetAccessRuleRequest
  * @return GetAccessRuleResponse
 */
async function getAccessRule(request: GetAccessRuleRequest): GetAccessRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAccessRule', 'POST', '/', 'json', false, 'json', request);
}

model GetFileSystemRequest {
  regionId?: string(name='RegionId', position='Host'),
  fileSystemId: string(name='FileSystemId', description='This parameter is required.', position='Query'),
  inputRegionId: string(name='InputRegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
}

model GetFileSystemResponseBody = {
  fileSystem?: {
    createTime?: string(name='CreateTime'),
    description?: string(name='Description'),
    fileSystemId?: string(name='FileSystemId'),
    fileSystemName?: string(name='FileSystemName', example='MyFirstHDFS'),
    meteringSpaceSize?: float(name='MeteringSpaceSize', example='107374182400'),
    mountPointCount?: long(name='MountPointCount', example='2'),
    numberOfDirectories?: long(name='NumberOfDirectories', example='100'),
    numberOfFiles?: long(name='NumberOfFiles', example='1000'),
    protocolType?: string(name='ProtocolType', example='HDFS'),
    provisionedThroughputInMiBps?: long(name='ProvisionedThroughputInMiBps', example='1024'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    spaceCapacity?: long(name='SpaceCapacity', example='1024'),
    storagePackageId?: string(name='StoragePackageId', example='1'),
    storageType?: string(name='StorageType', example='STANDARD'),
    throughputMode?: string(name='ThroughputMode', example='Standard'),
    usedSpaceSize?: float(name='UsedSpaceSize', example='100'),
    version?: string(name='Version', example='1.0.0'),
    zoneId?: string(name='ZoneId', example='cn-hangzhou-b'),
  }(name='FileSystem'),
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
}

model GetFileSystemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFileSystemResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetFileSystem  GetFileSystemRequest
  * @return GetFileSystemResponse
 */
async function getFileSystem(request: GetFileSystemRequest): GetFileSystemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFileSystem', 'POST', '/', 'json', false, 'json', request);
}

model GetMountPointRequest {
  regionId?: string(name='RegionId', position='Host'),
  fileSystemId: string(name='FileSystemId', description='This parameter is required.', position='Query'),
  inputRegionId: string(name='InputRegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  mountPointId: string(name='MountPointId', description='This parameter is required.', position='Query'),
}

model GetMountPointResponseBody = {
  mountPoint?: {
    accessGroupId?: string(name='AccessGroupId', example='acg-e3755fb0-358d-4286-9942-8d461048****'),
    createTime?: string(name='CreateTime'),
    description?: string(name='Description'),
    fileSystemId?: string(name='FileSystemId'),
    mountPointAlias?: string(name='MountPointAlias'),
    mountPointDomain?: string(name='MountPointDomain'),
    mountPointId?: string(name='MountPointId'),
    networkType?: string(name='NetworkType', example='VPC'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    status?: string(name='Status', example='Inactive'),
    vSwitchId?: string(name='VSwitchId', example='vsw-iq8fymi327krd14mt****'),
    vpcId?: string(name='VpcId', example='vpc-iq8hhsk3ymzv9m4wn****'),
  }(name='MountPoint'),
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
}

model GetMountPointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMountPointResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetMountPoint  GetMountPointRequest
  * @return GetMountPointResponse
 */
async function getMountPoint(request: GetMountPointRequest): GetMountPointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMountPoint', 'POST', '/', 'json', false, 'json', request);
}

model GetRegionRequest {
  regionId?: string(name='RegionId', position='Host'),
  inputRegionId: string(name='InputRegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
}

model GetRegionResponseBody = {
  availableZones?: [ 
    {
      options?: [ 
        {
          protocolType?: string(name='ProtocolType', example='HDFS'),
          storageType?: string(name='StorageType', example='STANDARD'),
        }
      ](name='Options'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-b'),
    }
  ](name='AvailableZones'),
  requestId?: string(name='RequestId', example='AEC07154-5A4C-4B34-BB74-0893C6E9****'),
}

model GetRegionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRegionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetRegion  GetRegionRequest
  * @return GetRegionResponse
 */
async function getRegion(request: GetRegionRequest): GetRegionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRegion', 'POST', '/', 'json', false, 'json', request);
}

model ListAccessGroupsRequest {
  regionId?: string(name='RegionId', position='Host'),
  inputRegionId: string(name='InputRegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  limit?: int32(name='Limit', example='100', minimum=1, maximum=1000, position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  orderBy?: string(name='OrderBy', example='CreateTime', position='Query'),
  orderType?: string(name='OrderType', example='ASC', position='Query'),
  startOffset?: int32(name='StartOffset', example='10', minimum=1, maximum=100000, position='Query'),
}

model ListAccessGroupsResponseBody = {
  accessGroups?: [ 
    {
      accessGroupId?: string(name='AccessGroupId', example='acg-e3755fb0-358d-4286-9942-8d461048****'),
      accessGroupName?: string(name='AccessGroupName', example='test-cluster-policy'),
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      isDefault?: boolean(name='IsDefault', example='false'),
      mountPointCount?: int32(name='MountPointCount', example='1'),
      networkType?: string(name='NetworkType', example='VPC'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      ruleCount?: int32(name='RuleCount', example='3'),
    }
  ](name='AccessGroups'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListAccessGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAccessGroupsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAccessGroups  ListAccessGroupsRequest
  * @return ListAccessGroupsResponse
 */
async function listAccessGroups(request: ListAccessGroupsRequest): ListAccessGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAccessGroups', 'POST', '/', 'json', false, 'json', request);
}

model ListAccessRulesRequest {
  regionId?: string(name='RegionId', position='Host'),
  accessGroupId: string(name='AccessGroupId', description='This parameter is required.', example='acg-e3755fb0-358d-4286-9942-8d461048****', position='Query'),
  inputRegionId: string(name='InputRegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  limit?: int32(name='Limit', example='10', minimum=1, maximum=1000, position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  orderBy?: string(name='OrderBy', example='Priority', position='Query'),
  orderType?: string(name='OrderType', example='ASC', position='Query'),
  startOffset?: int32(name='StartOffset', example='10', minimum=1, maximum=100000, position='Query'),
}

model ListAccessRulesResponseBody = {
  accessRules?: [ 
    {
      accessGroupId?: string(name='AccessGroupId', example='acg-e3755fb0-358d-4286-9942-8d461048****'),
      accessRuleId?: string(name='AccessRuleId', example='acr-c38028f0-f313-4385-9456-3501b1f5****'),
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      networkSegment?: string(name='NetworkSegment', example='192.0.2.0/24'),
      priority?: int32(name='Priority', example='2'),
      RWAccessType?: string(name='RWAccessType', example='RDWR'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
    }
  ](name='AccessRules'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListAccessRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAccessRulesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAccessRules  ListAccessRulesRequest
  * @return ListAccessRulesResponse
 */
async function listAccessRules(request: ListAccessRulesRequest): ListAccessRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAccessRules', 'POST', '/', 'json', false, 'json', request);
}

model ListFederationsRequest {
  federationId?: string(name='FederationId', position='Query'),
  fileSystemId?: string(name='FileSystemId', position='Query'),
  inputRegionId: string(name='InputRegionId', description='This parameter is required.', position='Query'),
  maxResults?: int32(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
}

model ListFederationsResponseBody = {
  federations?: [ 
    {
      federationId?: string(name='FederationId'),
      fileSystemIds?: string(name='FileSystemIds'),
    }
  ](name='Federations'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model ListFederationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFederationsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListFederations  ListFederationsRequest
  * @return ListFederationsResponse
 */
async function listFederations(request: ListFederationsRequest): ListFederationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFederations', 'POST', '/', 'json', false, 'json', request);
}

model ListFileSystemsRequest {
  regionId?: string(name='RegionId', position='Host'),
  inputRegionId: string(name='InputRegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  limit?: int32(name='Limit', example='10', minimum=1, maximum=1000, position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  orderBy?: string(name='OrderBy', example='CreateTime', position='Query'),
  orderType?: string(name='OrderType', example='ASC', position='Query'),
  startOffset?: int32(name='StartOffset', example='10', minimum=1, maximum=100000, position='Query'),
}

model ListFileSystemsResponseBody = {
  fileSystems?: [ 
    {
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      fileSystemId?: string(name='FileSystemId'),
      fileSystemName?: string(name='FileSystemName', example='MyFirstHDFS'),
      meteringSpaceSize?: float(name='MeteringSpaceSize', example='107374182400'),
      mountPointCount?: long(name='MountPointCount', example='2'),
      numberOfDirectories?: long(name='NumberOfDirectories', example='100'),
      numberOfFiles?: long(name='NumberOfFiles', example='1000'),
      protocolType?: string(name='ProtocolType', example='HDFS'),
      provisionedThroughputInMiBps?: long(name='ProvisionedThroughputInMiBps', example='1024'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      spaceCapacity?: long(name='SpaceCapacity', example='1024'),
      storagePackageId?: string(name='StoragePackageId', example='1'),
      storageType?: string(name='StorageType', example='STANDARD'),
      throughputMode?: string(name='ThroughputMode', example='Standard'),
      usedSpaceSize?: float(name='UsedSpaceSize', example='100'),
      version?: string(name='Version', example='1.0.0'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-b'),
    }
  ](name='FileSystems'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListFileSystemsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFileSystemsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListFileSystems  ListFileSystemsRequest
  * @return ListFileSystemsResponse
 */
async function listFileSystems(request: ListFileSystemsRequest): ListFileSystemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFileSystems', 'POST', '/', 'json', false, 'json', request);
}

model ListMountPointsRequest {
  regionId?: string(name='RegionId', position='Host'),
  fileSystemId: string(name='FileSystemId', description='This parameter is required.', position='Query'),
  inputRegionId: string(name='InputRegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  limit?: int32(name='Limit', example='10', minimum=1, maximum=1000, position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  orderBy?: string(name='OrderBy', example='CreateTime', position='Query'),
  orderType?: string(name='OrderType', example='ASC', position='Query'),
  startOffset?: int32(name='StartOffset', example='10', minimum=1, maximum=100000, position='Query'),
}

model ListMountPointsResponseBody = {
  mountPoints?: [ 
    {
      accessGroupId?: string(name='AccessGroupId', example='acg-e3755fb0-358d-4286-9942-8d461048****'),
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      fileSystemId?: string(name='FileSystemId'),
      mountPointAlias?: string(name='MountPointAlias'),
      mountPointDomain?: string(name='MountPointDomain'),
      mountPointId?: string(name='MountPointId'),
      networkType?: string(name='NetworkType', example='VPC'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      status?: string(name='Status', example='Inactive'),
      vSwitchId?: string(name='VSwitchId', example='vsw-iq8fymi327krd14mt****'),
      vpcId?: string(name='VpcId', example='vpc-iq8hhsk3ymzv9m4wn****'),
    }
  ](name='MountPoints'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListMountPointsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMountPointsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListMountPoints  ListMountPointsRequest
  * @return ListMountPointsResponse
 */
async function listMountPoints(request: ListMountPointsRequest): ListMountPointsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListMountPoints', 'POST', '/', 'json', false, 'json', request);
}

model ListQosPoliciesRequest {
  federationId?: string(name='FederationId', position='Query'),
  fileSystemId?: string(name='FileSystemId', position='Query'),
  inputRegionId: string(name='InputRegionId', description='This parameter is required.', position='Query'),
  maxResults?: int32(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
}

model ListQosPoliciesResponseBody = {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  qosPolicies?: [ 
    {
      description?: string(name='Description'),
      federationId?: string(name='FederationId'),
      fileSystemId?: string(name='FileSystemId'),
      flowIds?: string(name='FlowIds'),
      maxIOBandWidth?: long(name='MaxIOBandWidth'),
      maxIOps?: long(name='MaxIOps'),
      maxMetaQps?: long(name='MaxMetaQps'),
      qosPolicyId?: string(name='QosPolicyId'),
      reqTags?: string(name='ReqTags'),
      zoneIds?: string(name='ZoneIds'),
    }
  ](name='QosPolicies'),
  requestId?: string(name='RequestId'),
}

model ListQosPoliciesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListQosPoliciesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListQosPolicies  ListQosPoliciesRequest
  * @return ListQosPoliciesResponse
 */
async function listQosPolicies(request: ListQosPoliciesRequest): ListQosPoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListQosPolicies', 'POST', '/', 'json', false, 'json', request);
}

model ListUserGroupsMappingsRequest {
  regionId?: string(name='RegionId', position='Host'),
  filesystemId: string(name='FilesystemId', description='This parameter is required.', example='55C5FFD6-BF99-41BD-9C66-FFF39189****', position='Query'),
  inputRegionId: string(name='InputRegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  limit?: int32(name='Limit', example='10', position='Query'),
  nextToken?: string(name='NextToken', example='user1', position='Query'),
}

model ListUserGroupsMappingsResponseBody = {
  hasMore?: boolean(name='HasMore', example='true'),
  nextToken?: string(name='NextToken', example='user1'),
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
  userGroupsMappings?: [ 
    {
      groupNames?: [ string ](name='GroupNames'),
      userName?: string(name='UserName', example='user1'),
    }
  ](name='UserGroupsMappings'),
}

model ListUserGroupsMappingsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserGroupsMappingsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUserGroupsMappings  ListUserGroupsMappingsRequest
  * @return ListUserGroupsMappingsResponse
 */
async function listUserGroupsMappings(request: ListUserGroupsMappingsRequest): ListUserGroupsMappingsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUserGroupsMappings', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAccessGroupRequest {
  regionId?: string(name='RegionId', position='Host'),
  accessGroupId: string(name='AccessGroupId', description='This parameter is required.', example='acg-e3755fb0-358d-4286-9942-8d461048****', position='Query'),
  accessGroupName?: string(name='AccessGroupName', example='my-online-cluster-policy', position='Query'),
  description?: string(name='Description', position='Query'),
  inputRegionId: string(name='InputRegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
}

model ModifyAccessGroupResponseBody = {
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
}

model ModifyAccessGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAccessGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyAccessGroup  ModifyAccessGroupRequest
  * @return ModifyAccessGroupResponse
 */
async function modifyAccessGroup(request: ModifyAccessGroupRequest): ModifyAccessGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAccessGroup', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAccessRuleRequest {
  regionId?: string(name='RegionId', position='Host'),
  accessGroupId: string(name='AccessGroupId', description='This parameter is required.', example='acg-e3755fb0-358d-4286-9942-8d461048****', position='Query'),
  accessRuleId: string(name='AccessRuleId', description='This parameter is required.', example='acr-c38028f0-f313-4385-9456-3501b1f5****', position='Query'),
  description?: string(name='Description', position='Query'),
  inputRegionId: string(name='InputRegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  priority?: int32(name='Priority', example='2', minimum=0, maximum=100, position='Query'),
  RWAccessType?: string(name='RWAccessType', example='RDWR', position='Query'),
}

model ModifyAccessRuleResponseBody = {
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
}

model ModifyAccessRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAccessRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyAccessRule  ModifyAccessRuleRequest
  * @return ModifyAccessRuleResponse
 */
async function modifyAccessRule(request: ModifyAccessRuleRequest): ModifyAccessRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAccessRule', 'POST', '/', 'json', false, 'json', request);
}

model ModifyFileSystemRequest {
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='Description', position='Query'),
  fileSystemId: string(name='FileSystemId', description='This parameter is required.', position='Query'),
  fileSystemName?: string(name='FileSystemName', example='MyFirstModDFS', position='Query'),
  inputRegionId: string(name='InputRegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  provisionedThroughputInMiBps?: long(name='ProvisionedThroughputInMiBps', example='1024', minimum=1, maximum=51200, position='Query'),
  spaceCapacity?: long(name='SpaceCapacity', example='1024', minimum=1, maximum=10485760, position='Query'),
  throughputMode?: string(name='ThroughputMode', example='Standard', position='Query'),
}

model ModifyFileSystemResponseBody = {
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
}

model ModifyFileSystemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyFileSystemResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyFileSystem  ModifyFileSystemRequest
  * @return ModifyFileSystemResponse
 */
async function modifyFileSystem(request: ModifyFileSystemRequest): ModifyFileSystemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyFileSystem', 'POST', '/', 'json', false, 'json', request);
}

model ModifyMountPointRequest {
  regionId?: string(name='RegionId', position='Host'),
  accessGroupId?: string(name='AccessGroupId', example='acg-e3755fb0-358d-4286-9942-8d461048****', position='Query'),
  description?: string(name='Description', position='Query'),
  fileSystemId: string(name='FileSystemId', description='This parameter is required.', position='Query'),
  inputRegionId: string(name='InputRegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  mountPointId: string(name='MountPointId', description='This parameter is required.', position='Query'),
  status?: string(name='Status', example='Inactive', position='Query'),
}

model ModifyMountPointResponseBody = {
  requestId?: string(name='RequestId', example='55C5FFD6-BF99-41BD-9C66-FFF39189****'),
}

model ModifyMountPointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyMountPointResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyMountPoint  ModifyMountPointRequest
  * @return ModifyMountPointResponse
 */
async function modifyMountPoint(request: ModifyMountPointRequest): ModifyMountPointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyMountPoint', 'POST', '/', 'json', false, 'json', request);
}

model ModifyQosPolicyRequest {
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='Description', position='Query'),
  federationId?: string(name='FederationId', position='Query'),
  fileSystemId?: string(name='FileSystemId', position='Query'),
  inputRegionId: string(name='InputRegionId', description='This parameter is required.', position='Query'),
  maxIOBandWidth?: long(name='MaxIOBandWidth', position='Query'),
  maxIOps?: long(name='MaxIOps', position='Query'),
  maxMetaQps?: long(name='MaxMetaQps', position='Query'),
  qosPolicyId: string(name='QosPolicyId', description='This parameter is required.', position='Query'),
}

model ModifyQosPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyQosPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyQosPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyQosPolicy  ModifyQosPolicyRequest
  * @return ModifyQosPolicyResponse
 */
async function modifyQosPolicy(request: ModifyQosPolicyRequest): ModifyQosPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyQosPolicy', 'POST', '/', 'json', false, 'json', request);
}

