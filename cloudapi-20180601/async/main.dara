/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'CloudAPI';
  @version = '2018-06-01';
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'apigateway.cn-qingdao.aliyuncs.com',
    cn-beijing = 'apigateway.cn-beijing.aliyuncs.com',
    cn-chengdu = 'apigateway.cn-chengdu.aliyuncs.com',
    cn-zhangjiakou = 'apigateway.cn-zhangjiakou.aliyuncs.com',
    cn-huhehaote = 'apigateway.cn-huhehaote.aliyuncs.com',
    cn-hangzhou = 'apigateway.cn-hangzhou.aliyuncs.com',
    cn-shanghai = 'apigateway.cn-shanghai.aliyuncs.com',
    cn-shenzhen = 'apigateway.cn-shenzhen.aliyuncs.com',
    cn-hongkong = 'apigateway.cn-hongkong.aliyuncs.com',
    ap-southeast-1 = 'apigateway.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'apigateway.ap-southeast-2.aliyuncs.com',
    ap-southeast-3 = 'apigateway.ap-southeast-3.aliyuncs.com',
    ap-southeast-5 = 'apigateway.ap-southeast-5.aliyuncs.com',
    ap-northeast-1 = 'apigateway.ap-northeast-1.aliyuncs.com',
    eu-west-1 = 'apigateway.eu-west-1.aliyuncs.com',
    us-west-1 = 'apigateway.us-west-1.aliyuncs.com',
    us-east-1 = 'apigateway.us-east-1.aliyuncs.com',
    eu-central-1 = 'apigateway.eu-central-1.aliyuncs.com',
    me-east-1 = 'apigateway.me-east-1.aliyuncs.com',
    ap-south-1 = 'apigateway.ap-south-1.aliyuncs.com',
    cn-north-2-gov-1 = 'apigateway.cn-north-2-gov-1.aliyuncs.com',
    cn-hangzhou-finance = 'apigateway.aliyuncs.com',
    cn-shenzhen-finance-1 = 'apigateway.aliyuncs.com',
    cn-shanghai-finance-1 = 'apigateway.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AbolishApiRequest {
  apiId: string(name='ApiId', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', position='Query'),
}

model AbolishApiResponseBody = {
  requestId?: string(name='RequestId'),
}

model AbolishApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AbolishApiResponseBody(name='body'),
}

async function abolishApi(request: AbolishApiRequest): AbolishApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AbolishApi', 'POST', '/', 'json', false, 'json', request);
}

model AddBlackListRequest {
  blackContent: string(name='BlackContent', position='Query'),
  blackType: string(name='BlackType', position='Query'),
  description?: string(name='Description', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model AddBlackListResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddBlackListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddBlackListResponseBody(name='body'),
}

async function addBlackList(request: AddBlackListRequest): AddBlackListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddBlackList', 'POST', '/', 'json', false, 'json', request);
}

model AddIpControlPolicyItemRequest {
  appId?: string(name='AppId', position='Query'),
  cidrIp: string(name='CidrIp', position='Query'),
  ipControlId: string(name='IpControlId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model AddIpControlPolicyItemResponseBody = {
  policyItemId?: string(name='PolicyItemId'),
  requestId?: string(name='RequestId'),
}

model AddIpControlPolicyItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddIpControlPolicyItemResponseBody(name='body'),
}

async function addIpControlPolicyItem(request: AddIpControlPolicyItemRequest): AddIpControlPolicyItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddIpControlPolicyItem', 'POST', '/', 'json', false, 'json', request);
}

model AddTrafficSpecialControlRequest {
  securityToken?: string(name='SecurityToken', position='Query'),
  specialKey: string(name='SpecialKey', position='Query'),
  specialType: string(name='SpecialType', position='Query'),
  trafficControlId: string(name='TrafficControlId', position='Query'),
  trafficValue: int32(name='TrafficValue', position='Query'),
}

model AddTrafficSpecialControlResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddTrafficSpecialControlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddTrafficSpecialControlResponseBody(name='body'),
}

async function addTrafficSpecialControl(request: AddTrafficSpecialControlRequest): AddTrafficSpecialControlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddTrafficSpecialControl', 'POST', '/', 'json', false, 'json', request);
}

model CreateApiRequest {
  allowSignatureMethod?: string(name='AllowSignatureMethod', position='Query'),
  apiName: string(name='ApiName', position='Query'),
  authType?: string(name='AuthType', position='Query'),
  description?: string(name='Description', position='Query'),
  errorCodeSamples?: string(name='ErrorCodeSamples', position='Query'),
  failResultSample?: string(name='FailResultSample', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  openIdConnectConfig?: string(name='OpenIdConnectConfig', position='Query'),
  requestConfig: string(name='RequestConfig', position='Query'),
  requestParamters?: string(name='RequestParamters', position='Query'),
  resultDescriptions?: string(name='ResultDescriptions', position='Query'),
  resultSample: string(name='ResultSample', position='Query'),
  resultType: string(name='ResultType', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  serviceConfig: string(name='ServiceConfig', position='Query'),
  serviceParameters?: string(name='ServiceParameters', position='Query'),
  serviceParametersMap?: string(name='ServiceParametersMap', position='Query'),
  visibility: string(name='Visibility', position='Query'),
  webSocketApiType?: string(name='WebSocketApiType', position='Query'),
}

model CreateApiResponseBody = {
  apiId?: string(name='ApiId'),
  requestId?: string(name='RequestId'),
}

model CreateApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateApiResponseBody(name='body'),
}

async function createApi(request: CreateApiRequest): CreateApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateApi', 'POST', '/', 'json', false, 'json', request);
}

model CreateApiGroupRequest {
  description: string(name='Description', position='Query'),
  groupName: string(name='GroupName', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model CreateApiGroupResponseBody = {
  description?: string(name='Description'),
  groupId?: string(name='GroupId'),
  groupName?: string(name='GroupName'),
  requestId?: string(name='RequestId'),
  subDomain?: string(name='SubDomain'),
}

model CreateApiGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateApiGroupResponseBody(name='body'),
}

async function createApiGroup(request: CreateApiGroupRequest): CreateApiGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateApiGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateApiStageVariableRequest {
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageId: string(name='StageId', position='Query'),
  stageRouteModel?: string(name='StageRouteModel', position='Query'),
  supportRoute?: boolean(name='SupportRoute', position='Query'),
  variableName: string(name='VariableName', position='Query'),
  variableValue?: string(name='VariableValue', position='Query'),
}

model CreateApiStageVariableResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateApiStageVariableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateApiStageVariableResponseBody(name='body'),
}

async function createApiStageVariable(request: CreateApiStageVariableRequest): CreateApiStageVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateApiStageVariable', 'POST', '/', 'json', false, 'json', request);
}

model CreateAppRequest {
  appName: string(name='AppName', position='Query'),
  description?: string(name='Description', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model CreateAppResponseBody = {
  appId?: long(name='AppId'),
  requestId?: string(name='RequestId'),
}

model CreateAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAppResponseBody(name='body'),
}

async function createApp(request: CreateAppRequest): CreateAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateApp', 'POST', '/', 'json', false, 'json', request);
}

model CreateCustomizedInfoRequest {
  apiId: string(name='ApiId', position='Query'),
  apiName: string(name='ApiName', position='Query'),
  csharpDemo?: string(name='CsharpDemo', position='Query'),
  curlDemo?: string(name='CurlDemo', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  javaDemo?: string(name='JavaDemo', position='Query'),
  objectcDemo?: string(name='ObjectcDemo', position='Query'),
  phpDemo?: string(name='PhpDemo', position='Query'),
  pythonDemo?: string(name='PythonDemo', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageId?: string(name='StageId', position='Query'),
  stageName: string(name='StageName', position='Query'),
}

model CreateCustomizedInfoResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateCustomizedInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCustomizedInfoResponseBody(name='body'),
}

async function createCustomizedInfo(request: CreateCustomizedInfoRequest): CreateCustomizedInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCustomizedInfo', 'POST', '/', 'json', false, 'json', request);
}

model CreateInstanceRequest {
  accountQuantity: int32(name='AccountQuantity', position='Query'),
  expiredOn: string(name='ExpiredOn', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  skuId: string(name='SkuId', position='Query'),
  token: string(name='Token', position='Query'),
}

model CreateInstanceResponseBody = {
  instanceId?: string(name='InstanceId'),
  requestId?: string(name='RequestId'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateInstanceResponseBody(name='body'),
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreateIpControlRequest {
  description?: string(name='Description', position='Query'),
  ipControlName: string(name='IpControlName', position='Query'),
  ipControlPolicys?: [ 
    {
      appId?: string(name='AppId'),
      ip?: string(name='IP'),
    }
  ](name='IpControlPolicys', position='Query'),
  ipControlType: string(name='IpControlType', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model CreateIpControlResponseBody = {
  ipControlId?: string(name='IpControlId'),
  requestId?: string(name='RequestId'),
}

model CreateIpControlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateIpControlResponseBody(name='body'),
}

async function createIpControl(request: CreateIpControlRequest): CreateIpControlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateIpControl', 'POST', '/', 'json', false, 'json', request);
}

model CreateLogConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  logType?: string(name='LogType', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  slsLogStore: string(name='SlsLogStore', position='Query'),
  slsProject: string(name='SlsProject', position='Query'),
}

model CreateLogConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateLogConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateLogConfigResponseBody(name='body'),
}

async function createLogConfig(request: CreateLogConfigRequest): CreateLogConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLogConfig', 'POST', '/', 'json', false, 'json', request);
}

model CreateRaceWorkForInnerRequest {
  commodityCode: string(name='CommodityCode', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  keywords: string(name='Keywords', position='Query'),
  logoUrl: string(name='LogoUrl', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  shortDescription: string(name='ShortDescription', position='Query'),
  workName: string(name='WorkName', position='Query'),
}

model CreateRaceWorkForInnerResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateRaceWorkForInnerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateRaceWorkForInnerResponseBody(name='body'),
}

async function createRaceWorkForInner(request: CreateRaceWorkForInnerRequest): CreateRaceWorkForInnerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRaceWorkForInner', 'POST', '/', 'json', false, 'json', request);
}

model CreateSecretKeyRequest {
  secretKey: string(name='SecretKey', position='Query'),
  secretKeyName: string(name='SecretKeyName', position='Query'),
  secretValue: string(name='SecretValue', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model CreateSecretKeyResponseBody = {
  requestId?: string(name='RequestId'),
  secretKeyId?: string(name='SecretKeyId'),
  secretKeyName?: string(name='SecretKeyName'),
}

model CreateSecretKeyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSecretKeyResponseBody(name='body'),
}

async function createSecretKey(request: CreateSecretKeyRequest): CreateSecretKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSecretKey', 'POST', '/', 'json', false, 'json', request);
}

model CreateTrafficControlRequest {
  apiDefault: int32(name='ApiDefault', position='Query'),
  appDefault?: int32(name='AppDefault', position='Query'),
  description?: string(name='Description', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  trafficControlName: string(name='TrafficControlName', position='Query'),
  trafficControlUnit: string(name='TrafficControlUnit', position='Query'),
  userDefault?: int32(name='UserDefault', position='Query'),
}

model CreateTrafficControlResponseBody = {
  requestId?: string(name='RequestId'),
  trafficControlId?: string(name='TrafficControlId'),
}

model CreateTrafficControlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTrafficControlResponseBody(name='body'),
}

async function createTrafficControl(request: CreateTrafficControlRequest): CreateTrafficControlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTrafficControl', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAllTrafficSpecialControlRequest {
  securityToken?: string(name='SecurityToken', position='Query'),
  trafficControlId: string(name='TrafficControlId', position='Query'),
}

model DeleteAllTrafficSpecialControlResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAllTrafficSpecialControlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAllTrafficSpecialControlResponseBody(name='body'),
}

async function deleteAllTrafficSpecialControl(request: DeleteAllTrafficSpecialControlRequest): DeleteAllTrafficSpecialControlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAllTrafficSpecialControl', 'POST', '/', 'json', false, 'json', request);
}

model DeleteApiRequest {
  apiId: string(name='ApiId', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteApiResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteApiResponseBody(name='body'),
}

async function deleteApi(request: DeleteApiRequest): DeleteApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteApi', 'POST', '/', 'json', false, 'json', request);
}

model DeleteApiGroupRequest {
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteApiGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteApiGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteApiGroupResponseBody(name='body'),
}

async function deleteApiGroup(request: DeleteApiGroupRequest): DeleteApiGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteApiGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteApiStageVariableRequest {
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageId: string(name='StageId', position='Query'),
  variableName: string(name='VariableName', position='Query'),
}

model DeleteApiStageVariableResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteApiStageVariableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteApiStageVariableResponseBody(name='body'),
}

async function deleteApiStageVariable(request: DeleteApiStageVariableRequest): DeleteApiStageVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteApiStageVariable', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAppRequest {
  appId: long(name='AppId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteAppResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAppResponseBody(name='body'),
}

async function deleteApp(request: DeleteAppRequest): DeleteAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteApp', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDomainRequest {
  domainName: string(name='DomainName', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDomainResponseBody(name='body'),
}

async function deleteDomain(request: DeleteDomainRequest): DeleteDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDomain', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDomainCertificateRequest {
  certificateId: string(name='CertificateId', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteDomainCertificateResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDomainCertificateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDomainCertificateResponseBody(name='body'),
}

async function deleteDomainCertificate(request: DeleteDomainCertificateRequest): DeleteDomainCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDomainCertificate', 'POST', '/', 'json', false, 'json', request);
}

model DeleteIpControlRequest {
  ipControlId: string(name='IpControlId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteIpControlResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteIpControlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteIpControlResponseBody(name='body'),
}

async function deleteIpControl(request: DeleteIpControlRequest): DeleteIpControlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteIpControl', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLogConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  logType?: string(name='LogType', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteLogConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLogConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteLogConfigResponseBody(name='body'),
}

async function deleteLogConfig(request: DeleteLogConfigRequest): DeleteLogConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLogConfig', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSecretKeyRequest {
  secretKeyId: string(name='SecretKeyId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteSecretKeyResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteSecretKeyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSecretKeyResponseBody(name='body'),
}

async function deleteSecretKey(request: DeleteSecretKeyRequest): DeleteSecretKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSecretKey', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTrafficControlRequest {
  securityToken?: string(name='SecurityToken', position='Query'),
  trafficControlId: string(name='TrafficControlId', position='Query'),
}

model DeleteTrafficControlResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteTrafficControlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteTrafficControlResponseBody(name='body'),
}

async function deleteTrafficControl(request: DeleteTrafficControlRequest): DeleteTrafficControlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTrafficControl', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTrafficSpecialControlRequest {
  securityToken?: string(name='SecurityToken', position='Query'),
  specialKey: string(name='SpecialKey', position='Query'),
  specialType: string(name='SpecialType', position='Query'),
  trafficControlId: string(name='TrafficControlId', position='Query'),
}

model DeleteTrafficSpecialControlResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteTrafficSpecialControlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteTrafficSpecialControlResponseBody(name='body'),
}

async function deleteTrafficSpecialControl(request: DeleteTrafficSpecialControlRequest): DeleteTrafficSpecialControlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTrafficSpecialControl', 'POST', '/', 'json', false, 'json', request);
}

model DeployApiRequest {
  apiId: string(name='ApiId', position='Query'),
  description: string(name='Description', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', position='Query'),
  supportMock?: string(name='SupportMock', position='Query'),
}

model DeployApiResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeployApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeployApiResponseBody(name='body'),
}

async function deployApi(request: DeployApiRequest): DeployApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeployApi', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiRequest {
  apiId: string(name='ApiId', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeApiResponseBody = {
  allowSignatureMethod?: string(name='AllowSignatureMethod'),
  apiId?: string(name='ApiId'),
  apiName?: string(name='ApiName'),
  authType?: string(name='AuthType'),
  constantParameters?: {
    constantParameter?: [ 
    {
      constantValue?: string(name='ConstantValue'),
      description?: string(name='Description'),
      location?: string(name='Location'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='ConstantParameter')
  }(name='ConstantParameters'),
  createdTime?: string(name='CreatedTime'),
  customSystemParameters?: {
    customSystemParameter?: [ 
    {
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      location?: string(name='Location'),
      parameterName?: string(name='ParameterName'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='CustomSystemParameter')
  }(name='CustomSystemParameters'),
  deployedInfos?: {
    deployedInfo?: [ 
    {
      deployedStatus?: string(name='DeployedStatus'),
      effectiveVersion?: string(name='EffectiveVersion'),
      stageName?: string(name='StageName'),
    }
  ](name='DeployedInfo')
  }(name='DeployedInfos'),
  description?: string(name='Description'),
  errorCodeSamples?: {
    errorCodeSample?: [ 
    {
      code?: string(name='Code'),
      description?: string(name='Description'),
      message?: string(name='Message'),
    }
  ](name='ErrorCodeSample')
  }(name='ErrorCodeSamples'),
  failResultSample?: string(name='FailResultSample'),
  groupId?: string(name='GroupId'),
  groupName?: string(name='GroupName'),
  mock?: string(name='Mock'),
  mockResult?: string(name='MockResult'),
  modifiedTime?: string(name='ModifiedTime'),
  openIdConnectConfig?: {
    idTokenParamName?: string(name='IdTokenParamName'),
    openIdApiType?: string(name='OpenIdApiType'),
    publicKey?: string(name='PublicKey'),
    publicKeyId?: string(name='PublicKeyId'),
  }(name='OpenIdConnectConfig'),
  originResultDescription?: string(name='OriginResultDescription'),
  parametersMapObject?: {
    serviceParameterMap?: [ 
    {
      requestParameterName?: string(name='RequestParameterName'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='ServiceParameterMap')
  }(name='ParametersMapObject'),
  regionId?: string(name='RegionId'),
  requestConfig?: {
    bodyFormat?: string(name='BodyFormat'),
    postBodyDescription?: string(name='PostBodyDescription'),
    requestHttpMethod?: string(name='RequestHttpMethod'),
    requestMode?: string(name='RequestMode'),
    requestPath?: string(name='RequestPath'),
    requestProtocol?: string(name='RequestProtocol'),
  }(name='RequestConfig'),
  requestId?: string(name='RequestId'),
  requestParametersObject?: {
    requestParam?: [ 
    {
      apiParameterName?: string(name='ApiParameterName'),
      defaultValue?: string(name='DefaultValue'),
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      docOrder?: string(name='DocOrder'),
      docShow?: string(name='DocShow'),
      enumValue?: string(name='EnumValue'),
      jsonScheme?: string(name='JsonScheme'),
      location?: string(name='Location'),
      maxLength?: long(name='MaxLength'),
      maxValue?: long(name='MaxValue'),
      minLength?: long(name='MinLength'),
      minValue?: long(name='MinValue'),
      parameterType?: string(name='ParameterType'),
      regularExpression?: string(name='RegularExpression'),
      required?: string(name='Required'),
    }
  ](name='RequestParam')
  }(name='RequestParametersObject'),
  resultSample?: string(name='ResultSample'),
  resultType?: string(name='ResultType'),
  serviceConfig?: {
    aoneAppName?: string(name='AoneAppName'),
    contentTypeCatagory?: string(name='ContentTypeCatagory'),
    contentTypeValue?: string(name='ContentTypeValue'),
    functionComputeConfig?: {
      fcRegionId?: string(name='FcRegionId'),
      functionName?: string(name='FunctionName'),
      roleArn?: string(name='RoleArn'),
      serviceName?: string(name='ServiceName'),
    }(name='FunctionComputeConfig'),
    mock?: string(name='Mock'),
    mockResult?: string(name='MockResult'),
    serviceAddress?: string(name='ServiceAddress'),
    serviceHttpMethod?: string(name='ServiceHttpMethod'),
    servicePath?: string(name='ServicePath'),
    serviceProtocol?: string(name='ServiceProtocol'),
    serviceTimeout?: string(name='ServiceTimeout'),
    serviceVpcEnable?: string(name='ServiceVpcEnable'),
    vpcConfig?: {
      id?: string(name='Id'),
      instanceId?: string(name='InstanceId'),
      name?: string(name='Name'),
      port?: int32(name='Port'),
      vpcId?: string(name='VpcId'),
    }(name='VpcConfig'),
  }(name='ServiceConfig'),
  serviceParametersObject?: {
    serviceParam?: [ 
    {
      location?: string(name='Location'),
      serviceParameterName?: string(name='ServiceParameterName'),
      type?: string(name='Type'),
    }
  ](name='ServiceParam')
  }(name='ServiceParametersObject'),
  systemParameters?: {
    systemParameter?: [ 
    {
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      location?: string(name='Location'),
      parameterName?: string(name='ParameterName'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='SystemParameter')
  }(name='SystemParameters'),
  visibility?: string(name='Visibility'),
  webSocketApiType?: string(name='WebSocketApiType'),
}

model DescribeApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeApiResponseBody(name='body'),
}

async function describeApi(request: DescribeApiRequest): DescribeApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApi', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiDocRequest {
  apiId: string(name='ApiId', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', position='Query'),
}

model DescribeApiDocResponseBody = {
  apiId?: string(name='ApiId'),
  apiName?: string(name='ApiName'),
  bodyFormat?: string(name='BodyFormat'),
  deployedTime?: string(name='DeployedTime'),
  description?: string(name='Description'),
  errorCodeSamples?: {
    errorCodeSample?: [ 
    {
      code?: string(name='Code'),
      description?: string(name='Description'),
      message?: string(name='Message'),
    }
  ](name='ErrorCodeSample')
  }(name='ErrorCodeSamples'),
  failResultSample?: string(name='FailResultSample'),
  groupId?: string(name='GroupId'),
  groupName?: string(name='GroupName'),
  httpMethod?: string(name='HttpMethod'),
  httpProtocol?: string(name='HttpProtocol'),
  mock?: string(name='Mock'),
  mockResult?: string(name='MockResult'),
  originResultDescription?: string(name='OriginResultDescription'),
  path?: string(name='Path'),
  pathParameters?: {
    pathParameter?: [ 
    {
      apiParameterName?: string(name='ApiParameterName'),
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
    }
  ](name='PathParameter')
  }(name='PathParameters'),
  postBodyDescription?: string(name='PostBodyDescription'),
  postBodyType?: string(name='PostBodyType'),
  regionId?: string(name='RegionId'),
  requestBody?: {
    requestParam?: [ 
    {
      apiParameterName?: string(name='ApiParameterName'),
      defaultValue?: string(name='DefaultValue'),
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      enumValue?: string(name='EnumValue'),
      jsonScheme?: string(name='JsonScheme'),
      maxLength?: long(name='MaxLength'),
      maxValue?: long(name='MaxValue'),
      minLength?: long(name='MinLength'),
      minValue?: long(name='MinValue'),
      parameterType?: string(name='ParameterType'),
      regularExpression?: string(name='RegularExpression'),
      required?: string(name='Required'),
    }
  ](name='RequestParam')
  }(name='RequestBody'),
  requestHeaders?: {
    requestParam?: [ 
    {
      apiParameterName?: string(name='ApiParameterName'),
      defaultValue?: string(name='DefaultValue'),
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      enumValue?: string(name='EnumValue'),
      jsonScheme?: string(name='JsonScheme'),
      maxLength?: long(name='MaxLength'),
      maxValue?: long(name='MaxValue'),
      minLength?: long(name='MinLength'),
      minValue?: long(name='MinValue'),
      parameterType?: string(name='ParameterType'),
      regularExpression?: string(name='RegularExpression'),
      required?: string(name='Required'),
    }
  ](name='RequestParam')
  }(name='RequestHeaders'),
  requestId?: string(name='RequestId'),
  requestMode?: string(name='RequestMode'),
  requestQueries?: {
    requestParam?: [ 
    {
      apiParameterName?: string(name='ApiParameterName'),
      defaultValue?: string(name='DefaultValue'),
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      enumValue?: string(name='EnumValue'),
      jsonScheme?: string(name='JsonScheme'),
      maxLength?: long(name='MaxLength'),
      maxValue?: long(name='MaxValue'),
      minLength?: long(name='MinLength'),
      minValue?: long(name='MinValue'),
      parameterType?: string(name='ParameterType'),
      regularExpression?: string(name='RegularExpression'),
      required?: string(name='Required'),
    }
  ](name='RequestParam')
  }(name='RequestQueries'),
  resultSample?: string(name='ResultSample'),
  resultType?: string(name='ResultType'),
  serviceTimeout?: int32(name='ServiceTimeout'),
  serviceVpcEnable?: string(name='ServiceVpcEnable'),
  stageName?: string(name='StageName'),
  vpcName?: string(name='VpcName'),
}

model DescribeApiDocResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeApiDocResponseBody(name='body'),
}

async function describeApiDoc(request: DescribeApiDocRequest): DescribeApiDocResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiDoc', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiDocsRequest {
  apiId?: string(name='ApiId', position='Query'),
  apiName?: string(name='ApiName', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName?: string(name='StageName', position='Query'),
}

model DescribeApiDocsResponseBody = {
  apiInfos?: {
    apiInfo?: [ 
    {
      apiId?: string(name='ApiId'),
      apiName?: string(name='ApiName'),
      deployedTime?: string(name='DeployedTime'),
      description?: string(name='Description'),
      groupDescription?: string(name='GroupDescription'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      regionId?: string(name='RegionId'),
      stageName?: string(name='StageName'),
    }
  ](name='ApiInfo')
  }(name='ApiInfos'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeApiDocsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeApiDocsResponseBody(name='body'),
}

async function describeApiDocs(request: DescribeApiDocsRequest): DescribeApiDocsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiDocs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiErrorRequest {
  apiId: string(name='ApiId', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeApiErrorResponseBody = {
  clientErrors?: {
    clientError?: [ 
    {
      time?: string(name='Time'),
      value?: string(name='Value'),
    }
  ](name='ClientError')
  }(name='ClientErrors'),
  requestId?: string(name='RequestId'),
  serverErrors?: {
    serverError?: [ 
    {
      time?: string(name='Time'),
      value?: string(name='Value'),
    }
  ](name='ServerError')
  }(name='ServerErrors'),
}

model DescribeApiErrorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeApiErrorResponseBody(name='body'),
}

async function describeApiError(request: DescribeApiErrorRequest): DescribeApiErrorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiError', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiGroupDetailRequest {
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeApiGroupDetailResponseBody = {
  billingStatus?: string(name='BillingStatus'),
  createdTime?: string(name='CreatedTime'),
  description?: string(name='Description'),
  domainItems?: {
    domainItem?: [ 
    {
      certificateId?: string(name='CertificateId'),
      certificateName?: string(name='CertificateName'),
      domainBindingStatus?: string(name='DomainBindingStatus'),
      domainLegalStatus?: string(name='DomainLegalStatus'),
      domainName?: string(name='DomainName'),
      domainNameResolution?: string(name='DomainNameResolution'),
      domainRemark?: string(name='DomainRemark'),
      domainWebSocketStatus?: string(name='DomainWebSocketStatus'),
    }
  ](name='DomainItem')
  }(name='DomainItems'),
  groupId?: string(name='GroupId'),
  groupName?: string(name='GroupName'),
  illegalStatus?: string(name='IllegalStatus'),
  modifiedTime?: string(name='ModifiedTime'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
  stageItems?: {
    stageInfo?: [ 
    {
      description?: string(name='Description'),
      stageId?: string(name='StageId'),
      stageName?: string(name='StageName'),
    }
  ](name='StageInfo')
  }(name='StageItems'),
  status?: string(name='Status'),
  subDomain?: string(name='SubDomain'),
  trafficLimit?: int32(name='TrafficLimit'),
}

model DescribeApiGroupDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeApiGroupDetailResponseBody(name='body'),
}

async function describeApiGroupDetail(request: DescribeApiGroupDetailRequest): DescribeApiGroupDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiGroupDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiGroupDetailForConsumerRequest {
  apiId: string(name='ApiId', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName?: string(name='StageName', position='Query'),
}

model DescribeApiGroupDetailForConsumerResponseBody = {
  billingStatus?: string(name='BillingStatus'),
  createdTime?: string(name='CreatedTime'),
  description?: string(name='Description'),
  domainItems?: {
    domainItem?: [ 
    {
      certificateId?: string(name='CertificateId'),
      certificateName?: string(name='CertificateName'),
      domainName?: string(name='DomainName'),
      domainNameResolution?: string(name='DomainNameResolution'),
      domainStatus?: string(name='DomainStatus'),
    }
  ](name='DomainItem')
  }(name='DomainItems'),
  groupId?: string(name='GroupId'),
  groupName?: string(name='GroupName'),
  illegalStatus?: string(name='IllegalStatus'),
  modifiedTime?: string(name='ModifiedTime'),
  purchased?: string(name='Purchased'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  subDomain?: string(name='SubDomain'),
  trafficLimit?: int32(name='TrafficLimit'),
}

model DescribeApiGroupDetailForConsumerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeApiGroupDetailForConsumerResponseBody(name='body'),
}

async function describeApiGroupDetailForConsumer(request: DescribeApiGroupDetailForConsumerRequest): DescribeApiGroupDetailForConsumerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiGroupDetailForConsumer', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiGroupsRequest {
  groupId?: string(name='GroupId', position='Query'),
  groupName?: string(name='GroupName', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeApiGroupsResponseBody = {
  apiGroupAttributes?: {
    apiGroupAttribute?: [ 
    {
      billingStatus?: string(name='BillingStatus'),
      createdTime?: string(name='CreatedTime'),
      description?: string(name='Description'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      illegalStatus?: string(name='IllegalStatus'),
      modifiedTime?: string(name='ModifiedTime'),
      regionId?: string(name='RegionId'),
      subDomain?: string(name='SubDomain'),
      trafficLimit?: int32(name='TrafficLimit'),
    }
  ](name='ApiGroupAttribute')
  }(name='ApiGroupAttributes'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeApiGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeApiGroupsResponseBody(name='body'),
}

async function describeApiGroups(request: DescribeApiGroupsRequest): DescribeApiGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiGroups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiIpControlsRequest {
  apiIds?: string(name='ApiIds', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', position='Query'),
}

model DescribeApiIpControlsResponseBody = {
  apiIpControls?: {
    apiIpControlItem?: [ 
    {
      apiId?: string(name='ApiId'),
      apiName?: string(name='ApiName'),
      boundTime?: string(name='BoundTime'),
      ipControlId?: string(name='IpControlId'),
      ipControlName?: string(name='IpControlName'),
    }
  ](name='ApiIpControlItem')
  }(name='ApiIpControls'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeApiIpControlsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeApiIpControlsResponseBody(name='body'),
}

async function describeApiIpControls(request: DescribeApiIpControlsRequest): DescribeApiIpControlsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiIpControls', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiLatencyRequest {
  apiId: string(name='ApiId', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeApiLatencyResponseBody = {
  latencys?: {
    latency?: [ 
    {
      time?: string(name='Time'),
      value?: string(name='Value'),
    }
  ](name='Latency')
  }(name='Latencys'),
  requestId?: string(name='RequestId'),
}

model DescribeApiLatencyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeApiLatencyResponseBody(name='body'),
}

async function describeApiLatency(request: DescribeApiLatencyRequest): DescribeApiLatencyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiLatency', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiQpsRequest {
  apiId: string(name='ApiId', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeApiQpsResponseBody = {
  fails?: {
    fail?: [ 
    {
      time?: string(name='Time'),
      value?: string(name='Value'),
    }
  ](name='Fail')
  }(name='Fails'),
  requestId?: string(name='RequestId'),
  successes?: {
    success?: [ 
    {
      time?: string(name='Time'),
      value?: string(name='Value'),
    }
  ](name='Success')
  }(name='Successes'),
}

model DescribeApiQpsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeApiQpsResponseBody(name='body'),
}

async function describeApiQps(request: DescribeApiQpsRequest): DescribeApiQpsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiQps', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiRulesRequest {
  apiIds?: string(name='ApiIds', position='Query'),
  apiName?: string(name='ApiName', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  ruleType: string(name='RuleType', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', position='Query'),
}

model DescribeApiRulesResponseBody = {
  apiRules?: {
    apiRule?: [ 
    {
      apiId?: string(name='ApiId'),
      apiName?: string(name='ApiName'),
      createdTime?: string(name='CreatedTime'),
      ruleId?: string(name='RuleId'),
      ruleName?: string(name='RuleName'),
      ruleType?: string(name='RuleType'),
    }
  ](name='ApiRule')
  }(name='ApiRules'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeApiRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeApiRulesResponseBody(name='body'),
}

async function describeApiRules(request: DescribeApiRulesRequest): DescribeApiRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiRules', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiStageDetailRequest {
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageId: string(name='StageId', position='Query'),
}

model DescribeApiStageDetailResponseBody = {
  createdTime?: string(name='CreatedTime'),
  description?: string(name='Description'),
  groupId?: string(name='GroupId'),
  modifiedTime?: string(name='ModifiedTime'),
  requestId?: string(name='RequestId'),
  stageId?: string(name='StageId'),
  stageName?: string(name='StageName'),
  variables?: {
    variableItem?: [ 
    {
      stageRouteModel?: {
        location?: string(name='Location'),
        parameterCatalog?: string(name='ParameterCatalog'),
        parameterType?: string(name='ParameterType'),
        routeMatchSymbol?: string(name='RouteMatchSymbol'),
        routeRules?: {
          routeRuleItem?: [ 
          {
            conditionValue?: string(name='ConditionValue'),
            maxValue?: long(name='MaxValue'),
            minValue?: long(name='MinValue'),
            resultValue?: string(name='ResultValue'),
          }
        ](name='RouteRuleItem')
        }(name='RouteRules'),
        serviceParameterName?: string(name='ServiceParameterName'),
      }(name='StageRouteModel'),
      supportRoute?: boolean(name='SupportRoute'),
      variableName?: string(name='VariableName'),
      variableValue?: string(name='VariableValue'),
    }
  ](name='VariableItem')
  }(name='Variables'),
}

model DescribeApiStageDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeApiStageDetailResponseBody(name='body'),
}

async function describeApiStageDetail(request: DescribeApiStageDetailRequest): DescribeApiStageDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiStageDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiTrafficRequest {
  apiId: string(name='ApiId', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeApiTrafficResponseBody = {
  downloads?: {
    download?: [ 
    {
      time?: string(name='Time'),
      value?: string(name='Value'),
    }
  ](name='Download')
  }(name='Downloads'),
  requestId?: string(name='RequestId'),
  uploads?: {
    upload?: [ 
    {
      time?: string(name='Time'),
      value?: string(name='Value'),
    }
  ](name='Upload')
  }(name='Uploads'),
}

model DescribeApiTrafficResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeApiTrafficResponseBody(name='body'),
}

async function describeApiTraffic(request: DescribeApiTrafficRequest): DescribeApiTrafficResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiTraffic', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApisRequest {
  apiId?: string(name='ApiId', position='Query'),
  apiName?: string(name='ApiName', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  visibility?: string(name='Visibility', position='Query'),
}

model DescribeApisResponseBody = {
  apiInfos?: {
    apiInfo?: [ 
    {
      apiId?: string(name='ApiId'),
      apiName?: string(name='ApiName'),
      createdTime?: string(name='CreatedTime'),
      description?: string(name='Description'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      modifiedTime?: string(name='ModifiedTime'),
      regionId?: string(name='RegionId'),
      visibility?: string(name='Visibility'),
    }
  ](name='ApiInfo')
  }(name='ApiInfos'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeApisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeApisResponseBody(name='body'),
}

async function describeApis(request: DescribeApisRequest): DescribeApisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApis', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApisByAppRequest {
  appId: long(name='AppId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeApisByAppResponseBody = {
  appApiRelationInfos?: {
    appApiRelationInfo?: [ 
    {
      apiId?: string(name='ApiId'),
      apiName?: string(name='ApiName'),
      authorizationSource?: string(name='AuthorizationSource'),
      createdTime?: string(name='CreatedTime'),
      description?: string(name='Description'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      operator?: string(name='Operator'),
      regionId?: string(name='RegionId'),
      stageName?: string(name='StageName'),
    }
  ](name='AppApiRelationInfo')
  }(name='AppApiRelationInfos'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeApisByAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeApisByAppResponseBody(name='body'),
}

async function describeApisByApp(request: DescribeApisByAppRequest): DescribeApisByAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApisByApp', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApisByIpControlRequest {
  ipControlId: string(name='IpControlId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeApisByIpControlResponseBody = {
  apiInfos?: {
    apiInfo?: [ 
    {
      apiId?: string(name='ApiId'),
      apiName?: string(name='ApiName'),
      boundTime?: string(name='BoundTime'),
      description?: string(name='Description'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      regionId?: string(name='RegionId'),
      stageName?: string(name='StageName'),
      visibility?: string(name='Visibility'),
    }
  ](name='ApiInfo')
  }(name='ApiInfos'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeApisByIpControlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeApisByIpControlResponseBody(name='body'),
}

async function describeApisByIpControl(request: DescribeApisByIpControlRequest): DescribeApisByIpControlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApisByIpControl', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApisByRuleRequest {
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  ruleId: string(name='RuleId', position='Query'),
  ruleType: string(name='RuleType', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeApisByRuleResponseBody = {
  apiInfos?: {
    apiInfo?: [ 
    {
      apiId?: string(name='ApiId'),
      apiName?: string(name='ApiName'),
      createdTime?: string(name='CreatedTime'),
      description?: string(name='Description'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      modifiedTime?: string(name='ModifiedTime'),
      regionId?: string(name='RegionId'),
      stageName?: string(name='StageName'),
      visibility?: string(name='Visibility'),
    }
  ](name='ApiInfo')
  }(name='ApiInfos'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeApisByRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeApisByRuleResponseBody(name='body'),
}

async function describeApisByRule(request: DescribeApisByRuleRequest): DescribeApisByRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApisByRule', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApisForConsoleRequest {
  apiId?: string(name='ApiId', position='Query'),
  apiName?: string(name='ApiName', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName?: string(name='StageName', position='Query'),
  visibility?: string(name='Visibility', position='Query'),
}

model DescribeApisForConsoleResponseBody = {
  apiInfos?: {
    apiInfo?: [ 
    {
      apiId?: string(name='ApiId'),
      apiName?: string(name='ApiName'),
      createdTime?: string(name='CreatedTime'),
      deployedInfos?: {
        deployedInfo?: [ 
        {
          deployedStatus?: string(name='DeployedStatus'),
          effectiveVersion?: string(name='EffectiveVersion'),
          stageName?: string(name='StageName'),
        }
      ](name='DeployedInfo')
      }(name='DeployedInfos'),
      description?: string(name='Description'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      modifiedTime?: string(name='ModifiedTime'),
      regionId?: string(name='RegionId'),
      visibility?: string(name='Visibility'),
    }
  ](name='ApiInfo')
  }(name='ApiInfos'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeApisForConsoleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeApisForConsoleResponseBody(name='body'),
}

async function describeApisForConsole(request: DescribeApisForConsoleRequest): DescribeApisForConsoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApisForConsole', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAppRequest {
  appId: long(name='AppId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeAppResponseBody = {
  appId?: long(name='AppId'),
  appName?: string(name='AppName'),
  createdTime?: string(name='CreatedTime'),
  description?: string(name='Description'),
  modifiedTime?: string(name='ModifiedTime'),
  requestId?: string(name='RequestId'),
}

model DescribeAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAppResponseBody(name='body'),
}

async function describeApp(request: DescribeAppRequest): DescribeAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApp', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAppSecuritiesRequest {
  appId: long(name='AppId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeAppSecuritiesResponseBody = {
  appSecuritys?: {
    appSecurity?: [ 
    {
      appKey?: string(name='AppKey'),
      appSecret?: string(name='AppSecret'),
      createdTime?: string(name='CreatedTime'),
      modifiedTime?: string(name='ModifiedTime'),
    }
  ](name='AppSecurity')
  }(name='AppSecuritys'),
  requestId?: string(name='RequestId'),
}

model DescribeAppSecuritiesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAppSecuritiesResponseBody(name='body'),
}

async function describeAppSecurities(request: DescribeAppSecuritiesRequest): DescribeAppSecuritiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAppSecurities', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAppSecurityRequest {
  appKey: string(name='AppKey', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeAppSecurityResponseBody = {
  appCode?: string(name='AppCode'),
  appKey?: string(name='AppKey'),
  appSecret?: string(name='AppSecret'),
  createdTime?: string(name='CreatedTime'),
  modifiedTime?: string(name='ModifiedTime'),
  requestId?: string(name='RequestId'),
}

model DescribeAppSecurityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAppSecurityResponseBody(name='body'),
}

async function describeAppSecurity(request: DescribeAppSecurityRequest): DescribeAppSecurityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAppSecurity', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAppsRequest {
  appId?: long(name='AppId', position='Query'),
  appName?: string(name='AppName', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeAppsResponseBody = {
  apps?: {
    app?: [ 
    {
      appId?: long(name='AppId'),
      appName?: string(name='AppName'),
      createdTime?: string(name='CreatedTime'),
      description?: string(name='Description'),
      modifiedTime?: string(name='ModifiedTime'),
    }
  ](name='App')
  }(name='Apps'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeAppsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAppsResponseBody(name='body'),
}

async function describeApps(request: DescribeAppsRequest): DescribeAppsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApps', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAppsByApiRequest {
  apiId: string(name='ApiId', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName?: string(name='StageName', position='Query'),
}

model DescribeAppsByApiResponseBody = {
  appApiRelationInfos?: {
    appApiRelationInfo?: [ 
    {
      appId?: string(name='AppId'),
      appName?: string(name='AppName'),
      authorizationSource?: string(name='AuthorizationSource'),
      createdTime?: string(name='CreatedTime'),
      description?: string(name='Description'),
      operator?: string(name='Operator'),
      stageName?: string(name='StageName'),
    }
  ](name='AppApiRelationInfo')
  }(name='AppApiRelationInfos'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeAppsByApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAppsByApiResponseBody(name='body'),
}

async function describeAppsByApi(request: DescribeAppsByApiRequest): DescribeAppsByApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAppsByApi', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAppsForProviderRequest {
  appId?: long(name='AppId', position='Query'),
  appOwnerId?: long(name='AppOwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeAppsForProviderResponseBody = {
  apps?: {
    app?: [ 
    {
      appId?: long(name='AppId'),
      appName?: string(name='AppName'),
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      modifiedTime?: string(name='ModifiedTime'),
    }
  ](name='App')
  }(name='Apps'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeAppsForProviderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAppsForProviderResponseBody(name='body'),
}

async function describeAppsForProvider(request: DescribeAppsForProviderRequest): DescribeAppsForProviderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAppsForProvider', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBlackListsRequest {
  blackType: string(name='BlackType', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeBlackListsResponseBody = {
  blackLists?: {
    blackList?: [ 
    {
      blackContent?: string(name='BlackContent'),
      blackType?: string(name='BlackType'),
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      modifiedTime?: string(name='ModifiedTime'),
    }
  ](name='BlackList')
  }(name='BlackLists'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeBlackListsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBlackListsResponseBody(name='body'),
}

async function describeBlackLists(request: DescribeBlackListsRequest): DescribeBlackListsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBlackLists', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDeployedApiRequest {
  apiId: string(name='ApiId', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', position='Query'),
}

model DescribeDeployedApiResponseBody = {
  apiId?: string(name='ApiId'),
  apiName?: string(name='ApiName'),
  authType?: string(name='AuthType'),
  bodyFormat?: string(name='BodyFormat'),
  constantParameters?: {
    constantParameter?: [ 
    {
      constantValue?: string(name='ConstantValue'),
      description?: string(name='Description'),
      location?: string(name='Location'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='ConstantParameter')
  }(name='ConstantParameters'),
  deployedTime?: string(name='DeployedTime'),
  errorCodeSamples?: {
    errorCodeSample?: [ 
    {
      code?: string(name='Code'),
      description?: string(name='Description'),
      message?: string(name='Message'),
    }
  ](name='ErrorCodeSample')
  }(name='ErrorCodeSamples'),
  failResultSample?: string(name='FailResultSample'),
  functionComputeConfig?: {
    fcRegionId?: string(name='FcRegionId'),
    functionName?: string(name='FunctionName'),
    roleArn?: string(name='RoleArn'),
    serviceName?: string(name='ServiceName'),
  }(name='FunctionComputeConfig'),
  groupId?: string(name='GroupId'),
  groupName?: string(name='GroupName'),
  httpMethod?: string(name='HttpMethod'),
  httpProtocol?: string(name='HttpProtocol'),
  path?: string(name='Path'),
  pathParameters?: {
    pathParameter?: [ 
    {
      apiParameterName?: string(name='ApiParameterName'),
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='PathParameter')
  }(name='PathParameters'),
  postBodyDescription?: string(name='PostBodyDescription'),
  postBodyType?: string(name='PostBodyType'),
  regionId?: string(name='RegionId'),
  requestBody?: {
    requestParam?: [ 
    {
      apiParameterName?: string(name='ApiParameterName'),
      defaultValue?: string(name='DefaultValue'),
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      docOrder?: string(name='DocOrder'),
      docShow?: string(name='DocShow'),
      enumValue?: string(name='EnumValue'),
      jsonScheme?: string(name='JsonScheme'),
      maxLength?: long(name='MaxLength'),
      maxValue?: long(name='MaxValue'),
      minLength?: long(name='MinLength'),
      minValue?: long(name='MinValue'),
      parameterType?: string(name='ParameterType'),
      regularExpression?: string(name='RegularExpression'),
      required?: string(name='Required'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='RequestParam')
  }(name='RequestBody'),
  requestHeaders?: {
    requestParam?: [ 
    {
      apiParameterName?: string(name='ApiParameterName'),
      defaultValue?: string(name='DefaultValue'),
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      docOrder?: string(name='DocOrder'),
      docShow?: string(name='DocShow'),
      enumValue?: string(name='EnumValue'),
      jsonScheme?: string(name='JsonScheme'),
      maxLength?: long(name='MaxLength'),
      maxValue?: long(name='MaxValue'),
      minLength?: long(name='MinLength'),
      minValue?: long(name='MinValue'),
      parameterType?: string(name='ParameterType'),
      regularExpression?: string(name='RegularExpression'),
      required?: string(name='Required'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='RequestParam')
  }(name='RequestHeaders'),
  requestId?: string(name='RequestId'),
  requestMode?: string(name='RequestMode'),
  requestQueries?: {
    requestParam?: [ 
    {
      apiParameterName?: string(name='ApiParameterName'),
      defaultValue?: string(name='DefaultValue'),
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      docOrder?: string(name='DocOrder'),
      docShow?: string(name='DocShow'),
      enumValue?: string(name='EnumValue'),
      jsonScheme?: string(name='JsonScheme'),
      maxLength?: long(name='MaxLength'),
      maxValue?: long(name='MaxValue'),
      minLength?: long(name='MinLength'),
      minValue?: long(name='MinValue'),
      parameterType?: string(name='ParameterType'),
      regularExpression?: string(name='RegularExpression'),
      required?: string(name='Required'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='RequestParam')
  }(name='RequestQueries'),
  resultSample?: string(name='ResultSample'),
  resultType?: string(name='ResultType'),
  serviceAddress?: string(name='ServiceAddress'),
  serviceFCEnable?: string(name='ServiceFCEnable'),
  serviceProtocol?: string(name='ServiceProtocol'),
  serviceTimeout?: int32(name='ServiceTimeout'),
  serviceVpcEnable?: string(name='ServiceVpcEnable'),
  stageName?: string(name='StageName'),
  systemParameters?: {
    systemParameter?: [ 
    {
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      location?: string(name='Location'),
      parameterName?: string(name='ParameterName'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='SystemParameter')
  }(name='SystemParameters'),
  visibility?: string(name='Visibility'),
  vpcName?: string(name='VpcName'),
}

model DescribeDeployedApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDeployedApiResponseBody(name='body'),
}

async function describeDeployedApi(request: DescribeDeployedApiRequest): DescribeDeployedApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDeployedApi', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDeployedApisRequest {
  apiId?: string(name='ApiId', position='Query'),
  apiName?: string(name='ApiName', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName?: string(name='StageName', position='Query'),
}

model DescribeDeployedApisResponseBody = {
  apiInfos?: {
    apiInfo?: [ 
    {
      apiId?: string(name='ApiId'),
      apiName?: string(name='ApiName'),
      deployedTime?: string(name='DeployedTime'),
      description?: string(name='Description'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      regionId?: string(name='RegionId'),
      stageName?: string(name='StageName'),
      visibility?: string(name='Visibility'),
    }
  ](name='ApiInfo')
  }(name='ApiInfos'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDeployedApisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDeployedApisResponseBody(name='body'),
}

async function describeDeployedApis(request: DescribeDeployedApisRequest): DescribeDeployedApisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDeployedApis', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainRequest {
  domainName: string(name='DomainName', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeDomainResponseBody = {
  certificateBody?: string(name='CertificateBody'),
  certificateId?: string(name='CertificateId'),
  certificateName?: string(name='CertificateName'),
  domainBindingStatus?: string(name='DomainBindingStatus'),
  domainLegalStatus?: string(name='DomainLegalStatus'),
  domainName?: string(name='DomainName'),
  domainNameResolution?: string(name='DomainNameResolution'),
  domainRemark?: string(name='DomainRemark'),
  domainWebSocketStatus?: string(name='DomainWebSocketStatus'),
  groupId?: string(name='GroupId'),
  privateKey?: string(name='PrivateKey'),
  requestId?: string(name='RequestId'),
  subDomain?: string(name='SubDomain'),
}

model DescribeDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainResponseBody(name='body'),
}

async function describeDomain(request: DescribeDomainRequest): DescribeDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomain', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainResolutionRequest {
  domainNames: string(name='DomainNames', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeDomainResolutionResponseBody = {
  domainResolutions?: {
    domainResolution?: [ 
    {
      domainName?: string(name='DomainName'),
      domainNameResolution?: string(name='DomainNameResolution'),
    }
  ](name='DomainResolution')
  }(name='DomainResolutions'),
  groupId?: string(name='GroupId'),
  requestId?: string(name='RequestId'),
}

model DescribeDomainResolutionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainResolutionResponseBody(name='body'),
}

async function describeDomainResolution(request: DescribeDomainResolutionRequest): DescribeDomainResolutionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainResolution', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHistoryApiRequest {
  apiId: string(name='ApiId', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  historyVersion: string(name='HistoryVersion', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', position='Query'),
}

model DescribeHistoryApiResponseBody = {
  allowSignatureMethod?: string(name='AllowSignatureMethod'),
  apiId?: string(name='ApiId'),
  apiName?: string(name='ApiName'),
  authType?: string(name='AuthType'),
  bodyFormat?: string(name='BodyFormat'),
  constantParameters?: {
    constantParameter?: [ 
    {
      constantValue?: string(name='ConstantValue'),
      description?: string(name='Description'),
      location?: string(name='Location'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='ConstantParameter')
  }(name='ConstantParameters'),
  customSystemParameters?: {
    customSystemParameter?: [ 
    {
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      location?: string(name='Location'),
      parameterName?: string(name='ParameterName'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='CustomSystemParameter')
  }(name='CustomSystemParameters'),
  deployedTime?: string(name='DeployedTime'),
  description?: string(name='Description'),
  errorCodeSamples?: {
    errorCodeSample?: [ 
    {
      code?: string(name='Code'),
      description?: string(name='Description'),
      message?: string(name='Message'),
    }
  ](name='ErrorCodeSample')
  }(name='ErrorCodeSamples'),
  failResultSample?: string(name='FailResultSample'),
  functionComputeConfig?: {
    fcRegionId?: string(name='FcRegionId'),
    functionName?: string(name='FunctionName'),
    roleArn?: string(name='RoleArn'),
    serviceName?: string(name='ServiceName'),
  }(name='FunctionComputeConfig'),
  groupId?: string(name='GroupId'),
  groupName?: string(name='GroupName'),
  historyVersion?: string(name='HistoryVersion'),
  httpMethod?: string(name='HttpMethod'),
  httpProtocol?: string(name='HttpProtocol'),
  mock?: string(name='Mock'),
  mockResult?: string(name='MockResult'),
  openIdConnectConfig?: {
    idTokenParamName?: string(name='IdTokenParamName'),
    openIdApiType?: string(name='OpenIdApiType'),
    publicKey?: string(name='PublicKey'),
    publicKeyId?: string(name='PublicKeyId'),
  }(name='OpenIdConnectConfig'),
  originResultDescription?: string(name='OriginResultDescription'),
  path?: string(name='Path'),
  pathParameters?: {
    pathParameter?: [ 
    {
      apiParameterName?: string(name='ApiParameterName'),
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='PathParameter')
  }(name='PathParameters'),
  postBodyDescription?: string(name='PostBodyDescription'),
  postBodyType?: string(name='PostBodyType'),
  regionId?: string(name='RegionId'),
  requestBody?: {
    requestParam?: [ 
    {
      apiParameterName?: string(name='ApiParameterName'),
      defaultValue?: string(name='DefaultValue'),
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      docOrder?: string(name='DocOrder'),
      docShow?: string(name='DocShow'),
      enumValue?: string(name='EnumValue'),
      jsonScheme?: string(name='JsonScheme'),
      maxLength?: long(name='MaxLength'),
      maxValue?: long(name='MaxValue'),
      minLength?: long(name='MinLength'),
      minValue?: long(name='MinValue'),
      parameterType?: string(name='ParameterType'),
      regularExpression?: string(name='RegularExpression'),
      required?: string(name='Required'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='RequestParam')
  }(name='RequestBody'),
  requestHeaders?: {
    requestParam?: [ 
    {
      apiParameterName?: string(name='ApiParameterName'),
      defaultValue?: string(name='DefaultValue'),
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      docOrder?: string(name='DocOrder'),
      docShow?: string(name='DocShow'),
      enumValue?: string(name='EnumValue'),
      jsonScheme?: string(name='JsonScheme'),
      maxLength?: long(name='MaxLength'),
      maxValue?: long(name='MaxValue'),
      minLength?: long(name='MinLength'),
      minValue?: long(name='MinValue'),
      parameterType?: string(name='ParameterType'),
      regularExpression?: string(name='RegularExpression'),
      required?: string(name='Required'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='RequestParam')
  }(name='RequestHeaders'),
  requestId?: string(name='RequestId'),
  requestMode?: string(name='RequestMode'),
  requestQueries?: {
    requestParam?: [ 
    {
      apiParameterName?: string(name='ApiParameterName'),
      defaultValue?: string(name='DefaultValue'),
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      docOrder?: string(name='DocOrder'),
      docShow?: string(name='DocShow'),
      enumValue?: string(name='EnumValue'),
      jsonScheme?: string(name='JsonScheme'),
      maxLength?: long(name='MaxLength'),
      maxValue?: long(name='MaxValue'),
      minLength?: long(name='MinLength'),
      minValue?: long(name='MinValue'),
      parameterType?: string(name='ParameterType'),
      regularExpression?: string(name='RegularExpression'),
      required?: string(name='Required'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='RequestParam')
  }(name='RequestQueries'),
  resultSample?: string(name='ResultSample'),
  resultType?: string(name='ResultType'),
  serviceAddress?: string(name='ServiceAddress'),
  serviceFCEnable?: string(name='ServiceFCEnable'),
  serviceProtocol?: string(name='ServiceProtocol'),
  serviceTimeout?: int32(name='ServiceTimeout'),
  serviceVpcEnable?: string(name='ServiceVpcEnable'),
  status?: string(name='Status'),
  systemParameters?: {
    systemParameter?: [ 
    {
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      location?: string(name='Location'),
      parameterName?: string(name='ParameterName'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='SystemParameter')
  }(name='SystemParameters'),
  visibility?: string(name='Visibility'),
  vpcName?: string(name='VpcName'),
}

model DescribeHistoryApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeHistoryApiResponseBody(name='body'),
}

async function describeHistoryApi(request: DescribeHistoryApiRequest): DescribeHistoryApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHistoryApi', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHistoryApisRequest {
  apiId?: string(name='ApiId', position='Query'),
  apiName?: string(name='ApiName', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  pageNumber?: string(name='PageNumber', minLength=1, position='Query'),
  pageSize?: string(name='PageSize', minLength=1, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName?: string(name='StageName', position='Query'),
}

model DescribeHistoryApisResponseBody = {
  apiInfos?: {
    apiInfo?: [ 
    {
      apiId?: string(name='ApiId'),
      apiName?: string(name='ApiName'),
      deployedTime?: string(name='DeployedTime'),
      description?: string(name='Description'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      historyVersion?: string(name='HistoryVersion'),
      regionId?: string(name='RegionId'),
      stageName?: string(name='StageName'),
      status?: string(name='Status'),
    }
  ](name='ApiInfo')
  }(name='ApiInfos'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeHistoryApisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeHistoryApisResponseBody(name='body'),
}

async function describeHistoryApis(request: DescribeHistoryApisRequest): DescribeHistoryApisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHistoryApis', 'POST', '/', 'json', false, 'json', request);
}

model DescribeIpControlPolicyItemsRequest {
  ipControlId?: string(name='IpControlId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  policyItemId?: string(name='PolicyItemId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeIpControlPolicyItemsResponseBody = {
  ipControlPolicyItems?: {
    ipControlPolicyItem?: [ 
    {
      appId?: string(name='AppId'),
      cidrIp?: string(name='CidrIp'),
      createTime?: string(name='CreateTime'),
      modifiedTime?: string(name='ModifiedTime'),
      policyItemId?: string(name='PolicyItemId'),
    }
  ](name='IpControlPolicyItem')
  }(name='IpControlPolicyItems'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeIpControlPolicyItemsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeIpControlPolicyItemsResponseBody(name='body'),
}

async function describeIpControlPolicyItems(request: DescribeIpControlPolicyItemsRequest): DescribeIpControlPolicyItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeIpControlPolicyItems', 'POST', '/', 'json', false, 'json', request);
}

model DescribeIpControlsRequest {
  ipControlId?: string(name='IpControlId', position='Query'),
  ipControlName?: string(name='IpControlName', position='Query'),
  ipControlType?: string(name='IpControlType', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeIpControlsResponseBody = {
  ipControlInfos?: {
    ipControlInfo?: [ 
    {
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      ipControlId?: string(name='IpControlId'),
      ipControlName?: string(name='IpControlName'),
      ipControlType?: string(name='IpControlType'),
      modifiedTime?: string(name='ModifiedTime'),
      regionId?: string(name='RegionId'),
    }
  ](name='IpControlInfo')
  }(name='IpControlInfos'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeIpControlsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeIpControlsResponseBody(name='body'),
}

async function describeIpControls(request: DescribeIpControlsRequest): DescribeIpControlsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeIpControls', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLogConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  logType?: string(name='LogType', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeLogConfigResponseBody = {
  logInfos?: {
    logInfo?: [ 
    {
      logType?: string(name='LogType'),
      regionId?: string(name='RegionId'),
      slsLogStore?: string(name='SlsLogStore'),
      slsProject?: string(name='SlsProject'),
    }
  ](name='LogInfo')
  }(name='LogInfos'),
  requestId?: string(name='RequestId'),
}

model DescribeLogConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLogConfigResponseBody(name='body'),
}

async function describeLogConfig(request: DescribeLogConfigRequest): DescribeLogConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLogConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribePurchasedApiRequest {
  apiId: string(name='ApiId', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribePurchasedApiResponseBody = {
  apiId?: string(name='ApiId'),
  apiName?: string(name='ApiName'),
  bodyFormat?: string(name='BodyFormat'),
  createdTime?: string(name='CreatedTime'),
  description?: string(name='Description'),
  groupId?: string(name='GroupId'),
  groupName?: string(name='GroupName'),
  httpMethod?: string(name='HttpMethod'),
  httpProtocol?: string(name='HttpProtocol'),
  mock?: string(name='Mock'),
  mockResult?: string(name='MockResult'),
  modifiedTime?: string(name='ModifiedTime'),
  path?: string(name='Path'),
  pathParameters?: {
    pathParameter?: [ 
    {
      apiParameterName?: string(name='ApiParameterName'),
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
    }
  ](name='PathParameter')
  }(name='PathParameters'),
  postBodyDescription?: string(name='PostBodyDescription'),
  postBodyType?: string(name='PostBodyType'),
  regionId?: string(name='RegionId'),
  requestBody?: {
    requestParam?: [ 
    {
      apiParameterName?: string(name='ApiParameterName'),
      defaultValue?: string(name='DefaultValue'),
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      docOrder?: string(name='DocOrder'),
      docShow?: string(name='DocShow'),
      enumValue?: string(name='EnumValue'),
      jsonScheme?: string(name='JsonScheme'),
      maxLength?: long(name='MaxLength'),
      maxValue?: string(name='MaxValue'),
      minLength?: long(name='MinLength'),
      minValue?: string(name='MinValue'),
      parameterType?: string(name='ParameterType'),
      regularExpression?: string(name='RegularExpression'),
      required?: string(name='Required'),
    }
  ](name='RequestParam')
  }(name='RequestBody'),
  requestHeaders?: {
    requestParam?: [ 
    {
      apiParameterName?: string(name='ApiParameterName'),
      defaultValue?: string(name='DefaultValue'),
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      docOrder?: string(name='DocOrder'),
      docShow?: string(name='DocShow'),
      enumValue?: string(name='EnumValue'),
      jsonScheme?: string(name='JsonScheme'),
      maxLength?: long(name='MaxLength'),
      maxValue?: long(name='MaxValue'),
      minLength?: long(name='MinLength'),
      minValue?: long(name='MinValue'),
      parameterType?: string(name='ParameterType'),
      regularExpression?: string(name='RegularExpression'),
      required?: string(name='Required'),
    }
  ](name='RequestParam')
  }(name='RequestHeaders'),
  requestId?: string(name='RequestId'),
  requestQueries?: {
    requestParam?: [ 
    {
      apiParameterName?: string(name='ApiParameterName'),
      defaultValue?: string(name='DefaultValue'),
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      docOrder?: string(name='DocOrder'),
      docShow?: string(name='DocShow'),
      enumValue?: string(name='EnumValue'),
      jsonScheme?: string(name='JsonScheme'),
      maxLength?: long(name='MaxLength'),
      maxValue?: string(name='MaxValue'),
      minLength?: long(name='MinLength'),
      minValue?: string(name='MinValue'),
      parameterType?: string(name='ParameterType'),
      regularExpression?: string(name='RegularExpression'),
      required?: string(name='Required'),
    }
  ](name='RequestParam')
  }(name='RequestQueries'),
  resultSample?: string(name='ResultSample'),
  resultType?: string(name='ResultType'),
  visibility?: string(name='Visibility'),
}

model DescribePurchasedApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePurchasedApiResponseBody(name='body'),
}

async function describePurchasedApi(request: DescribePurchasedApiRequest): DescribePurchasedApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePurchasedApi', 'POST', '/', 'json', false, 'json', request);
}

model DescribePurchasedApiGroupDetailRequest {
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribePurchasedApiGroupDetailResponseBody = {
  createdTime?: string(name='CreatedTime'),
  description?: string(name='Description'),
  domainItems?: {
    domainItem?: [ 
    {
      domainName?: string(name='DomainName'),
    }
  ](name='DomainItem')
  }(name='DomainItems'),
  groupId?: string(name='GroupId'),
  groupName?: string(name='GroupName'),
  modifiedTime?: string(name='ModifiedTime'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribePurchasedApiGroupDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePurchasedApiGroupDetailResponseBody(name='body'),
}

async function describePurchasedApiGroupDetail(request: DescribePurchasedApiGroupDetailRequest): DescribePurchasedApiGroupDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePurchasedApiGroupDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribePurchasedApiGroupsRequest {
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribePurchasedApiGroupsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  purchasedApiGroupAttributes?: {
    purchasedApiGroupAttribute?: [ 
    {
      billingType?: string(name='BillingType'),
      createdTime?: string(name='CreatedTime'),
      expireTime?: string(name='ExpireTime'),
      groupDescription?: string(name='GroupDescription'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      invokeTimesMax?: long(name='InvokeTimesMax'),
      invokeTimesNow?: long(name='InvokeTimesNow'),
      modifiedTime?: string(name='ModifiedTime'),
      regionId?: string(name='RegionId'),
    }
  ](name='PurchasedApiGroupAttribute')
  }(name='PurchasedApiGroupAttributes'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribePurchasedApiGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePurchasedApiGroupsResponseBody(name='body'),
}

async function describePurchasedApiGroups(request: DescribePurchasedApiGroupsRequest): DescribePurchasedApiGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePurchasedApiGroups', 'POST', '/', 'json', false, 'json', request);
}

model DescribePurchasedApisRequest {
  apiId?: string(name='ApiId', position='Query'),
  apiName?: string(name='ApiName', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribePurchasedApisResponseBody = {
  apiInfos?: {
    apiInfo?: [ 
    {
      apiId?: string(name='ApiId'),
      apiName?: string(name='ApiName'),
      deployedTime?: string(name='DeployedTime'),
      description?: string(name='Description'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      modifiedTime?: string(name='ModifiedTime'),
      regionId?: string(name='RegionId'),
      stageName?: string(name='StageName'),
      visibility?: string(name='Visibility'),
    }
  ](name='ApiInfo')
  }(name='ApiInfos'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribePurchasedApisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePurchasedApisResponseBody(name='body'),
}

async function describePurchasedApis(request: DescribePurchasedApisRequest): DescribePurchasedApisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePurchasedApis', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRaceWorkForInnerRequest {
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeRaceWorkForInnerResponseBody = {
  commodityCode?: string(name='CommodityCode'),
  createTime?: string(name='CreateTime'),
  groupId?: string(name='GroupId'),
  keywords?: string(name='Keywords'),
  logoUrl?: string(name='LogoUrl'),
  modifiedTime?: string(name='ModifiedTime'),
  requestId?: string(name='RequestId'),
  shortDescription?: string(name='ShortDescription'),
  workName?: string(name='WorkName'),
}

model DescribeRaceWorkForInnerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRaceWorkForInnerResponseBody(name='body'),
}

async function describeRaceWorkForInner(request: DescribeRaceWorkForInnerRequest): DescribeRaceWorkForInnerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRaceWorkForInner', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  language?: string(name='Language', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRulesByApiRequest {
  apiId: string(name='ApiId', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', position='Query'),
}

model DescribeRulesByApiResponseBody = {
  requestId?: string(name='RequestId'),
  rules?: {
    rule?: [ 
    {
      createdTime?: int32(name='CreatedTime'),
      ruleId?: string(name='RuleId'),
      ruleName?: string(name='RuleName'),
      ruleType?: string(name='RuleType'),
    }
  ](name='Rule')
  }(name='Rules'),
}

model DescribeRulesByApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRulesByApiResponseBody(name='body'),
}

async function describeRulesByApi(request: DescribeRulesByApiRequest): DescribeRulesByApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRulesByApi', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSecretKeysRequest {
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  secretKeyId?: string(name='SecretKeyId', position='Query'),
  secretKeyName?: string(name='SecretKeyName', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeSecretKeysResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  secretKeys?: {
    secretKey?: [ 
    {
      createdTime?: string(name='CreatedTime'),
      modifiedTime?: string(name='ModifiedTime'),
      regionId?: string(name='RegionId'),
      secretKey?: string(name='SecretKey'),
      secretKeyId?: string(name='SecretKeyId'),
      secretKeyName?: string(name='SecretKeyName'),
      secretKeyValue?: string(name='SecretKeyValue'),
    }
  ](name='SecretKey')
  }(name='SecretKeys'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeSecretKeysResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSecretKeysResponseBody(name='body'),
}

async function describeSecretKeys(request: DescribeSecretKeysRequest): DescribeSecretKeysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSecretKeys', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSystemParametersRequest {
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeSystemParametersResponseBody = {
  requestId?: string(name='RequestId'),
  systemParameters?: {
    systemParameter?: [ 
    {
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      paramName?: string(name='ParamName'),
      paramType?: string(name='ParamType'),
    }
  ](name='SystemParameter')
  }(name='SystemParameters'),
}

model DescribeSystemParametersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSystemParametersResponseBody(name='body'),
}

async function describeSystemParameters(request: DescribeSystemParametersRequest): DescribeSystemParametersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSystemParameters', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSystemParamsRequest {
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeSystemParamsResponseBody = {
  requestId?: string(name='RequestId'),
  systemParams?: {
    systemParam?: [ 
    {
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      paramName?: string(name='ParamName'),
      paramType?: string(name='ParamType'),
    }
  ](name='SystemParam')
  }(name='SystemParams'),
}

model DescribeSystemParamsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSystemParamsResponseBody(name='body'),
}

async function describeSystemParams(request: DescribeSystemParamsRequest): DescribeSystemParamsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSystemParams', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTrafficControlsRequest {
  apiUid?: string(name='ApiUid', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName?: string(name='StageName', position='Query'),
  trafficControlId?: string(name='TrafficControlId', position='Query'),
  trafficControlName?: string(name='TrafficControlName', position='Query'),
}

model DescribeTrafficControlsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  trafficControls?: {
    trafficControl?: [ 
    {
      apiDefault?: int32(name='ApiDefault'),
      appDefault?: int32(name='AppDefault'),
      createdTime?: string(name='CreatedTime'),
      description?: string(name='Description'),
      modifiedTime?: string(name='ModifiedTime'),
      specialPolicies?: {
        specialPolicy?: [ 
        {
          specialType?: string(name='SpecialType'),
          specials?: {
            special?: [ 
            {
              specialKey?: string(name='SpecialKey'),
              trafficValue?: int32(name='TrafficValue'),
            }
          ](name='Special')
          }(name='Specials'),
        }
      ](name='SpecialPolicy')
      }(name='SpecialPolicies'),
      trafficControlId?: string(name='TrafficControlId'),
      trafficControlName?: string(name='TrafficControlName'),
      trafficControlUnit?: string(name='TrafficControlUnit'),
      userDefault?: int32(name='UserDefault'),
    }
  ](name='TrafficControl')
  }(name='TrafficControls'),
}

model DescribeTrafficControlsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTrafficControlsResponseBody(name='body'),
}

async function describeTrafficControls(request: DescribeTrafficControlsRequest): DescribeTrafficControlsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTrafficControls', 'POST', '/', 'json', false, 'json', request);
}

model GetApiMethodsRequest {
  apiPath: string(name='ApiPath', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', position='Query'),
}

model GetApiMethodsResponseBody = {
  methods?: [ string ](name='Methods'),
  requestId?: string(name='RequestId'),
}

model GetApiMethodsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetApiMethodsResponseBody(name='body'),
}

async function getApiMethods(request: GetApiMethodsRequest): GetApiMethodsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetApiMethods', 'POST', '/', 'json', false, 'json', request);
}

model GetCustomizedInfoRequest {
  apiId: string(name='ApiId', position='Query'),
  apiName: string(name='ApiName', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageId?: string(name='StageId', position='Query'),
  stageName: string(name='StageName', position='Query'),
}

model GetCustomizedInfoResponseBody = {
  requestId?: string(name='RequestId'),
  sdkDemos?: {
    sdkDemo?: [ 
    {
      callDemo?: string(name='CallDemo'),
      ideKey?: string(name='IdeKey'),
    }
  ](name='SdkDemo')
  }(name='SdkDemos'),
}

model GetCustomizedInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCustomizedInfoResponseBody(name='body'),
}

async function getCustomizedInfo(request: GetCustomizedInfoRequest): GetCustomizedInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCustomizedInfo', 'POST', '/', 'json', false, 'json', request);
}

model ModifyApiRequest {
  allowSignatureMethod?: string(name='AllowSignatureMethod', position='Query'),
  apiId: string(name='ApiId', position='Query'),
  apiName: string(name='ApiName', position='Query'),
  authType?: string(name='AuthType', position='Query'),
  description?: string(name='Description', position='Query'),
  errorCodeSamples?: string(name='ErrorCodeSamples', position='Query'),
  failResultSample?: string(name='FailResultSample', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  openIdConnectConfig?: string(name='OpenIdConnectConfig', position='Query'),
  requestConfig: string(name='RequestConfig', position='Query'),
  requestParamters?: string(name='RequestParamters', position='Query'),
  resultDescriptions?: string(name='ResultDescriptions', position='Query'),
  resultSample: string(name='ResultSample', position='Query'),
  resultType: string(name='ResultType', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  serviceConfig: string(name='ServiceConfig', position='Query'),
  serviceParameters?: string(name='ServiceParameters', position='Query'),
  serviceParametersMap?: string(name='ServiceParametersMap', position='Query'),
  visibility: string(name='Visibility', position='Query'),
  webSocketApiType?: string(name='WebSocketApiType', position='Query'),
}

model ModifyApiResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyApiResponseBody(name='body'),
}

async function modifyApi(request: ModifyApiRequest): ModifyApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyApi', 'POST', '/', 'json', false, 'json', request);
}

model ModifyApiGroupRequest {
  description?: string(name='Description', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  groupName?: string(name='GroupName', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ModifyApiGroupResponseBody = {
  description?: string(name='Description'),
  groupId?: string(name='GroupId'),
  groupName?: string(name='GroupName'),
  requestId?: string(name='RequestId'),
  subDomain?: string(name='SubDomain'),
}

model ModifyApiGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyApiGroupResponseBody(name='body'),
}

async function modifyApiGroup(request: ModifyApiGroupRequest): ModifyApiGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyApiGroup', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAppRequest {
  appId: long(name='AppId', position='Query'),
  appName?: string(name='AppName', position='Query'),
  description?: string(name='Description', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ModifyAppResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAppResponseBody(name='body'),
}

async function modifyApp(request: ModifyAppRequest): ModifyAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyApp', 'POST', '/', 'json', false, 'json', request);
}

model ModifyIpControlRequest {
  description?: string(name='Description', position='Query'),
  ipControlId: string(name='IpControlId', position='Query'),
  ipControlName?: string(name='IpControlName', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ModifyIpControlResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyIpControlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyIpControlResponseBody(name='body'),
}

async function modifyIpControl(request: ModifyIpControlRequest): ModifyIpControlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyIpControl', 'POST', '/', 'json', false, 'json', request);
}

model ModifyIpControlPolicyItemRequest {
  appId?: string(name='AppId', position='Query'),
  cidrIp: string(name='CidrIp', position='Query'),
  ipControlId: string(name='IpControlId', position='Query'),
  policyItemId: string(name='PolicyItemId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ModifyIpControlPolicyItemResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyIpControlPolicyItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyIpControlPolicyItemResponseBody(name='body'),
}

async function modifyIpControlPolicyItem(request: ModifyIpControlPolicyItemRequest): ModifyIpControlPolicyItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyIpControlPolicyItem', 'POST', '/', 'json', false, 'json', request);
}

model ModifyLogConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  logType?: string(name='LogType', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  slsLogStore: string(name='SlsLogStore', position='Query'),
  slsProject: string(name='SlsProject', position='Query'),
}

model ModifyLogConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyLogConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyLogConfigResponseBody(name='body'),
}

async function modifyLogConfig(request: ModifyLogConfigRequest): ModifyLogConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyLogConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifySecretKeyRequest {
  secretKey?: string(name='SecretKey', position='Query'),
  secretKeyId: string(name='SecretKeyId', position='Query'),
  secretKeyName?: string(name='SecretKeyName', position='Query'),
  secretValue?: string(name='SecretValue', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ModifySecretKeyResponseBody = {
  requestId?: string(name='RequestId'),
  secretKeyId?: string(name='SecretKeyId'),
  secretKeyName?: string(name='SecretKeyName'),
}

model ModifySecretKeyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySecretKeyResponseBody(name='body'),
}

async function modifySecretKey(request: ModifySecretKeyRequest): ModifySecretKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySecretKey', 'POST', '/', 'json', false, 'json', request);
}

model ModifyTrafficControlRequest {
  apiDefault?: int32(name='ApiDefault', position='Query'),
  appDefault?: int32(name='AppDefault', position='Query'),
  description?: string(name='Description', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  trafficControlId: string(name='TrafficControlId', position='Query'),
  trafficControlName?: string(name='TrafficControlName', position='Query'),
  trafficControlUnit?: string(name='TrafficControlUnit', position='Query'),
  userDefault?: int32(name='UserDefault', position='Query'),
}

model ModifyTrafficControlResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyTrafficControlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyTrafficControlResponseBody(name='body'),
}

async function modifyTrafficControl(request: ModifyTrafficControlRequest): ModifyTrafficControlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyTrafficControl', 'POST', '/', 'json', false, 'json', request);
}

model ReactivateDomainRequest {
  domainName: string(name='DomainName', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ReactivateDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReactivateDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReactivateDomainResponseBody(name='body'),
}

async function reactivateDomain(request: ReactivateDomainRequest): ReactivateDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReactivateDomain', 'POST', '/', 'json', false, 'json', request);
}

model RecoverApiFromHistoricalRequest {
  apiId: string(name='ApiId', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  historyVersion: string(name='HistoryVersion', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', position='Query'),
}

model RecoverApiFromHistoricalResponseBody = {
  requestId?: string(name='RequestId'),
}

model RecoverApiFromHistoricalResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecoverApiFromHistoricalResponseBody(name='body'),
}

async function recoverApiFromHistorical(request: RecoverApiFromHistoricalRequest): RecoverApiFromHistoricalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecoverApiFromHistorical', 'POST', '/', 'json', false, 'json', request);
}

model RecoveryApiDefineFromHistoricalRequest {
  apiId: string(name='ApiId', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  historyVersion: string(name='HistoryVersion', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', position='Query'),
}

model RecoveryApiDefineFromHistoricalResponseBody = {
  requestId?: string(name='RequestId'),
}

model RecoveryApiDefineFromHistoricalResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecoveryApiDefineFromHistoricalResponseBody(name='body'),
}

async function recoveryApiDefineFromHistorical(request: RecoveryApiDefineFromHistoricalRequest): RecoveryApiDefineFromHistoricalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecoveryApiDefineFromHistorical', 'POST', '/', 'json', false, 'json', request);
}

model RecoveryApiFromHistoricalRequest {
  apiId: string(name='ApiId', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  historyVersion: string(name='HistoryVersion', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', position='Query'),
}

model RecoveryApiFromHistoricalResponseBody = {
  requestId?: string(name='RequestId'),
}

model RecoveryApiFromHistoricalResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecoveryApiFromHistoricalResponseBody(name='body'),
}

async function recoveryApiFromHistorical(request: RecoveryApiFromHistoricalRequest): RecoveryApiFromHistoricalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecoveryApiFromHistorical', 'POST', '/', 'json', false, 'json', request);
}

model RefreshDomainRequest {
  domainName: string(name='DomainName', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model RefreshDomainResponseBody = {
  certificateId?: string(name='CertificateId'),
  certificateName?: string(name='CertificateName'),
  domainName?: string(name='DomainName'),
  domainNameResolution?: string(name='DomainNameResolution'),
  domainStatus?: string(name='DomainStatus'),
  groupId?: string(name='GroupId'),
  requestId?: string(name='RequestId'),
  subDomain?: string(name='SubDomain'),
}

model RefreshDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RefreshDomainResponseBody(name='body'),
}

async function refreshDomain(request: RefreshDomainRequest): RefreshDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefreshDomain', 'POST', '/', 'json', false, 'json', request);
}

model RemoveAccessPermissionByApisRequest {
  apiIds: string(name='ApiIds', position='Query'),
  appId: long(name='AppId', position='Query'),
  description?: string(name='Description', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', position='Query'),
}

model RemoveAccessPermissionByApisResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveAccessPermissionByApisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveAccessPermissionByApisResponseBody(name='body'),
}

async function removeAccessPermissionByApis(request: RemoveAccessPermissionByApisRequest): RemoveAccessPermissionByApisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveAccessPermissionByApis', 'POST', '/', 'json', false, 'json', request);
}

model RemoveAccessPermissionByAppsRequest {
  apiId: string(name='ApiId', position='Query'),
  appIds: string(name='AppIds', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', position='Query'),
}

model RemoveAccessPermissionByAppsResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveAccessPermissionByAppsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveAccessPermissionByAppsResponseBody(name='body'),
}

async function removeAccessPermissionByApps(request: RemoveAccessPermissionByAppsRequest): RemoveAccessPermissionByAppsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveAccessPermissionByApps', 'POST', '/', 'json', false, 'json', request);
}

model RemoveAllBlackListRequest {
  blackType: string(name='BlackType', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model RemoveAllBlackListResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveAllBlackListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveAllBlackListResponseBody(name='body'),
}

async function removeAllBlackList(request: RemoveAllBlackListRequest): RemoveAllBlackListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveAllBlackList', 'POST', '/', 'json', false, 'json', request);
}

model RemoveApiRuleRequest {
  apiIds?: string(name='ApiIds', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  ruleId: string(name='RuleId', position='Query'),
  ruleType: string(name='RuleType', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', position='Query'),
}

model RemoveApiRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveApiRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveApiRuleResponseBody(name='body'),
}

async function removeApiRule(request: RemoveApiRuleRequest): RemoveApiRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveApiRule', 'POST', '/', 'json', false, 'json', request);
}

model RemoveAppsFromApiRequest {
  apiId: string(name='ApiId', position='Query'),
  appIds: string(name='AppIds', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', position='Query'),
}

model RemoveAppsFromApiResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveAppsFromApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveAppsFromApiResponseBody(name='body'),
}

async function removeAppsFromApi(request: RemoveAppsFromApiRequest): RemoveAppsFromApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveAppsFromApi', 'POST', '/', 'json', false, 'json', request);
}

model RemoveBlackListRequest {
  blackContent: string(name='BlackContent', position='Query'),
  blackType: string(name='BlackType', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model RemoveBlackListResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveBlackListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveBlackListResponseBody(name='body'),
}

async function removeBlackList(request: RemoveBlackListRequest): RemoveBlackListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveBlackList', 'POST', '/', 'json', false, 'json', request);
}

model RemoveIpControlApisRequest {
  apiIds?: string(name='ApiIds', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  ipControlId: string(name='IpControlId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', position='Query'),
}

model RemoveIpControlApisResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveIpControlApisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveIpControlApisResponseBody(name='body'),
}

async function removeIpControlApis(request: RemoveIpControlApisRequest): RemoveIpControlApisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveIpControlApis', 'POST', '/', 'json', false, 'json', request);
}

model RemoveIpControlPolicyItemRequest {
  ipControlId: string(name='IpControlId', position='Query'),
  policyItemIds: string(name='PolicyItemIds', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model RemoveIpControlPolicyItemResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveIpControlPolicyItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveIpControlPolicyItemResponseBody(name='body'),
}

async function removeIpControlPolicyItem(request: RemoveIpControlPolicyItemRequest): RemoveIpControlPolicyItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveIpControlPolicyItem', 'POST', '/', 'json', false, 'json', request);
}

model ResetAppKeySecretRequest {
  appKey: string(name='AppKey', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ResetAppKeySecretResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResetAppKeySecretResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetAppKeySecretResponseBody(name='body'),
}

async function resetAppKeySecret(request: ResetAppKeySecretRequest): ResetAppKeySecretResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetAppKeySecret', 'POST', '/', 'json', false, 'json', request);
}

model ResetCustomizedRequest {
  apiId: string(name='ApiId', position='Query'),
  apiName: string(name='ApiName', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageId?: string(name='StageId', position='Query'),
  stageName: string(name='StageName', position='Query'),
}

model ResetCustomizedResponseBody = {
  requestId?: string(name='RequestId'),
  sdkDemos?: {
    sdkDemo?: [ 
    {
      callDemo?: string(name='CallDemo'),
      ideKey?: string(name='IdeKey'),
    }
  ](name='SdkDemo')
  }(name='SdkDemos'),
}

model ResetCustomizedResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetCustomizedResponseBody(name='body'),
}

async function resetCustomized(request: ResetCustomizedRequest): ResetCustomizedResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetCustomized', 'POST', '/', 'json', false, 'json', request);
}

model SdkGenerateRequest {
  appId?: long(name='AppId', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  language: string(name='Language', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model SdkGenerateResponseBody = {
  downloadLink?: string(name='DownloadLink'),
  requestId?: string(name='RequestId'),
}

model SdkGenerateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SdkGenerateResponseBody(name='body'),
}

async function sdkGenerate(request: SdkGenerateRequest): SdkGenerateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SdkGenerate', 'POST', '/', 'json', false, 'json', request);
}

model SdkGenerateByAppRequest {
  appId: long(name='AppId', position='Query'),
  language: string(name='Language', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model SdkGenerateByAppResponseBody = {
  downloadLink?: string(name='DownloadLink'),
  requestId?: string(name='RequestId'),
}

model SdkGenerateByAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SdkGenerateByAppResponseBody(name='body'),
}

async function sdkGenerateByApp(request: SdkGenerateByAppRequest): SdkGenerateByAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SdkGenerateByApp', 'POST', '/', 'json', false, 'json', request);
}

model SdkGenerateByGroupRequest {
  groupId: string(name='GroupId', position='Query'),
  language: string(name='Language', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model SdkGenerateByGroupResponseBody = {
  downloadLink?: string(name='DownloadLink'),
  requestId?: string(name='RequestId'),
}

model SdkGenerateByGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SdkGenerateByGroupResponseBody(name='body'),
}

async function sdkGenerateByGroup(request: SdkGenerateByGroupRequest): SdkGenerateByGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SdkGenerateByGroup', 'POST', '/', 'json', false, 'json', request);
}

model SetAccessPermissionByApisRequest {
  apiIds: string(name='ApiIds', position='Query'),
  appId: long(name='AppId', position='Query'),
  description?: string(name='Description', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', position='Query'),
}

model SetAccessPermissionByApisResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetAccessPermissionByApisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetAccessPermissionByApisResponseBody(name='body'),
}

async function setAccessPermissionByApis(request: SetAccessPermissionByApisRequest): SetAccessPermissionByApisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetAccessPermissionByApis', 'POST', '/', 'json', false, 'json', request);
}

model SetAccessPermissionsRequest {
  apiId: string(name='ApiId', position='Query'),
  appIds: string(name='AppIds', position='Query'),
  description?: string(name='Description', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', position='Query'),
}

model SetAccessPermissionsResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetAccessPermissionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetAccessPermissionsResponseBody(name='body'),
}

async function setAccessPermissions(request: SetAccessPermissionsRequest): SetAccessPermissionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetAccessPermissions', 'POST', '/', 'json', false, 'json', request);
}

model SetApiRuleRequest {
  apiIds: string(name='ApiIds', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  ruleId: string(name='RuleId', position='Query'),
  ruleType: string(name='RuleType', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', position='Query'),
}

model SetApiRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetApiRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetApiRuleResponseBody(name='body'),
}

async function setApiRule(request: SetApiRuleRequest): SetApiRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetApiRule', 'POST', '/', 'json', false, 'json', request);
}

model SetDomainRequest {
  certificateBody?: string(name='CertificateBody', position='Query'),
  certificateName?: string(name='CertificateName', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  privateKey?: string(name='PrivateKey', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model SetDomainResponseBody = {
  domainBindingStatus?: string(name='DomainBindingStatus'),
  domainLegalStatus?: string(name='DomainLegalStatus'),
  domainName?: string(name='DomainName'),
  domainRemark?: string(name='DomainRemark'),
  domainWebSocketStatus?: string(name='DomainWebSocketStatus'),
  groupId?: string(name='GroupId'),
  requestId?: string(name='RequestId'),
  subDomain?: string(name='SubDomain'),
}

model SetDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetDomainResponseBody(name='body'),
}

async function setDomain(request: SetDomainRequest): SetDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDomain', 'POST', '/', 'json', false, 'json', request);
}

model SetDomainCertificateRequest {
  certificateBody?: string(name='CertificateBody', position='Query'),
  certificateName: string(name='CertificateName', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  privateKey?: string(name='PrivateKey', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model SetDomainCertificateResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetDomainCertificateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetDomainCertificateResponseBody(name='body'),
}

async function setDomainCertificate(request: SetDomainCertificateRequest): SetDomainCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDomainCertificate', 'POST', '/', 'json', false, 'json', request);
}

model SetDomainWebSocketStatusRequest {
  actionValue: string(name='ActionValue', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model SetDomainWebSocketStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetDomainWebSocketStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetDomainWebSocketStatusResponseBody(name='body'),
}

async function setDomainWebSocketStatus(request: SetDomainWebSocketStatusRequest): SetDomainWebSocketStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDomainWebSocketStatus', 'POST', '/', 'json', false, 'json', request);
}

model SetIpControlApisRequest {
  apiIds: string(name='ApiIds', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  ipControlId: string(name='IpControlId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', position='Query'),
}

model SetIpControlApisResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetIpControlApisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetIpControlApisResponseBody(name='body'),
}

async function setIpControlApis(request: SetIpControlApisRequest): SetIpControlApisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetIpControlApis', 'POST', '/', 'json', false, 'json', request);
}

model SetMockIntegrationRequest {
  apiId: string(name='ApiId', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  mock: string(name='Mock', position='Query'),
  mockResult?: string(name='MockResult', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model SetMockIntegrationResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetMockIntegrationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetMockIntegrationResponseBody(name='body'),
}

async function setMockIntegration(request: SetMockIntegrationRequest): SetMockIntegrationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetMockIntegration', 'POST', '/', 'json', false, 'json', request);
}

model SwitchApiRequest {
  apiId: string(name='ApiId', position='Query'),
  description: string(name='Description', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  historyVersion: string(name='HistoryVersion', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', position='Query'),
}

model SwitchApiResponseBody = {
  requestId?: string(name='RequestId'),
}

model SwitchApiResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SwitchApiResponseBody(name='body'),
}

async function switchApi(request: SwitchApiRequest): SwitchApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SwitchApi', 'POST', '/', 'json', false, 'json', request);
}

model VpcDescribeAccessesRequest {
  instanceId?: string(name='InstanceId', position='Query'),
  instancePort?: string(name='InstancePort', position='Query'),
  name?: string(name='Name', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  vpcId?: string(name='VpcId', position='Query'),
}

model VpcDescribeAccessesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  vpcAccessAttributes?: {
    vpcAccessAttribute?: [ 
    {
      createdTime?: string(name='CreatedTime'),
      id?: string(name='Id'),
      instanceId?: string(name='InstanceId'),
      modifiedTime?: string(name='ModifiedTime'),
      name?: string(name='Name'),
      port?: string(name='Port'),
      regionId?: string(name='RegionId'),
      status?: string(name='Status'),
      userId?: string(name='UserId'),
      vpcId?: string(name='VpcId'),
    }
  ](name='VpcAccessAttribute')
  }(name='VpcAccessAttributes'),
}

model VpcDescribeAccessesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: VpcDescribeAccessesResponseBody(name='body'),
}

async function vpcDescribeAccesses(request: VpcDescribeAccessesRequest): VpcDescribeAccessesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VpcDescribeAccesses', 'POST', '/', 'json', false, 'json', request);
}

model VpcGrantAccessRequest {
  instanceId: string(name='InstanceId', position='Query'),
  instancePort: string(name='InstancePort', position='Query'),
  name: string(name='Name', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  token?: string(name='Token', position='Query'),
  vpcId: string(name='VpcId', position='Query'),
}

model VpcGrantAccessResponseBody = {
  requestId?: string(name='RequestId'),
}

model VpcGrantAccessResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: VpcGrantAccessResponseBody(name='body'),
}

async function vpcGrantAccess(request: VpcGrantAccessRequest): VpcGrantAccessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VpcGrantAccess', 'POST', '/', 'json', false, 'json', request);
}

model VpcModifyAccessRequest {
  instanceId: string(name='InstanceId', position='Query'),
  instancePort: string(name='InstancePort', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  token?: string(name='Token', position='Query'),
  vpcId: string(name='VpcId', position='Query'),
}

model VpcModifyAccessResponseBody = {
  requestId?: string(name='RequestId'),
}

model VpcModifyAccessResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: VpcModifyAccessResponseBody(name='body'),
}

async function vpcModifyAccess(request: VpcModifyAccessRequest): VpcModifyAccessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VpcModifyAccess', 'POST', '/', 'json', false, 'json', request);
}

model VpcRevokeAccessRequest {
  instanceId: string(name='InstanceId', position='Query'),
  instancePort: string(name='InstancePort', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  token?: string(name='Token', position='Query'),
  vpcId: string(name='VpcId', position='Query'),
}

model VpcRevokeAccessResponseBody = {
  requestId?: string(name='RequestId'),
}

model VpcRevokeAccessResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: VpcRevokeAccessResponseBody(name='body'),
}

async function vpcRevokeAccess(request: VpcRevokeAccessRequest): VpcRevokeAccessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VpcRevokeAccess', 'POST', '/', 'json', false, 'json', request);
}

