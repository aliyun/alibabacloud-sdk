/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'EmrStudio';
  @version = '2024-04-30';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreateWorkflowRequest {
  projectId: string(name='projectId', example='p-n72kong0832****', position='Path'),
  alertGroupId?: string(name='alertGroupId', example='ag-v7n2gp3vv3j****', position='Query'),
  alertStrategy?: string(name='alertStrategy', example='NONE', position='Query'),
  taskDefinitionJsonValue?: string(name='taskDefinitionJsonValue', position='Body'),
  taskRelationJsonValue?: string(name='taskRelationJsonValue', position='Body'),
  cronExpr?: string(name='cronExpr', example='0 0 * * * ? *', position='Query'),
  description?: string(name='description', example='test', position='Query'),
  executionType?: string(name='executionType', example='PARALLEL', position='Query'),
  failureStrategy?: string(name='failureStrategy', example='END', position='Query'),
  name: string(name='name', example='test', position='Query'),
  parentDirectoryId?: string(name='parentDirectoryId', example='wd-v7n2gp3vv3j****', position='Query'),
  resourceGroupId?: string(name='resourceGroupId', example='wg-acfmv4opbs****', position='Query'),
  scheduleEndTime?: string(name='scheduleEndTime', example='2024-01-01 00:00:00', position='Query'),
  scheduleStartTime?: string(name='scheduleStartTime', example='2024-01-01 00:00:00', position='Query'),
  scheduleState?: string(name='scheduleState', example='OFFLINE', position='Query'),
  taskDefinitionJson: string(name='taskDefinitionJson', example='[{"taskId":"t1","name":"t1","taskParams":{"rawScript":"echo 1"},"taskType":"SHELL"}]', position='Query'),
  taskRelationJson: string(name='taskRelationJson', example='[{"preTaskId":"0", "postTaskId":"t1"}]', position='Query'),
  timeZone?: string(name='timeZone', example='Asia/Shanghai', position='Query'),
  timeout?: int32(name='timeout', example='10', position='Query'),
  workflowInstancePriority?: string(name='workflowInstancePriority', example='MEDIUM', position='Query'),
  workflowParams?: string(name='workflowParams', example='[{"prop":"key1","value":"value1"}]', position='Query'),
  workspaceId: string(name='workspaceId', example='12345', position='Query'),
}

model CreateWorkflowResponseBody = {
  data?: {
    workflowId?: string(name='workflowId', example='w-acfmv4opbs****'),
  }(name='data'),
  requestId?: string(name='requestId', description='Id of the request', example='9E3A7161-EB7B-172B-8D18-FFB06BA38***'),
  success?: boolean(name='success', example='True'),
}

model CreateWorkflowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWorkflowResponseBody(name='body'),
}

async function createWorkflow(request: CreateWorkflowRequest): CreateWorkflowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateWorkflow', 'POST', '/dolphinscheduler/v3/projects/{projectId}/workflows', 'json', false, 'json', request);
}

model DeleteWorkflowRequest {
  projectId: string(name='projectId', example='p-3q9jo749ne5****', position='Path'),
  workflowId: string(name='workflowId', example='w-3q9jo749ne5****', position='Path'),
  workspaceId: string(name='workspaceId', example='12345', position='Query'),
}

model DeleteWorkflowResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  success?: boolean(name='success', example='True'),
}

model DeleteWorkflowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteWorkflowResponseBody(name='body'),
}

async function deleteWorkflow(request: DeleteWorkflowRequest): DeleteWorkflowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteWorkflow', 'DELETE', '/dolphinscheduler/v3/projects/{projectId}/workflows/{workflowId}', 'json', false, 'json', request);
}

model DescribeManualTaskRequest {
  projectId: string(name='projectId', example='p-3q9jo749ne5****', position='Path'),
  manualTaskId: string(name='manualTaskId', example='mt-3q9jo749ne5****', position='Path'),
  workspaceId: string(name='workspaceId', example='123***', position='Query'),
}

model DescribeManualTaskResponseBody = {
  createTime?: string(name='CreateTime', example='2024-03-27 00:00:00'),
  description?: string(name='Description', example='test'),
  manualTaskId?: string(name='ManualTaskId', example='mt-3q9jo749ne5****'),
  manualTaskName?: string(name='ManualTaskName', example='test'),
  parentDirectoryId?: string(name='ParentDirectoryId', example='mtd-oy98v7n43el****'),
  projectId?: string(name='ProjectId', example='p-3q9jo749ne5****'),
  resourceIds?: string(name='ResourceIds', example='r-oy98v7n43el****'),
  taskParams?: string(name='TaskParams', example='{
    "yarnUser": "",
    "conditionResult": "null",
    "rawScript": "sleep 300",
    "submitOnYarnFlag": false,
    "emrClusterId": "",
    "yarnPriority": "",
    "dependence": "null",
    "yarnMemory": "",
    "localParams": [],
    "switchResult": "null",
    "resourceList": [],
    "yarnQueue": "",
    "yarnVCores": "",
    "associateManualTaskFlag": false
}'),
  taskType?: string(name='TaskType', example='SHELL'),
  updateTime?: string(name='UpdateTime', example='2024-03-27 00:00:00'),
  requestId?: string(name='requestId', description='Id of the request', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model DescribeManualTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeManualTaskResponseBody(name='body'),
}

async function describeManualTask(request: DescribeManualTaskRequest): DescribeManualTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeManualTask', 'GET', '/dolphinscheduler/v3/projects/{projectId}/manualTasks/{manualTaskId}', 'json', false, 'json', request);
}

model DescribeManualTaskInstanceRequest {
  manualTaskInstanceId: string(name='manualTaskInstanceId', example='mti-0k5vype05xm****', position='Path'),
  projectId: string(name='projectId', example='p-3q9jo749ne5****', position='Path'),
  workspaceId: string(name='workspaceId', example='123***', position='Query'),
}

model DescribeManualTaskInstanceResponseBody = {
  emrClusterId?: string(name='EmrClusterId', example='c-b933c5aac7f7***'),
  endTime?: string(name='EndTime', example='2024-03-27 00:00:00'),
  externalAppId?: string(name='ExternalAppId', example='application_123_***'),
  manualTaskInstanceId?: string(name='ManualTaskInstanceId', example='mti-0k5vype05xm****'),
  manualTaskInstanceName?: string(name='ManualTaskInstanceName', example='test'),
  resourceGroupId?: string(name='ResourceGroupId', example='wg-123abc***'),
  startTime?: string(name='StartTime', example='2024-03-27 00:00:00'),
  status?: string(name='Status', example='SUCCESS'),
  submitTime?: string(name='SubmitTime', example='2024-03-27 00:00:00'),
  taskParams?: string(name='TaskParams', example='{
    "yarnUser": "",
    "conditionResult": "null",
    "rawScript": "sleep 300",
    "submitOnYarnFlag": false,
    "emrClusterId": "",
    "yarnPriority": "",
    "dependence": "null",
    "yarnMemory": "",
    "localParams": [],
    "switchResult": "null",
    "resourceList": [],
    "yarnQueue": "",
    "yarnVCores": "",
    "associateManualTaskFlag": false
}'),
  taskType?: string(name='TaskType', example='SHELL'),
  requestId?: string(name='requestId', description='Id of the request', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model DescribeManualTaskInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeManualTaskInstanceResponseBody(name='body'),
}

async function describeManualTaskInstance(request: DescribeManualTaskInstanceRequest): DescribeManualTaskInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeManualTaskInstance', 'GET', '/dolphinscheduler/v3/projects/{projectId}/manualTaskInstances/{manualTaskInstanceId}', 'json', false, 'json', request);
}

model DescribeProjectRequest {
  projectId: string(name='projectId', example='p-3q9jo749ne5****', position='Path'),
  workspaceId: string(name='workspaceId', example='1234', position='Query'),
}

model DescribeProjectResponseBody = {
  description: string(name='description', example='this is a project description'),
  name: string(name='name', example='test_project_name'),
  projectId?: string(name='projectId', example='p-3q9jo749ne5****'),
  requestId?: string(name='requestId', example='B897B94B-6754-5D09-AB8C-2E8186CCADC0'),
}

model DescribeProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeProjectResponseBody(name='body'),
}

async function describeProject(request: DescribeProjectRequest): DescribeProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeProject', 'GET', '/dolphinscheduler/v3/projects/{projectId}', 'json', false, 'json', request);
}

model DescribeTaskRequest {
  workflowId: string(name='workflowId', example='w-3q9jo749ne5****', position='Path'),
  projectId: string(name='projectId', example='p-3q9jo749ne5****', position='Path'),
  taskId: string(name='taskId', example='t-3q9jo749ne5****', position='Path'),
  workspaceId: string(name='workspaceId', example='123***', position='Query'),
}

model DescribeTaskResponseBody = {
  createTime?: string(name='CreateTime', example='2024-03-27 00:00:00'),
  delayTime?: int32(name='DelayTime', example='0'),
  description?: string(name='Description', example='test'),
  failRetryInterval?: int32(name='FailRetryInterval', example='1'),
  failRetryTimes?: int32(name='FailRetryTimes', example='0'),
  flag?: string(name='Flag', example='YES'),
  projectId?: string(name='ProjectId', example='p-3q9jo749ne5****'),
  resourceIds?: string(name='ResourceIds', example='r-oy98v7n43el****'),
  taskId?: string(name='TaskId', example='t-3q9jo749ne5****'),
  taskName?: string(name='TaskName', example='test'),
  taskParams?: string(name='TaskParams', example='{
    "yarnUser": "",
    "conditionResult": "null",
    "rawScript": "sleep 300",
    "submitOnYarnFlag": false,
    "emrClusterId": "",
    "yarnPriority": "",
    "dependence": "null",
    "yarnMemory": "",
    "localParams": [],
    "switchResult": "null",
    "resourceList": [],
    "yarnQueue": "",
    "yarnVCores": "",
    "associateManualTaskFlag": false
}'),
  taskPriority?: string(name='TaskPriority', example='MEDIUM'),
  taskType?: string(name='TaskType', example='SHELL'),
  timeout?: int32(name='Timeout', example='10'),
  timeoutFlag?: string(name='TimeoutFlag', example='CLOSE'),
  timeoutNotifyStrategy?: string(name='TimeoutNotifyStrategy', example='WARN'),
  updateTime?: string(name='UpdateTime', example='2024-03-27 00:00:00'),
  version?: string(name='Version', example='1'),
  requestId?: string(name='requestId', description='Id of the request', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model DescribeTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTaskResponseBody(name='body'),
}

async function describeTask(request: DescribeTaskRequest): DescribeTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeTask', 'GET', '/dolphinscheduler/v3/projects/{projectId}/workflows/{workflowId}/tasks/{taskId}', 'json', false, 'json', request);
}

model DescribeTaskInstanceRequest {
  projectId: string(name='projectId', example='p-3q9jo749ne5****', position='Path'),
  workflowInstanceId: string(name='workflowInstanceId', example='wi-3q9jo749ne5****', position='Path'),
  taskInstanceId: string(name='taskInstanceId', example='ti-3q9jo749ne5****', position='Path'),
  workspaceId: string(name='workspaceId', example='123***', position='Query'),
}

model DescribeTaskInstanceResponseBody = {
  dryRun?: string(name='DryRun', example='0'),
  emrClusterId?: string(name='EmrClusterId', example='c-b933c5aac7f7***'),
  endTime?: string(name='EndTime', example='2024-03-27 00:00:00'),
  externalAppId?: string(name='ExternalAppId', example='application_123_***'),
  resourceGroupId?: string(name='ResourceGroupId', example='wg-123abc***'),
  retryTimes?: int32(name='RetryTimes', example='0'),
  startTime?: string(name='StartTime', example='2024-03-27 00:00:00'),
  status?: string(name='Status', example='SUCCESS'),
  submitTime?: string(name='SubmitTime', example='2024-03-27 00:00:00'),
  taskId?: string(name='TaskId', example='t-3q9jo749ne5****'),
  taskInstanceId?: string(name='TaskInstanceId', example='ti-3q9jo749ne5****'),
  taskInstanceName?: string(name='TaskInstanceName', example='test'),
  taskParams?: string(name='TaskParams', example='{
    "yarnUser": "",
    "conditionResult": "null",
    "rawScript": "sleep 300",
    "submitOnYarnFlag": false,
    "emrClusterId": "",
    "yarnPriority": "",
    "dependence": "null",
    "yarnMemory": "",
    "localParams": [],
    "switchResult": "null",
    "resourceList": [],
    "yarnQueue": "",
    "yarnVCores": "",
    "associateManualTaskFlag": false
}'),
  taskType?: string(name='TaskType', example='SHELL'),
  taskVersion?: string(name='TaskVersion', example='1'),
  workflowInstanceId?: string(name='WorkflowInstanceId', example='wi-3q9jo749ne5****'),
  requestId?: string(name='requestId', description='Id of the request', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
}

model DescribeTaskInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTaskInstanceResponseBody(name='body'),
}

async function describeTaskInstance(request: DescribeTaskInstanceRequest): DescribeTaskInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeTaskInstance', 'GET', '/dolphinscheduler/v3/projects/{projectId}/workflows/{workflowInstanceId}/taskInstances/{taskInstanceId}', 'json', false, 'json', request);
}

model DescribeWorkflowRequest {
  projectId: string(name='projectId', example='p-n72kong0832****', position='Path'),
  workflowId: string(name='workflowId', example='w-n72kong0832****', position='Path'),
  workspaceId: string(name='workspaceId', example='12345', position='Query'),
}

model DescribeWorkflowResponseBody = {
  requestId?: string(name='requestId', example='611AD6E6-BFE3-5897-AA12-569F79DBAF9B'),
  schedule?: {
    alertGroupId?: string(name='alertGroupId', example='ag-n72kong0832****'),
    alertStrategy?: string(name='alertStrategy', example='NONE'),
    cronExpr?: string(name='cronExpr', example='0 0 * * * ? *'),
    emrClusterId?: string(name='emrClusterId', example='C-15F7AB9B53F1****'),
    failureStrategy?: string(name='failureStrategy', example='END'),
    resourceGroupId?: string(name='resourceGroupId', example='wg-susqimrr649x****'),
    scheduleEndTime?: string(name='scheduleEndTime', example='2024-01-01 00:00:00'),
    scheduleStartTime?: string(name='scheduleStartTime', example='2024-01-01 00:00:00'),
    scheduleState?: string(name='scheduleState', example='OFFLINE'),
    timeZone?: string(name='timeZone', example='Asia/Shanghai'),
    workflowInstancePriority?: string(name='workflowInstancePriority', example='MEDIUM'),
  }(name='schedule'),
  taskRelations?: [ 
    {
      postTaskId?: string(name='postTaskId', example='t-n72kong0832****'),
      preTaskId?: string(name='preTaskId', example='t-n72kong0832****'),
    }
  ](name='taskRelations'),
  tasks?: [ 
    {
      description?: string(name='description', example='task description'),
      name?: string(name='name', example='task_name'),
      taskId?: string(name='taskId', example='t-n72kong0832****'),
      version?: int32(name='version', example='1'),
    }
  ](name='tasks'),
  workflow?: {
    createTime?: string(name='createTime', example='2024-01-01 00:00:00'),
    description?: string(name='description', example='test'),
    executionType?: string(name='executionType', example='PARALLEL'),
    name?: string(name='name', example='test'),
    parentDirectoryId?: string(name='parentDirectoryId', example='wd-n72kong0832****'),
    timeout?: int32(name='timeout', example='0'),
    updateTime?: string(name='updateTime', example='2024-01-01 00:00:00'),
    workflowId?: string(name='workflowId', example='w-n72kong0832****'),
    workflowParams?: string(name='workflowParams', example='[{"prop":"key1","value":"value1"}]'),
  }(name='workflow'),
}

model DescribeWorkflowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeWorkflowResponseBody(name='body'),
}

async function describeWorkflow(request: DescribeWorkflowRequest): DescribeWorkflowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeWorkflow', 'GET', '/dolphinscheduler/v3/projects/{projectId}/workflows/{workflowId}', 'json', false, 'json', request);
}

model DescribeWorkflowInstanceRequest {
  projectId: string(name='projectId', example='p-3q9jo749ne5****', position='Path'),
  workflowInstanceId: string(name='workflowInstanceId', example='wf-3q9jo749ne5****', position='Path'),
  workspaceId: string(name='workspaceId', example='12345', position='Query'),
}

model DescribeWorkflowInstanceResponseBody = {
  alertGroupId?: string(name='alertGroupId', example='ag-n72kong0832****'),
  alertStrategy?: string(name='alertStrategy', example='NONE'),
  emrClusterId?: string(name='emrClusterId', example='c-047fa6bbe732****'),
  endTime?: string(name='endTime', example='2024-03-27 00:00:00'),
  failureStrategy?: string(name='failureStrategy', example='END'),
  isComplementData?: boolean(name='isComplementData', example='false'),
  name?: string(name='name', example='workflow_instance_name'),
  requestId?: string(name='requestId', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  resourceGroupId?: string(name='resourceGroupId', example='wg-susqimrr649x****'),
  restartTime?: string(name='restartTime', example='2024-03-27 00:00:00'),
  runTimes?: int32(name='runTimes', example='1'),
  scheduleTime?: string(name='scheduleTime', example='2024-03-27 00:00:00'),
  startTime?: string(name='startTime', example='2024-03-27 00:00:00'),
  status?: string(name='status', example='SUCCESS'),
  timeout?: int32(name='timeout', example='0'),
  workflowId?: string(name='workflowId', example='w-3q9jo749ne5****'),
  workflowInstanceId?: string(name='workflowInstanceId', example='wi-3q9jo749ne5****'),
  workflowInstancePriority?: string(name='workflowInstancePriority', example='MEDIUM'),
  workflowVersion?: int32(name='workflowVersion', example='1'),
}

model DescribeWorkflowInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeWorkflowInstanceResponseBody(name='body'),
}

async function describeWorkflowInstance(request: DescribeWorkflowInstanceRequest): DescribeWorkflowInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeWorkflowInstance', 'GET', '/dolphinscheduler/v3/projects/{projectId}/workflowInstances/{workflowInstanceId}', 'json', false, 'json', request);
}

model ListManualTaskInstancesRequest {
  projectId: string(name='projectId', example='p-3q9jo749ne5****', position='Path'),
  endTime?: string(name='endTime', example='2024-03-27 00:00:00', position='Query'),
  maxResults?: int32(name='maxResults', example='10', position='Query'),
  nextToken?: string(name='nextToken', example='123abc***', position='Query'),
  searchVal?: string(name='searchVal', example='test', position='Query'),
  startTime?: string(name='startTime', example='2024-03-27 00:00:00', position='Query'),
  status?: string(name='status', example='SUCCESS', position='Query'),
  workspaceId: string(name='workspaceId', example='123***', position='Query'),
}

model ListManualTaskInstancesResponseBody = {
  data?: [ 
    {
      emrClusterId?: string(name='EmrClusterId', example='c-b933c5aac7f7***'),
      endTime?: string(name='EndTime', example='2024-03-27 00:00:00'),
      externalAppId?: string(name='ExternalAppId', example='application_123_***'),
      manualTaskInstanceId?: string(name='ManualTaskInstanceId', example='mti-3q9jo749ne5****'),
      manualTaskInstanceName?: string(name='ManualTaskInstanceName', example='test'),
      resourceGroupId?: string(name='ResourceGroupId', example='wg-3q9jo749ne5****'),
      startTime?: string(name='StartTime', example='2024-03-27 00:00:00'),
      status?: string(name='Status', example='SUCCESS'),
      submitTime?: string(name='SubmitTime', example='2024-03-27 00:00:00'),
      taskParams?: string(name='TaskParams', example='{
    "yarnUser": "",
    "conditionResult": "null",
    "rawScript": "sleep 300",
    "submitOnYarnFlag": false,
    "emrClusterId": "",
    "yarnPriority": "",
    "dependence": "null",
    "yarnMemory": "",
    "localParams": [],
    "switchResult": "null",
    "resourceList": [],
    "yarnQueue": "",
    "yarnVCores": "",
    "associateManualTaskFlag": false
}'),
      taskType?: string(name='TaskType', example='SHELL'),
    }
  ](name='data'),
  nextToken?: string(name='nextToken', example='123abc***'),
  requestId?: string(name='requestId', description='Id of the request', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  totalSize?: int32(name='totalSize', example='10'),
}

model ListManualTaskInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListManualTaskInstancesResponseBody(name='body'),
}

async function listManualTaskInstances(request: ListManualTaskInstancesRequest): ListManualTaskInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListManualTaskInstances', 'GET', '/dolphinscheduler/v3/projects/{projectId}/manualTaskInstances', 'json', false, 'json', request);
}

model ListManualTasksRequest {
  projectId: string(name='projectId', example='p-3q9jo749ne5****', position='Path'),
  maxResults?: int32(name='maxResults', example='10', position='Query'),
  nextToken?: string(name='nextToken', example='123abc***', position='Query'),
  searchVal?: string(name='searchVal', example='test', position='Query'),
  taskType?: string(name='taskType', example='SHELL', position='Query'),
  workspaceId: string(name='workspaceId', example='123***', position='Query'),
}

model ListManualTasksResponseBody = {
  data?: [ 
    {
      createTime?: string(name='CreateTime', example='2024-03-27 00:00:00'),
      description?: string(name='Description', example='test'),
      manualTaskId?: string(name='ManualTaskId', example='mt-3q9jo749ne5****'),
      manualTaskName?: string(name='ManualTaskName', example='test'),
      parentDirectoryId?: string(name='ParentDirectoryId', example='mtd-oy98v7n43el****'),
      projectId?: string(name='ProjectId', example='p-3q9jo749ne5****'),
      resourceIds?: string(name='ResourceIds', example='r-oy98v7n43el****'),
      taskParams?: string(name='TaskParams', example='{
    "yarnUser": "",
    "conditionResult": "null",
    "rawScript": "sleep 300",
    "submitOnYarnFlag": false,
    "emrClusterId": "",
    "yarnPriority": "",
    "dependence": "null",
    "yarnMemory": "",
    "localParams": [],
    "switchResult": "null",
    "resourceList": [],
    "yarnQueue": "",
    "yarnVCores": "",
    "associateManualTaskFlag": false
}'),
      taskType?: string(name='TaskType', example='SHELL'),
      updateTime?: string(name='UpdateTime', example='2024-03-27 00:00:00'),
    }
  ](name='data'),
  nextToken?: string(name='nextToken', example='123abc***'),
  requestId?: string(name='requestId', description='Id of the request', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  totalSize?: int32(name='totalSize', example='10'),
}

model ListManualTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListManualTasksResponseBody(name='body'),
}

async function listManualTasks(request: ListManualTasksRequest): ListManualTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListManualTasks', 'GET', '/dolphinscheduler/v3/projects/{projectId}/manualTasks', 'json', false, 'json', request);
}

model ListProjectsRequest {
  maxResults?: int32(name='maxResults', example='10', position='Query'),
  nextToken?: string(name='nextToken', example='123abc***', position='Query'),
  searchVal?: string(name='searchVal', example='test', position='Query'),
  workspaceId: string(name='workspaceId', example='12345', position='Query'),
}

model ListProjectsResponseBody = {
  data?: [ 
    {
      description?: string(name='description', example='test'),
      name?: string(name='name', example='project_name'),
      projectId?: string(name='projectId', example='p-3q9jo749ne5****'),
    }
  ](name='data'),
  nextToken?: string(name='nextToken', example='123abc***'),
  requestId?: string(name='requestId', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  totalSize?: int32(name='totalSize', example='10'),
}

model ListProjectsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProjectsResponseBody(name='body'),
}

async function listProjects(request: ListProjectsRequest): ListProjectsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProjects', 'GET', '/dolphinscheduler/v3/projects', 'json', false, 'json', request);
}

model ListTaskInstancesRequest {
  projectId: string(name='projectId', example='p-3q9jo749ne5****', position='Path'),
  endTime?: string(name='endTime', example='2024-03-27 00:00:00', position='Query'),
  maxResults?: int32(name='maxResults', example='10', position='Query'),
  nextToken?: string(name='nextToken', example='123abc***', position='Query'),
  searchVal?: string(name='searchVal', example='test', position='Query'),
  startTime?: string(name='startTime', example='2024-03-27 00:00:00', position='Query'),
  status?: string(name='status', example='SUCCESS', position='Query'),
  workflowInstanceId?: string(name='workflowInstanceId', example='wi-3q9jo749ne5****', position='Query'),
  workspaceId: string(name='workspaceId', example='123***', position='Query'),
}

model ListTaskInstancesResponseBody = {
  data?: [ 
    {
      dryRun?: string(name='DryRun', example='0'),
      emrClusterId?: string(name='EmrClusterId', example='c-b933c5aac7f7***'),
      endTime?: string(name='EndTime', example='2024-03-27 00:00:00'),
      externalAppId?: string(name='ExternalAppId', example='application_123_***'),
      resourceGroupId?: string(name='ResourceGroupId', example='wg-3q9jo749ne5****'),
      retryTimes?: int32(name='RetryTimes', example='0'),
      startTime?: string(name='StartTime', example='2024-03-27 00:00:00'),
      status?: string(name='Status', example='SUCCESS'),
      submitTime?: string(name='SubmitTime', example='2024-03-27 00:00:00'),
      taskId?: string(name='TaskId', example='t-3q9jo749ne5****'),
      taskInstanceId?: string(name='TaskInstanceId', example='ti-3q9jo749ne5****'),
      taskInstanceName?: string(name='TaskInstanceName', example='test'),
      taskParams?: string(name='TaskParams', example='{
    "yarnUser": "",
    "conditionResult": "null",
    "rawScript": "sleep 300",
    "submitOnYarnFlag": false,
    "emrClusterId": "",
    "yarnPriority": "",
    "dependence": "null",
    "yarnMemory": "",
    "localParams": [],
    "switchResult": "null",
    "resourceList": [],
    "yarnQueue": "",
    "yarnVCores": "",
    "associateManualTaskFlag": false
}'),
      taskType?: string(name='TaskType', example='SHELL'),
      taskVersion?: string(name='TaskVersion', example='1'),
      workflowInstanceId?: string(name='WorkflowInstanceId', example='wi-3q9jo749ne5****'),
    }
  ](name='data'),
  nextToken?: string(name='nextToken', example='123abc***'),
  requestId?: string(name='requestId', description='Id of the request', example='9E3A7161-EB7B-172B-8D18-FFB06BA38***'),
  totalSize?: int32(name='totalSize', example='10'),
}

model ListTaskInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTaskInstancesResponseBody(name='body'),
}

async function listTaskInstances(request: ListTaskInstancesRequest): ListTaskInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTaskInstances', 'GET', '/dolphinscheduler/v3/projects/{projectId}/taskInstances', 'json', false, 'json', request);
}

model ListTasksRequest {
  projectId: string(name='projectId', example='p-3q9jo749ne5****', position='Path'),
  maxResults?: string(name='maxResults', example='10', position='Query'),
  nextToken?: string(name='nextToken', example='123abc***', position='Query'),
  searchVal?: string(name='searchVal', example='test', position='Query'),
  taskType?: string(name='taskType', example='SHELL', position='Query'),
  workflowId?: string(name='workflowId', example='w-n72kong0832****', position='Query'),
  workspaceId: string(name='workspaceId', example='123***', position='Query'),
}

model ListTasksResponseBody = {
  data?: [ 
    {
      createTime?: string(name='CreateTime', example='2024-03-27 00:00:00'),
      delayTime?: int32(name='DelayTime', example='0'),
      description?: string(name='Description', example='test'),
      failRetryInterval?: int32(name='FailRetryInterval', example='1'),
      failRetryTimes?: int32(name='FailRetryTimes', example='0'),
      flag?: string(name='Flag', example='YES'),
      projectId?: string(name='ProjectId', example='p-3q9jo749ne5****'),
      resourceIds?: string(name='ResourceIds', example='r-3q9jo749ne5****'),
      taskId?: string(name='TaskId', example='t-3q9jo749ne5****'),
      taskName?: string(name='TaskName', example='test'),
      taskParams?: string(name='TaskParams', example='{
    "yarnUser": "",
    "conditionResult": "null",
    "rawScript": "sleep 300",
    "submitOnYarnFlag": false,
    "emrClusterId": "",
    "yarnPriority": "",
    "dependence": "null",
    "yarnMemory": "",
    "localParams": [],
    "switchResult": "null",
    "resourceList": [],
    "yarnQueue": "",
    "yarnVCores": "",
    "associateManualTaskFlag": false
}'),
      taskPriority?: string(name='TaskPriority', example='MEDIUM'),
      taskType?: string(name='TaskType', example='SHELL'),
      timeout?: int32(name='Timeout', example='0'),
      timeoutFlag?: string(name='TimeoutFlag', example='CLOSE'),
      timeoutNotifyStrategy?: string(name='TimeoutNotifyStrategy', example='WARN'),
      updateTime?: string(name='UpdateTime', example='2024-03-27 00:00:00'),
      version?: string(name='Version', example='1'),
    }
  ](name='data'),
  nextToken?: string(name='nextToken', example='123abc***'),
  requestId?: string(name='requestId', description='Id of the request', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  totalSize?: int32(name='totalSize', example='10'),
}

model ListTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTasksResponseBody(name='body'),
}

async function listTasks(request: ListTasksRequest): ListTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTasks', 'GET', '/dolphinscheduler/v3/projects/{projectId}/tasks', 'json', false, 'json', request);
}

model ListWorkflowInstancesRequest {
  projectId: string(name='projectId', example='p-3q9jo749ne5****', position='Path'),
  endTime?: string(name='endTime', example='2024-03-27 00:00:00', position='Query'),
  maxResults?: int32(name='maxResults', example='10', position='Query'),
  nextToken?: string(name='nextToken', example='123abc***', position='Query'),
  startTime?: string(name='startTime', example='2024-03-27 00:00:00', position='Query'),
  status?: string(name='status', example='SUCCESS', position='Query'),
  workflowId?: string(name='workflowId', example='w-3q9jo749ne5****', position='Query'),
  workspaceId: string(name='workspaceId', example='12345', position='Query'),
}

model ListWorkflowInstancesResponseBody = {
  data?: [ 
    {
      endTime?: string(name='endTime', example='2024-01-01 00:00:00'),
      name?: string(name='name', example='workflow_instance_name'),
      scheduleTime?: string(name='scheduleTime', example='2024-01-01 00:00:00'),
      startTime?: string(name='startTime', example='2024-01-01 00:00:00'),
      status?: string(name='status', example='SUCCESS'),
      workflowId?: string(name='workflowId', example='w-3q9jo749ne5****'),
      workflowInstanceId?: string(name='workflowInstanceId', example='wi-3q9jo749ne5****'),
      workflowVersion?: int32(name='workflowVersion', example='1'),
    }
  ](name='data'),
  nextToken?: string(name='nextToken', example='123abc***'),
  requestId?: string(name='requestId', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  totalSize?: int32(name='totalSize', example='10'),
}

model ListWorkflowInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWorkflowInstancesResponseBody(name='body'),
}

async function listWorkflowInstances(request: ListWorkflowInstancesRequest): ListWorkflowInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListWorkflowInstances', 'GET', '/dolphinscheduler/v3/projects/{projectId}/workflowInstances', 'json', false, 'json', request);
}

model ListWorkflowsRequest {
  projectId: string(name='projectId', example='p-3q9jo749ne5****', position='Path'),
  maxResults?: int32(name='maxResults', example='20', position='Query'),
  nextToken?: string(name='nextToken', example='123abc***', position='Query'),
  searchVal?: string(name='searchVal', example='test', position='Query'),
  workspaceId: string(name='workspaceId', example='12345', position='Query'),
}

model ListWorkflowsResponseBody = {
  data?: [ 
    {
      createTime?: string(name='createTime', example='2024-01-01 00:00:00'),
      description?: string(name='description', example='workflow description'),
      name?: string(name='name', example='workflow_name'),
      parentDirectoryId?: string(name='parentDirectoryId', example='wd-3q9jo749ne5****'),
      updateTime?: string(name='updateTime', example='2024-01-01 00:00:00'),
      workflowId?: string(name='workflowId', example='w-3q9jo749ne5****'),
    }
  ](name='data'),
  nextToken?: string(name='nextToken', example='123abc****'),
  requestId?: string(name='requestId', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  totalSize?: int32(name='totalSize', example='10'),
}

model ListWorkflowsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWorkflowsResponseBody(name='body'),
}

async function listWorkflows(request: ListWorkflowsRequest): ListWorkflowsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListWorkflows', 'GET', '/dolphinscheduler/v3/projects/{projectId}/workflows', 'json', false, 'json', request);
}

model RunWorkflowRequest {
  projectId: string(name='projectId', example='p-3q9jo749ne5****', position='Path'),
  alertGroupId?: string(name='alertGroupId', example='ag-n72kong0832****', position='Query'),
  alertStrategy?: string(name='alertStrategy', example='NONE', position='Query'),
  complementDependentMode?: string(name='complementDependentMode', example='OFF_MODE', position='Query'),
  dryRun?: string(name='dryRun', example='0', position='Query'),
  execType?: string(name='execType', example='START_PROCESS', position='Query'),
  expectedParallelismNumber?: string(name='expectedParallelismNumber', example='1', position='Query'),
  failureStrategy?: string(name='failureStrategy', example='END', position='Query'),
  resourceGroupId: string(name='resourceGroupId', example='wg-acfmv4opbs****', position='Query'),
  runMode?: string(name='runMode', example='RUN_MODE_PARALLEL', position='Query'),
  scheduleTime?: string(name='scheduleTime', example='2024-01-01 00:00:00,2024-01-02 00:00:00', position='Query'),
  startParams?: string(name='startParams', example='{"key1":"value1"}', position='Query'),
  workflowId: string(name='workflowId', example='w-3q9jo749ne5****', position='Query'),
  workflowInstancePriority?: string(name='workflowInstancePriority', example='MEDIUM', position='Query'),
  workspaceId: string(name='workspaceId', example='12345', position='Query'),
}

model RunWorkflowResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  success?: boolean(name='success', example='true'),
}

model RunWorkflowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunWorkflowResponseBody(name='body'),
}

async function runWorkflow(request: RunWorkflowRequest): RunWorkflowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunWorkflow', 'POST', '/dolphinscheduler/v3/projects/{projectId}/executors/run-workflow', 'json', false, 'json', request);
}

model UpdateWorkflowRequest {
  projectId: string(name='projectId', example='p-3q9jo749ne5****', position='Path'),
  workflowId: string(name='workflowId', example='w-n72kong0832****', position='Path'),
  alertGroupId?: string(name='alertGroupId', example='ag-n72kong0832****', position='Query'),
  alertStrategy?: string(name='alertStrategy', example='NONE', position='Query'),
  taskDefinitionJsonValue?: string(name='taskDefinitionJsonValue', position='Body'),
  taskRelationJsonValue?: string(name='taskRelationJsonValue', position='Body'),
  cronExpr?: string(name='cronExpr', example='0 0 * * * ? *', position='Query'),
  description?: string(name='description', example='test', position='Query'),
  executionType?: string(name='executionType', example='PARALLEL', position='Query'),
  failureStrategy?: string(name='failureStrategy', example='END', position='Query'),
  name?: string(name='name', example='test', position='Query'),
  parentDirectoryId?: string(name='parentDirectoryId', example='wd-n72kong0832****', position='Query'),
  resourceGroupId?: string(name='resourceGroupId', example='wg-acfmv4opbs****', position='Query'),
  scheduleEndTime?: string(name='scheduleEndTime', example='2024-01-01 00:00:00', position='Query'),
  scheduleStartTime?: string(name='scheduleStartTime', example='2024-01-01 00:00:00', position='Query'),
  scheduleState?: string(name='scheduleState', example='OFFLINE', position='Query'),
  taskDefinitionJson?: string(name='taskDefinitionJson', example='[{"taskId":"t1","name":"t1","taskParams":{"rawScript":"echo 1"},"taskType":"SHELL"}]', position='Query'),
  taskRelationJson?: string(name='taskRelationJson', example='[{"preTaskId":"0", "postTaskId":"t1"}]', position='Query'),
  timeZone?: string(name='timeZone', example='Asia/Shanghai', position='Query'),
  timeout?: int32(name='timeout', example='10', position='Query'),
  workflowInstancePriority?: string(name='workflowInstancePriority', example='MEDIUM', position='Query'),
  workflowParams?: string(name='workflowParams', example='[{"prop":"key1","value":"value1"}]', position='Query'),
  workspaceId: string(name='workspaceId', example='123***', position='Query'),
}

model UpdateWorkflowResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='DD6B1B2A-5837-5237-ABE4-FF0C8944****'),
  success?: boolean(name='success', example='true'),
}

model UpdateWorkflowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWorkflowResponseBody(name='body'),
}

async function updateWorkflow(request: UpdateWorkflowRequest): UpdateWorkflowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateWorkflow', 'PUT', '/dolphinscheduler/v3/projects/{projectId}/workflows/{workflowId}', 'json', false, 'json', request);
}

