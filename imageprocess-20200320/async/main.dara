/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'imageprocess';
  @version = '2020-03-20';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model FeedbackSessionRequest {
  feedback: string(name='Feedback', description='This parameter is required.', position='Body'),
  sessionId: string(name='SessionId', description='This parameter is required.', example='69675e9ddaea4b1ca8b9ddbafd02edc2', position='Body'),
}

model FeedbackSessionResponseBody = {
  requestId?: string(name='RequestId', example='01E1BC28-9155-59F0-BA7E-3706170DEF1B'),
}

model FeedbackSessionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FeedbackSessionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of FeedbackSession  FeedbackSessionRequest
  * @return FeedbackSessionResponse
 */
async function feedbackSession(request: FeedbackSessionRequest): FeedbackSessionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FeedbackSession', 'POST', '/', 'json', true, 'form', request);
}

model GetAsyncJobResultRequest {
  jobId: string(name='JobId', description='This parameter is required.', example='7CB9B663-3EF8-4C9C-A464-FDA2B5F1E3A4', position='Body'),
}

model GetAsyncJobResultResponseBody = {
  data?: {
    errorCode?: string(name='ErrorCode', example='InvalidParameter'),
    errorMessage?: string(name='ErrorMessage', example='paramsIllegal'),
    jobId?: string(name='JobId', example='CCCAAAFB-5628-40DD-A12C-6F52326C1B03'),
    result?: string(name='Result', example='{\\"NewProbability\\":\\"4.062644e-06\\",\\"NormalProbability\\":\\"0.7230905\\",\\"OtherProbability\\":\\"0.27690542\\",\\"LesionRatio\\":\\"0.9387283236994219\\",\\"Mask\\":\\"http://algo-app-aic-med-cn-shanghai-prod.oss-cn-shanghai.aliyuncs.com/covid19-dcm/unspecified/2020032702/1b1e1018-6fcf-11ea-8fa1-d20b34387541.nii.gz?Expires=1585276394&OSSAccessKeyId=LTAI4FoLmvQ9urWXgSRp****&Signature=%2F1LNGWJUqvY0VRYGgg8Ldtb3BF****\\"}'),
    status?: string(name='Status', example='PROCESS_SUCCESS'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='7CB9B663-3EF8-4C9C-A464-FDA2B5F1E3A4'),
}

model GetAsyncJobResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAsyncJobResultResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAsyncJobResult  GetAsyncJobResultRequest
  * @return GetAsyncJobResultResponse
 */
async function getAsyncJobResult(request: GetAsyncJobResultRequest): GetAsyncJobResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAsyncJobResult', 'POST', '/', 'json', true, 'form', request);
}

