/**
 *
 */
import Util;
import OSS;
import RPC;
import OpenPlatform;
import OSSUtil;
import FileForm;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('imageprocess', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model ClassifyFNFRequest {
  imageUrl?: string(name='ImageUrl'),
  dataFormat?: string(name='DataFormat'),
  orgId?: string(name='OrgId'),
  orgName?: string(name='OrgName'),
  tracerId?: string(name='TracerId'),
}

model ClassifyFNFAdvanceRequest {
  imageUrlObject: readable(name='ImageUrlObject'),
  dataFormat?: string(name='DataFormat'),
  orgId?: string(name='OrgId'),
  orgName?: string(name='OrgName'),
  tracerId?: string(name='TracerId'),
}

model ClassifyFNFResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    fractures?: [ 
      {
        value?: float(name='Value'),
        boxes?: [ int32 ](name='Boxes'),
        tag?: {
          label?: string(name='Label'),
        }(name='Tag'),
      }
    ](name='Fractures'),
    imageUrl?: string(name='ImageUrl'),
    orgId?: string(name='OrgId'),
    orgName?: string(name='OrgName'),
  }(name='Data'),
}

model ClassifyFNFResponse = {
  headers: map[string]string(name='headers'),
  body: ClassifyFNFResponseBody(name='body'),
}

async function classifyFNFWithOptions(request: ClassifyFNFRequest, runtime: Util.RuntimeOptions): ClassifyFNFResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ClassifyFNF', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function classifyFNF(request: ClassifyFNFRequest): ClassifyFNFResponse {
  var runtime = new Util.RuntimeOptions{};
  return classifyFNFWithOptions(request, runtime);
}

async function classifyFNFAdvance(request: ClassifyFNFAdvanceRequest, runtime: Util.RuntimeOptions): ClassifyFNFResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imageprocess',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var classifyFNFReq = new ClassifyFNFRequest{};
  OpenApiUtil.convert(request, classifyFNFReq);

  authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  ossConfig.accessKeyId = authResponse.accessKeyId;
  ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
  ossClient = new OSS(ossConfig);

  fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageUrlObject,
    contentType = '',
  };
  ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  ossClient.postObject(uploadRequest, ossRuntime);
  classifyFNFReq.imageUrl = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var classifyFNFResp = classifyFNFWithOptions(classifyFNFReq, runtime);
  return classifyFNFResp;
}

model DetectLungNoduleRequest {
  dataFormat?: string(name='DataFormat'),
  orgName?: string(name='OrgName'),
  orgId?: string(name='OrgId'),
  URLList?: [ 
    {
      URL?: string(name='URL'),
    }
  ](name='URLList'),
  threshold?: float(name='Threshold'),
}

model DetectLungNoduleResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    series?: [ 
      {
        seriesInstanceUid?: string(name='SeriesInstanceUid'),
        elements?: [ 
          {
            z?: float(name='Z'),
            lobe?: string(name='Lobe'),
            meanValue?: float(name='MeanValue'),
            imageZ?: float(name='ImageZ'),
            lung?: string(name='Lung'),
            confidence?: float(name='Confidence'),
            SOPInstanceUID?: string(name='SOPInstanceUID'),
            imageX?: float(name='ImageX'),
            y?: float(name='Y'),
            category?: string(name='Category'),
            volume?: float(name='Volume'),
            imageY?: float(name='ImageY'),
            diameter?: float(name='Diameter'),
            x?: float(name='X'),
          }
        ](name='Elements'),
        origin?: [ float ](name='Origin'),
        report?: string(name='Report'),
        spacing?: [ float ](name='Spacing'),
      }
    ](name='Series'),
  }(name='Data'),
}

model DetectLungNoduleResponse = {
  headers: map[string]string(name='headers'),
  body: DetectLungNoduleResponseBody(name='body'),
}

async function detectLungNoduleWithOptions(request: DetectLungNoduleRequest, runtime: Util.RuntimeOptions): DetectLungNoduleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DetectLungNodule', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function detectLungNodule(request: DetectLungNoduleRequest): DetectLungNoduleResponse {
  var runtime = new Util.RuntimeOptions{};
  return detectLungNoduleWithOptions(request, runtime);
}

model RunCTRegistrationRequest {
  dataFormat?: string(name='DataFormat'),
  orgName?: string(name='OrgName'),
  orgId?: string(name='OrgId'),
  dataSourceType?: string(name='DataSourceType'),
  referenceList?: [ 
    {
      referenceURL?: string(name='ReferenceURL'),
    }
  ](name='ReferenceList'),
  floatingList?: [ 
    {
      floatingURL?: string(name='FloatingURL'),
    }
  ](name='FloatingList'),
}

model RunCTRegistrationResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    DUrl?: string(name='DUrl'),
    NUrl?: string(name='NUrl'),
  }(name='Data'),
}

model RunCTRegistrationResponse = {
  headers: map[string]string(name='headers'),
  body: RunCTRegistrationResponseBody(name='body'),
}

async function runCTRegistrationWithOptions(request: RunCTRegistrationRequest, runtime: Util.RuntimeOptions): RunCTRegistrationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RunCTRegistration', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function runCTRegistration(request: RunCTRegistrationRequest): RunCTRegistrationResponse {
  var runtime = new Util.RuntimeOptions{};
  return runCTRegistrationWithOptions(request, runtime);
}

model TranslateMedRequest {
  fromLanguage?: string(name='FromLanguage'),
  toLanguage?: string(name='ToLanguage'),
  text?: string(name='Text'),
}

model TranslateMedResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    words?: long(name='Words'),
    text?: string(name='Text'),
  }(name='Data'),
}

model TranslateMedResponse = {
  headers: map[string]string(name='headers'),
  body: TranslateMedResponseBody(name='body'),
}

async function translateMedWithOptions(request: TranslateMedRequest, runtime: Util.RuntimeOptions): TranslateMedResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TranslateMed', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function translateMed(request: TranslateMedRequest): TranslateMedResponse {
  var runtime = new Util.RuntimeOptions{};
  return translateMedWithOptions(request, runtime);
}

model DetectSpineMRIRequest {
  dataFormat?: string(name='DataFormat'),
  orgName?: string(name='OrgName'),
  orgId?: string(name='OrgId'),
  URLList?: [ 
    {
      URL?: string(name='URL'),
    }
  ](name='URLList'),
}

model DetectSpineMRIResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    discs?: [ 
      {
        identification?: string(name='Identification'),
        disease?: string(name='Disease'),
        location?: [ float ](name='Location'),
      }
    ](name='Discs'),
    vertebras?: [ 
      {
        identification?: string(name='Identification'),
        disease?: string(name='Disease'),
        location?: [ float ](name='Location'),
      }
    ](name='Vertebras'),
  }(name='Data'),
}

model DetectSpineMRIResponse = {
  headers: map[string]string(name='headers'),
  body: DetectSpineMRIResponseBody(name='body'),
}

async function detectSpineMRIWithOptions(request: DetectSpineMRIRequest, runtime: Util.RuntimeOptions): DetectSpineMRIResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DetectSpineMRI', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function detectSpineMRI(request: DetectSpineMRIRequest): DetectSpineMRIResponse {
  var runtime = new Util.RuntimeOptions{};
  return detectSpineMRIWithOptions(request, runtime);
}

model CalcCACSRequest {
  dataFormat?: string(name='DataFormat'),
  orgName?: string(name='OrgName'),
  orgId?: string(name='OrgId'),
  dataSourceType?: string(name='DataSourceType'),
  URLList?: [ 
    {
      URL?: string(name='URL'),
    }
  ](name='URLList'),
}

model CalcCACSResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    resultUrl?: string(name='ResultUrl'),
    score?: string(name='Score'),
  }(name='Data'),
}

model CalcCACSResponse = {
  headers: map[string]string(name='headers'),
  body: CalcCACSResponseBody(name='body'),
}

async function calcCACSWithOptions(request: CalcCACSRequest, runtime: Util.RuntimeOptions): CalcCACSResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CalcCACS', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function calcCACS(request: CalcCACSRequest): CalcCACSResponse {
  var runtime = new Util.RuntimeOptions{};
  return calcCACSWithOptions(request, runtime);
}

model DetectHipKeypointXRayRequest {
  imageUrl?: string(name='ImageUrl'),
  dataFormat?: string(name='DataFormat'),
  orgId?: string(name='OrgId'),
  orgName?: string(name='OrgName'),
  tracerId?: string(name='TracerId'),
}

model DetectHipKeypointXRayAdvanceRequest {
  imageUrlObject: readable(name='ImageUrlObject'),
  dataFormat?: string(name='DataFormat'),
  orgId?: string(name='OrgId'),
  orgName?: string(name='OrgName'),
  tracerId?: string(name='TracerId'),
}

model DetectHipKeypointXRayResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    keyPoints?: [ 
      {
        value?: float(name='Value'),
        coordinates?: [ int32 ](name='Coordinates'),
        tag?: {
          direction?: string(name='Direction'),
          label?: string(name='Label'),
        }(name='Tag'),
      }
    ](name='KeyPoints'),
    imageUrl?: string(name='ImageUrl'),
    orgId?: string(name='OrgId'),
    orgName?: string(name='OrgName'),
  }(name='Data'),
}

model DetectHipKeypointXRayResponse = {
  headers: map[string]string(name='headers'),
  body: DetectHipKeypointXRayResponseBody(name='body'),
}

async function detectHipKeypointXRayWithOptions(request: DetectHipKeypointXRayRequest, runtime: Util.RuntimeOptions): DetectHipKeypointXRayResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DetectHipKeypointXRay', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function detectHipKeypointXRay(request: DetectHipKeypointXRayRequest): DetectHipKeypointXRayResponse {
  var runtime = new Util.RuntimeOptions{};
  return detectHipKeypointXRayWithOptions(request, runtime);
}

async function detectHipKeypointXRayAdvance(request: DetectHipKeypointXRayAdvanceRequest, runtime: Util.RuntimeOptions): DetectHipKeypointXRayResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imageprocess',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var detectHipKeypointXRayReq = new DetectHipKeypointXRayRequest{};
  OpenApiUtil.convert(request, detectHipKeypointXRayReq);

  authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  ossConfig.accessKeyId = authResponse.accessKeyId;
  ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
  ossClient = new OSS(ossConfig);

  fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageUrlObject,
    contentType = '',
  };
  ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  ossClient.postObject(uploadRequest, ossRuntime);
  detectHipKeypointXRayReq.imageUrl = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var detectHipKeypointXRayResp = detectHipKeypointXRayWithOptions(detectHipKeypointXRayReq, runtime);
  return detectHipKeypointXRayResp;
}

model DetectKneeKeypointXRayRequest {
  imageUrl?: string(name='ImageUrl'),
  dataFormat?: string(name='DataFormat'),
  orgId?: string(name='OrgId'),
  orgName?: string(name='OrgName'),
  tracerId?: string(name='TracerId'),
}

model DetectKneeKeypointXRayAdvanceRequest {
  imageUrlObject: readable(name='ImageUrlObject'),
  dataFormat?: string(name='DataFormat'),
  orgId?: string(name='OrgId'),
  orgName?: string(name='OrgName'),
  tracerId?: string(name='TracerId'),
}

model DetectKneeKeypointXRayResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    keyPoints?: [ 
      {
        value?: float(name='Value'),
        coordinates?: [ int32 ](name='Coordinates'),
        tag?: {
          direction?: string(name='Direction'),
          label?: string(name='Label'),
        }(name='Tag'),
      }
    ](name='KeyPoints'),
    imageUrl?: string(name='ImageUrl'),
    orgId?: string(name='OrgId'),
    orgName?: string(name='OrgName'),
  }(name='Data'),
}

model DetectKneeKeypointXRayResponse = {
  headers: map[string]string(name='headers'),
  body: DetectKneeKeypointXRayResponseBody(name='body'),
}

async function detectKneeKeypointXRayWithOptions(request: DetectKneeKeypointXRayRequest, runtime: Util.RuntimeOptions): DetectKneeKeypointXRayResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DetectKneeKeypointXRay', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function detectKneeKeypointXRay(request: DetectKneeKeypointXRayRequest): DetectKneeKeypointXRayResponse {
  var runtime = new Util.RuntimeOptions{};
  return detectKneeKeypointXRayWithOptions(request, runtime);
}

async function detectKneeKeypointXRayAdvance(request: DetectKneeKeypointXRayAdvanceRequest, runtime: Util.RuntimeOptions): DetectKneeKeypointXRayResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imageprocess',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var detectKneeKeypointXRayReq = new DetectKneeKeypointXRayRequest{};
  OpenApiUtil.convert(request, detectKneeKeypointXRayReq);

  authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  ossConfig.accessKeyId = authResponse.accessKeyId;
  ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
  ossClient = new OSS(ossConfig);

  fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageUrlObject,
    contentType = '',
  };
  ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  ossClient.postObject(uploadRequest, ossRuntime);
  detectKneeKeypointXRayReq.imageUrl = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var detectKneeKeypointXRayResp = detectKneeKeypointXRayWithOptions(detectKneeKeypointXRayReq, runtime);
  return detectKneeKeypointXRayResp;
}

model RunMedQARequest {
  orgId?: string(name='OrgId'),
  orgName?: string(name='OrgName'),
  sessionId?: string(name='SessionId'),
  department?: string(name='Department'),
  questionType?: string(name='QuestionType'),
  answerImageURLList?: [ 
    {
      answerImageURL?: string(name='AnswerImageURL'),
    }
  ](name='AnswerImageURLList'),
  answerImageDataList?: [ 
    {
      answerImageData?: bytes(name='AnswerImageData'),
    }
  ](name='AnswerImageDataList'),
  answerTextList?: [ 
    {
      answerText?: string(name='AnswerText'),
    }
  ](name='AnswerTextList'),
}

model RunMedQAResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    sessionId?: string(name='SessionId'),
    questionType?: string(name='QuestionType'),
    question?: string(name='Question'),
    answerType?: string(name='AnswerType'),
    options?: [ string ](name='Options'),
    reports?: map[string]string(name='Reports'),
  }(name='Data'),
}

model RunMedQAResponse = {
  headers: map[string]string(name='headers'),
  body: RunMedQAResponseBody(name='body'),
}

async function runMedQAWithOptions(request: RunMedQARequest, runtime: Util.RuntimeOptions): RunMedQAResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RunMedQA', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function runMedQA(request: RunMedQARequest): RunMedQAResponse {
  var runtime = new Util.RuntimeOptions{};
  return runMedQAWithOptions(request, runtime);
}

model DetectKneeXRayRequest {
  url?: string(name='Url'),
  dataFormat?: string(name='DataFormat'),
  orgName?: string(name='OrgName'),
  orgId?: string(name='OrgId'),
}

model DetectKneeXRayAdvanceRequest {
  urlObject: readable(name='UrlObject'),
  dataFormat?: string(name='DataFormat'),
  orgName?: string(name='OrgName'),
  orgId?: string(name='OrgId'),
}

model DetectKneeXRayResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    KLDetections?: [ 
      {
        detections?: [ float ](name='Detections'),
      }
    ](name='KLDetections'),
  }(name='Data'),
}

model DetectKneeXRayResponse = {
  headers: map[string]string(name='headers'),
  body: DetectKneeXRayResponseBody(name='body'),
}

async function detectKneeXRayWithOptions(request: DetectKneeXRayRequest, runtime: Util.RuntimeOptions): DetectKneeXRayResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DetectKneeXRay', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function detectKneeXRay(request: DetectKneeXRayRequest): DetectKneeXRayResponse {
  var runtime = new Util.RuntimeOptions{};
  return detectKneeXRayWithOptions(request, runtime);
}

async function detectKneeXRayAdvance(request: DetectKneeXRayAdvanceRequest, runtime: Util.RuntimeOptions): DetectKneeXRayResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imageprocess',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var detectKneeXRayReq = new DetectKneeXRayRequest{};
  OpenApiUtil.convert(request, detectKneeXRayReq);

  authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  ossConfig.accessKeyId = authResponse.accessKeyId;
  ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
  ossClient = new OSS(ossConfig);

  fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.urlObject,
    contentType = '',
  };
  ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  ossClient.postObject(uploadRequest, ossRuntime);
  detectKneeXRayReq.url = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var detectKneeXRayResp = detectKneeXRayWithOptions(detectKneeXRayReq, runtime);
  return detectKneeXRayResp;
}

model GetAsyncJobResultRequest {
  jobId?: string(name='JobId'),
}

model GetAsyncJobResultResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    status?: string(name='Status'),
    errorMessage?: string(name='ErrorMessage'),
    result?: string(name='Result'),
    errorCode?: string(name='ErrorCode'),
    jobId?: string(name='JobId'),
  }(name='Data'),
}

model GetAsyncJobResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetAsyncJobResultResponseBody(name='body'),
}

async function getAsyncJobResultWithOptions(request: GetAsyncJobResultRequest, runtime: Util.RuntimeOptions): GetAsyncJobResultResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetAsyncJobResult', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getAsyncJobResult(request: GetAsyncJobResultRequest): GetAsyncJobResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAsyncJobResultWithOptions(request, runtime);
}

model DetectRibFractureRequest {
  dataFormat?: string(name='DataFormat'),
  orgName?: string(name='OrgName'),
  orgId?: string(name='OrgId'),
  sourceType?: string(name='SourceType'),
  URLList?: [ 
    {
      URL?: string(name='URL'),
    }
  ](name='URLList'),
}

model DetectRibFractureResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    detections?: [ 
      {
        coordinates?: [ int32 ](name='Coordinates'),
        fractureId?: int32(name='FractureId'),
        coordinateImage?: [ int32 ](name='CoordinateImage'),
        fractureConfidence?: float(name='FractureConfidence'),
        fractureCategory?: string(name='FractureCategory'),
        fractureLocation?: string(name='FractureLocation'),
        fractureSegment?: long(name='FractureSegment'),
      }
    ](name='Detections'),
    origin?: [ float ](name='Origin'),
    resultURL?: string(name='ResultURL'),
    spacing?: [ float ](name='Spacing'),
  }(name='Data'),
}

model DetectRibFractureResponse = {
  headers: map[string]string(name='headers'),
  body: DetectRibFractureResponseBody(name='body'),
}

async function detectRibFractureWithOptions(request: DetectRibFractureRequest, runtime: Util.RuntimeOptions): DetectRibFractureResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DetectRibFracture', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function detectRibFracture(request: DetectRibFractureRequest): DetectRibFractureResponse {
  var runtime = new Util.RuntimeOptions{};
  return detectRibFractureWithOptions(request, runtime);
}

model DetectCovid19CadRequest {
  dataFormat?: string(name='DataFormat'),
  orgName?: string(name='OrgName'),
  orgId?: string(name='OrgId'),
  URLList?: [ 
    {
      URL?: string(name='URL'),
    }
  ](name='URLList'),
}

model DetectCovid19CadResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    normalProbability?: string(name='NormalProbability'),
    newProbability?: string(name='NewProbability'),
    lesionRatio?: string(name='LesionRatio'),
    otherProbability?: string(name='OtherProbability'),
    mask?: string(name='Mask'),
  }(name='Data'),
}

model DetectCovid19CadResponse = {
  headers: map[string]string(name='headers'),
  body: DetectCovid19CadResponseBody(name='body'),
}

async function detectCovid19CadWithOptions(request: DetectCovid19CadRequest, runtime: Util.RuntimeOptions): DetectCovid19CadResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DetectCovid19Cad', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function detectCovid19Cad(request: DetectCovid19CadRequest): DetectCovid19CadResponse {
  var runtime = new Util.RuntimeOptions{};
  return detectCovid19CadWithOptions(request, runtime);
}

model ScreenChestCTRequest {
  dataFormat?: string(name='DataFormat'),
  orgName?: string(name='OrgName'),
  orgId?: string(name='OrgId'),
  URLList?: [ 
    {
      URL?: string(name='URL'),
    }
  ](name='URLList'),
}

model ScreenChestCTResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    lungNodule?: {
      series?: [ 
        {
          seriesInstanceUid?: string(name='SeriesInstanceUid'),
          elements?: [ 
            {
              lobe?: string(name='Lobe'),
              meanValue?: float(name='MeanValue'),
              lung?: string(name='Lung'),
              confidence?: float(name='Confidence'),
              SOPInstanceUID?: string(name='SOPInstanceUID'),
              category?: string(name='Category'),
              volume?: float(name='Volume'),
              diameter?: float(name='Diameter'),
              x?: float(name='X'),
              y?: float(name='Y'),
              z?: float(name='Z'),
              imageX?: float(name='ImageX'),
              imageY?: float(name='ImageY'),
              imageZ?: float(name='ImageZ'),
            }
          ](name='Elements'),
          origin?: [ float ](name='Origin'),
          report?: string(name='Report'),
          spacing?: [ float ](name='Spacing'),
        }
      ](name='Series'),
    }(name='LungNodule'),
    CACS?: {
      resultUrl?: string(name='ResultUrl'),
      score?: string(name='Score'),
    }(name='CACS'),
    covid?: {
      normalProbability?: string(name='NormalProbability'),
      newProbability?: string(name='NewProbability'),
      lesionRatio?: string(name='LesionRatio'),
      otherProbability?: string(name='OtherProbability'),
      mask?: string(name='Mask'),
    }(name='Covid'),
    detectRibFracture?: {
      resultURL?: string(name='ResultURL'),
      spacing?: [ float ](name='Spacing'),
      origin?: [ float ](name='Origin'),
      detections?: [ 
        {
          fractureId?: long(name='FractureId'),
          fractureConfidence?: float(name='FractureConfidence'),
          fractureCategory?: long(name='FractureCategory'),
          coordinates?: [ long ](name='Coordinates'),
          coordinateImage?: [ long ](name='CoordinateImage'),
          fractureLocation?: string(name='FractureLocation'),
          fractureSegment?: long(name='FractureSegment'),
        }
      ](name='Detections'),
    }(name='DetectRibFracture'),
  }(name='Data'),
}

model ScreenChestCTResponse = {
  headers: map[string]string(name='headers'),
  body: ScreenChestCTResponseBody(name='body'),
}

async function screenChestCTWithOptions(request: ScreenChestCTRequest, runtime: Util.RuntimeOptions): ScreenChestCTResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ScreenChestCT', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function screenChestCT(request: ScreenChestCTRequest): ScreenChestCTResponse {
  var runtime = new Util.RuntimeOptions{};
  return screenChestCTWithOptions(request, runtime);
}

model DetectSkinDiseaseRequest {
  url?: string(name='Url'),
  orgId?: string(name='OrgId'),
  orgName?: string(name='OrgName'),
}

model DetectSkinDiseaseAdvanceRequest {
  urlObject: readable(name='UrlObject'),
  orgId?: string(name='OrgId'),
  orgName?: string(name='OrgName'),
}

model DetectSkinDiseaseResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    results?: map[string]any(name='Results'),
  }(name='Data'),
}

model DetectSkinDiseaseResponse = {
  headers: map[string]string(name='headers'),
  body: DetectSkinDiseaseResponseBody(name='body'),
}

async function detectSkinDiseaseWithOptions(request: DetectSkinDiseaseRequest, runtime: Util.RuntimeOptions): DetectSkinDiseaseResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DetectSkinDisease', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function detectSkinDisease(request: DetectSkinDiseaseRequest): DetectSkinDiseaseResponse {
  var runtime = new Util.RuntimeOptions{};
  return detectSkinDiseaseWithOptions(request, runtime);
}

async function detectSkinDiseaseAdvance(request: DetectSkinDiseaseAdvanceRequest, runtime: Util.RuntimeOptions): DetectSkinDiseaseResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imageprocess',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var detectSkinDiseaseReq = new DetectSkinDiseaseRequest{};
  OpenApiUtil.convert(request, detectSkinDiseaseReq);

  authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  ossConfig.accessKeyId = authResponse.accessKeyId;
  ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
  ossClient = new OSS(ossConfig);

  fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.urlObject,
    contentType = '',
  };
  ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  ossClient.postObject(uploadRequest, ossRuntime);
  detectSkinDiseaseReq.url = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var detectSkinDiseaseResp = detectSkinDiseaseWithOptions(detectSkinDiseaseReq, runtime);
  return detectSkinDiseaseResp;
}

