/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'dms-dg';
  @version = '2023-09-14';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddDatabaseRequest {
  clientToken?: string(name='ClientToken', example='ETnLKlblzczshOTUbOCzxxxx', position='Body'),
  dbDescription?: string(name='DbDescription', position='Body'),
  dbName?: string(name='DbName', example='test', position='Body'),
  dbPassword?: string(name='DbPassword', example='1234!2#%A***', position='Body'),
  dbType?: string(name='DbType', example='MYSQL', position='Body'),
  dbUserName?: string(name='DbUserName', example='test_usr', position='Body'),
  gatewayId: string(name='GatewayId', example='dg-8d9bqu1030m****', position='Body'),
  host: string(name='Host', example='127.0.XX.XX', position='Body'),
  port: int32(name='Port', example='3306', position='Body'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model AddDatabaseResponseBody = {
  code?: string(name='Code', example='200'),
  dbInstance?: {
    connectHost?: string(name='ConnectHost', description='连接使用的主机', example='10.0.0.1'),
    connectPort?: int32(name='ConnectPort', example='32875'),
    dbDescription?: string(name='DbDescription', description='备注信息', example='test'),
    dbType?: string(name='DbType', description='数据库类型。', example='MYSQL'),
    gatewayId: string(name='GatewayId', description='数据库所在网关ID。', example='dg-8d9bqu1030mhk0ix'),
    gatewayName?: string(name='GatewayName', description='网关名称'),
    host: string(name='Host', description='通过网关所在宿主机去访问数据库的地址。', example='127.0.0.1'),
    instanceId?: string(name='InstanceId', description='数据库实例ID', example='dg-db-rgfg9p4586o7y79b'),
    instanceStatus?: string(name='InstanceStatus', description='当前实例的状态', example='SUCCESS'),
    networkType?: string(name='NetworkType', description='网络类型', example='VPC'),
    nodeId?: string(name='NodeId', description='节点的ID', example='dg-node-r0SR-E90lsIRNgj6B_9m'),
    parentId?: string(name='ParentId', description='归属主账号ID', example='167xxxxxxxxxx'),
    port: int32(name='Port', description='通过网关所在宿主机去访问数据库的端口。', example='3306'),
    regionId: string(name='RegionId', description='所在的地域编号', example='cn-hangzhou'),
    serviceType?: string(name='ServiceType', description='服务类型', example='ECS'),
    userId?: string(name='UserId', description='用户ID', example='167xxxxxxxxxx'),
    vpcId?: string(name='VpcId', description='VpcId', example='vpc-xxxxx'),
    vpcInstanceId?: string(name='VpcInstanceId', description='VpcInstanceId', example='i-xxxxxxx'),
  }(name='DbInstance'),
  errorMsg?: string(name='ErrorMsg', example='SYSTEM_ERR'),
  requestId?: string(name='RequestId', example='A8B2EED2-70EF-51F1-8820-914F9AC9BAD2'),
  success?: boolean(name='Success', example='true'),
}

model AddDatabaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddDatabaseResponseBody(name='body'),
}

async function addDatabase(request: AddDatabaseRequest): AddDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddDatabase', 'POST', '/', 'json', true, 'form', request);
}

model AddDatabaseListRequest {
  clientToken?: string(name='ClientToken', example='ETnLKlblzczshOTUbOCzxxxx', position='Body'),
  databaseString: string(name='DatabaseString', example='[{"host":"127.0.0.1","port":"3306","gatewayId":"dg-xsdasdasdas****"}]', position='Body'),
}

model AddDatabaseListResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='SUCCESS'),
  errorMsg?: string(name='ErrorMsg', example='ERROR'),
  requestId?: string(name='RequestId', example='514F794F-7E30-5DAA-97C0-0B0D75DA0259'),
  success?: boolean(name='Success', example='true'),
}

model AddDatabaseListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddDatabaseListResponseBody(name='body'),
}

async function addDatabaseList(request: AddDatabaseListRequest): AddDatabaseListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddDatabaseList', 'POST', '/', 'json', true, 'form', request);
}

model CheckDGEnabledRequest {
}

model CheckDGEnabledResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='true'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId', example='8F29E3E9-2847-53BF-ADF0-130E3CEA5C63'),
  success?: boolean(name='Success', example='true'),
}

model CheckDGEnabledResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckDGEnabledResponseBody(name='body'),
}

async function checkDGEnabled(request: CheckDGEnabledRequest): CheckDGEnabledResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckDGEnabled', 'POST', '/', 'json', false, 'json', request);
}

model ConnectDatabaseRequest {
  dbName?: string(name='DbName', example='test', position='Body'),
  dbPassword?: string(name='DbPassword', example='1234!2#%A****', position='Body'),
  dbType?: string(name='DbType', example='MYSQL', position='Body'),
  dbUserName?: string(name='DbUserName', example='test_usr', position='Body'),
  gatewayId: string(name='GatewayId', example='dg-58c36y906675****', position='Body'),
  host: string(name='Host', example='127.0.XX.XX', position='Body'),
  port: int32(name='Port', example='3306', position='Body'),
}

model ConnectDatabaseResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='OK'),
  errorMsg?: string(name='ErrorMsg', example='Gateway exception, please launch local dg first'),
  requestId?: string(name='RequestId', example='F4EFCDC5-E69C-5A6F-B170-C5379D9D6811'),
  success?: boolean(name='Success', example='true'),
}

model ConnectDatabaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConnectDatabaseResponseBody(name='body'),
}

async function connectDatabase(request: ConnectDatabaseRequest): ConnectDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConnectDatabase', 'POST', '/', 'json', true, 'form', request);
}

model CreateGatewayRequest {
  gatewayDesc?: string(name='GatewayDesc', position='Body'),
  gatewayName: string(name='GatewayName', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model CreateGatewayResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='dg-nmz841r7b681****'),
  errorMsg?: string(name='ErrorMsg', example='Gateway exception, please launch local dg first'),
  requestId?: string(name='RequestId', example='A9A8885B-3626-592E-9149-8D2971A545AD'),
  success?: boolean(name='Success', example='true'),
}

model CreateGatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateGatewayResponseBody(name='body'),
}

async function createGateway(request: CreateGatewayRequest): CreateGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateGateway', 'POST', '/', 'json', true, 'form', request);
}

model CreateGatewayVerifyCodeRequest {
  gatewayId: string(name='GatewayId', example='dg-8e0j08630s08****', position='Body'),
}

model CreateGatewayVerifyCodeResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='0N3ufVIG43RRAs7diEoep6WHVOHPKj3a'),
  errorMsg?: string(name='ErrorMsg', example='Gateway exception, please launch local dg first'),
  requestId?: string(name='RequestId', example='C9ADD2AA-27E3-5D62-A676-092EDC5303C1'),
  success?: boolean(name='Success', example='true'),
}

model CreateGatewayVerifyCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateGatewayVerifyCodeResponseBody(name='body'),
}

async function createGatewayVerifyCode(request: CreateGatewayVerifyCodeRequest): CreateGatewayVerifyCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateGatewayVerifyCode', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDatabaseRequest {
  instanceId: string(name='InstanceId', example='db-22h1qa9d452f****', position='Body'),
}

model DeleteDatabaseResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='SUCCESS'),
  errorMsg?: string(name='ErrorMsg', example='Gateway exception, please launch local dg first'),
  requestId?: string(name='RequestId', example='B9FB545B-03E3-5AE3-9D9E-2FE26EE2C48F'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDatabaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDatabaseResponseBody(name='body'),
}

async function deleteDatabase(request: DeleteDatabaseRequest): DeleteDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDatabase', 'POST', '/', 'json', true, 'form', request);
}

model DeleteGatewayRequest {
  gatewayId: string(name='GatewayId', example='dg-nmz841r7b681****', position='Body'),
}

model DeleteGatewayResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='SUCCESS'),
  errorMsg?: string(name='ErrorMsg', example='Gateway exception, please launch local dg first'),
  requestId?: string(name='RequestId', example='8F29E3E9-2847-53BF-ADF0-130E3CEA5C63'),
  success?: boolean(name='Success', example='true'),
}

model DeleteGatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteGatewayResponseBody(name='body'),
}

async function deleteGateway(request: DeleteGatewayRequest): DeleteGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGateway', 'POST', '/', 'json', true, 'form', request);
}

model DeleteGatewayInstanceRequest {
  gatewayId: string(name='GatewayId', example='dg-nmz841r7b681****', position='Body'),
  gatewayInstanceId: string(name='GatewayInstanceId', example='dg-node-QeH6VfT8GRnPrYWX****', position='Body'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DeleteGatewayInstanceResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='SUCCESS'),
  errorMsg?: string(name='ErrorMsg', example='Gateway exception, please launch local dg first'),
  requestId?: string(name='RequestId', example='8F29E3E9-2847-53BF-ADF0-130E3CEA5C63'),
  success?: boolean(name='Success', example='true'),
}

model DeleteGatewayInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteGatewayInstanceResponseBody(name='body'),
}

async function deleteGatewayInstance(request: DeleteGatewayInstanceRequest): DeleteGatewayInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGatewayInstance', 'POST', '/', 'json', true, 'form', request);
}

model DescribeRegionsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model DescribeRegionsResponseBody = {
  code?: string(name='Code', example='200'),
  errorMsg?: string(name='ErrorMsg', example='Gateway exception, please launch local dg first'),
  regions?: {
    region?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint', example='dg.cn-hangzhou.aliyuncs.com'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId', example='B0557F7A-62C3-50DC-9E09-77CAE658F776'),
  success?: boolean(name='Success', example='true'),
}

model DescribeRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', true, 'form', request);
}

model DownloadGatewayProgramRequest {
  dgVersion?: string(name='DgVersion', example='3.0', position='Body'),
  userOS?: string(name='UserOS', example='LINUX', position='Body'),
}

model DownloadGatewayProgramResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='https://dg-prod-cn-hangzhou.oss-cn-hangzhou.aliyuncs.com/dg3-pkgs/DBGateway_linux?Expires=170833****&OSSAccessKeyId=LTAIfHvNGC8y****&Signature=wa8KqWuyZdB0hwx%2BKvbgZeSTW****'),
  errorMsg?: string(name='ErrorMsg', example='Gateway exception, please launch local dg first'),
  requestId?: string(name='RequestId', example='15D856B8-A95C-5DA5-B0FC-67246286EA7F'),
  success?: boolean(name='Success', example='true'),
}

model DownloadGatewayProgramResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DownloadGatewayProgramResponseBody(name='body'),
}

async function downloadGatewayProgram(request: DownloadGatewayProgramRequest): DownloadGatewayProgramResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DownloadGatewayProgram', 'POST', '/', 'json', true, 'form', request);
}

model FindUserGatewayByIdRequest {
  gatewayId: string(name='GatewayId', example='dg-nmz841r7b681****', position='Body'),
}

model FindUserGatewayByIdResponseBody = {
  code?: string(name='Code', example='200'),
  errorMsg?: string(name='ErrorMsg', example='Gateway exception, please launch local dg first'),
  gateway?: {
    creatorId?: string(name='CreatorId', example='test_user'),
    dgVersion?: string(name='DgVersion', example='3.0'),
    exceptionMsg?: string(name='ExceptionMsg', example='Gateway exception, please launch local dg first'),
    gatewayDesc?: string(name='GatewayDesc', description='网关的描述'),
    gatewayId?: string(name='GatewayId', description='网关的编号', example='dg-pv33g51gw69h****'),
    gatewayName: string(name='GatewayName', description='网关的名称'),
    numOfExceptionInstance?: int32(name='NumOfExceptionInstance', example='3'),
    numOfRunningInstance?: int32(name='NumOfRunningInstance', example='3'),
    regionId?: string(name='RegionId', description='地域的编号', example='cn-hangzhou'),
    status?: string(name='Status', description='网关的状态', example='RUNNING'),
    userId?: string(name='UserId', description='用户的编号', example='100****'),
  }(name='Gateway'),
  requestId?: string(name='RequestId', example='41FC4DFE-EA8A-5A56-A16C-F607C3409C79'),
  success?: boolean(name='Success', example='true'),
}

model FindUserGatewayByIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FindUserGatewayByIdResponseBody(name='body'),
}

async function findUserGatewayById(request: FindUserGatewayByIdRequest): FindUserGatewayByIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FindUserGatewayById', 'POST', '/', 'json', true, 'form', request);
}

model GetUserDatabasesRequest {
  dbType?: string(name='DbType', example='MYSQL', position='Body'),
  gatewayId?: string(name='GatewayId', example='dg-nmz841r7b681****', position='Body'),
  host?: string(name='Host', example='127.0.XX.XX', position='Body'),
  instanceId?: string(name='InstanceId', example='db-22h1qa9d452f****', position='Body'),
  pageNumber?: string(name='PageNumber', example='1', position='Body'),
  pageSize?: string(name='PageSize', example='10', position='Body'),
  port?: int32(name='Port', example='3306', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  searchKey?: string(name='SearchKey', position='Body'),
}

model GetUserDatabasesResponseBody = {
  code?: string(name='Code', example='200'),
  count?: int32(name='Count', example='100'),
  dbInstanceList?: {
    dbInstance?: [ 
    {
      connectHost?: string(name='ConnectHost', description='连接使用的主机', example='10.0.0.0'),
      connectPort?: int32(name='ConnectPort', example='10001'),
      dbDescription?: string(name='DbDescription', description='备注信息'),
      dbType?: string(name='DbType', description='数据库类型。', example='MYSQL'),
      gatewayId: string(name='GatewayId', description='数据库所在网关ID。', example='dg-pil582nbfe6p****'),
      gatewayName?: string(name='GatewayName', description='网关名称'),
      gmtCreate?: long(name='GmtCreate', description='创建时间', example='2023-05-03 00:00:00'),
      host: string(name='Host', description='通过网关所在宿主机去访问数据库的地址。', example='127.0.XX.XX'),
      instanceId?: string(name='InstanceId', description='数据库实例ID', example='db-22h1qa9d452f****'),
      instanceStatus?: string(name='InstanceStatus', description='当前实例的状态', example='SUCCESS'),
      networkType?: string(name='NetworkType', description='网络类型', example='VPC'),
      nodeId?: string(name='NodeId', description='节点的ID', example='dg-node-xxxxx'),
      parentId?: string(name='ParentId', description='归属主账号ID', example='100XXXXX'),
      port: int32(name='Port', description='通过网关所在宿主机去访问数据库的端口。', example='3306'),
      regionId: string(name='RegionId', description='所在的地域编号', example='cn-hangzhou'),
      serviceType?: string(name='ServiceType', description='服务类型', example='ECS'),
      userId?: string(name='UserId', description='用户ID', example='100XXXXX'),
      vpcId?: string(name='VpcId', description='VpcId', example='vpc-bp1alpkpdb8fh3avx****'),
      vpcInstanceId?: string(name='VpcInstanceId', description='VpcInstanceId', example='i-xxxxxxxxxx'),
    }
  ](name='DbInstance')
  }(name='DbInstanceList'),
  errorMsg?: string(name='ErrorMsg', example='Gateway exception, please launch local dg first'),
  requestId?: string(name='RequestId', example='514F794F-7E30-5DAA-97C0-0B0D75DA0259'),
  success?: string(name='Success', example='true'),
}

model GetUserDatabasesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserDatabasesResponseBody(name='body'),
}

async function getUserDatabases(request: GetUserDatabasesRequest): GetUserDatabasesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUserDatabases', 'POST', '/', 'json', true, 'form', request);
}

model GetUserGatewayInstancesRequest {
  gatewayId: string(name='GatewayId', example='dg-nmz841r7b681****', position='Body'),
}

model GetUserGatewayInstancesResponseBody = {
  code?: string(name='Code', example='200'),
  errorMsg?: string(name='ErrorMsg', example='Gateway exception, please launch local dg first'),
  gatewayInstanceList?: [ 
    {
      connectEndpointType?: string(name='ConnectEndpointType', description='连接类型', example='internet'),
      currentDaemonVersion?: string(name='CurrentDaemonVersion', description='进程的版本号', example='3.0'),
      currentVersion?: string(name='CurrentVersion', description='版本号', example='3.0'),
      endPoint?: string(name='EndPoint', description='端点地址', example='127.0.XX.XX'),
      gatewayId?: string(name='GatewayId', description='网关ID', example='dg-159t17m19ps0****'),
      gatewayInstanceId?: string(name='GatewayInstanceId', description='代表资源一级ID的资源属性字段', example='dg-node-wJOb0tO-gaaWFCug****'),
      gatewayInstanceStatus?: string(name='GatewayInstanceStatus', example='STOPPED'),
      lastUpdateTime?: long(name='LastUpdateTime', description='上次更新时间戳', example='1699330233000'),
      localIP?: string(name='LocalIP', description='本地IP地址', example='127.0.XX.XX'),
      message?: string(name='Message', description='提示信息', example='SUCCESS'),
      outputIP?: string(name='OutputIP', description='主机', example='127.0.0.1'),
      regionId?: string(name='RegionId', description='代表region的资源属性字段', example='cn-hangzhou'),
    }
  ](name='GatewayInstanceList'),
  requestId?: string(name='RequestId', example='514F794F-7E30-5DAA-97C0-0B0D75DA0259'),
  success?: boolean(name='Success', example='true'),
}

model GetUserGatewayInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserGatewayInstancesResponseBody(name='body'),
}

async function getUserGatewayInstances(request: GetUserGatewayInstancesRequest): GetUserGatewayInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUserGatewayInstances', 'POST', '/', 'json', true, 'form', request);
}

model GetUserGatewaysRequest {
  pageNumber?: int32(name='PageNumber', example='1', position='Body'),
  pageSize?: int32(name='PageSize', example='100', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  searchKey?: string(name='SearchKey', position='Body'),
}

model GetUserGatewaysResponseBody = {
  code?: string(name='Code', example='200'),
  count?: int32(name='Count', example='20'),
  errorMsg?: string(name='ErrorMsg', example='Gateway exception, please launch local dg first'),
  gatewayList?: {
    gateway?: [ 
    {
      creatorId?: string(name='CreatorId', description='创建用户id', example='100****'),
      dgVersion?: string(name='DgVersion', description='网关版本', example='3.0'),
      exceptionMsg?: string(name='ExceptionMsg', description='网关异常信息', example='exception'),
      gatewayDesc?: string(name='GatewayDesc', description='网关的描述'),
      gatewayId?: string(name='GatewayId', description='网关的编号', example='dg-lch384wg5701****'),
      gatewayName: string(name='GatewayName', description='网关的名称'),
      numOfExceptionInstance?: int32(name='NumOfExceptionInstance', description='异常实例数量', example='3'),
      numOfRunningInstance?: int32(name='NumOfRunningInstance', description='运行中实例数量', example='3'),
      regionId?: string(name='RegionId', description='地域的编号', example='cn-hangzhou'),
      status?: string(name='Status', description='网关的状态', example='RUNNING'),
      userId?: string(name='UserId', description='用户的编号', example='100****'),
    }
  ](name='Gateway')
  }(name='GatewayList'),
  requestId?: string(name='RequestId', example='41FC4DFE-EA8A-5A56-A16C-F607C3409C79'),
  success?: boolean(name='Success', example='true'),
}

model GetUserGatewaysResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserGatewaysResponseBody(name='body'),
}

async function getUserGateways(request: GetUserGatewaysRequest): GetUserGatewaysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUserGateways', 'POST', '/', 'json', true, 'form', request);
}

model ListDatabaseAccessPointRequest {
  dbInstanceId?: string(name='DbInstanceId', example='dg-db-n2a285spnpy3****', position='Body'),
  gatewayId?: string(name='GatewayId', example='dg-nmz841r7b681****', position='Body'),
  host?: string(name='Host', example='127.0.XX.XX', position='Body'),
  pageNumber?: string(name='PageNumber', example='1', position='Body'),
  pageSize?: string(name='PageSize', example='10', position='Body'),
  port?: int32(name='Port', example='3306', minimum=0, maximum=65535, position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  searchKey?: string(name='SearchKey', position='Body'),
  vpcId?: string(name='VpcId', example='vpc-wz9c473cmu2gg7i7l****', position='Body'),
}

model ListDatabaseAccessPointResponseBody = {
  code?: string(name='Code', example='200'),
  count?: int32(name='Count', example='1'),
  dbInstanceAccessPointList?: [ 
    {
      accessAddr?: string(name='AccessAddr', example='10.0.0.0'),
      accessPort?: int32(name='AccessPort', example='33306'),
      dbInstanceId?: string(name='DbInstanceId', example='dg-db-n2a285spnpy3****'),
      gmtCreate?: long(name='GmtCreate', example='2023-03-09 14:20:04.0'),
      gmtModified?: long(name='GmtModified', example='2023-03-09 14:20:04.0'),
      routerId?: string(name='RouterId', example='dg-nmz841r7b681****'),
      vpcAzoneId?: string(name='VpcAzoneId', example='cn-hangzhou-j'),
      vpcId?: string(name='VpcId', example='vpc-2ze0612ts436tn0sh****'),
      vswitchId?: string(name='VswitchId', example='vsw-8vbgi74rgel72rax4****'),
    }
  ](name='DbInstanceAccessPointList'),
  errorMsg?: string(name='ErrorMsg', example='Gateway exception, please launch local dg first'),
  requestId?: string(name='RequestId', example='C9ADD2AA-27E3-5D62-A676-092EDC5303C1'),
  success?: string(name='Success', example='true'),
}

model ListDatabaseAccessPointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDatabaseAccessPointResponseBody(name='body'),
}

async function listDatabaseAccessPoint(request: ListDatabaseAccessPointRequest): ListDatabaseAccessPointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDatabaseAccessPoint', 'POST', '/', 'json', true, 'form', request);
}

model ModifyDatabaseRequest {
  dbDescription?: string(name='DbDescription', position='Body'),
  dbName?: string(name='DbName', example='test', position='Body'),
  dbPassword?: string(name='DbPassword', example='817130****', position='Body'),
  dbType?: string(name='DbType', example='MYSQL', position='Body'),
  dbUserName?: string(name='DbUserName', example='test', position='Body'),
  host: string(name='Host', example='127.0.XX.XX', position='Body'),
  instanceId: string(name='InstanceId', example='dg-db-n2a285spnpy3****', position='Body'),
  port: int32(name='Port', example='3306', position='Body'),
}

model ModifyDatabaseResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='SUCCESS'),
  errorMsg?: string(name='ErrorMsg', example='Gateway exception, please launch local dg first'),
  requestId?: string(name='RequestId', example='8F29E3E9-2847-53BF-ADF0-130E3CEA5C63'),
  success?: boolean(name='Success', example='true'),
}

model ModifyDatabaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDatabaseResponseBody(name='body'),
}

async function modifyDatabase(request: ModifyDatabaseRequest): ModifyDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDatabase', 'POST', '/', 'json', true, 'form', request);
}

model ModifyGatewayRequest {
  gatewayDesc?: string(name='GatewayDesc', position='Body'),
  gatewayId: string(name='GatewayId', example='dg-nmz841r7b681****', position='Body'),
  gatewayName: string(name='GatewayName', position='Body'),
}

model ModifyGatewayResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='SUCCESS'),
  errorMsg?: string(name='ErrorMsg', example='Gateway exception, please launch local dg first'),
  requestId?: string(name='RequestId', example='18071187-5EA1-5DD4-AAD9-F27C5713CD1C'),
  success?: boolean(name='Success', example='true'),
}

model ModifyGatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyGatewayResponseBody(name='body'),
}

async function modifyGateway(request: ModifyGatewayRequest): ModifyGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyGateway', 'POST', '/', 'json', true, 'form', request);
}

model RetryDatabaseRequest {
  clientToken?: string(name='ClientToken', example='XXXXX', position='Body'),
  dbDescription?: string(name='DbDescription', position='Body'),
  dbName?: string(name='DbName', example='test', position='Body'),
  dbPassword?: string(name='DbPassword', example='HongRui****', position='Body'),
  dbType?: string(name='DbType', example='MYSQL', position='Body'),
  dbUserName?: string(name='DbUserName', example='test', position='Body'),
  gatewayId: string(name='GatewayId', example='dg-nmz841r7b681****', position='Body'),
  host: string(name='Host', example='127.0.XX.XX', position='Body'),
  port: int32(name='Port', example='3306', minimum=0, maximum=65535, position='Body'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model RetryDatabaseResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='SUCCESS'),
  errorMsg?: string(name='ErrorMsg', example='Gateway exception, please launch local dg first'),
  requestId?: string(name='RequestId', example='19EDB8E2-FCE6-5797-91F4-80F832C90371'),
  success?: boolean(name='Success', example='true'),
}

model RetryDatabaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RetryDatabaseResponseBody(name='body'),
}

async function retryDatabase(request: RetryDatabaseRequest): RetryDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RetryDatabase', 'POST', '/', 'json', true, 'form', request);
}

model StopGatewayRequest {
  gatewayId: string(name='GatewayId', example='dg-nmz841r7b681****', position='Body'),
  gatewayInstanceId?: string(name='GatewayInstanceId', example='dg-node-hvsGB7qVCaaW****-v-0', position='Body'),
}

model StopGatewayResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='SUCCESS'),
  errorMsg?: string(name='ErrorMsg', example='Gateway exception, please launch local dg first'),
  requestId?: string(name='RequestId', example='DE3CC21B-E317-5ED7-A212-A62517EA0022'),
  success?: boolean(name='Success', example='true'),
}

model StopGatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopGatewayResponseBody(name='body'),
}

async function stopGateway(request: StopGatewayRequest): StopGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopGateway', 'POST', '/', 'json', true, 'form', request);
}

