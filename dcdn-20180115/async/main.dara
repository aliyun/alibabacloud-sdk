/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'dcdn';
  @version = '2018-01-15';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'dcdn.aliyuncs.com',
    ap-northeast-2-pop = 'dcdn.aliyuncs.com',
    ap-south-1 = 'dcdn.aliyuncs.com',
    ap-southeast-1 = 'dcdn.aliyuncs.com',
    ap-southeast-2 = 'dcdn.aliyuncs.com',
    ap-southeast-3 = 'dcdn.aliyuncs.com',
    ap-southeast-5 = 'dcdn.aliyuncs.com',
    cn-beijing = 'dcdn.aliyuncs.com',
    cn-beijing-finance-1 = 'dcdn.aliyuncs.com',
    cn-beijing-finance-pop = 'dcdn.aliyuncs.com',
    cn-beijing-gov-1 = 'dcdn.aliyuncs.com',
    cn-beijing-nu16-b01 = 'dcdn.aliyuncs.com',
    cn-chengdu = 'dcdn.aliyuncs.com',
    cn-edge-1 = 'dcdn.aliyuncs.com',
    cn-fujian = 'dcdn.aliyuncs.com',
    cn-haidian-cm12-c01 = 'dcdn.aliyuncs.com',
    cn-hangzhou = 'dcdn.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'dcdn.aliyuncs.com',
    cn-hangzhou-finance = 'dcdn.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'dcdn.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'dcdn.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'dcdn.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'dcdn.aliyuncs.com',
    cn-hangzhou-test-306 = 'dcdn.aliyuncs.com',
    cn-hongkong = 'dcdn.aliyuncs.com',
    cn-hongkong-finance-pop = 'dcdn.aliyuncs.com',
    cn-huhehaote = 'dcdn.aliyuncs.com',
    cn-north-2-gov-1 = 'dcdn.aliyuncs.com',
    cn-qingdao = 'dcdn.aliyuncs.com',
    cn-qingdao-nebula = 'dcdn.aliyuncs.com',
    cn-shanghai = 'dcdn.aliyuncs.com',
    cn-shanghai-et15-b01 = 'dcdn.aliyuncs.com',
    cn-shanghai-et2-b01 = 'dcdn.aliyuncs.com',
    cn-shanghai-finance-1 = 'dcdn.aliyuncs.com',
    cn-shanghai-inner = 'dcdn.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'dcdn.aliyuncs.com',
    cn-shenzhen = 'dcdn.aliyuncs.com',
    cn-shenzhen-finance-1 = 'dcdn.aliyuncs.com',
    cn-shenzhen-inner = 'dcdn.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'dcdn.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'dcdn.aliyuncs.com',
    cn-wuhan = 'dcdn.aliyuncs.com',
    cn-yushanfang = 'dcdn.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'dcdn.aliyuncs.com',
    cn-zhangjiakou = 'dcdn.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'dcdn.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'dcdn.aliyuncs.com',
    eu-central-1 = 'dcdn.aliyuncs.com',
    eu-west-1 = 'dcdn.aliyuncs.com',
    eu-west-1-oxs = 'dcdn.aliyuncs.com',
    me-east-1 = 'dcdn.aliyuncs.com',
    rus-west-1-pop = 'dcdn.aliyuncs.com',
    us-east-1 = 'dcdn.aliyuncs.com',
    us-west-1 = 'dcdn.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AddDcdnDomainRequest {
  checkUrl?: string(name='CheckUrl', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  scope?: string(name='Scope', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  sources: string(name='Sources', position='Query'),
  topLevelDomain?: string(name='TopLevelDomain', position='Query'),
}

model AddDcdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddDcdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: AddDcdnDomainResponseBody(name='body'),
}

async function addDcdnDomain(request: AddDcdnDomainRequest): AddDcdnDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddDcdnDomain', 'POST', '/', 'json', false, 'json', request);
}

model AddDcdnIpaDomainRequest {
  checkUrl?: string(name='CheckUrl', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  protocol?: string(name='Protocol', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  scope?: string(name='Scope', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  sources: string(name='Sources', position='Query'),
  topLevelDomain?: string(name='TopLevelDomain', position='Query'),
}

model AddDcdnIpaDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddDcdnIpaDomainResponse = {
  headers: map[string]string(name='headers'),
  body: AddDcdnIpaDomainResponseBody(name='body'),
}

async function addDcdnIpaDomain(request: AddDcdnIpaDomainRequest): AddDcdnIpaDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddDcdnIpaDomain', 'POST', '/', 'json', false, 'json', request);
}

model BatchAddDcdnDomainRequest {
  checkUrl?: string(name='CheckUrl', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  scope?: string(name='Scope', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  sources: string(name='Sources', position='Query'),
  topLevelDomain?: string(name='TopLevelDomain', position='Query'),
}

model BatchAddDcdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchAddDcdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: BatchAddDcdnDomainResponseBody(name='body'),
}

async function batchAddDcdnDomain(request: BatchAddDcdnDomainRequest): BatchAddDcdnDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchAddDcdnDomain', 'POST', '/', 'json', false, 'json', request);
}

model BatchDeleteDcdnDomainConfigsRequest {
  domainNames: string(name='DomainNames', position='Query'),
  functionNames: string(name='FunctionNames', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model BatchDeleteDcdnDomainConfigsResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchDeleteDcdnDomainConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchDeleteDcdnDomainConfigsResponseBody(name='body'),
}

async function batchDeleteDcdnDomainConfigs(request: BatchDeleteDcdnDomainConfigsRequest): BatchDeleteDcdnDomainConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchDeleteDcdnDomainConfigs', 'POST', '/', 'json', false, 'json', request);
}

model BatchSetDcdnDomainCertificateRequest {
  certName?: string(name='CertName', position='Query'),
  certType?: string(name='CertType', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  region?: string(name='Region', position='Query'),
  SSLPri?: string(name='SSLPri', position='Query'),
  SSLProtocol: string(name='SSLProtocol', position='Query'),
  SSLPub?: string(name='SSLPub', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model BatchSetDcdnDomainCertificateResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchSetDcdnDomainCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: BatchSetDcdnDomainCertificateResponseBody(name='body'),
}

async function batchSetDcdnDomainCertificate(request: BatchSetDcdnDomainCertificateRequest): BatchSetDcdnDomainCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchSetDcdnDomainCertificate', 'POST', '/', 'json', false, 'json', request);
}

model BatchSetDcdnDomainConfigsRequest {
  domainNames: string(name='DomainNames', position='Query'),
  functions: string(name='Functions', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model BatchSetDcdnDomainConfigsResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchSetDcdnDomainConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchSetDcdnDomainConfigsResponseBody(name='body'),
}

async function batchSetDcdnDomainConfigs(request: BatchSetDcdnDomainConfigsRequest): BatchSetDcdnDomainConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchSetDcdnDomainConfigs', 'POST', '/', 'json', false, 'json', request);
}

model BatchSetDcdnIpaDomainConfigsRequest {
  domainNames: string(name='DomainNames', position='Query'),
  functions: string(name='Functions', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model BatchSetDcdnIpaDomainConfigsResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchSetDcdnIpaDomainConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchSetDcdnIpaDomainConfigsResponseBody(name='body'),
}

async function batchSetDcdnIpaDomainConfigs(request: BatchSetDcdnIpaDomainConfigsRequest): BatchSetDcdnIpaDomainConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchSetDcdnIpaDomainConfigs', 'POST', '/', 'json', false, 'json', request);
}

model BatchStartDcdnDomainRequest {
  domainNames: string(name='DomainNames', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model BatchStartDcdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchStartDcdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: BatchStartDcdnDomainResponseBody(name='body'),
}

async function batchStartDcdnDomain(request: BatchStartDcdnDomainRequest): BatchStartDcdnDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchStartDcdnDomain', 'POST', '/', 'json', false, 'json', request);
}

model BatchStopDcdnDomainRequest {
  domainNames: string(name='DomainNames', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model BatchStopDcdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchStopDcdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: BatchStopDcdnDomainResponseBody(name='body'),
}

async function batchStopDcdnDomain(request: BatchStopDcdnDomainRequest): BatchStopDcdnDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchStopDcdnDomain', 'POST', '/', 'json', false, 'json', request);
}

model CheckDcdnProjectExistRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  projectName: string(name='ProjectName', position='Query'),
}

model CheckDcdnProjectExistResponseBody = {
  content?: {
    exist?: string(name='Exist'),
  }(name='Content'),
  requestId?: string(name='RequestId'),
}

model CheckDcdnProjectExistResponse = {
  headers: map[string]string(name='headers'),
  body: CheckDcdnProjectExistResponseBody(name='body'),
}

async function checkDcdnProjectExist(request: CheckDcdnProjectExistRequest): CheckDcdnProjectExistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckDcdnProjectExist', 'GET', '/', 'json', false, 'json', request);
}

model CommitStagingRoutineCodeRequest {
  codeDescription: string(name='CodeDescription', position='Body'),
  name: string(name='Name', position='Body'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model CommitStagingRoutineCodeResponseBody = {
  content?: map[string]any(name='Content'),
  requestId?: string(name='RequestId'),
}

model CommitStagingRoutineCodeResponse = {
  headers: map[string]string(name='headers'),
  body: CommitStagingRoutineCodeResponseBody(name='body'),
}

async function commitStagingRoutineCode(request: CommitStagingRoutineCodeRequest): CommitStagingRoutineCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CommitStagingRoutineCode', 'POST', '/', 'json', true, 'form', request);
}

model CreateDcdnCertificateSigningRequestRequest {
  city?: string(name='City', position='Query'),
  commonName: string(name='CommonName', position='Query'),
  country?: string(name='Country', position='Query'),
  email?: string(name='Email', position='Query'),
  organization?: string(name='Organization', position='Query'),
  organizationUnit?: string(name='OrganizationUnit', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  SANs?: string(name='SANs', position='Query'),
  state?: string(name='State', position='Query'),
}

model CreateDcdnCertificateSigningRequestResponseBody = {
  commonName?: string(name='CommonName'),
  csr?: string(name='Csr'),
  pubMd5?: string(name='PubMd5'),
  requestId?: string(name='RequestId'),
}

model CreateDcdnCertificateSigningRequestResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDcdnCertificateSigningRequestResponseBody(name='body'),
}

async function createDcdnCertificateSigningRequest(request: CreateDcdnCertificateSigningRequestRequest): CreateDcdnCertificateSigningRequestResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDcdnCertificateSigningRequest', 'POST', '/', 'json', false, 'json', request);
}

model CreateDcdnDeliverTaskRequest {
  deliver: string(name='Deliver', position='Body'),
  domainName?: string(name='DomainName', position='Body'),
  name: string(name='Name', position='Body'),
  ownerId?: long(name='OwnerId', position='Query'),
  reports: string(name='Reports', position='Body'),
  schedule: string(name='Schedule', position='Body'),
}

model CreateDcdnDeliverTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateDcdnDeliverTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDcdnDeliverTaskResponseBody(name='body'),
}

async function createDcdnDeliverTask(request: CreateDcdnDeliverTaskRequest): CreateDcdnDeliverTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDcdnDeliverTask', 'POST', '/', 'json', true, 'form', request);
}

model CreateDcdnSLSRealTimeLogDeliveryRequest {
  businessType?: string(name='BusinessType', position='Body'),
  dataCenter: string(name='DataCenter', position='Body'),
  domainName: string(name='DomainName', position='Body'),
  ownerId?: long(name='OwnerId', position='Query'),
  projectName: string(name='ProjectName', position='Body'),
  SLSLogStore: string(name='SLSLogStore', position='Body'),
  SLSProject: string(name='SLSProject', position='Body'),
  SLSRegion: string(name='SLSRegion', position='Body'),
  samplingRate?: string(name='SamplingRate', position='Body'),
}

model CreateDcdnSLSRealTimeLogDeliveryResponseBody = {
  content?: {
    domains?: [ 
    {
      desc?: string(name='Desc'),
      domainName?: string(name='DomainName'),
      region?: string(name='Region'),
      status?: string(name='Status'),
    }
  ](name='Domains')
  }(name='Content'),
  requestId?: string(name='RequestId'),
}

model CreateDcdnSLSRealTimeLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDcdnSLSRealTimeLogDeliveryResponseBody(name='body'),
}

async function createDcdnSLSRealTimeLogDelivery(request: CreateDcdnSLSRealTimeLogDeliveryRequest): CreateDcdnSLSRealTimeLogDeliveryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDcdnSLSRealTimeLogDelivery', 'POST', '/', 'json', true, 'form', request);
}

model CreateDcdnSubTaskRequest {
  domainName?: string(name='DomainName', maxLength=7000, position='Body'),
  ownerId?: long(name='OwnerId', position='Query'),
  reportIds: string(name='ReportIds', position='Body'),
}

model CreateDcdnSubTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateDcdnSubTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDcdnSubTaskResponseBody(name='body'),
}

async function createDcdnSubTask(request: CreateDcdnSubTaskRequest): CreateDcdnSubTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDcdnSubTask', 'POST', '/', 'json', true, 'form', request);
}

model CreateRoutineRequest {
  description?: string(name='Description', position='Body'),
  envConf?: map[string]any(name='EnvConf', position='Body'),
  name: string(name='Name', position='Body'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model CreateRoutineResponseBody = {
  content?: map[string]any(name='Content'),
  requestId?: string(name='RequestId'),
}

model CreateRoutineResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRoutineResponseBody(name='body'),
}

async function createRoutine(request: CreateRoutineRequest): CreateRoutineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRoutine', 'POST', '/', 'json', true, 'form', request);
}

model CreateSlrAndSlsProjectRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  region: string(name='Region', position='Body'),
}

model CreateSlrAndSlsProjectResponseBody = {
  requestId?: string(name='RequestId'),
  slsInfo?: {
    endPoint?: string(name='EndPoint'),
    logStore?: string(name='LogStore'),
    project?: string(name='Project'),
    region?: string(name='Region'),
  }(name='SlsInfo'),
}

model CreateSlrAndSlsProjectResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSlrAndSlsProjectResponseBody(name='body'),
}

async function createSlrAndSlsProject(request: CreateSlrAndSlsProjectRequest): CreateSlrAndSlsProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSlrAndSlsProject', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDcdnDeliverTaskRequest {
  deliverId: long(name='DeliverId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DeleteDcdnDeliverTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDcdnDeliverTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDcdnDeliverTaskResponseBody(name='body'),
}

async function deleteDcdnDeliverTask(request: DeleteDcdnDeliverTaskRequest): DeleteDcdnDeliverTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDcdnDeliverTask', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDcdnDomainRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteDcdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDcdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDcdnDomainResponseBody(name='body'),
}

async function deleteDcdnDomain(request: DeleteDcdnDomainRequest): DeleteDcdnDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDcdnDomain', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDcdnIpaDomainRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteDcdnIpaDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDcdnIpaDomainResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDcdnIpaDomainResponseBody(name='body'),
}

async function deleteDcdnIpaDomain(request: DeleteDcdnIpaDomainRequest): DeleteDcdnIpaDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDcdnIpaDomain', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDcdnIpaSpecificConfigRequest {
  configId: string(name='ConfigId', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteDcdnIpaSpecificConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDcdnIpaSpecificConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDcdnIpaSpecificConfigResponseBody(name='body'),
}

async function deleteDcdnIpaSpecificConfig(request: DeleteDcdnIpaSpecificConfigRequest): DeleteDcdnIpaSpecificConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDcdnIpaSpecificConfig', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDcdnRealTimeLogProjectRequest {
  businessType?: string(name='BusinessType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  projectName: string(name='ProjectName', position='Query'),
}

model DeleteDcdnRealTimeLogProjectResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDcdnRealTimeLogProjectResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDcdnRealTimeLogProjectResponseBody(name='body'),
}

async function deleteDcdnRealTimeLogProject(request: DeleteDcdnRealTimeLogProjectRequest): DeleteDcdnRealTimeLogProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDcdnRealTimeLogProject', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDcdnSpecificConfigRequest {
  configId: string(name='ConfigId', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteDcdnSpecificConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDcdnSpecificConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDcdnSpecificConfigResponseBody(name='body'),
}

async function deleteDcdnSpecificConfig(request: DeleteDcdnSpecificConfigRequest): DeleteDcdnSpecificConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDcdnSpecificConfig', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDcdnSpecificStagingConfigRequest {
  configId: string(name='ConfigId', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteDcdnSpecificStagingConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDcdnSpecificStagingConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDcdnSpecificStagingConfigResponseBody(name='body'),
}

async function deleteDcdnSpecificStagingConfig(request: DeleteDcdnSpecificStagingConfigRequest): DeleteDcdnSpecificStagingConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDcdnSpecificStagingConfig', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDcdnSubTaskRequest {
  ownerId?: long(name='OwnerId', position='Query'),
}

model DeleteDcdnSubTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDcdnSubTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDcdnSubTaskResponseBody(name='body'),
}

async function deleteDcdnSubTask(request: DeleteDcdnSubTaskRequest): DeleteDcdnSubTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDcdnSubTask', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRoutineRequest {
  name: string(name='Name', position='Body'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DeleteRoutineResponseBody = {
  content?: map[string]any(name='Content'),
  requestId?: string(name='RequestId'),
}

model DeleteRoutineResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRoutineResponseBody(name='body'),
}

async function deleteRoutine(request: DeleteRoutineRequest): DeleteRoutineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRoutine', 'POST', '/', 'json', true, 'form', request);
}

model DeleteRoutineCodeRevisionRequest {
  name: string(name='Name', position='Body'),
  ownerId?: long(name='OwnerId', position='Query'),
  selectCodeRevision: string(name='SelectCodeRevision', position='Body'),
}

model DeleteRoutineCodeRevisionResponseBody = {
  content?: map[string]any(name='Content'),
  requestId?: string(name='RequestId'),
}

model DeleteRoutineCodeRevisionResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRoutineCodeRevisionResponseBody(name='body'),
}

async function deleteRoutineCodeRevision(request: DeleteRoutineCodeRevisionRequest): DeleteRoutineCodeRevisionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRoutineCodeRevision', 'POST', '/', 'json', true, 'form', request);
}

model DeleteRoutineConfEnvsRequest {
  envs: map[string]any(name='Envs', position='Body'),
  name: string(name='Name', position='Body'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DeleteRoutineConfEnvsResponseBody = {
  content?: map[string]any(name='Content'),
  requestId?: string(name='RequestId'),
}

model DeleteRoutineConfEnvsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRoutineConfEnvsResponseBody(name='body'),
}

async function deleteRoutineConfEnvs(request: DeleteRoutineConfEnvsRequest): DeleteRoutineConfEnvsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRoutineConfEnvs', 'POST', '/', 'json', true, 'form', request);
}

model DescribeDcdnAclFieldsRequest {
  lang: string(name='Lang', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeDcdnAclFieldsResponseBody = {
  content?: [ 
    {
      fields?: string(name='Fields'),
    }
  ](name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnAclFieldsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnAclFieldsResponseBody(name='body'),
}

async function describeDcdnAclFields(request: DescribeDcdnAclFieldsRequest): DescribeDcdnAclFieldsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnAclFields', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnBgpBpsDataRequest {
  endTime?: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  isp?: string(name='Isp', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDcdnBgpBpsDataResponseBody = {
  bgpDataInterval?: [ 
    {
      in?: float(name='In'),
      out?: float(name='Out'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='BgpDataInterval'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnBgpBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnBgpBpsDataResponseBody(name='body'),
}

async function describeDcdnBgpBpsData(request: DescribeDcdnBgpBpsDataRequest): DescribeDcdnBgpBpsDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnBgpBpsData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnBgpTrafficDataRequest {
  endTime?: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  isp?: string(name='Isp', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDcdnBgpTrafficDataResponseBody = {
  bgpDataInterval?: [ 
    {
      in?: long(name='In'),
      out?: long(name='Out'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='BgpDataInterval'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnBgpTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnBgpTrafficDataResponseBody(name='body'),
}

async function describeDcdnBgpTrafficData(request: DescribeDcdnBgpTrafficDataRequest): DescribeDcdnBgpTrafficDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnBgpTrafficData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnBlockedRegionsRequest {
  language: string(name='Language', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeDcdnBlockedRegionsResponseBody = {
  infoList?: {
    infoItem?: [ 
    {
      continent?: string(name='Continent'),
      countriesAndRegions?: string(name='CountriesAndRegions'),
      countriesAndRegionsName?: string(name='CountriesAndRegionsName'),
    }
  ](name='InfoItem')
  }(name='InfoList'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnBlockedRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnBlockedRegionsResponseBody(name='body'),
}

async function describeDcdnBlockedRegions(request: DescribeDcdnBlockedRegionsRequest): DescribeDcdnBlockedRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnBlockedRegions', 'GET', '/', 'json', false, 'json', request);
}

model DescribeDcdnCertificateDetailRequest {
  certName: string(name='CertName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeDcdnCertificateDetailResponseBody = {
  cert?: string(name='Cert'),
  certId?: long(name='CertId'),
  certName?: string(name='CertName'),
  key?: string(name='Key'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnCertificateDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnCertificateDetailResponseBody(name='body'),
}

async function describeDcdnCertificateDetail(request: DescribeDcdnCertificateDetailRequest): DescribeDcdnCertificateDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnCertificateDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnCertificateListRequest {
  domainName?: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeDcdnCertificateListResponseBody = {
  certificateListModel?: {
    certList?: {
      cert?: [ 
      {
        certId?: long(name='CertId'),
        certName?: string(name='CertName'),
        common?: string(name='Common'),
        fingerprint?: string(name='Fingerprint'),
        issuer?: string(name='Issuer'),
        lastTime?: long(name='LastTime'),
      }
    ](name='Cert')
    }(name='CertList'),
    count?: int32(name='Count'),
  }(name='CertificateListModel'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnCertificateListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnCertificateListResponseBody(name='body'),
}

async function describeDcdnCertificateList(request: DescribeDcdnCertificateListRequest): DescribeDcdnCertificateListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnCertificateList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnConfigGroupDetailRequest {
  configGroupId?: string(name='ConfigGroupId', position='Query'),
  configGroupName?: string(name='ConfigGroupName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeDcdnConfigGroupDetailResponseBody = {
  bizName?: string(name='BizName'),
  configGroupId?: string(name='ConfigGroupId'),
  configGroupName?: string(name='ConfigGroupName'),
  createTime?: string(name='CreateTime'),
  description?: string(name='Description'),
  requestId?: string(name='RequestId'),
  updateTime?: string(name='UpdateTime'),
}

model DescribeDcdnConfigGroupDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnConfigGroupDetailResponseBody(name='body'),
}

async function describeDcdnConfigGroupDetail(request: DescribeDcdnConfigGroupDetailRequest): DescribeDcdnConfigGroupDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnConfigGroupDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnConfigOfVersionRequest {
  functionId?: int32(name='FunctionId', position='Query'),
  functionName?: string(name='FunctionName', position='Query'),
  groupId?: long(name='GroupId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  versionId: string(name='VersionId', position='Query'),
}

model DescribeDcdnConfigOfVersionResponseBody = {
  requestId?: string(name='RequestId'),
  versionConfigs?: {
    versionConfig?: [ 
    {
      configId?: string(name='ConfigId'),
      functionArgs?: {
        functionArg?: [ 
        {
          argName?: string(name='ArgName'),
          argValue?: string(name='ArgValue'),
        }
      ](name='FunctionArg')
      }(name='FunctionArgs'),
      functionName?: string(name='FunctionName'),
      status?: string(name='Status'),
    }
  ](name='VersionConfig')
  }(name='VersionConfigs'),
}

model DescribeDcdnConfigOfVersionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnConfigOfVersionResponseBody(name='body'),
}

async function describeDcdnConfigOfVersion(request: DescribeDcdnConfigOfVersionRequest): DescribeDcdnConfigOfVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnConfigOfVersion', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnDeletedDomainsRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, maximum=100000, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=500, position='Query'),
}

model DescribeDcdnDeletedDomainsResponseBody = {
  domains?: {
    pageData?: [ 
    {
      domainName?: string(name='DomainName'),
      gmtModified?: string(name='GmtModified'),
    }
  ](name='PageData')
  }(name='Domains'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeDcdnDeletedDomainsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDeletedDomainsResponseBody(name='body'),
}

async function describeDcdnDeletedDomains(request: DescribeDcdnDeletedDomainsRequest): DescribeDcdnDeletedDomainsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnDeletedDomains', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnDeliverListRequest {
  deliverId?: long(name='DeliverId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeDcdnDeliverListResponseBody = {
  content?: string(name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnDeliverListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDeliverListResponseBody(name='body'),
}

async function describeDcdnDeliverList(request: DescribeDcdnDeliverListRequest): DescribeDcdnDeliverListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnDeliverList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnDomainBpsDataRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDcdnDomainBpsDataResponseBody = {
  bpsDataPerInterval?: {
    dataModule?: [ 
    {
      bps?: float(name='Bps'),
      dynamicHttpBps?: float(name='DynamicHttpBps'),
      dynamicHttpsBps?: float(name='DynamicHttpsBps'),
      staticHttpBps?: float(name='StaticHttpBps'),
      staticHttpsBps?: float(name='StaticHttpsBps'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='BpsDataPerInterval'),
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainBpsDataResponseBody(name='body'),
}

async function describeDcdnDomainBpsData(request: DescribeDcdnDomainBpsDataRequest): DescribeDcdnDomainBpsDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnDomainBpsData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnDomainBpsDataByLayerRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  layer?: string(name='Layer', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDcdnDomainBpsDataByLayerResponseBody = {
  bpsDataInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      trafficValue?: string(name='TrafficValue'),
      value?: string(name='Value'),
    }
  ](name='DataModule')
  }(name='BpsDataInterval'),
  dataInterval?: string(name='DataInterval'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnDomainBpsDataByLayerResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainBpsDataByLayerResponseBody(name='body'),
}

async function describeDcdnDomainBpsDataByLayer(request: DescribeDcdnDomainBpsDataByLayerRequest): DescribeDcdnDomainBpsDataByLayerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnDomainBpsDataByLayer', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnDomainByCertificateRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  SSLPub: string(name='SSLPub', position='Query'),
}

model DescribeDcdnDomainByCertificateResponseBody = {
  certInfos?: {
    certInfo?: [ 
    {
      certCaIsLegacy?: string(name='CertCaIsLegacy'),
      certExpireTime?: string(name='CertExpireTime'),
      certExpired?: string(name='CertExpired'),
      certStartTime?: string(name='CertStartTime'),
      certSubjectCommonName?: string(name='CertSubjectCommonName'),
      certType?: string(name='CertType'),
      domainList?: string(name='DomainList'),
      domainNames?: string(name='DomainNames'),
      issuer?: string(name='Issuer'),
    }
  ](name='CertInfo')
  }(name='CertInfos'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnDomainByCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainByCertificateResponseBody(name='body'),
}

async function describeDcdnDomainByCertificate(request: DescribeDcdnDomainByCertificateRequest): DescribeDcdnDomainByCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnDomainByCertificate', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnDomainCcActivityLogRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: long(name='PageNumber', position='Query'),
  pageSize?: long(name='PageSize', position='Query'),
  ruleName?: string(name='RuleName', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
  triggerObject?: string(name='TriggerObject', position='Query'),
  value?: string(name='Value', position='Query'),
}

model DescribeDcdnDomainCcActivityLogResponseBody = {
  activityLog?: [ 
    {
      action?: string(name='Action'),
      domainName?: string(name='DomainName'),
      ruleName?: string(name='RuleName'),
      timeStamp?: string(name='TimeStamp'),
      triggerObject?: string(name='TriggerObject'),
      ttl?: long(name='Ttl'),
      value?: string(name='Value'),
    }
  ](name='ActivityLog'),
  pageIndex?: long(name='PageIndex'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model DescribeDcdnDomainCcActivityLogResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainCcActivityLogResponseBody(name='body'),
}

async function describeDcdnDomainCcActivityLog(request: DescribeDcdnDomainCcActivityLogRequest): DescribeDcdnDomainCcActivityLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnDomainCcActivityLog', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnDomainCertificateInfoRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeDcdnDomainCertificateInfoResponseBody = {
  certInfos?: {
    certInfo?: [ 
    {
      certDomainName?: string(name='CertDomainName'),
      certExpireTime?: string(name='CertExpireTime'),
      certLife?: string(name='CertLife'),
      certName?: string(name='CertName'),
      certOrg?: string(name='CertOrg'),
      certType?: string(name='CertType'),
      domainName?: string(name='DomainName'),
      SSLProtocol?: string(name='SSLProtocol'),
      SSLPub?: string(name='SSLPub'),
      status?: string(name='Status'),
    }
  ](name='CertInfo')
  }(name='CertInfos'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnDomainCertificateInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainCertificateInfoResponseBody(name='body'),
}

async function describeDcdnDomainCertificateInfo(request: DescribeDcdnDomainCertificateInfoRequest): DescribeDcdnDomainCertificateInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnDomainCertificateInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnDomainCnameRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeDcdnDomainCnameResponseBody = {
  cnameDatas?: {
    data?: [ 
    {
      cname?: string(name='Cname'),
      domain?: string(name='Domain'),
      status?: int32(name='Status'),
    }
  ](name='Data')
  }(name='CnameDatas'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnDomainCnameResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainCnameResponseBody(name='body'),
}

async function describeDcdnDomainCname(request: DescribeDcdnDomainCnameRequest): DescribeDcdnDomainCnameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnDomainCname', 'GET', '/', 'json', false, 'json', request);
}

model DescribeDcdnDomainConfigsRequest {
  configId?: string(name='ConfigId', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  functionNames: string(name='FunctionNames', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeDcdnDomainConfigsResponseBody = {
  domainConfigs?: {
    domainConfig?: [ 
    {
      configId?: string(name='ConfigId'),
      functionArgs?: {
        functionArg?: [ 
        {
          argName?: string(name='ArgName'),
          argValue?: string(name='ArgValue'),
        }
      ](name='FunctionArg')
      }(name='FunctionArgs'),
      functionName?: string(name='FunctionName'),
      status?: string(name='Status'),
    }
  ](name='DomainConfig')
  }(name='DomainConfigs'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnDomainConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainConfigsResponseBody(name='body'),
}

async function describeDcdnDomainConfigs(request: DescribeDcdnDomainConfigsRequest): DescribeDcdnDomainConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnDomainConfigs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnDomainDetailRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeDcdnDomainDetailResponseBody = {
  domainDetail?: {
    certName?: string(name='CertName'),
    cname?: string(name='Cname'),
    description?: string(name='Description'),
    domainName?: string(name='DomainName'),
    domainStatus?: string(name='DomainStatus'),
    gmtCreated?: string(name='GmtCreated'),
    gmtModified?: string(name='GmtModified'),
    resourceGroupId?: string(name='ResourceGroupId'),
    SSLProtocol?: string(name='SSLProtocol'),
    SSLPub?: string(name='SSLPub'),
    scope?: string(name='Scope'),
    sources?: {
      source?: [ 
      {
        content?: string(name='Content'),
        enabled?: string(name='Enabled'),
        port?: int32(name='Port'),
        priority?: string(name='Priority'),
        type?: string(name='Type'),
        weight?: string(name='Weight'),
      }
    ](name='Source')
    }(name='Sources'),
  }(name='DomainDetail'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnDomainDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainDetailResponseBody(name='body'),
}

async function describeDcdnDomainDetail(request: DescribeDcdnDomainDetailRequest): DescribeDcdnDomainDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnDomainDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnDomainHitRateDataRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDcdnDomainHitRateDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  hitRatePerInterval?: {
    dataModule?: [ 
    {
      byteHitRate?: float(name='ByteHitRate'),
      reqHitRate?: float(name='ReqHitRate'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='HitRatePerInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainHitRateDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainHitRateDataResponseBody(name='body'),
}

async function describeDcdnDomainHitRateData(request: DescribeDcdnDomainHitRateDataRequest): DescribeDcdnDomainHitRateDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnDomainHitRateData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnDomainHttpCodeDataRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDcdnDomainHttpCodeDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  dataPerInterval?: {
    dataModule?: [ 
    {
      httpCodeDataPerInterval?: {
        httpCodeDataModule?: [ 
        {
          code?: int32(name='Code'),
          count?: float(name='Count'),
          proportion?: float(name='Proportion'),
        }
      ](name='HttpCodeDataModule')
      }(name='HttpCodeDataPerInterval'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='DataPerInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainHttpCodeDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainHttpCodeDataResponseBody(name='body'),
}

async function describeDcdnDomainHttpCodeData(request: DescribeDcdnDomainHttpCodeDataRequest): DescribeDcdnDomainHttpCodeDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnDomainHttpCodeData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnDomainHttpCodeDataByLayerRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  layer?: string(name='Layer', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDcdnDomainHttpCodeDataByLayerResponseBody = {
  dataInterval?: string(name='DataInterval'),
  httpCodeDataInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      totalValue?: string(name='TotalValue'),
      value?: string(name='Value'),
    }
  ](name='DataModule')
  }(name='HttpCodeDataInterval'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnDomainHttpCodeDataByLayerResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainHttpCodeDataByLayerResponseBody(name='body'),
}

async function describeDcdnDomainHttpCodeDataByLayer(request: DescribeDcdnDomainHttpCodeDataByLayerRequest): DescribeDcdnDomainHttpCodeDataByLayerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnDomainHttpCodeDataByLayer', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnDomainIpaBpsDataRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  fixTimeGap?: string(name='FixTimeGap', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
  timeMerge?: string(name='TimeMerge', position='Query'),
}

model DescribeDcdnDomainIpaBpsDataResponseBody = {
  bpsDataPerInterval?: {
    dataModule?: [ 
    {
      ipaBps?: float(name='IpaBps'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='BpsDataPerInterval'),
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainIpaBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainIpaBpsDataResponseBody(name='body'),
}

async function describeDcdnDomainIpaBpsData(request: DescribeDcdnDomainIpaBpsDataRequest): DescribeDcdnDomainIpaBpsDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnDomainIpaBpsData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnDomainIpaTrafficDataRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  fixTimeGap?: string(name='FixTimeGap', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
  timeMerge?: string(name='TimeMerge', position='Query'),
}

model DescribeDcdnDomainIpaTrafficDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  trafficDataPerInterval?: {
    dataModule?: [ 
    {
      ipaTraffic?: float(name='IpaTraffic'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='TrafficDataPerInterval'),
}

model DescribeDcdnDomainIpaTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainIpaTrafficDataResponseBody(name='body'),
}

async function describeDcdnDomainIpaTrafficData(request: DescribeDcdnDomainIpaTrafficDataRequest): DescribeDcdnDomainIpaTrafficDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnDomainIpaTrafficData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnDomainIspDataRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDcdnDomainIspDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  value?: {
    ispProportionData?: [ 
    {
      avgObjectSize?: string(name='AvgObjectSize'),
      avgResponseRate?: string(name='AvgResponseRate'),
      avgResponseTime?: string(name='AvgResponseTime'),
      bps?: string(name='Bps'),
      bytesProportion?: string(name='BytesProportion'),
      isp?: string(name='Isp'),
      ispEname?: string(name='IspEname'),
      proportion?: string(name='Proportion'),
      qps?: string(name='Qps'),
      totalBytes?: string(name='TotalBytes'),
      totalQuery?: string(name='TotalQuery'),
    }
  ](name='IspProportionData')
  }(name='Value'),
}

model DescribeDcdnDomainIspDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainIspDataResponseBody(name='body'),
}

async function describeDcdnDomainIspData(request: DescribeDcdnDomainIspDataRequest): DescribeDcdnDomainIspDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnDomainIspData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnDomainLogRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: long(name='PageNumber', position='Query'),
  pageSize?: long(name='PageSize', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDcdnDomainLogResponseBody = {
  domainLogDetails?: {
    domainLogDetail?: [ 
    {
      logCount?: long(name='LogCount'),
      logInfos?: {
        logInfoDetail?: [ 
        {
          endTime?: string(name='EndTime'),
          logName?: string(name='LogName'),
          logPath?: string(name='LogPath'),
          logSize?: long(name='LogSize'),
          startTime?: string(name='StartTime'),
        }
      ](name='LogInfoDetail')
      }(name='LogInfos'),
      pageInfos?: {
        pageIndex?: long(name='PageIndex'),
        pageSize?: long(name='PageSize'),
        total?: long(name='Total'),
      }(name='PageInfos'),
    }
  ](name='DomainLogDetail')
  }(name='DomainLogDetails'),
  domainName?: string(name='DomainName'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnDomainLogResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainLogResponseBody(name='body'),
}

async function describeDcdnDomainLog(request: DescribeDcdnDomainLogRequest): DescribeDcdnDomainLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnDomainLog', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnDomainMultiUsageDataRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDcdnDomainMultiUsageDataResponseBody = {
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  requestPerInterval?: {
    requestDataModule?: [ 
    {
      domain?: string(name='Domain'),
      request?: long(name='Request'),
      timeStamp?: string(name='TimeStamp'),
      type?: string(name='Type'),
    }
  ](name='RequestDataModule')
  }(name='RequestPerInterval'),
  startTime?: string(name='StartTime'),
  trafficPerInterval?: {
    trafficDataModule?: [ 
    {
      area?: string(name='Area'),
      bps?: float(name='Bps'),
      domain?: string(name='Domain'),
      timeStamp?: string(name='TimeStamp'),
      type?: string(name='Type'),
    }
  ](name='TrafficDataModule')
  }(name='TrafficPerInterval'),
}

model DescribeDcdnDomainMultiUsageDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainMultiUsageDataResponseBody(name='body'),
}

async function describeDcdnDomainMultiUsageData(request: DescribeDcdnDomainMultiUsageDataRequest): DescribeDcdnDomainMultiUsageDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnDomainMultiUsageData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnDomainOriginBpsDataRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDcdnDomainOriginBpsDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  originBpsDataPerInterval?: {
    dataModule?: [ 
    {
      dynamicHttpOriginBps?: float(name='DynamicHttpOriginBps'),
      dynamicHttpsOriginBps?: float(name='DynamicHttpsOriginBps'),
      originBps?: float(name='OriginBps'),
      staticHttpOriginBps?: float(name='StaticHttpOriginBps'),
      staticHttpsOriginBps?: float(name='StaticHttpsOriginBps'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='OriginBpsDataPerInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainOriginBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainOriginBpsDataResponseBody(name='body'),
}

async function describeDcdnDomainOriginBpsData(request: DescribeDcdnDomainOriginBpsDataRequest): DescribeDcdnDomainOriginBpsDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnDomainOriginBpsData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnDomainOriginTrafficDataRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDcdnDomainOriginTrafficDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  originTrafficDataPerInterval?: {
    dataModule?: [ 
    {
      dynamicHttpOriginTraffic?: float(name='DynamicHttpOriginTraffic'),
      dynamicHttpsOriginTraffic?: float(name='DynamicHttpsOriginTraffic'),
      originTraffic?: float(name='OriginTraffic'),
      staticHttpOriginTraffic?: float(name='StaticHttpOriginTraffic'),
      staticHttpsOriginTraffic?: float(name='StaticHttpsOriginTraffic'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='OriginTrafficDataPerInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainOriginTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainOriginTrafficDataResponseBody(name='body'),
}

async function describeDcdnDomainOriginTrafficData(request: DescribeDcdnDomainOriginTrafficDataRequest): DescribeDcdnDomainOriginTrafficDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnDomainOriginTrafficData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnDomainPropertyRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeDcdnDomainPropertyResponseBody = {
  domainName?: string(name='DomainName'),
  protocol?: string(name='Protocol'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnDomainPropertyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainPropertyResponseBody(name='body'),
}

async function describeDcdnDomainProperty(request: DescribeDcdnDomainPropertyRequest): DescribeDcdnDomainPropertyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnDomainProperty', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnDomainPvDataRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDcdnDomainPvDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  pvDataInterval?: {
    usageData?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='UsageData')
  }(name='PvDataInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainPvDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainPvDataResponseBody(name='body'),
}

async function describeDcdnDomainPvData(request: DescribeDcdnDomainPvDataRequest): DescribeDcdnDomainPvDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnDomainPvData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnDomainQpsDataRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDcdnDomainQpsDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  qpsDataPerInterval?: {
    dataModule?: [ 
    {
      acc?: float(name='Acc'),
      dynamicHttpAcc?: float(name='DynamicHttpAcc'),
      dynamicHttpQps?: float(name='DynamicHttpQps'),
      dynamicHttpsAcc?: float(name='DynamicHttpsAcc'),
      dynamicHttpsQps?: float(name='DynamicHttpsQps'),
      qps?: float(name='Qps'),
      staticHttpAcc?: float(name='StaticHttpAcc'),
      staticHttpQps?: float(name='StaticHttpQps'),
      staticHttpsAcc?: float(name='StaticHttpsAcc'),
      staticHttpsQps?: float(name='StaticHttpsQps'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='QpsDataPerInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainQpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainQpsDataResponseBody(name='body'),
}

async function describeDcdnDomainQpsData(request: DescribeDcdnDomainQpsDataRequest): DescribeDcdnDomainQpsDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnDomainQpsData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnDomainQpsDataByLayerRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  layer?: string(name='Layer', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDcdnDomainQpsDataByLayerResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  layer?: string(name='Layer'),
  qpsDataInterval?: {
    dataModule?: [ 
    {
      accDomesticValue?: string(name='AccDomesticValue'),
      accOverseasValue?: string(name='AccOverseasValue'),
      accValue?: string(name='AccValue'),
      domesticValue?: string(name='DomesticValue'),
      overseasValue?: string(name='OverseasValue'),
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='DataModule')
  }(name='QpsDataInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainQpsDataByLayerResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainQpsDataByLayerResponseBody(name='body'),
}

async function describeDcdnDomainQpsDataByLayer(request: DescribeDcdnDomainQpsDataByLayerRequest): DescribeDcdnDomainQpsDataByLayerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnDomainQpsDataByLayer', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnDomainRealTimeBpsDataRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDcdnDomainRealTimeBpsDataResponseBody = {
  data?: {
    bpsModel?: [ 
    {
      bps?: float(name='Bps'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='BpsModel')
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnDomainRealTimeBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainRealTimeBpsDataResponseBody(name='body'),
}

async function describeDcdnDomainRealTimeBpsData(request: DescribeDcdnDomainRealTimeBpsDataRequest): DescribeDcdnDomainRealTimeBpsDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnDomainRealTimeBpsData', 'GET', '/', 'json', false, 'json', request);
}

model DescribeDcdnDomainRealTimeByteHitRateDataRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDcdnDomainRealTimeByteHitRateDataResponseBody = {
  data?: {
    byteHitRateDataModel?: [ 
    {
      byteHitRate?: float(name='ByteHitRate'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='ByteHitRateDataModel')
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnDomainRealTimeByteHitRateDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainRealTimeByteHitRateDataResponseBody(name='body'),
}

async function describeDcdnDomainRealTimeByteHitRateData(request: DescribeDcdnDomainRealTimeByteHitRateDataRequest): DescribeDcdnDomainRealTimeByteHitRateDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnDomainRealTimeByteHitRateData', 'GET', '/', 'json', false, 'json', request);
}

model DescribeDcdnDomainRealTimeDetailDataRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  field: string(name='Field', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  merge?: string(name='Merge', position='Query'),
  mergeLocIsp?: string(name='MergeLocIsp', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeDcdnDomainRealTimeDetailDataResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnDomainRealTimeDetailDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainRealTimeDetailDataResponseBody(name='body'),
}

async function describeDcdnDomainRealTimeDetailData(request: DescribeDcdnDomainRealTimeDetailDataRequest): DescribeDcdnDomainRealTimeDetailDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnDomainRealTimeDetailData', 'GET', '/', 'json', false, 'json', request);
}

model DescribeDcdnDomainRealTimeHttpCodeDataRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDcdnDomainRealTimeHttpCodeDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  realTimeHttpCodeData?: {
    usageData?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: {
        realTimeCodeProportionData?: [ 
        {
          code?: string(name='Code'),
          count?: string(name='Count'),
          proportion?: string(name='Proportion'),
        }
      ](name='RealTimeCodeProportionData')
      }(name='Value'),
    }
  ](name='UsageData')
  }(name='RealTimeHttpCodeData'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainRealTimeHttpCodeDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainRealTimeHttpCodeDataResponseBody(name='body'),
}

async function describeDcdnDomainRealTimeHttpCodeData(request: DescribeDcdnDomainRealTimeHttpCodeDataRequest): DescribeDcdnDomainRealTimeHttpCodeDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnDomainRealTimeHttpCodeData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnDomainRealTimeQpsDataRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDcdnDomainRealTimeQpsDataResponseBody = {
  data?: {
    qpsModel?: [ 
    {
      qps?: float(name='Qps'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='QpsModel')
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnDomainRealTimeQpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainRealTimeQpsDataResponseBody(name='body'),
}

async function describeDcdnDomainRealTimeQpsData(request: DescribeDcdnDomainRealTimeQpsDataRequest): DescribeDcdnDomainRealTimeQpsDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnDomainRealTimeQpsData', 'GET', '/', 'json', false, 'json', request);
}

model DescribeDcdnDomainRealTimeReqHitRateDataRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDcdnDomainRealTimeReqHitRateDataResponseBody = {
  data?: {
    reqHitRateDataModel?: [ 
    {
      reqHitRate?: float(name='ReqHitRate'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='ReqHitRateDataModel')
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnDomainRealTimeReqHitRateDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainRealTimeReqHitRateDataResponseBody(name='body'),
}

async function describeDcdnDomainRealTimeReqHitRateData(request: DescribeDcdnDomainRealTimeReqHitRateDataRequest): DescribeDcdnDomainRealTimeReqHitRateDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnDomainRealTimeReqHitRateData', 'GET', '/', 'json', false, 'json', request);
}

model DescribeDcdnDomainRealTimeSrcBpsDataRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDcdnDomainRealTimeSrcBpsDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  realTimeSrcBpsDataPerInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='DataModule')
  }(name='RealTimeSrcBpsDataPerInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainRealTimeSrcBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainRealTimeSrcBpsDataResponseBody(name='body'),
}

async function describeDcdnDomainRealTimeSrcBpsData(request: DescribeDcdnDomainRealTimeSrcBpsDataRequest): DescribeDcdnDomainRealTimeSrcBpsDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnDomainRealTimeSrcBpsData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnDomainRealTimeSrcHttpCodeDataRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDcdnDomainRealTimeSrcHttpCodeDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  realTimeSrcHttpCodeData?: {
    usageData?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: {
        realTimeSrcCodeProportionData?: [ 
        {
          code?: string(name='Code'),
          count?: string(name='Count'),
          proportion?: string(name='Proportion'),
        }
      ](name='RealTimeSrcCodeProportionData')
      }(name='Value'),
    }
  ](name='UsageData')
  }(name='RealTimeSrcHttpCodeData'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainRealTimeSrcHttpCodeDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainRealTimeSrcHttpCodeDataResponseBody(name='body'),
}

async function describeDcdnDomainRealTimeSrcHttpCodeData(request: DescribeDcdnDomainRealTimeSrcHttpCodeDataRequest): DescribeDcdnDomainRealTimeSrcHttpCodeDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnDomainRealTimeSrcHttpCodeData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnDomainRealTimeSrcTrafficDataRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDcdnDomainRealTimeSrcTrafficDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  realTimeSrcTrafficDataPerInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='DataModule')
  }(name='RealTimeSrcTrafficDataPerInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainRealTimeSrcTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainRealTimeSrcTrafficDataResponseBody(name='body'),
}

async function describeDcdnDomainRealTimeSrcTrafficData(request: DescribeDcdnDomainRealTimeSrcTrafficDataRequest): DescribeDcdnDomainRealTimeSrcTrafficDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnDomainRealTimeSrcTrafficData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnDomainRealTimeTrafficDataRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDcdnDomainRealTimeTrafficDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  realTimeTrafficDataPerInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='DataModule')
  }(name='RealTimeTrafficDataPerInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainRealTimeTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainRealTimeTrafficDataResponseBody(name='body'),
}

async function describeDcdnDomainRealTimeTrafficData(request: DescribeDcdnDomainRealTimeTrafficDataRequest): DescribeDcdnDomainRealTimeTrafficDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnDomainRealTimeTrafficData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnDomainRegionDataRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDcdnDomainRegionDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  value?: {
    regionProportionData?: [ 
    {
      avgObjectSize?: string(name='AvgObjectSize'),
      avgResponseRate?: string(name='AvgResponseRate'),
      avgResponseTime?: string(name='AvgResponseTime'),
      bps?: string(name='Bps'),
      bytesProportion?: string(name='BytesProportion'),
      proportion?: string(name='Proportion'),
      qps?: string(name='Qps'),
      region?: string(name='Region'),
      regionEname?: string(name='RegionEname'),
      totalBytes?: string(name='TotalBytes'),
      totalQuery?: string(name='TotalQuery'),
    }
  ](name='RegionProportionData')
  }(name='Value'),
}

model DescribeDcdnDomainRegionDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainRegionDataResponseBody(name='body'),
}

async function describeDcdnDomainRegionData(request: DescribeDcdnDomainRegionDataRequest): DescribeDcdnDomainRegionDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnDomainRegionData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnDomainStagingConfigRequest {
  domainName: string(name='DomainName', position='Query'),
  functionNames: string(name='FunctionNames', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeDcdnDomainStagingConfigResponseBody = {
  domainConfigs?: [ 
    {
      configId?: string(name='ConfigId'),
      functionArgs?: [ 
        {
          argName?: string(name='ArgName'),
          argValue?: string(name='ArgValue'),
        }
      ](name='FunctionArgs'),
      functionName?: string(name='FunctionName'),
      status?: string(name='Status'),
    }
  ](name='DomainConfigs'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnDomainStagingConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainStagingConfigResponseBody(name='body'),
}

async function describeDcdnDomainStagingConfig(request: DescribeDcdnDomainStagingConfigRequest): DescribeDcdnDomainStagingConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnDomainStagingConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnDomainTopReferVisitRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  sortBy?: string(name='SortBy', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDcdnDomainTopReferVisitResponseBody = {
  domainName?: string(name='DomainName'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  topReferList?: {
    referList?: [ 
    {
      flow?: string(name='Flow'),
      flowProportion?: float(name='FlowProportion'),
      referDetail?: string(name='ReferDetail'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='ReferList')
  }(name='TopReferList'),
}

model DescribeDcdnDomainTopReferVisitResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainTopReferVisitResponseBody(name='body'),
}

async function describeDcdnDomainTopReferVisit(request: DescribeDcdnDomainTopReferVisitRequest): DescribeDcdnDomainTopReferVisitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnDomainTopReferVisit', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnDomainTopUrlVisitRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  sortBy?: string(name='SortBy', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDcdnDomainTopUrlVisitResponseBody = {
  allUrlList?: {
    urlList?: [ 
    {
      flow?: string(name='Flow'),
      flowProportion?: float(name='FlowProportion'),
      urlDetail?: string(name='UrlDetail'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='UrlList')
  }(name='AllUrlList'),
  domainName?: string(name='DomainName'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  url200List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow'),
      flowProportion?: float(name='FlowProportion'),
      urlDetail?: string(name='UrlDetail'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='UrlList')
  }(name='Url200List'),
  url300List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow'),
      flowProportion?: float(name='FlowProportion'),
      urlDetail?: string(name='UrlDetail'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='UrlList')
  }(name='Url300List'),
  url400List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow'),
      flowProportion?: float(name='FlowProportion'),
      urlDetail?: string(name='UrlDetail'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='UrlList')
  }(name='Url400List'),
  url500List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow'),
      flowProportion?: float(name='FlowProportion'),
      urlDetail?: string(name='UrlDetail'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='UrlList')
  }(name='Url500List'),
}

model DescribeDcdnDomainTopUrlVisitResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainTopUrlVisitResponseBody(name='body'),
}

async function describeDcdnDomainTopUrlVisit(request: DescribeDcdnDomainTopUrlVisitRequest): DescribeDcdnDomainTopUrlVisitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnDomainTopUrlVisit', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnDomainTrafficDataRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDcdnDomainTrafficDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  trafficDataPerInterval?: {
    dataModule?: [ 
    {
      dynamicHttpTraffic?: float(name='DynamicHttpTraffic'),
      dynamicHttpsTraffic?: float(name='DynamicHttpsTraffic'),
      staticHttpTraffic?: float(name='StaticHttpTraffic'),
      staticHttpsTraffic?: float(name='StaticHttpsTraffic'),
      timeStamp?: string(name='TimeStamp'),
      traffic?: float(name='Traffic'),
    }
  ](name='DataModule')
  }(name='TrafficDataPerInterval'),
}

model DescribeDcdnDomainTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainTrafficDataResponseBody(name='body'),
}

async function describeDcdnDomainTrafficData(request: DescribeDcdnDomainTrafficDataRequest): DescribeDcdnDomainTrafficDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnDomainTrafficData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnDomainUsageDataRequest {
  area?: string(name='Area', position='Query'),
  dataProtocol?: string(name='DataProtocol', position='Query'),
  domainName?: string(name='DomainName', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  field: string(name='Field', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeDcdnDomainUsageDataResponseBody = {
  area?: string(name='Area'),
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  type?: string(name='Type'),
  usageDataPerInterval?: {
    dataModule?: [ 
    {
      peakTime?: string(name='PeakTime'),
      specialValue?: string(name='SpecialValue'),
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='DataModule')
  }(name='UsageDataPerInterval'),
}

model DescribeDcdnDomainUsageDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainUsageDataResponseBody(name='body'),
}

async function describeDcdnDomainUsageData(request: DescribeDcdnDomainUsageDataRequest): DescribeDcdnDomainUsageDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnDomainUsageData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnDomainUvDataRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDcdnDomainUvDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  uvDataInterval?: {
    usageData?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='UsageData')
  }(name='UvDataInterval'),
}

model DescribeDcdnDomainUvDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainUvDataResponseBody(name='body'),
}

async function describeDcdnDomainUvData(request: DescribeDcdnDomainUvDataRequest): DescribeDcdnDomainUvDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnDomainUvData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnDomainWebsocketBpsDataRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDcdnDomainWebsocketBpsDataResponseBody = {
  bpsDataPerInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      websocketBps?: float(name='WebsocketBps'),
    }
  ](name='DataModule')
  }(name='BpsDataPerInterval'),
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainWebsocketBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainWebsocketBpsDataResponseBody(name='body'),
}

async function describeDcdnDomainWebsocketBpsData(request: DescribeDcdnDomainWebsocketBpsDataRequest): DescribeDcdnDomainWebsocketBpsDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnDomainWebsocketBpsData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnDomainWebsocketHttpCodeDataRequest {
  domainName: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDcdnDomainWebsocketHttpCodeDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  httpCodeDataPerInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      websocketHttpCode?: {
        httpCodeDataModule?: [ 
        {
          code?: int32(name='Code'),
          count?: float(name='Count'),
          proportion?: float(name='Proportion'),
        }
      ](name='HttpCodeDataModule')
      }(name='WebsocketHttpCode'),
    }
  ](name='DataModule')
  }(name='HttpCodeDataPerInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainWebsocketHttpCodeDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainWebsocketHttpCodeDataResponseBody(name='body'),
}

async function describeDcdnDomainWebsocketHttpCodeData(request: DescribeDcdnDomainWebsocketHttpCodeDataRequest): DescribeDcdnDomainWebsocketHttpCodeDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnDomainWebsocketHttpCodeData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnDomainWebsocketTrafficDataRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  interval?: string(name='Interval', position='Query'),
  ispNameEn?: string(name='IspNameEn', position='Query'),
  locationNameEn?: string(name='LocationNameEn', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDcdnDomainWebsocketTrafficDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  trafficDataPerInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      websocketTraffic?: float(name='WebsocketTraffic'),
    }
  ](name='DataModule')
  }(name='TrafficDataPerInterval'),
}

model DescribeDcdnDomainWebsocketTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainWebsocketTrafficDataResponseBody(name='body'),
}

async function describeDcdnDomainWebsocketTrafficData(request: DescribeDcdnDomainWebsocketTrafficDataRequest): DescribeDcdnDomainWebsocketTrafficDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnDomainWebsocketTrafficData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnEsExceptionDataRequest {
  endTime: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  ruleId: string(name='RuleId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeDcdnEsExceptionDataResponseBody = {
  contents?: [ 
    {
      columns?: [ string ](name='Columns'),
      name?: string(name='Name'),
      points?: [ string ](name='Points'),
    }
  ](name='Contents'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnEsExceptionDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnEsExceptionDataResponseBody(name='body'),
}

async function describeDcdnEsExceptionData(request: DescribeDcdnEsExceptionDataRequest): DescribeDcdnEsExceptionDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnEsExceptionData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnEsExecuteDataRequest {
  endTime: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  ruleId: string(name='RuleId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeDcdnEsExecuteDataResponseBody = {
  contents?: [ 
    {
      columns?: [ string ](name='Columns'),
      name?: string(name='Name'),
      points?: [ string ](name='Points'),
    }
  ](name='Contents'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnEsExecuteDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnEsExecuteDataResponseBody(name='body'),
}

async function describeDcdnEsExecuteData(request: DescribeDcdnEsExecuteDataRequest): DescribeDcdnEsExecuteDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnEsExecuteData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnHttpsDomainListRequest {
  keyword?: string(name='Keyword', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model DescribeDcdnHttpsDomainListResponseBody = {
  certInfos?: {
    certInfo?: [ 
    {
      certCommonName?: string(name='CertCommonName'),
      certExpireTime?: string(name='CertExpireTime'),
      certName?: string(name='CertName'),
      certStartTime?: string(name='CertStartTime'),
      certStatus?: string(name='CertStatus'),
      certType?: string(name='CertType'),
      certUpdateTime?: string(name='CertUpdateTime'),
      domainName?: string(name='DomainName'),
    }
  ](name='CertInfo')
  }(name='CertInfos'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDcdnHttpsDomainListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnHttpsDomainListResponseBody(name='body'),
}

async function describeDcdnHttpsDomainList(request: DescribeDcdnHttpsDomainListRequest): DescribeDcdnHttpsDomainListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnHttpsDomainList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnIpInfoRequest {
  ip: string(name='IP', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeDcdnIpInfoResponseBody = {
  dcdnIp?: string(name='DcdnIp'),
  ISP?: string(name='ISP'),
  ispEname?: string(name='IspEname'),
  region?: string(name='Region'),
  regionEname?: string(name='RegionEname'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnIpInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnIpInfoResponseBody(name='body'),
}

async function describeDcdnIpInfo(request: DescribeDcdnIpInfoRequest): DescribeDcdnIpInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnIpInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnIpaDomainConfigsRequest {
  domainName: string(name='DomainName', position='Query'),
  functionNames: string(name='FunctionNames', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeDcdnIpaDomainConfigsResponseBody = {
  domainConfigs?: {
    domainConfig?: [ 
    {
      configId?: string(name='ConfigId'),
      functionArgs?: {
        functionArg?: [ 
        {
          argName?: string(name='ArgName'),
          argValue?: string(name='ArgValue'),
        }
      ](name='FunctionArg')
      }(name='FunctionArgs'),
      functionName?: string(name='FunctionName'),
      status?: string(name='Status'),
    }
  ](name='DomainConfig')
  }(name='DomainConfigs'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnIpaDomainConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnIpaDomainConfigsResponseBody(name='body'),
}

async function describeDcdnIpaDomainConfigs(request: DescribeDcdnIpaDomainConfigsRequest): DescribeDcdnIpaDomainConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnIpaDomainConfigs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnIpaDomainDetailRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeDcdnIpaDomainDetailResponseBody = {
  domainDetail?: {
    certName?: string(name='CertName'),
    cname?: string(name='Cname'),
    description?: string(name='Description'),
    domainName?: string(name='DomainName'),
    domainStatus?: string(name='DomainStatus'),
    gmtCreated?: string(name='GmtCreated'),
    gmtModified?: string(name='GmtModified'),
    resourceGroupId?: string(name='ResourceGroupId'),
    SSLProtocol?: string(name='SSLProtocol'),
    SSLPub?: string(name='SSLPub'),
    scope?: string(name='Scope'),
    sources?: {
      source?: [ 
      {
        content?: string(name='Content'),
        enabled?: string(name='Enabled'),
        port?: int32(name='Port'),
        priority?: string(name='Priority'),
        type?: string(name='Type'),
        weight?: string(name='Weight'),
      }
    ](name='Source')
    }(name='Sources'),
  }(name='DomainDetail'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnIpaDomainDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnIpaDomainDetailResponseBody(name='body'),
}

async function describeDcdnIpaDomainDetail(request: DescribeDcdnIpaDomainDetailRequest): DescribeDcdnIpaDomainDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnIpaDomainDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnIpaServiceRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeDcdnIpaServiceResponseBody = {
  changingAffectTime?: string(name='ChangingAffectTime'),
  changingChargeType?: string(name='ChangingChargeType'),
  instanceId?: string(name='InstanceId'),
  internetChargeType?: string(name='InternetChargeType'),
  openingTime?: string(name='OpeningTime'),
  operationLocks?: {
    lockReason?: [ 
    {
      lockReason?: string(name='LockReason'),
    }
  ](name='LockReason')
  }(name='OperationLocks'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnIpaServiceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnIpaServiceResponseBody(name='body'),
}

async function describeDcdnIpaService(request: DescribeDcdnIpaServiceRequest): DescribeDcdnIpaServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnIpaService', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnIpaUserDomainsRequest {
  checkDomainShow?: boolean(name='CheckDomainShow', position='Query'),
  domainName?: string(name='DomainName', position='Query'),
  domainSearchType?: string(name='DomainSearchType', position='Query'),
  domainStatus?: string(name='DomainStatus', position='Query'),
  funcFilter?: string(name='FuncFilter', position='Query'),
  funcId?: string(name='FuncId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', maximum=500, position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model DescribeDcdnIpaUserDomainsResponseBody = {
  domains?: {
    pageData?: [ 
    {
      cname?: string(name='Cname'),
      description?: string(name='Description'),
      domainName?: string(name='DomainName'),
      domainStatus?: string(name='DomainStatus'),
      gmtCreated?: string(name='GmtCreated'),
      gmtModified?: string(name='GmtModified'),
      resourceGroupId?: string(name='ResourceGroupId'),
      SSLProtocol?: string(name='SSLProtocol'),
      sandbox?: string(name='Sandbox'),
      sources?: {
        source?: [ 
        {
          content?: string(name='Content'),
          port?: int32(name='Port'),
          priority?: string(name='Priority'),
          type?: string(name='Type'),
          weight?: string(name='Weight'),
        }
      ](name='Source')
      }(name='Sources'),
    }
  ](name='PageData')
  }(name='Domains'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeDcdnIpaUserDomainsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnIpaUserDomainsResponseBody(name='body'),
}

async function describeDcdnIpaUserDomains(request: DescribeDcdnIpaUserDomainsRequest): DescribeDcdnIpaUserDomainsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnIpaUserDomains', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnRealTimeDeliveryFieldRequest {
  businessType?: string(name='BusinessType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeDcdnRealTimeDeliveryFieldResponseBody = {
  content?: {
    fields?: [ 
    {
      description?: string(name='Description'),
      fieldName?: string(name='FieldName'),
    }
  ](name='Fields')
  }(name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnRealTimeDeliveryFieldResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnRealTimeDeliveryFieldResponseBody(name='body'),
}

async function describeDcdnRealTimeDeliveryField(request: DescribeDcdnRealTimeDeliveryFieldRequest): DescribeDcdnRealTimeDeliveryFieldResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnRealTimeDeliveryField', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnRefreshQuotaRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeDcdnRefreshQuotaResponseBody = {
  blockQuota?: string(name='BlockQuota'),
  blockRemain?: string(name='BlockRemain'),
  dirQuota?: string(name='DirQuota'),
  dirRemain?: string(name='DirRemain'),
  preloadQuota?: string(name='PreloadQuota'),
  preloadRemain?: string(name='PreloadRemain'),
  regexQuota?: string(name='RegexQuota'),
  regexRemain?: string(name='RegexRemain'),
  requestId?: string(name='RequestId'),
  urlQuota?: string(name='UrlQuota'),
  urlRemain?: string(name='UrlRemain'),
}

model DescribeDcdnRefreshQuotaResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnRefreshQuotaResponseBody(name='body'),
}

async function describeDcdnRefreshQuota(request: DescribeDcdnRefreshQuotaRequest): DescribeDcdnRefreshQuotaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnRefreshQuota', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnRefreshTaskByIdRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  taskId: string(name='TaskId', position='Query'),
}

model DescribeDcdnRefreshTaskByIdResponseBody = {
  requestId?: string(name='RequestId'),
  tasks?: [ 
    {
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      objectPath?: string(name='ObjectPath'),
      objectType?: string(name='ObjectType'),
      process?: string(name='Process'),
      status?: string(name='Status'),
      taskId?: string(name='TaskId'),
    }
  ](name='Tasks'),
  totalCount?: long(name='TotalCount'),
}

model DescribeDcdnRefreshTaskByIdResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnRefreshTaskByIdResponseBody(name='body'),
}

async function describeDcdnRefreshTaskById(request: DescribeDcdnRefreshTaskByIdRequest): DescribeDcdnRefreshTaskByIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnRefreshTaskById', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnRefreshTasksRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  objectPath?: string(name='ObjectPath', position='Query'),
  objectType?: string(name='ObjectType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', maximum=42949672, position='Query'),
  pageSize?: int32(name='PageSize', maximum=100, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
  status?: string(name='Status', position='Query'),
  taskId?: string(name='TaskId', position='Query'),
}

model DescribeDcdnRefreshTasksResponseBody = {
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  tasks?: {
    task?: [ 
    {
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      objectPath?: string(name='ObjectPath'),
      objectType?: string(name='ObjectType'),
      process?: string(name='Process'),
      status?: string(name='Status'),
      taskId?: string(name='TaskId'),
    }
  ](name='Task')
  }(name='Tasks'),
  totalCount?: long(name='TotalCount'),
}

model DescribeDcdnRefreshTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnRefreshTasksResponseBody(name='body'),
}

async function describeDcdnRefreshTasks(request: DescribeDcdnRefreshTasksRequest): DescribeDcdnRefreshTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnRefreshTasks', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnRegionAndIspRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeDcdnRegionAndIspResponseBody = {
  isps?: {
    isp?: [ 
    {
      nameEn?: string(name='NameEn'),
      nameZh?: string(name='NameZh'),
    }
  ](name='Isp')
  }(name='Isps'),
  regions?: {
    region?: [ 
    {
      nameEn?: string(name='NameEn'),
      nameZh?: string(name='NameZh'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnRegionAndIspResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnRegionAndIspResponseBody(name='body'),
}

async function describeDcdnRegionAndIsp(request: DescribeDcdnRegionAndIspRequest): DescribeDcdnRegionAndIspResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnRegionAndIsp', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnReportRequest {
  area?: string(name='Area', position='Query'),
  domainName?: string(name='DomainName', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  httpCode?: string(name='HttpCode', position='Query'),
  isOverseas?: string(name='IsOverseas', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  reportId: long(name='ReportId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeDcdnReportResponseBody = {
  content?: string(name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnReportResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnReportResponseBody(name='body'),
}

async function describeDcdnReport(request: DescribeDcdnReportRequest): DescribeDcdnReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnReport', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnReportListRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  reportId?: long(name='ReportId', position='Query'),
}

model DescribeDcdnReportListResponseBody = {
  content?: string(name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnReportListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnReportListResponseBody(name='body'),
}

async function describeDcdnReportList(request: DescribeDcdnReportListRequest): DescribeDcdnReportListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnReportList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnSLSRealtimeLogDeliveryRequest {
  businessType?: string(name='BusinessType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  projectName: string(name='ProjectName', position='Query'),
}

model DescribeDcdnSLSRealtimeLogDeliveryResponseBody = {
  content?: {
    businessType?: string(name='BusinessType'),
    dataCenter?: string(name='DataCenter'),
    domainName?: string(name='DomainName'),
    fieldName?: string(name='FieldName'),
    projectName?: string(name='ProjectName'),
    SLSLogStore?: string(name='SLSLogStore'),
    SLSProject?: string(name='SLSProject'),
    SLSRegion?: string(name='SLSRegion'),
    samplingRate?: string(name='SamplingRate'),
    type?: string(name='Type'),
  }(name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnSLSRealtimeLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnSLSRealtimeLogDeliveryResponseBody(name='body'),
}

async function describeDcdnSLSRealtimeLogDelivery(request: DescribeDcdnSLSRealtimeLogDeliveryRequest): DescribeDcdnSLSRealtimeLogDeliveryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnSLSRealtimeLogDelivery', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnSMCertificateDetailRequest {
  certIdentifier: string(name='CertIdentifier', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeDcdnSMCertificateDetailResponseBody = {
  certExpireTime?: string(name='CertExpireTime'),
  certIdentifier?: string(name='CertIdentifier'),
  certName?: string(name='CertName'),
  certOrg?: string(name='CertOrg'),
  commonName?: string(name='CommonName'),
  encryptCertificate?: string(name='EncryptCertificate'),
  requestId?: string(name='RequestId'),
  sans?: string(name='Sans'),
  signCertificate?: string(name='SignCertificate'),
}

model DescribeDcdnSMCertificateDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnSMCertificateDetailResponseBody(name='body'),
}

async function describeDcdnSMCertificateDetail(request: DescribeDcdnSMCertificateDetailRequest): DescribeDcdnSMCertificateDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnSMCertificateDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnSMCertificateListRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeDcdnSMCertificateListResponseBody = {
  certificateListModel?: {
    certList?: [ 
      {
        certIdentifier?: string(name='CertIdentifier'),
        certName?: string(name='CertName'),
        common?: string(name='Common'),
        issuer?: string(name='Issuer'),
      }
    ](name='CertList'),
    count?: int32(name='Count'),
  }(name='CertificateListModel'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnSMCertificateListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnSMCertificateListResponseBody(name='body'),
}

async function describeDcdnSMCertificateList(request: DescribeDcdnSMCertificateListRequest): DescribeDcdnSMCertificateListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnSMCertificateList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnSecFuncInfoRequest {
  lang: string(name='Lang', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  secFuncType: string(name='SecFuncType', position='Query'),
}

model DescribeDcdnSecFuncInfoResponseBody = {
  content?: [ 
    {
      label?: string(name='Label'),
      value?: string(name='Value'),
    }
  ](name='Content'),
  description?: string(name='Description'),
  httpStatus?: string(name='HttpStatus'),
  requestId?: string(name='RequestId'),
  retCode?: string(name='RetCode'),
}

model DescribeDcdnSecFuncInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnSecFuncInfoResponseBody(name='body'),
}

async function describeDcdnSecFuncInfo(request: DescribeDcdnSecFuncInfoRequest): DescribeDcdnSecFuncInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnSecFuncInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnSecSpecInfoRequest {
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeDcdnSecSpecInfoResponseBody = {
  requestId?: string(name='RequestId'),
  specInfos?: [ 
    {
      ruleCode?: string(name='RuleCode'),
      ruleConfigs?: [ 
        {
          code?: string(name='Code'),
          expr?: string(name='Expr'),
          value?: string(name='Value'),
        }
      ](name='RuleConfigs'),
    }
  ](name='SpecInfos'),
  version?: string(name='Version'),
}

model DescribeDcdnSecSpecInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnSecSpecInfoResponseBody(name='body'),
}

async function describeDcdnSecSpecInfo(request: DescribeDcdnSecSpecInfoRequest): DescribeDcdnSecSpecInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnSecSpecInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnServiceRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeDcdnServiceResponseBody = {
  changingAffectTime?: string(name='ChangingAffectTime'),
  changingChargeType?: string(name='ChangingChargeType'),
  instanceId?: string(name='InstanceId'),
  internetChargeType?: string(name='InternetChargeType'),
  openingTime?: string(name='OpeningTime'),
  operationLocks?: {
    lockReason?: [ 
    {
      lockReason?: string(name='LockReason'),
    }
  ](name='LockReason')
  }(name='OperationLocks'),
  requestId?: string(name='RequestId'),
  websocketChangingTime?: string(name='WebsocketChangingTime'),
  websocketChangingType?: string(name='WebsocketChangingType'),
  websocketType?: string(name='WebsocketType'),
}

model DescribeDcdnServiceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnServiceResponseBody(name='body'),
}

async function describeDcdnService(request: DescribeDcdnServiceRequest): DescribeDcdnServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnService', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnStagingIpRequest {
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeDcdnStagingIpResponseBody = {
  IPV4s?: {
    IPV4?: [ string ](name='IPV4')
  }(name='IPV4s'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnStagingIpResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnStagingIpResponseBody(name='body'),
}

async function describeDcdnStagingIp(request: DescribeDcdnStagingIpRequest): DescribeDcdnStagingIpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnStagingIp', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnSubListRequest {
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeDcdnSubListResponseBody = {
  content?: string(name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnSubListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnSubListResponseBody(name='body'),
}

async function describeDcdnSubList(request: DescribeDcdnSubListRequest): DescribeDcdnSubListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnSubList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnTagResourcesRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model DescribeDcdnTagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId'),
      tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag'),
    }
  ](name='TagResources'),
}

model DescribeDcdnTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnTagResourcesResponseBody(name='body'),
}

async function describeDcdnTagResources(request: DescribeDcdnTagResourcesRequest): DescribeDcdnTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnTagResources', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnTopDomainsByFlowRequest {
  endTime?: string(name='EndTime', position='Query'),
  limit?: long(name='Limit', minimum=1, maximum=100, position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDcdnTopDomainsByFlowResponseBody = {
  domainCount?: long(name='DomainCount'),
  domainOnlineCount?: long(name='DomainOnlineCount'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  topDomains?: {
    topDomain?: [ 
    {
      domainName?: string(name='DomainName'),
      maxBps?: long(name='MaxBps'),
      maxBpsTime?: string(name='MaxBpsTime'),
      rank?: long(name='Rank'),
      totalAccess?: long(name='TotalAccess'),
      totalTraffic?: string(name='TotalTraffic'),
      trafficPercent?: string(name='TrafficPercent'),
    }
  ](name='TopDomain')
  }(name='TopDomains'),
}

model DescribeDcdnTopDomainsByFlowResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnTopDomainsByFlowResponseBody(name='body'),
}

async function describeDcdnTopDomainsByFlow(request: DescribeDcdnTopDomainsByFlowRequest): DescribeDcdnTopDomainsByFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnTopDomainsByFlow', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnUserBillHistoryRequest {
  endTime: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeDcdnUserBillHistoryResponseBody = {
  billHistoryData?: {
    billHistoryDataItem?: [ 
    {
      billTime?: string(name='BillTime'),
      billType?: string(name='BillType'),
      billingData?: {
        billingDataItem?: [ 
        {
          bandwidth?: float(name='Bandwidth'),
          cdnRegion?: string(name='CdnRegion'),
          chargeType?: string(name='ChargeType'),
          count?: float(name='Count'),
          flow?: float(name='Flow'),
        }
      ](name='BillingDataItem')
      }(name='BillingData'),
      dimension?: string(name='Dimension'),
    }
  ](name='BillHistoryDataItem')
  }(name='BillHistoryData'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnUserBillHistoryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnUserBillHistoryResponseBody(name='body'),
}

async function describeDcdnUserBillHistory(request: DescribeDcdnUserBillHistoryRequest): DescribeDcdnUserBillHistoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnUserBillHistory', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnUserBillTypeRequest {
  endTime: string(name='EndTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeDcdnUserBillTypeResponseBody = {
  billTypeData?: {
    billTypeDataItem?: [ 
    {
      billType?: string(name='BillType'),
      billingCycle?: string(name='BillingCycle'),
      dimension?: string(name='Dimension'),
      endTime?: string(name='EndTime'),
      product?: string(name='Product'),
      startTime?: string(name='StartTime'),
    }
  ](name='BillTypeDataItem')
  }(name='BillTypeData'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnUserBillTypeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnUserBillTypeResponseBody(name='body'),
}

async function describeDcdnUserBillType(request: DescribeDcdnUserBillTypeRequest): DescribeDcdnUserBillTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnUserBillType', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnUserCertificateExpireCountRequest {
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeDcdnUserCertificateExpireCountResponseBody = {
  expireWithin30DaysCount?: int32(name='ExpireWithin30DaysCount'),
  expiredCount?: int32(name='ExpiredCount'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnUserCertificateExpireCountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnUserCertificateExpireCountResponseBody(name='body'),
}

async function describeDcdnUserCertificateExpireCount(request: DescribeDcdnUserCertificateExpireCountRequest): DescribeDcdnUserCertificateExpireCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnUserCertificateExpireCount', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnUserDomainsRequest {
  changeEndTime?: string(name='ChangeEndTime', position='Query'),
  changeStartTime?: string(name='ChangeStartTime', position='Query'),
  checkDomainShow?: boolean(name='CheckDomainShow', position='Query'),
  coverage?: string(name='Coverage', position='Query'),
  domainName?: string(name='DomainName', position='Query'),
  domainSearchType?: string(name='DomainSearchType', position='Query'),
  domainStatus?: string(name='DomainStatus', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', maximum=500, position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model DescribeDcdnUserDomainsResponseBody = {
  domains?: {
    pageData?: [ 
    {
      cname?: string(name='Cname'),
      description?: string(name='Description'),
      domainName?: string(name='DomainName'),
      domainStatus?: string(name='DomainStatus'),
      gmtCreated?: string(name='GmtCreated'),
      gmtModified?: string(name='GmtModified'),
      resourceGroupId?: string(name='ResourceGroupId'),
      SSLProtocol?: string(name='SSLProtocol'),
      sandbox?: string(name='Sandbox'),
      sources?: {
        source?: [ 
        {
          content?: string(name='Content'),
          port?: int32(name='Port'),
          priority?: string(name='Priority'),
          type?: string(name='Type'),
          weight?: string(name='Weight'),
        }
      ](name='Source')
      }(name='Sources'),
    }
  ](name='PageData')
  }(name='Domains'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeDcdnUserDomainsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnUserDomainsResponseBody(name='body'),
}

async function describeDcdnUserDomains(request: DescribeDcdnUserDomainsRequest): DescribeDcdnUserDomainsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnUserDomains', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnUserDomainsByFuncRequest {
  domainName?: string(name='DomainName', position='Query'),
  funcFilter?: string(name='FuncFilter', position='Query'),
  funcId: int32(name='FuncId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, maximum=100000, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=500, position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeDcdnUserDomainsByFuncResponseBody = {
  domains?: {
    pageData?: [ 
    {
      cname?: string(name='Cname'),
      description?: string(name='Description'),
      domainName?: string(name='DomainName'),
      domainStatus?: string(name='DomainStatus'),
      gmtCreated?: string(name='GmtCreated'),
      gmtModified?: string(name='GmtModified'),
      resourceGroupId?: string(name='ResourceGroupId'),
      sandbox?: string(name='Sandbox'),
      sources?: {
        source?: [ 
        {
          content?: string(name='Content'),
          port?: int32(name='Port'),
          priority?: string(name='Priority'),
          type?: string(name='Type'),
          weight?: string(name='Weight'),
        }
      ](name='Source')
      }(name='Sources'),
      sslProtocol?: string(name='SslProtocol'),
    }
  ](name='PageData')
  }(name='Domains'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeDcdnUserDomainsByFuncResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnUserDomainsByFuncResponseBody(name='body'),
}

async function describeDcdnUserDomainsByFunc(request: DescribeDcdnUserDomainsByFuncRequest): DescribeDcdnUserDomainsByFuncResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnUserDomainsByFunc', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnUserQuotaRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeDcdnUserQuotaResponseBody = {
  blockQuota?: int32(name='BlockQuota'),
  blockRemain?: int32(name='BlockRemain'),
  domainQuota?: int32(name='DomainQuota'),
  preloadQuota?: int32(name='PreloadQuota'),
  preloadRemain?: int32(name='PreloadRemain'),
  refreshDirQuota?: int32(name='RefreshDirQuota'),
  refreshDirRemain?: int32(name='RefreshDirRemain'),
  refreshUrlQuota?: int32(name='RefreshUrlQuota'),
  refreshUrlRemain?: int32(name='RefreshUrlRemain'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnUserQuotaResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnUserQuotaResponseBody(name='body'),
}

async function describeDcdnUserQuota(request: DescribeDcdnUserQuotaRequest): DescribeDcdnUserQuotaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnUserQuota', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnUserRealTimeDeliveryFieldRequest {
  businessType?: string(name='BusinessType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeDcdnUserRealTimeDeliveryFieldResponseBody = {
  content?: {
    fields?: [ 
    {
      description?: string(name='Description'),
      fieldName?: string(name='FieldName'),
      selected?: boolean(name='Selected'),
    }
  ](name='Fields')
  }(name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnUserRealTimeDeliveryFieldResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnUserRealTimeDeliveryFieldResponseBody(name='body'),
}

async function describeDcdnUserRealTimeDeliveryField(request: DescribeDcdnUserRealTimeDeliveryFieldRequest): DescribeDcdnUserRealTimeDeliveryFieldResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnUserRealTimeDeliveryField', 'GET', '/', 'json', false, 'json', request);
}

model DescribeDcdnUserResourcePackageRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  status?: string(name='Status', position='Query'),
}

model DescribeDcdnUserResourcePackageResponseBody = {
  requestId?: string(name='RequestId'),
  resourcePackageInfos?: {
    resourcePackageInfo?: [ 
    {
      commodityCode?: string(name='CommodityCode'),
      currCapacity?: string(name='CurrCapacity'),
      displayName?: string(name='DisplayName'),
      endTime?: string(name='EndTime'),
      initCapacity?: string(name='InitCapacity'),
      instanceId?: string(name='InstanceId'),
      startTime?: string(name='StartTime'),
      status?: string(name='Status'),
      templateName?: string(name='TemplateName'),
    }
  ](name='ResourcePackageInfo')
  }(name='ResourcePackageInfos'),
}

model DescribeDcdnUserResourcePackageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnUserResourcePackageResponseBody(name='body'),
}

async function describeDcdnUserResourcePackage(request: DescribeDcdnUserResourcePackageRequest): DescribeDcdnUserResourcePackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnUserResourcePackage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnUserSecDropRequest {
  data: string(name='Data', position='Query'),
  metric: string(name='Metric', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  secFunc: string(name='SecFunc', position='Query'),
}

model DescribeDcdnUserSecDropResponseBody = {
  drops?: int32(name='Drops'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  uuidStr?: string(name='UuidStr'),
}

model DescribeDcdnUserSecDropResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnUserSecDropResponseBody(name='body'),
}

async function describeDcdnUserSecDrop(request: DescribeDcdnUserSecDropRequest): DescribeDcdnUserSecDropResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnUserSecDrop', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnUserSecDropByMinuteRequest {
  domainName?: string(name='DomainName', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  lang: string(name='Lang', position='Query'),
  object?: string(name='Object', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: long(name='PageNumber', position='Query'),
  pageSize?: long(name='PageSize', position='Query'),
  ruleName?: string(name='RuleName', position='Query'),
  secFunc: string(name='SecFunc', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model DescribeDcdnUserSecDropByMinuteResponseBody = {
  description?: string(name='Description'),
  len?: int32(name='Len'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  rows?: [ 
    {
      domain?: string(name='Domain'),
      drops?: int32(name='Drops'),
      object?: string(name='Object'),
      ruleName?: string(name='RuleName'),
      secFunc?: string(name='SecFunc'),
      tmStr?: string(name='TmStr'),
    }
  ](name='Rows'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDcdnUserSecDropByMinuteResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnUserSecDropByMinuteResponseBody(name='body'),
}

async function describeDcdnUserSecDropByMinute(request: DescribeDcdnUserSecDropByMinuteRequest): DescribeDcdnUserSecDropByMinuteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnUserSecDropByMinute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnUserTagsRequest {
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeDcdnUserTagsResponseBody = {
  requestId?: string(name='RequestId'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: [ string ](name='Value'),
    }
  ](name='Tags'),
}

model DescribeDcdnUserTagsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnUserTagsResponseBody(name='body'),
}

async function describeDcdnUserTags(request: DescribeDcdnUserTagsRequest): DescribeDcdnUserTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnUserTags', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnVerifyContentRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeDcdnVerifyContentResponseBody = {
  content?: string(name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnVerifyContentResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnVerifyContentResponseBody(name='body'),
}

async function describeDcdnVerifyContent(request: DescribeDcdnVerifyContentRequest): DescribeDcdnVerifyContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnVerifyContent', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnWafDomainRequest {
  domainName?: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeDcdnWafDomainResponseBody = {
  outPutDomains?: [ 
    {
      aclStatus?: int32(name='AclStatus'),
      ccStatus?: int32(name='CcStatus'),
      domain?: string(name='Domain'),
      status?: int32(name='Status'),
      wafStatus?: int32(name='WafStatus'),
    }
  ](name='OutPutDomains'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDcdnWafDomainResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnWafDomainResponseBody(name='body'),
}

async function describeDcdnWafDomain(request: DescribeDcdnWafDomainRequest): DescribeDcdnWafDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnWafDomain', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDcdnsecServiceRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeDcdnsecServiceResponseBody = {
  changingAffectTime?: string(name='ChangingAffectTime'),
  changingChargeType?: string(name='ChangingChargeType'),
  domainNum?: string(name='DomainNum'),
  endTime?: string(name='EndTime'),
  flowType?: string(name='FlowType'),
  instanceId?: string(name='InstanceId'),
  internetChargeType?: string(name='InternetChargeType'),
  operationLocks?: {
    lockReason?: [ 
    {
      lockReason?: string(name='LockReason'),
    }
  ](name='LockReason')
  }(name='OperationLocks'),
  requestId?: string(name='RequestId'),
  requestType?: string(name='RequestType'),
  startTime?: string(name='StartTime'),
  version?: string(name='Version'),
}

model DescribeDcdnsecServiceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnsecServiceResponseBody(name='body'),
}

async function describeDcdnsecService(request: DescribeDcdnsecServiceRequest): DescribeDcdnsecServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDcdnsecService', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRoutineRequest {
  name: string(name='Name', position='Body'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeRoutineResponseBody = {
  content?: map[string]any(name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeRoutineResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRoutineResponseBody(name='body'),
}

async function describeRoutine(request: DescribeRoutineRequest): DescribeRoutineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRoutine', 'POST', '/', 'json', true, 'form', request);
}

model DescribeRoutineCanaryEnvsRequest {
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeRoutineCanaryEnvsResponseBody = {
  content?: map[string]any(name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeRoutineCanaryEnvsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRoutineCanaryEnvsResponseBody(name='body'),
}

async function describeRoutineCanaryEnvs(request: DescribeRoutineCanaryEnvsRequest): DescribeRoutineCanaryEnvsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRoutineCanaryEnvs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRoutineCodeRevisionRequest {
  name: string(name='Name', position='Body'),
  ownerId?: long(name='OwnerId', position='Query'),
  selectCodeRevision: string(name='SelectCodeRevision', position='Body'),
}

model DescribeRoutineCodeRevisionResponseBody = {
  content?: map[string]any(name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeRoutineCodeRevisionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRoutineCodeRevisionResponseBody(name='body'),
}

async function describeRoutineCodeRevision(request: DescribeRoutineCodeRevisionRequest): DescribeRoutineCodeRevisionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRoutineCodeRevision', 'POST', '/', 'json', true, 'form', request);
}

model DescribeRoutineSpecRequest {
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeRoutineSpecResponseBody = {
  content?: map[string]any(name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeRoutineSpecResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRoutineSpecResponseBody(name='body'),
}

async function describeRoutineSpec(request: DescribeRoutineSpecRequest): DescribeRoutineSpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRoutineSpec', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRoutineUserInfoRequest {
  ownerId?: long(name='OwnerId', position='Query'),
}

model DescribeRoutineUserInfoResponseBody = {
  content?: map[string]any(name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeRoutineUserInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRoutineUserInfoResponseBody(name='body'),
}

async function describeRoutineUserInfo(request: DescribeRoutineUserInfoRequest): DescribeRoutineUserInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRoutineUserInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUserDcdnIpaStatusRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeUserDcdnIpaStatusResponseBody = {
  enabled?: boolean(name='Enabled'),
  inDebt?: boolean(name='InDebt'),
  inDebtOverdue?: boolean(name='InDebtOverdue'),
  onService?: boolean(name='OnService'),
  requestId?: string(name='RequestId'),
}

model DescribeUserDcdnIpaStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserDcdnIpaStatusResponseBody(name='body'),
}

async function describeUserDcdnIpaStatus(request: DescribeUserDcdnIpaStatusRequest): DescribeUserDcdnIpaStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUserDcdnIpaStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUserDcdnStatusRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeUserDcdnStatusResponseBody = {
  enabled?: boolean(name='Enabled'),
  inDebt?: boolean(name='InDebt'),
  inDebtOverdue?: boolean(name='InDebtOverdue'),
  onService?: boolean(name='OnService'),
  requestId?: string(name='RequestId'),
}

model DescribeUserDcdnStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserDcdnStatusResponseBody(name='body'),
}

async function describeUserDcdnStatus(request: DescribeUserDcdnStatusRequest): DescribeUserDcdnStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUserDcdnStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUserErStatusRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeUserErStatusResponseBody = {
  enabled?: boolean(name='Enabled'),
  inDebt?: boolean(name='InDebt'),
  inDebtOverdue?: boolean(name='InDebtOverdue'),
  onService?: boolean(name='OnService'),
  requestId?: string(name='RequestId'),
}

model DescribeUserErStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserErStatusResponseBody(name='body'),
}

async function describeUserErStatus(request: DescribeUserErStatusRequest): DescribeUserErStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUserErStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUserLogserviceStatusRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeUserLogserviceStatusResponseBody = {
  enabled?: boolean(name='Enabled'),
  inDebt?: boolean(name='InDebt'),
  inDebtOverdue?: boolean(name='InDebtOverdue'),
  onService?: boolean(name='OnService'),
  requestId?: string(name='RequestId'),
}

model DescribeUserLogserviceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserLogserviceStatusResponseBody(name='body'),
}

async function describeUserLogserviceStatus(request: DescribeUserLogserviceStatusRequest): DescribeUserLogserviceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUserLogserviceStatus', 'POST', '/', 'json', false, 'json', request);
}

model EditRoutineConfRequest {
  description?: string(name='Description', position='Body'),
  envConf?: map[string]any(name='EnvConf', position='Body'),
  name: string(name='Name', position='Body'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model EditRoutineConfResponseBody = {
  content?: map[string]any(name='Content'),
  requestId?: string(name='RequestId'),
}

model EditRoutineConfResponse = {
  headers: map[string]string(name='headers'),
  body: EditRoutineConfResponseBody(name='body'),
}

async function editRoutineConf(request: EditRoutineConfRequest): EditRoutineConfResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EditRoutineConf', 'POST', '/', 'json', true, 'form', request);
}

model ListDcdnRealTimeDeliveryProjectRequest {
  businessType?: string(name='BusinessType', position='Query'),
  domainName?: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model ListDcdnRealTimeDeliveryProjectResponseBody = {
  content?: {
    projects?: [ 
    {
      businessType?: string(name='BusinessType'),
      dataCenter?: string(name='DataCenter'),
      domainName?: string(name='DomainName'),
      fieldName?: string(name='FieldName'),
      projectName?: string(name='ProjectName'),
      SLSLogStore?: string(name='SLSLogStore'),
      SLSProject?: string(name='SLSProject'),
      SLSRegion?: string(name='SLSRegion'),
      samplingRate?: float(name='SamplingRate'),
      type?: string(name='Type'),
    }
  ](name='Projects')
  }(name='Content'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListDcdnRealTimeDeliveryProjectResponse = {
  headers: map[string]string(name='headers'),
  body: ListDcdnRealTimeDeliveryProjectResponseBody(name='body'),
}

async function listDcdnRealTimeDeliveryProject(request: ListDcdnRealTimeDeliveryProjectRequest): ListDcdnRealTimeDeliveryProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDcdnRealTimeDeliveryProject', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDCdnDomainSchdmByPropertyRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  property: string(name='Property', position='Query'),
}

model ModifyDCdnDomainSchdmByPropertyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDCdnDomainSchdmByPropertyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDCdnDomainSchdmByPropertyResponseBody(name='body'),
}

async function modifyDCdnDomainSchdmByProperty(request: ModifyDCdnDomainSchdmByPropertyRequest): ModifyDCdnDomainSchdmByPropertyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDCdnDomainSchdmByProperty', 'POST', '/', 'json', false, 'json', request);
}

model OpenDcdnServiceRequest {
  billType: string(name='BillType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  websocketBillType: string(name='WebsocketBillType', position='Query'),
}

model OpenDcdnServiceResponseBody = {
  requestId?: string(name='RequestId'),
}

model OpenDcdnServiceResponse = {
  headers: map[string]string(name='headers'),
  body: OpenDcdnServiceResponseBody(name='body'),
}

async function openDcdnService(request: OpenDcdnServiceRequest): OpenDcdnServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenDcdnService', 'POST', '/', 'json', false, 'json', request);
}

model PreloadDcdnObjectCachesRequest {
  area?: string(name='Area', position='Query'),
  l2Preload?: boolean(name='L2Preload', position='Query'),
  objectPath: string(name='ObjectPath', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model PreloadDcdnObjectCachesResponseBody = {
  preloadTaskId?: string(name='PreloadTaskId'),
  requestId?: string(name='RequestId'),
}

model PreloadDcdnObjectCachesResponse = {
  headers: map[string]string(name='headers'),
  body: PreloadDcdnObjectCachesResponseBody(name='body'),
}

async function preloadDcdnObjectCaches(request: PreloadDcdnObjectCachesRequest): PreloadDcdnObjectCachesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PreloadDcdnObjectCaches', 'POST', '/', 'json', false, 'json', request);
}

model PublishDcdnStagingConfigToProductionRequest {
  domainName: string(name='DomainName', position='Query'),
  functionName: string(name='FunctionName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model PublishDcdnStagingConfigToProductionResponseBody = {
  requestId?: string(name='RequestId'),
}

model PublishDcdnStagingConfigToProductionResponse = {
  headers: map[string]string(name='headers'),
  body: PublishDcdnStagingConfigToProductionResponseBody(name='body'),
}

async function publishDcdnStagingConfigToProduction(request: PublishDcdnStagingConfigToProductionRequest): PublishDcdnStagingConfigToProductionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PublishDcdnStagingConfigToProduction', 'POST', '/', 'json', false, 'json', request);
}

model PublishRoutineCodeRevisionRequest {
  envs: map[string]any(name='Envs', position='Body'),
  name: string(name='Name', position='Body'),
  ownerId?: long(name='OwnerId', position='Query'),
  selectCodeRevision: string(name='SelectCodeRevision', position='Body'),
}

model PublishRoutineCodeRevisionResponseBody = {
  content?: map[string]any(name='Content'),
  requestId?: string(name='RequestId'),
}

model PublishRoutineCodeRevisionResponse = {
  headers: map[string]string(name='headers'),
  body: PublishRoutineCodeRevisionResponseBody(name='body'),
}

async function publishRoutineCodeRevision(request: PublishRoutineCodeRevisionRequest): PublishRoutineCodeRevisionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PublishRoutineCodeRevision', 'POST', '/', 'json', true, 'form', request);
}

model RefreshDcdnObjectCachesRequest {
  objectPath: string(name='ObjectPath', position='Query'),
  objectType?: string(name='ObjectType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model RefreshDcdnObjectCachesResponseBody = {
  refreshTaskId?: string(name='RefreshTaskId'),
  requestId?: string(name='RequestId'),
}

model RefreshDcdnObjectCachesResponse = {
  headers: map[string]string(name='headers'),
  body: RefreshDcdnObjectCachesResponseBody(name='body'),
}

async function refreshDcdnObjectCaches(request: RefreshDcdnObjectCachesRequest): RefreshDcdnObjectCachesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefreshDcdnObjectCaches', 'POST', '/', 'json', false, 'json', request);
}

model RollbackDcdnStagingConfigRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model RollbackDcdnStagingConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model RollbackDcdnStagingConfigResponse = {
  headers: map[string]string(name='headers'),
  body: RollbackDcdnStagingConfigResponseBody(name='body'),
}

async function rollbackDcdnStagingConfig(request: RollbackDcdnStagingConfigRequest): RollbackDcdnStagingConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RollbackDcdnStagingConfig', 'POST', '/', 'json', false, 'json', request);
}

model SetDcdnConfigOfVersionRequest {
  configId?: string(name='ConfigId', position='Query'),
  functionArgs: string(name='FunctionArgs', position='Query'),
  functionId?: long(name='FunctionId', position='Query'),
  functionName?: string(name='FunctionName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  versionId: string(name='VersionId', position='Query'),
}

model SetDcdnConfigOfVersionResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetDcdnConfigOfVersionResponse = {
  headers: map[string]string(name='headers'),
  body: SetDcdnConfigOfVersionResponseBody(name='body'),
}

async function setDcdnConfigOfVersion(request: SetDcdnConfigOfVersionRequest): SetDcdnConfigOfVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDcdnConfigOfVersion', 'POST', '/', 'json', false, 'json', request);
}

model SetDcdnDomainCSRCertificateRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  serverCertificate: string(name='ServerCertificate', position='Query'),
}

model SetDcdnDomainCSRCertificateResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetDcdnDomainCSRCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: SetDcdnDomainCSRCertificateResponseBody(name='body'),
}

async function setDcdnDomainCSRCertificate(request: SetDcdnDomainCSRCertificateRequest): SetDcdnDomainCSRCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDcdnDomainCSRCertificate', 'POST', '/', 'json', false, 'json', request);
}

model SetDcdnDomainCertificateRequest {
  certName?: string(name='CertName', position='Query'),
  certType?: string(name='CertType', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  forceSet?: string(name='ForceSet', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  region?: string(name='Region', position='Query'),
  SSLPri?: string(name='SSLPri', position='Query'),
  SSLProtocol: string(name='SSLProtocol', position='Query'),
  SSLPub?: string(name='SSLPub', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model SetDcdnDomainCertificateResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetDcdnDomainCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: SetDcdnDomainCertificateResponseBody(name='body'),
}

async function setDcdnDomainCertificate(request: SetDcdnDomainCertificateRequest): SetDcdnDomainCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDcdnDomainCertificate', 'POST', '/', 'json', false, 'json', request);
}

model SetDcdnDomainSMCertificateRequest {
  certIdentifier: string(name='CertIdentifier', position='Query'),
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  SSLProtocol: string(name='SSLProtocol', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model SetDcdnDomainSMCertificateResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetDcdnDomainSMCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: SetDcdnDomainSMCertificateResponseBody(name='body'),
}

async function setDcdnDomainSMCertificate(request: SetDcdnDomainSMCertificateRequest): SetDcdnDomainSMCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDcdnDomainSMCertificate', 'POST', '/', 'json', false, 'json', request);
}

model SetDcdnDomainStagingConfigRequest {
  domainName: string(name='DomainName', position='Query'),
  functions: string(name='Functions', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model SetDcdnDomainStagingConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetDcdnDomainStagingConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetDcdnDomainStagingConfigResponseBody(name='body'),
}

async function setDcdnDomainStagingConfig(request: SetDcdnDomainStagingConfigRequest): SetDcdnDomainStagingConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDcdnDomainStagingConfig', 'POST', '/', 'json', false, 'json', request);
}

model SetDcdnFullDomainsBlockIPRequest {
  blockInterval?: int32(name='BlockInterval', position='Body'),
  IPList: string(name='IPList', position='Body'),
  operationType: string(name='OperationType', position='Body'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model SetDcdnFullDomainsBlockIPResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model SetDcdnFullDomainsBlockIPResponse = {
  headers: map[string]string(name='headers'),
  body: SetDcdnFullDomainsBlockIPResponseBody(name='body'),
}

async function setDcdnFullDomainsBlockIP(request: SetDcdnFullDomainsBlockIPRequest): SetDcdnFullDomainsBlockIPResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDcdnFullDomainsBlockIP', 'POST', '/', 'json', true, 'form', request);
}

model SetDcdnUserConfigRequest {
  configs: string(name='Configs', position='Query'),
  functionId: int32(name='FunctionId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model SetDcdnUserConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetDcdnUserConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetDcdnUserConfigResponseBody(name='body'),
}

async function setDcdnUserConfig(request: SetDcdnUserConfigRequest): SetDcdnUserConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDcdnUserConfig', 'POST', '/', 'json', false, 'json', request);
}

model SetRoutineSubdomainRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  subdomains: map[string]any(name='Subdomains', position='Body'),
}

model SetRoutineSubdomainResponseBody = {
  content?: map[string]any(name='Content'),
  requestId?: string(name='RequestId'),
}

model SetRoutineSubdomainResponse = {
  headers: map[string]string(name='headers'),
  body: SetRoutineSubdomainResponseBody(name='body'),
}

async function setRoutineSubdomain(request: SetRoutineSubdomainRequest): SetRoutineSubdomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetRoutineSubdomain', 'POST', '/', 'json', true, 'form', request);
}

model StartDcdnDomainRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model StartDcdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartDcdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: StartDcdnDomainResponseBody(name='body'),
}

async function startDcdnDomain(request: StartDcdnDomainRequest): StartDcdnDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartDcdnDomain', 'POST', '/', 'json', false, 'json', request);
}

model StartDcdnIpaDomainRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model StartDcdnIpaDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartDcdnIpaDomainResponse = {
  headers: map[string]string(name='headers'),
  body: StartDcdnIpaDomainResponseBody(name='body'),
}

async function startDcdnIpaDomain(request: StartDcdnIpaDomainRequest): StartDcdnIpaDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartDcdnIpaDomain', 'POST', '/', 'json', false, 'json', request);
}

model StopDcdnDomainRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model StopDcdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopDcdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: StopDcdnDomainResponseBody(name='body'),
}

async function stopDcdnDomain(request: StopDcdnDomainRequest): StopDcdnDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopDcdnDomain', 'POST', '/', 'json', false, 'json', request);
}

model StopDcdnIpaDomainRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model StopDcdnIpaDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopDcdnIpaDomainResponse = {
  headers: map[string]string(name='headers'),
  body: StopDcdnIpaDomainResponseBody(name='body'),
}

async function stopDcdnIpaDomain(request: StopDcdnIpaDomainRequest): StopDcdnIpaDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopDcdnIpaDomain', 'POST', '/', 'json', false, 'json', request);
}

model TagDcdnResourcesRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tag: [ 
    {
      key: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model TagDcdnResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagDcdnResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagDcdnResourcesResponseBody(name='body'),
}

async function tagDcdnResources(request: TagDcdnResourcesRequest): TagDcdnResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagDcdnResources', 'POST', '/', 'json', false, 'json', request);
}

model UntagDcdnResourcesRequest {
  all?: boolean(name='All', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tagKey?: [ string ](name='TagKey', position='Query'),
}

model UntagDcdnResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UntagDcdnResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagDcdnResourcesResponseBody(name='body'),
}

async function untagDcdnResources(request: UntagDcdnResourcesRequest): UntagDcdnResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagDcdnResources', 'POST', '/', 'json', false, 'json', request);
}

model UpdateDcdnDeliverTaskRequest {
  deliver?: string(name='Deliver', position='Body'),
  deliverId: long(name='DeliverId', position='Body'),
  domainName?: string(name='DomainName', position='Body'),
  name?: string(name='Name', position='Body'),
  ownerId?: long(name='OwnerId', position='Query'),
  reports?: string(name='Reports', position='Body'),
  schedule?: string(name='Schedule', position='Body'),
}

model UpdateDcdnDeliverTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateDcdnDeliverTaskResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDcdnDeliverTaskResponseBody(name='body'),
}

async function updateDcdnDeliverTask(request: UpdateDcdnDeliverTaskRequest): UpdateDcdnDeliverTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDcdnDeliverTask', 'POST', '/', 'json', true, 'form', request);
}

model UpdateDcdnDomainRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  sources?: string(name='Sources', position='Query'),
  topLevelDomain?: string(name='TopLevelDomain', position='Query'),
}

model UpdateDcdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateDcdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDcdnDomainResponseBody(name='body'),
}

async function updateDcdnDomain(request: UpdateDcdnDomainRequest): UpdateDcdnDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDcdnDomain', 'POST', '/', 'json', false, 'json', request);
}

model UpdateDcdnIpaDomainRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  sources?: string(name='Sources', position='Query'),
  topLevelDomain?: string(name='TopLevelDomain', position='Query'),
}

model UpdateDcdnIpaDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateDcdnIpaDomainResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDcdnIpaDomainResponseBody(name='body'),
}

async function updateDcdnIpaDomain(request: UpdateDcdnIpaDomainRequest): UpdateDcdnIpaDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDcdnIpaDomain', 'POST', '/', 'json', false, 'json', request);
}

model UpdateDcdnSLSRealtimeLogDeliveryRequest {
  dataCenter: string(name='DataCenter', position='Body'),
  domainName: string(name='DomainName', position='Body'),
  ownerId?: long(name='OwnerId', position='Query'),
  projectName: string(name='ProjectName', position='Body'),
  SLSLogStore: string(name='SLSLogStore', position='Body'),
  SLSProject: string(name='SLSProject', position='Body'),
  SLSRegion: string(name='SLSRegion', position='Body'),
  samplingRate?: string(name='SamplingRate', position='Body'),
}

model UpdateDcdnSLSRealtimeLogDeliveryResponseBody = {
  content?: {
    domains?: [ 
    {
      desc?: string(name='Desc'),
      domainName?: string(name='DomainName'),
      region?: string(name='Region'),
      status?: string(name='Status'),
    }
  ](name='Domains')
  }(name='Content'),
  requestId?: string(name='RequestId'),
}

model UpdateDcdnSLSRealtimeLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDcdnSLSRealtimeLogDeliveryResponseBody(name='body'),
}

async function updateDcdnSLSRealtimeLogDelivery(request: UpdateDcdnSLSRealtimeLogDeliveryRequest): UpdateDcdnSLSRealtimeLogDeliveryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDcdnSLSRealtimeLogDelivery', 'POST', '/', 'json', true, 'form', request);
}

model UpdateDcdnSubTaskRequest {
  domainName?: string(name='DomainName', maxLength=7000, position='Body'),
  endTime?: string(name='EndTime', position='Body'),
  ownerId?: long(name='OwnerId', position='Query'),
  reportIds?: string(name='ReportIds', position='Body'),
  startTime?: string(name='StartTime', position='Body'),
}

model UpdateDcdnSubTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateDcdnSubTaskResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDcdnSubTaskResponseBody(name='body'),
}

async function updateDcdnSubTask(request: UpdateDcdnSubTaskRequest): UpdateDcdnSubTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDcdnSubTask', 'POST', '/', 'json', true, 'form', request);
}

model UpdateDcdnUserRealTimeDeliveryFieldRequest {
  businessType?: string(name='BusinessType', position='Query'),
  fields: string(name='Fields', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model UpdateDcdnUserRealTimeDeliveryFieldResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateDcdnUserRealTimeDeliveryFieldResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDcdnUserRealTimeDeliveryFieldResponseBody(name='body'),
}

async function updateDcdnUserRealTimeDeliveryField(request: UpdateDcdnUserRealTimeDeliveryFieldRequest): UpdateDcdnUserRealTimeDeliveryFieldResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDcdnUserRealTimeDeliveryField', 'GET', '/', 'json', false, 'json', request);
}

model UploadRoutineCodeRequest {
  codeDescription: string(name='CodeDescription', position='Body'),
  name: string(name='Name', position='Body'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model UploadRoutineCodeResponseBody = {
  content?: map[string]any(name='Content'),
  requestId?: string(name='RequestId'),
}

model UploadRoutineCodeResponse = {
  headers: map[string]string(name='headers'),
  body: UploadRoutineCodeResponseBody(name='body'),
}

async function uploadRoutineCode(request: UploadRoutineCodeRequest): UploadRoutineCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UploadRoutineCode', 'POST', '/', 'json', true, 'form', request);
}

model UploadStagingRoutineCodeRequest {
  codeDescription?: string(name='CodeDescription', position='Body'),
  name: string(name='Name', position='Body'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model UploadStagingRoutineCodeResponseBody = {
  content?: map[string]any(name='Content'),
  requestId?: string(name='RequestId'),
}

model UploadStagingRoutineCodeResponse = {
  headers: map[string]string(name='headers'),
  body: UploadStagingRoutineCodeResponseBody(name='body'),
}

async function uploadStagingRoutineCode(request: UploadStagingRoutineCodeRequest): UploadStagingRoutineCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UploadStagingRoutineCode', 'POST', '/', 'json', true, 'form', request);
}

model VerifyDcdnDomainOwnerRequest {
  domainName: string(name='DomainName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  verifyType: string(name='VerifyType', position='Query'),
}

model VerifyDcdnDomainOwnerResponseBody = {
  content?: string(name='Content'),
  requestId?: string(name='RequestId'),
}

model VerifyDcdnDomainOwnerResponse = {
  headers: map[string]string(name='headers'),
  body: VerifyDcdnDomainOwnerResponseBody(name='body'),
}

async function verifyDcdnDomainOwner(request: VerifyDcdnDomainOwnerRequest): VerifyDcdnDomainOwnerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VerifyDcdnDomainOwner', 'POST', '/', 'json', false, 'json', request);
}

