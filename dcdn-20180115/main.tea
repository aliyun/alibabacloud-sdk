/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  @endpointMap = {
    ap-northeast-1 = 'dcdn.aliyuncs.com',
    ap-northeast-2-pop = 'dcdn.aliyuncs.com',
    ap-south-1 = 'dcdn.aliyuncs.com',
    ap-southeast-1 = 'dcdn.aliyuncs.com',
    ap-southeast-2 = 'dcdn.aliyuncs.com',
    ap-southeast-3 = 'dcdn.aliyuncs.com',
    ap-southeast-5 = 'dcdn.aliyuncs.com',
    cn-beijing = 'dcdn.aliyuncs.com',
    cn-beijing-finance-1 = 'dcdn.aliyuncs.com',
    cn-beijing-finance-pop = 'dcdn.aliyuncs.com',
    cn-beijing-gov-1 = 'dcdn.aliyuncs.com',
    cn-beijing-nu16-b01 = 'dcdn.aliyuncs.com',
    cn-chengdu = 'dcdn.aliyuncs.com',
    cn-edge-1 = 'dcdn.aliyuncs.com',
    cn-fujian = 'dcdn.aliyuncs.com',
    cn-haidian-cm12-c01 = 'dcdn.aliyuncs.com',
    cn-hangzhou = 'dcdn.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'dcdn.aliyuncs.com',
    cn-hangzhou-finance = 'dcdn.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'dcdn.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'dcdn.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'dcdn.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'dcdn.aliyuncs.com',
    cn-hangzhou-test-306 = 'dcdn.aliyuncs.com',
    cn-hongkong = 'dcdn.aliyuncs.com',
    cn-hongkong-finance-pop = 'dcdn.aliyuncs.com',
    cn-huhehaote = 'dcdn.aliyuncs.com',
    cn-north-2-gov-1 = 'dcdn.aliyuncs.com',
    cn-qingdao = 'dcdn.aliyuncs.com',
    cn-qingdao-nebula = 'dcdn.aliyuncs.com',
    cn-shanghai = 'dcdn.aliyuncs.com',
    cn-shanghai-et15-b01 = 'dcdn.aliyuncs.com',
    cn-shanghai-et2-b01 = 'dcdn.aliyuncs.com',
    cn-shanghai-finance-1 = 'dcdn.aliyuncs.com',
    cn-shanghai-inner = 'dcdn.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'dcdn.aliyuncs.com',
    cn-shenzhen = 'dcdn.aliyuncs.com',
    cn-shenzhen-finance-1 = 'dcdn.aliyuncs.com',
    cn-shenzhen-inner = 'dcdn.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'dcdn.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'dcdn.aliyuncs.com',
    cn-wuhan = 'dcdn.aliyuncs.com',
    cn-yushanfang = 'dcdn.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'dcdn.aliyuncs.com',
    cn-zhangjiakou = 'dcdn.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'dcdn.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'dcdn.aliyuncs.com',
    eu-central-1 = 'dcdn.aliyuncs.com',
    eu-west-1 = 'dcdn.aliyuncs.com',
    eu-west-1-oxs = 'dcdn.aliyuncs.com',
    me-east-1 = 'dcdn.aliyuncs.com',
    rus-west-1-pop = 'dcdn.aliyuncs.com',
    us-east-1 = 'dcdn.aliyuncs.com',
    us-west-1 = 'dcdn.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('dcdn', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AddDcdnDomainRequest {
  ownerId?: long(name='OwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
  resourceGroupId?: string(name='ResourceGroupId'),
  sources?: string(name='Sources'),
  checkUrl?: string(name='CheckUrl'),
  scope?: string(name='Scope'),
  topLevelDomain?: string(name='TopLevelDomain'),
}

model AddDcdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddDcdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: AddDcdnDomainResponseBody(name='body'),
}

async function addDcdnDomainWithOptions(request: AddDcdnDomainRequest, runtime: Util.RuntimeOptions): AddDcdnDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddDcdnDomain', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addDcdnDomain(request: AddDcdnDomainRequest): AddDcdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return addDcdnDomainWithOptions(request, runtime);
}

model AddDcdnIpaDomainRequest {
  ownerId?: long(name='OwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
  resourceGroupId?: string(name='ResourceGroupId'),
  sources?: string(name='Sources'),
  checkUrl?: string(name='CheckUrl'),
  scope?: string(name='Scope'),
  topLevelDomain?: string(name='TopLevelDomain'),
  protocol?: string(name='Protocol'),
}

model AddDcdnIpaDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddDcdnIpaDomainResponse = {
  headers: map[string]string(name='headers'),
  body: AddDcdnIpaDomainResponseBody(name='body'),
}

async function addDcdnIpaDomainWithOptions(request: AddDcdnIpaDomainRequest, runtime: Util.RuntimeOptions): AddDcdnIpaDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddDcdnIpaDomain', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addDcdnIpaDomain(request: AddDcdnIpaDomainRequest): AddDcdnIpaDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return addDcdnIpaDomainWithOptions(request, runtime);
}

model BatchAddDcdnDomainRequest {
  ownerId?: long(name='OwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
  resourceGroupId?: string(name='ResourceGroupId'),
  sources?: string(name='Sources'),
  checkUrl?: string(name='CheckUrl'),
  scope?: string(name='Scope'),
  topLevelDomain?: string(name='TopLevelDomain'),
}

model BatchAddDcdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchAddDcdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: BatchAddDcdnDomainResponseBody(name='body'),
}

async function batchAddDcdnDomainWithOptions(request: BatchAddDcdnDomainRequest, runtime: Util.RuntimeOptions): BatchAddDcdnDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchAddDcdnDomain', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchAddDcdnDomain(request: BatchAddDcdnDomainRequest): BatchAddDcdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchAddDcdnDomainWithOptions(request, runtime);
}

model BatchDeleteDcdnDomainConfigsRequest {
  ownerId?: long(name='OwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  securityToken?: string(name='SecurityToken'),
  domainNames?: string(name='DomainNames'),
  functionNames?: string(name='FunctionNames'),
}

model BatchDeleteDcdnDomainConfigsResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchDeleteDcdnDomainConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchDeleteDcdnDomainConfigsResponseBody(name='body'),
}

async function batchDeleteDcdnDomainConfigsWithOptions(request: BatchDeleteDcdnDomainConfigsRequest, runtime: Util.RuntimeOptions): BatchDeleteDcdnDomainConfigsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchDeleteDcdnDomainConfigs', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchDeleteDcdnDomainConfigs(request: BatchDeleteDcdnDomainConfigsRequest): BatchDeleteDcdnDomainConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchDeleteDcdnDomainConfigsWithOptions(request, runtime);
}

model BatchSetDcdnDomainCertificateRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
  certName?: string(name='CertName'),
  certType?: string(name='CertType'),
  SSLProtocol?: string(name='SSLProtocol'),
  SSLPub?: string(name='SSLPub'),
  SSLPri?: string(name='SSLPri'),
  region?: string(name='Region'),
}

model BatchSetDcdnDomainCertificateResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchSetDcdnDomainCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: BatchSetDcdnDomainCertificateResponseBody(name='body'),
}

async function batchSetDcdnDomainCertificateWithOptions(request: BatchSetDcdnDomainCertificateRequest, runtime: Util.RuntimeOptions): BatchSetDcdnDomainCertificateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchSetDcdnDomainCertificate', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchSetDcdnDomainCertificate(request: BatchSetDcdnDomainCertificateRequest): BatchSetDcdnDomainCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchSetDcdnDomainCertificateWithOptions(request, runtime);
}

model BatchSetDcdnDomainConfigsRequest {
  ownerId?: long(name='OwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  securityToken?: string(name='SecurityToken'),
  domainNames?: string(name='DomainNames'),
  functions?: string(name='Functions'),
}

model BatchSetDcdnDomainConfigsResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchSetDcdnDomainConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchSetDcdnDomainConfigsResponseBody(name='body'),
}

async function batchSetDcdnDomainConfigsWithOptions(request: BatchSetDcdnDomainConfigsRequest, runtime: Util.RuntimeOptions): BatchSetDcdnDomainConfigsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchSetDcdnDomainConfigs', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchSetDcdnDomainConfigs(request: BatchSetDcdnDomainConfigsRequest): BatchSetDcdnDomainConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchSetDcdnDomainConfigsWithOptions(request, runtime);
}

model BatchSetDcdnIpaDomainConfigsRequest {
  ownerId?: long(name='OwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  securityToken?: string(name='SecurityToken'),
  domainNames?: string(name='DomainNames'),
  functions?: string(name='Functions'),
}

model BatchSetDcdnIpaDomainConfigsResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchSetDcdnIpaDomainConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchSetDcdnIpaDomainConfigsResponseBody(name='body'),
}

async function batchSetDcdnIpaDomainConfigsWithOptions(request: BatchSetDcdnIpaDomainConfigsRequest, runtime: Util.RuntimeOptions): BatchSetDcdnIpaDomainConfigsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchSetDcdnIpaDomainConfigs', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchSetDcdnIpaDomainConfigs(request: BatchSetDcdnIpaDomainConfigsRequest): BatchSetDcdnIpaDomainConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchSetDcdnIpaDomainConfigsWithOptions(request, runtime);
}

model BatchStartDcdnDomainRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  domainNames?: string(name='DomainNames'),
}

model BatchStartDcdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchStartDcdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: BatchStartDcdnDomainResponseBody(name='body'),
}

async function batchStartDcdnDomainWithOptions(request: BatchStartDcdnDomainRequest, runtime: Util.RuntimeOptions): BatchStartDcdnDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchStartDcdnDomain', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchStartDcdnDomain(request: BatchStartDcdnDomainRequest): BatchStartDcdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchStartDcdnDomainWithOptions(request, runtime);
}

model BatchStopDcdnDomainRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  domainNames?: string(name='DomainNames'),
}

model BatchStopDcdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchStopDcdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: BatchStopDcdnDomainResponseBody(name='body'),
}

async function batchStopDcdnDomainWithOptions(request: BatchStopDcdnDomainRequest, runtime: Util.RuntimeOptions): BatchStopDcdnDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchStopDcdnDomain', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchStopDcdnDomain(request: BatchStopDcdnDomainRequest): BatchStopDcdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchStopDcdnDomainWithOptions(request, runtime);
}

model CommitStagingRoutineCodeRequest {
  ownerId?: long(name='OwnerId'),
  name?: string(name='Name'),
  codeDescription?: string(name='CodeDescription'),
}

model CommitStagingRoutineCodeResponseBody = {
  content?: map[string]any(name='Content'),
  requestId?: string(name='RequestId'),
}

model CommitStagingRoutineCodeResponse = {
  headers: map[string]string(name='headers'),
  body: CommitStagingRoutineCodeResponseBody(name='body'),
}

async function commitStagingRoutineCodeWithOptions(request: CommitStagingRoutineCodeRequest, runtime: Util.RuntimeOptions): CommitStagingRoutineCodeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CommitStagingRoutineCode', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function commitStagingRoutineCode(request: CommitStagingRoutineCodeRequest): CommitStagingRoutineCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return commitStagingRoutineCodeWithOptions(request, runtime);
}

model CreateDcdnCertificateSigningRequestRequest {
  ownerId?: long(name='OwnerId'),
  commonName?: string(name='CommonName'),
  SANs?: string(name='SANs'),
  organization?: string(name='Organization'),
  organizationUnit?: string(name='OrganizationUnit'),
  country?: string(name='Country'),
  state?: string(name='State'),
  city?: string(name='City'),
  email?: string(name='Email'),
}

model CreateDcdnCertificateSigningRequestResponseBody = {
  requestId?: string(name='RequestId'),
  pubMd5?: string(name='PubMd5'),
  csr?: string(name='Csr'),
  commonName?: string(name='CommonName'),
}

model CreateDcdnCertificateSigningRequestResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDcdnCertificateSigningRequestResponseBody(name='body'),
}

async function createDcdnCertificateSigningRequestWithOptions(request: CreateDcdnCertificateSigningRequestRequest, runtime: Util.RuntimeOptions): CreateDcdnCertificateSigningRequestResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDcdnCertificateSigningRequest', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDcdnCertificateSigningRequest(request: CreateDcdnCertificateSigningRequestRequest): CreateDcdnCertificateSigningRequestResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDcdnCertificateSigningRequestWithOptions(request, runtime);
}

model CreateDcdnDeliverTaskRequest {
  ownerId?: long(name='OwnerId'),
  name?: string(name='Name'),
  status?: string(name='Status'),
  reports?: string(name='Reports'),
  domainName?: string(name='DomainName'),
  deliver?: map[string]any(name='Deliver'),
  schedule?: map[string]any(name='Schedule'),
}

model CreateDcdnDeliverTaskShrinkRequest {
  ownerId?: long(name='OwnerId'),
  name?: string(name='Name'),
  status?: string(name='Status'),
  reports?: string(name='Reports'),
  domainName?: string(name='DomainName'),
  deliverShrink?: string(name='Deliver'),
  scheduleShrink?: string(name='Schedule'),
}

model CreateDcdnDeliverTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateDcdnDeliverTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDcdnDeliverTaskResponseBody(name='body'),
}

async function createDcdnDeliverTaskWithOptions(tmpReq: CreateDcdnDeliverTaskRequest, runtime: Util.RuntimeOptions): CreateDcdnDeliverTaskResponse {
  Util.validateModel(tmpReq);
  var request = new CreateDcdnDeliverTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deliver)) {
    request.deliverShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deliver, 'Deliver', 'json');
  }
  if (!Util.isUnset(tmpReq.schedule)) {
    request.scheduleShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.schedule, 'Schedule', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDcdnDeliverTask', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDcdnDeliverTask(request: CreateDcdnDeliverTaskRequest): CreateDcdnDeliverTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDcdnDeliverTaskWithOptions(request, runtime);
}

model CreateDcdnDomainOfflineLogDeliveryRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  regionId?: string(name='RegionId'),
  fieldId?: string(name='FieldId'),
}

model CreateDcdnDomainOfflineLogDeliveryResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateDcdnDomainOfflineLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDcdnDomainOfflineLogDeliveryResponseBody(name='body'),
}

async function createDcdnDomainOfflineLogDeliveryWithOptions(request: CreateDcdnDomainOfflineLogDeliveryRequest, runtime: Util.RuntimeOptions): CreateDcdnDomainOfflineLogDeliveryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDcdnDomainOfflineLogDelivery', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDcdnDomainOfflineLogDelivery(request: CreateDcdnDomainOfflineLogDeliveryRequest): CreateDcdnDomainOfflineLogDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDcdnDomainOfflineLogDeliveryWithOptions(request, runtime);
}

model CreateDcdnSubTaskRequest {
  ownerId?: long(name='OwnerId'),
  status?: string(name='Status'),
  reportIds?: string(name='ReportIds'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model CreateDcdnSubTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateDcdnSubTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDcdnSubTaskResponseBody(name='body'),
}

async function createDcdnSubTaskWithOptions(request: CreateDcdnSubTaskRequest, runtime: Util.RuntimeOptions): CreateDcdnSubTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDcdnSubTask', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDcdnSubTask(request: CreateDcdnSubTaskRequest): CreateDcdnSubTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDcdnSubTaskWithOptions(request, runtime);
}

model CreateRoutineRequest {
  ownerId?: long(name='OwnerId'),
  name?: string(name='Name'),
  description?: string(name='Description'),
  envConf?: map[string]any(name='EnvConf'),
}

model CreateRoutineShrinkRequest {
  ownerId?: long(name='OwnerId'),
  name?: string(name='Name'),
  description?: string(name='Description'),
  envConfShrink?: string(name='EnvConf'),
}

model CreateRoutineResponseBody = {
  content?: map[string]any(name='Content'),
  requestId?: string(name='RequestId'),
}

model CreateRoutineResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRoutineResponseBody(name='body'),
}

async function createRoutineWithOptions(tmpReq: CreateRoutineRequest, runtime: Util.RuntimeOptions): CreateRoutineResponse {
  Util.validateModel(tmpReq);
  var request = new CreateRoutineShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.envConf)) {
    request.envConfShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.envConf, 'EnvConf', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateRoutine', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createRoutine(request: CreateRoutineRequest): CreateRoutineResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRoutineWithOptions(request, runtime);
}

model DeleteDcdnDeliverTaskRequest {
  ownerId?: long(name='OwnerId'),
  deliverId?: long(name='DeliverId'),
}

model DeleteDcdnDeliverTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDcdnDeliverTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDcdnDeliverTaskResponseBody(name='body'),
}

async function deleteDcdnDeliverTaskWithOptions(request: DeleteDcdnDeliverTaskRequest, runtime: Util.RuntimeOptions): DeleteDcdnDeliverTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDcdnDeliverTask', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDcdnDeliverTask(request: DeleteDcdnDeliverTaskRequest): DeleteDcdnDeliverTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDcdnDeliverTaskWithOptions(request, runtime);
}

model DeleteDcdnDomainRequest {
  ownerId?: long(name='OwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
}

model DeleteDcdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDcdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDcdnDomainResponseBody(name='body'),
}

async function deleteDcdnDomainWithOptions(request: DeleteDcdnDomainRequest, runtime: Util.RuntimeOptions): DeleteDcdnDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDcdnDomain', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDcdnDomain(request: DeleteDcdnDomainRequest): DeleteDcdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDcdnDomainWithOptions(request, runtime);
}

model DeleteDcdnIpaDomainRequest {
  ownerId?: long(name='OwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
}

model DeleteDcdnIpaDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDcdnIpaDomainResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDcdnIpaDomainResponseBody(name='body'),
}

async function deleteDcdnIpaDomainWithOptions(request: DeleteDcdnIpaDomainRequest, runtime: Util.RuntimeOptions): DeleteDcdnIpaDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDcdnIpaDomain', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDcdnIpaDomain(request: DeleteDcdnIpaDomainRequest): DeleteDcdnIpaDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDcdnIpaDomainWithOptions(request, runtime);
}

model DeleteDcdnIpaSpecificConfigRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
  configId?: string(name='ConfigId'),
}

model DeleteDcdnIpaSpecificConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDcdnIpaSpecificConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDcdnIpaSpecificConfigResponseBody(name='body'),
}

async function deleteDcdnIpaSpecificConfigWithOptions(request: DeleteDcdnIpaSpecificConfigRequest, runtime: Util.RuntimeOptions): DeleteDcdnIpaSpecificConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDcdnIpaSpecificConfig', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDcdnIpaSpecificConfig(request: DeleteDcdnIpaSpecificConfigRequest): DeleteDcdnIpaSpecificConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDcdnIpaSpecificConfigWithOptions(request, runtime);
}

model DeleteDcdnSpecificConfigRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
  configId?: string(name='ConfigId'),
}

model DeleteDcdnSpecificConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDcdnSpecificConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDcdnSpecificConfigResponseBody(name='body'),
}

async function deleteDcdnSpecificConfigWithOptions(request: DeleteDcdnSpecificConfigRequest, runtime: Util.RuntimeOptions): DeleteDcdnSpecificConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDcdnSpecificConfig', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDcdnSpecificConfig(request: DeleteDcdnSpecificConfigRequest): DeleteDcdnSpecificConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDcdnSpecificConfigWithOptions(request, runtime);
}

model DeleteDcdnSpecificStagingConfigRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
  configId?: string(name='ConfigId'),
}

model DeleteDcdnSpecificStagingConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDcdnSpecificStagingConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDcdnSpecificStagingConfigResponseBody(name='body'),
}

async function deleteDcdnSpecificStagingConfigWithOptions(request: DeleteDcdnSpecificStagingConfigRequest, runtime: Util.RuntimeOptions): DeleteDcdnSpecificStagingConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDcdnSpecificStagingConfig', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDcdnSpecificStagingConfig(request: DeleteDcdnSpecificStagingConfigRequest): DeleteDcdnSpecificStagingConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDcdnSpecificStagingConfigWithOptions(request, runtime);
}

model DeleteDcdnSubTaskRequest {
  ownerId?: long(name='OwnerId'),
}

model DeleteDcdnSubTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDcdnSubTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDcdnSubTaskResponseBody(name='body'),
}

async function deleteDcdnSubTaskWithOptions(request: DeleteDcdnSubTaskRequest, runtime: Util.RuntimeOptions): DeleteDcdnSubTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDcdnSubTask', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDcdnSubTask(request: DeleteDcdnSubTaskRequest): DeleteDcdnSubTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDcdnSubTaskWithOptions(request, runtime);
}

model DeleteRoutineRequest {
  ownerId?: long(name='OwnerId'),
  name?: string(name='Name'),
}

model DeleteRoutineResponseBody = {
  content?: map[string]any(name='Content'),
  requestId?: string(name='RequestId'),
}

model DeleteRoutineResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRoutineResponseBody(name='body'),
}

async function deleteRoutineWithOptions(request: DeleteRoutineRequest, runtime: Util.RuntimeOptions): DeleteRoutineResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteRoutine', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteRoutine(request: DeleteRoutineRequest): DeleteRoutineResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRoutineWithOptions(request, runtime);
}

model DeleteRoutineCodeRevisionRequest {
  ownerId?: long(name='OwnerId'),
  name?: string(name='Name'),
  selectCodeRevision?: string(name='SelectCodeRevision'),
}

model DeleteRoutineCodeRevisionResponseBody = {
  content?: map[string]any(name='Content'),
  requestId?: string(name='RequestId'),
}

model DeleteRoutineCodeRevisionResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRoutineCodeRevisionResponseBody(name='body'),
}

async function deleteRoutineCodeRevisionWithOptions(request: DeleteRoutineCodeRevisionRequest, runtime: Util.RuntimeOptions): DeleteRoutineCodeRevisionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteRoutineCodeRevision', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteRoutineCodeRevision(request: DeleteRoutineCodeRevisionRequest): DeleteRoutineCodeRevisionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRoutineCodeRevisionWithOptions(request, runtime);
}

model DeleteRoutineConfEnvsRequest {
  ownerId?: long(name='OwnerId'),
  name?: string(name='Name'),
  envs?: map[string]any(name='Envs'),
}

model DeleteRoutineConfEnvsShrinkRequest {
  ownerId?: long(name='OwnerId'),
  name?: string(name='Name'),
  envsShrink?: string(name='Envs'),
}

model DeleteRoutineConfEnvsResponseBody = {
  content?: map[string]any(name='Content'),
  requestId?: string(name='RequestId'),
}

model DeleteRoutineConfEnvsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRoutineConfEnvsResponseBody(name='body'),
}

async function deleteRoutineConfEnvsWithOptions(tmpReq: DeleteRoutineConfEnvsRequest, runtime: Util.RuntimeOptions): DeleteRoutineConfEnvsResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteRoutineConfEnvsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.envs)) {
    request.envsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.envs, 'Envs', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteRoutineConfEnvs', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteRoutineConfEnvs(request: DeleteRoutineConfEnvsRequest): DeleteRoutineConfEnvsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRoutineConfEnvsWithOptions(request, runtime);
}

model DescribeDcdnBgpBpsDataRequest {
  ownerId?: long(name='OwnerId'),
  isp?: string(name='Isp'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
}

model DescribeDcdnBgpBpsDataResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  bgpDataInterval?: [ 
    {
      out?: float(name='Out'),
      in?: float(name='In'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='BgpDataInterval'),
}

model DescribeDcdnBgpBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnBgpBpsDataResponseBody(name='body'),
}

async function describeDcdnBgpBpsDataWithOptions(request: DescribeDcdnBgpBpsDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnBgpBpsDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnBgpBpsData', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnBgpBpsData(request: DescribeDcdnBgpBpsDataRequest): DescribeDcdnBgpBpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnBgpBpsDataWithOptions(request, runtime);
}

model DescribeDcdnBgpTrafficDataRequest {
  ownerId?: long(name='OwnerId'),
  isp?: string(name='Isp'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
}

model DescribeDcdnBgpTrafficDataResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  bgpDataInterval?: [ 
    {
      out?: long(name='Out'),
      in?: long(name='In'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='BgpDataInterval'),
}

model DescribeDcdnBgpTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnBgpTrafficDataResponseBody(name='body'),
}

async function describeDcdnBgpTrafficDataWithOptions(request: DescribeDcdnBgpTrafficDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnBgpTrafficDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnBgpTrafficData', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnBgpTrafficData(request: DescribeDcdnBgpTrafficDataRequest): DescribeDcdnBgpTrafficDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnBgpTrafficDataWithOptions(request, runtime);
}

model DescribeDcdnBlockedRegionsRequest {
  ownerId?: long(name='OwnerId'),
  language?: string(name='Language'),
}

model DescribeDcdnBlockedRegionsResponseBody = {
  requestId?: string(name='RequestId'),
  infoList?: {
    infoItem?: [ 
    {
      countriesAndRegions?: string(name='CountriesAndRegions'),
      continent?: string(name='Continent'),
      countriesAndRegionsName?: string(name='CountriesAndRegionsName'),
    }
  ](name='InfoItem')
  }(name='InfoList'),
}

model DescribeDcdnBlockedRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnBlockedRegionsResponseBody(name='body'),
}

async function describeDcdnBlockedRegionsWithOptions(request: DescribeDcdnBlockedRegionsRequest, runtime: Util.RuntimeOptions): DescribeDcdnBlockedRegionsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeDcdnBlockedRegions', '2018-01-15', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeDcdnBlockedRegions(request: DescribeDcdnBlockedRegionsRequest): DescribeDcdnBlockedRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnBlockedRegionsWithOptions(request, runtime);
}

model DescribeDcdnCertificateDetailRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  certName?: string(name='CertName'),
}

model DescribeDcdnCertificateDetailResponseBody = {
  certName?: string(name='CertName'),
  key?: string(name='Key'),
  cert?: string(name='Cert'),
  certId?: long(name='CertId'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnCertificateDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnCertificateDetailResponseBody(name='body'),
}

async function describeDcdnCertificateDetailWithOptions(request: DescribeDcdnCertificateDetailRequest, runtime: Util.RuntimeOptions): DescribeDcdnCertificateDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnCertificateDetail', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnCertificateDetail(request: DescribeDcdnCertificateDetailRequest): DescribeDcdnCertificateDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnCertificateDetailWithOptions(request, runtime);
}

model DescribeDcdnCertificateListRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
}

model DescribeDcdnCertificateListResponseBody = {
  requestId?: string(name='RequestId'),
  certificateListModel?: {
    count?: int32(name='Count'),
    certList?: {
      cert?: [ 
      {
        lastTime?: long(name='LastTime'),
        fingerprint?: string(name='Fingerprint'),
        certName?: string(name='CertName'),
        issuer?: string(name='Issuer'),
        certId?: long(name='CertId'),
        common?: string(name='Common'),
      }
    ](name='Cert')
    }(name='CertList'),
  }(name='CertificateListModel'),
}

model DescribeDcdnCertificateListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnCertificateListResponseBody(name='body'),
}

async function describeDcdnCertificateListWithOptions(request: DescribeDcdnCertificateListRequest, runtime: Util.RuntimeOptions): DescribeDcdnCertificateListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnCertificateList', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnCertificateList(request: DescribeDcdnCertificateListRequest): DescribeDcdnCertificateListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnCertificateListWithOptions(request, runtime);
}

model DescribeDcdnConfigOfVersionRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  versionId?: string(name='VersionId'),
  functionId?: int32(name='FunctionId'),
  functionName?: string(name='FunctionName'),
  groupId?: long(name='GroupId'),
}

model DescribeDcdnConfigOfVersionResponseBody = {
  requestId?: string(name='RequestId'),
  versionConfigs?: {
    versionConfig?: [ 
    {
      status?: string(name='Status'),
      configId?: string(name='ConfigId'),
      functionName?: string(name='FunctionName'),
      functionArgs?: {
        functionArg?: [ 
        {
          argName?: string(name='ArgName'),
          argValue?: string(name='ArgValue'),
        }
      ](name='FunctionArg')
      }(name='FunctionArgs'),
    }
  ](name='VersionConfig')
  }(name='VersionConfigs'),
}

model DescribeDcdnConfigOfVersionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnConfigOfVersionResponseBody(name='body'),
}

async function describeDcdnConfigOfVersionWithOptions(request: DescribeDcdnConfigOfVersionRequest, runtime: Util.RuntimeOptions): DescribeDcdnConfigOfVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnConfigOfVersion', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnConfigOfVersion(request: DescribeDcdnConfigOfVersionRequest): DescribeDcdnConfigOfVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnConfigOfVersionWithOptions(request, runtime);
}

model DescribeDcdnDeliverListRequest {
  ownerId?: long(name='OwnerId'),
  deliverId?: long(name='DeliverId'),
  status?: string(name='Status'),
}

model DescribeDcdnDeliverListResponseBody = {
  content?: string(name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnDeliverListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDeliverListResponseBody(name='body'),
}

async function describeDcdnDeliverListWithOptions(request: DescribeDcdnDeliverListRequest, runtime: Util.RuntimeOptions): DescribeDcdnDeliverListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnDeliverList', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnDeliverList(request: DescribeDcdnDeliverListRequest): DescribeDcdnDeliverListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDeliverListWithOptions(request, runtime);
}

model DescribeDcdnDomainBpsDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
}

model DescribeDcdnDomainBpsDataResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  dataInterval?: string(name='DataInterval'),
  bpsDataPerInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      staticHttpsBps?: float(name='StaticHttpsBps'),
      bps?: float(name='Bps'),
      dynamicHttpsBps?: float(name='DynamicHttpsBps'),
      dynamicHttpBps?: float(name='DynamicHttpBps'),
      staticHttpBps?: float(name='StaticHttpBps'),
    }
  ](name='DataModule')
  }(name='BpsDataPerInterval'),
}

model DescribeDcdnDomainBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainBpsDataResponseBody(name='body'),
}

async function describeDcdnDomainBpsDataWithOptions(request: DescribeDcdnDomainBpsDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainBpsDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnDomainBpsData', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnDomainBpsData(request: DescribeDcdnDomainBpsDataRequest): DescribeDcdnDomainBpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainBpsDataWithOptions(request, runtime);
}

model DescribeDcdnDomainByCertificateRequest {
  ownerId?: long(name='OwnerId'),
  SSLPub?: string(name='SSLPub'),
}

model DescribeDcdnDomainByCertificateResponseBody = {
  requestId?: string(name='RequestId'),
  certInfos?: {
    certInfo?: [ 
    {
      certStartTime?: string(name='CertStartTime'),
      certExpireTime?: string(name='CertExpireTime'),
      certCaIsLegacy?: string(name='CertCaIsLegacy'),
      certSubjectCommonName?: string(name='CertSubjectCommonName'),
      certType?: string(name='CertType'),
      domainNames?: string(name='DomainNames'),
      certExpired?: string(name='CertExpired'),
      issuer?: string(name='Issuer'),
      domainList?: string(name='DomainList'),
    }
  ](name='CertInfo')
  }(name='CertInfos'),
}

model DescribeDcdnDomainByCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainByCertificateResponseBody(name='body'),
}

async function describeDcdnDomainByCertificateWithOptions(request: DescribeDcdnDomainByCertificateRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainByCertificateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnDomainByCertificate', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnDomainByCertificate(request: DescribeDcdnDomainByCertificateRequest): DescribeDcdnDomainByCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainByCertificateWithOptions(request, runtime);
}

model DescribeDcdnDomainCertificateInfoRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
}

model DescribeDcdnDomainCertificateInfoResponseBody = {
  requestId?: string(name='RequestId'),
  certInfos?: {
    certInfo?: [ 
    {
      status?: string(name='Status'),
      certLife?: string(name='CertLife'),
      certExpireTime?: string(name='CertExpireTime'),
      SSLPub?: string(name='SSLPub'),
      SSLProtocol?: string(name='SSLProtocol'),
      certType?: string(name='CertType'),
      certDomainName?: string(name='CertDomainName'),
      certName?: string(name='CertName'),
      certOrg?: string(name='CertOrg'),
      domainName?: string(name='DomainName'),
    }
  ](name='CertInfo')
  }(name='CertInfos'),
}

model DescribeDcdnDomainCertificateInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainCertificateInfoResponseBody(name='body'),
}

async function describeDcdnDomainCertificateInfoWithOptions(request: DescribeDcdnDomainCertificateInfoRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainCertificateInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnDomainCertificateInfo', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnDomainCertificateInfo(request: DescribeDcdnDomainCertificateInfoRequest): DescribeDcdnDomainCertificateInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainCertificateInfoWithOptions(request, runtime);
}

model DescribeDcdnDomainCnameRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
}

model DescribeDcdnDomainCnameResponseBody = {
  requestId?: string(name='RequestId'),
  cnameDatas?: {
    data?: [ 
    {
      status?: int32(name='Status'),
      domain?: string(name='Domain'),
      cname?: string(name='Cname'),
    }
  ](name='Data')
  }(name='CnameDatas'),
}

model DescribeDcdnDomainCnameResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainCnameResponseBody(name='body'),
}

async function describeDcdnDomainCnameWithOptions(request: DescribeDcdnDomainCnameRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainCnameResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeDcdnDomainCname', '2018-01-15', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeDcdnDomainCname(request: DescribeDcdnDomainCnameRequest): DescribeDcdnDomainCnameResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainCnameWithOptions(request, runtime);
}

model DescribeDcdnDomainConfigsRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
  functionNames?: string(name='FunctionNames'),
}

model DescribeDcdnDomainConfigsResponseBody = {
  requestId?: string(name='RequestId'),
  domainConfigs?: {
    domainConfig?: [ 
    {
      status?: string(name='Status'),
      configId?: string(name='ConfigId'),
      functionName?: string(name='FunctionName'),
      functionArgs?: {
        functionArg?: [ 
        {
          argName?: string(name='ArgName'),
          argValue?: string(name='ArgValue'),
        }
      ](name='FunctionArg')
      }(name='FunctionArgs'),
    }
  ](name='DomainConfig')
  }(name='DomainConfigs'),
}

model DescribeDcdnDomainConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainConfigsResponseBody(name='body'),
}

async function describeDcdnDomainConfigsWithOptions(request: DescribeDcdnDomainConfigsRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainConfigsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnDomainConfigs', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnDomainConfigs(request: DescribeDcdnDomainConfigsRequest): DescribeDcdnDomainConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainConfigsWithOptions(request, runtime);
}

model DescribeDcdnDomainDetailRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
}

model DescribeDcdnDomainDetailResponseBody = {
  requestId?: string(name='RequestId'),
  domainDetail?: {
    gmtCreated?: string(name='GmtCreated'),
    SSLPub?: string(name='SSLPub'),
    description?: string(name='Description'),
    SSLProtocol?: string(name='SSLProtocol'),
    resourceGroupId?: string(name='ResourceGroupId'),
    certName?: string(name='CertName'),
    scope?: string(name='Scope'),
    cname?: string(name='Cname'),
    domainStatus?: string(name='DomainStatus'),
    gmtModified?: string(name='GmtModified'),
    domainName?: string(name='DomainName'),
    sources?: {
      source?: [ 
      {
        type?: string(name='Type'),
        weight?: string(name='Weight'),
        enabled?: string(name='Enabled'),
        priority?: string(name='Priority'),
        port?: int32(name='Port'),
        content?: string(name='Content'),
      }
    ](name='Source')
    }(name='Sources'),
  }(name='DomainDetail'),
}

model DescribeDcdnDomainDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainDetailResponseBody(name='body'),
}

async function describeDcdnDomainDetailWithOptions(request: DescribeDcdnDomainDetailRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnDomainDetail', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnDomainDetail(request: DescribeDcdnDomainDetailRequest): DescribeDcdnDomainDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainDetailWithOptions(request, runtime);
}

model DescribeDcdnDomainHitRateDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
}

model DescribeDcdnDomainHitRateDataResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  dataInterval?: string(name='DataInterval'),
  hitRatePerInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      byteHitRate?: float(name='ByteHitRate'),
      reqHitRate?: float(name='ReqHitRate'),
    }
  ](name='DataModule')
  }(name='HitRatePerInterval'),
}

model DescribeDcdnDomainHitRateDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainHitRateDataResponseBody(name='body'),
}

async function describeDcdnDomainHitRateDataWithOptions(request: DescribeDcdnDomainHitRateDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainHitRateDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnDomainHitRateData', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnDomainHitRateData(request: DescribeDcdnDomainHitRateDataRequest): DescribeDcdnDomainHitRateDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainHitRateDataWithOptions(request, runtime);
}

model DescribeDcdnDomainHttpCodeDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
}

model DescribeDcdnDomainHttpCodeDataResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  dataInterval?: string(name='DataInterval'),
  dataPerInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      httpCodeDataPerInterval?: {
        httpCodeDataModule?: [ 
        {
          code?: int32(name='Code'),
          proportion?: float(name='Proportion'),
          count?: float(name='Count'),
        }
      ](name='HttpCodeDataModule')
      }(name='HttpCodeDataPerInterval'),
    }
  ](name='DataModule')
  }(name='DataPerInterval'),
}

model DescribeDcdnDomainHttpCodeDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainHttpCodeDataResponseBody(name='body'),
}

async function describeDcdnDomainHttpCodeDataWithOptions(request: DescribeDcdnDomainHttpCodeDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainHttpCodeDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnDomainHttpCodeData', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnDomainHttpCodeData(request: DescribeDcdnDomainHttpCodeDataRequest): DescribeDcdnDomainHttpCodeDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainHttpCodeDataWithOptions(request, runtime);
}

model DescribeDcdnDomainIpaBpsDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  timeMerge?: string(name='TimeMerge'),
  interval?: string(name='Interval'),
  fixTimeGap?: string(name='FixTimeGap'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
}

model DescribeDcdnDomainIpaBpsDataResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  dataInterval?: string(name='DataInterval'),
  bpsDataPerInterval?: {
    dataModule?: [ 
    {
      ipaBps?: float(name='IpaBps'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='BpsDataPerInterval'),
}

model DescribeDcdnDomainIpaBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainIpaBpsDataResponseBody(name='body'),
}

async function describeDcdnDomainIpaBpsDataWithOptions(request: DescribeDcdnDomainIpaBpsDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainIpaBpsDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnDomainIpaBpsData', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnDomainIpaBpsData(request: DescribeDcdnDomainIpaBpsDataRequest): DescribeDcdnDomainIpaBpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainIpaBpsDataWithOptions(request, runtime);
}

model DescribeDcdnDomainIpaTrafficDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  timeMerge?: string(name='TimeMerge'),
  interval?: string(name='Interval'),
  fixTimeGap?: string(name='FixTimeGap'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
}

model DescribeDcdnDomainIpaTrafficDataResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  dataInterval?: string(name='DataInterval'),
  trafficDataPerInterval?: {
    dataModule?: [ 
    {
      ipaTraffic?: float(name='IpaTraffic'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='TrafficDataPerInterval'),
}

model DescribeDcdnDomainIpaTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainIpaTrafficDataResponseBody(name='body'),
}

async function describeDcdnDomainIpaTrafficDataWithOptions(request: DescribeDcdnDomainIpaTrafficDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainIpaTrafficDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnDomainIpaTrafficData', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnDomainIpaTrafficData(request: DescribeDcdnDomainIpaTrafficDataRequest): DescribeDcdnDomainIpaTrafficDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainIpaTrafficDataWithOptions(request, runtime);
}

model DescribeDcdnDomainIspDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeDcdnDomainIspDataResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  dataInterval?: string(name='DataInterval'),
  value?: {
    ispProportionData?: [ 
    {
      qps?: string(name='Qps'),
      totalQuery?: string(name='TotalQuery'),
      totalBytes?: string(name='TotalBytes'),
      avgResponseRate?: string(name='AvgResponseRate'),
      avgResponseTime?: string(name='AvgResponseTime'),
      proportion?: string(name='Proportion'),
      avgObjectSize?: string(name='AvgObjectSize'),
      ispEname?: string(name='IspEname'),
      bps?: string(name='Bps'),
      isp?: string(name='Isp'),
      bytesProportion?: string(name='BytesProportion'),
    }
  ](name='IspProportionData')
  }(name='Value'),
}

model DescribeDcdnDomainIspDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainIspDataResponseBody(name='body'),
}

async function describeDcdnDomainIspDataWithOptions(request: DescribeDcdnDomainIspDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainIspDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnDomainIspData', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnDomainIspData(request: DescribeDcdnDomainIspDataRequest): DescribeDcdnDomainIspDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainIspDataWithOptions(request, runtime);
}

model DescribeDcdnDomainLogRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  pageSize?: long(name='PageSize'),
  pageNumber?: long(name='PageNumber'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeDcdnDomainLogResponseBody = {
  domainName?: string(name='DomainName'),
  requestId?: string(name='RequestId'),
  domainLogDetails?: {
    domainLogDetail?: [ 
    {
      logCount?: long(name='LogCount'),
      logInfos?: {
        logInfoDetail?: [ 
        {
          endTime?: string(name='EndTime'),
          logSize?: long(name='LogSize'),
          startTime?: string(name='StartTime'),
          logName?: string(name='LogName'),
          logPath?: string(name='LogPath'),
        }
      ](name='LogInfoDetail')
      }(name='LogInfos'),
      pageInfos?: {
        pageIndex?: long(name='PageIndex'),
        pageSize?: long(name='PageSize'),
        total?: long(name='Total'),
      }(name='PageInfos'),
    }
  ](name='DomainLogDetail')
  }(name='DomainLogDetails'),
}

model DescribeDcdnDomainLogResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainLogResponseBody(name='body'),
}

async function describeDcdnDomainLogWithOptions(request: DescribeDcdnDomainLogRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainLogResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnDomainLog', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnDomainLog(request: DescribeDcdnDomainLogRequest): DescribeDcdnDomainLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainLogWithOptions(request, runtime);
}

model DescribeDcdnDomainMultiUsageDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeDcdnDomainMultiUsageDataResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  requestPerInterval?: {
    requestDataModule?: [ 
    {
      type?: string(name='Type'),
      timeStamp?: string(name='TimeStamp'),
      domain?: string(name='Domain'),
      request?: long(name='Request'),
    }
  ](name='RequestDataModule')
  }(name='RequestPerInterval'),
  trafficPerInterval?: {
    trafficDataModule?: [ 
    {
      type?: string(name='Type'),
      domain?: string(name='Domain'),
      timeStamp?: string(name='TimeStamp'),
      area?: string(name='Area'),
      bps?: float(name='Bps'),
    }
  ](name='TrafficDataModule')
  }(name='TrafficPerInterval'),
}

model DescribeDcdnDomainMultiUsageDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainMultiUsageDataResponseBody(name='body'),
}

async function describeDcdnDomainMultiUsageDataWithOptions(request: DescribeDcdnDomainMultiUsageDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainMultiUsageDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnDomainMultiUsageData', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnDomainMultiUsageData(request: DescribeDcdnDomainMultiUsageDataRequest): DescribeDcdnDomainMultiUsageDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainMultiUsageDataWithOptions(request, runtime);
}

model DescribeDcdnDomainOriginBpsDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
}

model DescribeDcdnDomainOriginBpsDataResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  dataInterval?: string(name='DataInterval'),
  originBpsDataPerInterval?: {
    dataModule?: [ 
    {
      dynamicHttpOriginBps?: float(name='DynamicHttpOriginBps'),
      staticHttpOriginBps?: float(name='StaticHttpOriginBps'),
      timeStamp?: string(name='TimeStamp'),
      staticHttpsOriginBps?: float(name='StaticHttpsOriginBps'),
      originBps?: float(name='OriginBps'),
      dynamicHttpsOriginBps?: float(name='DynamicHttpsOriginBps'),
    }
  ](name='DataModule')
  }(name='OriginBpsDataPerInterval'),
}

model DescribeDcdnDomainOriginBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainOriginBpsDataResponseBody(name='body'),
}

async function describeDcdnDomainOriginBpsDataWithOptions(request: DescribeDcdnDomainOriginBpsDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainOriginBpsDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnDomainOriginBpsData', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnDomainOriginBpsData(request: DescribeDcdnDomainOriginBpsDataRequest): DescribeDcdnDomainOriginBpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainOriginBpsDataWithOptions(request, runtime);
}

model DescribeDcdnDomainOriginTrafficDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
}

model DescribeDcdnDomainOriginTrafficDataResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  dataInterval?: string(name='DataInterval'),
  originTrafficDataPerInterval?: {
    dataModule?: [ 
    {
      dynamicHttpOriginTraffic?: float(name='DynamicHttpOriginTraffic'),
      staticHttpsOriginTraffic?: float(name='StaticHttpsOriginTraffic'),
      originTraffic?: float(name='OriginTraffic'),
      staticHttpOriginTraffic?: float(name='StaticHttpOriginTraffic'),
      dynamicHttpsOriginTraffic?: float(name='DynamicHttpsOriginTraffic'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='OriginTrafficDataPerInterval'),
}

model DescribeDcdnDomainOriginTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainOriginTrafficDataResponseBody(name='body'),
}

async function describeDcdnDomainOriginTrafficDataWithOptions(request: DescribeDcdnDomainOriginTrafficDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainOriginTrafficDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnDomainOriginTrafficData', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnDomainOriginTrafficData(request: DescribeDcdnDomainOriginTrafficDataRequest): DescribeDcdnDomainOriginTrafficDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainOriginTrafficDataWithOptions(request, runtime);
}

model DescribeDcdnDomainPropertyRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
}

model DescribeDcdnDomainPropertyResponseBody = {
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  protocol?: string(name='Protocol'),
}

model DescribeDcdnDomainPropertyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainPropertyResponseBody(name='body'),
}

async function describeDcdnDomainPropertyWithOptions(request: DescribeDcdnDomainPropertyRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainPropertyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnDomainProperty', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnDomainProperty(request: DescribeDcdnDomainPropertyRequest): DescribeDcdnDomainPropertyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainPropertyWithOptions(request, runtime);
}

model DescribeDcdnDomainPvDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeDcdnDomainPvDataResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  dataInterval?: string(name='DataInterval'),
  pvDataInterval?: {
    usageData?: [ 
    {
      value?: string(name='Value'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='UsageData')
  }(name='PvDataInterval'),
}

model DescribeDcdnDomainPvDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainPvDataResponseBody(name='body'),
}

async function describeDcdnDomainPvDataWithOptions(request: DescribeDcdnDomainPvDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainPvDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnDomainPvData', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnDomainPvData(request: DescribeDcdnDomainPvDataRequest): DescribeDcdnDomainPvDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainPvDataWithOptions(request, runtime);
}

model DescribeDcdnDomainQpsDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
}

model DescribeDcdnDomainQpsDataResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  dataInterval?: string(name='DataInterval'),
  qpsDataPerInterval?: {
    dataModule?: [ 
    {
      dynamicHttpsAcc?: float(name='DynamicHttpsAcc'),
      dynamicHttpAcc?: float(name='DynamicHttpAcc'),
      qps?: float(name='Qps'),
      staticHttpsAcc?: float(name='StaticHttpsAcc'),
      staticHttpQps?: float(name='StaticHttpQps'),
      staticHttpAcc?: float(name='StaticHttpAcc'),
      dynamicHttpsQps?: float(name='DynamicHttpsQps'),
      acc?: float(name='Acc'),
      staticHttpsQps?: float(name='StaticHttpsQps'),
      dynamicHttpQps?: float(name='DynamicHttpQps'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='QpsDataPerInterval'),
}

model DescribeDcdnDomainQpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainQpsDataResponseBody(name='body'),
}

async function describeDcdnDomainQpsDataWithOptions(request: DescribeDcdnDomainQpsDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainQpsDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnDomainQpsData', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnDomainQpsData(request: DescribeDcdnDomainQpsDataRequest): DescribeDcdnDomainQpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainQpsDataWithOptions(request, runtime);
}

model DescribeDcdnDomainRealTimeBpsDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeDcdnDomainRealTimeBpsDataResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    bpsModel?: [ 
    {
      bps?: float(name='Bps'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='BpsModel')
  }(name='Data'),
}

model DescribeDcdnDomainRealTimeBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainRealTimeBpsDataResponseBody(name='body'),
}

async function describeDcdnDomainRealTimeBpsDataWithOptions(request: DescribeDcdnDomainRealTimeBpsDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainRealTimeBpsDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeDcdnDomainRealTimeBpsData', '2018-01-15', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeDcdnDomainRealTimeBpsData(request: DescribeDcdnDomainRealTimeBpsDataRequest): DescribeDcdnDomainRealTimeBpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainRealTimeBpsDataWithOptions(request, runtime);
}

model DescribeDcdnDomainRealTimeByteHitRateDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeDcdnDomainRealTimeByteHitRateDataResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    byteHitRateDataModel?: [ 
    {
      byteHitRate?: float(name='ByteHitRate'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='ByteHitRateDataModel')
  }(name='Data'),
}

model DescribeDcdnDomainRealTimeByteHitRateDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainRealTimeByteHitRateDataResponseBody(name='body'),
}

async function describeDcdnDomainRealTimeByteHitRateDataWithOptions(request: DescribeDcdnDomainRealTimeByteHitRateDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainRealTimeByteHitRateDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeDcdnDomainRealTimeByteHitRateData', '2018-01-15', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeDcdnDomainRealTimeByteHitRateData(request: DescribeDcdnDomainRealTimeByteHitRateDataRequest): DescribeDcdnDomainRealTimeByteHitRateDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainRealTimeByteHitRateDataWithOptions(request, runtime);
}

model DescribeDcdnDomainRealTimeDetailDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  field?: string(name='Field'),
  locationNameEn?: string(name='LocationNameEn'),
  ispNameEn?: string(name='IspNameEn'),
  merge?: string(name='Merge'),
  mergeLocIsp?: string(name='MergeLocIsp'),
}

model DescribeDcdnDomainRealTimeDetailDataResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnDomainRealTimeDetailDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainRealTimeDetailDataResponseBody(name='body'),
}

async function describeDcdnDomainRealTimeDetailDataWithOptions(request: DescribeDcdnDomainRealTimeDetailDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainRealTimeDetailDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeDcdnDomainRealTimeDetailData', '2018-01-15', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeDcdnDomainRealTimeDetailData(request: DescribeDcdnDomainRealTimeDetailDataRequest): DescribeDcdnDomainRealTimeDetailDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainRealTimeDetailDataWithOptions(request, runtime);
}

model DescribeDcdnDomainRealTimeHttpCodeDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
}

model DescribeDcdnDomainRealTimeHttpCodeDataResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  dataInterval?: string(name='DataInterval'),
  realTimeHttpCodeData?: {
    usageData?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: {
        realTimeCodeProportionData?: [ 
        {
          code?: string(name='Code'),
          proportion?: string(name='Proportion'),
          count?: string(name='Count'),
        }
      ](name='RealTimeCodeProportionData')
      }(name='Value'),
    }
  ](name='UsageData')
  }(name='RealTimeHttpCodeData'),
}

model DescribeDcdnDomainRealTimeHttpCodeDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainRealTimeHttpCodeDataResponseBody(name='body'),
}

async function describeDcdnDomainRealTimeHttpCodeDataWithOptions(request: DescribeDcdnDomainRealTimeHttpCodeDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainRealTimeHttpCodeDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnDomainRealTimeHttpCodeData', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnDomainRealTimeHttpCodeData(request: DescribeDcdnDomainRealTimeHttpCodeDataRequest): DescribeDcdnDomainRealTimeHttpCodeDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainRealTimeHttpCodeDataWithOptions(request, runtime);
}

model DescribeDcdnDomainRealTimeQpsDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeDcdnDomainRealTimeQpsDataResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    qpsModel?: [ 
    {
      qps?: float(name='Qps'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='QpsModel')
  }(name='Data'),
}

model DescribeDcdnDomainRealTimeQpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainRealTimeQpsDataResponseBody(name='body'),
}

async function describeDcdnDomainRealTimeQpsDataWithOptions(request: DescribeDcdnDomainRealTimeQpsDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainRealTimeQpsDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeDcdnDomainRealTimeQpsData', '2018-01-15', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeDcdnDomainRealTimeQpsData(request: DescribeDcdnDomainRealTimeQpsDataRequest): DescribeDcdnDomainRealTimeQpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainRealTimeQpsDataWithOptions(request, runtime);
}

model DescribeDcdnDomainRealTimeReqHitRateDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeDcdnDomainRealTimeReqHitRateDataResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    reqHitRateDataModel?: [ 
    {
      reqHitRate?: float(name='ReqHitRate'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='ReqHitRateDataModel')
  }(name='Data'),
}

model DescribeDcdnDomainRealTimeReqHitRateDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainRealTimeReqHitRateDataResponseBody(name='body'),
}

async function describeDcdnDomainRealTimeReqHitRateDataWithOptions(request: DescribeDcdnDomainRealTimeReqHitRateDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainRealTimeReqHitRateDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeDcdnDomainRealTimeReqHitRateData', '2018-01-15', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeDcdnDomainRealTimeReqHitRateData(request: DescribeDcdnDomainRealTimeReqHitRateDataRequest): DescribeDcdnDomainRealTimeReqHitRateDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainRealTimeReqHitRateDataWithOptions(request, runtime);
}

model DescribeDcdnDomainRealTimeSrcBpsDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeDcdnDomainRealTimeSrcBpsDataResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  dataInterval?: string(name='DataInterval'),
  realTimeSrcBpsDataPerInterval?: {
    dataModule?: [ 
    {
      value?: string(name='Value'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='RealTimeSrcBpsDataPerInterval'),
}

model DescribeDcdnDomainRealTimeSrcBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainRealTimeSrcBpsDataResponseBody(name='body'),
}

async function describeDcdnDomainRealTimeSrcBpsDataWithOptions(request: DescribeDcdnDomainRealTimeSrcBpsDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainRealTimeSrcBpsDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnDomainRealTimeSrcBpsData', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnDomainRealTimeSrcBpsData(request: DescribeDcdnDomainRealTimeSrcBpsDataRequest): DescribeDcdnDomainRealTimeSrcBpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainRealTimeSrcBpsDataWithOptions(request, runtime);
}

model DescribeDcdnDomainRealTimeSrcHttpCodeDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
}

model DescribeDcdnDomainRealTimeSrcHttpCodeDataResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  dataInterval?: string(name='DataInterval'),
  realTimeSrcHttpCodeData?: {
    usageData?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: {
        realTimeSrcCodeProportionData?: [ 
        {
          code?: string(name='Code'),
          proportion?: string(name='Proportion'),
          count?: string(name='Count'),
        }
      ](name='RealTimeSrcCodeProportionData')
      }(name='Value'),
    }
  ](name='UsageData')
  }(name='RealTimeSrcHttpCodeData'),
}

model DescribeDcdnDomainRealTimeSrcHttpCodeDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainRealTimeSrcHttpCodeDataResponseBody(name='body'),
}

async function describeDcdnDomainRealTimeSrcHttpCodeDataWithOptions(request: DescribeDcdnDomainRealTimeSrcHttpCodeDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainRealTimeSrcHttpCodeDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnDomainRealTimeSrcHttpCodeData', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnDomainRealTimeSrcHttpCodeData(request: DescribeDcdnDomainRealTimeSrcHttpCodeDataRequest): DescribeDcdnDomainRealTimeSrcHttpCodeDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainRealTimeSrcHttpCodeDataWithOptions(request, runtime);
}

model DescribeDcdnDomainRealTimeSrcTrafficDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeDcdnDomainRealTimeSrcTrafficDataResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  dataInterval?: string(name='DataInterval'),
  realTimeSrcTrafficDataPerInterval?: {
    dataModule?: [ 
    {
      value?: string(name='Value'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='RealTimeSrcTrafficDataPerInterval'),
}

model DescribeDcdnDomainRealTimeSrcTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainRealTimeSrcTrafficDataResponseBody(name='body'),
}

async function describeDcdnDomainRealTimeSrcTrafficDataWithOptions(request: DescribeDcdnDomainRealTimeSrcTrafficDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainRealTimeSrcTrafficDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnDomainRealTimeSrcTrafficData', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnDomainRealTimeSrcTrafficData(request: DescribeDcdnDomainRealTimeSrcTrafficDataRequest): DescribeDcdnDomainRealTimeSrcTrafficDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainRealTimeSrcTrafficDataWithOptions(request, runtime);
}

model DescribeDcdnDomainRealTimeTrafficDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeDcdnDomainRealTimeTrafficDataResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  dataInterval?: string(name='DataInterval'),
  realTimeTrafficDataPerInterval?: {
    dataModule?: [ 
    {
      value?: string(name='Value'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='RealTimeTrafficDataPerInterval'),
}

model DescribeDcdnDomainRealTimeTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainRealTimeTrafficDataResponseBody(name='body'),
}

async function describeDcdnDomainRealTimeTrafficDataWithOptions(request: DescribeDcdnDomainRealTimeTrafficDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainRealTimeTrafficDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnDomainRealTimeTrafficData', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnDomainRealTimeTrafficData(request: DescribeDcdnDomainRealTimeTrafficDataRequest): DescribeDcdnDomainRealTimeTrafficDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainRealTimeTrafficDataWithOptions(request, runtime);
}

model DescribeDcdnDomainRegionDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeDcdnDomainRegionDataResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  dataInterval?: string(name='DataInterval'),
  value?: {
    regionProportionData?: [ 
    {
      qps?: string(name='Qps'),
      totalQuery?: string(name='TotalQuery'),
      totalBytes?: string(name='TotalBytes'),
      regionEname?: string(name='RegionEname'),
      region?: string(name='Region'),
      avgResponseRate?: string(name='AvgResponseRate'),
      avgResponseTime?: string(name='AvgResponseTime'),
      proportion?: string(name='Proportion'),
      avgObjectSize?: string(name='AvgObjectSize'),
      bps?: string(name='Bps'),
      bytesProportion?: string(name='BytesProportion'),
    }
  ](name='RegionProportionData')
  }(name='Value'),
}

model DescribeDcdnDomainRegionDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainRegionDataResponseBody(name='body'),
}

async function describeDcdnDomainRegionDataWithOptions(request: DescribeDcdnDomainRegionDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainRegionDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnDomainRegionData', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnDomainRegionData(request: DescribeDcdnDomainRegionDataRequest): DescribeDcdnDomainRegionDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainRegionDataWithOptions(request, runtime);
}

model DescribeDcdnDomainStagingConfigRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  functionNames?: string(name='FunctionNames'),
}

model DescribeDcdnDomainStagingConfigResponseBody = {
  requestId?: string(name='RequestId'),
  domainConfigs?: [ 
    {
      status?: string(name='Status'),
      configId?: string(name='ConfigId'),
      functionName?: string(name='FunctionName'),
      functionArgs?: [ 
        {
          argName?: string(name='ArgName'),
          argValue?: string(name='ArgValue'),
        }
      ](name='FunctionArgs'),
    }
  ](name='DomainConfigs'),
}

model DescribeDcdnDomainStagingConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainStagingConfigResponseBody(name='body'),
}

async function describeDcdnDomainStagingConfigWithOptions(request: DescribeDcdnDomainStagingConfigRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainStagingConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnDomainStagingConfig', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnDomainStagingConfig(request: DescribeDcdnDomainStagingConfigRequest): DescribeDcdnDomainStagingConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainStagingConfigWithOptions(request, runtime);
}

model DescribeDcdnDomainTopReferVisitRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  sortBy?: string(name='SortBy'),
}

model DescribeDcdnDomainTopReferVisitResponseBody = {
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  topReferList?: {
    referList?: [ 
    {
      flow?: string(name='Flow'),
      flowProportion?: float(name='FlowProportion'),
      visitData?: string(name='VisitData'),
      referDetail?: string(name='ReferDetail'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='ReferList')
  }(name='TopReferList'),
}

model DescribeDcdnDomainTopReferVisitResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainTopReferVisitResponseBody(name='body'),
}

async function describeDcdnDomainTopReferVisitWithOptions(request: DescribeDcdnDomainTopReferVisitRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainTopReferVisitResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnDomainTopReferVisit', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnDomainTopReferVisit(request: DescribeDcdnDomainTopReferVisitRequest): DescribeDcdnDomainTopReferVisitResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainTopReferVisitWithOptions(request, runtime);
}

model DescribeDcdnDomainTopUrlVisitRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  sortBy?: string(name='SortBy'),
}

model DescribeDcdnDomainTopUrlVisitResponseBody = {
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  allUrlList?: {
    urlList?: [ 
    {
      flow?: string(name='Flow'),
      urlDetail?: string(name='UrlDetail'),
      flowProportion?: float(name='FlowProportion'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='UrlList')
  }(name='AllUrlList'),
  url200List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow'),
      urlDetail?: string(name='UrlDetail'),
      flowProportion?: float(name='FlowProportion'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='UrlList')
  }(name='Url200List'),
  url300List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow'),
      urlDetail?: string(name='UrlDetail'),
      flowProportion?: float(name='FlowProportion'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='UrlList')
  }(name='Url300List'),
  url400List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow'),
      urlDetail?: string(name='UrlDetail'),
      flowProportion?: float(name='FlowProportion'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='UrlList')
  }(name='Url400List'),
  url500List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow'),
      urlDetail?: string(name='UrlDetail'),
      flowProportion?: float(name='FlowProportion'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='UrlList')
  }(name='Url500List'),
}

model DescribeDcdnDomainTopUrlVisitResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainTopUrlVisitResponseBody(name='body'),
}

async function describeDcdnDomainTopUrlVisitWithOptions(request: DescribeDcdnDomainTopUrlVisitRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainTopUrlVisitResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnDomainTopUrlVisit', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnDomainTopUrlVisit(request: DescribeDcdnDomainTopUrlVisitRequest): DescribeDcdnDomainTopUrlVisitResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainTopUrlVisitWithOptions(request, runtime);
}

model DescribeDcdnDomainTrafficDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
}

model DescribeDcdnDomainTrafficDataResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  dataInterval?: string(name='DataInterval'),
  trafficDataPerInterval?: {
    dataModule?: [ 
    {
      staticHttpTraffic?: float(name='StaticHttpTraffic'),
      dynamicHttpsTraffic?: float(name='DynamicHttpsTraffic'),
      traffic?: float(name='Traffic'),
      dynamicHttpTraffic?: float(name='DynamicHttpTraffic'),
      timeStamp?: string(name='TimeStamp'),
      staticHttpsTraffic?: float(name='StaticHttpsTraffic'),
    }
  ](name='DataModule')
  }(name='TrafficDataPerInterval'),
}

model DescribeDcdnDomainTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainTrafficDataResponseBody(name='body'),
}

async function describeDcdnDomainTrafficDataWithOptions(request: DescribeDcdnDomainTrafficDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainTrafficDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnDomainTrafficData', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnDomainTrafficData(request: DescribeDcdnDomainTrafficDataRequest): DescribeDcdnDomainTrafficDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainTrafficDataWithOptions(request, runtime);
}

model DescribeDcdnDomainUvDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeDcdnDomainUvDataResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  dataInterval?: string(name='DataInterval'),
  uvDataInterval?: {
    usageData?: [ 
    {
      value?: string(name='Value'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='UsageData')
  }(name='UvDataInterval'),
}

model DescribeDcdnDomainUvDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainUvDataResponseBody(name='body'),
}

async function describeDcdnDomainUvDataWithOptions(request: DescribeDcdnDomainUvDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainUvDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnDomainUvData', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnDomainUvData(request: DescribeDcdnDomainUvDataRequest): DescribeDcdnDomainUvDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainUvDataWithOptions(request, runtime);
}

model DescribeDcdnDomainWebsocketBpsDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
}

model DescribeDcdnDomainWebsocketBpsDataResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  dataInterval?: string(name='DataInterval'),
  bpsDataPerInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      websocketBps?: float(name='WebsocketBps'),
    }
  ](name='DataModule')
  }(name='BpsDataPerInterval'),
}

model DescribeDcdnDomainWebsocketBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainWebsocketBpsDataResponseBody(name='body'),
}

async function describeDcdnDomainWebsocketBpsDataWithOptions(request: DescribeDcdnDomainWebsocketBpsDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainWebsocketBpsDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnDomainWebsocketBpsData', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnDomainWebsocketBpsData(request: DescribeDcdnDomainWebsocketBpsDataRequest): DescribeDcdnDomainWebsocketBpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainWebsocketBpsDataWithOptions(request, runtime);
}

model DescribeDcdnDomainWebsocketHttpCodeDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
}

model DescribeDcdnDomainWebsocketHttpCodeDataResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  dataInterval?: string(name='DataInterval'),
  dataPerInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      websocketHttpCodeDataPerInterval?: {
        httpCodeDataModule?: [ 
        {
          code?: int32(name='Code'),
          proportion?: float(name='Proportion'),
          count?: float(name='Count'),
        }
      ](name='HttpCodeDataModule')
      }(name='WebsocketHttpCodeDataPerInterval'),
    }
  ](name='DataModule')
  }(name='DataPerInterval'),
}

model DescribeDcdnDomainWebsocketHttpCodeDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainWebsocketHttpCodeDataResponseBody(name='body'),
}

async function describeDcdnDomainWebsocketHttpCodeDataWithOptions(request: DescribeDcdnDomainWebsocketHttpCodeDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainWebsocketHttpCodeDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnDomainWebsocketHttpCodeData', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnDomainWebsocketHttpCodeData(request: DescribeDcdnDomainWebsocketHttpCodeDataRequest): DescribeDcdnDomainWebsocketHttpCodeDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainWebsocketHttpCodeDataWithOptions(request, runtime);
}

model DescribeDcdnDomainWebsocketTrafficDataRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
}

model DescribeDcdnDomainWebsocketTrafficDataResponseBody = {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  dataInterval?: string(name='DataInterval'),
  trafficDataPerInterval?: {
    dataModule?: [ 
    {
      websocketTraffic?: float(name='WebsocketTraffic'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='TrafficDataPerInterval'),
}

model DescribeDcdnDomainWebsocketTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainWebsocketTrafficDataResponseBody(name='body'),
}

async function describeDcdnDomainWebsocketTrafficDataWithOptions(request: DescribeDcdnDomainWebsocketTrafficDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainWebsocketTrafficDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnDomainWebsocketTrafficData', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnDomainWebsocketTrafficData(request: DescribeDcdnDomainWebsocketTrafficDataRequest): DescribeDcdnDomainWebsocketTrafficDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainWebsocketTrafficDataWithOptions(request, runtime);
}

model DescribeDcdnHttpsDomainListRequest {
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  keyword?: string(name='Keyword'),
}

model DescribeDcdnHttpsDomainListResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  certInfos?: {
    certInfo?: [ 
    {
      certStartTime?: string(name='CertStartTime'),
      certExpireTime?: string(name='CertExpireTime'),
      certUpdateTime?: string(name='CertUpdateTime'),
      certType?: string(name='CertType'),
      certName?: string(name='CertName'),
      certStatus?: string(name='CertStatus'),
      domainName?: string(name='DomainName'),
      certCommonName?: string(name='CertCommonName'),
    }
  ](name='CertInfo')
  }(name='CertInfos'),
}

model DescribeDcdnHttpsDomainListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnHttpsDomainListResponseBody(name='body'),
}

async function describeDcdnHttpsDomainListWithOptions(request: DescribeDcdnHttpsDomainListRequest, runtime: Util.RuntimeOptions): DescribeDcdnHttpsDomainListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnHttpsDomainList', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnHttpsDomainList(request: DescribeDcdnHttpsDomainListRequest): DescribeDcdnHttpsDomainListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnHttpsDomainListWithOptions(request, runtime);
}

model DescribeDcdnIpaDomainConfigsRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
  functionNames?: string(name='FunctionNames'),
}

model DescribeDcdnIpaDomainConfigsResponseBody = {
  requestId?: string(name='RequestId'),
  domainConfigs?: {
    domainConfig?: [ 
    {
      status?: string(name='Status'),
      configId?: string(name='ConfigId'),
      functionName?: string(name='FunctionName'),
      functionArgs?: {
        functionArg?: [ 
        {
          argName?: string(name='ArgName'),
          argValue?: string(name='ArgValue'),
        }
      ](name='FunctionArg')
      }(name='FunctionArgs'),
    }
  ](name='DomainConfig')
  }(name='DomainConfigs'),
}

model DescribeDcdnIpaDomainConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnIpaDomainConfigsResponseBody(name='body'),
}

async function describeDcdnIpaDomainConfigsWithOptions(request: DescribeDcdnIpaDomainConfigsRequest, runtime: Util.RuntimeOptions): DescribeDcdnIpaDomainConfigsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnIpaDomainConfigs', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnIpaDomainConfigs(request: DescribeDcdnIpaDomainConfigsRequest): DescribeDcdnIpaDomainConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnIpaDomainConfigsWithOptions(request, runtime);
}

model DescribeDcdnIpaDomainDetailRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
}

model DescribeDcdnIpaDomainDetailResponseBody = {
  requestId?: string(name='RequestId'),
  domainDetail?: {
    gmtCreated?: string(name='GmtCreated'),
    SSLPub?: string(name='SSLPub'),
    description?: string(name='Description'),
    SSLProtocol?: string(name='SSLProtocol'),
    resourceGroupId?: string(name='ResourceGroupId'),
    certName?: string(name='CertName'),
    scope?: string(name='Scope'),
    cname?: string(name='Cname'),
    domainStatus?: string(name='DomainStatus'),
    gmtModified?: string(name='GmtModified'),
    domainName?: string(name='DomainName'),
    sources?: {
      source?: [ 
      {
        type?: string(name='Type'),
        weight?: string(name='Weight'),
        enabled?: string(name='Enabled'),
        priority?: string(name='Priority'),
        port?: int32(name='Port'),
        content?: string(name='Content'),
      }
    ](name='Source')
    }(name='Sources'),
  }(name='DomainDetail'),
}

model DescribeDcdnIpaDomainDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnIpaDomainDetailResponseBody(name='body'),
}

async function describeDcdnIpaDomainDetailWithOptions(request: DescribeDcdnIpaDomainDetailRequest, runtime: Util.RuntimeOptions): DescribeDcdnIpaDomainDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnIpaDomainDetail', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnIpaDomainDetail(request: DescribeDcdnIpaDomainDetailRequest): DescribeDcdnIpaDomainDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnIpaDomainDetailWithOptions(request, runtime);
}

model DescribeDcdnIpaServiceRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeDcdnIpaServiceResponseBody = {
  changingAffectTime?: string(name='ChangingAffectTime'),
  requestId?: string(name='RequestId'),
  changingChargeType?: string(name='ChangingChargeType'),
  openingTime?: string(name='OpeningTime'),
  internetChargeType?: string(name='InternetChargeType'),
  instanceId?: string(name='InstanceId'),
  operationLocks?: {
    lockReason?: [ 
    {
      lockReason?: string(name='LockReason'),
    }
  ](name='LockReason')
  }(name='OperationLocks'),
}

model DescribeDcdnIpaServiceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnIpaServiceResponseBody(name='body'),
}

async function describeDcdnIpaServiceWithOptions(request: DescribeDcdnIpaServiceRequest, runtime: Util.RuntimeOptions): DescribeDcdnIpaServiceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnIpaService', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnIpaService(request: DescribeDcdnIpaServiceRequest): DescribeDcdnIpaServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnIpaServiceWithOptions(request, runtime);
}

model DescribeDcdnIpaUserDomainsRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  domainName?: string(name='DomainName'),
  domainStatus?: string(name='DomainStatus'),
  domainSearchType?: string(name='DomainSearchType'),
  checkDomainShow?: boolean(name='CheckDomainShow'),
  resourceGroupId?: string(name='ResourceGroupId'),
  funcId?: string(name='FuncId'),
  funcFilter?: string(name='FuncFilter'),
}

model DescribeDcdnIpaUserDomainsResponseBody = {
  requestId?: string(name='RequestId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  totalCount?: long(name='TotalCount'),
  domains?: {
    pageData?: [ 
    {
      gmtCreated?: string(name='GmtCreated'),
      description?: string(name='Description'),
      SSLProtocol?: string(name='SSLProtocol'),
      resourceGroupId?: string(name='ResourceGroupId'),
      sandbox?: string(name='Sandbox'),
      domainStatus?: string(name='DomainStatus'),
      cname?: string(name='Cname'),
      gmtModified?: string(name='GmtModified'),
      domainName?: string(name='DomainName'),
      sources?: {
        source?: [ 
        {
          type?: string(name='Type'),
          weight?: string(name='Weight'),
          priority?: string(name='Priority'),
          port?: int32(name='Port'),
          content?: string(name='Content'),
        }
      ](name='Source')
      }(name='Sources'),
    }
  ](name='PageData')
  }(name='Domains'),
}

model DescribeDcdnIpaUserDomainsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnIpaUserDomainsResponseBody(name='body'),
}

async function describeDcdnIpaUserDomainsWithOptions(request: DescribeDcdnIpaUserDomainsRequest, runtime: Util.RuntimeOptions): DescribeDcdnIpaUserDomainsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnIpaUserDomains', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnIpaUserDomains(request: DescribeDcdnIpaUserDomainsRequest): DescribeDcdnIpaUserDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnIpaUserDomainsWithOptions(request, runtime);
}

model DescribeDcdnIpInfoRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  IP?: string(name='IP'),
}

model DescribeDcdnIpInfoResponseBody = {
  requestId?: string(name='RequestId'),
  regionEname?: string(name='RegionEname'),
  region?: string(name='Region'),
  ispEname?: string(name='IspEname'),
  dcdnIp?: string(name='DcdnIp'),
  ISP?: string(name='ISP'),
}

model DescribeDcdnIpInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnIpInfoResponseBody(name='body'),
}

async function describeDcdnIpInfoWithOptions(request: DescribeDcdnIpInfoRequest, runtime: Util.RuntimeOptions): DescribeDcdnIpInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnIpInfo', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnIpInfo(request: DescribeDcdnIpInfoRequest): DescribeDcdnIpInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnIpInfoWithOptions(request, runtime);
}

model DescribeDcdnOfflineLogDeliveryRequest {
  ownerId?: long(name='OwnerId'),
}

model DescribeDcdnOfflineLogDeliveryResponseBody = {
  requestId?: string(name='RequestId'),
  fields?: [ string ](name='Fields'),
  domains?: [ 
    {
      domainName?: string(name='DomainName'),
    }
  ](name='Domains'),
  regions?: [ 
    {
      ossId?: int32(name='OssId'),
      ossPathPrefix?: string(name='OssPathPrefix'),
      regionId?: string(name='RegionId'),
      areaName?: string(name='AreaName'),
      dlaTableName?: string(name='DlaTableName'),
      dlaVcName?: string(name='DlaVcName'),
      dlaDbName?: string(name='DlaDbName'),
      regionName?: string(name='RegionName'),
      areaId?: string(name='AreaId'),
      isOverseas?: string(name='IsOverseas'),
      ossBucketName?: string(name='OssBucketName'),
      ossEndpoint?: string(name='OssEndpoint'),
    }
  ](name='Regions'),
}

model DescribeDcdnOfflineLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnOfflineLogDeliveryResponseBody(name='body'),
}

async function describeDcdnOfflineLogDeliveryWithOptions(request: DescribeDcdnOfflineLogDeliveryRequest, runtime: Util.RuntimeOptions): DescribeDcdnOfflineLogDeliveryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnOfflineLogDelivery', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnOfflineLogDelivery(request: DescribeDcdnOfflineLogDeliveryRequest): DescribeDcdnOfflineLogDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnOfflineLogDeliveryWithOptions(request, runtime);
}

model DescribeDcdnOfflineLogDeliveryFieldRequest {
  ownerId?: long(name='OwnerId'),
}

model DescribeDcdnOfflineLogDeliveryFieldResponseBody = {
  requestId?: string(name='RequestId'),
  fields?: [ 
    {
      description?: string(name='Description'),
      fieldId?: string(name='FieldId'),
      fieldName?: string(name='FieldName'),
    }
  ](name='Fields'),
}

model DescribeDcdnOfflineLogDeliveryFieldResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnOfflineLogDeliveryFieldResponseBody(name='body'),
}

async function describeDcdnOfflineLogDeliveryFieldWithOptions(request: DescribeDcdnOfflineLogDeliveryFieldRequest, runtime: Util.RuntimeOptions): DescribeDcdnOfflineLogDeliveryFieldResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnOfflineLogDeliveryField', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnOfflineLogDeliveryField(request: DescribeDcdnOfflineLogDeliveryFieldRequest): DescribeDcdnOfflineLogDeliveryFieldResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnOfflineLogDeliveryFieldWithOptions(request, runtime);
}

model DescribeDcdnOfflineLogDeliveryRegionsRequest {
  ownerId?: long(name='OwnerId'),
}

model DescribeDcdnOfflineLogDeliveryRegionsResponseBody = {
  requestId?: string(name='RequestId'),
  areas?: [ 
    {
      areaName?: string(name='AreaName'),
      areaId?: string(name='AreaId'),
      regionInfos?: [ 
        {
          isOverseas?: string(name='IsOverseas'),
          regionName?: string(name='RegionName'),
          ossEndpoint?: string(name='OssEndpoint'),
          regionId?: string(name='RegionId'),
        }
      ](name='RegionInfos'),
    }
  ](name='Areas'),
}

model DescribeDcdnOfflineLogDeliveryRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnOfflineLogDeliveryRegionsResponseBody(name='body'),
}

async function describeDcdnOfflineLogDeliveryRegionsWithOptions(request: DescribeDcdnOfflineLogDeliveryRegionsRequest, runtime: Util.RuntimeOptions): DescribeDcdnOfflineLogDeliveryRegionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnOfflineLogDeliveryRegions', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnOfflineLogDeliveryRegions(request: DescribeDcdnOfflineLogDeliveryRegionsRequest): DescribeDcdnOfflineLogDeliveryRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnOfflineLogDeliveryRegionsWithOptions(request, runtime);
}

model DescribeDcdnOfflineLogDeliveryStatusRequest {
  ownerId?: long(name='OwnerId'),
}

model DescribeDcdnOfflineLogDeliveryStatusResponseBody = {
  openStatus?: string(name='OpenStatus'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnOfflineLogDeliveryStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnOfflineLogDeliveryStatusResponseBody(name='body'),
}

async function describeDcdnOfflineLogDeliveryStatusWithOptions(request: DescribeDcdnOfflineLogDeliveryStatusRequest, runtime: Util.RuntimeOptions): DescribeDcdnOfflineLogDeliveryStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnOfflineLogDeliveryStatus', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnOfflineLogDeliveryStatus(request: DescribeDcdnOfflineLogDeliveryStatusRequest): DescribeDcdnOfflineLogDeliveryStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnOfflineLogDeliveryStatusWithOptions(request, runtime);
}

model DescribeDcdnRefreshQuotaRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeDcdnRefreshQuotaResponseBody = {
  blockQuota?: string(name='BlockQuota'),
  preloadRemain?: string(name='PreloadRemain'),
  requestId?: string(name='RequestId'),
  blockRemain?: string(name='blockRemain'),
  dirRemain?: string(name='DirRemain'),
  urlRemain?: string(name='UrlRemain'),
  dirQuota?: string(name='DirQuota'),
  urlQuota?: string(name='UrlQuota'),
  preloadQuota?: string(name='PreloadQuota'),
}

model DescribeDcdnRefreshQuotaResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnRefreshQuotaResponseBody(name='body'),
}

async function describeDcdnRefreshQuotaWithOptions(request: DescribeDcdnRefreshQuotaRequest, runtime: Util.RuntimeOptions): DescribeDcdnRefreshQuotaResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnRefreshQuota', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnRefreshQuota(request: DescribeDcdnRefreshQuotaRequest): DescribeDcdnRefreshQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnRefreshQuotaWithOptions(request, runtime);
}

model DescribeDcdnRefreshTaskByIdRequest {
  ownerId?: long(name='OwnerId'),
  taskId?: string(name='TaskId'),
}

model DescribeDcdnRefreshTaskByIdResponseBody = {
  totalCount?: long(name='TotalCount'),
  requestId?: string(name='RequestId'),
  tasks?: [ 
    {
      status?: string(name='Status'),
      creationTime?: string(name='CreationTime'),
      objectType?: string(name='ObjectType'),
      process?: string(name='Process'),
      description?: string(name='Description'),
      objectPath?: string(name='ObjectPath'),
      taskId?: string(name='TaskId'),
    }
  ](name='Tasks'),
}

model DescribeDcdnRefreshTaskByIdResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnRefreshTaskByIdResponseBody(name='body'),
}

async function describeDcdnRefreshTaskByIdWithOptions(request: DescribeDcdnRefreshTaskByIdRequest, runtime: Util.RuntimeOptions): DescribeDcdnRefreshTaskByIdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnRefreshTaskById', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnRefreshTaskById(request: DescribeDcdnRefreshTaskByIdRequest): DescribeDcdnRefreshTaskByIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnRefreshTaskByIdWithOptions(request, runtime);
}

model DescribeDcdnRefreshTasksRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  taskId?: string(name='TaskId'),
  objectPath?: string(name='ObjectPath'),
  pageNumber?: int32(name='PageNumber'),
  objectType?: string(name='ObjectType'),
  domainName?: string(name='DomainName'),
  status?: string(name='Status'),
  pageSize?: int32(name='PageSize'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeDcdnRefreshTasksResponseBody = {
  requestId?: string(name='RequestId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  totalCount?: long(name='TotalCount'),
  tasks?: {
    task?: [ 
    {
      status?: string(name='Status'),
      creationTime?: string(name='CreationTime'),
      objectType?: string(name='ObjectType'),
      process?: string(name='Process'),
      description?: string(name='Description'),
      objectPath?: string(name='ObjectPath'),
      taskId?: string(name='TaskId'),
    }
  ](name='Task')
  }(name='Tasks'),
}

model DescribeDcdnRefreshTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnRefreshTasksResponseBody(name='body'),
}

async function describeDcdnRefreshTasksWithOptions(request: DescribeDcdnRefreshTasksRequest, runtime: Util.RuntimeOptions): DescribeDcdnRefreshTasksResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnRefreshTasks', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnRefreshTasks(request: DescribeDcdnRefreshTasksRequest): DescribeDcdnRefreshTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnRefreshTasksWithOptions(request, runtime);
}

model DescribeDcdnRegionAndIspRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeDcdnRegionAndIspResponseBody = {
  requestId?: string(name='RequestId'),
  regions?: {
    region?: [ 
    {
      nameEn?: string(name='NameEn'),
      nameZh?: string(name='NameZh'),
    }
  ](name='Region')
  }(name='Regions'),
  isps?: {
    isp?: [ 
    {
      nameEn?: string(name='NameEn'),
      nameZh?: string(name='NameZh'),
    }
  ](name='Isp')
  }(name='Isps'),
}

model DescribeDcdnRegionAndIspResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnRegionAndIspResponseBody(name='body'),
}

async function describeDcdnRegionAndIspWithOptions(request: DescribeDcdnRegionAndIspRequest, runtime: Util.RuntimeOptions): DescribeDcdnRegionAndIspResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnRegionAndIsp', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnRegionAndIsp(request: DescribeDcdnRegionAndIspRequest): DescribeDcdnRegionAndIspResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnRegionAndIspWithOptions(request, runtime);
}

model DescribeDcdnReportRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  reportId?: long(name='ReportId'),
  area?: string(name='Area'),
  isOverseas?: string(name='IsOverseas'),
  httpCode?: string(name='HttpCode'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeDcdnReportResponseBody = {
  content?: string(name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnReportResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnReportResponseBody(name='body'),
}

async function describeDcdnReportWithOptions(request: DescribeDcdnReportRequest, runtime: Util.RuntimeOptions): DescribeDcdnReportResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnReport', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnReport(request: DescribeDcdnReportRequest): DescribeDcdnReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnReportWithOptions(request, runtime);
}

model DescribeDcdnReportListRequest {
  ownerId?: long(name='OwnerId'),
  reportId?: long(name='ReportId'),
  status?: string(name='Status'),
  permission?: string(name='Permission'),
}

model DescribeDcdnReportListResponseBody = {
  content?: string(name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnReportListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnReportListResponseBody(name='body'),
}

async function describeDcdnReportListWithOptions(request: DescribeDcdnReportListRequest, runtime: Util.RuntimeOptions): DescribeDcdnReportListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnReportList', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnReportList(request: DescribeDcdnReportListRequest): DescribeDcdnReportListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnReportListWithOptions(request, runtime);
}

model DescribeDcdnSecFuncInfoRequest {
  ownerId?: long(name='OwnerId'),
  secFuncType?: string(name='SecFuncType'),
  lang?: string(name='Lang'),
}

model DescribeDcdnSecFuncInfoResponseBody = {
  requestId?: string(name='RequestId'),
  description?: string(name='Description'),
  retCode?: string(name='RetCode'),
  httpStatus?: string(name='HttpStatus'),
  content?: [ 
    {
      label?: string(name='Label'),
      value?: string(name='Value'),
    }
  ](name='Content'),
}

model DescribeDcdnSecFuncInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnSecFuncInfoResponseBody(name='body'),
}

async function describeDcdnSecFuncInfoWithOptions(request: DescribeDcdnSecFuncInfoRequest, runtime: Util.RuntimeOptions): DescribeDcdnSecFuncInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnSecFuncInfo', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnSecFuncInfo(request: DescribeDcdnSecFuncInfoRequest): DescribeDcdnSecFuncInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnSecFuncInfoWithOptions(request, runtime);
}

model DescribeDcdnServiceRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeDcdnServiceResponseBody = {
  websocketChangingTime?: string(name='WebsocketChangingTime'),
  websocketChangingType?: string(name='WebsocketChangingType'),
  changingAffectTime?: string(name='ChangingAffectTime'),
  changingChargeType?: string(name='ChangingChargeType'),
  requestId?: string(name='RequestId'),
  openingTime?: string(name='OpeningTime'),
  internetChargeType?: string(name='InternetChargeType'),
  websocketType?: string(name='WebsocketType'),
  instanceId?: string(name='InstanceId'),
  operationLocks?: {
    lockReason?: [ 
    {
      lockReason?: string(name='LockReason'),
    }
  ](name='LockReason')
  }(name='OperationLocks'),
}

model DescribeDcdnServiceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnServiceResponseBody(name='body'),
}

async function describeDcdnServiceWithOptions(request: DescribeDcdnServiceRequest, runtime: Util.RuntimeOptions): DescribeDcdnServiceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnService', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnService(request: DescribeDcdnServiceRequest): DescribeDcdnServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnServiceWithOptions(request, runtime);
}

model DescribeDcdnStagingIpRequest {
  ownerId?: long(name='OwnerId'),
}

model DescribeDcdnStagingIpResponseBody = {
  requestId?: string(name='RequestId'),
  IPV4s?: {
    IPV4?: [ string ](name='IPV4')
  }(name='IPV4s'),
}

model DescribeDcdnStagingIpResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnStagingIpResponseBody(name='body'),
}

async function describeDcdnStagingIpWithOptions(request: DescribeDcdnStagingIpRequest, runtime: Util.RuntimeOptions): DescribeDcdnStagingIpResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnStagingIp', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnStagingIp(request: DescribeDcdnStagingIpRequest): DescribeDcdnStagingIpResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnStagingIpWithOptions(request, runtime);
}

model DescribeDcdnSubListRequest {
  ownerId?: long(name='OwnerId'),
  status?: string(name='Status'),
}

model DescribeDcdnSubListResponseBody = {
  content?: string(name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnSubListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnSubListResponseBody(name='body'),
}

async function describeDcdnSubListWithOptions(request: DescribeDcdnSubListRequest, runtime: Util.RuntimeOptions): DescribeDcdnSubListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnSubList', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnSubList(request: DescribeDcdnSubListRequest): DescribeDcdnSubListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnSubListWithOptions(request, runtime);
}

model DescribeDcdnTagResourcesRequest {
  ownerId?: long(name='OwnerId'),
  resourceType?: string(name='ResourceType'),
  resourceId?: [ string ](name='ResourceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeDcdnTagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId'),
      tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag'),
    }
  ](name='TagResources'),
}

model DescribeDcdnTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnTagResourcesResponseBody(name='body'),
}

async function describeDcdnTagResourcesWithOptions(request: DescribeDcdnTagResourcesRequest, runtime: Util.RuntimeOptions): DescribeDcdnTagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnTagResources', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnTagResources(request: DescribeDcdnTagResourcesRequest): DescribeDcdnTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnTagResourcesWithOptions(request, runtime);
}

model DescribeDcdnTopDomainsByFlowRequest {
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  limit?: long(name='Limit'),
}

model DescribeDcdnTopDomainsByFlowResponseBody = {
  domainOnlineCount?: long(name='DomainOnlineCount'),
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  domainCount?: long(name='DomainCount'),
  topDomains?: {
    topDomain?: [ 
    {
      maxBps?: long(name='MaxBps'),
      rank?: long(name='Rank'),
      totalAccess?: long(name='TotalAccess'),
      trafficPercent?: string(name='TrafficPercent'),
      domainName?: string(name='DomainName'),
      totalTraffic?: string(name='TotalTraffic'),
      maxBpsTime?: string(name='MaxBpsTime'),
    }
  ](name='TopDomain')
  }(name='TopDomains'),
}

model DescribeDcdnTopDomainsByFlowResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnTopDomainsByFlowResponseBody(name='body'),
}

async function describeDcdnTopDomainsByFlowWithOptions(request: DescribeDcdnTopDomainsByFlowRequest, runtime: Util.RuntimeOptions): DescribeDcdnTopDomainsByFlowResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnTopDomainsByFlow', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnTopDomainsByFlow(request: DescribeDcdnTopDomainsByFlowRequest): DescribeDcdnTopDomainsByFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnTopDomainsByFlowWithOptions(request, runtime);
}

model DescribeDcdnUserBillHistoryRequest {
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeDcdnUserBillHistoryResponseBody = {
  requestId?: string(name='RequestId'),
  billHistoryData?: {
    billHistoryDataItem?: [ 
    {
      dimension?: string(name='Dimension'),
      billType?: string(name='BillType'),
      billTime?: string(name='BillTime'),
      billingData?: {
        billingDataItem?: [ 
        {
          flow?: float(name='Flow'),
          bandwidth?: float(name='Bandwidth'),
          count?: float(name='Count'),
          cdnRegion?: string(name='CdnRegion'),
          chargeType?: string(name='ChargeType'),
        }
      ](name='BillingDataItem')
      }(name='BillingData'),
    }
  ](name='BillHistoryDataItem')
  }(name='BillHistoryData'),
}

model DescribeDcdnUserBillHistoryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnUserBillHistoryResponseBody(name='body'),
}

async function describeDcdnUserBillHistoryWithOptions(request: DescribeDcdnUserBillHistoryRequest, runtime: Util.RuntimeOptions): DescribeDcdnUserBillHistoryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnUserBillHistory', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnUserBillHistory(request: DescribeDcdnUserBillHistoryRequest): DescribeDcdnUserBillHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnUserBillHistoryWithOptions(request, runtime);
}

model DescribeDcdnUserBillTypeRequest {
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeDcdnUserBillTypeResponseBody = {
  requestId?: string(name='RequestId'),
  billTypeData?: {
    billTypeDataItem?: [ 
    {
      endTime?: string(name='EndTime'),
      startTime?: string(name='StartTime'),
      billingCycle?: string(name='BillingCycle'),
      product?: string(name='Product'),
      billType?: string(name='BillType'),
      dimension?: string(name='Dimension'),
    }
  ](name='BillTypeDataItem')
  }(name='BillTypeData'),
}

model DescribeDcdnUserBillTypeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnUserBillTypeResponseBody(name='body'),
}

async function describeDcdnUserBillTypeWithOptions(request: DescribeDcdnUserBillTypeRequest, runtime: Util.RuntimeOptions): DescribeDcdnUserBillTypeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnUserBillType', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnUserBillType(request: DescribeDcdnUserBillTypeRequest): DescribeDcdnUserBillTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnUserBillTypeWithOptions(request, runtime);
}

model DescribeDcdnUserDomainsRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  domainName?: string(name='DomainName'),
  domainStatus?: string(name='DomainStatus'),
  domainSearchType?: string(name='DomainSearchType'),
  checkDomainShow?: boolean(name='CheckDomainShow'),
  resourceGroupId?: string(name='ResourceGroupId'),
  changeStartTime?: string(name='ChangeStartTime'),
  changeEndTime?: string(name='ChangeEndTime'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeDcdnUserDomainsResponseBody = {
  requestId?: string(name='RequestId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  totalCount?: long(name='TotalCount'),
  domains?: {
    pageData?: [ 
    {
      gmtCreated?: string(name='GmtCreated'),
      description?: string(name='Description'),
      SSLProtocol?: string(name='SSLProtocol'),
      resourceGroupId?: string(name='ResourceGroupId'),
      sandbox?: string(name='Sandbox'),
      domainStatus?: string(name='DomainStatus'),
      cname?: string(name='Cname'),
      gmtModified?: string(name='GmtModified'),
      domainName?: string(name='DomainName'),
      sources?: {
        source?: [ 
        {
          type?: string(name='Type'),
          weight?: string(name='Weight'),
          priority?: string(name='Priority'),
          port?: int32(name='Port'),
          content?: string(name='Content'),
        }
      ](name='Source')
      }(name='Sources'),
    }
  ](name='PageData')
  }(name='Domains'),
}

model DescribeDcdnUserDomainsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnUserDomainsResponseBody(name='body'),
}

async function describeDcdnUserDomainsWithOptions(request: DescribeDcdnUserDomainsRequest, runtime: Util.RuntimeOptions): DescribeDcdnUserDomainsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnUserDomains', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnUserDomains(request: DescribeDcdnUserDomainsRequest): DescribeDcdnUserDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnUserDomainsWithOptions(request, runtime);
}

model DescribeDcdnUserDomainsByFuncRequest {
  ownerId?: long(name='OwnerId'),
  funcId?: int32(name='FuncId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeDcdnUserDomainsByFuncResponseBody = {
  requestId?: string(name='RequestId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  totalCount?: long(name='TotalCount'),
  domains?: {
    pageData?: [ 
    {
      gmtCreated?: string(name='GmtCreated'),
      sslProtocol?: string(name='SslProtocol'),
      description?: string(name='Description'),
      resourceGroupId?: string(name='ResourceGroupId'),
      sandbox?: string(name='Sandbox'),
      domainStatus?: string(name='DomainStatus'),
      cname?: string(name='Cname'),
      gmtModified?: string(name='GmtModified'),
      cdnType?: string(name='CdnType'),
      domainName?: string(name='DomainName'),
      sources?: {
        source?: [ 
        {
          type?: string(name='Type'),
          weight?: string(name='Weight'),
          priority?: string(name='Priority'),
          port?: int32(name='Port'),
          content?: string(name='Content'),
        }
      ](name='Source')
      }(name='Sources'),
    }
  ](name='PageData')
  }(name='Domains'),
}

model DescribeDcdnUserDomainsByFuncResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnUserDomainsByFuncResponseBody(name='body'),
}

async function describeDcdnUserDomainsByFuncWithOptions(request: DescribeDcdnUserDomainsByFuncRequest, runtime: Util.RuntimeOptions): DescribeDcdnUserDomainsByFuncResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnUserDomainsByFunc', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnUserDomainsByFunc(request: DescribeDcdnUserDomainsByFuncRequest): DescribeDcdnUserDomainsByFuncResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnUserDomainsByFuncWithOptions(request, runtime);
}

model DescribeDcdnUserQuotaRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeDcdnUserQuotaResponseBody = {
  blockQuota?: int32(name='BlockQuota'),
  refreshUrlRemain?: int32(name='RefreshUrlRemain'),
  domainQuota?: int32(name='DomainQuota'),
  blockRemain?: int32(name='BlockRemain'),
  preloadRemain?: int32(name='PreloadRemain'),
  requestId?: string(name='RequestId'),
  refreshUrlQuota?: int32(name='RefreshUrlQuota'),
  preloadQuota?: int32(name='PreloadQuota'),
  refreshDirQuota?: int32(name='RefreshDirQuota'),
  refreshDirRemain?: int32(name='RefreshDirRemain'),
}

model DescribeDcdnUserQuotaResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnUserQuotaResponseBody(name='body'),
}

async function describeDcdnUserQuotaWithOptions(request: DescribeDcdnUserQuotaRequest, runtime: Util.RuntimeOptions): DescribeDcdnUserQuotaResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnUserQuota', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnUserQuota(request: DescribeDcdnUserQuotaRequest): DescribeDcdnUserQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnUserQuotaWithOptions(request, runtime);
}

model DescribeDcdnUserResourcePackageRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeDcdnUserResourcePackageResponseBody = {
  requestId?: string(name='RequestId'),
  resourcePackageInfos?: {
    resourcePackageInfo?: [ 
    {
      endTime?: string(name='EndTime'),
      status?: string(name='Status'),
      displayName?: string(name='DisplayName'),
      startTime?: string(name='StartTime'),
      commodityCode?: string(name='CommodityCode'),
      currCapacity?: string(name='CurrCapacity'),
      initCapacity?: string(name='InitCapacity'),
      instanceId?: string(name='InstanceId'),
      templateName?: string(name='TemplateName'),
    }
  ](name='ResourcePackageInfo')
  }(name='ResourcePackageInfos'),
}

model DescribeDcdnUserResourcePackageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnUserResourcePackageResponseBody(name='body'),
}

async function describeDcdnUserResourcePackageWithOptions(request: DescribeDcdnUserResourcePackageRequest, runtime: Util.RuntimeOptions): DescribeDcdnUserResourcePackageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnUserResourcePackage', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnUserResourcePackage(request: DescribeDcdnUserResourcePackageRequest): DescribeDcdnUserResourcePackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnUserResourcePackageWithOptions(request, runtime);
}

model DescribeDcdnUserSecDropRequest {
  ownerId?: long(name='OwnerId'),
  data?: string(name='Data'),
  secFunc?: string(name='SecFunc'),
  metric?: string(name='Metric'),
}

model DescribeDcdnUserSecDropResponseBody = {
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  drops?: int32(name='Drops'),
  uuidStr?: string(name='UuidStr'),
}

model DescribeDcdnUserSecDropResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnUserSecDropResponseBody(name='body'),
}

async function describeDcdnUserSecDropWithOptions(request: DescribeDcdnUserSecDropRequest, runtime: Util.RuntimeOptions): DescribeDcdnUserSecDropResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnUserSecDrop', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnUserSecDrop(request: DescribeDcdnUserSecDropRequest): DescribeDcdnUserSecDropResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnUserSecDropWithOptions(request, runtime);
}

model DescribeDcdnUserSecDropByMinuteRequest {
  ownerId?: long(name='OwnerId'),
  secFunc?: string(name='SecFunc'),
  ruleName?: string(name='RuleName'),
  object?: string(name='Object'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageSize?: long(name='PageSize'),
  pageNumber?: long(name='PageNumber'),
  lang?: string(name='Lang'),
}

model DescribeDcdnUserSecDropByMinuteResponseBody = {
  requestId?: string(name='RequestId'),
  description?: string(name='Description'),
  len?: int32(name='Len'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  rows?: [ 
    {
      domain?: string(name='Domain'),
      tmStr?: string(name='TmStr'),
      drops?: int32(name='Drops'),
      object?: string(name='Object'),
      secFunc?: string(name='SecFunc'),
      ruleName?: string(name='RuleName'),
    }
  ](name='Rows'),
}

model DescribeDcdnUserSecDropByMinuteResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnUserSecDropByMinuteResponseBody(name='body'),
}

async function describeDcdnUserSecDropByMinuteWithOptions(request: DescribeDcdnUserSecDropByMinuteRequest, runtime: Util.RuntimeOptions): DescribeDcdnUserSecDropByMinuteResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnUserSecDropByMinute', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnUserSecDropByMinute(request: DescribeDcdnUserSecDropByMinuteRequest): DescribeDcdnUserSecDropByMinuteResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnUserSecDropByMinuteWithOptions(request, runtime);
}

model DescribeDcdnUserTagsRequest {
  ownerId?: long(name='OwnerId'),
}

model DescribeDcdnUserTagsResponseBody = {
  requestId?: string(name='RequestId'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: [ string ](name='Value'),
    }
  ](name='Tags'),
}

model DescribeDcdnUserTagsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnUserTagsResponseBody(name='body'),
}

async function describeDcdnUserTagsWithOptions(request: DescribeDcdnUserTagsRequest, runtime: Util.RuntimeOptions): DescribeDcdnUserTagsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnUserTags', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnUserTags(request: DescribeDcdnUserTagsRequest): DescribeDcdnUserTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnUserTagsWithOptions(request, runtime);
}

model DescribeDcdnVerifyContentRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
}

model DescribeDcdnVerifyContentResponseBody = {
  content?: string(name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnVerifyContentResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnVerifyContentResponseBody(name='body'),
}

async function describeDcdnVerifyContentWithOptions(request: DescribeDcdnVerifyContentRequest, runtime: Util.RuntimeOptions): DescribeDcdnVerifyContentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnVerifyContent', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnVerifyContent(request: DescribeDcdnVerifyContentRequest): DescribeDcdnVerifyContentResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnVerifyContentWithOptions(request, runtime);
}

model DescribeDcdnWafDomainRequest {
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  domainName?: string(name='DomainName'),
}

model DescribeDcdnWafDomainResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  outPutDomains?: [ 
    {
      aclStatus?: int32(name='AclStatus'),
      status?: int32(name='Status'),
      domain?: string(name='Domain'),
      ccStatus?: int32(name='CcStatus'),
      wafStatus?: int32(name='WafStatus'),
    }
  ](name='OutPutDomains'),
}

model DescribeDcdnWafDomainResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnWafDomainResponseBody(name='body'),
}

async function describeDcdnWafDomainWithOptions(request: DescribeDcdnWafDomainRequest, runtime: Util.RuntimeOptions): DescribeDcdnWafDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDcdnWafDomain', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDcdnWafDomain(request: DescribeDcdnWafDomainRequest): DescribeDcdnWafDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnWafDomainWithOptions(request, runtime);
}

model DescribeRoutineRequest {
  ownerId?: long(name='OwnerId'),
  name?: string(name='Name'),
}

model DescribeRoutineResponseBody = {
  content?: map[string]any(name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeRoutineResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRoutineResponseBody(name='body'),
}

async function describeRoutineWithOptions(request: DescribeRoutineRequest, runtime: Util.RuntimeOptions): DescribeRoutineResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRoutine', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRoutine(request: DescribeRoutineRequest): DescribeRoutineResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRoutineWithOptions(request, runtime);
}

model DescribeRoutineCanaryEnvsRequest {
  ownerId?: long(name='OwnerId'),
}

model DescribeRoutineCanaryEnvsResponseBody = {
  content?: map[string]any(name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeRoutineCanaryEnvsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRoutineCanaryEnvsResponseBody(name='body'),
}

async function describeRoutineCanaryEnvsWithOptions(request: DescribeRoutineCanaryEnvsRequest, runtime: Util.RuntimeOptions): DescribeRoutineCanaryEnvsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRoutineCanaryEnvs', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRoutineCanaryEnvs(request: DescribeRoutineCanaryEnvsRequest): DescribeRoutineCanaryEnvsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRoutineCanaryEnvsWithOptions(request, runtime);
}

model DescribeRoutineCodeRevisionRequest {
  ownerId?: long(name='OwnerId'),
  name?: string(name='Name'),
  selectCodeRevision?: string(name='SelectCodeRevision'),
}

model DescribeRoutineCodeRevisionResponseBody = {
  content?: map[string]any(name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeRoutineCodeRevisionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRoutineCodeRevisionResponseBody(name='body'),
}

async function describeRoutineCodeRevisionWithOptions(request: DescribeRoutineCodeRevisionRequest, runtime: Util.RuntimeOptions): DescribeRoutineCodeRevisionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRoutineCodeRevision', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRoutineCodeRevision(request: DescribeRoutineCodeRevisionRequest): DescribeRoutineCodeRevisionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRoutineCodeRevisionWithOptions(request, runtime);
}

model DescribeRoutineSpecRequest {
  ownerId?: long(name='OwnerId'),
}

model DescribeRoutineSpecResponseBody = {
  content?: map[string]any(name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeRoutineSpecResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRoutineSpecResponseBody(name='body'),
}

async function describeRoutineSpecWithOptions(request: DescribeRoutineSpecRequest, runtime: Util.RuntimeOptions): DescribeRoutineSpecResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRoutineSpec', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRoutineSpec(request: DescribeRoutineSpecRequest): DescribeRoutineSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRoutineSpecWithOptions(request, runtime);
}

model DescribeRoutineUserInfoRequest {
  ownerId?: long(name='OwnerId'),
}

model DescribeRoutineUserInfoResponseBody = {
  content?: map[string]any(name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeRoutineUserInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRoutineUserInfoResponseBody(name='body'),
}

async function describeRoutineUserInfoWithOptions(request: DescribeRoutineUserInfoRequest, runtime: Util.RuntimeOptions): DescribeRoutineUserInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRoutineUserInfo', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRoutineUserInfo(request: DescribeRoutineUserInfoRequest): DescribeRoutineUserInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRoutineUserInfoWithOptions(request, runtime);
}

model DescribeUserDcdnIpaStatusRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeUserDcdnIpaStatusResponseBody = {
  inDebt?: boolean(name='InDebt'),
  onService?: boolean(name='OnService'),
  requestId?: string(name='RequestId'),
  inDebtOverdue?: boolean(name='InDebtOverdue'),
  enabled?: boolean(name='Enabled'),
}

model DescribeUserDcdnIpaStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserDcdnIpaStatusResponseBody(name='body'),
}

async function describeUserDcdnIpaStatusWithOptions(request: DescribeUserDcdnIpaStatusRequest, runtime: Util.RuntimeOptions): DescribeUserDcdnIpaStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeUserDcdnIpaStatus', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeUserDcdnIpaStatus(request: DescribeUserDcdnIpaStatusRequest): DescribeUserDcdnIpaStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserDcdnIpaStatusWithOptions(request, runtime);
}

model DescribeUserDcdnStatusRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeUserDcdnStatusResponseBody = {
  inDebt?: boolean(name='InDebt'),
  onService?: boolean(name='OnService'),
  requestId?: string(name='RequestId'),
  inDebtOverdue?: boolean(name='InDebtOverdue'),
  enabled?: boolean(name='Enabled'),
}

model DescribeUserDcdnStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserDcdnStatusResponseBody(name='body'),
}

async function describeUserDcdnStatusWithOptions(request: DescribeUserDcdnStatusRequest, runtime: Util.RuntimeOptions): DescribeUserDcdnStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeUserDcdnStatus', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeUserDcdnStatus(request: DescribeUserDcdnStatusRequest): DescribeUserDcdnStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserDcdnStatusWithOptions(request, runtime);
}

model DescribeUserErStatusRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeUserErStatusResponseBody = {
  inDebt?: boolean(name='InDebt'),
  onService?: boolean(name='OnService'),
  requestId?: string(name='RequestId'),
  inDebtOverdue?: boolean(name='InDebtOverdue'),
  enabled?: boolean(name='Enabled'),
}

model DescribeUserErStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserErStatusResponseBody(name='body'),
}

async function describeUserErStatusWithOptions(request: DescribeUserErStatusRequest, runtime: Util.RuntimeOptions): DescribeUserErStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeUserErStatus', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeUserErStatus(request: DescribeUserErStatusRequest): DescribeUserErStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserErStatusWithOptions(request, runtime);
}

model DescribeUserLogserviceStatusRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeUserLogserviceStatusResponseBody = {
  inDebt?: boolean(name='InDebt'),
  onService?: boolean(name='OnService'),
  requestId?: string(name='RequestId'),
  inDebtOverdue?: boolean(name='InDebtOverdue'),
  enabled?: boolean(name='Enabled'),
}

model DescribeUserLogserviceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserLogserviceStatusResponseBody(name='body'),
}

async function describeUserLogserviceStatusWithOptions(request: DescribeUserLogserviceStatusRequest, runtime: Util.RuntimeOptions): DescribeUserLogserviceStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeUserLogserviceStatus', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeUserLogserviceStatus(request: DescribeUserLogserviceStatusRequest): DescribeUserLogserviceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserLogserviceStatusWithOptions(request, runtime);
}

model DisableDcdnDomainOfflineLogDeliveryRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
}

model DisableDcdnDomainOfflineLogDeliveryResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableDcdnDomainOfflineLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  body: DisableDcdnDomainOfflineLogDeliveryResponseBody(name='body'),
}

async function disableDcdnDomainOfflineLogDeliveryWithOptions(request: DisableDcdnDomainOfflineLogDeliveryRequest, runtime: Util.RuntimeOptions): DisableDcdnDomainOfflineLogDeliveryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DisableDcdnDomainOfflineLogDelivery', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function disableDcdnDomainOfflineLogDelivery(request: DisableDcdnDomainOfflineLogDeliveryRequest): DisableDcdnDomainOfflineLogDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableDcdnDomainOfflineLogDeliveryWithOptions(request, runtime);
}

model DisableDcdnOfflineLogDeliveryRequest {
  ownerId?: long(name='OwnerId'),
}

model DisableDcdnOfflineLogDeliveryResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableDcdnOfflineLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  body: DisableDcdnOfflineLogDeliveryResponseBody(name='body'),
}

async function disableDcdnOfflineLogDeliveryWithOptions(request: DisableDcdnOfflineLogDeliveryRequest, runtime: Util.RuntimeOptions): DisableDcdnOfflineLogDeliveryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DisableDcdnOfflineLogDelivery', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function disableDcdnOfflineLogDelivery(request: DisableDcdnOfflineLogDeliveryRequest): DisableDcdnOfflineLogDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableDcdnOfflineLogDeliveryWithOptions(request, runtime);
}

model EditRoutineConfRequest {
  ownerId?: long(name='OwnerId'),
  name?: string(name='Name'),
  description?: string(name='Description'),
  envConf?: map[string]any(name='EnvConf'),
}

model EditRoutineConfShrinkRequest {
  ownerId?: long(name='OwnerId'),
  name?: string(name='Name'),
  description?: string(name='Description'),
  envConfShrink?: string(name='EnvConf'),
}

model EditRoutineConfResponseBody = {
  content?: map[string]any(name='Content'),
  requestId?: string(name='RequestId'),
}

model EditRoutineConfResponse = {
  headers: map[string]string(name='headers'),
  body: EditRoutineConfResponseBody(name='body'),
}

async function editRoutineConfWithOptions(tmpReq: EditRoutineConfRequest, runtime: Util.RuntimeOptions): EditRoutineConfResponse {
  Util.validateModel(tmpReq);
  var request = new EditRoutineConfShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.envConf)) {
    request.envConfShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.envConf, 'EnvConf', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('EditRoutineConf', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function editRoutineConf(request: EditRoutineConfRequest): EditRoutineConfResponse {
  var runtime = new Util.RuntimeOptions{};
  return editRoutineConfWithOptions(request, runtime);
}

model EnableDcdnDomainOfflineLogDeliveryRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
}

model EnableDcdnDomainOfflineLogDeliveryResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnableDcdnDomainOfflineLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  body: EnableDcdnDomainOfflineLogDeliveryResponseBody(name='body'),
}

async function enableDcdnDomainOfflineLogDeliveryWithOptions(request: EnableDcdnDomainOfflineLogDeliveryRequest, runtime: Util.RuntimeOptions): EnableDcdnDomainOfflineLogDeliveryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('EnableDcdnDomainOfflineLogDelivery', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function enableDcdnDomainOfflineLogDelivery(request: EnableDcdnDomainOfflineLogDeliveryRequest): EnableDcdnDomainOfflineLogDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableDcdnDomainOfflineLogDeliveryWithOptions(request, runtime);
}

model ModifyDCdnDomainSchdmByPropertyRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  property?: string(name='Property'),
}

model ModifyDCdnDomainSchdmByPropertyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDCdnDomainSchdmByPropertyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDCdnDomainSchdmByPropertyResponseBody(name='body'),
}

async function modifyDCdnDomainSchdmByPropertyWithOptions(request: ModifyDCdnDomainSchdmByPropertyRequest, runtime: Util.RuntimeOptions): ModifyDCdnDomainSchdmByPropertyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDCdnDomainSchdmByProperty', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDCdnDomainSchdmByProperty(request: ModifyDCdnDomainSchdmByPropertyRequest): ModifyDCdnDomainSchdmByPropertyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDCdnDomainSchdmByPropertyWithOptions(request, runtime);
}

model OpenDcdnServiceRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  billType?: string(name='BillType'),
  websocketBillType?: string(name='WebsocketBillType'),
}

model OpenDcdnServiceResponseBody = {
  requestId?: string(name='RequestId'),
}

model OpenDcdnServiceResponse = {
  headers: map[string]string(name='headers'),
  body: OpenDcdnServiceResponseBody(name='body'),
}

async function openDcdnServiceWithOptions(request: OpenDcdnServiceRequest, runtime: Util.RuntimeOptions): OpenDcdnServiceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OpenDcdnService', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function openDcdnService(request: OpenDcdnServiceRequest): OpenDcdnServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return openDcdnServiceWithOptions(request, runtime);
}

model PreloadDcdnObjectCachesRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  objectPath?: string(name='ObjectPath'),
  area?: string(name='Area'),
}

model PreloadDcdnObjectCachesResponseBody = {
  preloadTaskId?: string(name='PreloadTaskId'),
  requestId?: string(name='RequestId'),
}

model PreloadDcdnObjectCachesResponse = {
  headers: map[string]string(name='headers'),
  body: PreloadDcdnObjectCachesResponseBody(name='body'),
}

async function preloadDcdnObjectCachesWithOptions(request: PreloadDcdnObjectCachesRequest, runtime: Util.RuntimeOptions): PreloadDcdnObjectCachesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PreloadDcdnObjectCaches', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function preloadDcdnObjectCaches(request: PreloadDcdnObjectCachesRequest): PreloadDcdnObjectCachesResponse {
  var runtime = new Util.RuntimeOptions{};
  return preloadDcdnObjectCachesWithOptions(request, runtime);
}

model PublishDcdnStagingConfigToProductionRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  functionName?: string(name='FunctionName'),
}

model PublishDcdnStagingConfigToProductionResponseBody = {
  requestId?: string(name='RequestId'),
}

model PublishDcdnStagingConfigToProductionResponse = {
  headers: map[string]string(name='headers'),
  body: PublishDcdnStagingConfigToProductionResponseBody(name='body'),
}

async function publishDcdnStagingConfigToProductionWithOptions(request: PublishDcdnStagingConfigToProductionRequest, runtime: Util.RuntimeOptions): PublishDcdnStagingConfigToProductionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PublishDcdnStagingConfigToProduction', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function publishDcdnStagingConfigToProduction(request: PublishDcdnStagingConfigToProductionRequest): PublishDcdnStagingConfigToProductionResponse {
  var runtime = new Util.RuntimeOptions{};
  return publishDcdnStagingConfigToProductionWithOptions(request, runtime);
}

model PublishRoutineCodeRevisionRequest {
  ownerId?: long(name='OwnerId'),
  name?: string(name='Name'),
  selectCodeRevision?: string(name='SelectCodeRevision'),
  envs?: map[string]any(name='Envs'),
}

model PublishRoutineCodeRevisionShrinkRequest {
  ownerId?: long(name='OwnerId'),
  name?: string(name='Name'),
  selectCodeRevision?: string(name='SelectCodeRevision'),
  envsShrink?: string(name='Envs'),
}

model PublishRoutineCodeRevisionResponseBody = {
  content?: map[string]any(name='Content'),
  requestId?: string(name='RequestId'),
}

model PublishRoutineCodeRevisionResponse = {
  headers: map[string]string(name='headers'),
  body: PublishRoutineCodeRevisionResponseBody(name='body'),
}

async function publishRoutineCodeRevisionWithOptions(tmpReq: PublishRoutineCodeRevisionRequest, runtime: Util.RuntimeOptions): PublishRoutineCodeRevisionResponse {
  Util.validateModel(tmpReq);
  var request = new PublishRoutineCodeRevisionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.envs)) {
    request.envsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.envs, 'Envs', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PublishRoutineCodeRevision', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function publishRoutineCodeRevision(request: PublishRoutineCodeRevisionRequest): PublishRoutineCodeRevisionResponse {
  var runtime = new Util.RuntimeOptions{};
  return publishRoutineCodeRevisionWithOptions(request, runtime);
}

model RefreshDcdnObjectCachesRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  objectPath?: string(name='ObjectPath'),
  objectType?: string(name='ObjectType'),
}

model RefreshDcdnObjectCachesResponseBody = {
  refreshTaskId?: string(name='RefreshTaskId'),
  requestId?: string(name='RequestId'),
}

model RefreshDcdnObjectCachesResponse = {
  headers: map[string]string(name='headers'),
  body: RefreshDcdnObjectCachesResponseBody(name='body'),
}

async function refreshDcdnObjectCachesWithOptions(request: RefreshDcdnObjectCachesRequest, runtime: Util.RuntimeOptions): RefreshDcdnObjectCachesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RefreshDcdnObjectCaches', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function refreshDcdnObjectCaches(request: RefreshDcdnObjectCachesRequest): RefreshDcdnObjectCachesResponse {
  var runtime = new Util.RuntimeOptions{};
  return refreshDcdnObjectCachesWithOptions(request, runtime);
}

model RollbackDcdnStagingConfigRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
}

model RollbackDcdnStagingConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model RollbackDcdnStagingConfigResponse = {
  headers: map[string]string(name='headers'),
  body: RollbackDcdnStagingConfigResponseBody(name='body'),
}

async function rollbackDcdnStagingConfigWithOptions(request: RollbackDcdnStagingConfigRequest, runtime: Util.RuntimeOptions): RollbackDcdnStagingConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RollbackDcdnStagingConfig', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function rollbackDcdnStagingConfig(request: RollbackDcdnStagingConfigRequest): RollbackDcdnStagingConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return rollbackDcdnStagingConfigWithOptions(request, runtime);
}

model SetDcdnConfigOfVersionRequest {
  ownerId?: long(name='OwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  securityToken?: string(name='SecurityToken'),
  versionId?: string(name='VersionId'),
  configId?: string(name='ConfigId'),
  functionId?: long(name='FunctionId'),
  functionName?: string(name='FunctionName'),
  functionArgs?: string(name='FunctionArgs'),
}

model SetDcdnConfigOfVersionResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetDcdnConfigOfVersionResponse = {
  headers: map[string]string(name='headers'),
  body: SetDcdnConfigOfVersionResponseBody(name='body'),
}

async function setDcdnConfigOfVersionWithOptions(request: SetDcdnConfigOfVersionRequest, runtime: Util.RuntimeOptions): SetDcdnConfigOfVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetDcdnConfigOfVersion', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setDcdnConfigOfVersion(request: SetDcdnConfigOfVersionRequest): SetDcdnConfigOfVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDcdnConfigOfVersionWithOptions(request, runtime);
}

model SetDcdnDomainCertificateRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
  certName?: string(name='CertName'),
  certType?: string(name='CertType'),
  SSLProtocol?: string(name='SSLProtocol'),
  SSLPub?: string(name='SSLPub'),
  SSLPri?: string(name='SSLPri'),
  region?: string(name='Region'),
  forceSet?: string(name='ForceSet'),
}

model SetDcdnDomainCertificateResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetDcdnDomainCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: SetDcdnDomainCertificateResponseBody(name='body'),
}

async function setDcdnDomainCertificateWithOptions(request: SetDcdnDomainCertificateRequest, runtime: Util.RuntimeOptions): SetDcdnDomainCertificateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetDcdnDomainCertificate', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setDcdnDomainCertificate(request: SetDcdnDomainCertificateRequest): SetDcdnDomainCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDcdnDomainCertificateWithOptions(request, runtime);
}

model SetDcdnDomainCSRCertificateRequest {
  ownerId?: long(name='OwnerId'),
  serverCertificate?: string(name='ServerCertificate'),
  domainName?: string(name='DomainName'),
}

model SetDcdnDomainCSRCertificateResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetDcdnDomainCSRCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: SetDcdnDomainCSRCertificateResponseBody(name='body'),
}

async function setDcdnDomainCSRCertificateWithOptions(request: SetDcdnDomainCSRCertificateRequest, runtime: Util.RuntimeOptions): SetDcdnDomainCSRCertificateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetDcdnDomainCSRCertificate', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setDcdnDomainCSRCertificate(request: SetDcdnDomainCSRCertificateRequest): SetDcdnDomainCSRCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDcdnDomainCSRCertificateWithOptions(request, runtime);
}

model SetDcdnDomainStagingConfigRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  functions?: string(name='Functions'),
}

model SetDcdnDomainStagingConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetDcdnDomainStagingConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetDcdnDomainStagingConfigResponseBody(name='body'),
}

async function setDcdnDomainStagingConfigWithOptions(request: SetDcdnDomainStagingConfigRequest, runtime: Util.RuntimeOptions): SetDcdnDomainStagingConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetDcdnDomainStagingConfig', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setDcdnDomainStagingConfig(request: SetDcdnDomainStagingConfigRequest): SetDcdnDomainStagingConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDcdnDomainStagingConfigWithOptions(request, runtime);
}

model SetRoutineSubdomainRequest {
  ownerId?: long(name='OwnerId'),
  subdomains?: map[string]any(name='Subdomains'),
}

model SetRoutineSubdomainShrinkRequest {
  ownerId?: long(name='OwnerId'),
  subdomainsShrink?: string(name='Subdomains'),
}

model SetRoutineSubdomainResponseBody = {
  content?: map[string]any(name='Content'),
  requestId?: string(name='RequestId'),
}

model SetRoutineSubdomainResponse = {
  headers: map[string]string(name='headers'),
  body: SetRoutineSubdomainResponseBody(name='body'),
}

async function setRoutineSubdomainWithOptions(tmpReq: SetRoutineSubdomainRequest, runtime: Util.RuntimeOptions): SetRoutineSubdomainResponse {
  Util.validateModel(tmpReq);
  var request = new SetRoutineSubdomainShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.subdomains)) {
    request.subdomainsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.subdomains, 'Subdomains', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetRoutineSubdomain', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setRoutineSubdomain(request: SetRoutineSubdomainRequest): SetRoutineSubdomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return setRoutineSubdomainWithOptions(request, runtime);
}

model StartDcdnDomainRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
}

model StartDcdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartDcdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: StartDcdnDomainResponseBody(name='body'),
}

async function startDcdnDomainWithOptions(request: StartDcdnDomainRequest, runtime: Util.RuntimeOptions): StartDcdnDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartDcdnDomain', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startDcdnDomain(request: StartDcdnDomainRequest): StartDcdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return startDcdnDomainWithOptions(request, runtime);
}

model StartDcdnIpaDomainRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
}

model StartDcdnIpaDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartDcdnIpaDomainResponse = {
  headers: map[string]string(name='headers'),
  body: StartDcdnIpaDomainResponseBody(name='body'),
}

async function startDcdnIpaDomainWithOptions(request: StartDcdnIpaDomainRequest, runtime: Util.RuntimeOptions): StartDcdnIpaDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartDcdnIpaDomain', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startDcdnIpaDomain(request: StartDcdnIpaDomainRequest): StartDcdnIpaDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return startDcdnIpaDomainWithOptions(request, runtime);
}

model StopDcdnDomainRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
}

model StopDcdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopDcdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: StopDcdnDomainResponseBody(name='body'),
}

async function stopDcdnDomainWithOptions(request: StopDcdnDomainRequest, runtime: Util.RuntimeOptions): StopDcdnDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StopDcdnDomain', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function stopDcdnDomain(request: StopDcdnDomainRequest): StopDcdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopDcdnDomainWithOptions(request, runtime);
}

model StopDcdnIpaDomainRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
}

model StopDcdnIpaDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopDcdnIpaDomainResponse = {
  headers: map[string]string(name='headers'),
  body: StopDcdnIpaDomainResponseBody(name='body'),
}

async function stopDcdnIpaDomainWithOptions(request: StopDcdnIpaDomainRequest, runtime: Util.RuntimeOptions): StopDcdnIpaDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StopDcdnIpaDomain', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function stopDcdnIpaDomain(request: StopDcdnIpaDomainRequest): StopDcdnIpaDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopDcdnIpaDomainWithOptions(request, runtime);
}

model TagDcdnResourcesRequest {
  ownerId?: long(name='OwnerId'),
  resourceType?: string(name='ResourceType'),
  resourceId?: [ string ](name='ResourceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model TagDcdnResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagDcdnResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagDcdnResourcesResponseBody(name='body'),
}

async function tagDcdnResourcesWithOptions(request: TagDcdnResourcesRequest, runtime: Util.RuntimeOptions): TagDcdnResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TagDcdnResources', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function tagDcdnResources(request: TagDcdnResourcesRequest): TagDcdnResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagDcdnResourcesWithOptions(request, runtime);
}

model UntagDcdnResourcesRequest {
  ownerId?: long(name='OwnerId'),
  resourceType?: string(name='ResourceType'),
  all?: boolean(name='All'),
  resourceId?: [ string ](name='ResourceId'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagDcdnResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UntagDcdnResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagDcdnResourcesResponseBody(name='body'),
}

async function untagDcdnResourcesWithOptions(request: UntagDcdnResourcesRequest, runtime: Util.RuntimeOptions): UntagDcdnResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UntagDcdnResources', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function untagDcdnResources(request: UntagDcdnResourcesRequest): UntagDcdnResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagDcdnResourcesWithOptions(request, runtime);
}

model UpdateDcdnDeliverTaskRequest {
  ownerId?: long(name='OwnerId'),
  deliverId?: long(name='DeliverId'),
  name?: string(name='Name'),
  status?: string(name='Status'),
  reports?: string(name='Reports'),
  domainName?: string(name='DomainName'),
  deliver?: map[string]any(name='Deliver'),
  schedule?: map[string]any(name='Schedule'),
}

model UpdateDcdnDeliverTaskShrinkRequest {
  ownerId?: long(name='OwnerId'),
  deliverId?: long(name='DeliverId'),
  name?: string(name='Name'),
  status?: string(name='Status'),
  reports?: string(name='Reports'),
  domainName?: string(name='DomainName'),
  deliverShrink?: string(name='Deliver'),
  scheduleShrink?: string(name='Schedule'),
}

model UpdateDcdnDeliverTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateDcdnDeliverTaskResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDcdnDeliverTaskResponseBody(name='body'),
}

async function updateDcdnDeliverTaskWithOptions(tmpReq: UpdateDcdnDeliverTaskRequest, runtime: Util.RuntimeOptions): UpdateDcdnDeliverTaskResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateDcdnDeliverTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deliver)) {
    request.deliverShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deliver, 'Deliver', 'json');
  }
  if (!Util.isUnset(tmpReq.schedule)) {
    request.scheduleShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.schedule, 'Schedule', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateDcdnDeliverTask', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateDcdnDeliverTask(request: UpdateDcdnDeliverTaskRequest): UpdateDcdnDeliverTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDcdnDeliverTaskWithOptions(request, runtime);
}

model UpdateDcdnDomainRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
  sources?: string(name='Sources'),
  resourceGroupId?: string(name='ResourceGroupId'),
  topLevelDomain?: string(name='TopLevelDomain'),
}

model UpdateDcdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateDcdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDcdnDomainResponseBody(name='body'),
}

async function updateDcdnDomainWithOptions(request: UpdateDcdnDomainRequest, runtime: Util.RuntimeOptions): UpdateDcdnDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateDcdnDomain', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateDcdnDomain(request: UpdateDcdnDomainRequest): UpdateDcdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDcdnDomainWithOptions(request, runtime);
}

model UpdateDcdnIpaDomainRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  domainName?: string(name='DomainName'),
  sources?: string(name='Sources'),
  resourceGroupId?: string(name='ResourceGroupId'),
  topLevelDomain?: string(name='TopLevelDomain'),
}

model UpdateDcdnIpaDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateDcdnIpaDomainResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDcdnIpaDomainResponseBody(name='body'),
}

async function updateDcdnIpaDomainWithOptions(request: UpdateDcdnIpaDomainRequest, runtime: Util.RuntimeOptions): UpdateDcdnIpaDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateDcdnIpaDomain', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateDcdnIpaDomain(request: UpdateDcdnIpaDomainRequest): UpdateDcdnIpaDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDcdnIpaDomainWithOptions(request, runtime);
}

model UpdateDcdnSubTaskRequest {
  ownerId?: long(name='OwnerId'),
  status?: string(name='Status'),
  reportIds?: string(name='ReportIds'),
  domainName?: string(name='DomainName'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model UpdateDcdnSubTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateDcdnSubTaskResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDcdnSubTaskResponseBody(name='body'),
}

async function updateDcdnSubTaskWithOptions(request: UpdateDcdnSubTaskRequest, runtime: Util.RuntimeOptions): UpdateDcdnSubTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateDcdnSubTask', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateDcdnSubTask(request: UpdateDcdnSubTaskRequest): UpdateDcdnSubTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDcdnSubTaskWithOptions(request, runtime);
}

model UploadRoutineCodeRequest {
  ownerId?: long(name='OwnerId'),
  name?: string(name='Name'),
  codeDescription?: string(name='CodeDescription'),
}

model UploadRoutineCodeResponseBody = {
  content?: map[string]any(name='Content'),
  requestId?: string(name='RequestId'),
}

model UploadRoutineCodeResponse = {
  headers: map[string]string(name='headers'),
  body: UploadRoutineCodeResponseBody(name='body'),
}

async function uploadRoutineCodeWithOptions(request: UploadRoutineCodeRequest, runtime: Util.RuntimeOptions): UploadRoutineCodeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UploadRoutineCode', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function uploadRoutineCode(request: UploadRoutineCodeRequest): UploadRoutineCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return uploadRoutineCodeWithOptions(request, runtime);
}

model UploadStagingRoutineCodeRequest {
  ownerId?: long(name='OwnerId'),
  name?: string(name='Name'),
  codeDescription?: string(name='CodeDescription'),
}

model UploadStagingRoutineCodeResponseBody = {
  content?: map[string]any(name='Content'),
  requestId?: string(name='RequestId'),
}

model UploadStagingRoutineCodeResponse = {
  headers: map[string]string(name='headers'),
  body: UploadStagingRoutineCodeResponseBody(name='body'),
}

async function uploadStagingRoutineCodeWithOptions(request: UploadStagingRoutineCodeRequest, runtime: Util.RuntimeOptions): UploadStagingRoutineCodeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UploadStagingRoutineCode', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function uploadStagingRoutineCode(request: UploadStagingRoutineCodeRequest): UploadStagingRoutineCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return uploadStagingRoutineCodeWithOptions(request, runtime);
}

model VerifyDcdnDomainOwnerRequest {
  ownerId?: long(name='OwnerId'),
  domainName?: string(name='DomainName'),
  verifyType?: string(name='VerifyType'),
}

model VerifyDcdnDomainOwnerResponseBody = {
  content?: string(name='Content'),
  requestId?: string(name='RequestId'),
}

model VerifyDcdnDomainOwnerResponse = {
  headers: map[string]string(name='headers'),
  body: VerifyDcdnDomainOwnerResponseBody(name='body'),
}

async function verifyDcdnDomainOwnerWithOptions(request: VerifyDcdnDomainOwnerRequest, runtime: Util.RuntimeOptions): VerifyDcdnDomainOwnerResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('VerifyDcdnDomainOwner', '2018-01-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function verifyDcdnDomainOwner(request: VerifyDcdnDomainOwnerRequest): VerifyDcdnDomainOwnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return verifyDcdnDomainOwnerWithOptions(request, runtime);
}

