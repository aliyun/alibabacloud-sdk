/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'dcdn.aliyuncs.com',
    ap-northeast-2-pop = 'dcdn.aliyuncs.com',
    ap-south-1 = 'dcdn.aliyuncs.com',
    ap-southeast-1 = 'dcdn.aliyuncs.com',
    ap-southeast-2 = 'dcdn.aliyuncs.com',
    ap-southeast-3 = 'dcdn.aliyuncs.com',
    ap-southeast-5 = 'dcdn.aliyuncs.com',
    cn-beijing = 'dcdn.aliyuncs.com',
    cn-beijing-finance-1 = 'dcdn.aliyuncs.com',
    cn-beijing-finance-pop = 'dcdn.aliyuncs.com',
    cn-beijing-gov-1 = 'dcdn.aliyuncs.com',
    cn-beijing-nu16-b01 = 'dcdn.aliyuncs.com',
    cn-chengdu = 'dcdn.aliyuncs.com',
    cn-edge-1 = 'dcdn.aliyuncs.com',
    cn-fujian = 'dcdn.aliyuncs.com',
    cn-haidian-cm12-c01 = 'dcdn.aliyuncs.com',
    cn-hangzhou = 'dcdn.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'dcdn.aliyuncs.com',
    cn-hangzhou-finance = 'dcdn.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'dcdn.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'dcdn.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'dcdn.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'dcdn.aliyuncs.com',
    cn-hangzhou-test-306 = 'dcdn.aliyuncs.com',
    cn-hongkong = 'dcdn.aliyuncs.com',
    cn-hongkong-finance-pop = 'dcdn.aliyuncs.com',
    cn-huhehaote = 'dcdn.aliyuncs.com',
    cn-north-2-gov-1 = 'dcdn.aliyuncs.com',
    cn-qingdao = 'dcdn.aliyuncs.com',
    cn-qingdao-nebula = 'dcdn.aliyuncs.com',
    cn-shanghai = 'dcdn.aliyuncs.com',
    cn-shanghai-et15-b01 = 'dcdn.aliyuncs.com',
    cn-shanghai-et2-b01 = 'dcdn.aliyuncs.com',
    cn-shanghai-finance-1 = 'dcdn.aliyuncs.com',
    cn-shanghai-inner = 'dcdn.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'dcdn.aliyuncs.com',
    cn-shenzhen = 'dcdn.aliyuncs.com',
    cn-shenzhen-finance-1 = 'dcdn.aliyuncs.com',
    cn-shenzhen-inner = 'dcdn.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'dcdn.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'dcdn.aliyuncs.com',
    cn-wuhan = 'dcdn.aliyuncs.com',
    cn-yushanfang = 'dcdn.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'dcdn.aliyuncs.com',
    cn-zhangjiakou = 'dcdn.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'dcdn.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'dcdn.aliyuncs.com',
    eu-central-1 = 'dcdn.aliyuncs.com',
    eu-west-1 = 'dcdn.aliyuncs.com',
    eu-west-1-oxs = 'dcdn.aliyuncs.com',
    me-east-1 = 'dcdn.aliyuncs.com',
    rus-west-1-pop = 'dcdn.aliyuncs.com',
    us-east-1 = 'dcdn.aliyuncs.com',
    us-west-1 = 'dcdn.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('dcdn', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddDcdnDomainRequest {
  checkUrl?: string(name='CheckUrl'),
  domainName?: string(name='DomainName'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  scope?: string(name='Scope'),
  securityToken?: string(name='SecurityToken'),
  sources?: string(name='Sources'),
  topLevelDomain?: string(name='TopLevelDomain'),
}

model AddDcdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddDcdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: AddDcdnDomainResponseBody(name='body'),
}

async function addDcdnDomainWithOptions(request: AddDcdnDomainRequest, runtime: Util.RuntimeOptions): AddDcdnDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkUrl)) {
    query['CheckUrl'] = request.checkUrl;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.scope)) {
    query['Scope'] = request.scope;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.sources)) {
    query['Sources'] = request.sources;
  }
  if (!Util.isUnset(request.topLevelDomain)) {
    query['TopLevelDomain'] = request.topLevelDomain;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddDcdnDomain',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addDcdnDomain(request: AddDcdnDomainRequest): AddDcdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return addDcdnDomainWithOptions(request, runtime);
}

model AddDcdnIpaDomainRequest {
  checkUrl?: string(name='CheckUrl'),
  domainName?: string(name='DomainName'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  protocol?: string(name='Protocol'),
  resourceGroupId?: string(name='ResourceGroupId'),
  scope?: string(name='Scope'),
  securityToken?: string(name='SecurityToken'),
  sources?: string(name='Sources'),
  topLevelDomain?: string(name='TopLevelDomain'),
}

model AddDcdnIpaDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddDcdnIpaDomainResponse = {
  headers: map[string]string(name='headers'),
  body: AddDcdnIpaDomainResponseBody(name='body'),
}

async function addDcdnIpaDomainWithOptions(request: AddDcdnIpaDomainRequest, runtime: Util.RuntimeOptions): AddDcdnIpaDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkUrl)) {
    query['CheckUrl'] = request.checkUrl;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.protocol)) {
    query['Protocol'] = request.protocol;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.scope)) {
    query['Scope'] = request.scope;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.sources)) {
    query['Sources'] = request.sources;
  }
  if (!Util.isUnset(request.topLevelDomain)) {
    query['TopLevelDomain'] = request.topLevelDomain;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddDcdnIpaDomain',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addDcdnIpaDomain(request: AddDcdnIpaDomainRequest): AddDcdnIpaDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return addDcdnIpaDomainWithOptions(request, runtime);
}

model BatchAddDcdnDomainRequest {
  checkUrl?: string(name='CheckUrl'),
  domainName?: string(name='DomainName'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  scope?: string(name='Scope'),
  securityToken?: string(name='SecurityToken'),
  sources?: string(name='Sources'),
  topLevelDomain?: string(name='TopLevelDomain'),
}

model BatchAddDcdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchAddDcdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: BatchAddDcdnDomainResponseBody(name='body'),
}

async function batchAddDcdnDomainWithOptions(request: BatchAddDcdnDomainRequest, runtime: Util.RuntimeOptions): BatchAddDcdnDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkUrl)) {
    query['CheckUrl'] = request.checkUrl;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.scope)) {
    query['Scope'] = request.scope;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.sources)) {
    query['Sources'] = request.sources;
  }
  if (!Util.isUnset(request.topLevelDomain)) {
    query['TopLevelDomain'] = request.topLevelDomain;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchAddDcdnDomain',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchAddDcdnDomain(request: BatchAddDcdnDomainRequest): BatchAddDcdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchAddDcdnDomainWithOptions(request, runtime);
}

model BatchCreateDcdnWafRulesRequest {
  ownerId?: long(name='OwnerId'),
  policyId?: long(name='PolicyId'),
  ruleConfigs?: string(name='RuleConfigs'),
}

model BatchCreateDcdnWafRulesResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchCreateDcdnWafRulesResponse = {
  headers: map[string]string(name='headers'),
  body: BatchCreateDcdnWafRulesResponseBody(name='body'),
}

async function batchCreateDcdnWafRulesWithOptions(request: BatchCreateDcdnWafRulesRequest, runtime: Util.RuntimeOptions): BatchCreateDcdnWafRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.policyId)) {
    body['PolicyId'] = request.policyId;
  }
  if (!Util.isUnset(request.ruleConfigs)) {
    body['RuleConfigs'] = request.ruleConfigs;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchCreateDcdnWafRules',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchCreateDcdnWafRules(request: BatchCreateDcdnWafRulesRequest): BatchCreateDcdnWafRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchCreateDcdnWafRulesWithOptions(request, runtime);
}

model BatchDeleteDcdnDomainConfigsRequest {
  domainNames?: string(name='DomainNames'),
  functionNames?: string(name='FunctionNames'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model BatchDeleteDcdnDomainConfigsResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchDeleteDcdnDomainConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchDeleteDcdnDomainConfigsResponseBody(name='body'),
}

async function batchDeleteDcdnDomainConfigsWithOptions(request: BatchDeleteDcdnDomainConfigsRequest, runtime: Util.RuntimeOptions): BatchDeleteDcdnDomainConfigsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainNames)) {
    query['DomainNames'] = request.domainNames;
  }
  if (!Util.isUnset(request.functionNames)) {
    query['FunctionNames'] = request.functionNames;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchDeleteDcdnDomainConfigs',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchDeleteDcdnDomainConfigs(request: BatchDeleteDcdnDomainConfigsRequest): BatchDeleteDcdnDomainConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchDeleteDcdnDomainConfigsWithOptions(request, runtime);
}

model BatchDeleteDcdnWafRulesRequest {
  ownerId?: long(name='OwnerId'),
  ruleIds?: string(name='RuleIds'),
}

model BatchDeleteDcdnWafRulesResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchDeleteDcdnWafRulesResponse = {
  headers: map[string]string(name='headers'),
  body: BatchDeleteDcdnWafRulesResponseBody(name='body'),
}

async function batchDeleteDcdnWafRulesWithOptions(request: BatchDeleteDcdnWafRulesRequest, runtime: Util.RuntimeOptions): BatchDeleteDcdnWafRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.ruleIds)) {
    body['RuleIds'] = request.ruleIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchDeleteDcdnWafRules',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchDeleteDcdnWafRules(request: BatchDeleteDcdnWafRulesRequest): BatchDeleteDcdnWafRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchDeleteDcdnWafRulesWithOptions(request, runtime);
}

model BatchSetDcdnDomainCertificateRequest {
  certName?: string(name='CertName'),
  certType?: string(name='CertType'),
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
  region?: string(name='Region'),
  SSLPri?: string(name='SSLPri'),
  SSLProtocol?: string(name='SSLProtocol'),
  SSLPub?: string(name='SSLPub'),
  securityToken?: string(name='SecurityToken'),
}

model BatchSetDcdnDomainCertificateResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchSetDcdnDomainCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: BatchSetDcdnDomainCertificateResponseBody(name='body'),
}

async function batchSetDcdnDomainCertificateWithOptions(request: BatchSetDcdnDomainCertificateRequest, runtime: Util.RuntimeOptions): BatchSetDcdnDomainCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certName)) {
    query['CertName'] = request.certName;
  }
  if (!Util.isUnset(request.certType)) {
    query['CertType'] = request.certType;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.SSLPri)) {
    query['SSLPri'] = request.SSLPri;
  }
  if (!Util.isUnset(request.SSLProtocol)) {
    query['SSLProtocol'] = request.SSLProtocol;
  }
  if (!Util.isUnset(request.SSLPub)) {
    query['SSLPub'] = request.SSLPub;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchSetDcdnDomainCertificate',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchSetDcdnDomainCertificate(request: BatchSetDcdnDomainCertificateRequest): BatchSetDcdnDomainCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchSetDcdnDomainCertificateWithOptions(request, runtime);
}

model BatchSetDcdnDomainConfigsRequest {
  domainNames?: string(name='DomainNames'),
  functions?: string(name='Functions'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model BatchSetDcdnDomainConfigsResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchSetDcdnDomainConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchSetDcdnDomainConfigsResponseBody(name='body'),
}

async function batchSetDcdnDomainConfigsWithOptions(request: BatchSetDcdnDomainConfigsRequest, runtime: Util.RuntimeOptions): BatchSetDcdnDomainConfigsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainNames)) {
    query['DomainNames'] = request.domainNames;
  }
  if (!Util.isUnset(request.functions)) {
    query['Functions'] = request.functions;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchSetDcdnDomainConfigs',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchSetDcdnDomainConfigs(request: BatchSetDcdnDomainConfigsRequest): BatchSetDcdnDomainConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchSetDcdnDomainConfigsWithOptions(request, runtime);
}

model BatchSetDcdnIpaDomainConfigsRequest {
  domainNames?: string(name='DomainNames'),
  functions?: string(name='Functions'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model BatchSetDcdnIpaDomainConfigsResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchSetDcdnIpaDomainConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchSetDcdnIpaDomainConfigsResponseBody(name='body'),
}

async function batchSetDcdnIpaDomainConfigsWithOptions(request: BatchSetDcdnIpaDomainConfigsRequest, runtime: Util.RuntimeOptions): BatchSetDcdnIpaDomainConfigsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainNames)) {
    query['DomainNames'] = request.domainNames;
  }
  if (!Util.isUnset(request.functions)) {
    query['Functions'] = request.functions;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchSetDcdnIpaDomainConfigs',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchSetDcdnIpaDomainConfigs(request: BatchSetDcdnIpaDomainConfigsRequest): BatchSetDcdnIpaDomainConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchSetDcdnIpaDomainConfigsWithOptions(request, runtime);
}

model BatchSetDcdnWafDomainConfigsRequest {
  defenseStatus?: string(name='DefenseStatus'),
  domainNames?: string(name='DomainNames'),
  ownerId?: long(name='OwnerId'),
}

model BatchSetDcdnWafDomainConfigsResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchSetDcdnWafDomainConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchSetDcdnWafDomainConfigsResponseBody(name='body'),
}

async function batchSetDcdnWafDomainConfigsWithOptions(request: BatchSetDcdnWafDomainConfigsRequest, runtime: Util.RuntimeOptions): BatchSetDcdnWafDomainConfigsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.defenseStatus)) {
    body['DefenseStatus'] = request.defenseStatus;
  }
  if (!Util.isUnset(request.domainNames)) {
    body['DomainNames'] = request.domainNames;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchSetDcdnWafDomainConfigs',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchSetDcdnWafDomainConfigs(request: BatchSetDcdnWafDomainConfigsRequest): BatchSetDcdnWafDomainConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchSetDcdnWafDomainConfigsWithOptions(request, runtime);
}

model BatchStartDcdnDomainRequest {
  domainNames?: string(name='DomainNames'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model BatchStartDcdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchStartDcdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: BatchStartDcdnDomainResponseBody(name='body'),
}

async function batchStartDcdnDomainWithOptions(request: BatchStartDcdnDomainRequest, runtime: Util.RuntimeOptions): BatchStartDcdnDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainNames)) {
    query['DomainNames'] = request.domainNames;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchStartDcdnDomain',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchStartDcdnDomain(request: BatchStartDcdnDomainRequest): BatchStartDcdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchStartDcdnDomainWithOptions(request, runtime);
}

model BatchStopDcdnDomainRequest {
  domainNames?: string(name='DomainNames'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model BatchStopDcdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchStopDcdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: BatchStopDcdnDomainResponseBody(name='body'),
}

async function batchStopDcdnDomainWithOptions(request: BatchStopDcdnDomainRequest, runtime: Util.RuntimeOptions): BatchStopDcdnDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainNames)) {
    query['DomainNames'] = request.domainNames;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchStopDcdnDomain',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchStopDcdnDomain(request: BatchStopDcdnDomainRequest): BatchStopDcdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchStopDcdnDomainWithOptions(request, runtime);
}

model CheckDcdnProjectExistRequest {
  ownerId?: long(name='OwnerId'),
  projectName?: string(name='ProjectName'),
}

model CheckDcdnProjectExistResponseBody = {
  content?: {
    exist?: string(name='Exist'),
  }(name='Content'),
  requestId?: string(name='RequestId'),
}

model CheckDcdnProjectExistResponse = {
  headers: map[string]string(name='headers'),
  body: CheckDcdnProjectExistResponseBody(name='body'),
}

async function checkDcdnProjectExistWithOptions(request: CheckDcdnProjectExistRequest, runtime: Util.RuntimeOptions): CheckDcdnProjectExistResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckDcdnProjectExist',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkDcdnProjectExist(request: CheckDcdnProjectExistRequest): CheckDcdnProjectExistResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkDcdnProjectExistWithOptions(request, runtime);
}

model CommitStagingRoutineCodeRequest {
  codeDescription?: string(name='CodeDescription'),
  name?: string(name='Name'),
  ownerId?: long(name='OwnerId'),
}

model CommitStagingRoutineCodeResponseBody = {
  content?: map[string]any(name='Content'),
  requestId?: string(name='RequestId'),
}

model CommitStagingRoutineCodeResponse = {
  headers: map[string]string(name='headers'),
  body: CommitStagingRoutineCodeResponseBody(name='body'),
}

async function commitStagingRoutineCodeWithOptions(request: CommitStagingRoutineCodeRequest, runtime: Util.RuntimeOptions): CommitStagingRoutineCodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.codeDescription)) {
    body['CodeDescription'] = request.codeDescription;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CommitStagingRoutineCode',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function commitStagingRoutineCode(request: CommitStagingRoutineCodeRequest): CommitStagingRoutineCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return commitStagingRoutineCodeWithOptions(request, runtime);
}

model CreateDcdnCertificateSigningRequestRequest {
  city?: string(name='City'),
  commonName?: string(name='CommonName'),
  country?: string(name='Country'),
  email?: string(name='Email'),
  organization?: string(name='Organization'),
  organizationUnit?: string(name='OrganizationUnit'),
  ownerId?: long(name='OwnerId'),
  SANs?: string(name='SANs'),
  state?: string(name='State'),
}

model CreateDcdnCertificateSigningRequestResponseBody = {
  commonName?: string(name='CommonName'),
  csr?: string(name='Csr'),
  pubMd5?: string(name='PubMd5'),
  requestId?: string(name='RequestId'),
}

model CreateDcdnCertificateSigningRequestResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDcdnCertificateSigningRequestResponseBody(name='body'),
}

async function createDcdnCertificateSigningRequestWithOptions(request: CreateDcdnCertificateSigningRequestRequest, runtime: Util.RuntimeOptions): CreateDcdnCertificateSigningRequestResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.city)) {
    query['City'] = request.city;
  }
  if (!Util.isUnset(request.commonName)) {
    query['CommonName'] = request.commonName;
  }
  if (!Util.isUnset(request.country)) {
    query['Country'] = request.country;
  }
  if (!Util.isUnset(request.email)) {
    query['Email'] = request.email;
  }
  if (!Util.isUnset(request.organization)) {
    query['Organization'] = request.organization;
  }
  if (!Util.isUnset(request.organizationUnit)) {
    query['OrganizationUnit'] = request.organizationUnit;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.SANs)) {
    query['SANs'] = request.SANs;
  }
  if (!Util.isUnset(request.state)) {
    query['State'] = request.state;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDcdnCertificateSigningRequest',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDcdnCertificateSigningRequest(request: CreateDcdnCertificateSigningRequestRequest): CreateDcdnCertificateSigningRequestResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDcdnCertificateSigningRequestWithOptions(request, runtime);
}

model CreateDcdnDeliverTaskRequest {
  deliver?: string(name='Deliver'),
  domainName?: string(name='DomainName'),
  name?: string(name='Name'),
  ownerId?: long(name='OwnerId'),
  reports?: string(name='Reports'),
  schedule?: string(name='Schedule'),
}

model CreateDcdnDeliverTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateDcdnDeliverTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDcdnDeliverTaskResponseBody(name='body'),
}

async function createDcdnDeliverTaskWithOptions(request: CreateDcdnDeliverTaskRequest, runtime: Util.RuntimeOptions): CreateDcdnDeliverTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.deliver)) {
    body['Deliver'] = request.deliver;
  }
  if (!Util.isUnset(request.domainName)) {
    body['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.reports)) {
    body['Reports'] = request.reports;
  }
  if (!Util.isUnset(request.schedule)) {
    body['Schedule'] = request.schedule;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDcdnDeliverTask',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDcdnDeliverTask(request: CreateDcdnDeliverTaskRequest): CreateDcdnDeliverTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDcdnDeliverTaskWithOptions(request, runtime);
}

model CreateDcdnSLSRealTimeLogDeliveryRequest {
  businessType?: string(name='BusinessType'),
  dataCenter?: string(name='DataCenter'),
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
  projectName?: string(name='ProjectName'),
  SLSLogStore?: string(name='SLSLogStore'),
  SLSProject?: string(name='SLSProject'),
  SLSRegion?: string(name='SLSRegion'),
  samplingRate?: string(name='SamplingRate'),
}

model CreateDcdnSLSRealTimeLogDeliveryResponseBody = {
  content?: {
    domains?: [ 
    {
      desc?: string(name='Desc'),
      domainName?: string(name='DomainName'),
      region?: string(name='Region'),
      status?: string(name='Status'),
    }
  ](name='Domains')
  }(name='Content'),
  requestId?: string(name='RequestId'),
}

model CreateDcdnSLSRealTimeLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDcdnSLSRealTimeLogDeliveryResponseBody(name='body'),
}

async function createDcdnSLSRealTimeLogDeliveryWithOptions(request: CreateDcdnSLSRealTimeLogDeliveryRequest, runtime: Util.RuntimeOptions): CreateDcdnSLSRealTimeLogDeliveryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.businessType)) {
    body['BusinessType'] = request.businessType;
  }
  if (!Util.isUnset(request.dataCenter)) {
    body['DataCenter'] = request.dataCenter;
  }
  if (!Util.isUnset(request.domainName)) {
    body['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.SLSLogStore)) {
    body['SLSLogStore'] = request.SLSLogStore;
  }
  if (!Util.isUnset(request.SLSProject)) {
    body['SLSProject'] = request.SLSProject;
  }
  if (!Util.isUnset(request.SLSRegion)) {
    body['SLSRegion'] = request.SLSRegion;
  }
  if (!Util.isUnset(request.samplingRate)) {
    body['SamplingRate'] = request.samplingRate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDcdnSLSRealTimeLogDelivery',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDcdnSLSRealTimeLogDelivery(request: CreateDcdnSLSRealTimeLogDeliveryRequest): CreateDcdnSLSRealTimeLogDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDcdnSLSRealTimeLogDeliveryWithOptions(request, runtime);
}

model CreateDcdnSubTaskRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
  reportIds?: string(name='ReportIds'),
}

model CreateDcdnSubTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateDcdnSubTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDcdnSubTaskResponseBody(name='body'),
}

async function createDcdnSubTaskWithOptions(request: CreateDcdnSubTaskRequest, runtime: Util.RuntimeOptions): CreateDcdnSubTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.domainName)) {
    body['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.reportIds)) {
    body['ReportIds'] = request.reportIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDcdnSubTask',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDcdnSubTask(request: CreateDcdnSubTaskRequest): CreateDcdnSubTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDcdnSubTaskWithOptions(request, runtime);
}

model CreateDcdnWafPolicyRequest {
  defenseScene?: string(name='DefenseScene'),
  ownerId?: long(name='OwnerId'),
  policyName?: string(name='PolicyName'),
  policyStatus?: string(name='PolicyStatus'),
  policyType?: string(name='PolicyType'),
}

model CreateDcdnWafPolicyResponseBody = {
  policyId?: long(name='PolicyId'),
  requestId?: string(name='RequestId'),
}

model CreateDcdnWafPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDcdnWafPolicyResponseBody(name='body'),
}

async function createDcdnWafPolicyWithOptions(request: CreateDcdnWafPolicyRequest, runtime: Util.RuntimeOptions): CreateDcdnWafPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.defenseScene)) {
    body['DefenseScene'] = request.defenseScene;
  }
  if (!Util.isUnset(request.policyName)) {
    body['PolicyName'] = request.policyName;
  }
  if (!Util.isUnset(request.policyStatus)) {
    body['PolicyStatus'] = request.policyStatus;
  }
  if (!Util.isUnset(request.policyType)) {
    body['PolicyType'] = request.policyType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDcdnWafPolicy',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDcdnWafPolicy(request: CreateDcdnWafPolicyRequest): CreateDcdnWafPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDcdnWafPolicyWithOptions(request, runtime);
}

model CreateRoutineRequest {
  description?: string(name='Description'),
  envConf?: map[string]any(name='EnvConf'),
  name?: string(name='Name'),
  ownerId?: long(name='OwnerId'),
}

model CreateRoutineShrinkRequest {
  description?: string(name='Description'),
  envConfShrink?: string(name='EnvConf'),
  name?: string(name='Name'),
  ownerId?: long(name='OwnerId'),
}

model CreateRoutineResponseBody = {
  content?: map[string]any(name='Content'),
  requestId?: string(name='RequestId'),
}

model CreateRoutineResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRoutineResponseBody(name='body'),
}

async function createRoutineWithOptions(tmpReq: CreateRoutineRequest, runtime: Util.RuntimeOptions): CreateRoutineResponse {
  Util.validateModel(tmpReq);
  var request = new CreateRoutineShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.envConf)) {
    request.envConfShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.envConf, 'EnvConf', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.envConfShrink)) {
    body['EnvConf'] = request.envConfShrink;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateRoutine',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createRoutine(request: CreateRoutineRequest): CreateRoutineResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRoutineWithOptions(request, runtime);
}

model CreateSlrAndSlsProjectRequest {
  ownerId?: long(name='OwnerId'),
  region?: string(name='Region'),
}

model CreateSlrAndSlsProjectResponseBody = {
  requestId?: string(name='RequestId'),
  slsInfo?: {
    endPoint?: string(name='EndPoint'),
    logStore?: string(name='LogStore'),
    project?: string(name='Project'),
    region?: string(name='Region'),
  }(name='SlsInfo'),
}

model CreateSlrAndSlsProjectResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSlrAndSlsProjectResponseBody(name='body'),
}

async function createSlrAndSlsProjectWithOptions(request: CreateSlrAndSlsProjectRequest, runtime: Util.RuntimeOptions): CreateSlrAndSlsProjectResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.region)) {
    body['Region'] = request.region;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateSlrAndSlsProject',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSlrAndSlsProject(request: CreateSlrAndSlsProjectRequest): CreateSlrAndSlsProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSlrAndSlsProjectWithOptions(request, runtime);
}

model DeleteDcdnDeliverTaskRequest {
  deliverId?: long(name='DeliverId'),
  ownerId?: long(name='OwnerId'),
}

model DeleteDcdnDeliverTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDcdnDeliverTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDcdnDeliverTaskResponseBody(name='body'),
}

async function deleteDcdnDeliverTaskWithOptions(request: DeleteDcdnDeliverTaskRequest, runtime: Util.RuntimeOptions): DeleteDcdnDeliverTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deliverId)) {
    query['DeliverId'] = request.deliverId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDcdnDeliverTask',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDcdnDeliverTask(request: DeleteDcdnDeliverTaskRequest): DeleteDcdnDeliverTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDcdnDeliverTaskWithOptions(request, runtime);
}

model DeleteDcdnDomainRequest {
  domainName?: string(name='DomainName'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DeleteDcdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDcdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDcdnDomainResponseBody(name='body'),
}

async function deleteDcdnDomainWithOptions(request: DeleteDcdnDomainRequest, runtime: Util.RuntimeOptions): DeleteDcdnDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDcdnDomain',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDcdnDomain(request: DeleteDcdnDomainRequest): DeleteDcdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDcdnDomainWithOptions(request, runtime);
}

model DeleteDcdnIpaDomainRequest {
  domainName?: string(name='DomainName'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DeleteDcdnIpaDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDcdnIpaDomainResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDcdnIpaDomainResponseBody(name='body'),
}

async function deleteDcdnIpaDomainWithOptions(request: DeleteDcdnIpaDomainRequest, runtime: Util.RuntimeOptions): DeleteDcdnIpaDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDcdnIpaDomain',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDcdnIpaDomain(request: DeleteDcdnIpaDomainRequest): DeleteDcdnIpaDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDcdnIpaDomainWithOptions(request, runtime);
}

model DeleteDcdnIpaSpecificConfigRequest {
  configId?: string(name='ConfigId'),
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DeleteDcdnIpaSpecificConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDcdnIpaSpecificConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDcdnIpaSpecificConfigResponseBody(name='body'),
}

async function deleteDcdnIpaSpecificConfigWithOptions(request: DeleteDcdnIpaSpecificConfigRequest, runtime: Util.RuntimeOptions): DeleteDcdnIpaSpecificConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDcdnIpaSpecificConfig',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDcdnIpaSpecificConfig(request: DeleteDcdnIpaSpecificConfigRequest): DeleteDcdnIpaSpecificConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDcdnIpaSpecificConfigWithOptions(request, runtime);
}

model DeleteDcdnRealTimeLogProjectRequest {
  businessType?: string(name='BusinessType'),
  ownerId?: long(name='OwnerId'),
  projectName?: string(name='ProjectName'),
}

model DeleteDcdnRealTimeLogProjectResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDcdnRealTimeLogProjectResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDcdnRealTimeLogProjectResponseBody(name='body'),
}

async function deleteDcdnRealTimeLogProjectWithOptions(request: DeleteDcdnRealTimeLogProjectRequest, runtime: Util.RuntimeOptions): DeleteDcdnRealTimeLogProjectResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.businessType)) {
    query['BusinessType'] = request.businessType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDcdnRealTimeLogProject',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDcdnRealTimeLogProject(request: DeleteDcdnRealTimeLogProjectRequest): DeleteDcdnRealTimeLogProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDcdnRealTimeLogProjectWithOptions(request, runtime);
}

model DeleteDcdnSpecificConfigRequest {
  configId?: string(name='ConfigId'),
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DeleteDcdnSpecificConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDcdnSpecificConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDcdnSpecificConfigResponseBody(name='body'),
}

async function deleteDcdnSpecificConfigWithOptions(request: DeleteDcdnSpecificConfigRequest, runtime: Util.RuntimeOptions): DeleteDcdnSpecificConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDcdnSpecificConfig',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDcdnSpecificConfig(request: DeleteDcdnSpecificConfigRequest): DeleteDcdnSpecificConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDcdnSpecificConfigWithOptions(request, runtime);
}

model DeleteDcdnSpecificStagingConfigRequest {
  configId?: string(name='ConfigId'),
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DeleteDcdnSpecificStagingConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDcdnSpecificStagingConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDcdnSpecificStagingConfigResponseBody(name='body'),
}

async function deleteDcdnSpecificStagingConfigWithOptions(request: DeleteDcdnSpecificStagingConfigRequest, runtime: Util.RuntimeOptions): DeleteDcdnSpecificStagingConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDcdnSpecificStagingConfig',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDcdnSpecificStagingConfig(request: DeleteDcdnSpecificStagingConfigRequest): DeleteDcdnSpecificStagingConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDcdnSpecificStagingConfigWithOptions(request, runtime);
}

model DeleteDcdnSubTaskRequest {
  ownerId?: long(name='OwnerId'),
}

model DeleteDcdnSubTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDcdnSubTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDcdnSubTaskResponseBody(name='body'),
}

async function deleteDcdnSubTaskWithOptions(request: DeleteDcdnSubTaskRequest, runtime: Util.RuntimeOptions): DeleteDcdnSubTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDcdnSubTask',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDcdnSubTask(request: DeleteDcdnSubTaskRequest): DeleteDcdnSubTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDcdnSubTaskWithOptions(request, runtime);
}

model DeleteDcdnWafPolicyRequest {
  ownerId?: long(name='OwnerId'),
  policyId?: long(name='PolicyId'),
}

model DeleteDcdnWafPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDcdnWafPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDcdnWafPolicyResponseBody(name='body'),
}

async function deleteDcdnWafPolicyWithOptions(request: DeleteDcdnWafPolicyRequest, runtime: Util.RuntimeOptions): DeleteDcdnWafPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.policyId)) {
    body['PolicyId'] = request.policyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDcdnWafPolicy',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDcdnWafPolicy(request: DeleteDcdnWafPolicyRequest): DeleteDcdnWafPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDcdnWafPolicyWithOptions(request, runtime);
}

model DeleteRoutineRequest {
  name?: string(name='Name'),
  ownerId?: long(name='OwnerId'),
}

model DeleteRoutineResponseBody = {
  content?: map[string]any(name='Content'),
  requestId?: string(name='RequestId'),
}

model DeleteRoutineResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRoutineResponseBody(name='body'),
}

async function deleteRoutineWithOptions(request: DeleteRoutineRequest, runtime: Util.RuntimeOptions): DeleteRoutineResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRoutine',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteRoutine(request: DeleteRoutineRequest): DeleteRoutineResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRoutineWithOptions(request, runtime);
}

model DeleteRoutineCodeRevisionRequest {
  name?: string(name='Name'),
  ownerId?: long(name='OwnerId'),
  selectCodeRevision?: string(name='SelectCodeRevision'),
}

model DeleteRoutineCodeRevisionResponseBody = {
  content?: map[string]any(name='Content'),
  requestId?: string(name='RequestId'),
}

model DeleteRoutineCodeRevisionResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRoutineCodeRevisionResponseBody(name='body'),
}

async function deleteRoutineCodeRevisionWithOptions(request: DeleteRoutineCodeRevisionRequest, runtime: Util.RuntimeOptions): DeleteRoutineCodeRevisionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.selectCodeRevision)) {
    body['SelectCodeRevision'] = request.selectCodeRevision;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRoutineCodeRevision',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteRoutineCodeRevision(request: DeleteRoutineCodeRevisionRequest): DeleteRoutineCodeRevisionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRoutineCodeRevisionWithOptions(request, runtime);
}

model DeleteRoutineConfEnvsRequest {
  envs?: map[string]any(name='Envs'),
  name?: string(name='Name'),
  ownerId?: long(name='OwnerId'),
}

model DeleteRoutineConfEnvsShrinkRequest {
  envsShrink?: string(name='Envs'),
  name?: string(name='Name'),
  ownerId?: long(name='OwnerId'),
}

model DeleteRoutineConfEnvsResponseBody = {
  content?: map[string]any(name='Content'),
  requestId?: string(name='RequestId'),
}

model DeleteRoutineConfEnvsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRoutineConfEnvsResponseBody(name='body'),
}

async function deleteRoutineConfEnvsWithOptions(tmpReq: DeleteRoutineConfEnvsRequest, runtime: Util.RuntimeOptions): DeleteRoutineConfEnvsResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteRoutineConfEnvsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.envs)) {
    request.envsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.envs, 'Envs', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.envsShrink)) {
    body['Envs'] = request.envsShrink;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRoutineConfEnvs',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteRoutineConfEnvs(request: DeleteRoutineConfEnvsRequest): DeleteRoutineConfEnvsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRoutineConfEnvsWithOptions(request, runtime);
}

model DescribeDcdnAclFieldsRequest {
  lang?: string(name='Lang'),
  ownerId?: long(name='OwnerId'),
}

model DescribeDcdnAclFieldsResponseBody = {
  content?: [ 
    {
      fields?: string(name='Fields'),
    }
  ](name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnAclFieldsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnAclFieldsResponseBody(name='body'),
}

async function describeDcdnAclFieldsWithOptions(request: DescribeDcdnAclFieldsRequest, runtime: Util.RuntimeOptions): DescribeDcdnAclFieldsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnAclFields',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnAclFields(request: DescribeDcdnAclFieldsRequest): DescribeDcdnAclFieldsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnAclFieldsWithOptions(request, runtime);
}

model DescribeDcdnBgpBpsDataRequest {
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  isp?: string(name='Isp'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnBgpBpsDataResponseBody = {
  bgpDataInterval?: [ 
    {
      in?: float(name='In'),
      out?: float(name='Out'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='BgpDataInterval'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnBgpBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnBgpBpsDataResponseBody(name='body'),
}

async function describeDcdnBgpBpsDataWithOptions(request: DescribeDcdnBgpBpsDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnBgpBpsDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.isp)) {
    query['Isp'] = request.isp;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnBgpBpsData',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnBgpBpsData(request: DescribeDcdnBgpBpsDataRequest): DescribeDcdnBgpBpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnBgpBpsDataWithOptions(request, runtime);
}

model DescribeDcdnBgpTrafficDataRequest {
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  isp?: string(name='Isp'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnBgpTrafficDataResponseBody = {
  bgpDataInterval?: [ 
    {
      in?: long(name='In'),
      out?: long(name='Out'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='BgpDataInterval'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnBgpTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnBgpTrafficDataResponseBody(name='body'),
}

async function describeDcdnBgpTrafficDataWithOptions(request: DescribeDcdnBgpTrafficDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnBgpTrafficDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.isp)) {
    query['Isp'] = request.isp;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnBgpTrafficData',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnBgpTrafficData(request: DescribeDcdnBgpTrafficDataRequest): DescribeDcdnBgpTrafficDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnBgpTrafficDataWithOptions(request, runtime);
}

model DescribeDcdnBlockedRegionsRequest {
  language?: string(name='Language'),
  ownerId?: long(name='OwnerId'),
}

model DescribeDcdnBlockedRegionsResponseBody = {
  infoList?: {
    infoItem?: [ 
    {
      continent?: string(name='Continent'),
      countriesAndRegions?: string(name='CountriesAndRegions'),
      countriesAndRegionsName?: string(name='CountriesAndRegionsName'),
    }
  ](name='InfoItem')
  }(name='InfoList'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnBlockedRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnBlockedRegionsResponseBody(name='body'),
}

async function describeDcdnBlockedRegionsWithOptions(request: DescribeDcdnBlockedRegionsRequest, runtime: Util.RuntimeOptions): DescribeDcdnBlockedRegionsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnBlockedRegions',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnBlockedRegions(request: DescribeDcdnBlockedRegionsRequest): DescribeDcdnBlockedRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnBlockedRegionsWithOptions(request, runtime);
}

model DescribeDcdnCertificateDetailRequest {
  certName?: string(name='CertName'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeDcdnCertificateDetailResponseBody = {
  cert?: string(name='Cert'),
  certId?: long(name='CertId'),
  certName?: string(name='CertName'),
  key?: string(name='Key'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnCertificateDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnCertificateDetailResponseBody(name='body'),
}

async function describeDcdnCertificateDetailWithOptions(request: DescribeDcdnCertificateDetailRequest, runtime: Util.RuntimeOptions): DescribeDcdnCertificateDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certName)) {
    query['CertName'] = request.certName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnCertificateDetail',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnCertificateDetail(request: DescribeDcdnCertificateDetailRequest): DescribeDcdnCertificateDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnCertificateDetailWithOptions(request, runtime);
}

model DescribeDcdnCertificateListRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeDcdnCertificateListResponseBody = {
  certificateListModel?: {
    certList?: {
      cert?: [ 
      {
        certId?: long(name='CertId'),
        certName?: string(name='CertName'),
        common?: string(name='Common'),
        fingerprint?: string(name='Fingerprint'),
        issuer?: string(name='Issuer'),
        lastTime?: long(name='LastTime'),
      }
    ](name='Cert')
    }(name='CertList'),
    count?: int32(name='Count'),
  }(name='CertificateListModel'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnCertificateListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnCertificateListResponseBody(name='body'),
}

async function describeDcdnCertificateListWithOptions(request: DescribeDcdnCertificateListRequest, runtime: Util.RuntimeOptions): DescribeDcdnCertificateListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnCertificateList',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnCertificateList(request: DescribeDcdnCertificateListRequest): DescribeDcdnCertificateListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnCertificateListWithOptions(request, runtime);
}

model DescribeDcdnConfigGroupDetailRequest {
  configGroupId?: string(name='ConfigGroupId'),
  configGroupName?: string(name='ConfigGroupName'),
  ownerId?: long(name='OwnerId'),
}

model DescribeDcdnConfigGroupDetailResponseBody = {
  bizName?: string(name='BizName'),
  configGroupId?: string(name='ConfigGroupId'),
  configGroupName?: string(name='ConfigGroupName'),
  createTime?: string(name='CreateTime'),
  description?: string(name='Description'),
  requestId?: string(name='RequestId'),
  updateTime?: string(name='UpdateTime'),
}

model DescribeDcdnConfigGroupDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnConfigGroupDetailResponseBody(name='body'),
}

async function describeDcdnConfigGroupDetailWithOptions(request: DescribeDcdnConfigGroupDetailRequest, runtime: Util.RuntimeOptions): DescribeDcdnConfigGroupDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.configGroupId)) {
    query['ConfigGroupId'] = request.configGroupId;
  }
  if (!Util.isUnset(request.configGroupName)) {
    query['ConfigGroupName'] = request.configGroupName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnConfigGroupDetail',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnConfigGroupDetail(request: DescribeDcdnConfigGroupDetailRequest): DescribeDcdnConfigGroupDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnConfigGroupDetailWithOptions(request, runtime);
}

model DescribeDcdnConfigOfVersionRequest {
  functionId?: int32(name='FunctionId'),
  functionName?: string(name='FunctionName'),
  groupId?: long(name='GroupId'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  versionId?: string(name='VersionId'),
}

model DescribeDcdnConfigOfVersionResponseBody = {
  requestId?: string(name='RequestId'),
  versionConfigs?: {
    versionConfig?: [ 
    {
      configId?: string(name='ConfigId'),
      functionArgs?: {
        functionArg?: [ 
        {
          argName?: string(name='ArgName'),
          argValue?: string(name='ArgValue'),
        }
      ](name='FunctionArg')
      }(name='FunctionArgs'),
      functionName?: string(name='FunctionName'),
      status?: string(name='Status'),
    }
  ](name='VersionConfig')
  }(name='VersionConfigs'),
}

model DescribeDcdnConfigOfVersionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnConfigOfVersionResponseBody(name='body'),
}

async function describeDcdnConfigOfVersionWithOptions(request: DescribeDcdnConfigOfVersionRequest, runtime: Util.RuntimeOptions): DescribeDcdnConfigOfVersionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.functionId)) {
    query['FunctionId'] = request.functionId;
  }
  if (!Util.isUnset(request.functionName)) {
    query['FunctionName'] = request.functionName;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.versionId)) {
    query['VersionId'] = request.versionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnConfigOfVersion',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnConfigOfVersion(request: DescribeDcdnConfigOfVersionRequest): DescribeDcdnConfigOfVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnConfigOfVersionWithOptions(request, runtime);
}

model DescribeDcdnDeletedDomainsRequest {
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeDcdnDeletedDomainsResponseBody = {
  domains?: {
    pageData?: [ 
    {
      domainName?: string(name='DomainName'),
      gmtModified?: string(name='GmtModified'),
    }
  ](name='PageData')
  }(name='Domains'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeDcdnDeletedDomainsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDeletedDomainsResponseBody(name='body'),
}

async function describeDcdnDeletedDomainsWithOptions(request: DescribeDcdnDeletedDomainsRequest, runtime: Util.RuntimeOptions): DescribeDcdnDeletedDomainsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnDeletedDomains',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnDeletedDomains(request: DescribeDcdnDeletedDomainsRequest): DescribeDcdnDeletedDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDeletedDomainsWithOptions(request, runtime);
}

model DescribeDcdnDeliverListRequest {
  deliverId?: long(name='DeliverId'),
  ownerId?: long(name='OwnerId'),
}

model DescribeDcdnDeliverListResponseBody = {
  content?: string(name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnDeliverListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDeliverListResponseBody(name='body'),
}

async function describeDcdnDeliverListWithOptions(request: DescribeDcdnDeliverListRequest, runtime: Util.RuntimeOptions): DescribeDcdnDeliverListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deliverId)) {
    query['DeliverId'] = request.deliverId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnDeliverList',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnDeliverList(request: DescribeDcdnDeliverListRequest): DescribeDcdnDeliverListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDeliverListWithOptions(request, runtime);
}

model DescribeDcdnDomainBpsDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainBpsDataResponseBody = {
  bpsDataPerInterval?: {
    dataModule?: [ 
    {
      bps?: float(name='Bps'),
      dynamicHttpBps?: float(name='DynamicHttpBps'),
      dynamicHttpsBps?: float(name='DynamicHttpsBps'),
      staticHttpBps?: float(name='StaticHttpBps'),
      staticHttpsBps?: float(name='StaticHttpsBps'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='BpsDataPerInterval'),
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainBpsDataResponseBody(name='body'),
}

async function describeDcdnDomainBpsDataWithOptions(request: DescribeDcdnDomainBpsDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainBpsDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ispNameEn)) {
    query['IspNameEn'] = request.ispNameEn;
  }
  if (!Util.isUnset(request.locationNameEn)) {
    query['LocationNameEn'] = request.locationNameEn;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnDomainBpsData',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnDomainBpsData(request: DescribeDcdnDomainBpsDataRequest): DescribeDcdnDomainBpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainBpsDataWithOptions(request, runtime);
}

model DescribeDcdnDomainBpsDataByLayerRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ispNameEn?: string(name='IspNameEn'),
  layer?: string(name='Layer'),
  locationNameEn?: string(name='LocationNameEn'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainBpsDataByLayerResponseBody = {
  bpsDataInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      trafficValue?: string(name='TrafficValue'),
      value?: string(name='Value'),
    }
  ](name='DataModule')
  }(name='BpsDataInterval'),
  dataInterval?: string(name='DataInterval'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnDomainBpsDataByLayerResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainBpsDataByLayerResponseBody(name='body'),
}

async function describeDcdnDomainBpsDataByLayerWithOptions(request: DescribeDcdnDomainBpsDataByLayerRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainBpsDataByLayerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ispNameEn)) {
    query['IspNameEn'] = request.ispNameEn;
  }
  if (!Util.isUnset(request.layer)) {
    query['Layer'] = request.layer;
  }
  if (!Util.isUnset(request.locationNameEn)) {
    query['LocationNameEn'] = request.locationNameEn;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnDomainBpsDataByLayer',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnDomainBpsDataByLayer(request: DescribeDcdnDomainBpsDataByLayerRequest): DescribeDcdnDomainBpsDataByLayerResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainBpsDataByLayerWithOptions(request, runtime);
}

model DescribeDcdnDomainByCertificateRequest {
  ownerId?: long(name='OwnerId'),
  SSLPub?: string(name='SSLPub'),
}

model DescribeDcdnDomainByCertificateResponseBody = {
  certInfos?: {
    certInfo?: [ 
    {
      certCaIsLegacy?: string(name='CertCaIsLegacy'),
      certExpireTime?: string(name='CertExpireTime'),
      certExpired?: string(name='CertExpired'),
      certStartTime?: string(name='CertStartTime'),
      certSubjectCommonName?: string(name='CertSubjectCommonName'),
      certType?: string(name='CertType'),
      domainList?: string(name='DomainList'),
      domainNames?: string(name='DomainNames'),
      issuer?: string(name='Issuer'),
    }
  ](name='CertInfo')
  }(name='CertInfos'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnDomainByCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainByCertificateResponseBody(name='body'),
}

async function describeDcdnDomainByCertificateWithOptions(request: DescribeDcdnDomainByCertificateRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainByCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.SSLPub)) {
    query['SSLPub'] = request.SSLPub;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnDomainByCertificate',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnDomainByCertificate(request: DescribeDcdnDomainByCertificateRequest): DescribeDcdnDomainByCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainByCertificateWithOptions(request, runtime);
}

model DescribeDcdnDomainCcActivityLogRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  ruleName?: string(name='RuleName'),
  startTime?: string(name='StartTime'),
  triggerObject?: string(name='TriggerObject'),
  value?: string(name='Value'),
}

model DescribeDcdnDomainCcActivityLogResponseBody = {
  activityLog?: [ 
    {
      action?: string(name='Action'),
      domainName?: string(name='DomainName'),
      ruleName?: string(name='RuleName'),
      timeStamp?: string(name='TimeStamp'),
      triggerObject?: string(name='TriggerObject'),
      ttl?: long(name='Ttl'),
      value?: string(name='Value'),
    }
  ](name='ActivityLog'),
  pageIndex?: long(name='PageIndex'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model DescribeDcdnDomainCcActivityLogResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainCcActivityLogResponseBody(name='body'),
}

async function describeDcdnDomainCcActivityLogWithOptions(request: DescribeDcdnDomainCcActivityLogRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainCcActivityLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.triggerObject)) {
    query['TriggerObject'] = request.triggerObject;
  }
  if (!Util.isUnset(request.value)) {
    query['Value'] = request.value;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnDomainCcActivityLog',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnDomainCcActivityLog(request: DescribeDcdnDomainCcActivityLogRequest): DescribeDcdnDomainCcActivityLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainCcActivityLogWithOptions(request, runtime);
}

model DescribeDcdnDomainCertificateInfoRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
}

model DescribeDcdnDomainCertificateInfoResponseBody = {
  certInfos?: {
    certInfo?: [ 
    {
      certDomainName?: string(name='CertDomainName'),
      certExpireTime?: string(name='CertExpireTime'),
      certLife?: string(name='CertLife'),
      certName?: string(name='CertName'),
      certOrg?: string(name='CertOrg'),
      certType?: string(name='CertType'),
      domainName?: string(name='DomainName'),
      SSLProtocol?: string(name='SSLProtocol'),
      SSLPub?: string(name='SSLPub'),
      status?: string(name='Status'),
    }
  ](name='CertInfo')
  }(name='CertInfos'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnDomainCertificateInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainCertificateInfoResponseBody(name='body'),
}

async function describeDcdnDomainCertificateInfoWithOptions(request: DescribeDcdnDomainCertificateInfoRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainCertificateInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnDomainCertificateInfo',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnDomainCertificateInfo(request: DescribeDcdnDomainCertificateInfoRequest): DescribeDcdnDomainCertificateInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainCertificateInfoWithOptions(request, runtime);
}

model DescribeDcdnDomainCnameRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
}

model DescribeDcdnDomainCnameResponseBody = {
  cnameDatas?: {
    data?: [ 
    {
      cname?: string(name='Cname'),
      domain?: string(name='Domain'),
      status?: int32(name='Status'),
    }
  ](name='Data')
  }(name='CnameDatas'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnDomainCnameResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainCnameResponseBody(name='body'),
}

async function describeDcdnDomainCnameWithOptions(request: DescribeDcdnDomainCnameRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainCnameResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnDomainCname',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnDomainCname(request: DescribeDcdnDomainCnameRequest): DescribeDcdnDomainCnameResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainCnameWithOptions(request, runtime);
}

model DescribeDcdnDomainConfigsRequest {
  configId?: string(name='ConfigId'),
  domainName?: string(name='DomainName'),
  functionNames?: string(name='FunctionNames'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeDcdnDomainConfigsResponseBody = {
  domainConfigs?: {
    domainConfig?: [ 
    {
      configId?: string(name='ConfigId'),
      functionArgs?: {
        functionArg?: [ 
        {
          argName?: string(name='ArgName'),
          argValue?: string(name='ArgValue'),
        }
      ](name='FunctionArg')
      }(name='FunctionArgs'),
      functionName?: string(name='FunctionName'),
      status?: string(name='Status'),
    }
  ](name='DomainConfig')
  }(name='DomainConfigs'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnDomainConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainConfigsResponseBody(name='body'),
}

async function describeDcdnDomainConfigsWithOptions(request: DescribeDcdnDomainConfigsRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainConfigsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.functionNames)) {
    query['FunctionNames'] = request.functionNames;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnDomainConfigs',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnDomainConfigs(request: DescribeDcdnDomainConfigsRequest): DescribeDcdnDomainConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainConfigsWithOptions(request, runtime);
}

model DescribeDcdnDomainDetailRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeDcdnDomainDetailResponseBody = {
  domainDetail?: {
    certName?: string(name='CertName'),
    cname?: string(name='Cname'),
    description?: string(name='Description'),
    domainName?: string(name='DomainName'),
    domainStatus?: string(name='DomainStatus'),
    gmtCreated?: string(name='GmtCreated'),
    gmtModified?: string(name='GmtModified'),
    resourceGroupId?: string(name='ResourceGroupId'),
    SSLProtocol?: string(name='SSLProtocol'),
    SSLPub?: string(name='SSLPub'),
    scope?: string(name='Scope'),
    sources?: {
      source?: [ 
      {
        content?: string(name='Content'),
        enabled?: string(name='Enabled'),
        port?: int32(name='Port'),
        priority?: string(name='Priority'),
        type?: string(name='Type'),
        weight?: string(name='Weight'),
      }
    ](name='Source')
    }(name='Sources'),
  }(name='DomainDetail'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnDomainDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainDetailResponseBody(name='body'),
}

async function describeDcdnDomainDetailWithOptions(request: DescribeDcdnDomainDetailRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnDomainDetail',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnDomainDetail(request: DescribeDcdnDomainDetailRequest): DescribeDcdnDomainDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainDetailWithOptions(request, runtime);
}

model DescribeDcdnDomainHitRateDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainHitRateDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  hitRatePerInterval?: {
    dataModule?: [ 
    {
      byteHitRate?: float(name='ByteHitRate'),
      reqHitRate?: float(name='ReqHitRate'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='HitRatePerInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainHitRateDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainHitRateDataResponseBody(name='body'),
}

async function describeDcdnDomainHitRateDataWithOptions(request: DescribeDcdnDomainHitRateDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainHitRateDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnDomainHitRateData',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnDomainHitRateData(request: DescribeDcdnDomainHitRateDataRequest): DescribeDcdnDomainHitRateDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainHitRateDataWithOptions(request, runtime);
}

model DescribeDcdnDomainHttpCodeDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainHttpCodeDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  dataPerInterval?: {
    dataModule?: [ 
    {
      httpCodeDataPerInterval?: {
        httpCodeDataModule?: [ 
        {
          code?: int32(name='Code'),
          count?: float(name='Count'),
          proportion?: float(name='Proportion'),
        }
      ](name='HttpCodeDataModule')
      }(name='HttpCodeDataPerInterval'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='DataPerInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainHttpCodeDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainHttpCodeDataResponseBody(name='body'),
}

async function describeDcdnDomainHttpCodeDataWithOptions(request: DescribeDcdnDomainHttpCodeDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainHttpCodeDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ispNameEn)) {
    query['IspNameEn'] = request.ispNameEn;
  }
  if (!Util.isUnset(request.locationNameEn)) {
    query['LocationNameEn'] = request.locationNameEn;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnDomainHttpCodeData',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnDomainHttpCodeData(request: DescribeDcdnDomainHttpCodeDataRequest): DescribeDcdnDomainHttpCodeDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainHttpCodeDataWithOptions(request, runtime);
}

model DescribeDcdnDomainHttpCodeDataByLayerRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ispNameEn?: string(name='IspNameEn'),
  layer?: string(name='Layer'),
  locationNameEn?: string(name='LocationNameEn'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainHttpCodeDataByLayerResponseBody = {
  dataInterval?: string(name='DataInterval'),
  httpCodeDataInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      totalValue?: string(name='TotalValue'),
      value?: string(name='Value'),
    }
  ](name='DataModule')
  }(name='HttpCodeDataInterval'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnDomainHttpCodeDataByLayerResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainHttpCodeDataByLayerResponseBody(name='body'),
}

async function describeDcdnDomainHttpCodeDataByLayerWithOptions(request: DescribeDcdnDomainHttpCodeDataByLayerRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainHttpCodeDataByLayerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ispNameEn)) {
    query['IspNameEn'] = request.ispNameEn;
  }
  if (!Util.isUnset(request.layer)) {
    query['Layer'] = request.layer;
  }
  if (!Util.isUnset(request.locationNameEn)) {
    query['LocationNameEn'] = request.locationNameEn;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnDomainHttpCodeDataByLayer',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnDomainHttpCodeDataByLayer(request: DescribeDcdnDomainHttpCodeDataByLayerRequest): DescribeDcdnDomainHttpCodeDataByLayerResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainHttpCodeDataByLayerWithOptions(request, runtime);
}

model DescribeDcdnDomainIpaBpsDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  fixTimeGap?: string(name='FixTimeGap'),
  interval?: string(name='Interval'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
  timeMerge?: string(name='TimeMerge'),
}

model DescribeDcdnDomainIpaBpsDataResponseBody = {
  bpsDataPerInterval?: {
    dataModule?: [ 
    {
      ipaBps?: float(name='IpaBps'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='BpsDataPerInterval'),
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainIpaBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainIpaBpsDataResponseBody(name='body'),
}

async function describeDcdnDomainIpaBpsDataWithOptions(request: DescribeDcdnDomainIpaBpsDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainIpaBpsDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.fixTimeGap)) {
    query['FixTimeGap'] = request.fixTimeGap;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ispNameEn)) {
    query['IspNameEn'] = request.ispNameEn;
  }
  if (!Util.isUnset(request.locationNameEn)) {
    query['LocationNameEn'] = request.locationNameEn;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.timeMerge)) {
    query['TimeMerge'] = request.timeMerge;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnDomainIpaBpsData',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnDomainIpaBpsData(request: DescribeDcdnDomainIpaBpsDataRequest): DescribeDcdnDomainIpaBpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainIpaBpsDataWithOptions(request, runtime);
}

model DescribeDcdnDomainIpaTrafficDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  fixTimeGap?: string(name='FixTimeGap'),
  interval?: string(name='Interval'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
  timeMerge?: string(name='TimeMerge'),
}

model DescribeDcdnDomainIpaTrafficDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  trafficDataPerInterval?: {
    dataModule?: [ 
    {
      ipaTraffic?: float(name='IpaTraffic'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='TrafficDataPerInterval'),
}

model DescribeDcdnDomainIpaTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainIpaTrafficDataResponseBody(name='body'),
}

async function describeDcdnDomainIpaTrafficDataWithOptions(request: DescribeDcdnDomainIpaTrafficDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainIpaTrafficDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.fixTimeGap)) {
    query['FixTimeGap'] = request.fixTimeGap;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ispNameEn)) {
    query['IspNameEn'] = request.ispNameEn;
  }
  if (!Util.isUnset(request.locationNameEn)) {
    query['LocationNameEn'] = request.locationNameEn;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.timeMerge)) {
    query['TimeMerge'] = request.timeMerge;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnDomainIpaTrafficData',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnDomainIpaTrafficData(request: DescribeDcdnDomainIpaTrafficDataRequest): DescribeDcdnDomainIpaTrafficDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainIpaTrafficDataWithOptions(request, runtime);
}

model DescribeDcdnDomainIspDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainIspDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  value?: {
    ispProportionData?: [ 
    {
      avgObjectSize?: string(name='AvgObjectSize'),
      avgResponseRate?: string(name='AvgResponseRate'),
      avgResponseTime?: string(name='AvgResponseTime'),
      bps?: string(name='Bps'),
      bytesProportion?: string(name='BytesProportion'),
      isp?: string(name='Isp'),
      ispEname?: string(name='IspEname'),
      proportion?: string(name='Proportion'),
      qps?: string(name='Qps'),
      totalBytes?: string(name='TotalBytes'),
      totalQuery?: string(name='TotalQuery'),
    }
  ](name='IspProportionData')
  }(name='Value'),
}

model DescribeDcdnDomainIspDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainIspDataResponseBody(name='body'),
}

async function describeDcdnDomainIspDataWithOptions(request: DescribeDcdnDomainIspDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainIspDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnDomainIspData',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnDomainIspData(request: DescribeDcdnDomainIspDataRequest): DescribeDcdnDomainIspDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainIspDataWithOptions(request, runtime);
}

model DescribeDcdnDomainLogRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainLogResponseBody = {
  domainLogDetails?: {
    domainLogDetail?: [ 
    {
      logCount?: long(name='LogCount'),
      logInfos?: {
        logInfoDetail?: [ 
        {
          endTime?: string(name='EndTime'),
          logName?: string(name='LogName'),
          logPath?: string(name='LogPath'),
          logSize?: long(name='LogSize'),
          startTime?: string(name='StartTime'),
        }
      ](name='LogInfoDetail')
      }(name='LogInfos'),
      pageInfos?: {
        pageIndex?: long(name='PageIndex'),
        pageSize?: long(name='PageSize'),
        total?: long(name='Total'),
      }(name='PageInfos'),
    }
  ](name='DomainLogDetail')
  }(name='DomainLogDetails'),
  domainName?: string(name='DomainName'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnDomainLogResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainLogResponseBody(name='body'),
}

async function describeDcdnDomainLogWithOptions(request: DescribeDcdnDomainLogRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnDomainLog',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnDomainLog(request: DescribeDcdnDomainLogRequest): DescribeDcdnDomainLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainLogWithOptions(request, runtime);
}

model DescribeDcdnDomainMultiUsageDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainMultiUsageDataResponseBody = {
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  requestPerInterval?: {
    requestDataModule?: [ 
    {
      domain?: string(name='Domain'),
      request?: long(name='Request'),
      timeStamp?: string(name='TimeStamp'),
      type?: string(name='Type'),
    }
  ](name='RequestDataModule')
  }(name='RequestPerInterval'),
  startTime?: string(name='StartTime'),
  trafficPerInterval?: {
    trafficDataModule?: [ 
    {
      area?: string(name='Area'),
      bps?: float(name='Bps'),
      domain?: string(name='Domain'),
      timeStamp?: string(name='TimeStamp'),
      type?: string(name='Type'),
    }
  ](name='TrafficDataModule')
  }(name='TrafficPerInterval'),
}

model DescribeDcdnDomainMultiUsageDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainMultiUsageDataResponseBody(name='body'),
}

async function describeDcdnDomainMultiUsageDataWithOptions(request: DescribeDcdnDomainMultiUsageDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainMultiUsageDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnDomainMultiUsageData',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnDomainMultiUsageData(request: DescribeDcdnDomainMultiUsageDataRequest): DescribeDcdnDomainMultiUsageDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainMultiUsageDataWithOptions(request, runtime);
}

model DescribeDcdnDomainOriginBpsDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainOriginBpsDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  originBpsDataPerInterval?: {
    dataModule?: [ 
    {
      dynamicHttpOriginBps?: float(name='DynamicHttpOriginBps'),
      dynamicHttpsOriginBps?: float(name='DynamicHttpsOriginBps'),
      originBps?: float(name='OriginBps'),
      staticHttpOriginBps?: float(name='StaticHttpOriginBps'),
      staticHttpsOriginBps?: float(name='StaticHttpsOriginBps'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='OriginBpsDataPerInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainOriginBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainOriginBpsDataResponseBody(name='body'),
}

async function describeDcdnDomainOriginBpsDataWithOptions(request: DescribeDcdnDomainOriginBpsDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainOriginBpsDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnDomainOriginBpsData',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnDomainOriginBpsData(request: DescribeDcdnDomainOriginBpsDataRequest): DescribeDcdnDomainOriginBpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainOriginBpsDataWithOptions(request, runtime);
}

model DescribeDcdnDomainOriginTrafficDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainOriginTrafficDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  originTrafficDataPerInterval?: {
    dataModule?: [ 
    {
      dynamicHttpOriginTraffic?: float(name='DynamicHttpOriginTraffic'),
      dynamicHttpsOriginTraffic?: float(name='DynamicHttpsOriginTraffic'),
      originTraffic?: float(name='OriginTraffic'),
      staticHttpOriginTraffic?: float(name='StaticHttpOriginTraffic'),
      staticHttpsOriginTraffic?: float(name='StaticHttpsOriginTraffic'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='OriginTrafficDataPerInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainOriginTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainOriginTrafficDataResponseBody(name='body'),
}

async function describeDcdnDomainOriginTrafficDataWithOptions(request: DescribeDcdnDomainOriginTrafficDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainOriginTrafficDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnDomainOriginTrafficData',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnDomainOriginTrafficData(request: DescribeDcdnDomainOriginTrafficDataRequest): DescribeDcdnDomainOriginTrafficDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainOriginTrafficDataWithOptions(request, runtime);
}

model DescribeDcdnDomainPropertyRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
}

model DescribeDcdnDomainPropertyResponseBody = {
  domainName?: string(name='DomainName'),
  protocol?: string(name='Protocol'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnDomainPropertyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainPropertyResponseBody(name='body'),
}

async function describeDcdnDomainPropertyWithOptions(request: DescribeDcdnDomainPropertyRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainPropertyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnDomainProperty',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnDomainProperty(request: DescribeDcdnDomainPropertyRequest): DescribeDcdnDomainPropertyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainPropertyWithOptions(request, runtime);
}

model DescribeDcdnDomainPvDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainPvDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  pvDataInterval?: {
    usageData?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='UsageData')
  }(name='PvDataInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainPvDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainPvDataResponseBody(name='body'),
}

async function describeDcdnDomainPvDataWithOptions(request: DescribeDcdnDomainPvDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainPvDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnDomainPvData',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnDomainPvData(request: DescribeDcdnDomainPvDataRequest): DescribeDcdnDomainPvDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainPvDataWithOptions(request, runtime);
}

model DescribeDcdnDomainQpsDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainQpsDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  qpsDataPerInterval?: {
    dataModule?: [ 
    {
      acc?: float(name='Acc'),
      dynamicHttpAcc?: float(name='DynamicHttpAcc'),
      dynamicHttpQps?: float(name='DynamicHttpQps'),
      dynamicHttpsAcc?: float(name='DynamicHttpsAcc'),
      dynamicHttpsQps?: float(name='DynamicHttpsQps'),
      qps?: float(name='Qps'),
      staticHttpAcc?: float(name='StaticHttpAcc'),
      staticHttpQps?: float(name='StaticHttpQps'),
      staticHttpsAcc?: float(name='StaticHttpsAcc'),
      staticHttpsQps?: float(name='StaticHttpsQps'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataModule')
  }(name='QpsDataPerInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainQpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainQpsDataResponseBody(name='body'),
}

async function describeDcdnDomainQpsDataWithOptions(request: DescribeDcdnDomainQpsDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainQpsDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ispNameEn)) {
    query['IspNameEn'] = request.ispNameEn;
  }
  if (!Util.isUnset(request.locationNameEn)) {
    query['LocationNameEn'] = request.locationNameEn;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnDomainQpsData',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnDomainQpsData(request: DescribeDcdnDomainQpsDataRequest): DescribeDcdnDomainQpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainQpsDataWithOptions(request, runtime);
}

model DescribeDcdnDomainQpsDataByLayerRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ispNameEn?: string(name='IspNameEn'),
  layer?: string(name='Layer'),
  locationNameEn?: string(name='LocationNameEn'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainQpsDataByLayerResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  layer?: string(name='Layer'),
  qpsDataInterval?: {
    dataModule?: [ 
    {
      accDomesticValue?: string(name='AccDomesticValue'),
      accOverseasValue?: string(name='AccOverseasValue'),
      accValue?: string(name='AccValue'),
      domesticValue?: string(name='DomesticValue'),
      overseasValue?: string(name='OverseasValue'),
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='DataModule')
  }(name='QpsDataInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainQpsDataByLayerResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainQpsDataByLayerResponseBody(name='body'),
}

async function describeDcdnDomainQpsDataByLayerWithOptions(request: DescribeDcdnDomainQpsDataByLayerRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainQpsDataByLayerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ispNameEn)) {
    query['IspNameEn'] = request.ispNameEn;
  }
  if (!Util.isUnset(request.layer)) {
    query['Layer'] = request.layer;
  }
  if (!Util.isUnset(request.locationNameEn)) {
    query['LocationNameEn'] = request.locationNameEn;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnDomainQpsDataByLayer',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnDomainQpsDataByLayer(request: DescribeDcdnDomainQpsDataByLayerRequest): DescribeDcdnDomainQpsDataByLayerResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainQpsDataByLayerWithOptions(request, runtime);
}

model DescribeDcdnDomainRealTimeBpsDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainRealTimeBpsDataResponseBody = {
  data?: {
    bpsModel?: [ 
    {
      bps?: float(name='Bps'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='BpsModel')
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnDomainRealTimeBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainRealTimeBpsDataResponseBody(name='body'),
}

async function describeDcdnDomainRealTimeBpsDataWithOptions(request: DescribeDcdnDomainRealTimeBpsDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainRealTimeBpsDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnDomainRealTimeBpsData',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnDomainRealTimeBpsData(request: DescribeDcdnDomainRealTimeBpsDataRequest): DescribeDcdnDomainRealTimeBpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainRealTimeBpsDataWithOptions(request, runtime);
}

model DescribeDcdnDomainRealTimeByteHitRateDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainRealTimeByteHitRateDataResponseBody = {
  data?: {
    byteHitRateDataModel?: [ 
    {
      byteHitRate?: float(name='ByteHitRate'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='ByteHitRateDataModel')
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnDomainRealTimeByteHitRateDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainRealTimeByteHitRateDataResponseBody(name='body'),
}

async function describeDcdnDomainRealTimeByteHitRateDataWithOptions(request: DescribeDcdnDomainRealTimeByteHitRateDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainRealTimeByteHitRateDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnDomainRealTimeByteHitRateData',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnDomainRealTimeByteHitRateData(request: DescribeDcdnDomainRealTimeByteHitRateDataRequest): DescribeDcdnDomainRealTimeByteHitRateDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainRealTimeByteHitRateDataWithOptions(request, runtime);
}

model DescribeDcdnDomainRealTimeDetailDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  field?: string(name='Field'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
  merge?: string(name='Merge'),
  mergeLocIsp?: string(name='MergeLocIsp'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainRealTimeDetailDataResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnDomainRealTimeDetailDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainRealTimeDetailDataResponseBody(name='body'),
}

async function describeDcdnDomainRealTimeDetailDataWithOptions(request: DescribeDcdnDomainRealTimeDetailDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainRealTimeDetailDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnDomainRealTimeDetailData',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnDomainRealTimeDetailData(request: DescribeDcdnDomainRealTimeDetailDataRequest): DescribeDcdnDomainRealTimeDetailDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainRealTimeDetailDataWithOptions(request, runtime);
}

model DescribeDcdnDomainRealTimeHttpCodeDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainRealTimeHttpCodeDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  realTimeHttpCodeData?: {
    usageData?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: {
        realTimeCodeProportionData?: [ 
        {
          code?: string(name='Code'),
          count?: string(name='Count'),
          proportion?: string(name='Proportion'),
        }
      ](name='RealTimeCodeProportionData')
      }(name='Value'),
    }
  ](name='UsageData')
  }(name='RealTimeHttpCodeData'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainRealTimeHttpCodeDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainRealTimeHttpCodeDataResponseBody(name='body'),
}

async function describeDcdnDomainRealTimeHttpCodeDataWithOptions(request: DescribeDcdnDomainRealTimeHttpCodeDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainRealTimeHttpCodeDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ispNameEn)) {
    query['IspNameEn'] = request.ispNameEn;
  }
  if (!Util.isUnset(request.locationNameEn)) {
    query['LocationNameEn'] = request.locationNameEn;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnDomainRealTimeHttpCodeData',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnDomainRealTimeHttpCodeData(request: DescribeDcdnDomainRealTimeHttpCodeDataRequest): DescribeDcdnDomainRealTimeHttpCodeDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainRealTimeHttpCodeDataWithOptions(request, runtime);
}

model DescribeDcdnDomainRealTimeQpsDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainRealTimeQpsDataResponseBody = {
  data?: {
    qpsModel?: [ 
    {
      qps?: float(name='Qps'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='QpsModel')
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnDomainRealTimeQpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainRealTimeQpsDataResponseBody(name='body'),
}

async function describeDcdnDomainRealTimeQpsDataWithOptions(request: DescribeDcdnDomainRealTimeQpsDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainRealTimeQpsDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnDomainRealTimeQpsData',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnDomainRealTimeQpsData(request: DescribeDcdnDomainRealTimeQpsDataRequest): DescribeDcdnDomainRealTimeQpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainRealTimeQpsDataWithOptions(request, runtime);
}

model DescribeDcdnDomainRealTimeReqHitRateDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainRealTimeReqHitRateDataResponseBody = {
  data?: {
    reqHitRateDataModel?: [ 
    {
      reqHitRate?: float(name='ReqHitRate'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='ReqHitRateDataModel')
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnDomainRealTimeReqHitRateDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainRealTimeReqHitRateDataResponseBody(name='body'),
}

async function describeDcdnDomainRealTimeReqHitRateDataWithOptions(request: DescribeDcdnDomainRealTimeReqHitRateDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainRealTimeReqHitRateDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnDomainRealTimeReqHitRateData',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnDomainRealTimeReqHitRateData(request: DescribeDcdnDomainRealTimeReqHitRateDataRequest): DescribeDcdnDomainRealTimeReqHitRateDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainRealTimeReqHitRateDataWithOptions(request, runtime);
}

model DescribeDcdnDomainRealTimeSrcBpsDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainRealTimeSrcBpsDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  realTimeSrcBpsDataPerInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='DataModule')
  }(name='RealTimeSrcBpsDataPerInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainRealTimeSrcBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainRealTimeSrcBpsDataResponseBody(name='body'),
}

async function describeDcdnDomainRealTimeSrcBpsDataWithOptions(request: DescribeDcdnDomainRealTimeSrcBpsDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainRealTimeSrcBpsDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnDomainRealTimeSrcBpsData',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnDomainRealTimeSrcBpsData(request: DescribeDcdnDomainRealTimeSrcBpsDataRequest): DescribeDcdnDomainRealTimeSrcBpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainRealTimeSrcBpsDataWithOptions(request, runtime);
}

model DescribeDcdnDomainRealTimeSrcHttpCodeDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainRealTimeSrcHttpCodeDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  realTimeSrcHttpCodeData?: {
    usageData?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: {
        realTimeSrcCodeProportionData?: [ 
        {
          code?: string(name='Code'),
          count?: string(name='Count'),
          proportion?: string(name='Proportion'),
        }
      ](name='RealTimeSrcCodeProportionData')
      }(name='Value'),
    }
  ](name='UsageData')
  }(name='RealTimeSrcHttpCodeData'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainRealTimeSrcHttpCodeDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainRealTimeSrcHttpCodeDataResponseBody(name='body'),
}

async function describeDcdnDomainRealTimeSrcHttpCodeDataWithOptions(request: DescribeDcdnDomainRealTimeSrcHttpCodeDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainRealTimeSrcHttpCodeDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ispNameEn)) {
    query['IspNameEn'] = request.ispNameEn;
  }
  if (!Util.isUnset(request.locationNameEn)) {
    query['LocationNameEn'] = request.locationNameEn;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnDomainRealTimeSrcHttpCodeData',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnDomainRealTimeSrcHttpCodeData(request: DescribeDcdnDomainRealTimeSrcHttpCodeDataRequest): DescribeDcdnDomainRealTimeSrcHttpCodeDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainRealTimeSrcHttpCodeDataWithOptions(request, runtime);
}

model DescribeDcdnDomainRealTimeSrcTrafficDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainRealTimeSrcTrafficDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  realTimeSrcTrafficDataPerInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='DataModule')
  }(name='RealTimeSrcTrafficDataPerInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainRealTimeSrcTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainRealTimeSrcTrafficDataResponseBody(name='body'),
}

async function describeDcdnDomainRealTimeSrcTrafficDataWithOptions(request: DescribeDcdnDomainRealTimeSrcTrafficDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainRealTimeSrcTrafficDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnDomainRealTimeSrcTrafficData',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnDomainRealTimeSrcTrafficData(request: DescribeDcdnDomainRealTimeSrcTrafficDataRequest): DescribeDcdnDomainRealTimeSrcTrafficDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainRealTimeSrcTrafficDataWithOptions(request, runtime);
}

model DescribeDcdnDomainRealTimeTrafficDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainRealTimeTrafficDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  realTimeTrafficDataPerInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='DataModule')
  }(name='RealTimeTrafficDataPerInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainRealTimeTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainRealTimeTrafficDataResponseBody(name='body'),
}

async function describeDcdnDomainRealTimeTrafficDataWithOptions(request: DescribeDcdnDomainRealTimeTrafficDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainRealTimeTrafficDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnDomainRealTimeTrafficData',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnDomainRealTimeTrafficData(request: DescribeDcdnDomainRealTimeTrafficDataRequest): DescribeDcdnDomainRealTimeTrafficDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainRealTimeTrafficDataWithOptions(request, runtime);
}

model DescribeDcdnDomainRegionDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainRegionDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  value?: {
    regionProportionData?: [ 
    {
      avgObjectSize?: string(name='AvgObjectSize'),
      avgResponseRate?: string(name='AvgResponseRate'),
      avgResponseTime?: string(name='AvgResponseTime'),
      bps?: string(name='Bps'),
      bytesProportion?: string(name='BytesProportion'),
      proportion?: string(name='Proportion'),
      qps?: string(name='Qps'),
      region?: string(name='Region'),
      regionEname?: string(name='RegionEname'),
      totalBytes?: string(name='TotalBytes'),
      totalQuery?: string(name='TotalQuery'),
    }
  ](name='RegionProportionData')
  }(name='Value'),
}

model DescribeDcdnDomainRegionDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainRegionDataResponseBody(name='body'),
}

async function describeDcdnDomainRegionDataWithOptions(request: DescribeDcdnDomainRegionDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainRegionDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnDomainRegionData',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnDomainRegionData(request: DescribeDcdnDomainRegionDataRequest): DescribeDcdnDomainRegionDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainRegionDataWithOptions(request, runtime);
}

model DescribeDcdnDomainStagingConfigRequest {
  domainName?: string(name='DomainName'),
  functionNames?: string(name='FunctionNames'),
  ownerId?: long(name='OwnerId'),
}

model DescribeDcdnDomainStagingConfigResponseBody = {
  domainConfigs?: [ 
    {
      configId?: string(name='ConfigId'),
      functionArgs?: [ 
        {
          argName?: string(name='ArgName'),
          argValue?: string(name='ArgValue'),
        }
      ](name='FunctionArgs'),
      functionName?: string(name='FunctionName'),
      status?: string(name='Status'),
    }
  ](name='DomainConfigs'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnDomainStagingConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainStagingConfigResponseBody(name='body'),
}

async function describeDcdnDomainStagingConfigWithOptions(request: DescribeDcdnDomainStagingConfigRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainStagingConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.functionNames)) {
    query['FunctionNames'] = request.functionNames;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnDomainStagingConfig',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnDomainStagingConfig(request: DescribeDcdnDomainStagingConfigRequest): DescribeDcdnDomainStagingConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainStagingConfigWithOptions(request, runtime);
}

model DescribeDcdnDomainTopReferVisitRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
  sortBy?: string(name='SortBy'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainTopReferVisitResponseBody = {
  domainName?: string(name='DomainName'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  topReferList?: {
    referList?: [ 
    {
      flow?: string(name='Flow'),
      flowProportion?: float(name='FlowProportion'),
      referDetail?: string(name='ReferDetail'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='ReferList')
  }(name='TopReferList'),
}

model DescribeDcdnDomainTopReferVisitResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainTopReferVisitResponseBody(name='body'),
}

async function describeDcdnDomainTopReferVisitWithOptions(request: DescribeDcdnDomainTopReferVisitRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainTopReferVisitResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnDomainTopReferVisit',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnDomainTopReferVisit(request: DescribeDcdnDomainTopReferVisitRequest): DescribeDcdnDomainTopReferVisitResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainTopReferVisitWithOptions(request, runtime);
}

model DescribeDcdnDomainTopUrlVisitRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
  sortBy?: string(name='SortBy'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainTopUrlVisitResponseBody = {
  allUrlList?: {
    urlList?: [ 
    {
      flow?: string(name='Flow'),
      flowProportion?: float(name='FlowProportion'),
      urlDetail?: string(name='UrlDetail'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='UrlList')
  }(name='AllUrlList'),
  domainName?: string(name='DomainName'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  url200List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow'),
      flowProportion?: float(name='FlowProportion'),
      urlDetail?: string(name='UrlDetail'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='UrlList')
  }(name='Url200List'),
  url300List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow'),
      flowProportion?: float(name='FlowProportion'),
      urlDetail?: string(name='UrlDetail'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='UrlList')
  }(name='Url300List'),
  url400List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow'),
      flowProportion?: float(name='FlowProportion'),
      urlDetail?: string(name='UrlDetail'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='UrlList')
  }(name='Url400List'),
  url500List?: {
    urlList?: [ 
    {
      flow?: string(name='Flow'),
      flowProportion?: float(name='FlowProportion'),
      urlDetail?: string(name='UrlDetail'),
      visitData?: string(name='VisitData'),
      visitProportion?: float(name='VisitProportion'),
    }
  ](name='UrlList')
  }(name='Url500List'),
}

model DescribeDcdnDomainTopUrlVisitResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainTopUrlVisitResponseBody(name='body'),
}

async function describeDcdnDomainTopUrlVisitWithOptions(request: DescribeDcdnDomainTopUrlVisitRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainTopUrlVisitResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnDomainTopUrlVisit',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnDomainTopUrlVisit(request: DescribeDcdnDomainTopUrlVisitRequest): DescribeDcdnDomainTopUrlVisitResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainTopUrlVisitWithOptions(request, runtime);
}

model DescribeDcdnDomainTrafficDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainTrafficDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  trafficDataPerInterval?: {
    dataModule?: [ 
    {
      dynamicHttpTraffic?: float(name='DynamicHttpTraffic'),
      dynamicHttpsTraffic?: float(name='DynamicHttpsTraffic'),
      staticHttpTraffic?: float(name='StaticHttpTraffic'),
      staticHttpsTraffic?: float(name='StaticHttpsTraffic'),
      timeStamp?: string(name='TimeStamp'),
      traffic?: float(name='Traffic'),
    }
  ](name='DataModule')
  }(name='TrafficDataPerInterval'),
}

model DescribeDcdnDomainTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainTrafficDataResponseBody(name='body'),
}

async function describeDcdnDomainTrafficDataWithOptions(request: DescribeDcdnDomainTrafficDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainTrafficDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ispNameEn)) {
    query['IspNameEn'] = request.ispNameEn;
  }
  if (!Util.isUnset(request.locationNameEn)) {
    query['LocationNameEn'] = request.locationNameEn;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnDomainTrafficData',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnDomainTrafficData(request: DescribeDcdnDomainTrafficDataRequest): DescribeDcdnDomainTrafficDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainTrafficDataWithOptions(request, runtime);
}

model DescribeDcdnDomainUsageDataRequest {
  area?: string(name='Area'),
  dataProtocol?: string(name='DataProtocol'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  field?: string(name='Field'),
  interval?: string(name='Interval'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainUsageDataResponseBody = {
  area?: string(name='Area'),
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  type?: string(name='Type'),
  usageDataPerInterval?: {
    dataModule?: [ 
    {
      peakTime?: string(name='PeakTime'),
      specialValue?: string(name='SpecialValue'),
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='DataModule')
  }(name='UsageDataPerInterval'),
}

model DescribeDcdnDomainUsageDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainUsageDataResponseBody(name='body'),
}

async function describeDcdnDomainUsageDataWithOptions(request: DescribeDcdnDomainUsageDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainUsageDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.area)) {
    query['Area'] = request.area;
  }
  if (!Util.isUnset(request.dataProtocol)) {
    query['DataProtocol'] = request.dataProtocol;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.field)) {
    query['Field'] = request.field;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnDomainUsageData',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnDomainUsageData(request: DescribeDcdnDomainUsageDataRequest): DescribeDcdnDomainUsageDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainUsageDataWithOptions(request, runtime);
}

model DescribeDcdnDomainUvDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainUvDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  uvDataInterval?: {
    usageData?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='UsageData')
  }(name='UvDataInterval'),
}

model DescribeDcdnDomainUvDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainUvDataResponseBody(name='body'),
}

async function describeDcdnDomainUvDataWithOptions(request: DescribeDcdnDomainUvDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainUvDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnDomainUvData',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnDomainUvData(request: DescribeDcdnDomainUvDataRequest): DescribeDcdnDomainUvDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainUvDataWithOptions(request, runtime);
}

model DescribeDcdnDomainWebsocketBpsDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainWebsocketBpsDataResponseBody = {
  bpsDataPerInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      websocketBps?: float(name='WebsocketBps'),
    }
  ](name='DataModule')
  }(name='BpsDataPerInterval'),
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainWebsocketBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainWebsocketBpsDataResponseBody(name='body'),
}

async function describeDcdnDomainWebsocketBpsDataWithOptions(request: DescribeDcdnDomainWebsocketBpsDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainWebsocketBpsDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ispNameEn)) {
    query['IspNameEn'] = request.ispNameEn;
  }
  if (!Util.isUnset(request.locationNameEn)) {
    query['LocationNameEn'] = request.locationNameEn;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnDomainWebsocketBpsData',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnDomainWebsocketBpsData(request: DescribeDcdnDomainWebsocketBpsDataRequest): DescribeDcdnDomainWebsocketBpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainWebsocketBpsDataWithOptions(request, runtime);
}

model DescribeDcdnDomainWebsocketHttpCodeDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainWebsocketHttpCodeDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  httpCodeDataPerInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      websocketHttpCode?: {
        httpCodeDataModule?: [ 
        {
          code?: int32(name='Code'),
          count?: float(name='Count'),
          proportion?: float(name='Proportion'),
        }
      ](name='HttpCodeDataModule')
      }(name='WebsocketHttpCode'),
    }
  ](name='DataModule')
  }(name='HttpCodeDataPerInterval'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainWebsocketHttpCodeDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainWebsocketHttpCodeDataResponseBody(name='body'),
}

async function describeDcdnDomainWebsocketHttpCodeDataWithOptions(request: DescribeDcdnDomainWebsocketHttpCodeDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainWebsocketHttpCodeDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ispNameEn)) {
    query['IspNameEn'] = request.ispNameEn;
  }
  if (!Util.isUnset(request.locationNameEn)) {
    query['LocationNameEn'] = request.locationNameEn;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnDomainWebsocketHttpCodeData',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnDomainWebsocketHttpCodeData(request: DescribeDcdnDomainWebsocketHttpCodeDataRequest): DescribeDcdnDomainWebsocketHttpCodeDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainWebsocketHttpCodeDataWithOptions(request, runtime);
}

model DescribeDcdnDomainWebsocketTrafficDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnDomainWebsocketTrafficDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  trafficDataPerInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      websocketTraffic?: float(name='WebsocketTraffic'),
    }
  ](name='DataModule')
  }(name='TrafficDataPerInterval'),
}

model DescribeDcdnDomainWebsocketTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnDomainWebsocketTrafficDataResponseBody(name='body'),
}

async function describeDcdnDomainWebsocketTrafficDataWithOptions(request: DescribeDcdnDomainWebsocketTrafficDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnDomainWebsocketTrafficDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.ispNameEn)) {
    query['IspNameEn'] = request.ispNameEn;
  }
  if (!Util.isUnset(request.locationNameEn)) {
    query['LocationNameEn'] = request.locationNameEn;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnDomainWebsocketTrafficData',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnDomainWebsocketTrafficData(request: DescribeDcdnDomainWebsocketTrafficDataRequest): DescribeDcdnDomainWebsocketTrafficDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnDomainWebsocketTrafficDataWithOptions(request, runtime);
}

model DescribeDcdnEsExceptionDataRequest {
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  ruleId?: string(name='RuleId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnEsExceptionDataResponseBody = {
  contents?: [ 
    {
      columns?: [ string ](name='Columns'),
      name?: string(name='Name'),
      points?: [ string ](name='Points'),
    }
  ](name='Contents'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnEsExceptionDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnEsExceptionDataResponseBody(name='body'),
}

async function describeDcdnEsExceptionDataWithOptions(request: DescribeDcdnEsExceptionDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnEsExceptionDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnEsExceptionData',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnEsExceptionData(request: DescribeDcdnEsExceptionDataRequest): DescribeDcdnEsExceptionDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnEsExceptionDataWithOptions(request, runtime);
}

model DescribeDcdnEsExecuteDataRequest {
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  ruleId?: string(name='RuleId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnEsExecuteDataResponseBody = {
  contents?: [ 
    {
      columns?: [ string ](name='Columns'),
      name?: string(name='Name'),
      points?: [ string ](name='Points'),
    }
  ](name='Contents'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnEsExecuteDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnEsExecuteDataResponseBody(name='body'),
}

async function describeDcdnEsExecuteDataWithOptions(request: DescribeDcdnEsExecuteDataRequest, runtime: Util.RuntimeOptions): DescribeDcdnEsExecuteDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnEsExecuteData',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnEsExecuteData(request: DescribeDcdnEsExecuteDataRequest): DescribeDcdnEsExecuteDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnEsExecuteDataWithOptions(request, runtime);
}

model DescribeDcdnHttpsDomainListRequest {
  keyword?: string(name='Keyword'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeDcdnHttpsDomainListResponseBody = {
  certInfos?: {
    certInfo?: [ 
    {
      certCommonName?: string(name='CertCommonName'),
      certExpireTime?: string(name='CertExpireTime'),
      certName?: string(name='CertName'),
      certStartTime?: string(name='CertStartTime'),
      certStatus?: string(name='CertStatus'),
      certType?: string(name='CertType'),
      certUpdateTime?: string(name='CertUpdateTime'),
      domainName?: string(name='DomainName'),
    }
  ](name='CertInfo')
  }(name='CertInfos'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDcdnHttpsDomainListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnHttpsDomainListResponseBody(name='body'),
}

async function describeDcdnHttpsDomainListWithOptions(request: DescribeDcdnHttpsDomainListRequest, runtime: Util.RuntimeOptions): DescribeDcdnHttpsDomainListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnHttpsDomainList',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnHttpsDomainList(request: DescribeDcdnHttpsDomainListRequest): DescribeDcdnHttpsDomainListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnHttpsDomainListWithOptions(request, runtime);
}

model DescribeDcdnIpInfoRequest {
  IP?: string(name='IP'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeDcdnIpInfoResponseBody = {
  dcdnIp?: string(name='DcdnIp'),
  ISP?: string(name='ISP'),
  ispEname?: string(name='IspEname'),
  region?: string(name='Region'),
  regionEname?: string(name='RegionEname'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnIpInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnIpInfoResponseBody(name='body'),
}

async function describeDcdnIpInfoWithOptions(request: DescribeDcdnIpInfoRequest, runtime: Util.RuntimeOptions): DescribeDcdnIpInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.IP)) {
    query['IP'] = request.IP;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnIpInfo',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnIpInfo(request: DescribeDcdnIpInfoRequest): DescribeDcdnIpInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnIpInfoWithOptions(request, runtime);
}

model DescribeDcdnIpaDomainConfigsRequest {
  domainName?: string(name='DomainName'),
  functionNames?: string(name='FunctionNames'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeDcdnIpaDomainConfigsResponseBody = {
  domainConfigs?: {
    domainConfig?: [ 
    {
      configId?: string(name='ConfigId'),
      functionArgs?: {
        functionArg?: [ 
        {
          argName?: string(name='ArgName'),
          argValue?: string(name='ArgValue'),
        }
      ](name='FunctionArg')
      }(name='FunctionArgs'),
      functionName?: string(name='FunctionName'),
      status?: string(name='Status'),
    }
  ](name='DomainConfig')
  }(name='DomainConfigs'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnIpaDomainConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnIpaDomainConfigsResponseBody(name='body'),
}

async function describeDcdnIpaDomainConfigsWithOptions(request: DescribeDcdnIpaDomainConfigsRequest, runtime: Util.RuntimeOptions): DescribeDcdnIpaDomainConfigsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.functionNames)) {
    query['FunctionNames'] = request.functionNames;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnIpaDomainConfigs',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnIpaDomainConfigs(request: DescribeDcdnIpaDomainConfigsRequest): DescribeDcdnIpaDomainConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnIpaDomainConfigsWithOptions(request, runtime);
}

model DescribeDcdnIpaDomainDetailRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeDcdnIpaDomainDetailResponseBody = {
  domainDetail?: {
    certName?: string(name='CertName'),
    cname?: string(name='Cname'),
    description?: string(name='Description'),
    domainName?: string(name='DomainName'),
    domainStatus?: string(name='DomainStatus'),
    gmtCreated?: string(name='GmtCreated'),
    gmtModified?: string(name='GmtModified'),
    resourceGroupId?: string(name='ResourceGroupId'),
    SSLProtocol?: string(name='SSLProtocol'),
    SSLPub?: string(name='SSLPub'),
    scope?: string(name='Scope'),
    sources?: {
      source?: [ 
      {
        content?: string(name='Content'),
        enabled?: string(name='Enabled'),
        port?: int32(name='Port'),
        priority?: string(name='Priority'),
        type?: string(name='Type'),
        weight?: string(name='Weight'),
      }
    ](name='Source')
    }(name='Sources'),
  }(name='DomainDetail'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnIpaDomainDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnIpaDomainDetailResponseBody(name='body'),
}

async function describeDcdnIpaDomainDetailWithOptions(request: DescribeDcdnIpaDomainDetailRequest, runtime: Util.RuntimeOptions): DescribeDcdnIpaDomainDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnIpaDomainDetail',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnIpaDomainDetail(request: DescribeDcdnIpaDomainDetailRequest): DescribeDcdnIpaDomainDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnIpaDomainDetailWithOptions(request, runtime);
}

model DescribeDcdnIpaServiceRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeDcdnIpaServiceResponseBody = {
  changingAffectTime?: string(name='ChangingAffectTime'),
  changingChargeType?: string(name='ChangingChargeType'),
  instanceId?: string(name='InstanceId'),
  internetChargeType?: string(name='InternetChargeType'),
  openingTime?: string(name='OpeningTime'),
  operationLocks?: {
    lockReason?: [ 
    {
      lockReason?: string(name='LockReason'),
    }
  ](name='LockReason')
  }(name='OperationLocks'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnIpaServiceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnIpaServiceResponseBody(name='body'),
}

async function describeDcdnIpaServiceWithOptions(request: DescribeDcdnIpaServiceRequest, runtime: Util.RuntimeOptions): DescribeDcdnIpaServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnIpaService',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnIpaService(request: DescribeDcdnIpaServiceRequest): DescribeDcdnIpaServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnIpaServiceWithOptions(request, runtime);
}

model DescribeDcdnIpaUserDomainsRequest {
  checkDomainShow?: boolean(name='CheckDomainShow'),
  domainName?: string(name='DomainName'),
  domainSearchType?: string(name='DomainSearchType'),
  domainStatus?: string(name='DomainStatus'),
  funcFilter?: string(name='FuncFilter'),
  funcId?: string(name='FuncId'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  resourceGroupId?: string(name='ResourceGroupId'),
  securityToken?: string(name='SecurityToken'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeDcdnIpaUserDomainsResponseBody = {
  domains?: {
    pageData?: [ 
    {
      cname?: string(name='Cname'),
      description?: string(name='Description'),
      domainName?: string(name='DomainName'),
      domainStatus?: string(name='DomainStatus'),
      gmtCreated?: string(name='GmtCreated'),
      gmtModified?: string(name='GmtModified'),
      resourceGroupId?: string(name='ResourceGroupId'),
      SSLProtocol?: string(name='SSLProtocol'),
      sandbox?: string(name='Sandbox'),
      sources?: {
        source?: [ 
        {
          content?: string(name='Content'),
          port?: int32(name='Port'),
          priority?: string(name='Priority'),
          type?: string(name='Type'),
          weight?: string(name='Weight'),
        }
      ](name='Source')
      }(name='Sources'),
    }
  ](name='PageData')
  }(name='Domains'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeDcdnIpaUserDomainsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnIpaUserDomainsResponseBody(name='body'),
}

async function describeDcdnIpaUserDomainsWithOptions(request: DescribeDcdnIpaUserDomainsRequest, runtime: Util.RuntimeOptions): DescribeDcdnIpaUserDomainsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkDomainShow)) {
    query['CheckDomainShow'] = request.checkDomainShow;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.domainSearchType)) {
    query['DomainSearchType'] = request.domainSearchType;
  }
  if (!Util.isUnset(request.domainStatus)) {
    query['DomainStatus'] = request.domainStatus;
  }
  if (!Util.isUnset(request.funcFilter)) {
    query['FuncFilter'] = request.funcFilter;
  }
  if (!Util.isUnset(request.funcId)) {
    query['FuncId'] = request.funcId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnIpaUserDomains',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnIpaUserDomains(request: DescribeDcdnIpaUserDomainsRequest): DescribeDcdnIpaUserDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnIpaUserDomainsWithOptions(request, runtime);
}

model DescribeDcdnRealTimeDeliveryFieldRequest {
  businessType?: string(name='BusinessType'),
  ownerId?: long(name='OwnerId'),
}

model DescribeDcdnRealTimeDeliveryFieldResponseBody = {
  content?: {
    fields?: [ 
    {
      description?: string(name='Description'),
      fieldName?: string(name='FieldName'),
    }
  ](name='Fields')
  }(name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnRealTimeDeliveryFieldResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnRealTimeDeliveryFieldResponseBody(name='body'),
}

async function describeDcdnRealTimeDeliveryFieldWithOptions(request: DescribeDcdnRealTimeDeliveryFieldRequest, runtime: Util.RuntimeOptions): DescribeDcdnRealTimeDeliveryFieldResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.businessType)) {
    query['BusinessType'] = request.businessType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnRealTimeDeliveryField',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnRealTimeDeliveryField(request: DescribeDcdnRealTimeDeliveryFieldRequest): DescribeDcdnRealTimeDeliveryFieldResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnRealTimeDeliveryFieldWithOptions(request, runtime);
}

model DescribeDcdnRefreshQuotaRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeDcdnRefreshQuotaResponseBody = {
  blockQuota?: string(name='BlockQuota'),
  blockRemain?: string(name='BlockRemain'),
  dirQuota?: string(name='DirQuota'),
  dirRemain?: string(name='DirRemain'),
  preloadQuota?: string(name='PreloadQuota'),
  preloadRemain?: string(name='PreloadRemain'),
  regexQuota?: string(name='RegexQuota'),
  regexRemain?: string(name='RegexRemain'),
  requestId?: string(name='RequestId'),
  urlQuota?: string(name='UrlQuota'),
  urlRemain?: string(name='UrlRemain'),
}

model DescribeDcdnRefreshQuotaResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnRefreshQuotaResponseBody(name='body'),
}

async function describeDcdnRefreshQuotaWithOptions(request: DescribeDcdnRefreshQuotaRequest, runtime: Util.RuntimeOptions): DescribeDcdnRefreshQuotaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnRefreshQuota',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnRefreshQuota(request: DescribeDcdnRefreshQuotaRequest): DescribeDcdnRefreshQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnRefreshQuotaWithOptions(request, runtime);
}

model DescribeDcdnRefreshTaskByIdRequest {
  ownerId?: long(name='OwnerId'),
  taskId?: string(name='TaskId'),
}

model DescribeDcdnRefreshTaskByIdResponseBody = {
  requestId?: string(name='RequestId'),
  tasks?: [ 
    {
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      objectPath?: string(name='ObjectPath'),
      objectType?: string(name='ObjectType'),
      process?: string(name='Process'),
      status?: string(name='Status'),
      taskId?: string(name='TaskId'),
    }
  ](name='Tasks'),
  totalCount?: long(name='TotalCount'),
}

model DescribeDcdnRefreshTaskByIdResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnRefreshTaskByIdResponseBody(name='body'),
}

async function describeDcdnRefreshTaskByIdWithOptions(request: DescribeDcdnRefreshTaskByIdRequest, runtime: Util.RuntimeOptions): DescribeDcdnRefreshTaskByIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnRefreshTaskById',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnRefreshTaskById(request: DescribeDcdnRefreshTaskByIdRequest): DescribeDcdnRefreshTaskByIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnRefreshTaskByIdWithOptions(request, runtime);
}

model DescribeDcdnRefreshTasksRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  objectPath?: string(name='ObjectPath'),
  objectType?: string(name='ObjectType'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  securityToken?: string(name='SecurityToken'),
  startTime?: string(name='StartTime'),
  status?: string(name='Status'),
  taskId?: string(name='TaskId'),
}

model DescribeDcdnRefreshTasksResponseBody = {
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  tasks?: {
    task?: [ 
    {
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      objectPath?: string(name='ObjectPath'),
      objectType?: string(name='ObjectType'),
      process?: string(name='Process'),
      status?: string(name='Status'),
      taskId?: string(name='TaskId'),
    }
  ](name='Task')
  }(name='Tasks'),
  totalCount?: long(name='TotalCount'),
}

model DescribeDcdnRefreshTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnRefreshTasksResponseBody(name='body'),
}

async function describeDcdnRefreshTasksWithOptions(request: DescribeDcdnRefreshTasksRequest, runtime: Util.RuntimeOptions): DescribeDcdnRefreshTasksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.objectPath)) {
    query['ObjectPath'] = request.objectPath;
  }
  if (!Util.isUnset(request.objectType)) {
    query['ObjectType'] = request.objectType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnRefreshTasks',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnRefreshTasks(request: DescribeDcdnRefreshTasksRequest): DescribeDcdnRefreshTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnRefreshTasksWithOptions(request, runtime);
}

model DescribeDcdnRegionAndIspRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeDcdnRegionAndIspResponseBody = {
  isps?: {
    isp?: [ 
    {
      nameEn?: string(name='NameEn'),
      nameZh?: string(name='NameZh'),
    }
  ](name='Isp')
  }(name='Isps'),
  regions?: {
    region?: [ 
    {
      nameEn?: string(name='NameEn'),
      nameZh?: string(name='NameZh'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnRegionAndIspResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnRegionAndIspResponseBody(name='body'),
}

async function describeDcdnRegionAndIspWithOptions(request: DescribeDcdnRegionAndIspRequest, runtime: Util.RuntimeOptions): DescribeDcdnRegionAndIspResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnRegionAndIsp',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnRegionAndIsp(request: DescribeDcdnRegionAndIspRequest): DescribeDcdnRegionAndIspResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnRegionAndIspWithOptions(request, runtime);
}

model DescribeDcdnReportRequest {
  area?: string(name='Area'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  httpCode?: string(name='HttpCode'),
  isOverseas?: string(name='IsOverseas'),
  ownerId?: long(name='OwnerId'),
  reportId?: long(name='ReportId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnReportResponseBody = {
  content?: string(name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnReportResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnReportResponseBody(name='body'),
}

async function describeDcdnReportWithOptions(request: DescribeDcdnReportRequest, runtime: Util.RuntimeOptions): DescribeDcdnReportResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.area)) {
    query['Area'] = request.area;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.httpCode)) {
    query['HttpCode'] = request.httpCode;
  }
  if (!Util.isUnset(request.isOverseas)) {
    query['IsOverseas'] = request.isOverseas;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.reportId)) {
    query['ReportId'] = request.reportId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnReport',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnReport(request: DescribeDcdnReportRequest): DescribeDcdnReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnReportWithOptions(request, runtime);
}

model DescribeDcdnReportListRequest {
  ownerId?: long(name='OwnerId'),
  reportId?: long(name='ReportId'),
}

model DescribeDcdnReportListResponseBody = {
  content?: string(name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnReportListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnReportListResponseBody(name='body'),
}

async function describeDcdnReportListWithOptions(request: DescribeDcdnReportListRequest, runtime: Util.RuntimeOptions): DescribeDcdnReportListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.reportId)) {
    query['ReportId'] = request.reportId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnReportList',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnReportList(request: DescribeDcdnReportListRequest): DescribeDcdnReportListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnReportListWithOptions(request, runtime);
}

model DescribeDcdnSLSRealtimeLogDeliveryRequest {
  businessType?: string(name='BusinessType'),
  ownerId?: long(name='OwnerId'),
  projectName?: string(name='ProjectName'),
}

model DescribeDcdnSLSRealtimeLogDeliveryResponseBody = {
  content?: {
    businessType?: string(name='BusinessType'),
    dataCenter?: string(name='DataCenter'),
    domainName?: string(name='DomainName'),
    fieldName?: string(name='FieldName'),
    projectName?: string(name='ProjectName'),
    SLSLogStore?: string(name='SLSLogStore'),
    SLSProject?: string(name='SLSProject'),
    SLSRegion?: string(name='SLSRegion'),
    samplingRate?: string(name='SamplingRate'),
    type?: string(name='Type'),
  }(name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnSLSRealtimeLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnSLSRealtimeLogDeliveryResponseBody(name='body'),
}

async function describeDcdnSLSRealtimeLogDeliveryWithOptions(request: DescribeDcdnSLSRealtimeLogDeliveryRequest, runtime: Util.RuntimeOptions): DescribeDcdnSLSRealtimeLogDeliveryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.businessType)) {
    query['BusinessType'] = request.businessType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnSLSRealtimeLogDelivery',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnSLSRealtimeLogDelivery(request: DescribeDcdnSLSRealtimeLogDeliveryRequest): DescribeDcdnSLSRealtimeLogDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnSLSRealtimeLogDeliveryWithOptions(request, runtime);
}

model DescribeDcdnSMCertificateDetailRequest {
  certIdentifier?: string(name='CertIdentifier'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeDcdnSMCertificateDetailResponseBody = {
  certExpireTime?: string(name='CertExpireTime'),
  certIdentifier?: string(name='CertIdentifier'),
  certName?: string(name='CertName'),
  certOrg?: string(name='CertOrg'),
  commonName?: string(name='CommonName'),
  encryptCertificate?: string(name='EncryptCertificate'),
  requestId?: string(name='RequestId'),
  sans?: string(name='Sans'),
  signCertificate?: string(name='SignCertificate'),
}

model DescribeDcdnSMCertificateDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnSMCertificateDetailResponseBody(name='body'),
}

async function describeDcdnSMCertificateDetailWithOptions(request: DescribeDcdnSMCertificateDetailRequest, runtime: Util.RuntimeOptions): DescribeDcdnSMCertificateDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certIdentifier)) {
    query['CertIdentifier'] = request.certIdentifier;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnSMCertificateDetail',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnSMCertificateDetail(request: DescribeDcdnSMCertificateDetailRequest): DescribeDcdnSMCertificateDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnSMCertificateDetailWithOptions(request, runtime);
}

model DescribeDcdnSMCertificateListRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeDcdnSMCertificateListResponseBody = {
  certificateListModel?: {
    certList?: [ 
      {
        certIdentifier?: string(name='CertIdentifier'),
        certName?: string(name='CertName'),
        common?: string(name='Common'),
        issuer?: string(name='Issuer'),
      }
    ](name='CertList'),
    count?: int32(name='Count'),
  }(name='CertificateListModel'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnSMCertificateListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnSMCertificateListResponseBody(name='body'),
}

async function describeDcdnSMCertificateListWithOptions(request: DescribeDcdnSMCertificateListRequest, runtime: Util.RuntimeOptions): DescribeDcdnSMCertificateListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnSMCertificateList',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnSMCertificateList(request: DescribeDcdnSMCertificateListRequest): DescribeDcdnSMCertificateListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnSMCertificateListWithOptions(request, runtime);
}

model DescribeDcdnSecFuncInfoRequest {
  lang?: string(name='Lang'),
  ownerId?: long(name='OwnerId'),
  secFuncType?: string(name='SecFuncType'),
}

model DescribeDcdnSecFuncInfoResponseBody = {
  content?: [ 
    {
      label?: string(name='Label'),
      value?: string(name='Value'),
    }
  ](name='Content'),
  description?: string(name='Description'),
  httpStatus?: string(name='HttpStatus'),
  requestId?: string(name='RequestId'),
  retCode?: string(name='RetCode'),
}

model DescribeDcdnSecFuncInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnSecFuncInfoResponseBody(name='body'),
}

async function describeDcdnSecFuncInfoWithOptions(request: DescribeDcdnSecFuncInfoRequest, runtime: Util.RuntimeOptions): DescribeDcdnSecFuncInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.secFuncType)) {
    query['SecFuncType'] = request.secFuncType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnSecFuncInfo',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnSecFuncInfo(request: DescribeDcdnSecFuncInfoRequest): DescribeDcdnSecFuncInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnSecFuncInfoWithOptions(request, runtime);
}

model DescribeDcdnSecSpecInfoRequest {
  ownerId?: long(name='OwnerId'),
}

model DescribeDcdnSecSpecInfoResponseBody = {
  requestId?: string(name='RequestId'),
  specInfos?: [ 
    {
      ruleCode?: string(name='RuleCode'),
      ruleConfigs?: [ 
        {
          code?: string(name='Code'),
          expr?: string(name='Expr'),
          value?: string(name='Value'),
        }
      ](name='RuleConfigs'),
    }
  ](name='SpecInfos'),
  version?: string(name='Version'),
}

model DescribeDcdnSecSpecInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnSecSpecInfoResponseBody(name='body'),
}

async function describeDcdnSecSpecInfoWithOptions(request: DescribeDcdnSecSpecInfoRequest, runtime: Util.RuntimeOptions): DescribeDcdnSecSpecInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnSecSpecInfo',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnSecSpecInfo(request: DescribeDcdnSecSpecInfoRequest): DescribeDcdnSecSpecInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnSecSpecInfoWithOptions(request, runtime);
}

model DescribeDcdnServiceRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeDcdnServiceResponseBody = {
  changingAffectTime?: string(name='ChangingAffectTime'),
  changingChargeType?: string(name='ChangingChargeType'),
  instanceId?: string(name='InstanceId'),
  internetChargeType?: string(name='InternetChargeType'),
  openingTime?: string(name='OpeningTime'),
  operationLocks?: {
    lockReason?: [ 
    {
      lockReason?: string(name='LockReason'),
    }
  ](name='LockReason')
  }(name='OperationLocks'),
  requestId?: string(name='RequestId'),
  websocketChangingTime?: string(name='WebsocketChangingTime'),
  websocketChangingType?: string(name='WebsocketChangingType'),
  websocketType?: string(name='WebsocketType'),
}

model DescribeDcdnServiceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnServiceResponseBody(name='body'),
}

async function describeDcdnServiceWithOptions(request: DescribeDcdnServiceRequest, runtime: Util.RuntimeOptions): DescribeDcdnServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnService',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnService(request: DescribeDcdnServiceRequest): DescribeDcdnServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnServiceWithOptions(request, runtime);
}

model DescribeDcdnStagingIpRequest {
  ownerId?: long(name='OwnerId'),
}

model DescribeDcdnStagingIpResponseBody = {
  IPV4s?: {
    IPV4?: [ string ](name='IPV4')
  }(name='IPV4s'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnStagingIpResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnStagingIpResponseBody(name='body'),
}

async function describeDcdnStagingIpWithOptions(request: DescribeDcdnStagingIpRequest, runtime: Util.RuntimeOptions): DescribeDcdnStagingIpResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnStagingIp',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnStagingIp(request: DescribeDcdnStagingIpRequest): DescribeDcdnStagingIpResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnStagingIpWithOptions(request, runtime);
}

model DescribeDcdnSubListRequest {
  ownerId?: long(name='OwnerId'),
}

model DescribeDcdnSubListResponseBody = {
  content?: string(name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnSubListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnSubListResponseBody(name='body'),
}

async function describeDcdnSubListWithOptions(request: DescribeDcdnSubListRequest, runtime: Util.RuntimeOptions): DescribeDcdnSubListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnSubList',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnSubList(request: DescribeDcdnSubListRequest): DescribeDcdnSubListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnSubListWithOptions(request, runtime);
}

model DescribeDcdnTagResourcesRequest {
  ownerId?: long(name='OwnerId'),
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeDcdnTagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId'),
      tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag'),
    }
  ](name='TagResources'),
}

model DescribeDcdnTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnTagResourcesResponseBody(name='body'),
}

async function describeDcdnTagResourcesWithOptions(request: DescribeDcdnTagResourcesRequest, runtime: Util.RuntimeOptions): DescribeDcdnTagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnTagResources',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnTagResources(request: DescribeDcdnTagResourcesRequest): DescribeDcdnTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnTagResourcesWithOptions(request, runtime);
}

model DescribeDcdnTopDomainsByFlowRequest {
  endTime?: string(name='EndTime'),
  limit?: long(name='Limit'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnTopDomainsByFlowResponseBody = {
  domainCount?: long(name='DomainCount'),
  domainOnlineCount?: long(name='DomainOnlineCount'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  topDomains?: {
    topDomain?: [ 
    {
      domainName?: string(name='DomainName'),
      maxBps?: long(name='MaxBps'),
      maxBpsTime?: string(name='MaxBpsTime'),
      rank?: long(name='Rank'),
      totalAccess?: long(name='TotalAccess'),
      totalTraffic?: string(name='TotalTraffic'),
      trafficPercent?: string(name='TrafficPercent'),
    }
  ](name='TopDomain')
  }(name='TopDomains'),
}

model DescribeDcdnTopDomainsByFlowResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnTopDomainsByFlowResponseBody(name='body'),
}

async function describeDcdnTopDomainsByFlowWithOptions(request: DescribeDcdnTopDomainsByFlowRequest, runtime: Util.RuntimeOptions): DescribeDcdnTopDomainsByFlowResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.limit)) {
    query['Limit'] = request.limit;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnTopDomainsByFlow',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnTopDomainsByFlow(request: DescribeDcdnTopDomainsByFlowRequest): DescribeDcdnTopDomainsByFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnTopDomainsByFlowWithOptions(request, runtime);
}

model DescribeDcdnUserBillHistoryRequest {
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnUserBillHistoryResponseBody = {
  billHistoryData?: {
    billHistoryDataItem?: [ 
    {
      billTime?: string(name='BillTime'),
      billType?: string(name='BillType'),
      billingData?: {
        billingDataItem?: [ 
        {
          bandwidth?: float(name='Bandwidth'),
          cdnRegion?: string(name='CdnRegion'),
          chargeType?: string(name='ChargeType'),
          count?: float(name='Count'),
          flow?: float(name='Flow'),
        }
      ](name='BillingDataItem')
      }(name='BillingData'),
      dimension?: string(name='Dimension'),
    }
  ](name='BillHistoryDataItem')
  }(name='BillHistoryData'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnUserBillHistoryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnUserBillHistoryResponseBody(name='body'),
}

async function describeDcdnUserBillHistoryWithOptions(request: DescribeDcdnUserBillHistoryRequest, runtime: Util.RuntimeOptions): DescribeDcdnUserBillHistoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnUserBillHistory',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnUserBillHistory(request: DescribeDcdnUserBillHistoryRequest): DescribeDcdnUserBillHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnUserBillHistoryWithOptions(request, runtime);
}

model DescribeDcdnUserBillTypeRequest {
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnUserBillTypeResponseBody = {
  billTypeData?: {
    billTypeDataItem?: [ 
    {
      billType?: string(name='BillType'),
      billingCycle?: string(name='BillingCycle'),
      dimension?: string(name='Dimension'),
      endTime?: string(name='EndTime'),
      product?: string(name='Product'),
      startTime?: string(name='StartTime'),
    }
  ](name='BillTypeDataItem')
  }(name='BillTypeData'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnUserBillTypeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnUserBillTypeResponseBody(name='body'),
}

async function describeDcdnUserBillTypeWithOptions(request: DescribeDcdnUserBillTypeRequest, runtime: Util.RuntimeOptions): DescribeDcdnUserBillTypeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnUserBillType',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnUserBillType(request: DescribeDcdnUserBillTypeRequest): DescribeDcdnUserBillTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnUserBillTypeWithOptions(request, runtime);
}

model DescribeDcdnUserCertificateExpireCountRequest {
  ownerId?: long(name='OwnerId'),
}

model DescribeDcdnUserCertificateExpireCountResponseBody = {
  expireWithin30DaysCount?: int32(name='ExpireWithin30DaysCount'),
  expiredCount?: int32(name='ExpiredCount'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnUserCertificateExpireCountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnUserCertificateExpireCountResponseBody(name='body'),
}

async function describeDcdnUserCertificateExpireCountWithOptions(request: DescribeDcdnUserCertificateExpireCountRequest, runtime: Util.RuntimeOptions): DescribeDcdnUserCertificateExpireCountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnUserCertificateExpireCount',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnUserCertificateExpireCount(request: DescribeDcdnUserCertificateExpireCountRequest): DescribeDcdnUserCertificateExpireCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnUserCertificateExpireCountWithOptions(request, runtime);
}

model DescribeDcdnUserConfigsRequest {
  functionName?: string(name='FunctionName'),
  ownerId?: long(name='OwnerId'),
}

model DescribeDcdnUserConfigsResponseBody = {
  configs?: [ 
    {
      argName?: string(name='ArgName'),
      argValue?: string(name='ArgValue'),
      functionName?: string(name='FunctionName'),
    }
  ](name='Configs'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnUserConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnUserConfigsResponseBody(name='body'),
}

async function describeDcdnUserConfigsWithOptions(request: DescribeDcdnUserConfigsRequest, runtime: Util.RuntimeOptions): DescribeDcdnUserConfigsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.functionName)) {
    query['FunctionName'] = request.functionName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnUserConfigs',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnUserConfigs(request: DescribeDcdnUserConfigsRequest): DescribeDcdnUserConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnUserConfigsWithOptions(request, runtime);
}

model DescribeDcdnUserDomainsRequest {
  changeEndTime?: string(name='ChangeEndTime'),
  changeStartTime?: string(name='ChangeStartTime'),
  checkDomainShow?: boolean(name='CheckDomainShow'),
  coverage?: string(name='Coverage'),
  domainName?: string(name='DomainName'),
  domainSearchType?: string(name='DomainSearchType'),
  domainStatus?: string(name='DomainStatus'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  resourceGroupId?: string(name='ResourceGroupId'),
  securityToken?: string(name='SecurityToken'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeDcdnUserDomainsResponseBody = {
  domains?: {
    pageData?: [ 
    {
      cname?: string(name='Cname'),
      description?: string(name='Description'),
      domainName?: string(name='DomainName'),
      domainStatus?: string(name='DomainStatus'),
      gmtCreated?: string(name='GmtCreated'),
      gmtModified?: string(name='GmtModified'),
      resourceGroupId?: string(name='ResourceGroupId'),
      SSLProtocol?: string(name='SSLProtocol'),
      sandbox?: string(name='Sandbox'),
      sources?: {
        source?: [ 
        {
          content?: string(name='Content'),
          port?: int32(name='Port'),
          priority?: string(name='Priority'),
          type?: string(name='Type'),
          weight?: string(name='Weight'),
        }
      ](name='Source')
      }(name='Sources'),
    }
  ](name='PageData')
  }(name='Domains'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeDcdnUserDomainsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnUserDomainsResponseBody(name='body'),
}

async function describeDcdnUserDomainsWithOptions(request: DescribeDcdnUserDomainsRequest, runtime: Util.RuntimeOptions): DescribeDcdnUserDomainsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.changeEndTime)) {
    query['ChangeEndTime'] = request.changeEndTime;
  }
  if (!Util.isUnset(request.changeStartTime)) {
    query['ChangeStartTime'] = request.changeStartTime;
  }
  if (!Util.isUnset(request.checkDomainShow)) {
    query['CheckDomainShow'] = request.checkDomainShow;
  }
  if (!Util.isUnset(request.coverage)) {
    query['Coverage'] = request.coverage;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.domainSearchType)) {
    query['DomainSearchType'] = request.domainSearchType;
  }
  if (!Util.isUnset(request.domainStatus)) {
    query['DomainStatus'] = request.domainStatus;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnUserDomains',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnUserDomains(request: DescribeDcdnUserDomainsRequest): DescribeDcdnUserDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnUserDomainsWithOptions(request, runtime);
}

model DescribeDcdnUserDomainsByFuncRequest {
  domainName?: string(name='DomainName'),
  funcFilter?: string(name='FuncFilter'),
  funcId?: int32(name='FuncId'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeDcdnUserDomainsByFuncResponseBody = {
  domains?: {
    pageData?: [ 
    {
      cname?: string(name='Cname'),
      description?: string(name='Description'),
      domainName?: string(name='DomainName'),
      domainStatus?: string(name='DomainStatus'),
      gmtCreated?: string(name='GmtCreated'),
      gmtModified?: string(name='GmtModified'),
      resourceGroupId?: string(name='ResourceGroupId'),
      sandbox?: string(name='Sandbox'),
      sources?: {
        source?: [ 
        {
          content?: string(name='Content'),
          port?: int32(name='Port'),
          priority?: string(name='Priority'),
          type?: string(name='Type'),
          weight?: string(name='Weight'),
        }
      ](name='Source')
      }(name='Sources'),
      sslProtocol?: string(name='SslProtocol'),
    }
  ](name='PageData')
  }(name='Domains'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeDcdnUserDomainsByFuncResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnUserDomainsByFuncResponseBody(name='body'),
}

async function describeDcdnUserDomainsByFuncWithOptions(request: DescribeDcdnUserDomainsByFuncRequest, runtime: Util.RuntimeOptions): DescribeDcdnUserDomainsByFuncResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.funcFilter)) {
    query['FuncFilter'] = request.funcFilter;
  }
  if (!Util.isUnset(request.funcId)) {
    query['FuncId'] = request.funcId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnUserDomainsByFunc',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnUserDomainsByFunc(request: DescribeDcdnUserDomainsByFuncRequest): DescribeDcdnUserDomainsByFuncResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnUserDomainsByFuncWithOptions(request, runtime);
}

model DescribeDcdnUserQuotaRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeDcdnUserQuotaResponseBody = {
  blockQuota?: int32(name='BlockQuota'),
  blockRemain?: int32(name='BlockRemain'),
  domainQuota?: int32(name='DomainQuota'),
  preloadQuota?: int32(name='PreloadQuota'),
  preloadRemain?: int32(name='PreloadRemain'),
  refreshDirQuota?: int32(name='RefreshDirQuota'),
  refreshDirRemain?: int32(name='RefreshDirRemain'),
  refreshUrlQuota?: int32(name='RefreshUrlQuota'),
  refreshUrlRemain?: int32(name='RefreshUrlRemain'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnUserQuotaResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnUserQuotaResponseBody(name='body'),
}

async function describeDcdnUserQuotaWithOptions(request: DescribeDcdnUserQuotaRequest, runtime: Util.RuntimeOptions): DescribeDcdnUserQuotaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnUserQuota',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnUserQuota(request: DescribeDcdnUserQuotaRequest): DescribeDcdnUserQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnUserQuotaWithOptions(request, runtime);
}

model DescribeDcdnUserRealTimeDeliveryFieldRequest {
  businessType?: string(name='BusinessType'),
  ownerId?: long(name='OwnerId'),
}

model DescribeDcdnUserRealTimeDeliveryFieldResponseBody = {
  content?: {
    fields?: [ 
    {
      description?: string(name='Description'),
      fieldName?: string(name='FieldName'),
      selected?: boolean(name='Selected'),
    }
  ](name='Fields')
  }(name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnUserRealTimeDeliveryFieldResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnUserRealTimeDeliveryFieldResponseBody(name='body'),
}

async function describeDcdnUserRealTimeDeliveryFieldWithOptions(request: DescribeDcdnUserRealTimeDeliveryFieldRequest, runtime: Util.RuntimeOptions): DescribeDcdnUserRealTimeDeliveryFieldResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnUserRealTimeDeliveryField',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnUserRealTimeDeliveryField(request: DescribeDcdnUserRealTimeDeliveryFieldRequest): DescribeDcdnUserRealTimeDeliveryFieldResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnUserRealTimeDeliveryFieldWithOptions(request, runtime);
}

model DescribeDcdnUserResourcePackageRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  status?: string(name='Status'),
}

model DescribeDcdnUserResourcePackageResponseBody = {
  requestId?: string(name='RequestId'),
  resourcePackageInfos?: {
    resourcePackageInfo?: [ 
    {
      commodityCode?: string(name='CommodityCode'),
      currCapacity?: string(name='CurrCapacity'),
      displayName?: string(name='DisplayName'),
      endTime?: string(name='EndTime'),
      initCapacity?: string(name='InitCapacity'),
      instanceId?: string(name='InstanceId'),
      startTime?: string(name='StartTime'),
      status?: string(name='Status'),
      templateName?: string(name='TemplateName'),
    }
  ](name='ResourcePackageInfo')
  }(name='ResourcePackageInfos'),
}

model DescribeDcdnUserResourcePackageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnUserResourcePackageResponseBody(name='body'),
}

async function describeDcdnUserResourcePackageWithOptions(request: DescribeDcdnUserResourcePackageRequest, runtime: Util.RuntimeOptions): DescribeDcdnUserResourcePackageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnUserResourcePackage',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnUserResourcePackage(request: DescribeDcdnUserResourcePackageRequest): DescribeDcdnUserResourcePackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnUserResourcePackageWithOptions(request, runtime);
}

model DescribeDcdnUserSecDropRequest {
  data?: string(name='Data'),
  metric?: string(name='Metric'),
  ownerId?: long(name='OwnerId'),
  secFunc?: string(name='SecFunc'),
}

model DescribeDcdnUserSecDropResponseBody = {
  drops?: int32(name='Drops'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  uuidStr?: string(name='UuidStr'),
}

model DescribeDcdnUserSecDropResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnUserSecDropResponseBody(name='body'),
}

async function describeDcdnUserSecDropWithOptions(request: DescribeDcdnUserSecDropRequest, runtime: Util.RuntimeOptions): DescribeDcdnUserSecDropResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.data)) {
    query['Data'] = request.data;
  }
  if (!Util.isUnset(request.metric)) {
    query['Metric'] = request.metric;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.secFunc)) {
    query['SecFunc'] = request.secFunc;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnUserSecDrop',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnUserSecDrop(request: DescribeDcdnUserSecDropRequest): DescribeDcdnUserSecDropResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnUserSecDropWithOptions(request, runtime);
}

model DescribeDcdnUserSecDropByMinuteRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  lang?: string(name='Lang'),
  object?: string(name='Object'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  ruleName?: string(name='RuleName'),
  secFunc?: string(name='SecFunc'),
  startTime?: string(name='StartTime'),
}

model DescribeDcdnUserSecDropByMinuteResponseBody = {
  description?: string(name='Description'),
  len?: int32(name='Len'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  rows?: [ 
    {
      domain?: string(name='Domain'),
      drops?: int32(name='Drops'),
      object?: string(name='Object'),
      ruleName?: string(name='RuleName'),
      secFunc?: string(name='SecFunc'),
      tmStr?: string(name='TmStr'),
    }
  ](name='Rows'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDcdnUserSecDropByMinuteResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnUserSecDropByMinuteResponseBody(name='body'),
}

async function describeDcdnUserSecDropByMinuteWithOptions(request: DescribeDcdnUserSecDropByMinuteRequest, runtime: Util.RuntimeOptions): DescribeDcdnUserSecDropByMinuteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.object)) {
    query['Object'] = request.object;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  if (!Util.isUnset(request.secFunc)) {
    query['SecFunc'] = request.secFunc;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnUserSecDropByMinute',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnUserSecDropByMinute(request: DescribeDcdnUserSecDropByMinuteRequest): DescribeDcdnUserSecDropByMinuteResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnUserSecDropByMinuteWithOptions(request, runtime);
}

model DescribeDcdnUserTagsRequest {
  ownerId?: long(name='OwnerId'),
}

model DescribeDcdnUserTagsResponseBody = {
  requestId?: string(name='RequestId'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: [ string ](name='Value'),
    }
  ](name='Tags'),
}

model DescribeDcdnUserTagsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnUserTagsResponseBody(name='body'),
}

async function describeDcdnUserTagsWithOptions(request: DescribeDcdnUserTagsRequest, runtime: Util.RuntimeOptions): DescribeDcdnUserTagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnUserTags',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnUserTags(request: DescribeDcdnUserTagsRequest): DescribeDcdnUserTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnUserTagsWithOptions(request, runtime);
}

model DescribeDcdnVerifyContentRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
}

model DescribeDcdnVerifyContentResponseBody = {
  content?: string(name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnVerifyContentResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnVerifyContentResponseBody(name='body'),
}

async function describeDcdnVerifyContentWithOptions(request: DescribeDcdnVerifyContentRequest, runtime: Util.RuntimeOptions): DescribeDcdnVerifyContentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnVerifyContent',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnVerifyContent(request: DescribeDcdnVerifyContentRequest): DescribeDcdnVerifyContentResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnVerifyContentWithOptions(request, runtime);
}

model DescribeDcdnWafDomainRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeDcdnWafDomainResponseBody = {
  outPutDomains?: [ 
    {
      aclStatus?: int32(name='AclStatus'),
      ccStatus?: int32(name='CcStatus'),
      domain?: string(name='Domain'),
      status?: int32(name='Status'),
      wafStatus?: int32(name='WafStatus'),
    }
  ](name='OutPutDomains'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDcdnWafDomainResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnWafDomainResponseBody(name='body'),
}

async function describeDcdnWafDomainWithOptions(request: DescribeDcdnWafDomainRequest, runtime: Util.RuntimeOptions): DescribeDcdnWafDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnWafDomain',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnWafDomain(request: DescribeDcdnWafDomainRequest): DescribeDcdnWafDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnWafDomainWithOptions(request, runtime);
}

model DescribeDcdnWafDomainDetailRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
}

model DescribeDcdnWafDomainDetailResponseBody = {
  domain?: {
    defenseScenes?: [ 
      {
        defenseScene?: string(name='DefenseScene'),
        policyId?: long(name='PolicyId'),
      }
    ](name='DefenseScenes'),
    domainName?: string(name='DomainName'),
  }(name='Domain'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnWafDomainDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnWafDomainDetailResponseBody(name='body'),
}

async function describeDcdnWafDomainDetailWithOptions(request: DescribeDcdnWafDomainDetailRequest, runtime: Util.RuntimeOptions): DescribeDcdnWafDomainDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnWafDomainDetail',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnWafDomainDetail(request: DescribeDcdnWafDomainDetailRequest): DescribeDcdnWafDomainDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnWafDomainDetailWithOptions(request, runtime);
}

model DescribeDcdnWafDomainsRequest {
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  queryArgs?: string(name='QueryArgs'),
}

model DescribeDcdnWafDomainsResponseBody = {
  domains?: [ 
    {
      domainName?: string(name='DomainName'),
      policyCount?: int32(name='PolicyCount'),
    }
  ](name='Domains'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDcdnWafDomainsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnWafDomainsResponseBody(name='body'),
}

async function describeDcdnWafDomainsWithOptions(request: DescribeDcdnWafDomainsRequest, runtime: Util.RuntimeOptions): DescribeDcdnWafDomainsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryArgs)) {
    query['QueryArgs'] = request.queryArgs;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnWafDomains',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnWafDomains(request: DescribeDcdnWafDomainsRequest): DescribeDcdnWafDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnWafDomainsWithOptions(request, runtime);
}

model DescribeDcdnWafFilterInfoRequest {
  defenseScenes?: string(name='DefenseScenes'),
  language?: string(name='Language'),
  ownerId?: long(name='OwnerId'),
}

model DescribeDcdnWafFilterInfoResponseBody = {
  content?: [ 
    {
      defenseScene?: string(name='DefenseScene'),
      fields?: [ 
        {
          extendField?: string(name='ExtendField'),
          logicalSymbol?: [ 
            {
              description?: string(name='Description'),
              maxLength?: int32(name='MaxLength'),
              regexp?: {
                errMsg?: string(name='ErrMsg'),
                pattern?: string(name='Pattern'),
              }(name='Regexp'),
              symbol?: string(name='Symbol'),
              tip?: string(name='Tip'),
              type?: string(name='Type'),
            }
          ](name='LogicalSymbol'),
          matchField?: string(name='MatchField'),
        }
      ](name='Fields'),
    }
  ](name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnWafFilterInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnWafFilterInfoResponseBody(name='body'),
}

async function describeDcdnWafFilterInfoWithOptions(request: DescribeDcdnWafFilterInfoRequest, runtime: Util.RuntimeOptions): DescribeDcdnWafFilterInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.defenseScenes)) {
    query['DefenseScenes'] = request.defenseScenes;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnWafFilterInfo',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnWafFilterInfo(request: DescribeDcdnWafFilterInfoRequest): DescribeDcdnWafFilterInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnWafFilterInfoWithOptions(request, runtime);
}

model DescribeDcdnWafPoliciesRequest {
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  queryArgs?: string(name='QueryArgs'),
}

model DescribeDcdnWafPoliciesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  policies?: [ 
    {
      defenseScene?: string(name='DefenseScene'),
      domainCount?: int32(name='DomainCount'),
      gmtModified?: string(name='GmtModified'),
      policyId?: long(name='PolicyId'),
      policyName?: string(name='PolicyName'),
      policyStatus?: string(name='PolicyStatus'),
      policyType?: string(name='PolicyType'),
      ruleCount?: long(name='RuleCount'),
    }
  ](name='Policies'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDcdnWafPoliciesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnWafPoliciesResponseBody(name='body'),
}

async function describeDcdnWafPoliciesWithOptions(request: DescribeDcdnWafPoliciesRequest, runtime: Util.RuntimeOptions): DescribeDcdnWafPoliciesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryArgs)) {
    query['QueryArgs'] = request.queryArgs;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnWafPolicies',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnWafPolicies(request: DescribeDcdnWafPoliciesRequest): DescribeDcdnWafPoliciesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnWafPoliciesWithOptions(request, runtime);
}

model DescribeDcdnWafPolicyRequest {
  ownerId?: long(name='OwnerId'),
  policyId?: long(name='PolicyId'),
}

model DescribeDcdnWafPolicyResponseBody = {
  policy?: {
    defenseScene?: string(name='DefenseScene'),
    domainCount?: int32(name='DomainCount'),
    gmtModified?: string(name='GmtModified'),
    policyId?: long(name='PolicyId'),
    policyName?: string(name='PolicyName'),
    policyStatus?: string(name='PolicyStatus'),
    policyType?: string(name='PolicyType'),
    ruleCount?: long(name='RuleCount'),
  }(name='Policy'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnWafPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnWafPolicyResponseBody(name='body'),
}

async function describeDcdnWafPolicyWithOptions(request: DescribeDcdnWafPolicyRequest, runtime: Util.RuntimeOptions): DescribeDcdnWafPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnWafPolicy',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnWafPolicy(request: DescribeDcdnWafPolicyRequest): DescribeDcdnWafPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnWafPolicyWithOptions(request, runtime);
}

model DescribeDcdnWafPolicyDomainsRequest {
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  policyId?: long(name='PolicyId'),
}

model DescribeDcdnWafPolicyDomainsResponseBody = {
  domains?: [ 
    {
      domainName?: string(name='DomainName'),
    }
  ](name='Domains'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDcdnWafPolicyDomainsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnWafPolicyDomainsResponseBody(name='body'),
}

async function describeDcdnWafPolicyDomainsWithOptions(request: DescribeDcdnWafPolicyDomainsRequest, runtime: Util.RuntimeOptions): DescribeDcdnWafPolicyDomainsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnWafPolicyDomains',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnWafPolicyDomains(request: DescribeDcdnWafPolicyDomainsRequest): DescribeDcdnWafPolicyDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnWafPolicyDomainsWithOptions(request, runtime);
}

model DescribeDcdnWafPolicyValidDomainsRequest {
  defenseScene?: string(name='DefenseScene'),
  domainNameLike?: string(name='DomainNameLike'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeDcdnWafPolicyValidDomainsResponseBody = {
  domains?: [ 
    {
      domainName?: string(name='DomainName'),
      policyId?: long(name='PolicyId'),
      policyName?: string(name='PolicyName'),
      policyType?: string(name='PolicyType'),
    }
  ](name='Domains'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDcdnWafPolicyValidDomainsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnWafPolicyValidDomainsResponseBody(name='body'),
}

async function describeDcdnWafPolicyValidDomainsWithOptions(request: DescribeDcdnWafPolicyValidDomainsRequest, runtime: Util.RuntimeOptions): DescribeDcdnWafPolicyValidDomainsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.defenseScene)) {
    query['DefenseScene'] = request.defenseScene;
  }
  if (!Util.isUnset(request.domainNameLike)) {
    query['DomainNameLike'] = request.domainNameLike;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnWafPolicyValidDomains',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnWafPolicyValidDomains(request: DescribeDcdnWafPolicyValidDomainsRequest): DescribeDcdnWafPolicyValidDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnWafPolicyValidDomainsWithOptions(request, runtime);
}

model DescribeDcdnWafRuleRequest {
  ownerId?: long(name='OwnerId'),
  ruleId?: long(name='RuleId'),
}

model DescribeDcdnWafRuleResponseBody = {
  requestId?: string(name='RequestId'),
  rule?: {
    defenseScene?: string(name='DefenseScene'),
    gmtModified?: string(name='GmtModified'),
    policyId?: long(name='PolicyId'),
    ruleConfig?: string(name='RuleConfig'),
    ruleId?: long(name='RuleId'),
    ruleName?: string(name='RuleName'),
    ruleStatus?: string(name='RuleStatus'),
  }(name='Rule'),
}

model DescribeDcdnWafRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnWafRuleResponseBody(name='body'),
}

async function describeDcdnWafRuleWithOptions(request: DescribeDcdnWafRuleRequest, runtime: Util.RuntimeOptions): DescribeDcdnWafRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnWafRule',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnWafRule(request: DescribeDcdnWafRuleRequest): DescribeDcdnWafRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnWafRuleWithOptions(request, runtime);
}

model DescribeDcdnWafRulesRequest {
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  queryArgs?: string(name='QueryArgs'),
}

model DescribeDcdnWafRulesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  rules?: [ 
    {
      defenseScene?: string(name='DefenseScene'),
      gmtModified?: string(name='GmtModified'),
      policyId?: long(name='PolicyId'),
      ruleConfig?: string(name='RuleConfig'),
      ruleId?: long(name='RuleId'),
      ruleName?: string(name='RuleName'),
      ruleStatus?: string(name='RuleStatus'),
    }
  ](name='Rules'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDcdnWafRulesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnWafRulesResponseBody(name='body'),
}

async function describeDcdnWafRulesWithOptions(request: DescribeDcdnWafRulesRequest, runtime: Util.RuntimeOptions): DescribeDcdnWafRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryArgs)) {
    query['QueryArgs'] = request.queryArgs;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnWafRules',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnWafRules(request: DescribeDcdnWafRulesRequest): DescribeDcdnWafRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnWafRulesWithOptions(request, runtime);
}

model DescribeDcdnWafScenesRequest {
  defenseScenes?: string(name='DefenseScenes'),
  ownerId?: long(name='OwnerId'),
}

model DescribeDcdnWafScenesResponseBody = {
  defenseScenes?: [ 
    {
      defenseScene?: string(name='DefenseScene'),
      policyCount?: int32(name='PolicyCount'),
      ruleCount?: int32(name='RuleCount'),
    }
  ](name='DefenseScenes'),
  requestId?: string(name='RequestId'),
}

model DescribeDcdnWafScenesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnWafScenesResponseBody(name='body'),
}

async function describeDcdnWafScenesWithOptions(request: DescribeDcdnWafScenesRequest, runtime: Util.RuntimeOptions): DescribeDcdnWafScenesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.defenseScenes)) {
    query['DefenseScenes'] = request.defenseScenes;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnWafScenes',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnWafScenes(request: DescribeDcdnWafScenesRequest): DescribeDcdnWafScenesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnWafScenesWithOptions(request, runtime);
}

model DescribeDcdnWafServiceRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeDcdnWafServiceResponseBody = {
  edition?: string(name='Edition'),
  openingTime?: string(name='OpeningTime'),
  requestBillingType?: string(name='RequestBillingType'),
  requestId?: string(name='RequestId'),
  ruleBillingType?: string(name='RuleBillingType'),
  status?: string(name='Status'),
}

model DescribeDcdnWafServiceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnWafServiceResponseBody(name='body'),
}

async function describeDcdnWafServiceWithOptions(request: DescribeDcdnWafServiceRequest, runtime: Util.RuntimeOptions): DescribeDcdnWafServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnWafService',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnWafService(request: DescribeDcdnWafServiceRequest): DescribeDcdnWafServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnWafServiceWithOptions(request, runtime);
}

model DescribeDcdnWafSpecInfoRequest {
  ownerId?: long(name='OwnerId'),
}

model DescribeDcdnWafSpecInfoResponseBody = {
  edition?: string(name='Edition'),
  requestId?: string(name='RequestId'),
  specInfos?: [ 
    {
      configs?: [ 
        {
          config?: string(name='Config'),
          expr?: string(name='Expr'),
          value?: string(name='Value'),
        }
      ](name='Configs'),
      defenseScene?: string(name='DefenseScene'),
    }
  ](name='SpecInfos'),
}

model DescribeDcdnWafSpecInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnWafSpecInfoResponseBody(name='body'),
}

async function describeDcdnWafSpecInfoWithOptions(request: DescribeDcdnWafSpecInfoRequest, runtime: Util.RuntimeOptions): DescribeDcdnWafSpecInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnWafSpecInfo',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnWafSpecInfo(request: DescribeDcdnWafSpecInfoRequest): DescribeDcdnWafSpecInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnWafSpecInfoWithOptions(request, runtime);
}

model DescribeDcdnsecServiceRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeDcdnsecServiceResponseBody = {
  changingAffectTime?: string(name='ChangingAffectTime'),
  changingChargeType?: string(name='ChangingChargeType'),
  domainNum?: string(name='DomainNum'),
  endTime?: string(name='EndTime'),
  flowType?: string(name='FlowType'),
  instanceId?: string(name='InstanceId'),
  internetChargeType?: string(name='InternetChargeType'),
  operationLocks?: {
    lockReason?: [ 
    {
      lockReason?: string(name='LockReason'),
    }
  ](name='LockReason')
  }(name='OperationLocks'),
  requestId?: string(name='RequestId'),
  requestType?: string(name='RequestType'),
  startTime?: string(name='StartTime'),
  version?: string(name='Version'),
}

model DescribeDcdnsecServiceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDcdnsecServiceResponseBody(name='body'),
}

async function describeDcdnsecServiceWithOptions(request: DescribeDcdnsecServiceRequest, runtime: Util.RuntimeOptions): DescribeDcdnsecServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDcdnsecService',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDcdnsecService(request: DescribeDcdnsecServiceRequest): DescribeDcdnsecServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDcdnsecServiceWithOptions(request, runtime);
}

model DescribeRoutineRequest {
  name?: string(name='Name'),
  ownerId?: long(name='OwnerId'),
}

model DescribeRoutineResponseBody = {
  content?: map[string]any(name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeRoutineResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRoutineResponseBody(name='body'),
}

async function describeRoutineWithOptions(request: DescribeRoutineRequest, runtime: Util.RuntimeOptions): DescribeRoutineResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRoutine',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRoutine(request: DescribeRoutineRequest): DescribeRoutineResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRoutineWithOptions(request, runtime);
}

model DescribeRoutineCanaryEnvsRequest {
  ownerId?: long(name='OwnerId'),
}

model DescribeRoutineCanaryEnvsResponseBody = {
  content?: map[string]any(name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeRoutineCanaryEnvsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRoutineCanaryEnvsResponseBody(name='body'),
}

async function describeRoutineCanaryEnvsWithOptions(request: DescribeRoutineCanaryEnvsRequest, runtime: Util.RuntimeOptions): DescribeRoutineCanaryEnvsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRoutineCanaryEnvs',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRoutineCanaryEnvs(request: DescribeRoutineCanaryEnvsRequest): DescribeRoutineCanaryEnvsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRoutineCanaryEnvsWithOptions(request, runtime);
}

model DescribeRoutineCodeRevisionRequest {
  name?: string(name='Name'),
  ownerId?: long(name='OwnerId'),
  selectCodeRevision?: string(name='SelectCodeRevision'),
}

model DescribeRoutineCodeRevisionResponseBody = {
  content?: map[string]any(name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeRoutineCodeRevisionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRoutineCodeRevisionResponseBody(name='body'),
}

async function describeRoutineCodeRevisionWithOptions(request: DescribeRoutineCodeRevisionRequest, runtime: Util.RuntimeOptions): DescribeRoutineCodeRevisionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.selectCodeRevision)) {
    body['SelectCodeRevision'] = request.selectCodeRevision;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRoutineCodeRevision',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRoutineCodeRevision(request: DescribeRoutineCodeRevisionRequest): DescribeRoutineCodeRevisionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRoutineCodeRevisionWithOptions(request, runtime);
}

model DescribeRoutineSpecRequest {
  ownerId?: long(name='OwnerId'),
}

model DescribeRoutineSpecResponseBody = {
  content?: map[string]any(name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeRoutineSpecResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRoutineSpecResponseBody(name='body'),
}

async function describeRoutineSpecWithOptions(request: DescribeRoutineSpecRequest, runtime: Util.RuntimeOptions): DescribeRoutineSpecResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRoutineSpec',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRoutineSpec(request: DescribeRoutineSpecRequest): DescribeRoutineSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRoutineSpecWithOptions(request, runtime);
}

model DescribeRoutineUserInfoRequest {
  ownerId?: long(name='OwnerId'),
}

model DescribeRoutineUserInfoResponseBody = {
  content?: map[string]any(name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeRoutineUserInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRoutineUserInfoResponseBody(name='body'),
}

async function describeRoutineUserInfoWithOptions(request: DescribeRoutineUserInfoRequest, runtime: Util.RuntimeOptions): DescribeRoutineUserInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRoutineUserInfo',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRoutineUserInfo(request: DescribeRoutineUserInfoRequest): DescribeRoutineUserInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRoutineUserInfoWithOptions(request, runtime);
}

model DescribeUserDcdnIpaStatusRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeUserDcdnIpaStatusResponseBody = {
  enabled?: boolean(name='Enabled'),
  inDebt?: boolean(name='InDebt'),
  inDebtOverdue?: boolean(name='InDebtOverdue'),
  onService?: boolean(name='OnService'),
  requestId?: string(name='RequestId'),
}

model DescribeUserDcdnIpaStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserDcdnIpaStatusResponseBody(name='body'),
}

async function describeUserDcdnIpaStatusWithOptions(request: DescribeUserDcdnIpaStatusRequest, runtime: Util.RuntimeOptions): DescribeUserDcdnIpaStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserDcdnIpaStatus',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUserDcdnIpaStatus(request: DescribeUserDcdnIpaStatusRequest): DescribeUserDcdnIpaStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserDcdnIpaStatusWithOptions(request, runtime);
}

model DescribeUserDcdnStatusRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeUserDcdnStatusResponseBody = {
  enabled?: boolean(name='Enabled'),
  inDebt?: boolean(name='InDebt'),
  inDebtOverdue?: boolean(name='InDebtOverdue'),
  onService?: boolean(name='OnService'),
  requestId?: string(name='RequestId'),
}

model DescribeUserDcdnStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserDcdnStatusResponseBody(name='body'),
}

async function describeUserDcdnStatusWithOptions(request: DescribeUserDcdnStatusRequest, runtime: Util.RuntimeOptions): DescribeUserDcdnStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserDcdnStatus',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUserDcdnStatus(request: DescribeUserDcdnStatusRequest): DescribeUserDcdnStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserDcdnStatusWithOptions(request, runtime);
}

model DescribeUserErStatusRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeUserErStatusResponseBody = {
  enabled?: boolean(name='Enabled'),
  inDebt?: boolean(name='InDebt'),
  inDebtOverdue?: boolean(name='InDebtOverdue'),
  onService?: boolean(name='OnService'),
  requestId?: string(name='RequestId'),
}

model DescribeUserErStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserErStatusResponseBody(name='body'),
}

async function describeUserErStatusWithOptions(request: DescribeUserErStatusRequest, runtime: Util.RuntimeOptions): DescribeUserErStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserErStatus',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUserErStatus(request: DescribeUserErStatusRequest): DescribeUserErStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserErStatusWithOptions(request, runtime);
}

model DescribeUserLogserviceStatusRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeUserLogserviceStatusResponseBody = {
  enabled?: boolean(name='Enabled'),
  inDebt?: boolean(name='InDebt'),
  inDebtOverdue?: boolean(name='InDebtOverdue'),
  onService?: boolean(name='OnService'),
  requestId?: string(name='RequestId'),
}

model DescribeUserLogserviceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserLogserviceStatusResponseBody(name='body'),
}

async function describeUserLogserviceStatusWithOptions(request: DescribeUserLogserviceStatusRequest, runtime: Util.RuntimeOptions): DescribeUserLogserviceStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserLogserviceStatus',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUserLogserviceStatus(request: DescribeUserLogserviceStatusRequest): DescribeUserLogserviceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserLogserviceStatusWithOptions(request, runtime);
}

model EditRoutineConfRequest {
  description?: string(name='Description'),
  envConf?: map[string]any(name='EnvConf'),
  name?: string(name='Name'),
  ownerId?: long(name='OwnerId'),
}

model EditRoutineConfShrinkRequest {
  description?: string(name='Description'),
  envConfShrink?: string(name='EnvConf'),
  name?: string(name='Name'),
  ownerId?: long(name='OwnerId'),
}

model EditRoutineConfResponseBody = {
  content?: map[string]any(name='Content'),
  requestId?: string(name='RequestId'),
}

model EditRoutineConfResponse = {
  headers: map[string]string(name='headers'),
  body: EditRoutineConfResponseBody(name='body'),
}

async function editRoutineConfWithOptions(tmpReq: EditRoutineConfRequest, runtime: Util.RuntimeOptions): EditRoutineConfResponse {
  Util.validateModel(tmpReq);
  var request = new EditRoutineConfShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.envConf)) {
    request.envConfShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.envConf, 'EnvConf', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.envConfShrink)) {
    body['EnvConf'] = request.envConfShrink;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'EditRoutineConf',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function editRoutineConf(request: EditRoutineConfRequest): EditRoutineConfResponse {
  var runtime = new Util.RuntimeOptions{};
  return editRoutineConfWithOptions(request, runtime);
}

model ListDcdnRealTimeDeliveryProjectRequest {
  businessType?: string(name='BusinessType'),
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListDcdnRealTimeDeliveryProjectResponseBody = {
  content?: {
    projects?: [ 
    {
      businessType?: string(name='BusinessType'),
      dataCenter?: string(name='DataCenter'),
      domainName?: string(name='DomainName'),
      fieldName?: string(name='FieldName'),
      projectName?: string(name='ProjectName'),
      SLSLogStore?: string(name='SLSLogStore'),
      SLSProject?: string(name='SLSProject'),
      SLSRegion?: string(name='SLSRegion'),
      samplingRate?: float(name='SamplingRate'),
      type?: string(name='Type'),
    }
  ](name='Projects')
  }(name='Content'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListDcdnRealTimeDeliveryProjectResponse = {
  headers: map[string]string(name='headers'),
  body: ListDcdnRealTimeDeliveryProjectResponseBody(name='body'),
}

async function listDcdnRealTimeDeliveryProjectWithOptions(request: ListDcdnRealTimeDeliveryProjectRequest, runtime: Util.RuntimeOptions): ListDcdnRealTimeDeliveryProjectResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.businessType)) {
    query['BusinessType'] = request.businessType;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDcdnRealTimeDeliveryProject',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDcdnRealTimeDeliveryProject(request: ListDcdnRealTimeDeliveryProjectRequest): ListDcdnRealTimeDeliveryProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDcdnRealTimeDeliveryProjectWithOptions(request, runtime);
}

model ModifyDCdnDomainSchdmByPropertyRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
  property?: string(name='Property'),
}

model ModifyDCdnDomainSchdmByPropertyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDCdnDomainSchdmByPropertyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDCdnDomainSchdmByPropertyResponseBody(name='body'),
}

async function modifyDCdnDomainSchdmByPropertyWithOptions(request: ModifyDCdnDomainSchdmByPropertyRequest, runtime: Util.RuntimeOptions): ModifyDCdnDomainSchdmByPropertyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.property)) {
    query['Property'] = request.property;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDCdnDomainSchdmByProperty',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDCdnDomainSchdmByProperty(request: ModifyDCdnDomainSchdmByPropertyRequest): ModifyDCdnDomainSchdmByPropertyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDCdnDomainSchdmByPropertyWithOptions(request, runtime);
}

model ModifyDcdnWafPolicyRequest {
  ownerId?: long(name='OwnerId'),
  policyId?: long(name='PolicyId'),
  policyName?: string(name='PolicyName'),
  policyStatus?: string(name='PolicyStatus'),
}

model ModifyDcdnWafPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDcdnWafPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDcdnWafPolicyResponseBody(name='body'),
}

async function modifyDcdnWafPolicyWithOptions(request: ModifyDcdnWafPolicyRequest, runtime: Util.RuntimeOptions): ModifyDcdnWafPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.policyId)) {
    body['PolicyId'] = request.policyId;
  }
  if (!Util.isUnset(request.policyName)) {
    body['PolicyName'] = request.policyName;
  }
  if (!Util.isUnset(request.policyStatus)) {
    body['PolicyStatus'] = request.policyStatus;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDcdnWafPolicy',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDcdnWafPolicy(request: ModifyDcdnWafPolicyRequest): ModifyDcdnWafPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDcdnWafPolicyWithOptions(request, runtime);
}

model ModifyDcdnWafPolicyDomainsRequest {
  bindDomains?: string(name='BindDomains'),
  ownerId?: long(name='OwnerId'),
  policyId?: long(name='PolicyId'),
  unbindDomains?: string(name='UnbindDomains'),
}

model ModifyDcdnWafPolicyDomainsResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDcdnWafPolicyDomainsResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDcdnWafPolicyDomainsResponseBody(name='body'),
}

async function modifyDcdnWafPolicyDomainsWithOptions(request: ModifyDcdnWafPolicyDomainsRequest, runtime: Util.RuntimeOptions): ModifyDcdnWafPolicyDomainsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.bindDomains)) {
    body['BindDomains'] = request.bindDomains;
  }
  if (!Util.isUnset(request.policyId)) {
    body['PolicyId'] = request.policyId;
  }
  if (!Util.isUnset(request.unbindDomains)) {
    body['UnbindDomains'] = request.unbindDomains;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDcdnWafPolicyDomains',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDcdnWafPolicyDomains(request: ModifyDcdnWafPolicyDomainsRequest): ModifyDcdnWafPolicyDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDcdnWafPolicyDomainsWithOptions(request, runtime);
}

model ModifyDcdnWafRuleRequest {
  ownerId?: long(name='OwnerId'),
  ruleConfig?: string(name='RuleConfig'),
  ruleId?: long(name='RuleId'),
  ruleName?: string(name='RuleName'),
  ruleStatus?: string(name='RuleStatus'),
}

model ModifyDcdnWafRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDcdnWafRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDcdnWafRuleResponseBody(name='body'),
}

async function modifyDcdnWafRuleWithOptions(request: ModifyDcdnWafRuleRequest, runtime: Util.RuntimeOptions): ModifyDcdnWafRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.ruleConfig)) {
    body['RuleConfig'] = request.ruleConfig;
  }
  if (!Util.isUnset(request.ruleId)) {
    body['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.ruleName)) {
    body['RuleName'] = request.ruleName;
  }
  if (!Util.isUnset(request.ruleStatus)) {
    body['RuleStatus'] = request.ruleStatus;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDcdnWafRule',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDcdnWafRule(request: ModifyDcdnWafRuleRequest): ModifyDcdnWafRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDcdnWafRuleWithOptions(request, runtime);
}

model OpenDcdnServiceRequest {
  billType?: string(name='BillType'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  websocketBillType?: string(name='WebsocketBillType'),
}

model OpenDcdnServiceResponseBody = {
  requestId?: string(name='RequestId'),
}

model OpenDcdnServiceResponse = {
  headers: map[string]string(name='headers'),
  body: OpenDcdnServiceResponseBody(name='body'),
}

async function openDcdnServiceWithOptions(request: OpenDcdnServiceRequest, runtime: Util.RuntimeOptions): OpenDcdnServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.billType)) {
    query['BillType'] = request.billType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.websocketBillType)) {
    query['WebsocketBillType'] = request.websocketBillType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OpenDcdnService',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function openDcdnService(request: OpenDcdnServiceRequest): OpenDcdnServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return openDcdnServiceWithOptions(request, runtime);
}

model PreloadDcdnObjectCachesRequest {
  area?: string(name='Area'),
  l2Preload?: boolean(name='L2Preload'),
  objectPath?: string(name='ObjectPath'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model PreloadDcdnObjectCachesResponseBody = {
  preloadTaskId?: string(name='PreloadTaskId'),
  requestId?: string(name='RequestId'),
}

model PreloadDcdnObjectCachesResponse = {
  headers: map[string]string(name='headers'),
  body: PreloadDcdnObjectCachesResponseBody(name='body'),
}

async function preloadDcdnObjectCachesWithOptions(request: PreloadDcdnObjectCachesRequest, runtime: Util.RuntimeOptions): PreloadDcdnObjectCachesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.area)) {
    query['Area'] = request.area;
  }
  if (!Util.isUnset(request.l2Preload)) {
    query['L2Preload'] = request.l2Preload;
  }
  if (!Util.isUnset(request.objectPath)) {
    query['ObjectPath'] = request.objectPath;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PreloadDcdnObjectCaches',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function preloadDcdnObjectCaches(request: PreloadDcdnObjectCachesRequest): PreloadDcdnObjectCachesResponse {
  var runtime = new Util.RuntimeOptions{};
  return preloadDcdnObjectCachesWithOptions(request, runtime);
}

model PublishDcdnStagingConfigToProductionRequest {
  domainName?: string(name='DomainName'),
  functionName?: string(name='FunctionName'),
  ownerId?: long(name='OwnerId'),
}

model PublishDcdnStagingConfigToProductionResponseBody = {
  requestId?: string(name='RequestId'),
}

model PublishDcdnStagingConfigToProductionResponse = {
  headers: map[string]string(name='headers'),
  body: PublishDcdnStagingConfigToProductionResponseBody(name='body'),
}

async function publishDcdnStagingConfigToProductionWithOptions(request: PublishDcdnStagingConfigToProductionRequest, runtime: Util.RuntimeOptions): PublishDcdnStagingConfigToProductionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.functionName)) {
    query['FunctionName'] = request.functionName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PublishDcdnStagingConfigToProduction',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function publishDcdnStagingConfigToProduction(request: PublishDcdnStagingConfigToProductionRequest): PublishDcdnStagingConfigToProductionResponse {
  var runtime = new Util.RuntimeOptions{};
  return publishDcdnStagingConfigToProductionWithOptions(request, runtime);
}

model PublishRoutineCodeRevisionRequest {
  envs?: map[string]any(name='Envs'),
  name?: string(name='Name'),
  ownerId?: long(name='OwnerId'),
  selectCodeRevision?: string(name='SelectCodeRevision'),
}

model PublishRoutineCodeRevisionShrinkRequest {
  envsShrink?: string(name='Envs'),
  name?: string(name='Name'),
  ownerId?: long(name='OwnerId'),
  selectCodeRevision?: string(name='SelectCodeRevision'),
}

model PublishRoutineCodeRevisionResponseBody = {
  content?: map[string]any(name='Content'),
  requestId?: string(name='RequestId'),
}

model PublishRoutineCodeRevisionResponse = {
  headers: map[string]string(name='headers'),
  body: PublishRoutineCodeRevisionResponseBody(name='body'),
}

async function publishRoutineCodeRevisionWithOptions(tmpReq: PublishRoutineCodeRevisionRequest, runtime: Util.RuntimeOptions): PublishRoutineCodeRevisionResponse {
  Util.validateModel(tmpReq);
  var request = new PublishRoutineCodeRevisionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.envs)) {
    request.envsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.envs, 'Envs', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.envsShrink)) {
    body['Envs'] = request.envsShrink;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.selectCodeRevision)) {
    body['SelectCodeRevision'] = request.selectCodeRevision;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PublishRoutineCodeRevision',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function publishRoutineCodeRevision(request: PublishRoutineCodeRevisionRequest): PublishRoutineCodeRevisionResponse {
  var runtime = new Util.RuntimeOptions{};
  return publishRoutineCodeRevisionWithOptions(request, runtime);
}

model RefreshDcdnObjectCachesRequest {
  objectPath?: string(name='ObjectPath'),
  objectType?: string(name='ObjectType'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model RefreshDcdnObjectCachesResponseBody = {
  refreshTaskId?: string(name='RefreshTaskId'),
  requestId?: string(name='RequestId'),
}

model RefreshDcdnObjectCachesResponse = {
  headers: map[string]string(name='headers'),
  body: RefreshDcdnObjectCachesResponseBody(name='body'),
}

async function refreshDcdnObjectCachesWithOptions(request: RefreshDcdnObjectCachesRequest, runtime: Util.RuntimeOptions): RefreshDcdnObjectCachesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.objectPath)) {
    query['ObjectPath'] = request.objectPath;
  }
  if (!Util.isUnset(request.objectType)) {
    query['ObjectType'] = request.objectType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RefreshDcdnObjectCaches',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function refreshDcdnObjectCaches(request: RefreshDcdnObjectCachesRequest): RefreshDcdnObjectCachesResponse {
  var runtime = new Util.RuntimeOptions{};
  return refreshDcdnObjectCachesWithOptions(request, runtime);
}

model RollbackDcdnStagingConfigRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
}

model RollbackDcdnStagingConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model RollbackDcdnStagingConfigResponse = {
  headers: map[string]string(name='headers'),
  body: RollbackDcdnStagingConfigResponseBody(name='body'),
}

async function rollbackDcdnStagingConfigWithOptions(request: RollbackDcdnStagingConfigRequest, runtime: Util.RuntimeOptions): RollbackDcdnStagingConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RollbackDcdnStagingConfig',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function rollbackDcdnStagingConfig(request: RollbackDcdnStagingConfigRequest): RollbackDcdnStagingConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return rollbackDcdnStagingConfigWithOptions(request, runtime);
}

model SetDcdnConfigOfVersionRequest {
  configId?: string(name='ConfigId'),
  functionArgs?: string(name='FunctionArgs'),
  functionId?: long(name='FunctionId'),
  functionName?: string(name='FunctionName'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  versionId?: string(name='VersionId'),
}

model SetDcdnConfigOfVersionResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetDcdnConfigOfVersionResponse = {
  headers: map[string]string(name='headers'),
  body: SetDcdnConfigOfVersionResponseBody(name='body'),
}

async function setDcdnConfigOfVersionWithOptions(request: SetDcdnConfigOfVersionRequest, runtime: Util.RuntimeOptions): SetDcdnConfigOfVersionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!Util.isUnset(request.functionArgs)) {
    query['FunctionArgs'] = request.functionArgs;
  }
  if (!Util.isUnset(request.functionId)) {
    query['FunctionId'] = request.functionId;
  }
  if (!Util.isUnset(request.functionName)) {
    query['FunctionName'] = request.functionName;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.versionId)) {
    query['VersionId'] = request.versionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetDcdnConfigOfVersion',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setDcdnConfigOfVersion(request: SetDcdnConfigOfVersionRequest): SetDcdnConfigOfVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDcdnConfigOfVersionWithOptions(request, runtime);
}

model SetDcdnDomainCSRCertificateRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
  serverCertificate?: string(name='ServerCertificate'),
}

model SetDcdnDomainCSRCertificateResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetDcdnDomainCSRCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: SetDcdnDomainCSRCertificateResponseBody(name='body'),
}

async function setDcdnDomainCSRCertificateWithOptions(request: SetDcdnDomainCSRCertificateRequest, runtime: Util.RuntimeOptions): SetDcdnDomainCSRCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.serverCertificate)) {
    query['ServerCertificate'] = request.serverCertificate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetDcdnDomainCSRCertificate',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setDcdnDomainCSRCertificate(request: SetDcdnDomainCSRCertificateRequest): SetDcdnDomainCSRCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDcdnDomainCSRCertificateWithOptions(request, runtime);
}

model SetDcdnDomainCertificateRequest {
  certName?: string(name='CertName'),
  certType?: string(name='CertType'),
  domainName?: string(name='DomainName'),
  forceSet?: string(name='ForceSet'),
  ownerId?: long(name='OwnerId'),
  region?: string(name='Region'),
  SSLPri?: string(name='SSLPri'),
  SSLProtocol?: string(name='SSLProtocol'),
  SSLPub?: string(name='SSLPub'),
  securityToken?: string(name='SecurityToken'),
}

model SetDcdnDomainCertificateResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetDcdnDomainCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: SetDcdnDomainCertificateResponseBody(name='body'),
}

async function setDcdnDomainCertificateWithOptions(request: SetDcdnDomainCertificateRequest, runtime: Util.RuntimeOptions): SetDcdnDomainCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certName)) {
    query['CertName'] = request.certName;
  }
  if (!Util.isUnset(request.certType)) {
    query['CertType'] = request.certType;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.forceSet)) {
    query['ForceSet'] = request.forceSet;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.SSLPri)) {
    query['SSLPri'] = request.SSLPri;
  }
  if (!Util.isUnset(request.SSLProtocol)) {
    query['SSLProtocol'] = request.SSLProtocol;
  }
  if (!Util.isUnset(request.SSLPub)) {
    query['SSLPub'] = request.SSLPub;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetDcdnDomainCertificate',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setDcdnDomainCertificate(request: SetDcdnDomainCertificateRequest): SetDcdnDomainCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDcdnDomainCertificateWithOptions(request, runtime);
}

model SetDcdnDomainSMCertificateRequest {
  certIdentifier?: string(name='CertIdentifier'),
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
  SSLProtocol?: string(name='SSLProtocol'),
  securityToken?: string(name='SecurityToken'),
}

model SetDcdnDomainSMCertificateResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetDcdnDomainSMCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: SetDcdnDomainSMCertificateResponseBody(name='body'),
}

async function setDcdnDomainSMCertificateWithOptions(request: SetDcdnDomainSMCertificateRequest, runtime: Util.RuntimeOptions): SetDcdnDomainSMCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certIdentifier)) {
    query['CertIdentifier'] = request.certIdentifier;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.SSLProtocol)) {
    query['SSLProtocol'] = request.SSLProtocol;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetDcdnDomainSMCertificate',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setDcdnDomainSMCertificate(request: SetDcdnDomainSMCertificateRequest): SetDcdnDomainSMCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDcdnDomainSMCertificateWithOptions(request, runtime);
}

model SetDcdnDomainStagingConfigRequest {
  domainName?: string(name='DomainName'),
  functions?: string(name='Functions'),
  ownerId?: long(name='OwnerId'),
}

model SetDcdnDomainStagingConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetDcdnDomainStagingConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetDcdnDomainStagingConfigResponseBody(name='body'),
}

async function setDcdnDomainStagingConfigWithOptions(request: SetDcdnDomainStagingConfigRequest, runtime: Util.RuntimeOptions): SetDcdnDomainStagingConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.functions)) {
    query['Functions'] = request.functions;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetDcdnDomainStagingConfig',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setDcdnDomainStagingConfig(request: SetDcdnDomainStagingConfigRequest): SetDcdnDomainStagingConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDcdnDomainStagingConfigWithOptions(request, runtime);
}

model SetDcdnFullDomainsBlockIPRequest {
  blockInterval?: int32(name='BlockInterval'),
  IPList?: string(name='IPList'),
  operationType?: string(name='OperationType'),
  ownerId?: long(name='OwnerId'),
}

model SetDcdnFullDomainsBlockIPResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model SetDcdnFullDomainsBlockIPResponse = {
  headers: map[string]string(name='headers'),
  body: SetDcdnFullDomainsBlockIPResponseBody(name='body'),
}

async function setDcdnFullDomainsBlockIPWithOptions(request: SetDcdnFullDomainsBlockIPRequest, runtime: Util.RuntimeOptions): SetDcdnFullDomainsBlockIPResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.blockInterval)) {
    body['BlockInterval'] = request.blockInterval;
  }
  if (!Util.isUnset(request.IPList)) {
    body['IPList'] = request.IPList;
  }
  if (!Util.isUnset(request.operationType)) {
    body['OperationType'] = request.operationType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SetDcdnFullDomainsBlockIP',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setDcdnFullDomainsBlockIP(request: SetDcdnFullDomainsBlockIPRequest): SetDcdnFullDomainsBlockIPResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDcdnFullDomainsBlockIPWithOptions(request, runtime);
}

model SetDcdnUserConfigRequest {
  configs?: string(name='Configs'),
  functionId?: int32(name='FunctionId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model SetDcdnUserConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetDcdnUserConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetDcdnUserConfigResponseBody(name='body'),
}

async function setDcdnUserConfigWithOptions(request: SetDcdnUserConfigRequest, runtime: Util.RuntimeOptions): SetDcdnUserConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.configs)) {
    query['Configs'] = request.configs;
  }
  if (!Util.isUnset(request.functionId)) {
    query['FunctionId'] = request.functionId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetDcdnUserConfig',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setDcdnUserConfig(request: SetDcdnUserConfigRequest): SetDcdnUserConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDcdnUserConfigWithOptions(request, runtime);
}

model SetRoutineSubdomainRequest {
  ownerId?: long(name='OwnerId'),
  subdomains?: map[string]any(name='Subdomains'),
}

model SetRoutineSubdomainShrinkRequest {
  ownerId?: long(name='OwnerId'),
  subdomainsShrink?: string(name='Subdomains'),
}

model SetRoutineSubdomainResponseBody = {
  content?: map[string]any(name='Content'),
  requestId?: string(name='RequestId'),
}

model SetRoutineSubdomainResponse = {
  headers: map[string]string(name='headers'),
  body: SetRoutineSubdomainResponseBody(name='body'),
}

async function setRoutineSubdomainWithOptions(tmpReq: SetRoutineSubdomainRequest, runtime: Util.RuntimeOptions): SetRoutineSubdomainResponse {
  Util.validateModel(tmpReq);
  var request = new SetRoutineSubdomainShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.subdomains)) {
    request.subdomainsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.subdomains, 'Subdomains', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.subdomainsShrink)) {
    body['Subdomains'] = request.subdomainsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SetRoutineSubdomain',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setRoutineSubdomain(request: SetRoutineSubdomainRequest): SetRoutineSubdomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return setRoutineSubdomainWithOptions(request, runtime);
}

model StartDcdnDomainRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model StartDcdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartDcdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: StartDcdnDomainResponseBody(name='body'),
}

async function startDcdnDomainWithOptions(request: StartDcdnDomainRequest, runtime: Util.RuntimeOptions): StartDcdnDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartDcdnDomain',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startDcdnDomain(request: StartDcdnDomainRequest): StartDcdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return startDcdnDomainWithOptions(request, runtime);
}

model StartDcdnIpaDomainRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model StartDcdnIpaDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartDcdnIpaDomainResponse = {
  headers: map[string]string(name='headers'),
  body: StartDcdnIpaDomainResponseBody(name='body'),
}

async function startDcdnIpaDomainWithOptions(request: StartDcdnIpaDomainRequest, runtime: Util.RuntimeOptions): StartDcdnIpaDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartDcdnIpaDomain',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startDcdnIpaDomain(request: StartDcdnIpaDomainRequest): StartDcdnIpaDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return startDcdnIpaDomainWithOptions(request, runtime);
}

model StopDcdnDomainRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model StopDcdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopDcdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: StopDcdnDomainResponseBody(name='body'),
}

async function stopDcdnDomainWithOptions(request: StopDcdnDomainRequest, runtime: Util.RuntimeOptions): StopDcdnDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopDcdnDomain',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopDcdnDomain(request: StopDcdnDomainRequest): StopDcdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopDcdnDomainWithOptions(request, runtime);
}

model StopDcdnIpaDomainRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model StopDcdnIpaDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopDcdnIpaDomainResponse = {
  headers: map[string]string(name='headers'),
  body: StopDcdnIpaDomainResponseBody(name='body'),
}

async function stopDcdnIpaDomainWithOptions(request: StopDcdnIpaDomainRequest, runtime: Util.RuntimeOptions): StopDcdnIpaDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopDcdnIpaDomain',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopDcdnIpaDomain(request: StopDcdnIpaDomainRequest): StopDcdnIpaDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopDcdnIpaDomainWithOptions(request, runtime);
}

model TagDcdnResourcesRequest {
  ownerId?: long(name='OwnerId'),
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model TagDcdnResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagDcdnResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagDcdnResourcesResponseBody(name='body'),
}

async function tagDcdnResourcesWithOptions(request: TagDcdnResourcesRequest, runtime: Util.RuntimeOptions): TagDcdnResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TagDcdnResources',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function tagDcdnResources(request: TagDcdnResourcesRequest): TagDcdnResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagDcdnResourcesWithOptions(request, runtime);
}

model UntagDcdnResourcesRequest {
  all?: boolean(name='All'),
  ownerId?: long(name='OwnerId'),
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagDcdnResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UntagDcdnResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagDcdnResourcesResponseBody(name='body'),
}

async function untagDcdnResourcesWithOptions(request: UntagDcdnResourcesRequest, runtime: Util.RuntimeOptions): UntagDcdnResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.all)) {
    query['All'] = request.all;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UntagDcdnResources',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function untagDcdnResources(request: UntagDcdnResourcesRequest): UntagDcdnResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagDcdnResourcesWithOptions(request, runtime);
}

model UpdateDcdnDeliverTaskRequest {
  deliver?: string(name='Deliver'),
  deliverId?: long(name='DeliverId'),
  domainName?: string(name='DomainName'),
  name?: string(name='Name'),
  ownerId?: long(name='OwnerId'),
  reports?: string(name='Reports'),
  schedule?: string(name='Schedule'),
}

model UpdateDcdnDeliverTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateDcdnDeliverTaskResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDcdnDeliverTaskResponseBody(name='body'),
}

async function updateDcdnDeliverTaskWithOptions(request: UpdateDcdnDeliverTaskRequest, runtime: Util.RuntimeOptions): UpdateDcdnDeliverTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.deliver)) {
    body['Deliver'] = request.deliver;
  }
  if (!Util.isUnset(request.deliverId)) {
    body['DeliverId'] = request.deliverId;
  }
  if (!Util.isUnset(request.domainName)) {
    body['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.reports)) {
    body['Reports'] = request.reports;
  }
  if (!Util.isUnset(request.schedule)) {
    body['Schedule'] = request.schedule;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDcdnDeliverTask',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateDcdnDeliverTask(request: UpdateDcdnDeliverTaskRequest): UpdateDcdnDeliverTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDcdnDeliverTaskWithOptions(request, runtime);
}

model UpdateDcdnDomainRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  securityToken?: string(name='SecurityToken'),
  sources?: string(name='Sources'),
  topLevelDomain?: string(name='TopLevelDomain'),
}

model UpdateDcdnDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateDcdnDomainResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDcdnDomainResponseBody(name='body'),
}

async function updateDcdnDomainWithOptions(request: UpdateDcdnDomainRequest, runtime: Util.RuntimeOptions): UpdateDcdnDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.sources)) {
    query['Sources'] = request.sources;
  }
  if (!Util.isUnset(request.topLevelDomain)) {
    query['TopLevelDomain'] = request.topLevelDomain;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDcdnDomain',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateDcdnDomain(request: UpdateDcdnDomainRequest): UpdateDcdnDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDcdnDomainWithOptions(request, runtime);
}

model UpdateDcdnIpaDomainRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  securityToken?: string(name='SecurityToken'),
  sources?: string(name='Sources'),
  topLevelDomain?: string(name='TopLevelDomain'),
}

model UpdateDcdnIpaDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateDcdnIpaDomainResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDcdnIpaDomainResponseBody(name='body'),
}

async function updateDcdnIpaDomainWithOptions(request: UpdateDcdnIpaDomainRequest, runtime: Util.RuntimeOptions): UpdateDcdnIpaDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.sources)) {
    query['Sources'] = request.sources;
  }
  if (!Util.isUnset(request.topLevelDomain)) {
    query['TopLevelDomain'] = request.topLevelDomain;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDcdnIpaDomain',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateDcdnIpaDomain(request: UpdateDcdnIpaDomainRequest): UpdateDcdnIpaDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDcdnIpaDomainWithOptions(request, runtime);
}

model UpdateDcdnSLSRealtimeLogDeliveryRequest {
  dataCenter?: string(name='DataCenter'),
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
  projectName?: string(name='ProjectName'),
  SLSLogStore?: string(name='SLSLogStore'),
  SLSProject?: string(name='SLSProject'),
  SLSRegion?: string(name='SLSRegion'),
  samplingRate?: string(name='SamplingRate'),
}

model UpdateDcdnSLSRealtimeLogDeliveryResponseBody = {
  content?: {
    domains?: [ 
    {
      desc?: string(name='Desc'),
      domainName?: string(name='DomainName'),
      region?: string(name='Region'),
      status?: string(name='Status'),
    }
  ](name='Domains')
  }(name='Content'),
  requestId?: string(name='RequestId'),
}

model UpdateDcdnSLSRealtimeLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDcdnSLSRealtimeLogDeliveryResponseBody(name='body'),
}

async function updateDcdnSLSRealtimeLogDeliveryWithOptions(request: UpdateDcdnSLSRealtimeLogDeliveryRequest, runtime: Util.RuntimeOptions): UpdateDcdnSLSRealtimeLogDeliveryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.dataCenter)) {
    body['DataCenter'] = request.dataCenter;
  }
  if (!Util.isUnset(request.domainName)) {
    body['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.projectName)) {
    body['ProjectName'] = request.projectName;
  }
  if (!Util.isUnset(request.SLSLogStore)) {
    body['SLSLogStore'] = request.SLSLogStore;
  }
  if (!Util.isUnset(request.SLSProject)) {
    body['SLSProject'] = request.SLSProject;
  }
  if (!Util.isUnset(request.SLSRegion)) {
    body['SLSRegion'] = request.SLSRegion;
  }
  if (!Util.isUnset(request.samplingRate)) {
    body['SamplingRate'] = request.samplingRate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDcdnSLSRealtimeLogDelivery',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateDcdnSLSRealtimeLogDelivery(request: UpdateDcdnSLSRealtimeLogDeliveryRequest): UpdateDcdnSLSRealtimeLogDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDcdnSLSRealtimeLogDeliveryWithOptions(request, runtime);
}

model UpdateDcdnSubTaskRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  reportIds?: string(name='ReportIds'),
  startTime?: string(name='StartTime'),
}

model UpdateDcdnSubTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateDcdnSubTaskResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDcdnSubTaskResponseBody(name='body'),
}

async function updateDcdnSubTaskWithOptions(request: UpdateDcdnSubTaskRequest, runtime: Util.RuntimeOptions): UpdateDcdnSubTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.domainName)) {
    body['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.reportIds)) {
    body['ReportIds'] = request.reportIds;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDcdnSubTask',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateDcdnSubTask(request: UpdateDcdnSubTaskRequest): UpdateDcdnSubTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDcdnSubTaskWithOptions(request, runtime);
}

model UpdateDcdnUserRealTimeDeliveryFieldRequest {
  businessType?: string(name='BusinessType'),
  fields?: string(name='Fields'),
  ownerId?: long(name='OwnerId'),
}

model UpdateDcdnUserRealTimeDeliveryFieldResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateDcdnUserRealTimeDeliveryFieldResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDcdnUserRealTimeDeliveryFieldResponseBody(name='body'),
}

async function updateDcdnUserRealTimeDeliveryFieldWithOptions(request: UpdateDcdnUserRealTimeDeliveryFieldRequest, runtime: Util.RuntimeOptions): UpdateDcdnUserRealTimeDeliveryFieldResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDcdnUserRealTimeDeliveryField',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateDcdnUserRealTimeDeliveryField(request: UpdateDcdnUserRealTimeDeliveryFieldRequest): UpdateDcdnUserRealTimeDeliveryFieldResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDcdnUserRealTimeDeliveryFieldWithOptions(request, runtime);
}

model UploadRoutineCodeRequest {
  codeDescription?: string(name='CodeDescription'),
  name?: string(name='Name'),
  ownerId?: long(name='OwnerId'),
}

model UploadRoutineCodeResponseBody = {
  content?: map[string]any(name='Content'),
  requestId?: string(name='RequestId'),
}

model UploadRoutineCodeResponse = {
  headers: map[string]string(name='headers'),
  body: UploadRoutineCodeResponseBody(name='body'),
}

async function uploadRoutineCodeWithOptions(request: UploadRoutineCodeRequest, runtime: Util.RuntimeOptions): UploadRoutineCodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.codeDescription)) {
    body['CodeDescription'] = request.codeDescription;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UploadRoutineCode',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function uploadRoutineCode(request: UploadRoutineCodeRequest): UploadRoutineCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return uploadRoutineCodeWithOptions(request, runtime);
}

model UploadStagingRoutineCodeRequest {
  codeDescription?: string(name='CodeDescription'),
  name?: string(name='Name'),
  ownerId?: long(name='OwnerId'),
}

model UploadStagingRoutineCodeResponseBody = {
  content?: map[string]any(name='Content'),
  requestId?: string(name='RequestId'),
}

model UploadStagingRoutineCodeResponse = {
  headers: map[string]string(name='headers'),
  body: UploadStagingRoutineCodeResponseBody(name='body'),
}

async function uploadStagingRoutineCodeWithOptions(request: UploadStagingRoutineCodeRequest, runtime: Util.RuntimeOptions): UploadStagingRoutineCodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.codeDescription)) {
    body['CodeDescription'] = request.codeDescription;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UploadStagingRoutineCode',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function uploadStagingRoutineCode(request: UploadStagingRoutineCodeRequest): UploadStagingRoutineCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return uploadStagingRoutineCodeWithOptions(request, runtime);
}

model VerifyDcdnDomainOwnerRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
  verifyType?: string(name='VerifyType'),
}

model VerifyDcdnDomainOwnerResponseBody = {
  content?: string(name='Content'),
  requestId?: string(name='RequestId'),
}

model VerifyDcdnDomainOwnerResponse = {
  headers: map[string]string(name='headers'),
  body: VerifyDcdnDomainOwnerResponseBody(name='body'),
}

async function verifyDcdnDomainOwnerWithOptions(request: VerifyDcdnDomainOwnerRequest, runtime: Util.RuntimeOptions): VerifyDcdnDomainOwnerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.verifyType)) {
    query['VerifyType'] = request.verifyType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'VerifyDcdnDomainOwner',
    version = '2018-01-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function verifyDcdnDomainOwner(request: VerifyDcdnDomainOwnerRequest): VerifyDcdnDomainOwnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return verifyDcdnDomainOwnerWithOptions(request, runtime);
}

