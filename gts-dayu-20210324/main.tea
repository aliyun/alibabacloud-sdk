/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('gts-dayu', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model GetPartnerInfoByDingOrgIdRequest {
  dingOrgId?: string(name='DingOrgId', description='dingOrgId'),
}

model GetPartnerInfoByDingOrgIdResponseBody = {
  errorMsg?: string(name='ErrorMsg', description='errorMsg'),
  data?: {
    id?: string(name='Id', description='id'),
    pid?: string(name='Pid'),
    companyName?: string(name='CompanyName'),
  }(name='Data', description='data'),
  errorCode?: string(name='ErrorCode', description='errorCode'),
  success?: boolean(name='Success', description='success'),
  exception?: map[string]any(name='Exception', description='exception'),
  requestId?: string(name='RequestId'),
}

model GetPartnerInfoByDingOrgIdResponse = {
  headers: map[string]string(name='headers'),
  body: GetPartnerInfoByDingOrgIdResponseBody(name='body'),
}

async function getPartnerInfoByDingOrgIdWithOptions(request: GetPartnerInfoByDingOrgIdRequest, runtime: Util.RuntimeOptions): GetPartnerInfoByDingOrgIdResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetPartnerInfoByDingOrgId', '2021-03-24', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getPartnerInfoByDingOrgId(request: GetPartnerInfoByDingOrgIdRequest): GetPartnerInfoByDingOrgIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPartnerInfoByDingOrgIdWithOptions(request, runtime);
}

model CreateByAccountRequest {
  phone?: string(name='Phone', description='phone'),
  dingOrgId?: string(name='DingOrgId', description='dingOrgId'),
  accountUserId?: string(name='AccountUserId', description='accountUserId'),
}

model CreateByAccountResponseBody = {
  errorMsg?: string(name='ErrorMsg', description='errorMsg'),
  data?: boolean(name='Data', description='data'),
  errorCode?: string(name='ErrorCode', description='errorCode'),
  success?: boolean(name='Success', description='success'),
  exception?: map[string]any(name='Exception', description='exception'),
  requestId?: string(name='RequestId'),
}

model CreateByAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CreateByAccountResponseBody(name='body'),
}

async function createByAccountWithOptions(request: CreateByAccountRequest, runtime: Util.RuntimeOptions): CreateByAccountResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('CreateByAccount', '2021-03-24', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function createByAccount(request: CreateByAccountRequest): CreateByAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return createByAccountWithOptions(request, runtime);
}

model QueryPersonInfoRequest {
  accountUserId?: string(name='AccountUserId', description='accountUserId'),
}

model QueryPersonInfoResponseBody = {
  errorMsg?: string(name='ErrorMsg', description='errorMsg'),
  data?: {
    id?: string(name='Id'),
    isCompleted?: boolean(name='IsCompleted'),
    pid?: string(name='Pid'),
    name?: string(name='Name'),
    sex?: long(name='Sex'),
    age?: long(name='Age'),
    phoneNo?: string(name='PhoneNo'),
    email?: string(name='Email'),
  }(name='Data', description='data'),
  errorCode?: string(name='ErrorCode', description='errorCode'),
  success?: boolean(name='Success', description='success'),
  exception?: map[string]any(name='Exception', description='exception'),
  requestId?: string(name='RequestId'),
}

model QueryPersonInfoResponse = {
  headers: map[string]string(name='headers'),
  body: QueryPersonInfoResponseBody(name='body'),
}

async function queryPersonInfoWithOptions(request: QueryPersonInfoRequest, runtime: Util.RuntimeOptions): QueryPersonInfoResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('QueryPersonInfo', '2021-03-24', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function queryPersonInfo(request: QueryPersonInfoRequest): QueryPersonInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPersonInfoWithOptions(request, runtime);
}

