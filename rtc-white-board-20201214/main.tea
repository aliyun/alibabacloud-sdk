/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  

  checkConfig(config);
  @endpoint = getEndpoint('rtc-white-board', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model CreateAppRequest {
  appName?: string(name='AppName', description='白板应用名，由不超过32位的中文、英文、数字或下划线组成'),
}

model CreateAppResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  responseSuccess?: boolean(name='ResponseSuccess', description='请求结果'),
  errorCode?: string(name='ErrorCode', description='错误码'),
  errorMsg?: string(name='ErrorMsg', description='错误信息'),
  result?: {
    appID?: string(name='AppID', description='白板应用唯一标识符'),
  }(name='Result', description='返回结果体'),
}

model CreateAppResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAppResponseBody(name='body'),
}

async function createAppWithOptions(request: CreateAppRequest, runtime: Util.RuntimeOptions): CreateAppResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateApp',
    version = '2020-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createApp(request: CreateAppRequest): CreateAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAppWithOptions(request, runtime);
}

model CreateWhiteBoardRequest {
  userId?: string(name='UserId', description='创建白板的用户ID（客户业务用户），由纯数字组成。'),
  appID?: string(name='AppID', description='白板应用唯一标识符'),
}

model CreateWhiteBoardResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  responseSuccess?: boolean(name='ResponseSuccess', description='请求结果'),
  errorCode?: string(name='ErrorCode', description='错误码'),
  errorMsg?: string(name='ErrorMsg', description='错误信息'),
  result?: {
    docKey?: string(name='DocKey', description='文档唯一标识符，由大小写字母和数字组成'),
  }(name='Result', description='返回结果体'),
}

model CreateWhiteBoardResponse = {
  headers: map[string]string(name='headers'),
  body: CreateWhiteBoardResponseBody(name='body'),
}

async function createWhiteBoardWithOptions(request: CreateWhiteBoardRequest, runtime: Util.RuntimeOptions): CreateWhiteBoardResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateWhiteBoard',
    version = '2020-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createWhiteBoard(request: CreateWhiteBoardRequest): CreateWhiteBoardResponse {
  var runtime = new Util.RuntimeOptions{};
  return createWhiteBoardWithOptions(request, runtime);
}

model OpenWhiteBoardRequest {
  appID?: string(name='AppID', description='白板应用唯一标识符'),
  userId?: string(name='UserId', description='打开白板的用户ID（客户业务用户），由纯数字组成'),
  docKey?: string(name='DocKey', description='白板文档唯一标识符'),
}

model OpenWhiteBoardResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  responseSuccess?: boolean(name='ResponseSuccess', description='请求结果'),
  errorCode?: string(name='ErrorCode', description='错误码'),
  errorMsg?: string(name='ErrorMsg', description='错误信息'),
  result?: {
    documentAccessInfo?: {
      accessToken?: string(name='AccessToken', description='连接签名'),
      collabHost?: string(name='CollabHost', description='白板长连接地址'),
      permission?: long(name='Permission', description='权限码，取值：0:无权限，1:只读，2:读写'),
      userInfo?: {
        avatarUrl?: string(name='AvatarUrl', description='用户头像的URL'),
        nick?: string(name='Nick', description='用户昵称'),
        nickPinyin?: string(name='NickPinyin', description='用户的拼音昵称'),
        userId?: string(name='UserId', description='打开白板的用户ID'),
      }(name='UserInfo', description='用户信息'),
      wsDomain?: string(name='WsDomain', description='新协议长连接服务域名'),
    }(name='DocumentAccessInfo', description='白板连接信息'),
  }(name='Result', description='返回结果体'),
}

model OpenWhiteBoardResponse = {
  headers: map[string]string(name='headers'),
  body: OpenWhiteBoardResponseBody(name='body'),
}

async function openWhiteBoardWithOptions(request: OpenWhiteBoardRequest, runtime: Util.RuntimeOptions): OpenWhiteBoardResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'OpenWhiteBoard',
    version = '2020-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function openWhiteBoard(request: OpenWhiteBoardRequest): OpenWhiteBoardResponse {
  var runtime = new Util.RuntimeOptions{};
  return openWhiteBoardWithOptions(request, runtime);
}

model RefreshUsersPermissionsRequest {
  userIds?: string(name='UserIds', description='需要刷新权限的用户ID，多个用英文逗号（,）分隔，最多30个，每个ID由纯数字组成'),
  docKey?: string(name='DocKey', description='白板文档唯一标识符'),
  appID?: string(name='AppID', description='白板应用唯一标识符'),
}

model RefreshUsersPermissionsResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  responseSuccess?: boolean(name='ResponseSuccess', description='请求结果'),
  errorCode?: string(name='ErrorCode', description='错误码'),
  errorMsg?: string(name='ErrorMsg', description='错误信息'),
  result?: boolean(name='Result', description='返回结果'),
}

model RefreshUsersPermissionsResponse = {
  headers: map[string]string(name='headers'),
  body: RefreshUsersPermissionsResponseBody(name='body'),
}

async function refreshUsersPermissionsWithOptions(request: RefreshUsersPermissionsRequest, runtime: Util.RuntimeOptions): RefreshUsersPermissionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'RefreshUsersPermissions',
    version = '2020-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function refreshUsersPermissions(request: RefreshUsersPermissionsRequest): RefreshUsersPermissionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return refreshUsersPermissionsWithOptions(request, runtime);
}

model SetAppCallbackUrlRequest {
  appID?: string(name='AppID', description='白板应用唯一标识符'),
  appCallbackUrl?: string(name='AppCallbackUrl', description='白板应用回调地址URL'),
  appCallbackAuthKey?: string(name='AppCallbackAuthKey', description='白板应用回调鉴权码，由8~20位大小写字母、数字或下划线组成'),
}

model SetAppCallbackUrlResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  responseSuccess?: boolean(name='ResponseSuccess', description='请求结果'),
  errorCode?: string(name='ErrorCode', description='错误码'),
  errorMsg?: string(name='ErrorMsg', description='错误信息'),
  result?: boolean(name='Result', description='返回结果'),
}

model SetAppCallbackUrlResponse = {
  headers: map[string]string(name='headers'),
  body: SetAppCallbackUrlResponseBody(name='body'),
}

async function setAppCallbackUrlWithOptions(request: SetAppCallbackUrlRequest, runtime: Util.RuntimeOptions): SetAppCallbackUrlResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'SetAppCallbackUrl',
    version = '2020-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setAppCallbackUrl(request: SetAppCallbackUrlRequest): SetAppCallbackUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return setAppCallbackUrlWithOptions(request, runtime);
}

model SetAppDomainNamesRequest {
  appID?: string(name='AppID', description='白板应用唯一标识符'),
  appDomainNames?: string(name='AppDomainNames', description='所有会使用到白板应用的客户网站域名，多个使用英文逗号(,)分隔，最多传10个'),
}

model SetAppDomainNamesResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  responseSuccess?: boolean(name='ResponseSuccess', description='请求结果'),
  errorCode?: string(name='ErrorCode', description='错误码'),
  errorMsg?: string(name='ErrorMsg', description='错误信息'),
  result?: boolean(name='Result', description='返回结果'),
}

model SetAppDomainNamesResponse = {
  headers: map[string]string(name='headers'),
  body: SetAppDomainNamesResponseBody(name='body'),
}

async function setAppDomainNamesWithOptions(request: SetAppDomainNamesRequest, runtime: Util.RuntimeOptions): SetAppDomainNamesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'SetAppDomainNames',
    version = '2020-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setAppDomainNames(request: SetAppDomainNamesRequest): SetAppDomainNamesResponse {
  var runtime = new Util.RuntimeOptions{};
  return setAppDomainNamesWithOptions(request, runtime);
}

model SetAppNameRequest {
  appID?: string(name='AppID', description='白板应用唯一标识符'),
  appName?: string(name='AppName', description='白板应用名，由不超过32位的中文、英文、数字或下划线组成'),
}

model SetAppNameResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  responseSuccess?: boolean(name='ResponseSuccess', description='请求结果'),
  errorCode?: string(name='ErrorCode', description='错误码'),
  errorMsg?: string(name='ErrorMsg', description='错误信息'),
  result?: boolean(name='Result', description='返回结果'),
}

model SetAppNameResponse = {
  headers: map[string]string(name='headers'),
  body: SetAppNameResponseBody(name='body'),
}

async function setAppNameWithOptions(request: SetAppNameRequest, runtime: Util.RuntimeOptions): SetAppNameResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'SetAppName',
    version = '2020-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setAppName(request: SetAppNameRequest): SetAppNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return setAppNameWithOptions(request, runtime);
}

model SetAppStatusRequest {
  appID?: string(name='AppID', description='白板应用唯一标识符'),
  appStatus?: long(name='AppStatus', description='白板应用状态（取值：1:启用，2:停用）'),
}

model SetAppStatusResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  responseSuccess?: boolean(name='ResponseSuccess', description='请求结果'),
  errorCode?: string(name='ErrorCode', description='错误码'),
  errorMsg?: string(name='ErrorMsg', description='错误信息'),
  result?: boolean(name='Result', description='返回结果'),
}

model SetAppStatusResponse = {
  headers: map[string]string(name='headers'),
  body: SetAppStatusResponseBody(name='body'),
}

async function setAppStatusWithOptions(request: SetAppStatusRequest, runtime: Util.RuntimeOptions): SetAppStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'SetAppStatus',
    version = '2020-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setAppStatus(request: SetAppStatusRequest): SetAppStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return setAppStatusWithOptions(request, runtime);
}

