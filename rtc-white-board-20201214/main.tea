/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('rtc-white-board', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model DescribeAppsRequest {
  appID?: string(name='AppID', description='白板应用唯一标识符，默认查询所有应用ID'),
  appStatus?: long(name='AppStatus', description='白板应用状态，默认查询所有状态。（取值：1:启用，2:停用）'),
  pageNum?: long(name='PageNum', description='第几页，默认查询第1页。'),
  pageSize?: long(name='PageSize', description='每页显示个数，默认为10。'),
}

model DescribeAppsResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  responseSuccess?: boolean(name='ResponseSuccess', description='请求结果'),
  errorCode?: string(name='ErrorCode', description='错误码'),
  errorMsg?: string(name='ErrorMsg', description='错误信息'),
  result?: {
    totalNum?: long(name='TotalNum'),
    totalPage?: long(name='TotalPage'),
    appList?: [ 
      {
        appID?: string(name='AppID', description='白板应用唯一标识符'),
        appName?: string(name='AppName', description='白板应用名'),
        status?: long(name='Status', description='白板应用状态（取值：1:启用，2:停用）'),
        callbackUrl?: string(name='CallbackUrl', description='白板应用回调地址URL'),
        domainNames?: string(name='DomainNames', description='合法域名列表，使用英文逗号(,)分隔'),
        createTime?: string(name='CreateTime', description='白板应用创建时间'),
        callbackType?: string(name='CallbackType', description='白板应用回调类型'),
      }
    ](name='AppList', description='App信息列表'),
  }(name='Result', description='返回结果体'),
}

model DescribeAppsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAppsResponseBody(name='body'),
}

async function describeAppsWithOptions(request: DescribeAppsRequest, runtime: Util.RuntimeOptions): DescribeAppsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeApps', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeApps(request: DescribeAppsRequest): DescribeAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAppsWithOptions(request, runtime);
}

model PauseWhiteBoardRecordingRequest {
  appID?: string(name='AppID', description='白板应用唯一标识符'),
  userId?: string(name='UserId', description='结束白板录制的用户ID（客户业务用户），由1~32位大小写字母、数字、下划线、短划线（-）组成'),
  docKey?: string(name='DocKey', description='白板文档唯一标识符'),
  recordId?: string(name='RecordId', description='白板录制Session的唯一标识'),
}

model PauseWhiteBoardRecordingResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  responseSuccess?: boolean(name='ResponseSuccess', description='请求结果'),
  errorCode?: string(name='ErrorCode', description='错误码'),
  errorMsg?: string(name='ErrorMsg', description='错误信息'),
  result?: {
    pauseTime?: long(name='PauseTime', description='录制结束的UNIX时间戳'),
  }(name='Result', description='返回结果体'),
}

model PauseWhiteBoardRecordingResponse = {
  headers: map[string]string(name='headers'),
  body: PauseWhiteBoardRecordingResponseBody(name='body'),
}

async function pauseWhiteBoardRecordingWithOptions(request: PauseWhiteBoardRecordingRequest, runtime: Util.RuntimeOptions): PauseWhiteBoardRecordingResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PauseWhiteBoardRecording', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function pauseWhiteBoardRecording(request: PauseWhiteBoardRecordingRequest): PauseWhiteBoardRecordingResponse {
  var runtime = new Util.RuntimeOptions{};
  return pauseWhiteBoardRecordingWithOptions(request, runtime);
}

model SetAppCallbackUrlRequest {
  appID?: string(name='AppID', description='白板应用唯一标识符'),
  appCallbackUrl?: string(name='AppCallbackUrl', description='白板应用回调地址URL'),
  appCallbackAuthKey?: string(name='AppCallbackAuthKey', description='白板应用回调鉴权码，由8~20位大小写字母、数字或下划线组成'),
}

model SetAppCallbackUrlResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  responseSuccess?: boolean(name='ResponseSuccess', description='请求结果'),
  errorCode?: string(name='ErrorCode', description='错误码'),
  errorMsg?: string(name='ErrorMsg', description='错误信息'),
  result?: boolean(name='Result', description='返回结果'),
}

model SetAppCallbackUrlResponse = {
  headers: map[string]string(name='headers'),
  body: SetAppCallbackUrlResponseBody(name='body'),
}

async function setAppCallbackUrlWithOptions(request: SetAppCallbackUrlRequest, runtime: Util.RuntimeOptions): SetAppCallbackUrlResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetAppCallbackUrl', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setAppCallbackUrl(request: SetAppCallbackUrlRequest): SetAppCallbackUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return setAppCallbackUrlWithOptions(request, runtime);
}

model StartWhiteBoardRecordingRequest {
  appID?: string(name='AppID', description='白板应用唯一标识符'),
  userId?: string(name='UserId', description='启动白板录制的用户ID（客户业务用户），由1~32位大小写字母、数字、下划线、短划线（-）组成'),
  docKey?: string(name='DocKey', description='白板文档唯一标识符'),
}

model StartWhiteBoardRecordingResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  responseSuccess?: boolean(name='ResponseSuccess', description='请求结果'),
  errorCode?: string(name='ErrorCode', description='错误码'),
  errorMsg?: string(name='ErrorMsg', description='错误信息'),
  result?: {
    recordId?: string(name='RecordId', description='白板录制Session的唯一标识'),
    startTime?: long(name='StartTime', description='录制开始的UNIX时间戳'),
  }(name='Result', description='返回结果体'),
}

model StartWhiteBoardRecordingResponse = {
  headers: map[string]string(name='headers'),
  body: StartWhiteBoardRecordingResponseBody(name='body'),
}

async function startWhiteBoardRecordingWithOptions(request: StartWhiteBoardRecordingRequest, runtime: Util.RuntimeOptions): StartWhiteBoardRecordingResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartWhiteBoardRecording', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startWhiteBoardRecording(request: StartWhiteBoardRecordingRequest): StartWhiteBoardRecordingResponse {
  var runtime = new Util.RuntimeOptions{};
  return startWhiteBoardRecordingWithOptions(request, runtime);
}

model SetAppNameRequest {
  appID?: string(name='AppID', description='白板应用唯一标识符'),
  appName?: string(name='AppName', description='白板应用名，由不超过32位的中文、英文、数字或下划线组成'),
}

model SetAppNameResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  responseSuccess?: boolean(name='ResponseSuccess', description='请求结果'),
  errorCode?: string(name='ErrorCode', description='错误码'),
  errorMsg?: string(name='ErrorMsg', description='错误信息'),
  result?: boolean(name='Result', description='返回结果'),
}

model SetAppNameResponse = {
  headers: map[string]string(name='headers'),
  body: SetAppNameResponseBody(name='body'),
}

async function setAppNameWithOptions(request: SetAppNameRequest, runtime: Util.RuntimeOptions): SetAppNameResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetAppName', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setAppName(request: SetAppNameRequest): SetAppNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return setAppNameWithOptions(request, runtime);
}

model DescribeWhiteBoardsRequest {
  appID?: string(name='AppID', description='白板应用唯一标识符'),
  docStatus?: long(name='DocStatus', description='白板文档状态，默认查询所有状态。（取值：1:启用，2:停用）'),
  pageNum?: long(name='PageNum', description='第几页，默认查询第1页'),
  pageSize?: long(name='PageSize', description='每页显示个数，默认为10'),
}

model DescribeWhiteBoardsResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  responseSuccess?: boolean(name='ResponseSuccess', description='请求结果'),
  errorCode?: string(name='ErrorCode', description='错误码'),
  errorMsg?: string(name='ErrorMsg', description='错误信息'),
  result?: {
    totalNum?: long(name='TotalNum'),
    totalPage?: long(name='TotalPage'),
    docList?: [ 
      {
        appID?: string(name='AppID', description='白板应用唯一标识符'),
        docKey?: string(name='DocKey', description='文档唯一标识符'),
        status?: long(name='Status', description='文档状态（取值：1:启用，2:停用）'),
        createUserId?: string(name='CreateUserId', description='创建白板的用户ID'),
        createTime?: string(name='CreateTime', description='白板应用创建时间'),
      }
    ](name='DocList', description='App信息列表'),
  }(name='Result', description='返回结果体'),
}

model DescribeWhiteBoardsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWhiteBoardsResponseBody(name='body'),
}

async function describeWhiteBoardsWithOptions(request: DescribeWhiteBoardsRequest, runtime: Util.RuntimeOptions): DescribeWhiteBoardsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeWhiteBoards', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeWhiteBoards(request: DescribeWhiteBoardsRequest): DescribeWhiteBoardsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWhiteBoardsWithOptions(request, runtime);
}

model ResumeWhiteBoardRecordingRequest {
  appID?: string(name='AppID', description='白板应用唯一标识符'),
  userId?: string(name='UserId', description='结束白板录制的用户ID（客户业务用户），由1~32位大小写字母、数字、下划线、短划线（-）组成'),
  docKey?: string(name='DocKey', description='白板文档唯一标识符'),
  recordId?: string(name='RecordId', description='白板录制Session的唯一标识'),
}

model ResumeWhiteBoardRecordingResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  responseSuccess?: boolean(name='ResponseSuccess', description='请求结果'),
  errorCode?: string(name='ErrorCode', description='错误码'),
  errorMsg?: string(name='ErrorMsg', description='错误信息'),
  result?: {
    resumeTime?: long(name='ResumeTime', description='录制结束的UNIX时间戳'),
  }(name='Result', description='返回结果体'),
}

model ResumeWhiteBoardRecordingResponse = {
  headers: map[string]string(name='headers'),
  body: ResumeWhiteBoardRecordingResponseBody(name='body'),
}

async function resumeWhiteBoardRecordingWithOptions(request: ResumeWhiteBoardRecordingRequest, runtime: Util.RuntimeOptions): ResumeWhiteBoardRecordingResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ResumeWhiteBoardRecording', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function resumeWhiteBoardRecording(request: ResumeWhiteBoardRecordingRequest): ResumeWhiteBoardRecordingResponse {
  var runtime = new Util.RuntimeOptions{};
  return resumeWhiteBoardRecordingWithOptions(request, runtime);
}

model SetAppDomainNamesRequest {
  appID?: string(name='AppID', description='白板应用唯一标识符'),
  appDomainNames?: string(name='AppDomainNames', description='所有会使用到白板应用的客户网站域名，多个使用英文逗号(,)分隔，最多传10个'),
}

model SetAppDomainNamesResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  responseSuccess?: boolean(name='ResponseSuccess', description='请求结果'),
  errorCode?: string(name='ErrorCode', description='错误码'),
  errorMsg?: string(name='ErrorMsg', description='错误信息'),
  result?: boolean(name='Result', description='返回结果'),
}

model SetAppDomainNamesResponse = {
  headers: map[string]string(name='headers'),
  body: SetAppDomainNamesResponseBody(name='body'),
}

async function setAppDomainNamesWithOptions(request: SetAppDomainNamesRequest, runtime: Util.RuntimeOptions): SetAppDomainNamesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetAppDomainNames', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setAppDomainNames(request: SetAppDomainNamesRequest): SetAppDomainNamesResponse {
  var runtime = new Util.RuntimeOptions{};
  return setAppDomainNamesWithOptions(request, runtime);
}

model OpenWhiteBoardRequest {
  appID?: string(name='AppID', description='白板应用唯一标识符'),
  userId?: string(name='UserId', description='打开白板的用户ID（客户业务用户），由1~32位大小写字母、数字、下划线、短划线（-）组成'),
  docKey?: string(name='DocKey', description='白板文档唯一标识符'),
}

model OpenWhiteBoardResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  responseSuccess?: boolean(name='ResponseSuccess', description='请求结果'),
  errorCode?: string(name='ErrorCode', description='错误码'),
  errorMsg?: string(name='ErrorMsg', description='错误信息'),
  result?: {
    documentAccessInfo?: {
      accessToken?: string(name='AccessToken', description='连接签名'),
      collabHost?: string(name='CollabHost', description='白板长连接地址'),
      permission?: long(name='Permission', description='权限码，取值：0:无权限，1:只读，2:读写'),
      userInfo?: {
        avatarUrl?: string(name='AvatarUrl', description='用户头像的URL'),
        nick?: string(name='Nick', description='用户昵称'),
        nickPinyin?: string(name='NickPinyin', description='用户的拼音昵称'),
        userId?: string(name='UserId', description='打开白板的用户ID'),
      }(name='UserInfo', description='用户信息'),
      wsDomain?: string(name='WsDomain', description='新协议长连接服务域名'),
    }(name='DocumentAccessInfo', description='白板连接信息'),
  }(name='Result', description='返回结果体'),
}

model OpenWhiteBoardResponse = {
  headers: map[string]string(name='headers'),
  body: OpenWhiteBoardResponseBody(name='body'),
}

async function openWhiteBoardWithOptions(request: OpenWhiteBoardRequest, runtime: Util.RuntimeOptions): OpenWhiteBoardResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OpenWhiteBoard', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function openWhiteBoard(request: OpenWhiteBoardRequest): OpenWhiteBoardResponse {
  var runtime = new Util.RuntimeOptions{};
  return openWhiteBoardWithOptions(request, runtime);
}

model RefreshUsersPermissionsRequest {
  userIds?: string(name='UserIds', description='需要刷新权限的用户ID，多个用英文逗号（,）分隔，最多30个，每个ID由纯数字组成'),
  docKey?: string(name='DocKey', description='白板文档唯一标识符'),
  appID?: string(name='AppID', description='白板应用唯一标识符'),
}

model RefreshUsersPermissionsResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  responseSuccess?: boolean(name='ResponseSuccess', description='请求结果'),
  errorCode?: string(name='ErrorCode', description='错误码'),
  errorMsg?: string(name='ErrorMsg', description='错误信息'),
  result?: boolean(name='Result', description='返回结果'),
}

model RefreshUsersPermissionsResponse = {
  headers: map[string]string(name='headers'),
  body: RefreshUsersPermissionsResponseBody(name='body'),
}

async function refreshUsersPermissionsWithOptions(request: RefreshUsersPermissionsRequest, runtime: Util.RuntimeOptions): RefreshUsersPermissionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RefreshUsersPermissions', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function refreshUsersPermissions(request: RefreshUsersPermissionsRequest): RefreshUsersPermissionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return refreshUsersPermissionsWithOptions(request, runtime);
}

model SetAppCallbackTypeRequest {
  appID?: string(name='AppID', description='白板应用唯一标识符'),
  appCallbackType?: string(name='AppCallbackType', description='白板应用回调类型'),
}

model SetAppCallbackTypeResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  responseSuccess?: boolean(name='ResponseSuccess', description='请求结果'),
  errorCode?: string(name='ErrorCode', description='错误码'),
  errorMsg?: string(name='ErrorMsg', description='错误信息'),
  result?: boolean(name='Result', description='返回结果'),
}

model SetAppCallbackTypeResponse = {
  headers: map[string]string(name='headers'),
  body: SetAppCallbackTypeResponseBody(name='body'),
}

async function setAppCallbackTypeWithOptions(request: SetAppCallbackTypeRequest, runtime: Util.RuntimeOptions): SetAppCallbackTypeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetAppCallbackType', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setAppCallbackType(request: SetAppCallbackTypeRequest): SetAppCallbackTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return setAppCallbackTypeWithOptions(request, runtime);
}

model CreateAppRequest {
  appName?: string(name='AppName', description='白板应用名，由不超过32位的中文、英文、数字或下划线组成'),
}

model CreateAppResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  responseSuccess?: boolean(name='ResponseSuccess', description='请求结果'),
  errorCode?: string(name='ErrorCode', description='错误码'),
  errorMsg?: string(name='ErrorMsg', description='错误信息'),
  result?: {
    appID?: string(name='AppID', description='白板应用唯一标识符'),
  }(name='Result', description='返回结果体'),
}

model CreateAppResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAppResponseBody(name='body'),
}

async function createAppWithOptions(request: CreateAppRequest, runtime: Util.RuntimeOptions): CreateAppResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateApp', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createApp(request: CreateAppRequest): CreateAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAppWithOptions(request, runtime);
}

model SetUsersPermissionsRequest {
  userIds?: string(name='UserIds', description='需要设置权限的用户ID，多个用英文逗号（,）分隔，最多30个，每个ID由纯数字组成'),
  docKey?: string(name='DocKey', description='白板文档唯一标识符'),
  appID?: string(name='AppID', description='白板应用唯一标识符'),
  permissionType?: string(name='PermissionType', description='用户白板权限类型，可选值：ban/read/edit'),
}

model SetUsersPermissionsResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  responseSuccess?: boolean(name='ResponseSuccess', description='请求结果'),
  errorCode?: string(name='ErrorCode', description='错误码'),
  errorMsg?: string(name='ErrorMsg', description='错误信息'),
  result?: boolean(name='Result', description='返回结果'),
}

model SetUsersPermissionsResponse = {
  headers: map[string]string(name='headers'),
  body: SetUsersPermissionsResponseBody(name='body'),
}

async function setUsersPermissionsWithOptions(request: SetUsersPermissionsRequest, runtime: Util.RuntimeOptions): SetUsersPermissionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetUsersPermissions', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setUsersPermissions(request: SetUsersPermissionsRequest): SetUsersPermissionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return setUsersPermissionsWithOptions(request, runtime);
}

model CreateWhiteBoardRequest {
  userId?: string(name='UserId', description='创建白板的用户ID（客户业务用户），由1~32位大小写字母、数字、下划线、短划线（-）组成'),
  appID?: string(name='AppID', description='白板应用唯一标识符'),
}

model CreateWhiteBoardResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  responseSuccess?: boolean(name='ResponseSuccess', description='请求结果'),
  errorCode?: string(name='ErrorCode', description='错误码'),
  errorMsg?: string(name='ErrorMsg', description='错误信息'),
  result?: {
    docKey?: string(name='DocKey', description='文档唯一标识符，由大小写字母和数字组成'),
  }(name='Result', description='返回结果体'),
}

model CreateWhiteBoardResponse = {
  headers: map[string]string(name='headers'),
  body: CreateWhiteBoardResponseBody(name='body'),
}

async function createWhiteBoardWithOptions(request: CreateWhiteBoardRequest, runtime: Util.RuntimeOptions): CreateWhiteBoardResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateWhiteBoard', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createWhiteBoard(request: CreateWhiteBoardRequest): CreateWhiteBoardResponse {
  var runtime = new Util.RuntimeOptions{};
  return createWhiteBoardWithOptions(request, runtime);
}

model SetAppStatusRequest {
  appID?: string(name='AppID', description='白板应用唯一标识符'),
  appStatus?: long(name='AppStatus', description='白板应用状态（取值：1:启用，2:停用）'),
}

model SetAppStatusResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  responseSuccess?: boolean(name='ResponseSuccess', description='请求结果'),
  errorCode?: string(name='ErrorCode', description='错误码'),
  errorMsg?: string(name='ErrorMsg', description='错误信息'),
  result?: boolean(name='Result', description='返回结果'),
}

model SetAppStatusResponse = {
  headers: map[string]string(name='headers'),
  body: SetAppStatusResponseBody(name='body'),
}

async function setAppStatusWithOptions(request: SetAppStatusRequest, runtime: Util.RuntimeOptions): SetAppStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetAppStatus', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setAppStatus(request: SetAppStatusRequest): SetAppStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return setAppStatusWithOptions(request, runtime);
}

model StopWhiteBoardRecordingRequest {
  appID?: string(name='AppID', description='白板应用唯一标识符'),
  userId?: string(name='UserId', description='结束白板录制的用户ID（客户业务用户），由1~32位大小写字母、数字、下划线、短划线（-）组成'),
  docKey?: string(name='DocKey', description='白板文档唯一标识符'),
  recordId?: string(name='RecordId', description='白板录制Session的唯一标识'),
}

model StopWhiteBoardRecordingResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  responseSuccess?: boolean(name='ResponseSuccess', description='请求结果'),
  errorCode?: string(name='ErrorCode', description='错误码'),
  errorMsg?: string(name='ErrorMsg', description='错误信息'),
  result?: {
    stopTime?: long(name='StopTime', description='录制结束的UNIX时间戳'),
  }(name='Result', description='返回结果体'),
}

model StopWhiteBoardRecordingResponse = {
  headers: map[string]string(name='headers'),
  body: StopWhiteBoardRecordingResponseBody(name='body'),
}

async function stopWhiteBoardRecordingWithOptions(request: StopWhiteBoardRecordingRequest, runtime: Util.RuntimeOptions): StopWhiteBoardRecordingResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StopWhiteBoardRecording', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function stopWhiteBoardRecording(request: StopWhiteBoardRecordingRequest): StopWhiteBoardRecordingResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopWhiteBoardRecordingWithOptions(request, runtime);
}

