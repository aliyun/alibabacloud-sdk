/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('rtc-white-board', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model SetAppNameRequest {
  appID?: string(name='AppID'),
  appName?: string(name='AppName'),
}

model SetAppNameResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  responseSuccess?: boolean(name='ResponseSuccess'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  result?: boolean(name='Result'),
}

model SetAppNameResponse = {
  headers: map[string]string(name='headers'),
  body: SetAppNameResponseBody(name='body'),
}

async function setAppNameWithOptions(request: SetAppNameRequest, runtime: Util.RuntimeOptions): SetAppNameResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetAppName', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setAppName(request: SetAppNameRequest): SetAppNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return setAppNameWithOptions(request, runtime);
}

model CheckWhiteBoardHostRequest {
  docKey?: string(name='DocKey'),
  originHost?: string(name='OriginHost'),
}

model CheckWhiteBoardHostResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  responseSuccess?: boolean(name='ResponseSuccess'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  result?: boolean(name='Result'),
}

model CheckWhiteBoardHostResponse = {
  headers: map[string]string(name='headers'),
  body: CheckWhiteBoardHostResponseBody(name='body'),
}

async function checkWhiteBoardHostWithOptions(request: CheckWhiteBoardHostRequest, runtime: Util.RuntimeOptions): CheckWhiteBoardHostResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CheckWhiteBoardHost', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function checkWhiteBoardHost(request: CheckWhiteBoardHostRequest): CheckWhiteBoardHostResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkWhiteBoardHostWithOptions(request, runtime);
}

model GetWhiteBoardProfileCallbackRequest {
  docKey?: string(name='DocKey'),
}

model GetWhiteBoardProfileCallbackResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  responseSuccess?: boolean(name='ResponseSuccess'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  result?: {
    name?: string(name='Name'),
  }(name='Result'),
}

model GetWhiteBoardProfileCallbackResponse = {
  headers: map[string]string(name='headers'),
  body: GetWhiteBoardProfileCallbackResponseBody(name='body'),
}

async function getWhiteBoardProfileCallbackWithOptions(request: GetWhiteBoardProfileCallbackRequest, runtime: Util.RuntimeOptions): GetWhiteBoardProfileCallbackResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetWhiteBoardProfileCallback', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getWhiteBoardProfileCallback(request: GetWhiteBoardProfileCallbackRequest): GetWhiteBoardProfileCallbackResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWhiteBoardProfileCallbackWithOptions(request, runtime);
}

model SetAppDomainNamesRequest {
  appID?: string(name='AppID'),
  appDomainNames?: string(name='AppDomainNames'),
}

model SetAppDomainNamesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  responseSuccess?: boolean(name='ResponseSuccess'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  result?: boolean(name='Result'),
}

model SetAppDomainNamesResponse = {
  headers: map[string]string(name='headers'),
  body: SetAppDomainNamesResponseBody(name='body'),
}

async function setAppDomainNamesWithOptions(request: SetAppDomainNamesRequest, runtime: Util.RuntimeOptions): SetAppDomainNamesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetAppDomainNames', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setAppDomainNames(request: SetAppDomainNamesRequest): SetAppDomainNamesResponse {
  var runtime = new Util.RuntimeOptions{};
  return setAppDomainNamesWithOptions(request, runtime);
}

model GetUserPermissionCallbackRequest {
  userId?: string(name='UserId'),
  docKey?: string(name='DocKey'),
  permissionType?: string(name='PermissionType'),
}

model GetUserPermissionCallbackResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  responseSuccess?: boolean(name='ResponseSuccess'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  result?: boolean(name='Result'),
}

model GetUserPermissionCallbackResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserPermissionCallbackResponseBody(name='body'),
}

async function getUserPermissionCallbackWithOptions(request: GetUserPermissionCallbackRequest, runtime: Util.RuntimeOptions): GetUserPermissionCallbackResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetUserPermissionCallback', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getUserPermissionCallback(request: GetUserPermissionCallbackRequest): GetUserPermissionCallbackResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUserPermissionCallbackWithOptions(request, runtime);
}

model OpenWhiteBoardRequest {
  appID?: string(name='AppID'),
  userId?: string(name='UserId'),
  docKey?: string(name='DocKey'),
}

model OpenWhiteBoardResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  responseSuccess?: boolean(name='ResponseSuccess'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  result?: {
    documentAccessInfo?: {
      accessToken?: string(name='AccessToken'),
      collabHost?: string(name='CollabHost'),
      permission?: long(name='Permission'),
      userInfo?: {
        avatarUrl?: string(name='AvatarUrl'),
        nick?: string(name='Nick'),
        nickPinyin?: string(name='NickPinyin'),
        userId?: string(name='UserId'),
      }(name='UserInfo'),
    }(name='DocumentAccessInfo'),
  }(name='Result'),
}

model OpenWhiteBoardResponse = {
  headers: map[string]string(name='headers'),
  body: OpenWhiteBoardResponseBody(name='body'),
}

async function openWhiteBoardWithOptions(request: OpenWhiteBoardRequest, runtime: Util.RuntimeOptions): OpenWhiteBoardResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OpenWhiteBoard', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function openWhiteBoard(request: OpenWhiteBoardRequest): OpenWhiteBoardResponse {
  var runtime = new Util.RuntimeOptions{};
  return openWhiteBoardWithOptions(request, runtime);
}

model RefreshUsersPermissionsRequest {
  userIds?: string(name='UserIds'),
  docKey?: string(name='DocKey'),
  appID?: string(name='AppID'),
}

model RefreshUsersPermissionsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  responseSuccess?: boolean(name='ResponseSuccess'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  result?: boolean(name='Result'),
}

model RefreshUsersPermissionsResponse = {
  headers: map[string]string(name='headers'),
  body: RefreshUsersPermissionsResponseBody(name='body'),
}

async function refreshUsersPermissionsWithOptions(request: RefreshUsersPermissionsRequest, runtime: Util.RuntimeOptions): RefreshUsersPermissionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RefreshUsersPermissions', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function refreshUsersPermissions(request: RefreshUsersPermissionsRequest): RefreshUsersPermissionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return refreshUsersPermissionsWithOptions(request, runtime);
}

model GetUserProfileCallbackRequest {
  userIds?: string(name='UserIds'),
  docKey?: string(name='DocKey'),
}

model GetUserProfileCallbackResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  responseSuccess?: boolean(name='ResponseSuccess'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  result?: {
    userProfileList?: [ 
      {
        userId?: string(name='UserId'),
        avatarUrl?: string(name='AvatarUrl'),
        nick?: string(name='Nick'),
        nickPinyin?: string(name='NickPinyin'),
      }
    ](name='UserProfileList'),
  }(name='Result'),
}

model GetUserProfileCallbackResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserProfileCallbackResponseBody(name='body'),
}

async function getUserProfileCallbackWithOptions(request: GetUserProfileCallbackRequest, runtime: Util.RuntimeOptions): GetUserProfileCallbackResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetUserProfileCallback', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getUserProfileCallback(request: GetUserProfileCallbackRequest): GetUserProfileCallbackResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUserProfileCallbackWithOptions(request, runtime);
}

model CreateAppRequest {
  appName?: string(name='AppName'),
}

model CreateAppResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  responseSuccess?: boolean(name='ResponseSuccess'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  result?: {
    appID?: string(name='AppID'),
  }(name='Result'),
}

model CreateAppResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAppResponseBody(name='body'),
}

async function createAppWithOptions(request: CreateAppRequest, runtime: Util.RuntimeOptions): CreateAppResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateApp', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createApp(request: CreateAppRequest): CreateAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAppWithOptions(request, runtime);
}

model SetAppCallbackUrlRequest {
  appID?: string(name='AppID'),
  appCallbackUrl?: string(name='AppCallbackUrl'),
  appCallbackAuthKey?: string(name='AppCallbackAuthKey'),
}

model SetAppCallbackUrlResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  responseSuccess?: boolean(name='ResponseSuccess'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  result?: boolean(name='Result'),
}

model SetAppCallbackUrlResponse = {
  headers: map[string]string(name='headers'),
  body: SetAppCallbackUrlResponseBody(name='body'),
}

async function setAppCallbackUrlWithOptions(request: SetAppCallbackUrlRequest, runtime: Util.RuntimeOptions): SetAppCallbackUrlResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetAppCallbackUrl', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setAppCallbackUrl(request: SetAppCallbackUrlRequest): SetAppCallbackUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return setAppCallbackUrlWithOptions(request, runtime);
}

model CreateWhiteBoardRequest {
  userId?: string(name='UserId'),
  appID?: string(name='AppID'),
}

model CreateWhiteBoardResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  responseSuccess?: boolean(name='ResponseSuccess'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  result?: {
    docKey?: string(name='DocKey'),
  }(name='Result'),
}

model CreateWhiteBoardResponse = {
  headers: map[string]string(name='headers'),
  body: CreateWhiteBoardResponseBody(name='body'),
}

async function createWhiteBoardWithOptions(request: CreateWhiteBoardRequest, runtime: Util.RuntimeOptions): CreateWhiteBoardResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateWhiteBoard', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createWhiteBoard(request: CreateWhiteBoardRequest): CreateWhiteBoardResponse {
  var runtime = new Util.RuntimeOptions{};
  return createWhiteBoardWithOptions(request, runtime);
}

model SetAppStatusRequest {
  appID?: string(name='AppID'),
  appStatus?: long(name='AppStatus'),
}

model SetAppStatusResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  responseSuccess?: boolean(name='ResponseSuccess'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  result?: boolean(name='Result'),
}

model SetAppStatusResponse = {
  headers: map[string]string(name='headers'),
  body: SetAppStatusResponseBody(name='body'),
}

async function setAppStatusWithOptions(request: SetAppStatusRequest, runtime: Util.RuntimeOptions): SetAppStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetAppStatus', '2020-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setAppStatus(request: SetAppStatusRequest): SetAppStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return setAppStatusWithOptions(request, runtime);
}

