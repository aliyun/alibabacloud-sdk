/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'ecs-workbench';
  @version = '2022-02-20';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model GetInstanceRecordConfigRequest {
  instanceId: string(name='InstanceId', example='i-xxx', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model GetInstanceRecordConfigResponseBody = {
  code?: string(name='Code', example='InvalidParamter'),
  message?: string(name='Message', example='Parameter is null or invalid.'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  root?: {
    expirationDays?: int32(name='ExpirationDays', example='7'),
    instanceId?: string(name='InstanceId', example='i-xxxx'),
    parentId?: string(name='ParentId', example='123'),
    recordStorageTarget?: string(name='RecordStorageTarget', example='acs:oss:cn-shanghai:123:workbench-record-123-1/record'),
  }(name='Root'),
  success?: boolean(name='Success', example='true'),
}

model GetInstanceRecordConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceRecordConfigResponseBody(name='body'),
}

async function getInstanceRecordConfig(request: GetInstanceRecordConfigRequest): GetInstanceRecordConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInstanceRecordConfig', 'POST', '/', 'json', true, 'form', request);
}

model ListInstanceRecordsRequest {
  instanceId?: string(name='InstanceId', example='i-xxx', position='Body'),
  pageNumber?: int32(name='PageNumber', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model ListInstanceRecordsResponseBody = {
  code?: string(name='Code', example='InvalidParamter'),
  message?: string(name='Message', example='Parameter is null or invalid.'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  root?: {
    recordList?: [ 
      {
        accountId?: long(name='AccountId', example='1234'),
        expireTime?: string(name='ExpireTime', example='2023-11-16T02:59:39Z'),
        gmtCreate?: string(name='GmtCreate', example='2023-04-10T12:41:28Z'),
        instanceId?: string(name='InstanceId', example='i-xxxx'),
        instanceRecordUrl?: string(name='InstanceRecordUrl', example='https://ecs-workbench.aliyun.com/view/instance/record/replay/abc'),
        recordDurationMillis?: long(name='RecordDurationMillis', example='123'),
        status?: string(name='Status', example='running'),
        terminalSessionToken?: string(name='TerminalSessionToken', example='abc'),
      }
    ](name='RecordList'),
    totalCount?: int32(name='TotalCount', example='15'),
  }(name='Root'),
  success?: boolean(name='Success', example='true'),
}

model ListInstanceRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstanceRecordsResponseBody(name='body'),
}

async function listInstanceRecords(request: ListInstanceRecordsRequest): ListInstanceRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstanceRecords', 'POST', '/', 'json', true, 'form', request);
}

model ListTerminalCommandsRequest {
  pageNumber?: int32(name='PageNumber', example='1', position='Body'),
  pageSize?: int32(name='PageSize', example='10', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  terminalSessionToken: string(name='TerminalSessionToken', example='abc', position='Body'),
}

model ListTerminalCommandsResponseBody = {
  pageNumber?: int32(name='PageNumber', example='10'),
  pageSize?: int32(name='PageSize', example='1'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  terminalCommandList?: [ 
    {
      commandLine?: string(name='CommandLine', example='ls'),
      createTime?: string(name='CreateTime', example='2024-04-16T03:53:18Z'),
      executePath?: string(name='ExecutePath', example='/root'),
      loginUser?: string(name='LoginUser', example='root'),
    }
  ](name='TerminalCommandList'),
  totalCount?: int32(name='TotalCount', example='3'),
}

model ListTerminalCommandsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTerminalCommandsResponseBody(name='body'),
}

async function listTerminalCommands(request: ListTerminalCommandsRequest): ListTerminalCommandsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTerminalCommands', 'POST', '/', 'json', true, 'form', request);
}

model LoginInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceLoginInfo?: {
    authenticationType?: string(name='AuthenticationType', example='password/certificate'),
    certificate?: string(name='Certificate', example='----begin----
----end----'),
    credentialToken?: string(name='CredentialToken'),
    dockerContainerName?: string(name='DockerContainerName'),
    dockerExec?: string(name='DockerExec'),
    durationSeconds?: long(name='DurationSeconds', example='123'),
    expireTime?: string(name='ExpireTime', example='2022-11-30 00:00:00'),
    host?: string(name='Host', example='127.0.0.1'),
    instanceId?: string(name='InstanceId', example='i-123'),
    instanceType?: string(name='InstanceType', example='ecs/eci/ack'),
    loginByInstanceCredential?: boolean(name='LoginByInstanceCredential'),
    loginByInstanceShortcut?: boolean(name='LoginByInstanceShortcut'),
    networkAccessMode?: string(name='NetworkAccessMode', example='vpc/classic'),
    options?: {
      audioMuteSeconds?: int32(name='AudioMuteSeconds'),
      containerInfo?: {
        clusterId?: string(name='ClusterId', example='abcdef'),
        clusterName?: string(name='ClusterName', example='abc'),
        containerName?: string(name='ContainerName', example='abc'),
        deployment?: string(name='Deployment', example='abc'),
        endpoint?: string(name='Endpoint', example='abc'),
        headers?: map[string]any(name='Headers', example='{"abc":"def"}'),
        namespace?: string(name='Namespace', example='abc'),
        podName?: string(name='PodName', example='abc'),
      }(name='ContainerInfo'),
      fixedHeight?: int32(name='FixedHeight'),
      fixedWidth?: int32(name='FixedWidth'),
      notificationEventTypes?: string(name='NotificationEventTypes', example='abc'),
      notificationRecipientUrl?: string(name='NotificationRecipientUrl', example='abc'),
      notificationRetryIntervalSeconds?: int32(name='NotificationRetryIntervalSeconds', example='10'),
      notificationRetryLimit?: int32(name='NotificationRetryLimit', example='3'),
      operationDisableSeconds?: int32(name='OperationDisableSeconds'),
      sessionControl?: string(name='SessionControl', example='abc'),
      videoFreezeSeconds?: int32(name='VideoFreezeSeconds'),
    }(name='Options'),
    passPhrase?: string(name='PassPhrase', example='xxxx'),
    password?: string(name='Password', example='xxxxx'),
    port?: int32(name='Port', example='22/3389'),
    protocol?: string(name='Protocol', example='ssh/rdp/ack'),
    regionId?: string(name='RegionId', example='cn-hangzhou/cn-beijing'),
    resourceGroupId?: string(name='ResourceGroupId'),
    shortcutToken?: string(name='ShortcutToken'),
    username?: string(name='Username', example='root/Administrator'),
    vpcId?: string(name='VpcId', example='vpc-abc'),
  }(name='InstanceLoginInfo', position='Query'),
  partnerInfo?: {
    partnerId?: string(name='PartnerId', example='abc'),
    partnerName?: string(name='PartnerName', example='abc'),
  }(name='PartnerInfo', position='Query'),
  userAccount?: {
    accountId?: long(name='AccountId', example='1234'),
    accountPlatform?: string(name='AccountPlatform', example='aas'),
    accountStructure?: string(name='AccountStructure', example='2/3/4'),
    durationSeconds?: long(name='DurationSeconds', example='100'),
    empId?: string(name='EmpId', example='123abc'),
    expireTime?: string(name='ExpireTime', example='2022-11-30 00:00:00'),
    loginName?: string(name='LoginName', example='abc'),
    options?: {
      loginLimit?: long(name='LoginLimit', example='3'),
    }(name='Options'),
    parentId?: long(name='ParentId', example='1234'),
  }(name='UserAccount', position='Query'),
}

model LoginInstanceResponseBody = {
  code?: string(name='Code', example='InvalidParamter'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='abc-123'),
  root?: {
    disposableAccount?: {
      loginFormActionUrl?: string(name='LoginFormActionUrl', example='abc'),
      loginUrl?: string(name='LoginUrl', example='abc'),
    }(name='DisposableAccount'),
    instanceLoginInfoList?: [ 
      {
        instanceId?: string(name='InstanceId', example='i-abc'),
        instanceLoginToken?: string(name='InstanceLoginToken', example='134'),
        instanceLoginView?: {
          defaultViewUrl?: string(name='DefaultViewUrl', example='abc'),
        }(name='InstanceLoginView'),
        loginSuccess?: boolean(name='LoginSuccess', example='true'),
      }
    ](name='InstanceLoginInfoList'),
    sessionControl?: {
      baseUrl?: string(name='BaseUrl', example='abc'),
    }(name='SessionControl'),
  }(name='Root'),
  success?: string(name='Success', example='true/false'),
}

model LoginInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: LoginInstanceResponseBody(name='body'),
}

async function loginInstance(request: LoginInstanceRequest): LoginInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LoginInstance', 'POST', '/', 'json', false, 'json', request);
}

model SetInstanceRecordConfigRequest {
  enabled: boolean(name='Enabled', example='true', position='Body'),
  expirationDays?: int32(name='ExpirationDays', example='7', position='Body'),
  instanceId: string(name='InstanceId', example='i-xxx', position='Body'),
  recordStorageTarget?: string(name='RecordStorageTarget', example='acs:oss:cn-shanghai:123:workbench-record-123-1/record', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
}

model SetInstanceRecordConfigResponseBody = {
  code?: string(name='Code', example='InvalidParamter'),
  message?: string(name='Message', example='Parameter is null or invalid.'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  root?: boolean(name='Root', example='true'),
  success?: boolean(name='Success', example='true'),
}

model SetInstanceRecordConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetInstanceRecordConfigResponseBody(name='body'),
}

async function setInstanceRecordConfig(request: SetInstanceRecordConfigRequest): SetInstanceRecordConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetInstanceRecordConfig', 'POST', '/', 'json', true, 'form', request);
}

model ViewInstanceRecordsRequest {
  instanceId: string(name='InstanceId', example='i-123', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  terminalSessionToken: string(name='TerminalSessionToken', example='abc', position='Body'),
}

model ViewInstanceRecordsResponseBody = {
  code?: string(name='Code', example='InvalidParamter'),
  message?: string(name='Message', example='Parameter is null or invalid.'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  root?: boolean(name='Root', example='true'),
  success?: boolean(name='Success', example='true'),
}

model ViewInstanceRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ViewInstanceRecordsResponseBody(name='body'),
}

async function viewInstanceRecords(request: ViewInstanceRecordsRequest): ViewInstanceRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ViewInstanceRecords', 'POST', '/', 'json', true, 'form', request);
}

