/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'ecs-workbench';
  @version = '2022-02-20';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model LoginInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceLoginInfo?: {
    authenticationType?: string(name='AuthenticationType', example='password/certificate'),
    certificate?: string(name='Certificate', example='----begin----
----end----'),
    credentialToken?: string(name='CredentialToken'),
    dockerContainerName?: string(name='DockerContainerName'),
    dockerExec?: string(name='DockerExec'),
    durationSeconds?: long(name='DurationSeconds', example='123'),
    expireTime?: string(name='ExpireTime', example='2022-11-30 00:00:00'),
    host?: string(name='Host', example='127.0.0.1'),
    instanceId?: string(name='InstanceId', example='i-123'),
    instanceType?: string(name='InstanceType', example='ecs/eci/ack'),
    loginByInstanceCredential?: boolean(name='LoginByInstanceCredential'),
    loginByInstanceShortcut?: boolean(name='LoginByInstanceShortcut'),
    networkAccessMode?: string(name='NetworkAccessMode', example='vpc/classic'),
    options?: {
      audioMuteSeconds?: int32(name='AudioMuteSeconds'),
      containerInfo?: {
        clusterId?: string(name='ClusterId', example='abcdef'),
        clusterName?: string(name='ClusterName', example='abc'),
        containerName?: string(name='ContainerName', example='abc'),
        deployment?: string(name='Deployment', example='abc'),
        endpoint?: string(name='Endpoint', example='abc'),
        headers?: map[string]any(name='Headers', example='{"abc":"def"}'),
        namespace?: string(name='Namespace', example='abc'),
        podName?: string(name='PodName', example='abc'),
      }(name='ContainerInfo'),
      fixedHeight?: int32(name='FixedHeight'),
      fixedWidth?: int32(name='FixedWidth'),
      notificationEventTypes?: string(name='NotificationEventTypes', example='abc'),
      notificationRecipientUrl?: string(name='NotificationRecipientUrl', example='abc'),
      notificationRetryIntervalSeconds?: int32(name='NotificationRetryIntervalSeconds', example='10'),
      notificationRetryLimit?: int32(name='NotificationRetryLimit', example='3'),
      operationDisableSeconds?: int32(name='OperationDisableSeconds'),
      sessionControl?: string(name='SessionControl', example='abc'),
      videoFreezeSeconds?: int32(name='VideoFreezeSeconds'),
    }(name='Options'),
    passPhrase?: string(name='PassPhrase', example='xxxx'),
    password?: string(name='Password', example='xxxxx'),
    port?: int32(name='Port', example='22/3389'),
    protocol?: string(name='Protocol', example='ssh/rdp/ack'),
    regionId?: string(name='RegionId', example='cn-hangzhou/cn-beijing'),
    resourceGroupId?: string(name='ResourceGroupId'),
    shortcutToken?: string(name='ShortcutToken'),
    username?: string(name='Username', example='root/Administrator'),
    vpcId?: string(name='VpcId', example='vpc-abc'),
  }(name='InstanceLoginInfo', position='Query'),
  partnerInfo?: {
    partnerId?: string(name='PartnerId', example='abc'),
    partnerName?: string(name='PartnerName', example='abc'),
  }(name='PartnerInfo', position='Query'),
  userAccount?: {
    accountId?: long(name='AccountId', example='1234'),
    accountPlatform?: string(name='AccountPlatform', example='aas'),
    accountStructure?: string(name='AccountStructure', example='2/3/4'),
    durationSeconds?: long(name='DurationSeconds', example='100'),
    empId?: string(name='EmpId', example='123abc'),
    expireTime?: string(name='ExpireTime', example='2022-11-30 00:00:00'),
    loginName?: string(name='LoginName', example='abc'),
    options?: {
      loginLimit?: long(name='LoginLimit', example='3'),
    }(name='Options'),
    parentId?: long(name='ParentId', example='1234'),
  }(name='UserAccount', position='Query'),
}

model LoginInstanceResponseBody = {
  code?: string(name='Code', example='InvalidParamter'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='abc-123'),
  root?: {
    disposableAccount?: {
      loginFormActionUrl?: string(name='LoginFormActionUrl', example='abc'),
      loginUrl?: string(name='LoginUrl', example='abc'),
    }(name='DisposableAccount'),
    instanceLoginInfoList?: [ 
      {
        instanceId?: string(name='InstanceId', example='i-abc'),
        instanceLoginToken?: string(name='InstanceLoginToken', example='134'),
        instanceLoginView?: {
          defaultViewUrl?: string(name='DefaultViewUrl', example='abc'),
        }(name='InstanceLoginView'),
        loginSuccess?: boolean(name='LoginSuccess', example='true'),
      }
    ](name='InstanceLoginInfoList'),
    sessionControl?: {
      baseUrl?: string(name='BaseUrl', example='abc'),
    }(name='SessionControl'),
  }(name='Root'),
  success?: string(name='Success', example='true/false'),
}

model LoginInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: LoginInstanceResponseBody(name='body'),
}

async function loginInstance(request: LoginInstanceRequest): LoginInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LoginInstance', 'POST', '/', 'json', false, 'json', request);
}

