/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'sgx-dcap-server';
  @version = '2020-07-26';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model GetQeIdentityRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Host'),
  acsHost?: string(name='AcsHost', position='Query'),
  clientVpcId?: string(name='ClientVpcId', position='Query'),
}

model GetQeIdentityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: string(name='body'),
}

async function getQeIdentity(request: GetQeIdentityRequest): GetQeIdentityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetQeIdentity', 'GET', '/sgx/certification/v3/qe/identity', 'string', false, 'json', request);
}

model GetQveIdentityRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Host'),
  acsHost?: string(name='AcsHost', position='Query'),
  clientVpcId?: string(name='ClientVpcId', position='Query'),
}

model GetQveIdentityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: string(name='body'),
}

async function getQveIdentity(request: GetQveIdentityRequest): GetQveIdentityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetQveIdentity', 'GET', '/sgx/certification/v3/qve/identity', 'string', false, 'json', request);
}

model GetTcbInfoRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Host'),
  acsHost?: string(name='AcsHost', position='Query'),
  clientVpcId?: string(name='ClientVpcId', position='Query'),
  fmspc: string(name='fmspc', example='00706a100000', position='Query'),
}

model GetTcbInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: string(name='body'),
}

async function getTcbInfo(request: GetTcbInfoRequest): GetTcbInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTcbInfo', 'GET', '/sgx/certification/v3/tcb', 'string', false, 'json', request);
}

model PckCrlRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Host'),
  acsHost?: string(name='AcsHost', position='Query'),
  clientVpcId?: string(name='ClientVpcId', position='Query'),
  ca: string(name='ca', example='platform', position='Query'),
}

model PckCrlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: string(name='body'),
}

async function pckCrl(request: PckCrlRequest): PckCrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PckCrl', 'GET', '/sgx/certification/v3/pckcrl', 'string', false, 'json', request);
}

model RootCaCrlRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Host'),
  acsHost?: string(name='AcsHost', position='Query'),
  clientVpcId?: string(name='ClientVpcId', position='Query'),
}

model RootCaCrlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: string(name='body'),
}

async function rootCaCrl(request: RootCaCrlRequest): RootCaCrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RootCaCrl', 'GET', '/sgx/certification/v3/rootcacrl', 'string', false, 'json', request);
}

model SimplePackagePckCertRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Host'),
  acsHost?: string(name='AcsHost', position='Query'),
  clientVpcId?: string(name='ClientVpcId', position='Query'),
  cpusvn: string(name='cpusvn', example='05050809FFFF00000000000000000000', position='Query'),
  encryptedPpid?: string(name='encrypted_ppid', exampleposition='Query'),
  pceid: string(name='pceid', example='0000', position='Query'),
  pcesvn: string(name='pcesvn', example='0D00', position='Query'),
  qeid: string(name='qeid', example='B5C869897796C3525B2163D3DE6754FA', position='Query'),
}

model SimplePackagePckCertResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: string(name='body'),
}

async function simplePackagePckCert(request: SimplePackagePckCertRequest): SimplePackagePckCertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SimplePackagePckCert', 'GET', '/sgx/certification/v3/pckcert', 'string', false, 'json', request);
}

