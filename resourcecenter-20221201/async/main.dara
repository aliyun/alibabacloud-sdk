/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'ResourceCenter';
  @version = '2022-12-01';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model DisableMultiAccountResourceCenterRequest {
}

model DisableMultiAccountResourceCenterResponseBody = {
  requestId?: string(name='RequestId', example='4951F920-48DB-5731-96AA-3A7C8AE617D9'),
}

model DisableMultiAccountResourceCenterResponse = {
  headers: map[string]string(name='headers'),
  body: DisableMultiAccountResourceCenterResponseBody(name='body'),
}

async function disableMultiAccountResourceCenter(request: DisableMultiAccountResourceCenterRequest): DisableMultiAccountResourceCenterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableMultiAccountResourceCenter', 'POST', '/', 'json', false, 'json', request);
}

model DisableResourceCenterRequest {
}

model DisableResourceCenterResponseBody = {
  requestId?: string(name='RequestId', example='D170D58E-6256-5344-8F5E-922EC9ECB7EA'),
}

model DisableResourceCenterResponse = {
  headers: map[string]string(name='headers'),
  body: DisableResourceCenterResponseBody(name='body'),
}

async function disableResourceCenter(request: DisableResourceCenterRequest): DisableResourceCenterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableResourceCenter', 'POST', '/', 'json', false, 'json', request);
}

model EnableMultiAccountResourceCenterRequest {
}

model EnableMultiAccountResourceCenterResponseBody = {
  requestId?: string(name='RequestId', example='767038B7-2027-5508-858B-E213232D57D5'),
  status?: string(name='Status', example='Pending'),
}

model EnableMultiAccountResourceCenterResponse = {
  headers: map[string]string(name='headers'),
  body: EnableMultiAccountResourceCenterResponseBody(name='body'),
}

async function enableMultiAccountResourceCenter(request: EnableMultiAccountResourceCenterRequest): EnableMultiAccountResourceCenterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableMultiAccountResourceCenter', 'POST', '/', 'json', false, 'json', request);
}

model EnableResourceCenterRequest {
}

model EnableResourceCenterResponseBody = {
  requestId?: string(name='RequestId', example='45357BEF-AB50-5E4D-B05D-5A882A4BE924'),
  status?: string(name='Status', example='Pending'),
}

model EnableResourceCenterResponse = {
  headers: map[string]string(name='headers'),
  body: EnableResourceCenterResponseBody(name='body'),
}

async function enableResourceCenter(request: EnableResourceCenterRequest): EnableResourceCenterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableResourceCenter', 'POST', '/', 'json', false, 'json', request);
}

model GetMultiAccountResourceCenterServiceStatusRequest {
}

model GetMultiAccountResourceCenterServiceStatusResponseBody = {
  initialStatus?: string(name='InitialStatus', example='Pending'),
  requestId?: string(name='RequestId', example='81671397-1425-51F1-A144-4799E01BEBFF'),
  serviceStatus?: string(name='ServiceStatus', example='Enabled'),
}

model GetMultiAccountResourceCenterServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetMultiAccountResourceCenterServiceStatusResponseBody(name='body'),
}

async function getMultiAccountResourceCenterServiceStatus(request: GetMultiAccountResourceCenterServiceStatusRequest): GetMultiAccountResourceCenterServiceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMultiAccountResourceCenterServiceStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetMultiAccountResourceConfigurationRequest {
  accountId: string(name='AccountId', example='1619302****', position='Query'),
  resourceId: string(name='ResourceId', example='m-eb3hji****', position='Query'),
  resourceRegionId: string(name='ResourceRegionId', example='cn-shanghai', position='Query'),
  resourceType: string(name='ResourceType', example='ACS::VPC::RouteTable', position='Query'),
}

model GetMultiAccountResourceConfigurationResponseBody = {
  accountId?: string(name='AccountId', example='1619302****'),
  configuration?: map[string]any(name='Configuration'),
  createTime?: string(name='CreateTime', example='2023-02-14T03:12:11Z'),
  ipAddresses?: [ string ](name='IpAddresses'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  requestId?: string(name='RequestId', example='B2DCC08B-C12A-5705-879C-5A1450016156'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmzy6d****'),
  resourceId?: string(name='ResourceId', example='m-eb3hji****'),
  resourceName?: string(name='ResourceName', example='test_resource'),
  resourceType?: string(name='ResourceType', example='ACS::VPC::RouteTable'),
  tags?: [ 
    {
      key?: string(name='Key', example='tag-key'),
      value?: string(name='Value', example='tag-value'),
    }
  ](name='Tags'),
  zoneId?: string(name='ZoneId', example='cn-shanghai-a'),
}

model GetMultiAccountResourceConfigurationResponse = {
  headers: map[string]string(name='headers'),
  body: GetMultiAccountResourceConfigurationResponseBody(name='body'),
}

async function getMultiAccountResourceConfiguration(request: GetMultiAccountResourceConfigurationRequest): GetMultiAccountResourceConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMultiAccountResourceConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model GetResourceCenterServiceStatusRequest {
}

model GetResourceCenterServiceStatusResponseBody = {
  initialStatus?: string(name='InitialStatus', example='Pending'),
  requestId?: string(name='RequestId', example='AD5F848D-CCDC-5464-93E1-4BA50A4826DD'),
  serviceStatus?: string(name='ServiceStatus', example='Enabled'),
}

model GetResourceCenterServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetResourceCenterServiceStatusResponseBody(name='body'),
}

async function getResourceCenterServiceStatus(request: GetResourceCenterServiceStatusRequest): GetResourceCenterServiceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetResourceCenterServiceStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetResourceConfigurationRequest {
  resourceId: string(name='ResourceId', example='eip-bp1kyg72m****', position='Query'),
  resourceRegionId: string(name='ResourceRegionId', example='cn-shanghai', position='Query'),
  resourceType: string(name='ResourceType', example='ACS::VPC::RouteTable', position='Query'),
}

model GetResourceConfigurationResponseBody = {
  accountId?: string(name='AccountId', example='151266687691****'),
  configuration?: map[string]any(name='Configuration'),
  createTime?: string(name='CreateTime', example='2021-06-30T09:20:08Z'),
  ipAddresses?: [ string ](name='IpAddresses'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestId?: string(name='RequestId', example='F1CE0D52-32DA-531A-87A4-B9A5B68D5D8E'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmv4k****'),
  resourceId?: string(name='ResourceId', example='vtb-uf6978gdqbi****'),
  resourceName?: string(name='ResourceName', example='group1'),
  resourceType?: string(name='ResourceType', example='ACS::VPC::VSwitch'),
  tags?: [ 
    {
      key?: string(name='Key', example='test-key'),
      value?: string(name='Value', example='test-value'),
    }
  ](name='Tags'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-k'),
}

model GetResourceConfigurationResponse = {
  headers: map[string]string(name='headers'),
  body: GetResourceConfigurationResponseBody(name='body'),
}

async function getResourceConfiguration(request: GetResourceConfigurationRequest): GetResourceConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetResourceConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model ListMultiAccountResourceGroupsRequest {
  accountId: string(name='AccountId', example='1394339739****', position='Query'),
  maxResults?: int32(name='MaxResults', example='20', position='Query'),
  nextToken?: string(name='NextToken', example='AAAAAS2Nboi3t4xGrdlG5/Ks/Q1xPG9jzviYEuZydevXIkgF', position='Query'),
  resourceGroupIds?: [ string ](name='ResourceGroupIds', position='Query'),
}

model ListMultiAccountResourceGroupsResponseBody = {
  nextToken?: string(name='NextToken', example='AAAAAU5VsT9R1adMTuz9GzginZ3Y+7Y/5JATS+6q5GK9kT75'),
  requestId?: string(name='RequestId', example='0FF0A66E-781F-51EE-9531-928F197558F2'),
  resourceGroups?: [ 
    {
      accountId?: string(name='AccountId', example='1394339739****'),
      createDate?: string(name='CreateDate', example='2021-06-30T09:20:08Z'),
      displayName?: string(name='DisplayName', example='group1'),
      id?: string(name='Id', example='rg-acfmzawhxxc****'),
      name?: string(name='Name', example='my-project'),
      status?: string(name='Status', example='OK'),
    }
  ](name='ResourceGroups'),
}

model ListMultiAccountResourceGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListMultiAccountResourceGroupsResponseBody(name='body'),
}

async function listMultiAccountResourceGroups(request: ListMultiAccountResourceGroupsRequest): ListMultiAccountResourceGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListMultiAccountResourceGroups', 'POST', '/', 'json', false, 'json', request);
}

model ListMultiAccountTagKeysRequest {
  matchType?: string(name='MatchType', example='Equals', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', position='Query'),
  nextToken?: string(name='NextToken', example='eyJzZWFyY2hBZnRlcnMiOlsiMTAwMTU2Nzk4MTU1OSJd****', position='Query'),
  scope: string(name='Scope', example='rd-r4****', position='Query'),
  tagKey?: string(name='TagKey', example='test_key', position='Query'),
}

model ListMultiAccountTagKeysResponseBody = {
  nextToken?: string(name='NextToken', example='AAAAARfZmVDe9NvRXloR5+8CK9nNJufMdRA7W1miLC1P****'),
  requestId?: string(name='RequestId', example='FA6086F9-6363-51A5-A507-88E3201EBCCB'),
  tagKeys?: [ string ](name='TagKeys'),
}

model ListMultiAccountTagKeysResponse = {
  headers: map[string]string(name='headers'),
  body: ListMultiAccountTagKeysResponseBody(name='body'),
}

async function listMultiAccountTagKeys(request: ListMultiAccountTagKeysRequest): ListMultiAccountTagKeysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListMultiAccountTagKeys', 'POST', '/', 'json', false, 'json', request);
}

model ListMultiAccountTagValuesRequest {
  matchType?: string(name='MatchType', description='EQUALS: 匹配 (match), TERMS: 术语匹配 (term/terms), PREFIX: 前缀匹配, NOT_EQUALS: 不等于, CONTAINS: 包含, RANGE: 范围匹配, GREATER_THAN: 大于, GREATER_THAN_OR_EQUAL_TO: 大于等于, LESS_THAN: 小于, LESS_THAN_OR_EQUAL_TO: 小于等于, EXISTS: 存在, NOT_EXISTS: 不存在, INVALID: 无效类型, NOT_CONTAINS: 不包含', example='Equals', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', position='Query'),
  nextToken?: string(name='NextToken', example='eyJzZWFyY2hBZnRlcnMiOlsiMTAwMTU2Nzk4MTU1OSJd****', position='Query'),
  scope?: string(name='Scope', example='rd-r4****', position='Query'),
  tagKey: string(name='TagKey', example='test_key', position='Query'),
  tagValue?: string(name='TagValue', example='test_value', position='Query'),
}

model ListMultiAccountTagValuesResponseBody = {
  nextToken?: string(name='NextToken', example='eyJzZWFyY2hBZnRlcnMiOlsiMTAwMTU2Nzk4MTU1OSJd****'),
  requestId?: string(name='RequestId', example='36A3D9BE-B607-5993-B546-7E19EF65DC00'),
  tagValues?: [ string ](name='TagValues'),
}

model ListMultiAccountTagValuesResponse = {
  headers: map[string]string(name='headers'),
  body: ListMultiAccountTagValuesResponseBody(name='body'),
}

async function listMultiAccountTagValues(request: ListMultiAccountTagValuesRequest): ListMultiAccountTagValuesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListMultiAccountTagValues', 'POST', '/', 'json', false, 'json', request);
}

model ListResourceTypesRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh-CN', position='Query'),
  query?: [ string ](name='Query', position='Query'),
  resourceType?: string(name='ResourceType', example='ACS::ACK::Cluster', position='Query'),
}

model ListResourceTypesResponseBody = {
  requestId?: string(name='RequestId', example='E5556E4C-479A-5BBB-B325-F07563E7E917'),
  resourceTypes?: [ 
    {
      filterKeys?: [ string ](name='FilterKeys', description='支持的过滤条件'),
      productName?: string(name='ProductName', description='产品名称 (国际化)'),
      resourceType?: string(name='ResourceType', description='资源类型fullCode ACS::ECS::Instance', example='ACS::ACK::Cluster'),
      resourceTypeName?: string(name='ResourceTypeName', description='资源类型名称'),
    }
  ](name='ResourceTypes'),
}

model ListResourceTypesResponse = {
  headers: map[string]string(name='headers'),
  body: ListResourceTypesResponseBody(name='body'),
}

async function listResourceTypes(request: ListResourceTypesRequest): ListResourceTypesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListResourceTypes', 'POST', '/', 'json', false, 'json', request);
}

model ListTagKeysRequest {
  matchType?: string(name='MatchType', example='Equals', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', position='Query'),
  nextToken?: string(name='NextToken', example='AAAAAUYb00R0gHZBE8FVDeoh2ME93VeeEPUHs****', position='Query'),
  tagKey?: string(name='TagKey', example='test_key', position='Query'),
}

model ListTagKeysResponseBody = {
  nextToken?: string(name='NextToken', example='AAAAAUDnubHKJbVTCdlIGYUPtsu3EoN3bfdgjDA****'),
  requestId?: string(name='RequestId', example='44C8A952-D6B0-5BC8-82D5-93BA02E26F2E'),
  tagKeys?: [ string ](name='TagKeys'),
}

model ListTagKeysResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagKeysResponseBody(name='body'),
}

async function listTagKeys(request: ListTagKeysRequest): ListTagKeysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagKeys', 'POST', '/', 'json', false, 'json', request);
}

model ListTagValuesRequest {
  matchType?: string(name='MatchType', example='Equals', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', position='Query'),
  nextToken?: string(name='NextToken', example='eyJzZWFyY2hBZnRlcnMiOlsiMTAwMTU2Nzk4MTU1OSJd****', position='Query'),
  tagKey: string(name='TagKey', example='test_key', position='Query'),
  tagValue?: string(name='TagValue', example='test_value', position='Query'),
}

model ListTagValuesResponseBody = {
  nextToken?: string(name='NextToken', example='eyJzZWFyY2hBZnRlcnMiOlsiMTAwMTU2Nzk4MTU1OSJd****'),
  requestId?: string(name='RequestId', example='C1840B83-1193-5E83-AFA6-4B8D303E29F5'),
  tagValues?: [ string ](name='TagValues'),
}

model ListTagValuesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagValuesResponseBody(name='body'),
}

async function listTagValues(request: ListTagValuesRequest): ListTagValuesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagValues', 'POST', '/', 'json', false, 'json', request);
}

model SearchMultiAccountResourcesRequest {
  filter?: [ 
    {
      key?: string(name='Key', example='ResourceGroupId'),
      matchType?: string(name='MatchType', example='Equals'),
      value?: [ string ](name='Value'),
    }
  ](name='Filter', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', example='eyJzZWFyY2hBZnRlcnMiOlsiMTAwMTU2Nzk4MTU1OSJd****', position='Query'),
  scope: string(name='Scope', example='rd-r4****', position='Query'),
  sortCriterion?: {
    key?: string(name='Key', example='CreateTime'),
    order?: string(name='Order', example='ASC'),
  }(name='SortCriterion', position='Query'),
}

model SearchMultiAccountResourcesResponseBody = {
  filters?: [ 
    {
      key?: string(name='Key', example='RegionId'),
      matchType?: string(name='MatchType', example='Equals'),
      values?: [ string ](name='Values'),
    }
  ](name='Filters'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId', example='EFA806B9-7F36-55AB-8B7A-D680C2C5EE57'),
  resources?: [ 
    {
      accountId?: string(name='AccountId', example='151266687691****'),
      createTime?: string(name='CreateTime', example='2021-06-30T09:20:08Z'),
      ipAddresses?: [ string ](name='IpAddresses'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmzawhxxc****'),
      resourceId?: string(name='ResourceId', example='vtb-bp11lbh452fr8940s****'),
      resourceName?: string(name='ResourceName', example='group1'),
      resourceType?: string(name='ResourceType', example='ACS::VPC::RouteTable'),
      tags?: [ 
        {
          key?: string(name='Key', example='test_key'),
          value?: string(name='Value', example='test_value'),
        }
      ](name='Tags'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-k'),
    }
  ](name='Resources'),
  scope?: string(name='Scope', example='rd-r4****'),
}

model SearchMultiAccountResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: SearchMultiAccountResourcesResponseBody(name='body'),
}

async function searchMultiAccountResources(request: SearchMultiAccountResourcesRequest): SearchMultiAccountResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchMultiAccountResources', 'POST', '/', 'json', false, 'json', request);
}

model SearchResourcesRequest {
  filter?: [ 
    {
      key?: string(name='Key', example='RegionId'),
      matchType?: string(name='MatchType', example='Equals'),
      value?: [ string ](name='Value'),
    }
  ](name='Filter', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', example='eyJzZWFyY2hBZnRlcnMiOlsiMTAwMTU2Nzk4MTU1OSJd****', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmzawhxxc****', position='Query'),
  sortCriterion?: {
    key?: string(name='Key', example='CreateTime'),
    order?: string(name='Order', example='ASC'),
  }(name='SortCriterion', position='Query'),
}

model SearchResourcesResponseBody = {
  filters?: [ 
    {
      key?: string(name='Key', example='RegionId'),
      matchType?: string(name='MatchType', example='Equals'),
      values?: [ string ](name='Values'),
    }
  ](name='Filters'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='eyJzZWFyY2hBZnRlcnMiOlsiMTAwMTU2Nzk4MTU1OSJd****'),
  requestId?: string(name='RequestId', example='D696E6EF-3A6D-5770-801E-4982081FE4D0'),
  resources?: [ 
    {
      accountId?: string(name='AccountId', example='151266687691****'),
      createTime?: string(name='CreateTime', example='2021-06-30T09:20:08Z'),
      ipAddresses?: [ string ](name='IpAddresses'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmzawhxxc****'),
      resourceId?: string(name='ResourceId', example='vtb-bp11lbh452fr8940s****'),
      resourceName?: string(name='ResourceName', example='group1'),
      resourceType?: string(name='ResourceType', example='ACS::VPC::RouteTable'),
      tags?: [ 
        {
          key?: string(name='Key', example='test_key'),
          value?: string(name='Value', example='test_value'),
        }
      ](name='Tags'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-k'),
    }
  ](name='Resources'),
}

model SearchResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: SearchResourcesResponseBody(name='body'),
}

async function searchResources(request: SearchResourcesRequest): SearchResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchResources', 'POST', '/', 'json', false, 'json', request);
}

