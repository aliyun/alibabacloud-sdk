/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'ResourceCenter';
  @version = '2022-12-01';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model DisableMultiAccountResourceCenterRequest {
}

model DisableMultiAccountResourceCenterResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='4951F920-48DB-5731-96AA-3A7C8AE617D9'),
}

model DisableMultiAccountResourceCenterResponse = {
  headers: map[string]string(name='headers'),
  body: DisableMultiAccountResourceCenterResponseBody(name='body'),
}

async function disableMultiAccountResourceCenter(request: DisableMultiAccountResourceCenterRequest): DisableMultiAccountResourceCenterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableMultiAccountResourceCenter', 'POST', '/', 'json', false, 'json', request);
}

model DisableResourceCenterRequest {
}

model DisableResourceCenterResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='D170D58E-6256-5344-8F5E-922EC9ECB7EA'),
}

model DisableResourceCenterResponse = {
  headers: map[string]string(name='headers'),
  body: DisableResourceCenterResponseBody(name='body'),
}

async function disableResourceCenter(request: DisableResourceCenterRequest): DisableResourceCenterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableResourceCenter', 'POST', '/', 'json', false, 'json', request);
}

model EnableMultiAccountResourceCenterRequest {
}

model EnableMultiAccountResourceCenterResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='767038B7-2027-5508-858B-E213232D57D5'),
  status?: string(name='Status', description='The status of the feature. Valid values:

*   Pending: The feature is being enabled.
*   Enabled: The feature is enabled.', example='Pending'),
}

model EnableMultiAccountResourceCenterResponse = {
  headers: map[string]string(name='headers'),
  body: EnableMultiAccountResourceCenterResponseBody(name='body'),
}

/**
  * If you have created a resource directory for your enterprise, you can enable the cross-account resource search feature by using the management account of the resource directory or a delegated administrator account of Resource Center to view the resources of members in the resource directory. For more information about a resource directory, see [Resource Directory overview](~~200506~~).
  *
 */
async function enableMultiAccountResourceCenter(request: EnableMultiAccountResourceCenterRequest): EnableMultiAccountResourceCenterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableMultiAccountResourceCenter', 'POST', '/', 'json', false, 'json', request);
}

model EnableResourceCenterRequest {
}

model EnableResourceCenterResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='45357BEF-AB50-5E4D-B05D-5A882A4BE924'),
  status?: string(name='Status', description='The activation status of the service. Valid values:

*   Pending: The service is being activated.
*   Enabled: The service is activated.', example='Pending'),
}

model EnableResourceCenterResponse = {
  headers: map[string]string(name='headers'),
  body: EnableResourceCenterResponseBody(name='body'),
}

async function enableResourceCenter(request: EnableResourceCenterRequest): EnableResourceCenterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableResourceCenter', 'POST', '/', 'json', false, 'json', request);
}

model GetMultiAccountResourceCenterServiceStatusRequest {
}

model GetMultiAccountResourceCenterServiceStatusResponseBody = {
  initialStatus?: string(name='InitialStatus', description='The initialization status of the feature. Valid values:

*   Pending: The feature is being initialized.
*   Finished: The feature is initialized.', example='Pending'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='81671397-1425-51F1-A144-4799E01BEBFF'),
  serviceStatus?: string(name='ServiceStatus', description='The status of the feature. Valid values:

*   Enabled: The feature is enabled.
*   Disabled: The feature is disabled.', example='Enabled'),
}

model GetMultiAccountResourceCenterServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetMultiAccountResourceCenterServiceStatusResponseBody(name='body'),
}

async function getMultiAccountResourceCenterServiceStatus(request: GetMultiAccountResourceCenterServiceStatusRequest): GetMultiAccountResourceCenterServiceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMultiAccountResourceCenterServiceStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetMultiAccountResourceConfigurationRequest {
  accountId: string(name='AccountId', description='The ID of the management account or member of the resource directory.', example='1619302****', position='Query'),
  resourceId: string(name='ResourceId', description='The ID of the resource.', example='m-eb3hji****', position='Query'),
  resourceRegionId: string(name='ResourceRegionId', description='The region ID of the resource.', example='cn-shanghai', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resource.', example='ACS::VPC::RouteTable', position='Query'),
}

model GetMultiAccountResourceConfigurationResponseBody = {
  accountId?: string(name='AccountId', description='The ID of the management account or member of the resource directory.', example='1619302****'),
  configuration?: map[string]any(name='Configuration', description='The configurations of the resource.'),
  createTime?: string(name='CreateTime', description='The time when the resource was created.', example='2023-02-14T03:12:11Z'),
  ipAddresses?: [ string ](name='IpAddresses', description='The IP addresses.

> Whether this parameter is returned is determined by the Alibaba Cloud service to which the resource belongs.'),
  regionId?: string(name='RegionId', description='The region ID of the resource.', example='cn-shanghai'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B2DCC08B-C12A-5705-879C-5A1450016156'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the resource belongs.', example='rg-acfmzy6d****'),
  resourceId?: string(name='ResourceId', description='The ID of the resource.', example='m-eb3hji****'),
  resourceName?: string(name='ResourceName', description='The name of the resource.', example='test_resource'),
  resourceType?: string(name='ResourceType', description='The type of the resource.', example='ACS::VPC::RouteTable'),
  tags?: [ 
    {
      key?: string(name='Key', description='The key of the tag.', example='tag-key'),
      value?: string(name='Value', description='The value of the tag.', example='tag-value'),
    }
  ](name='Tags', description='The tags of the resource.'),
  zoneId?: string(name='ZoneId', description='The zone ID of the resource.', example='cn-shanghai-a'),
}

model GetMultiAccountResourceConfigurationResponse = {
  headers: map[string]string(name='headers'),
  body: GetMultiAccountResourceConfigurationResponseBody(name='body'),
}

async function getMultiAccountResourceConfiguration(request: GetMultiAccountResourceConfigurationRequest): GetMultiAccountResourceConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMultiAccountResourceConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model GetResourceCenterServiceStatusRequest {
}

model GetResourceCenterServiceStatusResponseBody = {
  initialStatus?: string(name='InitialStatus', description='The initialization status of the service. Valid values:

*   Pending: The service being initialized.
*   Finished: The service is initialized.', example='Pending'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='AD5F848D-CCDC-5464-93E1-4BA50A4826DD'),
  serviceStatus?: string(name='ServiceStatus', description='The status of the service. Valid values:

*   Enabled: The service is activated.
*   Disabled: The service is deactivated.', example='Enabled'),
}

model GetResourceCenterServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetResourceCenterServiceStatusResponseBody(name='body'),
}

async function getResourceCenterServiceStatus(request: GetResourceCenterServiceStatusRequest): GetResourceCenterServiceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetResourceCenterServiceStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetResourceConfigurationRequest {
  resourceId: string(name='ResourceId', description='The ID of the resource.', example='eip-bp1kyg72m****', position='Query'),
  resourceRegionId: string(name='ResourceRegionId', description='The region ID of the resource.', example='cn-shanghai', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resource.

For more information about the resource types supported by Resource Center, see [Services that work with Resource Center](~~477798~~).', example='ACS::VPC::RouteTable', position='Query'),
}

model GetResourceConfigurationResponseBody = {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account to which the resource belongs.', example='151266687691****'),
  configuration?: map[string]any(name='Configuration', description='The configurations of the resource.'),
  createTime?: string(name='CreateTime', description='The time when the resource was created.', example='2021-06-30T09:20:08Z'),
  ipAddresses?: [ string ](name='IpAddresses', description='The IP addresses.

> Whether this parameter is returned is determined by the Alibaba Cloud service to which the resource belongs.'),
  regionId?: string(name='RegionId', description='The region ID of the resource.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F1CE0D52-32DA-531A-87A4-B9A5B68D5D8E'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the resource belongs.', example='rg-acfmv4k****'),
  resourceId?: string(name='ResourceId', description='The ID of the resource.', example='vtb-uf6978gdqbi****'),
  resourceName?: string(name='ResourceName', description='The name of the resource.', example='group1'),
  resourceType?: string(name='ResourceType', description='The type of the resource.', example='ACS::VPC::VSwitch'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='test-key'),
      value?: string(name='Value', description='The tag value.', example='test-value'),
    }
  ](name='Tags', description='The tags of the resource.'),
  zoneId?: string(name='ZoneId', description='The zone ID of the resource.', example='cn-hangzhou-k'),
}

model GetResourceConfigurationResponse = {
  headers: map[string]string(name='headers'),
  body: GetResourceConfigurationResponseBody(name='body'),
}

async function getResourceConfiguration(request: GetResourceConfigurationRequest): GetResourceConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetResourceConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model GetResourceCountsRequest {
  filter?: [ 
    {
      key?: string(name='Key', description='The key of the filter condition. For more information, see `Supported filter parameters`.', example='RegionId'),
      matchType?: string(name='MatchType', description='The matching mode.

The value Equals indicates an equal match.', example='Equals'),
      value?: [ string ](name='Value', description='The values of the filter condition.'),
    }
  ](name='Filter', description='The filter conditions.', position='Query'),
  groupByKey?: string(name='GroupByKey', description='The dimension by which resources are queried. Valid values:

*   ResourceType
*   Region
*   ResourceGroupId
*   TagKey
*   TagValue', example='ResourceType', position='Query'),
}

model GetResourceCountsResponseBody = {
  filters?: [ 
    {
      key?: string(name='Key', description='The key of the filter condition.', example='RegionId'),
      values?: [ string ](name='Values', description='The values of the filter condition.'),
    }
  ](name='Filters', description='The filter conditions.'),
  groupByKey?: string(name='GroupByKey', description='The dimension by which resources are queried.', example='ResourceType'),
  requestId?: string(name='RequestId', description='The request ID.', example='6D98D9B0-318D-56A4-910C-93B5F945AF2B'),
  resourceCounts?: [ 
    {
      count?: long(name='Count', description='The number of resources.', example='2'),
      groupName?: string(name='GroupName', description='The group name.', example='ACS::ECS::NetworkInterface'),
    }
  ](name='ResourceCounts', description='The numbers of resources.'),
}

model GetResourceCountsResponse = {
  headers: map[string]string(name='headers'),
  body: GetResourceCountsResponseBody(name='body'),
}

async function getResourceCounts(request: GetResourceCountsRequest): GetResourceCountsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetResourceCounts', 'POST', '/', 'json', false, 'json', request);
}

model ListMultiAccountResourceGroupsRequest {
  accountId: string(name='AccountId', description='The ID of the management account or member of the resource directory.', example='1394339739****', position='Query'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page.

Maximum value: 100. Default value: 10.', example='20', position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.', example='AAAAAS2Nboi3t4xGrdlG5/Ks/Q1xPG9jzviYEuZydevXIkgF', position='Query'),
  resourceGroupIds?: [ string ](name='ResourceGroupIds', description='The IDs of resource groups.', position='Query'),
}

model ListMultiAccountResourceGroupsResponseBody = {
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.', example='AAAAAU5VsT9R1adMTuz9GzginZ3Y+7Y/5JATS+6q5GK9kT75'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FF0A66E-781F-51EE-9531-928F197558F2'),
  resourceGroups?: [ 
    {
      accountId?: string(name='AccountId', description='The ID of the management account or member of the resource directory.', example='1394339739****'),
      createDate?: string(name='CreateDate', description='The time when the resource group was created.', example='2021-06-30T09:20:08Z'),
      displayName?: string(name='DisplayName', description='The display name of the resource group.', example='group1'),
      id?: string(name='Id', description='The ID of the resource group.', example='rg-acfmzawhxxc****'),
      name?: string(name='Name', description='The unique identifier of the resource group.', example='my-project'),
      status?: string(name='Status', description='The status of the resource group. Valid values:

*   Creating: The resource group is being created.
*   OK: The resource group is created.
*   PendingDelete: The resource group is waiting to be deleted.', example='OK'),
    }
  ](name='ResourceGroups', description='The information about the resource groups.'),
}

model ListMultiAccountResourceGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListMultiAccountResourceGroupsResponseBody(name='body'),
}

async function listMultiAccountResourceGroups(request: ListMultiAccountResourceGroupsRequest): ListMultiAccountResourceGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListMultiAccountResourceGroups', 'POST', '/', 'json', false, 'json', request);
}

model ListMultiAccountTagKeysRequest {
  matchType?: string(name='MatchType', description='The matching mode. Valid values:

*   Equals: equal match
*   Prefix: match by prefix', example='Equals', position='Query'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page.

Valid values: 1 to 100.

Default value: 20.', example='10', position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.

If the total number of entries returned for the current request exceeds the value of the `MaxResults` parameter, the entries are truncated. In this case, you can use the `token` to initiate another request and obtain the remaining entries.', example='eyJzZWFyY2hBZnRlcnMiOlsiMTAwMTU2Nzk4MTU1OSJd****', position='Query'),
  scope: string(name='Scope', description='The search scope. You can set the value to one of the following items:

*   ID of a resource directory: Resources within the management account and all members of the resource directory are searched. You can call the [GetResourceDirectory](~~159995~~) operation to obtain the ID.
*   ID of the Root folder: Resources within all members in the Root folder and the subfolders of the Root folder are searched. You can call the [ListFoldersForParent](~~159997~~) operation to obtain the ID.
*   ID of a folder: Resources within all members in the folder are searched. You can call the [ListFoldersForParent](~~159997~~) operation to obtain the ID.
*   ID of a member: Resources within the member are searched. You can call the [ListAccounts](~~160016~~) operation to obtain the ID.', example='rd-r4****', position='Query'),
  tagKey?: string(name='TagKey', description='The tag key.', example='test_key', position='Query'),
}

model ListMultiAccountTagKeysResponseBody = {
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.', example='AAAAARfZmVDe9NvRXloR5+8CK9nNJufMdRA7W1miLC1P****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='FA6086F9-6363-51A5-A507-88E3201EBCCB'),
  tagKeys?: [ string ](name='TagKeys', description='The tag keys.'),
}

model ListMultiAccountTagKeysResponse = {
  headers: map[string]string(name='headers'),
  body: ListMultiAccountTagKeysResponseBody(name='body'),
}

async function listMultiAccountTagKeys(request: ListMultiAccountTagKeysRequest): ListMultiAccountTagKeysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListMultiAccountTagKeys', 'POST', '/', 'json', false, 'json', request);
}

model ListMultiAccountTagValuesRequest {
  matchType?: string(name='MatchType', description='The matching mode. Valid values:

*   Equals: equal match
*   Prefix: match by prefix', example='Equals', position='Query'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page.

Valid values: 1 to 100.

Default value: 20.', example='10', position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.

If the total number of entries returned for the current request exceeds the value of the `MaxResults` parameter, the entries are truncated. In this case, you can use the `token` to initiate another request and obtain the remaining entries.', example='eyJzZWFyY2hBZnRlcnMiOlsiMTAwMTU2Nzk4MTU1OSJd****', position='Query'),
  scope?: string(name='Scope', description='The search scope. You can set the value to one of the following items:

*   ID of a resource directory: Resources within the management account and all members of the resource directory are searched. You can call the [GetResourceDirectory](~~159995~~) operation to obtain the ID.
*   ID of the Root folder: Resources within all members in the Root folder and the subfolders of the Root folder are searched. You can call the [ListFoldersForParent](~~159997~~) operation to obtain the ID.
*   ID of a folder: Resources within all members in the folder are searched. You can call the [ListFoldersForParent](~~159997~~) operation to obtain the ID.
*   ID of a member: Resources within the member are searched. You can call the [ListAccounts](~~160016~~) operation to obtain the ID.', example='rd-r4****', position='Query'),
  tagKey: string(name='TagKey', description='The tag key.', example='test_key', position='Query'),
  tagValue?: string(name='TagValue', description='The tag value.', example='test_value', position='Query'),
}

model ListMultiAccountTagValuesResponseBody = {
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.', example='eyJzZWFyY2hBZnRlcnMiOlsiMTAwMTU2Nzk4MTU1OSJd****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='36A3D9BE-B607-5993-B546-7E19EF65DC00'),
  tagValues?: [ string ](name='TagValues', description='The tag values.'),
}

model ListMultiAccountTagValuesResponse = {
  headers: map[string]string(name='headers'),
  body: ListMultiAccountTagValuesResponseBody(name='body'),
}

async function listMultiAccountTagValues(request: ListMultiAccountTagValuesRequest): ListMultiAccountTagValuesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListMultiAccountTagValues', 'POST', '/', 'json', false, 'json', request);
}

model ListResourceTypesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh-CN: Chinese
*   en-US: English', example='zh-CN', position='Query'),
  query?: [ string ](name='Query', description='The query conditions.', position='Query'),
  resourceType?: string(name='ResourceType', description='The resource type.

For more information about the resource types that are supported by Resource Center, see [Services that work with Resource Center](~~477798~~).', example='ACS::ACK::Cluster', position='Query'),
}

model ListResourceTypesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='E5556E4C-479A-5BBB-B325-F07563E7E917'),
  resourceTypes?: [ 
    {
      filterKeys?: [ string ](name='FilterKeys', description='The supported filter conditions.'),
      productName?: string(name='ProductName', description='The name of the Alibaba Cloud service.', example='Container Service for Kubernetes'),
      resourceType?: string(name='ResourceType', description='The resource type.', example='ACS::ACK::Cluster'),
      resourceTypeName?: string(name='ResourceTypeName', description='The name of the resource type.', example='Cluster'),
    }
  ](name='ResourceTypes', description='The information about the resource types.'),
}

model ListResourceTypesResponse = {
  headers: map[string]string(name='headers'),
  body: ListResourceTypesResponseBody(name='body'),
}

async function listResourceTypes(request: ListResourceTypesRequest): ListResourceTypesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListResourceTypes', 'POST', '/', 'json', false, 'json', request);
}

model ListTagKeysRequest {
  matchType?: string(name='MatchType', description='The matching mode. Valid values:

*   Equals: equal match
*   Prefix: match by prefix', example='Equals', position='Query'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page.

Valid values: 1 to 100.

Default value: 20.', example='10', position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.

If the total number of entries returned for the current request exceeds the value of the `MaxResults` parameter, the entries are truncated. In this case, you can use the `token` to initiate another request and obtain the remaining entries.', example='AAAAAUYb00R0gHZBE8FVDeoh2ME93VeeEPUHs****', position='Query'),
  tagKey?: string(name='TagKey', description='The tag key.', example='test_key', position='Query'),
}

model ListTagKeysResponseBody = {
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.', example='AAAAAUDnubHKJbVTCdlIGYUPtsu3EoN3bfdgjDA****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='44C8A952-D6B0-5BC8-82D5-93BA02E26F2E'),
  tagKeys?: [ string ](name='TagKeys', description='The tag keys.'),
}

model ListTagKeysResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagKeysResponseBody(name='body'),
}

async function listTagKeys(request: ListTagKeysRequest): ListTagKeysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagKeys', 'POST', '/', 'json', false, 'json', request);
}

model ListTagValuesRequest {
  matchType?: string(name='MatchType', description='The matching mode. Valid values:

*   Equals: equal match
*   Prefix: match by prefix', example='Equals', position='Query'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page.

Valid values: 1 to 100.

Default value: 20.', example='10', position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.

If the total number of entries returned for the current request exceeds the value of the `MaxResults` parameter, the entries are truncated. In this case, you can use the `token` to initiate another request and obtain the remaining entries.', example='eyJzZWFyY2hBZnRlcnMiOlsiMTAwMTU2Nzk4MTU1OSJd****', position='Query'),
  tagKey: string(name='TagKey', description='The tag key.', example='test_key', position='Query'),
  tagValue?: string(name='TagValue', description='The tag value.', example='test_value', position='Query'),
}

model ListTagValuesResponseBody = {
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.', example='eyJzZWFyY2hBZnRlcnMiOlsiMTAwMTU2Nzk4MTU1OSJd****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C1840B83-1193-5E83-AFA6-4B8D303E29F5'),
  tagValues?: [ string ](name='TagValues', description='The tag values.'),
}

model ListTagValuesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagValuesResponseBody(name='body'),
}

async function listTagValues(request: ListTagValuesRequest): ListTagValuesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagValues', 'POST', '/', 'json', false, 'json', request);
}

model SearchMultiAccountResourcesRequest {
  filter?: [ 
    {
      key?: string(name='Key', description='The key of the filter condition. For more information, see `Supported filter parameters`.', example='ResourceGroupId'),
      matchType?: string(name='MatchType', description='The matching mode.

The value Equals indicates an equal match.', example='Equals'),
      value?: [ string ](name='Value', description='The values of the filter condition.'),
    }
  ](name='Filter', description='The filter conditions.', position='Query'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page.

Valid values: 1 to 100.

Default value: 20.', example='10', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.

If the total number of entries returned for the current request exceeds the value of the `MaxResults` parameter, the entries are truncated. In this case, you can use the token to initiate another request and obtain the remaining entries.``', example='eyJzZWFyY2hBZnRlcnMiOlsiMTAwMTU2Nzk4MTU1OSJd****', position='Query'),
  scope: string(name='Scope', description='The search scope. You can set the value to one of the following items:

*   ID of a resource directory: Resources within the management account and all members of the resource directory are searched. You can call the [GetResourceDirectory](~~159995~~) operation to obtain the ID.
*   ID of the Root folder: Resources within all members in the Root folder and the subfolders of the Root folder are searched. You can call the [ListFoldersForParent](~~159997~~) operation to obtain the ID.
*   ID of a folder: Resources within all members in the folder are searched. You can call the [ListFoldersForParent](~~159997~~) operation to obtain the ID.
*   ID of a member: Resources within the member are searched. You can call the [ListAccounts](~~160016~~) operation to obtain the ID.', example='rd-r4****', position='Query'),
  sortCriterion?: {
    key?: string(name='Key', description='The attribute based on which the entries are sorted.

The value CreateTime indicates the creation time of resources.', example='CreateTime'),
    order?: string(name='Order', description='The order in which the entries are sorted. Valid values:

*   ASC: The entries are sorted in ascending order. This value is the default value.
*   DESC: The entries are sorted in descending order.', example='ASC'),
  }(name='SortCriterion', description='The method that is used to sort the entries returned.', position='Query'),
}

model SearchMultiAccountResourcesResponseBody = {
  filters?: [ 
    {
      key?: string(name='Key', description='The key of the filter condition.', example='RegionId'),
      matchType?: string(name='MatchType', description='The matching mode.', example='Equals'),
      values?: [ string ](name='Values', description='The values of the filter condition.'),
    }
  ](name='Filters', description='The filter conditions.'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries returned per page.', example='10'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.', example='The pagination token that is used in the next request to retrieve a new page of results.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EFA806B9-7F36-55AB-8B7A-D680C2C5EE57'),
  resources?: [ 
    {
      accountId?: string(name='AccountId', description='The ID of the management account or member of the resource directory.', example='151266687691****'),
      createTime?: string(name='CreateTime', description='The time when the resource was created.

> Whether this parameter is returned is determined by the Alibaba Cloud service to which the resource belongs.', example='2021-06-30T09:20:08Z'),
      ipAddresses?: [ string ](name='IpAddresses', description='The IP addresses.

> Whether this parameter is returned is determined by the Alibaba Cloud service to which the resource belongs.'),
      regionId?: string(name='RegionId', description='The region ID of the resource.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the resource belongs.', example='rg-acfmzawhxxc****'),
      resourceId?: string(name='ResourceId', description='The ID of the resource.', example='vtb-bp11lbh452fr8940s****'),
      resourceName?: string(name='ResourceName', description='The name of the resource.', example='group1'),
      resourceType?: string(name='ResourceType', description='The type of the resource.', example='ACS::VPC::RouteTable'),
      tags?: [ 
        {
          key?: string(name='Key', description='The key of the tag.', example='test_key'),
          value?: string(name='Value', description='The value of the tag.', example='test_value'),
        }
      ](name='Tags', description='The tags of the resource.'),
      zoneId?: string(name='ZoneId', description='The zone ID of the resource.

> Whether this parameter is returned is determined by the Alibaba Cloud service to which the resource belongs.', example='cn-hangzhou-k'),
    }
  ](name='Resources', description='The information about the resources.'),
  scope?: string(name='Scope', description='The search scope.

*   ID of a resource directory: Resources within the management account and all members of the resource directory are searched.
*   ID of the Root folder: Resources within all members in the Root folder and the subfolders of the Root folder are searched.
*   ID of a folder: Resources within all members in the folder are searched.
*   ID of a member: Resources within the member are searched.', example='rd-r4****'),
}

model SearchMultiAccountResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: SearchMultiAccountResourcesResponseBody(name='body'),
}

async function searchMultiAccountResources(request: SearchMultiAccountResourcesRequest): SearchMultiAccountResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchMultiAccountResources', 'POST', '/', 'json', false, 'json', request);
}

model SearchResourcesRequest {
  filter?: [ 
    {
      key?: string(name='Key', description='The key of the filter condition. For more information, see `Supported filter parameters`.', example='RegionId'),
      matchType?: string(name='MatchType', description='The matching mode.

The value Equals indicates an equal match.', example='Equals'),
      value?: [ string ](name='Value', description='The values of the filter condition.'),
    }
  ](name='Filter', description='The filter conditions.', position='Query'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page.

Valid values: 1 to 100.

Default value: 20.', example='10', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.

If the total number of entries returned for the current request exceeds the value of the `MaxResults` parameter, the entries are truncated. In this case, you can use the `token` to initiate another request and obtain the remaining entries.', example='eyJzZWFyY2hBZnRlcnMiOlsiMTAwMTU2Nzk4MTU1OSJd****', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmzawhxxc****', position='Query'),
  sortCriterion?: {
    key?: string(name='Key', description='The attribute based on which the entries are sorted.

The value CreateTime indicates the creation time of resources.', example='CreateTime'),
    order?: string(name='Order', description='The order in which the entries are sorted. Valid values:

*   ASC: The entries are sorted in ascending order. This value is the default value.
*   DESC: The entries are sorted in descending order.', example='ASC'),
  }(name='SortCriterion', description='The method that is used to sort the entries returned.', position='Query'),
}

model SearchResourcesResponseBody = {
  filters?: [ 
    {
      key?: string(name='Key', description='The key of the filter condition.', example='RegionId'),
      matchType?: string(name='MatchType', description='The matching mode.', example='Equals'),
      values?: [ string ](name='Values', description='The values of the filter condition.'),
    }
  ](name='Filters', description='The filter conditions.'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries returned per page.', example='10'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.', example='eyJzZWFyY2hBZnRlcnMiOlsiMTAwMTU2Nzk4MTU1OSJd****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D696E6EF-3A6D-5770-801E-4982081FE4D0'),
  resources?: [ 
    {
      accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account to which the resource belongs.', example='151266687691****'),
      createTime?: string(name='CreateTime', description='The time when the resource was created.

> Whether this parameter is returned is determined by the Alibaba Cloud service to which the resource belongs.', example='2021-06-30T09:20:08Z'),
      ipAddresses?: [ string ](name='IpAddresses', description='The IP addresses.

> Whether this parameter is returned is determined by the Alibaba Cloud service to which the resource belongs.'),
      regionId?: string(name='RegionId', description='The region ID of the resource.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the resource belongs.', example='rg-acfmzawhxxc****'),
      resourceId?: string(name='ResourceId', description='The ID of the resource.', example='vtb-bp11lbh452fr8940s****'),
      resourceName?: string(name='ResourceName', description='The name of the resource.', example='group1'),
      resourceType?: string(name='ResourceType', description='The type of the resource.', example='ACS::VPC::RouteTable'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='test_key'),
          value?: string(name='Value', description='The tag value.', example='test_value'),
        }
      ](name='Tags', description='The tags of the resource.'),
      zoneId?: string(name='ZoneId', description='The zone ID of the resource.

> Whether this parameter is returned is determined by the Alibaba Cloud service to which the resource belongs.', example='cn-hangzhou-k'),
    }
  ](name='Resources', description='The information about the resources.'),
}

model SearchResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: SearchResourcesResponseBody(name='body'),
}

async function searchResources(request: SearchResourcesRequest): SearchResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchResources', 'POST', '/', 'json', false, 'json', request);
}

