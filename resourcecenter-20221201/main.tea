/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('resourcecenter', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateSavedQueryRequest {
  description?: string(name='Description'),
  expression?: string(name='Expression', example='SELECT * FROM resources;'),
  name?: string(name='Name'),
}

model CreateSavedQueryResponseBody = {
  queryId?: string(name='QueryId', example='sq-GeAck****'),
  requestId?: string(name='RequestId', example='EFA806B9-7F36-55AB-8B7A-D680C2C5EE57'),
}

model CreateSavedQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSavedQueryResponseBody(name='body'),
}

async function createSavedQueryWithOptions(request: CreateSavedQueryRequest, runtime: Util.RuntimeOptions): CreateSavedQueryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.expression)) {
    query['Expression'] = request.expression;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSavedQuery',
    version = '2022-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSavedQuery(request: CreateSavedQueryRequest): CreateSavedQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSavedQueryWithOptions(request, runtime);
}

model DeleteSavedQueryRequest {
  queryId?: string(name='QueryId', example='sq-GeAck****'),
}

model DeleteSavedQueryResponseBody = {
  requestId?: string(name='RequestId', example='D170D58E-6256-5344-8F5E-922EC9ECB7EA'),
}

model DeleteSavedQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSavedQueryResponseBody(name='body'),
}

async function deleteSavedQueryWithOptions(request: DeleteSavedQueryRequest, runtime: Util.RuntimeOptions): DeleteSavedQueryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.queryId)) {
    query['QueryId'] = request.queryId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSavedQuery',
    version = '2022-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSavedQuery(request: DeleteSavedQueryRequest): DeleteSavedQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSavedQueryWithOptions(request, runtime);
}

model DisableMultiAccountResourceCenterResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='4951F920-48DB-5731-96AA-3A7C8AE617D9'),
}

model DisableMultiAccountResourceCenterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableMultiAccountResourceCenterResponseBody(name='body'),
}

async function disableMultiAccountResourceCenterWithOptions(runtime: Util.RuntimeOptions): DisableMultiAccountResourceCenterResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DisableMultiAccountResourceCenter',
    version = '2022-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableMultiAccountResourceCenter(): DisableMultiAccountResourceCenterResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableMultiAccountResourceCenterWithOptions(runtime);
}

model DisableResourceCenterResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='D170D58E-6256-5344-8F5E-922EC9ECB7EA'),
}

model DisableResourceCenterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableResourceCenterResponseBody(name='body'),
}

async function disableResourceCenterWithOptions(runtime: Util.RuntimeOptions): DisableResourceCenterResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DisableResourceCenter',
    version = '2022-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableResourceCenter(): DisableResourceCenterResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableResourceCenterWithOptions(runtime);
}

model EnableMultiAccountResourceCenterResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='767038B7-2027-5508-858B-E213232D57D5'),
  status?: string(name='Status', description='The status of the feature. Valid values:

*   Pending: The feature is being enabled.
*   Enabled: The feature is enabled.', example='Pending'),
}

model EnableMultiAccountResourceCenterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableMultiAccountResourceCenterResponseBody(name='body'),
}

/**
  * If you have created a resource directory for your enterprise, you can enable the cross-account resource search feature by using the management account of the resource directory or a delegated administrator account of Resource Center to view the resources of members in the resource directory. For more information about a resource directory, see [Resource Directory overview](~~200506~~).
  *
  * @param request EnableMultiAccountResourceCenterRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return EnableMultiAccountResourceCenterResponse
 */
async function enableMultiAccountResourceCenterWithOptions(runtime: Util.RuntimeOptions): EnableMultiAccountResourceCenterResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'EnableMultiAccountResourceCenter',
    version = '2022-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * If you have created a resource directory for your enterprise, you can enable the cross-account resource search feature by using the management account of the resource directory or a delegated administrator account of Resource Center to view the resources of members in the resource directory. For more information about a resource directory, see [Resource Directory overview](~~200506~~).
  *
  * @return EnableMultiAccountResourceCenterResponse
 */
async function enableMultiAccountResourceCenter(): EnableMultiAccountResourceCenterResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableMultiAccountResourceCenterWithOptions(runtime);
}

model EnableResourceCenterResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='45357BEF-AB50-5E4D-B05D-5A882A4BE924'),
  status?: string(name='Status', description='The activation status of the service. Valid values:

*   Pending: The service is being activated.
*   Enabled: The service is activated.', example='Pending'),
}

model EnableResourceCenterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableResourceCenterResponseBody(name='body'),
}

async function enableResourceCenterWithOptions(runtime: Util.RuntimeOptions): EnableResourceCenterResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'EnableResourceCenter',
    version = '2022-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableResourceCenter(): EnableResourceCenterResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableResourceCenterWithOptions(runtime);
}

model ExecuteMultiAccountSQLQueryRequest {
  expression?: string(name='Expression', example='SELECT * FROM resources LIMIT 100;'),
  scope?: string(name='Scope', example='rd-r4****'),
}

model ExecuteMultiAccountSQLQueryResponseBody = {
  columns?: [ 
    {
      name?: string(name='Name', example='resource_id'),
      type?: string(name='Type', example='varchar'),
    }
  ](name='Columns'),
  requestId?: string(name='RequestId', example='44C8A952-D6B0-5BC8-82D5-93BA02E26F2E'),
  rows?: [ any ](name='Rows'),
}

model ExecuteMultiAccountSQLQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExecuteMultiAccountSQLQueryResponseBody(name='body'),
}

async function executeMultiAccountSQLQueryWithOptions(request: ExecuteMultiAccountSQLQueryRequest, runtime: Util.RuntimeOptions): ExecuteMultiAccountSQLQueryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.expression)) {
    query['Expression'] = request.expression;
  }
  if (!Util.isUnset(request.scope)) {
    query['Scope'] = request.scope;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExecuteMultiAccountSQLQuery',
    version = '2022-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function executeMultiAccountSQLQuery(request: ExecuteMultiAccountSQLQueryRequest): ExecuteMultiAccountSQLQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  return executeMultiAccountSQLQueryWithOptions(request, runtime);
}

model ExecuteSQLQueryRequest {
  expression?: string(name='Expression', example='SELECT * FROM resources LIMIT 100;'),
  scope?: string(name='Scope', example='rg-acfmzawhxxc****'),
}

model ExecuteSQLQueryResponseBody = {
  columns?: [ 
    {
      name?: string(name='Name', example='resource_id'),
      type?: string(name='Type', example='varchar'),
    }
  ](name='Columns'),
  requestId?: string(name='RequestId', example='D696E6EF-3A6D-5770-801E-4982081FE4D0'),
  rows?: [ any ](name='Rows'),
}

model ExecuteSQLQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExecuteSQLQueryResponseBody(name='body'),
}

async function executeSQLQueryWithOptions(request: ExecuteSQLQueryRequest, runtime: Util.RuntimeOptions): ExecuteSQLQueryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.expression)) {
    query['Expression'] = request.expression;
  }
  if (!Util.isUnset(request.scope)) {
    query['Scope'] = request.scope;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExecuteSQLQuery',
    version = '2022-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function executeSQLQuery(request: ExecuteSQLQueryRequest): ExecuteSQLQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  return executeSQLQueryWithOptions(request, runtime);
}

model GetExampleQueryRequest {
  queryId?: string(name='QueryId', example='sq-0PfKy****'),
}

model GetExampleQueryResponseBody = {
  exampleQuery?: {
    description?: string(name='Description'),
    expression?: string(name='Expression', example='SELECT
  resource_id,
  resource_name,
  region_id,
  zone_id,
  resource_type,
  account_id,
  create_time,
  resource_group_id,
  tags,
  ip_addresses,
  vpc_id,
  v_switch_id
FROM
  resources
ORDER BY
  resource_type,
  resource_id
LIMIT
  1000 OFFSET 0;'),
    name?: string(name='Name'),
    queryId?: string(name='QueryId', example='sq-0PfKy****'),
  }(name='ExampleQuery'),
  requestId?: string(name='RequestId', example='36A3D9BE-B607-5993-B546-7E19EF65DC00'),
}

model GetExampleQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetExampleQueryResponseBody(name='body'),
}

async function getExampleQueryWithOptions(request: GetExampleQueryRequest, runtime: Util.RuntimeOptions): GetExampleQueryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.queryId)) {
    query['QueryId'] = request.queryId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetExampleQuery',
    version = '2022-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getExampleQuery(request: GetExampleQueryRequest): GetExampleQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getExampleQueryWithOptions(request, runtime);
}

model GetMultiAccountResourceCenterServiceStatusResponseBody = {
  initialStatus?: string(name='InitialStatus', description='The initialization status of the feature. Valid values:

*   Pending: The feature is being initialized.
*   Finished: The feature is initialized.', example='Pending'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='81671397-1425-51F1-A144-4799E01BEBFF'),
  serviceStatus?: string(name='ServiceStatus', description='The status of the feature. Valid values:

*   Enabled: The feature is enabled.
*   Disabled: The feature is disabled.', example='Enabled'),
}

model GetMultiAccountResourceCenterServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMultiAccountResourceCenterServiceStatusResponseBody(name='body'),
}

async function getMultiAccountResourceCenterServiceStatusWithOptions(runtime: Util.RuntimeOptions): GetMultiAccountResourceCenterServiceStatusResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetMultiAccountResourceCenterServiceStatus',
    version = '2022-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMultiAccountResourceCenterServiceStatus(): GetMultiAccountResourceCenterServiceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMultiAccountResourceCenterServiceStatusWithOptions(runtime);
}

model GetMultiAccountResourceConfigurationRequest {
  accountId?: string(name='AccountId', description='The ID of the management account or member of the resource directory.', example='1619302****'),
  resourceId?: string(name='ResourceId', description='The ID of the resource.', example='m-eb3hji****'),
  resourceRegionId?: string(name='ResourceRegionId', description='The region ID of the resource.', example='cn-shanghai'),
  resourceType?: string(name='ResourceType', description='The type of the resource.', example='ACS::VPC::RouteTable'),
}

model GetMultiAccountResourceConfigurationResponseBody = {
  accountId?: string(name='AccountId', description='The ID of the management account or member of the resource directory.', example='1619302****'),
  configuration?: map[string]any(name='Configuration', description='The configurations of the resource.'),
  createTime?: string(name='CreateTime', description='The time when the resource was created.', example='2023-02-14T03:12:11Z'),
  ipAddresses?: [ string ](name='IpAddresses', description='The IP addresses.

> Whether this parameter is returned is determined by the Alibaba Cloud service to which the resource belongs.'),
  regionId?: string(name='RegionId', description='The region ID of the resource.', example='cn-shanghai'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B2DCC08B-C12A-5705-879C-5A1450016156'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the resource belongs.', example='rg-acfmzy6d****'),
  resourceId?: string(name='ResourceId', description='The ID of the resource.', example='m-eb3hji****'),
  resourceName?: string(name='ResourceName', description='The name of the resource.', example='test_resource'),
  resourceType?: string(name='ResourceType', description='The type of the resource.', example='ACS::VPC::RouteTable'),
  tags?: [ 
    {
      key?: string(name='Key', description='The key of the tag.', example='tag-key'),
      value?: string(name='Value', description='The value of the tag.', example='tag-value'),
    }
  ](name='Tags', description='The tags of the resource.'),
  zoneId?: string(name='ZoneId', description='The zone ID of the resource.', example='cn-shanghai-a'),
}

model GetMultiAccountResourceConfigurationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMultiAccountResourceConfigurationResponseBody(name='body'),
}

async function getMultiAccountResourceConfigurationWithOptions(request: GetMultiAccountResourceConfigurationRequest, runtime: Util.RuntimeOptions): GetMultiAccountResourceConfigurationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceRegionId)) {
    query['ResourceRegionId'] = request.resourceRegionId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMultiAccountResourceConfiguration',
    version = '2022-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMultiAccountResourceConfiguration(request: GetMultiAccountResourceConfigurationRequest): GetMultiAccountResourceConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMultiAccountResourceConfigurationWithOptions(request, runtime);
}

model GetResourceCenterServiceStatusResponseBody = {
  initialStatus?: string(name='InitialStatus', description='The initialization status of the service. Valid values:

*   Pending: The service being initialized.
*   Finished: The service is initialized.', example='Pending'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='AD5F848D-CCDC-5464-93E1-4BA50A4826DD'),
  serviceStatus?: string(name='ServiceStatus', description='The status of the service. Valid values:

*   Enabled: The service is activated.
*   Disabled: The service is deactivated.', example='Enabled'),
}

model GetResourceCenterServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetResourceCenterServiceStatusResponseBody(name='body'),
}

async function getResourceCenterServiceStatusWithOptions(runtime: Util.RuntimeOptions): GetResourceCenterServiceStatusResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetResourceCenterServiceStatus',
    version = '2022-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getResourceCenterServiceStatus(): GetResourceCenterServiceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getResourceCenterServiceStatusWithOptions(runtime);
}

model GetResourceConfigurationRequest {
  resourceId?: string(name='ResourceId', description='The ID of the resource.', example='eip-bp1kyg72m****'),
  resourceRegionId?: string(name='ResourceRegionId', description='The region ID of the resource.', example='cn-shanghai'),
  resourceType?: string(name='ResourceType', description='The type of the resource.

For more information about the resource types supported by Resource Center, see [Services that work with Resource Center](~~477798~~).', example='ACS::VPC::RouteTable'),
}

model GetResourceConfigurationResponseBody = {
  accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account to which the resource belongs.', example='151266687691****'),
  configuration?: map[string]any(name='Configuration', description='The configurations of the resource.'),
  createTime?: string(name='CreateTime', description='The time when the resource was created.', example='2021-06-30T09:20:08Z'),
  ipAddresses?: [ string ](name='IpAddresses', description='The IP addresses.

> Whether this parameter is returned is determined by the Alibaba Cloud service to which the resource belongs.'),
  regionId?: string(name='RegionId', description='The region ID of the resource.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F1CE0D52-32DA-531A-87A4-B9A5B68D5D8E'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the resource belongs.', example='rg-acfmv4k****'),
  resourceId?: string(name='ResourceId', description='The ID of the resource.', example='vtb-uf6978gdqbi****'),
  resourceName?: string(name='ResourceName', description='The name of the resource.', example='group1'),
  resourceType?: string(name='ResourceType', description='The type of the resource.', example='ACS::VPC::VSwitch'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='test-key'),
      value?: string(name='Value', description='The tag value.', example='test-value'),
    }
  ](name='Tags', description='The tags of the resource.'),
  zoneId?: string(name='ZoneId', description='The zone ID of the resource.', example='cn-hangzhou-k'),
}

model GetResourceConfigurationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetResourceConfigurationResponseBody(name='body'),
}

async function getResourceConfigurationWithOptions(request: GetResourceConfigurationRequest, runtime: Util.RuntimeOptions): GetResourceConfigurationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceRegionId)) {
    query['ResourceRegionId'] = request.resourceRegionId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetResourceConfiguration',
    version = '2022-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getResourceConfiguration(request: GetResourceConfigurationRequest): GetResourceConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getResourceConfigurationWithOptions(request, runtime);
}

model GetResourceCountsRequest {
  filter?: [ 
    {
      key?: string(name='Key', description='The key of the filter condition. For more information, see `Supported filter parameters`.', example='RegionId'),
      matchType?: string(name='MatchType', description='The matching mode.

The value Equals indicates an equal match.', example='Equals'),
      value?: [ string ](name='Value', description='The values of the filter condition.'),
    }
  ](name='Filter', description='The filter conditions.'),
  groupByKey?: string(name='GroupByKey', description='The dimension by which resources are queried. Valid values:

*   ResourceType
*   Region
*   ResourceGroupId
*   TagKey
*   TagValue', example='ResourceType'),
}

model GetResourceCountsResponseBody = {
  filters?: [ 
    {
      key?: string(name='Key', description='The key of the filter condition.', example='RegionId'),
      values?: [ string ](name='Values', description='The values of the filter condition.'),
    }
  ](name='Filters', description='The filter conditions.'),
  groupByKey?: string(name='GroupByKey', description='The dimension by which resources are queried.', example='ResourceType'),
  requestId?: string(name='RequestId', description='The request ID.', example='6D98D9B0-318D-56A4-910C-93B5F945AF2B'),
  resourceCounts?: [ 
    {
      count?: long(name='Count', description='The number of resources.', example='2'),
      groupName?: string(name='GroupName', description='The group name.', example='ACS::ECS::NetworkInterface'),
    }
  ](name='ResourceCounts', description='The numbers of resources.'),
}

model GetResourceCountsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetResourceCountsResponseBody(name='body'),
}

async function getResourceCountsWithOptions(request: GetResourceCountsRequest, runtime: Util.RuntimeOptions): GetResourceCountsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.groupByKey)) {
    query['GroupByKey'] = request.groupByKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetResourceCounts',
    version = '2022-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getResourceCounts(request: GetResourceCountsRequest): GetResourceCountsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getResourceCountsWithOptions(request, runtime);
}

model GetSavedQueryRequest {
  queryId?: string(name='QueryId', example='sq-GeAck****'),
}

model GetSavedQueryResponseBody = {
  requestId?: string(name='RequestId', example='6D98D9B0-318D-56A4-910C-93B5F945AF2B'),
  savedQuery?: {
    createTime?: string(name='CreateTime', example='2023-10-30T01:43:16Z'),
    description?: string(name='Description'),
    expression?: string(name='Expression', example='SELECT * FROM resources;'),
    name?: string(name='Name'),
    queryId?: string(name='QueryId', example='sq-GeAck****'),
    updateTime?: string(name='UpdateTime', example='2023-10-30T01:43:16Z'),
  }(name='SavedQuery'),
}

model GetSavedQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSavedQueryResponseBody(name='body'),
}

async function getSavedQueryWithOptions(request: GetSavedQueryRequest, runtime: Util.RuntimeOptions): GetSavedQueryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.queryId)) {
    query['QueryId'] = request.queryId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSavedQuery',
    version = '2022-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSavedQuery(request: GetSavedQueryRequest): GetSavedQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSavedQueryWithOptions(request, runtime);
}

model ListExampleQueriesRequest {
  maxResults?: string(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='eyJzZWFyY2hBZnRlcnMiOlsiMTAwMTU2Nzk4MTU1OSJd****'),
}

model ListExampleQueriesResponseBody = {
  exampleQueries?: [ 
    {
      description?: string(name='Description'),
      name?: string(name='Name'),
      queryId?: string(name='QueryId', example='sq-0PfKy****'),
    }
  ](name='ExampleQueries'),
  maxResults?: string(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='eyJzZWFyY2hBZnRlcnMiOlsiMTAwMTU2Nzk4MTU1OSJd****'),
  requestId?: string(name='RequestId', example='D696E6EF-3A6D-5770-801E-4982081FE4D0'),
}

model ListExampleQueriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListExampleQueriesResponseBody(name='body'),
}

async function listExampleQueriesWithOptions(request: ListExampleQueriesRequest, runtime: Util.RuntimeOptions): ListExampleQueriesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListExampleQueries',
    version = '2022-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listExampleQueries(request: ListExampleQueriesRequest): ListExampleQueriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listExampleQueriesWithOptions(request, runtime);
}

model ListMultiAccountResourceGroupsRequest {
  accountId?: string(name='AccountId', description='The ID of the management account or member of the resource directory.', example='1394339739****'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page.

Maximum value: 100. Default value: 10.', example='20'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.', example='AAAAAS2Nboi3t4xGrdlG5/Ks/Q1xPG9jzviYEuZydevXIkgF'),
  resourceGroupIds?: [ string ](name='ResourceGroupIds', description='The IDs of resource groups.'),
}

model ListMultiAccountResourceGroupsResponseBody = {
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.', example='AAAAAU5VsT9R1adMTuz9GzginZ3Y+7Y/5JATS+6q5GK9kT75'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0FF0A66E-781F-51EE-9531-928F197558F2'),
  resourceGroups?: [ 
    {
      accountId?: string(name='AccountId', description='The ID of the management account or member of the resource directory.', example='1394339739****'),
      createDate?: string(name='CreateDate', description='The time when the resource group was created.', example='2021-06-30T09:20:08Z'),
      displayName?: string(name='DisplayName', description='The display name of the resource group.', example='group1'),
      id?: string(name='Id', description='The ID of the resource group.', example='rg-acfmzawhxxc****'),
      name?: string(name='Name', description='The unique identifier of the resource group.', example='my-project'),
      status?: string(name='Status', description='The status of the resource group. Valid values:

*   Creating: The resource group is being created.
*   OK: The resource group is created.
*   PendingDelete: The resource group is waiting to be deleted.', example='OK'),
    }
  ](name='ResourceGroups', description='The information about the resource groups.'),
}

model ListMultiAccountResourceGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListMultiAccountResourceGroupsResponseBody(name='body'),
}

async function listMultiAccountResourceGroupsWithOptions(request: ListMultiAccountResourceGroupsRequest, runtime: Util.RuntimeOptions): ListMultiAccountResourceGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.resourceGroupIds)) {
    query['ResourceGroupIds'] = request.resourceGroupIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListMultiAccountResourceGroups',
    version = '2022-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listMultiAccountResourceGroups(request: ListMultiAccountResourceGroupsRequest): ListMultiAccountResourceGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMultiAccountResourceGroupsWithOptions(request, runtime);
}

model ListMultiAccountTagKeysRequest {
  matchType?: string(name='MatchType', description='The matching mode. Valid values:

*   Equals: equal match
*   Prefix: match by prefix', example='Equals'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page.

Valid values: 1 to 100.

Default value: 20.', example='10'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.

If the total number of entries returned for the current request exceeds the value of the `MaxResults` parameter, the entries are truncated. In this case, you can use the `token` to initiate another request and obtain the remaining entries.', example='eyJzZWFyY2hBZnRlcnMiOlsiMTAwMTU2Nzk4MTU1OSJd****'),
  scope?: string(name='Scope', description='The search scope. You can set the value to one of the following items:

*   ID of a resource directory: Resources within the management account and all members of the resource directory are searched. You can call the [GetResourceDirectory](~~159995~~) operation to obtain the ID.
*   ID of the Root folder: Resources within all members in the Root folder and the subfolders of the Root folder are searched. You can call the [ListFoldersForParent](~~159997~~) operation to obtain the ID.
*   ID of a folder: Resources within all members in the folder are searched. You can call the [ListFoldersForParent](~~159997~~) operation to obtain the ID.
*   ID of a member: Resources within the member are searched. You can call the [ListAccounts](~~160016~~) operation to obtain the ID.', example='rd-r4****'),
  tagKey?: string(name='TagKey', description='The tag key.', example='test_key'),
}

model ListMultiAccountTagKeysResponseBody = {
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.', example='AAAAARfZmVDe9NvRXloR5+8CK9nNJufMdRA7W1miLC1P****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='FA6086F9-6363-51A5-A507-88E3201EBCCB'),
  tagKeys?: [ string ](name='TagKeys', description='The tag keys.'),
}

model ListMultiAccountTagKeysResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListMultiAccountTagKeysResponseBody(name='body'),
}

async function listMultiAccountTagKeysWithOptions(request: ListMultiAccountTagKeysRequest, runtime: Util.RuntimeOptions): ListMultiAccountTagKeysResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.matchType)) {
    query['MatchType'] = request.matchType;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.scope)) {
    query['Scope'] = request.scope;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListMultiAccountTagKeys',
    version = '2022-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listMultiAccountTagKeys(request: ListMultiAccountTagKeysRequest): ListMultiAccountTagKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMultiAccountTagKeysWithOptions(request, runtime);
}

model ListMultiAccountTagValuesRequest {
  matchType?: string(name='MatchType', description='The matching mode. Valid values:

*   Equals: equal match
*   Prefix: match by prefix', example='Equals'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page.

Valid values: 1 to 100.

Default value: 20.', example='10'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.

If the total number of entries returned for the current request exceeds the value of the `MaxResults` parameter, the entries are truncated. In this case, you can use the `token` to initiate another request and obtain the remaining entries.', example='eyJzZWFyY2hBZnRlcnMiOlsiMTAwMTU2Nzk4MTU1OSJd****'),
  scope?: string(name='Scope', description='The search scope. You can set the value to one of the following items:

*   ID of a resource directory: Resources within the management account and all members of the resource directory are searched. You can call the [GetResourceDirectory](~~159995~~) operation to obtain the ID.
*   ID of the Root folder: Resources within all members in the Root folder and the subfolders of the Root folder are searched. You can call the [ListFoldersForParent](~~159997~~) operation to obtain the ID.
*   ID of a folder: Resources within all members in the folder are searched. You can call the [ListFoldersForParent](~~159997~~) operation to obtain the ID.
*   ID of a member: Resources within the member are searched. You can call the [ListAccounts](~~160016~~) operation to obtain the ID.', example='rd-r4****'),
  tagKey?: string(name='TagKey', description='The tag key.', example='test_key'),
  tagValue?: string(name='TagValue', description='The tag value.', example='test_value'),
}

model ListMultiAccountTagValuesResponseBody = {
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.', example='eyJzZWFyY2hBZnRlcnMiOlsiMTAwMTU2Nzk4MTU1OSJd****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='36A3D9BE-B607-5993-B546-7E19EF65DC00'),
  tagValues?: [ string ](name='TagValues', description='The tag values.'),
}

model ListMultiAccountTagValuesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListMultiAccountTagValuesResponseBody(name='body'),
}

async function listMultiAccountTagValuesWithOptions(request: ListMultiAccountTagValuesRequest, runtime: Util.RuntimeOptions): ListMultiAccountTagValuesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.matchType)) {
    query['MatchType'] = request.matchType;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.scope)) {
    query['Scope'] = request.scope;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  if (!Util.isUnset(request.tagValue)) {
    query['TagValue'] = request.tagValue;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListMultiAccountTagValues',
    version = '2022-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listMultiAccountTagValues(request: ListMultiAccountTagValuesRequest): ListMultiAccountTagValuesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMultiAccountTagValuesWithOptions(request, runtime);
}

model ListResourceTypesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh-CN: Chinese
*   en-US: English', example='zh-CN'),
  query?: [ string ](name='Query', description='The query conditions.'),
  resourceType?: string(name='ResourceType', description='The resource type.

For more information about the resource types that are supported by Resource Center, see [Services that work with Resource Center](~~477798~~).', example='ACS::ACK::Cluster'),
}

model ListResourceTypesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='E5556E4C-479A-5BBB-B325-F07563E7E917'),
  resourceTypes?: [ 
    {
      filterKeys?: [ string ](name='FilterKeys', description='The supported filter conditions.'),
      productName?: string(name='ProductName', description='The name of the Alibaba Cloud service.', example='Container Service for Kubernetes'),
      resourceType?: string(name='ResourceType', description='The resource type.', example='ACS::ACK::Cluster'),
      resourceTypeName?: string(name='ResourceTypeName', description='The name of the resource type.', example='Cluster'),
    }
  ](name='ResourceTypes', description='The information about the resource types.'),
}

model ListResourceTypesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListResourceTypesResponseBody(name='body'),
}

async function listResourceTypesWithOptions(request: ListResourceTypesRequest, runtime: Util.RuntimeOptions): ListResourceTypesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.query)) {
    query['Query'] = request.query;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListResourceTypes',
    version = '2022-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listResourceTypes(request: ListResourceTypesRequest): ListResourceTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listResourceTypesWithOptions(request, runtime);
}

model ListSavedQueriesRequest {
  maxResults?: string(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='eyJzZWFyY2hBZnRlcnMiOlsiMTAwMTU2Nzk4MTU1OSJd****'),
}

model ListSavedQueriesResponseBody = {
  maxResults?: string(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='AAAAARfZmVDe9NvRXloR5+8CK9nNJufMdRA7W1miLC1P****'),
  requestId?: string(name='RequestId', example='D696E6EF-3A6D-5770-801E-4982081FE4D0'),
  savedQueries?: [ 
    {
      createTime?: string(name='CreateTime', example='2022-01-13T05:50:35Z'),
      description?: string(name='Description'),
      name?: string(name='Name'),
      queryId?: string(name='QueryId', example='sq-GeAck****'),
      updateTime?: string(name='UpdateTime', example='2023-03-14 10:27:07'),
    }
  ](name='SavedQueries'),
}

model ListSavedQueriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSavedQueriesResponseBody(name='body'),
}

async function listSavedQueriesWithOptions(request: ListSavedQueriesRequest, runtime: Util.RuntimeOptions): ListSavedQueriesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSavedQueries',
    version = '2022-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSavedQueries(request: ListSavedQueriesRequest): ListSavedQueriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSavedQueriesWithOptions(request, runtime);
}

model ListTagKeysRequest {
  matchType?: string(name='MatchType', description='The matching mode. Valid values:

*   Equals: equal match
*   Prefix: match by prefix', example='Equals'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page.

Valid values: 1 to 100.

Default value: 20.', example='10'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.

If the total number of entries returned for the current request exceeds the value of the `MaxResults` parameter, the entries are truncated. In this case, you can use the `token` to initiate another request and obtain the remaining entries.', example='AAAAAUYb00R0gHZBE8FVDeoh2ME93VeeEPUHs****'),
  tagKey?: string(name='TagKey', description='The tag key.', example='test_key'),
}

model ListTagKeysResponseBody = {
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.', example='AAAAAUDnubHKJbVTCdlIGYUPtsu3EoN3bfdgjDA****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='44C8A952-D6B0-5BC8-82D5-93BA02E26F2E'),
  tagKeys?: [ string ](name='TagKeys', description='The tag keys.'),
}

model ListTagKeysResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagKeysResponseBody(name='body'),
}

async function listTagKeysWithOptions(request: ListTagKeysRequest, runtime: Util.RuntimeOptions): ListTagKeysResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.matchType)) {
    query['MatchType'] = request.matchType;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagKeys',
    version = '2022-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTagKeys(request: ListTagKeysRequest): ListTagKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagKeysWithOptions(request, runtime);
}

model ListTagValuesRequest {
  matchType?: string(name='MatchType', description='The matching mode. Valid values:

*   Equals: equal match
*   Prefix: match by prefix', example='Equals'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page.

Valid values: 1 to 100.

Default value: 20.', example='10'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.

If the total number of entries returned for the current request exceeds the value of the `MaxResults` parameter, the entries are truncated. In this case, you can use the `token` to initiate another request and obtain the remaining entries.', example='eyJzZWFyY2hBZnRlcnMiOlsiMTAwMTU2Nzk4MTU1OSJd****'),
  tagKey?: string(name='TagKey', description='The tag key.', example='test_key'),
  tagValue?: string(name='TagValue', description='The tag value.', example='test_value'),
}

model ListTagValuesResponseBody = {
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.', example='eyJzZWFyY2hBZnRlcnMiOlsiMTAwMTU2Nzk4MTU1OSJd****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C1840B83-1193-5E83-AFA6-4B8D303E29F5'),
  tagValues?: [ string ](name='TagValues', description='The tag values.'),
}

model ListTagValuesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagValuesResponseBody(name='body'),
}

async function listTagValuesWithOptions(request: ListTagValuesRequest, runtime: Util.RuntimeOptions): ListTagValuesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.matchType)) {
    query['MatchType'] = request.matchType;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  if (!Util.isUnset(request.tagValue)) {
    query['TagValue'] = request.tagValue;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagValues',
    version = '2022-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTagValues(request: ListTagValuesRequest): ListTagValuesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagValuesWithOptions(request, runtime);
}

model SearchMultiAccountResourcesRequest {
  filter?: [ 
    {
      key?: string(name='Key', description='The key of the filter condition. For more information, see `Supported filter parameters`.', example='ResourceGroupId'),
      matchType?: string(name='MatchType', description='The matching mode.

The value Equals indicates an equal match.', example='Equals'),
      value?: [ string ](name='Value', description='The values of the filter condition.'),
    }
  ](name='Filter', description='The filter conditions.'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page.

Valid values: 1 to 100.

Default value: 20.', example='10'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.

If the total number of entries returned for the current request exceeds the value of the `MaxResults` parameter, the entries are truncated. In this case, you can use the token to initiate another request and obtain the remaining entries.``', example='eyJzZWFyY2hBZnRlcnMiOlsiMTAwMTU2Nzk4MTU1OSJd****'),
  scope?: string(name='Scope', description='The search scope. You can set the value to one of the following items:

*   ID of a resource directory: Resources within the management account and all members of the resource directory are searched. You can call the [GetResourceDirectory](~~159995~~) operation to obtain the ID.
*   ID of the Root folder: Resources within all members in the Root folder and the subfolders of the Root folder are searched. You can call the [ListFoldersForParent](~~159997~~) operation to obtain the ID.
*   ID of a folder: Resources within all members in the folder are searched. You can call the [ListFoldersForParent](~~159997~~) operation to obtain the ID.
*   ID of a member: Resources within the member are searched. You can call the [ListAccounts](~~160016~~) operation to obtain the ID.', example='rd-r4****'),
  sortCriterion?: {
    key?: string(name='Key', description='The attribute based on which the entries are sorted.

The value CreateTime indicates the creation time of resources.', example='CreateTime'),
    order?: string(name='Order', description='The order in which the entries are sorted. Valid values:

*   ASC: The entries are sorted in ascending order. This value is the default value.
*   DESC: The entries are sorted in descending order.', example='ASC'),
  }(name='SortCriterion', description='The method that is used to sort the entries returned.'),
}

model SearchMultiAccountResourcesResponseBody = {
  filters?: [ 
    {
      key?: string(name='Key', description='The key of the filter condition.', example='RegionId'),
      matchType?: string(name='MatchType', description='The matching mode.', example='Equals'),
      values?: [ string ](name='Values', description='The values of the filter condition.'),
    }
  ](name='Filters', description='The filter conditions.'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries returned per page.', example='10'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.', example='The pagination token that is used in the next request to retrieve a new page of results.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EFA806B9-7F36-55AB-8B7A-D680C2C5EE57'),
  resources?: [ 
    {
      accountId?: string(name='AccountId', description='The ID of the management account or member of the resource directory.', example='151266687691****'),
      createTime?: string(name='CreateTime', description='The time when the resource was created.

> Whether this parameter is returned is determined by the Alibaba Cloud service to which the resource belongs.', example='2021-06-30T09:20:08Z'),
      expireTime?: string(name='ExpireTime'),
      ipAddressAttributes?: [ 
        {
          ipAddress?: [ string ](name='IpAddress'),
          networkType?: string(name='NetworkType'),
          version?: string(name='Version'),
        }
      ](name='IpAddressAttributes'),
      ipAddresses?: [ string ](name='IpAddresses', description='The IP addresses.

> Whether this parameter is returned is determined by the Alibaba Cloud service to which the resource belongs.'),
      regionId?: string(name='RegionId', description='The region ID of the resource.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the resource belongs.', example='rg-acfmzawhxxc****'),
      resourceId?: string(name='ResourceId', description='The ID of the resource.', example='vtb-bp11lbh452fr8940s****'),
      resourceName?: string(name='ResourceName', description='The name of the resource.', example='group1'),
      resourceType?: string(name='ResourceType', description='The type of the resource.', example='ACS::VPC::RouteTable'),
      tags?: [ 
        {
          key?: string(name='Key', description='The key of the tag.', example='test_key'),
          value?: string(name='Value', description='The value of the tag.', example='test_value'),
        }
      ](name='Tags', description='The tags of the resource.'),
      zoneId?: string(name='ZoneId', description='The zone ID of the resource.

> Whether this parameter is returned is determined by the Alibaba Cloud service to which the resource belongs.', example='cn-hangzhou-k'),
    }
  ](name='Resources', description='The information about the resources.'),
  scope?: string(name='Scope', description='The search scope.

*   ID of a resource directory: Resources within the management account and all members of the resource directory are searched.
*   ID of the Root folder: Resources within all members in the Root folder and the subfolders of the Root folder are searched.
*   ID of a folder: Resources within all members in the folder are searched.
*   ID of a member: Resources within the member are searched.', example='rd-r4****'),
}

model SearchMultiAccountResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SearchMultiAccountResourcesResponseBody(name='body'),
}

/**
  * *   You can use this operation to search for only resources whose types are supported by Resource Center in services that work with Resource Center. For more information about the services and the resource types that are supported by Resource Center, see [Services that work with Resource Center](~~477798~~).
  * *   Before you use a RAM user or a RAM role to call the operation, you must make sure that the RAM user or RAM role is granted the required permissions. For more information, see [Grant a RAM user the permissions to use Resource Center](~~600556~~).
  * *   By default, the operation returns a maximum of 20 entries. You can configure the `MaxResults` parameter to specify the maximum number of entries to return.
  * *   If the response does not contain the `NextToken` parameter, all entries are returned. Otherwise, more entries exist. If you want to obtain the entries, you can call the operation again to initiate another query request. In the request, set the `NextToken` parameter to the value of `NextToken` in the last response of the operation. If you do not configure the `NextToken` parameter, entries on the first page are returned by default.
  * *   You can specify one or more filter conditions to narrow the search scope. For more information about supported filter parameters and matching methods, see the Supported filter parameters section. Multiple filter conditions have logical `AND` relations. Only resources that meet all filter conditions are returned. The values of a filter condition have logical `OR` relations. Resources that meet any value of the filter condition are returned.
  * *   You can visit [Sample Code Center](https://api.alibabacloud.com/api-tools/demo/ResourceCenter) to view more sample queries.
  *
  * @param request SearchMultiAccountResourcesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SearchMultiAccountResourcesResponse
 */
async function searchMultiAccountResourcesWithOptions(request: SearchMultiAccountResourcesRequest, runtime: Util.RuntimeOptions): SearchMultiAccountResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.scope)) {
    query['Scope'] = request.scope;
  }
  if (!Util.isUnset(request.sortCriterion)) {
    query['SortCriterion'] = request.sortCriterion;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchMultiAccountResources',
    version = '2022-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   You can use this operation to search for only resources whose types are supported by Resource Center in services that work with Resource Center. For more information about the services and the resource types that are supported by Resource Center, see [Services that work with Resource Center](~~477798~~).
  * *   Before you use a RAM user or a RAM role to call the operation, you must make sure that the RAM user or RAM role is granted the required permissions. For more information, see [Grant a RAM user the permissions to use Resource Center](~~600556~~).
  * *   By default, the operation returns a maximum of 20 entries. You can configure the `MaxResults` parameter to specify the maximum number of entries to return.
  * *   If the response does not contain the `NextToken` parameter, all entries are returned. Otherwise, more entries exist. If you want to obtain the entries, you can call the operation again to initiate another query request. In the request, set the `NextToken` parameter to the value of `NextToken` in the last response of the operation. If you do not configure the `NextToken` parameter, entries on the first page are returned by default.
  * *   You can specify one or more filter conditions to narrow the search scope. For more information about supported filter parameters and matching methods, see the Supported filter parameters section. Multiple filter conditions have logical `AND` relations. Only resources that meet all filter conditions are returned. The values of a filter condition have logical `OR` relations. Resources that meet any value of the filter condition are returned.
  * *   You can visit [Sample Code Center](https://api.alibabacloud.com/api-tools/demo/ResourceCenter) to view more sample queries.
  *
  * @param request SearchMultiAccountResourcesRequest
  * @return SearchMultiAccountResourcesResponse
 */
async function searchMultiAccountResources(request: SearchMultiAccountResourcesRequest): SearchMultiAccountResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchMultiAccountResourcesWithOptions(request, runtime);
}

model SearchResourcesRequest {
  filter?: [ 
    {
      key?: string(name='Key', description='The key of the filter condition. For more information, see `Supported filter parameters`.', example='RegionId'),
      matchType?: string(name='MatchType', description='The matching mode.

The value Equals indicates an equal match.', example='Equals'),
      value?: [ string ](name='Value', description='The values of the filter condition.'),
    }
  ](name='Filter', description='The filter conditions.'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries per page.

Valid values: 1 to 100.

Default value: 20.', example='10'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.

If the total number of entries returned for the current request exceeds the value of the `MaxResults` parameter, the entries are truncated. In this case, you can use the `token` to initiate another request and obtain the remaining entries.', example='eyJzZWFyY2hBZnRlcnMiOlsiMTAwMTU2Nzk4MTU1OSJd****'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmzawhxxc****'),
  sortCriterion?: {
    key?: string(name='Key', description='The attribute based on which the entries are sorted.

The value CreateTime indicates the creation time of resources.', example='CreateTime'),
    order?: string(name='Order', description='The order in which the entries are sorted. Valid values:

*   ASC: The entries are sorted in ascending order. This value is the default value.
*   DESC: The entries are sorted in descending order.', example='ASC'),
  }(name='SortCriterion', description='The method that is used to sort the entries returned.'),
}

model SearchResourcesResponseBody = {
  filters?: [ 
    {
      key?: string(name='Key', description='The key of the filter condition.', example='RegionId'),
      matchType?: string(name='MatchType', description='The matching mode.', example='Equals'),
      values?: [ string ](name='Values', description='The values of the filter condition.'),
    }
  ](name='Filters', description='The filter conditions.'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries returned per page.', example='10'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.', example='eyJzZWFyY2hBZnRlcnMiOlsiMTAwMTU2Nzk4MTU1OSJd****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D696E6EF-3A6D-5770-801E-4982081FE4D0'),
  resources?: [ 
    {
      accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account to which the resource belongs.', example='151266687691****'),
      createTime?: string(name='CreateTime', description='The time when the resource was created.

> Whether this parameter is returned is determined by the Alibaba Cloud service to which the resource belongs.', example='2021-06-30T09:20:08Z'),
      expireTime?: string(name='ExpireTime'),
      ipAddressAttributes?: [ 
        {
          ipAddress?: [ string ](name='IpAddress'),
          networkType?: string(name='NetworkType'),
          version?: string(name='Version'),
        }
      ](name='IpAddressAttributes'),
      ipAddresses?: [ string ](name='IpAddresses', description='The IP addresses.

> Whether this parameter is returned is determined by the Alibaba Cloud service to which the resource belongs.'),
      regionId?: string(name='RegionId', description='The region ID of the resource.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the resource belongs.', example='rg-acfmzawhxxc****'),
      resourceId?: string(name='ResourceId', description='The ID of the resource.', example='vtb-bp11lbh452fr8940s****'),
      resourceName?: string(name='ResourceName', description='The name of the resource.', example='group1'),
      resourceType?: string(name='ResourceType', description='The type of the resource.', example='ACS::VPC::RouteTable'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='test_key'),
          value?: string(name='Value', description='The tag value.', example='test_value'),
        }
      ](name='Tags', description='The tags of the resource.'),
      zoneId?: string(name='ZoneId', description='The zone ID of the resource.

> Whether this parameter is returned is determined by the Alibaba Cloud service to which the resource belongs.', example='cn-hangzhou-k'),
    }
  ](name='Resources', description='The information about the resources.'),
}

model SearchResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SearchResourcesResponseBody(name='body'),
}

/**
  * *   You can use this operation to search for only resources whose types are supported by Resource Center in services that work with Resource Center. For more information about the services and the resource types that are supported by Resource Center, see [Services that work with Resource Center](~~477798~~).
  * *   By default, the operation returns a maximum of 20 entries. You can configure the `MaxResults` parameter to specify the maximum number of entries to return.
  * *   If the response does not contain the `NextToken` parameter, all entries are returned. Otherwise, more entries exist. If you want to obtain the entries, you can call the operation again to initiate another query request. In the request, set the `NextToken` parameter to the value of `NextToken` in the last response of the operation. If you do not configure the `NextToken` parameter, entries on the first page are returned by default.
  * *   You can specify one or more filter conditions to narrow the search scope. For more information about supported filter parameters and matching methods, see the Supported filter parameters section. Multiple filter conditions have logical `AND` relations. Only resources that meet all filter conditions are returned. The values of a filter condition have logical `OR` relations. Resources that meet any value of the filter condition are returned.
  * *   You can visit [Sample Code Center](https://api.aliyun.com/api-tools/demo/ResourceCenter) to view more sample queries.
  *
  * @param request SearchResourcesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SearchResourcesResponse
 */
async function searchResourcesWithOptions(request: SearchResourcesRequest, runtime: Util.RuntimeOptions): SearchResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.sortCriterion)) {
    query['SortCriterion'] = request.sortCriterion;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchResources',
    version = '2022-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   You can use this operation to search for only resources whose types are supported by Resource Center in services that work with Resource Center. For more information about the services and the resource types that are supported by Resource Center, see [Services that work with Resource Center](~~477798~~).
  * *   By default, the operation returns a maximum of 20 entries. You can configure the `MaxResults` parameter to specify the maximum number of entries to return.
  * *   If the response does not contain the `NextToken` parameter, all entries are returned. Otherwise, more entries exist. If you want to obtain the entries, you can call the operation again to initiate another query request. In the request, set the `NextToken` parameter to the value of `NextToken` in the last response of the operation. If you do not configure the `NextToken` parameter, entries on the first page are returned by default.
  * *   You can specify one or more filter conditions to narrow the search scope. For more information about supported filter parameters and matching methods, see the Supported filter parameters section. Multiple filter conditions have logical `AND` relations. Only resources that meet all filter conditions are returned. The values of a filter condition have logical `OR` relations. Resources that meet any value of the filter condition are returned.
  * *   You can visit [Sample Code Center](https://api.aliyun.com/api-tools/demo/ResourceCenter) to view more sample queries.
  *
  * @param request SearchResourcesRequest
  * @return SearchResourcesResponse
 */
async function searchResources(request: SearchResourcesRequest): SearchResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchResourcesWithOptions(request, runtime);
}

model UpdateSavedQueryRequest {
  description?: string(name='Description'),
  expression?: string(name='Expression', example='SELECT * FROM resources;'),
  name?: string(name='Name'),
  queryId?: string(name='QueryId', example='sq-GeAck****'),
}

model UpdateSavedQueryResponseBody = {
  requestId?: string(name='RequestId', example='D696E6EF-3A6D-5770-801E-4982081FE4D0'),
}

model UpdateSavedQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSavedQueryResponseBody(name='body'),
}

async function updateSavedQueryWithOptions(request: UpdateSavedQueryRequest, runtime: Util.RuntimeOptions): UpdateSavedQueryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.expression)) {
    query['Expression'] = request.expression;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.queryId)) {
    query['QueryId'] = request.queryId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSavedQuery',
    version = '2022-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateSavedQuery(request: UpdateSavedQueryRequest): UpdateSavedQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSavedQueryWithOptions(request, runtime);
}

