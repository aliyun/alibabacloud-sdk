/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('resourcecenter', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model DisableMultiAccountResourceCenterResponseBody = {
  requestId?: string(name='RequestId', example='4951F920-48DB-5731-96AA-3A7C8AE617D9'),
}

model DisableMultiAccountResourceCenterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableMultiAccountResourceCenterResponseBody(name='body'),
}

async function disableMultiAccountResourceCenterWithOptions(runtime: Util.RuntimeOptions): DisableMultiAccountResourceCenterResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DisableMultiAccountResourceCenter',
    version = '2022-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableMultiAccountResourceCenter(): DisableMultiAccountResourceCenterResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableMultiAccountResourceCenterWithOptions(runtime);
}

model DisableResourceCenterResponseBody = {
  requestId?: string(name='RequestId', example='D170D58E-6256-5344-8F5E-922EC9ECB7EA'),
}

model DisableResourceCenterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableResourceCenterResponseBody(name='body'),
}

async function disableResourceCenterWithOptions(runtime: Util.RuntimeOptions): DisableResourceCenterResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DisableResourceCenter',
    version = '2022-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableResourceCenter(): DisableResourceCenterResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableResourceCenterWithOptions(runtime);
}

model EnableMultiAccountResourceCenterResponseBody = {
  requestId?: string(name='RequestId', example='767038B7-2027-5508-858B-E213232D57D5'),
  status?: string(name='Status', example='Pending'),
}

model EnableMultiAccountResourceCenterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableMultiAccountResourceCenterResponseBody(name='body'),
}

async function enableMultiAccountResourceCenterWithOptions(runtime: Util.RuntimeOptions): EnableMultiAccountResourceCenterResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'EnableMultiAccountResourceCenter',
    version = '2022-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableMultiAccountResourceCenter(): EnableMultiAccountResourceCenterResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableMultiAccountResourceCenterWithOptions(runtime);
}

model EnableResourceCenterResponseBody = {
  requestId?: string(name='RequestId', example='45357BEF-AB50-5E4D-B05D-5A882A4BE924'),
  status?: string(name='Status', example='Pending'),
}

model EnableResourceCenterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableResourceCenterResponseBody(name='body'),
}

async function enableResourceCenterWithOptions(runtime: Util.RuntimeOptions): EnableResourceCenterResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'EnableResourceCenter',
    version = '2022-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableResourceCenter(): EnableResourceCenterResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableResourceCenterWithOptions(runtime);
}

model GetMultiAccountResourceCenterServiceStatusResponseBody = {
  initialStatus?: string(name='InitialStatus', example='Pending'),
  requestId?: string(name='RequestId', example='81671397-1425-51F1-A144-4799E01BEBFF'),
  serviceStatus?: string(name='ServiceStatus', example='Enabled'),
}

model GetMultiAccountResourceCenterServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMultiAccountResourceCenterServiceStatusResponseBody(name='body'),
}

async function getMultiAccountResourceCenterServiceStatusWithOptions(runtime: Util.RuntimeOptions): GetMultiAccountResourceCenterServiceStatusResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetMultiAccountResourceCenterServiceStatus',
    version = '2022-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMultiAccountResourceCenterServiceStatus(): GetMultiAccountResourceCenterServiceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMultiAccountResourceCenterServiceStatusWithOptions(runtime);
}

model GetMultiAccountResourceConfigurationRequest {
  accountId?: string(name='AccountId', example='1619302****'),
  resourceId?: string(name='ResourceId', example='m-eb3hji****'),
  resourceRegionId?: string(name='ResourceRegionId', example='cn-shanghai'),
  resourceType?: string(name='ResourceType', example='ACS::VPC::RouteTable'),
}

model GetMultiAccountResourceConfigurationResponseBody = {
  accountId?: string(name='AccountId', example='1619302****'),
  configuration?: map[string]any(name='Configuration'),
  createTime?: string(name='CreateTime', example='2023-02-14T03:12:11Z'),
  ipAddresses?: [ string ](name='IpAddresses'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  requestId?: string(name='RequestId', example='B2DCC08B-C12A-5705-879C-5A1450016156'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmzy6d****'),
  resourceId?: string(name='ResourceId', example='m-eb3hji****'),
  resourceName?: string(name='ResourceName', example='test_resource'),
  resourceType?: string(name='ResourceType', example='ACS::VPC::RouteTable'),
  tags?: [ 
    {
      key?: string(name='Key', example='tag-key'),
      value?: string(name='Value', example='tag-value'),
    }
  ](name='Tags'),
  zoneId?: string(name='ZoneId', example='cn-shanghai-a'),
}

model GetMultiAccountResourceConfigurationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMultiAccountResourceConfigurationResponseBody(name='body'),
}

async function getMultiAccountResourceConfigurationWithOptions(request: GetMultiAccountResourceConfigurationRequest, runtime: Util.RuntimeOptions): GetMultiAccountResourceConfigurationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceRegionId)) {
    query['ResourceRegionId'] = request.resourceRegionId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMultiAccountResourceConfiguration',
    version = '2022-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMultiAccountResourceConfiguration(request: GetMultiAccountResourceConfigurationRequest): GetMultiAccountResourceConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMultiAccountResourceConfigurationWithOptions(request, runtime);
}

model GetResourceCenterServiceStatusResponseBody = {
  initialStatus?: string(name='InitialStatus', example='Pending'),
  requestId?: string(name='RequestId', example='AD5F848D-CCDC-5464-93E1-4BA50A4826DD'),
  serviceStatus?: string(name='ServiceStatus', example='Enabled'),
}

model GetResourceCenterServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetResourceCenterServiceStatusResponseBody(name='body'),
}

async function getResourceCenterServiceStatusWithOptions(runtime: Util.RuntimeOptions): GetResourceCenterServiceStatusResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetResourceCenterServiceStatus',
    version = '2022-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getResourceCenterServiceStatus(): GetResourceCenterServiceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getResourceCenterServiceStatusWithOptions(runtime);
}

model GetResourceConfigurationRequest {
  resourceId?: string(name='ResourceId', example='eip-bp1kyg72m****'),
  resourceRegionId?: string(name='ResourceRegionId', example='cn-shanghai'),
  resourceType?: string(name='ResourceType', example='ACS::VPC::RouteTable'),
}

model GetResourceConfigurationResponseBody = {
  accountId?: string(name='AccountId', example='151266687691****'),
  configuration?: map[string]any(name='Configuration'),
  createTime?: string(name='CreateTime', example='2021-06-30T09:20:08Z'),
  ipAddresses?: [ string ](name='IpAddresses'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestId?: string(name='RequestId', example='F1CE0D52-32DA-531A-87A4-B9A5B68D5D8E'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmv4k****'),
  resourceId?: string(name='ResourceId', example='vtb-uf6978gdqbi****'),
  resourceName?: string(name='ResourceName', example='group1'),
  resourceType?: string(name='ResourceType', example='ACS::VPC::VSwitch'),
  tags?: [ 
    {
      key?: string(name='Key', example='test-key'),
      value?: string(name='Value', example='test-value'),
    }
  ](name='Tags'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-k'),
}

model GetResourceConfigurationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetResourceConfigurationResponseBody(name='body'),
}

async function getResourceConfigurationWithOptions(request: GetResourceConfigurationRequest, runtime: Util.RuntimeOptions): GetResourceConfigurationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceRegionId)) {
    query['ResourceRegionId'] = request.resourceRegionId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetResourceConfiguration',
    version = '2022-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getResourceConfiguration(request: GetResourceConfigurationRequest): GetResourceConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getResourceConfigurationWithOptions(request, runtime);
}

model ListMultiAccountResourceGroupsRequest {
  accountId?: string(name='AccountId', example='1394339739****'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='AAAAAS2Nboi3t4xGrdlG5/Ks/Q1xPG9jzviYEuZydevXIkgF'),
  resourceGroupIds?: [ string ](name='ResourceGroupIds'),
}

model ListMultiAccountResourceGroupsResponseBody = {
  nextToken?: string(name='NextToken', example='AAAAAU5VsT9R1adMTuz9GzginZ3Y+7Y/5JATS+6q5GK9kT75'),
  requestId?: string(name='RequestId', example='0FF0A66E-781F-51EE-9531-928F197558F2'),
  resourceGroups?: [ 
    {
      accountId?: string(name='AccountId', example='1394339739****'),
      createDate?: string(name='CreateDate', example='2021-06-30T09:20:08Z'),
      displayName?: string(name='DisplayName', example='group1'),
      id?: string(name='Id', example='rg-acfmzawhxxc****'),
      name?: string(name='Name', example='my-project'),
      status?: string(name='Status', example='OK'),
    }
  ](name='ResourceGroups'),
}

model ListMultiAccountResourceGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListMultiAccountResourceGroupsResponseBody(name='body'),
}

async function listMultiAccountResourceGroupsWithOptions(request: ListMultiAccountResourceGroupsRequest, runtime: Util.RuntimeOptions): ListMultiAccountResourceGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.resourceGroupIds)) {
    query['ResourceGroupIds'] = request.resourceGroupIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListMultiAccountResourceGroups',
    version = '2022-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listMultiAccountResourceGroups(request: ListMultiAccountResourceGroupsRequest): ListMultiAccountResourceGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMultiAccountResourceGroupsWithOptions(request, runtime);
}

model ListMultiAccountTagKeysRequest {
  matchType?: string(name='MatchType', example='Equals'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='eyJzZWFyY2hBZnRlcnMiOlsiMTAwMTU2Nzk4MTU1OSJd****'),
  scope?: string(name='Scope', example='rd-r4****'),
  tagKey?: string(name='TagKey', example='test_key'),
}

model ListMultiAccountTagKeysResponseBody = {
  nextToken?: string(name='NextToken', example='AAAAARfZmVDe9NvRXloR5+8CK9nNJufMdRA7W1miLC1P****'),
  requestId?: string(name='RequestId', example='FA6086F9-6363-51A5-A507-88E3201EBCCB'),
  tagKeys?: [ string ](name='TagKeys'),
}

model ListMultiAccountTagKeysResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListMultiAccountTagKeysResponseBody(name='body'),
}

async function listMultiAccountTagKeysWithOptions(request: ListMultiAccountTagKeysRequest, runtime: Util.RuntimeOptions): ListMultiAccountTagKeysResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.matchType)) {
    query['MatchType'] = request.matchType;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.scope)) {
    query['Scope'] = request.scope;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListMultiAccountTagKeys',
    version = '2022-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listMultiAccountTagKeys(request: ListMultiAccountTagKeysRequest): ListMultiAccountTagKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMultiAccountTagKeysWithOptions(request, runtime);
}

model ListMultiAccountTagValuesRequest {
  matchType?: string(name='MatchType', example='Equals'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='eyJzZWFyY2hBZnRlcnMiOlsiMTAwMTU2Nzk4MTU1OSJd****'),
  scope?: string(name='Scope', example='rd-r4****'),
  tagKey?: string(name='TagKey', example='test_key'),
  tagValue?: string(name='TagValue', example='test_value'),
}

model ListMultiAccountTagValuesResponseBody = {
  nextToken?: string(name='NextToken', example='eyJzZWFyY2hBZnRlcnMiOlsiMTAwMTU2Nzk4MTU1OSJd****'),
  requestId?: string(name='RequestId', example='36A3D9BE-B607-5993-B546-7E19EF65DC00'),
  tagValues?: [ string ](name='TagValues'),
}

model ListMultiAccountTagValuesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListMultiAccountTagValuesResponseBody(name='body'),
}

async function listMultiAccountTagValuesWithOptions(request: ListMultiAccountTagValuesRequest, runtime: Util.RuntimeOptions): ListMultiAccountTagValuesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.matchType)) {
    query['MatchType'] = request.matchType;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.scope)) {
    query['Scope'] = request.scope;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  if (!Util.isUnset(request.tagValue)) {
    query['TagValue'] = request.tagValue;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListMultiAccountTagValues',
    version = '2022-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listMultiAccountTagValues(request: ListMultiAccountTagValuesRequest): ListMultiAccountTagValuesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMultiAccountTagValuesWithOptions(request, runtime);
}

model ListResourceTypesRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh-CN'),
  query?: [ string ](name='Query'),
  resourceType?: string(name='ResourceType', example='ACS::ACK::Cluster'),
}

model ListResourceTypesResponseBody = {
  requestId?: string(name='RequestId', example='E5556E4C-479A-5BBB-B325-F07563E7E917'),
  resourceTypes?: [ 
    {
      filterKeys?: [ string ](name='FilterKeys'),
      productName?: string(name='ProductName'),
      resourceType?: string(name='ResourceType', example='ACS::ACK::Cluster'),
      resourceTypeName?: string(name='ResourceTypeName'),
    }
  ](name='ResourceTypes'),
}

model ListResourceTypesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListResourceTypesResponseBody(name='body'),
}

async function listResourceTypesWithOptions(request: ListResourceTypesRequest, runtime: Util.RuntimeOptions): ListResourceTypesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.query)) {
    query['Query'] = request.query;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListResourceTypes',
    version = '2022-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listResourceTypes(request: ListResourceTypesRequest): ListResourceTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listResourceTypesWithOptions(request, runtime);
}

model ListTagKeysRequest {
  matchType?: string(name='MatchType', example='Equals'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='AAAAAUYb00R0gHZBE8FVDeoh2ME93VeeEPUHs****'),
  tagKey?: string(name='TagKey', example='test_key'),
}

model ListTagKeysResponseBody = {
  nextToken?: string(name='NextToken', example='AAAAAUDnubHKJbVTCdlIGYUPtsu3EoN3bfdgjDA****'),
  requestId?: string(name='RequestId', example='44C8A952-D6B0-5BC8-82D5-93BA02E26F2E'),
  tagKeys?: [ string ](name='TagKeys'),
}

model ListTagKeysResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagKeysResponseBody(name='body'),
}

async function listTagKeysWithOptions(request: ListTagKeysRequest, runtime: Util.RuntimeOptions): ListTagKeysResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.matchType)) {
    query['MatchType'] = request.matchType;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagKeys',
    version = '2022-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTagKeys(request: ListTagKeysRequest): ListTagKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagKeysWithOptions(request, runtime);
}

model ListTagValuesRequest {
  matchType?: string(name='MatchType', example='Equals'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='eyJzZWFyY2hBZnRlcnMiOlsiMTAwMTU2Nzk4MTU1OSJd****'),
  tagKey?: string(name='TagKey', example='test_key'),
  tagValue?: string(name='TagValue', example='test_value'),
}

model ListTagValuesResponseBody = {
  nextToken?: string(name='NextToken', example='eyJzZWFyY2hBZnRlcnMiOlsiMTAwMTU2Nzk4MTU1OSJd****'),
  requestId?: string(name='RequestId', example='C1840B83-1193-5E83-AFA6-4B8D303E29F5'),
  tagValues?: [ string ](name='TagValues'),
}

model ListTagValuesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagValuesResponseBody(name='body'),
}

async function listTagValuesWithOptions(request: ListTagValuesRequest, runtime: Util.RuntimeOptions): ListTagValuesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.matchType)) {
    query['MatchType'] = request.matchType;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  if (!Util.isUnset(request.tagValue)) {
    query['TagValue'] = request.tagValue;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagValues',
    version = '2022-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTagValues(request: ListTagValuesRequest): ListTagValuesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagValuesWithOptions(request, runtime);
}

model SearchMultiAccountResourcesRequest {
  filter?: [ 
    {
      key?: string(name='Key', example='ResourceGroupId'),
      matchType?: string(name='MatchType', example='Equals'),
      value?: [ string ](name='Value'),
    }
  ](name='Filter'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='eyJzZWFyY2hBZnRlcnMiOlsiMTAwMTU2Nzk4MTU1OSJd****'),
  scope?: string(name='Scope', example='rd-r4****'),
  sortCriterion?: {
    key?: string(name='Key', example='CreateTime'),
    order?: string(name='Order', example='ASC'),
  }(name='SortCriterion'),
}

model SearchMultiAccountResourcesResponseBody = {
  filters?: [ 
    {
      key?: string(name='Key', example='RegionId'),
      matchType?: string(name='MatchType', example='Equals'),
      values?: [ string ](name='Values'),
    }
  ](name='Filters'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId', example='EFA806B9-7F36-55AB-8B7A-D680C2C5EE57'),
  resources?: [ 
    {
      accountId?: string(name='AccountId', example='151266687691****'),
      createTime?: string(name='CreateTime', example='2021-06-30T09:20:08Z'),
      ipAddresses?: [ string ](name='IpAddresses'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmzawhxxc****'),
      resourceId?: string(name='ResourceId', example='vtb-bp11lbh452fr8940s****'),
      resourceName?: string(name='ResourceName', example='group1'),
      resourceType?: string(name='ResourceType', example='ACS::VPC::RouteTable'),
      tags?: [ 
        {
          key?: string(name='Key', example='test_key'),
          value?: string(name='Value', example='test_value'),
        }
      ](name='Tags'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-k'),
    }
  ](name='Resources'),
  scope?: string(name='Scope', example='rd-r4****'),
}

model SearchMultiAccountResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SearchMultiAccountResourcesResponseBody(name='body'),
}

async function searchMultiAccountResourcesWithOptions(request: SearchMultiAccountResourcesRequest, runtime: Util.RuntimeOptions): SearchMultiAccountResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.scope)) {
    query['Scope'] = request.scope;
  }
  if (!Util.isUnset(request.sortCriterion)) {
    query['SortCriterion'] = request.sortCriterion;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchMultiAccountResources',
    version = '2022-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function searchMultiAccountResources(request: SearchMultiAccountResourcesRequest): SearchMultiAccountResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchMultiAccountResourcesWithOptions(request, runtime);
}

model SearchResourcesRequest {
  filter?: [ 
    {
      key?: string(name='Key', example='RegionId'),
      matchType?: string(name='MatchType', example='Equals'),
      value?: [ string ](name='Value'),
    }
  ](name='Filter'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='eyJzZWFyY2hBZnRlcnMiOlsiMTAwMTU2Nzk4MTU1OSJd****'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmzawhxxc****'),
  sortCriterion?: {
    key?: string(name='Key', example='CreateTime'),
    order?: string(name='Order', example='ASC'),
  }(name='SortCriterion'),
}

model SearchResourcesResponseBody = {
  filters?: [ 
    {
      key?: string(name='Key', example='RegionId'),
      matchType?: string(name='MatchType', example='Equals'),
      values?: [ string ](name='Values'),
    }
  ](name='Filters'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='eyJzZWFyY2hBZnRlcnMiOlsiMTAwMTU2Nzk4MTU1OSJd****'),
  requestId?: string(name='RequestId', example='D696E6EF-3A6D-5770-801E-4982081FE4D0'),
  resources?: [ 
    {
      accountId?: string(name='AccountId', example='151266687691****'),
      createTime?: string(name='CreateTime', example='2021-06-30T09:20:08Z'),
      ipAddresses?: [ string ](name='IpAddresses'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmzawhxxc****'),
      resourceId?: string(name='ResourceId', example='vtb-bp11lbh452fr8940s****'),
      resourceName?: string(name='ResourceName', example='group1'),
      resourceType?: string(name='ResourceType', example='ACS::VPC::RouteTable'),
      tags?: [ 
        {
          key?: string(name='Key', example='test_key'),
          value?: string(name='Value', example='test_value'),
        }
      ](name='Tags'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-k'),
    }
  ](name='Resources'),
}

model SearchResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SearchResourcesResponseBody(name='body'),
}

async function searchResourcesWithOptions(request: SearchResourcesRequest, runtime: Util.RuntimeOptions): SearchResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.sortCriterion)) {
    query['SortCriterion'] = request.sortCriterion;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchResources',
    version = '2022-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function searchResources(request: SearchResourcesRequest): SearchResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchResourcesWithOptions(request, runtime);
}

