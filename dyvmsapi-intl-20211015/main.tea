/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('dyvmsapi-intl', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model BackendCallGroupRequest {
  calledNumber?: [ string ](name='CalledNumber'),
  callerIdNumber?: string(name='CallerIdNumber'),
  countryId?: string(name='CountryId'),
  ownerId?: long(name='OwnerId'),
  playTimes?: long(name='PlayTimes'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sendType?: long(name='SendType'),
  speed?: long(name='Speed'),
  taskName?: string(name='TaskName'),
  timingStart?: string(name='TimingStart'),
  ttsCode?: string(name='TtsCode'),
  voiceCode?: string(name='VoiceCode'),
  volume?: long(name='Volume'),
}

model BackendCallGroupShrinkRequest {
  calledNumberShrink?: string(name='CalledNumber'),
  callerIdNumber?: string(name='CallerIdNumber'),
  countryId?: string(name='CountryId'),
  ownerId?: long(name='OwnerId'),
  playTimes?: long(name='PlayTimes'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sendType?: long(name='SendType'),
  speed?: long(name='Speed'),
  taskName?: string(name='TaskName'),
  timingStart?: string(name='TimingStart'),
  ttsCode?: string(name='TtsCode'),
  voiceCode?: string(name='VoiceCode'),
  volume?: long(name='Volume'),
}

model BackendCallGroupResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model BackendCallGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BackendCallGroupResponseBody(name='body'),
}

async function backendCallGroupWithOptions(tmpReq: BackendCallGroupRequest, runtime: Util.RuntimeOptions): BackendCallGroupResponse {
  Util.validateModel(tmpReq);
  var request = new BackendCallGroupShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.calledNumber)) {
    request.calledNumberShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.calledNumber, 'CalledNumber', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.calledNumberShrink)) {
    query['CalledNumber'] = request.calledNumberShrink;
  }
  if (!Util.isUnset(request.callerIdNumber)) {
    query['CallerIdNumber'] = request.callerIdNumber;
  }
  if (!Util.isUnset(request.countryId)) {
    query['CountryId'] = request.countryId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.playTimes)) {
    query['PlayTimes'] = request.playTimes;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sendType)) {
    query['SendType'] = request.sendType;
  }
  if (!Util.isUnset(request.speed)) {
    query['Speed'] = request.speed;
  }
  if (!Util.isUnset(request.taskName)) {
    query['TaskName'] = request.taskName;
  }
  if (!Util.isUnset(request.timingStart)) {
    query['TimingStart'] = request.timingStart;
  }
  if (!Util.isUnset(request.ttsCode)) {
    query['TtsCode'] = request.ttsCode;
  }
  if (!Util.isUnset(request.voiceCode)) {
    query['VoiceCode'] = request.voiceCode;
  }
  if (!Util.isUnset(request.volume)) {
    query['Volume'] = request.volume;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BackendCallGroup',
    version = '2021-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function backendCallGroup(request: BackendCallGroupRequest): BackendCallGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return backendCallGroupWithOptions(request, runtime);
}

model BackendCallSignalRequest {
  calledNumber?: string(name='CalledNumber'),
  callerIdNumber?: string(name='CallerIdNumber'),
  countryId?: string(name='CountryId'),
  ownerId?: long(name='OwnerId'),
  playTimes?: long(name='PlayTimes'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  speed?: long(name='Speed'),
  ttsCode?: string(name='TtsCode'),
  ttsParam?: string(name='TtsParam'),
  volume?: long(name='Volume'),
}

model BackendCallSignalResponseBody = {
  callId?: string(name='CallId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model BackendCallSignalResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BackendCallSignalResponseBody(name='body'),
}

async function backendCallSignalWithOptions(request: BackendCallSignalRequest, runtime: Util.RuntimeOptions): BackendCallSignalResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.calledNumber)) {
    query['CalledNumber'] = request.calledNumber;
  }
  if (!Util.isUnset(request.callerIdNumber)) {
    query['CallerIdNumber'] = request.callerIdNumber;
  }
  if (!Util.isUnset(request.countryId)) {
    query['CountryId'] = request.countryId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.playTimes)) {
    query['PlayTimes'] = request.playTimes;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.speed)) {
    query['Speed'] = request.speed;
  }
  if (!Util.isUnset(request.ttsCode)) {
    query['TtsCode'] = request.ttsCode;
  }
  if (!Util.isUnset(request.ttsParam)) {
    query['TtsParam'] = request.ttsParam;
  }
  if (!Util.isUnset(request.volume)) {
    query['Volume'] = request.volume;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BackendCallSignal',
    version = '2021-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function backendCallSignal(request: BackendCallSignalRequest): BackendCallSignalResponse {
  var runtime = new Util.RuntimeOptions{};
  return backendCallSignalWithOptions(request, runtime);
}

model CancleGroupCallRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  taskId?: string(name='TaskId'),
}

model CancleGroupCallResponseBody = {
  code?: string(name='Code'),
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model CancleGroupCallResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancleGroupCallResponseBody(name='body'),
}

async function cancleGroupCallWithOptions(request: CancleGroupCallRequest, runtime: Util.RuntimeOptions): CancleGroupCallResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancleGroupCall',
    version = '2021-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancleGroupCall(request: CancleGroupCallRequest): CancleGroupCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancleGroupCallWithOptions(request, runtime);
}

model DeleteApplyNumberRecordRequest {
  applyId?: string(name='ApplyId'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteApplyNumberRecordResponseBody = {
  applyId?: string(name='ApplyId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeleteApplyNumberRecordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteApplyNumberRecordResponseBody(name='body'),
}

async function deleteApplyNumberRecordWithOptions(request: DeleteApplyNumberRecordRequest, runtime: Util.RuntimeOptions): DeleteApplyNumberRecordResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteApplyNumberRecord',
    version = '2021-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteApplyNumberRecord(request: DeleteApplyNumberRecordRequest): DeleteApplyNumberRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteApplyNumberRecordWithOptions(request, runtime);
}

model DeleteQualificationRequest {
  ownerId?: long(name='OwnerId'),
  qualificationId?: string(name='QualificationId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteQualificationResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  qualificationId?: string(name='QualificationId'),
  requestId?: string(name='RequestId'),
}

model DeleteQualificationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteQualificationResponseBody(name='body'),
}

async function deleteQualificationWithOptions(request: DeleteQualificationRequest, runtime: Util.RuntimeOptions): DeleteQualificationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.qualificationId)) {
    query['QualificationId'] = request.qualificationId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteQualification',
    version = '2021-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteQualification(request: DeleteQualificationRequest): DeleteQualificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteQualificationWithOptions(request, runtime);
}

model DeleteSipTrunkApplyRequest {
  applyId?: string(name='ApplyId'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteSipTrunkApplyResponseBody = {
  applyId?: string(name='ApplyId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeleteSipTrunkApplyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSipTrunkApplyResponseBody(name='body'),
}

async function deleteSipTrunkApplyWithOptions(request: DeleteSipTrunkApplyRequest, runtime: Util.RuntimeOptions): DeleteSipTrunkApplyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applyId)) {
    query['ApplyId'] = request.applyId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSipTrunkApply',
    version = '2021-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSipTrunkApply(request: DeleteSipTrunkApplyRequest): DeleteSipTrunkApplyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSipTrunkApplyWithOptions(request, runtime);
}

model DeleteVoiceFileRequest {
  fileId?: string(name='FileId'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteVoiceFileResponseBody = {
  code?: string(name='Code'),
  fileId?: string(name='FileId'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeleteVoiceFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteVoiceFileResponseBody(name='body'),
}

async function deleteVoiceFileWithOptions(request: DeleteVoiceFileRequest, runtime: Util.RuntimeOptions): DeleteVoiceFileResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteVoiceFile',
    version = '2021-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteVoiceFile(request: DeleteVoiceFileRequest): DeleteVoiceFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVoiceFileWithOptions(request, runtime);
}

model DeleteVoiceTtsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateId?: string(name='TemplateId'),
}

model DeleteVoiceTtsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  templateId?: string(name='TemplateId'),
}

model DeleteVoiceTtsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteVoiceTtsResponseBody(name='body'),
}

async function deleteVoiceTtsWithOptions(request: DeleteVoiceTtsRequest, runtime: Util.RuntimeOptions): DeleteVoiceTtsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteVoiceTts',
    version = '2021-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteVoiceTts(request: DeleteVoiceTtsRequest): DeleteVoiceTtsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVoiceTtsWithOptions(request, runtime);
}

model DownloadTemplateFileRequest {
  fileType?: string(name='FileType'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DownloadTemplateFileResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  url?: string(name='Url'),
}

model DownloadTemplateFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DownloadTemplateFileResponseBody(name='body'),
}

async function downloadTemplateFileWithOptions(request: DownloadTemplateFileRequest, runtime: Util.RuntimeOptions): DownloadTemplateFileResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileType)) {
    query['FileType'] = request.fileType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DownloadTemplateFile',
    version = '2021-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function downloadTemplateFile(request: DownloadTemplateFileRequest): DownloadTemplateFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return downloadTemplateFileWithOptions(request, runtime);
}

model GetIntlVoiceOpenStatusRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model GetIntlVoiceOpenStatusResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  openStatus?: boolean(name='OpenStatus'),
  requestId?: string(name='RequestId'),
}

model GetIntlVoiceOpenStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetIntlVoiceOpenStatusResponseBody(name='body'),
}

async function getIntlVoiceOpenStatusWithOptions(request: GetIntlVoiceOpenStatusRequest, runtime: Util.RuntimeOptions): GetIntlVoiceOpenStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetIntlVoiceOpenStatus',
    version = '2021-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getIntlVoiceOpenStatus(request: GetIntlVoiceOpenStatusRequest): GetIntlVoiceOpenStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getIntlVoiceOpenStatusWithOptions(request, runtime);
}

model GetOssInfoForUploadFileRequest {
  bizType?: string(name='BizType'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model GetOssInfoForUploadFileResponseBody = {
  accessKeyId?: string(name='AccessKeyId'),
  expireTime?: string(name='ExpireTime'),
  host?: string(name='Host'),
  policy?: string(name='Policy'),
  requestId?: string(name='RequestId'),
  signature?: string(name='Signature'),
  startWith?: string(name='StartWith'),
}

model GetOssInfoForUploadFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOssInfoForUploadFileResponseBody(name='body'),
}

async function getOssInfoForUploadFileWithOptions(request: GetOssInfoForUploadFileRequest, runtime: Util.RuntimeOptions): GetOssInfoForUploadFileResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetOssInfoForUploadFile',
    version = '2021-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getOssInfoForUploadFile(request: GetOssInfoForUploadFileRequest): GetOssInfoForUploadFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOssInfoForUploadFileWithOptions(request, runtime);
}

model HomeStartRequest {
  businessType?: long(name='BusinessType'),
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  startTime?: string(name='StartTime'),
}

model HomeStartResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  model?: {
    cdrDrUrl?: string(name='CdrDrUrl'),
    list?: [ 
      {
        callFailed?: long(name='CallFailed'),
        callSuccess?: long(name='CallSuccess'),
        callTotal?: long(name='CallTotal'),
        date?: string(name='Date'),
        successRate?: long(name='SuccessRate'),
      }
    ](name='List'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
}

model HomeStartResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: HomeStartResponseBody(name='body'),
}

async function homeStartWithOptions(request: HomeStartRequest, runtime: Util.RuntimeOptions): HomeStartResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.businessType)) {
    query['BusinessType'] = request.businessType;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HomeStart',
    version = '2021-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function homeStart(request: HomeStartRequest): HomeStartResponse {
  var runtime = new Util.RuntimeOptions{};
  return homeStartWithOptions(request, runtime);
}

model ListApplyNumberRecordRequest {
  countryId?: string(name='CountryId'),
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  startTime?: string(name='StartTime'),
  status?: long(name='Status'),
}

model ListApplyNumberRecordResponseBody = {
  code?: string(name='Code'),
  list?: [ 
    {
      amount?: string(name='Amount'),
      applyId?: string(name='ApplyId'),
      applyNote?: string(name='ApplyNote'),
      auditNote?: string(name='AuditNote'),
      auditTs?: string(name='AuditTs'),
      batchIndex?: long(name='BatchIndex'),
      commitTs?: string(name='CommitTs'),
      countryId?: string(name='CountryId'),
      inboundConcurrency?: long(name='InboundConcurrency'),
      outboundConcurrency?: long(name='OutboundConcurrency'),
      phoneType?: long(name='PhoneType'),
      qualificationId?: string(name='QualificationId'),
      scene?: string(name='Scene'),
      status?: long(name='Status'),
      support?: long(name='Support'),
      updateTs?: string(name='UpdateTs'),
    }
  ](name='List'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model ListApplyNumberRecordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListApplyNumberRecordResponseBody(name='body'),
}

async function listApplyNumberRecordWithOptions(request: ListApplyNumberRecordRequest, runtime: Util.RuntimeOptions): ListApplyNumberRecordResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListApplyNumberRecord',
    version = '2021-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listApplyNumberRecord(request: ListApplyNumberRecordRequest): ListApplyNumberRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return listApplyNumberRecordWithOptions(request, runtime);
}

model ListNumberRequest {
  applyId?: string(name='ApplyId'),
  countryId?: string(name='CountryId'),
  number?: string(name='Number'),
  numberName?: string(name='NumberName'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  phoneType?: long(name='PhoneType'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ListNumberResponseBody = {
  code?: string(name='Code'),
  list?: [ 
    {
      applyId?: string(name='ApplyId'),
      countryId?: string(name='CountryId'),
      disableTs?: string(name='DisableTs'),
      inboundConcurrency?: long(name='InboundConcurrency'),
      number?: string(name='Number'),
      numberName?: string(name='NumberName'),
      outboundConcurrency?: long(name='OutboundConcurrency'),
      phoneType?: long(name='PhoneType'),
      qualificationId?: string(name='QualificationId'),
      resourceId?: string(name='ResourceId'),
      status?: long(name='Status'),
      supplierId?: string(name='SupplierId'),
      support?: long(name='Support'),
      updateTs?: string(name='UpdateTs'),
    }
  ](name='List'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model ListNumberResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListNumberResponseBody(name='body'),
}

async function listNumberWithOptions(request: ListNumberRequest, runtime: Util.RuntimeOptions): ListNumberResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applyId)) {
    query['ApplyId'] = request.applyId;
  }
  if (!Util.isUnset(request.countryId)) {
    query['CountryId'] = request.countryId;
  }
  if (!Util.isUnset(request.number)) {
    query['Number'] = request.number;
  }
  if (!Util.isUnset(request.numberName)) {
    query['NumberName'] = request.numberName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.phoneType)) {
    query['PhoneType'] = request.phoneType;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListNumber',
    version = '2021-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listNumber(request: ListNumberRequest): ListNumberResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNumberWithOptions(request, runtime);
}

model ListQualificationRequest {
  companyName?: string(name='CompanyName'),
  contactPhone?: string(name='ContactPhone'),
  countryId?: string(name='CountryId'),
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  startTime?: string(name='StartTime'),
  status?: long(name='Status'),
}

model ListQualificationResponseBody = {
  code?: string(name='Code'),
  list?: [ 
    {
      address?: string(name='Address'),
      auditRemark?: string(name='AuditRemark'),
      auditTs?: string(name='AuditTs'),
      businessLicenseFileKey?: string(name='BusinessLicenseFileKey'),
      commitTs?: string(name='CommitTs'),
      companyName?: string(name='CompanyName'),
      contactEmail?: string(name='ContactEmail'),
      contactName?: string(name='ContactName'),
      contactPhone?: string(name='ContactPhone'),
      countryId?: string(name='CountryId'),
      legalId?: string(name='LegalId'),
      legalLicenseFileKey?: string(name='LegalLicenseFileKey'),
      legalName?: string(name='LegalName'),
      networkAccessFileKey?: string(name='NetworkAccessFileKey'),
      qualificationId?: string(name='QualificationId'),
      status?: long(name='Status'),
      unifiedCode?: string(name='UnifiedCode'),
      updateTs?: string(name='UpdateTs'),
    }
  ](name='List'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model ListQualificationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListQualificationResponseBody(name='body'),
}

async function listQualificationWithOptions(request: ListQualificationRequest, runtime: Util.RuntimeOptions): ListQualificationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.companyName)) {
    query['CompanyName'] = request.companyName;
  }
  if (!Util.isUnset(request.contactPhone)) {
    query['ContactPhone'] = request.contactPhone;
  }
  if (!Util.isUnset(request.countryId)) {
    query['CountryId'] = request.countryId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListQualification',
    version = '2021-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listQualification(request: ListQualificationRequest): ListQualificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return listQualificationWithOptions(request, runtime);
}

model ListReceiptRequest {
  businessType?: int32(name='BusinessType'),
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  startTime?: string(name='StartTime'),
}

model ListReceiptResponseBody = {
  code?: string(name='Code'),
  list?: [ 
    {
      callFailedCount?: int32(name='CallFailedCount'),
      callSuccessCount?: int32(name='CallSuccessCount'),
      callTotalCount?: int32(name='CallTotalCount'),
      date?: string(name='Date'),
    }
  ](name='List'),
  message?: string(name='Message'),
  receiptUrl?: string(name='ReceiptUrl'),
  requestId?: string(name='RequestId'),
}

model ListReceiptResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListReceiptResponseBody(name='body'),
}

async function listReceiptWithOptions(request: ListReceiptRequest, runtime: Util.RuntimeOptions): ListReceiptResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.businessType)) {
    query['BusinessType'] = request.businessType;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListReceipt',
    version = '2021-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listReceipt(request: ListReceiptRequest): ListReceiptResponse {
  var runtime = new Util.RuntimeOptions{};
  return listReceiptWithOptions(request, runtime);
}

model ListSipTrunkRequest {
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  startTime?: string(name='StartTime'),
  status?: long(name='Status'),
}

model ListSipTrunkResponseBody = {
  code?: string(name='Code'),
  list?: [ 
    {
      applyId?: string(name='ApplyId'),
      applyNote?: string(name='ApplyNote'),
      auditNote?: string(name='AuditNote'),
      auditTs?: string(name='AuditTs'),
      commitTs?: string(name='CommitTs'),
      countryId?: string(name='CountryId'),
      inboundIpPorts?: string(name='InboundIpPorts'),
      outboundIps?: string(name='OutboundIps'),
      qualificationId?: string(name='QualificationId'),
      scene?: string(name='Scene'),
      status?: string(name='Status'),
      updateTs?: string(name='UpdateTs'),
      userUuid?: string(name='UserUuid'),
    }
  ](name='List'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  total?: string(name='Total'),
}

model ListSipTrunkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSipTrunkResponseBody(name='body'),
}

async function listSipTrunkWithOptions(request: ListSipTrunkRequest, runtime: Util.RuntimeOptions): ListSipTrunkResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSipTrunk',
    version = '2021-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSipTrunk(request: ListSipTrunkRequest): ListSipTrunkResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSipTrunkWithOptions(request, runtime);
}

model ListSipTrunkDetailRequest {
  calledNumber?: string(name='CalledNumber'),
  callingNumber?: string(name='CallingNumber'),
  countryId?: string(name='CountryId'),
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  startTime?: string(name='StartTime'),
}

model ListSipTrunkDetailResponseBody = {
  code?: string(name='Code'),
  list?: [ 
    {
      answerTime?: string(name='AnswerTime'),
      answered?: long(name='Answered'),
      busiType?: string(name='BusiType'),
      callEndTime?: string(name='CallEndTime'),
      callType?: string(name='CallType'),
      calledIp?: string(name='CalledIp'),
      calledNum?: string(name='CalledNum'),
      calledNumRegion?: string(name='CalledNumRegion'),
      calledNumType?: string(name='CalledNumType'),
      callerDisplay?: string(name='CallerDisplay'),
      callerIp?: string(name='CallerIp'),
      callerNum?: string(name='CallerNum'),
      callerNumRegion?: string(name='CallerNumRegion'),
      callerNumType?: string(name='CallerNumType'),
      duration?: long(name='Duration'),
      hangup?: long(name='Hangup'),
      hangupType?: long(name='HangupType'),
      ivnCliType?: string(name='IvnCliType'),
      recordUrl?: string(name='RecordUrl'),
      startTime?: string(name='StartTime'),
      userUuid?: string(name='UserUuid'),
      uuid?: string(name='Uuid'),
    }
  ](name='List'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model ListSipTrunkDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSipTrunkDetailResponseBody(name='body'),
}

async function listSipTrunkDetailWithOptions(request: ListSipTrunkDetailRequest, runtime: Util.RuntimeOptions): ListSipTrunkDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.calledNumber)) {
    query['CalledNumber'] = request.calledNumber;
  }
  if (!Util.isUnset(request.callingNumber)) {
    query['CallingNumber'] = request.callingNumber;
  }
  if (!Util.isUnset(request.countryId)) {
    query['CountryId'] = request.countryId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSipTrunkDetail',
    version = '2021-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSipTrunkDetail(request: ListSipTrunkDetailRequest): ListSipTrunkDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSipTrunkDetailWithOptions(request, runtime);
}

model ListSipTrunkStatRequest {
  calledNumber?: string(name='CalledNumber'),
  callingNumber?: string(name='CallingNumber'),
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  startTime?: string(name='StartTime'),
}

model ListSipTrunkStatResponseBody = {
  code?: string(name='Code'),
  list?: [ 
    {
      answeredCalls?: long(name='AnsweredCalls'),
      answeredRate?: long(name='AnsweredRate'),
      averageDuration?: long(name='AverageDuration'),
      billing?: long(name='Billing'),
      calledNumber?: string(name='CalledNumber'),
      callingNumber?: string(name='CallingNumber'),
      failedCalls?: long(name='FailedCalls'),
      totalCalls?: long(name='TotalCalls'),
      totalDuration?: long(name='TotalDuration'),
    }
  ](name='List'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  total?: string(name='Total'),
}

model ListSipTrunkStatResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSipTrunkStatResponseBody(name='body'),
}

async function listSipTrunkStatWithOptions(request: ListSipTrunkStatRequest, runtime: Util.RuntimeOptions): ListSipTrunkStatResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.calledNumber)) {
    query['CalledNumber'] = request.calledNumber;
  }
  if (!Util.isUnset(request.callingNumber)) {
    query['CallingNumber'] = request.callingNumber;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSipTrunkStat',
    version = '2021-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSipTrunkStat(request: ListSipTrunkStatRequest): ListSipTrunkStatResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSipTrunkStatWithOptions(request, runtime);
}

model ListVoiceCallRequest {
  businessType?: long(name='BusinessType'),
  callingNumber?: string(name='CallingNumber'),
  countryId?: string(name='CountryId'),
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sendType?: long(name='SendType'),
  startTime?: string(name='StartTime'),
  status?: long(name='Status'),
  taskId?: string(name='TaskId'),
  taskName?: string(name='TaskName'),
}

model ListVoiceCallResponseBody = {
  code?: string(name='Code'),
  list?: [ 
    {
      answeredCalls?: long(name='AnsweredCalls'),
      businessType?: long(name='BusinessType'),
      calledCalls?: long(name='CalledCalls'),
      callingNumber?: string(name='CallingNumber'),
      commitTs?: string(name='CommitTs'),
      countryId?: string(name='CountryId'),
      failedCalls?: long(name='FailedCalls'),
      groupCallType?: long(name='GroupCallType'),
      requestId?: string(name='RequestId'),
      sendType?: long(name='SendType'),
      status?: string(name='Status'),
      taskId?: string(name='TaskId'),
      taskName?: string(name='TaskName'),
      templateContent?: string(name='TemplateContent'),
      templateId?: string(name='TemplateId'),
      tickerTs?: string(name='TickerTs'),
      totalCalls?: long(name='TotalCalls'),
      totalDuration?: long(name='TotalDuration'),
      userUuid?: string(name='UserUuid'),
    }
  ](name='List'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model ListVoiceCallResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListVoiceCallResponseBody(name='body'),
}

async function listVoiceCallWithOptions(request: ListVoiceCallRequest, runtime: Util.RuntimeOptions): ListVoiceCallResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.businessType)) {
    query['BusinessType'] = request.businessType;
  }
  if (!Util.isUnset(request.callingNumber)) {
    query['CallingNumber'] = request.callingNumber;
  }
  if (!Util.isUnset(request.countryId)) {
    query['CountryId'] = request.countryId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sendType)) {
    query['SendType'] = request.sendType;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.taskName)) {
    query['TaskName'] = request.taskName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListVoiceCall',
    version = '2021-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listVoiceCall(request: ListVoiceCallRequest): ListVoiceCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVoiceCallWithOptions(request, runtime);
}

model ListVoiceCallDetailRequest {
  businessType?: long(name='BusinessType'),
  calledNumber?: string(name='CalledNumber'),
  callingNumber?: string(name='CallingNumber'),
  countryId?: string(name='CountryId'),
  endTime?: string(name='EndTime'),
  hangupType?: long(name='HangupType'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  startTime?: string(name='StartTime'),
  status?: long(name='Status'),
  taskId?: string(name='TaskId'),
  taskName?: string(name='TaskName'),
}

model ListVoiceCallDetailResponseBody = {
  code?: string(name='Code'),
  list?: [ 
    {
      billing?: long(name='Billing'),
      businessType?: long(name='BusinessType'),
      calledNumber?: string(name='CalledNumber'),
      callingNumber?: string(name='CallingNumber'),
      commitTs?: string(name='CommitTs'),
      countryId?: string(name='CountryId'),
      duration?: long(name='Duration'),
      endTs?: string(name='EndTs'),
      hangupType?: long(name='HangupType'),
      sendType?: long(name='SendType'),
      startTs?: string(name='StartTs'),
      status?: long(name='Status'),
      taskId?: string(name='TaskId'),
      taskName?: string(name='TaskName'),
    }
  ](name='List'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model ListVoiceCallDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListVoiceCallDetailResponseBody(name='body'),
}

async function listVoiceCallDetailWithOptions(request: ListVoiceCallDetailRequest, runtime: Util.RuntimeOptions): ListVoiceCallDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.businessType)) {
    query['BusinessType'] = request.businessType;
  }
  if (!Util.isUnset(request.calledNumber)) {
    query['CalledNumber'] = request.calledNumber;
  }
  if (!Util.isUnset(request.callingNumber)) {
    query['CallingNumber'] = request.callingNumber;
  }
  if (!Util.isUnset(request.countryId)) {
    query['CountryId'] = request.countryId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.hangupType)) {
    query['HangupType'] = request.hangupType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.taskName)) {
    query['TaskName'] = request.taskName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListVoiceCallDetail',
    version = '2021-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listVoiceCallDetail(request: ListVoiceCallDetailRequest): ListVoiceCallDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVoiceCallDetailWithOptions(request, runtime);
}

model ListVoiceCallStatRequest {
  businessType?: long(name='BusinessType'),
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  startTime?: string(name='StartTime'),
  taskName?: string(name='TaskName'),
}

model ListVoiceCallStatResponseBody = {
  code?: string(name='Code'),
  list?: [ 
    {
      answeredCalls?: long(name='AnsweredCalls'),
      answeredRate?: long(name='AnsweredRate'),
      averageDuration?: long(name='AverageDuration'),
      billing?: long(name='Billing'),
      businessType?: long(name='BusinessType'),
      failedCalls?: long(name='FailedCalls'),
      totalCalls?: long(name='TotalCalls'),
      totalDuration?: long(name='TotalDuration'),
    }
  ](name='List'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model ListVoiceCallStatResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListVoiceCallStatResponseBody(name='body'),
}

async function listVoiceCallStatWithOptions(request: ListVoiceCallStatRequest, runtime: Util.RuntimeOptions): ListVoiceCallStatResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.businessType)) {
    query['BusinessType'] = request.businessType;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.taskName)) {
    query['TaskName'] = request.taskName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListVoiceCallStat',
    version = '2021-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listVoiceCallStat(request: ListVoiceCallStatRequest): ListVoiceCallStatResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVoiceCallStatWithOptions(request, runtime);
}

model ListVoiceFileRequest {
  countryId?: string(name='CountryId'),
  fileName?: string(name='FileName'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: long(name='Status'),
}

model ListVoiceFileResponseBody = {
  code?: string(name='Code'),
  list?: [ 
    {
      auditRemark?: string(name='AuditRemark'),
      commitTs?: string(name='CommitTs'),
      countryId?: string(name='CountryId'),
      fileId?: string(name='FileId'),
      fileKey?: string(name='FileKey'),
      fileName?: string(name='FileName'),
      fileUrl?: string(name='FileUrl'),
      qualificationId?: string(name='QualificationId'),
      status?: long(name='Status'),
      updateTs?: string(name='UpdateTs'),
    }
  ](name='List'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model ListVoiceFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListVoiceFileResponseBody(name='body'),
}

async function listVoiceFileWithOptions(request: ListVoiceFileRequest, runtime: Util.RuntimeOptions): ListVoiceFileResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.countryId)) {
    query['CountryId'] = request.countryId;
  }
  if (!Util.isUnset(request.fileName)) {
    query['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListVoiceFile',
    version = '2021-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listVoiceFile(request: ListVoiceFileRequest): ListVoiceFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVoiceFileWithOptions(request, runtime);
}

model ListVoiceTtsRequest {
  countryId?: string(name='CountryId'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: long(name='Status'),
  templateName?: string(name='TemplateName'),
}

model ListVoiceTtsResponseBody = {
  code?: string(name='Code'),
  list?: [ 
    {
      auditBy?: string(name='AuditBy'),
      auditRemark?: string(name='AuditRemark'),
      auditTs?: string(name='AuditTs'),
      commitTs?: string(name='CommitTs'),
      countryId?: string(name='CountryId'),
      language?: string(name='Language'),
      qualificationId?: string(name='QualificationId'),
      speed?: int32(name='Speed'),
      status?: int32(name='Status'),
      templateId?: string(name='TemplateId'),
      templateName?: string(name='TemplateName'),
      templateText?: string(name='TemplateText'),
      updateTs?: string(name='UpdateTs'),
      userUuid?: string(name='UserUuid'),
    }
  ](name='List'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model ListVoiceTtsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListVoiceTtsResponseBody(name='body'),
}

async function listVoiceTtsWithOptions(request: ListVoiceTtsRequest, runtime: Util.RuntimeOptions): ListVoiceTtsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.countryId)) {
    query['CountryId'] = request.countryId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.templateName)) {
    query['TemplateName'] = request.templateName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListVoiceTts',
    version = '2021-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listVoiceTts(request: ListVoiceTtsRequest): ListVoiceTtsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVoiceTtsWithOptions(request, runtime);
}

model NumberEnableRequest {
  enable?: boolean(name='Enable'),
  number?: string(name='Number'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model NumberEnableResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model NumberEnableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: NumberEnableResponseBody(name='body'),
}

async function numberEnableWithOptions(request: NumberEnableRequest, runtime: Util.RuntimeOptions): NumberEnableResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'NumberEnable',
    version = '2021-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function numberEnable(request: NumberEnableRequest): NumberEnableResponse {
  var runtime = new Util.RuntimeOptions{};
  return numberEnableWithOptions(request, runtime);
}

model OpenIntlVoiceServiceRequest {
  env?: string(name='Env'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model OpenIntlVoiceServiceResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: string(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model OpenIntlVoiceServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OpenIntlVoiceServiceResponseBody(name='body'),
}

async function openIntlVoiceServiceWithOptions(request: OpenIntlVoiceServiceRequest, runtime: Util.RuntimeOptions): OpenIntlVoiceServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.env)) {
    query['Env'] = request.env;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OpenIntlVoiceService',
    version = '2021-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function openIntlVoiceService(request: OpenIntlVoiceServiceRequest): OpenIntlVoiceServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return openIntlVoiceServiceWithOptions(request, runtime);
}

model OswTest1Request {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model OswTest1ResponseBody = {
}

model OswTest1Response = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OswTest1ResponseBody(name='body'),
}

async function oswTest1WithOptions(request: OswTest1Request, runtime: Util.RuntimeOptions): OswTest1Response {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OswTest1',
    version = '2021-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function oswTest1(request: OswTest1Request): OswTest1Response {
  var runtime = new Util.RuntimeOptions{};
  return oswTest1WithOptions(request, runtime);
}

model QueryFileOssUrlRequest {
  bizType?: string(name='BizType'),
  fileKey?: string(name='FileKey'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryFileOssUrlResponseBody = {
  accessKeyId?: string(name='AccessKeyId'),
  requestId?: string(name='RequestId'),
  url?: string(name='Url'),
}

model QueryFileOssUrlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryFileOssUrlResponseBody(name='body'),
}

async function queryFileOssUrlWithOptions(request: QueryFileOssUrlRequest, runtime: Util.RuntimeOptions): QueryFileOssUrlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!Util.isUnset(request.fileKey)) {
    query['FileKey'] = request.fileKey;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryFileOssUrl',
    version = '2021-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryFileOssUrl(request: QueryFileOssUrlRequest): QueryFileOssUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryFileOssUrlWithOptions(request, runtime);
}

model QueryHomeStatRequest {
  businessType?: long(name='BusinessType'),
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  startTime?: string(name='StartTime'),
}

model QueryHomeStatResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  model?: {
    cdrDrUrl?: string(name='CdrDrUrl'),
    list?: [ 
      {
        callFailed?: long(name='CallFailed'),
        callSuccess?: long(name='CallSuccess'),
        callTotal?: long(name='CallTotal'),
        date?: string(name='Date'),
        successRate?: long(name='SuccessRate'),
      }
    ](name='List'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
}

model QueryHomeStatResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryHomeStatResponseBody(name='body'),
}

async function queryHomeStatWithOptions(request: QueryHomeStatRequest, runtime: Util.RuntimeOptions): QueryHomeStatResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.businessType)) {
    query['BusinessType'] = request.businessType;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryHomeStat',
    version = '2021-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryHomeStat(request: QueryHomeStatRequest): QueryHomeStatResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryHomeStatWithOptions(request, runtime);
}

model QueryRecordingEnableRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryRecordingEnableResponseBody = {
  code?: string(name='Code'),
  enable?: boolean(name='Enable'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model QueryRecordingEnableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryRecordingEnableResponseBody(name='body'),
}

async function queryRecordingEnableWithOptions(request: QueryRecordingEnableRequest, runtime: Util.RuntimeOptions): QueryRecordingEnableResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryRecordingEnable',
    version = '2021-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryRecordingEnable(request: QueryRecordingEnableRequest): QueryRecordingEnableResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRecordingEnableWithOptions(request, runtime);
}

model QueryServiceEnableRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryServiceEnableResponseBody = {
  code?: string(name='Code'),
  enable?: boolean(name='Enable'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model QueryServiceEnableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryServiceEnableResponseBody(name='body'),
}

async function queryServiceEnableWithOptions(request: QueryServiceEnableRequest, runtime: Util.RuntimeOptions): QueryServiceEnableResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryServiceEnable',
    version = '2021-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryServiceEnable(request: QueryServiceEnableRequest): QueryServiceEnableResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryServiceEnableWithOptions(request, runtime);
}

model RecordingEnableRequest {
  enable?: boolean(name='Enable'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model RecordingEnableResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecordingEnableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecordingEnableResponseBody(name='body'),
}

async function recordingEnableWithOptions(request: RecordingEnableRequest, runtime: Util.RuntimeOptions): RecordingEnableResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RecordingEnable',
    version = '2021-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recordingEnable(request: RecordingEnableRequest): RecordingEnableResponse {
  var runtime = new Util.RuntimeOptions{};
  return recordingEnableWithOptions(request, runtime);
}

model SetReceiptUrlRequest {
  cdrDrUrl?: string(name='CdrDrUrl'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model SetReceiptUrlResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model SetReceiptUrlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetReceiptUrlResponseBody(name='body'),
}

async function setReceiptUrlWithOptions(request: SetReceiptUrlRequest, runtime: Util.RuntimeOptions): SetReceiptUrlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cdrDrUrl)) {
    query['CdrDrUrl'] = request.cdrDrUrl;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetReceiptUrl',
    version = '2021-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setReceiptUrl(request: SetReceiptUrlRequest): SetReceiptUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return setReceiptUrlWithOptions(request, runtime);
}

model SipTrunkDetailRequest {
  calledNumber?: string(name='CalledNumber'),
  callingNumber?: string(name='CallingNumber'),
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  startTime?: string(name='StartTime'),
}

model SipTrunkDetailResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  model?: {
    list?: [ 
      {
        answerTime?: string(name='AnswerTime'),
        answered?: long(name='Answered'),
        busiType?: string(name='BusiType'),
        callEndTime?: string(name='CallEndTime'),
        callType?: string(name='CallType'),
        calledIp?: string(name='CalledIp'),
        calledNum?: string(name='CalledNum'),
        calledNumRegion?: string(name='CalledNumRegion'),
        calledNumType?: string(name='CalledNumType'),
        callerDisplay?: string(name='CallerDisplay'),
        callerIp?: string(name='CallerIp'),
        callerNum?: string(name='CallerNum'),
        callerNumRegion?: string(name='CallerNumRegion'),
        callerNumType?: string(name='CallerNumType'),
        duration?: long(name='Duration'),
        hangup?: long(name='Hangup'),
        hangupType?: long(name='HangupType'),
        lvnCliType?: string(name='LvnCliType'),
        recordUrl?: string(name='RecordUrl'),
        startTime?: string(name='StartTime'),
        userUuid?: string(name='UserUuid'),
        uuid?: string(name='Uuid'),
      }
    ](name='List'),
    total?: long(name='Total'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
}

model SipTrunkDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SipTrunkDetailResponseBody(name='body'),
}

async function sipTrunkDetailWithOptions(request: SipTrunkDetailRequest, runtime: Util.RuntimeOptions): SipTrunkDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.calledNumber)) {
    query['CalledNumber'] = request.calledNumber;
  }
  if (!Util.isUnset(request.callingNumber)) {
    query['CallingNumber'] = request.callingNumber;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SipTrunkDetail',
    version = '2021-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sipTrunkDetail(request: SipTrunkDetailRequest): SipTrunkDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return sipTrunkDetailWithOptions(request, runtime);
}

model SubmitGroupCallRequest {
  bizType?: string(name='BizType'),
  callerIdNumber?: string(name='CallerIdNumber'),
  countryId?: string(name='CountryId'),
  fileKey?: string(name='FileKey'),
  fileName?: string(name='FileName'),
  groupCallType?: long(name='GroupCallType'),
  ownerId?: long(name='OwnerId'),
  productCode?: string(name='ProductCode'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sendType?: long(name='SendType'),
  taskName?: string(name='TaskName'),
  templateId?: string(name='TemplateId'),
  timingStart?: string(name='TimingStart'),
}

model SubmitGroupCallResponseBody = {
  code?: string(name='Code'),
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model SubmitGroupCallResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitGroupCallResponseBody(name='body'),
}

async function submitGroupCallWithOptions(request: SubmitGroupCallRequest, runtime: Util.RuntimeOptions): SubmitGroupCallResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!Util.isUnset(request.callerIdNumber)) {
    query['CallerIdNumber'] = request.callerIdNumber;
  }
  if (!Util.isUnset(request.countryId)) {
    query['CountryId'] = request.countryId;
  }
  if (!Util.isUnset(request.fileKey)) {
    query['FileKey'] = request.fileKey;
  }
  if (!Util.isUnset(request.fileName)) {
    query['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.groupCallType)) {
    query['GroupCallType'] = request.groupCallType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sendType)) {
    query['SendType'] = request.sendType;
  }
  if (!Util.isUnset(request.taskName)) {
    query['TaskName'] = request.taskName;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.timingStart)) {
    query['TimingStart'] = request.timingStart;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitGroupCall',
    version = '2021-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitGroupCall(request: SubmitGroupCallRequest): SubmitGroupCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitGroupCallWithOptions(request, runtime);
}

model SubmitNumberRequest {
  applyNote?: string(name='ApplyNote'),
  countryId?: string(name='CountryId'),
  numberList?: [ 
    {
      amount?: long(name='Amount'),
      inboundConcurrency?: long(name='InboundConcurrency'),
      outboundConcurrency?: long(name='OutboundConcurrency'),
      phoneType?: long(name='PhoneType'),
      support?: long(name='Support'),
    }
  ](name='NumberList'),
  ownerId?: long(name='OwnerId'),
  qualificationId?: string(name='QualificationId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  scene?: string(name='Scene'),
}

model SubmitNumberShrinkRequest {
  applyNote?: string(name='ApplyNote'),
  countryId?: string(name='CountryId'),
  numberListShrink?: string(name='NumberList'),
  ownerId?: long(name='OwnerId'),
  qualificationId?: string(name='QualificationId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  scene?: string(name='Scene'),
}

model SubmitNumberResponseBody = {
  applyId?: string(name='ApplyId'),
  code?: string(name='Code'),
  requestId?: string(name='RequestId'),
}

model SubmitNumberResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitNumberResponseBody(name='body'),
}

async function submitNumberWithOptions(tmpReq: SubmitNumberRequest, runtime: Util.RuntimeOptions): SubmitNumberResponse {
  Util.validateModel(tmpReq);
  var request = new SubmitNumberShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.numberList)) {
    request.numberListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.numberList, 'NumberList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.applyNote)) {
    query['ApplyNote'] = request.applyNote;
  }
  if (!Util.isUnset(request.countryId)) {
    query['CountryId'] = request.countryId;
  }
  if (!Util.isUnset(request.numberListShrink)) {
    query['NumberList'] = request.numberListShrink;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.qualificationId)) {
    query['QualificationId'] = request.qualificationId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.scene)) {
    query['Scene'] = request.scene;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitNumber',
    version = '2021-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitNumber(request: SubmitNumberRequest): SubmitNumberResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitNumberWithOptions(request, runtime);
}

model SubmitQualificationRequest {
  address?: string(name='Address'),
  businessLicenseFileKey?: string(name='BusinessLicenseFileKey'),
  companyName?: string(name='CompanyName'),
  contactEmail?: string(name='ContactEmail'),
  contactName?: string(name='ContactName'),
  contactPhone?: string(name='ContactPhone'),
  countryId?: string(name='CountryId'),
  legalId?: string(name='LegalId'),
  legalLicenseFileKey?: string(name='LegalLicenseFileKey'),
  legalName?: string(name='LegalName'),
  networkAccessFileKey?: string(name='NetworkAccessFileKey'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  unifiedCode?: string(name='UnifiedCode'),
}

model SubmitQualificationResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  qualificationId?: string(name='QualificationId'),
  requestId?: string(name='RequestId'),
}

model SubmitQualificationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitQualificationResponseBody(name='body'),
}

async function submitQualificationWithOptions(request: SubmitQualificationRequest, runtime: Util.RuntimeOptions): SubmitQualificationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.address)) {
    query['Address'] = request.address;
  }
  if (!Util.isUnset(request.businessLicenseFileKey)) {
    query['BusinessLicenseFileKey'] = request.businessLicenseFileKey;
  }
  if (!Util.isUnset(request.companyName)) {
    query['CompanyName'] = request.companyName;
  }
  if (!Util.isUnset(request.contactEmail)) {
    query['ContactEmail'] = request.contactEmail;
  }
  if (!Util.isUnset(request.contactName)) {
    query['ContactName'] = request.contactName;
  }
  if (!Util.isUnset(request.contactPhone)) {
    query['ContactPhone'] = request.contactPhone;
  }
  if (!Util.isUnset(request.countryId)) {
    query['CountryId'] = request.countryId;
  }
  if (!Util.isUnset(request.legalId)) {
    query['LegalId'] = request.legalId;
  }
  if (!Util.isUnset(request.legalLicenseFileKey)) {
    query['LegalLicenseFileKey'] = request.legalLicenseFileKey;
  }
  if (!Util.isUnset(request.legalName)) {
    query['LegalName'] = request.legalName;
  }
  if (!Util.isUnset(request.networkAccessFileKey)) {
    query['NetworkAccessFileKey'] = request.networkAccessFileKey;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.unifiedCode)) {
    query['UnifiedCode'] = request.unifiedCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitQualification',
    version = '2021-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitQualification(request: SubmitQualificationRequest): SubmitQualificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitQualificationWithOptions(request, runtime);
}

model SubmitSipTrunkRequest {
  applyNote?: string(name='ApplyNote'),
  countryId?: string(name='CountryId'),
  inboundIpPorts?: string(name='InboundIpPorts'),
  outboundIps?: string(name='OutboundIps'),
  ownerId?: long(name='OwnerId'),
  qualificationId?: string(name='QualificationId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  scene?: string(name='Scene'),
}

model SubmitSipTrunkResponseBody = {
  applyId?: string(name='ApplyId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model SubmitSipTrunkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitSipTrunkResponseBody(name='body'),
}

async function submitSipTrunkWithOptions(request: SubmitSipTrunkRequest, runtime: Util.RuntimeOptions): SubmitSipTrunkResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applyNote)) {
    query['ApplyNote'] = request.applyNote;
  }
  if (!Util.isUnset(request.countryId)) {
    query['CountryId'] = request.countryId;
  }
  if (!Util.isUnset(request.inboundIpPorts)) {
    query['InboundIpPorts'] = request.inboundIpPorts;
  }
  if (!Util.isUnset(request.outboundIps)) {
    query['OutboundIps'] = request.outboundIps;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.qualificationId)) {
    query['QualificationId'] = request.qualificationId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.scene)) {
    query['Scene'] = request.scene;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitSipTrunk',
    version = '2021-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitSipTrunk(request: SubmitSipTrunkRequest): SubmitSipTrunkResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitSipTrunkWithOptions(request, runtime);
}

model SubmitVoiceFileRequest {
  countryId?: string(name='CountryId'),
  fileKey?: string(name='FileKey'),
  fileName?: string(name='FileName'),
  fileUrl?: string(name='FileUrl'),
  ownerId?: long(name='OwnerId'),
  qualificationId?: string(name='QualificationId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model SubmitVoiceFileResponseBody = {
  applyId?: string(name='ApplyId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model SubmitVoiceFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitVoiceFileResponseBody(name='body'),
}

async function submitVoiceFileWithOptions(request: SubmitVoiceFileRequest, runtime: Util.RuntimeOptions): SubmitVoiceFileResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.countryId)) {
    query['CountryId'] = request.countryId;
  }
  if (!Util.isUnset(request.fileKey)) {
    query['FileKey'] = request.fileKey;
  }
  if (!Util.isUnset(request.fileName)) {
    query['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.fileUrl)) {
    query['FileUrl'] = request.fileUrl;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.qualificationId)) {
    query['QualificationId'] = request.qualificationId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitVoiceFile',
    version = '2021-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitVoiceFile(request: SubmitVoiceFileRequest): SubmitVoiceFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitVoiceFileWithOptions(request, runtime);
}

model SubmitVoiceTtsRequest {
  countryId?: string(name='CountryId'),
  language?: string(name='Language'),
  ownerId?: long(name='OwnerId'),
  qualificationId?: string(name='QualificationId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  speed?: long(name='Speed'),
  status?: long(name='Status'),
  templateId?: string(name='TemplateId'),
  templateName?: string(name='TemplateName'),
  templateText?: string(name='TemplateText'),
}

model SubmitVoiceTtsResponseBody = {
  applyId?: string(name='ApplyId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model SubmitVoiceTtsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitVoiceTtsResponseBody(name='body'),
}

async function submitVoiceTtsWithOptions(request: SubmitVoiceTtsRequest, runtime: Util.RuntimeOptions): SubmitVoiceTtsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.countryId)) {
    query['CountryId'] = request.countryId;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.qualificationId)) {
    query['QualificationId'] = request.qualificationId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.speed)) {
    query['Speed'] = request.speed;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.templateName)) {
    query['TemplateName'] = request.templateName;
  }
  if (!Util.isUnset(request.templateText)) {
    query['TemplateText'] = request.templateText;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitVoiceTts',
    version = '2021-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitVoiceTts(request: SubmitVoiceTtsRequest): SubmitVoiceTtsResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitVoiceTtsWithOptions(request, runtime);
}

model UpdateNumberRequest {
  note?: string(name='Note'),
  number?: string(name='Number'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model UpdateNumberResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UpdateNumberResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateNumberResponseBody(name='body'),
}

async function updateNumberWithOptions(request: UpdateNumberRequest, runtime: Util.RuntimeOptions): UpdateNumberResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.note)) {
    query['Note'] = request.note;
  }
  if (!Util.isUnset(request.number)) {
    query['Number'] = request.number;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateNumber',
    version = '2021-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateNumber(request: UpdateNumberRequest): UpdateNumberResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateNumberWithOptions(request, runtime);
}

model Test02Request {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model Test02ResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model Test02Response = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: Test02ResponseBody(name='body'),
}

async function test02WithOptions(request: Test02Request, runtime: Util.RuntimeOptions): Test02Response {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'test02',
    version = '2021-10-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function test02(request: Test02Request): Test02Response {
  var runtime = new Util.RuntimeOptions{};
  return test02WithOptions(request, runtime);
}

