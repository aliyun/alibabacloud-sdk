/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Trademark';
  @version = '2018-07-24';
  @endpointRule = 'central';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AcceptPartnerNotificationRequest {
  bizId: string(name='BizId', position='Query'),
  material?: string(name='Material', position='Query'),
  operation: string(name='Operation', position='Query'),
  remark?: string(name='Remark', position='Query'),
}

model AcceptPartnerNotificationResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AcceptPartnerNotificationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AcceptPartnerNotificationResponseBody(name='body'),
}

async function acceptPartnerNotification(request: AcceptPartnerNotificationRequest): AcceptPartnerNotificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AcceptPartnerNotification', 'POST', '/', 'json', false, 'json', request);
}

model ApplyNotaryPostRequest {
  notaryOrderId: long(name='NotaryOrderId', position='Query'),
  receiverAddress?: string(name='ReceiverAddress', position='Query'),
  receiverName?: string(name='ReceiverName', position='Query'),
  receiverPhone?: string(name='ReceiverPhone', position='Query'),
}

model ApplyNotaryPostResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ApplyNotaryPostResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApplyNotaryPostResponseBody(name='body'),
}

async function applyNotaryPost(request: ApplyNotaryPostRequest): ApplyNotaryPostResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplyNotaryPost', 'POST', '/', 'json', false, 'json', request);
}

model AskAdjudicationFileRequest {
  bizId: string(name='BizId', position='Query'),
  contactAddress: string(name='ContactAddress', position='Query'),
  contactCity?: string(name='ContactCity', position='Query'),
  contactCounty?: string(name='ContactCounty', position='Query'),
  contactDistrict?: string(name='ContactDistrict', position='Query'),
  contactName: string(name='ContactName', position='Query'),
  contactNumber: string(name='ContactNumber', position='Query'),
  contactProvince?: string(name='ContactProvince', position='Query'),
}

model AskAdjudicationFileResponseBody = {
  requestId?: string(name='RequestId'),
}

model AskAdjudicationFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AskAdjudicationFileResponseBody(name='body'),
}

async function askAdjudicationFile(request: AskAdjudicationFileRequest): AskAdjudicationFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AskAdjudicationFile', 'POST', '/', 'json', false, 'json', request);
}

model BindMaterialRequest {
  bizId?: string(name='BizId', example='trademark_register-cn-11212', position='Query'),
  legalNoticeKey?: string(name='LegalNoticeKey', position='Query'),
  loaOssKey?: string(name='LoaOssKey', example='/test/loaosskey.jpg', position='Query'),
  materialId?: string(name='MaterialId', example='11', position='Query'),
}

model BindMaterialResponseBody = {
  requestId?: string(name='RequestId', example='0F23FFEA-6FF9-42CA-9819-6D63BEFE2C2D'),
}

model BindMaterialResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BindMaterialResponseBody(name='body'),
}

async function bindMaterial(request: BindMaterialRequest): BindMaterialResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindMaterial', 'POST', '/', 'json', false, 'json', request);
}

model CancelTradeOrderRequest {
  bizId: string(name='BizId', position='Query'),
}

model CancelTradeOrderResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CancelTradeOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelTradeOrderResponseBody(name='body'),
}

async function cancelTradeOrder(request: CancelTradeOrderRequest): CancelTradeOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelTradeOrder', 'POST', '/', 'json', false, 'json', request);
}

model CheckFlsmFillRequest {
  applicantType?: string(name='ApplicantType', position='Query'),
  ossKey: string(name='OssKey', position='Query'),
  personalType?: string(name='PersonalType', position='Query'),
  wtrName?: string(name='WtrName', position='Query'),
}

model CheckFlsmFillResponseBody = {
  requestId?: string(name='RequestId'),
  tips?: string(name='Tips'),
}

model CheckFlsmFillResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckFlsmFillResponseBody(name='body'),
}

async function checkFlsmFill(request: CheckFlsmFillRequest): CheckFlsmFillResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckFlsmFill', 'POST', '/', 'json', false, 'json', request);
}

model CheckIfCollectedRequest {
  itemIdList?: string(name='ItemIdList', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  type?: int32(name='Type', position='Query'),
}

model CheckIfCollectedResponseBody = {
  currentPageNum?: int32(name='CurrentPageNum'),
  data?: {
    trademark?: [ 
    {
      id?: long(name='Id'),
      itemIdList?: string(name='ItemIdList'),
      name?: string(name='Name'),
      type?: int32(name='Type'),
    }
  ](name='Trademark')
  }(name='Data'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalItemNum?: int32(name='TotalItemNum'),
  totalPageNum?: int32(name='TotalPageNum'),
}

model CheckIfCollectedResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckIfCollectedResponseBody(name='body'),
}

async function checkIfCollected(request: CheckIfCollectedRequest): CheckIfCollectedResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckIfCollected', 'POST', '/', 'json', false, 'json', request);
}

model CheckLoaFillRequest {
  applicantType?: string(name='ApplicantType', position='Query'),
  bizType?: string(name='BizType', position='Query'),
  contactName?: string(name='ContactName', position='Query'),
  contactNumber?: string(name='ContactNumber', position='Query'),
  contactZipcode?: string(name='ContactZipcode', position='Query'),
  ossKey: string(name='OssKey', position='Query'),
  personalType?: string(name='PersonalType', position='Query'),
  principalName?: string(name='PrincipalName', position='Query'),
  type: string(name='Type', position='Query'),
  wtrName?: string(name='WtrName', position='Query'),
}

model CheckLoaFillResponseBody = {
  data?: {
    addressFill?: boolean(name='AddressFill'),
    countryFill?: boolean(name='CountryFill'),
    errorMsgs?: {
      errorMsg?: [ string ](name='ErrorMsg')
    }(name='ErrorMsgs'),
    materialNameFill?: boolean(name='MaterialNameFill'),
    nationalityFill?: boolean(name='NationalityFill'),
    stampFill?: boolean(name='StampFill'),
    templateUrl?: string(name='TemplateUrl'),
    tips?: string(name='Tips'),
    tradeMarkNameFill?: boolean(name='TradeMarkNameFill'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model CheckLoaFillResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckLoaFillResponseBody(name='body'),
}

async function checkLoaFill(request: CheckLoaFillRequest): CheckLoaFillResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckLoaFill', 'POST', '/', 'json', false, 'json', request);
}

model CheckTrademarkIconRequest {
  eventSceneType?: int32(name='EventSceneType', minimum=1, maximum=15, position='Query'),
  trademarkIconOssKey: string(name='TrademarkIconOssKey', position='Query'),
}

model CheckTrademarkIconResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model CheckTrademarkIconResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckTrademarkIconResponseBody(name='body'),
}

async function checkTrademarkIcon(request: CheckTrademarkIconRequest): CheckTrademarkIconResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckTrademarkIcon', 'POST', '/', 'json', false, 'json', request);
}

model CheckTrademarkOrderRequest {
  agreementId?: string(name='AgreementId', position='Query'),
  bizId?: string(name='BizId', position='Query'),
  channel?: string(name='Channel', position='Query'),
  isBlackIcon?: boolean(name='IsBlackIcon', position='Query'),
  loaOssKey?: string(name='LoaOssKey', position='Query'),
  logoGoodsId?: string(name='LogoGoodsId', position='Query'),
  materialId?: string(name='MaterialId', position='Query'),
  orderData?: string(name='OrderData', position='Query'),
  partnerCode?: string(name='PartnerCode', position='Query'),
  phoneNum?: string(name='PhoneNum', position='Query'),
  realUserName?: string(name='RealUserName', position='Query'),
  registerName?: string(name='RegisterName', position='Query'),
  registerNumber?: string(name='RegisterNumber', position='Query'),
  renewInfoId?: string(name='RenewInfoId', position='Query'),
  rootCode?: string(name='RootCode', position='Query'),
  tmComment?: string(name='TmComment', position='Query'),
  tmIcon?: string(name='TmIcon', position='Query'),
  tmName: string(name='TmName', position='Query'),
  tmNameType?: string(name='TmNameType', position='Query'),
  type?: int32(name='Type', position='Query'),
  uid?: string(name='Uid', position='Query'),
  userId: long(name='UserId', position='Query'),
}

model CheckTrademarkOrderResponseBody = {
  data?: map[string]any(name='Data'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CheckTrademarkOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckTrademarkOrderResponseBody(name='body'),
}

async function checkTrademarkOrder(request: CheckTrademarkOrderRequest): CheckTrademarkOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckTrademarkOrder', 'POST', '/', 'json', false, 'json', request);
}

model CombineLoaRequest {
  address?: string(name='Address', position='Query'),
  applicantType?: string(name='ApplicantType', position='Query'),
  contactName?: string(name='ContactName', position='Query'),
  contactPhone?: string(name='ContactPhone', position='Query'),
  contactPostcode?: string(name='ContactPostcode', position='Query'),
  materialId?: string(name='MaterialId', example='12', position='Query'),
  materialName?: string(name='MaterialName', position='Query'),
  nationality?: string(name='Nationality', position='Query'),
  personalType?: string(name='PersonalType', position='Query'),
  principalName?: int32(name='PrincipalName', position='Query'),
  tmNumber?: string(name='TmNumber', position='Query'),
  tmProduceType?: string(name='TmProduceType', example='1', position='Query'),
  trademarkName?: string(name='TrademarkName', position='Query'),
}

model CombineLoaResponseBody = {
  requestId?: string(name='RequestId', example='166BC359-A3D8-4287-BC39-56A144A1583A'),
  templateCombineUrl?: string(name='TemplateCombineUrl', example='https://trademark-loa.oss-cn-beijing.aliyuncs.com/usertrademark/1219541161213057_CD0D64DFC8D37DB2658A5BEA93BF480E.jpg?Expires=1545707150&OSSAccessKeyId=hObpgEXoca42qH3V&Signature=idfmwfKdGSha9PP3IPn2KCwhycM%3D'),
}

model CombineLoaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CombineLoaResponseBody(name='body'),
}

async function combineLoa(request: CombineLoaRequest): CombineLoaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CombineLoa', 'POST', '/', 'json', false, 'json', request);
}

model CombineWTSRequest {
  address?: string(name='Address', position='Query'),
  contact?: string(name='Contact', position='Query'),
  contactAddressPost?: string(name='ContactAddressPost', position='Query'),
  contactMobile?: string(name='ContactMobile', position='Query'),
  materialId?: string(name='MaterialId', position='Query'),
  materialName?: string(name='MaterialName', position='Query'),
  nationality?: string(name='Nationality', position='Query'),
  principalName?: string(name='PrincipalName', position='Query'),
  tmNum?: string(name='TmNum', position='Query'),
  tmProduceType?: string(name='TmProduceType', position='Query'),
  trademarkName?: string(name='TrademarkName', position='Query'),
  wtsType?: string(name='WtsType', position='Query'),
}

model CombineWTSResponseBody = {
  requestId?: string(name='RequestId'),
  templateCombineUrl?: string(name='TemplateCombineUrl'),
}

model CombineWTSResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CombineWTSResponseBody(name='body'),
}

async function combineWTS(request: CombineWTSRequest): CombineWTSResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CombineWTS', 'POST', '/', 'json', false, 'json', request);
}

model ComplementIntentionUserIdRequest {
  aliyunKp?: string(name='AliyunKp', position='Query'),
  bid?: string(name='Bid', position='Query'),
  bizId: string(name='BizId', position='Body'),
  callerParentId?: long(name='CallerParentId', position='Query'),
  callerType?: string(name='CallerType', position='Query'),
  complementUserId: string(name='ComplementUserId', position='Body'),
  type?: int32(name='Type', position='Query'),
}

model ComplementIntentionUserIdResponseBody = {
  requestId?: string(name='RequestId'),
}

model ComplementIntentionUserIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ComplementIntentionUserIdResponseBody(name='body'),
}

async function complementIntentionUserId(request: ComplementIntentionUserIdRequest): ComplementIntentionUserIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ComplementIntentionUserId', 'POST', '/', 'json', true, 'form', request);
}

model ConfirmAdditionalMaterialRequest {
  bizId: string(name='BizId', position='Query'),
  note?: string(name='Note', position='Query'),
}

model ConfirmAdditionalMaterialResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ConfirmAdditionalMaterialResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConfirmAdditionalMaterialResponseBody(name='body'),
}

async function confirmAdditionalMaterial(request: ConfirmAdditionalMaterialRequest): ConfirmAdditionalMaterialResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfirmAdditionalMaterial', 'POST', '/', 'json', false, 'json', request);
}

model ConfirmApplicantRequest {
  bizId: string(name='BizId', position='Query'),
  note?: string(name='Note', position='Query'),
}

model ConfirmApplicantResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ConfirmApplicantResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConfirmApplicantResponseBody(name='body'),
}

async function confirmApplicant(request: ConfirmApplicantRequest): ConfirmApplicantResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfirmApplicant', 'POST', '/', 'json', false, 'json', request);
}

model ConfirmDissentOriginalRequest {
  bizId: string(name='BizId', position='Query'),
  contactAddress: string(name='ContactAddress', position='Query'),
  contactCity?: string(name='ContactCity', position='Query'),
  contactCounty?: string(name='ContactCounty', position='Query'),
  contactDistrict?: string(name='ContactDistrict', position='Query'),
  contactName: string(name='ContactName', position='Query'),
  contactNumber: string(name='ContactNumber', position='Query'),
  contactProvince?: string(name='ContactProvince', position='Query'),
  operateType?: string(name='OperateType', position='Query'),
}

model ConfirmDissentOriginalResponseBody = {
  requestId?: string(name='RequestId'),
}

model ConfirmDissentOriginalResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConfirmDissentOriginalResponseBody(name='body'),
}

async function confirmDissentOriginal(request: ConfirmDissentOriginalRequest): ConfirmDissentOriginalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfirmDissentOriginal', 'POST', '/', 'json', false, 'json', request);
}

model ConvertImageToGrayRequest {
  ossKey: string(name='OssKey', position='Query'),
}

model ConvertImageToGrayResponseBody = {
  requestId?: string(name='RequestId'),
  signatureUrl?: string(name='SignatureUrl'),
}

model ConvertImageToGrayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConvertImageToGrayResponseBody(name='body'),
}

async function convertImageToGray(request: ConvertImageToGrayRequest): ConvertImageToGrayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConvertImageToGray', 'POST', '/', 'json', false, 'json', request);
}

model CopyApplicantRequest {
  id: long(name='Id', position='Query'),
}

model CopyApplicantResponseBody = {
  id?: long(name='Id'),
  requestId?: string(name='RequestId'),
}

model CopyApplicantResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CopyApplicantResponseBody(name='body'),
}

async function copyApplicant(request: CopyApplicantRequest): CopyApplicantResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CopyApplicant', 'POST', '/', 'json', false, 'json', request);
}

model CreateIntentionOrderRequest {
  channel?: string(name='Channel', position='Query'),
  intentionBizId?: string(name='IntentionBizId', position='Query'),
}

model CreateIntentionOrderResponseBody = {
  data?: {
    orderIds?: [ string ](name='OrderIds')
  }(name='Data'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateIntentionOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateIntentionOrderResponseBody(name='body'),
}

async function createIntentionOrder(request: CreateIntentionOrderRequest): CreateIntentionOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateIntentionOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreateIntentionOrderGeneratingPayRequest {
  channel?: string(name='Channel', position='Query'),
  intentionBizId?: string(name='IntentionBizId', position='Query'),
  paymentCallback?: string(name='PaymentCallback', position='Query'),
}

model CreateIntentionOrderGeneratingPayResponseBody = {
  errorMsg?: string(name='ErrorMsg'),
  orderIds?: [ long ](name='OrderIds'),
  payUrl?: string(name='PayUrl'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateIntentionOrderGeneratingPayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateIntentionOrderGeneratingPayResponseBody(name='body'),
}

async function createIntentionOrderGeneratingPay(request: CreateIntentionOrderGeneratingPayRequest): CreateIntentionOrderGeneratingPayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateIntentionOrderGeneratingPay', 'POST', '/', 'json', false, 'json', request);
}

model CreateTrademarkOrderRequest {
  agreementId?: string(name='AgreementId', position='Query'),
  bigDipperSource?: string(name='BigDipperSource', position='Query'),
  bizId?: string(name='BizId', position='Query'),
  channel?: string(name='Channel', example='aliyun', position='Query'),
  isBlackIcon?: boolean(name='IsBlackIcon', example='true', position='Query'),
  legalNoticeKey?: string(name='LegalNoticeKey', position='Query'),
  loaOssKey?: string(name='LoaOssKey', example='112.jpg', position='Query'),
  materialId?: string(name='MaterialId', example='12', position='Query'),
  orderData?: string(name='OrderData', example='{   "16": "160008,160130,160246,16090014,16090003,160014,160147,160243,16060007,160175",   "35": "35010071,350039,350084,350092,C350001,C350002,35010055,350046,350103,C350008,350106" }', position='Query'),
  partnerCode?: string(name='PartnerCode', position='Query'),
  phoneNum?: string(name='PhoneNum', position='Query'),
  principalName?: int32(name='PrincipalName', position='Query'),
  realUserName?: string(name='RealUserName', position='Query'),
  registerName?: string(name='RegisterName', position='Query'),
  registerNumber?: string(name='RegisterNumber', example='10011010', position='Query'),
  renewInfoId?: string(name='RenewInfoId', example='121', position='Query'),
  rootCode?: string(name='RootCode', example='1', position='Query'),
  sessionId?: string(name='SessionId', position='Query'),
  tmComment?: string(name='TmComment', position='Query'),
  tmIcon: string(name='TmIcon', example='icon/azaa6tm403.jpg', position='Query'),
  tmName: string(name='TmName', position='Query'),
  tmNameType?: string(name='TmNameType', example='1', position='Query'),
  type?: int32(name='Type', example='1', position='Query'),
  ua?: string(name='Ua', position='Query'),
  uid?: string(name='Uid', position='Query'),
  userId: long(name='UserId', example='11211', position='Query'),
}

model CreateTrademarkOrderResponseBody = {
  errorMsg?: string(name='ErrorMsg'),
  orderId?: long(name='OrderId', example='202975794160629'),
  requestId?: string(name='RequestId', example='483637DD-1D82-4A73-8F68-0FCDA2F677D6'),
  success?: boolean(name='Success', example='true'),
}

model CreateTrademarkOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTrademarkOrderResponseBody(name='body'),
}

async function createTrademarkOrder(request: CreateTrademarkOrderRequest): CreateTrademarkOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTrademarkOrder', 'POST', '/', 'json', false, 'json', request);
}

model DeleteMaterialRequest {
  id: long(name='Id', example='1', position='Query'),
}

model DeleteMaterialResponseBody = {
  errorCode?: string(name='ErrorCode', example='MATERIAL.NOT.EXIT'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId', example='ED93ADD0-034A-4B68-9AC7-61933DB0099C'),
  success?: boolean(name='Success', example='true'),
}

model DeleteMaterialResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteMaterialResponseBody(name='body'),
}

async function deleteMaterial(request: DeleteMaterialRequest): DeleteMaterialResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteMaterial', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTmMonitorRuleRequest {
  id: long(name='Id', position='Query'),
}

model DeleteTmMonitorRuleResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteTmMonitorRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteTmMonitorRuleResponseBody(name='body'),
}

async function deleteTmMonitorRule(request: DeleteTmMonitorRuleRequest): DeleteTmMonitorRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTmMonitorRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTrademarkApplicationRequest {
  bizId: string(name='BizId', position='Query'),
}

model DeleteTrademarkApplicationResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteTrademarkApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteTrademarkApplicationResponseBody(name='body'),
}

async function deleteTrademarkApplication(request: DeleteTrademarkApplicationRequest): DeleteTrademarkApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTrademarkApplication', 'POST', '/', 'json', false, 'json', request);
}

model DenySupplementRequest {
  id: long(name='Id', example='12', position='Query'),
}

model DenySupplementResponseBody = {
  errorCode?: string(name='ErrorCode', example='SUPPLEMENT_TIME_OUT_ERROR'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId', example='ED93ADD0-034A-4B68-9AC7-1121'),
  success?: boolean(name='Success', example='true'),
}

model DenySupplementResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DenySupplementResponseBody(name='body'),
}

async function denySupplement(request: DenySupplementRequest): DenySupplementResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DenySupplement', 'POST', '/', 'json', false, 'json', request);
}

model DescirbeCombineTrademarkRequest {
  accurateMatch?: boolean(name='AccurateMatch', position='Query'),
  classification?: string(name='Classification', position='Query'),
  name?: string(name='Name', position='Query'),
  ownerName?: string(name='OwnerName', position='Query'),
  pageNumber: int32(name='PageNumber', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  products?: string(name='Products', position='Query'),
  registrationNumber?: string(name='RegistrationNumber', position='Query'),
  similarGroups?: string(name='SimilarGroups', position='Query'),
}

model DescirbeCombineTrademarkResponseBody = {
  currentPageNumber?: int32(name='CurrentPageNumber'),
  data?: [ 
    {
      agency?: string(name='Agency'),
      announcementList?: [ 
        {
          annDate?: string(name='AnnDate'),
          annNumber?: string(name='AnnNumber'),
          annTypeCode?: string(name='AnnTypeCode'),
          annTypeName?: string(name='AnnTypeName'),
          imageUrl?: string(name='ImageUrl'),
          originalImageUrl?: string(name='OriginalImageUrl'),
        }
      ](name='AnnouncementList'),
      applyDate?: string(name='ApplyDate'),
      classification?: string(name='Classification'),
      exclusiveDateLimit?: string(name='ExclusiveDateLimit'),
      firstAnnoNumber?: string(name='FirstAnnoNumber'),
      firstAnnoType?: string(name='FirstAnnoType'),
      image?: string(name='Image'),
      indexId?: string(name='IndexId'),
      intlRegDate?: string(name='IntlRegDate'),
      lastProcedureStatus?: string(name='LastProcedureStatus'),
      lawFinalStatus?: string(name='LawFinalStatus'),
      name?: string(name='Name'),
      onSale?: int32(name='OnSale'),
      ownerAddress?: string(name='OwnerAddress'),
      ownerEnAddress?: string(name='OwnerEnAddress'),
      ownerEnName?: string(name='OwnerEnName'),
      ownerName?: string(name='OwnerName'),
      preAnnDate?: string(name='PreAnnDate'),
      preAnnNumber?: string(name='PreAnnNumber'),
      priorityDate?: string(name='PriorityDate'),
      procedures?: [ 
        {
          procedureCode?: string(name='ProcedureCode'),
          procedureDate?: string(name='ProcedureDate'),
          procedureName?: string(name='ProcedureName'),
          procedureResult?: string(name='ProcedureResult'),
          procedureStep?: string(name='ProcedureStep'),
        }
      ](name='Procedures'),
      productDescription?: string(name='ProductDescription'),
      regAnnDate?: string(name='RegAnnDate'),
      regAnnNumber?: string(name='RegAnnNumber'),
      registrationNumber?: string(name='RegistrationNumber'),
      registrationType?: string(name='RegistrationType'),
      secondAnnoNumber?: string(name='SecondAnnoNumber'),
      secondAnnoType?: string(name='SecondAnnoType'),
      share?: string(name='Share'),
      similarGroup?: string(name='SimilarGroup'),
      status?: string(name='Status'),
      subsequentDesignationDate?: string(name='SubsequentDesignationDate'),
    }
  ](name='Data'),
  nextPage?: boolean(name='NextPage'),
  pageSize?: int32(name='PageSize'),
  prePage?: boolean(name='PrePage'),
  requestId?: string(name='RequestId'),
  totalItemNumber?: int32(name='TotalItemNumber'),
  totalPageNumber?: int32(name='TotalPageNumber'),
}

model DescirbeCombineTrademarkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescirbeCombineTrademarkResponseBody(name='body'),
}

async function descirbeCombineTrademark(request: DescirbeCombineTrademarkRequest): DescirbeCombineTrademarkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescirbeCombineTrademark', 'POST', '/', 'json', false, 'json', request);
}

model FillLogisticsRequest {
  bizId: string(name='BizId', position='Query'),
  logistics: string(name='Logistics', position='Query'),
}

model FillLogisticsResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model FillLogisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FillLogisticsResponseBody(name='body'),
}

async function fillLogistics(request: FillLogisticsRequest): FillLogisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FillLogistics', 'POST', '/', 'json', false, 'json', request);
}

model FilterUnavailableCodesRequest {
  codes?: map[string]any(name='Codes', shrink='json', position='Query'),
}

model FilterUnavailableCodesResponseBody = {
  data?: {
    codes?: [ string ](name='Codes')
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model FilterUnavailableCodesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FilterUnavailableCodesResponseBody(name='body'),
}

async function filterUnavailableCodes(request: FilterUnavailableCodesRequest): FilterUnavailableCodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FilterUnavailableCodes', 'POST', '/', 'json', false, 'json', request);
}

model ForceUploadTrademarkOnsaleRequest {
  beginTime: long(name='BeginTime', minimum=0, maximum=9223372036854775807, position='Query'),
  classificationCode: string(name='ClassificationCode', position='Query'),
  description?: string(name='Description', position='Query'),
  endTime: long(name='EndTime', minimum=0, maximum=9223372036854775807, position='Query'),
  label?: string(name='Label', position='Query'),
  originalPrice: float(name='OriginalPrice', minimum=0, maximum=9223372036854775807, position='Query'),
  ownerEnName?: string(name='OwnerEnName', position='Query'),
  ownerName: string(name='OwnerName', position='Query'),
  reason?: string(name='Reason', position='Query'),
  regAnnDate?: long(name='RegAnnDate', minimum=0, maximum=9223372036854775807, position='Query'),
  secondaryClassification: string(name='SecondaryClassification', position='Query'),
  thirdClassification: string(name='ThirdClassification', position='Query'),
  tmIcon: string(name='TmIcon', position='Query'),
  tmName: string(name='TmName', position='Query'),
  tmNumber: string(name='TmNumber', position='Query'),
  type?: string(name='Type', position='Query'),
}

model ForceUploadTrademarkOnsaleResponseBody = {
  requestId?: string(name='RequestId'),
}

model ForceUploadTrademarkOnsaleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ForceUploadTrademarkOnsaleResponseBody(name='body'),
}

async function forceUploadTrademarkOnsale(request: ForceUploadTrademarkOnsaleRequest): ForceUploadTrademarkOnsaleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ForceUploadTrademarkOnsale', 'POST', '/', 'json', false, 'json', request);
}

model GenerateQrCodeRequest {
  fieldKey?: string(name='FieldKey', position='Query'),
  ossKey?: string(name='OssKey', position='Query'),
  uuid?: string(name='Uuid', position='Query'),
}

model GenerateQrCodeResponseBody = {
  expireTime?: long(name='ExpireTime'),
  fieldKey?: string(name='FieldKey'),
  qrcodeUrl?: string(name='QrcodeUrl'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  uuid?: string(name='Uuid'),
}

model GenerateQrCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GenerateQrCodeResponseBody(name='body'),
}

async function generateQrCode(request: GenerateQrCodeRequest): GenerateQrCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateQrCode', 'POST', '/', 'json', false, 'json', request);
}

model GenerateUploadFilePolicyRequest {
  bizId?: string(name='BizId', position='Query'),
  fileType: string(name='FileType', example='ICON', position='Query'),
}

model GenerateUploadFilePolicyResponseBody = {
  accessId?: string(name='AccessId', description='accessId', example='hObpgEXoca42qH3V'),
  encodedPolicy?: string(name='EncodedPolicy', description='osspolicy', example='eyJleHBpcmF0aW9uIjoiMjAxOC0xMi0yNVQwODozNDo0MC41ODVaIiwiY29uZGl0aW9ucyI6W1siY29udGVudC1sZW5ndGgtcmFuZ2UiLDAsMjA0ODAwXSxbInN0YXJ0cy13aXRoIiwiJGtleSIsIjEyMTk1NDExNjEyMTMwNTcvaWNvbiJdXX0='),
  expireTime?: long(name='ExpireTime', example='1545726880585'),
  fileDir?: string(name='FileDir', example='1219541161213057/icon'),
  host?: string(name='Host', example='//trade-mark-user-upload.oss-cn-beijing.aliyuncs.com/'),
  requestId?: string(name='RequestId', example='A891194E-BEB7-45EA-9A02-886B94479783'),
  signature?: string(name='Signature', example='ozjILaFe+DSgUPX2OOplFHYBJqk='),
}

model GenerateUploadFilePolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GenerateUploadFilePolicyResponseBody(name='body'),
}

async function generateUploadFilePolicy(request: GenerateUploadFilePolicyRequest): GenerateUploadFilePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateUploadFilePolicy', 'POST', '/', 'json', false, 'json', request);
}

model GetAuthorizationLetterVersionRequest {
  ossKey: string(name='OssKey', position='Query'),
}

model GetAuthorizationLetterVersionResponseBody = {
  requestId?: string(name='RequestId'),
  version?: string(name='Version'),
}

model GetAuthorizationLetterVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAuthorizationLetterVersionResponseBody(name='body'),
}

async function getAuthorizationLetterVersion(request: GetAuthorizationLetterVersionRequest): GetAuthorizationLetterVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAuthorizationLetterVersion', 'POST', '/', 'json', false, 'json', request);
}

model GetDefaultPrincipalRequest {
}

model GetDefaultPrincipalResponseBody = {
  principalDescription?: string(name='PrincipalDescription'),
  principalName?: string(name='PrincipalName'),
  principalValue?: int32(name='PrincipalValue'),
  requestId?: string(name='RequestId'),
}

model GetDefaultPrincipalResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDefaultPrincipalResponseBody(name='body'),
}

async function getDefaultPrincipal(request: GetDefaultPrincipalRequest): GetDefaultPrincipalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDefaultPrincipal', 'POST', '/', 'json', false, 'json', request);
}

model GetDefaultPrincipalNameRequest {
  bizType: string(name='BizType', position='Query'),
}

model GetDefaultPrincipalNameResponseBody = {
  principalName?: int32(name='PrincipalName'),
  requestId?: string(name='RequestId'),
}

model GetDefaultPrincipalNameResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDefaultPrincipalNameResponseBody(name='body'),
}

async function getDefaultPrincipalName(request: GetDefaultPrincipalNameRequest): GetDefaultPrincipalNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDefaultPrincipalName', 'POST', '/', 'json', false, 'json', request);
}

model GetNotaryOrderRequest {
  notaryOrderId: long(name='NotaryOrderId', position='Query'),
}

model GetNotaryOrderResponseBody = {
  aliyunOrderId?: string(name='AliyunOrderId'),
  applyPostStatus?: int32(name='ApplyPostStatus'),
  bizId?: string(name='BizId'),
  businessLicense?: string(name='BusinessLicense'),
  businessLicenseId?: string(name='BusinessLicenseId'),
  companyContactName?: string(name='CompanyContactName'),
  companyContactPhone?: string(name='CompanyContactPhone'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  legalPersonIdCard?: string(name='LegalPersonIdCard'),
  legalPersonName?: string(name='LegalPersonName'),
  legalPersonPhone?: string(name='LegalPersonPhone'),
  name?: string(name='Name'),
  notaryAcceptDate?: long(name='NotaryAcceptDate'),
  notaryCertificate?: string(name='NotaryCertificate'),
  notaryFailedDate?: long(name='NotaryFailedDate'),
  notaryFailedReason?: string(name='NotaryFailedReason'),
  notaryOrderId?: long(name='NotaryOrderId'),
  notaryPlatformName?: string(name='NotaryPlatformName'),
  notaryPostReceipt?: string(name='NotaryPostReceipt'),
  notaryStatus?: int32(name='NotaryStatus'),
  notarySucceedDate?: long(name='NotarySucceedDate'),
  notaryType?: int32(name='NotaryType'),
  orderDate?: long(name='OrderDate'),
  orderPrice?: float(name='OrderPrice'),
  phone?: string(name='Phone'),
  receiverAddress?: string(name='ReceiverAddress'),
  receiverName?: string(name='ReceiverName'),
  receiverPhone?: string(name='ReceiverPhone'),
  receiverPostalCode?: string(name='ReceiverPostalCode'),
  requestId?: string(name='RequestId'),
  sellerBackOfIdCard?: string(name='SellerBackOfIdCard'),
  sellerCompanyName?: string(name='SellerCompanyName'),
  sellerFrontOfIdCard?: string(name='SellerFrontOfIdCard'),
  success?: boolean(name='Success'),
  tmAcceptCertificate?: string(name='TmAcceptCertificate'),
  tmClassification?: string(name='TmClassification'),
  tmImage?: string(name='TmImage'),
  tmName?: string(name='TmName'),
  tmRegisterCertificate?: string(name='TmRegisterCertificate'),
  tmRegisterChangeCertificate?: string(name='TmRegisterChangeCertificate'),
  tmRegisterNo?: string(name='TmRegisterNo'),
  type?: string(name='Type'),
}

model GetNotaryOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetNotaryOrderResponseBody(name='body'),
}

async function getNotaryOrder(request: GetNotaryOrderRequest): GetNotaryOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetNotaryOrder', 'POST', '/', 'json', false, 'json', request);
}

model GetSupportPrincipalNameRequest {
}

model GetSupportPrincipalNameResponseBody = {
  principals?: [ 
    {
      defaultPrincipal?: boolean(name='DefaultPrincipal'),
      principalDescription?: string(name='PrincipalDescription'),
      principalValue?: int32(name='PrincipalValue'),
    }
  ](name='Principals'),
  requestId?: string(name='RequestId'),
}

model GetSupportPrincipalNameResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSupportPrincipalNameResponseBody(name='body'),
}

async function getSupportPrincipalName(request: GetSupportPrincipalNameRequest): GetSupportPrincipalNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSupportPrincipalName', 'POST', '/', 'json', false, 'json', request);
}

model InsertMaterialRequest {
  address?: string(name='Address', position='Query'),
  businessLicenceOssKey?: string(name='BusinessLicenceOssKey', example='sajkajk.key', position='Query'),
  cardNumber?: string(name='CardNumber', example='121312312', position='Query'),
  city?: string(name='City', position='Query'),
  contactAddress?: string(name='ContactAddress', position='Query'),
  contactCity?: string(name='ContactCity', position='Query'),
  contactCounty?: string(name='ContactCounty', position='Query'),
  contactDistrict?: string(name='ContactDistrict', position='Query'),
  contactEmail?: string(name='ContactEmail', example='1233211@qq.com', position='Query'),
  contactName?: string(name='ContactName', position='Query'),
  contactNumber?: string(name='ContactNumber', example='13112345678', position='Query'),
  contactProvince?: string(name='ContactProvince', position='Query'),
  contactZipcode?: string(name='ContactZipcode', example='111111', position='Query'),
  country?: string(name='Country', position='Query'),
  eAddress?: string(name='EAddress', example='english', position='Query'),
  eName?: string(name='EName', example='jack', position='Query'),
  idCardName?: string(name='IdCardName', position='Query'),
  idCardNumber?: string(name='IdCardNumber', position='Query'),
  idCardOssKey?: string(name='IdCardOssKey', example='asjkjakjasjk.key', position='Query'),
  legalNoticeOssKey?: string(name='LegalNoticeOssKey', example='test/lege.jpg', position='Query'),
  loaOssKey?: string(name='LoaOssKey', example='qwiqwioi.key', position='Query'),
  name?: string(name='Name', example='jack', position='Query'),
  passportOssKey?: string(name='PassportOssKey', example='sakasl.key', position='Query'),
  personalType?: long(name='PersonalType', position='Query'),
  principalName?: int32(name='PrincipalName', minimum=1, maximum=100, position='Query'),
  province?: string(name='Province', position='Query'),
  region?: int32(name='Region', example='1', minimum=1, maximum=5, position='Query'),
  town?: string(name='Town', position='Query'),
  type?: int32(name='Type', example='1', minimum=1, maximum=2, position='Query'),
}

model InsertMaterialResponseBody = {
  requestId?: string(name='RequestId', example='FA4545CF-508D-4F5B-A6F5-932B7634055A'),
  success?: boolean(name='Success', example='true'),
}

model InsertMaterialResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InsertMaterialResponseBody(name='body'),
}

async function insertMaterial(request: InsertMaterialRequest): InsertMaterialResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InsertMaterial', 'POST', '/', 'json', false, 'json', request);
}

model InsertRenewInfoRequest {
  address: string(name='Address', position='Query'),
  engAddress?: string(name='EngAddress', example='beijing', position='Query'),
  engName?: string(name='EngName', example='aliyun', position='Query'),
  name: string(name='Name', position='Query'),
  registerTime: long(name='RegisterTime', example='1545731871738', position='Query'),
}

model InsertRenewInfoResponseBody = {
  errorCode?: string(name='ErrorCode', example='PARAMETER.ILLEGALL'),
  errorMsg?: string(name='ErrorMsg'),
  id?: long(name='Id', example='12'),
  requestId?: string(name='RequestId', example='FA4545CF-508D-4F5B-A6F5-932B7634055A'),
  success?: boolean(name='Success', example='true'),
}

model InsertRenewInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InsertRenewInfoResponseBody(name='body'),
}

async function insertRenewInfo(request: InsertRenewInfoRequest): InsertRenewInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InsertRenewInfo', 'POST', '/', 'json', false, 'json', request);
}

model InsertTmMonitorRuleRequest {
  classification?: map[string]any(name='Classification', shrink='json', position='Query'),
  endApplyDate?: string(name='EndApplyDate', position='Query'),
  notifyStatus?: map[string]any(name='NotifyStatus', shrink='json', position='Query'),
  ruleKeyword: string(name='RuleKeyword', position='Query'),
  ruleName?: string(name='RuleName', position='Query'),
  ruleSource: string(name='RuleSource', position='Query'),
  ruleType: int32(name='RuleType', position='Query'),
  startApplyDate?: string(name='StartApplyDate', position='Query'),
}

model InsertTmMonitorRuleResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model InsertTmMonitorRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InsertTmMonitorRuleResponseBody(name='body'),
}

async function insertTmMonitorRule(request: InsertTmMonitorRuleRequest): InsertTmMonitorRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InsertTmMonitorRule', 'POST', '/', 'json', false, 'json', request);
}

model ListNotaryInfosRequest {
  bizOrderNo?: string(name='BizOrderNo', example='trademark_prepayment_pre-cn-123123test', position='Query'),
  notaryType: int32(name='NotaryType', example='1', position='Query'),
  pageNum: int32(name='PageNum', example='1', position='Query'),
  pageSize: int32(name='PageSize', example='50', position='Query'),
  token?: string(name='Token', example='2dd2eed1-34d2-4142-811a-8861cf0076c3', position='Query'),
}

model ListNotaryInfosResponseBody = {
  currentPageNum?: int32(name='CurrentPageNum', example='1'),
  data?: {
    notaryInfo?: [ 
    {
      bizOrderNo?: string(name='BizOrderNo', example='trademark_prepayment_pre-cn-123123test'),
      gmtModified?: long(name='GmtModified', example='123231231213213'),
      notaryFailedReason?: string(name='NotaryFailedReason'),
      notaryStatus?: int32(name='NotaryStatus', example='1'),
      tmClassification?: string(name='TmClassification', example='23'),
      tmRegisterNo?: string(name='TmRegisterNo', example='123312'),
      token?: string(name='Token', description='token', example='2dd2eed1-34d2-4142-811a-8861cf0076c3'),
    }
  ](name='NotaryInfo')
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='PARAMETER.ILLEGAL'),
  errorMsg?: string(name='ErrorMsg'),
  nextPage?: boolean(name='NextPage', example='false'),
  pageSize?: int32(name='PageSize', example='50'),
  prePage?: boolean(name='PrePage', example='true'),
  requestId?: string(name='RequestId', example='1211212121-34d2-4142-811a-8861cf0076c3'),
  success?: boolean(name='Success', example='true'),
  totalItemNum?: int32(name='TotalItemNum', example='100'),
  totalPageNum?: int32(name='TotalPageNum', example='2'),
}

model ListNotaryInfosResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListNotaryInfosResponseBody(name='body'),
}

async function listNotaryInfos(request: ListNotaryInfosRequest): ListNotaryInfosResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNotaryInfos', 'POST', '/', 'json', false, 'json', request);
}

model ListNotaryOrdersRequest {
  aliyunOrderId?: string(name='AliyunOrderId', position='Query'),
  bizId?: string(name='BizId', position='Query'),
  endOrderDate?: long(name='EndOrderDate', position='Query'),
  notaryStatus?: int32(name='NotaryStatus', position='Query'),
  notaryType?: int32(name='NotaryType', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  sortByType?: string(name='SortByType', position='Query'),
  sortKeyType?: int32(name='SortKeyType', position='Query'),
  startOrderDate?: long(name='StartOrderDate', position='Query'),
}

model ListNotaryOrdersResponseBody = {
  currentPageNum?: int32(name='CurrentPageNum'),
  data?: {
    notaryOrder?: [ 
    {
      aliyunOrderId?: string(name='AliyunOrderId'),
      applyPostStatus?: string(name='ApplyPostStatus'),
      bizId?: string(name='BizId'),
      gmtModified?: long(name='GmtModified'),
      notaryCertificate?: string(name='NotaryCertificate'),
      notaryOrderId?: long(name='NotaryOrderId'),
      notaryPlatformName?: string(name='NotaryPlatformName'),
      notaryStatus?: int32(name='NotaryStatus'),
      notaryType?: int32(name='NotaryType'),
      orderDate?: long(name='OrderDate'),
      orderPrice?: float(name='OrderPrice'),
      tmClassification?: string(name='TmClassification'),
      tmImage?: string(name='TmImage'),
      tmName?: string(name='TmName'),
      tmRegisterNo?: string(name='TmRegisterNo'),
    }
  ](name='NotaryOrder')
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  nextPage?: boolean(name='NextPage'),
  pageSize?: int32(name='PageSize'),
  prePage?: boolean(name='PrePage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalItemNum?: int32(name='TotalItemNum'),
  totalPageNum?: int32(name='TotalPageNum'),
}

model ListNotaryOrdersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListNotaryOrdersResponseBody(name='body'),
}

async function listNotaryOrders(request: ListNotaryOrdersRequest): ListNotaryOrdersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNotaryOrders', 'POST', '/', 'json', false, 'json', request);
}

model ListTrademarkSbjKeyRequest {
  principalKey?: string(name='PrincipalKey', position='Query'),
  principalName?: string(name='PrincipalName', position='Query'),
}

model ListTrademarkSbjKeyResponseBody = {
  requestId?: string(name='RequestId'),
  tmSbjKeyInfo?: [ 
    {
      agentId?: string(name='AgentId'),
      agreeProt?: string(name='AgreeProt'),
      certInfo?: string(name='CertInfo'),
      clearData?: string(name='ClearData'),
      hashData?: string(name='HashData'),
      keyType?: int32(name='KeyType'),
      name?: string(name='Name'),
      pin?: string(name='Pin'),
      principalKey?: string(name='PrincipalKey'),
      principalName?: string(name='PrincipalName'),
      signCert?: string(name='SignCert'),
      signData?: string(name='SignData'),
      startValidDate?: string(name='StartValidDate'),
      submitSignData?: string(name='SubmitSignData'),
      typeCert?: string(name='TypeCert'),
      username?: string(name='Username'),
      validDate?: string(name='ValidDate'),
      tmurl?: string(name='tmurl'),
    }
  ](name='TmSbjKeyInfo'),
}

model ListTrademarkSbjKeyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTrademarkSbjKeyResponseBody(name='body'),
}

async function listTrademarkSbjKey(request: ListTrademarkSbjKeyRequest): ListTrademarkSbjKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTrademarkSbjKey', 'POST', '/', 'json', false, 'json', request);
}

model ModifySubmitTransferMaterailRequest {
  addr?: string(name='Addr', position='Body'),
  assigneeProxy?: string(name='AssigneeProxy', position='Query'),
  bizId: string(name='BizId', position='Query'),
  buyerBusinessLicense?: string(name='BuyerBusinessLicense', position='Body'),
  buyerBusinessLicenseTranslation?: string(name='BuyerBusinessLicenseTranslation', position='Query'),
  buyerIdCard?: string(name='BuyerIdCard', position='Body'),
  cardNo?: string(name='CardNo', position='Body'),
  cardType?: string(name='CardType', position='Body'),
  complete?: boolean(name='Complete', position='Body'),
  contactEmail?: string(name='ContactEmail', position='Body'),
  contactMobile?: string(name='ContactMobile', position='Body'),
  contactName?: string(name='ContactName', position='Body'),
  name?: string(name='Name', position='Body'),
  notarization?: string(name='Notarization', position='Body'),
  note?: string(name='Note', position='Query'),
  other?: map[string]any(name='Other', shrink='json', position='Body'),
  registrationCert?: string(name='RegistrationCert', position='Body'),
  sellerApply?: string(name='SellerApply', position='Body'),
  sellerBusinessLicense?: string(name='SellerBusinessLicense', position='Body'),
  sellerBusinessLicenseTranslation?: string(name='SellerBusinessLicenseTranslation', position='Query'),
  sellerIdCard?: string(name='SellerIdCard', position='Body'),
  sellerProxy?: string(name='SellerProxy', position='Body'),
  tradeMaterialFullUpdate?: boolean(name='TradeMaterialFullUpdate', position='Query'),
}

model ModifySubmitTransferMaterailResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifySubmitTransferMaterailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySubmitTransferMaterailResponseBody(name='body'),
}

async function modifySubmitTransferMaterail(request: ModifySubmitTransferMaterailRequest): ModifySubmitTransferMaterailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySubmitTransferMaterail', 'POST', '/', 'json', true, 'form', request);
}

model OperateProduceRequest {
  bizId?: string(name='BizId', position='Query'),
  bizType?: string(name='BizType', position='Query'),
  extMap?: string(name='ExtMap', position='Query'),
  operateType?: string(name='OperateType', position='Query'),
}

model OperateProduceResponseBody = {
  requestId?: string(name='requestId'),
}

model OperateProduceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OperateProduceResponseBody(name='body'),
}

async function operateProduce(request: OperateProduceRequest): OperateProduceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OperateProduce', 'POST', '/', 'json', false, 'json', request);
}

model PartnerUpdateTrademarkNameRequest {
  aliyunKp?: string(name='AliyunKp', position='Query'),
  bid?: string(name='Bid', position='Query'),
  bizId?: string(name='BizId', position='Body'),
  callerParentId?: long(name='CallerParentId', position='Query'),
  callerType?: string(name='CallerType', position='Query'),
  eventSceneType?: long(name='EventSceneType', position='Body'),
  intentionBizId?: string(name='IntentionBizId', position='Body'),
  tmComment?: string(name='TmComment', position='Body'),
  tmIcon?: string(name='TmIcon', position='Body'),
  tmName?: string(name='TmName', position='Body'),
  type?: int32(name='Type', position='Query'),
}

model PartnerUpdateTrademarkNameResponseBody = {
  allowRetry?: boolean(name='AllowRetry'),
  appName?: string(name='AppName'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PartnerUpdateTrademarkNameResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PartnerUpdateTrademarkNameResponseBody(name='body'),
}

async function partnerUpdateTrademarkName(request: PartnerUpdateTrademarkNameRequest): PartnerUpdateTrademarkNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PartnerUpdateTrademarkName', 'POST', '/', 'json', true, 'form', request);
}

model QueryCommunicationLogsRequest {
  bizId: string(name='BizId', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  type?: int32(name='Type', position='Query'),
}

model QueryCommunicationLogsResponseBody = {
  data?: {
    taskList?: [ 
    {
      bizId?: string(name='BizId'),
      createTime?: long(name='CreateTime'),
      note?: string(name='Note'),
      partnerCode?: string(name='PartnerCode'),
      updateTime?: long(name='UpdateTime'),
    }
  ](name='TaskList')
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model QueryCommunicationLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryCommunicationLogsResponseBody(name='body'),
}

async function queryCommunicationLogs(request: QueryCommunicationLogsRequest): QueryCommunicationLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCommunicationLogs', 'POST', '/', 'json', false, 'json', request);
}

model QueryCredentialsInfoRequest {
  companyName?: string(name='CompanyName', position='Query'),
  materialType: string(name='MaterialType', position='Body'),
  ossKey?: string(name='OssKey', position='Body'),
}

model QueryCredentialsInfoResponseBody = {
  credentialsInfo?: {
    address?: string(name='Address'),
    cardNumber?: string(name='CardNumber'),
    companyName?: string(name='CompanyName'),
    personName?: string(name='PersonName'),
    province?: string(name='Province'),
  }(name='CredentialsInfo'),
  requestId?: string(name='RequestId'),
}

model QueryCredentialsInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryCredentialsInfoResponseBody(name='body'),
}

async function queryCredentialsInfo(request: QueryCredentialsInfoRequest): QueryCredentialsInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCredentialsInfo', 'POST', '/', 'json', true, 'form', request);
}

model QueryExtensionAttributeRequest {
  attributeKey?: string(name='AttributeKey', position='Query'),
  bizId: string(name='BizId', position='Query'),
}

model QueryExtensionAttributeResponseBody = {
  attributeValue?: string(name='AttributeValue'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryExtensionAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryExtensionAttributeResponseBody(name='body'),
}

async function queryExtensionAttribute(request: QueryExtensionAttributeRequest): QueryExtensionAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryExtensionAttribute', 'POST', '/', 'json', false, 'json', request);
}

model QueryIntentionDetailRequest {
  bizId?: string(name='BizId', position='Query'),
}

model QueryIntentionDetailResponseBody = {
  bizId?: string(name='BizId'),
  classification?: string(name='Classification'),
  createTime?: long(name='CreateTime'),
  description?: string(name='Description'),
  mobile?: string(name='Mobile'),
  partnerMobile?: string(name='PartnerMobile'),
  registerNumber?: string(name='RegisterNumber'),
  relationBizId?: string(name='RelationBizId'),
  requestId?: string(name='RequestId'),
  status?: int32(name='Status'),
  type?: int32(name='Type'),
  updateTime?: long(name='UpdateTime'),
  userId?: string(name='UserId'),
  userName?: string(name='UserName'),
}

model QueryIntentionDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryIntentionDetailResponseBody(name='body'),
}

async function queryIntentionDetail(request: QueryIntentionDetailRequest): QueryIntentionDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryIntentionDetail', 'POST', '/', 'json', false, 'json', request);
}

model QueryIntentionListRequest {
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  sortFiled?: string(name='SortFiled', position='Query'),
  sortOrder?: string(name='SortOrder', position='Query'),
  status?: int32(name='Status', position='Query'),
  type?: int32(name='Type', position='Query'),
}

model QueryIntentionListResponseBody = {
  currentPageNum?: int32(name='CurrentPageNum'),
  data?: {
    intention?: [ 
    {
      bizId?: string(name='BizId'),
      classification?: string(name='Classification'),
      createTime?: long(name='CreateTime'),
      description?: string(name='Description'),
      registerNumber?: string(name='RegisterNumber'),
      status?: int32(name='Status'),
      type?: int32(name='Type'),
      updateTime?: long(name='UpdateTime'),
      userId?: string(name='UserId'),
    }
  ](name='Intention')
  }(name='Data'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalItemNum?: int32(name='TotalItemNum'),
  totalPageNum?: int32(name='TotalPageNum'),
}

model QueryIntentionListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryIntentionListResponseBody(name='body'),
}

async function queryIntentionList(request: QueryIntentionListRequest): QueryIntentionListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryIntentionList', 'POST', '/', 'json', false, 'json', request);
}

model QueryIntentionOwnerRequest {
  bizId: string(name='BizId', position='Query'),
}

model QueryIntentionOwnerResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  module?: {
    ownerId?: float(name='OwnerId'),
    ownerName?: string(name='OwnerName'),
  }(name='Module'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryIntentionOwnerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryIntentionOwnerResponseBody(name='body'),
}

async function queryIntentionOwner(request: QueryIntentionOwnerRequest): QueryIntentionOwnerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryIntentionOwner', 'GET', '/', 'json', false, 'json', request);
}

model QueryIntentionPriceRequest {
  channel?: string(name='Channel', position='Query'),
  intentionBizId: string(name='IntentionBizId', position='Query'),
}

model QueryIntentionPriceResponseBody = {
  currentPageNum?: int32(name='CurrentPageNum'),
  data?: {
    tmProduces?: [ 
    {
      bizId?: string(name='BizId'),
      createTime?: long(name='CreateTime'),
      firstClassification?: {
        classificationCode?: string(name='ClassificationCode'),
        classificationName?: string(name='ClassificationName'),
      }(name='FirstClassification'),
      loaUrl?: string(name='LoaUrl'),
      materialId?: string(name='MaterialId'),
      materialName?: string(name='MaterialName'),
      note?: string(name='Note'),
      orderPrice?: float(name='OrderPrice'),
      servicePrice?: float(name='ServicePrice'),
      status?: int32(name='Status'),
      supplementId?: long(name='SupplementId'),
      supplementStatus?: int32(name='SupplementStatus'),
      thirdClassification?: {
        thirdClassifications?: [ 
        {
          classificationCode?: string(name='ClassificationCode'),
          classificationName?: string(name='ClassificationName'),
        }
      ](name='ThirdClassifications')
      }(name='ThirdClassification'),
      tmIcon?: string(name='TmIcon'),
      tmName?: string(name='TmName'),
      tmNumber?: string(name='TmNumber'),
      totalPrice?: float(name='TotalPrice'),
      type?: int32(name='Type'),
      updateTime?: long(name='UpdateTime'),
    }
  ](name='TmProduces')
  }(name='Data'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalItemNum?: int32(name='TotalItemNum'),
  totalPageNum?: int32(name='TotalPageNum'),
}

model QueryIntentionPriceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryIntentionPriceResponseBody(name='body'),
}

async function queryIntentionPrice(request: QueryIntentionPriceRequest): QueryIntentionPriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryIntentionPrice', 'POST', '/', 'json', false, 'json', request);
}

model QueryMaterialRequest {
  id: long(name='Id', example='1', position='Query'),
  queryUnconfirmedInfo?: boolean(name='QueryUnconfirmedInfo', position='Query'),
}

model QueryMaterialResponseBody = {
  address?: string(name='Address'),
  businessLicenceUrl?: string(name='BusinessLicenceUrl', example='https://trade-mark-user-upload.oss-cn-beijing.aliyuncs.com/1219541161213057/passport/sdixdw73pl.jpg'),
  cardNumber?: string(name='CardNumber', example='121212'),
  city?: string(name='City'),
  contactAddress?: string(name='ContactAddress'),
  contactCity?: string(name='ContactCity'),
  contactCounty?: string(name='ContactCounty'),
  contactDistrict?: string(name='ContactDistrict'),
  contactEmail?: string(name='ContactEmail', example='aliyun@aliyun.com'),
  contactName?: string(name='ContactName', example='aliyun'),
  contactNumber?: string(name='ContactNumber', example='010-1231234'),
  contactProvince?: string(name='ContactProvince'),
  contactZipcode?: string(name='ContactZipcode', example='123456'),
  country?: string(name='Country'),
  eAddress?: string(name='EAddress', example='beijing'),
  eName?: string(name='EName', example='aliyun'),
  evidenceCatalogPath?: string(name='EvidenceCatalogPath'),
  evidenceOfservicePath?: string(name='EvidenceOfservicePath'),
  evidencePath?: string(name='EvidencePath'),
  expirationDate?: long(name='ExpirationDate', example='1545804527194'),
  factandreasonPdfPath?: string(name='FactandreasonPdfPath'),
  fgsqPath?: string(name='FgsqPath'),
  fileBgPath?: string(name='FileBgPath'),
  fileFsSqPath?: string(name='FileFsSqPath'),
  fileGtPath?: string(name='FileGtPath'),
  fileYgPath?: string(name='FileYgPath'),
  id?: long(name='Id', description='id', example='1'),
  idCardName?: string(name='IdCardName'),
  idCardNumber?: string(name='IdCardNumber'),
  idCardUrl?: string(name='IdCardUrl', example='https://trade-mark-user-upload.oss-cn-beijing.aliyuncs.com/1219541161213057/idcard.jpg'),
  legalNoticeKey?: string(name='LegalNoticeKey'),
  legalNoticeUrl?: string(name='LegalNoticeUrl', example='https://trade-mark-user-upload.oss-cn-beijing.aliyuncs.com/1219541161213057/legalnotice.jpg'),
  loaStatus?: int32(name='LoaStatus', example='1'),
  loaUrl?: string(name='LoaUrl', example='https://trade-mark-user-upload.oss-cn-beijing.aliyuncs.com/1219541161213057/loaurl.jpg'),
  materialVersion?: string(name='MaterialVersion'),
  name?: string(name='Name'),
  note?: string(name='Note'),
  passportUrl?: string(name='PassportUrl', example='https://trade-mark-user-upload.oss-cn-beijing.aliyuncs.com/1219541161213057/passport/sdixdw73pl.jpg'),
  personalType?: long(name='PersonalType'),
  principalDescription?: string(name='PrincipalDescription'),
  principalName?: int32(name='PrincipalName'),
  province?: string(name='Province'),
  reason?: string(name='Reason'),
  region?: int32(name='Region', example='1'),
  requestId?: string(name='RequestId'),
  reviewAdditionalFiles?: {
    reviewAdditionalFile?: [ string ](name='ReviewAdditionalFile')
  }(name='ReviewAdditionalFiles'),
  reviewApplicationFile?: string(name='ReviewApplicationFile'),
  status?: int32(name='Status', example='1'),
  supplementEvidenceCatalogFile?: string(name='SupplementEvidenceCatalogFile'),
  supplementEvidenceMaterialFile?: string(name='SupplementEvidenceMaterialFile'),
  supplementReasonFile?: string(name='SupplementReasonFile'),
  systemVersion?: string(name='SystemVersion'),
  town?: string(name='Town'),
  type?: int32(name='Type', example='1'),
  validDate?: long(name='ValidDate'),
}

model QueryMaterialResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryMaterialResponseBody(name='body'),
}

async function queryMaterial(request: QueryMaterialRequest): QueryMaterialResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMaterial', 'POST', '/', 'json', false, 'json', request);
}

model QueryMaterialListRequest {
  cardNumber?: string(name='CardNumber', example='1234', position='Query'),
  materialId?: long(name='MaterialId', position='Query'),
  materialVersion?: string(name='MaterialVersion', position='Query'),
  name?: string(name='Name', position='Query'),
  pageNum?: int32(name='PageNum', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='15', position='Query'),
  principalName?: int32(name='PrincipalName', position='Query'),
  region?: int32(name='Region', example='1', position='Query'),
  status?: int32(name='Status', example='2', position='Query'),
  systemVersion?: string(name='SystemVersion', example='V1', position='Query'),
  type?: int32(name='Type', example='1', position='Query'),
}

model QueryMaterialListResponseBody = {
  currentPageNum?: int32(name='CurrentPageNum', example='1'),
  data?: {
    trademark?: [ 
    {
      cardNumber?: string(name='CardNumber', example='12121212'),
      contactName?: string(name='ContactName', example='1212'),
      id?: long(name='Id', example='12'),
      loaKey?: string(name='LoaKey', example='test.key'),
      loaStatus?: int32(name='LoaStatus', example='1'),
      materialVersion?: string(name='MaterialVersion'),
      name?: string(name='Name'),
      principalDescription?: string(name='PrincipalDescription'),
      principalName?: int32(name='PrincipalName'),
      reason?: string(name='Reason'),
      region?: int32(name='Region', example='1'),
      status?: int32(name='Status', example='2'),
      systemVersion?: string(name='SystemVersion'),
      type?: int32(name='Type', example='1'),
      validDate?: long(name='ValidDate'),
    }
  ](name='Trademark')
  }(name='Data'),
  pageSize?: int32(name='PageSize', example='15'),
  requestId?: string(name='RequestId', example='11212'),
  totalItemNum?: int32(name='TotalItemNum', example='32'),
  totalPageNum?: int32(name='TotalPageNum', example='3'),
}

model QueryMaterialListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryMaterialListResponseBody(name='body'),
}

async function queryMaterialList(request: QueryMaterialListRequest): QueryMaterialListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMaterialList', 'POST', '/', 'json', false, 'json', request);
}

model QueryMonitorKeywordsRequest {
  keywords: [ string ](name='Keywords', position='Query'),
  ruleType: int32(name='RuleType', position='Query'),
}

model QueryMonitorKeywordsResponseBody = {
  data?: {
    keywords?: [ string ](name='Keywords')
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model QueryMonitorKeywordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryMonitorKeywordsResponseBody(name='body'),
}

async function queryMonitorKeywords(request: QueryMonitorKeywordsRequest): QueryMonitorKeywordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMonitorKeywords', 'POST', '/', 'json', false, 'json', request);
}

model QueryOfficialFileCustomListRequest {
  pageNum?: int32(name='PageNum', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
}

model QueryOfficialFileCustomListResponseBody = {
  currentPageNum?: int32(name='CurrentPageNum'),
  data?: {
    customList?: [ 
    {
      createTime?: long(name='CreateTime'),
      downloadUrl?: string(name='DownloadUrl'),
      endAcceptTime?: long(name='EndAcceptTime'),
      expireTime?: long(name='ExpireTime'),
      remark?: string(name='Remark'),
      startAcceptTime?: long(name='StartAcceptTime'),
      status?: string(name='Status'),
    }
  ](name='CustomList')
  }(name='Data'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalItemNum?: int32(name='TotalItemNum'),
  totalPageNum?: int32(name='TotalPageNum'),
}

model QueryOfficialFileCustomListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryOfficialFileCustomListResponseBody(name='body'),
}

async function queryOfficialFileCustomList(request: QueryOfficialFileCustomListRequest): QueryOfficialFileCustomListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryOfficialFileCustomList', 'POST', '/', 'json', false, 'json', request);
}

model QueryOrderLogisticsListRequest {
  fileType?: string(name='FileType', position='Body'),
  pageNum?: long(name='PageNum', position='Body'),
  pageSize?: long(name='PageSize', position='Body'),
  produceOrderId?: string(name='ProduceOrderId', position='Body'),
  registerNumber?: string(name='RegisterNumber', position='Body'),
}

model QueryOrderLogisticsListResponseBody = {
  currentPageNum?: int32(name='CurrentPageNum'),
  data?: [ 
    {
      bizId?: string(name='BizId'),
      fileIdentifier?: string(name='FileIdentifier'),
      fileType?: string(name='FileType'),
      logisticsNo?: string(name='LogisticsNo'),
      produceOrderId?: string(name='ProduceOrderId'),
      tmIcon?: string(name='TmIcon'),
      tmName?: string(name='TmName'),
      tmNumber?: string(name='TmNumber'),
    }
  ](name='Data'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalItemNum?: int32(name='TotalItemNum'),
  totalPageNum?: int32(name='TotalPageNum'),
}

model QueryOrderLogisticsListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryOrderLogisticsListResponseBody(name='body'),
}

async function queryOrderLogisticsList(request: QueryOrderLogisticsListRequest): QueryOrderLogisticsListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryOrderLogisticsList', 'POST', '/', 'json', true, 'form', request);
}

model QueryOssResourcesRequest {
  bizId: string(name='BizId', position='Query'),
}

model QueryOssResourcesResponseBody = {
  data?: {
    taskList?: [ 
    {
      bizId?: string(name='BizId'),
      createTime?: long(name='CreateTime'),
      name?: string(name='Name'),
      ossUrl?: string(name='OssUrl'),
      updateTime?: long(name='UpdateTime'),
    }
  ](name='TaskList')
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model QueryOssResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryOssResourcesResponseBody(name='body'),
}

async function queryOssResources(request: QueryOssResourcesRequest): QueryOssResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryOssResources', 'POST', '/', 'json', false, 'json', request);
}

model QueryProduceDetailRequest {
  applyNo?: string(name='ApplyNo', position='Query'),
  bizId?: string(name='BizId', position='Query'),
  orderId?: string(name='OrderId', position='Query'),
}

model QueryProduceDetailResponseBody = {
  acceptUrl?: string(name='AcceptUrl'),
  agreementId?: string(name='AgreementId'),
  bizId?: string(name='BizId'),
  cnInfoUrl?: string(name='CnInfoUrl'),
  extendInfo?: map[string]any(name='ExtendInfo'),
  flags?: {
    flags?: [ string ](name='Flags')
  }(name='Flags'),
  grayIconUrl?: string(name='GrayIconUrl'),
  issueDate?: string(name='IssueDate'),
  leafCodes?: {
    leafCodes?: [ 
    {
      code?: string(name='Code'),
      name?: string(name='Name'),
    }
  ](name='LeafCodes')
  }(name='LeafCodes'),
  loaUrl?: string(name='LoaUrl'),
  materialDetail?: {
    address?: string(name='Address'),
    businessLicenceUrl?: string(name='BusinessLicenceUrl'),
    cardNumber?: string(name='CardNumber'),
    city?: string(name='City'),
    contactAddress?: string(name='ContactAddress'),
    contactEmail?: string(name='ContactEmail'),
    contactName?: string(name='ContactName'),
    contactNumber?: string(name='ContactNumber'),
    contactZipcode?: string(name='ContactZipcode'),
    country?: string(name='Country'),
    eAddress?: string(name='EAddress'),
    eName?: string(name='EName'),
    expirationDate?: string(name='ExpirationDate'),
    idCardUrl?: string(name='IdCardUrl'),
    loaUrl?: string(name='LoaUrl'),
    name?: string(name='Name'),
    passportUrl?: string(name='PassportUrl'),
    province?: string(name='Province'),
    region?: int32(name='Region'),
    status?: int32(name='Status'),
    town?: string(name='Town'),
    type?: int32(name='Type'),
  }(name='MaterialDetail'),
  note?: string(name='Note'),
  orderId?: string(name='OrderId'),
  principalName?: int32(name='PrincipalName'),
  requestId?: string(name='RequestId'),
  rootCode?: {
    code?: string(name='Code'),
    name?: string(name='Name'),
  }(name='RootCode'),
  status?: int32(name='Status'),
  submitCount?: int32(name='SubmitCount'),
  tmIcon?: string(name='TmIcon'),
  tmName?: string(name='TmName'),
  tmNameType?: int32(name='TmNameType'),
  tmNumber?: string(name='TmNumber'),
  tmOrderId?: string(name='TmOrderId'),
  type?: int32(name='Type'),
}

model QueryProduceDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryProduceDetailResponseBody(name='body'),
}

async function queryProduceDetail(request: QueryProduceDetailRequest): QueryProduceDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryProduceDetail', 'POST', '/', 'json', false, 'json', request);
}

model QueryProduceListRequest {
  bizId?: string(name='BizId', position='Query'),
  createTimeLeft?: long(name='CreateTimeLeft', position='Query'),
  createTimeRight?: long(name='CreateTimeRight', position='Query'),
  materialName?: string(name='MaterialName', position='Query'),
  orderId?: string(name='OrderId', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  status?: int32(name='Status', position='Query'),
  tmName?: string(name='TmName', position='Query'),
  tmNumber?: string(name='TmNumber', position='Query'),
  type?: int32(name='Type', position='Query'),
  userId?: string(name='UserId', position='Query'),
}

model QueryProduceListResponseBody = {
  currentPageNum?: int32(name='CurrentPageNum'),
  data?: {
    tmProduces?: [ 
    {
      agreementId?: string(name='AgreementId'),
      bizId?: string(name='BizId'),
      classification?: {
        classificationCode?: string(name='ClassificationCode'),
        classificationName?: string(name='ClassificationName'),
      }(name='Classification'),
      createTime?: long(name='CreateTime'),
      loaUrl?: string(name='LoaUrl'),
      materialName?: string(name='MaterialName'),
      note?: string(name='Note'),
      orderId?: string(name='OrderId'),
      orderPrice?: float(name='OrderPrice'),
      principalName?: int32(name='PrincipalName'),
      receiptUrl?: string(name='ReceiptUrl'),
      status?: int32(name='Status'),
      submitCount?: int32(name='SubmitCount'),
      tmIcon?: string(name='TmIcon'),
      tmName?: string(name='TmName'),
      tmNumber?: string(name='TmNumber'),
      type?: int32(name='Type'),
      updateTime?: long(name='UpdateTime'),
      userId?: string(name='UserId'),
    }
  ](name='TmProduces')
  }(name='Data'),
  nextPage?: boolean(name='NextPage'),
  pageSize?: int32(name='PageSize'),
  prePage?: boolean(name='PrePage'),
  requestId?: string(name='RequestId'),
  totalItemNum?: int32(name='TotalItemNum'),
  totalPageNum?: int32(name='TotalPageNum'),
}

model QueryProduceListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryProduceListResponseBody(name='body'),
}

async function queryProduceList(request: QueryProduceListRequest): QueryProduceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryProduceList', 'POST', '/', 'json', false, 'json', request);
}

model QueryQrCodeUploadStatusRequest {
  fieldKey?: string(name='FieldKey', position='Query'),
  ossKey?: string(name='OssKey', position='Query'),
  uuid?: string(name='Uuid', position='Query'),
}

model QueryQrCodeUploadStatusResponseBody = {
  ossKey?: string(name='OssKey'),
  ossUrl?: string(name='OssUrl'),
  requestId?: string(name='RequestId'),
  status?: int32(name='Status'),
  success?: boolean(name='Success'),
}

model QueryQrCodeUploadStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryQrCodeUploadStatusResponseBody(name='body'),
}

async function queryQrCodeUploadStatus(request: QueryQrCodeUploadStatusRequest): QueryQrCodeUploadStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryQrCodeUploadStatus', 'POST', '/', 'json', false, 'json', request);
}

model QuerySbjRuleRequest {
  bizType?: string(name='BizType', position='Query'),
  ruleId?: string(name='RuleId', position='Query'),
}

model QuerySbjRuleResponseBody = {
  bizType?: string(name='BizType'),
  requestId?: string(name='RequestId'),
  ruleId?: string(name='RuleId'),
  sbjRuleList?: {
    sbjRuleItem?: [ 
    {
      defaultValue?: string(name='DefaultValue'),
      espExtFieldName?: string(name='EspExtFieldName'),
      fieldName?: string(name='FieldName'),
      fileType?: string(name='FileType'),
      frontendOptions?: {
        frontendOption?: [ 
        {
          title?: string(name='title'),
          value?: string(name='value'),
        }
      ](name='FrontendOption')
      }(name='FrontendOptions'),
      frontendType?: string(name='FrontendType'),
      requiredExpression?: string(name='RequiredExpression'),
      sbjFieldId?: string(name='SbjFieldId'),
      showExpression?: string(name='ShowExpression'),
      trademarkServiceExpression?: string(name='TrademarkServiceExpression'),
      validateRegularExpression?: string(name='ValidateRegularExpression'),
    }
  ](name='SbjRuleItem')
  }(name='SbjRuleList'),
}

model QuerySbjRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySbjRuleResponseBody(name='body'),
}

async function querySbjRule(request: QuerySbjRuleRequest): QuerySbjRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySbjRule', 'POST', '/', 'json', false, 'json', request);
}

model QuerySupplementDetailRequest {
  id: long(name='Id', position='Query'),
}

model QuerySupplementDetailResponseBody = {
  acceptDeadTime?: long(name='AcceptDeadTime'),
  acceptTime?: long(name='AcceptTime'),
  content?: string(name='Content'),
  fileName?: string(name='FileName'),
  fileTemplateUrls?: {
    fileTemplateUrls?: [ string ](name='FileTemplateUrls')
  }(name='FileTemplateUrls'),
  id?: long(name='Id'),
  operateTime?: long(name='OperateTime'),
  reason?: string(name='Reason'),
  requestId?: string(name='RequestId'),
  sbjDeadTime?: long(name='SbjDeadTime'),
  sendTime?: long(name='SendTime'),
  serialNumber?: string(name='SerialNumber'),
  status?: int32(name='Status'),
  tmNumber?: string(name='TmNumber'),
  type?: int32(name='Type'),
  uploadFileTemplateUrl?: string(name='UploadFileTemplateUrl'),
}

model QuerySupplementDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySupplementDetailResponseBody(name='body'),
}

async function querySupplementDetail(request: QuerySupplementDetailRequest): QuerySupplementDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySupplementDetail', 'POST', '/', 'json', false, 'json', request);
}

model QueryTaskListRequest {
  bizType: string(name='BizType', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model QueryTaskListResponseBody = {
  currentPageNum?: int32(name='CurrentPageNum'),
  data?: {
    taskList?: [ 
    {
      completeTime?: long(name='CompleteTime'),
      createTime?: long(name='CreateTime'),
      errMsg?: string(name='ErrMsg'),
      fileName?: string(name='FileName'),
      result?: string(name='Result'),
      taskStatus?: string(name='TaskStatus'),
      taskType?: string(name='TaskType'),
    }
  ](name='TaskList')
  }(name='Data'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalItemNum?: int32(name='TotalItemNum'),
  totalPageNum?: int32(name='TotalPageNum'),
}

model QueryTaskListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTaskListResponseBody(name='body'),
}

async function queryTaskList(request: QueryTaskListRequest): QueryTaskListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTaskList', 'POST', '/', 'json', false, 'json', request);
}

model QueryTmCollectionPageListRequest {
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model QueryTmCollectionPageListResponseBody = {
  currentPageNum?: int32(name='CurrentPageNum'),
  data?: {
    trademark?: [ 
    {
      classification?: string(name='Classification'),
      collected?: boolean(name='Collected'),
      collectionContent?: string(name='CollectionContent'),
      id?: long(name='Id'),
      itemId?: string(name='ItemId'),
      tmName?: string(name='TmName'),
    }
  ](name='Trademark')
  }(name='Data'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalItemNum?: int32(name='TotalItemNum'),
  totalPageNum?: int32(name='TotalPageNum'),
}

model QueryTmCollectionPageListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTmCollectionPageListResponseBody(name='body'),
}

async function queryTmCollectionPageList(request: QueryTmCollectionPageListRequest): QueryTmCollectionPageListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTmCollectionPageList', 'POST', '/', 'json', false, 'json', request);
}

model QueryTmSbjProduceRequest {
  highPriorityBizTypeStr?: string(name='HighPriorityBizTypeStr', position='Query'),
  highPriorityMaterialNameStr?: string(name='HighPriorityMaterialNameStr', position='Query'),
  highPriorityOrderIdStr?: string(name='HighPriorityOrderIdStr', position='Query'),
  highPriorityUserIdStr?: string(name='HighPriorityUserIdStr', position='Query'),
  principalKey?: string(name='PrincipalKey', position='Query'),
  principalName?: string(name='PrincipalName', position='Query'),
  producerType?: string(name='ProducerType', position='Query'),
  queryOrderPageSize?: long(name='QueryOrderPageSize', position='Query'),
}

model QueryTmSbjProduceResponseBody = {
  moudle?: {
    tmSbjProduceList?: [ 
    {
      bitFlag?: long(name='BitFlag'),
      bizId?: string(name='BizId'),
      classificationCode?: string(name='ClassificationCode'),
      deleteFlag?: string(name='DeleteFlag'),
      env?: string(name='Env'),
      extend?: {
        bid?: long(name='Bid'),
        blackIcon?: boolean(name='BlackIcon'),
        loaOssKey?: string(name='LoaOssKey'),
        logoGoodsId?: string(name='LogoGoodsId'),
        materialId?: string(name='MaterialId'),
        submitCount?: long(name='SubmitCount'),
        tmNametype?: long(name='TmNametype'),
      }(name='Extend'),
      loaId?: long(name='LoaId'),
      mainOrderId?: string(name='MainOrderId'),
      materialId?: long(name='MaterialId'),
      materialName?: string(name='MaterialName'),
      orderId?: string(name='OrderId'),
      orderPrice?: float(name='OrderPrice'),
      principalKey?: string(name='PrincipalKey'),
      principalName?: string(name='PrincipalName'),
      productType?: string(name='ProductType'),
      riskSource?: string(name='RiskSource'),
      status?: string(name='Status'),
      submitAuditTime?: long(name='SubmitAuditTime'),
      submitStatus?: string(name='SubmitStatus'),
      submitTime?: long(name='SubmitTime'),
      submitTimes?: long(name='SubmitTimes'),
      tmCode?: string(name='TmCode'),
      tmIcon?: string(name='TmIcon'),
      tmName?: string(name='TmName'),
      type?: string(name='Type'),
      userId?: string(name='UserId'),
    }
  ](name='TmSbjProduceList')
  }(name='Moudle'),
  requestId?: string(name='RequestId'),
}

model QueryTmSbjProduceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTmSbjProduceResponseBody(name='body'),
}

async function queryTmSbjProduce(request: QueryTmSbjProduceRequest): QueryTmSbjProduceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTmSbjProduce', 'POST', '/', 'json', false, 'json', request);
}

model QueryTmSbjProduceDetailRequest {
  bizId?: string(name='BizId', position='Query'),
  orderId?: string(name='OrderId', position='Query'),
}

model QueryTmSbjProduceDetailResponseBody = {
  acceptUrl?: string(name='AcceptUrl'),
  bizId?: string(name='BizId'),
  cnInfoUrl?: string(name='CnInfoUrl'),
  extendInfo?: map[string]any(name='ExtendInfo'),
  flags?: {
    flags?: [ string ](name='Flags')
  }(name='Flags'),
  grayIconUrl?: string(name='GrayIconUrl'),
  issueDate?: string(name='IssueDate'),
  leafCodes?: {
    leafCodes?: [ 
    {
      code?: string(name='Code'),
      name?: string(name='Name'),
    }
  ](name='LeafCodes')
  }(name='LeafCodes'),
  loaUrl?: string(name='LoaUrl'),
  materialDetail?: {
    address?: string(name='Address'),
    businessLicenceUrl?: string(name='BusinessLicenceUrl'),
    cardNumber?: string(name='CardNumber'),
    city?: string(name='City'),
    contactAddress?: string(name='ContactAddress'),
    contactEmail?: string(name='ContactEmail'),
    contactName?: string(name='ContactName'),
    contactNumber?: string(name='ContactNumber'),
    contactProvince?: string(name='ContactProvince'),
    contactZipcode?: string(name='ContactZipcode'),
    country?: string(name='Country'),
    detailedContactAddress?: string(name='DetailedContactAddress'),
    eAddress?: string(name='EAddress'),
    eName?: string(name='EName'),
    expirationDate?: string(name='ExpirationDate'),
    idCardNumber?: string(name='IdCardNumber'),
    idCardUrl?: string(name='IdCardUrl'),
    loaUrl?: string(name='LoaUrl'),
    name?: string(name='Name'),
    passportUrl?: string(name='PassportUrl'),
    personalType?: int32(name='PersonalType'),
    province?: string(name='Province'),
    region?: int32(name='Region'),
    status?: int32(name='Status'),
    town?: string(name='Town'),
    type?: int32(name='Type'),
  }(name='MaterialDetail'),
  materialName?: string(name='MaterialName'),
  note?: string(name='Note'),
  orderId?: string(name='OrderId'),
  principalName?: int32(name='PrincipalName'),
  requestId?: string(name='RequestId'),
  rootCode?: {
    code?: string(name='Code'),
    name?: string(name='Name'),
  }(name='RootCode'),
  status?: int32(name='Status'),
  submitCount?: int32(name='SubmitCount'),
  submitStatus?: string(name='SubmitStatus'),
  tmIcon?: string(name='TmIcon'),
  tmName?: string(name='TmName'),
  tmNameType?: int32(name='TmNameType'),
  tmNumber?: string(name='TmNumber'),
  tmOrderId?: string(name='TmOrderId'),
  type?: int32(name='Type'),
}

model QueryTmSbjProduceDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTmSbjProduceDetailResponseBody(name='body'),
}

async function queryTmSbjProduceDetail(request: QueryTmSbjProduceDetailRequest): QueryTmSbjProduceDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTmSbjProduceDetail', 'POST', '/', 'json', false, 'json', request);
}

model QueryTradeIntentionUserListRequest {
  begin?: long(name='Begin', position='Query'),
  bizId?: string(name='BizId', position='Query'),
  end?: long(name='End', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  status?: int32(name='Status', position='Query'),
  type?: int32(name='Type', position='Query'),
}

model QueryTradeIntentionUserListResponseBody = {
  currentPageNum?: int32(name='CurrentPageNum'),
  data?: {
    trademark?: [ 
    {
      bizId?: string(name='BizId'),
      classification?: string(name='Classification'),
      description?: string(name='Description'),
      documentDate?: string(name='DocumentDate'),
      documentName?: string(name='DocumentName'),
      documentUrl?: string(name='DocumentUrl'),
      grade?: int32(name='Grade'),
      mobile?: string(name='Mobile'),
      registerNumber?: string(name='RegisterNumber'),
      status?: int32(name='Status'),
      type?: int32(name='Type'),
      userName?: string(name='UserName'),
    }
  ](name='Trademark')
  }(name='Data'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalItemNum?: int32(name='TotalItemNum'),
  totalPageNum?: int32(name='TotalPageNum'),
}

model QueryTradeIntentionUserListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTradeIntentionUserListResponseBody(name='body'),
}

async function queryTradeIntentionUserList(request: QueryTradeIntentionUserListRequest): QueryTradeIntentionUserListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTradeIntentionUserList', 'POST', '/', 'json', false, 'json', request);
}

model QueryTradeMarkApplicationDetailRequest {
  bizId?: string(name='BizId', position='Query'),
}

model QueryTradeMarkApplicationDetailResponseBody = {
  acceptUrl?: string(name='AcceptUrl'),
  adminUploads?: {
    licensePicUrl?: string(name='LicensePicUrl'),
    loaPicUrl?: string(name='LoaPicUrl'),
  }(name='AdminUploads'),
  bizId?: string(name='BizId'),
  createTime?: long(name='CreateTime'),
  extendInfo?: map[string]any(name='ExtendInfo'),
  firstClassification?: {
    code?: string(name='Code'),
    name?: string(name='Name'),
  }(name='FirstClassification'),
  flags?: {
    flag?: [ int32 ](name='Flag')
  }(name='Flags'),
  grayIconUrl?: string(name='GrayIconUrl'),
  judgeResultUrl?: {
    judgeResultUrl?: [ string ](name='JudgeResultUrl')
  }(name='JudgeResultUrl'),
  legalNoticeUrl?: string(name='LegalNoticeUrl'),
  loaUrl?: string(name='LoaUrl'),
  logisticsCertificateUrl?: string(name='LogisticsCertificateUrl'),
  logisticsNo?: string(name='LogisticsNo'),
  materialDetail?: {
    address?: string(name='Address'),
    businessLicenceUrl?: string(name='BusinessLicenceUrl'),
    cardNumber?: string(name='CardNumber'),
    city?: string(name='City'),
    contactAddress?: string(name='ContactAddress'),
    contactCity?: string(name='ContactCity'),
    contactDistrict?: string(name='ContactDistrict'),
    contactEmail?: string(name='ContactEmail'),
    contactName?: string(name='ContactName'),
    contactNumber?: string(name='ContactNumber'),
    contactProvince?: string(name='ContactProvince'),
    contactZipcode?: string(name='ContactZipcode'),
    country?: string(name='Country'),
    detailedContactAddress?: string(name='DetailedContactAddress'),
    eAddress?: string(name='EAddress'),
    eName?: string(name='EName'),
    expirationDate?: string(name='ExpirationDate'),
    factAndReasonPdfPath?: string(name='FactAndReasonPdfPath'),
    idCardName?: string(name='IdCardName'),
    idCardNumber?: string(name='IdCardNumber'),
    idCardUrl?: string(name='IdCardUrl'),
    legalNoticeUrl?: string(name='LegalNoticeUrl'),
    loaUrl?: string(name='LoaUrl'),
    materialVersion?: string(name='MaterialVersion'),
    name?: string(name='Name'),
    passportUrl?: string(name='PassportUrl'),
    personalType?: long(name='PersonalType'),
    principalName?: int32(name='PrincipalName'),
    province?: string(name='Province'),
    region?: int32(name='Region'),
    reviewAdditionalFiles?: {
      reviewAdditionalFile?: [ string ](name='ReviewAdditionalFile')
    }(name='ReviewAdditionalFiles'),
    reviewApplicationFile?: string(name='ReviewApplicationFile'),
    status?: int32(name='Status'),
    supplementEvidenceCatalogFile?: string(name='SupplementEvidenceCatalogFile'),
    supplementEvidenceMaterialFile?: string(name='SupplementEvidenceMaterialFile'),
    supplementReasonFile?: string(name='SupplementReasonFile'),
    town?: string(name='Town'),
    type?: int32(name='Type'),
  }(name='MaterialDetail'),
  materialId?: long(name='MaterialId'),
  notAcceptUrl?: string(name='NotAcceptUrl'),
  note?: string(name='Note'),
  orderId?: string(name='OrderId'),
  orderPrice?: float(name='OrderPrice'),
  partnerCode?: string(name='PartnerCode'),
  partnerMobile?: string(name='PartnerMobile'),
  partnerName?: string(name='PartnerName'),
  principalName?: int32(name='PrincipalName'),
  receiptUrl?: {
    receiptUrl?: [ string ](name='ReceiptUrl')
  }(name='ReceiptUrl'),
  recvUserLogistics?: string(name='RecvUserLogistics'),
  renewResponse?: {
    address?: string(name='Address'),
    engAddress?: string(name='EngAddress'),
    engName?: string(name='EngName'),
    name?: string(name='Name'),
    registerTime?: long(name='RegisterTime'),
    submitSbjtime?: long(name='SubmitSbjtime'),
  }(name='RenewResponse'),
  requestId?: string(name='RequestId'),
  reviewOfficialFiles?: {
    reviewAudit?: string(name='ReviewAudit'),
    reviewKeep?: string(name='ReviewKeep'),
    reviewPart?: string(name='ReviewPart'),
    reviewPass?: string(name='ReviewPass'),
    reviewSupplements?: {
      reviewSupplement?: [ string ](name='ReviewSupplement')
    }(name='ReviewSupplements'),
  }(name='ReviewOfficialFiles'),
  sendSbjLogistics?: string(name='SendSbjLogistics'),
  sendTime?: string(name='SendTime'),
  sendUserLogistics?: string(name='SendUserLogistics'),
  servicePrice?: float(name='ServicePrice'),
  specification?: int32(name='Specification'),
  status?: int32(name='Status'),
  submitAuditTime?: long(name='SubmitAuditTime'),
  submitTime?: long(name='SubmitTime'),
  supplements?: {
    supplements?: [ 
    {
      acceptDeadTime?: long(name='AcceptDeadTime'),
      acceptTime?: long(name='AcceptTime'),
      batchNum?: string(name='BatchNum'),
      content?: string(name='Content'),
      fileTemplateUrls?: {
        fileTemplateUrls?: [ string ](name='FileTemplateUrls')
      }(name='FileTemplateUrls'),
      filename?: string(name='Filename'),
      id?: long(name='Id'),
      operateTime?: long(name='OperateTime'),
      orderId?: string(name='OrderId'),
      sbjDeadTime?: long(name='SbjDeadTime'),
      sendTime?: long(name='SendTime'),
      serialNumber?: string(name='SerialNumber'),
      status?: int32(name='Status'),
      tmNumber?: string(name='TmNumber'),
      type?: int32(name='Type'),
      uploadFileTemplateUrl?: string(name='UploadFileTemplateUrl'),
    }
  ](name='Supplements')
  }(name='Supplements'),
  systemVersion?: string(name='SystemVersion'),
  thirdClassification?: {
    thirdClassifications?: [ 
    {
      code?: string(name='Code'),
      name?: string(name='Name'),
    }
  ](name='ThirdClassifications')
  }(name='ThirdClassification'),
  tmIcon?: string(name='TmIcon'),
  tmName?: string(name='TmName'),
  tmNameType?: int32(name='TmNameType'),
  tmNumber?: string(name='TmNumber'),
  totalPrice?: float(name='TotalPrice'),
  type?: int32(name='Type'),
  updateTime?: long(name='UpdateTime'),
}

model QueryTradeMarkApplicationDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTradeMarkApplicationDetailResponseBody(name='body'),
}

async function queryTradeMarkApplicationDetail(request: QueryTradeMarkApplicationDetailRequest): QueryTradeMarkApplicationDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTradeMarkApplicationDetail', 'POST', '/', 'json', false, 'json', request);
}

model QueryTradeMarkApplicationLogsRequest {
  bizId: string(name='BizId', position='Query'),
}

model QueryTradeMarkApplicationLogsResponseBody = {
  data?: {
    data?: [ 
    {
      bizId?: string(name='BizId'),
      bizStatus?: int32(name='BizStatus'),
      extendContent?: string(name='ExtendContent'),
      note?: string(name='Note'),
      operateTime?: long(name='OperateTime'),
      operateType?: int32(name='OperateType'),
      toBizStatus?: int32(name='ToBizStatus'),
    }
  ](name='Data')
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model QueryTradeMarkApplicationLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTradeMarkApplicationLogsResponseBody(name='body'),
}

async function queryTradeMarkApplicationLogs(request: QueryTradeMarkApplicationLogsRequest): QueryTradeMarkApplicationLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTradeMarkApplicationLogs', 'POST', '/', 'json', false, 'json', request);
}

model QueryTradeMarkApplicationsRequest {
  bizId?: string(name='BizId', position='Query'),
  classificationCode?: string(name='ClassificationCode', maxLength=2, position='Query'),
  hidden?: int32(name='Hidden', position='Query'),
  intentionBizId?: string(name='IntentionBizId', position='Query'),
  logisticsNo?: string(name='LogisticsNo', maxLength=50, position='Query'),
  materialName?: string(name='MaterialName', position='Query'),
  orderId?: string(name='OrderId', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  productType?: int32(name='ProductType', minimum=1, maximum=100, position='Query'),
  sortFiled?: string(name='SortFiled', position='Query'),
  sortOrder?: string(name='SortOrder', position='Query'),
  specification?: int32(name='Specification', position='Query'),
  status?: int32(name='Status', position='Query'),
  supplementStatus?: int32(name='SupplementStatus', position='Query'),
  tmName?: string(name='TmName', position='Query'),
  tmNumber?: string(name='TmNumber', position='Query'),
  type?: string(name='Type', position='Query'),
}

model QueryTradeMarkApplicationsResponseBody = {
  currentPageNum?: int32(name='CurrentPageNum'),
  data?: {
    tmProduces?: [ 
    {
      agreementId?: string(name='AgreementId'),
      bizId?: string(name='BizId'),
      createTime?: long(name='CreateTime'),
      firstClassification?: {
        classificationCode?: string(name='ClassificationCode'),
        classificationName?: string(name='ClassificationName'),
      }(name='FirstClassification'),
      flags?: {
        flags?: [ string ](name='Flags')
      }(name='Flags'),
      loaUrl?: string(name='LoaUrl'),
      materialId?: long(name='MaterialId'),
      materialName?: string(name='MaterialName'),
      note?: string(name='Note'),
      orderId?: string(name='OrderId'),
      orderPrice?: float(name='OrderPrice'),
      principalName?: int32(name='PrincipalName'),
      remark?: string(name='Remark'),
      renewResponse?: {
        address?: string(name='Address'),
        engAddress?: string(name='EngAddress'),
        engName?: string(name='EngName'),
        name?: string(name='Name'),
        registerTime?: long(name='RegisterTime'),
        submitSbjtime?: long(name='SubmitSbjtime'),
      }(name='RenewResponse'),
      servicePrice?: float(name='ServicePrice'),
      showGoToDefendButton?: boolean(name='ShowGoToDefendButton'),
      specification: int32(name='Specification'),
      status?: int32(name='Status'),
      submitAuditTime?: long(name='SubmitAuditTime'),
      submitTime?: long(name='SubmitTime'),
      supplementId?: long(name='SupplementId'),
      supplementStatus?: int32(name='SupplementStatus'),
      systemVersion?: string(name='SystemVersion'),
      thirdClassification?: {
        thirdClassifications?: [ 
        {
          classificationCode?: string(name='ClassificationCode'),
          classificationName?: string(name='ClassificationName'),
        }
      ](name='ThirdClassifications')
      }(name='ThirdClassification'),
      tmIcon?: string(name='TmIcon'),
      tmName?: string(name='TmName'),
      tmNumber?: string(name='TmNumber'),
      totalPrice?: float(name='TotalPrice'),
      type?: int32(name='Type'),
      updateTime?: long(name='UpdateTime'),
      userId?: string(name='UserId'),
    }
  ](name='TmProduces')
  }(name='Data'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalItemNum?: int32(name='TotalItemNum'),
  totalPageNum?: int32(name='TotalPageNum'),
}

model QueryTradeMarkApplicationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTradeMarkApplicationsResponseBody(name='body'),
}

async function queryTradeMarkApplications(request: QueryTradeMarkApplicationsRequest): QueryTradeMarkApplicationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTradeMarkApplications', 'POST', '/', 'json', false, 'json', request);
}

model QueryTradeMarkApplicationsByIntentionRequest {
  channel?: string(name='Channel', position='Query'),
  intentionBizId: string(name='IntentionBizId', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  tmProduceStatus?: string(name='TmProduceStatus', position='Query'),
}

model QueryTradeMarkApplicationsByIntentionResponseBody = {
  currentPageNum?: int32(name='CurrentPageNum'),
  data?: {
    tmProduces?: [ 
    {
      bizId?: string(name='BizId'),
      createTime?: long(name='CreateTime'),
      firstClassification?: {
        classificationCode?: string(name='ClassificationCode'),
        classificationName?: string(name='ClassificationName'),
      }(name='FirstClassification'),
      loaUrl?: string(name='LoaUrl'),
      materialId?: string(name='MaterialId'),
      materialName?: string(name='MaterialName'),
      note?: string(name='Note'),
      orderPrice?: float(name='OrderPrice'),
      principalDescription?: string(name='PrincipalDescription'),
      principalValue?: int32(name='PrincipalValue'),
      servicePrice?: float(name='ServicePrice'),
      status?: int32(name='Status'),
      supplementId?: long(name='SupplementId'),
      supplementStatus?: int32(name='SupplementStatus'),
      thirdClassification?: {
        thirdClassifications?: [ 
        {
          classificationCode?: string(name='ClassificationCode'),
          classificationName?: string(name='ClassificationName'),
        }
      ](name='ThirdClassifications')
      }(name='ThirdClassification'),
      tmIcon?: string(name='TmIcon'),
      tmName?: string(name='TmName'),
      tmNumber?: string(name='TmNumber'),
      totalPrice?: float(name='TotalPrice'),
      type?: int32(name='Type'),
      updateTime?: long(name='UpdateTime'),
    }
  ](name='TmProduces')
  }(name='Data'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalItemNum?: int32(name='TotalItemNum'),
  totalPageNum?: int32(name='TotalPageNum'),
}

model QueryTradeMarkApplicationsByIntentionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTradeMarkApplicationsByIntentionResponseBody(name='body'),
}

async function queryTradeMarkApplicationsByIntention(request: QueryTradeMarkApplicationsByIntentionRequest): QueryTradeMarkApplicationsByIntentionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTradeMarkApplicationsByIntention', 'POST', '/', 'json', false, 'json', request);
}

model QueryTradeProduceDetailRequest {
  bizId?: string(name='BizId', position='Query'),
}

model QueryTradeProduceDetailResponseBody = {
  data?: {
    allowCancel?: boolean(name='AllowCancel'),
    bizId?: string(name='BizId'),
    buyerStatus?: int32(name='BuyerStatus'),
    classification?: string(name='Classification'),
    confiscateAmount?: float(name='ConfiscateAmount'),
    createTime?: long(name='CreateTime'),
    exclusiveDateLimit?: string(name='ExclusiveDateLimit'),
    extend?: map[string]any(name='Extend'),
    finalAmount?: float(name='FinalAmount'),
    icon?: string(name='Icon'),
    operateNote?: string(name='OperateNote'),
    paidAmount?: float(name='PaidAmount'),
    preAmount?: float(name='PreAmount'),
    preOrderId?: string(name='PreOrderId'),
    refundAmount?: float(name='RefundAmount'),
    registerNumber?: string(name='RegisterNumber'),
    share?: string(name='Share'),
    source?: int32(name='Source'),
    thirdCode?: string(name='ThirdCode'),
    tmName?: string(name='TmName'),
    updateTime?: long(name='UpdateTime'),
    userId?: string(name='UserId'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model QueryTradeProduceDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTradeProduceDetailResponseBody(name='body'),
}

async function queryTradeProduceDetail(request: QueryTradeProduceDetailRequest): QueryTradeProduceDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTradeProduceDetail', 'POST', '/', 'json', false, 'json', request);
}

model QueryTradeProduceListRequest {
  bizId?: string(name='BizId', position='Query'),
  buyerStatus?: int32(name='BuyerStatus', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  preOrderId?: string(name='PreOrderId', position='Query'),
  registerNumber?: string(name='RegisterNumber', position='Query'),
  sortFiled?: string(name='SortFiled', position='Query'),
  sortOrder?: string(name='SortOrder', position='Query'),
}

model QueryTradeProduceListResponseBody = {
  currentPageNum?: int32(name='CurrentPageNum'),
  data?: {
    tradeProduces?: [ 
    {
      allowCancel?: boolean(name='AllowCancel'),
      bizId?: string(name='BizId'),
      buyerStatus?: int32(name='BuyerStatus'),
      classification?: string(name='Classification'),
      createTime?: long(name='CreateTime'),
      failReason?: int32(name='FailReason'),
      finalAmount?: float(name='FinalAmount'),
      icon?: string(name='Icon'),
      operateNote?: string(name='OperateNote'),
      preAmount?: float(name='PreAmount'),
      preOrderId?: string(name='PreOrderId'),
      registerNumber?: string(name='RegisterNumber'),
      source?: int32(name='Source'),
      updateTime?: long(name='UpdateTime'),
      userId?: string(name='UserId'),
    }
  ](name='TradeProduces')
  }(name='Data'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalItemNum?: int32(name='TotalItemNum'),
  totalPageNum?: int32(name='TotalPageNum'),
}

model QueryTradeProduceListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTradeProduceListResponseBody(name='body'),
}

async function queryTradeProduceList(request: QueryTradeProduceListRequest): QueryTradeProduceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTradeProduceList', 'POST', '/', 'json', false, 'json', request);
}

model QueryTrademarkDetailByApplyNumberRequest {
  applyNumber?: string(name='ApplyNumber', position='Query'),
  env?: string(name='Env', position='Query'),
}

model QueryTrademarkDetailByApplyNumberResponseBody = {
  moudle?: {
    bitFlag?: int32(name='BitFlag'),
    bizId?: string(name='BizId'),
    bizType?: string(name='BizType'),
    extendInfo?: map[string]any(name='ExtendInfo'),
    grayIconUrl?: string(name='GrayIconUrl'),
    icon?: string(name='Icon'),
    leafCodes?: {
      leafCode?: [ 
      {
        classificationCode?: string(name='ClassificationCode'),
        classificationName?: string(name='ClassificationName'),
      }
    ](name='leafCode')
    }(name='LeafCodes'),
    materialInfo?: {
      address?: string(name='Address'),
      businessLicenceUrl?: string(name='BusinessLicenceUrl'),
      cardNumber?: string(name='CardNumber'),
      cnInfoUrl?: string(name='CnInfoUrl'),
      contactAddress?: string(name='ContactAddress'),
      contactEmail?: string(name='ContactEmail'),
      contactName?: string(name='ContactName'),
      contactPhoneNumber?: string(name='ContactPhoneNumber'),
      contactZipCode?: string(name='ContactZipCode'),
      country?: string(name='Country'),
      eAddress?: string(name='EAddress'),
      eName?: string(name='EName'),
      idCardNumber?: string(name='IdCardNumber'),
      idCardUrl?: string(name='IdCardUrl'),
      loaKey?: string(name='LoaKey'),
      loaUrl?: string(name='LoaUrl'),
      name?: string(name='Name'),
      passportUrl?: string(name='PassportUrl'),
      personalType?: int32(name='PersonalType'),
      postCode?: string(name='PostCode'),
      province?: string(name='Province'),
      reasonFileOssKey?: string(name='ReasonFileOssKey'),
      region?: int32(name='Region'),
      reviewFileMap?: map[string]any(name='ReviewFileMap'),
      type?: int32(name='Type'),
    }(name='MaterialInfo'),
    orderId?: string(name='OrderId'),
    partnerCode?: string(name='PartnerCode'),
    principalKey?: string(name='PrincipalKey'),
    principalName?: string(name='PrincipalName'),
    produceType?: string(name='ProduceType'),
    rootCode?: {
      classificationCode?: string(name='ClassificationCode'),
      classificationName?: string(name='ClassificationName'),
    }(name='RootCode'),
    status?: string(name='Status'),
    statusStr?: string(name='StatusStr'),
    submitAuditTimeStr?: string(name='SubmitAuditTimeStr'),
    submitAuditTimeValue?: long(name='SubmitAuditTimeValue'),
    submitStatus?: string(name='SubmitStatus'),
    submitTimeStr?: string(name='SubmitTimeStr'),
    submitTimeValue?: long(name='SubmitTimeValue'),
    submitTimes?: int32(name='SubmitTimes'),
    trademarkName?: string(name='TrademarkName'),
    trademarkNameType?: int32(name='TrademarkNameType'),
    trademarkNumber?: string(name='TrademarkNumber'),
  }(name='Moudle'),
  requestId?: string(name='RequestId'),
}

model QueryTrademarkDetailByApplyNumberResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTrademarkDetailByApplyNumberResponseBody(name='body'),
}

async function queryTrademarkDetailByApplyNumber(request: QueryTrademarkDetailByApplyNumberRequest): QueryTrademarkDetailByApplyNumberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTrademarkDetailByApplyNumber', 'POST', '/', 'json', false, 'json', request);
}

model QueryTrademarkDetailByApplyNumberEspRequest {
  applyNumber?: string(name='ApplyNumber', position='Query'),
  bizType?: string(name='BizType', position='Query'),
}

model QueryTrademarkDetailByApplyNumberEspResponseBody = {
  moudle?: {
    bitFlag?: int32(name='BitFlag'),
    bizId?: string(name='BizId'),
    bizType?: string(name='BizType'),
    extendInfo?: map[string]any(name='ExtendInfo'),
    grayIconUrl?: string(name='GrayIconUrl'),
    icon?: string(name='Icon'),
    leafCodes?: {
      leafCode?: [ 
      {
        classificationCode?: string(name='ClassificationCode'),
        classificationName?: string(name='ClassificationName'),
      }
    ](name='leafCode')
    }(name='LeafCodes'),
    materialInfo?: {
      address?: string(name='Address'),
      businessLicenceUrl?: string(name='BusinessLicenceUrl'),
      cardNumber?: string(name='CardNumber'),
      cnInfoUrl?: string(name='CnInfoUrl'),
      contactAddress?: string(name='ContactAddress'),
      contactEmail?: string(name='ContactEmail'),
      contactName?: string(name='ContactName'),
      contactPhoneNumber?: string(name='ContactPhoneNumber'),
      contactZipCode?: string(name='ContactZipCode'),
      country?: string(name='Country'),
      eAddress?: string(name='EAddress'),
      eName?: string(name='EName'),
      idCardNumber?: string(name='IdCardNumber'),
      idCardUrl?: string(name='IdCardUrl'),
      loaKey?: string(name='LoaKey'),
      loaUrl?: string(name='LoaUrl'),
      name?: string(name='Name'),
      passportUrl?: string(name='PassportUrl'),
      personalType?: int32(name='PersonalType'),
      postCode?: string(name='PostCode'),
      province?: string(name='Province'),
      reasonFileOssKey?: string(name='ReasonFileOssKey'),
      region?: int32(name='Region'),
      reviewFileMap?: map[string]any(name='ReviewFileMap'),
      type?: int32(name='Type'),
    }(name='MaterialInfo'),
    orderId?: string(name='OrderId'),
    partnerCode?: string(name='PartnerCode'),
    principalKey?: string(name='PrincipalKey'),
    principalName?: string(name='PrincipalName'),
    produceType?: string(name='ProduceType'),
    rootCode?: {
      classificationCode?: string(name='ClassificationCode'),
      classificationName?: string(name='ClassificationName'),
    }(name='RootCode'),
    status?: string(name='Status'),
    statusStr?: string(name='StatusStr'),
    submitAuditTimeStr?: string(name='SubmitAuditTimeStr'),
    submitAuditTimeValue?: long(name='SubmitAuditTimeValue'),
    submitStatus?: string(name='SubmitStatus'),
    submitTimeStr?: string(name='SubmitTimeStr'),
    submitTimeValue?: long(name='SubmitTimeValue'),
    submitTimes?: int32(name='SubmitTimes'),
    trademarkName?: string(name='TrademarkName'),
    trademarkNameType?: int32(name='TrademarkNameType'),
    trademarkNumber?: string(name='TrademarkNumber'),
  }(name='Moudle'),
  requestId?: string(name='RequestId'),
}

model QueryTrademarkDetailByApplyNumberEspResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTrademarkDetailByApplyNumberEspResponseBody(name='body'),
}

async function queryTrademarkDetailByApplyNumberEsp(request: QueryTrademarkDetailByApplyNumberEspRequest): QueryTrademarkDetailByApplyNumberEspResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTrademarkDetailByApplyNumberEsp', 'POST', '/', 'json', false, 'json', request);
}

model QueryTrademarkModelDetailRequest {
  bizId?: string(name='BizId', position='Query'),
  env?: string(name='Env', position='Query'),
  orderId?: string(name='OrderId', position='Query'),
  reviewSupplementMaterial?: boolean(name='ReviewSupplementMaterial', position='Query'),
}

model QueryTrademarkModelDetailResponseBody = {
  moudle?: {
    bitFlag?: int32(name='BitFlag'),
    bizId?: string(name='BizId'),
    bizType?: string(name='BizType'),
    extendInfo?: map[string]any(name='ExtendInfo'),
    grayIconUrl?: string(name='GrayIconUrl'),
    icon?: string(name='Icon'),
    leafCodes?: {
      leafCode?: [ 
      {
        classificationCode?: string(name='ClassificationCode'),
        classificationName?: string(name='ClassificationName'),
      }
    ](name='leafCode')
    }(name='LeafCodes'),
    materialInfo?: {
      address?: string(name='Address'),
      businessLicenceUrl?: string(name='BusinessLicenceUrl'),
      cardNumber?: string(name='CardNumber'),
      cnInfoUrl?: string(name='CnInfoUrl'),
      contactAddress?: string(name='ContactAddress'),
      contactEmail?: string(name='ContactEmail'),
      contactName?: string(name='ContactName'),
      contactPhoneNumber?: string(name='ContactPhoneNumber'),
      contactZipCode?: string(name='ContactZipCode'),
      country?: string(name='Country'),
      eAddress?: string(name='EAddress'),
      eName?: string(name='EName'),
      idCardNumber?: string(name='IdCardNumber'),
      idCardUrl?: string(name='IdCardUrl'),
      loaKey?: string(name='LoaKey'),
      loaUrl?: string(name='LoaUrl'),
      name?: string(name='Name'),
      passportUrl?: string(name='PassportUrl'),
      personalType?: int32(name='PersonalType'),
      postCode?: string(name='PostCode'),
      province?: string(name='Province'),
      reasonFileOssKey?: string(name='ReasonFileOssKey'),
      region?: int32(name='Region'),
      reviewFileMap?: map[string]any(name='ReviewFileMap'),
      type?: int32(name='Type'),
    }(name='MaterialInfo'),
    orderId?: string(name='OrderId'),
    partnerCode?: string(name='PartnerCode'),
    principalKey?: string(name='PrincipalKey'),
    principalName?: string(name='PrincipalName'),
    produceType?: string(name='ProduceType'),
    requestId?: string(name='RequestId'),
    rootCode?: {
      classificationCode?: string(name='ClassificationCode'),
      classificationName?: string(name='ClassificationName'),
    }(name='RootCode'),
    status?: string(name='Status'),
    statusStr?: string(name='StatusStr'),
    submitAuditTimeStr?: string(name='SubmitAuditTimeStr'),
    submitAuditTimeValue?: long(name='SubmitAuditTimeValue'),
    submitStatus?: string(name='SubmitStatus'),
    submitTimeStr?: string(name='SubmitTimeStr'),
    submitTimeValue?: long(name='SubmitTimeValue'),
    submitTimes?: int32(name='SubmitTimes'),
    trademarkName?: string(name='TrademarkName'),
    trademarkNameType?: int32(name='TrademarkNameType'),
    trademarkNumber?: string(name='TrademarkNumber'),
  }(name='Moudle'),
}

model QueryTrademarkModelDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTrademarkModelDetailResponseBody(name='body'),
}

async function queryTrademarkModelDetail(request: QueryTrademarkModelDetailRequest): QueryTrademarkModelDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTrademarkModelDetail', 'POST', '/', 'json', false, 'json', request);
}

model QueryTrademarkModelEspDetailRequest {
  bizId?: string(name='BizId', position='Query'),
  bizType?: string(name='BizType', position='Query'),
}

model QueryTrademarkModelEspDetailResponseBody = {
  moudle?: {
    bitFlag?: int32(name='BitFlag'),
    bizId?: string(name='BizId'),
    bizType?: string(name='BizType'),
    extendInfo?: map[string]any(name='ExtendInfo'),
    grayIconUrl?: string(name='GrayIconUrl'),
    icon?: string(name='Icon'),
    leafCodes?: {
      leafCode?: [ 
      {
        classificationCode?: string(name='ClassificationCode'),
        classificationName?: string(name='ClassificationName'),
      }
    ](name='leafCode')
    }(name='LeafCodes'),
    materialInfo?: {
      address?: string(name='Address'),
      businessLicenceUrl?: string(name='BusinessLicenceUrl'),
      cardNumber?: string(name='CardNumber'),
      cnInfoUrl?: string(name='CnInfoUrl'),
      contactAddress?: string(name='ContactAddress'),
      contactEmail?: string(name='ContactEmail'),
      contactZipCode?: string(name='ContactZipCode'),
      country?: string(name='Country'),
      eAddress?: string(name='EAddress'),
      eName?: string(name='EName'),
      idCardNumber?: string(name='IdCardNumber'),
      idCardUrl?: string(name='IdCardUrl'),
      loaKey?: string(name='LoaKey'),
      loaUrl?: string(name='LoaUrl'),
      name?: string(name='Name'),
      passportUrl?: string(name='PassportUrl'),
      personalType?: string(name='PersonalType'),
      postCode?: string(name='PostCode'),
      province?: string(name='Province'),
      reasonFileOssKey?: string(name='ReasonFileOssKey'),
      region?: int32(name='Region'),
      type?: int32(name='Type'),
    }(name='MaterialInfo'),
    orderId?: string(name='OrderId'),
    partnerCode?: string(name='PartnerCode'),
    principalKey?: string(name='PrincipalKey'),
    principalName?: string(name='PrincipalName'),
    produceType?: string(name='ProduceType'),
    requestId?: string(name='RequestId'),
    rootCode?: {
      classificationCode?: string(name='ClassificationCode'),
      classificationName?: string(name='ClassificationName'),
    }(name='RootCode'),
    status?: string(name='Status'),
    statusStr?: string(name='StatusStr'),
    submitAuditTime?: long(name='SubmitAuditTime'),
    submitStatus?: string(name='SubmitStatus'),
    submitTime?: long(name='SubmitTime'),
    submitTimes?: int32(name='SubmitTimes'),
    trademarkName?: string(name='TrademarkName'),
    trademarkNameType?: int32(name='TrademarkNameType'),
    trademarkNumber?: string(name='TrademarkNumber'),
  }(name='Moudle'),
}

model QueryTrademarkModelEspDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTrademarkModelEspDetailResponseBody(name='body'),
}

async function queryTrademarkModelEspDetail(request: QueryTrademarkModelEspDetailRequest): QueryTrademarkModelEspDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTrademarkModelEspDetail', 'POST', '/', 'json', false, 'json', request);
}

model QueryTrademarkModelEspListRequest {
  bizId?: string(name='BizId', position='Query'),
  bizType?: string(name='BizType', position='Query'),
  env?: string(name='Env', position='Query'),
  orderId?: string(name='OrderId', position='Query'),
  orderIdsStr?: string(name='OrderIdsStr', position='Query'),
  orderInstanceId?: string(name='OrderInstanceId', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  principalKey?: string(name='PrincipalKey', position='Query'),
  principalName?: string(name='PrincipalName', position='Query'),
  status?: string(name='Status', position='Query'),
  submitStatus?: string(name='SubmitStatus', position='Query'),
  submitTime?: string(name='SubmitTime', position='Query'),
}

model QueryTrademarkModelEspListResponseBody = {
  moudle?: {
    data?: {
      item?: [ 
      {
        bitFlag?: int32(name='BitFlag'),
        bizId?: string(name='BizId'),
        bizType?: string(name='BizType'),
        extendInfo?: map[string]any(name='ExtendInfo'),
        grayIconUrl?: string(name='GrayIconUrl'),
        icon?: string(name='Icon'),
        leafCodes?: {
          leafCode?: [ 
          {
            classificationCode?: string(name='ClassificationCode'),
            classificationName?: string(name='ClassificationName'),
          }
        ](name='leafCode')
        }(name='LeafCodes'),
        materialInfo?: {
          address?: string(name='Address'),
          businessLicenceUrl?: string(name='BusinessLicenceUrl'),
          cardNumber?: string(name='CardNumber'),
          cnInfoUrl?: string(name='CnInfoUrl'),
          contactAddress?: string(name='ContactAddress'),
          contactEmail?: string(name='ContactEmail'),
          contactZipCode?: string(name='ContactZipCode'),
          country?: string(name='Country'),
          eAddress?: string(name='EAddress'),
          eName?: string(name='EName'),
          idCardNumber?: string(name='IdCardNumber'),
          idCardUrl?: string(name='IdCardUrl'),
          loaKey?: string(name='LoaKey'),
          loaUrl?: string(name='LoaUrl'),
          name?: string(name='Name'),
          passportUrl?: string(name='PassportUrl'),
          personalType?: string(name='PersonalType'),
          postCode?: string(name='PostCode'),
          province?: string(name='Province'),
          reasonFileOssKey?: string(name='ReasonFileOssKey'),
          region?: int32(name='Region'),
          type?: int32(name='Type'),
        }(name='MaterialInfo'),
        orderId?: string(name='OrderId'),
        partnerCode?: string(name='PartnerCode'),
        principalKey?: string(name='PrincipalKey'),
        principalName?: string(name='PrincipalName'),
        produceType?: string(name='ProduceType'),
        rootCode?: {
          classificationCode?: string(name='ClassificationCode'),
          classificationName?: string(name='ClassificationName'),
        }(name='RootCode'),
        status?: string(name='Status'),
        statusStr?: string(name='StatusStr'),
        submitAuditTime?: long(name='SubmitAuditTime'),
        submitStatus?: string(name='SubmitStatus'),
        submitTime?: long(name='SubmitTime'),
        submitTimes?: int32(name='SubmitTimes'),
        trademarkName?: string(name='TrademarkName'),
        trademarkNameType?: int32(name='TrademarkNameType'),
        trademarkNumber?: string(name='TrademarkNumber'),
      }
    ](name='item')
    }(name='Data'),
    requestId?: string(name='RequestId'),
    totalPageNum?: int32(name='TotalPageNum'),
  }(name='Moudle'),
}

model QueryTrademarkModelEspListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTrademarkModelEspListResponseBody(name='body'),
}

async function queryTrademarkModelEspList(request: QueryTrademarkModelEspListRequest): QueryTrademarkModelEspListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTrademarkModelEspList', 'POST', '/', 'json', false, 'json', request);
}

model QueryTrademarkModelListRequest {
  env?: string(name='Env', position='Query'),
  orderIdsStr?: string(name='OrderIdsStr', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  principalKey?: string(name='PrincipalKey', position='Query'),
  principalName?: string(name='PrincipalName', position='Query'),
  produceTypesStr?: string(name='ProduceTypesStr', position='Query'),
  status?: string(name='Status', position='Query'),
  submitStart?: string(name='SubmitStart', position='Query'),
  submitStatus?: string(name='SubmitStatus', position='Query'),
  submitTime?: string(name='SubmitTime', position='Query'),
}

model QueryTrademarkModelListResponseBody = {
  moudle?: {
    data?: {
      item?: [ 
      {
        bitFlag?: int32(name='BitFlag'),
        bizId?: string(name='BizId'),
        bizType?: string(name='BizType'),
        extendInfo?: map[string]any(name='ExtendInfo'),
        grayIconUrl?: string(name='GrayIconUrl'),
        icon?: string(name='Icon'),
        leafCodes?: {
          leafCode?: [ 
          {
            classificationCode?: string(name='ClassificationCode'),
            classificationName?: string(name='ClassificationName'),
          }
        ](name='leafCode')
        }(name='LeafCodes'),
        materialInfo?: {
          address?: string(name='Address'),
          businessLicenceUrl?: string(name='BusinessLicenceUrl'),
          cardNumber?: string(name='CardNumber'),
          cnInfoUrl?: string(name='CnInfoUrl'),
          contactAddress?: string(name='ContactAddress'),
          contactEmail?: string(name='ContactEmail'),
          contactZipCode?: string(name='ContactZipCode'),
          country?: string(name='Country'),
          eAddress?: string(name='EAddress'),
          eName?: string(name='EName'),
          idCardNumber?: string(name='IdCardNumber'),
          idCardUrl?: string(name='IdCardUrl'),
          loaKey?: string(name='LoaKey'),
          loaUrl?: string(name='LoaUrl'),
          name?: string(name='Name'),
          passportUrl?: string(name='PassportUrl'),
          personalType?: int32(name='PersonalType'),
          postCode?: string(name='PostCode'),
          province?: string(name='Province'),
          reasonFileOssKey?: string(name='ReasonFileOssKey'),
          region?: int32(name='Region'),
          type?: int32(name='Type'),
        }(name='MaterialInfo'),
        orderId?: string(name='OrderId'),
        partnerCode?: string(name='PartnerCode'),
        principalKey?: string(name='PrincipalKey'),
        principalName?: string(name='PrincipalName'),
        produceType?: string(name='ProduceType'),
        rootCode?: {
          classificationCode?: string(name='ClassificationCode'),
          classificationName?: string(name='ClassificationName'),
        }(name='RootCode'),
        status?: string(name='Status'),
        statusStr?: string(name='StatusStr'),
        submitAuditTimeStr?: string(name='SubmitAuditTimeStr'),
        submitAuditTimeValue?: long(name='SubmitAuditTimeValue'),
        submitStatus?: string(name='SubmitStatus'),
        submitTimeStr?: string(name='SubmitTimeStr'),
        submitTimeValue?: long(name='SubmitTimeValue'),
        submitTimes?: int32(name='SubmitTimes'),
        trademarkName?: string(name='TrademarkName'),
        trademarkNameType?: int32(name='TrademarkNameType'),
        trademarkNumber?: string(name='TrademarkNumber'),
      }
    ](name='item')
    }(name='Data'),
    requestId?: string(name='RequestId'),
    totalPageNum?: int32(name='TotalPageNum'),
  }(name='Moudle'),
}

model QueryTrademarkModelListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTrademarkModelListResponseBody(name='body'),
}

async function queryTrademarkModelList(request: QueryTrademarkModelListRequest): QueryTrademarkModelListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTrademarkModelList', 'POST', '/', 'json', false, 'json', request);
}

model QueryTrademarkMonitorResultsRequest {
  actionType?: int32(name='ActionType', position='Query'),
  applyYear?: string(name='ApplyYear', position='Query'),
  classification?: string(name='Classification', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  procedureStatus?: int32(name='ProcedureStatus', position='Query'),
  registrationNumber?: string(name='RegistrationNumber', position='Query'),
  ruleId: long(name='RuleId', position='Query'),
  tmName?: string(name='TmName', position='Query'),
}

model QueryTrademarkMonitorResultsResponseBody = {
  currentPageNum?: int32(name='CurrentPageNum'),
  data?: {
    tmMonitorResult?: [ 
    {
      applyDate?: string(name='ApplyDate'),
      chesanEndDate?: string(name='ChesanEndDate'),
      classification?: string(name='Classification'),
      dataCreateTime?: long(name='DataCreateTime'),
      dataUpdateTime?: long(name='DataUpdateTime'),
      ownerEnName?: string(name='OwnerEnName'),
      ownerName?: string(name='OwnerName'),
      registrationNumber?: string(name='RegistrationNumber'),
      ruleId?: string(name='RuleId'),
      tmImage?: string(name='TmImage'),
      tmName?: string(name='TmName'),
      tmProcedureStatusDesc?: string(name='TmProcedureStatusDesc'),
      tmUid?: string(name='TmUid'),
      userId?: string(name='UserId'),
      wuxiaoEndDate?: string(name='WuxiaoEndDate'),
      xuzhanEndDate?: string(name='XuzhanEndDate'),
      yiyiEndDate?: string(name='YiyiEndDate'),
    }
  ](name='TmMonitorResult')
  }(name='Data'),
  nextPage?: boolean(name='NextPage'),
  pageSize?: int32(name='PageSize'),
  prePage?: boolean(name='PrePage'),
  requestId?: string(name='RequestId'),
  totalItemNum?: int32(name='TotalItemNum'),
  totalPageNum?: int32(name='TotalPageNum'),
}

model QueryTrademarkMonitorResultsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTrademarkMonitorResultsResponseBody(name='body'),
}

async function queryTrademarkMonitorResults(request: QueryTrademarkMonitorResultsRequest): QueryTrademarkMonitorResultsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTrademarkMonitorResults', 'POST', '/', 'json', false, 'json', request);
}

model QueryTrademarkMonitorRulesRequest {
  id?: string(name='Id', position='Query'),
  notifyUpdate?: int32(name='NotifyUpdate', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  ruleName?: string(name='RuleName', position='Query'),
}

model QueryTrademarkMonitorRulesResponseBody = {
  currentPageNum?: int32(name='CurrentPageNum'),
  data?: {
    tmMonitorRule?: [ 
    {
      createTime?: string(name='CreateTime'),
      endTime?: string(name='EndTime'),
      env?: string(name='Env'),
      id?: string(name='Id'),
      lastFinishTime?: string(name='LastFinishTime'),
      lastRunTime?: string(name='LastRunTime'),
      lastUpdateTime?: string(name='LastUpdateTime'),
      notifyUpdate?: int32(name='NotifyUpdate'),
      ruleDetail?: string(name='RuleDetail'),
      ruleExtend?: string(name='RuleExtend'),
      ruleKeyword?: string(name='RuleKeyword'),
      ruleName?: string(name='RuleName'),
      ruleSource?: string(name='RuleSource'),
      ruleStatus?: string(name='RuleStatus'),
      ruleType?: int32(name='RuleType'),
      startTime?: string(name='StartTime'),
      updateTime?: string(name='UpdateTime'),
      userId?: string(name='UserId'),
      version?: int32(name='Version'),
    }
  ](name='TmMonitorRule')
  }(name='Data'),
  nextPage?: boolean(name='NextPage'),
  pageSize?: int32(name='PageSize'),
  prePage?: boolean(name='PrePage'),
  requestId?: string(name='RequestId'),
  totalItemNum?: int32(name='TotalItemNum'),
  totalPageNum?: int32(name='TotalPageNum'),
}

model QueryTrademarkMonitorRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTrademarkMonitorRulesResponseBody(name='body'),
}

async function queryTrademarkMonitorRules(request: QueryTrademarkMonitorRulesRequest): QueryTrademarkMonitorRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTrademarkMonitorRules', 'POST', '/', 'json', false, 'json', request);
}

model QueryTrademarkOnSaleRequest {
  classification?: string(name='Classification', position='Query'),
  pageNum: int32(name='PageNum', minimum=1, maximum=100, position='Query'),
  pageSize: int32(name='PageSize', minimum=50, maximum=1000, position='Query'),
  registerCode?: string(name='RegisterCode', position='Query'),
  registerNumber?: string(name='RegisterNumber', position='Query'),
  tmType?: string(name='TmType', position='Query'),
}

model QueryTrademarkOnSaleResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  totalPageNumber?: int32(name='TotalPageNumber'),
  trademarks?: [ 
    {
      auditResult?: string(name='AuditResult'),
      classification?: string(name='Classification'),
      icon?: string(name='Icon'),
      orderPrice?: string(name='OrderPrice'),
      registrationNumber?: string(name='RegistrationNumber'),
      status?: long(name='Status'),
      tmType?: string(name='TmType'),
      trademarkName?: string(name='TrademarkName'),
    }
  ](name='Trademarks'),
}

model QueryTrademarkOnSaleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTrademarkOnSaleResponseBody(name='body'),
}

async function queryTrademarkOnSale(request: QueryTrademarkOnSaleRequest): QueryTrademarkOnSaleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTrademarkOnSale', 'POST', '/', 'json', false, 'json', request);
}

model QueryTrademarkPriceRequest {
  orderData: map[string]any(name='OrderData', shrink='json', position='Query'),
  tmIcon?: string(name='TmIcon', position='Query'),
  tmName?: string(name='TmName', position='Query'),
  type?: int32(name='Type', position='Query'),
  userId: long(name='UserId', position='Query'),
}

model QueryTrademarkPriceResponseBody = {
  currency?: string(name='Currency'),
  discountPrice?: float(name='DiscountPrice'),
  originalPrice?: float(name='OriginalPrice'),
  prices?: {
    prices?: [ 
    {
      classificationCode?: string(name='ClassificationCode'),
      currency?: string(name='Currency'),
      discountPrice?: float(name='DiscountPrice'),
      originalPrice?: float(name='OriginalPrice'),
      tradePrice?: float(name='TradePrice'),
    }
  ](name='Prices')
  }(name='Prices'),
  requestId?: string(name='RequestId'),
  tradePrice?: float(name='TradePrice'),
}

model QueryTrademarkPriceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTrademarkPriceResponseBody(name='body'),
}

async function queryTrademarkPrice(request: QueryTrademarkPriceRequest): QueryTrademarkPriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTrademarkPrice', 'POST', '/', 'json', false, 'json', request);
}

model QueryTrademarkUploadAuditResultRequest {
  classification?: string(name='Classification', position='Query'),
  pageNum: int32(name='PageNum', minimum=1, maximum=100, position='Query'),
  pageSize: int32(name='PageSize', minimum=1, maximum=200, position='Query'),
  registerCode?: string(name='RegisterCode', position='Query'),
  registerNumber?: string(name='RegisterNumber', position='Query'),
  tmType?: string(name='TmType', position='Query'),
}

model QueryTrademarkUploadAuditResultResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  totalPageNumber?: int32(name='TotalPageNumber'),
  trademarks?: [ 
    {
      auditResult?: string(name='AuditResult'),
      classification?: string(name='Classification'),
      icon?: string(name='Icon'),
      orderPrice?: string(name='OrderPrice'),
      registrationNumber?: string(name='RegistrationNumber'),
      status?: long(name='Status'),
      tmType?: string(name='TmType'),
      trademarkName?: string(name='TrademarkName'),
    }
  ](name='Trademarks'),
}

model QueryTrademarkUploadAuditResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTrademarkUploadAuditResultResponseBody(name='body'),
}

async function queryTrademarkUploadAuditResult(request: QueryTrademarkUploadAuditResultRequest): QueryTrademarkUploadAuditResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTrademarkUploadAuditResult', 'POST', '/', 'json', false, 'json', request);
}

model RecordBankBalanceRequest {
  actionDate?: long(name='ActionDate', position='Query'),
  balance?: string(name='Balance', position='Query'),
  principalName?: string(name='PrincipalName', position='Query'),
}

model RecordBankBalanceResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model RecordBankBalanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecordBankBalanceResponseBody(name='body'),
}

async function recordBankBalance(request: RecordBankBalanceRequest): RecordBankBalanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecordBankBalance', 'POST', '/', 'json', false, 'json', request);
}

model RefundProduceRequest {
  bizId: string(name='BizId', example='trademark_register-cn-o400xeo7n03', position='Query'),
  refundType?: string(name='RefundType', position='Query'),
}

model RefundProduceResponseBody = {
  errorCode?: string(name='ErrorCode', example='PARAMETER.ILLEGALL'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId', example='810A7DB3-C18A-437F-88AF-3C46154C2B2A'),
  success?: boolean(name='Success', example='true'),
}

model RefundProduceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RefundProduceResponseBody(name='body'),
}

async function refundProduce(request: RefundProduceRequest): RefundProduceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefundProduce', 'POST', '/', 'json', false, 'json', request);
}

model RefuseAdditionalMaterialRequest {
  bizId: string(name='BizId', position='Query'),
  note?: string(name='Note', position='Query'),
}

model RefuseAdditionalMaterialResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RefuseAdditionalMaterialResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RefuseAdditionalMaterialResponseBody(name='body'),
}

async function refuseAdditionalMaterial(request: RefuseAdditionalMaterialRequest): RefuseAdditionalMaterialResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefuseAdditionalMaterial', 'POST', '/', 'json', false, 'json', request);
}

model RefuseApplicantRequest {
  bizId: string(name='BizId', position='Query'),
  note?: string(name='Note', position='Query'),
}

model RefuseApplicantResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RefuseApplicantResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RefuseApplicantResponseBody(name='body'),
}

async function refuseApplicant(request: RefuseApplicantRequest): RefuseApplicantResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefuseApplicant', 'POST', '/', 'json', false, 'json', request);
}

model RejectApplicantRequest {
  instanceId: string(name='InstanceId', position='Query'),
  note?: string(name='Note', position='Query'),
}

model RejectApplicantResponseBody = {
  requestId?: string(name='RequestId'),
}

model RejectApplicantResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RejectApplicantResponseBody(name='body'),
}

async function rejectApplicant(request: RejectApplicantRequest): RejectApplicantResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RejectApplicant', 'POST', '/', 'json', false, 'json', request);
}

model SaveClassificationConditionsRequest {
  bizId?: string(name='BizId', position='Query'),
  condition?: string(name='Condition', position='Query'),
  type: int32(name='Type', minimum=1, maximum=1000, position='Query'),
}

model SaveClassificationConditionsResponseBody = {
  errorMsg?: string(name='ErrorMsg'),
  invalidList?: [ 
    {
      classificationCode?: string(name='ClassificationCode'),
      classificationName?: string(name='ClassificationName'),
      officialCode?: string(name='OfficialCode'),
      parentCode?: string(name='ParentCode'),
    }
  ](name='InvalidList'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  tagName?: string(name='TagName'),
}

model SaveClassificationConditionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveClassificationConditionsResponseBody(name='body'),
}

async function saveClassificationConditions(request: SaveClassificationConditionsRequest): SaveClassificationConditionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveClassificationConditions', 'POST', '/', 'json', false, 'json', request);
}

model SaveExtensionAttributeRequest {
  attributeKey?: string(name='AttributeKey', position='Query'),
  attributeValue?: string(name='AttributeValue', position='Query'),
  bizId: string(name='BizId', position='Query'),
}

model SaveExtensionAttributeResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SaveExtensionAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveExtensionAttributeResponseBody(name='body'),
}

async function saveExtensionAttribute(request: SaveExtensionAttributeRequest): SaveExtensionAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveExtensionAttribute', 'POST', '/', 'json', false, 'json', request);
}

model SaveTaskRequest {
  bizType: string(name='BizType', position='Query'),
  request: string(name='Request', position='Query'),
}

model SaveTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model SaveTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveTaskResponseBody(name='body'),
}

async function saveTask(request: SaveTaskRequest): SaveTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveTask', 'POST', '/', 'json', false, 'json', request);
}

model SaveTaskForOfficialFileCustomRequest {
  endAcceptTime?: long(name='EndAcceptTime', position='Query'),
  startAcceptTime?: long(name='StartAcceptTime', position='Query'),
}

model SaveTaskForOfficialFileCustomResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SaveTaskForOfficialFileCustomResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveTaskForOfficialFileCustomResponseBody(name='body'),
}

async function saveTaskForOfficialFileCustom(request: SaveTaskForOfficialFileCustomRequest): SaveTaskForOfficialFileCustomResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveTaskForOfficialFileCustom', 'POST', '/', 'json', false, 'json', request);
}

model SaveTradeMarkReviewMaterialDetailRequest {
  additionalOssKeyList?: map[string]any(name='AdditionalOssKeyList', shrink='json', position='Body'),
  address?: string(name='Address', position='Body'),
  applicationOssKey?: string(name='ApplicationOssKey', position='Body'),
  bizId: string(name='BizId', position='Body'),
  businessLicenceOssKey?: string(name='BusinessLicenceOssKey', position='Body'),
  cardNumber?: string(name='CardNumber', position='Body'),
  changeName?: boolean(name='ChangeName', position='Body'),
  contactAddress?: string(name='ContactAddress', position='Body'),
  contactEmail?: string(name='ContactEmail', position='Body'),
  contactName?: string(name='ContactName', position='Body'),
  contactNumber?: string(name='ContactNumber', position='Body'),
  country?: string(name='Country', position='Body'),
  engAddress?: string(name='EngAddress', position='Body'),
  engName?: string(name='EngName', position='Body'),
  idCardOssKey?: string(name='IdCardOssKey', position='Body'),
  legalNoticeOssKey?: string(name='LegalNoticeOssKey', position='Body'),
  loaOssKey?: string(name='LoaOssKey', position='Body'),
  name?: string(name='Name', position='Body'),
  passportOssKey?: string(name='PassportOssKey', position='Body'),
  province?: string(name='Province', position='Body'),
  region?: int32(name='Region', minimum=1, maximum=5, position='Body'),
  reviewMaterialAdditionalJson?: string(name='ReviewMaterialAdditionalJson', position='Body'),
  separate?: boolean(name='Separate', position='Body'),
  submitOnline?: boolean(name='SubmitOnline', position='Body'),
  submitType?: int32(name='SubmitType', minimum=1, maximum=2, position='Body'),
  supplementFlag?: boolean(name='SupplementFlag', position='Body'),
  type?: int32(name='Type', minimum=1, maximum=2, position='Body'),
}

model SaveTradeMarkReviewMaterialDetailResponseBody = {
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SaveTradeMarkReviewMaterialDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveTradeMarkReviewMaterialDetailResponseBody(name='body'),
}

async function saveTradeMarkReviewMaterialDetail(request: SaveTradeMarkReviewMaterialDetailRequest): SaveTradeMarkReviewMaterialDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveTradeMarkReviewMaterialDetail', 'POST', '/', 'json', true, 'form', request);
}

model SbjOperateRequest {
  amount?: string(name='Amount', position='Query'),
  applyNo?: string(name='ApplyNo', position='Query'),
  auditStatus?: boolean(name='AuditStatus', position='Query'),
  bizId: string(name='BizId', position='Query'),
  fileDate?: string(name='FileDate', position='Query'),
  fileOssKey?: string(name='FileOssKey', position='Query'),
  message?: string(name='Message', position='Query'),
  operateType?: string(name='OperateType', position='Query'),
  orderNo?: string(name='OrderNo', position='Query'),
  receiptOssKey?: string(name='ReceiptOssKey', position='Query'),
  submittedSuccess?: boolean(name='SubmittedSuccess', position='Query'),
}

model SbjOperateResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SbjOperateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SbjOperateResponseBody(name='body'),
}

async function sbjOperate(request: SbjOperateRequest): SbjOperateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SbjOperate', 'POST', '/', 'json', false, 'json', request);
}

model SbjOperateNewRequest {
  addSubmitCount?: boolean(name='AddSubmitCount', position='Query'),
  allowResubmit?: boolean(name='AllowResubmit', position='Query'),
  amount?: string(name='Amount', position='Query'),
  applyNo?: string(name='ApplyNo', position='Query'),
  auditStatus?: boolean(name='AuditStatus', position='Query'),
  bizId: string(name='BizId', position='Query'),
  changeStatus?: boolean(name='ChangeStatus', position='Query'),
  errorMsgScreenshot?: string(name='ErrorMsgScreenshot', position='Query'),
  fileDate?: string(name='FileDate', position='Query'),
  fileOssKey?: string(name='FileOssKey', position='Query'),
  message?: string(name='Message', position='Query'),
  operateType?: string(name='OperateType', position='Query'),
  orderNo?: string(name='OrderNo', position='Query'),
  receiptOssKey?: string(name='ReceiptOssKey', position='Query'),
  submittedSuccess?: boolean(name='SubmittedSuccess', position='Query'),
  successType?: string(name='SuccessType', position='Query'),
}

model SbjOperateNewResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SbjOperateNewResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SbjOperateNewResponseBody(name='body'),
}

async function sbjOperateNew(request: SbjOperateNewRequest): SbjOperateNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SbjOperateNew', 'POST', '/', 'json', false, 'json', request);
}

model SbrainServiceExecuteRequest {
  executeParams?: map[string]any(name='ExecuteParams', shrink='json', position='Query'),
  productCode: string(name='ProductCode', position='Query'),
  referenceNo?: string(name='ReferenceNo', position='Query'),
  referenceType: string(name='ReferenceType', position='Query'),
  sceneCode: string(name='SceneCode', position='Query'),
  schemeId?: long(name='SchemeId', position='Query'),
  servicePlace?: string(name='ServicePlace', position='Query'),
  source?: string(name='Source', position='Query'),
  target?: string(name='Target', position='Query'),
}

model SbrainServiceExecuteResponseBody = {
  data?: any(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SbrainServiceExecuteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SbrainServiceExecuteResponseBody(name='body'),
}

async function sbrainServiceExecute(request: SbrainServiceExecuteRequest): SbrainServiceExecuteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SbrainServiceExecute', 'POST', '/', 'json', false, 'json', request);
}

model SbrainServiceHasRunningTaskBatchQueryRequest {
  productCode: string(name='ProductCode', position='Query'),
  referenceNos?: [ string ](name='ReferenceNos', shrink='json', position='Query'),
  referenceType: string(name='ReferenceType', position='Query'),
  source?: string(name='Source', position='Query'),
  taskType?: string(name='TaskType', position='Query'),
}

model SbrainServiceHasRunningTaskBatchQueryResponseBody = {
  data?: any(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SbrainServiceHasRunningTaskBatchQueryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SbrainServiceHasRunningTaskBatchQueryResponseBody(name='body'),
}

async function sbrainServiceHasRunningTaskBatchQuery(request: SbrainServiceHasRunningTaskBatchQueryRequest): SbrainServiceHasRunningTaskBatchQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SbrainServiceHasRunningTaskBatchQuery', 'POST', '/', 'json', false, 'json', request);
}

model SbrainServiceSchemeMatchRequest {
  matchParams?: map[string]any(name='MatchParams', shrink='json', position='Query'),
  productCode: string(name='ProductCode', position='Query'),
  referenceNo?: string(name='ReferenceNo', position='Query'),
  referenceType: string(name='ReferenceType', position='Query'),
  sceneCode: string(name='SceneCode', position='Query'),
  source?: string(name='Source', position='Query'),
}

model SbrainServiceSchemeMatchResponseBody = {
  data?: {
    sceneCode?: string(name='SceneCode'),
    schemeContent?: {
      contentIndex?: int32(name='ContentIndex'),
      contentModules?: [ 
        {
          tag?: string(name='Tag'),
          action?: string(name='action'),
          moduleData?: string(name='moduleData'),
          moduleDataSource?: string(name='moduleDataSource'),
          moduleDataSourceType?: string(name='moduleDataSourceType'),
          name?: string(name='name'),
          target?: string(name='target'),
        }
      ](name='ContentModules'),
      display?: string(name='Display'),
    }(name='SchemeContent'),
    schemeId?: long(name='SchemeId'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SbrainServiceSchemeMatchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SbrainServiceSchemeMatchResponseBody(name='body'),
}

async function sbrainServiceSchemeMatch(request: SbrainServiceSchemeMatchRequest): SbrainServiceSchemeMatchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SbrainServiceSchemeMatch', 'POST', '/', 'json', false, 'json', request);
}

model SearchTmOnsalesRequest {
  classification?: string(name='Classification', position='Query'),
  keyword?: string(name='Keyword', position='Query'),
  orderPriceLeft?: long(name='OrderPriceLeft', position='Query'),
  orderPriceRight?: long(name='OrderPriceRight', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  productCode?: string(name='ProductCode', position='Query'),
  queryAll: boolean(name='QueryAll', position='Query'),
  regLeft?: int32(name='RegLeft', position='Query'),
  regRight?: int32(name='RegRight', position='Query'),
  registerNumber?: string(name='RegisterNumber', position='Query'),
  sortName?: string(name='SortName', position='Query'),
  sortOrder?: string(name='SortOrder', position='Query'),
  tag?: string(name='Tag', position='Query'),
  tmName?: string(name='TmName', position='Query'),
  topSearch?: string(name='TopSearch', position='Query'),
}

model SearchTmOnsalesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  totalPageNumber?: int32(name='TotalPageNumber'),
  trademarks?: [ 
    {
      classification?: string(name='Classification'),
      icon?: string(name='Icon'),
      orderPrice?: string(name='OrderPrice'),
      partnerCode?: string(name='PartnerCode'),
      productCode?: string(name='ProductCode'),
      productDesc?: string(name='ProductDesc'),
      registrationNumber?: string(name='RegistrationNumber'),
      status?: long(name='Status'),
      trademarkName?: string(name='TrademarkName'),
      uid?: string(name='Uid'),
    }
  ](name='Trademarks'),
}

model SearchTmOnsalesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SearchTmOnsalesResponseBody(name='body'),
}

async function searchTmOnsales(request: SearchTmOnsalesRequest): SearchTmOnsalesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchTmOnsales', 'POST', '/', 'json', false, 'json', request);
}

model StartNotaryRequest {
  notaryOrderId: long(name='NotaryOrderId', position='Query'),
}

model StartNotaryResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  notaryUrl?: string(name='NotaryUrl'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model StartNotaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartNotaryResponseBody(name='body'),
}

async function startNotary(request: StartNotaryRequest): StartNotaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartNotary', 'POST', '/', 'json', false, 'json', request);
}

model StoreMaterialTemporarilyRequest {
  address?: string(name='Address', position='Query'),
  businessLicenceOssKey?: string(name='BusinessLicenceOssKey', position='Query'),
  cardNumber?: string(name='CardNumber', position='Query'),
  city?: string(name='City', position='Query'),
  contactAddress?: string(name='ContactAddress', position='Query'),
  contactCity?: string(name='ContactCity', position='Query'),
  contactCounty?: string(name='ContactCounty', position='Query'),
  contactDistrict?: string(name='ContactDistrict', position='Query'),
  contactEmail?: string(name='ContactEmail', position='Query'),
  contactName?: string(name='ContactName', position='Query'),
  contactNumber?: string(name='ContactNumber', position='Query'),
  contactProvince?: string(name='ContactProvince', position='Query'),
  contactZipcode?: string(name='ContactZipcode', position='Query'),
  country?: string(name='Country', position='Query'),
  eAddress?: string(name='EAddress', position='Query'),
  eName?: string(name='EName', position='Query'),
  idCardName?: string(name='IdCardName', position='Query'),
  idCardNumber?: string(name='IdCardNumber', position='Query'),
  idCardOssKey?: string(name='IdCardOssKey', position='Query'),
  legalNoticeOssKey?: string(name='LegalNoticeOssKey', position='Query'),
  loaOssKey?: string(name='LoaOssKey', position='Query'),
  name?: string(name='Name', position='Query'),
  passportOssKey?: string(name='PassportOssKey', position='Query'),
  personalType?: long(name='PersonalType', position='Query'),
  principalName?: int32(name='PrincipalName', position='Query'),
  province?: string(name='Province', position='Query'),
  region?: string(name='Region', position='Query'),
  town?: string(name='Town', position='Query'),
  type?: string(name='Type', position='Query'),
}

model StoreMaterialTemporarilyResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model StoreMaterialTemporarilyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StoreMaterialTemporarilyResponseBody(name='body'),
}

async function storeMaterialTemporarily(request: StoreMaterialTemporarilyRequest): StoreMaterialTemporarilyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StoreMaterialTemporarily', 'POST', '/', 'json', false, 'json', request);
}

model SubmitSupplementRequest {
  content?: string(name='Content', position='Query'),
  id: long(name='Id', position='Query'),
  operateType?: string(name='OperateType', position='Query'),
  uploadOssKeyList?: map[string]any(name='UploadOssKeyList', shrink='json', position='Query'),
}

model SubmitSupplementResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SubmitSupplementResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitSupplementResponseBody(name='body'),
}

async function submitSupplement(request: SubmitSupplementRequest): SubmitSupplementResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitSupplement', 'POST', '/', 'json', false, 'json', request);
}

model SubmitTrademarkApplicationComplaintRequest {
  bizId?: string(name='BizId', position='Query'),
  content?: string(name='Content', position='Query'),
  files?: map[string]any(name='Files', shrink='json', position='Query'),
}

model SubmitTrademarkApplicationComplaintResponseBody = {
  requestId?: string(name='RequestId'),
}

model SubmitTrademarkApplicationComplaintResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitTrademarkApplicationComplaintResponseBody(name='body'),
}

async function submitTrademarkApplicationComplaint(request: SubmitTrademarkApplicationComplaintRequest): SubmitTrademarkApplicationComplaintResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitTrademarkApplicationComplaint', 'POST', '/', 'json', false, 'json', request);
}

model SyncTrademarkRequest {
  beginTime: long(name='BeginTime', minimum=0, maximum=9223372036854775807, position='Query'),
  classificationCode: string(name='ClassificationCode', position='Query'),
  description?: string(name='Description', position='Query'),
  endTime: long(name='EndTime', minimum=0, maximum=9223372036854775807, position='Query'),
  label?: string(name='Label', position='Query'),
  originalPrice: float(name='OriginalPrice', minimum=0, maximum=9223372036854775807, position='Query'),
  ownerEnName?: string(name='OwnerEnName', position='Query'),
  ownerName: string(name='OwnerName', position='Query'),
  reason?: string(name='Reason', position='Query'),
  regAnnDate?: long(name='RegAnnDate', minimum=0, maximum=9223372036854775807, position='Query'),
  secondaryClassification: string(name='SecondaryClassification', position='Query'),
  status: string(name='Status', position='Query'),
  thirdClassification: string(name='ThirdClassification', position='Query'),
  tmIcon: string(name='TmIcon', position='Query'),
  tmName: string(name='TmName', position='Query'),
  tmNumber: string(name='TmNumber', position='Query'),
  type?: string(name='Type', position='Query'),
}

model SyncTrademarkResponseBody = {
  requestId?: string(name='RequestId'),
}

model SyncTrademarkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SyncTrademarkResponseBody(name='body'),
}

async function syncTrademark(request: SyncTrademarkRequest): SyncTrademarkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SyncTrademark', 'POST', '/', 'json', false, 'json', request);
}

model UpdateApplicantContacterRequest {
  applicantId?: long(name='ApplicantId', minimum=1, maximum=10000000000, position='Query'),
  bizId?: string(name='BizId', position='Query'),
  contactAddress?: string(name='ContactAddress', position='Query'),
  contactCity?: string(name='ContactCity', position='Query'),
  contactDistrict?: string(name='ContactDistrict', position='Query'),
  contactEmail?: string(name='ContactEmail', position='Query'),
  contactName?: string(name='ContactName', position='Query'),
  contactNumber?: string(name='ContactNumber', position='Query'),
  contactProvince?: string(name='ContactProvince', position='Query'),
  contactZipCode?: string(name='ContactZipCode', position='Query'),
}

model UpdateApplicantContacterResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateApplicantContacterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateApplicantContacterResponseBody(name='body'),
}

async function updateApplicantContacter(request: UpdateApplicantContacterRequest): UpdateApplicantContacterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateApplicantContacter', 'POST', '/', 'json', false, 'json', request);
}

model UpdateMaterialRequest {
  address?: string(name='Address', position='Query'),
  businessLicenceOssKey?: string(name='BusinessLicenceOssKey', position='Query'),
  cardNumber?: string(name='CardNumber', position='Query'),
  city?: string(name='City', position='Query'),
  contactAddress?: string(name='ContactAddress', position='Query'),
  contactCity?: string(name='ContactCity', position='Query'),
  contactCounty?: string(name='ContactCounty', position='Query'),
  contactDistrict?: string(name='ContactDistrict', position='Query'),
  contactEmail?: string(name='ContactEmail', position='Query'),
  contactName?: string(name='ContactName', position='Query'),
  contactNumber?: string(name='ContactNumber', position='Query'),
  contactProvince?: string(name='ContactProvince', position='Query'),
  contactZipcode?: string(name='ContactZipcode', position='Query'),
  eAddress?: string(name='EAddress', position='Query'),
  eName?: string(name='EName', position='Query'),
  id: long(name='Id', position='Query'),
  idCardName?: string(name='IdCardName', position='Query'),
  idCardNumber?: string(name='IdCardNumber', position='Query'),
  idCardOssKey?: string(name='IdCardOssKey', position='Query'),
  legalNoticeOssKey?: string(name='LegalNoticeOssKey', position='Query'),
  loaId?: long(name='LoaId', position='Query'),
  loaOssKey?: string(name='LoaOssKey', position='Query'),
  name?: string(name='Name', position='Query'),
  passportOssKey?: string(name='PassportOssKey', position='Query'),
  personalType?: long(name='PersonalType', position='Query'),
  province?: string(name='Province', position='Query'),
  town?: string(name='Town', position='Query'),
}

model UpdateMaterialResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateMaterialResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateMaterialResponseBody(name='body'),
}

async function updateMaterial(request: UpdateMaterialRequest): UpdateMaterialResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateMaterial', 'POST', '/', 'json', false, 'json', request);
}

model UpdateProduceRequest {
  bizId?: string(name='BizId', position='Query'),
  bizType?: string(name='BizType', position='Query'),
  extMap?: string(name='ExtMap', position='Query'),
}

model UpdateProduceResponseBody = {
  requestId?: string(name='requestId'),
}

model UpdateProduceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateProduceResponseBody(name='body'),
}

async function updateProduce(request: UpdateProduceRequest): UpdateProduceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateProduce', 'POST', '/', 'json', false, 'json', request);
}

model UpdateProduceLoaIdRequest {
  bizId?: string(name='BizId', position='Body'),
  loaOssKey?: string(name='LoaOssKey', position='Body'),
}

model UpdateProduceLoaIdResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateProduceLoaIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateProduceLoaIdResponseBody(name='body'),
}

async function updateProduceLoaId(request: UpdateProduceLoaIdRequest): UpdateProduceLoaIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateProduceLoaId', 'POST', '/', 'json', true, 'form', request);
}

model UpdateSendMaterialNumRequest {
  bizId: string(name='BizId', position='Query'),
  num: string(name='Num', position='Query'),
  operateType: int32(name='OperateType', position='Query'),
}

model UpdateSendMaterialNumResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateSendMaterialNumResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSendMaterialNumResponseBody(name='body'),
}

async function updateSendMaterialNum(request: UpdateSendMaterialNumRequest): UpdateSendMaterialNumResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSendMaterialNum', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTrademarkNameRequest {
  bizId?: string(name='BizId', position='Body'),
  clientToken?: string(name='ClientToken', position='Query'),
  tmComment?: string(name='TmComment', position='Body'),
  tmIcon?: string(name='TmIcon', position='Body'),
  tmName?: string(name='TmName', position='Body'),
  type?: long(name='Type', position='Body'),
}

model UpdateTrademarkNameResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateTrademarkNameResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTrademarkNameResponseBody(name='body'),
}

async function updateTrademarkName(request: UpdateTrademarkNameRequest): UpdateTrademarkNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTrademarkName', 'POST', '/', 'json', true, 'form', request);
}

model UpdateTrademarkOnsaleRequest {
  beginTime: long(name='BeginTime', minimum=0, maximum=9223372036854775807, position='Query'),
  classificationCode: string(name='ClassificationCode', position='Query'),
  description?: string(name='Description', position='Query'),
  endTime: long(name='EndTime', minimum=0, maximum=9223372036854775807, position='Query'),
  label?: string(name='Label', position='Query'),
  originalPrice: float(name='OriginalPrice', minimum=0, maximum=9223372036854775807, position='Query'),
  ownerEnName?: string(name='OwnerEnName', position='Query'),
  ownerName: string(name='OwnerName', position='Query'),
  reason?: string(name='Reason', position='Query'),
  regAnnDate?: long(name='RegAnnDate', minimum=0, maximum=9223372036854775807, position='Query'),
  secondaryClassification: string(name='SecondaryClassification', position='Query'),
  thirdClassification: string(name='ThirdClassification', position='Query'),
  tmIcon: string(name='TmIcon', position='Query'),
  tmName: string(name='TmName', position='Query'),
  tmNumber: string(name='TmNumber', position='Query'),
  tmType?: string(name='TmType', position='Query'),
  tradeTmDetailJson?: string(name='TradeTmDetailJson', position='Query'),
  type?: string(name='Type', position='Query'),
}

model UpdateTrademarkOnsaleResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateTrademarkOnsaleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTrademarkOnsaleResponseBody(name='body'),
}

async function updateTrademarkOnsale(request: UpdateTrademarkOnsaleRequest): UpdateTrademarkOnsaleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTrademarkOnsale', 'POST', '/', 'json', false, 'json', request);
}

model UploadNotaryDataRequest {
  bizOrderNo: string(name='BizOrderNo', position='Query'),
  notaryType: int32(name='NotaryType', position='Query'),
  uploadContext: string(name='UploadContext', position='Query'),
}

model UploadNotaryDataResponseBody = {
  requestId?: string(name='RequestId'),
  userAuthUrl?: string(name='UserAuthUrl'),
}

model UploadNotaryDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UploadNotaryDataResponseBody(name='body'),
}

async function uploadNotaryData(request: UploadNotaryDataRequest): UploadNotaryDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UploadNotaryData', 'POST', '/', 'json', false, 'json', request);
}

model UploadTrademarkOnSaleRequest {
  beginTime: long(name='BeginTime', minimum=0, maximum=9223372036854775807, position='Query'),
  classificationCode: string(name='ClassificationCode', position='Query'),
  description?: string(name='Description', position='Query'),
  endTime: long(name='EndTime', minimum=0, maximum=9223372036854775807, position='Query'),
  label?: string(name='Label', position='Query'),
  originalPrice: float(name='OriginalPrice', minimum=0, maximum=9223372036854775807, position='Query'),
  ownerEnName?: string(name='OwnerEnName', position='Query'),
  ownerName: string(name='OwnerName', position='Query'),
  reason?: string(name='Reason', position='Query'),
  regAnnDate?: long(name='RegAnnDate', minimum=0, maximum=9223372036854775807, position='Query'),
  secondaryClassification: string(name='SecondaryClassification', position='Query'),
  status: string(name='Status', position='Query'),
  thirdClassification: string(name='ThirdClassification', position='Query'),
  tmIcon: string(name='TmIcon', position='Query'),
  tmName: string(name='TmName', position='Query'),
  tmNumber: string(name='TmNumber', position='Query'),
  tmType?: string(name='TmType', position='Query'),
  tradeTmDetailJson?: string(name='TradeTmDetailJson', position='Query'),
  type?: string(name='Type', position='Query'),
}

model UploadTrademarkOnSaleResponseBody = {
  requestId?: string(name='RequestId'),
}

model UploadTrademarkOnSaleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UploadTrademarkOnSaleResponseBody(name='body'),
}

async function uploadTrademarkOnSale(request: UploadTrademarkOnSaleRequest): UploadTrademarkOnSaleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UploadTrademarkOnSale', 'POST', '/', 'json', false, 'json', request);
}

model WriteCommunicationLogRequest {
  bizId: string(name='BizId', position='Query'),
  note: string(name='Note', position='Query'),
  targetId?: string(name='TargetId', position='Query'),
}

model WriteCommunicationLogResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model WriteCommunicationLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: WriteCommunicationLogResponseBody(name='body'),
}

async function writeCommunicationLog(request: WriteCommunicationLogRequest): WriteCommunicationLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'WriteCommunicationLog', 'POST', '/', 'json', false, 'json', request);
}

model WriteIntentionCommunicationLogRequest {
  bizId: string(name='BizId', position='Query'),
  note: string(name='Note', position='Query'),
  reject?: boolean(name='Reject', position='Query'),
}

model WriteIntentionCommunicationLogResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model WriteIntentionCommunicationLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: WriteIntentionCommunicationLogResponseBody(name='body'),
}

async function writeIntentionCommunicationLog(request: WriteIntentionCommunicationLogRequest): WriteIntentionCommunicationLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'WriteIntentionCommunicationLog', 'POST', '/', 'json', false, 'json', request);
}

