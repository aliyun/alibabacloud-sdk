/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @signatureAlgorithm = 'v2';
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('mse', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model GatewayDomain {
  certIdentifier?: string(name='CertIdentifier'),
  gatewayId?: long(name='GatewayId'),
  gatewayName?: string(name='GatewayName'),
  gatewayUniqueId?: string(name='GatewayUniqueId'),
  gmtCreate?: string(name='GmtCreate'),
  gmtModified?: string(name='GmtModified'),
  id?: long(name='Id'),
  mustHttps?: string(name='MustHttps'),
  name?: string(name='Name'),
  protocol?: string(name='Protocol'),
}

model GatewayOption {
  disableHttp2Alpn?: boolean(name='DisableHttp2Alpn'),
  enableHardwareAcceleration?: boolean(name='EnableHardwareAcceleration'),
  enableWaf?: boolean(name='EnableWaf'),
  logConfigDetails?: {
    logEnabled?: boolean(name='LogEnabled'),
    logStoreName?: string(name='LogStoreName'),
    projectName?: string(name='ProjectName'),
  }(name='LogConfigDetails'),
  traceDetails?: {
    sample?: long(name='Sample'),
    traceEnabled?: boolean(name='TraceEnabled'),
  }(name='TraceDetails'),
}

model GatewayService {
  gatewayTrafficPolicy?: TrafficPolicy(name='GatewayTrafficPolicy'),
  gatewayUniqueId?: string(name='GatewayUniqueId'),
  groupName?: string(name='GroupName'),
  id?: long(name='Id'),
  metaInfo?: string(name='MetaInfo'),
  name?: string(name='Name'),
  namespace?: string(name='Namespace'),
  sourceType?: string(name='SourceType'),
}

model TrafficPolicy {
  loadBalancerSettings?: {
    consistentHashLBConfig?: {
      consistentHashLBType?: string(name='ConsistentHashLBType'),
      httpCookie?: {
        name?: string(name='Name'),
        path?: string(name='Path'),
        TTL?: string(name='TTL', example='0s'),
      }(name='HttpCookie'),
      parameterName?: string(name='ParameterName'),
    }(name='ConsistentHashLBConfig'),
    loadbalancerType?: string(name='LoadbalancerType', example='RANDOM'),
    warmupDuration?: long(name='WarmupDuration'),
  }(name='LoadBalancerSettings'),
  tlsSetting?: {
    caCertContent?: string(name='CaCertContent'),
    certId?: string(name='CertId'),
    sni?: string(name='Sni'),
    tlsMode?: string(name='TlsMode', example='SIMPLE'),
  }(name='TlsSetting'),
}

model AddAuthResourceRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  authId?: long(name='AuthId', example='13'),
  authResourceHeaderList?: [ 
    {
      headerKey?: string(name='HeaderKey'),
      headerMethod?: string(name='HeaderMethod'),
      headerValue?: string(name='HeaderValue'),
    }
  ](name='AuthResourceHeaderList'),
  domainId?: long(name='DomainId', example='128'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-86575c0bc9f04ecfbacb92b8e392****'),
  ignoreCase?: boolean(name='IgnoreCase'),
  matchType?: string(name='MatchType', example='exact'),
  path?: string(name='Path', example='/abc'),
}

model AddAuthResourceShrinkRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  authId?: long(name='AuthId', example='13'),
  authResourceHeaderListShrink?: string(name='AuthResourceHeaderList'),
  domainId?: long(name='DomainId', example='128'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-86575c0bc9f04ecfbacb92b8e392****'),
  ignoreCase?: boolean(name='IgnoreCase'),
  matchType?: string(name='MatchType', example='exact'),
  path?: string(name='Path', example='/abc'),
}

model AddAuthResourceResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: long(name='Data', example='24'),
  httpStatusCode?: int32(name='HttpStatusCode', example='403'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', example='4BBCF560-4DD7-5DBD-B849-CCB135BBBAB7'),
  success?: boolean(name='Success', example='true'),
}

model AddAuthResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddAuthResourceResponseBody(name='body'),
}

async function addAuthResourceWithOptions(tmpReq: AddAuthResourceRequest, runtime: Util.RuntimeOptions): AddAuthResourceResponse {
  Util.validateModel(tmpReq);
  var request = new AddAuthResourceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.authResourceHeaderList)) {
    request.authResourceHeaderListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.authResourceHeaderList, 'AuthResourceHeaderList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.authId)) {
    query['AuthId'] = request.authId;
  }
  if (!Util.isUnset(request.authResourceHeaderListShrink)) {
    query['AuthResourceHeaderList'] = request.authResourceHeaderListShrink;
  }
  if (!Util.isUnset(request.domainId)) {
    query['DomainId'] = request.domainId;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.ignoreCase)) {
    query['IgnoreCase'] = request.ignoreCase;
  }
  if (!Util.isUnset(request.matchType)) {
    query['MatchType'] = request.matchType;
  }
  if (!Util.isUnset(request.path)) {
    query['Path'] = request.path;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddAuthResource',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addAuthResource(request: AddAuthResourceRequest): AddAuthResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return addAuthResourceWithOptions(request, runtime);
}

model AddBlackWhiteListRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  content?: string(name='Content', example='1.117.115.51'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-0fe488252dc44d55a9dd57875193****'),
  isWhite?: boolean(name='IsWhite', example='false'),
  name?: string(name='Name', example='name'),
  note?: string(name='Note', example='this is a note'),
  resourceIdJsonList?: string(name='ResourceIdJsonList', example='[123]'),
  resourceType?: string(name='ResourceType', example='GATEWAY'),
  status?: string(name='Status', example='off'),
  type?: string(name='Type', example='IP'),
}

model AddBlackWhiteListResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: long(name='Data', example='2'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', example='966F6CA7-16D0-50AB-AB02-E140934F90C1'),
  success?: boolean(name='Success', example='true'),
}

model AddBlackWhiteListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddBlackWhiteListResponseBody(name='body'),
}

async function addBlackWhiteListWithOptions(request: AddBlackWhiteListRequest, runtime: Util.RuntimeOptions): AddBlackWhiteListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.isWhite)) {
    query['IsWhite'] = request.isWhite;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.note)) {
    query['Note'] = request.note;
  }
  if (!Util.isUnset(request.resourceIdJsonList)) {
    query['ResourceIdJsonList'] = request.resourceIdJsonList;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddBlackWhiteList',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addBlackWhiteList(request: AddBlackWhiteListRequest): AddBlackWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return addBlackWhiteListWithOptions(request, runtime);
}

model AddGatewayRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  enableHardwareAcceleration?: boolean(name='EnableHardwareAcceleration', example='false'),
  enableSls?: boolean(name='EnableSls', example='false'),
  enableXtrace?: boolean(name='EnableXtrace', example='false'),
  enterpriseSecurityGroup?: boolean(name='EnterpriseSecurityGroup', example='false'),
  internetSlbSpec?: string(name='InternetSlbSpec', example='slb.s2.small'),
  name?: string(name='Name', description='illegal request:%s', example='test-ceshi'),
  region?: string(name='Region', description='mse-200-021', example='cn-hangzhou'),
  replica?: int32(name='Replica', description='system error', example='2'),
  requestPars?: string(name='RequestPars', description='扩展字段。', example='{}'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfm34x43l*****'),
  slbSpec?: string(name='SlbSpec', description='clusterNotFound', example='slb.s2.small'),
  spec?: string(name='Spec', description='systemError', example='MSE_GTW_2_4_200_c'),
  tag?: [ 
    {
      key?: string(name='Key', example='key'),
      value?: string(name='Value', example='value'),
    }
  ](name='Tag'),
  vSwitchId?: string(name='VSwitchId', description='mse-100-001', example='vsw-bp1q8th57frl5khj2li43'),
  vSwitchId2?: string(name='VSwitchId2', example='vsw-wz9bu6o5vsvitt5mrxo6s'),
  vpc?: string(name='Vpc', description='cluster not found', example='vpc-bp15mncnrtm83uauxd1xb'),
  xtraceRatio?: string(name='XtraceRatio', example='10'),
}

model AddGatewayResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-5017305290e14cebbrvec4a5****'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='2F46B9E7-67EF-5C8A-BA52-D38D5B32AF2C'),
  success?: boolean(name='Success', example='true'),
}

model AddGatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddGatewayResponseBody(name='body'),
}

async function addGatewayWithOptions(request: AddGatewayRequest, runtime: Util.RuntimeOptions): AddGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.enableHardwareAcceleration)) {
    query['EnableHardwareAcceleration'] = request.enableHardwareAcceleration;
  }
  if (!Util.isUnset(request.enableSls)) {
    query['EnableSls'] = request.enableSls;
  }
  if (!Util.isUnset(request.enableXtrace)) {
    query['EnableXtrace'] = request.enableXtrace;
  }
  if (!Util.isUnset(request.enterpriseSecurityGroup)) {
    query['EnterpriseSecurityGroup'] = request.enterpriseSecurityGroup;
  }
  if (!Util.isUnset(request.internetSlbSpec)) {
    query['InternetSlbSpec'] = request.internetSlbSpec;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.replica)) {
    query['Replica'] = request.replica;
  }
  if (!Util.isUnset(request.requestPars)) {
    query['RequestPars'] = request.requestPars;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.slbSpec)) {
    query['SlbSpec'] = request.slbSpec;
  }
  if (!Util.isUnset(request.spec)) {
    query['Spec'] = request.spec;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.vSwitchId2)) {
    query['VSwitchId2'] = request.vSwitchId2;
  }
  if (!Util.isUnset(request.vpc)) {
    query['Vpc'] = request.vpc;
  }
  if (!Util.isUnset(request.xtraceRatio)) {
    query['XtraceRatio'] = request.xtraceRatio;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddGateway',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addGateway(request: AddGatewayRequest): AddGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return addGatewayWithOptions(request, runtime);
}

model AddGatewayAuthConsumerRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  description?: string(name='Description', description='The description of the consumer.', example='description'),
  encodeType?: string(name='EncodeType', description='The encryption type. Valid values:

*   RSA
*   OCT', example='RSA'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-c70622ff52fe49beb29bea9a6f52****'),
  jwks?: string(name='Jwks', description='The JWT public key. The JSON format is supported.', example='{"keys":[{"e":"AQAB","kid":"DHFbpoIUqrY8t2zpA2qXfCmr5VO5ZEr4RzHU_-envvQ","kty":"RSA","n":"xAE7eB6qugXyCAG3yhh7pkDkT65pHymX-P7KfIupjf59vsdo91bSP9C8H07pSAGQO1MV_xFj9VswgsCg4R6otmg5PV2He95lZdHtOcU5DXIg_pbhLdKXbi66GlVeK6ABZOUW3WYtnNHD-91gVuoeJT_DwtGGcp4ignkgXfkiEm4sw-4sfb4qdt5oLbyVpmW6x9cfa7vs2WTfURiCrBoUqgBo_-4WTiULmmHSGZHOjzwa8WtrtOQGsAFjIbno85jp6MnGGGZPYZbDAa_b3y5u-YpW7ypZrvD8BgtKVjgtQgZhLAGezMt0ua3DRrWnKqTZ0BJ_EyxOGuHJrLsn00fnMQ"}]}'),
  keyName?: string(name='KeyName', description='The name of the key used for JWT-based identity authentication.', example='iss'),
  keyValue?: string(name='KeyValue', description='The value of the key used for JWT-based identity authentication.', example='abcd'),
  name?: string(name='Name', description='The name of the consumer.', example='name'),
  tokenName?: string(name='TokenName', description='The names of the parameters that are required to verify each token. By default, each token is prefixed with Bearer and stored in the Authorization header, such as `Authorization: Bearer <Content of a token>`.', example='Authorization'),
  tokenPass?: boolean(name='TokenPass', description='Specifies whether to enable pass-through.', example='true'),
  tokenPosition?: string(name='TokenPosition', description='The positions of the parameters that are required to verify each token. By default, each token is prefixed with Bearer and stored in the Authorization header, such as `Authorization: Bearer <Content of a token>`.', example='HEADER'),
  tokenPrefix?: string(name='TokenPrefix', description='The prefixes of the parameters that are required to verify each token. By default, each token is prefixed with Bearer and stored in the Authorization header, such as `Authorization: Bearer <Content of a token>`.', example='Bearer'),
  type?: string(name='Type', description='The authentication type. Valid values:

*   JWT', example='JWT'),
}

model AddGatewayAuthConsumerResponseBody = {
  code?: int32(name='Code', description='The status code. A value of 200 is returned if the request is successful.', example='200'),
  data?: long(name='Data', description='The ID of the consumer.', example='2'),
  dynamicCode?: string(name='DynamicCode', description='The dynamic part in the error message.', example='code'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the `%s` variable in the `ErrMessage` parameter.

>  If the return value of the `ErrMessage` parameter is `The Value of Input Parameter %s is not valid` and the return value of the `DynamicMessage` parameter is `DtsJobId`, the specified `DtsJobId` parameter is invalid.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code that is returned.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='69AD2AA7-DB47-449B-941B-B14409DF****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='True'),
}

model AddGatewayAuthConsumerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddGatewayAuthConsumerResponseBody(name='body'),
}

async function addGatewayAuthConsumerWithOptions(request: AddGatewayAuthConsumerRequest, runtime: Util.RuntimeOptions): AddGatewayAuthConsumerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.encodeType)) {
    query['EncodeType'] = request.encodeType;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.jwks)) {
    query['Jwks'] = request.jwks;
  }
  if (!Util.isUnset(request.keyName)) {
    query['KeyName'] = request.keyName;
  }
  if (!Util.isUnset(request.keyValue)) {
    query['KeyValue'] = request.keyValue;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.tokenName)) {
    query['TokenName'] = request.tokenName;
  }
  if (!Util.isUnset(request.tokenPass)) {
    query['TokenPass'] = request.tokenPass;
  }
  if (!Util.isUnset(request.tokenPosition)) {
    query['TokenPosition'] = request.tokenPosition;
  }
  if (!Util.isUnset(request.tokenPrefix)) {
    query['TokenPrefix'] = request.tokenPrefix;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddGatewayAuthConsumer',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addGatewayAuthConsumer(request: AddGatewayAuthConsumerRequest): AddGatewayAuthConsumerResponse {
  var runtime = new Util.RuntimeOptions{};
  return addGatewayAuthConsumerWithOptions(request, runtime);
}

model AddGatewayDomainRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  certIdentifier?: string(name='CertIdentifier', example='6828169-cn-hangzhou'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-86575c0bc9f04ecfbacb92b8e392****'),
  http2?: string(name='Http2', example='close'),
  mustHttps?: boolean(name='MustHttps', example='true'),
  name?: string(name='Name', example='test.com'),
  protocol?: string(name='Protocol', example='HTTP'),
  tlsMax?: string(name='TlsMax', example='TLS 1.3'),
  tlsMin?: string(name='TlsMin', example='TLS 1.0'),
}

model AddGatewayDomainResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: long(name='Data', example='100'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='16BA802F-B848-55DF-9F57-CD71B7272D1F'),
  success?: boolean(name='Success', example='true'),
}

model AddGatewayDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddGatewayDomainResponseBody(name='body'),
}

async function addGatewayDomainWithOptions(request: AddGatewayDomainRequest, runtime: Util.RuntimeOptions): AddGatewayDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.certIdentifier)) {
    query['CertIdentifier'] = request.certIdentifier;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.http2)) {
    query['Http2'] = request.http2;
  }
  if (!Util.isUnset(request.mustHttps)) {
    query['MustHttps'] = request.mustHttps;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.protocol)) {
    query['Protocol'] = request.protocol;
  }
  if (!Util.isUnset(request.tlsMax)) {
    query['TlsMax'] = request.tlsMax;
  }
  if (!Util.isUnset(request.tlsMin)) {
    query['TlsMin'] = request.tlsMin;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddGatewayDomain',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addGatewayDomain(request: AddGatewayDomainRequest): AddGatewayDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return addGatewayDomainWithOptions(request, runtime);
}

model AddGatewayRouteRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  destinationType?: string(name='DestinationType', description='The destination service type.

Enumeration values:

*   VersionOriented

    <!-- -->

    <!-- -->

    <!-- -->

*   Multiple

    <!-- -->

    <!-- -->

    <!-- -->

*   Single

    <!-- -->

    <!-- -->

    <!-- -->

*   Mock\\"\\"

    <!-- -->

    <!-- -->

    <!-- -->

*   Redirect

    <!-- -->

    <!-- -->

    <!-- -->', example='Multiple'),
  directResponseJSON?: {
    body?: string(name='Body', description='The mock return value.', example='hello'),
    code?: long(name='Code', description='The mock return code.', example='403'),
  }(name='DirectResponseJSON', description='The mock response configuration.'),
  domainId?: long(name='DomainId', description='The domain ID.', example='20'),
  domainIdListJSON?: string(name='DomainIdListJSON', description='The list of domain IDs.', example='[0,94]'),
  enableWaf?: boolean(name='EnableWaf', description='Specifies whether to activate Web Application Firewall (WAF).', example='true'),
  fallback?: boolean(name='Fallback', description='Specifies whether to enable the Fallback service.', example='true'),
  fallbackServices?: [ 
    {
      agreementType?: string(name='AgreementType', description='The type of the protocol.', example='DUBBO'),
      groupName?: string(name='GroupName', description='The name of the group to which the service belongs.', example='test'),
      name?: string(name='Name', description='The name.', example='user'),
      namespace?: string(name='Namespace', description='The namespace to which the service belongs.', example='default'),
      percent?: int32(name='Percent', description='The weight in the form of a percentage value.', example='80'),
      serviceId?: long(name='ServiceId', description='The ID of the service.', example='353'),
      servicePort?: int32(name='ServicePort', description='The service port number.', example='443'),
      sourceType?: string(name='SourceType', description='The source type.', example='MSE'),
      version?: string(name='Version', description='The version of the service.', example='v1'),
    }
  ](name='FallbackServices', description='The information about the Fallback service.'),
  gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='526'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-492af9b04bb4474cae9d645be8*****'),
  name?: string(name='Name', description='The name of the route.', example='test'),
  policies?: string(name='Policies', description='The routing policy in a JSON string.', example='{"CORS":"{\\"allowMethods\\":\\"GET,POST,PUT,DELETE,HEAD,OPTIONS,PATCH\\",\\"allowHeaders\\":\\"*\\",\\"exposeHeaders\\":\\"*\\",\\"unitNum\\":12,\\"allowCredentials\\":true,\\"status\\":\\"off\\",\\"allowOrigins\\":\\"*\\",\\"timeUnit\\":\\"h\\"}","Timeout":"{\\"unitNum\\":10,\\"timeUnit\\":\\"s\\",\\"status\\":\\"off\\"}","Retry":"{\\"attempts\\":2,\\"retryOn\\":[\\"5xx\\"],\\"status\\":\\"off\\"}","HTTPRewrite":"{\\"pathType\\":\\"EQUAL\\",\\"path\\":\\"/o\\",\\"status\\":\\"off\\"}","Waf":"{\\"enabled\\":false}","HeaderOp":"{\\"status\\":\\"off\\",\\"headerOpItems\\":[{\\"directionType\\":\\"Request\\",\\"opType\\":\\"Add\\",\\"key\\":\\"kkk\\",\\"value\\":\\"ll\\"}]}"}'),
  predicates?: {
    headerPredicates?: [ 
      {
        key?: string(name='Key', description='The key of the request header.', example='debug'),
        type?: string(name='Type', description='The matching type.', example='PRE'),
        value?: string(name='Value', description='The value of the request header.', example='test'),
      }
    ](name='HeaderPredicates', description='The information about header matching.'),
    methodPredicates?: [ string ](name='MethodPredicates', description='The information about method matching.'),
    pathPredicates?: {
      ignoreCase?: boolean(name='IgnoreCase', description='Specifies whether to ignore case sensitivity.', example='true'),
      path?: string(name='Path', description='The path.', example='/test'),
      type?: string(name='Type', description='The route matching type. Valid values:

*   PRE: prefix matching
*   EQUAL: exact matching
*   ERGULAR: regular expression matching', example='PRE'),
    }(name='PathPredicates', description='The information about route matching.'),
    queryPredicates?: [ 
      {
        key?: string(name='Key', description='The name of the parameter.', example='userid'),
        type?: string(name='Type', description='The matching type.', example='PRE'),
        value?: string(name='Value', description='The value of the parameter.', example='test'),
      }
    ](name='QueryPredicates', description='The information about URL parameter matching.'),
  }(name='Predicates', description='The matching rule.'),
  redirectJSON?: {
    code?: int32(name='Code', description='The status code returned.', example='302'),
    host?: string(name='Host', description='The hostname to be redirected to.', example='test.com'),
    path?: string(name='Path', description='The path to be redirected to.', example='/test'),
  }(name='RedirectJSON', description='The configuration of the redirection.'),
  routeOrder?: int32(name='RouteOrder', description='The sequence number of the route. (A small value indicates a high priority.)', example='1'),
  routeType?: string(name='RouteType', description='The route type. Valid values:

Op: Manage routes.', example='Op'),
  services?: [ 
    {
      agreementType?: string(name='AgreementType', description='The type of the protocol.', example='DUBBO'),
      groupName?: string(name='GroupName', description='The name of the group to which the service belongs.', example='test'),
      httpDubboTranscoder?: {
        dubboServiceGroup?: string(name='DubboServiceGroup', description='The name of the service group.', example='None'),
        dubboServiceName?: string(name='DubboServiceName', description='The name of the Dubbo service.', example='org.apache.dubbo.samples.basic.api.DemoService'),
        dubboServiceVersion?: string(name='DubboServiceVersion', description='The version of the Dubbo service.', example='0.0.0'),
        mothedMapList?: [ 
          {
            dubboMothedName?: string(name='DubboMothedName', description='The method name of the Dubbo service.', example='sayHello'),
            httpMothed?: string(name='HttpMothed', description='The HTTP method.

> Valid values:

*   ALL_GET

*   ALL_POST

*   ALL_PUT

*   ALL_DELETE

*   ALL_PATCH', example='ALL_GET'),
            mothedpath?: string(name='Mothedpath', description='The path used for method matching.', example='/mytestzbk/sayhello'),
            paramMapsList?: [ 
              {
                extractKey?: string(name='ExtractKey', description='The key extracted from the input parameter.', example='name'),
                extractKeySpec?: string(name='ExtractKeySpec', description='The position of the input parameter.

> Valid values:

*   `ALL_QUERY_PARAMETER`: request parameter

*   `ALL_HEADER`: request header
*   `ALL_PATH`: request path
*   `ALL_BODY`: request body', example='ALL_QUERY_PARAMETER'),
                mappingType?: string(name='MappingType', description='The type of the backend service parameter.', example='java.lang.String'),
              }
            ](name='ParamMapsList', description='The information about parameter mappings.'),
            passThroughAllHeaders?: string(name='PassThroughAllHeaders', description='The pass-through type of the header.

> Valid values:

*   PASS_ALL: All headers are passed through.

*   PASS_NOT: All headers are not passed through.

*   PASS_ASSIGN: Specified headers are passed through.', example='PASS_NOT'),
            passThroughList?: [ string ](name='PassThroughList', description='The list of headers to be passed through.'),
          }
        ](name='MothedMapList', description='The forwarding rules of the Dubbo service.'),
      }(name='HttpDubboTranscoder', description='The transcoder of the Dubbo protocol.'),
      name?: string(name='Name', description='The name.', example='user'),
      namespace?: string(name='Namespace', description='The namespace to which the service belongs.', example='default'),
      percent?: int32(name='Percent', description='The weight in the form of a percentage value.', example='80'),
      serviceId?: long(name='ServiceId', description='The ID of the service.', example='353'),
      servicePort?: int32(name='ServicePort', description='The service port number.', example='443'),
      sourceType?: string(name='SourceType', description='The source type.', example='MSE'),
      version?: string(name='Version', description='The version of the service.', example='v1'),
    }
  ](name='Services', description='The list of services.'),
}

model AddGatewayRouteShrinkRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  destinationType?: string(name='DestinationType', description='The destination service type.

Enumeration values:

*   VersionOriented

    <!-- -->

    <!-- -->

    <!-- -->

*   Multiple

    <!-- -->

    <!-- -->

    <!-- -->

*   Single

    <!-- -->

    <!-- -->

    <!-- -->

*   Mock\\"\\"

    <!-- -->

    <!-- -->

    <!-- -->

*   Redirect

    <!-- -->

    <!-- -->

    <!-- -->', example='Multiple'),
  directResponseJSONShrink?: string(name='DirectResponseJSON', description='The mock response configuration.'),
  domainId?: long(name='DomainId', description='The domain ID.', example='20'),
  domainIdListJSON?: string(name='DomainIdListJSON', description='The list of domain IDs.', example='[0,94]'),
  enableWaf?: boolean(name='EnableWaf', description='Specifies whether to activate Web Application Firewall (WAF).', example='true'),
  fallback?: boolean(name='Fallback', description='Specifies whether to enable the Fallback service.', example='true'),
  fallbackServicesShrink?: string(name='FallbackServices', description='The information about the Fallback service.'),
  gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='526'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-492af9b04bb4474cae9d645be8*****'),
  name?: string(name='Name', description='The name of the route.', example='test'),
  policies?: string(name='Policies', description='The routing policy in a JSON string.', example='{"CORS":"{\\"allowMethods\\":\\"GET,POST,PUT,DELETE,HEAD,OPTIONS,PATCH\\",\\"allowHeaders\\":\\"*\\",\\"exposeHeaders\\":\\"*\\",\\"unitNum\\":12,\\"allowCredentials\\":true,\\"status\\":\\"off\\",\\"allowOrigins\\":\\"*\\",\\"timeUnit\\":\\"h\\"}","Timeout":"{\\"unitNum\\":10,\\"timeUnit\\":\\"s\\",\\"status\\":\\"off\\"}","Retry":"{\\"attempts\\":2,\\"retryOn\\":[\\"5xx\\"],\\"status\\":\\"off\\"}","HTTPRewrite":"{\\"pathType\\":\\"EQUAL\\",\\"path\\":\\"/o\\",\\"status\\":\\"off\\"}","Waf":"{\\"enabled\\":false}","HeaderOp":"{\\"status\\":\\"off\\",\\"headerOpItems\\":[{\\"directionType\\":\\"Request\\",\\"opType\\":\\"Add\\",\\"key\\":\\"kkk\\",\\"value\\":\\"ll\\"}]}"}'),
  predicatesShrink?: string(name='Predicates', description='The matching rule.'),
  redirectJSONShrink?: string(name='RedirectJSON', description='The configuration of the redirection.'),
  routeOrder?: int32(name='RouteOrder', description='The sequence number of the route. (A small value indicates a high priority.)', example='1'),
  routeType?: string(name='RouteType', description='The route type. Valid values:

Op: Manage routes.', example='Op'),
  servicesShrink?: string(name='Services', description='The list of services.'),
}

model AddGatewayRouteResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: long(name='Data', description='The response data.', example='555'),
  errorCode?: string(name='ErrorCode', description='The error code that is returned.

*   InvalidParameter: The parameter is invalid. For example, the parameter is incomplete or the parameter format is invalid.
*   IllegalRequest: The request is invalid. Unauthorized access to data initiated by parameters is identified.
*   NoPermission: You are not authorized to perform this operation.
*   NotFound: The resource does not exist and error 404 is returned.
*   InternalError: An internal error occurred.', example='InvalidParameter'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='03A3E2F4-6804-5663-9D5D-2EC47A1*****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model AddGatewayRouteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddGatewayRouteResponseBody(name='body'),
}

async function addGatewayRouteWithOptions(tmpReq: AddGatewayRouteRequest, runtime: Util.RuntimeOptions): AddGatewayRouteResponse {
  Util.validateModel(tmpReq);
  var request = new AddGatewayRouteShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.directResponseJSON)) {
    request.directResponseJSONShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.directResponseJSON, 'DirectResponseJSON', 'json');
  }
  if (!Util.isUnset(tmpReq.fallbackServices)) {
    request.fallbackServicesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.fallbackServices, 'FallbackServices', 'json');
  }
  if (!Util.isUnset(tmpReq.predicates)) {
    request.predicatesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.predicates, 'Predicates', 'json');
  }
  if (!Util.isUnset(tmpReq.redirectJSON)) {
    request.redirectJSONShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.redirectJSON, 'RedirectJSON', 'json');
  }
  if (!Util.isUnset(tmpReq.services)) {
    request.servicesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.services, 'Services', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.destinationType)) {
    query['DestinationType'] = request.destinationType;
  }
  if (!Util.isUnset(request.directResponseJSONShrink)) {
    query['DirectResponseJSON'] = request.directResponseJSONShrink;
  }
  if (!Util.isUnset(request.domainId)) {
    query['DomainId'] = request.domainId;
  }
  if (!Util.isUnset(request.domainIdListJSON)) {
    query['DomainIdListJSON'] = request.domainIdListJSON;
  }
  if (!Util.isUnset(request.enableWaf)) {
    query['EnableWaf'] = request.enableWaf;
  }
  if (!Util.isUnset(request.fallback)) {
    query['Fallback'] = request.fallback;
  }
  if (!Util.isUnset(request.fallbackServicesShrink)) {
    query['FallbackServices'] = request.fallbackServicesShrink;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.policies)) {
    query['Policies'] = request.policies;
  }
  if (!Util.isUnset(request.predicatesShrink)) {
    query['Predicates'] = request.predicatesShrink;
  }
  if (!Util.isUnset(request.redirectJSONShrink)) {
    query['RedirectJSON'] = request.redirectJSONShrink;
  }
  if (!Util.isUnset(request.routeOrder)) {
    query['RouteOrder'] = request.routeOrder;
  }
  if (!Util.isUnset(request.routeType)) {
    query['RouteType'] = request.routeType;
  }
  if (!Util.isUnset(request.servicesShrink)) {
    query['Services'] = request.servicesShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddGatewayRoute',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addGatewayRoute(request: AddGatewayRouteRequest): AddGatewayRouteResponse {
  var runtime = new Util.RuntimeOptions{};
  return addGatewayRouteWithOptions(request, runtime);
}

model AddGatewayServiceVersionRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='mse-100-007', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='duplicated cluster alias name', example='gw-913a49bab6c5461187a3305fb8da****'),
  serviceId?: long(name='ServiceId', description='mse-200-105', example='33'),
  serviceVersion?: string(name='ServiceVersion', description='duplicatedClusterAliasName', example='{\\"name\\":\\"v1\\",\\"labels\\":[{\\"key\\":\\"version\\",\\"value\\":\\"v1\\"}]}'),
}

model AddGatewayServiceVersionResponseBody = {
  code?: int32(name='Code', description='mse-100-001', example='200'),
  data?: long(name='Data', description='system error', example='330'),
  httpStatusCode?: int32(name='HttpStatusCode', description='mse-200-021', example='403'),
  message?: string(name='Message', description='clusterNotFound', example='cluster not found'),
  requestId?: string(name='RequestId', description='illegal request:%s', example='BA4046B6-CFC6-583C-B608-DD75011A590F'),
  success?: boolean(name='Success', description='systemError', example='true'),
}

model AddGatewayServiceVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddGatewayServiceVersionResponseBody(name='body'),
}

async function addGatewayServiceVersionWithOptions(request: AddGatewayServiceVersionRequest, runtime: Util.RuntimeOptions): AddGatewayServiceVersionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.serviceId)) {
    query['ServiceId'] = request.serviceId;
  }
  if (!Util.isUnset(request.serviceVersion)) {
    query['ServiceVersion'] = request.serviceVersion;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddGatewayServiceVersion',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addGatewayServiceVersion(request: AddGatewayServiceVersionRequest): AddGatewayServiceVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return addGatewayServiceVersionWithOptions(request, runtime);
}

model AddGatewaySlbRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-9cdcf8e4f58144059e73ff4c5ef9****'),
  httpPort?: int32(name='HttpPort', description='The HTTP port number (virtual service group).', example='80'),
  httpsPort?: int32(name='HttpsPort', description='The HTTPS port number (virtual service group).', example='443'),
  httpsVServerGroupId?: string(name='HttpsVServerGroupId', description='The ID of the HTTPS virtual service group.', example='353'),
  serviceWeight?: int32(name='ServiceWeight', description='The service weight.', example='80'),
  slbId?: string(name='SlbId', description='The ID of the SLB instance.', example='lb-bp18t6jjskwxh6wy1****'),
  type?: string(name='Type', description='The type of the service source. Valid values:

*   PUB_NET: Internet
*   PRIVATE_NET: VPC', example='PUB_NET'),
  VServerGroupId?: string(name='VServerGroupId', description='The ID of the HTTP virtual service group.', example='353'),
}

model AddGatewaySlbResponseBody = {
  code?: int32(name='Code', description='The response code returned.', example='200'),
  data?: string(name='Data', description='The data returned.', example='lb-uf6dqr4ondqi5w3df7hdf'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.

*   If the request is successful, a success message is returned.
*   If the request fails, an error message is returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model AddGatewaySlbResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddGatewaySlbResponseBody(name='body'),
}

async function addGatewaySlbWithOptions(request: AddGatewaySlbRequest, runtime: Util.RuntimeOptions): AddGatewaySlbResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.httpPort)) {
    query['HttpPort'] = request.httpPort;
  }
  if (!Util.isUnset(request.httpsPort)) {
    query['HttpsPort'] = request.httpsPort;
  }
  if (!Util.isUnset(request.httpsVServerGroupId)) {
    query['HttpsVServerGroupId'] = request.httpsVServerGroupId;
  }
  if (!Util.isUnset(request.serviceWeight)) {
    query['ServiceWeight'] = request.serviceWeight;
  }
  if (!Util.isUnset(request.slbId)) {
    query['SlbId'] = request.slbId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.VServerGroupId)) {
    query['VServerGroupId'] = request.VServerGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddGatewaySlb',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addGatewaySlb(request: AddGatewaySlbRequest): AddGatewaySlbResponse {
  var runtime = new Util.RuntimeOptions{};
  return addGatewaySlbWithOptions(request, runtime);
}

model AddMigrationTaskRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  clusterType?: string(name='ClusterType', description='The type of the instance. Valid values:

*   Nacos-Ans
*   ZooKeeper
*   Eureka', example='Nacos-Ans'),
  originInstanceAddress?: string(name='OriginInstanceAddress', description='The endpoint of the source instance node.', example='192.168.1.1:8848'),
  originInstanceName?: string(name='OriginInstanceName', description='The name of the source instance.', example='Source instance'),
  originInstanceNamespace?: string(name='OriginInstanceNamespace', description='The list of namespaces. This parameter is optional if you want to migrate applications from a Nacos instance.', example='namesapceId1,namesapceId2'),
  projectDesc?: string(name='ProjectDesc', description='The description.', example='This is a description.'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}'),
  targetClusterName?: string(name='TargetClusterName', description='The name of the destination instance.', example='Destination instance'),
  targetClusterUrl?: string(name='TargetClusterUrl', description='The URL of the destination instance.', example='mse-66*****-nacos-ans.mse.aliyuncs.com:8848'),
  targetInstanceId?: string(name='TargetInstanceId', description='The ID of the destination instance.', example='mse-cn-ud82*****'),
}

model AddMigrationTaskResponseBody = {
  data?: {
    clusterType?: string(name='ClusterType', description='The type of the instance. Valid values:

*   Nacos-Ans
*   ZooKeeper
*   Eureka', example='Nacos-Ans'),
    id?: string(name='Id', description='The ID of the task.', example='12'),
    originInstanceAddress?: string(name='OriginInstanceAddress', description='The endpoint of the source instance node.', example='192.168.1.1:8848'),
    originInstanceName?: string(name='OriginInstanceName', description='The name of the source instance.', example='Source instance'),
    originInstanceNamespace?: string(name='OriginInstanceNamespace', description='The list of namespaces. This parameter is optional if applications are migrated from a Nacos instance.', example='namesapceId1,namesapceId2'),
    projectDesc?: string(name='ProjectDesc', description='The description.', example='testsdfsdfsd'),
    targetClusterName?: string(name='TargetClusterName', description='The name of the destination instance.', example='Destination instance'),
    targetClusterUrl?: string(name='TargetClusterUrl', description='The URL of the destination instance.', example='mse-94d****-nacos-ans.mse.aliyuncs.com:8848'),
    targetInstanceId?: string(name='TargetInstanceId', description='The ID of the destination instance.', example='mse-cn-7pp2w*****'),
    userId?: string(name='UserId', description='The ID of the user.', example='183876217*****'),
  }(name='Data', description='The data structure.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  message?: string(name='Message', description='The message returned.', example='The request is processed successfully.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7466566F-F30F-4A29-965D-3E0AF21D****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model AddMigrationTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddMigrationTaskResponseBody(name='body'),
}

async function addMigrationTaskWithOptions(request: AddMigrationTaskRequest, runtime: Util.RuntimeOptions): AddMigrationTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterType)) {
    query['ClusterType'] = request.clusterType;
  }
  if (!Util.isUnset(request.originInstanceAddress)) {
    query['OriginInstanceAddress'] = request.originInstanceAddress;
  }
  if (!Util.isUnset(request.originInstanceName)) {
    query['OriginInstanceName'] = request.originInstanceName;
  }
  if (!Util.isUnset(request.originInstanceNamespace)) {
    query['OriginInstanceNamespace'] = request.originInstanceNamespace;
  }
  if (!Util.isUnset(request.projectDesc)) {
    query['ProjectDesc'] = request.projectDesc;
  }
  if (!Util.isUnset(request.requestPars)) {
    query['RequestPars'] = request.requestPars;
  }
  if (!Util.isUnset(request.targetClusterName)) {
    query['TargetClusterName'] = request.targetClusterName;
  }
  if (!Util.isUnset(request.targetClusterUrl)) {
    query['TargetClusterUrl'] = request.targetClusterUrl;
  }
  if (!Util.isUnset(request.targetInstanceId)) {
    query['TargetInstanceId'] = request.targetInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddMigrationTask',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addMigrationTask(request: AddMigrationTaskRequest): AddMigrationTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return addMigrationTaskWithOptions(request, runtime);
}

model AddMockRuleRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  consumerAppIds?: string(name='ConsumerAppIds', example='[{\\"appName\\":\\"provide\\",\\"appId\\":\\"bst8l6o735@f6d8aaf6e56e67d\\"}]'),
  dubboMockItems?: string(name='DubboMockItems', example='[]'),
  enable?: boolean(name='Enable', example='true'),
  extraJson?: string(name='ExtraJson', example='{}'),
  mockType?: long(name='MockType', example='1'),
  name?: string(name='Name', example='agent-auto-test-sc'),
  providerAppId?: string(name='ProviderAppId', example='dcqtkuhnc4@66e5235415****'),
  providerAppName?: string(name='ProviderAppName', example='demo-cartservice'),
  region?: string(name='Region', example='cn-hangzhou'),
  scMockItems?: string(name='ScMockItems', example='[]'),
  source?: string(name='Source', example='edasmsc'),
}

model AddMockRuleResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    accountId?: string(name='AccountId', example='178432728867xxxx'),
    consumerAppId?: string(name='ConsumerAppId', example='hkhon1po62@a000601b265xxxx'),
    consumerAppName?: string(name='ConsumerAppName', example='demo-xxxx'),
    enable?: boolean(name='Enable', example='true'),
    extraJson?: string(name='ExtraJson', example='desc'),
    id?: long(name='Id', example='275'),
    mockType?: long(name='MockType', example='0'),
    name?: string(name='Name', example='mse-bc1a29b0-160230875****-reg-center-0-1'),
    namespaceId?: string(name='NamespaceId', example='cn-shanghai'),
    providerAppId?: string(name='ProviderAppId', example='hkhon1po62@a000601b265xxxx'),
    providerAppName?: string(name='ProviderAppName', example='demo-xxxx'),
    region?: string(name='Region', example='cn-shanghai'),
    scMockItemJson?: string(name='ScMockItemJson', example='[{"oper":"return+json","Path":"/mock","Value":"{\\n \\"date\\": \\"2021-09-10T07:45:12.357+0000\\",\\n \\"name\\": \\"name\\",\\n \\"id\\": \\"1\\"\\n}","Method":"GET","Condition":"AND","Timeout":1,"ArgumentMockItems":[{"type":"param","name":"id","value":"1","cond":"==","operator":"rawvalue"},{"type":"param","name":"name","value":"aliyun","cond":"==","operator":"rawvalue"}]}]'),
    source?: string(name='Source', example='edasmsc'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', example='true'),
}

model AddMockRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddMockRuleResponseBody(name='body'),
}

async function addMockRuleWithOptions(request: AddMockRuleRequest, runtime: Util.RuntimeOptions): AddMockRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.consumerAppIds)) {
    query['ConsumerAppIds'] = request.consumerAppIds;
  }
  if (!Util.isUnset(request.dubboMockItems)) {
    query['DubboMockItems'] = request.dubboMockItems;
  }
  if (!Util.isUnset(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!Util.isUnset(request.extraJson)) {
    query['ExtraJson'] = request.extraJson;
  }
  if (!Util.isUnset(request.mockType)) {
    query['MockType'] = request.mockType;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.providerAppId)) {
    query['ProviderAppId'] = request.providerAppId;
  }
  if (!Util.isUnset(request.providerAppName)) {
    query['ProviderAppName'] = request.providerAppName;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.scMockItems)) {
    query['ScMockItems'] = request.scMockItems;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddMockRule',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addMockRule(request: AddMockRuleRequest): AddMockRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return addMockRuleWithOptions(request, runtime);
}

model AddSSLCertRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  certIdentifier?: string(name='CertIdentifier', example='5213641-cn-hangzhou'),
  domainId?: long(name='DomainId', example='0'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-c70622ff52fe49beb29bea9a6f52****'),
}

model AddSSLCertResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', example='E1CC74F0-5BDE-5220-A031-5CA622D80723'),
  success?: boolean(name='Success', example='true'),
}

model AddSSLCertResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddSSLCertResponseBody(name='body'),
}

async function addSSLCertWithOptions(request: AddSSLCertRequest, runtime: Util.RuntimeOptions): AddSSLCertResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.certIdentifier)) {
    query['CertIdentifier'] = request.certIdentifier;
  }
  if (!Util.isUnset(request.domainId)) {
    query['DomainId'] = request.domainId;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddSSLCert',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addSSLCert(request: AddSSLCertRequest): AddSSLCertResponse {
  var runtime = new Util.RuntimeOptions{};
  return addSSLCertWithOptions(request, runtime);
}

model AddSecurityGroupRuleRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='system error', example='zh'),
  description?: string(name='Description', description='systemError', example='description'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='mse-100-001', example='gw-c9bc5afd61014165bd58f621b491****'),
  portRange?: string(name='PortRange', description='cluster not found', example='1/65535'),
  securityGroupId?: string(name='SecurityGroupId', description='clusterNotFound', example='sg-wz929kxhcdpw9z8idqd8'),
}

model AddSecurityGroupRuleResponseBody = {
  code?: int32(name='Code', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='200'),
  data?: string(name='Data', description='The ID of the request.', example='12'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The ID of the gateway.', example='200'),
  message?: string(name='Message', description='The description.', example='success'),
  requestId?: string(name='RequestId', description='The range of port numbers.', example='D0DB055C-51F2-5BB2-82A6-CD8A3C6EE6BA'),
  success?: boolean(name='Success', description='The schema of the response.', example='true'),
}

model AddSecurityGroupRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddSecurityGroupRuleResponseBody(name='body'),
}

async function addSecurityGroupRuleWithOptions(request: AddSecurityGroupRuleRequest, runtime: Util.RuntimeOptions): AddSecurityGroupRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.portRange)) {
    query['PortRange'] = request.portRange;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddSecurityGroupRule',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addSecurityGroupRule(request: AddSecurityGroupRuleRequest): AddSecurityGroupRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return addSecurityGroupRuleWithOptions(request, runtime);
}

model AddServiceSourceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='Specifies whether to monitor Ingress classes.', example='zh-CN'),
  address?: string(name='Address', description='The language in which the returned information is displayed. Valid values:

*   zh-CN: Chinese. This is the default value.
*   en-US: English.
*   ja: Japanese.', example='c9ad2a0717032427e920754e25b49e3b5'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The ID of the request.', example='gw-c70622ff52fe49beb29bea9a6f52****'),
  groupList?: [ string ](name='GroupList', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.'),
  ingressOptionsRequest?: {
    enableIngress?: boolean(name='EnableIngress', description='The message returned.', example='true'),
    enableStatus?: boolean(name='EnableStatus', description='The returned data.', example='true'),
    ingressClass?: string(name='IngressClass', description='The return value.', example='com.test.xxx'),
    watchNamespace?: string(name='WatchNamespace', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='default'),
  }(name='IngressOptionsRequest', description='The HTTP status code returned.'),
  name?: string(name='Name', description='The data structure.', example='istio'),
  pathList?: [ string ](name='PathList', description='An array of service root paths.'),
  source?: string(name='Source', description='The root path of the service.', example='K8S，MSE'),
  type?: string(name='Type', description='An array of service root paths.', example='K8S，NACOS'),
}

model AddServiceSourceShrinkRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='Specifies whether to monitor Ingress classes.', example='zh-CN'),
  address?: string(name='Address', description='The language in which the returned information is displayed. Valid values:

*   zh-CN: Chinese. This is the default value.
*   en-US: English.
*   ja: Japanese.', example='c9ad2a0717032427e920754e25b49e3b5'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The ID of the request.', example='gw-c70622ff52fe49beb29bea9a6f52****'),
  groupListShrink?: string(name='GroupList', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.'),
  ingressOptionsRequestShrink?: string(name='IngressOptionsRequest', description='The HTTP status code returned.'),
  name?: string(name='Name', description='The data structure.', example='istio'),
  pathListShrink?: string(name='PathList', description='An array of service root paths.'),
  source?: string(name='Source', description='The root path of the service.', example='K8S，MSE'),
  type?: string(name='Type', description='An array of service root paths.', example='K8S，NACOS'),
}

model AddServiceSourceResponseBody = {
  code?: int32(name='Code', description='The address.', example='200'),
  data?: long(name='Data', description='The return value.', example='63'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The namespace whose resources you want to monitor.', example='200'),
  message?: string(name='Message', description='Specifies whether to update the Ingress status.', example='You are not authorized to perform this operation. Action: mse:AddServiceSource, Resource: acs:mse:cn-hangzhou:1105471854403716:instance/gw-082c943a8c304e48a37a7a29a5ddeda7'),
  requestId?: string(name='RequestId', description='The root path of the service.', example='D0DB055C-51F2-5BB2-82A6-CD8A3C6EE6BA'),
  success?: boolean(name='Success', description='The list of service groups.', example='true'),
}

model AddServiceSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddServiceSourceResponseBody(name='body'),
}

async function addServiceSourceWithOptions(tmpReq: AddServiceSourceRequest, runtime: Util.RuntimeOptions): AddServiceSourceResponse {
  Util.validateModel(tmpReq);
  var request = new AddServiceSourceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.groupList)) {
    request.groupListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.groupList, 'GroupList', 'json');
  }
  if (!Util.isUnset(tmpReq.ingressOptionsRequest)) {
    request.ingressOptionsRequestShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ingressOptionsRequest, 'IngressOptionsRequest', 'json');
  }
  if (!Util.isUnset(tmpReq.pathList)) {
    request.pathListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.pathList, 'PathList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.address)) {
    query['Address'] = request.address;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.groupListShrink)) {
    query['GroupList'] = request.groupListShrink;
  }
  if (!Util.isUnset(request.ingressOptionsRequestShrink)) {
    query['IngressOptionsRequest'] = request.ingressOptionsRequestShrink;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pathListShrink)) {
    query['PathList'] = request.pathListShrink;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddServiceSource',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addServiceSource(request: AddServiceSourceRequest): AddServiceSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return addServiceSourceWithOptions(request, runtime);
}

model ApplyGatewayRouteRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='duplicated cluster alias name', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='duplicatedClusterAliasName', example='gw-1a4ab101d5924b6f92c5ec98a841761f'),
  routeId?: string(name='RouteId', description='mse-200-105', example='950'),
}

model ApplyGatewayRouteResponseBody = {
  code?: int32(name='Code', description='clusterNotFound', example='200'),
  data?: boolean(name='Data', description='mse-100-001', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', description='illegal request:%s', example='200'),
  message?: string(name='Message', description='mse-200-021', example='success'),
  requestId?: string(name='RequestId', description='illegalRequest', example='1DB1AB36-8395-540E-AACC-7571D6B2057A'),
  success?: boolean(name='Success', description='cluster not found', example='true'),
}

model ApplyGatewayRouteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApplyGatewayRouteResponseBody(name='body'),
}

async function applyGatewayRouteWithOptions(request: ApplyGatewayRouteRequest, runtime: Util.RuntimeOptions): ApplyGatewayRouteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.routeId)) {
    query['RouteId'] = request.routeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ApplyGatewayRoute',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function applyGatewayRoute(request: ApplyGatewayRouteRequest): ApplyGatewayRouteResponse {
  var runtime = new Util.RuntimeOptions{};
  return applyGatewayRouteWithOptions(request, runtime);
}

model ApplyTagPoliciesRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  appId?: string(name='AppId', example='h5pohqu3gd@xxx', deprecated='true'),
  appName?: string(name='AppName', example='example-app'),
  enable?: boolean(name='Enable', example='true'),
  namespace?: string(name='Namespace', example='default'),
  namespaceId?: string(name='NamespaceId', example='12233****'),
  region?: string(name='Region', example='cn-hangzhou'),
  rules?: string(name='Rules'),
  source?: string(name='Source', example='edasmsc'),
}

model ApplyTagPoliciesResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      carryData?: boolean(name='CarryData', example='true'),
      enable?: boolean(name='Enable', example='true'),
      id?: long(name='Id', example='12'),
      instanceNum?: int32(name='InstanceNum', example='1'),
      name?: string(name='Name', example='test'),
      rate?: int32(name='Rate', example='10'),
      remove?: boolean(name='Remove'),
      rules?: string(name='Rules', example='{\\"_base\\": {\\"rate\\": 100, \\"remove\\": true}, \\"blue\\": {\\"rate\\": 0}}'),
      status?: int32(name='Status', example='1'),
      tag?: string(name='Tag', example='gray'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', example='true'),
}

model ApplyTagPoliciesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApplyTagPoliciesResponseBody(name='body'),
}

async function applyTagPoliciesWithOptions(request: ApplyTagPoliciesRequest, runtime: Util.RuntimeOptions): ApplyTagPoliciesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.namespaceId)) {
    query['NamespaceId'] = request.namespaceId;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.rules)) {
    query['Rules'] = request.rules;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ApplyTagPolicies',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function applyTagPolicies(request: ApplyTagPoliciesRequest): ApplyTagPoliciesResponse {
  var runtime = new Util.RuntimeOptions{};
  return applyTagPoliciesWithOptions(request, runtime);
}

model CloneNacosConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  ids?: string(name='Ids', example='253661,253662'),
  instanceId?: string(name='InstanceId', example='mse_prepaid_public_cn-i7m25igg403'),
  originNamespaceId?: string(name='OriginNamespaceId', example='be821963-6d48-4ea5-9910-6057d****'),
  policy?: string(name='Policy', example='OVERWRITE'),
  targetNamespaceId?: string(name='TargetNamespaceId', example='08be4b5d-2d1c-4e6e-aa85-83b9****'),
}

model CloneNacosConfigResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    failData?: [ 
      {
        dataId?: string(name='DataId', example='test2.yaml'),
        group?: string(name='Group', example='test'),
      }
    ](name='FailData'),
    skipCount?: int32(name='SkipCount', example='1'),
    skipData?: [ 
      {
        dataId?: string(name='DataId', example='test.yaml'),
        group?: string(name='Group', example='public'),
      }
    ](name='SkipData'),
    succCount?: int32(name='SuccCount', example='100'),
  }(name='Data'),
  dynamicMessage?: string(name='DynamicMessage', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='Clone Completed Successfully'),
  requestId?: string(name='RequestId', example='6678DBA9-5600-5948-ACF8-ED3105B288A3'),
  success?: boolean(name='Success', example='true'),
}

model CloneNacosConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CloneNacosConfigResponseBody(name='body'),
}

async function cloneNacosConfigWithOptions(request: CloneNacosConfigRequest, runtime: Util.RuntimeOptions): CloneNacosConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.ids)) {
    query['Ids'] = request.ids;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.originNamespaceId)) {
    query['OriginNamespaceId'] = request.originNamespaceId;
  }
  if (!Util.isUnset(request.policy)) {
    query['Policy'] = request.policy;
  }
  if (!Util.isUnset(request.targetNamespaceId)) {
    query['TargetNamespaceId'] = request.targetNamespaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CloneNacosConfig',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cloneNacosConfig(request: CloneNacosConfigRequest): CloneNacosConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return cloneNacosConfigWithOptions(request, runtime);
}

model CreateApplicationRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  appName?: string(name='AppName', example='spring-cloud-a'),
  language?: string(name='Language', example='JAVA'),
  namespace?: string(name='Namespace', example='prod'),
  region?: string(name='Region', example='cn-hangzhou'),
  sentinelEnable?: string(name='SentinelEnable', example='true'),
  source?: string(name='Source', example='ACK'),
  switchEnable?: string(name='SwitchEnable', example='true'),
}

model CreateApplicationResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    appId?: string(name='AppId', example='xxxxxxxx@xxxxxxxxxx'),
    appName?: string(name='AppName', example='spring-cloud-a'),
    createTime?: long(name='CreateTime', example='1631001140913'),
    extraInfo?: string(name='ExtraInfo', example='{\\"rpcTypes\\":[\\"dubbo\\",\\"springCloud\\"]}'),
    language?: string(name='Language', example='JAVA'),
    licenseKey?: string(name='LicenseKey', example='xxxxxxxx@xxxxxxxxxx'),
    namespace?: string(name='Namespace', example='prod'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    source?: string(name='Source', example='ACK'),
    status?: int32(name='Status', example='1'),
    updateTime?: long(name='UpdateTime', example='1632979237663'),
    userId?: string(name='UserId', example='1888888888'),
    version?: string(name='Version', example='1.0.0'),
  }(name='Data', example='data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='68D91223-CCE9-5F9C-B538-20F617DA48B1'),
  success?: string(name='Success', example='true'),
}

model CreateApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateApplicationResponseBody(name='body'),
}

async function createApplicationWithOptions(request: CreateApplicationRequest, runtime: Util.RuntimeOptions): CreateApplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.sentinelEnable)) {
    query['SentinelEnable'] = request.sentinelEnable;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.switchEnable)) {
    query['SwitchEnable'] = request.switchEnable;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateApplication',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createApplication(request: CreateApplicationRequest): CreateApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createApplicationWithOptions(request, runtime);
}

model CreateClusterRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  clusterSpecification?: string(name='ClusterSpecification', description='The engine specifications. Valid values:

\\[Professional Edition]

*   `MSE_SC_2_4_60_c`: 2 vCPUs and 4 GB of memory
*   `MSE_SC_1_2_60_c`: 1 vCPU and 2 GB of memory
*   `MSE_SC_4_8_60_c`: 4 vCPUs and 8 GB of memory
*   `MSE_SC_8_16_60_c`: 8 vCPUs and 16 GB of memory
*   `MSE_SC_16_32_60_c`: 16 vCPUs and 32 GB of memory

\\[Developer Edition]

*   `MSE_SC_1_2_60_c`: 1 vCPU and 2 GB of memory
*   `MSE_SC_2_4_60_c`: 2 vCPUs and 4 GB of memory', example='MSE_SC_2_4_60_c'),
  clusterType?: string(name='ClusterType', description='The type of the instance. Valid values: ZooKeeper and Nacos-Ans.', example='Nacos-Ans'),
  clusterVersion?: string(name='ClusterVersion', description='The engine version of the instance. Valid values:

\\[Professional version]

*   `NACOS_2_0_0`: Nacos 2.0.0
*   `ZooKeeper_3_8_0`: ZooKeeper 3.8.0

\\[Developer Edition]

*   `NACOS_2_0_0`: Nacos 2.0.0
*   `ZooKeeper_3_8_0`: ZooKeeper 3.8.0', example='NACOS_2_0_0'),
  connectionType?: string(name='ConnectionType', description='The network connection type. Valid values:

*   slb
*   eni', example='slb'),
  diskType?: string(name='DiskType', description='The disk type. Valid values:

*   alicloud-disk-ssd
*   alicloud-disk-essd-pl1', example='alicloud-disk-ssd'),
  instanceCount?: int32(name='InstanceCount', description='The number of nodes in the instance. Valid values: 1 to 9.

\\[Professional Edition]

*   The number of nodes in an instance is greater than or equal to 3 and must be an odd number.

\\[Developer Edition]

*   Only one node can be deployed for an instance.', example='3'),
  instanceName?: string(name='InstanceName', description='The name of the instance.', example='tanshuyingtest001'),
  mseVersion?: string(name='MseVersion', description='Set this parameter unless otherwise specified. Valid values:

*   `mse_pro`: Professional Edition
*   `mse_dev`: Developer Edition', example='mse_pro'),
  netType?: string(name='NetType', description='The network type of the MSE instance. Valid values:

*   `privatenet`: VPC
*   `pubnet`: Internet', example='privatenet'),
  privateSlbSpecification?: string(name='PrivateSlbSpecification', description='The specifications of the internal-facing SLB instance. Valid values:

*   `slb.s1.small`
*   `slb.s3.medium`', example='slb.s1.small'),
  pubNetworkFlow?: string(name='PubNetworkFlow', description='The public bandwidth. Unit: Mbit/s.\\
Valid values: 0 to 5000. The value 0 indicates no access to the Internet.', example='0'),
  pubSlbSpecification?: string(name='PubSlbSpecification', description='The specifications of the Internet-facing Server Load Balancer (SLB) instance. Valid values:

*   `slb.s1.small`
*   `slb.s3.medium`', example='slb.s1.small'),
  region?: string(name='Region', description='The region where the instance resides. Examples:

*   `cn-hangzhou`: China (Hangzhou)
*   `cn-beijing`: China (Beijing)
*   `cn-shanghai`: China (Shanghai)
*   `cn-zhangjiakou`: China (Zhangjiakou)
*   `cn-shenzhen`: China (Shenzhen)', example='cn-hangzhou'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. For the details of resource groups, see [View basic information of a resource group](~~457230~~).', example='rg-aekzcqmoay3dlyq'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of a tag.', example='env'),
      value?: string(name='Value', description='The value of a tag.', example='prd'),
    }
  ](name='Tag', description='The list of the tags that you want to add.'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-bp17opt4v18sto39k****'),
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC).', example='vpc-bp1t50e045b5g7i3p****'),
}

model CreateClusterResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-st21ri2****'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  orderId?: string(name='OrderId', description='The ID of the order.', example='20574710974****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='dc63-465d-8ef5-20dc18af****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model CreateClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateClusterResponseBody(name='body'),
}

/**
  * Before you call this API operation, you must make sure that you fully understand the billing methods and pricing of MSE.
  *
  * @param request CreateClusterRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateClusterResponse
 */
async function createClusterWithOptions(request: CreateClusterRequest, runtime: Util.RuntimeOptions): CreateClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterSpecification)) {
    query['ClusterSpecification'] = request.clusterSpecification;
  }
  if (!Util.isUnset(request.clusterType)) {
    query['ClusterType'] = request.clusterType;
  }
  if (!Util.isUnset(request.clusterVersion)) {
    query['ClusterVersion'] = request.clusterVersion;
  }
  if (!Util.isUnset(request.connectionType)) {
    query['ConnectionType'] = request.connectionType;
  }
  if (!Util.isUnset(request.diskType)) {
    query['DiskType'] = request.diskType;
  }
  if (!Util.isUnset(request.instanceCount)) {
    query['InstanceCount'] = request.instanceCount;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.mseVersion)) {
    query['MseVersion'] = request.mseVersion;
  }
  if (!Util.isUnset(request.netType)) {
    query['NetType'] = request.netType;
  }
  if (!Util.isUnset(request.privateSlbSpecification)) {
    query['PrivateSlbSpecification'] = request.privateSlbSpecification;
  }
  if (!Util.isUnset(request.pubNetworkFlow)) {
    query['PubNetworkFlow'] = request.pubNetworkFlow;
  }
  if (!Util.isUnset(request.pubSlbSpecification)) {
    query['PubSlbSpecification'] = request.pubSlbSpecification;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.requestPars)) {
    query['RequestPars'] = request.requestPars;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCluster',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Before you call this API operation, you must make sure that you fully understand the billing methods and pricing of MSE.
  *
  * @param request CreateClusterRequest
  * @return CreateClusterResponse
 */
async function createCluster(request: CreateClusterRequest): CreateClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return createClusterWithOptions(request, runtime);
}

model CreateEngineNamespaceRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  clusterId?: string(name='ClusterId', description='The description of the namespace.', example='mse-98s****'),
  desc?: string(name='Desc', description='The ID of the instance.', example='The quota of configurations.'),
  id?: string(name='Id', description='Creates a namespace in a Nacos instance.', example='f4fa5b81-2f26-4900-833a-7516b315ebb2'),
  instanceId?: string(name='InstanceId', description='The details of the data.', example='mse-cn-st21ri2****'),
  name?: string(name='Name', description='Development environment', example='dev'),
  serviceCount?: int32(name='ServiceCount', description='The ID of the request.', example='100'),
}

model CreateEngineNamespaceResponseBody = {
  clusterId?: string(name='ClusterId', example='mse-892k****'),
  data?: {
    configCount?: int32(name='ConfigCount', example='1'),
    namespace?: string(name='Namespace', example='f4fa5b81-2f26-4900-833a-7516b315ebb2'),
    namespaceDesc?: string(name='NamespaceDesc', example='mytest'),
    namespaceShowName?: string(name='NamespaceShowName', example='dev'),
    quota?: int32(name='Quota', example='1'),
    serviceCount?: int32(name='ServiceCount', example='3'),
    type?: int32(name='Type', example='1'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='F6092602-C357-4750-89D9-E572FBEA****'),
  success?: boolean(name='Success', example='true'),
}

model CreateEngineNamespaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateEngineNamespaceResponseBody(name='body'),
}

async function createEngineNamespaceWithOptions(request: CreateEngineNamespaceRequest, runtime: Util.RuntimeOptions): CreateEngineNamespaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.desc)) {
    query['Desc'] = request.desc;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.serviceCount)) {
    query['ServiceCount'] = request.serviceCount;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateEngineNamespace',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createEngineNamespace(request: CreateEngineNamespaceRequest): CreateEngineNamespaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEngineNamespaceWithOptions(request, runtime);
}

model CreateMseServiceApplicationRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The name of the application.', example='zh'),
  appName?: string(name='AppName', description='edasmsc', example='bsd-xxyp-open-goods-server'),
  extraInfo?: string(name='ExtraInfo', description='The ID of the region.', example='{}'),
  language?: string(name='Language', description='The additional information.', example='JAVA'),
  mseVersion?: string(name='MseVersion', description='Creates an application.', example='mse_pro'),
  region?: string(name='Region', description='The creation time.', example='cn-shenzhen'),
  sentinelEnable?: string(name='SentinelEnable', description='The source type.', example='true'),
  source?: string(name='Source', description='The last modification time.', example='edasmsc'),
  switchEnable?: string(name='SwitchEnable', description='The ID of the request.', example='true'),
}

model CreateMseServiceApplicationResponseBody = {
  code?: int32(name='Code', description='The license key in use.', example='200'),
  data?: {
    appId?: string(name='AppId', description='The ID of the request.', example='xxxxxxxx@xxxxxxxxxx'),
    appName?: string(name='AppName', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='spring-cloud-a'),
    createTime?: long(name='CreateTime', description='The request was successfully processed.', example='1631001140913'),
    extraInfo?: string(name='ExtraInfo', description='The edition of the MSE instance that you want to purchase.

*   mse_pro: Professional Edition
*   mse_dev: Developer Edition', example='{}'),
    language?: string(name='Language', description='The additional information.', example='JAVA'),
    licenseKey?: string(name='LicenseKey', description='The message returned.', example='xxxxxxxx@xxxxxxxxxx'),
    regionId?: string(name='RegionId', description='The name of the application.', example='cn-hangzhou'),
    source?: string(name='Source', description='The status. Valid values: 1: available; 2: deleted', example='edasmsc'),
    status?: int32(name='Status', description='Specifies whether to enable switching.', example='1'),
    updateTime?: long(name='UpdateTime', description='The data structure.', example='1632979237663'),
    userId?: string(name='UserId', description='The data structure.', example='1234567890'),
    version?: string(name='Version', description='The last modification time.', example='1.0.0'),
  }(name='Data', description='Specifies whether to enable the Sentinel-compatible mode.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The application ID.', example='200'),
  message?: string(name='Message', description='The source.', example='The programming language of the application.'),
  requestId?: string(name='RequestId', description='The additional information.', example='904F6C04-1284-****-8ED2-FFC57E507A72'),
  success?: string(name='Success', description='The creation time.', example='true'),
}

model CreateMseServiceApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateMseServiceApplicationResponseBody(name='body'),
}

/**
  * @deprecated : CreateMseServiceApplication is deprecated, please use mse::2019-05-31::CreateApplication instead.
  *
  * @param request CreateMseServiceApplicationRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateMseServiceApplicationResponse
 */
// Deprecated
async function createMseServiceApplicationWithOptions(request: CreateMseServiceApplicationRequest, runtime: Util.RuntimeOptions): CreateMseServiceApplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.extraInfo)) {
    query['ExtraInfo'] = request.extraInfo;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.mseVersion)) {
    query['MseVersion'] = request.mseVersion;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.sentinelEnable)) {
    query['SentinelEnable'] = request.sentinelEnable;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.switchEnable)) {
    query['SwitchEnable'] = request.switchEnable;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateMseServiceApplication',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated : CreateMseServiceApplication is deprecated, please use mse::2019-05-31::CreateApplication instead.
  *
  * @param request CreateMseServiceApplicationRequest
  * @return CreateMseServiceApplicationResponse
 */
// Deprecated
async function createMseServiceApplication(request: CreateMseServiceApplicationRequest): CreateMseServiceApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMseServiceApplicationWithOptions(request, runtime);
}

model CreateNacosConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The tags of the configuration.', example='zh'),
  appName?: string(name='AppName', description='clusterNotFound', example='saledatacenter-task'),
  betaIps?: string(name='BetaIps', description='The name of the application.', example='100.117.XX.XX,100.117.XX.XX'),
  content?: string(name='Content', description='The ID of the data.', example='asdf'),
  dataId?: string(name='DataId', description='illegal request:%s', example='common.yaml'),
  desc?: string(name='Desc', description='systemError', example='system error'),
  group?: string(name='Group', description='mse-200-021', example='alime-bridge-aliyun'),
  instanceId?: string(name='InstanceId', description='illegalRequest', example='mse_prepaid_public_cn-tl32****'),
  namespaceId?: string(name='NamespaceId', description='The ID of the group.', example='547fd2a0-d0d6-****-80db2a1afb82'),
  tags?: string(name='Tags', description='cluster not found', example='mse-100-001'),
  type?: string(name='Type', description='The ID of the instance.', example='text'),
}

model CreateNacosConfigResponseBody = {
  code?: string(name='Code', description='The list of IP addresses where the beta release of the configuration is performed.', example='1'),
  errorCode?: string(name='ErrorCode', description='The ID of the namespace.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The description of the configuration.', example='202'),
  message?: string(name='Message', description='The format of the configuration. Supported formats include TEXT, JSON, and XML.', example='The content of the configuration.'),
  requestId?: string(name='RequestId', description='Basic module configuration.', example='673DBD43-569E-510F-B3DE-20BB8DFEB20A'),
  success?: boolean(name='Success', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='true'),
}

model CreateNacosConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateNacosConfigResponseBody(name='body'),
}

/**
  * The list of IP addresses where the beta release of the configuration is performed.
  *
  * @param request CreateNacosConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateNacosConfigResponse
 */
async function createNacosConfigWithOptions(request: CreateNacosConfigRequest, runtime: Util.RuntimeOptions): CreateNacosConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.betaIps)) {
    query['BetaIps'] = request.betaIps;
  }
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.dataId)) {
    query['DataId'] = request.dataId;
  }
  if (!Util.isUnset(request.desc)) {
    query['Desc'] = request.desc;
  }
  if (!Util.isUnset(request.group)) {
    query['Group'] = request.group;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.namespaceId)) {
    query['NamespaceId'] = request.namespaceId;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateNacosConfig',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The list of IP addresses where the beta release of the configuration is performed.
  *
  * @param request CreateNacosConfigRequest
  * @return CreateNacosConfigResponse
 */
async function createNacosConfig(request: CreateNacosConfigRequest): CreateNacosConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNacosConfigWithOptions(request, runtime);
}

model CreateNacosInstanceRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  clusterName?: string(name='ClusterName', example='DEFAULT'),
  enabled?: boolean(name='Enabled', example='true'),
  ephemeral?: boolean(name='Ephemeral', example='false'),
  groupName?: string(name='GroupName', example='DEFAULT_GROUP'),
  instanceId?: string(name='InstanceId', example='mse-cn-123456'),
  ip?: string(name='Ip', example='1.2.xx.xx'),
  metadata?: string(name='Metadata', example='{\\"grayversion\\":\\"1.0\\",\\"preserved.register.source\\":\\"SPRING_CLOUD\\",\\"management.context-path\\":\\"\\"}'),
  namespaceId?: string(name='NamespaceId', example='9e78a671-4b9b-4dd4-99c1-0b9da87****'),
  port?: int32(name='Port', example='12281'),
  serviceName?: string(name='ServiceName', example='hello_service'),
  weight?: string(name='Weight', example='1'),
}

model CreateNacosInstanceResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', example='ok'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='请求成功'),
  requestId?: string(name='RequestId', example='9e78a671-4b9b-4dd4-99c1-0b9da87d3dec'),
  success?: boolean(name='Success', example='true'),
}

model CreateNacosInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateNacosInstanceResponseBody(name='body'),
}

async function createNacosInstanceWithOptions(request: CreateNacosInstanceRequest, runtime: Util.RuntimeOptions): CreateNacosInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterName)) {
    query['ClusterName'] = request.clusterName;
  }
  if (!Util.isUnset(request.enabled)) {
    query['Enabled'] = request.enabled;
  }
  if (!Util.isUnset(request.ephemeral)) {
    query['Ephemeral'] = request.ephemeral;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ip)) {
    query['Ip'] = request.ip;
  }
  if (!Util.isUnset(request.namespaceId)) {
    query['NamespaceId'] = request.namespaceId;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.serviceName)) {
    query['ServiceName'] = request.serviceName;
  }
  if (!Util.isUnset(request.weight)) {
    query['Weight'] = request.weight;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.metadata)) {
    body['Metadata'] = request.metadata;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateNacosInstance',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createNacosInstance(request: CreateNacosInstanceRequest): CreateNacosInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNacosInstanceWithOptions(request, runtime);
}

model CreateNacosServiceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The ID of the instance.

> This operation contains both the InstanceId and ClusterId parameters. You must specify one of them.', example='zh'),
  clusterId?: string(name='ClusterId', description='system error', example='mse-3691a080'),
  ephemeral?: boolean(name='Ephemeral', description='systemError', example='true'),
  groupName?: string(name='GroupName', description='clusterNotFound', example='DEFAULT_GROUP'),
  instanceId?: string(name='InstanceId', description='illegal request:%s', example='mse-cn-st21ri2****'),
  namespaceId?: string(name='NamespaceId', description='cluster not found', example='production'),
  protectThreshold?: string(name='ProtectThreshold', description='mse-100-001', example='0'),
  serviceName?: string(name='ServiceName', description='mse-200-021', example='com.alibabacloud.hipstershop.cartserviceapi.service.CartService'),
}

model CreateNacosServiceResponseBody = {
  code?: int32(name='Code', description='Specifies whether the instance is marked as a temporary node. Valid values:

*   `true`: yes
*   `false`: no', example='200'),
  data?: string(name='Data', description='The protection threshold.', example='data'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The ID of the namespace.', example='200'),
  message?: string(name='Message', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='success'),
  requestId?: string(name='RequestId', description='The name of the group.', example='5B170A0D-2C5D-4CF8-B808-03966B86****'),
  success?: boolean(name='Success', description='The ID of the cluster.

> This operation contains both the InstanceId and ClusterId parameters. You must specify one of them.', example='True'),
}

model CreateNacosServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateNacosServiceResponseBody(name='body'),
}

/**
  * DEFAULT_GROUP
  *
  * @param request CreateNacosServiceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateNacosServiceResponse
 */
async function createNacosServiceWithOptions(request: CreateNacosServiceRequest, runtime: Util.RuntimeOptions): CreateNacosServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.ephemeral)) {
    query['Ephemeral'] = request.ephemeral;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.namespaceId)) {
    query['NamespaceId'] = request.namespaceId;
  }
  if (!Util.isUnset(request.protectThreshold)) {
    query['ProtectThreshold'] = request.protectThreshold;
  }
  if (!Util.isUnset(request.serviceName)) {
    query['ServiceName'] = request.serviceName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateNacosService',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * DEFAULT_GROUP
  *
  * @param request CreateNacosServiceRequest
  * @return CreateNacosServiceResponse
 */
async function createNacosService(request: CreateNacosServiceRequest): CreateNacosServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNacosServiceWithOptions(request, runtime);
}

model CreateOrUpdateSwimmingLaneRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  enable?: boolean(name='Enable', example='true'),
  enableRules?: boolean(name='EnableRules', example='false'),
  entryRule?: string(name='EntryRule'),
  entryRules?: [ 
    {
      condition?: string(name='Condition', example='AND'),
      paths?: [ string ](name='Paths'),
      priority?: int32(name='Priority'),
      restItems?: [ 
        {
          cond?: string(name='Cond'),
          datum?: string(name='Datum'),
          divisor?: int32(name='Divisor'),
          name?: string(name='Name'),
          nameList?: [ string ](name='NameList'),
          operator?: string(name='Operator'),
          rate?: int32(name='Rate'),
          remainder?: int32(name='Remainder'),
          type?: string(name='Type'),
          value?: string(name='Value'),
        }
      ](name='RestItems'),
    }
  ](name='EntryRules'),
  gatewaySwimmingLaneRouteJson?: {
    conditions?: [ 
      {
        cond?: string(name='Cond'),
        name?: string(name='Name'),
        type?: string(name='Type'),
        value?: string(name='Value'),
      }
    ](name='Conditions'),
    gatewayId?: long(name='GatewayId'),
    gatewayUniqueId?: string(name='GatewayUniqueId'),
    routeIdList?: [ long ](name='RouteIdList'),
  }(name='GatewaySwimmingLaneRouteJson'),
  groupId?: long(name='GroupId', example='115'),
  id?: long(name='Id', example='-1'),
  name?: string(name='Name'),
  namespace?: string(name='Namespace', description='MSE命名空间名字', example='default'),
  regionId?: string(name='RegionId', example='cn-beijing'),
  tag?: string(name='Tag', example='gray'),
}

model CreateOrUpdateSwimmingLaneShrinkRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  enable?: boolean(name='Enable', example='true'),
  enableRules?: boolean(name='EnableRules', example='false'),
  entryRule?: string(name='EntryRule'),
  entryRules?: [ 
    {
      condition?: string(name='Condition', example='AND'),
      paths?: [ string ](name='Paths'),
      priority?: int32(name='Priority'),
      restItems?: [ 
        {
          cond?: string(name='Cond'),
          datum?: string(name='Datum'),
          divisor?: int32(name='Divisor'),
          name?: string(name='Name'),
          nameList?: [ string ](name='NameList'),
          operator?: string(name='Operator'),
          rate?: int32(name='Rate'),
          remainder?: int32(name='Remainder'),
          type?: string(name='Type'),
          value?: string(name='Value'),
        }
      ](name='RestItems'),
    }
  ](name='EntryRules'),
  gatewaySwimmingLaneRouteJsonShrink?: string(name='GatewaySwimmingLaneRouteJson'),
  groupId?: long(name='GroupId', example='115'),
  id?: long(name='Id', example='-1'),
  name?: string(name='Name'),
  namespace?: string(name='Namespace', description='MSE命名空间名字', example='default'),
  regionId?: string(name='RegionId', example='cn-beijing'),
  tag?: string(name='Tag', example='gray'),
}

model CreateOrUpdateSwimmingLaneResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    enable?: boolean(name='enable'),
    enableRules?: boolean(name='enableRules'),
    entryRule?: string(name='entryRule'),
    entryRules?: [ 
      {
        condition?: string(name='condition'),
        path?: string(name='path'),
        paths?: [ string ](name='paths'),
        restItems?: [ 
          {
            cond?: string(name='cond'),
            datum?: string(name='datum'),
            divisor?: int32(name='divisor'),
            name?: string(name='name'),
            nameList?: [ string ](name='nameList'),
            operator?: string(name='operator'),
            rate?: int32(name='rate'),
            remainder?: int32(name='remainder'),
            type?: string(name='type'),
            value?: string(name='value'),
          }
        ](name='restItems'),
      }
    ](name='entryRules'),
    gatewaySwimmingLaneRouteJson?: string(name='gatewaySwimmingLaneRouteJson'),
    gmtCreate?: string(name='gmtCreate'),
    gmtModified?: string(name='gmtModified'),
    groupId?: long(name='groupId'),
    id?: long(name='id'),
    name?: string(name='name'),
    regionId?: string(name='regionId'),
    status?: int32(name='status'),
    tag?: string(name='tag'),
  }(name='Data', example='{}'),
  dynamicMessage?: string(name='DynamicMessage', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='EE5C32A1-BC0E-4B79-817C-103E4EDF****'),
  success?: boolean(name='Success', example='true'),
}

model CreateOrUpdateSwimmingLaneResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateOrUpdateSwimmingLaneResponseBody(name='body'),
}

async function createOrUpdateSwimmingLaneWithOptions(tmpReq: CreateOrUpdateSwimmingLaneRequest, runtime: Util.RuntimeOptions): CreateOrUpdateSwimmingLaneResponse {
  Util.validateModel(tmpReq);
  var request = new CreateOrUpdateSwimmingLaneShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.gatewaySwimmingLaneRouteJson)) {
    request.gatewaySwimmingLaneRouteJsonShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.gatewaySwimmingLaneRouteJson, 'GatewaySwimmingLaneRouteJson', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!Util.isUnset(request.enableRules)) {
    query['EnableRules'] = request.enableRules;
  }
  if (!Util.isUnset(request.entryRule)) {
    query['EntryRule'] = request.entryRule;
  }
  if (!Util.isUnset(request.gatewaySwimmingLaneRouteJsonShrink)) {
    query['GatewaySwimmingLaneRouteJson'] = request.gatewaySwimmingLaneRouteJsonShrink;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.entryRules)) {
    body['EntryRules'] = request.entryRules;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateOrUpdateSwimmingLane',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createOrUpdateSwimmingLane(request: CreateOrUpdateSwimmingLaneRequest): CreateOrUpdateSwimmingLaneResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOrUpdateSwimmingLaneWithOptions(request, runtime);
}

model CreateOrUpdateSwimmingLaneGroupRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  appIds?: string(name='AppIds', description='cluster not found', example='hkhon1po62@c3df23522baa898,hkhon1po62@66e5235415730a5,hkhon1po62@958bba95910341f'),
  dbGrayEnable?: boolean(name='DbGrayEnable', description='system error', example='true'),
  enable?: boolean(name='Enable', description='mse-100-007', example='true'),
  entryApp?: string(name='EntryApp', description='clusterNotFound', example='Ingress'),
  gmtCreate?: string(name='GmtCreate', description='illegal request:%s', example='2021-12-20T03:22:07.000+0000'),
  gmtModified?: string(name='GmtModified', description='mse-200-021', example='2022-02-24T07:18:24.962+0000'),
  id?: long(name='Id', description='The details of the data.', example='120'),
  licenseKey?: string(name='LicenseKey', description='mse-200-105', example='9wnrf04a0j@****'),
  messageQueueFilterSide?: string(name='MessageQueueFilterSide', description='systemError', example='Server'),
  messageQueueGrayEnable?: boolean(name='MessageQueueGrayEnable', description='mse-100-001', example='true'),
  name?: string(name='Name', description='any', example='group1'),
  namespace?: string(name='Namespace', example='default'),
  recordCanaryDetail?: boolean(name='RecordCanaryDetail'),
  region?: string(name='Region', description='code', example='cn-shanghai'),
  source?: string(name='Source', description='duplicatedClusterAliasName', example='edasmsc'),
  status?: int32(name='Status', description='illegalRequest', example='0'),
  userId?: string(name='UserId', description='duplicated cluster alias name', example='""'),
}

model CreateOrUpdateSwimmingLaneGroupResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    appIds?: string(name='AppIds'),
    dbGrayEnable?: string(name='DbGrayEnable', example='true'),
    enable?: string(name='Enable'),
    entryApp?: string(name='EntryApp'),
    id?: long(name='Id'),
    messageQueueFilterSide?: string(name='MessageQueueFilterSide', example='Client'),
    messageQueueGrayEnable?: boolean(name='MessageQueueGrayEnable'),
    name?: string(name='Name', example='example-app'),
    namespace?: string(name='Namespace', example='prod'),
    recordCanaryDetail?: boolean(name='RecordCanaryDetail'),
    region?: string(name='Region'),
    source?: string(name='Source'),
    status?: int32(name='Status'),
    userId?: string(name='UserId'),
  }(name='Data', example='{}'),
  dynamicMessage?: string(name='DynamicMessage', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='EE5C32A1-BC0E-4B79-817C-103E4EDF****'),
  success?: boolean(name='Success', example='true'),
}

model CreateOrUpdateSwimmingLaneGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateOrUpdateSwimmingLaneGroupResponseBody(name='body'),
}

async function createOrUpdateSwimmingLaneGroupWithOptions(request: CreateOrUpdateSwimmingLaneGroupRequest, runtime: Util.RuntimeOptions): CreateOrUpdateSwimmingLaneGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.appIds)) {
    query['AppIds'] = request.appIds;
  }
  if (!Util.isUnset(request.dbGrayEnable)) {
    query['DbGrayEnable'] = request.dbGrayEnable;
  }
  if (!Util.isUnset(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!Util.isUnset(request.entryApp)) {
    query['EntryApp'] = request.entryApp;
  }
  if (!Util.isUnset(request.gmtCreate)) {
    query['GmtCreate'] = request.gmtCreate;
  }
  if (!Util.isUnset(request.gmtModified)) {
    query['GmtModified'] = request.gmtModified;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.licenseKey)) {
    query['LicenseKey'] = request.licenseKey;
  }
  if (!Util.isUnset(request.messageQueueFilterSide)) {
    query['MessageQueueFilterSide'] = request.messageQueueFilterSide;
  }
  if (!Util.isUnset(request.messageQueueGrayEnable)) {
    query['MessageQueueGrayEnable'] = request.messageQueueGrayEnable;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.recordCanaryDetail)) {
    query['RecordCanaryDetail'] = request.recordCanaryDetail;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateOrUpdateSwimmingLaneGroup',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createOrUpdateSwimmingLaneGroup(request: CreateOrUpdateSwimmingLaneGroupRequest): CreateOrUpdateSwimmingLaneGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOrUpdateSwimmingLaneGroupWithOptions(request, runtime);
}

model CreateZnodeRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  clusterId?: string(name='ClusterId', example='mse-09k1q11****'),
  data?: string(name='Data', example='data'),
  path?: string(name='Path', example='/zookeeper'),
}

model CreateZnodeResponseBody = {
  data?: {
    data?: string(name='Data', example='cluster'),
    dir?: boolean(name='Dir', example='true'),
    name?: string(name='Name', example='mse-bc1a29b0-160230875****-reg-center-0-1'),
    path?: string(name='Path', example='/'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpCode?: string(name='HttpCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='DC34E4A3-5F1C-4E40-86EA-02EDF967****'),
  success?: boolean(name='Success', example='true'),
}

model CreateZnodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateZnodeResponseBody(name='body'),
}

async function createZnodeWithOptions(request: CreateZnodeRequest, runtime: Util.RuntimeOptions): CreateZnodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.data)) {
    query['Data'] = request.data;
  }
  if (!Util.isUnset(request.path)) {
    query['Path'] = request.path;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateZnode',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createZnode(request: CreateZnodeRequest): CreateZnodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return createZnodeWithOptions(request, runtime);
}

model DeleteAuthResourceRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-3f97e2989c344f35ab3fd62b19f1****'),
  id?: long(name='Id', example='36'),
}

model DeleteAuthResourceResponseBody = {
  code?: int32(name='Code', example='1'),
  data?: {
    authId?: long(name='AuthId', example='253'),
    domainId?: long(name='DomainId', example='235'),
    domainName?: string(name='DomainName', example='name'),
    gatewayId?: long(name='GatewayId', example='gw-7ea3da97b96543e19f6c597cd4a9****'),
    gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-7ea3da97b96543e19f6c597cd4a9****'),
    gmtCreate?: string(name='GmtCreate', example='2022-01-07T10:07:57.000+0000'),
    gmtModified?: string(name='GmtModified', example='2022-01-07T10:07:57.000+0000'),
    id?: long(name='Id', example='12'),
    isWhite?: boolean(name='IsWhite', example='true'),
    path?: string(name='Path', example='/zookeeper'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='559412D1-BFCE-53CC-B88E-0192C331EF44'),
  success?: boolean(name='Success', example='true'),
}

model DeleteAuthResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAuthResourceResponseBody(name='body'),
}

async function deleteAuthResourceWithOptions(request: DeleteAuthResourceRequest, runtime: Util.RuntimeOptions): DeleteAuthResourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAuthResource',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAuthResource(request: DeleteAuthResourceRequest): DeleteAuthResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAuthResourceWithOptions(request, runtime);
}

model DeleteClusterRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  instanceId?: string(name='InstanceId', example='mse-cn-6ja1rgl****'),
}

model DeleteClusterResponseBody = {
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpCode?: string(name='HttpCode', example='202'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='3369AD10-F1A6-4E6F-B99E-20F51826****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteClusterResponseBody(name='body'),
}

async function deleteClusterWithOptions(request: DeleteClusterRequest, runtime: Util.RuntimeOptions): DeleteClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCluster',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteCluster(request: DeleteClusterRequest): DeleteClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteClusterWithOptions(request, runtime);
}

model DeleteEngineNamespaceRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  clusterId?: string(name='ClusterId', example='mse-0c738****'),
  id?: string(name='Id', example='678ca857-****-b1bf-d0a98c5ca84b'),
  instanceId?: string(name='InstanceId', example='mse-cn-7pp2d1****'),
}

model DeleteEngineNamespaceResponseBody = {
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpCode?: string(name='HttpCode', example='202'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='A73AC37C-C617-4E3A-8049-372CF49C****'),
  success?: boolean(name='Success', example='True'),
}

model DeleteEngineNamespaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteEngineNamespaceResponseBody(name='body'),
}

async function deleteEngineNamespaceWithOptions(request: DeleteEngineNamespaceRequest, runtime: Util.RuntimeOptions): DeleteEngineNamespaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEngineNamespace',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteEngineNamespace(request: DeleteEngineNamespaceRequest): DeleteEngineNamespaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEngineNamespaceWithOptions(request, runtime);
}

model DeleteGatewayRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  deleteSlb?: boolean(name='DeleteSlb', description='Specifies whether to delete the SLB instance purchased for the gateway when you delete the gateway.', example='true'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-0fe488252dc44d55a9dd57875193a1d7'),
}

model DeleteGatewayResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The value 200 indicates that the request was successful. Other values indicate that the request failed.', example='200'),
  data?: {
    gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway. The ID is automatically generated by the system.', example='gw-7ea3da97b96543e19f6c597c****'),
    gmtCreate?: string(name='GmtCreate', description='The creation time.', example='2022-01-07T10:07:57.000+0000'),
    gmtModified?: string(name='GmtModified', description='The time when the gateway was last updated.', example='2022-01-07T10:07:57.000+0000'),
    id?: long(name='Id', description='The ID of the primary key.', example='12'),
    name?: string(name='Name', description='The name of the gateway.', example='mse-bc1a29b0-reg-center-0-1'),
    primaryUser?: string(name='PrimaryUser', description='The information about the user.', example='1231254'),
    region?: string(name='Region', description='The ID of the region.', example='cn-hangzhou'),
    replica?: int32(name='Replica', description='The number of gateway replicas.', example='2'),
    securityGroup?: string(name='SecurityGroup', description='The ID of the security group.', example='sg-bp11ufzqn6mmb8dtzz82'),
    spec?: string(name='Spec', description='The specifications of the gateway.', example='MSE_GTW_16_32_200_c'),
    status?: int32(name='Status', description='The status of the gateway. Valid values: 0: The gateway is being created. 1: The gateway fails to be created. 2: The gateway is running. 3: The gateway is changing. 4: The gateway is scaling down. 6: The gateway is scaling up. 8: The gateway is being deleted. 10: The gateway is restarting. 11: The gateway is being rebuilt. 12: The gateway is updating. 13: The gateway fails to be updated.', example='1'),
    vpc?: string(name='Vpc', description='The ID of the virtual private cloud (VPC) where the gateway resides.', example='vpc-bp1328cm01m6uel42b5zb'),
    vswitch?: string(name='Vswitch', description='The ID of the vSwitch.', example='vsw-bp18zeqxx6mpuq843z4n5'),
  }(name='Data', description='The details of the data.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The returned message.

*   If the request is successful, a success message is returned.
*   If the request fails, an error message is returned, such as the "TaskId not found" message.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2FFEA345-BE30-5FE0-8885-42E2DEFD5FE6'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model DeleteGatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteGatewayResponseBody(name='body'),
}

async function deleteGatewayWithOptions(request: DeleteGatewayRequest, runtime: Util.RuntimeOptions): DeleteGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.deleteSlb)) {
    query['DeleteSlb'] = request.deleteSlb;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteGateway',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteGateway(request: DeleteGatewayRequest): DeleteGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteGatewayWithOptions(request, runtime);
}

model DeleteGatewayAuthConsumerRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-c70622ff52fe49beb29bea9a6f52****'),
  id?: long(name='Id', example='33ff74b6-d21e-4f9b-91a8-bc1ea4ef****'),
}

model DeleteGatewayAuthConsumerResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  dynamicCode?: string(name='DynamicCode', example='code'),
  dynamicMessage?: string(name='DynamicMessage', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='69AD2AA7-DB47-449B-941B-B14409DF****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteGatewayAuthConsumerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteGatewayAuthConsumerResponseBody(name='body'),
}

async function deleteGatewayAuthConsumerWithOptions(request: DeleteGatewayAuthConsumerRequest, runtime: Util.RuntimeOptions): DeleteGatewayAuthConsumerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteGatewayAuthConsumer',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteGatewayAuthConsumer(request: DeleteGatewayAuthConsumerRequest): DeleteGatewayAuthConsumerResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteGatewayAuthConsumerWithOptions(request, runtime);
}

model DeleteGatewayAuthConsumerResourceRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  consumerId?: long(name='ConsumerId', example='2'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-ubuwqygbq4783gqb2y3f87q****'),
  idList?: string(name='IdList', example='1,2,3,4'),
}

model DeleteGatewayAuthConsumerResourceResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  dynamicCode?: string(name='DynamicCode', example='code'),
  dynamicMessage?: string(name='DynamicMessage', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', example='NoPermission'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='3369AD10-F1A6-4E6F-B99E-20F51826****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteGatewayAuthConsumerResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteGatewayAuthConsumerResourceResponseBody(name='body'),
}

async function deleteGatewayAuthConsumerResourceWithOptions(request: DeleteGatewayAuthConsumerResourceRequest, runtime: Util.RuntimeOptions): DeleteGatewayAuthConsumerResourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.consumerId)) {
    query['ConsumerId'] = request.consumerId;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.idList)) {
    query['IdList'] = request.idList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteGatewayAuthConsumerResource',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteGatewayAuthConsumerResource(request: DeleteGatewayAuthConsumerResourceRequest): DeleteGatewayAuthConsumerResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteGatewayAuthConsumerResourceWithOptions(request, runtime);
}

model DeleteGatewayDomainRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-90392d768a3847a7b804c505254d****'),
  id?: string(name='Id', example='109'),
}

model DeleteGatewayDomainResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    certIdentifier?: string(name='CertIdentifier', example='243'),
    gatewayId?: long(name='GatewayId', example='253'),
    gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-7ea3da97b96543e19f6c597c****'),
    gmtCreate?: string(name='GmtCreate', example='2022-01-07T10:07:57.000+0000'),
    gmtModified?: string(name='GmtModified', example='2022-01-07T10:07:57.000+0000'),
    id?: long(name='Id', example='2'),
    mustHttps?: boolean(name='MustHttps', example='true'),
    name?: string(name='Name', example='CONTACTINFO'),
    protocol?: string(name='Protocol', example='HTTP'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', example='39016EAC-6EDB-52FE-AE20-4B013DF236FF'),
  success?: boolean(name='Success', example='true'),
}

model DeleteGatewayDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteGatewayDomainResponseBody(name='body'),
}

async function deleteGatewayDomainWithOptions(request: DeleteGatewayDomainRequest, runtime: Util.RuntimeOptions): DeleteGatewayDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteGatewayDomain',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteGatewayDomain(request: DeleteGatewayDomainRequest): DeleteGatewayDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteGatewayDomainWithOptions(request, runtime);
}

model DeleteGatewayRouteRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-492af9b04bb4474cae9d645be850e3d7'),
  routeId?: string(name='RouteId', description='The ID of the route.', example='252'),
}

model DeleteGatewayRouteResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned.', example='200'),
  data?: {
    defaultServiceId?: long(name='DefaultServiceId', description='The default service ID.', example='1'),
    gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='125'),
    gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-5017305290e14cebbrvec4a5****'),
    gmtCreate?: string(name='GmtCreate', description='The creation time.', example='2022-01-07 18:07:57'),
    gmtModified?: string(name='GmtModified', description='The modification time.', example='2021-12-30T06:41:52.000+0000'),
    id?: long(name='Id', description='The ID.', example='12'),
    name?: string(name='Name', description='The name.', example='test'),
    predicates?: string(name='Predicates', description='The matching rules.', example='{\\"PathPredicates\\":{\\"Path\\":\\"/metas\\",\\"Type\\":\\"PRE\\",\\"IgnoreCase\\":false}}'),
    routeOrder?: int32(name='RouteOrder', description='The sequence number of the route.', example='1'),
    status?: int32(name='Status', description='The status of the route. Valid values:

*   0: unpublished
*   2: publishing
*   3: published
*   4: editing (updated but not published)
*   5: unpublishing
*   6: unavailable', example='2'),
  }(name='Data', description='The data returned.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ADDD8AB7-8D1C-4697-A83E-410D2607****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model DeleteGatewayRouteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteGatewayRouteResponseBody(name='body'),
}

async function deleteGatewayRouteWithOptions(request: DeleteGatewayRouteRequest, runtime: Util.RuntimeOptions): DeleteGatewayRouteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.routeId)) {
    query['RouteId'] = request.routeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteGatewayRoute',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteGatewayRoute(request: DeleteGatewayRouteRequest): DeleteGatewayRouteResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteGatewayRouteWithOptions(request, runtime);
}

model DeleteGatewayServiceRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  gatewayId?: long(name='GatewayId', example='60'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-1a4ab101d5924b6f92c5ec98a841761f'),
  serviceId?: string(name='ServiceId', example='190'),
}

model DeleteGatewayServiceResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    gatewayId?: long(name='GatewayId', example='1'),
    gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-7ea3da97b96543e19f6c597c****'),
    gmtCreate?: string(name='GmtCreate', example='2022-01-14 14:39:16'),
    gmtModified?: string(name='GmtModified', example='2022-01-07T10:07:57.000+0000'),
    groupName?: string(name='GroupName', example='DEFAULT_GROUP'),
    id?: long(name='Id', example='190'),
    ips?: [ string ](name='Ips'),
    metaInfo?: string(name='MetaInfo', example='{}'),
    name?: string(name='Name', example='test'),
    namespace?: string(name='Namespace', example='default'),
    serviceNameInRegistry?: string(name='ServiceNameInRegistry', example='test'),
    sourceId?: long(name='SourceId', example='1'),
    sourceType?: string(name='SourceType', example='MSE'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', example='B3545F76-6ED1-586F-8DB9-ECE07985F381'),
  success?: boolean(name='Success', example='true'),
}

model DeleteGatewayServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteGatewayServiceResponseBody(name='body'),
}

async function deleteGatewayServiceWithOptions(request: DeleteGatewayServiceRequest, runtime: Util.RuntimeOptions): DeleteGatewayServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.serviceId)) {
    query['ServiceId'] = request.serviceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteGatewayService',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteGatewayService(request: DeleteGatewayServiceRequest): DeleteGatewayServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteGatewayServiceWithOptions(request, runtime);
}

model DeleteGatewayServiceVersionRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-b6988bd16920479d9104e1729f97****'),
  serviceId?: long(name='ServiceId', example='777'),
  serviceVersion?: string(name='ServiceVersion', example='{\\"name\\":\\"app\\",\\"labels\\":[{\\"key\\":\\"app\\",\\"value\\":\\"demo-server\\"}]}'),
}

model DeleteGatewayServiceVersionResponseBody = {
  code?: int32(name='Code', example='1'),
  data?: long(name='Data', example='1'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='29D52777-BE96-563E-BC6B-796ACE47A7A5'),
  success?: boolean(name='Success', example='true'),
}

model DeleteGatewayServiceVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteGatewayServiceVersionResponseBody(name='body'),
}

async function deleteGatewayServiceVersionWithOptions(request: DeleteGatewayServiceVersionRequest, runtime: Util.RuntimeOptions): DeleteGatewayServiceVersionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.serviceId)) {
    query['ServiceId'] = request.serviceId;
  }
  if (!Util.isUnset(request.serviceVersion)) {
    query['ServiceVersion'] = request.serviceVersion;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteGatewayServiceVersion',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteGatewayServiceVersion(request: DeleteGatewayServiceVersionRequest): DeleteGatewayServiceVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteGatewayServiceVersionWithOptions(request, runtime);
}

model DeleteGatewaySlbRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  deleteSlb?: boolean(name='DeleteSlb', example='true'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-c9bc5afd61014165bd58f621b491****'),
  id?: string(name='Id', example='395'),
  slbId?: string(name='SlbId'),
}

model DeleteGatewaySlbResponseBody = {
  code?: int32(name='Code', example='1'),
  data?: string(name='Data', example='28'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='9297B27D-D932-5E9F-93B9-99D6C5F3A879'),
  success?: boolean(name='Success', example='true'),
}

model DeleteGatewaySlbResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteGatewaySlbResponseBody(name='body'),
}

async function deleteGatewaySlbWithOptions(request: DeleteGatewaySlbRequest, runtime: Util.RuntimeOptions): DeleteGatewaySlbResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.deleteSlb)) {
    query['DeleteSlb'] = request.deleteSlb;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.slbId)) {
    query['SlbId'] = request.slbId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteGatewaySlb',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteGatewaySlb(request: DeleteGatewaySlbRequest): DeleteGatewaySlbResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteGatewaySlbWithOptions(request, runtime);
}

model DeleteMigrationTaskRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  id?: string(name='Id', description='The ID of the task.', example='1'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}'),
}

model DeleteMigrationTaskResponseBody = {
  data?: boolean(name='Data', description='The deletion result.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8BD1E58D-0755-42AC-A599-E6B55112****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model DeleteMigrationTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteMigrationTaskResponseBody(name='body'),
}

async function deleteMigrationTaskWithOptions(request: DeleteMigrationTaskRequest, runtime: Util.RuntimeOptions): DeleteMigrationTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.requestPars)) {
    query['RequestPars'] = request.requestPars;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteMigrationTask',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteMigrationTask(request: DeleteMigrationTaskRequest): DeleteMigrationTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMigrationTaskWithOptions(request, runtime);
}

model DeleteNacosConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  beta?: boolean(name='Beta', example='true'),
  dataId?: string(name='DataId', example='user-ds.yml'),
  group?: string(name='Group', example='HALVIE_MICRO_GROUP'),
  instanceId?: string(name='InstanceId', example='mse_prepaid_public_cn-tl32epfyu18'),
  namespaceId?: string(name='NamespaceId', example='0e9d849b-****-8435da6c21ad'),
}

model DeleteNacosConfigResponseBody = {
  code?: string(name='Code', example='200'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpCode?: string(name='HttpCode', example='202'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='4FEFC13F-EB50-51E1-97D8-C5CBA8CD1B84'),
  success?: boolean(name='Success', example='true'),
}

model DeleteNacosConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteNacosConfigResponseBody(name='body'),
}

async function deleteNacosConfigWithOptions(request: DeleteNacosConfigRequest, runtime: Util.RuntimeOptions): DeleteNacosConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.beta)) {
    query['Beta'] = request.beta;
  }
  if (!Util.isUnset(request.dataId)) {
    query['DataId'] = request.dataId;
  }
  if (!Util.isUnset(request.group)) {
    query['Group'] = request.group;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.namespaceId)) {
    query['NamespaceId'] = request.namespaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteNacosConfig',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteNacosConfig(request: DeleteNacosConfigRequest): DeleteNacosConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNacosConfigWithOptions(request, runtime);
}

model DeleteNacosConfigsRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The ID of the instance.', example='zh'),
  ids?: string(name='Ids', description='systemError', example='20024,20025,20026,20027,20034,20104,20394'),
  instanceId?: string(name='InstanceId', description='mse-100-001', example='mse_prepaid_public_cn-i7m2e32pd0n'),
  namespaceId?: string(name='NamespaceId', description='system error', example='1ef93a21-3487-4367-a859-857d8****'),
}

model DeleteNacosConfigsResponseBody = {
  code?: int32(name='Code', description='The ID of the request.', example='200'),
  errorCode?: string(name='ErrorCode', description='The HTTP status code returned.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The ID of the namespace.', example='200'),
  message?: string(name='Message', description='The data structure.', example='success'),
  requestId?: string(name='RequestId', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='73EB5563-CBB3-5F48-999D-512F4EFB7377'),
  success?: boolean(name='Success', description='The message returned.', example='true'),
}

model DeleteNacosConfigsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteNacosConfigsResponseBody(name='body'),
}

/**
  * The ID of the request.
  *
  * @param request DeleteNacosConfigsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteNacosConfigsResponse
 */
async function deleteNacosConfigsWithOptions(request: DeleteNacosConfigsRequest, runtime: Util.RuntimeOptions): DeleteNacosConfigsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.ids)) {
    query['Ids'] = request.ids;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.namespaceId)) {
    query['NamespaceId'] = request.namespaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteNacosConfigs',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the request.
  *
  * @param request DeleteNacosConfigsRequest
  * @return DeleteNacosConfigsResponse
 */
async function deleteNacosConfigs(request: DeleteNacosConfigsRequest): DeleteNacosConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNacosConfigsWithOptions(request, runtime);
}

model DeleteNacosInstanceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='mse-100-001', example='zh'),
  clusterName?: string(name='ClusterName', description='illegal request:%s', example='DEFAULT'),
  ephemeral?: boolean(name='Ephemeral', description='cluster not found', example='false'),
  groupName?: string(name='GroupName', description='illegalRequest', example='DEFAULT_GROUP'),
  instanceId?: string(name='InstanceId', description='duplicatedClusterAliasName', example='mse-cn-st21v5****'),
  ip?: string(name='Ip', description='mse-200-021', example='10.237.1.32'),
  namespaceId?: string(name='NamespaceId', description='mse-100-007', example='9e78a671-4b9b-4dd4-99c1-0b9da87****'),
  port?: int32(name='Port', description='clusterNotFound', example='8080'),
  serviceName?: string(name='ServiceName', description='duplicated cluster alias name', example='hello_service'),
}

model DeleteNacosInstanceResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', example='OK'),
  dynamicMessage?: string(name='DynamicMessage', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='system error', example='8BD1E58D-0755-42AC-A599-E6B55112****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteNacosInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteNacosInstanceResponseBody(name='body'),
}

/**
  * The port of the Nacos instance.
  *
  * @param request DeleteNacosInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteNacosInstanceResponse
 */
async function deleteNacosInstanceWithOptions(request: DeleteNacosInstanceRequest, runtime: Util.RuntimeOptions): DeleteNacosInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterName)) {
    query['ClusterName'] = request.clusterName;
  }
  if (!Util.isUnset(request.ephemeral)) {
    query['Ephemeral'] = request.ephemeral;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ip)) {
    query['Ip'] = request.ip;
  }
  if (!Util.isUnset(request.namespaceId)) {
    query['NamespaceId'] = request.namespaceId;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.serviceName)) {
    query['ServiceName'] = request.serviceName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteNacosInstance',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The port of the Nacos instance.
  *
  * @param request DeleteNacosInstanceRequest
  * @return DeleteNacosInstanceResponse
 */
async function deleteNacosInstance(request: DeleteNacosInstanceRequest): DeleteNacosInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNacosInstanceWithOptions(request, runtime);
}

model DeleteNacosServiceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='system error', example='zh'),
  groupName?: string(name='GroupName', description='mse-100-001', example='DEFAULT_GROUP'),
  instanceId?: string(name='InstanceId', description='clusterNotFound', example='mse-cn-123456'),
  namespaceId?: string(name='NamespaceId', description='systemError', example='9e78a671-4b9b-4dd4-99c1-0****'),
  serviceName?: string(name='ServiceName', description='cluster not found', example='hello_service'),
}

model DeleteNacosServiceResponseBody = {
  code?: int32(name='Code', description='The string object.', example='200'),
  data?: string(name='Data', description='The ID of the request.', example='ok'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The name of the service.', example='200'),
  message?: string(name='Message', description='The ID of the namespace.', example='The language of the response. Valid values:

*   zh: Chinese
*   en: English'),
  requestId?: string(name='RequestId', description='The name of the group.', example='9e78a671-4b9b-4dd4-99c1-0b9da87d3dec'),
  success?: boolean(name='Success', description='The HTTP status code returned.', example='true'),
}

model DeleteNacosServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteNacosServiceResponseBody(name='body'),
}

/**
  * The language of the response. Valid values:
  * *   zh: Chinese
  * *   en: English
  *
  * @param request DeleteNacosServiceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteNacosServiceResponse
 */
async function deleteNacosServiceWithOptions(request: DeleteNacosServiceRequest, runtime: Util.RuntimeOptions): DeleteNacosServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.namespaceId)) {
    query['NamespaceId'] = request.namespaceId;
  }
  if (!Util.isUnset(request.serviceName)) {
    query['ServiceName'] = request.serviceName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteNacosService',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The language of the response. Valid values:
  * *   zh: Chinese
  * *   en: English
  *
  * @param request DeleteNacosServiceRequest
  * @return DeleteNacosServiceResponse
 */
async function deleteNacosService(request: DeleteNacosServiceRequest): DeleteNacosServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNacosServiceWithOptions(request, runtime);
}

model DeleteNamespaceRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  name?: string(name='Name', example='prod'),
  region?: string(name='Region', example='cn-hangzhou'),
}

model DeleteNamespaceResponseBody = {
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='abcde-efg'),
  success?: boolean(name='Success', example='true'),
}

model DeleteNamespaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteNamespaceResponseBody(name='body'),
}

async function deleteNamespaceWithOptions(request: DeleteNamespaceRequest, runtime: Util.RuntimeOptions): DeleteNamespaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteNamespace',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteNamespace(request: DeleteNamespaceRequest): DeleteNamespaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNamespaceWithOptions(request, runtime);
}

model DeleteSecurityGroupRuleRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-83b0ddb569434f82b9fe8e4c60c40f7c'),
  id?: long(name='Id', example='93'),
}

model DeleteSecurityGroupRuleResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    description?: string(name='Description', example='auto-description1'),
    gatewayId?: long(name='GatewayId', example='103'),
    gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-7ea3da97b96543e19f6c597c****'),
    gmtCreate?: string(name='GmtCreate', example='2022-01-07 18:07:57'),
    gmtModified?: string(name='GmtModified', example='2022-01-11T14:12:55.000+0000'),
    id?: long(name='Id', example='2'),
    ipProtocol?: string(name='IpProtocol', example='tcp'),
    portRange?: string(name='PortRange', example='8443/8443'),
    securityGroupId?: string(name='SecurityGroupId', example='sg-uf6hgwe067prhg68agfa'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='43E50CB7-258E-5AFF-9B93-ECC19928C699'),
  success?: boolean(name='Success', example='true'),
}

model DeleteSecurityGroupRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSecurityGroupRuleResponseBody(name='body'),
}

async function deleteSecurityGroupRuleWithOptions(request: DeleteSecurityGroupRuleRequest, runtime: Util.RuntimeOptions): DeleteSecurityGroupRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSecurityGroupRule',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSecurityGroupRule(request: DeleteSecurityGroupRuleRequest): DeleteSecurityGroupRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSecurityGroupRuleWithOptions(request, runtime);
}

model DeleteServiceSourceRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-492af9b04bb4474cae9d645be850****'),
  sourceId?: long(name='SourceId', example='17'),
}

model DeleteServiceSourceResponseBody = {
  code?: int32(name='Code', example='1'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', example='2CEF593F-D60C-5449-9E98-15CA6ECD9189'),
  success?: boolean(name='Success', example='true'),
}

model DeleteServiceSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteServiceSourceResponseBody(name='body'),
}

async function deleteServiceSourceWithOptions(request: DeleteServiceSourceRequest, runtime: Util.RuntimeOptions): DeleteServiceSourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.sourceId)) {
    query['SourceId'] = request.sourceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteServiceSource',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteServiceSource(request: DeleteServiceSourceRequest): DeleteServiceSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteServiceSourceWithOptions(request, runtime);
}

model DeleteSwimmingLaneRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The ID of the lane.', example='zh'),
  laneId?: long(name='LaneId', description='system error', example='229'),
  namespace?: string(name='Namespace', description='MSE命名空间名字', example='default'),
}

model DeleteSwimmingLaneResponseBody = {
  errorCode?: string(name='ErrorCode', description='The status code. A value of 200 is returned if the request is successful.', example='mse-100-000'),
  message?: string(name='Message', description='The HTTP status code returned.', example='The error message returned.'),
  requestId?: string(name='RequestId', description='RestResult', example='69AD2AA7-DB47-449B-941B-B14409DF****'),
  success?: boolean(name='Success', description='The ID of the request.', example='true'),
}

model DeleteSwimmingLaneResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSwimmingLaneResponseBody(name='body'),
}

async function deleteSwimmingLaneWithOptions(request: DeleteSwimmingLaneRequest, runtime: Util.RuntimeOptions): DeleteSwimmingLaneResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.laneId)) {
    query['LaneId'] = request.laneId;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSwimmingLane',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSwimmingLane(request: DeleteSwimmingLaneRequest): DeleteSwimmingLaneResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSwimmingLaneWithOptions(request, runtime);
}

model DeleteSwimmingLaneGroupRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  groupId?: long(name='GroupId', example='145'),
  namespace?: string(name='Namespace', example='default'),
  region?: string(name='Region'),
  name?: string(name='name'),
}

model DeleteSwimmingLaneGroupResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: any(name='Data', example='{}'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='52BA6DA6-A702-4362-A32F-DFF79655****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteSwimmingLaneGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSwimmingLaneGroupResponseBody(name='body'),
}

async function deleteSwimmingLaneGroupWithOptions(request: DeleteSwimmingLaneGroupRequest, runtime: Util.RuntimeOptions): DeleteSwimmingLaneGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.name)) {
    query['name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSwimmingLaneGroup',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSwimmingLaneGroup(request: DeleteSwimmingLaneGroupRequest): DeleteSwimmingLaneGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSwimmingLaneGroupWithOptions(request, runtime);
}

model DeleteZnodeRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  clusterId?: string(name='ClusterId', example='mse-09k1q11****'),
  path?: string(name='Path', example='/zookeeper'),
  requestPars?: string(name='RequestPars', example='{}'),
}

model DeleteZnodeResponseBody = {
  data?: {
    data?: string(name='Data', example='cluster'),
    dir?: boolean(name='Dir', example='true'),
    name?: string(name='Name', example='mse-bc1a29b0-160230875****-reg-center-0-1'),
    path?: string(name='Path', example='/'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpCode?: string(name='HttpCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='DC34E4A3-5F1C-4E40-86EA-02EDF967****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteZnodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteZnodeResponseBody(name='body'),
}

async function deleteZnodeWithOptions(request: DeleteZnodeRequest, runtime: Util.RuntimeOptions): DeleteZnodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.path)) {
    query['Path'] = request.path;
  }
  if (!Util.isUnset(request.requestPars)) {
    query['RequestPars'] = request.requestPars;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteZnode',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteZnode(request: DeleteZnodeRequest): DeleteZnodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteZnodeWithOptions(request, runtime);
}

model ExportNacosConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='clusterNotFound', example='zh'),
  appName?: string(name='AppName', description='mse-200-021', example='qjl-gateway-openapi'),
  dataId?: string(name='DataId', description='illegalRequest', example='sms-mes-develop.prop****'),
  group?: string(name='Group', description='illegal request:%s', example='TIMEDTASK_COMMON_GROUP'),
  ids?: string(name='Ids', description='mse-100-007', example='1709,1710'),
  instanceId?: string(name='InstanceId', description='duplicatedClusterAliasName', example='mse-cn-2r42ddc****'),
  namespaceId?: string(name='NamespaceId', description='duplicated cluster alias name', example='ae77c258-4d4f-478f-baaa-084aee0****'),
}

model ExportNacosConfigResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    url?: string(name='Url', example='http://xxxxxxxxx'),
  }(name='Data'),
  dynamicMessage?: string(name='DynamicMessage', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='mse-100-001', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='systemError', example='92245803-49B7-54CF-8D49-01A34A0E1CD6'),
  success?: boolean(name='Success', description='system error', example='True'),
}

model ExportNacosConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExportNacosConfigResponseBody(name='body'),
}

/**
  * The tag of the application.
  *
  * @param request ExportNacosConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ExportNacosConfigResponse
 */
async function exportNacosConfigWithOptions(request: ExportNacosConfigRequest, runtime: Util.RuntimeOptions): ExportNacosConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.dataId)) {
    query['DataId'] = request.dataId;
  }
  if (!Util.isUnset(request.group)) {
    query['Group'] = request.group;
  }
  if (!Util.isUnset(request.ids)) {
    query['Ids'] = request.ids;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.namespaceId)) {
    query['NamespaceId'] = request.namespaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExportNacosConfig',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The tag of the application.
  *
  * @param request ExportNacosConfigRequest
  * @return ExportNacosConfigResponse
 */
async function exportNacosConfig(request: ExportNacosConfigRequest): ExportNacosConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return exportNacosConfigWithOptions(request, runtime);
}

model ExportZookeeperDataRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  exportType?: string(name='ExportType'),
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  requestPars?: string(name='RequestPars'),
}

model ExportZookeeperDataResponseBody = {
  data?: {
    contentMap?: map[string]any(name='ContentMap'),
    createTime?: long(name='CreateTime'),
    exportType?: string(name='ExportType'),
    extend?: string(name='Extend'),
    id?: int32(name='Id'),
    instanceId?: string(name='InstanceId'),
    kubeoneTaskIds?: string(name='KubeoneTaskIds'),
    status?: string(name='Status'),
    updateTime?: long(name='UpdateTime'),
  }(name='Data'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: string(name='ErrorCode'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ExportZookeeperDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExportZookeeperDataResponseBody(name='body'),
}

/**
  * Initiates a task to export ZooKeeper data.
  *
  * @param request ExportZookeeperDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ExportZookeeperDataResponse
 */
async function exportZookeeperDataWithOptions(request: ExportZookeeperDataRequest, runtime: Util.RuntimeOptions): ExportZookeeperDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.exportType)) {
    query['ExportType'] = request.exportType;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.requestPars)) {
    query['RequestPars'] = request.requestPars;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExportZookeeperData',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Initiates a task to export ZooKeeper data.
  *
  * @param request ExportZookeeperDataRequest
  * @return ExportZookeeperDataResponse
 */
async function exportZookeeperData(request: ExportZookeeperDataRequest): ExportZookeeperDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return exportZookeeperDataWithOptions(request, runtime);
}

model FetchLosslessRuleListRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh-CN'),
  appId?: string(name='AppId', description='systemError', example='system error'),
  appName?: string(name='AppName', description='cluster not found', example='spring-boot-sample'),
  namespace?: string(name='Namespace', description='mse-100-001', example='default'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', description='clusterNotFound', example='cn-beijing'),
}

model FetchLosslessRuleListResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    results?: [ 
      {
        aligned?: boolean(name='Aligned', example='true'),
        appId?: string(name='AppId'),
        appName?: string(name='AppName', example='echo-demo'),
        count?: int32(name='Count', example='3'),
        delayTime?: int32(name='DelayTime', example='60'),
        enable?: boolean(name='Enable', example='true'),
        funcType?: int32(name='FuncType', example='2'),
        lossLessDetail?: boolean(name='LossLessDetail', example='false'),
        notice?: boolean(name='Notice', example='true'),
        related?: boolean(name='Related', example='false'),
        warmupTime?: int32(name='WarmupTime', example='60'),
      }
    ](name='Results'),
    totalSize?: int32(name='TotalSize', example='36'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='Success'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='56D9E600-6348-4260-B35F-583413F****'),
  success?: boolean(name='Success'),
}

model FetchLosslessRuleListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FetchLosslessRuleListResponseBody(name='body'),
}

/**
  * The page number of the returned page.
  *
  * @param request FetchLosslessRuleListRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return FetchLosslessRuleListResponse
 */
async function fetchLosslessRuleListWithOptions(request: FetchLosslessRuleListRequest, runtime: Util.RuntimeOptions): FetchLosslessRuleListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FetchLosslessRuleList',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The page number of the returned page.
  *
  * @param request FetchLosslessRuleListRequest
  * @return FetchLosslessRuleListResponse
 */
async function fetchLosslessRuleList(request: FetchLosslessRuleListRequest): FetchLosslessRuleListResponse {
  var runtime = new Util.RuntimeOptions{};
  return fetchLosslessRuleListWithOptions(request, runtime);
}

model GetAppMessageQueueRouteRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  appId?: string(name='AppId', example='hkhon1po62@c3df23522baa898'),
  appName?: string(name='AppName', example='example-app'),
  namespace?: string(name='Namespace', example='default'),
  region?: string(name='Region', example='cn-hangzhou'),
}

model GetAppMessageQueueRouteResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    appId?: string(name='AppId', example='hkhon1po62@54e1f42f37cd65a'),
    enable?: boolean(name='Enable', example='true'),
    filterSide?: string(name='FilterSide', example='Server'),
    region?: string(name='Region', example='cn-hangzhou'),
    tags?: [ string ](name='Tags'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='4B00BCB0-105F-5A2A-B75B-641C8E9B18FC'),
  success?: boolean(name='Success', example='true'),
}

model GetAppMessageQueueRouteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAppMessageQueueRouteResponseBody(name='body'),
}

async function getAppMessageQueueRouteWithOptions(request: GetAppMessageQueueRouteRequest, runtime: Util.RuntimeOptions): GetAppMessageQueueRouteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAppMessageQueueRoute',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAppMessageQueueRoute(request: GetAppMessageQueueRouteRequest): GetAppMessageQueueRouteResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAppMessageQueueRouteWithOptions(request, runtime);
}

model GetApplicationListRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  appId?: string(name='AppId', description='The ID of an application.', example='hkhon1po62@c3df23522b*****'),
  appName?: string(name='AppName', description='The name of an application.', example='rest-container'),
  language?: string(name='Language', description='The programming language of the application, such as Java and Go.', example='Java'),
  namespace?: string(name='Namespace', description='The microservice namespace to which the application belongs.', example='default'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10'),
  region?: string(name='Region', description='The ID of the region.', example='cn-hangzhou'),
  sentinelEnable?: boolean(name='SentinelEnable', description='Specifies whether to enable the Sentinel-compatible mode.', example='true'),
  source?: string(name='Source', description='The source of the application. The value is fixed as edasmsc.', example='edasmsc'),
  switchEnable?: boolean(name='SwitchEnable', description='Specifies whether to enable switching.', example='true'),
}

model GetApplicationListResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: {
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    result?: [ 
      {
        appId?: string(name='AppId', description='The ID of the application.', example='hkhon1po62@5f1b08becb*****'),
        appName?: string(name='AppName', description='The name of the application.', example='finance'),
        extraInfo?: string(name='ExtraInfo', description='The additional information.', example='{}'),
        instancesNumber?: int32(name='InstancesNumber', description='The number of instances.', example='1'),
        language?: string(name='Language', description='The programming language of the application.', example='JAVA'),
        licenseKey?: string(name='LicenseKey', description='The license key in use.', example='diyh1rln1u@*****7ad938167'),
        namespace?: string(name='Namespace'),
        regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou'),
        source?: string(name='Source', description='The source of the application.', example='edasmsc'),
        status?: long(name='Status', description='The status.', example='0'),
        userId?: string(name='UserId', description='The ID of the user.', example='1234567890'),
      }
    ](name='Result', description='The returned information.'),
    totalSize?: int32(name='TotalSize', description='The total number of entries returned.', example='11'),
  }(name='Data', description='The data structure.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='403'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F55E608F-7C15-****-9CFD-DF832EBC4A0F'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model GetApplicationListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetApplicationListResponseBody(name='body'),
}

async function getApplicationListWithOptions(request: GetApplicationListRequest, runtime: Util.RuntimeOptions): GetApplicationListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.sentinelEnable)) {
    query['SentinelEnable'] = request.sentinelEnable;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.switchEnable)) {
    query['SwitchEnable'] = request.switchEnable;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetApplicationList',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getApplicationList(request: GetApplicationListRequest): GetApplicationListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApplicationListWithOptions(request, runtime);
}

model GetApplicationListWithMetircsRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  appId?: string(name='AppId', description='The ID of the application.', example='hkhon1po62@c3df23522baa898'),
  appName?: string(name='AppName', description='The name of the application.', example='spring-cloud-a'),
  namespace?: string(name='Namespace', example='default'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 10', example='10'),
  region?: string(name='Region', description='The ID of the region where the Microservices Engine (MSE) instance resides. Examples:

*   cn-hangzhou: China (Hangzhou)
*   cn-beijing: China (Beijing)
*   cn-shanghai: China (Shanghai)
*   cn-zhangjiakou: China (Zhangjiakou)
*   cn-shenzhen: China (Shenzhen)', example='cn-hangzhou'),
  source?: string(name='Source', description='The service source.', example='edasmsc'),
}

model GetApplicationListWithMetircsResponseBody = {
  code?: int32(name='Code', description='The response code returned.', example='200'),
  data?: {
    pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    result?: [ 
      {
        appId?: string(name='AppId', description='The ID of the application.', example='daqijp6c31@xxx'),
        appName?: string(name='AppName', description='The name of the application.', example='finance'),
        curMetrics?: [ 
          {
            blockQps?: double(name='BlockQps', description='The number of blocked QPS.', example='100'),
            expQps?: double(name='ExpQps', description='The abnormal QPS.', example='100'),
            passQps?: double(name='PassQps', description='The number of passed QPS.', example='100'),
            qps?: double(name='Qps', description='The queries per second (QPS).', example='895'),
            rt?: double(name='Rt', description='The response time (RT).', example='109'),
            thread?: double(name='Thread', description='The number of threads.', example='1'),
            timestamp?: long(name='Timestamp', description='The timestamp.', example='1666764426528'),
          }
        ](name='CurMetrics', description='The current metrics.'),
        curMetricsFm?: {
          blockQps?: double(name='BlockQps', description='The number of blocked QPS.', example='1'),
          expQps?: double(name='ExpQps', description='The abnormal QPS.', example='100'),
          passQps?: double(name='PassQps', description='The number of passed QPS.', example='1'),
          qps?: double(name='Qps', description='The QPS.', example='1'),
          rt?: double(name='Rt', description='The RT.', example='0'),
          thread?: double(name='Thread', description='The number of concurrent threads.', example='1'),
          timestamp?: long(name='Timestamp', description='The timestamp.', example='1648117002717'),
        }(name='CurMetricsFm', description='The sum of metrics about the application.'),
        extraInfo?: string(name='ExtraInfo', description='The additional information.', example='{}'),
        instancesNumber?: int32(name='InstancesNumber', description='The number of instances.', example='1'),
        language?: string(name='Language', description='The programming language of the application.', example='JAVA'),
        licenseKey?: string(name='LicenseKey', description='The license key in use.', example='diyh1rln1u@8d97eb7ad938167'),
        namespace?: string(name='Namespace'),
        regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
        source?: string(name='Source', description='The source.', example='edasmsc'),
        status?: long(name='Status', description='The status.', example='0'),
        tags?: [ string ](name='Tags', description='The tags.'),
        userId?: string(name='UserId', description='The ID of the user.', example='1234567890'),
      }
    ](name='Result', description='The returned information.'),
    totalSize?: int32(name='TotalSize', description='The total number of entries returned.', example='11'),
  }(name='Data', description='The details of the data.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request was successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='062D13C5-DEA3-4921-8918-C49A0F1B****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model GetApplicationListWithMetircsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetApplicationListWithMetircsResponseBody(name='body'),
}

async function getApplicationListWithMetircsWithOptions(request: GetApplicationListWithMetircsRequest, runtime: Util.RuntimeOptions): GetApplicationListWithMetircsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetApplicationListWithMetircs',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getApplicationListWithMetircs(request: GetApplicationListWithMetircsRequest): GetApplicationListWithMetircsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApplicationListWithMetircsWithOptions(request, runtime);
}

model GetBlackWhiteListRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-32d5c9769c1842b1a2cc3426c59e****'),
  isWhite?: boolean(name='IsWhite', example='true'),
  resourceType?: string(name='ResourceType', example='GATEWAY'),
  type?: string(name='Type', example='IP'),
}

model GetBlackWhiteListResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    content?: string(name='Content', example='text'),
    gatewayId?: long(name='GatewayId', example='1'),
    gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-7ea3da97b96543e19f6c597c****'),
    gmtCreate?: string(name='GmtCreate', example='2022-01-07T10:07:57.000+0000'),
    gmtModified?: string(name='GmtModified', example='2022-01-07T10:07:57.000+0000'),
    id?: long(name='Id', example='275'),
    isWhite?: boolean(name='IsWhite', example='true'),
    resourceId?: long(name='ResourceId', example='1'),
    resourceType?: string(name='ResourceType', example='GATEWAY'),
    status?: string(name='Status', example='on'),
    type?: string(name='Type', example='IP'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', example='89CBC928-4F57-51FA-A413-EE0F4CD87200'),
  success?: boolean(name='Success', example='true'),
}

model GetBlackWhiteListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetBlackWhiteListResponseBody(name='body'),
}

async function getBlackWhiteListWithOptions(request: GetBlackWhiteListRequest, runtime: Util.RuntimeOptions): GetBlackWhiteListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.isWhite)) {
    query['IsWhite'] = request.isWhite;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetBlackWhiteList',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getBlackWhiteList(request: GetBlackWhiteListRequest): GetBlackWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBlackWhiteListWithOptions(request, runtime);
}

model GetEngineNamepaceRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  clusterId?: string(name='ClusterId', example='mse-98s****'),
  id?: string(name='Id', example='0e958d79-****-b282-b702d66362b5'),
  instanceId?: string(name='InstanceId', example='mse.cn-hangzhou.aliyuncs.com'),
}

model GetEngineNamepaceResponseBody = {
  configCount?: string(name='ConfigCount', example='1'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpCode?: string(name='HttpCode', example='202'),
  message?: string(name='Message', example='success'),
  namespace?: string(name='Namespace', example='public'),
  namespaceDesc?: string(name='NamespaceDesc', example='mytest'),
  namespaceShowName?: string(name='NamespaceShowName', example='public'),
  quota?: string(name='Quota', example='200'),
  requestId?: string(name='RequestId', example='FA8F966F-420C-52F5-B49E-6ED7CCE02697'),
  success?: boolean(name='Success', example='true'),
  type?: string(name='Type', example='1'),
}

model GetEngineNamepaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetEngineNamepaceResponseBody(name='body'),
}

async function getEngineNamepaceWithOptions(request: GetEngineNamepaceRequest, runtime: Util.RuntimeOptions): GetEngineNamepaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetEngineNamepace',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getEngineNamepace(request: GetEngineNamepaceRequest): GetEngineNamepaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEngineNamepaceWithOptions(request, runtime);
}

model GetGatewayRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-685f661467b54f48b7b7a76605ce****'),
}

model GetGatewayResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    chargeType?: string(name='ChargeType', example='POSTPAY'),
    endDate?: string(name='EndDate', example='2021-08-01 00:00:00'),
    gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-7ea3da97b96543e19f6c597cd4a9****'),
    gmtCreate?: string(name='GmtCreate', example='2022-01-07T10:07:57.000+0000'),
    gmtModified?: string(name='GmtModified', example='2022-01-07T10:07:57.000+0000'),
    id?: long(name='Id', example='12'),
    instanceId?: string(name='InstanceId', example='mse-cn-st21ri2****'),
    logConfigDetails?: {
      logEnabled?: boolean(name='LogEnabled', example='true'),
      logStoreName?: string(name='LogStoreName', example='mse_access_log'),
      projectName?: string(name='ProjectName', example='k8s-log-c173117256e934a96b7fefdf2ef8a8057'),
    }(name='LogConfigDetails'),
    mseTag?: string(name='MseTag', example='{"TagKey":"TagValue"}'),
    name?: string(name='Name', example='DEFAULT'),
    primaryUser?: string(name='PrimaryUser', example='1231254'),
    region?: string(name='Region', example='cn-hangzhou'),
    replica?: int32(name='Replica', example='2'),
    resourceGroupId?: string(name='ResourceGroupId', example='rg-acfm34x43l*****'),
    securityGroup?: string(name='SecurityGroup', example='sg-bp11ufzqn6mmb8dtzz82'),
    spec?: string(name='Spec', example='MSE_GTW_16_32_200_c'),
    status?: int32(name='Status', example='0'),
    statusDesc?: string(name='StatusDesc'),
    vpc?: string(name='Vpc', example='vpc-bp1328cm01m6uel42b5zb'),
    vswitch?: string(name='Vswitch', example='vsw-bp18zeqxx6mpuq843z4n5'),
    vswitch2?: string(name='Vswitch2', example='vpc-bp1j6ivhav15ve7q54kq2'),
    xtraceDetails?: {
      sample?: int32(name='Sample', example='10'),
      traceOn?: boolean(name='TraceOn', example='true'),
    }(name='XtraceDetails'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='9C96CDF8-9E6C-5AB6-B83C-8F87A10117E6'),
  success?: boolean(name='Success', example='true'),
}

model GetGatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetGatewayResponseBody(name='body'),
}

async function getGatewayWithOptions(request: GetGatewayRequest, runtime: Util.RuntimeOptions): GetGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetGateway',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getGateway(request: GetGatewayRequest): GetGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return getGatewayWithOptions(request, runtime);
}

model GetGatewayAuthConsumerDetailRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-1a4ab101d5924b6f92c5ec98a84*****'),
  id?: long(name='Id', example='120'),
}

model GetGatewayAuthConsumerDetailResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    consumerStatus?: boolean(name='ConsumerStatus', example='true'),
    description?: string(name='Description'),
    encodeType?: string(name='EncodeType', example='RSA'),
    gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-7ea3da97b96543e19f6c597cd4a9****'),
    gmtCreate?: string(name='GmtCreate', example='2031-03-30 02:35:12'),
    gmtModified?: string(name='GmtModified', example='2023-02-01 14:17:57'),
    id?: long(name='Id', example='12'),
    jwks?: string(name='Jwks', example='{
      "keys": [
            {
                  "e": "AQAB",
                  "kid": "DHFbpoIUqrY8t2zpA2qXfCmr5VO5ZEr4RzHU_-envvQ",
                  "kty": "RSA",
                  "n": "xAE7eB6qugXyCAG3yhh7pkDkT65pHymX-P7KfIupjf59vsdo91bSP9C8H07pSAGQO1MV_xFj9VswgsCg4R6otmg5PV2He95lZdHtOcU5DXIg_pbhLdKXbi66GlVeK6ABZOUW3WYtnNHD-91gVuoeJT_DwtGGcp4ignkgXfkiEm4sw-4sfb4qdt5oLbyVpmW6x9cfa7vs2WTfURiCrBoUqgBo_-4WTiULmmHSGZHOjzwa8WtrtOQGsAFjIbno85jp6MnGGGZPYZbDAa_b3y5u-YpW7ypZrvD8BgtKVjgtQgZhLAGezMt0ua3DRrWnKqTZ0BJ_EyxOGuHJrLsn00fnMQ"
            }
      ]
}'),
    keyName?: string(name='KeyName', example='iss'),
    keyValue?: string(name='KeyValue', example='abcd'),
    name?: string(name='Name', example='test'),
    primaryUser?: string(name='PrimaryUser', example='123'),
    resourceList?: [ 
      {
        consumerId?: long(name='ConsumerId', example='123'),
        gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-4822033a8513496fa10f05c934f*****'),
        gmtCreate?: string(name='GmtCreate', example='2022-12-06 01:38:03'),
        gmtModified?: string(name='GmtModified', example='2022-12-06 01:38:03'),
        id?: long(name='Id', example='16'),
        resourceStatus?: boolean(name='ResourceStatus', example='true'),
        routeId?: long(name='RouteId', example='3458'),
        routeName?: string(name='RouteName', example='test'),
      }
    ](name='ResourceList'),
    tokenName?: string(name='TokenName', example='Authorization'),
    tokenPass?: boolean(name='TokenPass', example='true'),
    tokenPosition?: string(name='TokenPosition', example='HEADER'),
    tokenPrefix?: string(name='TokenPrefix', example='Bearer'),
    type?: string(name='Type', example='JWT'),
  }(name='Data'),
  dynamicCode?: string(name='DynamicCode', example='code'),
  dynamicMessage?: string(name='DynamicMessage', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', example='true'),
}

model GetGatewayAuthConsumerDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetGatewayAuthConsumerDetailResponseBody(name='body'),
}

async function getGatewayAuthConsumerDetailWithOptions(request: GetGatewayAuthConsumerDetailRequest, runtime: Util.RuntimeOptions): GetGatewayAuthConsumerDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetGatewayAuthConsumerDetail',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getGatewayAuthConsumerDetail(request: GetGatewayAuthConsumerDetailRequest): GetGatewayAuthConsumerDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getGatewayAuthConsumerDetailWithOptions(request, runtime);
}

model GetGatewayDomainDetailRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-6d0b23e1d39e41658a968d79a635****'),
  id?: string(name='Id', example='29'),
}

model GetGatewayDomainDetailResponseBody = {
  code?: int32(name='Code', example='403'),
  data?: {
    afterDate?: long(name='AfterDate', example='2021-04-01 02:35:12'),
    algorithm?: string(name='Algorithm', example='RSA'),
    beforeDate?: long(name='BeforeDate', example='2021-04-01 02:35:12'),
    certIdentifier?: string(name='CertIdentifier', example='234-cn-hangzhou'),
    certName?: string(name='CertName', example='test'),
    commonName?: string(name='CommonName', example='name'),
    gatewayId?: long(name='GatewayId', example='1'),
    gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-7ea3da97b96543e19f6c597cd4a9****'),
    gmtAfter?: string(name='GmtAfter', example='2021-04-01 02:35:12'),
    gmtBefore?: string(name='GmtBefore', example='2021-04-01 02:35:12'),
    gmtCreate?: string(name='GmtCreate', example='2022-01-07T10:07:57.000+0000'),
    gmtModified?: string(name='GmtModified', example='2022-01-07T10:07:57.000+0000'),
    http2?: string(name='Http2', example='close'),
    id?: long(name='Id', example='12'),
    issuer?: string(name='Issuer', example='Istio'),
    mustHttps?: boolean(name='MustHttps', example='true'),
    name?: string(name='Name', example='test.com'),
    protocol?: string(name='Protocol', example='HTTP'),
    sans?: string(name='Sans', example='test.com'),
    tlsMax?: string(name='TlsMax', example='TLS 1.3'),
    tlsMin?: string(name='TlsMin', example='TLS 1.0'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', example='88B83302-CD88-54D3-8DF2-208BFDC73F0D'),
  success?: boolean(name='Success', example='true'),
}

model GetGatewayDomainDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetGatewayDomainDetailResponseBody(name='body'),
}

async function getGatewayDomainDetailWithOptions(request: GetGatewayDomainDetailRequest, runtime: Util.RuntimeOptions): GetGatewayDomainDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetGatewayDomainDetail',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getGatewayDomainDetail(request: GetGatewayDomainDetailRequest): GetGatewayDomainDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getGatewayDomainDetailWithOptions(request, runtime);
}

model GetGatewayOptionRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  gatewayId?: long(name='GatewayId', example='429'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-c9bc5afd61014165bd58f621b491*****'),
}

model GetGatewayOptionResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: GatewayOption(name='Data', example='{\\"LogConfigDetails\\": {\\"LogEnabled\\": False}, \\"TraceDetails\\": {\\"TraceEnabled\\": False}}'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='C92F4A4D-A2FD-593E-839E-F3D4DFD2****'),
  success?: boolean(name='Success', example='true'),
}

model GetGatewayOptionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetGatewayOptionResponseBody(name='body'),
}

async function getGatewayOptionWithOptions(request: GetGatewayOptionRequest, runtime: Util.RuntimeOptions): GetGatewayOptionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetGatewayOption',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getGatewayOption(request: GetGatewayOptionRequest): GetGatewayOptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getGatewayOptionWithOptions(request, runtime);
}

model GetGatewayRouteDetailRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-5d3a78a53ec947aa928212d671d400ac'),
  routeId?: long(name='RouteId', description='The ID of the route.', example='1050'),
}

model GetGatewayRouteDetailResponseBody = {
  code?: int32(name='Code', description='The status code returned. A value of 200 indicates that the request is successful.', example='200'),
  data?: {
    ahasStatus?: int32(name='AhasStatus', description='The status of Application High Availability Service (AHAS).', example='1'),
    cors?: {
      allowCredentials?: boolean(name='AllowCredentials', description='The credentials allowed.', example='true'),
      allowHeaders?: string(name='AllowHeaders', description='The headers allowed.', example='*'),
      allowMethods?: string(name='AllowMethods', description='The methods allowed.', example='GET,POST,PUT,DELETE,HEAD,OPTIONS,PATCH'),
      allowOrigins?: string(name='AllowOrigins', description='The origins allowed.', example='*'),
      exposeHeaders?: string(name='ExposeHeaders', description='The response headers.', example='*'),
      status?: string(name='Status', description='The status.', example='off'),
      timeUnit?: string(name='TimeUnit', description='The time unit.', example='h'),
      unitNum?: long(name='UnitNum', description='The unit number.', example='24'),
    }(name='Cors', description='The configuration for cross-origin resource sharing (CORS).'),
    defaultServiceId?: long(name='DefaultServiceId', description='The default service ID.', example='3'),
    defaultServiceName?: string(name='DefaultServiceName', description='The default service name.', example='test'),
    destinationType?: string(name='DestinationType', description='The destination service type.', example='Single'),
    directResponse?: {
      body?: string(name='Body', description='The mock return value.', example='{}'),
      code?: int32(name='Code', description='The response code returned.', example='200'),
    }(name='DirectResponse', description='The information about service mocking.'),
    domainId?: long(name='DomainId', description='The domain ID.', example='235'),
    domainIdList?: [ long ](name='DomainIdList', description='The IDs of domains.'),
    domainName?: string(name='DomainName', description='The domain name.', example='123.com'),
    domainNameList?: [ string ](name='DomainNameList', description='The list of domain names.'),
    enableWaf?: boolean(name='EnableWaf', description='Indicates whether Web Application Firewall (WAF) is activated.', example='true'),
    fallback?: boolean(name='Fallback', description='Indicates whether the Fallback service is enabled.', example='true'),
    fallbackServices?: [ 
      {
        agreementType?: string(name='AgreementType', description='The type of the protocol. Valid values:', example='DUBBO'),
        groupName?: string(name='GroupName', description='The name of the group to which the service belongs.', example='test'),
        name?: string(name='Name', description='The name.', example='name'),
        namespace?: string(name='Namespace', description='The namespace to which the service belongs.', example='namespace'),
        percent?: int32(name='Percent', description='The weight in the form of a percentage value.', example='80'),
        serviceId?: long(name='ServiceId', description='The ID of the service.', example='1'),
        serviceName?: string(name='ServiceName', description='The name of a service.', example='name'),
        servicePort?: int32(name='ServicePort', description='The service port number.', example='8848'),
        sourceType?: string(name='SourceType', description='The type of the service source.', example='MSE'),
        version?: string(name='Version', description='The version of a service.', example='v1'),
      }
    ](name='FallbackServices', description='The information of the Fallback service.'),
    gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='1'),
    gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-7ea3da97b96543e19f6c597c****'),
    gmtCreate?: string(name='GmtCreate', description='The creation time.', example='2022-01-07 18:07:57'),
    gmtModified?: string(name='GmtModified', description='The last modification time.', example='2022-01-07T10:07:57.000+0000'),
    HTTPRewrite?: {
      host?: string(name='Host', description='The hostname of the gateway.', example='aliyuncs.com'),
      path?: string(name='Path', description='The path of the node.', example='/test/client'),
      pathType?: string(name='PathType', description='The rewrite type.', example='PRE'),
      pattern?: string(name='Pattern', description='The matching pattern.', example='/test'),
      status?: string(name='Status', description='The status of the policy.', example='off'),
      substitution?: string(name='Substitution', description='The replacement.', example='test'),
    }(name='HTTPRewrite', description='The information about the rewrite policy.'),
    headerOp?: {
      headerOpItems?: [ 
        {
          directionType?: string(name='DirectionType', description='The request or response.', example='Response'),
          key?: string(name='Key', description='The header key.', example='debug'),
          opType?: string(name='OpType', description='The operation type.', example='Add'),
          value?: string(name='Value', description='The header value.', example='test'),
        }
      ](name='HeaderOpItems', description='The information about headers.'),
      status?: string(name='Status', description='The status.', example='off'),
    }(name='HeaderOp', description='The header settings.'),
    id?: long(name='Id', description='The ID.', example='1050'),
    name?: string(name='Name', description='The name.', example='test'),
    policies?: string(name='Policies', example='{
      "CORS": "{\\"allowMethods\\":\\"GET,POST,PUT,DELETE,HEAD,OPTIONS,PATCH\\",\\"allowHeaders\\":\\"*\\",\\"exposeHeaders\\":\\"*\\",\\"unitNum\\":12,\\"allowCredentials\\":true,\\"status\\":\\"off\\",\\"allowOrigins\\":\\"*\\",\\"timeUnit\\":\\"h\\"}",
      "Timeout": "{\\"unitNum\\":10,\\"timeUnit\\":\\"s\\",\\"status\\":\\"off\\"}",
      "Retry": "{\\"attempts\\":2,\\"retryOn\\":[\\"5xx\\"],\\"status\\":\\"off\\"}",
      "HTTPRewrite": "{\\"pathType\\":\\"EQUAL\\",\\"path\\":\\"/o\\",\\"status\\":\\"off\\"}",
      "Waf": "{\\"enabled\\":false}",
      "HeaderOp": "{\\"status\\":\\"off\\",\\"headerOpItems\\":[{\\"directionType\\":\\"Request\\",\\"opType\\":\\"Add\\",\\"key\\":\\"kkk\\",\\"value\\":\\"ll\\"}]}"
}'),
    predicates?: string(name='Predicates', description='The matching conditions.', example='{}'),
    redirect?: {
      code?: int32(name='Code', description='The response code returned.', example='200'),
      host?: string(name='Host', description='The hostname.', example='16'),
      path?: string(name='Path', description='The path.', example='10111'),
    }(name='Redirect', description='The configuration of the redirection.'),
    retry?: {
      attempts?: int32(name='Attempts', description='The number of retries allowed.', example='1'),
      httpCodes?: [ string ](name='HttpCodes', description='The HTTP status codes.'),
      retryOn?: [ string ](name='RetryOn', description='The retry condition.'),
      status?: string(name='Status', description='The retry status.', example='on'),
    }(name='Retry', description='The retry configuration.'),
    routeOrder?: int32(name='RouteOrder', description='The sequence number of the route.', example='1'),
    routePredicates?: {
      headerPredicates?: [ 
        {
          key?: string(name='Key', description='The key of the request header.', example='id'),
          type?: string(name='Type', description='The type.', example='PRE'),
          value?: string(name='Value', description='The value of the request header.', example='200'),
        }
      ](name='HeaderPredicates', description='The information about header matching.'),
      methodPredicates?: [ string ](name='MethodPredicates', description='The information about method matching.'),
      pathPredicates?: {
        ignoreCase?: boolean(name='IgnoreCase', description='Indicates whether case sensitivity is ignored.', example='true'),
        path?: string(name='Path', description='The path.', example='/api'),
        type?: string(name='Type', description='The matching type.', example='PRE'),
      }(name='PathPredicates', description='The information about route matching.'),
      queryPredicates?: [ 
        {
          key?: string(name='Key', description='The name of the parameter.', example='userid'),
          type?: string(name='Type', description='The type.', example='PRE'),
          value?: string(name='Value', description='The value of the parameter.', example='test'),
        }
      ](name='QueryPredicates', description='The information about parameter matching.'),
    }(name='RoutePredicates', description='The information about route matching.'),
    routeServices?: [ 
      {
        agreementType?: string(name='AgreementType', description='The type of the protocol. Valid values:', example='DUBBO'),
        groupName?: string(name='GroupName', description='The name of the group to which a service belongs.', example='api'),
        name?: string(name='Name', description='The name of a service.', example='dubbo4'),
        namespace?: string(name='Namespace', description='The namespace.', example='acs_ecs_dashboard'),
        percent?: int32(name='Percent', description='The weight.', example='80'),
        serviceId?: long(name='ServiceId', description='The ID of a service.', example='782'),
        serviceName?: string(name='ServiceName', description='The name of a service.', example='xkc-crm'),
        servicePort?: int32(name='ServicePort', description='The service port number.', example='20880'),
        sourceType?: string(name='SourceType', description='The source type of a service.', example='MSE'),
        version?: string(name='Version', description='The version of a service.', example='v1'),
      }
    ](name='RouteServices', description='The services.'),
    services?: string(name='Services', description='The configurations of services.', example='[{\\"Percent\\":100,\\"ServiceId\\":126}]'),
    status?: int32(name='Status', description='The status of the route. Valid values:

*   0: unpublished
*   2: publishing
*   3: published
*   4: editing (updated but not published)
*   5: unpublishing
*   6: unavailable', example='0'),
    timeout?: {
      status?: string(name='Status', description='The status.', example='off'),
      timeUnit?: string(name='TimeUnit', description='The time unit.', example='s'),
      unitNum?: int32(name='UnitNum', description='The unit number.', example='10'),
    }(name='Timeout', description='The timeout configuration.'),
  }(name='Data', description='The data returned.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message returned if the request failed.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='FDF2D16C-5D28-5FAA-A56B-30BDE3559880'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model GetGatewayRouteDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetGatewayRouteDetailResponseBody(name='body'),
}

async function getGatewayRouteDetailWithOptions(request: GetGatewayRouteDetailRequest, runtime: Util.RuntimeOptions): GetGatewayRouteDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.routeId)) {
    query['RouteId'] = request.routeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetGatewayRouteDetail',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getGatewayRouteDetail(request: GetGatewayRouteDetailRequest): GetGatewayRouteDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getGatewayRouteDetailWithOptions(request, runtime);
}

model GetGatewayServiceDetailRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-f4c960ad071a48a790b36324394c****'),
  serviceId?: long(name='ServiceId', example='35'),
}

model GetGatewayServiceDetailResponseBody = {
  code?: int32(name='Code', example='1'),
  data?: {
    gatewayId?: long(name='GatewayId', example='1'),
    gatewayTrafficPolicy?: TrafficPolicy(name='GatewayTrafficPolicy', example='{}'),
    gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-7ea3da97b96543e19f6c597c****'),
    gmtCreate?: string(name='GmtCreate', example='2022-01-07 18:07:57'),
    gmtModified?: string(name='GmtModified', example='2022-01-07T10:07:57.000+0000'),
    groupName?: string(name='GroupName', example='test'),
    healthCheck?: string(name='HealthCheck', example='true'),
    healthStatus?: string(name='HealthStatus', example='true'),
    id?: long(name='Id', example='1'),
    ips?: [ string ](name='Ips'),
    labelDetails?: [ 
      {
        key?: string(name='Key', example='label'),
        values?: [ string ](name='Values'),
      }
    ](name='LabelDetails'),
    metaInfo?: string(name='MetaInfo', example='{}'),
    name?: string(name='Name', example='test'),
    namespace?: string(name='Namespace', example='default'),
    portTrafficPolicyList?: [ 
      {
        gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-2837hfd91h34dbg87364g*****'),
        gmtCreate?: string(name='GmtCreate', example='1667460287386'),
        gmtModified?: string(name='GmtModified', example='1667460287386'),
        id?: long(name='Id', example='1'),
        serviceId?: long(name='ServiceId', example='1'),
        servicePort?: int32(name='ServicePort', example='8080'),
        trafficPolicy?: TrafficPolicy(name='TrafficPolicy'),
      }
    ](name='PortTrafficPolicyList'),
    ports?: [ int32 ](name='Ports'),
    serviceNameInRegistry?: string(name='ServiceNameInRegistry', example='test'),
    serviceProtocol?: string(name='ServiceProtocol', example='HTTP'),
    sourceId?: long(name='SourceId', example='1'),
    sourceType?: string(name='SourceType', example='MSE'),
    versionDetails?: [ 
      {
        endpointNum?: int32(name='EndpointNum', example='1'),
        endpointNumPercent?: string(name='EndpointNumPercent', example='20%'),
        serviceVersion?: {
          labels?: [ 
            {
              key?: string(name='Key', example='version'),
              value?: string(name='Value', example='v2'),
            }
          ](name='Labels'),
          name?: string(name='Name', example='v2'),
        }(name='ServiceVersion'),
      }
    ](name='VersionDetails'),
    versions?: [ 
      {
        label?: string(name='Label', example='version'),
        type?: string(name='Type', example='test'),
        value?: string(name='Value', example='v1'),
      }
    ](name='Versions'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='9802C54E-5CC5-5706-927B-993DBB6DCF2F'),
  success?: boolean(name='Success', example='true'),
}

model GetGatewayServiceDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetGatewayServiceDetailResponseBody(name='body'),
}

async function getGatewayServiceDetailWithOptions(request: GetGatewayServiceDetailRequest, runtime: Util.RuntimeOptions): GetGatewayServiceDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.serviceId)) {
    query['ServiceId'] = request.serviceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetGatewayServiceDetail',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getGatewayServiceDetail(request: GetGatewayServiceDetailRequest): GetGatewayServiceDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getGatewayServiceDetailWithOptions(request, runtime);
}

model GetGovernanceKubernetesClusterRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  clusterId?: string(name='ClusterId', example='cd23228b3c80c4d4f9ad7af1d87cc****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model GetGovernanceKubernetesClusterResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    clusterId?: string(name='ClusterId', example='cd23228b3c80c4d4f9ad7af1d87cc30d5'),
    clusterName?: string(name='ClusterName', example='myCluster'),
    k8sVersion?: string(name='K8sVersion', example='1.20.11-aliyun.1'),
    namespaceInfos?: string(name='NamespaceInfos', example='[{\\"Name\\":\\"ack-onepilot\\",\\"Tags\\":null},{\\"Name\\":\\"default\\",\\"Tags\\":{\\"mse-enable\\":\\"enabled\\"}},{\\"Name\\":\\"kube-node-lease\\",\\"Tags\\":null},{\\"Name\\":\\"kube-public\\",\\"Tags\\":null},{\\"Name\\":\\"kube-system\\",\\"Tags\\":null}]'),
    namespaces?: [ 
      {
        name?: string(name='Name', example='default'),
        tags?: string(name='Tags', example='"mse-enable":"enabled"'),
      }
    ](name='Namespaces'),
    pilotStartTime?: string(name='PilotStartTime', example='2022-01-11T11:50:38.000+0000'),
    region?: string(name='Region', example='cn-hangzhou'),
    updateTime?: string(name='UpdateTime', example='2022-01-12T05:24:31.000+0000'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='5B170A0D-2C5D-4CF8-B808-03966B86****'),
  success?: boolean(name='Success', example='True'),
}

model GetGovernanceKubernetesClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetGovernanceKubernetesClusterResponseBody(name='body'),
}

async function getGovernanceKubernetesClusterWithOptions(request: GetGovernanceKubernetesClusterRequest, runtime: Util.RuntimeOptions): GetGovernanceKubernetesClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetGovernanceKubernetesCluster',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getGovernanceKubernetesCluster(request: GetGovernanceKubernetesClusterRequest): GetGovernanceKubernetesClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return getGovernanceKubernetesClusterWithOptions(request, runtime);
}

model GetImageRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  versionCode?: string(name='VersionCode', example='ZooKeeper_3_5_5'),
}

model GetImageResponseBody = {
  data?: {
    currentVersionFullShowName?: string(name='CurrentVersionFullShowName', example='3.5.5.0'),
    maxVersionChangelogUrl?: string(name='MaxVersionChangelogUrl', example='https://xxxxx'),
    maxVersionCode?: string(name='MaxVersionCode', example='ZooKeeper_3_6_3'),
    maxVersionFullShowName?: string(name='MaxVersionFullShowName', example='3.6.3.0'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpCode?: string(name='HttpCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='25EA0A83-9007-4E87-808C-637BE1A****'),
  success?: boolean(name='Success', example='true'),
}

model GetImageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetImageResponseBody(name='body'),
}

async function getImageWithOptions(request: GetImageRequest, runtime: Util.RuntimeOptions): GetImageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.versionCode)) {
    query['VersionCode'] = request.versionCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetImage',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getImage(request: GetImageRequest): GetImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return getImageWithOptions(request, runtime);
}

model GetImportFileUrlRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  contentType?: string(name='ContentType', example='application/zip'),
  instanceId?: string(name='InstanceId', example='mse_prepaid_public_cn-7pp2b****'),
  namespaceId?: string(name='NamespaceId', example='12788f73-9848-4388-98f1-507778f2****'),
}

model GetImportFileUrlResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    url?: string(name='Url', example='http://xxxxxxx'),
  }(name='Data'),
  dynamicMessage?: string(name='DynamicMessage', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='19488A00-4AF5-55E1-A689-98BA9F5E7441'),
  success?: boolean(name='Success', example='true'),
}

model GetImportFileUrlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetImportFileUrlResponseBody(name='body'),
}

/**
  * The details of the data.
  *
  * @param request GetImportFileUrlRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetImportFileUrlResponse
 */
async function getImportFileUrlWithOptions(request: GetImportFileUrlRequest, runtime: Util.RuntimeOptions): GetImportFileUrlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.contentType)) {
    query['ContentType'] = request.contentType;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.namespaceId)) {
    query['NamespaceId'] = request.namespaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetImportFileUrl',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The details of the data.
  *
  * @param request GetImportFileUrlRequest
  * @return GetImportFileUrlResponse
 */
async function getImportFileUrl(request: GetImportFileUrlRequest): GetImportFileUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getImportFileUrlWithOptions(request, runtime);
}

model GetKubernetesSourceRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-c5d1aadb7df646cfb7065fbf75c1****'),
  vpcId?: string(name='VpcId', example='vpc-bp1t50e045b5g7i3p****'),
}

model GetKubernetesSourceResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      cluster?: string(name='Cluster', example='cbc1efca895a64af097ff00b26f3f****'),
      name?: string(name='Name', example='k8s-demo'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', example='1085A66C-DEF1-58EE-A0A4-31E00C9FC0D5'),
  success?: boolean(name='Success', example='true'),
}

model GetKubernetesSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetKubernetesSourceResponseBody(name='body'),
}

async function getKubernetesSourceWithOptions(request: GetKubernetesSourceRequest, runtime: Util.RuntimeOptions): GetKubernetesSourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetKubernetesSource',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getKubernetesSource(request: GetKubernetesSourceRequest): GetKubernetesSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getKubernetesSourceWithOptions(request, runtime);
}

model GetLosslessRuleByAppRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  appId?: string(name='AppId', example='hkhon1po62@c3df23522baa***'),
  appName?: string(name='AppName', example='example-app'),
  namespace?: string(name='Namespace', example='default'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model GetLosslessRuleByAppResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    aligned?: boolean(name='Aligned', example='true'),
    appId?: string(name='AppId', example='hkhon1po62@24810bf4364a***'),
    appName?: string(name='AppName', example='spring-cloud-a'),
    count?: int32(name='Count', example='1'),
    delayTime?: int32(name='DelayTime', example='60'),
    enable?: boolean(name='Enable', example='true'),
    funcType?: int32(name='FuncType', example='2'),
    lossLessDetail?: boolean(name='LossLessDetail', example='true'),
    notice?: boolean(name='Notice', example='false'),
    related?: boolean(name='Related', example='false'),
    warmupTime?: int32(name='WarmupTime', example='120'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='Success'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='DC34E4A3-5F1C-4E40-86EA-02EDF967****'),
  success?: boolean(name='Success', example='true'),
}

model GetLosslessRuleByAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetLosslessRuleByAppResponseBody(name='body'),
}

async function getLosslessRuleByAppWithOptions(request: GetLosslessRuleByAppRequest, runtime: Util.RuntimeOptions): GetLosslessRuleByAppResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetLosslessRuleByApp',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getLosslessRuleByApp(request: GetLosslessRuleByAppRequest): GetLosslessRuleByAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLosslessRuleByAppWithOptions(request, runtime);
}

model GetMseFeatureSwitchRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
}

model GetMseFeatureSwitchResponseBody = {
  errorCode?: string(name='ErrorCode', example='NoPermission'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='6B4653A3-8D9C-5FDC-BB0C-936D40E9794B'),
  result?: map[string]any(name='Result', example='{\\"nacos_config_encrypt\\": False}'),
  success?: boolean(name='Success', example='true'),
}

model GetMseFeatureSwitchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMseFeatureSwitchResponseBody(name='body'),
}

async function getMseFeatureSwitchWithOptions(request: GetMseFeatureSwitchRequest, runtime: Util.RuntimeOptions): GetMseFeatureSwitchResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMseFeatureSwitch',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMseFeatureSwitch(request: GetMseFeatureSwitchRequest): GetMseFeatureSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMseFeatureSwitchWithOptions(request, runtime);
}

model GetMseSourceRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId'),
  type?: string(name='Type'),
}

model GetMseSourceResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      address?: string(name='Address'),
      clusterId?: string(name='ClusterId'),
      instanceId?: string(name='InstanceId'),
      name?: string(name='Name'),
      type?: string(name='Type'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetMseSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMseSourceResponseBody(name='body'),
}

async function getMseSourceWithOptions(request: GetMseSourceRequest, runtime: Util.RuntimeOptions): GetMseSourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMseSource',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMseSource(request: GetMseSourceRequest): GetMseSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMseSourceWithOptions(request, runtime);
}

model GetNacosConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The message returned.', example='zh'),
  beta?: boolean(name='Beta', description='The data structure.', example='true'),
  dataId?: string(name='DataId', description='The ID of the namespace.', example='halvie-mp-item****'),
  group?: string(name='Group', description='Specifies whether to perform a beta release. Valid values:

*   `true`: yes
*   `false`: no', example='common'),
  instanceId?: string(name='InstanceId', description='The name of the configuration group.', example='mse-cn-i7m2h0****'),
  namespaceId?: string(name='NamespaceId', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='ddaf8f12-****-b1c1-86e7c72e266b'),
}

model GetNacosConfigResponseBody = {
  configuration?: {
    appName?: string(name='AppName', description='The message digest of the configuration.', example='test'),
    betaIps?: string(name='BetaIps', description='The error code returned if the request failed.', example='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.'),
    content?: string(name='Content', description='The description of the configuration.', example='log.level=error'),
    dataId?: string(name='DataId', description='The name of the configuration group.', example='log.yaml'),
    desc?: string(name='Desc', description='The encryption key.', example='The list of IP addresses where the beta release of the configuration is performed.'),
    encryptedDataKey?: string(name='EncryptedDataKey', description='1.1.XX.XX, 2.2.XX.XX', example='key'),
    group?: string(name='Group', description='For testing', example='test'),
    md5?: string(name='Md5', description='The content of the configuration.', example='123rfsdf3'),
    tags?: string(name='Tags', description='The ID of the configuration.', example='context'),
    type?: string(name='Type', description='The tags of the configuration.', example='text'),
  }(name='Configuration', description='The name of the application.'),
  errorCode?: string(name='ErrorCode', description='mse-200-105', example='mse-100-000'),
  message?: string(name='Message', description='The configuration information.', example='success'),
  requestId?: string(name='RequestId', description='The format of the configuration.', example='B4EAB48C-BB4B-5B8D-B33B-35D69606C5AD'),
  success?: boolean(name='Success', description='duplicatedClusterAliasName', example='true'),
}

model GetNacosConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetNacosConfigResponseBody(name='body'),
}

/**
  * mse-200-105
  *
  * @param request GetNacosConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetNacosConfigResponse
 */
async function getNacosConfigWithOptions(request: GetNacosConfigRequest, runtime: Util.RuntimeOptions): GetNacosConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.beta)) {
    query['Beta'] = request.beta;
  }
  if (!Util.isUnset(request.dataId)) {
    query['DataId'] = request.dataId;
  }
  if (!Util.isUnset(request.group)) {
    query['Group'] = request.group;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.namespaceId)) {
    query['NamespaceId'] = request.namespaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetNacosConfig',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * mse-200-105
  *
  * @param request GetNacosConfigRequest
  * @return GetNacosConfigResponse
 */
async function getNacosConfig(request: GetNacosConfigRequest): GetNacosConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNacosConfigWithOptions(request, runtime);
}

model GetNacosHistoryConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  dataId?: string(name='DataId', example='msg-center.main.yaml'),
  group?: string(name='Group', example='DEFAULT_GROUP'),
  instanceId?: string(name='InstanceId', example='mse_prepaid_public_cn-st220g9ka02'),
  namespaceId?: string(name='NamespaceId', example='6cf708a5-****-89f2-3ba62c5ee9ba'),
  nid?: string(name='Nid', example='40****'),
}

model GetNacosHistoryConfigResponseBody = {
  configuration?: {
    appName?: string(name='AppName', example='test'),
    content?: string(name='Content', example='test'),
    dataId?: string(name='DataId', example='test.yaml'),
    encryptedDataKey?: string(name='EncryptedDataKey', example='23fds****'),
    group?: string(name='Group', example='public'),
    md5?: string(name='Md5', example='23sdf32f****'),
    opType?: string(name='OpType', example='text'),
  }(name='Configuration'),
  errorCode?: string(name='ErrorCode', example='NoPermission'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='69AD2AA7-DB47-449B-941B-B14409DF****'),
  success?: boolean(name='Success', example='true'),
}

model GetNacosHistoryConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetNacosHistoryConfigResponseBody(name='body'),
}

async function getNacosHistoryConfigWithOptions(request: GetNacosHistoryConfigRequest, runtime: Util.RuntimeOptions): GetNacosHistoryConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.dataId)) {
    query['DataId'] = request.dataId;
  }
  if (!Util.isUnset(request.group)) {
    query['Group'] = request.group;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.namespaceId)) {
    query['NamespaceId'] = request.namespaceId;
  }
  if (!Util.isUnset(request.nid)) {
    query['Nid'] = request.nid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetNacosHistoryConfig',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getNacosHistoryConfig(request: GetNacosHistoryConfigRequest): GetNacosHistoryConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNacosHistoryConfigWithOptions(request, runtime);
}

model GetOverviewRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='duplicated cluster alias name', example='zh'),
  period?: int32(name='Period', description='mse-200-105', example='1'),
  region?: string(name='Region', description='duplicatedClusterAliasName', example='cn-hangzhou'),
}

model GetOverviewResponseBody = {
  code?: int32(name='Code', description='clusterNotFound', example='1'),
  data?: string(name='Data', description='mse-200-021', example='data'),
  httpStatusCode?: int32(name='HttpStatusCode', description='mse-100-001', example='200'),
  message?: string(name='Message', description='illegalRequest', example='illegal request:%s'),
  requestId?: string(name='RequestId', description='You are not authorized to perform this operation.', example='52BA6DA6-A702-4362-A32F-DFF79655****'),
  success?: string(name='Success', description='cluster not found', example='true'),
}

model GetOverviewResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOverviewResponseBody(name='body'),
}

/**
  * mse-100-001
  *
  * @param request GetOverviewRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetOverviewResponse
 */
async function getOverviewWithOptions(request: GetOverviewRequest, runtime: Util.RuntimeOptions): GetOverviewResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetOverview',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * mse-100-001
  *
  * @param request GetOverviewRequest
  * @return GetOverviewResponse
 */
async function getOverview(request: GetOverviewRequest): GetOverviewResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOverviewWithOptions(request, runtime);
}

model GetPluginConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The name of the plug-in.', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The type.', example='gw-ubuwqygbq4783gqb2y3f87q****'),
  pluginId?: long(name='PluginId', description='The category of the plug-in.

0: custom

1: permission authorization

2: security protection

3: transmission protocol

4: traffic control

5: traffic observation', example='123'),
}

model GetPluginConfigResponseBody = {
  code?: int32(name='Code', description='The description of the README file.', example='200'),
  data?: {
    category?: int32(name='Category', description='Indicates whether the plug-in is enabled.

0: disabled

1: enabled', example='0'),
    configCheck?: string(name='ConfigCheck', description='\\# The configuration includes the fields required for checking, such as name, age, and friends. Sample configuration: name: John age: 18 friends: - David - Anne', example='The application scope of the plug-in.

0: global

1: domain names

2: routes'),
    gatewayConfigList?: [ 
      {
        config?: string(name='Config', description='The ID of the gateway.', example='The unique ID of the gateway.'),
        configLevel?: int32(name='ConfigLevel', description='The dynamic error message.', example='0'),
        enable?: boolean(name='Enable', description='This is a plug-in.', example='true'),
        gatewayId?: long(name='GatewayId', description='The description of the README file.', example='1'),
        gatewayUniqueId?: string(name='GatewayUniqueId', description='\\# The configuration includes the fields required for checking, such as name, age, and friends. Sample configuration: name: John age: 18 friends: - David - Anne', example='gw-ubuwqygbq4783gqb2y3f87q****'),
        gmtCreate?: string(name='GmtCreate', description='The mode.', example='1667309705000'),
        gmtModified?: string(name='GmtModified', description='The dynamic error code.', example='1667309705000'),
        id?: long(name='Id', description='The error code returned if the request failed.', example='1'),
        pluginId?: long(name='PluginId', description='The message returned.', example='1'),
      }
    ](name='GatewayConfigList', description='The version of the plug-in.'),
    id?: long(name='Id', description='The WebAssembly language.

0: C++

1: TinyGo

2: Rust

3: AssemblyScript

4: Zig', example='1'),
    imageName?: string(name='ImageName', description='The unique ID of the gateway.', example='name'),
    mode?: int32(name='Mode', description='The creation time.', example='0'),
    name?: string(name='Name', description='The list of gateway plug-in configurations.', example='name'),
    phase?: int32(name='Phase', description='Indicates whether the plug-in is enabled.', example='0'),
    primaryUser?: string(name='PrimaryUser', description='The name of the image.', example='123'),
    priority?: int32(name='Priority', description='The plug-in configuration.', example='1'),
    publishState?: int32(name='PublishState', description='Indicates whether the request was successful.', example='1'),
    readme?: string(name='Readme', description='The unique ID of the gateway.', example='read me'),
    readmeEn?: string(name='ReadmeEn', description='The ID of the gateway plug-in.', example='read me'),
    status?: string(name='Status', description='The information about the plug-in configuration used for checking.', example='1'),
    summary?: string(name='Summary', description='The ID of the plug-in configuration.', example='The ID of the gateway.'),
    type?: int32(name='Type', description='The publish status.', example='0'),
    version?: string(name='Version', description='The data object.', example='v1'),
    versionJson?: string(name='VersionJson'),
    wasmLang?: int32(name='WasmLang', description='The update time.', example='0'),
  }(name='Data', description='The mode.'),
  dynamicCode?: string(name='DynamicCode', description='The information about the plug-in configuration used for checking.', example='code'),
  dynamicMessage?: string(name='DynamicMessage', description='\\# The configuration includes the fields required for checking, such as name, age, and friends. Sample configuration: name: John age: 18 friends: - David - Anne', example='message'),
  errorCode?: string(name='ErrorCode', description='The description of the README file that is edited in English.', example='500'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The execution stage of the plug-in.

0: default stage

1: authorization stage

2: authentication stage

3: statistics stage', example='200'),
  message?: string(name='Message', description='The execution priority of the plug-in. A larger value indicates a higher priority.', example='success'),
  requestId?: string(name='RequestId', description='The summary of the plug-in.', example='03A3E2F4-6804-5663-9D5D-2EC47A1*****'),
  success?: boolean(name='Success', description='This is a plug-in.', example='true'),
}

model GetPluginConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPluginConfigResponseBody(name='body'),
}

async function getPluginConfigWithOptions(request: GetPluginConfigRequest, runtime: Util.RuntimeOptions): GetPluginConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.pluginId)) {
    query['PluginId'] = request.pluginId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPluginConfig',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getPluginConfig(request: GetPluginConfigRequest): GetPluginConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPluginConfigWithOptions(request, runtime);
}

model GetPluginsRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='system error', example='zh'),
  category?: int32(name='Category', description='cluster not found', example='1'),
  enableOnly?: boolean(name='EnableOnly', description='mse-100-001', example='true'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='clusterNotFound', example='gw-0adf3ad751284cc69fcf9669fba*****'),
  name?: string(name='Name', description='systemError', example='key-auth'),
}

model GetPluginsResponseBody = {
  code?: int32(name='Code', description='The name of the plug-in.', example='200'),
  data?: [ 
    {
      category?: int32(name='Category', description='The dynamic error message.', example='0'),
      configCheck?: string(name='ConfigCheck', description='The version of the plug-in.', example='The summary of the plug-in.'),
      id?: long(name='Id', description='The message returned.', example='1'),
      maxVersion?: string(name='MaxVersion'),
      mode?: int32(name='Mode'),
      name?: string(name='Name', description='The data entries returned.', example='key-auth'),
      newVersionPublishingFlag?: boolean(name='NewVersionPublishingFlag'),
      phase?: int32(name='Phase', description='The type of the plug-in. Valid values:

0: custom

1: permission authorization

2: security protection

3: transmission protocol

4: traffic control

5: traffic observation', example='1'),
      primaryUser?: string(name='PrimaryUser', description='The dynamic part in the error message.', example='123'),
      priority?: int32(name='Priority', description='The name of the plug-in.', example='1'),
      publishState?: int32(name='PublishState', description='The execution stage of the plug-in.

*   0: default stage
*   1: authorization stage
*   2: authentication stage
*   3: statistics stage', example='1'),
      status?: string(name='Status', description='The information about the plug-in configuration used for checking.', example='1'),
      summary?: string(name='Summary', description='The ID of the plug-in.', example='The ID of the creator.'),
      version?: string(name='Version', description='The information about the plug-in.', example='v1'),
      wasmFile?: string(name='WasmFile', description='The execution priority of the plug-in. A larger value indicates a higher priority.', example='https://mse-shared-cn-hangzhou.oss-cn-hangzhou.aliyuncs.com/cfg/import/1917515******/gw-0adf3ad751284cc69fcf9669fba*****/2022/11/02/4d390496-2c17-4b42-a479-f9068ba****/16673573***5.wasm'),
      wasmLang?: int32(name='WasmLang', description='This is a plug-in.', example='0'),
    }
  ](name='Data', description='The error code returned if the request failed.'),
  dynamicCode?: string(name='DynamicCode', description='Indicates whether the request was successful.', example='code'),
  dynamicMessage?: string(name='DynamicMessage', description='The returned code.', example='message'),
  errorCode?: string(name='ErrorCode', description='The language of the response. Valid values:

zh: Chinese en: English', example='500'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The data returned.', example='200'),
  message?: string(name='Message', description='The ID of the request.', example='success'),
  requestId?: string(name='RequestId', description='The type of the plug-in. Valid values:

*   0: custom
*   1: permission authorization
*   2: security protection
*   3: transmission protocol
*   4: traffic control
*   5: traffic observation', example='03A3E2F4-6804-5663-9D5D-2EC47A1*****'),
  success?: boolean(name='Success', description='Specifies whether to enable the plug-in.', example='true'),
}

model GetPluginsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPluginsResponseBody(name='body'),
}

async function getPluginsWithOptions(request: GetPluginsRequest, runtime: Util.RuntimeOptions): GetPluginsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.category)) {
    query['Category'] = request.category;
  }
  if (!Util.isUnset(request.enableOnly)) {
    query['EnableOnly'] = request.enableOnly;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPlugins',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getPlugins(request: GetPluginsRequest): GetPluginsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPluginsWithOptions(request, runtime);
}

model GetServiceListRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  appId?: string(name='AppId', example='xxx@xxx'),
  ip?: string(name='Ip', example='127.0.0.1'),
  region?: string(name='Region', example='cn-zhangjiakou'),
  serviceName?: string(name='ServiceName', example='com.alibaba.xxx'),
  serviceType?: string(name='ServiceType', example='dubbo'),
}

model GetServiceListResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      dubboApplicationName?: string(name='DubboApplicationName', example='dubbo-application'),
      edasAppName?: string(name='EdasAppName', example='test'),
      group?: string(name='Group', example='dubbo'),
      metadata?: map[string]any(name='Metadata', example='{}'),
      methods?: [ 
        {
          methodController?: string(name='MethodController', example='com.alibaba.SayHelloController'),
          name?: string(name='Name', example='sayHello'),
          parameterTypes?: [ string ](name='ParameterTypes'),
          paths?: [ string ](name='Paths'),
          requestMethods?: [ string ](name='RequestMethods'),
          returnType?: string(name='ReturnType', example='int'),
        }
      ](name='Methods'),
      registryType?: string(name='RegistryType', example='nacos'),
      serviceName?: string(name='ServiceName', example='com.alibaba.xxx'),
      serviceType?: string(name='ServiceType', example='dubbo'),
      springApplicationName?: string(name='SpringApplicationName', example='spring-application'),
      version?: string(name='Version', example='1.0.0'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='xxx-xxx-xxx'),
  success?: boolean(name='Success', example='true'),
}

model GetServiceListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetServiceListResponseBody(name='body'),
}

async function getServiceListWithOptions(request: GetServiceListRequest, runtime: Util.RuntimeOptions): GetServiceListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.ip)) {
    query['Ip'] = request.ip;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.serviceName)) {
    query['ServiceName'] = request.serviceName;
  }
  if (!Util.isUnset(request.serviceType)) {
    query['ServiceType'] = request.serviceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetServiceList',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getServiceList(request: GetServiceListRequest): GetServiceListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getServiceListWithOptions(request, runtime);
}

model GetServiceListenersRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='system error', example='zh'),
  clusterId?: string(name='ClusterId', description='illegal request:%s', example='mse-09k1q11****'),
  clusterName?: string(name='ClusterName', description='mse-100-007', example='DEFAULT'),
  groupName?: string(name='GroupName', description='duplicatedClusterAliasName', example='WEB_GROUP'),
  hasIpCount?: string(name='HasIpCount', description='illegalRequest', example='none'),
  instanceId?: string(name='InstanceId', description='mse-200-021', example='mse_prepaid_public_cn-tl32odtt20j'),
  namespaceId?: string(name='NamespaceId', description='duplicated cluster alias name', example='ddaf8f12-****-b1c1-86e7c72e266b'),
  pageNum?: int32(name='PageNum', description='clusterNotFound', example='1'),
  pageSize?: int32(name='PageSize', description='cluster not found', example='10'),
  regionId?: string(name='RegionId', description='mse-100-001', example='cn-hangzhou'),
  requestPars?: string(name='RequestPars', description='systemError', example='{}'),
  serviceName?: string(name='ServiceName', description='mse-200-105', example='zeekr-orderboss'),
}

model GetServiceListenersResponseBody = {
  data?: [ 
    {
      addr?: string(name='Addr', example='119.23.84.102'),
      agent?: string(name='Agent', example='Nacos-Java-Client:v2.1.1'),
      app?: string(name='App', example='app'),
      cluster?: string(name='Cluster', example='DEFAULT'),
      IP?: string(name='IP', example='172.16.1.5'),
      namespaceId?: string(name='NamespaceId', example='0ba53825-b183-414f-a6a0-288e4f1c467e'),
      port?: string(name='Port', example='8080'),
      serviceName?: string(name='ServiceName', example='zeekr-orderboss'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpCode?: string(name='HttpCode', example='202'),
  message?: string(name='Message', example='success'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='54973C90-F379-4372-9AA5-053A3F7****'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model GetServiceListenersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetServiceListenersResponseBody(name='body'),
}

async function getServiceListenersWithOptions(request: GetServiceListenersRequest, runtime: Util.RuntimeOptions): GetServiceListenersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.clusterName)) {
    query['ClusterName'] = request.clusterName;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.hasIpCount)) {
    query['HasIpCount'] = request.hasIpCount;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.namespaceId)) {
    query['NamespaceId'] = request.namespaceId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.requestPars)) {
    query['RequestPars'] = request.requestPars;
  }
  if (!Util.isUnset(request.serviceName)) {
    query['ServiceName'] = request.serviceName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetServiceListeners',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getServiceListeners(request: GetServiceListenersRequest): GetServiceListenersResponse {
  var runtime = new Util.RuntimeOptions{};
  return getServiceListenersWithOptions(request, runtime);
}

model GetTagsBySwimmingLaneGroupIdRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  groupId?: long(name='GroupId', example='154'),
  namespace?: string(name='Namespace', example='default'),
}

model GetTagsBySwimmingLaneGroupIdResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: any(name='Data', example='["gray"]'),
  dynamicMessage?: string(name='DynamicMessage', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='69AD2AA7-DB47-449B-941B-B14409DF****'),
  success?: boolean(name='Success', example='true'),
}

model GetTagsBySwimmingLaneGroupIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTagsBySwimmingLaneGroupIdResponseBody(name='body'),
}

async function getTagsBySwimmingLaneGroupIdWithOptions(request: GetTagsBySwimmingLaneGroupIdRequest, runtime: Util.RuntimeOptions): GetTagsBySwimmingLaneGroupIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTagsBySwimmingLaneGroupId',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTagsBySwimmingLaneGroupId(request: GetTagsBySwimmingLaneGroupIdRequest): GetTagsBySwimmingLaneGroupIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTagsBySwimmingLaneGroupIdWithOptions(request, runtime);
}

model GetZookeeperDataImportUrlRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The ID of the instance.', example='zh'),
  contentType?: string(name='ContentType', description='system error', example='zip'),
  instanceId?: string(name='InstanceId', description='systemError', example='mse_prepaid_public_cn-zvp2xzzkk06'),
}

model GetZookeeperDataImportUrlResponseBody = {
  code?: int32(name='Code', description='The ID of the request.', example='200'),
  data?: {
    maxSize?: string(name='MaxSize', description='The returned data.', example='250000'),
    url?: string(name='Url', description='The dynamic part in the error message. This parameter is used to replace the \\*\\*%s\\*\\* variable in the **ErrMessage** parameter.

>  If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='http://xxxxxxxxx'),
  }(name='Data', description='The dynamic part in the error message.'),
  dynamicCode?: string(name='DynamicCode', description='The message returned.', example='code'),
  dynamicMessage?: string(name='DynamicMessage', description='The request was successfully processed.', example='You are not authorized to perform this operation.'),
  errorCode?: string(name='ErrorCode', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The status code. A value of 200 is returned if the request was successful.', example='200'),
  message?: string(name='Message', description='The error code returned if the request failed.', example='The HTTP status code returned.'),
  requestId?: string(name='RequestId', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='E4E2058F-C524-5C29-9BC7-5874EA8D7CE2'),
  success?: boolean(name='Success', description='RestResult', example='true'),
}

model GetZookeeperDataImportUrlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetZookeeperDataImportUrlResponseBody(name='body'),
}

async function getZookeeperDataImportUrlWithOptions(request: GetZookeeperDataImportUrlRequest, runtime: Util.RuntimeOptions): GetZookeeperDataImportUrlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.contentType)) {
    query['ContentType'] = request.contentType;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetZookeeperDataImportUrl',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getZookeeperDataImportUrl(request: GetZookeeperDataImportUrlRequest): GetZookeeperDataImportUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getZookeeperDataImportUrlWithOptions(request, runtime);
}

model ImportNacosConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='mse-200-105', example='zh'),
  fileUrl?: string(name='FileUrl', description='> The operation is not provided in Nacos SDKs. For information about Nacos SDKs, see the [official documentation](https://nacos.io/zh-cn/docs/sdk.html).', example='http://mse-shared.oss-xxx.aliyuncs.com/cfg/import/xxxx/2021/01/11/xxxx.zip'),
  instanceId?: string(name='InstanceId', description='The ID of the request.', example='mse_prepaid_public_cn-****'),
  namespaceId?: string(name='NamespaceId', description='mse_prepaid_public_cn-****', example='f5cdc80a-****-8094-282f5650fc00'),
  policy?: string(name='Policy', description='Imports Nacos configurations as a file.', example='overwrite'),
}

model ImportNacosConfigResponseBody = {
  code?: int32(name='Code', description='mse-200-021', example='1'),
  data?: {
    failData?: [ 
      {
        dataId?: string(name='DataId', description='The ID of the request.', example='test2.yaml'),
        group?: string(name='Group', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='test'),
      }
    ](name='FailData', description='The data structure.'),
    skipCount?: int32(name='SkipCount', description='The ID of the instance.', example='10'),
    skipData?: [ 
      {
        dataId?: string(name='DataId', description='The URL that is used to download the configuration file.', example='test.yaml'),
        group?: string(name='Group', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='public'),
      }
    ](name='SkipData', description='The ID of the namespace.'),
    succCount?: int32(name='SuccCount', description='system error', example='100'),
  }(name='Data', description='systemError'),
  dynamicMessage?: string(name='DynamicMessage', description='mse-100-001', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='illegal request:%s', example='mse-100-100'),
  httpStatusCode?: int32(name='HttpStatusCode', description='duplicated cluster alias name', example='200'),
  message?: string(name='Message', description='clusterNotFound', example='cluster not found'),
  requestId?: string(name='RequestId', description='mse-100-007', example='AF21683A-29C7-4853-AC0F-B5ADEE4****'),
  success?: boolean(name='Success', description='illegalRequest', example='true'),
}

model ImportNacosConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ImportNacosConfigResponseBody(name='body'),
}

/**
  * The details of the data.
  *
  * @param request ImportNacosConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ImportNacosConfigResponse
 */
async function importNacosConfigWithOptions(request: ImportNacosConfigRequest, runtime: Util.RuntimeOptions): ImportNacosConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.fileUrl)) {
    query['FileUrl'] = request.fileUrl;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.namespaceId)) {
    query['NamespaceId'] = request.namespaceId;
  }
  if (!Util.isUnset(request.policy)) {
    query['Policy'] = request.policy;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ImportNacosConfig',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The details of the data.
  *
  * @param request ImportNacosConfigRequest
  * @return ImportNacosConfigResponse
 */
async function importNacosConfig(request: ImportNacosConfigRequest): ImportNacosConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return importNacosConfigWithOptions(request, runtime);
}

model ImportServicesRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  fcServiceName?: string(name='FcServiceName'),
  fcVersion?: string(name='FcVersion'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-77e1153db6e14c0a8b1fae20bcb89ca5'),
  serviceList?: [ 
    {
      groupName?: string(name='GroupName', example='test'),
      ips?: [ string ](name='Ips'),
      name?: string(name='Name', example='test'),
      namespace?: string(name='Namespace', example='public'),
      servicePort?: long(name='ServicePort', example='8080'),
      serviceProtocol?: string(name='ServiceProtocol', example='GRPC, HTTP'),
    }
  ](name='ServiceList', example='DNS'),
  sourceType?: string(name='SourceType', example='DNS'),
  tlsSetting?: string(name='TlsSetting', example='{
      "mode": "MUTUAL",
      "certId": "1*****-cn-hangzhou",
      "caCertContent": "123",
      "sni": "ceshi"
}'),
}

model ImportServicesShrinkRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  fcServiceName?: string(name='FcServiceName'),
  fcVersion?: string(name='FcVersion'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-77e1153db6e14c0a8b1fae20bcb89ca5'),
  serviceListShrink?: string(name='ServiceList', example='DNS'),
  sourceType?: string(name='SourceType', example='DNS'),
  tlsSetting?: string(name='TlsSetting', example='{
      "mode": "MUTUAL",
      "certId": "1*****-cn-hangzhou",
      "caCertContent": "123",
      "sni": "ceshi"
}'),
}

model ImportServicesResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='0F0FBA7D-5AC5-5DC4-A1E9-E9656BFAE1B9'),
  success?: boolean(name='Success', example='true'),
}

model ImportServicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ImportServicesResponseBody(name='body'),
}

async function importServicesWithOptions(tmpReq: ImportServicesRequest, runtime: Util.RuntimeOptions): ImportServicesResponse {
  Util.validateModel(tmpReq);
  var request = new ImportServicesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.serviceList)) {
    request.serviceListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.serviceList, 'ServiceList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.fcServiceName)) {
    query['FcServiceName'] = request.fcServiceName;
  }
  if (!Util.isUnset(request.fcVersion)) {
    query['FcVersion'] = request.fcVersion;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.serviceListShrink)) {
    query['ServiceList'] = request.serviceListShrink;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.tlsSetting)) {
    query['TlsSetting'] = request.tlsSetting;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ImportServices',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function importServices(request: ImportServicesRequest): ImportServicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return importServicesWithOptions(request, runtime);
}

model ImportZookeeperDataRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  fileName?: string(name='FileName', description='The name of the file that you want to import.', example='snapshot.5'),
  fileUrl?: string(name='FileUrl', description='The URL of the source data.

> You must set this parameter to the URL that is generated by calling the GetZookeeperDataImportUrl operation.', example='http://xxxxxxxxxx'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse_prepaid_public_cn-u0t2xzvxa06'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}'),
}

model ImportZookeeperDataResponseBody = {
  data?: any(name='Data', description='The details of the data.', example='null'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code returned.', example='202'),
  message?: string(name='Message', description='The message returned.', example='The request was successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='52BA6DA6-A702-4362-A32F-DFF79655****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model ImportZookeeperDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ImportZookeeperDataResponseBody(name='body'),
}

/**
  * **Danger** This operation clears existing data. Exercise caution when you call this API operation.
  *
  * @param request ImportZookeeperDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ImportZookeeperDataResponse
 */
async function importZookeeperDataWithOptions(request: ImportZookeeperDataRequest, runtime: Util.RuntimeOptions): ImportZookeeperDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.fileName)) {
    query['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.fileUrl)) {
    query['FileUrl'] = request.fileUrl;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.requestPars)) {
    query['RequestPars'] = request.requestPars;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ImportZookeeperData',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * **Danger** This operation clears existing data. Exercise caution when you call this API operation.
  *
  * @param request ImportZookeeperDataRequest
  * @return ImportZookeeperDataResponse
 */
async function importZookeeperData(request: ImportZookeeperDataRequest): ImportZookeeperDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return importZookeeperDataWithOptions(request, runtime);
}

model ListAnsInstancesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='mse-100-001', example='zh'),
  clusterId?: string(name='ClusterId', description='mse-100-007', example='mse-09k1q11****'),
  clusterName?: string(name='ClusterName', description='clusterNotFound', example='mse-7413****'),
  groupName?: string(name='GroupName', description='illegal request:%s', example='test'),
  instanceId?: string(name='InstanceId', description='cluster not found', example='mse_prepaid_public_cn-tl327w****'),
  namespaceId?: string(name='NamespaceId', description='mse-200-021', example='12233****'),
  pageNum?: int32(name='PageNum', description='duplicatedClusterAliasName', example='1'),
  pageSize?: int32(name='PageSize', description='duplicated cluster alias name', example='10'),
  requestPars?: string(name='RequestPars', description='mse-200-105', example='{}'),
  serviceName?: string(name='ServiceName', description='illegalRequest', example='name'),
}

model ListAnsInstancesResponseBody = {
  data?: [ 
    {
      app?: string(name='App', example='app'),
      clusterName?: string(name='ClusterName', example='DEFAULT'),
      datumKey?: string(name='DatumKey', example='30.5.XX.XX:unknown:DEFAULT'),
      defaultKey?: string(name='DefaultKey', example='30.5.XX.XX:unknown'),
      enabled?: boolean(name='Enabled', example='true'),
      ephemeral?: boolean(name='Ephemeral', example='true'),
      failCount?: int32(name='FailCount', example='0'),
      healthy?: boolean(name='Healthy', example='true'),
      instanceHeartBeatInterval?: int32(name='InstanceHeartBeatInterval', example='5000'),
      instanceHeartBeatTimeOut?: int32(name='InstanceHeartBeatTimeOut', example='15000'),
      instanceId?: string(name='InstanceId', example='30.5.XX.XX#0#DEFAULT#DEFAULT_GROUP@@consumers:com.alibaba.edas.IHelloService'),
      ip?: string(name='Ip', example='30.5.XX.XX'),
      ipDeleteTimeout?: int32(name='IpDeleteTimeout', example='30000'),
      lastBeat?: long(name='LastBeat', example='20201010'),
      marked?: boolean(name='Marked', example='true'),
      metadata?: map[string]any(name='Metadata', example='[int]'),
      okCount?: int32(name='OkCount', example='0'),
      port?: int32(name='Port', example='8080'),
      serviceName?: string(name='ServiceName', example='DEFAULT_GROUP@@consumers:com.alibaba.edas.IHelloService::'),
      weight?: int32(name='Weight', example='1'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='systemError', example='202'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='52BA6DA6-A702-4362-A32F-DFF79655****'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', description='system error', example='7'),
}

model ListAnsInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAnsInstancesResponseBody(name='body'),
}

/**
  * The heartbeat interval of the instance. Unit: seconds.
  *
  * @param request ListAnsInstancesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListAnsInstancesResponse
 */
async function listAnsInstancesWithOptions(request: ListAnsInstancesRequest, runtime: Util.RuntimeOptions): ListAnsInstancesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAnsInstances',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The heartbeat interval of the instance. Unit: seconds.
  *
  * @param request ListAnsInstancesRequest
  * @return ListAnsInstancesResponse
 */
async function listAnsInstances(request: ListAnsInstancesRequest): ListAnsInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAnsInstancesWithOptions(request, runtime);
}

model ListAnsServiceClustersRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='mse-100-001', example='zh'),
  clusterId?: string(name='ClusterId', description='mse-100-007', example='mse-09k1q110q01'),
  clusterName?: string(name='ClusterName', description='clusterNotFound', example='mse-7413****'),
  groupName?: string(name='GroupName', description='illegal request:%s', example='DEFAULT_GROUP'),
  instanceId?: string(name='InstanceId', description='cluster not found', example='mse_prepaid_public_cn-tl32a6****'),
  namespaceId?: string(name='NamespaceId', description='mse-200-021', example='12233****'),
  pageNum?: int32(name='PageNum', description='duplicatedClusterAliasName', example='1'),
  pageSize?: int32(name='PageSize', description='duplicated cluster alias name', example='10'),
  requestPars?: string(name='RequestPars', description='mse-200-105', example='{}'),
  serviceName?: string(name='ServiceName', description='illegalRequest', example='nacos.test.3'),
}

model ListAnsServiceClustersResponseBody = {
  data?: {
    clusters?: [ 
      {
        defaultCheckPort?: int32(name='DefaultCheckPort', example='80'),
        defaultPort?: int32(name='DefaultPort', example='80'),
        healthCheckerType?: string(name='HealthCheckerType'),
        metadata?: map[string]any(name='Metadata', example='111'),
        name?: string(name='Name', example='test'),
        serviceName?: string(name='ServiceName', example='DEFAULT_GROUP@@nacos.test.3'),
        useIPPort4Check?: boolean(name='UseIPPort4Check', example='true'),
      }
    ](name='Clusters'),
    ephemeral?: boolean(name='Ephemeral', example='true'),
    groupName?: string(name='GroupName', example='DEFAULT_GROUP'),
    metadata?: map[string]any(name='Metadata', example='111'),
    name?: string(name='Name', example='nacos.test.3'),
    protectThreshold?: float(name='ProtectThreshold', example='0'),
    selectorType?: string(name='SelectorType', example='none'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  message?: string(name='Message', description='system error'),
  requestId?: string(name='RequestId', example='52BA6DA6-A702-4362-A32F-DFF79655****'),
  success?: boolean(name='Success', example='true'),
}

model ListAnsServiceClustersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAnsServiceClustersResponseBody(name='body'),
}

/**
  * The type of health check.
  *
  * @param request ListAnsServiceClustersRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListAnsServiceClustersResponse
 */
async function listAnsServiceClustersWithOptions(request: ListAnsServiceClustersRequest, runtime: Util.RuntimeOptions): ListAnsServiceClustersResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAnsServiceClusters',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The type of health check.
  *
  * @param request ListAnsServiceClustersRequest
  * @return ListAnsServiceClustersResponse
 */
async function listAnsServiceClusters(request: ListAnsServiceClustersRequest): ListAnsServiceClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAnsServiceClustersWithOptions(request, runtime);
}

model ListAnsServicesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The total number of clusters.', example='zh'),
  clusterId?: string(name='ClusterId', description='The details of the data.', example='mse-09k1q11****'),
  groupName?: string(name='GroupName', description='The total number of instances with healthy heartbeats.', example='name'),
  hasIpCount?: string(name='HasIpCount', description='The name of the contact group.', example='true'),
  instanceId?: string(name='InstanceId', description='The total number of instances that are used for the current service.', example='mse-cn-st21v5****'),
  namespaceId?: string(name='NamespaceId', description='The name of the service.', example='12233****'),
  pageNum?: int32(name='PageNum', description='The number of entries returned per page.', example='1'),
  pageSize?: int32(name='PageSize', description='The page number of the returned page.', example='10'),
  requestPars?: string(name='RequestPars', description='The request is successfully processed.', example='{}'),
  serviceName?: string(name='ServiceName', description='The data structure.', example='name'),
}

model ListAnsServicesResponseBody = {
  data?: [ 
    {
      clusterCount?: int32(name='ClusterCount', example='1'),
      groupName?: string(name='GroupName', example='name'),
      healthyInstanceCount?: int32(name='HealthyInstanceCount', example='1'),
      ipCount?: int32(name='IpCount', example='1'),
      name?: string(name='Name', example='name'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='202'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', description='Queries Nacos services.', example='52BA6DA6-A702-4362-A32F-DFF79655****'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', description='> The operation is not provided in Nacos SDKs. For information about Nacos SDKs, see the [official documentation](https://nacos.io/zh-cn/docs/sdk.html).', example='7'),
}

model ListAnsServicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAnsServicesResponseBody(name='body'),
}

/**
  * The number of entries to return on each page.
  *
  * @param request ListAnsServicesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListAnsServicesResponse
 */
async function listAnsServicesWithOptions(request: ListAnsServicesRequest, runtime: Util.RuntimeOptions): ListAnsServicesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAnsServices',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The number of entries to return on each page.
  *
  * @param request ListAnsServicesRequest
  * @return ListAnsServicesResponse
 */
async function listAnsServices(request: ListAnsServicesRequest): ListAnsServicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAnsServicesWithOptions(request, runtime);
}

model ListAppBySwimmingLaneGroupTagRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  groupId?: long(name='GroupId', example='119'),
  namespace?: string(name='Namespace', example='default'),
  tag?: string(name='Tag', example='gray'),
}

model ListAppBySwimmingLaneGroupTagResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: any(name='Data', example='[{appName:"test",appId:"hkhon1po62@958bba95910341f
"}]'),
  dynamicMessage?: string(name='DynamicMessage', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='7466566F-F30F-4A29-965D-3E0AF21D****'),
  success?: boolean(name='Success', example='true'),
}

model ListAppBySwimmingLaneGroupTagResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAppBySwimmingLaneGroupTagResponseBody(name='body'),
}

async function listAppBySwimmingLaneGroupTagWithOptions(request: ListAppBySwimmingLaneGroupTagRequest, runtime: Util.RuntimeOptions): ListAppBySwimmingLaneGroupTagResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAppBySwimmingLaneGroupTag',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAppBySwimmingLaneGroupTag(request: ListAppBySwimmingLaneGroupTagRequest): ListAppBySwimmingLaneGroupTagResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAppBySwimmingLaneGroupTagWithOptions(request, runtime);
}

model ListApplicationsWithTagRulesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  appId?: string(name='AppId', description='The ID of the application.', example='xjpc0h9h4d@xxx', deprecated='true'),
  appName?: string(name='AppName', description='The name of the application.', example='test'),
  namespace?: string(name='Namespace', description='应用所属的MSE命名空间。', example='default'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10'),
  region?: string(name='Region', description='The ID of the region.', example='cn-hangzhou'),
  source?: string(name='Source', description='The source of the routing rule. Default value: edasmsc.', example='edasmsc'),
}

model ListApplicationsWithTagRulesResponseBody = {
  code?: int32(name='Code', description='The HTTP status code that is returned.', example='200'),
  data?: {
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    result?: [ 
      {
        appId?: string(name='AppId', description='The application ID.', example='daqijp6c31@xxx'),
        appName?: string(name='AppName', description='The name of the application.', example='service-lottery-core'),
        namespace?: string(name='Namespace', description='应用所属的MSE命名空间。', example='default'),
        routeRules?: [ 
          {
            carryData?: boolean(name='CarryData', description='Indicates whether the field is a primary key.', example='false'),
            enable?: boolean(name='Enable', description='Indicates whether the alert rule is enabled. Valid value:

*   `true`: enabled.
*   `false`: disabled.', example='true'),
            gmtModified?: string(name='GmtModified', description='The modification time.', example='2022-01-06T06:11:06.000+0000'),
            id?: long(name='Id', description='The ID of the rule.', example='653'),
            instanceNum?: int32(name='InstanceNum', description='The number of instances.', example='1'),
            name?: string(name='Name', description='The name of the rule.', example='dubbo'),
            rate?: int32(name='Rate', description='The rate.', example='10'),
            remove?: boolean(name='Remove', description='Indicates whether the routing rule is deleted.', example='true'),
            rules?: string(name='Rules', description='The details of the routing rule.', example='{
  	"dubbo": [{
    "serviceName": "com.taobao.hsf.common.DemoService",
    "group": "",
    "version": "",
    "methodName": "sayHello",
    "condition": "AND",
    "argumentItems": [{
    	"index": 0,
    	"expr": "",
    	"operator": "rawvalue",
    	"value": "jim",
    	"cond": "=="
    }]
  	}]
  }'),
            status?: int32(name='Status', description='The status.', example='1'),
            tag?: string(name='Tag', description='The tag.', example='gray'),
          }
        ](name='RouteRules', description='The information about the rules.'),
        routeStatus?: long(name='RouteStatus', description='The status of the route. Valid values: -0: disabled. -1: enabled.', example='1'),
      }
    ](name='Result', description='The data structure.'),
    totalSize?: int32(name='TotalSize', description='The total number of entries returned.', example='1'),
  }(name='Data', description='The details of the data.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The returned message.

*   If the request is successful, a success message is returned.
*   If the request fails, an error message is returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7466566F-F30F-4A29-965D-3E0AF21D****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model ListApplicationsWithTagRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListApplicationsWithTagRulesResponseBody(name='body'),
}

async function listApplicationsWithTagRulesWithOptions(request: ListApplicationsWithTagRulesRequest, runtime: Util.RuntimeOptions): ListApplicationsWithTagRulesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListApplicationsWithTagRules',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listApplicationsWithTagRules(request: ListApplicationsWithTagRulesRequest): ListApplicationsWithTagRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listApplicationsWithTagRulesWithOptions(request, runtime);
}

model ListClusterConnectionTypesRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
}

model ListClusterConnectionTypesResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      showName?: string(name='ShowName', example='slb'),
    }
  ](name='Data'),
  dynamicMessage?: string(name='DynamicMessage', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='8625467C-27DD-5711-878E-6857E3074937'),
  success?: boolean(name='Success', example='True'),
}

model ListClusterConnectionTypesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListClusterConnectionTypesResponseBody(name='body'),
}

async function listClusterConnectionTypesWithOptions(request: ListClusterConnectionTypesRequest, runtime: Util.RuntimeOptions): ListClusterConnectionTypesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListClusterConnectionTypes',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listClusterConnectionTypes(request: ListClusterConnectionTypesRequest): ListClusterConnectionTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listClusterConnectionTypesWithOptions(request, runtime);
}

model ListClusterHealthCheckTaskRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='mse-200-021', example='zh'),
  instanceId?: string(name='InstanceId', description='duplicatedClusterAliasName', example='mse_prepaid_public_cn-7pp2o4wfx01'),
  pageNum?: int32(name='PageNum', description='duplicated cluster alias name', example='0'),
  pageSize?: int32(name='PageSize', description='mse-100-007', example='10'),
  regionId?: string(name='RegionId', description='illegalRequest', example='cn-hangzhou'),
  requestPars?: string(name='RequestPars', description='illegal request:%s', example='{}'),
}

model ListClusterHealthCheckTaskResponseBody = {
  code?: int32(name='Code', description='systemError', example='200'),
  data?: {
    pageNumber?: int32(name='PageNumber', example='0'),
    pageSize?: int32(name='PageSize', example='10'),
    result?: [ 
      {
        appVersion?: string(name='AppVersion', example='1.2.1'),
        chargeType?: string(name='ChargeType', example='PREPAY'),
        clusterType?: string(name='ClusterType', example='Nacos-Ans'),
        createTime?: string(name='CreateTime', example='2022-06-20T06:51:46Z'),
        id?: int32(name='Id', example='1'),
        imageVersion?: string(name='ImageVersion', example='null'),
        instanceId?: string(name='InstanceId', example='mse_ingresspost-cn-0jbvrcex****'),
        primaryUser?: string(name='PrimaryUser', example='123456'),
        replica?: string(name='Replica', example='3'),
        riskList?: [ 
          {
            description?: string(name='Description'),
            id?: int32(name='Id', example='3426'),
            module?: string(name='Module', example='null'),
            mute?: boolean(name='Mute', example='false'),
            noticeFeature?: boolean(name='NoticeFeature', example='null'),
            primaryUser?: string(name='PrimaryUser', example='123456'),
            riskCode?: string(name='RiskCode', example='22020010001'),
            riskLevel?: string(name='RiskLevel', example='MID'),
            riskName?: string(name='RiskName'),
            riskType?: string(name='RiskType'),
            situation?: string(name='Situation'),
            suggestion?: string(name='Suggestion'),
            taskId?: long(name='TaskId', example='1'),
            type?: int32(name='Type', example='null'),
            values?: string(name='Values', example='null'),
          }
        ](name='RiskList'),
        score?: int32(name='Score', example='60'),
        spec?: string(name='Spec', example='MSE_SC_2_4_200_c'),
        status?: string(name='Status', example='FINISH'),
        totalItem?: int32(name='TotalItem', example='10'),
        totalRisk?: int32(name='TotalRisk', example='3'),
        type?: string(name='Type', example='null'),
        updateTime?: string(name='UpdateTime', example='2022-11-12 15:07:55'),
        versionCode?: string(name='VersionCode', example='NACOS_ANS_1_2_1_3'),
      }
    ](name='Result'),
    totalSize?: int32(name='TotalSize', example='9'),
  }(name='Data'),
  dynamicCode?: string(name='DynamicCode', example='code'),
  dynamicMessage?: string(name='DynamicMessage', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='system error', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='cluster not found', example='4E9FDCFE-0738-493B-B801-82BDFBCB****'),
  success?: boolean(name='Success', description='mse-100-001', example='true'),
}

model ListClusterHealthCheckTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListClusterHealthCheckTaskResponseBody(name='body'),
}

async function listClusterHealthCheckTaskWithOptions(request: ListClusterHealthCheckTaskRequest, runtime: Util.RuntimeOptions): ListClusterHealthCheckTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.requestPars)) {
    query['RequestPars'] = request.requestPars;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListClusterHealthCheckTask',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listClusterHealthCheckTask(request: ListClusterHealthCheckTaskRequest): ListClusterHealthCheckTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return listClusterHealthCheckTaskWithOptions(request, runtime);
}

model ListClusterTypesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='mse-100-007', example='zh'),
  connectType?: string(name='ConnectType', description='duplicatedClusterAliasName', example='slb'),
  mseVersion?: string(name='MseVersion', description='duplicated cluster alias name', example='mse_pro'),
  regionId?: string(name='RegionId', description='mse-200-105', example='cn-hangzhou'),
}

model ListClusterTypesResponseBody = {
  code?: int32(name='Code', description='mse-100-001', example='200'),
  data?: [ 
    {
      showName?: string(name='ShowName', example='Zookeeper'),
    }
  ](name='Data'),
  dynamicMessage?: string(name='DynamicMessage', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='cluster not found', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='illegal request:%s', example='200'),
  message?: string(name='Message', description='systemError', example='system error'),
  requestId?: string(name='RequestId', description='mse-200-021', example='821B5B05-8919-5FBB-BA75-417BFC093EB8'),
  success?: boolean(name='Success', description='clusterNotFound', example='True'),
}

model ListClusterTypesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListClusterTypesResponseBody(name='body'),
}

async function listClusterTypesWithOptions(request: ListClusterTypesRequest, runtime: Util.RuntimeOptions): ListClusterTypesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.connectType)) {
    query['ConnectType'] = request.connectType;
  }
  if (!Util.isUnset(request.mseVersion)) {
    query['MseVersion'] = request.mseVersion;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListClusterTypes',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listClusterTypes(request: ListClusterTypesRequest): ListClusterTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listClusterTypesWithOptions(request, runtime);
}

model ListClusterVersionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='duplicated cluster alias name', example='zh'),
  clusterType?: string(name='ClusterType', description='mse-200-105', example='Nacos-Ans'),
  mseVersion?: string(name='MseVersion', description='duplicatedClusterAliasName', example='mse_pro'),
}

model ListClusterVersionsResponseBody = {
  code?: int32(name='Code', description='cluster not found', example='200'),
  data?: [ 
    {
      clusterType?: string(name='ClusterType', example='Nacos-Ans'),
      code?: string(name='Code', example='NACOS_2_0_0'),
      showName?: string(name='ShowName', example='2.1.0'),
    }
  ](name='Data'),
  dynamicMessage?: string(name='DynamicMessage', description='system error', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='clusterNotFound', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='illegalRequest', example='200'),
  message?: string(name='Message', description='mse-100-001', example='systemError'),
  requestId?: string(name='RequestId', description='illegal request:%s', example='7717BE5B-C958-5F87-BF49-464AA276EDD1'),
  success?: boolean(name='Success', description='mse-200-021', example='true'),
}

model ListClusterVersionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListClusterVersionsResponseBody(name='body'),
}

async function listClusterVersionsWithOptions(request: ListClusterVersionsRequest, runtime: Util.RuntimeOptions): ListClusterVersionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterType)) {
    query['ClusterType'] = request.clusterType;
  }
  if (!Util.isUnset(request.mseVersion)) {
    query['MseVersion'] = request.mseVersion;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListClusterVersions',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listClusterVersions(request: ListClusterVersionsRequest): ListClusterVersionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listClusterVersionsWithOptions(request, runtime);
}

model ListClustersRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='system error', example='zh'),
  clusterAliasName?: string(name='ClusterAliasName', description='illegalRequest', example='cluster'),
  pageNum?: int32(name='PageNum', description='duplicated cluster alias name', example='1'),
  pageSize?: int32(name='PageSize', description='mse-100-007', example='10'),
  regionId?: string(name='RegionId', description='illegal request:%s', example='cn-hangzhou'),
  requestPars?: string(name='RequestPars', description='duplicatedClusterAliasName', example='{}'),
  resourceGroupId?: string(name='ResourceGroupId', description='mse-200-021', example='rg-acfmxbzafebvvfa'),
  tag?: [ 
    {
      key?: string(name='Key', description='mse-100-001', example='env'),
      value?: string(name='Value', description='systemError', example='prd'),
    }
  ](name='Tag', description='clusterNotFound'),
}

model ListClustersResponseBody = {
  data?: [ 
    {
      appVersion?: string(name='AppVersion', example='1.9.3'),
      canUpdate?: boolean(name='CanUpdate', example='true'),
      chargeType?: string(name='ChargeType'),
      clusterAliasName?: string(name='ClusterAliasName', example='mse-7413****'),
      clusterName?: string(name='ClusterName', example='mse-cn-st21ri2****'),
      clusterType?: string(name='ClusterType', example='Eureka'),
      createTime?: string(name='CreateTime', example='2020-07-31 11:36:08'),
      endDate?: string(name='EndDate', example='2021-08-01 00:00:00'),
      initStatus?: string(name='InitStatus', example='RESTART_SUCCESS'),
      instanceCount?: long(name='InstanceCount', example='2'),
      instanceId?: string(name='InstanceId', example='mse-cn-st21ri2****'),
      internetAddress?: string(name='InternetAddress', example='47.98.XX.XX'),
      internetDomain?: string(name='InternetDomain', example='mse-7413****-p.eureka.mse.aliyuncs.com'),
      intranetAddress?: string(name='IntranetAddress', example='192.168.XX.XX'),
      intranetDomain?: string(name='IntranetDomain', example='mse-7413****-eureka.mse.aliyuncs.com'),
      mseVersion?: string(name='MseVersion', example='mse_pro'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmv7jiavm4uxa'),
      tags?: map[string]any(name='Tags'),
      versionCode?: string(name='VersionCode', example='EUREKA_1_9_3'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpCode?: string(name='HttpCode', example='202'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='69AD2AA7-DB47-449B-941B-B14409DF****'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', example='7'),
}

model ListClustersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListClustersResponseBody(name='body'),
}

async function listClustersWithOptions(request: ListClustersRequest, runtime: Util.RuntimeOptions): ListClustersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterAliasName)) {
    query['ClusterAliasName'] = request.clusterAliasName;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.requestPars)) {
    query['RequestPars'] = request.requestPars;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListClusters',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listClusters(request: ListClustersRequest): ListClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listClustersWithOptions(request, runtime);
}

model ListConfigTrackRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='system error', example='zh'),
  dataId?: string(name='DataId', description='duplicated cluster alias name', example='ballot'),
  endTs?: long(name='EndTs', description='mse-200-021', example='1657178373'),
  group?: string(name='Group', description='mse-100-007', example='DEFAULT_GROUP'),
  instanceId?: string(name='InstanceId', description='duplicatedClusterAliasName', example='mse_prepaid_public_cn-i7m2ne****'),
  ip?: string(name='Ip', description='systemError', example='192.168.22.2'),
  namespaceId?: string(name='NamespaceId', description='illegalRequest', example='f3a510e2-df52-4fad-9815-42d8bc40****'),
  pageNum?: long(name='PageNum', description='cluster not found', example='1'),
  pageSize?: long(name='PageSize', description='clusterNotFound', example='10'),
  requestPars?: string(name='RequestPars', description='mse-200-105', example='{}'),
  reverse?: boolean(name='Reverse', description='mse-100-001', example='true'),
  startTs?: long(name='StartTs', description='illegal request:%s', example='1671010148'),
}

model ListConfigTrackResponseBody = {
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpCode?: string(name='HttpCode', example='200'),
  message?: string(name='Message'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='0CE3ABD2-1E04-561F-A9B4-0423D50****'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='3'),
  traces?: [ 
    {
      client?: boolean(name='Client', example='false'),
      dataId?: string(name='DataId', example='eir-server.properties'),
      delay?: string(name='Delay', example='0'),
      event?: string(name='Event', example='pull'),
      group?: string(name='Group', example='DEFAULT_GROUP'),
      logDate?: string(name='LogDate', example='2022-11-28 15:09:15'),
      md5?: string(name='Md5', example='d21c9091c60daa0ff7ee2f420141e5a0'),
      push?: boolean(name='Push', example='false'),
      requestIp?: string(name='RequestIp', example='192.168.1.2'),
      responseIp?: string(name='ResponseIp', example='mse-1973b9a0-1670834*****-reg-center-0-2'),
      result?: string(name='Result', example='ok'),
      ts?: string(name='Ts', example='1659666529'),
      type?: string(name='Type', example='beta'),
    }
  ](name='Traces'),
}

model ListConfigTrackResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListConfigTrackResponseBody(name='body'),
}

async function listConfigTrackWithOptions(request: ListConfigTrackRequest, runtime: Util.RuntimeOptions): ListConfigTrackResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.dataId)) {
    query['DataId'] = request.dataId;
  }
  if (!Util.isUnset(request.endTs)) {
    query['EndTs'] = request.endTs;
  }
  if (!Util.isUnset(request.group)) {
    query['Group'] = request.group;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ip)) {
    query['Ip'] = request.ip;
  }
  if (!Util.isUnset(request.namespaceId)) {
    query['NamespaceId'] = request.namespaceId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.requestPars)) {
    query['RequestPars'] = request.requestPars;
  }
  if (!Util.isUnset(request.reverse)) {
    query['Reverse'] = request.reverse;
  }
  if (!Util.isUnset(request.startTs)) {
    query['StartTs'] = request.startTs;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListConfigTrack',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listConfigTrack(request: ListConfigTrackRequest): ListConfigTrackResponse {
  var runtime = new Util.RuntimeOptions{};
  return listConfigTrackWithOptions(request, runtime);
}

model ListEngineNamespacesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-st21ri2****'),
}

model ListEngineNamespacesResponseBody = {
  data?: [ 
    {
      configCount?: int32(name='ConfigCount', description='The quota value.', example='1'),
      namespace?: string(name='Namespace', description='The namespace.', example='DEFAULT'),
      namespaceDesc?: string(name='NamespaceDesc', description='The description of the namespace.', example='mytest'),
      namespaceShowName?: string(name='NamespaceShowName', description='The name of the namespace.', example='public'),
      quota?: int32(name='Quota', description='The quota.', example='200'),
      serviceCount?: string(name='ServiceCount', description='The number of active services.', example='3'),
      sourceType?: string(name='SourceType', description='The source from which the namespace was created.', example='mse'),
      type?: int32(name='Type', description='The type of the namespace. Valid values:

*   `0`: global configuration
*   `1`: default namespace
*   `2`: custom namespace', example='0'),
    }
  ](name='Data', description='The details of the data.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code.', example='202'),
  message?: string(name='Message', description='The message returned.', example='The request was successfully processed.'),
  pageNumber?: int32(name='PageNumber', description='The number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='062D13C5-DEA3-4921-8918-C49A0F1B****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
  totalCount?: int32(name='TotalCount', description='The total number of returned instances.', example='7'),
}

model ListEngineNamespacesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListEngineNamespacesResponseBody(name='body'),
}

async function listEngineNamespacesWithOptions(request: ListEngineNamespacesRequest, runtime: Util.RuntimeOptions): ListEngineNamespacesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListEngineNamespaces',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listEngineNamespaces(request: ListEngineNamespacesRequest): ListEngineNamespacesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEngineNamespacesWithOptions(request, runtime);
}

model ListEurekaInstancesRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  clusterId?: string(name='ClusterId', example='mse-09k1q11****'),
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestPars?: string(name='RequestPars', example='{}'),
  serviceName?: string(name='ServiceName', example='name'),
}

model ListEurekaInstancesResponseBody = {
  data?: [ 
    {
      app?: string(name='App', example='CONTACTINFO'),
      durationInSecs?: int32(name='DurationInSecs', example='90'),
      homePageUrl?: string(name='HomePageUrl', example='http://30.5.XX.XX:8091/'),
      hostName?: string(name='HostName', example='30.5.XX.XX'),
      instanceId?: string(name='InstanceId', example='L-PC1A6A28-****.hz.ali.com:contactinfo:8091'),
      ipAddr?: string(name='IpAddr', example='30.5.XX.XX'),
      lastDirtyTimestamp?: long(name='LastDirtyTimestamp', example='20201009115543'),
      lastUpdatedTimestamp?: long(name='LastUpdatedTimestamp', example='20201010071203'),
      metadata?: map[string]any(name='Metadata', example='[string]'),
      port?: int32(name='Port', example='8091'),
      renewalIntervalInSecs?: int32(name='RenewalIntervalInSecs', example='10'),
      securePort?: int32(name='SecurePort', example='443'),
      status?: string(name='Status', example='1/1'),
      vipAddress?: string(name='VipAddress', example='contactinfo'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpCode?: string(name='HttpCode', example='202'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', example='7'),
}

model ListEurekaInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListEurekaInstancesResponseBody(name='body'),
}

async function listEurekaInstancesWithOptions(request: ListEurekaInstancesRequest, runtime: Util.RuntimeOptions): ListEurekaInstancesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListEurekaInstances',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listEurekaInstances(request: ListEurekaInstancesRequest): ListEurekaInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEurekaInstancesWithOptions(request, runtime);
}

model ListEurekaServicesRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  clusterId?: string(name='ClusterId', example='mse-09k1q11****'),
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestPars?: string(name='RequestPars', example='{}'),
}

model ListEurekaServicesResponseBody = {
  data?: [ 
    {
      instancesId?: [ string ](name='InstancesId'),
      name?: string(name='Name', example='CONTACTINFO'),
      upStatus?: string(name='UpStatus', example='1/1'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpCode?: string(name='HttpCode', example='202'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', example='7'),
}

model ListEurekaServicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListEurekaServicesResponseBody(name='body'),
}

async function listEurekaServicesWithOptions(request: ListEurekaServicesRequest, runtime: Util.RuntimeOptions): ListEurekaServicesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListEurekaServices',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listEurekaServices(request: ListEurekaServicesRequest): ListEurekaServicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEurekaServicesWithOptions(request, runtime);
}

model ListExportZookeeperDataRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='mse-100-007', example='zh'),
  instanceId?: string(name='InstanceId', description='mse-200-105', example='mse-cn-7pp2d1****'),
  pageNumber?: int32(name='PageNumber', description='duplicatedClusterAliasName', example='0'),
  pageSize?: int32(name='PageSize', description='duplicated cluster alias name', example='10'),
}

model ListExportZookeeperDataResponseBody = {
  data?: [ 
    {
      contentMap?: string(name='ContentMap', example='{}'),
      createTime?: long(name='CreateTime', example='1631001140913'),
      exportType?: string(name='ExportType', example='snapshot'),
      extend?: string(name='Extend', example='{}'),
      id?: int32(name='Id', example='1'),
      instanceId?: string(name='InstanceId', example='mse-cn-st21ri2****'),
      kubeoneTaskIds?: string(name='KubeoneTaskIds', example='10'),
      status?: string(name='Status', example='FINISH'),
      updateTime?: long(name='UpdateTime', example='1632979237663'),
    }
  ](name='Data'),
  dynamicMessage?: string(name='DynamicMessage', description='cluster not found', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='systemError', example='mse-100-000'),
  httpStatusCode?: string(name='HttpStatusCode', description='system error', example='200'),
  message?: string(name='Message', description='mse-200-021', example='clusterNotFound'),
  requestId?: string(name='RequestId', description='mse-100-001', example='8BD1E58D-0755-42AC-A599-E6B55112****'),
  success?: boolean(name='Success', description='illegal request:%s', example='true'),
}

model ListExportZookeeperDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListExportZookeeperDataResponseBody(name='body'),
}

async function listExportZookeeperDataWithOptions(request: ListExportZookeeperDataRequest, runtime: Util.RuntimeOptions): ListExportZookeeperDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListExportZookeeperData',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listExportZookeeperData(request: ListExportZookeeperDataRequest): ListExportZookeeperDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return listExportZookeeperDataWithOptions(request, runtime);
}

model ListGatewayRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  descSort?: boolean(name='DescSort', example='false'),
  filterParams?: {
    gatewayType?: string(name='GatewayType', example='Ingress'),
    gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-5017305290e14centbrveca****'),
    instanceId?: string(name='InstanceId', example='mse_ingresspre-cn-****'),
    mseTag?: string(name='MseTag', example='[{"key":"tagkey","value":"tagvalue"}]'),
    name?: string(name='Name', example='rutain-test'),
    resourceGroupId?: string(name='ResourceGroupId', example='rg-7y2uye*****'),
    vpc?: string(name='Vpc', example='vpc-bp13hhyjntbab7w****'),
  }(name='FilterParams'),
  orderItem?: string(name='OrderItem', example='{}'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
}

model ListGatewayShrinkRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  descSort?: boolean(name='DescSort', example='false'),
  filterParamsShrink?: string(name='FilterParams'),
  orderItem?: string(name='OrderItem', example='{}'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
}

model ListGatewayResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    result?: [ 
      {
        ahasOn?: boolean(name='AhasOn', example='false'),
        appVersion?: string(name='AppVersion', example='1.0.1.0'),
        armsOn?: boolean(name='ArmsOn', example='false'),
        chargeType?: string(name='ChargeType', example='POSTPAY'),
        currentVersion?: string(name='CurrentVersion', example='0.1.0-mse-gw'),
        endDate?: string(name='EndDate', example='4792060800000'),
        gatewayType?: string(name='GatewayType', example='Ingress'),
        gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-5017305290e14cebb8ce5cb6a4****'),
        gatewayVersion?: string(name='GatewayVersion', example='1.2.9'),
        gmtCreate?: string(name='GmtCreate', example='2021-09-13 19:24:23'),
        gmtModified?: string(name='GmtModified', example='2021-09-13 19:24:23'),
        id?: long(name='Id', example='153'),
        initConfig?: {
          enableWaf?: boolean(name='EnableWaf', example='true'),
          supportWaf?: boolean(name='SupportWaf', example='true'),
        }(name='InitConfig'),
        instanceId?: string(name='InstanceId', example='mse_ingresspost-cn-0jbvrcex****'),
        internetSlb?: [ 
          {
            gatewaySlbMode?: string(name='GatewaySlbMode', example='UserHost'),
            gatewaySlbStatus?: string(name='GatewaySlbStatus', example='Ready'),
            internetNetworkFlow?: string(name='InternetNetworkFlow', example='20'),
            slbId?: string(name='SlbId', example='lb-bp1ut8asdfgucjk****'),
            slbIp?: string(name='SlbIp', example='153.12.XX.XX'),
            slbPort?: string(name='SlbPort', example='slb.s2.small'),
            slbSpec?: string(name='SlbSpec', example='slb.s2.small'),
            statusDesc?: string(name='StatusDesc'),
            type?: string(name='Type', example='PUB_NET'),
          }
        ](name='InternetSlb'),
        latestVersion?: string(name='LatestVersion', example='0.1.0-mse-gw'),
        mseTag?: string(name='MseTag', example='{"tagKey":"tagValue"}'),
        mustUpgrade?: boolean(name='MustUpgrade', example='false'),
        name?: string(name='Name', example='tesa-test'),
        primaryUser?: string(name='PrimaryUser', example='18278117654342'),
        region?: string(name='Region', example='cn-hangzhou'),
        replica?: int32(name='Replica', example='2'),
        resourceGroupId?: string(name='ResourceGroupId', example='rg-97hg87vi****'),
        rollBack?: boolean(name='RollBack', example='false'),
        slb?: [ 
          {
            gatewaySlbMode?: string(name='GatewaySlbMode', example='UserHost'),
            gatewaySlbStatus?: string(name='GatewaySlbStatus', example='Ready'),
            slbId?: string(name='SlbId', example='lb-bp1ut8asdfgucjk****'),
            slbIp?: string(name='SlbIp', example='153.12.XX.XX'),
            slbPort?: string(name='SlbPort', example='80'),
            slbSpec?: string(name='SlbSpec', example='slb.s2.small'),
            statusDesc?: string(name='StatusDesc'),
            type?: string(name='Type', example='PUB_NET'),
          }
        ](name='Slb'),
        spec?: string(name='Spec', example='MSE_GTW_1_2_200_c'),
        status?: int32(name='Status', example='2'),
        statusDesc?: string(name='StatusDesc'),
        supportWasm?: boolean(name='SupportWasm', example='true'),
        tag?: string(name='Tag', example='test'),
        upgrade?: boolean(name='Upgrade', example='false'),
        vswitch2?: string(name='Vswitch2', example='vsw-bpbrveck45nf****'),
      }
    ](name='Result'),
    totalSize?: long(name='TotalSize', example='9'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='You are not authorized to perform this operation. Action: mse:ListGateway, Resource: acs:mse:cn-hangzhou:102123:*'),
  requestId?: string(name='RequestId', example='34300B3-52EC-5049-8C96-914098CF****'),
  success?: boolean(name='Success', example='true'),
}

model ListGatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListGatewayResponseBody(name='body'),
}

async function listGatewayWithOptions(tmpReq: ListGatewayRequest, runtime: Util.RuntimeOptions): ListGatewayResponse {
  Util.validateModel(tmpReq);
  var request = new ListGatewayShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.filterParams)) {
    request.filterParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.filterParams, 'FilterParams', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.descSort)) {
    query['DescSort'] = request.descSort;
  }
  if (!Util.isUnset(request.filterParamsShrink)) {
    query['FilterParams'] = request.filterParamsShrink;
  }
  if (!Util.isUnset(request.orderItem)) {
    query['OrderItem'] = request.orderItem;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListGateway',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listGateway(request: ListGatewayRequest): ListGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return listGatewayWithOptions(request, runtime);
}

model ListGatewayAuthConsumerRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  consumerStatus?: boolean(name='ConsumerStatus', example='true'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-0fe488252dc44d55a9dd57875193****'),
  name?: string(name='Name', example='test'),
  pageNum?: string(name='PageNum', example='1'),
  pageSize?: string(name='PageSize', example='10'),
  type?: string(name='Type', example='JWT'),
}

model ListGatewayAuthConsumerResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    result?: [ 
      {
        consumerStatus?: boolean(name='ConsumerStatus', example='true'),
        description?: string(name='Description'),
        gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-5017305290e14centbrveca****'),
        gmtCreate?: string(name='GmtCreate', example='2021-09-13 19:24:23'),
        gmtModified?: string(name='GmtModified', example='2022-01-07 18:07:57'),
        id?: long(name='Id', example='1'),
        name?: string(name='Name', example='test'),
        primaryUser?: string(name='PrimaryUser', example='123'),
        type?: string(name='Type', example='JWT'),
      }
    ](name='Result'),
    totalSize?: long(name='TotalSize', example='9'),
  }(name='Data'),
  dynamicCode?: string(name='DynamicCode', example='code'),
  dynamicMessage?: string(name='DynamicMessage', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='dc63-465d-8ef5-20dc18af****'),
  success?: boolean(name='Success', example='true'),
}

model ListGatewayAuthConsumerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListGatewayAuthConsumerResponseBody(name='body'),
}

async function listGatewayAuthConsumerWithOptions(request: ListGatewayAuthConsumerRequest, runtime: Util.RuntimeOptions): ListGatewayAuthConsumerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.consumerStatus)) {
    query['ConsumerStatus'] = request.consumerStatus;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListGatewayAuthConsumer',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listGatewayAuthConsumer(request: ListGatewayAuthConsumerRequest): ListGatewayAuthConsumerResponse {
  var runtime = new Util.RuntimeOptions{};
  return listGatewayAuthConsumerWithOptions(request, runtime);
}

model ListGatewayAuthConsumerResourceRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  consumerId?: long(name='ConsumerId', example='2'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-3f97e2989c344f35ab3fd62b19f1****'),
  pageNum?: string(name='PageNum', example='1'),
  pageSize?: string(name='PageSize', example='10'),
  resourceStatus?: boolean(name='ResourceStatus', example='true'),
  routeName?: string(name='RouteName', example='test'),
}

model ListGatewayAuthConsumerResourceResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    result?: [ 
      {
        consumerId?: long(name='ConsumerId', example='2'),
        gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-5017305290e14centbrveca****'),
        gmtCreate?: string(name='GmtCreate', example='2022-01-07 18:07:57'),
        gmtModified?: string(name='GmtModified', example='2022-01-07 18:07:57'),
        id?: long(name='Id', example='1'),
        resourceStatus?: boolean(name='ResourceStatus', example='true'),
        routeId?: long(name='RouteId', example='3091'),
        routeName?: string(name='RouteName', example='test'),
      }
    ](name='Result'),
    totalSize?: long(name='TotalSize', example='11'),
  }(name='Data'),
  dynamicCode?: string(name='DynamicCode', example='code'),
  dynamicMessage?: string(name='DynamicMessage', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='A73AC37C-C617-4E3A-8049-372CF49C****'),
  success?: boolean(name='Success', example='True'),
}

model ListGatewayAuthConsumerResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListGatewayAuthConsumerResourceResponseBody(name='body'),
}

async function listGatewayAuthConsumerResourceWithOptions(request: ListGatewayAuthConsumerResourceRequest, runtime: Util.RuntimeOptions): ListGatewayAuthConsumerResourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.consumerId)) {
    query['ConsumerId'] = request.consumerId;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceStatus)) {
    query['ResourceStatus'] = request.resourceStatus;
  }
  if (!Util.isUnset(request.routeName)) {
    query['RouteName'] = request.routeName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListGatewayAuthConsumerResource',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listGatewayAuthConsumerResource(request: ListGatewayAuthConsumerResourceRequest): ListGatewayAuthConsumerResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return listGatewayAuthConsumerResourceWithOptions(request, runtime);
}

model ListGatewayDomainRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-c9bc5afd61014165bd58f621b491****'),
  type?: string(name='Type', description='The type of the domain name.', example='All'),
}

model ListGatewayDomainResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: [ 
    {
      certBeforeDate?: string(name='CertBeforeDate', description='The expiration time.', example='2031-03-30 02:35:12'),
      certIdentifier?: string(name='CertIdentifier', description='The ID of the certificate.', example='3452-cn-hangzhou'),
      comment?: {
        status?: string(name='Status', description='The status.', example='Error'),
      }(name='Comment', description='The route comment (ingress).'),
      gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='12'),
      gmtCreate?: string(name='GmtCreate', description='The creation time.', example='2031-03-30 02:35:12'),
      gmtModified?: string(name='GmtModified', description='The update time.', example='2031-03-30 02:35:12'),
      http2?: string(name='Http2', description='Indicates whether `HTTP/2` is enabled.

*   `open`: `HTTP/2` is enabled.
*   `close`: `HTTP/2` is disabled.
*   `globalConfig`: Global configurations are used.', example='close'),
      id?: long(name='Id', description='The domain ID.', example='243'),
      mustHttps?: boolean(name='MustHttps', description='Indicates whether HTTPS is forcefully used.', example='true'),
      name?: string(name='Name', description='The domain name.', example='test.com'),
      protocol?: string(name='Protocol', description='The protocol.', example='HTTP'),
      status?: int32(name='Status', description='The status of the domain name. Valid values:

*   0: unpublish
*   2: publishing
*   3: published
*   4: editing
*   5: unpublishing
*   6: unavailable', example='3'),
      tlsMax?: string(name='TlsMax', description='The maximum version of Transport Layer Security (TLS).', example='TLS 1.3'),
      tlsMin?: string(name='TlsMin', description='The minimum version of TLS.', example='TLS 1.0'),
      type?: string(name='Type', description='The type.', example='Op'),
    }
  ](name='Data', description='The data of the node.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message returned if the request failed.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3F5D8E93-CA66-57F1-8BCF-A223E11B6B91'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model ListGatewayDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListGatewayDomainResponseBody(name='body'),
}

async function listGatewayDomainWithOptions(request: ListGatewayDomainRequest, runtime: Util.RuntimeOptions): ListGatewayDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListGatewayDomain',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listGatewayDomain(request: ListGatewayDomainRequest): ListGatewayDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return listGatewayDomainWithOptions(request, runtime);
}

model ListGatewayRouteRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  descSort?: boolean(name='DescSort', description='Specifies whether to enable sorting. This parameter is unavailable.', example='false'),
  filterParams?: {
    defaultServiceId?: long(name='DefaultServiceId', description='The default service ID.', example='1'),
    domainId?: long(name='DomainId', description='The domain ID.', example='284'),
    domainName?: string(name='DomainName', description='The associated domain name.', example='*.alites.com'),
    gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='81'),
    gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-30a0106924c94bca8712ec4e79fc5acc'),
    name?: string(name='Name', description='The name of the gateway.', example='test'),
    routeOrder?: int32(name='RouteOrder', description='The order.', example='1'),
    status?: int32(name='Status', description='The status.', example='1'),
  }(name='FilterParams', description='The parameters that specify filter conditions. The parameters are in the format of {"key1":"value1"}.'),
  orderItem?: string(name='OrderItem', description='The item based on which entries are sorted.', example='GmtCreate'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10'),
}

model ListGatewayRouteShrinkRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  descSort?: boolean(name='DescSort', description='Specifies whether to enable sorting. This parameter is unavailable.', example='false'),
  filterParamsShrink?: string(name='FilterParams', description='The parameters that specify filter conditions. The parameters are in the format of {"key1":"value1"}.'),
  orderItem?: string(name='OrderItem', description='The item based on which entries are sorted.', example='GmtCreate'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10'),
}

model ListGatewayRouteResponseBody = {
  code?: int32(name='Code', description='The code returned.', example='200'),
  data?: {
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='11'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    result?: [ 
      {
        comment?: {
          status?: string(name='Status', description='The status.', example='error'),
        }(name='Comment', description='The route comment (ingress).'),
        defaultServiceId?: long(name='DefaultServiceId', description='The default service ID.', example='1'),
        defaultServiceName?: string(name='DefaultServiceName', description='The default service name.', example='test'),
        destinationType?: string(name='DestinationType', description='The destination service type.', example='Single'),
        directResponse?: {
          body?: string(name='Body', description='The return value for service mocking.', example='hello'),
          code?: int32(name='Code', description='The response code returned.', example='200'),
        }(name='DirectResponse', description='The information about service mocking.'),
        domainId?: long(name='DomainId', description='The domain ID.', example='265'),
        domainIdList?: [ long ](name='DomainIdList', description='The domain IDs.'),
        domainName?: string(name='DomainName', description='The domain name.', example='y.com'),
        domainNameList?: [ string ](name='DomainNameList', description='The domain names.'),
        enableWaf?: string(name='EnableWaf', description='Indicates whether Web Application Firewall (WAF) is activated.', example='false'),
        fallback?: boolean(name='Fallback', description='Indicates whether the Fallback service is enabled.', example='true'),
        fallbackServices?: [ 
          {
            agreementType?: string(name='AgreementType', description='The type of the protocol.', example='DUBBO'),
            groupName?: string(name='GroupName', description='The name of the group to which the service belongs.', example='test'),
            name?: string(name='Name', description='The name.', example='name'),
            namespace?: string(name='Namespace', description='The namespace to which the service belongs.', example='Namespace'),
            percent?: int32(name='Percent', description='The weight in the form of a percentage value.', example='100'),
            serviceId?: long(name='ServiceId', description='The ID of the service.', example='353'),
            serviceName?: string(name='ServiceName', description='The name of the service.', example='service name'),
            servicePort?: int32(name='ServicePort', description='The service port number.', example='8848'),
            sourceType?: string(name='SourceType', description='The source type.', example='MSE'),
            version?: string(name='Version', description='The version of the service.', example='v1'),
          }
        ](name='FallbackServices', description='The information about the Fallback service.'),
        gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='496'),
        gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-cf0e7f52ecc7429dbc7ba4d5e3656100'),
        gmtCreate?: string(name='GmtCreate', description='The creation time.', example='2022-01-25T07:14:01.817+0000'),
        gmtModified?: string(name='GmtModified', description='The modification time.', example='2022-01-07 18:07:57'),
        id?: long(name='Id', description='The ID.', example='47'),
        name?: string(name='Name', description='The name.', example='test'),
        predicates?: string(name='Predicates', description='The matching rules.', example='{\\"PathPredicates\\":{\\"Path\\":\\"/rpc/compute \\",\\"Type\\":\\"PRE\\",\\"IgnoreCase\\":true}}'),
        redirect?: {
          code?: int32(name='Code', description='The response code returned.', example='200'),
          host?: string(name='Host', description='The hostname to be redirected to.', example='test.com'),
          path?: string(name='Path', description='The path.', example='/test'),
        }(name='Redirect', description='The information about redirection.'),
        routeOrder?: int32(name='RouteOrder', description='The order.', example='1'),
        routePredicates?: {
          headerPredicates?: [ 
            {
              key?: string(name='Key', description='The header key.', example='userid'),
              type?: string(name='Type', description='The matching type.', example='PRE'),
              value?: string(name='Value', description='The value.', example='test'),
            }
          ](name='HeaderPredicates', description='The headers used for route matching.'),
          methodPredicates?: [ string ](name='MethodPredicates', description='The HTTP methods used for route matching.'),
          pathPredicates?: {
            ignoreCase?: boolean(name='IgnoreCase', description='Indicates whether case sensitivity is ignored.', example='true'),
            path?: string(name='Path', description='The path of the node.', example='/getIp'),
            type?: string(name='Type', description='The matching type.', example='PRE'),
          }(name='PathPredicates', description='The path used for route matching.'),
          queryPredicates?: [ 
            {
              key?: string(name='Key', description='The key.', example='userid'),
              type?: string(name='Type', description='The matching type.', example='PRE'),
              value?: string(name='Value', description='The value.', example='test'),
            }
          ](name='QueryPredicates', description='The parameters used for route matching.'),
        }(name='RoutePredicates', description='The matching rules.'),
        routeServices?: [ 
          {
            agreementType?: string(name='AgreementType', description='The type of the protocol.', example='DUBBO'),
            groupName?: string(name='GroupName', description='The name of the group to which the service belongs.', example='api'),
            httpDubboTranscoder?: {
              dubboServiceGroup?: string(name='DubboServiceGroup', description='The Dubbo service group.', example='service group'),
              dubboServiceName?: string(name='DubboServiceName', description='The name of the Dubbo service.', example='org.apache.dubbo.samples.basic.api.DemoService'),
              dubboServiceVersion?: string(name='DubboServiceVersion', description='The version of the Dubbo service.', example='0.0.0'),
              mothedMapList?: [ 
                {
                  dubboMothedName?: string(name='DubboMothedName', description='The method name of the Dubbo service.', example='sayHello'),
                  httpMothed?: string(name='HttpMothed', description='The HTTP method.

> Valid values:

*   ALL_GET

*   ALL_POST

*   ALL_PUT

*   ALL_DELETE

*   ALL_PATCH', example='ALL_GET'),
                  mothedpath?: string(name='Mothedpath', description='The path used for method matching.', example='/mytestzbk/sayhello'),
                  paramMapsList?: [ 
                    {
                      extractKey?: string(name='ExtractKey', description='The key extracted from the input parameter.', example='name'),
                      extractKeySpec?: string(name='ExtractKeySpec', description='The position of the input parameter.

> Valid values:

*   `ALL_QUERY_PARAMETER`: request parameter

*   `ALL_HEADER`: request header

*   `ALL_PATH`: request path

*   `ALL_BODY`: request body', example='ALL_QUERY_PARAMETER'),
                      mappingType?: string(name='MappingType', description='The type of the backend service parameter.', example='java.lang.String'),
                    }
                  ](name='ParamMapsList', description='The information about parameter mappings.'),
                  passThroughAllHeaders?: string(name='PassThroughAllHeaders', description='The pass-through type of the header.

> Valid values:

*   PASS_ALL: All headers are passed through.

*   PASS_NOT: All headers are not passed through.

*   PASS_ASSIGN: Specified headers are passed through.', example='PASS_NOT'),
                  passThroughList?: [ string ](name='PassThroughList', description='The list of headers to be passed through.'),
                }
              ](name='MothedMapList', description='The forwarding rules of the Dubbo service.'),
            }(name='HttpDubboTranscoder', description='The transcoder of the Dubbo protocol.'),
            name?: string(name='Name', description='The name.', example='test'),
            namespace?: string(name='Namespace', description='The namespace.', example='default'),
            percent?: int32(name='Percent', description='The weight in the form of a percentage value.', example='11'),
            serviceId?: long(name='ServiceId', description='The ID of the service.', example='1563'),
            serviceName?: string(name='ServiceName', description='The name of the service.', example='hu'),
            servicePort?: int32(name='ServicePort', description='The Dubbo port number.', example='20880'),
            sourceType?: string(name='SourceType', description='The source type.', example='MSE'),
            version?: string(name='Version', description='The version of the service.', example='v1'),
          }
        ](name='RouteServices', description='The information about services.'),
        services?: string(name='Services', description='The information about services.', example='[]'),
        status?: int32(name='Status', description='The status.', example='2'),
        type?: string(name='Type', description='The route type.', example='Op'),
      }
    ](name='Result', description='The data structure.'),
    totalSize?: long(name='TotalSize', description='The total number of entries returned.', example='36'),
  }(name='Data', description='The data returned.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message returned if the request failed.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='83F02EAB-ECDF-55C6-B332-8649E5E7AF2C'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model ListGatewayRouteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListGatewayRouteResponseBody(name='body'),
}

async function listGatewayRouteWithOptions(tmpReq: ListGatewayRouteRequest, runtime: Util.RuntimeOptions): ListGatewayRouteResponse {
  Util.validateModel(tmpReq);
  var request = new ListGatewayRouteShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.filterParams)) {
    request.filterParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.filterParams, 'FilterParams', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.descSort)) {
    query['DescSort'] = request.descSort;
  }
  if (!Util.isUnset(request.filterParamsShrink)) {
    query['FilterParams'] = request.filterParamsShrink;
  }
  if (!Util.isUnset(request.orderItem)) {
    query['OrderItem'] = request.orderItem;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListGatewayRoute',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listGatewayRoute(request: ListGatewayRouteRequest): ListGatewayRouteResponse {
  var runtime = new Util.RuntimeOptions{};
  return listGatewayRouteWithOptions(request, runtime);
}

model ListGatewayRouteOnAuthRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-c9bc5afd61014165bd58f621b491****'),
  type?: string(name='Type', example='JWT'),
}

model ListGatewayRouteOnAuthResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      domainId?: long(name='DomainId', example='235'),
      domainIdList?: [ long ](name='DomainIdList'),
      domainName?: string(name='DomainName', example='123.com'),
      domainNameList?: [ string ](name='DomainNameList'),
      gatewayId?: string(name='GatewayId', example='399'),
      gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-7ea3da97b96543e19f6c597c****'),
      id?: int32(name='Id', example='12'),
      name?: string(name='Name', example='ceshi'),
      routePredicates?: {
        pathPredicates?: {
          path?: string(name='Path', example='/api'),
          type?: string(name='Type', example='PRE'),
        }(name='PathPredicates'),
      }(name='RoutePredicates'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='58E06A0A-BD2C-47A0-99C2-B100F353****'),
  success?: boolean(name='Success', example='true'),
}

model ListGatewayRouteOnAuthResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListGatewayRouteOnAuthResponseBody(name='body'),
}

async function listGatewayRouteOnAuthWithOptions(request: ListGatewayRouteOnAuthRequest, runtime: Util.RuntimeOptions): ListGatewayRouteOnAuthResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListGatewayRouteOnAuth',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listGatewayRouteOnAuth(request: ListGatewayRouteOnAuthRequest): ListGatewayRouteOnAuthResponse {
  var runtime = new Util.RuntimeOptions{};
  return listGatewayRouteOnAuthWithOptions(request, runtime);
}

model ListGatewayServiceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='systemError', example='zh'),
  descSort?: boolean(name='DescSort', description='duplicated cluster alias name', example='false'),
  filterParams?: {
    gatewayUniqueId?: string(name='GatewayUniqueId', description='cluster not found', example='gw-5017305290e14centbrveca****'),
    groupName?: string(name='GroupName', description='clusterNotFound', example='test'),
    name?: string(name='Name', description='illegalRequest', example='test'),
    namespace?: string(name='Namespace', description='mse-200-021', example='public'),
    serviceProtocol?: string(name='ServiceProtocol', description='mse-100-001', example='HTTP'),
    sourceType?: string(name='SourceType', description='illegal request:%s', example='MSE'),
  }(name='FilterParams', description='mse-100-007'),
  orderItem?: string(name='OrderItem', description='duplicatedClusterAliasName', example='GmtCreate'),
  pageNumber?: int32(name='PageNumber', description='code', example='1'),
  pageSize?: int32(name='PageSize', description='mse-200-105', example='10'),
}

model ListGatewayServiceShrinkRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='systemError', example='zh'),
  descSort?: boolean(name='DescSort', description='duplicated cluster alias name', example='false'),
  filterParamsShrink?: string(name='FilterParams', description='mse-100-007'),
  orderItem?: string(name='OrderItem', description='duplicatedClusterAliasName', example='GmtCreate'),
  pageNumber?: int32(name='PageNumber', description='code', example='1'),
  pageSize?: int32(name='PageSize', description='mse-200-105', example='10'),
}

model ListGatewayServiceResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    result?: [ 
      {
        gatewayId?: long(name='GatewayId', example='1'),
        gatewayTrafficPolicy?: {
          loadBalancerSettings?: {
            consistentHashLBConfig?: {
              consistentHashLBType?: string(name='ConsistentHashLBType', example='HEADER'),
              httpCookie?: {
                name?: string(name='Name', example='name'),
                path?: string(name='Path', example='/path'),
                ttl?: string(name='Ttl', example='360'),
              }(name='HttpCookie'),
              minimumRingSize?: long(name='MinimumRingSize', example='10000'),
              parameterName?: string(name='ParameterName', example='param'),
            }(name='ConsistentHashLBConfig'),
            loadbalancerType?: string(name='LoadbalancerType', example='RANDOM'),
            warmupDuration?: int32(name='WarmupDuration', example='10'),
          }(name='LoadBalancerSettings'),
          tls?: {
            caCertContent?: string(name='CaCertContent', example='content'),
            caCertId?: string(name='CaCertId', example='5******-cn-hangzhou'),
            certId?: string(name='CertId', example='5******-cn-hangzhou'),
            mode?: string(name='Mode', example='SIMPLE'),
            sni?: string(name='Sni', example='name-sni'),
            subjectAltNames?: [ string ](name='SubjectAltNames'),
          }(name='Tls'),
        }(name='GatewayTrafficPolicy'),
        gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-5017305290e14centbrveca****'),
        gmtCreate?: string(name='GmtCreate', example='2022-01-07 18:07:57'),
        gmtModified?: string(name='GmtModified', example='2022-01-07 18:07:57'),
        groupName?: string(name='GroupName', example='test'),
        healehStatus?: string(name='HealehStatus', example='Unhealthy'),
        healthCheck?: boolean(name='HealthCheck', example='true'),
        healthCheckInfo?: {
          check?: boolean(name='Check', example='true'),
          expectedStatuses?: [ int32 ](name='ExpectedStatuses'),
          healthyThreshold?: int32(name='HealthyThreshold', example='2'),
          httpHost?: string(name='HttpHost', example='http://172.168.0.1'),
          httpPath?: string(name='HttpPath', example='/health'),
          interval?: int32(name='Interval', example='2'),
          protocol?: string(name='Protocol', example='TCP'),
          timeout?: int32(name='Timeout', example='2'),
          unhealthyThreshold?: int32(name='UnhealthyThreshold', example='2'),
        }(name='HealthCheckInfo'),
        healthStatus?: string(name='HealthStatus', example='Unhealthy'),
        id?: long(name='Id', example='1'),
        ips?: [ string ](name='Ips'),
        metaInfo?: string(name='MetaInfo', example='{}'),
        name?: string(name='Name', example='test'),
        namespace?: string(name='Namespace', example='public'),
        ports?: [ int32 ](name='Ports'),
        serviceNameInRegistry?: string(name='ServiceNameInRegistry', example='test'),
        servicePort?: long(name='ServicePort', example='80'),
        serviceProtocol?: string(name='ServiceProtocol', example='HTTP'),
        sourceId?: long(name='SourceId', example='2'),
        sourceType?: string(name='SourceType', example='MSE'),
        unhealthyEndpoints?: [ string ](name='UnhealthyEndpoints'),
        versions?: [ 
          {
            name?: string(name='Name', example='v1'),
          }
        ](name='Versions'),
      }
    ](name='Result'),
    totalSize?: long(name='TotalSize', example='9'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', example='F46CDBA4-B1EE-5C94-8A48-51C10177****'),
  success?: boolean(name='Success', example='true'),
}

model ListGatewayServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListGatewayServiceResponseBody(name='body'),
}

async function listGatewayServiceWithOptions(tmpReq: ListGatewayServiceRequest, runtime: Util.RuntimeOptions): ListGatewayServiceResponse {
  Util.validateModel(tmpReq);
  var request = new ListGatewayServiceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.filterParams)) {
    request.filterParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.filterParams, 'FilterParams', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.descSort)) {
    query['DescSort'] = request.descSort;
  }
  if (!Util.isUnset(request.filterParamsShrink)) {
    query['FilterParams'] = request.filterParamsShrink;
  }
  if (!Util.isUnset(request.orderItem)) {
    query['OrderItem'] = request.orderItem;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListGatewayService',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listGatewayService(request: ListGatewayServiceRequest): ListGatewayServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return listGatewayServiceWithOptions(request, runtime);
}

model ListGatewaySlbRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-1cef5440bf2d484db419fb264d4f****'),
}

model ListGatewaySlbResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      editEnable?: boolean(name='EditEnable', example='false'),
      gatewayId?: string(name='GatewayId', example='1'),
      gatewaySlbMode?: string(name='GatewaySlbMode', example='UserSelect'),
      gatewaySlbStatus?: string(name='GatewaySlbStatus', example='Ready'),
      gmtCreate?: string(name='GmtCreate', example='2022-01-14 14:39:16'),
      httpPort?: int32(name='HttpPort', example='80'),
      httpsPort?: int32(name='HttpsPort', example='443'),
      httpsVServerGroupId?: string(name='HttpsVServerGroupId', example='353'),
      id?: string(name='Id', example='ID'),
      serviceWeight?: int32(name='ServiceWeight', example='80'),
      slbId?: string(name='SlbId', example='lb-bp1kmnli3hdpreptw2ah3'),
      slbIp?: string(name='SlbIp', example='121.199.XX.XX'),
      slbPort?: string(name='SlbPort', example='80,443'),
      statusDesc?: string(name='StatusDesc'),
      type?: string(name='Type', example='PUB_NET'),
      VServerGroupId?: string(name='VServerGroupId', example='353'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='EAB345F4-3AC3-560C-B653-65717703****'),
  success?: boolean(name='Success', example='true'),
}

model ListGatewaySlbResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListGatewaySlbResponseBody(name='body'),
}

async function listGatewaySlbWithOptions(request: ListGatewaySlbRequest, runtime: Util.RuntimeOptions): ListGatewaySlbResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListGatewaySlb',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listGatewaySlb(request: ListGatewaySlbRequest): ListGatewaySlbResponse {
  var runtime = new Util.RuntimeOptions{};
  return listGatewaySlbWithOptions(request, runtime);
}

model ListInstanceCountRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  clusterType?: string(name='ClusterType', description='The type of the instance. Valid values: ZooKeeper and Nacos-Ans.', example='Nacos-Ans'),
  mseVersion?: string(name='MseVersion', description='The edition type of the instance. Valid values:

*   `mse_dev`: Developer Edition
*   `mse_pro`: Professional Edition', example='mse_pro'),
  regionId?: string(name='RegionId', description='The ID of the region where the instance resides. Examples:

*   cn-hangzhou: China (Hangzhou)
*   cn-beijing: China (Beijing)
*   cn-shanghai: China (Shanghai)
*   cn-zhangjiakou: China (Zhangjiakou)
*   cn-shenzhen: China (Shenzhen)', example='cn-hangzhou'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}'),
}

model ListInstanceCountResponseBody = {
  code?: int32(name='Code', description='The status code. A value of 200 is returned if the request is successful.', example='200'),
  data?: [ int32 ](name='Data', description='The data entries returned.'),
  dynamicCode?: string(name='DynamicCode', description='The dynamic part in the error message.', example='%s'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace `%s` in the `ErrMessage` parameter.

> If the return value of the `ErrMessage` parameter is `The Value of Input Parameter %s is not valid` and the return value of the `DynamicMessage` parameter is `DtsJobId`, the specified `DtsJobId` parameter is invalid.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed. If the request failed, the ErrorCode parameter is returned. For more information, see the [Error codes](~~456441~~) section of this topic.', example='mse-100-100'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned. If the request is successful, a success message is returned. If the request fails, an error message is returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model ListInstanceCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstanceCountResponseBody(name='body'),
}

async function listInstanceCountWithOptions(request: ListInstanceCountRequest, runtime: Util.RuntimeOptions): ListInstanceCountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterType)) {
    query['ClusterType'] = request.clusterType;
  }
  if (!Util.isUnset(request.mseVersion)) {
    query['MseVersion'] = request.mseVersion;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.requestPars)) {
    query['RequestPars'] = request.requestPars;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListInstanceCount',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listInstanceCount(request: ListInstanceCountRequest): ListInstanceCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstanceCountWithOptions(request, runtime);
}

model ListListenersByConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='mse-200-021', example='zh'),
  dataId?: string(name='DataId', description='mse-100-007', example='zeekr-clueboss.yml'),
  group?: string(name='Group', description='illegalRequest', example='prod'),
  instanceId?: string(name='InstanceId', description='duplicated cluster alias name', example='mse-cn-m7r1yurp00e'),
  namespaceId?: string(name='NamespaceId', description='illegal request:%s', example='aaeb4d28-c9eb-4fa2-85f5-d03ce7ee8df1'),
  requestPars?: string(name='RequestPars', description='mse-200-105', example='duplicatedClusterAliasName'),
}

model ListListenersByConfigResponseBody = {
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='cluster not found', example='202'),
  listeners?: [ 
    {
      ip?: string(name='Ip', example='1.1.1.1'),
      md5?: string(name='Md5', example='23sdfdf'),
      status?: string(name='Status', example='beta'),
    }
  ](name='Listeners', description='systemError'),
  message?: string(name='Message', example='success'),
  pageNumber?: int32(name='PageNumber', example='2'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='75E1442F-11EC-567A-9CF0-5A36F7904F39'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', description='mse-100-001', example='7'),
}

model ListListenersByConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListListenersByConfigResponseBody(name='body'),
}

/**
  * The HTTP status code returned.
  *
  * @param request ListListenersByConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListListenersByConfigResponse
 */
async function listListenersByConfigWithOptions(request: ListListenersByConfigRequest, runtime: Util.RuntimeOptions): ListListenersByConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.dataId)) {
    query['DataId'] = request.dataId;
  }
  if (!Util.isUnset(request.group)) {
    query['Group'] = request.group;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.namespaceId)) {
    query['NamespaceId'] = request.namespaceId;
  }
  if (!Util.isUnset(request.requestPars)) {
    query['RequestPars'] = request.requestPars;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListListenersByConfig',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The HTTP status code returned.
  *
  * @param request ListListenersByConfigRequest
  * @return ListListenersByConfigResponse
 */
async function listListenersByConfig(request: ListListenersByConfigRequest): ListListenersByConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return listListenersByConfigWithOptions(request, runtime);
}

model ListListenersByIpRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='system error', example='zh'),
  instanceId?: string(name='InstanceId', description='cluster not found', example='mse_prepaid_public_cn-i7m2cecji09'),
  ip?: string(name='Ip', description='mse-100-001', example='172.22.0.240'),
  namespaceId?: string(name='NamespaceId', description='systemError', example='ea02a522-9482-4255-bb65-dc0636d783f2'),
  requestPars?: string(name='RequestPars', description='clusterNotFound', example='{}'),
}

model ListListenersByIpResponseBody = {
  errorCode?: string(name='ErrorCode', description='The ID of the request.', example='MSE-100-000'),
  httpCode?: string(name='HttpCode', description='The ID of the instance.', example='202'),
  listeners?: [ 
    {
      dataId?: string(name='DataId', description='The HTTP status code.', example='test.yaml'),
      group?: string(name='Group', description='The total number of returned instances.', example='default'),
      md5?: string(name='Md5', description='The data structure.', example='23sdfdf'),
    }
  ](name='Listeners', description='The ID of the namespace.'),
  message?: string(name='Message', description='The data structure.', example='The verification string.'),
  pageNumber?: int32(name='PageNumber', description='The group.', example='1'),
  pageSize?: int32(name='PageSize', description='The ID of the data.', example='10'),
  requestId?: string(name='RequestId', description='The information about listeners.', example='54973C90-F379-4372-9AA5-053A3F7****'),
  success?: boolean(name='Success', description='The message returned.', example='True'),
  totalCount?: int32(name='TotalCount', description='The IP address of the listener.', example='6'),
}

model ListListenersByIpResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListListenersByIpResponseBody(name='body'),
}

/**
  * The group.
  *
  * @param request ListListenersByIpRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListListenersByIpResponse
 */
async function listListenersByIpWithOptions(request: ListListenersByIpRequest, runtime: Util.RuntimeOptions): ListListenersByIpResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ip)) {
    query['Ip'] = request.ip;
  }
  if (!Util.isUnset(request.namespaceId)) {
    query['NamespaceId'] = request.namespaceId;
  }
  if (!Util.isUnset(request.requestPars)) {
    query['RequestPars'] = request.requestPars;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListListenersByIp',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The group.
  *
  * @param request ListListenersByIpRequest
  * @return ListListenersByIpResponse
 */
async function listListenersByIp(request: ListListenersByIpRequest): ListListenersByIpResponse {
  var runtime = new Util.RuntimeOptions{};
  return listListenersByIpWithOptions(request, runtime);
}

model ListMigrationTaskRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='illegalRequest', example='zh'),
  originInstanceName?: string(name='OriginInstanceName', description='duplicatedClusterAliasName', example='whdc'),
  pageNum?: long(name='PageNum', description='mse-100-007', example='1'),
  pageSize?: long(name='PageSize', description='duplicated cluster alias name', example='10'),
  requestPars?: string(name='RequestPars', description='mse-200-105', example='{}'),
}

model ListMigrationTaskResponseBody = {
  data?: [ 
    {
      clusterType?: string(name='ClusterType', description='system error', example='Nacos-Ans'),
      gmtCreate?: string(name='GmtCreate', example='2022-01-07T10:07:57.000+0000'),
      gmtModified?: string(name='GmtModified', example='2021-12-30T06:41:52.000+0000'),
      id?: long(name='Id', description='mse-100-001', example='1'),
      originInstanceAddress?: string(name='OriginInstanceAddress', example='192.168.1.1:8848'),
      originInstanceName?: string(name='OriginInstanceName', example='test'),
      originInstanceNamespace?: string(name='OriginInstanceNamespace', example='fsdfsdfdsf'),
      projectDesc?: string(name='ProjectDesc', example='test'),
      targetClusterName?: string(name='TargetClusterName', example='multiple-nacos'),
      targetClusterUrl?: string(name='TargetClusterUrl', example='mse-f1******-nacos-ans.mse.aliyuncs.com:8848'),
      targetInstanceId?: string(name='TargetInstanceId', example='mse-cn-zv*****'),
      userId?: string(name='UserId', description='systemError', example='2'),
    }
  ](name='Data', description='clusterNotFound'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='mse-200-021', example='200'),
  message?: string(name='Message'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='451EBE59-5F33-5B15-83C1-78593B9*****'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='2'),
}

model ListMigrationTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListMigrationTaskResponseBody(name='body'),
}

async function listMigrationTaskWithOptions(request: ListMigrationTaskRequest, runtime: Util.RuntimeOptions): ListMigrationTaskResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListMigrationTask',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listMigrationTask(request: ListMigrationTaskRequest): ListMigrationTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMigrationTaskWithOptions(request, runtime);
}

model ListNacosConfigsRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The ID of the group.', example='zh'),
  appName?: string(name='AppName', description='The name of the application.', example='fpx-pds-pns'),
  dataId?: string(name='DataId', description='The configurations.', example='zeekr-*'),
  group?: string(name='Group', description='The data structure.', example='crm'),
  instanceId?: string(name='InstanceId', description='The page number of the returned page.', example='mse-cn-7mz2fj****'),
  namespaceId?: string(name='NamespaceId', description='The ID of the application.', example='fad732a7-ff1a-4f21-8126-4edd4****'),
  pageNum?: int32(name='PageNum', description='The request was successfully processed.', example='5'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='200'),
  regionId?: string(name='RegionId', description='The error code returned if the request failed.', example='cn-hangzhou'),
  requestPars?: string(name='RequestPars', description='The ID of the request.', example='The message returned.'),
  tags?: string(name='Tags', description='The ID of the configuration.', example='billing'),
}

model ListNacosConfigsResponseBody = {
  code?: int32(name='Code', example='200'),
  configurations?: [ 
    {
      appName?: string(name='AppName', example='test'),
      dataId?: string(name='DataId', example='log.yaml'),
      group?: string(name='Group', example='public'),
      id?: string(name='Id', example='132****'),
    }
  ](name='Configurations'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='200'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', description='Queries Nacos configurations.', example='4081087F-3429-5873-A1E7-D4B5479D0B84'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', description='> The operation is not provided in Nacos SDKs. For information about Nacos SDKs, see the [official documentation](https://nacos.io/zh-cn/docs/sdk.html).', example='12'),
}

model ListNacosConfigsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListNacosConfigsResponseBody(name='body'),
}

/**
  * The number of the page to return.
  *
  * @param request ListNacosConfigsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListNacosConfigsResponse
 */
async function listNacosConfigsWithOptions(request: ListNacosConfigsRequest, runtime: Util.RuntimeOptions): ListNacosConfigsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.dataId)) {
    query['DataId'] = request.dataId;
  }
  if (!Util.isUnset(request.group)) {
    query['Group'] = request.group;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.namespaceId)) {
    query['NamespaceId'] = request.namespaceId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.requestPars)) {
    query['RequestPars'] = request.requestPars;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListNacosConfigs',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The number of the page to return.
  *
  * @param request ListNacosConfigsRequest
  * @return ListNacosConfigsResponse
 */
async function listNacosConfigs(request: ListNacosConfigsRequest): ListNacosConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNacosConfigsWithOptions(request, runtime);
}

model ListNacosHistoryConfigsRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='systemError', example='zh'),
  dataId?: string(name='DataId', description='clusterNotFound', example='user-prod.yaml'),
  group?: string(name='Group', description='cluster not found', example='fc-dev-cluster-1'),
  instanceId?: string(name='InstanceId', description='illegal request:%s', example='mse-cn-2r42e3bk20n'),
  namespaceId?: string(name='NamespaceId', description='mse-100-001', example='fc0f6e40-****-946b-45e3af313707'),
  pageNum?: int32(name='PageNum', description='mse-100-007', example='1'),
  pageSize?: int32(name='PageSize', description='illegalRequest', example='10'),
  regionId?: string(name='RegionId', description='mse-200-021', example='cn-hangzhou'),
  requestPars?: string(name='RequestPars', description='duplicatedClusterAliasName', example='duplicated cluster alias name'),
}

model ListNacosHistoryConfigsResponseBody = {
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  historyItems?: [ 
    {
      appName?: string(name='AppName', example='gateway'),
      dataId?: string(name='DataId', example='test.yaml'),
      group?: string(name='Group', example='default'),
      id?: long(name='Id', example='23fdsf'),
      lastModifiedTime?: long(name='LastModifiedTime', example='16434400'),
      opType?: string(name='OpType', example='yaml'),
    }
  ](name='HistoryItems'),
  httpCode?: string(name='HttpCode', example='200'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='53338ECA-F880-54D8-A9B3-5606355A1B89'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', example='7'),
}

model ListNacosHistoryConfigsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListNacosHistoryConfigsResponseBody(name='body'),
}

/**
  * The message returned.
  *
  * @param request ListNacosHistoryConfigsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListNacosHistoryConfigsResponse
 */
async function listNacosHistoryConfigsWithOptions(request: ListNacosHistoryConfigsRequest, runtime: Util.RuntimeOptions): ListNacosHistoryConfigsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.dataId)) {
    query['DataId'] = request.dataId;
  }
  if (!Util.isUnset(request.group)) {
    query['Group'] = request.group;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.namespaceId)) {
    query['NamespaceId'] = request.namespaceId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.requestPars)) {
    query['RequestPars'] = request.requestPars;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListNacosHistoryConfigs',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The message returned.
  *
  * @param request ListNacosHistoryConfigsRequest
  * @return ListNacosHistoryConfigsResponse
 */
async function listNacosHistoryConfigs(request: ListNacosHistoryConfigsRequest): ListNacosHistoryConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNacosHistoryConfigsWithOptions(request, runtime);
}

model ListNamingTrackRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='system error', example='zh'),
  endTs?: long(name='EndTs', description='clusterNotFound', example='1665299698'),
  group?: string(name='Group', description='mse-100-007', example='group'),
  instanceId?: string(name='InstanceId', description='duplicatedClusterAliasName', example='mse_prepaid_public_cn-tl32d*****'),
  ip?: string(name='Ip', description='illegal request:%s', example='172.16.183.232'),
  namespaceId?: string(name='NamespaceId', description='illegalRequest', example='cd4d3703-e2a6-46b5-85c6-4447e4f****'),
  pageNum?: long(name='PageNum', description='mse-100-001', example='1'),
  pageSize?: long(name='PageSize', description='cluster not found', example='10'),
  requestPars?: string(name='RequestPars', description='mse-200-105', example='{}'),
  reverse?: boolean(name='Reverse', description='systemError', example='false'),
  serviceName?: string(name='ServiceName', description='duplicated cluster alias name', example='fpx-xms-baseinfo'),
  startTs?: long(name='StartTs', description='mse-200-021', example='1660238450'),
}

model ListNamingTrackResponseBody = {
  errorCode?: string(name='ErrorCode', description='The name of the service.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The ID of the instance.', example='200'),
  message?: string(name='Message', description='The name of the node.', example='The IP address of the client.'),
  pageNumber?: long(name='PageNumber', description='The data information.', example='1'),
  pageSize?: long(name='PageSize', description='The HTTP status code returned.', example='10'),
  requestId?: string(name='RequestId', description='The push time.', example='9916CBED-B2D5-5685-9129-4592FE1*****'),
  success?: boolean(name='Success', description='The group.', example='true'),
  totalCount?: long(name='TotalCount', description='The details of the data.', example='7'),
  traces?: [ 
    {
      clientIp?: string(name='ClientIp', description='The start timestamp. Unit: seconds.', example='120.40.32.235'),
      group?: string(name='Group', description='The number of entries to return on each page.', example='prod'),
      instanceSize?: string(name='InstanceSize', description='The number of the page to return.', example='1'),
      nodeName?: string(name='NodeName', description='The IP address of the client.', example='mse-197*****-167083******-reg-center-0-0'),
      pushTime?: string(name='PushTime', description='The ID of the namespace.', example='2022-12-16 11:48:07'),
      pushTimeAll?: string(name='PushTimeAll', description='Specifies whether to sort the query results in chronological order or reverse chronological order. Default value: `false`.

*   `true`: sorts the query results in reverse chronological order.
*   `false`: sorts the query results in chronological order.', example='628ms'),
      pushTimeNetwork?: string(name='PushTimeNetwork', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='37ms'),
      serverName?: string(name='ServerName', description='The end timestamp. Unit: seconds.', example='fpx-xms-baseinfo'),
      slaTime?: string(name='SlaTime', description='The data structure.', example='628ms'),
    }
  ](name='Traces', description='The name of the service.'),
}

model ListNamingTrackResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListNamingTrackResponseBody(name='body'),
}

async function listNamingTrackWithOptions(request: ListNamingTrackRequest, runtime: Util.RuntimeOptions): ListNamingTrackResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListNamingTrack',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listNamingTrack(request: ListNamingTrackRequest): ListNamingTrackResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNamingTrackWithOptions(request, runtime);
}

model ListSSLCertRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The returned data.', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The expiration time.', example='gw-3f97e2989c344f35ab3fd62b19f1****'),
}

model ListSSLCertResponseBody = {
  code?: int32(name='Code', description='Queries the certificates associated with the domain names of a gateway.', example='200'),
  data?: [ 
    {
      afterDate?: string(name='AfterDate', example='2021-04-01 02:35:12'),
      algorithm?: string(name='Algorithm', example='test'),
      beforeDate?: string(name='BeforeDate', example='2031-03-30 02:35:12'),
      certIdentifier?: string(name='CertIdentifier', example='1234'),
      certName?: string(name='CertName', example='test.com'),
      commonName?: string(name='CommonName', example='*.test.com'),
      gmtAfter?: string(name='GmtAfter', example='2021-04-01 02:35:12'),
      gmtBefore?: string(name='GmtBefore', example='2031-03-30 02:35:12'),
      issuer?: string(name='Issuer', example='test'),
      sans?: string(name='Sans', example='SSL'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', description='gw-3f97e2989c344f35ab3fd62b19f1****', example='200'),
  message?: string(name='Message', description='The name of the certificate.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CAA9A229-141D-5FBA-AC5C-516C02026A11'),
  success?: boolean(name='Success', example='true'),
}

model ListSSLCertResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSSLCertResponseBody(name='body'),
}

async function listSSLCertWithOptions(request: ListSSLCertRequest, runtime: Util.RuntimeOptions): ListSSLCertResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSSLCert',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSSLCert(request: ListSSLCertRequest): ListSSLCertResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSSLCertWithOptions(request, runtime);
}

model ListSecurityGroupRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The ID of the gateway.', example='gw-e98e40675aaf49bda082137d158e1585'),
}

model ListSecurityGroupResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: [ 
    {
      securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group.', example='sg-8vb8gsmrqyc35k645rk6'),
      securityGroupName?: string(name='SecurityGroupName', description='The name of the security group.', example='sg2'),
      securityGroupType?: string(name='SecurityGroupType', description='The type of the security group. Valid values:

*   normal: basic security group
*   enterprise: advanced security group For more information, see [Advanced security groups](~~120621~~).', example='enterprise'),
      vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC).', example='vpc-bp1b'),
    }
  ](name='Data', description='The data structure.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model ListSecurityGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSecurityGroupResponseBody(name='body'),
}

async function listSecurityGroupWithOptions(request: ListSecurityGroupRequest, runtime: Util.RuntimeOptions): ListSecurityGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSecurityGroup',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSecurityGroup(request: ListSecurityGroupRequest): ListSecurityGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSecurityGroupWithOptions(request, runtime);
}

model ListSecurityGroupRuleRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-83b0ddb569434f82b9fe8e4c60c40f7c'),
}

model ListSecurityGroupRuleResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      description?: string(name='Description'),
      gatewayId?: long(name='GatewayId', example='81'),
      gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-12a432a1f5da423997d8880bd32c304d'),
      gmtCreate?: string(name='GmtCreate', example='2022-01-07T10:07:57.000+0000'),
      gmtModified?: string(name='GmtModified', example='2022-01-07T10:07:57.000+0000'),
      id?: string(name='Id', example='21'),
      ipProtocol?: string(name='IpProtocol', example='tcp'),
      portRange?: string(name='PortRange', example='8000/8000'),
      securityGroupId?: string(name='SecurityGroupId', example='sg-bp1cg6qlyjepj0y6cf2c'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9EC7BDBF-3C38-5C9C-95DD-61E298CD43E8'),
  success?: boolean(name='Success', example='true'),
}

model ListSecurityGroupRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSecurityGroupRuleResponseBody(name='body'),
}

async function listSecurityGroupRuleWithOptions(request: ListSecurityGroupRuleRequest, runtime: Util.RuntimeOptions): ListSecurityGroupRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSecurityGroupRule',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSecurityGroupRule(request: ListSecurityGroupRuleRequest): ListSecurityGroupRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSecurityGroupRuleWithOptions(request, runtime);
}

model ListServiceSourceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='duplicatedClusterAliasName', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='mse-200-105', example='gw-c51a15c7ee934a4fb945ccf35fe1****'),
}

model ListServiceSourceResponseBody = {
  code?: int32(name='Code', description='mse-200-021', example='200'),
  data?: [ 
    {
      address?: string(name='Address', example='***'),
      bindingWithGateway?: int32(name='BindingWithGateway', example='1'),
      gatewayId?: long(name='GatewayId', example='1'),
      gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-2u9uhd9283hd92hgd39g239dg2*****'),
      gmtCreate?: string(name='GmtCreate', example='2022-01-07 18:07:57'),
      gmtModified?: string(name='GmtModified', example='2022-01-07 18:07:57'),
      groupList?: [ string ](name='GroupList'),
      id?: long(name='Id', description='systemError', example='1'),
      ingressOptions?: {
        enableIngress?: boolean(name='EnableIngress', example='true'),
        enableStatus?: boolean(name='EnableStatus', example='true'),
        ingressClass?: string(name='IngressClass', example='com.test.xxx'),
        watchNamespace?: string(name='WatchNamespace', example='default'),
      }(name='IngressOptions'),
      name?: string(name='Name', description='system error', example='test'),
      pathList?: [ string ](name='PathList'),
      source?: string(name='Source', example='MSE'),
      sourceUniqueId?: string(name='SourceUniqueId', example='mse-cn-***'),
      type?: string(name='Type', example='NACOS'),
    }
  ](name='Data', description='cluster not found'),
  httpStatusCode?: int32(name='HttpStatusCode', description='illegalRequest', example='200'),
  message?: string(name='Message', description='illegal request:%s', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='mse-100-007', example='B8C4B0D8-EBB9-5F20-8295-04224FBE5529'),
  success?: boolean(name='Success', description='clusterNotFound', example='true'),
}

model ListServiceSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListServiceSourceResponseBody(name='body'),
}

async function listServiceSourceWithOptions(request: ListServiceSourceRequest, runtime: Util.RuntimeOptions): ListServiceSourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListServiceSource',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listServiceSource(request: ListServiceSourceRequest): ListServiceSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return listServiceSourceWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The key of a tag.', example='zh'),
  nextToken?: string(name='NextToken', description='The request was successfully processed.', example='AAAAAV3MpHK1AP0pfERHZN5pu6kywps2Ezza3n8HAAzCCqsi'),
  regionId?: string(name='RegionId', description='The message returned.', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.'),
  resourceType?: string(name='ResourceType', description='The error code returned if the request failed.', example='CLUSTER'),
  tag?: [ 
    {
      key?: string(name='Key', description='The type of a resource.', example='env'),
      value?: string(name='Value', description='The value of a tag.', example='prd'),
    }
  ](name='Tag', description='The details of a resource and its tags, including the resource ID, the resource type, and the keys and values of the tags.'),
}

model ListTagResourcesResponseBody = {
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  message?: string(name='Message'),
  nextToken?: string(name='NextToken', example='AAAAAV3MpHK1AP0pfERHZN5pu6ng3BeUyo2zbY5wgL1DBa2T'),
  requestId?: string(name='RequestId', example='92ED7C9C-84A2-595F-87FE-354F84C0F739'),
  success?: boolean(name='Success', example='true'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId', example='mse-cn-7pp2st29t16'),
      resourceType?: string(name='ResourceType', example='cluster'),
      tagKey?: string(name='TagKey', example='env'),
      tagValue?: string(name='TagValue', example='prd'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagResources',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ListZkTrackRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  endTs?: long(name='EndTs', description='The end timestamp. Unit: seconds.', example='1669619383'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-0ju2yq****'),
  pageNum?: long(name='PageNum', description='The number of the page to return.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page.', example='20'),
  path?: string(name='Path', description='The path.', example='/path'),
  requestPars?: string(name='RequestPars', description='The request parameters.', example='{}'),
  reverse?: boolean(name='Reverse', description='Specifies whether to enable reverse ordering.', example='false'),
  sessionId?: string(name='SessionId', description='The session ID.', example='0x301fdfbdbf00***'),
  startTs?: long(name='StartTs', description='The start timestamp. Unit: seconds.', example='1669618483'),
}

model ListZkTrackResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='ok'),
  pageNumber?: long(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries returned per page.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DC34E4A3-5F1C-4E40-86EA-02EDF967****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='20'),
  traces?: [ 
    {
      acl?: string(name='Acl', description='The access control list (ACL).', example='world:anyone:cdrwa'),
      dataType?: string(name='DataType', description='The data type. Valid values:

*   persist
*   ephemeral', example='persist'),
      eventType?: string(name='EventType', description='The type of the event. Valid values: For tracks of the Notify type:

*   NodeCreated
*   NodeDeleted
*   NodeDataChanged
*   NodeChildrenChanged', example='NodeCreated'),
      finished?: boolean(name='Finished', description='Indicates whether the transaction ended.', example='true'),
      logDate?: string(name='LogDate', description='The logging time.', example='2022-11-28 15:09:15,606'),
      multiSize?: long(name='MultiSize', description='The transaction size.', example='3'),
      opType?: string(name='OpType', description='The operation type. For tracks of the Push type:

*   Create
*   Update
*   Delete
*   SetAcl
*   Multi

For tracks of the Pull type:

*   GetData
*   GetChild
*   GetStat', example='Create'),
      path?: string(name='Path', description='The path.', example='/path'),
      result?: string(name='Result', description='The result.', example='success'),
      sessionId?: string(name='SessionId', description='The session ID.', example='0x301fdfbdbf00***'),
      timestamp?: string(name='Timestamp', description='The timestamp (not available).', example='1669619383000'),
      traceType?: string(name='TraceType', description='The type of the track. Valid values:

*   Push
*   Pull
*   Notify', example='Push'),
      ttl?: long(name='Ttl', description='The time to live (TTL).', example='0'),
      watch?: boolean(name='Watch', description='Indicates whether to enable the monitoring feature.', example='true'),
    }
  ](name='Traces', description='The track data.'),
}

model ListZkTrackResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListZkTrackResponseBody(name='body'),
}

async function listZkTrackWithOptions(request: ListZkTrackRequest, runtime: Util.RuntimeOptions): ListZkTrackResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListZkTrack',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listZkTrack(request: ListZkTrackRequest): ListZkTrackResponse {
  var runtime = new Util.RuntimeOptions{};
  return listZkTrackWithOptions(request, runtime);
}

model ListZnodeChildrenRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  clusterId?: string(name='ClusterId', example='mse-09k1q11****'),
  path?: string(name='Path', example='/zookeeper'),
}

model ListZnodeChildrenResponseBody = {
  data?: [ 
    {
      data?: string(name='Data', example='cluster'),
      dir?: boolean(name='Dir', example='true'),
      name?: string(name='Name', example='mse-bc1a29b0-160230875****-reg-center-0-1'),
      path?: string(name='Path', example='/zookeeper'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='BDB6CE0B-9CAF-41B5-9FEA-E08BE8E2****'),
  success?: boolean(name='Success', example='true'),
}

model ListZnodeChildrenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListZnodeChildrenResponseBody(name='body'),
}

async function listZnodeChildrenWithOptions(request: ListZnodeChildrenRequest, runtime: Util.RuntimeOptions): ListZnodeChildrenResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.path)) {
    query['Path'] = request.path;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListZnodeChildren',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listZnodeChildren(request: ListZnodeChildrenRequest): ListZnodeChildrenResponse {
  var runtime = new Util.RuntimeOptions{};
  return listZnodeChildrenWithOptions(request, runtime);
}

model ModifyGovernanceKubernetesClusterRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  clusterId?: string(name='ClusterId', example='cd23228b3c80c4d4f9ad87cc3****'),
  namespaceInfos?: string(name='NamespaceInfos', example='[{"Name":"default","Tags":{"mse-enable":"disabled","kubernetes.io/metadata.name":"default"}},{"Name":"test2","Tags":{"test2":"test2","kubernetes.io/metadata.name":"test2"}}]'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ModifyGovernanceKubernetesClusterResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: boolean(name='Data', example='True'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='F9849E97-2455-54B0-A3B4-3F6E4E9FFEB1'),
  success?: boolean(name='Success', example='True'),
}

model ModifyGovernanceKubernetesClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyGovernanceKubernetesClusterResponseBody(name='body'),
}

async function modifyGovernanceKubernetesClusterWithOptions(request: ModifyGovernanceKubernetesClusterRequest, runtime: Util.RuntimeOptions): ModifyGovernanceKubernetesClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.namespaceInfos)) {
    query['NamespaceInfos'] = request.namespaceInfos;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyGovernanceKubernetesCluster',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyGovernanceKubernetesCluster(request: ModifyGovernanceKubernetesClusterRequest): ModifyGovernanceKubernetesClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyGovernanceKubernetesClusterWithOptions(request, runtime);
}

model ModifyLosslessRuleRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='int64', example='zh'),
  aligned?: boolean(name='Aligned', description='Specifies whether to enable the alert rule. Valid values:

*   `true`: enables the rule.
*   `false`: disables the rule.', example='true'),
  appId?: string(name='AppId', description='mse-100-001', example='c644n5frmc@3e75f25fd4*****'),
  appName?: string(name='AppName', description='clusterNotFound', example='wx-work-api'),
  delayTime?: int32(name='DelayTime', description='The ID of the region.', example='1'),
  enable?: boolean(name='Enable', description='systemError', example='false'),
  funcType?: int32(name='FuncType', description='The microservice namespace to which the rule applies.', example='1'),
  lossLessDetail?: boolean(name='LossLessDetail', description='int64', example='false'),
  namespace?: string(name='Namespace', description='cluster not found', example='default'),
  notice?: boolean(name='Notice', description='The registration latency.', example='false'),
  regionId?: string(name='RegionId', description='mse-200-021', example='cn-beijing'),
  related?: boolean(name='Related', description='The prefetching duration.', example='true'),
  warmupTime?: int32(name='WarmupTime', description='system error', example='60'),
}

model ModifyLosslessRuleResponseBody = {
  code?: int32(name='Code', description='响应码。', example='200'),
  data?: any(name='Data', description='返回数据。', example='null'),
  errorCode?: string(name='ErrorCode', description='Specifies whether to enable notification.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='HTTP状态码。', example='200'),
  message?: string(name='Message', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='modifyLosslessRule success'),
  requestId?: string(name='RequestId', description='Specifies whether to align the lifecycle of the application in the Kubernetes cluster with that of the microservice.', example='3369AD10-F1A6-4E6F-B99E-20F51826****'),
  success?: boolean(name='Success', description='Specifies whether to display online and offline processing details.', example='true'),
}

model ModifyLosslessRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyLosslessRuleResponseBody(name='body'),
}

async function modifyLosslessRuleWithOptions(request: ModifyLosslessRuleRequest, runtime: Util.RuntimeOptions): ModifyLosslessRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.aligned)) {
    query['Aligned'] = request.aligned;
  }
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.delayTime)) {
    query['DelayTime'] = request.delayTime;
  }
  if (!Util.isUnset(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!Util.isUnset(request.funcType)) {
    query['FuncType'] = request.funcType;
  }
  if (!Util.isUnset(request.lossLessDetail)) {
    query['LossLessDetail'] = request.lossLessDetail;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.notice)) {
    query['Notice'] = request.notice;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.related)) {
    query['Related'] = request.related;
  }
  if (!Util.isUnset(request.warmupTime)) {
    query['WarmupTime'] = request.warmupTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyLosslessRule',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyLosslessRule(request: ModifyLosslessRuleRequest): ModifyLosslessRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyLosslessRuleWithOptions(request, runtime);
}

model OfflineGatewayRouteRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-77e1153db6e14c0a8b1fae20bcb89ca5'),
  routeId?: string(name='RouteId', description='The ID of the route.', example='645'),
}

model OfflineGatewayRouteResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: boolean(name='Data', description='Indicates whether the route is unpublished.', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8EB24742-AB15-5953-BEFB-1FA18E770EEE'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model OfflineGatewayRouteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OfflineGatewayRouteResponseBody(name='body'),
}

async function offlineGatewayRouteWithOptions(request: OfflineGatewayRouteRequest, runtime: Util.RuntimeOptions): OfflineGatewayRouteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.routeId)) {
    query['RouteId'] = request.routeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OfflineGatewayRoute',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function offlineGatewayRoute(request: OfflineGatewayRouteRequest): OfflineGatewayRouteResponse {
  var runtime = new Util.RuntimeOptions{};
  return offlineGatewayRouteWithOptions(request, runtime);
}

model OrderClusterHealthCheckRiskNoticeRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-st21ri2****'),
  mute?: boolean(name='Mute', description='Specifies whether to disable the notification feature if the risk item occurs.

*   true: disabled
*   false: enabled', example='false'),
  noticeType?: string(name='NoticeType', description='A reserved parameter.', example='null'),
  regionId?: string(name='RegionId', description='The region in which the cluster resides.', example='cn-hangzhou'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}'),
  riskCode?: string(name='RiskCode', description='The ID of the risk item.', example='30010010001'),
}

model OrderClusterHealthCheckRiskNoticeResponseBody = {
  code?: int32(name='Code', description='The status code. A value of 200 is returned if the request is successful.', example='200'),
  data?: boolean(name='Data', description='The data of the node.', example='null'),
  dynamicCode?: string(name='DynamicCode', description='The dynamic part in the error message.', example='code'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the \\*\\*%s\\*\\* variable in the **ErrMessage** parameter.

> If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.

*   If the request is successful, a success message is returned.
*   If the request fails, an error message is returned, such as the "TaskId not found" message.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='AF21683A-29C7-4853-AC0F-B5ADEE4D****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model OrderClusterHealthCheckRiskNoticeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OrderClusterHealthCheckRiskNoticeResponseBody(name='body'),
}

async function orderClusterHealthCheckRiskNoticeWithOptions(request: OrderClusterHealthCheckRiskNoticeRequest, runtime: Util.RuntimeOptions): OrderClusterHealthCheckRiskNoticeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.mute)) {
    query['Mute'] = request.mute;
  }
  if (!Util.isUnset(request.noticeType)) {
    query['NoticeType'] = request.noticeType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.requestPars)) {
    query['RequestPars'] = request.requestPars;
  }
  if (!Util.isUnset(request.riskCode)) {
    query['RiskCode'] = request.riskCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OrderClusterHealthCheckRiskNotice',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function orderClusterHealthCheckRiskNotice(request: OrderClusterHealthCheckRiskNoticeRequest): OrderClusterHealthCheckRiskNoticeResponse {
  var runtime = new Util.RuntimeOptions{};
  return orderClusterHealthCheckRiskNoticeWithOptions(request, runtime);
}

model PullServicesRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId'),
  namespace?: string(name='Namespace'),
  sourceType?: string(name='SourceType'),
}

model PullServicesResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      groupName?: string(name='GroupName'),
      namespace?: string(name='Namespace'),
      namespaceShowName?: string(name='NamespaceShowName'),
      services?: [ 
        {
          groupName?: string(name='GroupName'),
          name?: string(name='Name'),
          namespace?: string(name='Namespace'),
          sourceId?: string(name='SourceId'),
          sourceType?: string(name='SourceType'),
        }
      ](name='Services'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PullServicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PullServicesResponseBody(name='body'),
}

async function pullServicesWithOptions(request: PullServicesRequest, runtime: Util.RuntimeOptions): PullServicesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PullServices',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pullServices(request: PullServicesRequest): PullServicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return pullServicesWithOptions(request, runtime);
}

model PutClusterHealthCheckTaskRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='RestResult', example='zh'),
  instanceId?: string(name='InstanceId', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='mse_prepaid_public_cn-2r42o83h506'),
}

model PutClusterHealthCheckTaskResponseBody = {
  code?: int32(name='Code', description='The error code returned if the request failed.', example='200'),
  data?: boolean(name='Data', description='mse-200-105', example='null'),
  dynamicCode?: string(name='DynamicCode', description='The dynamic part in the error message. This parameter is used to replace the \\*\\*%s\\*\\* variable in the **ErrMessage** parameter.

> If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='code'),
  dynamicMessage?: string(name='DynamicMessage', description='The returned message.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The HTTP status code returned.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The message returned.

*   If the request is successful, a success message is returned.
*   If the request fails, an error message is returned, such as the "TaskId not found" message.', example='200'),
  message?: string(name='Message', description='The request is successfully processed.', example='The dynamic part in the error message.'),
  requestId?: string(name='RequestId', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='5B170A0D-2C5D-4CF8-B808-03966B86****'),
  success?: boolean(name='Success', description='The status code. A value of 200 is returned if the request is successful.', example='true'),
}

model PutClusterHealthCheckTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PutClusterHealthCheckTaskResponseBody(name='body'),
}

async function putClusterHealthCheckTaskWithOptions(request: PutClusterHealthCheckTaskRequest, runtime: Util.RuntimeOptions): PutClusterHealthCheckTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PutClusterHealthCheckTask',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function putClusterHealthCheckTask(request: PutClusterHealthCheckTaskRequest): PutClusterHealthCheckTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return putClusterHealthCheckTaskWithOptions(request, runtime);
}

model QueryAllSwimmingLaneRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  groupId?: long(name='GroupId', description='The ID of the lane group.', example='186'),
  namespace?: string(name='Namespace', example='default'),
}

model QueryAllSwimmingLaneResponseBody = {
  data?: [ 
    {
      id?: long(name='Id', example='123'),
      messageQueueFilterSide?: string(name='MessageQueueFilterSide', example='Client'),
      messageQueueGrayEnable?: boolean(name='MessageQueueGrayEnable'),
      name?: string(name='Name', example='swimmingGroup'),
      namespace?: string(name='Namespace', example='default'),
      recordCanaryDetail?: boolean(name='RecordCanaryDetail'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      tag?: string(name='Tag'),
      userId?: string(name='UserId', example='12345'),
      enableRules?: boolean(name='enableRules'),
      entryRule?: string(name='entryRule'),
      gmtCreate?: string(name='gmtCreate'),
      gmtModified?: string(name='gmtModified'),
      groupId?: string(name='groupId'),
    }
  ](name='Data', description='The details of the data.', example='[{id:100,name:"test"}]'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  message?: string(name='Message', description='The message returned.', example='The request was successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DC34E4A3-5F1C-4E40-86EA-02EDF967****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model QueryAllSwimmingLaneResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryAllSwimmingLaneResponseBody(name='body'),
}

async function queryAllSwimmingLaneWithOptions(request: QueryAllSwimmingLaneRequest, runtime: Util.RuntimeOptions): QueryAllSwimmingLaneResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryAllSwimmingLane',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAllSwimmingLane(request: QueryAllSwimmingLaneRequest): QueryAllSwimmingLaneResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAllSwimmingLaneWithOptions(request, runtime);
}

model QueryAllSwimmingLaneGroupRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  namespace?: string(name='Namespace', example='default'),
}

model QueryAllSwimmingLaneGroupResponseBody = {
  code?: int32(name='Code', description='The status code. A value of 200 is returned if the request is successful.', example='200'),
  data?: [ 
    {
      appIds?: string(name='AppIds', example='abcde@abcde,abcde@abcde'),
      entryApp?: string(name='EntryApp', example='mse:abcde@abcde'),
      id?: long(name='Id', example='123'),
      messageQueueFilterSide?: string(name='MessageQueueFilterSide', example='Client'),
      messageQueueGrayEnable?: boolean(name='MessageQueueGrayEnable'),
      name?: string(name='Name', example='swimmingGroup'),
      namespace?: string(name='Namespace', example='default'),
      recordCanaryDetail?: boolean(name='RecordCanaryDetail'),
      region?: string(name='Region', example='cn-hangzhou'),
      userId?: string(name='UserId', example='12345'),
    }
  ](name='Data', description='The details of the data.', example='[{id:100,name:"test"}]'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The returned message.

*   If the request is successful, a success message is returned.
*   If the request fails, an error message is returned.', example='The request was successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='54973C90-F379-4372-9AA5-053A3F7****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model QueryAllSwimmingLaneGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryAllSwimmingLaneGroupResponseBody(name='body'),
}

async function queryAllSwimmingLaneGroupWithOptions(request: QueryAllSwimmingLaneGroupRequest, runtime: Util.RuntimeOptions): QueryAllSwimmingLaneGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryAllSwimmingLaneGroup',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAllSwimmingLaneGroup(request: QueryAllSwimmingLaneGroupRequest): QueryAllSwimmingLaneGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAllSwimmingLaneGroupWithOptions(request, runtime);
}

model QueryBusinessLocationsRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
}

model QueryBusinessLocationsResponseBody = {
  data?: [ 
    {
      cnName?: string(name='CnName'),
      description?: string(name='Description'),
      districtCnName?: string(name='DistrictCnName'),
      districtEnName?: string(name='DistrictEnName', example='Asia Pacific'),
      districtId?: string(name='DistrictId', example='asia-pacific'),
      districtOrdering?: int32(name='DistrictOrdering', example='101'),
      districtShowName?: string(name='DistrictShowName'),
      enDescription?: string(name='EnDescription', example='China East 2 (Shanghai)'),
      enName?: string(name='EnName', example='China (Shanghai)'),
      name?: string(name='Name', example='cn-shanghai'),
      ordering?: int32(name='Ordering', example='6'),
      showName?: string(name='ShowName'),
      type?: string(name='Type', example='region'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='3369AD10-F1A6-4E6F-B99E-20F51826****'),
  success?: string(name='Success', example='true'),
}

model QueryBusinessLocationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryBusinessLocationsResponseBody(name='body'),
}

async function queryBusinessLocationsWithOptions(request: QueryBusinessLocationsRequest, runtime: Util.RuntimeOptions): QueryBusinessLocationsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryBusinessLocations',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryBusinessLocations(request: QueryBusinessLocationsRequest): QueryBusinessLocationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryBusinessLocationsWithOptions(request, runtime);
}

model QueryClusterDetailRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  aclSwitch?: boolean(name='AclSwitch', example='false'),
  instanceId?: string(name='InstanceId', example='mse-cn-st21ri2****'),
  orderId?: string(name='OrderId', example='20576750143****'),
}

model QueryClusterDetailResponseBody = {
  data?: {
    aclEntryList?: string(name='AclEntryList', example='[]'),
    aclId?: string(name='AclId', example='acl-bp17020kiqvzutwwj****'),
    appVersion?: string(name='AppVersion', example='1.2.1'),
    chargeType?: string(name='ChargeType'),
    clusterAliasName?: string(name='ClusterAliasName', example='mse-7413****'),
    clusterName?: string(name='ClusterName', example='mse-bc1a29b0-160230875****'),
    clusterSpecification?: string(name='ClusterSpecification', example='MSE_SC_1_2_200_c'),
    clusterType?: string(name='ClusterType', example='Nacos-Ans'),
    clusterVersion?: string(name='ClusterVersion', example='1.2.1'),
    connectionType?: string(name='ConnectionType', example='slb'),
    cpu?: int32(name='Cpu', example='1'),
    createTime?: string(name='CreateTime', example='2020-07-31 11:36:08'),
    diskCapacity?: long(name='DiskCapacity', example='60'),
    diskType?: string(name='DiskType', example='alicloud-disk-ssd-multi-zone'),
    healthStatus?: string(name='HealthStatus', example='RESTART_SUCCESS'),
    initCostTime?: long(name='InitCostTime', example='98408'),
    initStatus?: string(name='InitStatus', example='RESTART_SUCCESS'),
    instanceCount?: int32(name='InstanceCount', example='3'),
    instanceId?: string(name='InstanceId', example='mse-cn-st21ri2****'),
    instanceModels?: [ 
      {
        creationTimestamp?: string(name='CreationTimestamp', example='1578575377732'),
        healthStatus?: string(name='HealthStatus', example='Running'),
        internetIp?: string(name='InternetIp', example='47.98.XX.XX'),
        ip?: string(name='Ip', example='10.12.XX.XX'),
        podName?: string(name='PodName', example='mse-7413****-159616656****-reg-center-0-0'),
        role?: string(name='Role', example='Peer'),
        singleTunnelVip?: string(name='SingleTunnelVip', example='192.168.XX.XX'),
        zone?: string(name='Zone', example='cn-shanghai-f'),
      }
    ](name='InstanceModels'),
    internetAddress?: string(name='InternetAddress', example='47.98.XX.XX'),
    internetDomain?: string(name='InternetDomain', example='mse-7413****-p.eureka.mse.aliyuncs.com'),
    internetPort?: string(name='InternetPort', example='8761'),
    intranetAddress?: string(name='IntranetAddress', example='192.168.XX.XX'),
    intranetDomain?: string(name='IntranetDomain', example='mse-7413****-eureka.mse.aliyuncs.com'),
    intranetPort?: string(name='IntranetPort', example='8761'),
    memoryCapacity?: long(name='MemoryCapacity', example='2'),
    mseVersion?: string(name='MseVersion', example='mse_basic'),
    netType?: string(name='NetType', example='privatenet'),
    orderClusterVersion?: string(name='OrderClusterVersion', example='1.2.0'),
    payInfo?: string(name='PayInfo'),
    pubNetworkFlow?: string(name='PubNetworkFlow', example='3'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    resourceGroupId?: string(name='ResourceGroupId', example='rg-aek2dhgysj*****'),
    tags?: map[string]any(name='Tags'),
    vSwitchId?: string(name='VSwitchId', example='vsw-xxx-xxxx'),
    vpcId?: string(name='VpcId', example='vpc-bp1hcg467ekqsv0zr****'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='9515ACA4-E94D-440D-989E-C379FCED****'),
  success?: boolean(name='Success', example='true'),
}

model QueryClusterDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryClusterDetailResponseBody(name='body'),
}

async function queryClusterDetailWithOptions(request: QueryClusterDetailRequest, runtime: Util.RuntimeOptions): QueryClusterDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.aclSwitch)) {
    query['AclSwitch'] = request.aclSwitch;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryClusterDetail',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryClusterDetail(request: QueryClusterDetailRequest): QueryClusterDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryClusterDetailWithOptions(request, runtime);
}

model QueryClusterDiskSpecificationRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  clusterType?: string(name='ClusterType', example='ZooKeeper'),
}

model QueryClusterDiskSpecificationResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    max?: int32(name='Max', example='500'),
    min?: int32(name='Min', example='1'),
    step?: int32(name='Step', example='2'),
  }(name='Data'),
  dynamicMessage?: string(name='DynamicMessage', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='E13A3A34-7201-50C4-B2D0-0D7DB891811E'),
  success?: boolean(name='Success', example='True'),
}

model QueryClusterDiskSpecificationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryClusterDiskSpecificationResponseBody(name='body'),
}

async function queryClusterDiskSpecificationWithOptions(request: QueryClusterDiskSpecificationRequest, runtime: Util.RuntimeOptions): QueryClusterDiskSpecificationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterType)) {
    query['ClusterType'] = request.clusterType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryClusterDiskSpecification',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryClusterDiskSpecification(request: QueryClusterDiskSpecificationRequest): QueryClusterDiskSpecificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryClusterDiskSpecificationWithOptions(request, runtime);
}

model QueryClusterInfoRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='clusterNotFound', example='zh'),
  aclSwitch?: boolean(name='AclSwitch', description='illegalRequest', example='false'),
  clusterId?: string(name='ClusterId', description='duplicatedClusterAliasName', example='mse-09k1q11****'),
  instanceId?: string(name='InstanceId', description='duplicated cluster alias name', example='mse_prepaid_public_cn-7mz2t63ci03'),
  orderId?: string(name='OrderId', description='mse-100-007', example='20574710974****'),
  regionId?: string(name='RegionId', description='illegal request:%s', example='cn-hangzhou'),
  requestPars?: string(name='RequestPars', description='mse-200-021', example='{}'),
}

model QueryClusterInfoResponseBody = {
  data?: {
    aclEntryList?: string(name='AclEntryList', example='["127.0.0.0/32"]'),
    aclId?: string(name='AclId', example='acl-bp144q24cgqvzckmxxxx'),
    appVersion?: string(name='AppVersion', example='2.1.0'),
    chargeType?: string(name='ChargeType', example='POSTPAY'),
    clusterAliasName?: string(name='ClusterAliasName'),
    clusterName?: string(name='ClusterName', example='mse-74355150-xxxxxxx'),
    clusterSpecification?: string(name='ClusterSpecification', example='MSE_SC_2_4_60_c'),
    clusterType?: string(name='ClusterType', example='Nacos-Ans'),
    clusterVersion?: string(name='ClusterVersion', example='NACOS_2_0_0'),
    connectionType?: string(name='ConnectionType', example='null'),
    cpu?: int32(name='Cpu', example='null'),
    createTime?: string(name='CreateTime', example='2022-12-15 10:02:07'),
    diskCapacity?: long(name='DiskCapacity', example='null'),
    diskType?: string(name='DiskType', example='null'),
    healthStatus?: string(name='HealthStatus', example='INIT_SUCCESS'),
    initCostTime?: long(name='InitCostTime', example='53353'),
    initStatus?: string(name='InitStatus', example='INIT_SUCCESS'),
    instanceCount?: int32(name='InstanceCount', example='3'),
    instanceId?: string(name='InstanceId', example='mse-cn-st21ri2****'),
    instanceModels?: [ 
      {
        creationTimestamp?: string(name='CreationTimestamp', example='null'),
        healthStatus?: string(name='HealthStatus', example='null'),
        internetIp?: string(name='InternetIp', example='null'),
        ip?: string(name='Ip', example='null'),
        podName?: string(name='PodName', example='null'),
        role?: string(name='Role', example='null'),
        singleTunnelVip?: string(name='SingleTunnelVip', example='null'),
        zone?: string(name='Zone', example='null'),
      }
    ](name='InstanceModels'),
    internetAddress?: string(name='InternetAddress', example='null'),
    internetDomain?: string(name='InternetDomain', example='mse-xxxxxx-p.nacos-ans.mse.aliyuncs.com'),
    internetPort?: string(name='InternetPort', example='8848,6443,9848,8761'),
    intranetAddress?: string(name='IntranetAddress', example='null'),
    intranetDomain?: string(name='IntranetDomain', example='mse-xxxxx-nacos-ans.mse.aliyuncs.com'),
    intranetPort?: string(name='IntranetPort', example='8848,6443,9848,8761'),
    memoryCapacity?: long(name='MemoryCapacity', example='null'),
    mseVersion?: string(name='MseVersion', example='mse_pro'),
    netType?: string(name='NetType', example='privatenet'),
    payInfo?: string(name='PayInfo'),
    pubNetworkFlow?: string(name='PubNetworkFlow', example='1'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    tags?: map[string]any(name='Tags'),
    vSwitchId?: string(name='VSwitchId', example='vsw-bp1egfakxxxxx'),
    vpcId?: string(name='VpcId', example='vpc-bp1v5nbauzh8xxxxxxx'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  message?: string(name='Message', description='mse-100-001', example='systemError'),
  requestId?: string(name='RequestId', description='system error', example='415088B3-A7BE-56F6-9CD9-C42DE895CD41'),
  success?: boolean(name='Success', example='true'),
}

model QueryClusterInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryClusterInfoResponseBody(name='body'),
}

async function queryClusterInfoWithOptions(request: QueryClusterInfoRequest, runtime: Util.RuntimeOptions): QueryClusterInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.aclSwitch)) {
    query['AclSwitch'] = request.aclSwitch;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.requestPars)) {
    query['RequestPars'] = request.requestPars;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryClusterInfo',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryClusterInfo(request: QueryClusterInfoRequest): QueryClusterInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryClusterInfoWithOptions(request, runtime);
}

model QueryClusterSpecificationRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  connectType?: string(name='ConnectType', example='slb'),
  mseVersion?: string(name='MseVersion', example='mse_pro'),
}

model QueryClusterSpecificationResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      clusterSpecificationName?: string(name='ClusterSpecificationName', example='MSE_SC_1_2_200_c'),
      cpuCapacity?: string(name='CpuCapacity', example='1'),
      memoryCapacity?: string(name='MemoryCapacity', example='2'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='EE5C32A1-BC0E-4B79-817C-103E4EDF****'),
  success?: boolean(name='Success', example='true'),
}

model QueryClusterSpecificationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryClusterSpecificationResponseBody(name='body'),
}

async function queryClusterSpecificationWithOptions(request: QueryClusterSpecificationRequest, runtime: Util.RuntimeOptions): QueryClusterSpecificationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.connectType)) {
    query['ConnectType'] = request.connectType;
  }
  if (!Util.isUnset(request.mseVersion)) {
    query['MseVersion'] = request.mseVersion;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryClusterSpecification',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryClusterSpecification(request: QueryClusterSpecificationRequest): QueryClusterSpecificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryClusterSpecificationWithOptions(request, runtime);
}

model QueryConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='mse-09k1q11****'),
  configType?: string(name='ConfigType', description='A reserved parameter.', example='null'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse_prepaid_public_cn-st2212****'),
  needRunningConf?: boolean(name='NeedRunningConf', description='Specifies whether runtime configurations are required.', example='true'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}'),
}

model QueryConfigResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: {
    autopurgePurgeInterval?: string(name='AutopurgePurgeInterval', description='A reserved parameter.', example='none'),
    autopurgeSnapRetainCount?: string(name='AutopurgeSnapRetainCount', description='A reserved parameter.', example='none'),
    clusterName?: string(name='ClusterName', description='The name of the instance.', example='name'),
    configAuthEnabled?: boolean(name='ConfigAuthEnabled', description='Indicates whether RAM authentication of a configuration center is enabled. This parameter is valid for Nacos instances. Valid values:

*   `true`: enabled.
*   `false`: disabled.', example='true'),
    configAuthSupported?: boolean(name='ConfigAuthSupported', description='Indicates whether RAM authentication is supported by a configuration center of the instance. This parameter is valid for Nacos instances. Valid values:

*   `true`: supported.
*   `false`: not supported.', example='true'),
    configContentLimit?: long(name='ConfigContentLimit', description='The maximum size of contents in a configuration. Unit: KB.', example='100'),
    configSecretEnabled?: boolean(name='ConfigSecretEnabled', description='Indicates whether configuration encryption of a configuration center is enabled by the instance. This parameter is valid for Nacos instances. Valid values:

*   `true`: enabled.
*   `false`: disabled.', example='true'),
    configSecretSupported?: boolean(name='ConfigSecretSupported', description='Indicates whether configuration encryption of a configuration center is supported by the instance. This parameter is valid for Nacos instances. Valid values:

*   `true`: supported.
*   `false`: not supported.', example='true'),
    eurekaSupported?: boolean(name='EurekaSupported'),
    extendedTypesEnable?: boolean(name='ExtendedTypesEnable', description='Indicates whether the time to live (TTL) configuration is enabled. This parameter is valid for ZooKeeper instances.', example='true'),
    initLimit?: string(name='InitLimit', description='The maximum connection duration of the instance. Unit: seconds. This parameter is valid for ZooKeeper instances.', example='100'),
    juteMaxbuffer?: string(name='JuteMaxbuffer', description='The maximum amount of data on each node. This parameter is valid for ZooKeeper instances. Unit: bytes.', example='1'),
    jvmFlagsCustom?: string(name='JvmFlagsCustom', description='A reserved parameter.', example='none'),
    MCPEnabled?: boolean(name='MCPEnabled', description='Indicates whether Mesh Configuration Protocol (MCP) is enabled. This parameter is valid for Nacos instances. Valid values:

*   `true`: enabled.
*   `false`: disabled.', example='true'),
    MCPSupported?: boolean(name='MCPSupported', description='Indicates whether MCP is supported. This parameter is valid for Nacos instances. Valid values:

*   `true`: supported.
*   `false`: not supported.', example='true'),
    maxClientCnxns?: string(name='MaxClientCnxns', description='The number of connections between a client and a server. This parameter is valid for ZooKeeper instances.\\
If this parameter is set to 0, no limits are imposed on the number of connections.', example='0'),
    maxSessionTimeout?: string(name='MaxSessionTimeout', description='The maximum timeout period. This parameter is valid for ZooKeeper instances.', example='-1'),
    minSessionTimeout?: string(name='MinSessionTimeout', description='The minimum timeout period. This parameter is valid for ZooKeeper instances.', example='-1'),
    nacosRunningEnv?: {
      emptyProtect?: boolean(name='emptyProtect', description='Indicates whether empty list protection is enabled.', example='true'),
    }(name='NacosRunningEnv', description='The runtime configuration of the Nacos instance.'),
    namingAuthEnabled?: boolean(name='NamingAuthEnabled', description='Indicates whether RAM authentication of a registry is enabled. This parameter is valid for Nacos instances. Valid values:

*   `true`: enabled.
*   `false`: disabled.', example='false'),
    namingAuthSupported?: boolean(name='NamingAuthSupported', description='Indicates whether RAM authentication of services is supported by the instance. This parameter is valid for Nacos instances. Valid values:

*   `true`: supported.
*   `false`: not supported.', example='true'),
    namingCreateServiceSupported?: boolean(name='NamingCreateServiceSupported', description='Indicates whether service creation is supported for the instance. This parameter is valid for Nacos instances. Valid values:

*   `true`: supported.
*   `false`: not supported.', example='true'),
    openSuperAcl?: boolean(name='OpenSuperAcl', description='Indicates whether super permissions are enabled. This parameter is valid for ZooKeeper instances. Valid values:

*   `true`: enabled.
*   `false`: disabled.', example='true'),
    passWord?: string(name='PassWord', description='The password that corresponds to the username. This parameter is valid only if OpenSuperAcl is set to true.', example='password'),
    restartFlag?: boolean(name='RestartFlag', description='Indicates whether the instance was restarted and new configurations have taken effect. Valid values:

*   `true`: The restart was successful.
*   `false`: The restart failed.', example='true'),
    snapshotCount?: string(name='SnapshotCount', description='The frequency for generating snapshots. This parameter is valid for ZooKeeper instances.', example='100000'),
    syncLimit?: string(name='SyncLimit', description='The connection timeout period of the instance. This parameter is valid for ZooKeeper instances. Unit: seconds.', example='10'),
    tickTime?: string(name='TickTime', description='The time unit of the engine. This parameter is valid for ZooKeeper instances. Default value: 2000. Unit: milliseconds.', example='2000'),
    userName?: string(name='UserName', description='The username of the user. This parameter is valid only if OpenSuperAcl is set to true.', example='name'),
  }(name='Data', description='The details of the data.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request was successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8BD1E58D-0755-42AC-A599-E6B55112EC53'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model QueryConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryConfigResponseBody(name='body'),
}

async function queryConfigWithOptions(request: QueryConfigRequest, runtime: Util.RuntimeOptions): QueryConfigResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryConfig',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryConfig(request: QueryConfigRequest): QueryConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryConfigWithOptions(request, runtime);
}

model QueryGatewayRegionRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
}

model QueryGatewayRegionResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ string ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='9e78a671-4b9b-4dd4-99c1-0b9da87d3dec'),
  success?: boolean(name='Success', example='true'),
}

model QueryGatewayRegionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryGatewayRegionResponseBody(name='body'),
}

async function queryGatewayRegionWithOptions(request: QueryGatewayRegionRequest, runtime: Util.RuntimeOptions): QueryGatewayRegionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryGatewayRegion',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryGatewayRegion(request: QueryGatewayRegionRequest): QueryGatewayRegionResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryGatewayRegionWithOptions(request, runtime);
}

model QueryGatewayTypeRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
}

model QueryGatewayTypeResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ string ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='52BA6DA6-A702-4362-A32F-DFF79655****'),
  success?: boolean(name='Success', example='true'),
}

model QueryGatewayTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryGatewayTypeResponseBody(name='body'),
}

async function queryGatewayTypeWithOptions(request: QueryGatewayTypeRequest, runtime: Util.RuntimeOptions): QueryGatewayTypeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryGatewayType',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryGatewayType(request: QueryGatewayTypeRequest): QueryGatewayTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryGatewayTypeWithOptions(request, runtime);
}

model QueryGovernanceKubernetesClusterRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  clusterId?: string(name='ClusterId', description='The ID of the Kubernetes cluster.', example='c24c9354acxxxxxxx'),
  clusterName?: string(name='ClusterName', description='The name of the Kubernetes cluster.', example='example-cluster'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10'),
}

model QueryGovernanceKubernetesClusterResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: {
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    result?: [ 
      {
        clusterId?: string(name='ClusterId', description='The ID of cluster.', example='abcdef123456789'),
        clusterName?: string(name='ClusterName', description='The name of the cluster.', example='example-cluster'),
        k8sVersion?: string(name='K8sVersion', description='The version of the cluster.', example='1.22'),
        namespaceInfos?: string(name='NamespaceInfos', description='The information of the namespace.', example='[{"Name":"ack-onepilot","Tags":{"name":"ack-onepilot"}}]'),
        pilotStartTime?: string(name='PilotStartTime', description='The time when the ack-onepilot component was started.', example='2022-05-17T05:39:43.000+0000'),
        region?: string(name='Region', description='The region where the cluster resides.', example='cn-shanghai'),
      }
    ](name='Result', description='The data structure.'),
    totalSize?: int32(name='TotalSize', description='The total number of clusters.', example='3'),
  }(name='Data', description='The response data.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DE34D413-2B79-5E77-9696-36D875E822AD'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model QueryGovernanceKubernetesClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryGovernanceKubernetesClusterResponseBody(name='body'),
}

async function queryGovernanceKubernetesClusterWithOptions(request: QueryGovernanceKubernetesClusterRequest, runtime: Util.RuntimeOptions): QueryGovernanceKubernetesClusterResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryGovernanceKubernetesCluster',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryGovernanceKubernetesCluster(request: QueryGovernanceKubernetesClusterRequest): QueryGovernanceKubernetesClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryGovernanceKubernetesClusterWithOptions(request, runtime);
}

model QueryInstancesInfoRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The ID of the cluster.', example='zh'),
  clusterId?: string(name='ClusterId', description='clusterNotFound', example='mse-09k1q11****'),
  instanceId?: string(name='InstanceId', description='cluster not found', example='mse_prepaid_public_cn-tl32g1u9k01'),
  orderId?: string(name='OrderId', description='mse-100-001', example='20574710974****'),
  regionId?: string(name='RegionId', description='systemError', example='cn-hangzhou'),
  requestPars?: string(name='RequestPars', description='system error', example='{}'),
}

model QueryInstancesInfoResponseBody = {
  data?: [ 
    {
      clientPort?: string(name='ClientPort', description='The pod name.', example='8848'),
      creationTimestamp?: string(name='CreationTimestamp', description='A reserved parameter.', example='2022-12-15T02:02:15Z'),
      healthStatus?: string(name='HealthStatus', description='The ID of the request.', example='null'),
      internetIp?: string(name='InternetIp', description='The details of the data.', example='120.55.71.x'),
      ip?: string(name='Ip', description='The details of the data.', example='25.24.91.x'),
      podName?: string(name='PodName', description='The HTTP status code.', example='mse-xxxxx-xxxxx-reg-center-0-1'),
      role?: string(name='Role', description='The error code returned if the request failed.', example='null'),
      singleTunnelVip?: string(name='SingleTunnelVip', description='A reserved parameter.', example='172.16.66.x'),
      zone?: string(name='Zone', description='The IP address of the pod.', example='cn-hangzhou-k'),
    }
  ](name='Data', description='The message that is returned.

*   If the request is successful, a success message is returned.
*   If the request fails, an error message is returned.'),
  errorCode?: string(name='ErrorCode', description='BaseResult', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='202'),
  message?: string(name='Message', description='The ID of the region where the instance resides.', example='The extended request parameters in the JSON format.'),
  requestId?: string(name='RequestId', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='54973C90-F379-4372-9AA5-053A3F7****'),
  success?: boolean(name='Success', description='The ID of the order.', example='true'),
}

model QueryInstancesInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryInstancesInfoResponseBody(name='body'),
}

async function queryInstancesInfoWithOptions(request: QueryInstancesInfoRequest, runtime: Util.RuntimeOptions): QueryInstancesInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.requestPars)) {
    query['RequestPars'] = request.requestPars;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryInstancesInfo',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryInstancesInfo(request: QueryInstancesInfoRequest): QueryInstancesInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryInstancesInfoWithOptions(request, runtime);
}

model QueryMonitorRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The timestamp when the monitoring starts.', example='zh'),
  endTime?: long(name='EndTime', description='system error', example='1666678376'),
  instanceId?: string(name='InstanceId', description='The metric type. The following metric types are supported:

\\[Basic system metrics]

*   cpuUsage
*   memoryUsage
*   diskUsage
*   gcCount
*   gcTime

\\[Nacos registry]

*   serviceCount
*   writeCostTime
*   readCostTime
*   TPS regCenterTps
*   QPS regCenterQps

\\[Nacos configuration center]

*   publish
*   getConfig

\\[zookeeper]

*   TPS zk_TpsCount
*   QPS zk_QpsCount
*   zookeeper_AvgRequestLatency', example='mse-cn-****'),
  monitorType?: string(name='MonitorType', description='mse-100-001', example='regCenterQps'),
  requestPars?: string(name='RequestPars', description='cluster not found', example='{}'),
  startTime?: long(name='StartTime', description='systemError', example='1666678376'),
  step?: long(name='Step', description='The extended request parameters in the JSON format.', example='7'),
}

model QueryMonitorResponseBody = {
  data?: [ 
    {
      clusterNamePrefix?: string(name='clusterNamePrefix', description='The ID of the request.', example='mse-xxxx-xxxxxx'),
      podName?: string(name='podName', description='The request was successfully processed.', example='mse-xxxxxx-xxxxxx-reg-center-0-0'),
      values?: [  map[string]any ](name='values', description='The details of the data.'),
    }
  ](name='Data', description='The data structure.', example='6'),
  errorCode?: string(name='ErrorCode', description='The name of the pod.', example='mse-100-000'),
  message?: string(name='Message', description='The interval between data points. Unit: seconds.', example='The ID of the instance.'),
  requestId?: string(name='RequestId', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='ADDD8AB7-8D1C-4697-A83E-410D2607****'),
  success?: boolean(name='Success', description='The prefix of the name.', example='true'),
}

model QueryMonitorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryMonitorResponseBody(name='body'),
}

async function queryMonitorWithOptions(request: QueryMonitorRequest, runtime: Util.RuntimeOptions): QueryMonitorResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.monitorType)) {
    query['MonitorType'] = request.monitorType;
  }
  if (!Util.isUnset(request.requestPars)) {
    query['RequestPars'] = request.requestPars;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.step)) {
    query['Step'] = request.step;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryMonitor',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryMonitor(request: QueryMonitorRequest): QueryMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryMonitorWithOptions(request, runtime);
}

model QueryNamespaceRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  name?: string(name='Name', example='default'),
  region?: string(name='Region', example='cn-hangzhou'),
}

model QueryNamespaceResponseBody = {
  data?: [ 
    {
      namespace?: string(name='Namespace', example='default'),
      region?: string(name='Region', example='cn-hangzhou'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', description='HttpStatusCode。', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='abcde-fg'),
  success?: boolean(name='Success', example='true'),
}

model QueryNamespaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryNamespaceResponseBody(name='body'),
}

async function queryNamespaceWithOptions(request: QueryNamespaceRequest, runtime: Util.RuntimeOptions): QueryNamespaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryNamespace',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryNamespace(request: QueryNamespaceRequest): QueryNamespaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryNamespaceWithOptions(request, runtime);
}

model QuerySlbSpecRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
}

model QuerySlbSpecResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      id?: int32(name='Id', example='2'),
      maxConnection?: string(name='MaxConnection', example='50,000'),
      name?: string(name='Name'),
      newConnectionPerSecond?: string(name='NewConnectionPerSecond', example='50,000'),
      qps?: string(name='Qps', example='50,000'),
      spec?: string(name='Spec', example='slb.s2.small'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', example='true'),
}

model QuerySlbSpecResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySlbSpecResponseBody(name='body'),
}

async function querySlbSpecWithOptions(request: QuerySlbSpecRequest, runtime: Util.RuntimeOptions): QuerySlbSpecResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySlbSpec',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySlbSpec(request: QuerySlbSpecRequest): QuerySlbSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySlbSpecWithOptions(request, runtime);
}

model QuerySwimmingLaneByIdRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The ID of the lane.', example='zh'),
  laneId?: long(name='LaneId', description='system error', example='250'),
  namespace?: string(name='Namespace', description='MSE命名空间名字', example='default'),
}

model QuerySwimmingLaneByIdResponseBody = {
  code?: int32(name='Code', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='200'),
  data?: any(name='Data', description='The dynamic part in the error message.', example='{id:102,name:"test"}'),
  dynamicMessage?: string(name='DynamicMessage', description='The request was successfully processed.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The status code. A value of 200 is returned if the request is successful.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The error code returned if the request failed.', example='200'),
  message?: string(name='Message', description='The HTTP status code returned.', example='The message returned.'),
  requestId?: string(name='RequestId', description='RestResult', example='69AD2AA7-DB47-449B-941B-B14409DF****'),
  success?: boolean(name='Success', description='The ID of the request.', example='true'),
}

model QuerySwimmingLaneByIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySwimmingLaneByIdResponseBody(name='body'),
}

async function querySwimmingLaneByIdWithOptions(request: QuerySwimmingLaneByIdRequest, runtime: Util.RuntimeOptions): QuerySwimmingLaneByIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.laneId)) {
    query['LaneId'] = request.laneId;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySwimmingLaneById',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySwimmingLaneById(request: QuerySwimmingLaneByIdRequest): QuerySwimmingLaneByIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySwimmingLaneByIdWithOptions(request, runtime);
}

model QueryZnodeDetailRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  clusterId?: string(name='ClusterId', example='mse-09k1q11****'),
  instanceId?: string(name='InstanceId', example='mse-cn-5bffa4e8630'),
  path?: string(name='Path', example='/zookeeper'),
  requestPars?: string(name='RequestPars', example='{}'),
}

model QueryZnodeDetailResponseBody = {
  data?: {
    data?: string(name='Data', example='cluster'),
    dir?: boolean(name='Dir', example='true'),
    name?: string(name='Name', example='zookeeper'),
    path?: string(name='Path', example='/zookeeper'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='58E06A0A-BD2C-47A0-99C2-B100F353****'),
  success?: string(name='Success', example='true'),
}

model QueryZnodeDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryZnodeDetailResponseBody(name='body'),
}

async function queryZnodeDetailWithOptions(request: QueryZnodeDetailRequest, runtime: Util.RuntimeOptions): QueryZnodeDetailResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryZnodeDetail',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryZnodeDetail(request: QueryZnodeDetailRequest): QueryZnodeDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryZnodeDetailWithOptions(request, runtime);
}

model RestartClusterRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  clusterId?: string(name='ClusterId', example='mse-09k1q11****'),
  instanceId?: string(name='InstanceId', example='mse-cn-78v1l83****'),
  podNameList?: string(name='PodNameList', example='mse-a8aba010-1629719288255-reg-center-0-1'),
  requestPars?: string(name='RequestPars', example='{}'),
}

model RestartClusterResponseBody = {
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='5B170A0D-2C5D-4CF8-B808-03966B86****'),
  success?: boolean(name='Success', example='true'),
}

model RestartClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RestartClusterResponseBody(name='body'),
}

async function restartClusterWithOptions(request: RestartClusterRequest, runtime: Util.RuntimeOptions): RestartClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.podNameList)) {
    query['PodNameList'] = request.podNameList;
  }
  if (!Util.isUnset(request.requestPars)) {
    query['RequestPars'] = request.requestPars;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RestartCluster',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function restartCluster(request: RestartClusterRequest): RestartClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return restartClusterWithOptions(request, runtime);
}

model RetryClusterRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  instanceId?: string(name='InstanceId', example='mse-cn-st21ri2****'),
  requestPars?: string(name='RequestPars', example='{}'),
}

model RetryClusterResponseBody = {
  errorCode?: string(name='ErrorCode', example='NoPermission'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='DC34E4A3-5F1C-4E40-86EA-02EDF967****'),
  success?: boolean(name='Success', example='true'),
}

model RetryClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RetryClusterResponseBody(name='body'),
}

async function retryClusterWithOptions(request: RetryClusterRequest, runtime: Util.RuntimeOptions): RetryClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.requestPars)) {
    query['RequestPars'] = request.requestPars;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RetryCluster',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function retryCluster(request: RetryClusterRequest): RetryClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return retryClusterWithOptions(request, runtime);
}

model SelectGatewaySlbRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-492af9b04bb4474cae9d645be850****'),
  name?: string(name='Name', example='test-slb'),
  type?: string(name='Type', example='PUB_NET'),
}

model SelectGatewaySlbResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      slbId?: string(name='SlbId', example='lb-bp14lqiw5n96hq2****'),
      slbName?: string(name='SlbName', example='MseGatewaySlb-gw'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='E00C6D90-A28A-5813-8981-0459AA436F46'),
  success?: boolean(name='Success', example='true'),
}

model SelectGatewaySlbResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SelectGatewaySlbResponseBody(name='body'),
}

async function selectGatewaySlbWithOptions(request: SelectGatewaySlbRequest, runtime: Util.RuntimeOptions): SelectGatewaySlbResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SelectGatewaySlb',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function selectGatewaySlb(request: SelectGatewaySlbRequest): SelectGatewaySlbResponse {
  var runtime = new Util.RuntimeOptions{};
  return selectGatewaySlbWithOptions(request, runtime);
}

model TagResourcesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId', description='The instance ID.

> This parameter specifies the instance ID that is passed. Examples:

*   **ResourceId.1** specifies that the first instance ID is passed.
*   **ResourceId.2** specifies that the second instance ID is passed.'),
  resourceType?: string(name='ResourceType', description='The type of the resources. Valid values:

*   CLUSTER: Microservices Engine (MSE) instance
*   GATEWAY: cloud-native gateway', example='CLUSTER'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key. Valid values of N: 1 to 20. The tag key cannot be an empty string. The tag key must be 1 to 128 characters in length. The tag key cannot start with acs: or aliyun or contain [http:// or https://.](http://https://。)', example='env'),
      value?: string(name='Value', description='The value of the tag.', example='prd'),
    }
  ](name='Tag', description='The list of tags. You can specify a maximum of 20 tags.'),
}

model TagResourcesResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  message?: string(name='Message', description='The message returned.', example='The request was successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E0A79810-9396-521C-A09D-E757B3E2BAF4'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TagResources',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UntagResourcesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  all?: boolean(name='All', description='Specifies whether to delete all tags. This parameter takes effect only when the TagKey.N parameter is not specified. Valid values:

*   true
*   false

Default value: false.', example='true'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId', description='The resource IDs. A maximum of 50 resource IDs can be specified.'),
  resourceType?: string(name='ResourceType', description='The type of the resource. Valid values:

*   CLUSTER: MSE instance
*   GATEWAY: cloud-native gateway', example='CLUSTER'),
  tagKey?: [ string ](name='TagKey', description='The tag keys. A maximum of 20 tag keys are supported.'),
}

model UntagResourcesResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  message?: string(name='Message', description='The message returned.', example='The request was successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='58E06A0A-BD2C-47A0-99C2-B100F353****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.all)) {
    query['All'] = request.all;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UntagResources',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model UpdateAclRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  aclEntryList?: string(name='AclEntryList', example='192.168.0.0/XX,192.168.0.0/XX'),
  instanceId?: string(name='InstanceId', example='mse-cn-78v1l83****'),
}

model UpdateAclResponseBody = {
  errorCode?: string(name='ErrorCode', example='mse-100-100'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='7466566F-F30F-4A29-965D-3E0AF21D****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateAclResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAclResponseBody(name='body'),
}

async function updateAclWithOptions(request: UpdateAclRequest, runtime: Util.RuntimeOptions): UpdateAclResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.aclEntryList)) {
    query['AclEntryList'] = request.aclEntryList;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAcl',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateAcl(request: UpdateAclRequest): UpdateAclResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAclWithOptions(request, runtime);
}

model UpdateBlackWhiteListRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  content?: string(name='Content', description='The content of the blacklist.', example='127.0.2.11'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-c70622ff52fe49beb29bea9a6f52****'),
  id?: long(name='Id', description='The ID of the blacklist.', example='1'),
  isWhite?: boolean(name='IsWhite', description='Specifies whether to enable the whitelist.', example='true'),
  name?: string(name='Name', description='The name.', example='name'),
  note?: string(name='Note', description='The description.', example='this is a note'),
  resourceIdJsonList?: string(name='ResourceIdJsonList', description='The resource IDs in the JSON format.', example='[123]'),
  resourceType?: string(name='ResourceType', description='The type of the resource.', example='GATEWAY'),
  status?: string(name='Status', description='Specifies whether to enable the blacklist or whitelist.', example='on'),
  type?: string(name='Type', description='The type of the blacklist or whitelist.', example='IP'),
}

model UpdateBlackWhiteListResponseBody = {
  code?: int32(name='Code', description='The return value.', example='200'),
  data?: long(name='Data', description='The ID of the record.', example='13'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='AD5DEDA0-C82A-50D9-AF54-BD3576CCFB4C'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model UpdateBlackWhiteListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateBlackWhiteListResponseBody(name='body'),
}

async function updateBlackWhiteListWithOptions(request: UpdateBlackWhiteListRequest, runtime: Util.RuntimeOptions): UpdateBlackWhiteListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.isWhite)) {
    query['IsWhite'] = request.isWhite;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.note)) {
    query['Note'] = request.note;
  }
  if (!Util.isUnset(request.resourceIdJsonList)) {
    query['ResourceIdJsonList'] = request.resourceIdJsonList;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateBlackWhiteList',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateBlackWhiteList(request: UpdateBlackWhiteListRequest): UpdateBlackWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateBlackWhiteListWithOptions(request, runtime);
}

model UpdateClusterRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  clusterAliasName?: string(name='ClusterAliasName', example='cluster-1'),
  instanceId?: string(name='InstanceId', example='mse-cn-78v1l83****'),
  requestPars?: string(name='RequestPars', example='{}'),
}

model UpdateClusterResponseBody = {
  errorCode?: string(name='ErrorCode', example='mse-100-100'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='5B170A0D-2C5D-4CF8-B808-03966B86****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateClusterResponseBody(name='body'),
}

async function updateClusterWithOptions(request: UpdateClusterRequest, runtime: Util.RuntimeOptions): UpdateClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterAliasName)) {
    query['ClusterAliasName'] = request.clusterAliasName;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.requestPars)) {
    query['RequestPars'] = request.requestPars;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateCluster',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateCluster(request: UpdateClusterRequest): UpdateClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateClusterWithOptions(request, runtime);
}

model UpdateClusterSpecRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='system error', example='zh'),
  clusterId?: string(name='ClusterId', description='mse-200-021', example='mse-09k1q11****'),
  clusterSpecification?: string(name='ClusterSpecification', description='mse-100-001', example='MSE_SC_2_4_200_c'),
  instanceCount?: int32(name='InstanceCount', description='cluster not found', example='3'),
  instanceId?: string(name='InstanceId', description='clusterNotFound', example='mse-cn-st21ri2****'),
  mseVersion?: string(name='MseVersion', description='systemError', example='mse_pro'),
}

model UpdateClusterSpecResponseBody = {
  code?: int32(name='Code', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='200'),
  data?: string(name='Data', description='The ID of the request.', example='null'),
  errorCode?: string(name='ErrorCode', description='The HTTP status code returned.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The number of destination nodes.', example='200'),
  message?: string(name='Message', description='The destination engine specifications.', example='The MSE version.'),
  requestId?: string(name='RequestId', description='The ID of the instance.', example='5B170A0D-2C5D-4CF8-B808-03966B86****'),
  success?: boolean(name='Success', description='The data structure.', example='true'),
}

model UpdateClusterSpecResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateClusterSpecResponseBody(name='body'),
}

/**
  * MSE_SC_2_4_200_c
  *
  * @param request UpdateClusterSpecRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateClusterSpecResponse
 */
async function updateClusterSpecWithOptions(request: UpdateClusterSpecRequest, runtime: Util.RuntimeOptions): UpdateClusterSpecResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.clusterSpecification)) {
    query['ClusterSpecification'] = request.clusterSpecification;
  }
  if (!Util.isUnset(request.instanceCount)) {
    query['InstanceCount'] = request.instanceCount;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.mseVersion)) {
    query['MseVersion'] = request.mseVersion;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateClusterSpec',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * MSE_SC_2_4_200_c
  *
  * @param request UpdateClusterSpecRequest
  * @return UpdateClusterSpecResponse
 */
async function updateClusterSpec(request: UpdateClusterSpecRequest): UpdateClusterSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateClusterSpecWithOptions(request, runtime);
}

model UpdateConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  autopurgePurgeInterval?: string(name='AutopurgePurgeInterval', example='none'),
  autopurgeSnapRetainCount?: string(name='AutopurgeSnapRetainCount', example='none'),
  clusterId?: string(name='ClusterId', example='mse-09k1q11****'),
  configAuthEnabled?: boolean(name='ConfigAuthEnabled', example='true'),
  configSecretEnabled?: boolean(name='ConfigSecretEnabled', example='true'),
  configType?: string(name='ConfigType', example='TEXT'),
  eurekaSupported?: boolean(name='EurekaSupported', example='true'),
  extendedTypesEnable?: string(name='ExtendedTypesEnable', example='true'),
  initLimit?: string(name='InitLimit', example='100'),
  instanceId?: string(name='InstanceId', example='mse_prepaid_public_cn-st2212****'),
  juteMaxbuffer?: string(name='JuteMaxbuffer', example='1048575'),
  MCPEnabled?: boolean(name='MCPEnabled', example='true'),
  maxClientCnxns?: string(name='MaxClientCnxns', example='0'),
  maxSessionTimeout?: string(name='MaxSessionTimeout', example='1000'),
  minSessionTimeout?: string(name='MinSessionTimeout', example='10'),
  namingAuthEnabled?: boolean(name='NamingAuthEnabled', example='true'),
  openSuperAcl?: string(name='OpenSuperAcl', example='true'),
  passWord?: string(name='PassWord', example='password'),
  requestPars?: string(name='RequestPars', example='{}'),
  snapshotCount?: string(name='SnapshotCount', example='100000'),
  syncLimit?: string(name='SyncLimit', example='10'),
  tickTime?: string(name='TickTime', example='2000'),
  userName?: string(name='UserName', example='name'),
}

model UpdateConfigResponseBody = {
  code?: int32(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='8BD1E58D-0755-42AC-A599-E6B55112****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateConfigResponseBody(name='body'),
}

async function updateConfigWithOptions(request: UpdateConfigRequest, runtime: Util.RuntimeOptions): UpdateConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.autopurgePurgeInterval)) {
    query['AutopurgePurgeInterval'] = request.autopurgePurgeInterval;
  }
  if (!Util.isUnset(request.autopurgeSnapRetainCount)) {
    query['AutopurgeSnapRetainCount'] = request.autopurgeSnapRetainCount;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.configAuthEnabled)) {
    query['ConfigAuthEnabled'] = request.configAuthEnabled;
  }
  if (!Util.isUnset(request.configSecretEnabled)) {
    query['ConfigSecretEnabled'] = request.configSecretEnabled;
  }
  if (!Util.isUnset(request.configType)) {
    query['ConfigType'] = request.configType;
  }
  if (!Util.isUnset(request.eurekaSupported)) {
    query['EurekaSupported'] = request.eurekaSupported;
  }
  if (!Util.isUnset(request.extendedTypesEnable)) {
    query['ExtendedTypesEnable'] = request.extendedTypesEnable;
  }
  if (!Util.isUnset(request.initLimit)) {
    query['InitLimit'] = request.initLimit;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.juteMaxbuffer)) {
    query['JuteMaxbuffer'] = request.juteMaxbuffer;
  }
  if (!Util.isUnset(request.MCPEnabled)) {
    query['MCPEnabled'] = request.MCPEnabled;
  }
  if (!Util.isUnset(request.maxClientCnxns)) {
    query['MaxClientCnxns'] = request.maxClientCnxns;
  }
  if (!Util.isUnset(request.maxSessionTimeout)) {
    query['MaxSessionTimeout'] = request.maxSessionTimeout;
  }
  if (!Util.isUnset(request.minSessionTimeout)) {
    query['MinSessionTimeout'] = request.minSessionTimeout;
  }
  if (!Util.isUnset(request.namingAuthEnabled)) {
    query['NamingAuthEnabled'] = request.namingAuthEnabled;
  }
  if (!Util.isUnset(request.passWord)) {
    query['PassWord'] = request.passWord;
  }
  if (!Util.isUnset(request.requestPars)) {
    query['RequestPars'] = request.requestPars;
  }
  if (!Util.isUnset(request.snapshotCount)) {
    query['SnapshotCount'] = request.snapshotCount;
  }
  if (!Util.isUnset(request.syncLimit)) {
    query['SyncLimit'] = request.syncLimit;
  }
  if (!Util.isUnset(request.tickTime)) {
    query['TickTime'] = request.tickTime;
  }
  if (!Util.isUnset(request.userName)) {
    query['UserName'] = request.userName;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.openSuperAcl)) {
    body['OpenSuperAcl'] = request.openSuperAcl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateConfig',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateConfig(request: UpdateConfigRequest): UpdateConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateConfigWithOptions(request, runtime);
}

model UpdateEngineNamespaceRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  clusterId?: string(name='ClusterId', example='mse-09k1q11****'),
  desc?: string(name='Desc', example='public'),
  id?: string(name='Id', example='33ff74b6-d21e-4f9b-91a8-bc1ea4ef****'),
  instanceId?: string(name='InstanceId', example='mse-cn-st21ri2****'),
  name?: string(name='Name', example='name'),
  serviceCount?: int32(name='ServiceCount', example='3'),
}

model UpdateEngineNamespaceResponseBody = {
  data?: {
    configCount?: int32(name='ConfigCount', example='1'),
    namespace?: string(name='Namespace', example='public'),
    namespaceDesc?: string(name='NamespaceDesc', example='mytest'),
    namespaceShowName?: string(name='NamespaceShowName', example='mytestshowname'),
    quota?: int32(name='Quota', example='1'),
    type?: int32(name='Type', example='1'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='4E9FDCFE-0738-493B-B801-82BDFBCB****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateEngineNamespaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateEngineNamespaceResponseBody(name='body'),
}

async function updateEngineNamespaceWithOptions(request: UpdateEngineNamespaceRequest, runtime: Util.RuntimeOptions): UpdateEngineNamespaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.desc)) {
    query['Desc'] = request.desc;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.serviceCount)) {
    query['ServiceCount'] = request.serviceCount;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateEngineNamespace',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateEngineNamespace(request: UpdateEngineNamespaceRequest): UpdateEngineNamespaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateEngineNamespaceWithOptions(request, runtime);
}

model UpdateGatewayAuthConsumerRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  description?: string(name='Description'),
  encodeType?: string(name='EncodeType', example='RSA'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-90392d768a3847a7b804c505254d****'),
  id?: long(name='Id', example='63'),
  jwks?: string(name='Jwks', example='{"keys":[{"e":"AQAB","kid":"DHFbpoIUqrY8t2zpA2qXfCmr5VO5ZEr4RzHU_-envvQ","kty":"RSA","n":"xAE7eB6qugXyCAG3yhh7pkDkT65pHymX-P7KfIupjf59vsdo91bSP9C8H07pSAGQO1MV_xFj9VswgsCg4R6otmg5PV2He95lZdHtOcU5DXIg_pbhLdKXbi66GlVeK6ABZOUW3WYtnNHD-91gVuoeJT_DwtGGcp4ignkgXfkiEm4sw-4sfb4qdt5oLbyVpmW6x9cfa7vs2WTfURiCrBoUqgBo_-4WTiULmmHSGZHOjzwa8WtrtOQGsAFjIbno85jp6MnGGGZPYZbDAa_b3y5u-YpW7ypZrvD8BgtKVjgtQgZhLAGezMt0ua3DRrWnKqTZ0BJ_EyxOGuHJrLsn00fnMQ"}]}'),
  keyName?: string(name='KeyName', example='iss'),
  keyValue?: string(name='KeyValue', example='abcd'),
  tokenName?: string(name='TokenName', example='Authorization'),
  tokenPass?: boolean(name='TokenPass', example='true'),
  tokenPosition?: string(name='TokenPosition', example='HEADER'),
  tokenPrefix?: string(name='TokenPrefix', example='Bearer'),
}

model UpdateGatewayAuthConsumerResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: long(name='Data', example='2'),
  dynamicCode?: string(name='DynamicCode', example='code'),
  dynamicMessage?: string(name='DynamicMessage', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='EE5C32A1-BC0E-4B79-817C-103E4EDF****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateGatewayAuthConsumerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateGatewayAuthConsumerResponseBody(name='body'),
}

async function updateGatewayAuthConsumerWithOptions(request: UpdateGatewayAuthConsumerRequest, runtime: Util.RuntimeOptions): UpdateGatewayAuthConsumerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.encodeType)) {
    query['EncodeType'] = request.encodeType;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.jwks)) {
    query['Jwks'] = request.jwks;
  }
  if (!Util.isUnset(request.keyName)) {
    query['KeyName'] = request.keyName;
  }
  if (!Util.isUnset(request.keyValue)) {
    query['KeyValue'] = request.keyValue;
  }
  if (!Util.isUnset(request.tokenName)) {
    query['TokenName'] = request.tokenName;
  }
  if (!Util.isUnset(request.tokenPass)) {
    query['TokenPass'] = request.tokenPass;
  }
  if (!Util.isUnset(request.tokenPosition)) {
    query['TokenPosition'] = request.tokenPosition;
  }
  if (!Util.isUnset(request.tokenPrefix)) {
    query['TokenPrefix'] = request.tokenPrefix;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateGatewayAuthConsumer',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateGatewayAuthConsumer(request: UpdateGatewayAuthConsumerRequest): UpdateGatewayAuthConsumerResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGatewayAuthConsumerWithOptions(request, runtime);
}

model UpdateGatewayAuthConsumerResourceRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  consumerId?: long(name='ConsumerId', example='2'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='UpdateGatewayAuthConsumerResource', example='gw-3f97e2989c344f35ab3fd62b19f1****'),
  resourceList?: [ 
    {
      routeId?: long(name='RouteId', example='7816'),
      routeName?: string(name='RouteName', example='helo'),
    }
  ](name='ResourceList'),
}

model UpdateGatewayAuthConsumerResourceShrinkRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  consumerId?: long(name='ConsumerId', example='2'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='UpdateGatewayAuthConsumerResource', example='gw-3f97e2989c344f35ab3fd62b19f1****'),
  resourceListShrink?: string(name='ResourceList'),
}

model UpdateGatewayAuthConsumerResourceResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  dynamicCode?: string(name='DynamicCode', example='code'),
  dynamicMessage?: string(name='DynamicMessage', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateGatewayAuthConsumerResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateGatewayAuthConsumerResourceResponseBody(name='body'),
}

async function updateGatewayAuthConsumerResourceWithOptions(tmpReq: UpdateGatewayAuthConsumerResourceRequest, runtime: Util.RuntimeOptions): UpdateGatewayAuthConsumerResourceResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateGatewayAuthConsumerResourceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.resourceList)) {
    request.resourceListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resourceList, 'ResourceList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.consumerId)) {
    query['ConsumerId'] = request.consumerId;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.resourceListShrink)) {
    query['ResourceList'] = request.resourceListShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateGatewayAuthConsumerResource',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateGatewayAuthConsumerResource(request: UpdateGatewayAuthConsumerResourceRequest): UpdateGatewayAuthConsumerResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGatewayAuthConsumerResourceWithOptions(request, runtime);
}

model UpdateGatewayAuthConsumerResourceStatusRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  consumerId?: long(name='ConsumerId', example='2'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-2a99625886d54722be94d92e9a69****'),
  idList?: string(name='IdList', example='1,2,3,4'),
  resourceStatus?: boolean(name='ResourceStatus', example='true'),
}

model UpdateGatewayAuthConsumerResourceStatusResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  dynamicCode?: string(name='DynamicCode', example='code'),
  dynamicMessage?: string(name='DynamicMessage', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateGatewayAuthConsumerResourceStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateGatewayAuthConsumerResourceStatusResponseBody(name='body'),
}

async function updateGatewayAuthConsumerResourceStatusWithOptions(request: UpdateGatewayAuthConsumerResourceStatusRequest, runtime: Util.RuntimeOptions): UpdateGatewayAuthConsumerResourceStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.consumerId)) {
    query['ConsumerId'] = request.consumerId;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.idList)) {
    query['IdList'] = request.idList;
  }
  if (!Util.isUnset(request.resourceStatus)) {
    query['ResourceStatus'] = request.resourceStatus;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateGatewayAuthConsumerResourceStatus',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateGatewayAuthConsumerResourceStatus(request: UpdateGatewayAuthConsumerResourceStatusRequest): UpdateGatewayAuthConsumerResourceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGatewayAuthConsumerResourceStatusWithOptions(request, runtime);
}

model UpdateGatewayAuthConsumerStatusRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  consumerStatus?: boolean(name='ConsumerStatus', example='true'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-685f661467b54f48b7b7a76605ce****'),
  id?: long(name='Id', example='1'),
}

model UpdateGatewayAuthConsumerStatusResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  dynamicCode?: string(name='DynamicCode', example='code'),
  dynamicMessage?: string(name='DynamicMessage', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='56D9E600-6348-4260-B35F-583413F****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateGatewayAuthConsumerStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateGatewayAuthConsumerStatusResponseBody(name='body'),
}

async function updateGatewayAuthConsumerStatusWithOptions(request: UpdateGatewayAuthConsumerStatusRequest, runtime: Util.RuntimeOptions): UpdateGatewayAuthConsumerStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.consumerStatus)) {
    query['ConsumerStatus'] = request.consumerStatus;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateGatewayAuthConsumerStatus',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateGatewayAuthConsumerStatus(request: UpdateGatewayAuthConsumerStatusRequest): UpdateGatewayAuthConsumerStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGatewayAuthConsumerStatusWithOptions(request, runtime);
}

model UpdateGatewayDomainRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  certIdentifier?: string(name='CertIdentifier', example='6209108-cn-hangzhou'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-86575c0bc9f04ecfbacb92b8e392****'),
  http2?: string(name='Http2', example='close'),
  id?: long(name='Id', example='94'),
  mustHttps?: boolean(name='MustHttps', example='false'),
  protocol?: string(name='Protocol', example='HTTPS'),
  tlsMax?: string(name='TlsMax', example='TLS 1.3'),
  tlsMin?: string(name='TlsMin', example='TLS 1.0'),
}

model UpdateGatewayDomainResponseBody = {
  code?: int32(name='Code', example='403'),
  data?: long(name='Data', example='94'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='6F6C6DE4-DB33-5791-B210-ED2E6FEFFE6F'),
  success?: boolean(name='Success', example='true'),
}

model UpdateGatewayDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateGatewayDomainResponseBody(name='body'),
}

async function updateGatewayDomainWithOptions(request: UpdateGatewayDomainRequest, runtime: Util.RuntimeOptions): UpdateGatewayDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.certIdentifier)) {
    query['CertIdentifier'] = request.certIdentifier;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.http2)) {
    query['Http2'] = request.http2;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.mustHttps)) {
    query['MustHttps'] = request.mustHttps;
  }
  if (!Util.isUnset(request.protocol)) {
    query['Protocol'] = request.protocol;
  }
  if (!Util.isUnset(request.tlsMax)) {
    query['TlsMax'] = request.tlsMax;
  }
  if (!Util.isUnset(request.tlsMin)) {
    query['TlsMin'] = request.tlsMin;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateGatewayDomain',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateGatewayDomain(request: UpdateGatewayDomainRequest): UpdateGatewayDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGatewayDomainWithOptions(request, runtime);
}

model UpdateGatewayNameRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-1cef54brvecdb419fb264d4f9b8c'),
  name?: string(name='Name', example='demo-test'),
}

model UpdateGatewayNameResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='8C95711F-E702-5395-BFAA-21BA946CDE47'),
  success?: boolean(name='Success', example='true'),
}

model UpdateGatewayNameResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateGatewayNameResponseBody(name='body'),
}

async function updateGatewayNameWithOptions(request: UpdateGatewayNameRequest, runtime: Util.RuntimeOptions): UpdateGatewayNameResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateGatewayName',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateGatewayName(request: UpdateGatewayNameRequest): UpdateGatewayNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGatewayNameWithOptions(request, runtime);
}

model UpdateGatewayOptionRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  gatewayId?: long(name='GatewayId', example='421'),
  gatewayOption?: GatewayOption(name='GatewayOption'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-83b0ddb569434f82b9fe8e4c60c4****'),
}

model UpdateGatewayOptionShrinkRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  gatewayId?: long(name='GatewayId', example='421'),
  gatewayOptionShrink?: string(name='GatewayOption'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-83b0ddb569434f82b9fe8e4c60c4****'),
}

model UpdateGatewayOptionResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: GatewayOption(name='Data', example='{\\"LogConfigDetails\\": {\\"LogEnabled\\": True}, \\"TraceDetails\\": {\\"Sample\\": 17, \\"TraceEnabled\\": True}}'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='124D02EB-DBDD-534D-A701-B4A95D3D****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateGatewayOptionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateGatewayOptionResponseBody(name='body'),
}

async function updateGatewayOptionWithOptions(tmpReq: UpdateGatewayOptionRequest, runtime: Util.RuntimeOptions): UpdateGatewayOptionResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateGatewayOptionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.gatewayOption)) {
    request.gatewayOptionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.gatewayOption, 'GatewayOption', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.gatewayOptionShrink)) {
    query['GatewayOption'] = request.gatewayOptionShrink;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateGatewayOption',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateGatewayOption(request: UpdateGatewayOptionRequest): UpdateGatewayOptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGatewayOptionWithOptions(request, runtime);
}

model UpdateGatewayRouteRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  destinationType?: string(name='DestinationType', example='Mock'),
  directResponseJSON?: {
    body?: string(name='Body', example='hello'),
    code?: long(name='Code', example='200'),
  }(name='DirectResponseJSON'),
  domainIdListJSON?: string(name='DomainIdListJSON', example='[90]'),
  enableWaf?: boolean(name='EnableWaf', example='false'),
  fallback?: boolean(name='Fallback', example='true'),
  fallbackServices?: [ 
    {
      agreementType?: string(name='AgreementType', example='DUBBO'),
      groupName?: string(name='GroupName', example='test'),
      name?: string(name='Name', example='name'),
      namespace?: string(name='Namespace', example='Namespace'),
      percent?: int32(name='Percent', example='80'),
      serviceId?: long(name='ServiceId', example='1'),
      servicePort?: int32(name='ServicePort', example='8848'),
      sourceType?: string(name='SourceType', example='MSE'),
      version?: string(name='Version', example='v1'),
    }
  ](name='FallbackServices'),
  gatewayId?: long(name='GatewayId', example='501'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-86575c0bc9f04ecfbacb92b8e392a2c4'),
  id?: long(name='Id', example='139'),
  name?: string(name='Name', example='route-web'),
  predicates?: {
    headerPredicates?: [ 
      {
        key?: string(name='Key', example='debug'),
        type?: string(name='Type', example='PRE'),
        value?: string(name='Value', example='on'),
      }
    ](name='HeaderPredicates'),
    methodPredicates?: [ string ](name='MethodPredicates'),
    pathPredicates?: {
      ignoreCase?: boolean(name='IgnoreCase', example='true'),
      path?: string(name='Path', example='/test'),
      type?: string(name='Type', example='PRE'),
    }(name='PathPredicates'),
    queryPredicates?: [ 
      {
        key?: string(name='Key', example='userid'),
        type?: string(name='Type', example='PRE'),
        value?: string(name='Value', example='test'),
      }
    ](name='QueryPredicates'),
  }(name='Predicates'),
  redirectJSON?: {
    code?: int32(name='Code', example='302'),
    host?: string(name='Host', example='test.com'),
    path?: string(name='Path', example='/test'),
  }(name='RedirectJSON'),
  routeOrder?: int32(name='RouteOrder', example='1'),
  services?: [ 
    {
      agreementType?: string(name='AgreementType', example='DUBBO'),
      groupName?: string(name='GroupName', example='test'),
      httpDubboTranscoder?: {
        dubboServiceGroup?: string(name='DubboServiceGroup', example='service name'),
        dubboServiceName?: string(name='DubboServiceName', example='org.apache.dubbo.samples.basic.api.DemoService'),
        dubboServiceVersion?: string(name='DubboServiceVersion', example='0.0.0'),
        mothedMapList?: [ 
          {
            dubboMothedName?: string(name='DubboMothedName', example='sayHello'),
            httpMothed?: string(name='HttpMothed', example='ALL_GET'),
            mothedpath?: string(name='Mothedpath', example='/mytestzbk/sayhello'),
            paramMapsList?: [ 
              {
                extractKey?: string(name='ExtractKey', example='name'),
                extractKeySpec?: string(name='ExtractKeySpec', example='ALL_QUERY_PARAMETER'),
                mappingType?: string(name='MappingType', example='java.lang.String'),
              }
            ](name='ParamMapsList'),
            passThroughAllHeaders?: string(name='PassThroughAllHeaders', example='PASS_NOT'),
            passThroughList?: [ string ](name='PassThroughList'),
          }
        ](name='MothedMapList'),
      }(name='HttpDubboTranscoder'),
      name?: string(name='Name', example='web'),
      namespace?: string(name='Namespace', example='default'),
      percent?: int32(name='Percent', example='80'),
      serviceId?: long(name='ServiceId', example='1'),
      servicePort?: int32(name='ServicePort', example='20880'),
      sourceType?: string(name='SourceType', example='MSE'),
      version?: string(name='Version', example='v1'),
    }
  ](name='Services'),
}

model UpdateGatewayRouteShrinkRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  destinationType?: string(name='DestinationType', example='Mock'),
  directResponseJSONShrink?: string(name='DirectResponseJSON'),
  domainIdListJSON?: string(name='DomainIdListJSON', example='[90]'),
  enableWaf?: boolean(name='EnableWaf', example='false'),
  fallback?: boolean(name='Fallback', example='true'),
  fallbackServicesShrink?: string(name='FallbackServices'),
  gatewayId?: long(name='GatewayId', example='501'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-86575c0bc9f04ecfbacb92b8e392a2c4'),
  id?: long(name='Id', example='139'),
  name?: string(name='Name', example='route-web'),
  predicatesShrink?: string(name='Predicates'),
  redirectJSONShrink?: string(name='RedirectJSON'),
  routeOrder?: int32(name='RouteOrder', example='1'),
  servicesShrink?: string(name='Services'),
}

model UpdateGatewayRouteResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: long(name='Data', example='337'),
  errorCode?: string(name='ErrorCode', example='NoPermission'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='73785414-2C5B-5E28-BD91-B2C742269C48'),
  success?: boolean(name='Success', example='true'),
}

model UpdateGatewayRouteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateGatewayRouteResponseBody(name='body'),
}

async function updateGatewayRouteWithOptions(tmpReq: UpdateGatewayRouteRequest, runtime: Util.RuntimeOptions): UpdateGatewayRouteResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateGatewayRouteShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.directResponseJSON)) {
    request.directResponseJSONShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.directResponseJSON, 'DirectResponseJSON', 'json');
  }
  if (!Util.isUnset(tmpReq.fallbackServices)) {
    request.fallbackServicesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.fallbackServices, 'FallbackServices', 'json');
  }
  if (!Util.isUnset(tmpReq.predicates)) {
    request.predicatesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.predicates, 'Predicates', 'json');
  }
  if (!Util.isUnset(tmpReq.redirectJSON)) {
    request.redirectJSONShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.redirectJSON, 'RedirectJSON', 'json');
  }
  if (!Util.isUnset(tmpReq.services)) {
    request.servicesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.services, 'Services', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.destinationType)) {
    query['DestinationType'] = request.destinationType;
  }
  if (!Util.isUnset(request.directResponseJSONShrink)) {
    query['DirectResponseJSON'] = request.directResponseJSONShrink;
  }
  if (!Util.isUnset(request.domainIdListJSON)) {
    query['DomainIdListJSON'] = request.domainIdListJSON;
  }
  if (!Util.isUnset(request.enableWaf)) {
    query['EnableWaf'] = request.enableWaf;
  }
  if (!Util.isUnset(request.fallback)) {
    query['Fallback'] = request.fallback;
  }
  if (!Util.isUnset(request.fallbackServicesShrink)) {
    query['FallbackServices'] = request.fallbackServicesShrink;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.predicatesShrink)) {
    query['Predicates'] = request.predicatesShrink;
  }
  if (!Util.isUnset(request.redirectJSONShrink)) {
    query['RedirectJSON'] = request.redirectJSONShrink;
  }
  if (!Util.isUnset(request.routeOrder)) {
    query['RouteOrder'] = request.routeOrder;
  }
  if (!Util.isUnset(request.servicesShrink)) {
    query['Services'] = request.servicesShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateGatewayRoute',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateGatewayRoute(request: UpdateGatewayRouteRequest): UpdateGatewayRouteResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGatewayRouteWithOptions(request, runtime);
}

model UpdateGatewayRouteAuthRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  authJSON?: {
    type?: string(name='Type', example='JWT'),
  }(name='AuthJSON'),
  gatewayId?: long(name='GatewayId', example='102'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-0adf3ad751284cc69fcf9669fba*****'),
  id?: long(name='Id', example='109'),
}

model UpdateGatewayRouteAuthShrinkRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  authJSONShrink?: string(name='AuthJSON'),
  gatewayId?: long(name='GatewayId', example='102'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-0adf3ad751284cc69fcf9669fba*****'),
  id?: long(name='Id', example='109'),
}

model UpdateGatewayRouteAuthResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: long(name='Data', example='123'),
  dynamicCode?: string(name='DynamicCode', example='code'),
  dynamicMessage?: string(name='DynamicMessage', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='54973C90-F379-4372-9AA5-053A3F7****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateGatewayRouteAuthResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateGatewayRouteAuthResponseBody(name='body'),
}

async function updateGatewayRouteAuthWithOptions(tmpReq: UpdateGatewayRouteAuthRequest, runtime: Util.RuntimeOptions): UpdateGatewayRouteAuthResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateGatewayRouteAuthShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.authJSON)) {
    request.authJSONShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.authJSON, 'AuthJSON', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.authJSONShrink)) {
    query['AuthJSON'] = request.authJSONShrink;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateGatewayRouteAuth',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateGatewayRouteAuth(request: UpdateGatewayRouteAuthRequest): UpdateGatewayRouteAuthResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGatewayRouteAuthWithOptions(request, runtime);
}

model UpdateGatewayRouteCORSRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  corsJSON?: {
    allowCredentials?: boolean(name='AllowCredentials', example='true'),
    allowHeaders?: string(name='AllowHeaders', example='content-type'),
    allowMethods?: string(name='AllowMethods', example='GET,POST'),
    allowOrigins?: string(name='AllowOrigins', example='https://api.aliyun-inc.com/'),
    exposeHeaders?: string(name='ExposeHeaders', example='*'),
    status?: string(name='Status', example='off'),
    timeUnit?: string(name='TimeUnit', example='h'),
    unitNum?: long(name='UnitNum', example='24'),
  }(name='CorsJSON'),
  gatewayId?: long(name='GatewayId', example='85'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-f70a6ddf2f0941a2bb997b2d16028f37'),
  id?: long(name='Id', example='55'),
}

model UpdateGatewayRouteCORSShrinkRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  corsJSONShrink?: string(name='CorsJSON'),
  gatewayId?: long(name='GatewayId', example='85'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-f70a6ddf2f0941a2bb997b2d16028f37'),
  id?: long(name='Id', example='55'),
}

model UpdateGatewayRouteCORSResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: long(name='Data', example='618'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', example='41BE990E-44E4-5ED3-AEEB-A276941B1854'),
  success?: boolean(name='Success', example='true'),
}

model UpdateGatewayRouteCORSResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateGatewayRouteCORSResponseBody(name='body'),
}

async function updateGatewayRouteCORSWithOptions(tmpReq: UpdateGatewayRouteCORSRequest, runtime: Util.RuntimeOptions): UpdateGatewayRouteCORSResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateGatewayRouteCORSShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.corsJSON)) {
    request.corsJSONShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.corsJSON, 'CorsJSON', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.corsJSONShrink)) {
    query['CorsJSON'] = request.corsJSONShrink;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateGatewayRouteCORS',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateGatewayRouteCORS(request: UpdateGatewayRouteCORSRequest): UpdateGatewayRouteCORSResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGatewayRouteCORSWithOptions(request, runtime);
}

model UpdateGatewayRouteHTTPRewriteRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  gatewayId?: long(name='GatewayId', example='430'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-90392d768a3847a7b804c505254da96d'),
  httpRewriteJSON?: string(name='HttpRewriteJSON', example='{"pathType":"PRE","path":"/","status":"off"}'),
  id?: long(name='Id', example='238'),
}

model UpdateGatewayRouteHTTPRewriteResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: long(name='Data', example='411'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='AE60DA1E-B234-5105-897B-68372453A5A2'),
  success?: boolean(name='Success', example='true'),
}

model UpdateGatewayRouteHTTPRewriteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateGatewayRouteHTTPRewriteResponseBody(name='body'),
}

async function updateGatewayRouteHTTPRewriteWithOptions(request: UpdateGatewayRouteHTTPRewriteRequest, runtime: Util.RuntimeOptions): UpdateGatewayRouteHTTPRewriteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.httpRewriteJSON)) {
    query['HttpRewriteJSON'] = request.httpRewriteJSON;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateGatewayRouteHTTPRewrite',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateGatewayRouteHTTPRewrite(request: UpdateGatewayRouteHTTPRewriteRequest): UpdateGatewayRouteHTTPRewriteResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGatewayRouteHTTPRewriteWithOptions(request, runtime);
}

model UpdateGatewayRouteHeaderOpRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  gatewayId?: long(name='GatewayId', example='324'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-6bdc977deda44bf589c49d063b4c2d1d'),
  headerOpJSON?: string(name='HeaderOpJSON', example='{\\"status\\":\\"on\\",\\"headerOpItems\\":[{\\"directionType\\":\\"Request\\",\\"opType\\":\\"Update\\",\\"key\\":\\"hosts\\",\\"value\\":\\"test.com\\"}]}'),
  id?: long(name='Id', example='411'),
}

model UpdateGatewayRouteHeaderOpResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: long(name='Data', example='666'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', example='7C8CB294-BED8-5F32-A416-7517725E8F27'),
  success?: boolean(name='Success', example='true'),
}

model UpdateGatewayRouteHeaderOpResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateGatewayRouteHeaderOpResponseBody(name='body'),
}

async function updateGatewayRouteHeaderOpWithOptions(request: UpdateGatewayRouteHeaderOpRequest, runtime: Util.RuntimeOptions): UpdateGatewayRouteHeaderOpResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.headerOpJSON)) {
    query['HeaderOpJSON'] = request.headerOpJSON;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateGatewayRouteHeaderOp',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateGatewayRouteHeaderOp(request: UpdateGatewayRouteHeaderOpRequest): UpdateGatewayRouteHeaderOpResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGatewayRouteHeaderOpWithOptions(request, runtime);
}

model UpdateGatewayRouteRetryRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  gatewayId?: long(name='GatewayId', example='501'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-3f97e2989c344f35ab3fd62b19f1d10a'),
  id?: long(name='Id', example='508'),
  retryJSON?: {
    attempts?: int32(name='Attempts', example='2'),
    httpCodes?: [ string ](name='HttpCodes'),
    retryOn?: [ string ](name='RetryOn'),
    status?: string(name='Status', example='off'),
  }(name='RetryJSON'),
}

model UpdateGatewayRouteRetryShrinkRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  gatewayId?: long(name='GatewayId', example='501'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-3f97e2989c344f35ab3fd62b19f1d10a'),
  id?: long(name='Id', example='508'),
  retryJSONShrink?: string(name='RetryJSON'),
}

model UpdateGatewayRouteRetryResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: long(name='Data', example='640'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', example='9297B27D-D932-5E9F-93B9-99D6C5F3A879'),
  success?: boolean(name='Success', example='true'),
}

model UpdateGatewayRouteRetryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateGatewayRouteRetryResponseBody(name='body'),
}

async function updateGatewayRouteRetryWithOptions(tmpReq: UpdateGatewayRouteRetryRequest, runtime: Util.RuntimeOptions): UpdateGatewayRouteRetryResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateGatewayRouteRetryShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.retryJSON)) {
    request.retryJSONShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.retryJSON, 'RetryJSON', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.retryJSONShrink)) {
    query['RetryJSON'] = request.retryJSONShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateGatewayRouteRetry',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateGatewayRouteRetry(request: UpdateGatewayRouteRetryRequest): UpdateGatewayRouteRetryResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGatewayRouteRetryWithOptions(request, runtime);
}

model UpdateGatewayRouteTimeoutRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  gatewayId?: long(name='GatewayId', example='85'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-533290d279c1405f9628c64f7c8272ee'),
  id?: long(name='Id', example='567'),
  timeoutJSON?: {
    status?: string(name='Status', example='off'),
    timeUnit?: string(name='TimeUnit', example='s'),
    unitNum?: int32(name='UnitNum', example='1'),
  }(name='TimeoutJSON'),
}

model UpdateGatewayRouteTimeoutShrinkRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  gatewayId?: long(name='GatewayId', example='85'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-533290d279c1405f9628c64f7c8272ee'),
  id?: long(name='Id', example='567'),
  timeoutJSONShrink?: string(name='TimeoutJSON'),
}

model UpdateGatewayRouteTimeoutResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: long(name='Data', example='400'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', example='5359729E-A059-5942-98AF-E981E89C99FA'),
  success?: boolean(name='Success', example='true'),
}

model UpdateGatewayRouteTimeoutResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateGatewayRouteTimeoutResponseBody(name='body'),
}

async function updateGatewayRouteTimeoutWithOptions(tmpReq: UpdateGatewayRouteTimeoutRequest, runtime: Util.RuntimeOptions): UpdateGatewayRouteTimeoutResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateGatewayRouteTimeoutShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.timeoutJSON)) {
    request.timeoutJSONShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.timeoutJSON, 'TimeoutJSON', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.timeoutJSONShrink)) {
    query['TimeoutJSON'] = request.timeoutJSONShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateGatewayRouteTimeout',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateGatewayRouteTimeout(request: UpdateGatewayRouteTimeoutRequest): UpdateGatewayRouteTimeoutResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGatewayRouteTimeoutWithOptions(request, runtime);
}

model UpdateGatewayRouteWafStatusRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  enableWaf?: boolean(name='EnableWaf', description='Specifies whether to activate Web Application Firewall (WAF).', example='true'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-86575c0bc9f04ecfbacb92b8e392****'),
  routeId?: long(name='RouteId', description='The ID of the route.', example='645'),
}

model UpdateGatewayRouteWafStatusResponseBody = {
  code?: int32(name='Code', description='The status code returned. A value of 200 indicates that the request is successful.', example='200'),
  data?: {
    cors?: {
      allowCredentials?: boolean(name='AllowCredentials', description='The credentials allowed.', example='true'),
      allowHeaders?: string(name='AllowHeaders', description='The headers allowed.', example='*'),
      allowMethods?: string(name='AllowMethods', description='The methods allowed.', example='GET,POST,PUT,DELETE,HEAD,OPTIONS,PATCH'),
      allowOrigins?: string(name='AllowOrigins', description='The origins allowed.', example='*'),
      exposeHeaders?: string(name='ExposeHeaders', description='The response headers.', example='*'),
      status?: string(name='Status', description='The status.', example='off'),
      timeUnit?: string(name='TimeUnit', description='The time unit.', example='s'),
      unitNum?: long(name='UnitNum', description='The unit number.', example='1'),
    }(name='Cors', description='The configuration for cross-origin resource sharing (CORS).'),
    defaultServiceId?: long(name='DefaultServiceId', description='The default service ID.', example='1'),
    defaultServiceName?: string(name='DefaultServiceName', description='The default service name.', example='test'),
    destinationType?: string(name='DestinationType', description='The destination service type.', example='Single'),
    directResponse?: {
      body?: string(name='Body', description='The mock return value.', example='[{\\"key\\":\\"h68d13466.sqa.eu95\\",\\"dims\\":\\"groupName=All}]'),
      code?: int32(name='Code', description='The return value.', example='200'),
    }(name='DirectResponse', description='The information about service mocking.'),
    domainId?: long(name='DomainId', description='The domain ID.', example='235'),
    domainIdList?: [ long ](name='DomainIdList', description='The list of domain IDs.'),
    domainName?: string(name='DomainName', description='The domain name.', example='nbhamster.com'),
    domainNameList?: [ string ](name='DomainNameList', description='The domain names.'),
    enableWaf?: boolean(name='EnableWaf', description='Indicates whether WAF is activated.', example='0'),
    gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='102'),
    gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-7ea3da97b96543e19f6c597cd4a9****'),
    gmtCreate?: string(name='GmtCreate', description='The creation time.', example='2022-01-26T09:52:41.000+0000'),
    gmtModified?: string(name='GmtModified', description='The modification time.', example='2022-02-24T06:08:29.230+0000'),
    HTTPRewrite?: {
      host?: string(name='Host', description='The domain name.', example='aliyuncs.com'),
      path?: string(name='Path', description='The HTTP request path.', example='/test/client'),
      pathType?: string(name='PathType', description='The path type of the HTTP request.', example='PRE'),
      pattern?: string(name='Pattern', description='The matching pattern.', example='/test'),
      status?: string(name='Status', description='The HTTP status.', example='off'),
      substitution?: string(name='Substitution', description='The replacement.', example='test'),
    }(name='HTTPRewrite', description='The information about the rewrite policy.'),
    headerOp?: {
      headerOpItems?: [ 
        {
          directionType?: string(name='DirectionType', description='The request or response.', example='Response'),
          key?: string(name='Key', description='The header key.', example='debug'),
          opType?: string(name='OpType', description='The operation type.', example='Add'),
          value?: string(name='Value', description='The header value.', example='test'),
        }
      ](name='HeaderOpItems', description='The policy.'),
      status?: string(name='Status', description='The status.', example='off'),
    }(name='HeaderOp', description='The header settings.'),
    id?: long(name='Id', description='The ID of the route.', example='12'),
    name?: string(name='Name', description='The name of the route.', example='test'),
    predicates?: string(name='Predicates', description='The matching rule.', example='{\\"PathPredicates\\":{\\"Path\\":\\"/metas\\",\\"Type\\":\\"PRE\\",\\"IgnoreCase\\":false}}'),
    redirect?: {
      code?: int32(name='Code', description='The response code returned.', example='200'),
      host?: string(name='Host', description='The hostname.', example='ww.al.c'),
      path?: string(name='Path', description='The path.', example='/'),
    }(name='Redirect', description='The configuration of the redirection.'),
    retry?: {
      attempts?: int32(name='Attempts', description='The number of retries allowed for a request.', example='1'),
      httpCodes?: [ string ](name='HttpCodes', description='The HTTP status code.'),
      retryOn?: [ string ](name='RetryOn', description='The retry condition.'),
      status?: string(name='Status', description='The retry status.', example='on'),
    }(name='Retry', description='The retry configuration.'),
    routeOrder?: int32(name='RouteOrder', description='The sequence number of the route.', example='1'),
    routePredicates?: {
      headerPredicates?: [ 
        {
          key?: string(name='Key', description='The key of the request header.', example='alibo'),
          type?: string(name='Type', description='The matching type.', example='PRE'),
          value?: string(name='Value', description='The value of the request header.', example='200'),
        }
      ](name='HeaderPredicates', description='The information about matching based on request headers.'),
      methodPredicates?: [ string ](name='MethodPredicates', description='The information about method matching.'),
      pathPredicates?: {
        ignoreCase?: boolean(name='IgnoreCase', description='Indicates whether case sensitivity is ignored.', example='true'),
        path?: string(name='Path', description='The path.', example='/zookeeper/mmgw/unlogined/common.getBu'),
        type?: string(name='Type', description='The matching type.', example='PRE'),
      }(name='PathPredicates', description='The information about route matching.'),
      queryPredicates?: [ 
        {
          key?: string(name='Key', description='The name of the parameter.', example='instanceId'),
          type?: string(name='Type', description='The type.', example='PRE'),
          value?: string(name='Value', description='The value of the parameter.', example='test'),
        }
      ](name='QueryPredicates', description='The parameter matching rules.'),
    }(name='RoutePredicates', description='The information about route matching.'),
    routeServices?: [ 
      {
        groupName?: string(name='GroupName', description='The name of the group to which the service belongs.', example='DEFAULT_GROUP'),
        name?: string(name='Name', description='The name of the service.', example='test-aixue-gray'),
        namespace?: string(name='Namespace', description='The namespace.', example='default'),
        percent?: int32(name='Percent', description='The weight.', example='80'),
        serviceId?: long(name='ServiceId', description='The ID of the service.', example='547'),
        serviceName?: string(name='ServiceName', description='The name of the service.', example='b-service'),
        sourceType?: string(name='SourceType', description='The source type.', example='K8S'),
        version?: string(name='Version', description='The version of the service.', example='v1'),
      }
    ](name='RouteServices', description='The information about services.'),
    services?: string(name='Services', description='The information about services.', example='[{\\"Percent\\":100,\\"ServiceId\\":126}]'),
    status?: int32(name='Status', description='The status of the route.', example='1'),
    timeout?: {
      status?: string(name='Status', description='The status.', example='off'),
      timeUnit?: string(name='TimeUnit', description='The time unit.', example='s'),
      unitNum?: int32(name='UnitNum', description='The unit number.', example='10'),
    }(name='Timeout', description='The timeout configuration.'),
  }(name='Data', description='The returned data.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7466566F-F30F-4A29-965D-3E0AF21D****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model UpdateGatewayRouteWafStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateGatewayRouteWafStatusResponseBody(name='body'),
}

async function updateGatewayRouteWafStatusWithOptions(request: UpdateGatewayRouteWafStatusRequest, runtime: Util.RuntimeOptions): UpdateGatewayRouteWafStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.enableWaf)) {
    query['EnableWaf'] = request.enableWaf;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.routeId)) {
    query['RouteId'] = request.routeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateGatewayRouteWafStatus',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateGatewayRouteWafStatus(request: UpdateGatewayRouteWafStatusRequest): UpdateGatewayRouteWafStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGatewayRouteWafStatusWithOptions(request, runtime);
}

model UpdateGatewayServiceTrafficPolicyRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   **zh-CN**: Chinese
*   **en-US**: English.', example='zh'),
  gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='429'),
  gatewayTrafficPolicy?: TrafficPolicy(name='GatewayTrafficPolicy', description='The traffic policy of the gateway.'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-75c5036c083e4f89ba8ef9fafff2e902'),
  serviceId?: long(name='ServiceId', description='The ID of the service.', example='411'),
}

model UpdateGatewayServiceTrafficPolicyShrinkRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   **zh-CN**: Chinese
*   **en-US**: English.', example='zh'),
  gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='429'),
  gatewayTrafficPolicyShrink?: string(name='GatewayTrafficPolicy', description='The traffic policy of the gateway.'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-75c5036c083e4f89ba8ef9fafff2e902'),
  serviceId?: long(name='ServiceId', description='The ID of the service.', example='411'),
}

model UpdateGatewayServiceTrafficPolicyResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: GatewayService(name='Data', description='The details of the data.', example='{\\"GatewayUniqueId\\": \\"gw-2b8ebd75dc554c37a4279ba9917379f2\\", \\"Id\\": 417, \\"GatewayTrafficPolicy\\": {\\"LoadBalancerSettings\\": {\\"LoadbalancerType\\": \\"ROUND_ROBIN\\"}, \\"TlsSetting\\": {\\"TlsMode\\": \\"DISABLE\\"}}}'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request was successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='11A61389-F896-5231-A4FB-074D9E2E0055'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model UpdateGatewayServiceTrafficPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateGatewayServiceTrafficPolicyResponseBody(name='body'),
}

async function updateGatewayServiceTrafficPolicyWithOptions(tmpReq: UpdateGatewayServiceTrafficPolicyRequest, runtime: Util.RuntimeOptions): UpdateGatewayServiceTrafficPolicyResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateGatewayServiceTrafficPolicyShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.gatewayTrafficPolicy)) {
    request.gatewayTrafficPolicyShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.gatewayTrafficPolicy, 'GatewayTrafficPolicy', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.gatewayTrafficPolicyShrink)) {
    query['GatewayTrafficPolicy'] = request.gatewayTrafficPolicyShrink;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.serviceId)) {
    query['ServiceId'] = request.serviceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateGatewayServiceTrafficPolicy',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateGatewayServiceTrafficPolicy(request: UpdateGatewayServiceTrafficPolicyRequest): UpdateGatewayServiceTrafficPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGatewayServiceTrafficPolicyWithOptions(request, runtime);
}

model UpdateGatewayServiceVersionRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-eccf313e2224438ba53d95d039e5****'),
  serviceId?: long(name='ServiceId', example='575'),
  serviceVersion?: string(name='ServiceVersion', example='{\\"name\\":\\"v3\\",\\"labels\\":[{\\"key\\":\\"version\\",\\"value\\":\\"v3\\"}]}'),
}

model UpdateGatewayServiceVersionResponseBody = {
  code?: int32(name='Code', example='1'),
  data?: long(name='Data', example='614'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='D6580AA6-E285-58D2-B00B-12C051B3B7BF'),
  success?: boolean(name='Success', example='true'),
}

model UpdateGatewayServiceVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateGatewayServiceVersionResponseBody(name='body'),
}

async function updateGatewayServiceVersionWithOptions(request: UpdateGatewayServiceVersionRequest, runtime: Util.RuntimeOptions): UpdateGatewayServiceVersionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.serviceId)) {
    query['ServiceId'] = request.serviceId;
  }
  if (!Util.isUnset(request.serviceVersion)) {
    query['ServiceVersion'] = request.serviceVersion;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateGatewayServiceVersion',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateGatewayServiceVersion(request: UpdateGatewayServiceVersionRequest): UpdateGatewayServiceVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGatewayServiceVersionWithOptions(request, runtime);
}

model UpdateGatewaySpecRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The ID of the gateway.', example='gw-c70622ff52fe49beb29bea9a6f52****'),
  replica?: int32(name='Replica', description='The number of nodes.', example='3'),
  spec?: string(name='Spec', description='The node specifications of the gateway.', example='MSE_GTW_4_8_200_c'),
}

model UpdateGatewaySpecResponseBody = {
  code?: int32(name='Code', description='The response code returned.', example='200'),
  data?: string(name='Data', description='The returned message.', example='gw-892ehbv7gg56******'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model UpdateGatewaySpecResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateGatewaySpecResponseBody(name='body'),
}

/**
  * You can call this operation to update the number or specifications of nodes in a pay-as-you-go cloud-native gateway. You are charged when you add nodes or upgrade node specifications. For more information, see [Pricing](~~250950~~).
  *
  * @param request UpdateGatewaySpecRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateGatewaySpecResponse
 */
async function updateGatewaySpecWithOptions(request: UpdateGatewaySpecRequest, runtime: Util.RuntimeOptions): UpdateGatewaySpecResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.replica)) {
    query['Replica'] = request.replica;
  }
  if (!Util.isUnset(request.spec)) {
    query['Spec'] = request.spec;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateGatewaySpec',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to update the number or specifications of nodes in a pay-as-you-go cloud-native gateway. You are charged when you add nodes or upgrade node specifications. For more information, see [Pricing](~~250950~~).
  *
  * @param request UpdateGatewaySpecRequest
  * @return UpdateGatewaySpecResponse
 */
async function updateGatewaySpec(request: UpdateGatewaySpecRequest): UpdateGatewaySpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGatewaySpecWithOptions(request, runtime);
}

model UpdateImageRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  clusterId?: string(name='ClusterId', description='The ID of the destination cluster.', example='mse-8e8e9060'),
  versionCode?: string(name='VersionCode', description='The destination version number.

> You must call the GetImage operation to obtain the maximum destination version number that corresponds to MaxVersionCode.', example='ZooKeeper_3_5_5'),
}

model UpdateImageResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3855D475-2B66-5CFF-9A51-3D698E52C472'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='True'),
}

model UpdateImageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateImageResponseBody(name='body'),
}

async function updateImageWithOptions(request: UpdateImageRequest, runtime: Util.RuntimeOptions): UpdateImageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.versionCode)) {
    query['VersionCode'] = request.versionCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateImage',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateImage(request: UpdateImageRequest): UpdateImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateImageWithOptions(request, runtime);
}

model UpdateMessageQueueRouteRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  appId?: string(name='AppId', example='hkhon1po62@c3df23522baa898'),
  appName?: string(name='AppName', example='example-app'),
  enable?: boolean(name='Enable', example='true'),
  filterSide?: string(name='FilterSide', example='Server'),
  namespace?: string(name='Namespace', example='default'),
  region?: string(name='Region', example='cn-hangzhou'),
  tags?: [ string ](name='Tags'),
}

model UpdateMessageQueueRouteShrinkRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  appId?: string(name='AppId', example='hkhon1po62@c3df23522baa898'),
  appName?: string(name='AppName', example='example-app'),
  enable?: boolean(name='Enable', example='true'),
  filterSide?: string(name='FilterSide', example='Server'),
  namespace?: string(name='Namespace', example='default'),
  region?: string(name='Region', example='cn-hangzhou'),
  tagsShrink?: string(name='Tags'),
}

model UpdateMessageQueueRouteResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', example='True'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='E3919C62-876A-5926-A0BC-18351A24FA35'),
  success?: boolean(name='Success', example='true'),
}

model UpdateMessageQueueRouteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateMessageQueueRouteResponseBody(name='body'),
}

async function updateMessageQueueRouteWithOptions(tmpReq: UpdateMessageQueueRouteRequest, runtime: Util.RuntimeOptions): UpdateMessageQueueRouteResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateMessageQueueRouteShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!Util.isUnset(request.filterSide)) {
    query['FilterSide'] = request.filterSide;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.tagsShrink)) {
    query['Tags'] = request.tagsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMessageQueueRoute',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateMessageQueueRoute(request: UpdateMessageQueueRouteRequest): UpdateMessageQueueRouteResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMessageQueueRouteWithOptions(request, runtime);
}

model UpdateMigrationTaskRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The data structure.', example='zh'),
  clusterType?: string(name='ClusterType', description='The address of the source instance node.', example='Nacos-Ans'),
  id?: string(name='Id', description='The type of the instance. Valid values:

*   Nacos-Ans
*   ZooKeeper
*   Eureka', example='1'),
  originInstanceAddress?: string(name='OriginInstanceAddress', description='The name of the source instance.', example='192.168.1.1:8848'),
  originInstanceName?: string(name='OriginInstanceName', description='Source instance', example='The list of namespaces. This parameter is optional if you want to migrate applications from a Nacos instance.'),
  originInstanceNamespace?: string(name='OriginInstanceNamespace', description='The ID of the destination instance.', example='namesapceId1,namesapceId2'),
  projectDesc?: string(name='ProjectDesc', description='This is a description.', example='The language of the response. Valid values:

*   zh: Chinese
*   en: English'),
  requestPars?: string(name='RequestPars', description='The ID of the task.', example='{}'),
  targetClusterName?: string(name='TargetClusterName', description='Destination instance', example='The URL of the destination instance.'),
  targetClusterUrl?: string(name='TargetClusterUrl', description='The description.', example='mse-66*****-nacos-ans.mse.aliyuncs.com:8848'),
  targetInstanceId?: string(name='TargetInstanceId', description='The name of the destination instance.', example='mse-cn-ud82*****'),
}

model UpdateMigrationTaskResponseBody = {
  data?: {
    clusterType?: string(name='ClusterType', description='The address of the source instance node.', example='Nacos-Ans'),
    gmtCreate?: string(name='GmtCreate', description='The modification time.', example='2022-01-07T10:07:57.000+0000'),
    gmtModified?: string(name='GmtModified', description='The ID of the request.', example='2022-01-07T10:07:57.000+0000'),
    id?: string(name='Id', description='The ID of the user.', example='1'),
    originInstanceAddress?: string(name='OriginInstanceAddress', description='The name of the source instance.', example='192.168.100.2:2181'),
    originInstanceName?: string(name='OriginInstanceName', description='The list of namespaces. This parameter is optional if applications are migrated from a Nacos instance.', example='src'),
    originInstanceNamespace?: string(name='OriginInstanceNamespace', description='The ID of the destination instance.', example='fsdfsdfdsf'),
    projectDesc?: string(name='ProjectDesc', description='The creation time.', example='1232345'),
    targetClusterName?: string(name='TargetClusterName', description='The URL of the destination instance.', example='multiple-nacos'),
    targetClusterUrl?: string(name='TargetClusterUrl', description='The description.', example='mse-0b*****-nacos-ans.mse.aliyuncs.com:8848'),
    targetInstanceId?: string(name='TargetInstanceId', description='The name of the destination instance.', example='mse-cn-zvp2u*****'),
    userId?: string(name='UserId', description='The type of the instance.

*   Nacos-Ans
*   ZooKeeper
*   Eureka', example='183876217*****'),
  }(name='Data', description='The ID of the task.'),
  errorCode?: string(name='ErrorCode', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The data structure.', example='200'),
  message?: string(name='Message', description='The request was successfully processed.', example='The error code returned if the request failed.'),
  requestId?: string(name='RequestId', description='The message returned.', example='AF21683A-29C7-4853-AC0F-B5ADEE4****'),
  success?: boolean(name='Success', description='mse-200-105', example='true'),
}

model UpdateMigrationTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateMigrationTaskResponseBody(name='body'),
}

async function updateMigrationTaskWithOptions(request: UpdateMigrationTaskRequest, runtime: Util.RuntimeOptions): UpdateMigrationTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterType)) {
    query['ClusterType'] = request.clusterType;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.originInstanceAddress)) {
    query['OriginInstanceAddress'] = request.originInstanceAddress;
  }
  if (!Util.isUnset(request.originInstanceName)) {
    query['OriginInstanceName'] = request.originInstanceName;
  }
  if (!Util.isUnset(request.originInstanceNamespace)) {
    query['OriginInstanceNamespace'] = request.originInstanceNamespace;
  }
  if (!Util.isUnset(request.projectDesc)) {
    query['ProjectDesc'] = request.projectDesc;
  }
  if (!Util.isUnset(request.requestPars)) {
    query['RequestPars'] = request.requestPars;
  }
  if (!Util.isUnset(request.targetClusterName)) {
    query['TargetClusterName'] = request.targetClusterName;
  }
  if (!Util.isUnset(request.targetClusterUrl)) {
    query['TargetClusterUrl'] = request.targetClusterUrl;
  }
  if (!Util.isUnset(request.targetInstanceId)) {
    query['TargetInstanceId'] = request.targetInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMigrationTask',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateMigrationTask(request: UpdateMigrationTaskRequest): UpdateMigrationTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMigrationTaskWithOptions(request, runtime);
}

model UpdateNacosClusterRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='system error', example='zh'),
  checkPort?: int32(name='CheckPort', description='cluster not found', example='80'),
  clusterName?: string(name='ClusterName', description='clusterNotFound', example='DEFAULT'),
  groupName?: string(name='GroupName', description='illegal request:%s', example='DEFAULT_GROUP'),
  healthChecker?: string(name='HealthChecker', description='systemError', example='{"type":"none"}'),
  instanceId?: string(name='InstanceId', description='mse-100-007', example='mse-cn-123456'),
  namespaceId?: string(name='NamespaceId', description='mse-200-021', example='9e78a671-4b9b-4dd4-99c1-0b9da87d3dec'),
  serviceName?: string(name='ServiceName', description='illegalRequest', example='hello_service'),
  useInstancePortForCheck?: boolean(name='UseInstancePortForCheck', description='mse-100-001', example='false'),
}

model UpdateNacosClusterResponseBody = {
  code?: int32(name='Code', description='The port used for health checks.', example='200'),
  data?: string(name='Data', description='The type of the health check.', example='ok'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The name of the service.', example='200'),
  message?: string(name='Message', description='The ID of the namespace.', example='The name of the Nacos cluster.'),
  requestId?: string(name='RequestId', description='The name of the group.', example='9e78a671-4b9b-4dd4-99c1-0b9da87d3dec'),
  success?: boolean(name='Success', description='Specifies whether to use the port of the instance for a health check.', example='true'),
}

model UpdateNacosClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateNacosClusterResponseBody(name='body'),
}

async function updateNacosClusterWithOptions(request: UpdateNacosClusterRequest, runtime: Util.RuntimeOptions): UpdateNacosClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.checkPort)) {
    query['CheckPort'] = request.checkPort;
  }
  if (!Util.isUnset(request.clusterName)) {
    query['ClusterName'] = request.clusterName;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.healthChecker)) {
    query['HealthChecker'] = request.healthChecker;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.namespaceId)) {
    query['NamespaceId'] = request.namespaceId;
  }
  if (!Util.isUnset(request.serviceName)) {
    query['ServiceName'] = request.serviceName;
  }
  if (!Util.isUnset(request.useInstancePortForCheck)) {
    query['UseInstancePortForCheck'] = request.useInstancePortForCheck;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateNacosCluster',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateNacosCluster(request: UpdateNacosClusterRequest): UpdateNacosClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateNacosClusterWithOptions(request, runtime);
}

model UpdateNacosConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  appName?: string(name='AppName', description='mse-100-007', example='postoffice'),
  betaIps?: string(name='BetaIps', example='196.168.XX.XX'),
  content?: string(name='Content', description='cluster not found', example='mse-100-001'),
  dataId?: string(name='DataId', description='duplicatedClusterAliasName', example='ky-check-****.yml'),
  desc?: string(name='Desc', description='illegal request:%s', example='mse-200-021'),
  encryptedDataKey?: string(name='EncryptedDataKey', example='122wdwe****'),
  group?: string(name='Group', description='duplicated cluster alias name', example='resource'),
  instanceId?: string(name='InstanceId', description='mse-200-105', example='mse-cn-7pp2a****'),
  md5?: string(name='Md5', description='system error', example='045439703a273a94306422b****'),
  namespaceId?: string(name='NamespaceId', description='systemError', example='78b7af66-d15f-4541-b886-11ed81ecb6c0'),
  tags?: string(name='Tags', description='illegalRequest', example='2021-10-20'),
  type?: string(name='Type', description='clusterNotFound', example='text'),
}

model UpdateNacosConfigResponseBody = {
  errorCode?: string(name='ErrorCode', example='NoPermission'),
  httpCode?: string(name='HttpCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='69AD2AA7-DB47-449B-941B-B14409DF****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateNacosConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateNacosConfigResponseBody(name='body'),
}

/**
  * attribute1=1221111\\r\\nattribute2=Chinese\\r\\nattribute3=abc11\\r\\nattribute4=1.00111
  *
  * @param request UpdateNacosConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateNacosConfigResponse
 */
async function updateNacosConfigWithOptions(request: UpdateNacosConfigRequest, runtime: Util.RuntimeOptions): UpdateNacosConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.betaIps)) {
    query['BetaIps'] = request.betaIps;
  }
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.dataId)) {
    query['DataId'] = request.dataId;
  }
  if (!Util.isUnset(request.desc)) {
    query['Desc'] = request.desc;
  }
  if (!Util.isUnset(request.encryptedDataKey)) {
    query['EncryptedDataKey'] = request.encryptedDataKey;
  }
  if (!Util.isUnset(request.group)) {
    query['Group'] = request.group;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.md5)) {
    query['Md5'] = request.md5;
  }
  if (!Util.isUnset(request.namespaceId)) {
    query['NamespaceId'] = request.namespaceId;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateNacosConfig',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * attribute1=1221111\\r\\nattribute2=Chinese\\r\\nattribute3=abc11\\r\\nattribute4=1.00111
  *
  * @param request UpdateNacosConfigRequest
  * @return UpdateNacosConfigResponse
 */
async function updateNacosConfig(request: UpdateNacosConfigRequest): UpdateNacosConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateNacosConfigWithOptions(request, runtime);
}

model UpdateNacosInstanceRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  clusterName?: string(name='ClusterName', example='DEFAULT'),
  enabled?: boolean(name='Enabled', example='true'),
  ephemeral?: boolean(name='Ephemeral', example='false'),
  groupName?: string(name='GroupName', example='DEFAULT_GROUP'),
  instanceId?: string(name='InstanceId', example='mse-cn-123456'),
  ip?: string(name='Ip', example='1.2.X.X'),
  metadata?: string(name='Metadata', example='[int]'),
  namespaceId?: string(name='NamespaceId', example='9e78a671-4b9b-4dd4-99c1-0****'),
  port?: int32(name='Port', example='12281'),
  serviceName?: string(name='ServiceName', example='hello_service'),
  weight?: string(name='Weight', example='1'),
}

model UpdateNacosInstanceResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', example='ok'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='请求成功'),
  requestId?: string(name='RequestId', example='9e78a671-4b9b-4dd4-99c1-0b9da87d3dec'),
  success?: boolean(name='Success', example='true'),
}

model UpdateNacosInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateNacosInstanceResponseBody(name='body'),
}

async function updateNacosInstanceWithOptions(request: UpdateNacosInstanceRequest, runtime: Util.RuntimeOptions): UpdateNacosInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterName)) {
    query['ClusterName'] = request.clusterName;
  }
  if (!Util.isUnset(request.enabled)) {
    query['Enabled'] = request.enabled;
  }
  if (!Util.isUnset(request.ephemeral)) {
    query['Ephemeral'] = request.ephemeral;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ip)) {
    query['Ip'] = request.ip;
  }
  if (!Util.isUnset(request.namespaceId)) {
    query['NamespaceId'] = request.namespaceId;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.serviceName)) {
    query['ServiceName'] = request.serviceName;
  }
  if (!Util.isUnset(request.weight)) {
    query['Weight'] = request.weight;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.metadata)) {
    body['Metadata'] = request.metadata;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateNacosInstance',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateNacosInstance(request: UpdateNacosInstanceRequest): UpdateNacosInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateNacosInstanceWithOptions(request, runtime);
}

model UpdateNacosServiceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='system error', example='zh'),
  clusterId?: string(name='ClusterId', description='systemError', example='mse-09k1q11****'),
  groupName?: string(name='GroupName', description='clusterNotFound', example='DEFAULT_GROUP'),
  instanceId?: string(name='InstanceId', description='illegal request:%s', example='mse-cn-st21ri2****'),
  namespaceId?: string(name='NamespaceId', description='cluster not found', example='5e3ee449-b5c0-4aee-b857-32c0acbebf26'),
  protectThreshold?: string(name='ProtectThreshold', description='mse-100-001', example='0'),
  serviceName?: string(name='ServiceName', description='mse-200-021', example='com.dingtalk.doc.thumbnails.pdf.ThumbnailService'),
}

model UpdateNacosServiceResponseBody = {
  code?: int32(name='Code', description='The protection threshold.', example='1'),
  data?: string(name='Data', description='The ID of the namespace.', example='6'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The name of the group.', example='200'),
  message?: string(name='Message', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='success'),
  requestId?: string(name='RequestId', description='The name of the service.', example='4E9FDCFE-0738-493B-B801-82BDFBCB****'),
  success?: boolean(name='Success', description='The ID of the cluster.

> This operation contains both the InstanceId and ClusterId parameters. You must specify one of them.', example='True'),
}

model UpdateNacosServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateNacosServiceResponseBody(name='body'),
}

/**
  * 5e3ee449-b5c0-4aee-b857-32c0acbebf26
  *
  * @param request UpdateNacosServiceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateNacosServiceResponse
 */
async function updateNacosServiceWithOptions(request: UpdateNacosServiceRequest, runtime: Util.RuntimeOptions): UpdateNacosServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.namespaceId)) {
    query['NamespaceId'] = request.namespaceId;
  }
  if (!Util.isUnset(request.protectThreshold)) {
    query['ProtectThreshold'] = request.protectThreshold;
  }
  if (!Util.isUnset(request.serviceName)) {
    query['ServiceName'] = request.serviceName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateNacosService',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * 5e3ee449-b5c0-4aee-b857-32c0acbebf26
  *
  * @param request UpdateNacosServiceRequest
  * @return UpdateNacosServiceResponse
 */
async function updateNacosService(request: UpdateNacosServiceRequest): UpdateNacosServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateNacosServiceWithOptions(request, runtime);
}

model UpdatePluginConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

zh: Chinese en: English', example='zh'),
  config?: string(name='Config', description='The plug-in configuration. Configurations of WebAssembly plug-ins are in the YAML format, and configurations of Lua plug-ins are in the Lua code.', example='\\# Configure a check for the required fields of the plug-in, such as name, age, and friends. Sample configuration: name: John age: 18 friends: - David - Anne'),
  configLevel?: int32(name='ConfigLevel', description='The application scope of the plug-in.

*   0: global
*   1: route
*   2: domain name', example='0'),
  enable?: boolean(name='Enable', description='Specifies whether to enable the plug-in.', example='true'),
  gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='1'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-ubuwqygbq4783gqb2y3f87q****'),
  gmtCreate?: string(name='GmtCreate', description='The creation time.', example='1667309705000'),
  gmtModified?: string(name='GmtModified', description='The update time.', example='1667309705000'),
  id?: long(name='Id', description='The ID of the plug-in configuration.', example='1'),
  pluginId?: long(name='PluginId', description='The ID of the gateway plug-in.', example='2'),
}

model UpdatePluginConfigResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: long(name='Data', description='The ID of the plug-in configuration.', example='1'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message.', example='code'),
  errorCode?: string(name='ErrorCode', description='The error code that is returned.', example='500'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='03A3E2F4-6804-5663-9D5D-2EC47A1*****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model UpdatePluginConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdatePluginConfigResponseBody(name='body'),
}

async function updatePluginConfigWithOptions(request: UpdatePluginConfigRequest, runtime: Util.RuntimeOptions): UpdatePluginConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.config)) {
    query['Config'] = request.config;
  }
  if (!Util.isUnset(request.configLevel)) {
    query['ConfigLevel'] = request.configLevel;
  }
  if (!Util.isUnset(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.gmtCreate)) {
    query['GmtCreate'] = request.gmtCreate;
  }
  if (!Util.isUnset(request.gmtModified)) {
    query['GmtModified'] = request.gmtModified;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.pluginId)) {
    query['PluginId'] = request.pluginId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdatePluginConfig',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updatePluginConfig(request: UpdatePluginConfigRequest): UpdatePluginConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updatePluginConfigWithOptions(request, runtime);
}

model UpdateSSLCertRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  certIdentifier?: string(name='CertIdentifier', description='The ID of the certificate.', example='5951436-cn-hangzhou'),
  domainId?: long(name='DomainId', description='The ID of the domain name.', example='210'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-2a99625886d54722be94d92e9a69****'),
}

model UpdateSSLCertResponseBody = {
  code?: int32(name='Code', description='The response code returned.', example='200'),
  data?: boolean(name='Data', description='Indicates whether the update is successful.', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='Id of the request', example='CA689BED-08F3-54C2-A206-A0924E2ACA0A'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model UpdateSSLCertResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSSLCertResponseBody(name='body'),
}

async function updateSSLCertWithOptions(request: UpdateSSLCertRequest, runtime: Util.RuntimeOptions): UpdateSSLCertResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.certIdentifier)) {
    query['CertIdentifier'] = request.certIdentifier;
  }
  if (!Util.isUnset(request.domainId)) {
    query['DomainId'] = request.domainId;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSSLCert',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateSSLCert(request: UpdateSSLCertRequest): UpdateSSLCertResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSSLCertWithOptions(request, runtime);
}

model UpdateServiceSourceRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  address?: string(name='Address', example='c9ad2a0717032427e920754e25b49e3b5'),
  gatewayId?: long(name='GatewayId', example='429'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-cdd1bb9bfb8341e9805f931a3ba1f4c6'),
  id?: long(name='Id', example='63'),
  ingressOptionsRequest?: {
    enableIngress?: boolean(name='EnableIngress', example='true'),
    enableStatus?: boolean(name='EnableStatus', example='true'),
    ingressClass?: string(name='IngressClass', example='com.test.xxx'),
    watchNamespace?: string(name='WatchNamespace', example='default'),
  }(name='IngressOptionsRequest', example='zh'),
  name?: string(name='Name', example='istio'),
  pathList?: [ string ](name='PathList'),
  source?: string(name='Source', example='K8S'),
  type?: string(name='Type', example='K8S'),
}

model UpdateServiceSourceShrinkRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  address?: string(name='Address', example='c9ad2a0717032427e920754e25b49e3b5'),
  gatewayId?: long(name='GatewayId', example='429'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-cdd1bb9bfb8341e9805f931a3ba1f4c6'),
  id?: long(name='Id', example='63'),
  ingressOptionsRequestShrink?: string(name='IngressOptionsRequest', example='zh'),
  name?: string(name='Name', example='istio'),
  pathListShrink?: string(name='PathList'),
  source?: string(name='Source', example='K8S'),
  type?: string(name='Type', example='K8S'),
}

model UpdateServiceSourceResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: long(name='Data', example='63'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='6AB2B0B6-4A86-54E2-A340-FC47A22EE659'),
  success?: boolean(name='Success', example='true'),
}

model UpdateServiceSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateServiceSourceResponseBody(name='body'),
}

async function updateServiceSourceWithOptions(tmpReq: UpdateServiceSourceRequest, runtime: Util.RuntimeOptions): UpdateServiceSourceResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateServiceSourceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.ingressOptionsRequest)) {
    request.ingressOptionsRequestShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ingressOptionsRequest, 'IngressOptionsRequest', 'json');
  }
  if (!Util.isUnset(tmpReq.pathList)) {
    request.pathListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.pathList, 'PathList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.address)) {
    query['Address'] = request.address;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.ingressOptionsRequestShrink)) {
    query['IngressOptionsRequest'] = request.ingressOptionsRequestShrink;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pathListShrink)) {
    query['PathList'] = request.pathListShrink;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateServiceSource',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateServiceSource(request: UpdateServiceSourceRequest): UpdateServiceSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateServiceSourceWithOptions(request, runtime);
}

model UpdateZnodeRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  clusterId?: string(name='ClusterId', example='mse-09k1q11****'),
  data?: string(name='Data', example='data'),
  path?: string(name='Path', example='/zookeeper'),
  requestPars?: string(name='RequestPars', example='{}'),
}

model UpdateZnodeResponseBody = {
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateZnodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateZnodeResponseBody(name='body'),
}

async function updateZnodeWithOptions(request: UpdateZnodeRequest, runtime: Util.RuntimeOptions): UpdateZnodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.data)) {
    query['Data'] = request.data;
  }
  if (!Util.isUnset(request.path)) {
    query['Path'] = request.path;
  }
  if (!Util.isUnset(request.requestPars)) {
    query['RequestPars'] = request.requestPars;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateZnode',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateZnode(request: UpdateZnodeRequest): UpdateZnodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateZnodeWithOptions(request, runtime);
}

model UpgradeClusterRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  instanceId?: string(name='InstanceId', example='mse-cn-nif1w51wi0c'),
  requestPars?: string(name='RequestPars', example='{}'),
  upgradeVersion?: string(name='UpgradeVersion', example='1.2.1'),
}

model UpgradeClusterResponseBody = {
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpCode?: string(name='HttpCode', example='202'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='8D855418-177B-5FF8-A021-75B930AD890A'),
  success?: boolean(name='Success', example='true'),
}

model UpgradeClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpgradeClusterResponseBody(name='body'),
}

async function upgradeClusterWithOptions(request: UpgradeClusterRequest, runtime: Util.RuntimeOptions): UpgradeClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.requestPars)) {
    query['RequestPars'] = request.requestPars;
  }
  if (!Util.isUnset(request.upgradeVersion)) {
    query['UpgradeVersion'] = request.upgradeVersion;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpgradeCluster',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function upgradeCluster(request: UpgradeClusterRequest): UpgradeClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeClusterWithOptions(request, runtime);
}

