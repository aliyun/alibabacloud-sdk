/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @signatureAlgorithm = 'v2';
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('mse', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model GatewayDomain {
  certIdentifier?: string(name='CertIdentifier'),
  gatewayId?: long(name='GatewayId'),
  gatewayName?: string(name='GatewayName'),
  gatewayUniqueId?: string(name='GatewayUniqueId'),
  gmtCreate?: string(name='GmtCreate'),
  gmtModified?: string(name='GmtModified'),
  id?: long(name='Id'),
  mustHttps?: string(name='MustHttps'),
  name?: string(name='Name'),
  protocol?: string(name='Protocol'),
}

model GatewayOption {
  disableHttp2Alpn?: boolean(name='DisableHttp2Alpn'),
  enableHardwareAcceleration?: boolean(name='EnableHardwareAcceleration'),
  enableWaf?: boolean(name='EnableWaf'),
  logConfigDetails?: {
    logEnabled?: boolean(name='LogEnabled'),
    logStoreName?: string(name='LogStoreName'),
    projectName?: string(name='ProjectName'),
  }(name='LogConfigDetails'),
  traceDetails?: {
    sample?: long(name='Sample'),
    traceEnabled?: boolean(name='TraceEnabled'),
  }(name='TraceDetails'),
}

model GatewayService {
  gatewayTrafficPolicy?: TrafficPolicy(name='GatewayTrafficPolicy'),
  gatewayUniqueId?: string(name='GatewayUniqueId'),
  groupName?: string(name='GroupName'),
  id?: long(name='Id'),
  metaInfo?: string(name='MetaInfo'),
  name?: string(name='Name'),
  namespace?: string(name='Namespace'),
  sourceType?: string(name='SourceType'),
}

model TrafficPolicy {
  loadBalancerSettings?: {
    consistentHashLBConfig?: {
      consistentHashLBType?: string(name='ConsistentHashLBType'),
      httpCookie?: {
        name?: string(name='Name'),
        path?: string(name='Path'),
        TTL?: string(name='TTL', example='0s'),
      }(name='HttpCookie'),
      parameterName?: string(name='ParameterName'),
    }(name='ConsistentHashLBConfig'),
    loadbalancerType?: string(name='LoadbalancerType', example='RANDOM'),
    warmupDuration?: long(name='WarmupDuration'),
  }(name='LoadBalancerSettings'),
  tlsSetting?: {
    caCertContent?: string(name='CaCertContent'),
    certId?: string(name='CertId'),
    sni?: string(name='Sni'),
    tlsMode?: string(name='TlsMode', example='SIMPLE'),
  }(name='TlsSetting'),
}

model AddAuthResourceRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  authId?: long(name='AuthId', description='The ID of the authorization record.', example='13'),
  domainId?: long(name='DomainId', description='The ID of the domain name.', example='128'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-86575c0bc9f04ecfbacb92b8e392****'),
  matchType?: string(name='MatchType'),
  path?: string(name='Path', description='The path.', example='/abc'),
}

model AddAuthResourceResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: long(name='Data', description='The returned data.', example='24'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='403'),
  message?: string(name='Message', description='The error message returned if the request fails.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4BBCF560-4DD7-5DBD-B849-CCB135BBBAB7'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model AddAuthResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddAuthResourceResponseBody(name='body'),
}

async function addAuthResourceWithOptions(request: AddAuthResourceRequest, runtime: Util.RuntimeOptions): AddAuthResourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.authId)) {
    query['AuthId'] = request.authId;
  }
  if (!Util.isUnset(request.domainId)) {
    query['DomainId'] = request.domainId;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.matchType)) {
    query['MatchType'] = request.matchType;
  }
  if (!Util.isUnset(request.path)) {
    query['Path'] = request.path;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddAuthResource',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addAuthResource(request: AddAuthResourceRequest): AddAuthResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return addAuthResourceWithOptions(request, runtime);
}

model AddBlackWhiteListRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  content?: string(name='Content', description='The content of the blacklist.', example='1.117.115.51'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-0fe488252dc44d55a9dd57875193****'),
  isWhite?: boolean(name='IsWhite', description='Specifies whether to enable the whitelist mode for authorization.', example='false'),
  name?: string(name='Name'),
  note?: string(name='Note'),
  resourceIdJsonList?: string(name='ResourceIdJsonList'),
  resourceType?: string(name='ResourceType', description='The resource type to which the blacklist or whitelist applies.', example='GATEWAY'),
  status?: string(name='Status', description='The status of the blacklist.', example='off'),
  type?: string(name='Type', description='The type of object in the blacklist or whitelist.', example='IP'),
}

model AddBlackWhiteListResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: long(name='Data', description='The ID of the record.', example='2'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message returned if the request fails.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='966F6CA7-16D0-50AB-AB02-E140934F90C1'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

- `true`: The request is successful.                                  
- `false`: The request fails.', example='true'),
}

model AddBlackWhiteListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddBlackWhiteListResponseBody(name='body'),
}

async function addBlackWhiteListWithOptions(request: AddBlackWhiteListRequest, runtime: Util.RuntimeOptions): AddBlackWhiteListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.isWhite)) {
    query['IsWhite'] = request.isWhite;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.note)) {
    query['Note'] = request.note;
  }
  if (!Util.isUnset(request.resourceIdJsonList)) {
    query['ResourceIdJsonList'] = request.resourceIdJsonList;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddBlackWhiteList',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addBlackWhiteList(request: AddBlackWhiteListRequest): AddBlackWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return addBlackWhiteListWithOptions(request, runtime);
}

model AddGatewayRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  enableHardwareAcceleration?: boolean(name='EnableHardwareAcceleration', description='Specifies whether to enable hardware acceleration.', example='false'),
  enableSls?: boolean(name='EnableSls', description='Specifies whether to enable Log Service.', example='false'),
  enableXtrace?: boolean(name='EnableXtrace', description='Specifies whether to enable Tracing Analysis.', example='false'),
  enterpriseSecurityGroup?: boolean(name='EnterpriseSecurityGroup', description='Specifies whether to use an advanced security group.', example='false'),
  internetSlbSpec?: string(name='InternetSlbSpec', description='The specifications of the Internet-facing SLB instance.

*   slb.s1.small
*   slb.s2.small
*   slb.s2.medium
*   slb.s3.small
*   slb.s3.medium
*   slb.s3.large', example='slb.s2.small'),
  name?: string(name='Name', description='The name of the gateway.', example='test-ceshi'),
  region?: string(name='Region', description='The ID of the region.', example='cn-hangzhou'),
  replica?: int32(name='Replica', description='The number of nodes.', example='2'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfm34x43l*****'),
  slbSpec?: string(name='SlbSpec', description='The specifications of the internal-facing Server Load Balancer (SLB) instance.

*   slb.s1.small
*   slb.s2.small
*   slb.s2.medium
*   slb.s3.small
*   slb.s3.medium
*   slb.s3.large', example='slb.s2.small'),
  spec?: string(name='Spec', description='The node specifications.

*   MSE_GTW\\_16\\_32\\_200\\_c(16C32G)
*   MSE_GTW\\_2\\_4\\_200\\_c(2C4G)
*   MSE_GTW\\_4\\_8\\_200\\_c(4C8G)
*   MSE_GTW\\_8\\_16\\_200\\_c(8C16G)', example='MSE_GTW_2_4_200_c'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag.', example='key'),
      value?: string(name='Value', description='The value of the tag.', example='value'),
    }
  ](name='Tag', description='The tag of the gateway.'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the primary vSwitch.', example='vsw-bp1q8th57frl5khj2li43'),
  vSwitchId2?: string(name='VSwitchId2', description='The ID of the secondary vSwitch.', example='vsw-wz9bu6o5vsvitt5mrxo6s'),
  vpc?: string(name='Vpc', description='The ID of the virtual private cloud (VPC).', example='vpc-bp15mncnrtm83uauxd1xb'),
  xtraceRatio?: string(name='XtraceRatio', description='The sample rate of Tracing Analysis. Valid values: \\[1,100].', example='10'),
}

model AddGatewayResponseBody = {
  code?: int32(name='Code', description='The return value.', example='200'),
  data?: {
    gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-5017305290e14cebbrvec4a5****'),
  }(name='Data', description='The returned data.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The returned message.

*   If the request is successful, a success message is returned.
*   If the request fails, an error message is returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2F46B9E7-67EF-5C8A-BA52-D38D5B32AF2C'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model AddGatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddGatewayResponseBody(name='body'),
}

async function addGatewayWithOptions(request: AddGatewayRequest, runtime: Util.RuntimeOptions): AddGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.enableHardwareAcceleration)) {
    query['EnableHardwareAcceleration'] = request.enableHardwareAcceleration;
  }
  if (!Util.isUnset(request.enableSls)) {
    query['EnableSls'] = request.enableSls;
  }
  if (!Util.isUnset(request.enableXtrace)) {
    query['EnableXtrace'] = request.enableXtrace;
  }
  if (!Util.isUnset(request.enterpriseSecurityGroup)) {
    query['EnterpriseSecurityGroup'] = request.enterpriseSecurityGroup;
  }
  if (!Util.isUnset(request.internetSlbSpec)) {
    query['InternetSlbSpec'] = request.internetSlbSpec;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.replica)) {
    query['Replica'] = request.replica;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.slbSpec)) {
    query['SlbSpec'] = request.slbSpec;
  }
  if (!Util.isUnset(request.spec)) {
    query['Spec'] = request.spec;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.vSwitchId2)) {
    query['VSwitchId2'] = request.vSwitchId2;
  }
  if (!Util.isUnset(request.vpc)) {
    query['Vpc'] = request.vpc;
  }
  if (!Util.isUnset(request.xtraceRatio)) {
    query['XtraceRatio'] = request.xtraceRatio;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddGateway',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addGateway(request: AddGatewayRequest): AddGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return addGatewayWithOptions(request, runtime);
}

model AddGatewayDomainRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  certIdentifier?: string(name='CertIdentifier', description='The ID of the certificate.', example='6828169-cn-hangzhou'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-86575c0bc9f04ecfbacb92b8e392****'),
  http2?: string(name='Http2', description='Specifies whether to enable `HTTP/2`.

*   `open`: enables `HTTP/2`
*   `close`: disables `HTTP/2`
*   `globalConfig`: uses global configurations', example='close'),
  mustHttps?: boolean(name='MustHttps', description='Specifies whether to enable HTTPS.', example='true'),
  name?: string(name='Name', description='The domain name.', example='test.com'),
  protocol?: string(name='Protocol', description='The type of the protocol.', example='HTTP'),
  tlsMax?: string(name='TlsMax', description='The maximum version of Transport Layer Security (TLS).', example='TLS 1.3'),
  tlsMin?: string(name='TlsMin', description='The minimum version of TLS.', example='TLS 1.0'),
}

model AddGatewayDomainResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: long(name='Data', description='The returned data.', example='100'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='16BA802F-B848-55DF-9F57-CD71B7272D1F'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model AddGatewayDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddGatewayDomainResponseBody(name='body'),
}

async function addGatewayDomainWithOptions(request: AddGatewayDomainRequest, runtime: Util.RuntimeOptions): AddGatewayDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.certIdentifier)) {
    query['CertIdentifier'] = request.certIdentifier;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.http2)) {
    query['Http2'] = request.http2;
  }
  if (!Util.isUnset(request.mustHttps)) {
    query['MustHttps'] = request.mustHttps;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.protocol)) {
    query['Protocol'] = request.protocol;
  }
  if (!Util.isUnset(request.tlsMax)) {
    query['TlsMax'] = request.tlsMax;
  }
  if (!Util.isUnset(request.tlsMin)) {
    query['TlsMin'] = request.tlsMin;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddGatewayDomain',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addGatewayDomain(request: AddGatewayDomainRequest): AddGatewayDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return addGatewayDomainWithOptions(request, runtime);
}

model AddGatewayRouteRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  destinationType?: string(name='DestinationType', description='The destination service type.', example='Multiple'),
  directResponseJSON?: {
    body?: string(name='Body', description='The mock return value.', example='hello'),
    code?: long(name='Code', description='The mock return code.', example='403'),
  }(name='DirectResponseJSON', description='The mock response configuration.'),
  domainId?: long(name='DomainId', description='The ID of the domain name.', example='20'),
  domainIdListJSON?: string(name='DomainIdListJSON', description='The list of domain names.', example='[0,94]'),
  enableWaf?: boolean(name='EnableWaf', description='Specifies whether to enable Web Application Firewall (WAF).', example='true'),
  fallback?: boolean(name='Fallback', description='Specifies whether to enable the Fallback service.', example='true'),
  fallbackServices?: [ 
    {
      agreementType?: string(name='AgreementType', description='The type of the protocol.', example='DUBBO'),
      groupName?: string(name='GroupName', description='The name of the group to which the service belongs.', example='test'),
      name?: string(name='Name', description='The name.', example='user'),
      namespace?: string(name='Namespace', description='The namespace in which the service resides.', example='default'),
      percent?: int32(name='Percent', description='The weight in the form of a percentage value.', example='80'),
      serviceId?: long(name='ServiceId', description='The ID of the service.', example='353'),
      servicePort?: int32(name='ServicePort', description='The service port.', example='443'),
      sourceType?: string(name='SourceType', description='The type of the service source.', example='MSE'),
      version?: string(name='Version', description='The version of the service.', example='v1'),
    }
  ](name='FallbackServices', description='The information of the Fallback service.'),
  gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='526'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-492af9b04bb4474cae9d645be8*****'),
  name?: string(name='Name', description='The name of the route.', example='test'),
  predicates?: {
    headerPredicates?: [ 
      {
        key?: string(name='Key', description='The key of the request header.', example='debug'),
        type?: string(name='Type', description='The matching type.', example='PRE'),
        value?: string(name='Value', description='The value of the request header.', example='test'),
      }
    ](name='HeaderPredicates', description='The information about header matching.'),
    methodPredicates?: [ string ](name='MethodPredicates', description='The information about method matching.'),
    pathPredicates?: {
      ignoreCase?: boolean(name='IgnoreCase', description='Specifies whether to perform case-insensitive matching.', example='true'),
      path?: string(name='Path', description='The path.', example='/test'),
      type?: string(name='Type', description='The route matching type. Valid values:

*   PRE: prefix matching
*   EQUAL: exact matching
*   ERGULAR: regular expression matching', example='PRE'),
    }(name='PathPredicates', description='The information about route matching.'),
    queryPredicates?: [ 
      {
        key?: string(name='Key', description='The name of the parameter.', example='userid'),
        type?: string(name='Type', description='The matching type.', example='PRE'),
        value?: string(name='Value', description='The value of the parameter.', example='test'),
      }
    ](name='QueryPredicates', description='The information about URL parameter matching.'),
  }(name='Predicates', description='The matching rule.'),
  redirectJSON?: {
    code?: int32(name='Code', description='The return code.', example='302'),
    host?: string(name='Host', description='The hostname to be redirected to.', example='test.com'),
    path?: string(name='Path', description='The path to be redirected to.', example='/test'),
  }(name='RedirectJSON', description='The configuration of the redirection.'),
  routeOrder?: int32(name='RouteOrder', description='The sequence number of the route. (A small value indicates a high priority.)', example='1'),
  services?: [ 
    {
      agreementType?: string(name='AgreementType', description='The type of the protocol.', example='DUBBO'),
      groupName?: string(name='GroupName', description='The name of the group to which the service belongs.', example='test'),
      httpDubboTranscoder?: {
        dubboServiceGroup?: string(name='DubboServiceGroup', description='The service group.', example='None'),
        dubboServiceName?: string(name='DubboServiceName', description='The name of the Dubbo service.', example='org.apache.dubbo.samples.basic.api.DemoService'),
        dubboServiceVersion?: string(name='DubboServiceVersion', description='The version of the Dubbo service.', example='0.0.0'),
        mothedMapList?: [ 
          {
            dubboMothedName?: string(name='DubboMothedName', description='The method name of the Dubbo service.', example='sayHello'),
            httpMothed?: string(name='HttpMothed', description='The HTTP method.

> Valid values:

*   ALL_GET

*   ALL_POST

*   ALL_PUT

*   ALL_DELETE

*   ALL_PATCH', example='ALL_GET'),
            mothedpath?: string(name='Mothedpath', description='The path that is used to match a method.', example='/mytestzbk/sayhello'),
            paramMapsList?: [ 
              {
                extractKey?: string(name='ExtractKey', description='The key extracted from the input parameter.', example='name'),
                extractKeySpec?: string(name='ExtractKeySpec', description='The position of the input parameter.

> Valid values:

*   `ALL_QUERY_PARAMETER`: request parameter

*   `ALL_HEADER`: request header
*   `ALL_PATH`: request path
*   `ALL_BODY`: request body', example='ALL_QUERY_PARAMETER'),
                mappingType?: string(name='MappingType', description='The type of the backend service parameter.', example='java.lang.String'),
              }
            ](name='ParamMapsList', description='The information of parameter mappings.'),
            passThroughAllHeaders?: string(name='PassThroughAllHeaders', description='The pass-through type of the header.

> Valid values:

*   PASS_ALL: All headers are passed through.

*   PASS_NOT: All headers are not passed through.

*   PASS_ASSIGN: Specified headers are passed through.', example='PASS_NOT'),
            passThroughList?: [ string ](name='PassThroughList', description='The list of headers to be passed through.'),
          }
        ](name='MothedMapList', description='The forwarding rules of the Dubbo service.'),
      }(name='HttpDubboTranscoder', description='The transcoder of the Dubbo protocol.'),
      name?: string(name='Name', description='The name.', example='user'),
      namespace?: string(name='Namespace', description='The namespace in which the service resides.', example='default'),
      percent?: int32(name='Percent', description='The weight in the form of a percentage value.', example='80'),
      serviceId?: long(name='ServiceId', description='The ID of the service.', example='353'),
      servicePort?: int32(name='ServicePort', description='The service port.', example='443'),
      sourceType?: string(name='SourceType', description='The type of the service source.', example='MSE'),
      version?: string(name='Version', description='The version of the service.', example='v1'),
    }
  ](name='Services', description='The information about services.'),
}

model AddGatewayRouteShrinkRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  destinationType?: string(name='DestinationType', description='The destination service type.', example='Multiple'),
  directResponseJSONShrink?: string(name='DirectResponseJSON', description='The mock response configuration.'),
  domainId?: long(name='DomainId', description='The ID of the domain name.', example='20'),
  domainIdListJSON?: string(name='DomainIdListJSON', description='The list of domain names.', example='[0,94]'),
  enableWaf?: boolean(name='EnableWaf', description='Specifies whether to enable Web Application Firewall (WAF).', example='true'),
  fallback?: boolean(name='Fallback', description='Specifies whether to enable the Fallback service.', example='true'),
  fallbackServicesShrink?: string(name='FallbackServices', description='The information of the Fallback service.'),
  gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='526'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-492af9b04bb4474cae9d645be8*****'),
  name?: string(name='Name', description='The name of the route.', example='test'),
  predicatesShrink?: string(name='Predicates', description='The matching rule.'),
  redirectJSONShrink?: string(name='RedirectJSON', description='The configuration of the redirection.'),
  routeOrder?: int32(name='RouteOrder', description='The sequence number of the route. (A small value indicates a high priority.)', example='1'),
  servicesShrink?: string(name='Services', description='The information about services.'),
}

model AddGatewayRouteResponseBody = {
  code?: int32(name='Code', description='The code returned.', example='200'),
  data?: long(name='Data', description='The returned data.', example='555'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The response message.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='03A3E2F4-6804-5663-9D5D-2EC47A1*****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model AddGatewayRouteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddGatewayRouteResponseBody(name='body'),
}

async function addGatewayRouteWithOptions(tmpReq: AddGatewayRouteRequest, runtime: Util.RuntimeOptions): AddGatewayRouteResponse {
  Util.validateModel(tmpReq);
  var request = new AddGatewayRouteShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.directResponseJSON)) {
    request.directResponseJSONShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.directResponseJSON, 'DirectResponseJSON', 'json');
  }
  if (!Util.isUnset(tmpReq.fallbackServices)) {
    request.fallbackServicesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.fallbackServices, 'FallbackServices', 'json');
  }
  if (!Util.isUnset(tmpReq.predicates)) {
    request.predicatesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.predicates, 'Predicates', 'json');
  }
  if (!Util.isUnset(tmpReq.redirectJSON)) {
    request.redirectJSONShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.redirectJSON, 'RedirectJSON', 'json');
  }
  if (!Util.isUnset(tmpReq.services)) {
    request.servicesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.services, 'Services', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.destinationType)) {
    query['DestinationType'] = request.destinationType;
  }
  if (!Util.isUnset(request.directResponseJSONShrink)) {
    query['DirectResponseJSON'] = request.directResponseJSONShrink;
  }
  if (!Util.isUnset(request.domainId)) {
    query['DomainId'] = request.domainId;
  }
  if (!Util.isUnset(request.domainIdListJSON)) {
    query['DomainIdListJSON'] = request.domainIdListJSON;
  }
  if (!Util.isUnset(request.enableWaf)) {
    query['EnableWaf'] = request.enableWaf;
  }
  if (!Util.isUnset(request.fallback)) {
    query['Fallback'] = request.fallback;
  }
  if (!Util.isUnset(request.fallbackServicesShrink)) {
    query['FallbackServices'] = request.fallbackServicesShrink;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.predicatesShrink)) {
    query['Predicates'] = request.predicatesShrink;
  }
  if (!Util.isUnset(request.redirectJSONShrink)) {
    query['RedirectJSON'] = request.redirectJSONShrink;
  }
  if (!Util.isUnset(request.routeOrder)) {
    query['RouteOrder'] = request.routeOrder;
  }
  if (!Util.isUnset(request.servicesShrink)) {
    query['Services'] = request.servicesShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddGatewayRoute',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addGatewayRoute(request: AddGatewayRouteRequest): AddGatewayRouteResponse {
  var runtime = new Util.RuntimeOptions{};
  return addGatewayRouteWithOptions(request, runtime);
}

model AddGatewayServiceVersionRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-913a49bab6c5461187a3305fb8da****'),
  serviceId?: long(name='ServiceId', description='The ID of the service.', example='33'),
  serviceVersion?: string(name='ServiceVersion', description='The version of the service.', example='{\\"name\\":\\"v1\\",\\"labels\\":[{\\"key\\":\\"version\\",\\"value\\":\\"v1\\"}]}'),
}

model AddGatewayServiceVersionResponseBody = {
  code?: int32(name='Code', description='The status code returned. The value 200 indicates that the request is successfully processed.', example='200'),
  data?: long(name='Data', description='The ID of the created gateway.', example='330'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='403'),
  message?: string(name='Message', description='The error message returned if the request failed.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BA4046B6-CFC6-583C-B608-DD75011A590F'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model AddGatewayServiceVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddGatewayServiceVersionResponseBody(name='body'),
}

async function addGatewayServiceVersionWithOptions(request: AddGatewayServiceVersionRequest, runtime: Util.RuntimeOptions): AddGatewayServiceVersionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.serviceId)) {
    query['ServiceId'] = request.serviceId;
  }
  if (!Util.isUnset(request.serviceVersion)) {
    query['ServiceVersion'] = request.serviceVersion;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddGatewayServiceVersion',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addGatewayServiceVersion(request: AddGatewayServiceVersionRequest): AddGatewayServiceVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return addGatewayServiceVersionWithOptions(request, runtime);
}

model AddGatewaySlbRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-9cdcf8e4f58144059e73ff4c5ef9****'),
  httpPort?: int32(name='HttpPort', description='The HTTP port number (virtual service group).', example='80'),
  httpsPort?: int32(name='HttpsPort', description='The HTTPS port number (virtual service group).', example='443'),
  httpsVServerGroupId?: string(name='HttpsVServerGroupId', description='The ID of the HTTPS virtual service group.', example='353'),
  serviceWeight?: int32(name='ServiceWeight', description='The service weight.', example='80'),
  slbId?: string(name='SlbId', description='SLB ID.', example='lb-bp18t6jjskwxh6wy1****'),
  type?: string(name='Type', description='The type.', example='PUB_NET'),
  VServerGroupId?: string(name='VServerGroupId', description='The ID of the HTTP virtual service group.', example='353'),
}

model AddGatewaySlbResponseBody = {
  code?: int32(name='Code', description='The response code returned.', example='200'),
  data?: string(name='Data', description='The returned data.', example='lb-uf6dqr4ondqi5w3df7hdf'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The returned message.

*   If the request is successful, a success message is returned.
*   If the request fails, an error message is returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='Id of the request', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model AddGatewaySlbResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddGatewaySlbResponseBody(name='body'),
}

async function addGatewaySlbWithOptions(request: AddGatewaySlbRequest, runtime: Util.RuntimeOptions): AddGatewaySlbResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.httpPort)) {
    query['HttpPort'] = request.httpPort;
  }
  if (!Util.isUnset(request.httpsPort)) {
    query['HttpsPort'] = request.httpsPort;
  }
  if (!Util.isUnset(request.httpsVServerGroupId)) {
    query['HttpsVServerGroupId'] = request.httpsVServerGroupId;
  }
  if (!Util.isUnset(request.serviceWeight)) {
    query['ServiceWeight'] = request.serviceWeight;
  }
  if (!Util.isUnset(request.slbId)) {
    query['SlbId'] = request.slbId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.VServerGroupId)) {
    query['VServerGroupId'] = request.VServerGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddGatewaySlb',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addGatewaySlb(request: AddGatewaySlbRequest): AddGatewaySlbResponse {
  var runtime = new Util.RuntimeOptions{};
  return addGatewaySlbWithOptions(request, runtime);
}

model AddMockRuleRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  consumerAppIds?: string(name='ConsumerAppIds', description='The ID of the custom application.', example='[{\\"appName\\":\\"provide\\",\\"appId\\":\\"bst8l6o735@f6d8aaf6e56e67d\\"}]'),
  dubboMockItems?: string(name='DubboMockItems', description='The items in the recycle bin.', example='[]'),
  enable?: boolean(name='Enable', description='Specifies whether to enable the rule. Valid values:

- `true`: enables the rule. 
- `false`: disables the rule.', example='true'),
  extraJson?: string(name='ExtraJson', description='The description.', example='{}'),
  mockType?: long(name='MockType', description='The response time threshold of slow calls. Valid values:

- 15: 15 ms
- 30: 30 ms
- 60: 60 ms
- 120: 120 ms', example='1'),
  name?: string(name='Name', description='The name of the rule.', example='agent-auto-test-sc'),
  providerAppId?: string(name='ProviderAppId', description='The ID of the service provider application.', example='dcqtkuhnc4@66e5235415****'),
  providerAppName?: string(name='ProviderAppName', description='The name of the service provider application.', example='demo-cartservice'),
  region?: string(name='Region', description='The ID of the region.', example='cn-hangzhou'),
  scMockItems?: string(name='ScMockItems', description='The input parameters. The JSON format is supported.', example='[]'),
  source?: string(name='Source', description='The source of the rule. Valid values: -custom_fc: The rule is based on a custom function. -system_custom: The rule is based on a system function.', example='edasmsc'),
}

model AddMockRuleResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: {
    accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account.', example='178432728867xxxx'),
    consumerAppId?: string(name='ConsumerAppId', description='The ID of the consumer application.', example='hkhon1po62@a000601b265xxxx'),
    consumerAppName?: string(name='ConsumerAppName', description='The name of the consumer application.', example='demo-xxxx'),
    enable?: boolean(name='Enable', description='Indicates whether the rule is enabled. 

- `true`: enabled 
- `false`: disabled', example='true'),
    extraJson?: string(name='ExtraJson', description='The description.', example='desc'),
    id?: long(name='Id', description='The ID of the rule.', example='275'),
    mockType?: long(name='MockType', description='The type of the model. Valid values:

- `[unk]0[unk]`: desktop client
- `[unk]1[unk]`: mobile client', example='0'),
    name?: string(name='Name', description='The name of the rule.', example='mse-bc1a29b0-160230875****-reg-center-0-1'),
    namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='cn-shanghai'),
    providerAppId?: string(name='ProviderAppId', description='The ID of the service provider application.', example='hkhon1po62@a000601b265xxxx'),
    providerAppName?: string(name='ProviderAppName', description='The name of the service provider application.', example='demo-xxxx'),
    region?: string(name='Region', description='The ID of the region.', example='cn-shanghai'),
    scMockItemJson?: string(name='ScMockItemJson', description='The HTTP mock rule.', example='[{"oper":"return+json","Path":"/mock","Value":"{\\n \\"date\\": \\"2021-09-10T07:45:12.357+0000\\",\\n \\"name\\": \\"name\\",\\n \\"id\\": \\"1\\"\\n}","Method":"GET","Condition":"AND","Timeout":1,"ArgumentMockItems":[{"type":"param","name":"id","value":"1","cond":"==","operator":"rawvalue"},{"type":"param","name":"name","value":"aliyun","cond":"==","operator":"rawvalue"}]}]'),
    source?: string(name='Source', description='The source.', example='edasmsc'),
  }(name='Data', description='The details of the data.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is processed successfully.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model AddMockRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddMockRuleResponseBody(name='body'),
}

async function addMockRuleWithOptions(request: AddMockRuleRequest, runtime: Util.RuntimeOptions): AddMockRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.consumerAppIds)) {
    query['ConsumerAppIds'] = request.consumerAppIds;
  }
  if (!Util.isUnset(request.dubboMockItems)) {
    query['DubboMockItems'] = request.dubboMockItems;
  }
  if (!Util.isUnset(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!Util.isUnset(request.extraJson)) {
    query['ExtraJson'] = request.extraJson;
  }
  if (!Util.isUnset(request.mockType)) {
    query['MockType'] = request.mockType;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.providerAppId)) {
    query['ProviderAppId'] = request.providerAppId;
  }
  if (!Util.isUnset(request.providerAppName)) {
    query['ProviderAppName'] = request.providerAppName;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.scMockItems)) {
    query['ScMockItems'] = request.scMockItems;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddMockRule',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addMockRule(request: AddMockRuleRequest): AddMockRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return addMockRuleWithOptions(request, runtime);
}

model AddSSLCertRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  certIdentifier?: string(name='CertIdentifier', description='The ID of the certificate.', example='5213641-cn-hangzhou'),
  domainId?: long(name='DomainId', description='The ID of the domain name.', example='0'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-c70622ff52fe49beb29bea9a6f52****'),
}

model AddSSLCertResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: boolean(name='Data', description='Indicates whether the association is successful.', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E1CC74F0-5BDE-5220-A031-5CA622D80723'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model AddSSLCertResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddSSLCertResponseBody(name='body'),
}

async function addSSLCertWithOptions(request: AddSSLCertRequest, runtime: Util.RuntimeOptions): AddSSLCertResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.certIdentifier)) {
    query['CertIdentifier'] = request.certIdentifier;
  }
  if (!Util.isUnset(request.domainId)) {
    query['DomainId'] = request.domainId;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddSSLCert',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addSSLCert(request: AddSSLCertRequest): AddSSLCertResponse {
  var runtime = new Util.RuntimeOptions{};
  return addSSLCertWithOptions(request, runtime);
}

model AddSecurityGroupRuleRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  description?: string(name='Description', description='The description of the rule.', example='description'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The ID of the gateway.', example='gw-c9bc5afd61014165bd58f621b491****'),
  portRange?: string(name='PortRange', description='The port range.', example='1/65535'),
  securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group.', example='sg-wz929kxhcdpw9z8idqd8'),
}

model AddSecurityGroupRuleResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: string(name='Data', description='The returned data.', example='12'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='D0DB055C-51F2-5BB2-82A6-CD8A3C6EE6BA'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model AddSecurityGroupRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddSecurityGroupRuleResponseBody(name='body'),
}

async function addSecurityGroupRuleWithOptions(request: AddSecurityGroupRuleRequest, runtime: Util.RuntimeOptions): AddSecurityGroupRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.portRange)) {
    query['PortRange'] = request.portRange;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddSecurityGroupRule',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addSecurityGroupRule(request: AddSecurityGroupRuleRequest): AddSecurityGroupRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return addSecurityGroupRuleWithOptions(request, runtime);
}

model AddServiceSourceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language in which the returned information is displayed. Valid values:

- zh-CN: Chinese. This is the default value.
- en-US: English.
- ja: Japanese.', example='zh-CN'),
  address?: string(name='Address', description='The address of the service.', example='c9ad2a0717032427e920754e25b49e3b5'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-c70622ff52fe49beb29bea9a6f52****'),
  groupList?: [ string ](name='GroupList', description='GroupList.'),
  ingressOptionsRequest?: {
    enableIngress?: boolean(name='EnableIngress', description='Specifies whether to enable Ingress.', example='true'),
    enableStatus?: boolean(name='EnableStatus', description='Update the Ingress Status.', example='true'),
    ingressClass?: string(name='IngressClass', description='Specifies whether to monitor Ingress classes.', example='com.test.xxx'),
    watchNamespace?: string(name='WatchNamespace', description='The namespace that you want to monitor.', example='default'),
  }(name='IngressOptionsRequest', description='The Ingress configuration.'),
  name?: string(name='Name', description='The name of the service.', example='istio'),
  pathList?: [ string ](name='PathList', description='Service root path array.'),
  source?: string(name='Source', description='The type of the service source.', example='K8s'),
  type?: string(name='Type', description='The service type.', example='K8s'),
}

model AddServiceSourceShrinkRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language in which the returned information is displayed. Valid values:

- zh-CN: Chinese. This is the default value.
- en-US: English.
- ja: Japanese.', example='zh-CN'),
  address?: string(name='Address', description='The address of the service.', example='c9ad2a0717032427e920754e25b49e3b5'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-c70622ff52fe49beb29bea9a6f52****'),
  groupListShrink?: string(name='GroupList', description='GroupList.'),
  ingressOptionsRequestShrink?: string(name='IngressOptionsRequest', description='The Ingress configuration.'),
  name?: string(name='Name', description='The name of the service.', example='istio'),
  pathListShrink?: string(name='PathList', description='Service root path array.'),
  source?: string(name='Source', description='The type of the service source.', example='K8s'),
  type?: string(name='Type', description='The service type.', example='K8s'),
}

model AddServiceSourceResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: long(name='Data', description='The returned data.', example='63'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='You are not authorized to perform this operation. Action: mse:AddServiceSource, Resource: acs:mse:cn-hangzhou:1105471854403716:instance/gw-082c943a8c304e48a37a7a29a5ddeda7'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D0DB055C-51F2-5BB2-82A6-CD8A3C6EE6BA'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model AddServiceSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddServiceSourceResponseBody(name='body'),
}

async function addServiceSourceWithOptions(tmpReq: AddServiceSourceRequest, runtime: Util.RuntimeOptions): AddServiceSourceResponse {
  Util.validateModel(tmpReq);
  var request = new AddServiceSourceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.groupList)) {
    request.groupListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.groupList, 'GroupList', 'json');
  }
  if (!Util.isUnset(tmpReq.ingressOptionsRequest)) {
    request.ingressOptionsRequestShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ingressOptionsRequest, 'IngressOptionsRequest', 'json');
  }
  if (!Util.isUnset(tmpReq.pathList)) {
    request.pathListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.pathList, 'PathList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.address)) {
    query['Address'] = request.address;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.groupListShrink)) {
    query['GroupList'] = request.groupListShrink;
  }
  if (!Util.isUnset(request.ingressOptionsRequestShrink)) {
    query['IngressOptionsRequest'] = request.ingressOptionsRequestShrink;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pathListShrink)) {
    query['PathList'] = request.pathListShrink;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddServiceSource',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addServiceSource(request: AddServiceSourceRequest): AddServiceSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return addServiceSourceWithOptions(request, runtime);
}

model ApplyGatewayRouteRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-1a4ab101d5924b6f92c5ec98a841761f'),
  routeId?: string(name='RouteId', description='The ID of the route.', example='950'),
}

model ApplyGatewayRouteResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: boolean(name='Data', description='The data that indicates whether the operation is successful.', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1DB1AB36-8395-540E-AACC-7571D6B2057A'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model ApplyGatewayRouteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApplyGatewayRouteResponseBody(name='body'),
}

async function applyGatewayRouteWithOptions(request: ApplyGatewayRouteRequest, runtime: Util.RuntimeOptions): ApplyGatewayRouteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.routeId)) {
    query['RouteId'] = request.routeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ApplyGatewayRoute',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function applyGatewayRoute(request: ApplyGatewayRouteRequest): ApplyGatewayRouteResponse {
  var runtime = new Util.RuntimeOptions{};
  return applyGatewayRouteWithOptions(request, runtime);
}

model ApplyTagPoliciesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  appId?: string(name='AppId', description='The ID of the application.', example='h5pohqu3gd@xxx'),
  enable?: boolean(name='Enable', description='Specifies whether to enable the routing rule.', example='true'),
  namespaceId?: string(name='NamespaceId', description='Optional. The ID of the namespace.', example='12233****'),
  region?: string(name='Region', description='The ID of the region.', example='cn-hangzhou'),
  rules?: string(name='Rules', description='The details of the routing rule.', example='{
	"blue": { # Tag key.
  "rate": 20, # Rate. A value of 20 indicates that 20% of the traffic is routed to the node identified by the tag.
  "name": "luoye-route-test", # Routing rule name.
  "carryData": false, # Specifies whether to enable pass-through. This parameter is applicable to end-to-end canary release.
  "rules": { # Rule information.
  	"dubbo": [{ # Dubbo rule. The system also supports Spring Cloud and Istio rule.
    "serviceName": "com.taobao.hsf.common.DemoService", # Service name (operation name).
    "group": "", # Group name.
    "version": "", # Service version.
    "methodName": "sayHello", # Method name.
    "condition": "AND", # Logical operator used by the following items. Valid values: AND and OR.
    "argumentItems": [{ # Array of rule details.
    	"index": 0, # Index field.
    	"expr": "", # Expression. Its details is described below.
    	"operator": "rawvalue",  # The comparison mode. A value of rawvalue indicates direct comparison. A value of mode indicates the modulo operation. A value of list indicates using a whitelist. 
    	"value": "jim", # Base value. The value obtained by the expression will be compared with this value. If operator is set to list, separate the items specified for this parameter with commas (,). Example: 1,2,3.
    	"cond": "==" # Comparison operator. Valid values: >=, <=, >, <, and ==.
    }]
  	}]
  }
	},
	"_base": { # Another tag key.
  "rate": 80 # Rate. A value of 20 indicates that 20% of the traffic is routed to the node identified by the tag.
	}
}'),
  source?: string(name='Source', description='The source of the routing rule.', example='edasmsc'),
}

model ApplyTagPoliciesResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: [ 
    {
      carryData?: boolean(name='CarryData', description='Indicates whether pass-through is enabled.', example='true'),
      enable?: boolean(name='Enable', description='Indicates whether the routing rule is enabled. 

- `true`: enabled 
- `false`: disabled', example='true'),
      id?: long(name='Id', description='The ID of the primary key.', example='12'),
      instanceNum?: int32(name='InstanceNum', description='The number of instances.', example='1'),
      name?: string(name='Name', description='The name of the routing rule.', example='test'),
      rate?: int32(name='Rate', description='The rate.', example='10'),
      remove?: boolean(name='Remove', description='Indicates whether the routing rule is deleted.'),
      rules?: string(name='Rules', description='The details of the routing rule.', example='{\\"_base\\": {\\"rate\\": 100, \\"remove\\": true}, \\"blue\\": {\\"rate\\": 0}}'),
      status?: int32(name='Status', description='The status of the routing rule.', example='1'),
      tag?: string(name='Tag', description='The tag.', example='gray'),
    }
  ](name='Data', description='The returned data.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model ApplyTagPoliciesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApplyTagPoliciesResponseBody(name='body'),
}

async function applyTagPoliciesWithOptions(request: ApplyTagPoliciesRequest, runtime: Util.RuntimeOptions): ApplyTagPoliciesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!Util.isUnset(request.namespaceId)) {
    query['NamespaceId'] = request.namespaceId;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.rules)) {
    query['Rules'] = request.rules;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ApplyTagPolicies',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function applyTagPolicies(request: ApplyTagPoliciesRequest): ApplyTagPoliciesResponse {
  var runtime = new Util.RuntimeOptions{};
  return applyTagPoliciesWithOptions(request, runtime);
}

model CloneNacosConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  ids?: string(name='Ids', description='The IDs of configurations.', example='253661,253662'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse_prepaid_public_cn-i7m25igg403'),
  originNamespaceId?: string(name='OriginNamespaceId', description='The ID of the source namespace.', example='be821963-6d48-4ea5-9910-6057d****'),
  policy?: string(name='Policy', description='The policy used to handle write conflicts.', example='overwrite'),
  targetNamespaceId?: string(name='TargetNamespaceId', description='The ID of the destination namespace.', example='08be4b5d-2d1c-4e6e-aa85-83b9****'),
}

model CloneNacosConfigResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: {
    failData?: [ 
      {
        dataId?: string(name='DataId', description='The data ID.', example='test2.yaml'),
        group?: string(name='Group', description='The ID of the group.', example='test'),
      }
    ](name='FailData', description='The details of the failed configurations.'),
    skipCount?: int32(name='SkipCount', description='The number of skipped operations.', example='1'),
    skipData?: [ 
      {
        dataId?: string(name='DataId', description='The data ID.', example='test.yaml'),
        group?: string(name='Group', description='The ID of the group.', example='public'),
      }
    ](name='SkipData', description='The details of the skipped configurations.'),
    succCount?: int32(name='SuccCount', description='The number of successful operations.', example='100'),
  }(name='Data', description='The details of the data.'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **Message** parameter. 
> If the specified **InstanceId** parameter is invalid, **The Value of Input Parameter %s is not valid** is returned for **Message** and **InstanceId** is returned for **DynamicMessage**.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='Clone Completed Successfully'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6678DBA9-5600-5948-ACF8-ED3105B288A3'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model CloneNacosConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CloneNacosConfigResponseBody(name='body'),
}

/**
  * > The current API operation is not provided in Nacos SDK. For information about Nacos SDK, see the [official Nacos documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
  * @param request CloneNacosConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CloneNacosConfigResponse
 */
async function cloneNacosConfigWithOptions(request: CloneNacosConfigRequest, runtime: Util.RuntimeOptions): CloneNacosConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.ids)) {
    query['Ids'] = request.ids;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.originNamespaceId)) {
    query['OriginNamespaceId'] = request.originNamespaceId;
  }
  if (!Util.isUnset(request.policy)) {
    query['Policy'] = request.policy;
  }
  if (!Util.isUnset(request.targetNamespaceId)) {
    query['TargetNamespaceId'] = request.targetNamespaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CloneNacosConfig',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > The current API operation is not provided in Nacos SDK. For information about Nacos SDK, see the [official Nacos documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
  * @param request CloneNacosConfigRequest
  * @return CloneNacosConfigResponse
 */
async function cloneNacosConfig(request: CloneNacosConfigRequest): CloneNacosConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return cloneNacosConfigWithOptions(request, runtime);
}

model CreateApplicationRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  appName?: string(name='AppName', description='The name of the application.', example='spring-cloud-a'),
  extraInfo?: string(name='ExtraInfo', description='The additional information.', example='text'),
  language?: string(name='Language', description='The programming language of the application.', example='JAVA'),
  region?: string(name='Region', description='The region to which the application belongs.', example='cn-hangzhou'),
  sentinelEnable?: string(name='SentinelEnable', description='Specifies whether to enable the Sentinel-compatible mode.', example='true'),
  source?: string(name='Source', description='The service where the application is deployed. A value of ACK indicates Container Service for Kubernetes.', example='ACK'),
  switchEnable?: string(name='SwitchEnable', description='Specifies whether to enable switching.', example='true'),
}

model CreateApplicationResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: {
    appId?: string(name='AppId', description='The ID of the application.', example='xxxxxxxx@xxxxxxxxxx'),
    appName?: string(name='AppName', description='The name of the application.', example='spring-cloud-a'),
    createTime?: long(name='CreateTime', description='The time when the application was created.', example='1631001140913'),
    extraInfo?: string(name='ExtraInfo', description='The additional information.', example='{\\"rpcTypes\\":[\\"dubbo\\",\\"springCloud\\"]}'),
    language?: string(name='Language', description='The programming language of the application.', example='JAVA'),
    licenseKey?: string(name='LicenseKey', description='The license key in use.', example='xxxxxxxx@xxxxxxxxxx'),
    regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
    source?: string(name='Source', description='The service where the application is deployed. Valid values: 

- ACK: Container Service for Kubernetes 
- Normal: another service', example='ACK'),
    status?: int32(name='Status', description='The status of the application. A value of 1 indicates that the application is in a normal state.', example='1'),
    updateTime?: long(name='UpdateTime', description='The time when the application was last modified.', example='1632979237663'),
    userId?: string(name='UserId', description='The ID of the Alibaba Cloud account.', example='1888888888'),
  }(name='Data', description='The details of the data.', example='data'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='68D91223-CCE9-5F9C-B538-20F617DA48B1'),
  success?: string(name='Success', description='Indicates whether the request is successful. Valid values:

- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model CreateApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateApplicationResponseBody(name='body'),
}

async function createApplicationWithOptions(request: CreateApplicationRequest, runtime: Util.RuntimeOptions): CreateApplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.extraInfo)) {
    query['ExtraInfo'] = request.extraInfo;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.sentinelEnable)) {
    query['SentinelEnable'] = request.sentinelEnable;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.switchEnable)) {
    query['SwitchEnable'] = request.switchEnable;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateApplication',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createApplication(request: CreateApplicationRequest): CreateApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createApplicationWithOptions(request, runtime);
}

model CreateClusterRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  clusterSpecification?: string(name='ClusterSpecification', description='The engine specifications. Valid values:

\\[Professional Edition]

*   `MSE_SC_2_4_60_c`: 2 CPU cores and 4 GB of memory
*   `MSE_SC_1_2_60_c`: 1 CPU core and 2 GB of memory
*   `MSE_SC_4_8_60_c`: 4 CPU cores and 8 GB of memory
*   `MSE_SC_8_16_60_c`: 8 CPU cores and 16 GB of memory
*   `MSE_SC_16_32_60_c`: 16 CPU cores and 32 GB of memory

\\[Developer Edition]

*   `MSE_SC_1_2_60_c`: 1 CPU core and 2 GB of memory
*   `MSE_SC_2_4_60_c`: 2 CPU cores and 4 GB of memory', example='MSE_SC_2_4_60_c'),
  clusterType?: string(name='ClusterType', description='The type of the instance. Valid values: ZooKeeper and Nacos-Ans.', example='Nacos-Ans'),
  clusterVersion?: string(name='ClusterVersion', description='The engine version of the instance. Valid values:

\\[Professional Edition]

*   `NACOS_2_0_0`: Nacos 2.0.0
*   `ZooKeeper_3_8_0`: ZooKeeper 3.8.0

\\[Developer Edition]

*   `NACOS_2_0_0`: Nacos 2.0.0
*   `ZooKeeper_3_8_0`: ZooKeeper 3.8.0', example='NACOS_2_0_0'),
  connectionType?: string(name='ConnectionType', description='The network connection type. Valid values:

*   slb
*   eni', example='slb'),
  diskType?: string(name='DiskType', description='The disk type. Valid values:

*   alicloud-disk-ssd
*   alicloud-disk-essd-pl1', example='alicloud-disk-ssd'),
  instanceCount?: int32(name='InstanceCount', description='The number of nodes in the instance. Valid values: 1 to 9.

\\[Professional Edition]

*   The number of nodes in an instance is greater than or equal to 3 and must be an odd number.

\\[Developer Edition]

*   Only one node can be deployed for an instance.', example='3'),
  instanceName?: string(name='InstanceName', description='The name of the instance.', example='tanshuyingtest001'),
  mseVersion?: string(name='MseVersion', description='Set this parameter unless otherwise specified. Valid values:

*   `mse_pro`: Professional Edition
*   `mse_dev`: Developer Edition', example='mse_pro'),
  netType?: string(name='NetType', description='The network type of the instance. Valid values:

*   `privatenet`: VPC
*   `pubnet`: Internet', example='privatenet'),
  privateSlbSpecification?: string(name='PrivateSlbSpecification', description='The specifications of the internal-facing SLB instance. Valid values:

*   `slb.s1.small`
*   `slb.s3.medium`', example='slb.s1.small'),
  pubNetworkFlow?: string(name='PubNetworkFlow', description='The public bandwidth. Unit: Mbit/s.\\
Valid values: 0 to 5000. The value 0 indicates no access to the Internet.', example='0'),
  pubSlbSpecification?: string(name='PubSlbSpecification', description='The specifications of the Internet-facing Server Load Balancer (SLB) instance. Valid values:

*   `slb.s1.small`
*   `slb.s3.medium`', example='slb.s1.small'),
  region?: string(name='Region', description='The region where the MSE instance resides. Examples:

*   `cn-hangzhou`: China (Hangzhou)
*   `cn-beijing`: China (Beijing)
*   `cn-shanghai`: China (Shanghai)
*   `cn-zhangjiakou`: China (Zhangjiakou)
*   `cn-shenzhen`: China (Shenzhen)', example='cn-hangzhou'),
  requestPars?: string(name='RequestPars', description='The extended request parameter in the JSON format.', example='{}'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. For more information about resource groups, see the topic "View basic information of a resource group."', example='rg-aekzcqmoay3dlyq'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of a tag.', example='env'),
      value?: string(name='Value', description='The value of a tag.', example='prd'),
    }
  ](name='Tag', description='The list of the tags that you want to add.'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-bp17opt4v18sto39k****'),
  vpcId?: string(name='VpcId', description='VPC ID.', example='vpc-bp1t50e045b5g7i3p****'),
}

model CreateClusterResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='mse-100-000'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-st21ri2****'),
  message?: string(name='Message', description='The returned message.', example='The request was successfully processed.'),
  orderId?: string(name='OrderId', description='The ID of the order.', example='20574710974****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='dc63-465d-8ef5-20dc18af****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model CreateClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateClusterResponseBody(name='body'),
}

/**
  * Before you call this API operation, you must make sure that you fully understand the billing method and pricing of MSE.
  *
  * @param request CreateClusterRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateClusterResponse
 */
async function createClusterWithOptions(request: CreateClusterRequest, runtime: Util.RuntimeOptions): CreateClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterSpecification)) {
    query['ClusterSpecification'] = request.clusterSpecification;
  }
  if (!Util.isUnset(request.clusterType)) {
    query['ClusterType'] = request.clusterType;
  }
  if (!Util.isUnset(request.clusterVersion)) {
    query['ClusterVersion'] = request.clusterVersion;
  }
  if (!Util.isUnset(request.connectionType)) {
    query['ConnectionType'] = request.connectionType;
  }
  if (!Util.isUnset(request.diskType)) {
    query['DiskType'] = request.diskType;
  }
  if (!Util.isUnset(request.instanceCount)) {
    query['InstanceCount'] = request.instanceCount;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.mseVersion)) {
    query['MseVersion'] = request.mseVersion;
  }
  if (!Util.isUnset(request.netType)) {
    query['NetType'] = request.netType;
  }
  if (!Util.isUnset(request.privateSlbSpecification)) {
    query['PrivateSlbSpecification'] = request.privateSlbSpecification;
  }
  if (!Util.isUnset(request.pubNetworkFlow)) {
    query['PubNetworkFlow'] = request.pubNetworkFlow;
  }
  if (!Util.isUnset(request.pubSlbSpecification)) {
    query['PubSlbSpecification'] = request.pubSlbSpecification;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.requestPars)) {
    query['RequestPars'] = request.requestPars;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCluster',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Before you call this API operation, you must make sure that you fully understand the billing method and pricing of MSE.
  *
  * @param request CreateClusterRequest
  * @return CreateClusterResponse
 */
async function createCluster(request: CreateClusterRequest): CreateClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return createClusterWithOptions(request, runtime);
}

model CreateEngineNamespaceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='mse-98s****'),
  desc?: string(name='Desc', description='The description of the namespace.', example='Development environment'),
  id?: string(name='Id', description='The custom ID of the namespace. If you do not specify this parameter, the automatically generated Universally Unique Identifier (UUID) is returned.', example='f4fa5b81-2f26-4900-833a-7516b315ebb2'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-st21ri2****'),
  name?: string(name='Name', description='The display name of the namespace.', example='dev'),
  serviceCount?: int32(name='ServiceCount', description='The maximum number of services that can run in the namespace.', example='100'),
}

model CreateEngineNamespaceResponseBody = {
  clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='mse-892k****'),
  data?: {
    configCount?: int32(name='ConfigCount', description='The number of configurations.', example='1'),
    namespace?: string(name='Namespace', description='The ID of the namespace.', example='f4fa5b81-2f26-4900-833a-7516b315ebb2'),
    namespaceDesc?: string(name='NamespaceDesc', description='The description of the namespace.', example='mytest'),
    namespaceShowName?: string(name='NamespaceShowName', description='The display name of the namespace.', example='dev'),
    quota?: int32(name='Quota', description='The quota of configurations.', example='1'),
    serviceCount?: int32(name='ServiceCount', description='The number of active services.', example='3'),
    type?: int32(name='Type', description='The type of the namespace. Valid values:

*   `0`: global configuration
*   `1`: default namespace
*   `2`: custom namespace', example='1'),
  }(name='Data', description='The details of the data.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='mse-100-000'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F6092602-C357-4750-89D9-E572FBEA****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model CreateEngineNamespaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateEngineNamespaceResponseBody(name='body'),
}

async function createEngineNamespaceWithOptions(request: CreateEngineNamespaceRequest, runtime: Util.RuntimeOptions): CreateEngineNamespaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.desc)) {
    query['Desc'] = request.desc;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.serviceCount)) {
    query['ServiceCount'] = request.serviceCount;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateEngineNamespace',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createEngineNamespace(request: CreateEngineNamespaceRequest): CreateEngineNamespaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEngineNamespaceWithOptions(request, runtime);
}

model CreateMseServiceApplicationRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  appName?: string(name='AppName', description='The name of the application.', example='bsd-xxyp-open-goods-server'),
  extraInfo?: string(name='ExtraInfo', description='The additional information.', example='{}'),
  language?: string(name='Language', description='The programming language of the application.', example='JAVA'),
  mseVersion?: string(name='MseVersion', description='The edition of the MSE instance that you want to purchase.

*   mse_pro: Professional Edition
*   mse_dev: Developer Edition', example='mse_pro'),
  region?: string(name='Region', description='The ID of the region where the Microservices Engine (MSE) instance resides. Examples:

*   cn-hangzhou: China (Hangzhou)
*   cn-beijing: China (Beijing)
*   cn-shanghai: China (Shanghai)
*   cn-zhangjiakou: China (Zhangjiakou)
*   cn-shenzhen: China (Shenzhen)', example='cn-shenzhen'),
  sentinelEnable?: string(name='SentinelEnable', description='Specifies whether to enable the Sentinel-compatible mode.', example='true'),
  source?: string(name='Source', description='The service source.', example='edasmsc'),
  switchEnable?: string(name='SwitchEnable', description='Specifies whether to enable switching.', example='true'),
}

model CreateMseServiceApplicationResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: {
    appId?: string(name='AppId', description='The ID of the application.', example='xxxxxxxx@xxxxxxxxxx'),
    appName?: string(name='AppName', description='The name of the application.', example='spring-cloud-a'),
    createTime?: long(name='CreateTime', description='The creation time.', example='1631001140913'),
    extraInfo?: string(name='ExtraInfo', description='The additional information.', example='{}'),
    language?: string(name='Language', description='The programming language of the application.', example='JAVA'),
    licenseKey?: string(name='LicenseKey', description='The license key in use.', example='xxxxxxxx@xxxxxxxxxx'),
    regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
    source?: string(name='Source', description='The type of the service source.', example='edasmsc'),
    status?: int32(name='Status', description='The status.', example='1'),
    updateTime?: long(name='UpdateTime', description='The time of the last modification.', example='1632979237663'),
    userId?: string(name='UserId', description='The ID of the user.', example='1234567890'),
    version?: string(name='Version', description='The version information.', example='1.0.0'),
  }(name='Data', description='The data structure.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='904F6C04-1284-****-8ED2-FFC57E507A72'),
  success?: string(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model CreateMseServiceApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateMseServiceApplicationResponseBody(name='body'),
}

async function createMseServiceApplicationWithOptions(request: CreateMseServiceApplicationRequest, runtime: Util.RuntimeOptions): CreateMseServiceApplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.extraInfo)) {
    query['ExtraInfo'] = request.extraInfo;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.mseVersion)) {
    query['MseVersion'] = request.mseVersion;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.sentinelEnable)) {
    query['SentinelEnable'] = request.sentinelEnable;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.switchEnable)) {
    query['SwitchEnable'] = request.switchEnable;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateMseServiceApplication',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createMseServiceApplication(request: CreateMseServiceApplicationRequest): CreateMseServiceApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMseServiceApplicationWithOptions(request, runtime);
}

model CreateNacosConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  appName?: string(name='AppName', description='The name of the application.', example='saledatacenter-task'),
  betaIps?: string(name='BetaIps', description='The list of IP addresses where the beta release of the configuration is performed.', example='100.117.XX.XX,100.117.XX.XX'),
  content?: string(name='Content', description='The content of the configuration.', example='asdf'),
  dataId?: string(name='DataId', description='The data ID.', example='common.yaml'),
  desc?: string(name='Desc', description='The description of the configuration.', example='Basic module configuration.'),
  group?: string(name='Group', description='The ID of the group.', example='alime-bridge-aliyun'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse_prepaid_public_cn-tl32****'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='547fd2a0-d0d6-****-80db2a1afb82'),
  tags?: string(name='Tags', description='The tag of the configuration.', example='Basic config'),
  type?: string(name='Type', description='The format of the configuration. Supported formats include TEXT, JSON, and XML.', example='text'),
}

model CreateNacosConfigResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='1'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code returned.', example='202'),
  message?: string(name='Message', description='The message returned.', example='The request is processed successfully.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='673DBD43-569E-510F-B3DE-20BB8DFEB20A'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model CreateNacosConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateNacosConfigResponseBody(name='body'),
}

/**
  * > The current API operation is not provided in Nacos SDK. For information about Nacos SDK, see the [official Nacos documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
  * @param request CreateNacosConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateNacosConfigResponse
 */
async function createNacosConfigWithOptions(request: CreateNacosConfigRequest, runtime: Util.RuntimeOptions): CreateNacosConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.betaIps)) {
    query['BetaIps'] = request.betaIps;
  }
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.dataId)) {
    query['DataId'] = request.dataId;
  }
  if (!Util.isUnset(request.desc)) {
    query['Desc'] = request.desc;
  }
  if (!Util.isUnset(request.group)) {
    query['Group'] = request.group;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.namespaceId)) {
    query['NamespaceId'] = request.namespaceId;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateNacosConfig',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > The current API operation is not provided in Nacos SDK. For information about Nacos SDK, see the [official Nacos documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
  * @param request CreateNacosConfigRequest
  * @return CreateNacosConfigResponse
 */
async function createNacosConfig(request: CreateNacosConfigRequest): CreateNacosConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNacosConfigWithOptions(request, runtime);
}

model CreateNacosInstanceRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  clusterName?: string(name='ClusterName', description='The name of the Nacos cluster.', example='DEFAULT'),
  enabled?: boolean(name='Enabled', description='Specifies whether to enable the service for the instance.', example='true'),
  ephemeral?: boolean(name='Ephemeral', description='Specifies whether to mark the instance as a temporary node.', example='false'),
  groupName?: string(name='GroupName', description='The name of the group.', example='DEFAULT_GROUP'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-123456'),
  ip?: string(name='Ip', description='The IP address of the Nacos instance.', example='1.2.3.4'),
  metadata?: string(name='Metadata', description='The node metadata of the instance.', example='{\\"grayversion\\":\\"1.0\\",\\"preserved.register.source\\":\\"SPRING_CLOUD\\",\\"management.context-path\\":\\"\\"}'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='9e78a671-4b9b-4dd4-99c1-0b9da87****'),
  port?: int32(name='Port', description='The port of the Nacos instance.', example='12281'),
  serviceName?: string(name='ServiceName', description='The name of the service.', example='hello_service'),
  weight?: string(name='Weight', description='The weight of the instance.', example='1'),
}

model CreateNacosInstanceResponseBody = {
  code?: int32(name='Code', description='The message returned.', example='200'),
  data?: string(name='Data', description='Indicates whether the request is successful.', example='ok'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The data structure.', example='200'),
  message?: string(name='Message', description='The ID of the request.', example='The message returned.'),
  requestId?: string(name='RequestId', description='The HTTP status code returned.', example='9e78a671-4b9b-4dd4-99c1-0b9da87d3dec'),
  success?: boolean(name='Success', description='The status code returned.', example='true'),
}

model CreateNacosInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateNacosInstanceResponseBody(name='body'),
}

/**
  * Programming language
  *
  * @param request CreateNacosInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateNacosInstanceResponse
 */
async function createNacosInstanceWithOptions(request: CreateNacosInstanceRequest, runtime: Util.RuntimeOptions): CreateNacosInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterName)) {
    query['ClusterName'] = request.clusterName;
  }
  if (!Util.isUnset(request.enabled)) {
    query['Enabled'] = request.enabled;
  }
  if (!Util.isUnset(request.ephemeral)) {
    query['Ephemeral'] = request.ephemeral;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ip)) {
    query['Ip'] = request.ip;
  }
  if (!Util.isUnset(request.namespaceId)) {
    query['NamespaceId'] = request.namespaceId;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.serviceName)) {
    query['ServiceName'] = request.serviceName;
  }
  if (!Util.isUnset(request.weight)) {
    query['Weight'] = request.weight;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.metadata)) {
    body['Metadata'] = request.metadata;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateNacosInstance',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Programming language
  *
  * @param request CreateNacosInstanceRequest
  * @return CreateNacosInstanceResponse
 */
async function createNacosInstance(request: CreateNacosInstanceRequest): CreateNacosInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNacosInstanceWithOptions(request, runtime);
}

model CreateNacosServiceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  clusterId?: string(name='ClusterId', description='The ID of the cluster. This operation contains both the InstanceId and ClusterId parameters. You must configure either InstanceId or ClusterId.', example='mse-3691a080'),
  ephemeral?: boolean(name='Ephemeral', description='Specifies whether the instance is a temporary node. Valid values:

*   `true`: yes
*   `false`: no', example='true'),
  groupName?: string(name='GroupName', description='The name of the group.', example='DEFAULT_GROUP'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.

> This operation contains both the InstanceId and ClusterId parameters. You must configure either InstanceId or ClusterId.', example='mse-cn-st21ri2****'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='production'),
  protectThreshold?: string(name='ProtectThreshold', description='The protection threshold.', example='0'),
  serviceName?: string(name='ServiceName', description='The name of the service.', example='com.alibabacloud.hipstershop.cartserviceapi.service.CartService'),
}

model CreateNacosServiceResponseBody = {
  code?: int32(name='Code', description='The response code returned.', example='200'),
  data?: string(name='Data', description='The data of the node.', example='data'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5B170A0D-2C5D-4CF8-B808-03966B86****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='True'),
}

model CreateNacosServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateNacosServiceResponseBody(name='body'),
}

/**
  * > The operation is not provided in Nacos SDKs. For more information about Nacos SDKs, see the [official documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
  * @param request CreateNacosServiceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateNacosServiceResponse
 */
async function createNacosServiceWithOptions(request: CreateNacosServiceRequest, runtime: Util.RuntimeOptions): CreateNacosServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.ephemeral)) {
    query['Ephemeral'] = request.ephemeral;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.namespaceId)) {
    query['NamespaceId'] = request.namespaceId;
  }
  if (!Util.isUnset(request.protectThreshold)) {
    query['ProtectThreshold'] = request.protectThreshold;
  }
  if (!Util.isUnset(request.serviceName)) {
    query['ServiceName'] = request.serviceName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateNacosService',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > The operation is not provided in Nacos SDKs. For more information about Nacos SDKs, see the [official documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
  * @param request CreateNacosServiceRequest
  * @return CreateNacosServiceResponse
 */
async function createNacosService(request: CreateNacosServiceRequest): CreateNacosServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNacosServiceWithOptions(request, runtime);
}

model CreateOrUpdateSwimmingLaneRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:****

*   **zh-CN**: Chinese
*   **en-US**: English.

> Default value: **zh-CN**.', example='zh'),
  enable?: boolean(name='Enable', description='Specifies whether to enable a lane.', example='true'),
  enableRules?: boolean(name='EnableRules', description='Specifies whether to set a routing rule for the lane. If an Ingress gateway is used, this parameter is not required.', example='false'),
  entryRule?: string(name='EntryRule', description='json string.', example='{}'),
  entryRules?: [ 
    {
      condition?: string(name='Condition', description='The common parameters in the JSON format.', example='""'),
      enable?: boolean(name='Enable', description='Specifies whether to enable the rule. Valid values:

*   `true`: yes
*   `false`: no', example='false'),
      path?: string(name='Path', description='The path.', example='/test'),
      paths?: [ string ](name='Paths', description='The list of paths.'),
      priority?: int32(name='Priority', description='The priority. A smaller value of this parameter indicates a higher priority.', example='1'),
      restItems?: [ 
        {
          cond?: string(name='Cond', description='The expression. =, >, <, >=, <=', example='='),
          datum?: string(name='Datum', description='The base value used for the rawvalue operator.', example='.params[0]'),
          divisor?: int32(name='Divisor', description='The divisor used for the mod operator.', example='10'),
          name?: string(name='Name', description='The name of the rule. This parameter corresponds to the key of the type parameter.', example='""'),
          nameList?: [ string ](name='NameList', description='The list of names.'),
          operator?: string(name='Operator', description='The operator type. Valid values: mod, list, rawvalue, and rate.', example='mod'),
          rate?: int32(name='Rate', description='The rate.', example='10'),
          remainder?: int32(name='Remainder', description='The remainder used for the mod operator.', example='3'),
          type?: string(name='Type', description='The type of the rule. Valid values: cookie, param, and header.', example='header'),
          value?: string(name='Value', description='The content of the rule.', example='""'),
        }
      ](name='RestItems', description='The information about the rule for the REST method.'),
    }
  ](name='EntryRules', description='SwimmingLane.'),
  gmtCreate?: string(name='GmtCreate', description='Optional. The time when the lane was created.', example='""'),
  gmtModified?: string(name='GmtModified', description='Optional. The time when the lane was last modified.', example='""'),
  groupId?: long(name='GroupId', description='The group to which the lane belongs.', example='115'),
  id?: long(name='Id', description='The ID of the primary key. A value -1 specifies a request that is used to create a lane. A value greater than 0 specifies a request that is used to modify a lane.', example='-1'),
  licenseKey?: string(name='LicenseKey', description='The license key in use.', example='9wnrf04a0j@****'),
  name?: string(name='Name', description='The name of the lane.', example='Test lane'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-beijing'),
  source?: string(name='Source', description='The service source. Valid value: edasmsc.', example='edasmsc'),
  status?: int32(name='Status', description='The value 0 indicates that the lane is disabled.', example='1'),
  tag?: string(name='Tag', description='The tag.', example='gray'),
  userId?: string(name='UserId', description='The Alibaba Cloud account. The format is a number, such as 136246975637\\*\\*\\*\\*. You can leave this parameter empty.'),
}

model CreateOrUpdateSwimmingLaneResponseBody = {
  code?: int32(name='Code', description='The status code. The value 200 is returned if the request is successful.', example='200'),
  data?: any(name='Data', description='The details of the data.', example='{}'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The returned message.', example='The request was successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EE5C32A1-BC0E-4B79-817C-103E4EDF****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model CreateOrUpdateSwimmingLaneResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateOrUpdateSwimmingLaneResponseBody(name='body'),
}

async function createOrUpdateSwimmingLaneWithOptions(request: CreateOrUpdateSwimmingLaneRequest, runtime: Util.RuntimeOptions): CreateOrUpdateSwimmingLaneResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!Util.isUnset(request.enableRules)) {
    query['EnableRules'] = request.enableRules;
  }
  if (!Util.isUnset(request.entryRule)) {
    query['EntryRule'] = request.entryRule;
  }
  if (!Util.isUnset(request.entryRules)) {
    query['EntryRules'] = request.entryRules;
  }
  if (!Util.isUnset(request.gmtCreate)) {
    query['GmtCreate'] = request.gmtCreate;
  }
  if (!Util.isUnset(request.gmtModified)) {
    query['GmtModified'] = request.gmtModified;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.licenseKey)) {
    query['LicenseKey'] = request.licenseKey;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateOrUpdateSwimmingLane',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createOrUpdateSwimmingLane(request: CreateOrUpdateSwimmingLaneRequest): CreateOrUpdateSwimmingLaneResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOrUpdateSwimmingLaneWithOptions(request, runtime);
}

model CreateOrUpdateSwimmingLaneGroupRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

zh: Chinese en: English Default value: zh', example='zh'),
  appIds?: string(name='AppIds', description='The IDs of applications. Separate application IDs with commas (,).', example='hkhon1po62@c3df23522baa898,hkhon1po62@66e5235415730a5,hkhon1po62@958bba95910341f'),
  dbGrayEnable?: boolean(name='DbGrayEnable', description='Specifies whether to enable database canary release.', example='true'),
  enable?: boolean(name='Enable', description='Specifies whether to enable a lane group.', example='true'),
  entryApp?: string(name='EntryApp', description='The ingress application.', example='Ingress'),
  gmtCreate?: string(name='GmtCreate', description='The creation time.', example='2021-12-20T03:22:07.000+0000'),
  gmtModified?: string(name='GmtModified', description='The update time.', example='2022-02-24T07:18:24.962+0000'),
  id?: long(name='Id', description='The ID of the primary key. The primary key is auto-increment.', example='120'),
  licenseKey?: string(name='LicenseKey', description='The license key in use.', example='9wnrf04a0j@****'),
  messageQueueFilterSide?: string(name='MessageQueueFilterSide', description='The side for message filtering when the canary release for messaging feature is enabled.', example='Server'),
  messageQueueGrayEnable?: boolean(name='MessageQueueGrayEnable', description='Specifies whether to enable canary release for messaging.', example='true'),
  name?: string(name='Name', description='The name.', example='group1'),
  region?: string(name='Region', description='Region.', example='cn-shanghai'),
  source?: string(name='Source', description='The service source. Set the value to edasmsc.', example='edasmsc'),
  status?: int32(name='Status', description='The status of the lane group. The value 0 indicates that the lane group is disabled. The value 1 indicates that the lane group is enabled.', example='0'),
  userId?: string(name='UserId', description='The Alibaba Cloud account. The value is a number, such as 136246\\*\\*\\*\\*\\*\\*809. You can leave this parameter empty.', example='""'),
}

model CreateOrUpdateSwimmingLaneGroupResponseBody = {
  code?: int32(name='Code', description='The status code. The value 200 is returned if the request is successful.', example='200'),
  data?: any(name='Data', description='The details of the data.', example='{}'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EE5C32A1-BC0E-4B79-817C-103E4EDF****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

true: The request was successful. false: The request failed.', example='true'),
}

model CreateOrUpdateSwimmingLaneGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateOrUpdateSwimmingLaneGroupResponseBody(name='body'),
}

async function createOrUpdateSwimmingLaneGroupWithOptions(request: CreateOrUpdateSwimmingLaneGroupRequest, runtime: Util.RuntimeOptions): CreateOrUpdateSwimmingLaneGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.appIds)) {
    query['AppIds'] = request.appIds;
  }
  if (!Util.isUnset(request.dbGrayEnable)) {
    query['DbGrayEnable'] = request.dbGrayEnable;
  }
  if (!Util.isUnset(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!Util.isUnset(request.entryApp)) {
    query['EntryApp'] = request.entryApp;
  }
  if (!Util.isUnset(request.gmtCreate)) {
    query['GmtCreate'] = request.gmtCreate;
  }
  if (!Util.isUnset(request.gmtModified)) {
    query['GmtModified'] = request.gmtModified;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.licenseKey)) {
    query['LicenseKey'] = request.licenseKey;
  }
  if (!Util.isUnset(request.messageQueueFilterSide)) {
    query['MessageQueueFilterSide'] = request.messageQueueFilterSide;
  }
  if (!Util.isUnset(request.messageQueueGrayEnable)) {
    query['MessageQueueGrayEnable'] = request.messageQueueGrayEnable;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateOrUpdateSwimmingLaneGroup',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createOrUpdateSwimmingLaneGroup(request: CreateOrUpdateSwimmingLaneGroupRequest): CreateOrUpdateSwimmingLaneGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOrUpdateSwimmingLaneGroupWithOptions(request, runtime);
}

model CreateZnodeRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='mse-09k1q11****'),
  data?: string(name='Data', description='The data of the node.', example='data'),
  path?: string(name='Path', description='The path of the node.', example='/zookeeper'),
}

model CreateZnodeResponseBody = {
  data?: {
    data?: string(name='Data', description='The data of the node.', example='cluster'),
    dir?: boolean(name='Dir', description='Indicates whether the node directory information is returned. Valid values:
- `true`: The information is returned. 
- `false`: The information fails to be returned.', example='true'),
    name?: string(name='Name', description='The name of the node.', example='mse-bc1a29b0-160230875****-reg-center-0-1'),
    path?: string(name='Path', description='The path of the node.', example='/'),
  }(name='Data', description='The details of the data.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is processed successfully.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DC34E4A3-5F1C-4E40-86EA-02EDF967****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model CreateZnodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateZnodeResponseBody(name='body'),
}

async function createZnodeWithOptions(request: CreateZnodeRequest, runtime: Util.RuntimeOptions): CreateZnodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.data)) {
    query['Data'] = request.data;
  }
  if (!Util.isUnset(request.path)) {
    query['Path'] = request.path;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateZnode',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createZnode(request: CreateZnodeRequest): CreateZnodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return createZnodeWithOptions(request, runtime);
}

model DeleteAuthResourceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-3f97e2989c344f35ab3fd62b19f1****'),
  id?: long(name='Id', description='The ID of the authorization record.', example='36'),
}

model DeleteAuthResourceResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='1'),
  data?: {
    authId?: long(name='AuthId', description='The ID of the authorization record.', example='253'),
    domainId?: long(name='DomainId', description='The ID of the domain name.', example='235'),
    domainName?: string(name='DomainName', description='The domain name.', example='name'),
    gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='gw-7ea3da97b96543e19f6c597cd4a9****'),
    gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-7ea3da97b96543e19f6c597cd4a9****'),
    gmtCreate?: string(name='GmtCreate', description='The creation time.', example='2022-01-07T10:07:57.000+0000'),
    gmtModified?: string(name='GmtModified', description='The modification time.', example='2022-01-07T10:07:57.000+0000'),
    id?: long(name='Id', description='The ID of the primary key.', example='12'),
    isWhite?: boolean(name='IsWhite', description='Indicates whether the whitelist mode is enabled.', example='true'),
    path?: string(name='Path', description='The path.', example='/zookeeper'),
  }(name='Data', description='The returned data.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='559412D1-BFCE-53CC-B88E-0192C331EF44'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model DeleteAuthResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAuthResourceResponseBody(name='body'),
}

async function deleteAuthResourceWithOptions(request: DeleteAuthResourceRequest, runtime: Util.RuntimeOptions): DeleteAuthResourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAuthResource',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAuthResource(request: DeleteAuthResourceRequest): DeleteAuthResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAuthResourceWithOptions(request, runtime);
}

model DeleteClusterRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-6ja1rgl****'),
}

model DeleteClusterResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code returned.', example='202'),
  message?: string(name='Message', description='The message returned.', example='The request is processed successfully.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3369AD10-F1A6-4E6F-B99E-20F51826****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model DeleteClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteClusterResponseBody(name='body'),
}

async function deleteClusterWithOptions(request: DeleteClusterRequest, runtime: Util.RuntimeOptions): DeleteClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCluster',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteCluster(request: DeleteClusterRequest): DeleteClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteClusterWithOptions(request, runtime);
}

model DeleteEngineNamespaceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='mse-0c738****'),
  id?: string(name='Id', description='The ID of the namespace.', example='678ca857-****-b1bf-d0a98c5ca84b'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-7pp2d1****'),
}

model DeleteEngineNamespaceResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code returned.', example='202'),
  message?: string(name='Message', description='The message returned.', example='The request is processed successfully.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A73AC37C-C617-4E3A-8049-372CF49C****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='True'),
}

model DeleteEngineNamespaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteEngineNamespaceResponseBody(name='body'),
}

async function deleteEngineNamespaceWithOptions(request: DeleteEngineNamespaceRequest, runtime: Util.RuntimeOptions): DeleteEngineNamespaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEngineNamespace',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteEngineNamespace(request: DeleteEngineNamespaceRequest): DeleteEngineNamespaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEngineNamespaceWithOptions(request, runtime);
}

model DeleteGatewayRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  deleteSlb?: boolean(name='DeleteSlb', description='Specifies whether to delete the Server Load Balancer (SLB) instance purchased for the gateway.', example='true'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-0fe488252dc44d55a9dd57875193a1d7'),
}

model DeleteGatewayResponseBody = {
  code?: int32(name='Code', description='The request is processed successfully.', example='200'),
  data?: {
    gatewayUniqueId?: string(name='GatewayUniqueId', description='The name of the gateway.', example='gw-7ea3da97b96543e19f6c597c****'),
    gmtCreate?: string(name='GmtCreate', description='The number of gateway replicas.', example='2022-01-07T10:07:57.000+0000'),
    gmtModified?: string(name='GmtModified', description='The time when the gateway was created.', example='2022-01-07T10:07:57.000+0000'),
    id?: long(name='Id', description='The details of the data.', example='12'),
    name?: string(name='Name', description='The ID of the primary key.', example='mse-bc1a29b0-reg-center-0-1'),
    primaryUser?: string(name='PrimaryUser', description='The ID of the region.', example='1231254'),
    region?: string(name='Region', description='The unique ID of the gateway. It is an identifier automatically generated by the system.', example='cn-hangzhou'),
    replica?: int32(name='Replica', description='The instance type of the gateway.', example='2'),
    securityGroup?: string(name='SecurityGroup', description='The ID of the vSwitch.', example='sg-bp11ufzqn6mmb8dtzz82'),
    spec?: string(name='Spec', description='The ID of the security group.', example='MSE_GTW_16_32_200_c'),
    status?: int32(name='Status', description='The information about the user.', example='1'),
    vpc?: string(name='Vpc', description='The status of the gateway. Valid values:
0: The gateway is being created.
1: The gateway fails to be created.
2: The gateway is running.
3: The gateway is changing.
4: The gateway is scaling down.
6: The gateway is scaling up.
8: The gateway is being deleted.
10: The gateway is restarting.
11: The gateway is being recreated.
12: The gateway is updating.
13: The gateway fails to be updated.', example='vpc-bp1328cm01m6uel42b5zb'),
    vswitch?: string(name='Vswitch', description='The ID of the virtual private cloud (VPC) where the gateway resides.', example='vsw-bp18zeqxx6mpuq843z4n5'),
  }(name='Data', description='Indicates whether the request is successful. Valid values:

- `true`: The request is successful. 
- `false`: The request fails.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The ID of the request.', example='200'),
  message?: string(name='Message', description='The HTTP status code returned.', example='The message returned. 

- If the request is successful, a success message is returned. 
- If the request fails, an error message is returned, such as the "TaskId not found" message.'),
  requestId?: string(name='RequestId', description='The data structure.', example='2FFEA345-BE30-5FE0-8885-42E2DEFD5FE6'),
  success?: boolean(name='Success', description='The status code returned. A value of 200 indicates that the request is successful. Other values indicate that the request fails.', example='true'),
}

model DeleteGatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteGatewayResponseBody(name='body'),
}

async function deleteGatewayWithOptions(request: DeleteGatewayRequest, runtime: Util.RuntimeOptions): DeleteGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.deleteSlb)) {
    query['DeleteSlb'] = request.deleteSlb;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteGateway',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteGateway(request: DeleteGatewayRequest): DeleteGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteGatewayWithOptions(request, runtime);
}

model DeleteGatewayDomainRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-90392d768a3847a7b804c505254d****'),
  id?: string(name='Id', description='The ID of the domain name.', example='109'),
}

model DeleteGatewayDomainResponseBody = {
  code?: int32(name='Code', description='The error message returned if the request fails.', example='200'),
  data?: {
    certIdentifier?: string(name='CertIdentifier', description='Indicates whether HTTP probing is allowed.', example='243'),
    gatewayId?: long(name='GatewayId', description='The unique ID of the gateway.', example='253'),
    gatewayUniqueId?: string(name='GatewayUniqueId', description='The name of the gateway.', example='gw-7ea3da97b96543e19f6c597c****'),
    gmtCreate?: string(name='GmtCreate', description='The ID of the certificate.', example='2022-01-07T10:07:57.000+0000'),
    gmtModified?: string(name='GmtModified', description='The time when the domain name was added.', example='2022-01-07T10:07:57.000+0000'),
    id?: long(name='Id', description='The returned data.', example='2'),
    mustHttps?: boolean(name='MustHttps', description='The protocol used by the gateway.', example='true'),
    name?: string(name='Name', description='The ID of the domain name.', example='CONTACTINFO'),
    protocol?: string(name='Protocol', description='The ID of the gateway.', example='HTTP'),
  }(name='Data', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The ID of the request.', example='200'),
  message?: string(name='Message', description='The HTTP status code returned.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='The data structure.', example='39016EAC-6EDB-52FE-AE20-4B013DF236FF'),
  success?: boolean(name='Success', description='The status code returned.', example='true'),
}

model DeleteGatewayDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteGatewayDomainResponseBody(name='body'),
}

async function deleteGatewayDomainWithOptions(request: DeleteGatewayDomainRequest, runtime: Util.RuntimeOptions): DeleteGatewayDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteGatewayDomain',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteGatewayDomain(request: DeleteGatewayDomainRequest): DeleteGatewayDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteGatewayDomainWithOptions(request, runtime);
}

model DeleteGatewayRouteRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-492af9b04bb4474cae9d645be850e3d7'),
  routeId?: string(name='RouteId', description='The ID of the route.', example='252'),
}

model DeleteGatewayRouteResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: {
    defaultServiceId?: long(name='DefaultServiceId', description='The ID of the default service.', example='1'),
    gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='125'),
    gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-5017305290e14cebbrvec4a5****'),
    gmtCreate?: string(name='GmtCreate', description='The time when the route was created.', example='2022-01-07 18:07:57'),
    gmtModified?: string(name='GmtModified', description='The time when the route was last modified.', example='2021-12-30T06:41:52.000+0000'),
    id?: long(name='Id', description='ID.', example='12'),
    name?: string(name='Name', description='The name of the route.', example='test'),
    predicates?: string(name='Predicates', description='The matching rules of the route.', example='{\\"PathPredicates\\":{\\"Path\\":\\"/metas\\",\\"Type\\":\\"PRE\\",\\"IgnoreCase\\":false}}'),
    routeOrder?: int32(name='RouteOrder', description='The sequence number of the route.', example='1'),
    status?: int32(name='Status', description='The status of the route.', example='1'),
  }(name='Data', description='The returned data.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is processed successfully.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ADDD8AB7-8D1C-4697-A83E-410D2607****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model DeleteGatewayRouteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteGatewayRouteResponseBody(name='body'),
}

async function deleteGatewayRouteWithOptions(request: DeleteGatewayRouteRequest, runtime: Util.RuntimeOptions): DeleteGatewayRouteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.routeId)) {
    query['RouteId'] = request.routeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteGatewayRoute',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteGatewayRoute(request: DeleteGatewayRouteRequest): DeleteGatewayRouteResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteGatewayRouteWithOptions(request, runtime);
}

model DeleteGatewayServiceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='60'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-1a4ab101d5924b6f92c5ec98a841761f'),
  serviceId?: string(name='ServiceId', description='The ID of the service.', example='190'),
}

model DeleteGatewayServiceResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: {
    gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='1'),
    gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-7ea3da97b96543e19f6c597c****'),
    gmtCreate?: string(name='GmtCreate', description='The time when the service was created.', example='2022-01-14 14:39:16'),
    gmtModified?: string(name='GmtModified', description='The time when the domain name was last modified.', example='2022-01-07T10:07:57.000+0000'),
    groupName?: string(name='GroupName', description='The name of the group.', example='DEFAULT_GROUP'),
    id?: long(name='Id', description='The ID of the service.', example='190'),
    ips?: [ string ](name='Ips', description='IP'),
    metaInfo?: string(name='MetaInfo', description='The basic information about the service.', example='{}'),
    name?: string(name='Name', description='The name of the service.', example='test'),
    namespace?: string(name='Namespace', description='The namespace in which the service resides.', example='default'),
    serviceNameInRegistry?: string(name='ServiceNameInRegistry', description='The name of the service registered with the service registry.', example='test'),
    sourceId?: long(name='SourceId', description='The source ID of the service.', example='1'),
    sourceType?: string(name='SourceType', description='The source type of the service.', example='MSE'),
  }(name='Data', description='The returned data.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B3545F76-6ED1-586F-8DB9-ECE07985F381'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model DeleteGatewayServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteGatewayServiceResponseBody(name='body'),
}

async function deleteGatewayServiceWithOptions(request: DeleteGatewayServiceRequest, runtime: Util.RuntimeOptions): DeleteGatewayServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.serviceId)) {
    query['ServiceId'] = request.serviceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteGatewayService',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteGatewayService(request: DeleteGatewayServiceRequest): DeleteGatewayServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteGatewayServiceWithOptions(request, runtime);
}

model DeleteGatewayServiceVersionRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-b6988bd16920479d9104e1729f97****'),
  serviceId?: long(name='ServiceId', description='The ID of the service.', example='777'),
  serviceVersion?: string(name='ServiceVersion', description='The version of the service.', example='{\\"name\\":\\"app\\",\\"labels\\":[{\\"key\\":\\"app\\",\\"value\\":\\"demo-server\\"}]}'),
}

model DeleteGatewayServiceVersionResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='1'),
  data?: long(name='Data', description='The returned data.', example='1'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned. 

- If the request is successful, a success message is returned. 
- If the request fails, an error message is returned, such as the "TaskId not found" message.', example='The request is processed successfully.'),
  requestId?: string(name='RequestId', description='Id of the request', example='29D52777-BE96-563E-BC6B-796ACE47A7A5'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model DeleteGatewayServiceVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteGatewayServiceVersionResponseBody(name='body'),
}

async function deleteGatewayServiceVersionWithOptions(request: DeleteGatewayServiceVersionRequest, runtime: Util.RuntimeOptions): DeleteGatewayServiceVersionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.serviceId)) {
    query['ServiceId'] = request.serviceId;
  }
  if (!Util.isUnset(request.serviceVersion)) {
    query['ServiceVersion'] = request.serviceVersion;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteGatewayServiceVersion',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteGatewayServiceVersion(request: DeleteGatewayServiceVersionRequest): DeleteGatewayServiceVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteGatewayServiceVersionWithOptions(request, runtime);
}

model DeleteGatewaySlbRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  deleteSlb?: boolean(name='DeleteSlb', description='Specifies whether to delete the SLB instance purchased for the gateway when you delete the gateway.', example='true'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-c9bc5afd61014165bd58f621b491****'),
  id?: string(name='Id', description='The ID of the associated record.', example='395'),
}

model DeleteGatewaySlbResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='1'),
  data?: string(name='Data', description='The deletion result.', example='28'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.

*   If the request is successful, a success message is returned.
*   If the request fails, an error message is returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9297B27D-D932-5E9F-93B9-99D6C5F3A879'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model DeleteGatewaySlbResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteGatewaySlbResponseBody(name='body'),
}

async function deleteGatewaySlbWithOptions(request: DeleteGatewaySlbRequest, runtime: Util.RuntimeOptions): DeleteGatewaySlbResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.deleteSlb)) {
    query['DeleteSlb'] = request.deleteSlb;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteGatewaySlb',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteGatewaySlb(request: DeleteGatewaySlbRequest): DeleteGatewaySlbResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteGatewaySlbWithOptions(request, runtime);
}

model DeleteNacosConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  beta?: boolean(name='Beta', description='Specifies whether to perform a beta release. Valid values:

*   `true`: yes
*   `false`: no', example='true'),
  dataId?: string(name='DataId', description='The ID of the configuration.', example='user-ds.yml'),
  group?: string(name='Group', description='The type of the group.', example='HALVIE_MICRO_GROUP'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse_prepaid_public_cn-tl32epfyu18'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='0e9d849b-****-8435da6c21ad'),
}

model DeleteNacosConfigResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='200'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code returned.', example='202'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4FEFC13F-EB50-51E1-97D8-C5CBA8CD1B84'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model DeleteNacosConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteNacosConfigResponseBody(name='body'),
}

/**
  * > The operation is not provided in Nacos SDKs. For information about Nacos SDKs, see the [official documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
  * @param request DeleteNacosConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteNacosConfigResponse
 */
async function deleteNacosConfigWithOptions(request: DeleteNacosConfigRequest, runtime: Util.RuntimeOptions): DeleteNacosConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.beta)) {
    query['Beta'] = request.beta;
  }
  if (!Util.isUnset(request.dataId)) {
    query['DataId'] = request.dataId;
  }
  if (!Util.isUnset(request.group)) {
    query['Group'] = request.group;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.namespaceId)) {
    query['NamespaceId'] = request.namespaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteNacosConfig',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > The operation is not provided in Nacos SDKs. For information about Nacos SDKs, see the [official documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
  * @param request DeleteNacosConfigRequest
  * @return DeleteNacosConfigResponse
 */
async function deleteNacosConfig(request: DeleteNacosConfigRequest): DeleteNacosConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNacosConfigWithOptions(request, runtime);
}

model DeleteNacosConfigsRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  ids?: string(name='Ids', description='The IDs of configurations.', example='20024,20025,20026,20027,20034,20104,20394'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse_prepaid_public_cn-i7m2e32pd0n'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='1ef93a21-3487-4367-a859-857d8****'),
}

model DeleteNacosConfigsResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='73EB5563-CBB3-5F48-999D-512F4EFB7377'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model DeleteNacosConfigsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteNacosConfigsResponseBody(name='body'),
}

/**
  * > The current API operation is not provided in Nacos SDK. For information about Nacos SDK, see the [official Nacos documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
  * @param request DeleteNacosConfigsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteNacosConfigsResponse
 */
async function deleteNacosConfigsWithOptions(request: DeleteNacosConfigsRequest, runtime: Util.RuntimeOptions): DeleteNacosConfigsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.ids)) {
    query['Ids'] = request.ids;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.namespaceId)) {
    query['NamespaceId'] = request.namespaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteNacosConfigs',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > The current API operation is not provided in Nacos SDK. For information about Nacos SDK, see the [official Nacos documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
  * @param request DeleteNacosConfigsRequest
  * @return DeleteNacosConfigsResponse
 */
async function deleteNacosConfigs(request: DeleteNacosConfigsRequest): DeleteNacosConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNacosConfigsWithOptions(request, runtime);
}

model DeleteNacosInstanceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  clusterName?: string(name='ClusterName', description='The name of the instance.', example='DEFAULT'),
  ephemeral?: boolean(name='Ephemeral', description='Specifies whether the instance is a temporary node. Valid values:

*   `true`: yes
*   `false`: no', example='false'),
  groupName?: string(name='GroupName', description='The name of the group.', example='DEFAULT_GROUP'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-st21v5****'),
  ip?: string(name='Ip', description='The IP address of the instance.', example='10.237.1.32'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='9e78a671-4b9b-4dd4-99c1-0b9da87****'),
  port?: int32(name='Port', description='The port number of the instance.', example='8080'),
  serviceName?: string(name='ServiceName', description='The name of the service.', example='hello_service'),
}

model DeleteNacosInstanceResponseBody = {
  code?: int32(name='Code', description='The status code. The value 200 is returned if the request is successful.', example='200'),
  data?: string(name='Data', description='The data of the node.', example='OK'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The returned message.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8BD1E58D-0755-42AC-A599-E6B55112****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model DeleteNacosInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteNacosInstanceResponseBody(name='body'),
}

/**
  * > The operation is not provided in Nacos SDKs. For more information about Nacos SDKs, see the [official documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
  * @param request DeleteNacosInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteNacosInstanceResponse
 */
async function deleteNacosInstanceWithOptions(request: DeleteNacosInstanceRequest, runtime: Util.RuntimeOptions): DeleteNacosInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterName)) {
    query['ClusterName'] = request.clusterName;
  }
  if (!Util.isUnset(request.ephemeral)) {
    query['Ephemeral'] = request.ephemeral;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ip)) {
    query['Ip'] = request.ip;
  }
  if (!Util.isUnset(request.namespaceId)) {
    query['NamespaceId'] = request.namespaceId;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.serviceName)) {
    query['ServiceName'] = request.serviceName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteNacosInstance',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > The operation is not provided in Nacos SDKs. For more information about Nacos SDKs, see the [official documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
  * @param request DeleteNacosInstanceRequest
  * @return DeleteNacosInstanceResponse
 */
async function deleteNacosInstance(request: DeleteNacosInstanceRequest): DeleteNacosInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNacosInstanceWithOptions(request, runtime);
}

model DeleteNacosServiceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  groupName?: string(name='GroupName', description='The name of the group.', example='DEFAULT_GROUP'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-123456'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='9e78a671-4b9b-4dd4-99c1-0****'),
  serviceName?: string(name='ServiceName', description='The name of the service.', example='hello_service'),
}

model DeleteNacosServiceResponseBody = {
  code?: int32(name='Code', description='The response code returned.', example='200'),
  data?: string(name='Data', description='The deletion result.', example='ok'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The returned message.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9e78a671-4b9b-4dd4-99c1-0b9da87d3dec'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model DeleteNacosServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteNacosServiceResponseBody(name='body'),
}

/**
  * > The operation is not provided in Nacos SDKs. For more information about Nacos SDKs, see the [official documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
  * @param request DeleteNacosServiceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteNacosServiceResponse
 */
async function deleteNacosServiceWithOptions(request: DeleteNacosServiceRequest, runtime: Util.RuntimeOptions): DeleteNacosServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.namespaceId)) {
    query['NamespaceId'] = request.namespaceId;
  }
  if (!Util.isUnset(request.serviceName)) {
    query['ServiceName'] = request.serviceName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteNacosService',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > The operation is not provided in Nacos SDKs. For more information about Nacos SDKs, see the [official documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
  * @param request DeleteNacosServiceRequest
  * @return DeleteNacosServiceResponse
 */
async function deleteNacosService(request: DeleteNacosServiceRequest): DeleteNacosServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNacosServiceWithOptions(request, runtime);
}

model DeleteSecurityGroupRuleRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-83b0ddb569434f82b9fe8e4c60c40f7c'),
  id?: long(name='Id', description='The ID of the security group rule.', example='93'),
}

model DeleteSecurityGroupRuleResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: {
    description?: string(name='Description', description='The description.', example='auto-description1'),
    gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='103'),
    gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-7ea3da97b96543e19f6c597c****'),
    gmtCreate?: string(name='GmtCreate', description='The time when the security group rule was created.', example='2022-01-07 18:07:57'),
    gmtModified?: string(name='GmtModified', description='The time when the security group rule was last modified.', example='2022-01-11T14:12:55.000+0000'),
    id?: long(name='Id', description='ID.', example='2'),
    ipProtocol?: string(name='IpProtocol', description='The transport layer protocol. The value of this parameter is case-insensitive. Valid values: 
         
- icmp
- gre
- tcp
- udp
- all: All protocols are supported.', example='tcp'),
    portRange?: string(name='PortRange', description='The range of destination ports that correspond to the transport layer protocol. Valid values: 
         
- When the value of the IpProtocol parameter is tcp or udp, the port number range is 1 to 65535. The start port number and the end port number are separated by a forward slash (/). Example: 1/200.
- When the value of the IpProtocol parameter is icmp, the port number range is -1/-1, which indicates all ports.
- When the value of the IpProtocol parameter is gre, the port number range is -1/-1, which indicates all ports.
- When the value of the IpProtocol parameter is all, the port number range is -1/-1, which indicates all ports.', example='8443/8443'),
    securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group.', example='sg-uf6hgwe067prhg68agfa'),
  }(name='Data', description='The returned data.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is processed successfully.'),
  requestId?: string(name='RequestId', description='Id of the request', example='43E50CB7-258E-5AFF-9B93-ECC19928C699'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model DeleteSecurityGroupRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSecurityGroupRuleResponseBody(name='body'),
}

async function deleteSecurityGroupRuleWithOptions(request: DeleteSecurityGroupRuleRequest, runtime: Util.RuntimeOptions): DeleteSecurityGroupRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSecurityGroupRule',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSecurityGroupRule(request: DeleteSecurityGroupRuleRequest): DeleteSecurityGroupRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSecurityGroupRuleWithOptions(request, runtime);
}

model DeleteServiceSourceRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-492af9b04bb4474cae9d645be850****'),
  sourceId?: long(name='SourceId', description='The ID of the service source.', example='17'),
}

model DeleteServiceSourceResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='1'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2CEF593F-D60C-5449-9E98-15CA6ECD9189'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model DeleteServiceSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteServiceSourceResponseBody(name='body'),
}

async function deleteServiceSourceWithOptions(request: DeleteServiceSourceRequest, runtime: Util.RuntimeOptions): DeleteServiceSourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.sourceId)) {
    query['SourceId'] = request.sourceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteServiceSource',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteServiceSource(request: DeleteServiceSourceRequest): DeleteServiceSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteServiceSourceWithOptions(request, runtime);
}

model DeleteSwimmingLaneRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  laneId?: long(name='LaneId', description='The ID of the lane.', example='229'),
}

model DeleteSwimmingLaneResponseBody = {
  code?: int32(name='Code', description='The status code. A value of 200 is returned if the request is successful.', example='200'),
  data?: any(name='Data', description='The details of the data.', example='{}'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is processed successfully.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='69AD2AA7-DB47-449B-941B-B14409DF****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model DeleteSwimmingLaneResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSwimmingLaneResponseBody(name='body'),
}

async function deleteSwimmingLaneWithOptions(request: DeleteSwimmingLaneRequest, runtime: Util.RuntimeOptions): DeleteSwimmingLaneResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.laneId)) {
    query['LaneId'] = request.laneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSwimmingLane',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSwimmingLane(request: DeleteSwimmingLaneRequest): DeleteSwimmingLaneResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSwimmingLaneWithOptions(request, runtime);
}

model DeleteSwimmingLaneGroupRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  groupId?: long(name='GroupId', description='The ID of the lane group.', example='145'),
}

model DeleteSwimmingLaneGroupResponseBody = {
  code?: int32(name='Code', description='The status code. A value of 200 is returned if the request is successful.', example='200'),
  data?: any(name='Data', description='The details of the data.', example='{}'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is processed successfully.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='52BA6DA6-A702-4362-A32F-DFF79655****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model DeleteSwimmingLaneGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSwimmingLaneGroupResponseBody(name='body'),
}

async function deleteSwimmingLaneGroupWithOptions(request: DeleteSwimmingLaneGroupRequest, runtime: Util.RuntimeOptions): DeleteSwimmingLaneGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSwimmingLaneGroup',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSwimmingLaneGroup(request: DeleteSwimmingLaneGroupRequest): DeleteSwimmingLaneGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSwimmingLaneGroupWithOptions(request, runtime);
}

model DeleteZnodeRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='mse-09k1q11****'),
  path?: string(name='Path', description='The path of the node.', example='/zookeeper'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}'),
}

model DeleteZnodeResponseBody = {
  data?: {
    data?: string(name='Data', description='The data of the node.', example='cluster'),
    dir?: boolean(name='Dir', description='Indicates whether the node directory information is returned. Valid values:
- `true`: The information is returned. 
- `false`: The information fails to be returned.', example='true'),
    name?: string(name='Name', description='The name of the node.', example='mse-bc1a29b0-160230875****-reg-center-0-1'),
    path?: string(name='Path', description='The path of the node.', example='/'),
  }(name='Data', description='The details of the data.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is processed successfully.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DC34E4A3-5F1C-4E40-86EA-02EDF967****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model DeleteZnodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteZnodeResponseBody(name='body'),
}

async function deleteZnodeWithOptions(request: DeleteZnodeRequest, runtime: Util.RuntimeOptions): DeleteZnodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.path)) {
    query['Path'] = request.path;
  }
  if (!Util.isUnset(request.requestPars)) {
    query['RequestPars'] = request.requestPars;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteZnode',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteZnode(request: DeleteZnodeRequest): DeleteZnodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteZnodeWithOptions(request, runtime);
}

model ExportNacosConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  appName?: string(name='AppName', description='The name of the application.', example='qjl-gateway-openapi'),
  dataId?: string(name='DataId', description='The data ID.', example='sms-mes-develop.prop****'),
  group?: string(name='Group', description='The name of the group.', example='TIMEDTASK_COMMON_GROUP'),
  ids?: string(name='Ids', description='The IDs of configurations.', example='1709,1710'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-2r42ddc****'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='ae77c258-4d4f-478f-baaa-084aee0****'),
}

model ExportNacosConfigResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: {
    url?: string(name='Url', description='The URL used to download the exported configurations.', example='http://xxxxxxxxx'),
  }(name='Data', description='The details of the data.'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **Message** parameter. 
> If the specified **InstanceId** parameter is invalid, **The Value of Input Parameter %s is not valid** is returned for **Message** and **InstanceId** is returned for **DynamicMessage**.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is processed successfully.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='92245803-49B7-54CF-8D49-01A34A0E1CD6'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='True'),
}

model ExportNacosConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExportNacosConfigResponseBody(name='body'),
}

/**
  * > The current API operation is not provided in Nacos SDK. For information about Nacos SDK, see the [official Nacos documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
  * @param request ExportNacosConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ExportNacosConfigResponse
 */
async function exportNacosConfigWithOptions(request: ExportNacosConfigRequest, runtime: Util.RuntimeOptions): ExportNacosConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.dataId)) {
    query['DataId'] = request.dataId;
  }
  if (!Util.isUnset(request.group)) {
    query['Group'] = request.group;
  }
  if (!Util.isUnset(request.ids)) {
    query['Ids'] = request.ids;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.namespaceId)) {
    query['NamespaceId'] = request.namespaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExportNacosConfig',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > The current API operation is not provided in Nacos SDK. For information about Nacos SDK, see the [official Nacos documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
  * @param request ExportNacosConfigRequest
  * @return ExportNacosConfigResponse
 */
async function exportNacosConfig(request: ExportNacosConfigRequest): ExportNacosConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return exportNacosConfigWithOptions(request, runtime);
}

model GetAppMessageQueueRouteRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  appId?: string(name='AppId', description='The ID of the application.', example='hkhon1po62@c3df23522baa898'),
  region?: string(name='Region', description='The region where the cluster resides. Examples:

*   `cn-hangzhou`: China (Hangzhou)
*   `cn-beijing`: China (Beijing)
*   `cn-shanghai`: China (Shanghai)
*   `cn-zhangjiakou`: China (Zhangjiakou)
*   `cn-shenzhen`: China (Shenzhen)', example='cn-hangzhou'),
}

model GetAppMessageQueueRouteResponseBody = {
  code?: int32(name='Code', description='The response code returned.', example='200'),
  data?: {
    appId?: string(name='AppId', description='The ID of the application.', example='hkhon1po62@54e1f42f37cd65a'),
    enable?: boolean(name='Enable', description='Indicates whether the canary release for messaging feature is enabled.

*   `true`: enabled
*   `false`: disabled', example='true'),
    filterSide?: string(name='FilterSide', description='The side for message filtering when the canary release for messaging feature is enabled.', example='Server'),
    region?: string(name='Region', description='The ID of the region.', example='cn-hangzhou'),
    tags?: [ string ](name='Tags', description='The tags used to ignore message consumption for nodes in untagged environments.'),
  }(name='Data', description='The returned data.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The returned message.

*   If the request is successful, a success message is returned.
*   If the request fails, an error message is returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4B00BCB0-105F-5A2A-B75B-641C8E9B18FC'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values: true and false. The value true indicates that the request was successful. The value false indicates that the request failed.', example='true'),
}

model GetAppMessageQueueRouteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAppMessageQueueRouteResponseBody(name='body'),
}

async function getAppMessageQueueRouteWithOptions(request: GetAppMessageQueueRouteRequest, runtime: Util.RuntimeOptions): GetAppMessageQueueRouteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAppMessageQueueRoute',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAppMessageQueueRoute(request: GetAppMessageQueueRouteRequest): GetAppMessageQueueRouteResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAppMessageQueueRouteWithOptions(request, runtime);
}

model GetApplicationListRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  appId?: string(name='AppId', description='The ID of the application.', example='hkhon1po62@c3df23522b*****'),
  appName?: string(name='AppName', description='The name of the application.', example='rest-container'),
  language?: string(name='Language', description='The programming language of the application, such as Java and Go.', example='Java'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10'),
  region?: string(name='Region', description='The region ID.', example='cn-hangzhou'),
  sentinelEnable?: boolean(name='SentinelEnable', description='Specifies whether to enable the Sentinel-compatible mode.', example='true'),
  source?: string(name='Source', description='The source of the application. The value is fixed as edasmsc.', example='edasmsc'),
  switchEnable?: boolean(name='SwitchEnable', description='Specifies whether to enable switching.', example='true'),
}

model GetApplicationListResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: {
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    result?: [ 
      {
        appId?: string(name='AppId', description='The ID of the application.', example='hkhon1po62@5f1b08becb*****'),
        appName?: string(name='AppName', description='The name of the application.', example='finance'),
        extraInfo?: string(name='ExtraInfo', description='The additional information.', example='{}'),
        instancesNumber?: int32(name='InstancesNumber', description='The number of instances.', example='1'),
        language?: string(name='Language', description='The programming language of the application.', example='JAVA'),
        licenseKey?: string(name='LicenseKey', description='The license key in use.', example='diyh1rln1u@*****7ad938167'),
        regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
        source?: string(name='Source', description='The source of the application.', example='edasmsc'),
        status?: long(name='Status', description='The status.', example='0'),
        userId?: string(name='UserId', description='The ID of the user.', example='1234567890'),
      }
    ](name='Result', description='The returned information.'),
    totalSize?: int32(name='TotalSize', description='The total number of entries returned.', example='11'),
  }(name='Data', description='The data structure.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='403'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F55E608F-7C15-****-9CFD-DF832EBC4A0F'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model GetApplicationListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetApplicationListResponseBody(name='body'),
}

async function getApplicationListWithOptions(request: GetApplicationListRequest, runtime: Util.RuntimeOptions): GetApplicationListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.sentinelEnable)) {
    query['SentinelEnable'] = request.sentinelEnable;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.switchEnable)) {
    query['SwitchEnable'] = request.switchEnable;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetApplicationList',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getApplicationList(request: GetApplicationListRequest): GetApplicationListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApplicationListWithOptions(request, runtime);
}

model GetApplicationListWithMetircsRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  appId?: string(name='AppId', example='hkhon1po62@c3df23522baa898'),
  appName?: string(name='AppName', example='spring-cloud-a'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  region?: string(name='Region', example='cn-hangzhou'),
  source?: string(name='Source', example='edasmsc'),
}

model GetApplicationListWithMetircsResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    result?: [ 
      {
        appId?: string(name='AppId', example='daqijp6c31@xxx'),
        appName?: string(name='AppName', example='finance'),
        curMetrics?: [ 
          {
            blockQps?: double(name='BlockQps'),
            expQps?: double(name='ExpQps'),
            passQps?: double(name='PassQps'),
            qps?: double(name='Qps', example='895'),
            rt?: double(name='Rt', description='Rt。', example='109'),
            thread?: double(name='Thread', example='1'),
            timestamp?: long(name='Timestamp', example='1666764426528'),
          }
        ](name='CurMetrics'),
        curMetricsFm?: {
          blockQps?: double(name='BlockQps'),
          expQps?: double(name='ExpQps'),
          passQps?: double(name='PassQps'),
          qps?: double(name='Qps', description='QPS。', example='1'),
          rt?: double(name='Rt', description='Rt。', example='0'),
          thread?: double(name='Thread', example='1'),
          timestamp?: long(name='Timestamp', example='1648117002717'),
        }(name='CurMetricsFm'),
        extraInfo?: string(name='ExtraInfo', example='{}'),
        instancesNumber?: int32(name='InstancesNumber'),
        language?: string(name='Language', example='JAVA'),
        licenseKey?: string(name='LicenseKey', example='diyh1rln1u@8d97eb7ad938167'),
        regionId?: string(name='RegionId', example='cn-hangzhou'),
        source?: string(name='Source', example='edasmsc'),
        status?: long(name='Status', example='0'),
        tags?: [ string ](name='Tags'),
        userId?: string(name='UserId'),
      }
    ](name='Result'),
    totalSize?: int32(name='TotalSize', example='11'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='062D13C5-DEA3-4921-8918-C49A0F1B****'),
  success?: boolean(name='Success', example='true'),
}

model GetApplicationListWithMetircsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetApplicationListWithMetircsResponseBody(name='body'),
}

async function getApplicationListWithMetircsWithOptions(request: GetApplicationListWithMetircsRequest, runtime: Util.RuntimeOptions): GetApplicationListWithMetircsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetApplicationListWithMetircs',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getApplicationListWithMetircs(request: GetApplicationListWithMetircsRequest): GetApplicationListWithMetircsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApplicationListWithMetircsWithOptions(request, runtime);
}

model GetBlackWhiteListRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-32d5c9769c1842b1a2cc3426c59e****'),
  isWhite?: boolean(name='IsWhite', description='Specifies whether to query the whitelist.', example='true'),
  resourceType?: string(name='ResourceType', description='The type of the resource.', example='GATEWAY'),
  type?: string(name='Type', description='The type of the blacklist or whitelist.', example='IP'),
}

model GetBlackWhiteListResponseBody = {
  code?: int32(name='Code', description='The status code returned. A value of 200 indicates that the request is successful.', example='200'),
  data?: {
    content?: string(name='Content', description='The content of the blacklist.', example='text'),
    gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='1'),
    gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-7ea3da97b96543e19f6c597c****'),
    gmtCreate?: string(name='GmtCreate', description='The time when the blacklist or whitelist was created.', example='2022-01-07T10:07:57.000+0000'),
    gmtModified?: string(name='GmtModified', description='The time when the blacklist or whitelist was last modified.', example='2022-01-07T10:07:57.000+0000'),
    id?: long(name='Id', description='ID.', example='275'),
    isWhite?: boolean(name='IsWhite', description='Indicates whether the whitelist is queried.', example='true'),
    resourceId?: long(name='ResourceId', description='The ID of the resource.', example='1'),
    resourceType?: string(name='ResourceType', description='The type of the resource.', example='GATEWAY'),
    status?: string(name='Status', description='The status of the blacklist or whitelist.', example='on'),
    type?: string(name='Type', description='The type of the blacklist or whitelist.', example='IP'),
  }(name='Data', description='The details of the data.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='89CBC928-4F57-51FA-A413-EE0F4CD87200'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model GetBlackWhiteListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetBlackWhiteListResponseBody(name='body'),
}

async function getBlackWhiteListWithOptions(request: GetBlackWhiteListRequest, runtime: Util.RuntimeOptions): GetBlackWhiteListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.isWhite)) {
    query['IsWhite'] = request.isWhite;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetBlackWhiteList',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getBlackWhiteList(request: GetBlackWhiteListRequest): GetBlackWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBlackWhiteListWithOptions(request, runtime);
}

model GetEngineNamepaceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='mse-98s****'),
  id?: string(name='Id', description='The ID of the namespace.', example='0e958d79-****-b282-b702d66362b5'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse.cn-hangzhou.aliyuncs.com'),
}

model GetEngineNamepaceResponseBody = {
  configCount?: string(name='ConfigCount', description='The number of configurations.', example='1'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code returned.', example='202'),
  message?: string(name='Message', description='The message returned.', example='success'),
  namespace?: string(name='Namespace', description='The name of the namespace.', example='public'),
  namespaceDesc?: string(name='NamespaceDesc', description='The description of the namespace.', example='mytest'),
  namespaceShowName?: string(name='NamespaceShowName', description='The display name of the namespace.', example='public'),
  quota?: string(name='Quota', description='The quota of configurations.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='FA8F966F-420C-52F5-B49E-6ED7CCE02697'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
  type?: string(name='Type', description='The type of the namespace. Valid values:

- 0: global configuration                                 
- 1: default namespace                                 
- 2: custom namespace', example='1'),
}

model GetEngineNamepaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetEngineNamepaceResponseBody(name='body'),
}

async function getEngineNamepaceWithOptions(request: GetEngineNamepaceRequest, runtime: Util.RuntimeOptions): GetEngineNamepaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetEngineNamepace',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getEngineNamepace(request: GetEngineNamepaceRequest): GetEngineNamepaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEngineNamepaceWithOptions(request, runtime);
}

model GetGatewayRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-685f661467b54f48b7b7a76605ce****'),
}

model GetGatewayResponseBody = {
  code?: int32(name='Code', description='The status code returned. A value of 200 indicates that the request is successful.', example='200'),
  data?: {
    chargeType?: string(name='ChargeType', description='The billing method, such as subscription or pay-as-you-go.', example='POSTPAY'),
    endDate?: string(name='EndDate', description='The time when the gateway expires.', example='2021-08-01 00:00:00'),
    gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-7ea3da97b96543e19f6c597cd4a9****'),
    gmtCreate?: string(name='GmtCreate', description='The time when the gateway was created. The time is displayed in GMT. The time is the local time of the region in which the gateway resides.', example='2022-01-07T10:07:57.000+0000'),
    gmtModified?: string(name='GmtModified', description='The time when the gateway was last modified.', example='2022-01-07T10:07:57.000+0000'),
    id?: long(name='Id', description='The ID of the gateway.', example='12'),
    instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-st21ri2****'),
    logConfigDetails?: {
      logEnabled?: boolean(name='LogEnabled', description='Indicates whether log shipping is enabled.', example='true'),
      logStoreName?: string(name='LogStoreName', description='The name of the Logstore.', example='mse_access_log'),
      projectName?: string(name='ProjectName', description='The name of the project.', example='k8s-log-c173117256e934a96b7fefdf2ef8a8057'),
    }(name='LogConfigDetails', description='The log configuration.'),
    mseTag?: string(name='MseTag', description='The tag of the instance.', example='{"TagKey":"TagValue"}'),
    name?: string(name='Name', description='The name of the gateway.', example='DEFAULT'),
    primaryUser?: string(name='PrimaryUser', description='The Alibaba Cloud account ID of the user who created the gateway.', example='1231254'),
    region?: string(name='Region', description='The ID of the region.', example='cn-hangzhou'),
    replica?: int32(name='Replica', description='The number of gateway replicas.', example='2'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfm34x43l*****'),
    securityGroup?: string(name='SecurityGroup', description='The ID of the security group.', example='sg-bp11ufzqn6mmb8dtzz82'),
    spec?: string(name='Spec', description='The specifications of the gateway.', example='MSE_GTW_16_32_200_c'),
    status?: int32(name='Status', description='The status of the gateway. Valid values: 0: The gateway is being created. 1: The gateway fails to be created. 2: The gateway is running. 3: The gateway is changing. 4: The gateway is scaling down. 6: The gateway is scaling up. 8: The gateway is being deleted. 10: The gateway is restarting. 11: The gateway is being rebuilt. 12: The gateway is updating. 13: The gateway fails to be updated.', example='0'),
    statusDesc?: string(name='StatusDesc', description='The description of the status.', example='Restarting'),
    vpc?: string(name='Vpc', description='The ID of the VPC.', example='vpc-bp1328cm01m6uel42b5zb'),
    vswitch?: string(name='Vswitch', description='The ID of the vSwitch.', example='vsw-bp18zeqxx6mpuq843z4n5'),
    vswitch2?: string(name='Vswitch2', description='The ID of the secondary vSwitch.', example='vpc-bp1j6ivhav15ve7q54kq2'),
    xtraceDetails?: {
      sample?: int32(name='Sample', description='The sampling rate of Tracing Analysis.', example='10'),
      traceOn?: boolean(name='TraceOn', description='Indicates whether sampling by using Tracing Analysis is enabled.', example='true'),
    }(name='XtraceDetails', description='The details of Tracing Analysis.'),
  }(name='Data', description='The information about the gateway.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9C96CDF8-9E6C-5AB6-B83C-8F87A10117E6'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model GetGatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetGatewayResponseBody(name='body'),
}

async function getGatewayWithOptions(request: GetGatewayRequest, runtime: Util.RuntimeOptions): GetGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetGateway',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getGateway(request: GetGatewayRequest): GetGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return getGatewayWithOptions(request, runtime);
}

model GetGatewayDomainDetailRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-6d0b23e1d39e41658a968d79a635****'),
  id?: string(name='Id', description='The ID of the domain name.', example='29'),
}

model GetGatewayDomainDetailResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='403'),
  data?: {
    afterDate?: long(name='AfterDate', description='The start time.', example='2021-04-01 02:35:12'),
    algorithm?: string(name='Algorithm', description='The algorithm.', example='RSA'),
    beforeDate?: long(name='BeforeDate', description='The expiration time.', example='2021-04-01 02:35:12'),
    certIdentifier?: string(name='CertIdentifier', description='The ID of the certificate.', example='234-cn-hangzhou'),
    certName?: string(name='CertName', description='The name of the certificate.', example='test'),
    commonName?: string(name='CommonName', description='The public domain name.', example='name'),
    gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='1'),
    gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-7ea3da97b96543e19f6c597cd4a9****'),
    gmtAfter?: string(name='GmtAfter', description='The start time.', example='2021-04-01 02:35:12'),
    gmtBefore?: string(name='GmtBefore', description='The expiration time.', example='2021-04-01 02:35:12'),
    gmtCreate?: string(name='GmtCreate', description='The creation time.', example='2022-01-07T10:07:57.000+0000'),
    gmtModified?: string(name='GmtModified', description='The update time.', example='2022-01-07T10:07:57.000+0000'),
    http2?: string(name='Http2', description='Indicates whether `HTTP/2` is enabled.

*   `open`: `HTTP/2` is enabled.
*   `close`: `HTTP/2` is disabled.
*   `globalConfig`: Global configurations are used.', example='close'),
    id?: long(name='Id', description='ID.', example='12'),
    issuer?: string(name='Issuer', description='The issuer.', example='Istio'),
    mustHttps?: boolean(name='MustHttps', description='Indicates whether HTTPS is forcibly used.', example='true'),
    name?: string(name='Name', description='The domain name.', example='test.com'),
    protocol?: string(name='Protocol', description='The protocol of the gateway.', example='HTTP'),
    sans?: string(name='Sans', description='The name of the extended field.', example='test.com'),
    tlsMax?: string(name='TlsMax', description='The maximum version of Transport Layer Security (TLS).', example='TLS 1.3'),
    tlsMin?: string(name='TlsMin', description='The minimum version of TLS.', example='TLS 1.0'),
  }(name='Data', description='The returned data.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='88B83302-CD88-54D3-8DF2-208BFDC73F0D'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model GetGatewayDomainDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetGatewayDomainDetailResponseBody(name='body'),
}

async function getGatewayDomainDetailWithOptions(request: GetGatewayDomainDetailRequest, runtime: Util.RuntimeOptions): GetGatewayDomainDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetGatewayDomainDetail',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getGatewayDomainDetail(request: GetGatewayDomainDetailRequest): GetGatewayDomainDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getGatewayDomainDetailWithOptions(request, runtime);
}

model GetGatewayOptionRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='429'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-c9bc5afd61014165bd58f621b491*****'),
}

model GetGatewayOptionResponseBody = {
  code?: int32(name='Code', description='The status code returned. The value 200 indicates that the request is successfully processed.', example='200'),
  data?: GatewayOption(name='Data', description='The returned data.', example='{\\"LogConfigDetails\\": {\\"LogEnabled\\": False}, \\"TraceDetails\\": {\\"TraceEnabled\\": False}}'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.

*   If the request is successful, a success message is returned.
*   If the request fails, an error message is returned, such as the "TaskId not found" message.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C92F4A4D-A2FD-593E-839E-F3D4DFD2E238'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model GetGatewayOptionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetGatewayOptionResponseBody(name='body'),
}

async function getGatewayOptionWithOptions(request: GetGatewayOptionRequest, runtime: Util.RuntimeOptions): GetGatewayOptionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetGatewayOption',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getGatewayOption(request: GetGatewayOptionRequest): GetGatewayOptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getGatewayOptionWithOptions(request, runtime);
}

model GetGatewayRouteDetailRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-5d3a78a53ec947aa928212d671d400ac'),
  routeId?: long(name='RouteId', description='The ID of the route.', example='1050'),
}

model GetGatewayRouteDetailResponseBody = {
  code?: int32(name='Code', description='The status code returned. A value of 200 indicates that the request is successful.', example='200'),
  data?: {
    ahasStatus?: int32(name='AhasStatus', description='The status of Application High Availability Service (AHAS).', example='1'),
    cors?: {
      allowCredentials?: boolean(name='AllowCredentials', description='The credentials allowed.', example='true'),
      allowHeaders?: string(name='AllowHeaders', description='The headers allowed.', example='*'),
      allowMethods?: string(name='AllowMethods', description='The methods allowed.', example='GET,POST,PUT,DELETE,HEAD,OPTIONS,PATCH'),
      allowOrigins?: string(name='AllowOrigins', description='The origins allowed.', example='*'),
      exposeHeaders?: string(name='ExposeHeaders', description='The response headers.', example='*'),
      status?: string(name='Status', description='The status.', example='off'),
      timeUnit?: string(name='TimeUnit', description='The time unit.', example='h'),
      unitNum?: long(name='UnitNum', description='The unit number.', example='24'),
    }(name='Cors', description='The configuration for cross-origin resource sharing (CORS).'),
    defaultServiceId?: long(name='DefaultServiceId', description='The default service ID.', example='3'),
    defaultServiceName?: string(name='DefaultServiceName', description='The default service name.', example='test'),
    destinationType?: string(name='DestinationType', description='The destination service type.', example='Single'),
    directResponse?: {
      body?: string(name='Body', description='The mock return value.', example='{}'),
      code?: int32(name='Code', description='The response code returned.', example='200'),
    }(name='DirectResponse', description='The information about service mocking.'),
    domainId?: long(name='DomainId', description='The ID of the domain name.', example='235'),
    domainIdList?: [ long ](name='DomainIdList', description='The domain names.'),
    domainName?: string(name='DomainName', description='The domain name.', example='123.com'),
    domainNameList?: [ string ](name='DomainNameList', description='The domain names.'),
    enableWaf?: boolean(name='EnableWaf', description='Indicates whether Web Application Firewall (WAF) is enabled.', example='true'),
    fallback?: boolean(name='Fallback', description='Indicates whether the Fallback service is enabled.', example='true'),
    fallbackServices?: [ 
      {
        agreementType?: string(name='AgreementType', description='The type of the protocol.', example='DUBBO'),
        groupName?: string(name='GroupName', description='The name of the group to which the service belongs.', example='test'),
        name?: string(name='Name', description='The name.', example='name'),
        namespace?: string(name='Namespace', description='The namespace to which the service belongs.', example='namespace'),
        percent?: int32(name='Percent', description='The weight in the form of a percentage value.', example='80'),
        serviceId?: long(name='ServiceId', description='The ID of the service.', example='1'),
        serviceName?: string(name='ServiceName', description='The name of the service.', example='name'),
        servicePort?: int32(name='ServicePort', description='The service port.', example='8848'),
        sourceType?: string(name='SourceType', description='The type of the service source.', example='MSE'),
        version?: string(name='Version', description='The version of the service.', example='v1'),
      }
    ](name='FallbackServices', description='The information of the Fallback service.'),
    gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='1'),
    gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-7ea3da97b96543e19f6c597c****'),
    gmtCreate?: string(name='GmtCreate', description='The creation time.', example='2022-01-07 18:07:57'),
    gmtModified?: string(name='GmtModified', description='The last modification time.', example='2022-01-07T10:07:57.000+0000'),
    HTTPRewrite?: {
      host?: string(name='Host', description='The hostname of the gateway.', example='aliyuncs.com'),
      path?: string(name='Path', description='The path of the node.', example='/test/client'),
      pathType?: string(name='PathType', description='The rewrite type.', example='PRE'),
      pattern?: string(name='Pattern', description='The matching pattern.', example='/test'),
      status?: string(name='Status', description='The status of the policy.', example='off'),
      substitution?: string(name='Substitution', description='The replacement.', example='test'),
    }(name='HTTPRewrite', description='The information about the rewrite policy.'),
    headerOp?: {
      headerOpItems?: [ 
        {
          directionType?: string(name='DirectionType', description='The request or response.', example='Response'),
          key?: string(name='Key', description='Header Key.', example='debug'),
          opType?: string(name='OpType', description='The operation type.', example='Add'),
          value?: string(name='Value', description='The header value.', example='test'),
        }
      ](name='HeaderOpItems', description='The information about headers.'),
      status?: string(name='Status', description='The status.', example='off'),
    }(name='HeaderOp', description='The information about the header configuration policy.'),
    id?: long(name='Id', description='ID.', example='1050'),
    name?: string(name='Name', description='The name.', example='test'),
    predicates?: string(name='Predicates', description='The matching conditions.', example='{}'),
    redirect?: {
      code?: int32(name='Code', description='The response code returned.', example='200'),
      host?: string(name='Host', description='The hostname.', example='16'),
      path?: string(name='Path', description='The path.', example='10111'),
    }(name='Redirect', description='The configuration of the redirection.'),
    retry?: {
      attempts?: int32(name='Attempts', description='The number of retries allowed.', example='1'),
      httpCodes?: [ string ](name='HttpCodes', description='The HTTP status code.'),
      retryOn?: [ string ](name='RetryOn', description='The retry condition.'),
      status?: string(name='Status', description='The retry status.', example='on'),
    }(name='Retry', description='The retry configuration.'),
    routeOrder?: int32(name='RouteOrder', description='The sequence number of the route.', example='1'),
    routePredicates?: {
      headerPredicates?: [ 
        {
          key?: string(name='Key', description='The key of the request header.', example='id'),
          type?: string(name='Type', description='The type.', example='PRE'),
          value?: string(name='Value', description='The value of the request header.', example='200'),
        }
      ](name='HeaderPredicates', description='The information about header matching.'),
      methodPredicates?: [ string ](name='MethodPredicates', description='The information about method matching.'),
      pathPredicates?: {
        ignoreCase?: boolean(name='IgnoreCase', description='Indicates whether case sensitivity is ignored.', example='true'),
        path?: string(name='Path', description='The path.', example='/api'),
        type?: string(name='Type', description='The matching type.', example='PRE'),
      }(name='PathPredicates', description='The information about route matching.'),
      queryPredicates?: [ 
        {
          key?: string(name='Key', description='The name of the parameter.', example='userid'),
          type?: string(name='Type', description='The type.', example='PRE'),
          value?: string(name='Value', description='The value of the parameter.', example='test'),
        }
      ](name='QueryPredicates', description='The information about parameter matching.'),
    }(name='RoutePredicates', description='The information about route matching.'),
    routeServices?: [ 
      {
        agreementType?: string(name='AgreementType', description='The type of the protocol.', example='DUBBO'),
        groupName?: string(name='GroupName', description='The name of the group to which the service belongs.', example='api'),
        name?: string(name='Name', description='The name of the service.', example='dubbo4'),
        namespace?: string(name='Namespace', description='The namespace.', example='acs_ecs_dashboard'),
        percent?: int32(name='Percent', description='The weight.', example='80'),
        serviceId?: long(name='ServiceId', description='The ID of the service.', example='782'),
        serviceName?: string(name='ServiceName', description='The name of the service.', example='xkc-crm'),
        servicePort?: int32(name='ServicePort', description='The service port.', example='20880'),
        sourceType?: string(name='SourceType', description='The source type of the service.', example='MSE'),
        version?: string(name='Version', description='The version of the service.', example='v1'),
      }
    ](name='RouteServices', description='The information about services.'),
    services?: string(name='Services', description='The configurations of services.', example='[{\\"Percent\\":100,\\"ServiceId\\":126}]'),
    status?: int32(name='Status', description='The status of the route.

*   0: unpublished
*   2: publishing
*   3: published
*   4: editing (updated but not published)
*   5: unpublishing
*   6: unavailable', example='1'),
    timeout?: {
      status?: string(name='Status', description='The status.', example='off'),
      timeUnit?: string(name='TimeUnit', description='The time unit.', example='s'),
      unitNum?: int32(name='UnitNum', description='The unit number.', example='10'),
    }(name='Timeout', description='The timeout configuration.'),
  }(name='Data', description='The returned data.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The error message.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='FDF2D16C-5D28-5FAA-A56B-30BDE3559880'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model GetGatewayRouteDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetGatewayRouteDetailResponseBody(name='body'),
}

async function getGatewayRouteDetailWithOptions(request: GetGatewayRouteDetailRequest, runtime: Util.RuntimeOptions): GetGatewayRouteDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.routeId)) {
    query['RouteId'] = request.routeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetGatewayRouteDetail',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getGatewayRouteDetail(request: GetGatewayRouteDetailRequest): GetGatewayRouteDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getGatewayRouteDetailWithOptions(request, runtime);
}

model GetGatewayServiceDetailRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-f4c960ad071a48a790b36324394c****'),
  serviceId?: long(name='ServiceId', description='The ID of the service.', example='35'),
}

model GetGatewayServiceDetailResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='1'),
  data?: {
    gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='1'),
    gatewayTrafficPolicy?: TrafficPolicy(name='GatewayTrafficPolicy', description='The traffic policy of the service.', example='{}'),
    gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-7ea3da97b96543e19f6c597c****'),
    gmtCreate?: string(name='GmtCreate', description='The time when the service was added.', example='2022-01-07 18:07:57'),
    gmtModified?: string(name='GmtModified', description='The time when the service was last modified.', example='2022-01-07T10:07:57.000+0000'),
    groupName?: string(name='GroupName', description='The name of the group.', example='test'),
    healthCheck?: string(name='HealthCheck'),
    healthStatus?: string(name='HealthStatus'),
    id?: long(name='Id', description='The ID of the service.', example='1'),
    ips?: [ string ](name='Ips', description='The IP addresses of the service.'),
    labelDetails?: [ 
      {
        key?: string(name='Key', description='The key of the tag.', example='label'),
        values?: [ string ](name='Values', description='The values of the tag.'),
      }
    ](name='LabelDetails', description='The details of tags.'),
    metaInfo?: string(name='MetaInfo', description='The basic information about the service.', example='{}'),
    name?: string(name='Name', description='The name of the service.', example='test'),
    namespace?: string(name='Namespace', description='The name of the namespace.', example='default'),
    portTrafficPolicyList?: [ 
      {
        gatewayUniqueId?: string(name='GatewayUniqueId'),
        gmtCreate?: string(name='GmtCreate'),
        gmtModified?: string(name='GmtModified'),
        id?: long(name='Id'),
        serviceId?: long(name='ServiceId'),
        servicePort?: int32(name='ServicePort'),
        trafficPolicy?: TrafficPolicy(name='TrafficPolicy'),
      }
    ](name='PortTrafficPolicyList'),
    ports?: [ int32 ](name='Ports'),
    serviceNameInRegistry?: string(name='ServiceNameInRegistry', description='The name of the service registered with the service registry.', example='test'),
    serviceProtocol?: string(name='ServiceProtocol'),
    sourceId?: long(name='SourceId', description='The source ID of the service.', example='1'),
    sourceType?: string(name='SourceType', description='The source type of the service.', example='MSE'),
    versionDetails?: [ 
      {
        endpointNum?: int32(name='EndpointNum', description='The number of instances.', example='1'),
        endpointNumPercent?: string(name='EndpointNumPercent', description='The percentage of instances.', example='20%'),
        serviceVersion?: {
          labels?: [ 
            {
              key?: string(name='Key', description='The key of the tag.', example='version'),
              value?: string(name='Value', description='The value of the tag.', example='v2'),
            }
          ](name='Labels', description='The tags of the version.'),
          name?: string(name='Name', description='The name of the version.', example='v2'),
        }(name='ServiceVersion', description='The version of the service.'),
      }
    ](name='VersionDetails', description='The details of versions.'),
    versions?: [ 
      {
        label?: string(name='Label', description='The key of the tag.', example='version'),
        type?: string(name='Type', description='The type of the version.', example='test'),
        value?: string(name='Value', description='The value of the tag.', example='v1'),
      }
    ](name='Versions', description='The versions of the service.'),
  }(name='Data', description='The details of the data.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is processed successfully.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9802C54E-5CC5-5706-927B-993DBB6DCF2F'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model GetGatewayServiceDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetGatewayServiceDetailResponseBody(name='body'),
}

async function getGatewayServiceDetailWithOptions(request: GetGatewayServiceDetailRequest, runtime: Util.RuntimeOptions): GetGatewayServiceDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.serviceId)) {
    query['ServiceId'] = request.serviceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetGatewayServiceDetail',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getGatewayServiceDetail(request: GetGatewayServiceDetailRequest): GetGatewayServiceDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getGatewayServiceDetailWithOptions(request, runtime);
}

model GetGovernanceKubernetesClusterRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='cd23228b3c80c4d4f9ad7af1d87cc****'),
  regionId?: string(name='RegionId', description='The ID of the region in which the cluster resides.', example='cn-hangzhou'),
}

model GetGovernanceKubernetesClusterResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: {
    clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='cd23228b3c80c4d4f9ad7af1d87cc30d5'),
    clusterName?: string(name='ClusterName', description='The name of the cluster.', example='myCluster'),
    k8sVersion?: string(name='K8sVersion', description='The version of Kubernetes.', example='1.20.11-aliyun.1'),
    namespaceInfos?: string(name='NamespaceInfos', description='The information about namespaces.', example='[{\\"Name\\":\\"ack-onepilot\\",\\"Tags\\":null},{\\"Name\\":\\"default\\",\\"Tags\\":{\\"mse-enable\\":\\"enabled\\"}},{\\"Name\\":\\"kube-node-lease\\",\\"Tags\\":null},{\\"Name\\":\\"kube-public\\",\\"Tags\\":null},{\\"Name\\":\\"kube-system\\",\\"Tags\\":null}]'),
    namespaces?: [ 
      {
        name?: string(name='Name', description='The name of the namespace.', example='default'),
        tags?: string(name='Tags', description='The tags of the namespace.', example='"mse-enable":"enabled"'),
      }
    ](name='Namespaces', description='The details of namespaces.'),
    pilotStartTime?: string(name='PilotStartTime', description='The time when the cluster was started.', example='2022-01-11T11:50:38.000+0000'),
    region?: string(name='Region', description='The ID of the region in which the cluster resides.', example='cn-hangzhou'),
    updateTime?: string(name='UpdateTime', description='The time when the cluster was last modified.', example='2022-01-12T05:24:31.000+0000'),
  }(name='Data', description='The details of the data.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5B170A0D-2C5D-4CF8-B808-03966B86****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='True'),
}

model GetGovernanceKubernetesClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetGovernanceKubernetesClusterResponseBody(name='body'),
}

async function getGovernanceKubernetesClusterWithOptions(request: GetGovernanceKubernetesClusterRequest, runtime: Util.RuntimeOptions): GetGovernanceKubernetesClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetGovernanceKubernetesCluster',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getGovernanceKubernetesCluster(request: GetGovernanceKubernetesClusterRequest): GetGovernanceKubernetesClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return getGovernanceKubernetesClusterWithOptions(request, runtime);
}

model GetImageRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  versionCode?: string(name='VersionCode', description='The version of the cluster.', example='ZooKeeper_3_5_5'),
}

model GetImageResponseBody = {
  data?: {
    currentVersionFullShowName?: string(name='CurrentVersionFullShowName', description='The full name of the current cluster image version. The full name is in the X.X.X.X format.', example='3.5.5.0'),
    maxVersionChangelogUrl?: string(name='MaxVersionChangelogUrl', description='The URL of change logs for the latest version that can be updated to.', example='https://xxxxx'),
    maxVersionCode?: string(name='MaxVersionCode', description='The code of the latest version that can be updated to.', example='ZooKeeper_3_6_3'),
    maxVersionFullShowName?: string(name='MaxVersionFullShowName', description='The full name of the latest version that can be updated to.', example='3.6.3.0'),
  }(name='Data', description='The details of the data.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is processed successfully.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='25EA0A83-9007-4E87-808C-637BE1A****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model GetImageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetImageResponseBody(name='body'),
}

async function getImageWithOptions(request: GetImageRequest, runtime: Util.RuntimeOptions): GetImageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.versionCode)) {
    query['VersionCode'] = request.versionCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetImage',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getImage(request: GetImageRequest): GetImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return getImageWithOptions(request, runtime);
}

model GetImportFileUrlRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  contentType?: string(name='ContentType', description='The type of the configuration file.', example='application/zip'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse_prepaid_public_cn-7pp2b****'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='12788f73-9848-4388-98f1-507778f2****'),
}

model GetImportFileUrlResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: {
    url?: string(name='Url', description='The upload URL of the configuration file.', example='http://xxxxxxx'),
  }(name='Data', description='The details of the data.'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **Message** parameter. 
> If the specified **InstanceId** parameter is invalid, **The Value of Input Parameter %s is not valid** is returned for **Message** and **InstanceId** is returned for **DynamicMessage**.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is processed successfully.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='19488A00-4AF5-55E1-A689-98BA9F5E7441'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model GetImportFileUrlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetImportFileUrlResponseBody(name='body'),
}

/**
  * > The current API operation is not provided in Nacos SDK. For information about Nacos SDK, see the [official Nacos documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
  * @param request GetImportFileUrlRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetImportFileUrlResponse
 */
async function getImportFileUrlWithOptions(request: GetImportFileUrlRequest, runtime: Util.RuntimeOptions): GetImportFileUrlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.contentType)) {
    query['ContentType'] = request.contentType;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.namespaceId)) {
    query['NamespaceId'] = request.namespaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetImportFileUrl',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > The current API operation is not provided in Nacos SDK. For information about Nacos SDK, see the [official Nacos documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
  * @param request GetImportFileUrlRequest
  * @return GetImportFileUrlResponse
 */
async function getImportFileUrl(request: GetImportFileUrlRequest): GetImportFileUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getImportFileUrlWithOptions(request, runtime);
}

model GetKubernetesSourceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-c5d1aadb7df646cfb7065fbf75c1****'),
  vpcId?: string(name='VpcId'),
}

model GetKubernetesSourceResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: [ 
    {
      cluster?: string(name='Cluster', description='The ID of the ACK cluster.', example='cbc1efca895a64af097ff00b26f3f****'),
      name?: string(name='Name', description='The name of the ACK cluster.', example='k8s-demo'),
    }
  ](name='Data', description='The data structure.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1085A66C-DEF1-58EE-A0A4-31E00C9FC0D5'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model GetKubernetesSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetKubernetesSourceResponseBody(name='body'),
}

async function getKubernetesSourceWithOptions(request: GetKubernetesSourceRequest, runtime: Util.RuntimeOptions): GetKubernetesSourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetKubernetesSource',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getKubernetesSource(request: GetKubernetesSourceRequest): GetKubernetesSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getKubernetesSourceWithOptions(request, runtime);
}

model GetMseFeatureSwitchRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
}

model GetMseFeatureSwitchResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='NoPermission'),
  message?: string(name='Message', description='The message returned.', example='The request is processed successfully.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6B4653A3-8D9C-5FDC-BB0C-936D40E9794B'),
  result?: map[string]any(name='Result', description='The returned results.', example='{\\"nacos_config_encrypt\\": False}'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model GetMseFeatureSwitchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMseFeatureSwitchResponseBody(name='body'),
}

async function getMseFeatureSwitchWithOptions(request: GetMseFeatureSwitchRequest, runtime: Util.RuntimeOptions): GetMseFeatureSwitchResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMseFeatureSwitch',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMseFeatureSwitch(request: GetMseFeatureSwitchRequest): GetMseFeatureSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMseFeatureSwitchWithOptions(request, runtime);
}

model GetMseSourceRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-7ea3da97b96543e19f6c597cd4a9****'),
  type?: string(name='Type'),
}

model GetMseSourceResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='1'),
  data?: [ 
    {
      address?: string(name='Address', description='The endpoint of the instance.', example='mse-af1****-nacos-ans.mse.aliyuncs.com:8848'),
      clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='mse_'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse_prepaid_public_cn-7pp2eec****'),
      name?: string(name='Name', description='The name of the service source.', example='test'),
      type?: string(name='Type', description='The type of the service source.', example='Nacos'),
    }
  ](name='Data', description='The data structure.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned. Valid values: 

- If the request is successful, a success message is returned. 
- If the request fails, an error message is returned, such as the "TaskId not found" message.', example='The request is processed successfully.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5EB2D865-B43F-5526-8F92-857718CF73A2'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model GetMseSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMseSourceResponseBody(name='body'),
}

async function getMseSourceWithOptions(request: GetMseSourceRequest, runtime: Util.RuntimeOptions): GetMseSourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMseSource',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMseSource(request: GetMseSourceRequest): GetMseSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMseSourceWithOptions(request, runtime);
}

model GetNacosConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  beta?: boolean(name='Beta', description='Specifies whether to perform a beta release. Valid values: 

- `true`
- `false`', example='true'),
  dataId?: string(name='DataId', description='The ID of the configuration.', example='halvie-mp-item****'),
  group?: string(name='Group', description='The name of the group.', example='common'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-i7m2h0****'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='ddaf8f12-****-b1c1-86e7c72e266b'),
}

model GetNacosConfigResponseBody = {
  configuration?: {
    appName?: string(name='AppName', description='The name of the application.', example='test'),
    betaIps?: string(name='BetaIps', description='The list of IP addresses where the beta release of the configuration is performed.', example='1.1.1.1,2.2.2.2'),
    content?: string(name='Content', description='The content of the configuration.', example='log.level=error'),
    dataId?: string(name='DataId', description='The ID of the configuration.', example='log.yaml'),
    desc?: string(name='Desc', description='The description of the configuration.', example='For testing'),
    encryptedDataKey?: string(name='EncryptedDataKey', description='The encryption key.', example='key'),
    group?: string(name='Group', description='The name of the group.', example='test'),
    md5?: string(name='Md5', description='The MD5 value of the configuration.', example='123rfsdf3'),
    tags?: string(name='Tags', description='The tags of the configuration.', example='context'),
    type?: string(name='Type', description='The format of the configuration.', example='text'),
  }(name='Configuration', description='The information about the configuration.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='mse-100-000'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B4EAB48C-BB4B-5B8D-B33B-35D69606C5AD'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model GetNacosConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetNacosConfigResponseBody(name='body'),
}

/**
  * > The current API operation is not provided in Nacos SDK. For information about Nacos SDK, see the [official Nacos documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
  * @param request GetNacosConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetNacosConfigResponse
 */
async function getNacosConfigWithOptions(request: GetNacosConfigRequest, runtime: Util.RuntimeOptions): GetNacosConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.beta)) {
    query['Beta'] = request.beta;
  }
  if (!Util.isUnset(request.dataId)) {
    query['DataId'] = request.dataId;
  }
  if (!Util.isUnset(request.group)) {
    query['Group'] = request.group;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.namespaceId)) {
    query['NamespaceId'] = request.namespaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetNacosConfig',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > The current API operation is not provided in Nacos SDK. For information about Nacos SDK, see the [official Nacos documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
  * @param request GetNacosConfigRequest
  * @return GetNacosConfigResponse
 */
async function getNacosConfig(request: GetNacosConfigRequest): GetNacosConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNacosConfigWithOptions(request, runtime);
}

model GetNacosHistoryConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  dataId?: string(name='DataId', description='The ID of the configuration.', example='msg-center.main.yaml'),
  group?: string(name='Group', description='The name of the group.', example='DEFAULT_GROUP'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse_prepaid_public_cn-st220g9ka02'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='6cf708a5-****-89f2-3ba62c5ee9ba'),
  nid?: string(name='Nid', description='The historical version ID of the configuration.', example='40****'),
}

model GetNacosHistoryConfigResponseBody = {
  configuration?: {
    appName?: string(name='AppName', description='The name of the application.', example='test'),
    content?: string(name='Content', description='The content of the configuration.', example='test'),
    dataId?: string(name='DataId', description='The ID of the configuration.', example='test.yaml'),
    encryptedDataKey?: string(name='EncryptedDataKey', description='The encryption key.', example='23fds****'),
    group?: string(name='Group', description='The name of the group.', example='public'),
    md5?: string(name='Md5', description='The MD5 value of the configuration.', example='23sdf32f****'),
    opType?: string(name='OpType', description='The type of the configuration.', example='text'),
  }(name='Configuration', description='The information about the configuration.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='NoPermission'),
  message?: string(name='Message', description='The message returned.', example='The request is processed successfully.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='69AD2AA7-DB47-449B-941B-B14409DF****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model GetNacosHistoryConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetNacosHistoryConfigResponseBody(name='body'),
}

/**
  * > The current API operation is not provided in Nacos SDK. For information about Nacos SDK, see the [official Nacos documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
  * @param request GetNacosHistoryConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetNacosHistoryConfigResponse
 */
async function getNacosHistoryConfigWithOptions(request: GetNacosHistoryConfigRequest, runtime: Util.RuntimeOptions): GetNacosHistoryConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.dataId)) {
    query['DataId'] = request.dataId;
  }
  if (!Util.isUnset(request.group)) {
    query['Group'] = request.group;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.namespaceId)) {
    query['NamespaceId'] = request.namespaceId;
  }
  if (!Util.isUnset(request.nid)) {
    query['Nid'] = request.nid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetNacosHistoryConfig',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > The current API operation is not provided in Nacos SDK. For information about Nacos SDK, see the [official Nacos documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
  * @param request GetNacosHistoryConfigRequest
  * @return GetNacosHistoryConfigResponse
 */
async function getNacosHistoryConfig(request: GetNacosHistoryConfigRequest): GetNacosHistoryConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNacosHistoryConfigWithOptions(request, runtime);
}

model GetOverviewRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  period?: int32(name='Period', description='The subscription period of the instance. Unit: months. Valid values: 1, 2, 3, 6, and 12.', example='1'),
  region?: string(name='Region', description='The ID of the region.', example='cn-hangzhou'),
}

model GetOverviewResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='1'),
  data?: string(name='Data', description='The details of the data.', example='data'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is processed successfully.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='52BA6DA6-A702-4362-A32F-DFF79655****'),
  success?: string(name='Success', description='Indicates whether the request is successful. Valid values:

- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model GetOverviewResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOverviewResponseBody(name='body'),
}

async function getOverviewWithOptions(request: GetOverviewRequest, runtime: Util.RuntimeOptions): GetOverviewResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetOverview',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getOverview(request: GetOverviewRequest): GetOverviewResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOverviewWithOptions(request, runtime);
}

model GetPluginConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

zh: Chinese en: English', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-ubuwqygbq4783gqb2y3f87q****'),
  pluginId?: long(name='PluginId', description='The ID of the gateway plug-in.', example='123'),
}

model GetPluginConfigResponseBody = {
  code?: int32(name='Code', description='Code.', example='200'),
  data?: {
    category?: int32(name='Category', description='The category of the plug-in.

0: custom

1: permission authorization

2: security protection

3: transmission protocol

4: traffic control

5: traffic observation', example='0'),
    configCheck?: string(name='ConfigCheck', description='The information about the plug-in configuration used for checking.', example='\\# The configuration includes the fields required for checking, such as name, age, and friends. Sample configuration: name: John age: 18 friends: - David - Anne'),
    gatewayConfigList?: [ 
      {
        config?: string(name='Config', description='The plug-in configuration.', example='\\# The configuration includes the fields required for checking, such as name, age, and friends. Sample configuration: name: John age: 18 friends: - David - Anne'),
        configLevel?: int32(name='ConfigLevel', description='The application scope of the plug-in.

0: global

1: domain names

2: routes', example='0'),
        enable?: boolean(name='Enable', description='Indicates whether the plug-in is enabled.', example='true'),
        gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='1'),
        gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-ubuwqygbq4783gqb2y3f87q****'),
        gmtCreate?: string(name='GmtCreate', description='The creation time.', example='1667309705000'),
        gmtModified?: string(name='GmtModified', description='The update time.', example='1667309705000'),
        id?: long(name='Id', description='The ID of the plug-in configuration.', example='1'),
        pluginId?: long(name='PluginId', description='The ID of the gateway plug-in.', example='1'),
      }
    ](name='GatewayConfigList', description='The list of gateway plug-in configurations.'),
    id?: long(name='Id', description='The ID of the plug-in.', example='1'),
    imageName?: string(name='ImageName', description='The name of the image.', example='name'),
    mode?: int32(name='Mode', description='The mode.', example='0'),
    name?: string(name='Name', description='The name of the plug-in.', example='name'),
    phase?: int32(name='Phase', description='The execution stage of the plug-in.

0: default stage

1: authorization stage

2: authentication stage

3: statistics stage', example='0'),
    primaryUser?: string(name='PrimaryUser', description='The ID of the creator.', example='123'),
    priority?: int32(name='Priority', description='The execution priority of the plug-in. A larger value indicates a higher priority.', example='1'),
    publishState?: int32(name='PublishState', description='The publish status.', example='1'),
    readme?: string(name='Readme', description='The description of the README file.', example='read me'),
    readmeEn?: string(name='ReadmeEn', description='The description of the README file that is edited in English.', example='read me'),
    status?: string(name='Status', description='Indicates whether the plug-in is enabled.

0: disabled

1: enabled', example='1'),
    summary?: string(name='Summary', description='The summary of the plug-in.', example='This is a plug-in.'),
    type?: int32(name='Type', description='The type.', example='0'),
    version?: string(name='Version', description='The version of the plug-in.', example='v1'),
    versionJson?: string(name='VersionJson'),
    wasmLang?: int32(name='WasmLang', description='The WebAssembly language.

0: C++

1: TinyGo

2: Rust

3: AssemblyScript

4: Zig', example='0'),
  }(name='Data', description='The returned data.'),
  dynamicCode?: string(name='DynamicCode', description='The dynamic error code.', example='code'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic error message.', example='message'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='500'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='03A3E2F4-6804-5663-9D5D-2EC47A1*****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetPluginConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPluginConfigResponseBody(name='body'),
}

async function getPluginConfigWithOptions(request: GetPluginConfigRequest, runtime: Util.RuntimeOptions): GetPluginConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.pluginId)) {
    query['PluginId'] = request.pluginId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPluginConfig',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getPluginConfig(request: GetPluginConfigRequest): GetPluginConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPluginConfigWithOptions(request, runtime);
}

model GetPluginsRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

zh: Chinese en: English', example='zh'),
  category?: int32(name='Category', description='The plug-in directory.

*   0: user-defined
*   1: permission authentication
*   2: security protection
*   3: transmission protocol
*   4: traffic control
*   5: traffic observation', example='1'),
  enableOnly?: boolean(name='EnableOnly', description='Specifies whether to enable the plug-in.', example='true'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The ID of the gateway.', example='gw-0adf3ad751284cc69fcf9669fba*****'),
  name?: string(name='Name', description='The name of the plug-in.', example='key-auth'),
}

model GetPluginsResponseBody = {
  code?: int32(name='Code', description='Code.', example='200'),
  data?: [ 
    {
      category?: int32(name='Category', description='The directory of the plug-in.

0: user-defined

1: permission authentication

2: security protection

3: transmission protocol

4: traffic control

5: traffic observation', example='0'),
      configCheck?: string(name='ConfigCheck', description='The information about the configuration check.', example='\\# Configure to check required fields for the plug-in, such as name, age, and friends. Sample configuration: name: John age: 18 friends: - David - Anne'),
      id?: long(name='Id', description='The ID of the plug-in.', example='1'),
      maxVersion?: string(name='MaxVersion'),
      mode?: int32(name='Mode'),
      name?: string(name='Name', description='The name of the plug-in.', example='key-auth'),
      newVersionPublishingFlag?: boolean(name='NewVersionPublishingFlag'),
      phase?: int32(name='Phase', description='The plug-in execution stage.

*   0: default stage
*   1: authorization stage
*   2: authentication stage
*   3: statistics stage', example='1'),
      primaryUser?: string(name='PrimaryUser', description='The ID of the creator.', example='123'),
      priority?: int32(name='Priority', description='The plug-in execution priority. A larger value indicates a higher priority.', example='1'),
      publishState?: int32(name='PublishState', description='The publish status.', example='1'),
      status?: string(name='Status', description='Indicates whether the plug-in is enabled.

*   0: disabled
*   1: enabled', example='1'),
      summary?: string(name='Summary', description='The summary of the plug-in.', example='This is a plug-in.'),
      version?: string(name='Version', description='The version of the plug-in.', example='v1'),
      wasmFile?: string(name='WasmFile', description='The Object Storage Service (OSS) of the WebAssembly plug-in.', example='https://mse-shared-cn-hangzhou.oss-cn-hangzhou.aliyuncs.com/cfg/import/1917515******/gw-0adf3ad751284cc69fcf9669fba*****/2022/11/02/4d390496-2c17-4b42-a479-f9068ba****/16673573***5.wasm'),
      wasmLang?: int32(name='WasmLang', description='The WebAssembly language.

*   0: C++
*   1: TinyGo
*   2: Rust
*   3: AssemblyScript
*   4: Zig', example='0'),
    }
  ](name='Data', description='The returned data.'),
  dynamicCode?: string(name='DynamicCode', description='The dynamic part in the error message.', example='code'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic error message.', example='message'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='500'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='03A3E2F4-6804-5663-9D5D-2EC47A1*****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetPluginsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPluginsResponseBody(name='body'),
}

async function getPluginsWithOptions(request: GetPluginsRequest, runtime: Util.RuntimeOptions): GetPluginsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.category)) {
    query['Category'] = request.category;
  }
  if (!Util.isUnset(request.enableOnly)) {
    query['EnableOnly'] = request.enableOnly;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPlugins',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getPlugins(request: GetPluginsRequest): GetPluginsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPluginsWithOptions(request, runtime);
}

model GetServiceListRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response.', example='zh'),
  appId?: string(name='AppId', description='The ID of the application.', example='xxx@xxx'),
  ip?: string(name='Ip', description='The IP address.', example='127.0.0.1'),
  region?: string(name='Region', description='The ID of the region.', example='cn-zhangjiakou'),
  serviceName?: string(name='ServiceName', description='The name of the service.', example='com.alibaba.xxx'),
  serviceType?: string(name='ServiceType', description='The type of the framework.', example='dubbo'),
}

model GetServiceListResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: [ 
    {
      dubboApplicationName?: string(name='DubboApplicationName', description='The name of the Dubbo application.', example='dubbo-application'),
      edasAppName?: string(name='EdasAppName', description='The name of the application.', example='test'),
      group?: string(name='Group', description='The group.', example='dubbo'),
      metadata?: map[string]any(name='Metadata', description='The metadata.', example='{}'),
      methods?: [ 
        {
          methodController?: string(name='MethodController', description='The controller of the method.', example='com.alibaba.SayHelloController'),
          name?: string(name='Name', description='The name of the method.', example='sayHello'),
          parameterTypes?: [ string ](name='ParameterTypes', description='The data types of the parameters.'),
          paths?: [ string ](name='Paths', description='The paths.'),
          requestMethods?: [ string ](name='RequestMethods', description='The methods.'),
          returnType?: string(name='ReturnType', description='The type of the return value.', example='int'),
        }
      ](name='Methods', description='The methods.'),
      registryType?: string(name='RegistryType', description='The type of the service registry.', example='nacos'),
      serviceName?: string(name='ServiceName', description='The name of the service.', example='com.alibaba.xxx'),
      serviceType?: string(name='ServiceType', description='The type of the service.', example='dubbo'),
      springApplicationName?: string(name='SpringApplicationName', description='The name of the Spring application.', example='spring-application'),
      version?: string(name='Version', description='The version information.', example='1.0.0'),
    }
  ](name='Data', description='The data entries returned.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='xxx-xxx-xxx'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetServiceListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetServiceListResponseBody(name='body'),
}

async function getServiceListWithOptions(request: GetServiceListRequest, runtime: Util.RuntimeOptions): GetServiceListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.ip)) {
    query['Ip'] = request.ip;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.serviceName)) {
    query['ServiceName'] = request.serviceName;
  }
  if (!Util.isUnset(request.serviceType)) {
    query['ServiceType'] = request.serviceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetServiceList',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getServiceList(request: GetServiceListRequest): GetServiceListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getServiceListWithOptions(request, runtime);
}

model GetServiceListenersRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  clusterId?: string(name='ClusterId', example='mse-09k1q11****'),
  clusterName?: string(name='ClusterName', example='DEFAULT'),
  groupName?: string(name='GroupName', example='WEB_GROUP'),
  hasIpCount?: string(name='HasIpCount', example='none'),
  instanceId?: string(name='InstanceId', example='mse_prepaid_public_cn-tl32odtt20j'),
  namespaceId?: string(name='NamespaceId', example='ddaf8f12-****-b1c1-86e7c72e266b'),
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestPars?: string(name='RequestPars', example='{}'),
  serviceName?: string(name='ServiceName', example='zeekr-orderboss'),
}

model GetServiceListenersResponseBody = {
  data?: [ 
    {
      addr?: string(name='Addr', example='119.23.84.102'),
      agent?: string(name='Agent', example='Nacos-Java-Client:v2.1.1'),
      app?: string(name='App', example='app'),
      cluster?: string(name='Cluster', example='DEFAULT'),
      IP?: string(name='IP', example='172.16.1.5'),
      namespaceId?: string(name='NamespaceId', example='0ba53825-b183-414f-a6a0-288e4f1c467e'),
      port?: string(name='Port', example='8080'),
      serviceName?: string(name='ServiceName', example='zeekr-orderboss'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpCode?: string(name='HttpCode', example='202'),
  message?: string(name='Message', example='success'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='54973C90-F379-4372-9AA5-053A3F7****'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model GetServiceListenersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetServiceListenersResponseBody(name='body'),
}

async function getServiceListenersWithOptions(request: GetServiceListenersRequest, runtime: Util.RuntimeOptions): GetServiceListenersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.clusterName)) {
    query['ClusterName'] = request.clusterName;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.hasIpCount)) {
    query['HasIpCount'] = request.hasIpCount;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.namespaceId)) {
    query['NamespaceId'] = request.namespaceId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.requestPars)) {
    query['RequestPars'] = request.requestPars;
  }
  if (!Util.isUnset(request.serviceName)) {
    query['ServiceName'] = request.serviceName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetServiceListeners',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getServiceListeners(request: GetServiceListenersRequest): GetServiceListenersResponse {
  var runtime = new Util.RuntimeOptions{};
  return getServiceListenersWithOptions(request, runtime);
}

model GetTagsBySwimmingLaneGroupIdRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  groupId?: long(name='GroupId', description='The ID of the lane group.', example='154'),
}

model GetTagsBySwimmingLaneGroupIdResponseBody = {
  code?: int32(name='Code', description='The status code. A value of 200 is returned if the request is successful.', example='200'),
  data?: any(name='Data', description='The details of the data.', example='["gray"]'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is processed successfully.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='69AD2AA7-DB47-449B-941B-B14409DF****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model GetTagsBySwimmingLaneGroupIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTagsBySwimmingLaneGroupIdResponseBody(name='body'),
}

async function getTagsBySwimmingLaneGroupIdWithOptions(request: GetTagsBySwimmingLaneGroupIdRequest, runtime: Util.RuntimeOptions): GetTagsBySwimmingLaneGroupIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTagsBySwimmingLaneGroupId',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTagsBySwimmingLaneGroupId(request: GetTagsBySwimmingLaneGroupIdRequest): GetTagsBySwimmingLaneGroupIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTagsBySwimmingLaneGroupIdWithOptions(request, runtime);
}

model GetZookeeperDataImportUrlRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  contentType?: string(name='ContentType', example='zip'),
  instanceId?: string(name='InstanceId', example='mse_prepaid_public_cn-zvp2xzzkk06'),
}

model GetZookeeperDataImportUrlResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    maxSize?: string(name='MaxSize', example='250000'),
    url?: string(name='Url', example='http://xxxxxxxxx'),
  }(name='Data'),
  dynamicCode?: string(name='DynamicCode', example='code'),
  dynamicMessage?: string(name='DynamicMessage', example='You are not authorized to perform this operation.'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='E4E2058F-C524-5C29-9BC7-5874EA8D7CE2'),
  success?: boolean(name='Success', example='true'),
}

model GetZookeeperDataImportUrlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetZookeeperDataImportUrlResponseBody(name='body'),
}

async function getZookeeperDataImportUrlWithOptions(request: GetZookeeperDataImportUrlRequest, runtime: Util.RuntimeOptions): GetZookeeperDataImportUrlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.contentType)) {
    query['ContentType'] = request.contentType;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetZookeeperDataImportUrl',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getZookeeperDataImportUrl(request: GetZookeeperDataImportUrlRequest): GetZookeeperDataImportUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getZookeeperDataImportUrlWithOptions(request, runtime);
}

model ImportNacosConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  fileUrl?: string(name='FileUrl', description='The download URL of the configuration file.', example='https://mcube-prod.oss-cn-hangzhou.aliyuncs.com/mds/tempFileForOnex/9D7A04F072140/default/SELWNJCN/ea56fa54-ee30-42a6-8611-8c2ecc48a460/00000023.zip'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse_prepaid_public_cn-****'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='f5cdc80a-****-8094-282f5650fc00'),
  policy?: string(name='Policy', description='The policy used to handle write conflicts.', example='overwrite'),
}

model ImportNacosConfigResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='1'),
  data?: {
    failData?: [ 
      {
        dataId?: string(name='DataId', description='The ID of the configuration.', example='test2.yaml'),
        group?: string(name='Group', description='The ID of the group.', example='test'),
      }
    ](name='FailData', description='The information about configurations failed to be imported.'),
    skipCount?: int32(name='SkipCount', description='The number of configurations that are skipped.', example='10'),
    skipData?: [ 
      {
        dataId?: string(name='DataId', description='The ID of the configuration.', example='test.yaml'),
        group?: string(name='Group', description='The ID of the group.', example='public'),
      }
    ](name='SkipData', description='The information about skipped configurations.'),
    succCount?: int32(name='SuccCount', description='The number of configurations that are imported.', example='100'),
  }(name='Data', description='The details of the data.'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **Message** parameter. 
> If the specified **InstanceId** parameter is invalid, **The Value of Input Parameter %s is not valid** is returned for **Message** and **InstanceId** is returned for **DynamicMessage**.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='mse-100-100'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is processed successfully.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='AF21683A-29C7-4853-AC0F-B5ADEE4****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model ImportNacosConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ImportNacosConfigResponseBody(name='body'),
}

/**
  * > The current API operation is not provided in Nacos SDK. For information about Nacos SDK, see the [official Nacos documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
  * @param request ImportNacosConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ImportNacosConfigResponse
 */
async function importNacosConfigWithOptions(request: ImportNacosConfigRequest, runtime: Util.RuntimeOptions): ImportNacosConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.fileUrl)) {
    query['FileUrl'] = request.fileUrl;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.namespaceId)) {
    query['NamespaceId'] = request.namespaceId;
  }
  if (!Util.isUnset(request.policy)) {
    query['Policy'] = request.policy;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ImportNacosConfig',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > The current API operation is not provided in Nacos SDK. For information about Nacos SDK, see the [official Nacos documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
  * @param request ImportNacosConfigRequest
  * @return ImportNacosConfigResponse
 */
async function importNacosConfig(request: ImportNacosConfigRequest): ImportNacosConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return importNacosConfigWithOptions(request, runtime);
}

model ImportServicesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The data structure.', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-77e1153db6e14c0a8b1fae20bcb89ca5'),
  serviceList?: [ 
    {
      groupName?: string(name='GroupName', description='The name of the group.', example='test'),
      ips?: [ string ](name='Ips', description='The IP addresses of the service.'),
      name?: string(name='Name', description='The name of the service.', example='test'),
      namespace?: string(name='Namespace', description='The name of the namespace.', example='public'),
      servicePort?: long(name='ServicePort', description='The port of the service.', example='8080'),
      serviceProtocol?: string(name='ServiceProtocol', description='The protocol of the service.', example='GRPC, HTTP'),
    }
  ](name='ServiceList', description='The information about services.'),
  sourceType?: string(name='SourceType', description='The source type of the service.', example='DNS'),
  tlsSetting?: string(name='TlsSetting'),
}

model ImportServicesShrinkRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The data structure.', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-77e1153db6e14c0a8b1fae20bcb89ca5'),
  serviceListShrink?: string(name='ServiceList', description='The information about services.'),
  sourceType?: string(name='SourceType', description='The source type of the service.', example='DNS'),
  tlsSetting?: string(name='TlsSetting'),
}

model ImportServicesResponseBody = {
  code?: int32(name='Code', description='Indicates whether the request is successful. Valid values:

- `true`: The request is successful. 
- `false`: The request fails.', example='200'),
  data?: boolean(name='Data', description='Import services', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The message returned.', example='200'),
  message?: string(name='Message', description='The request is processed successfully.', example='The status code returned.'),
  requestId?: string(name='RequestId', description='The HTTP status code returned.', example='0F0FBA7D-5AC5-5DC4-A1E9-E9656BFAE1B9'),
  success?: boolean(name='Success', description='The returned results.', example='true'),
}

model ImportServicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ImportServicesResponseBody(name='body'),
}

async function importServicesWithOptions(tmpReq: ImportServicesRequest, runtime: Util.RuntimeOptions): ImportServicesResponse {
  Util.validateModel(tmpReq);
  var request = new ImportServicesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.serviceList)) {
    request.serviceListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.serviceList, 'ServiceList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.serviceListShrink)) {
    query['ServiceList'] = request.serviceListShrink;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.tlsSetting)) {
    query['TlsSetting'] = request.tlsSetting;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ImportServices',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function importServices(request: ImportServicesRequest): ImportServicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return importServicesWithOptions(request, runtime);
}

model ImportZookeeperDataRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  fileName?: string(name='FileName', example='snapshot.5'),
  fileUrl?: string(name='FileUrl', example='http://xxxxxxxxxx'),
  instanceId?: string(name='InstanceId', example='mse_prepaid_public_cn-u0t2xzvxa06'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestPars?: string(name='RequestPars', example='{}'),
}

model ImportZookeeperDataResponseBody = {
  data?: any(name='Data', example='null'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpCode?: string(name='HttpCode', example='202'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='52BA6DA6-A702-4362-A32F-DFF79655****'),
  success?: boolean(name='Success', example='true'),
}

model ImportZookeeperDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ImportZookeeperDataResponseBody(name='body'),
}

async function importZookeeperDataWithOptions(request: ImportZookeeperDataRequest, runtime: Util.RuntimeOptions): ImportZookeeperDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.fileName)) {
    query['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.fileUrl)) {
    query['FileUrl'] = request.fileUrl;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.requestPars)) {
    query['RequestPars'] = request.requestPars;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ImportZookeeperData',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function importZookeeperData(request: ImportZookeeperDataRequest): ImportZookeeperDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return importZookeeperDataWithOptions(request, runtime);
}

model ListAnsInstancesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  clusterId?: string(name='ClusterId', description='The ID of the cluster.

> This operation contains both the InstanceId and ClusterId parameters. You must configure either InstanceId or ClusterId.', example='mse-09k1q11****'),
  clusterName?: string(name='ClusterName', description='The alias of the cluster.', example='mse-7413****'),
  groupName?: string(name='GroupName', description='The name of the contact group.', example='test'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.

> This operation contains both the InstanceId and ClusterId parameters. You must configure either InstanceId or ClusterId.', example='mse_prepaid_public_cn-tl327w****'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='12233****'),
  pageNum?: int32(name='PageNum', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10'),
  requestPars?: string(name='RequestPars', description='The extended request parameter in the JSON format.', example='{}'),
  serviceName?: string(name='ServiceName', description='The name of the service.', example='name'),
}

model ListAnsInstancesResponseBody = {
  data?: [ 
    {
      app?: string(name='App', description='The name of the application.', example='app'),
      clusterName?: string(name='ClusterName', description='The name of the cluster.', example='DEFAULT'),
      datumKey?: string(name='DatumKey', description='The reference key.', example='30.5.XX.XX:unknown:DEFAULT'),
      defaultKey?: string(name='DefaultKey', description='The default key.', example='30.5.XX.XX:unknown'),
      enabled?: boolean(name='Enabled', description='The effective status of the instance. Valid values:

*   `true`: The instance takes effect.
*   `false`: The instance does not take effect.', example='true'),
      ephemeral?: boolean(name='Ephemeral', description='Indicates whether the service is marked as a temporary node. Valid values:

*   `true`: yes
*   `false`: no', example='true'),
      failCount?: int32(name='FailCount', description='The number of failed checks.', example='0'),
      healthy?: boolean(name='Healthy', description='The health status of the instance. Valid values:

*   `true`: The instance is healthy.
*   `false`: The instance is unhealthy.', example='true'),
      instanceHeartBeatInterval?: int32(name='InstanceHeartBeatInterval', description='The heartbeat interval of the instance. Unit: seconds.', example='5000'),
      instanceHeartBeatTimeOut?: int32(name='InstanceHeartBeatTimeOut', description='The timeout period of the instance heartbeat.', example='15000'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='30.5.XX.XX#0#DEFAULT#DEFAULT_GROUP@@consumers:com.alibaba.edas.IHelloService'),
      ip?: string(name='Ip', description='The public IP address.', example='30.5.XX.XX'),
      ipDeleteTimeout?: int32(name='IpDeleteTimeout', description='The timeout period for removing an IP address.', example='30000'),
      lastBeat?: long(name='LastBeat', description='The time when the instance heartbeat was last checked.', example='20201010'),
      marked?: boolean(name='Marked', description='Indicates whether the instance was marked. Valid values:

*   `true`: The instance marking was successful.
*   `false`: The instance marking failed.', example='true'),
      metadata?: map[string]any(name='Metadata', description='The metadata.', example='[int]'),
      okCount?: int32(name='OkCount', description='The number of successful checks.', example='0'),
      port?: int32(name='Port', description='The port number.', example='8080'),
      serviceName?: string(name='ServiceName', description='The name of the service.', example='DEFAULT_GROUP@@consumers:com.alibaba.edas.IHelloService::'),
      weight?: int32(name='Weight', description='The weight.', example='1'),
    }
  ](name='Data', description='The details of the data.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code.', example='202'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='52BA6DA6-A702-4362-A32F-DFF79655****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
  totalCount?: int32(name='TotalCount', description='The total number of returned instances.', example='7'),
}

model ListAnsInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAnsInstancesResponseBody(name='body'),
}

/**
  * > The operation is not provided in Nacos SDKs. For information about Nacos SDKs, see the [official documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
  * @param request ListAnsInstancesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListAnsInstancesResponse
 */
async function listAnsInstancesWithOptions(request: ListAnsInstancesRequest, runtime: Util.RuntimeOptions): ListAnsInstancesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAnsInstances',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > The operation is not provided in Nacos SDKs. For information about Nacos SDKs, see the [official documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
  * @param request ListAnsInstancesRequest
  * @return ListAnsInstancesResponse
 */
async function listAnsInstances(request: ListAnsInstancesRequest): ListAnsInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAnsInstancesWithOptions(request, runtime);
}

model ListAnsServiceClustersRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='mse-09k1q110q01'),
  clusterName?: string(name='ClusterName', description='The alias of the cluster.', example='mse-7413****'),
  groupName?: string(name='GroupName', description='The name of the contact group.', example='test'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse_prepaid_public_cn-tl32a6****'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='12233****'),
  pageNum?: int32(name='PageNum', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}'),
  serviceName?: string(name='ServiceName', description='The name of the service.', example='test'),
}

model ListAnsServiceClustersResponseBody = {
  data?: {
    clusters?: [ 
      {
        defaultCheckPort?: int32(name='DefaultCheckPort', description='The default port used for a health check.', example='80'),
        defaultPort?: int32(name='DefaultPort', description='The default port.', example='80'),
        healthCheckerType?: string(name='HealthCheckerType', description='The type of health check.', example='beat'),
        metadata?: map[string]any(name='Metadata', description='The metadata.', example='111'),
        name?: string(name='Name', description='The name of the cluster.', example='test'),
        serviceName?: string(name='ServiceName', description='The name of the service.', example='DEFAULT_GROUP@@consumers:com.alibaba.edas.IHelloService::'),
        useIPPort4Check?: boolean(name='UseIPPort4Check', description='Indicates whether the IP address is used for a health check.', example='true'),
      }
    ](name='Clusters', description='The information about clusters.'),
    ephemeral?: boolean(name='Ephemeral', description='Indicates whether the service is marked as a temporary node. Valid values:
- `true` 
- `false`', example='true'),
    groupName?: string(name='GroupName', description='The name of the contact group.', example='DEFAULT_GROUP'),
    metadata?: map[string]any(name='Metadata', description='The metadata.', example='111'),
    name?: string(name='Name', description='The name of the service.', example='DEFAULT'),
    protectThreshold?: float(name='ProtectThreshold', description='The protection threshold.', example='0'),
    selectorType?: string(name='SelectorType', description='The election mode.', example='none'),
  }(name='Data', description='The details of the data.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='mse-100-000'),
  message?: string(name='Message', description='The message returned.', example='The request is processed successfully.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='52BA6DA6-A702-4362-A32F-DFF79655****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model ListAnsServiceClustersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAnsServiceClustersResponseBody(name='body'),
}

/**
  * > The current API operation is not provided in Nacos SDK. For information about Nacos SDK, see the [official Nacos documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
  * @param request ListAnsServiceClustersRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListAnsServiceClustersResponse
 */
async function listAnsServiceClustersWithOptions(request: ListAnsServiceClustersRequest, runtime: Util.RuntimeOptions): ListAnsServiceClustersResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAnsServiceClusters',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > The current API operation is not provided in Nacos SDK. For information about Nacos SDK, see the [official Nacos documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
  * @param request ListAnsServiceClustersRequest
  * @return ListAnsServiceClustersResponse
 */
async function listAnsServiceClusters(request: ListAnsServiceClustersRequest): ListAnsServiceClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAnsServiceClustersWithOptions(request, runtime);
}

model ListAnsServicesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  clusterId?: string(name='ClusterId', description='The ID of the cluster.

> This operation contains both the InstanceId and ClusterId parameters. You must specify one of them.', example='mse-09k1q11****'),
  groupName?: string(name='GroupName', description='The name of the contact group.', example='name'),
  hasIpCount?: string(name='HasIpCount', description='Specifies whether to query the number of instances that are used for the service.', example='true'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.

> This operation contains both the InstanceId and ClusterId parameters. You must specify one of them.', example='mse-cn-st21v5****'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='12233****'),
  pageNum?: int32(name='PageNum', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10'),
  requestPars?: string(name='RequestPars', description='The extended request parameter in the JSON format.', example='{}'),
  serviceName?: string(name='ServiceName', description='The name of the service.', example='name'),
}

model ListAnsServicesResponseBody = {
  data?: [ 
    {
      clusterCount?: int32(name='ClusterCount', description='The total number of clusters.', example='1'),
      groupName?: string(name='GroupName', description='The name of the contact group.', example='name'),
      healthyInstanceCount?: int32(name='HealthyInstanceCount', description='The total number of instances with healthy heartbeats.', example='1'),
      ipCount?: int32(name='IpCount', description='The total number of instances that are used for the current service.', example='1'),
      name?: string(name='Name', description='The name of the service.', example='name'),
    }
  ](name='Data', description='The details of the data.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code.', example='202'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='52BA6DA6-A702-4362-A32F-DFF79655****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
  totalCount?: int32(name='TotalCount', description='The total number of returned instances.', example='7'),
}

model ListAnsServicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAnsServicesResponseBody(name='body'),
}

/**
  * > The operation is not provided in Nacos SDKs. For more information about Nacos SDKs, see the [official documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
  * @param request ListAnsServicesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListAnsServicesResponse
 */
async function listAnsServicesWithOptions(request: ListAnsServicesRequest, runtime: Util.RuntimeOptions): ListAnsServicesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAnsServices',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > The operation is not provided in Nacos SDKs. For more information about Nacos SDKs, see the [official documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
  * @param request ListAnsServicesRequest
  * @return ListAnsServicesResponse
 */
async function listAnsServices(request: ListAnsServicesRequest): ListAnsServicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAnsServicesWithOptions(request, runtime);
}

model ListAppBySwimmingLaneGroupTagRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  groupId?: long(name='GroupId', description='The ID of the lane group.', example='119'),
  tag?: string(name='Tag', description='The tag of the lane group.', example='gray'),
}

model ListAppBySwimmingLaneGroupTagResponseBody = {
  code?: int32(name='Code', description='The status code. A value of 200 is returned if the request is successful.', example='200'),
  data?: any(name='Data', description='The details of the data.', example='[{appName:"test",appId:"hkhon1po62@958bba95910341f
"}]'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is processed successfully.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7466566F-F30F-4A29-965D-3E0AF21D****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model ListAppBySwimmingLaneGroupTagResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAppBySwimmingLaneGroupTagResponseBody(name='body'),
}

async function listAppBySwimmingLaneGroupTagWithOptions(request: ListAppBySwimmingLaneGroupTagRequest, runtime: Util.RuntimeOptions): ListAppBySwimmingLaneGroupTagResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAppBySwimmingLaneGroupTag',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAppBySwimmingLaneGroupTag(request: ListAppBySwimmingLaneGroupTagRequest): ListAppBySwimmingLaneGroupTagResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAppBySwimmingLaneGroupTagWithOptions(request, runtime);
}

model ListApplicationsWithTagRulesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  appId?: string(name='AppId', description='The ID of the application.', example='xjpc0h9h4d@xxx'),
  appName?: string(name='AppName', description='The name of the application.', example='test'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10'),
  region?: string(name='Region', description='The ID of the region.', example='cn-hangzhou'),
  source?: string(name='Source', description='The source of the routing rule. Default value: edasmsc.', example='edasmsc'),
}

model ListApplicationsWithTagRulesResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: {
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    result?: [ 
      {
        appId?: string(name='AppId', description='The ID of the application.', example='daqijp6c31@xxx'),
        appName?: string(name='AppName', description='The name of the application.', example='service-lottery-core'),
        routeRules?: [ 
          {
            carryData?: boolean(name='CarryData', description='Indicates whether pass-through is enabled.', example='false'),
            enable?: boolean(name='Enable', description='Indicates whether the routing rule is enabled. Valid values:

- `true`: enabled 
- `false`: disabled', example='true'),
            gmtModified?: string(name='GmtModified', description='The time when the routing rule was last modified.', example='2022-01-06T06:11:06.000+0000'),
            id?: long(name='Id', description='The ID of the routing rule.', example='653'),
            instanceNum?: int32(name='InstanceNum', description='The number of instances.', example='1'),
            name?: string(name='Name', description='The name of the routing rule.', example='dubbo'),
            rate?: int32(name='Rate', description='The rate.', example='10'),
            remove?: boolean(name='Remove', description='Indicates whether the routing rule is deleted.', example='true'),
            rules?: string(name='Rules', description='The details of the routing rule.', example='{
  	"dubbo": [{
    "serviceName": "com.taobao.hsf.common.DemoService",
    "group": "",
    "version": "",
    "methodName": "sayHello",
    "condition": "AND",
    "argumentItems": [{
    	"index": 0,
    	"expr": "",
    	"operator": "rawvalue",
    	"value": "jim",
    	"cond": "=="
    }]
  	}]
  }'),
            status?: int32(name='Status', description='The status of the routing rule.', example='1'),
            tag?: string(name='Tag', description='The tag of the routing rule.', example='gray'),
          }
        ](name='RouteRules', description='The information about routing rules.'),
        routeStatus?: long(name='RouteStatus', description='The status of the route. Valid values: -0: disabled. -1: enabled.', example='1'),
      }
    ](name='Result', description='The data structure.'),
    totalSize?: int32(name='TotalSize', description='The total number of entries returned.', example='1'),
  }(name='Data', description='The details of the data.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned. Valid values: 

- If the request is successful, a success message is returned. 
- If the request fails, an error message is returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7466566F-F30F-4A29-965D-3E0AF21D****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values: -[unk]true[unk]: The request is successful. -[unk]false[unk]: The request fails.', example='true'),
}

model ListApplicationsWithTagRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListApplicationsWithTagRulesResponseBody(name='body'),
}

async function listApplicationsWithTagRulesWithOptions(request: ListApplicationsWithTagRulesRequest, runtime: Util.RuntimeOptions): ListApplicationsWithTagRulesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListApplicationsWithTagRules',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listApplicationsWithTagRules(request: ListApplicationsWithTagRulesRequest): ListApplicationsWithTagRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listApplicationsWithTagRulesWithOptions(request, runtime);
}

model ListClusterConnectionTypesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
}

model ListClusterConnectionTypesResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: [ 
    {
      showName?: string(name='ShowName', description='The connection type.', example='slb'),
    }
  ](name='Data', description='The details of the data.'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **Message** parameter. 

> If the specified **InstanceId** parameter is invalid, **The Value of Input Parameter %s is not valid** is returned for **Message** and **InstanceId** is returned for **DynamicMessage**.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8625467C-27DD-5711-878E-6857E3074937'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='True'),
}

model ListClusterConnectionTypesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListClusterConnectionTypesResponseBody(name='body'),
}

async function listClusterConnectionTypesWithOptions(request: ListClusterConnectionTypesRequest, runtime: Util.RuntimeOptions): ListClusterConnectionTypesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListClusterConnectionTypes',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listClusterConnectionTypes(request: ListClusterConnectionTypesRequest): ListClusterConnectionTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listClusterConnectionTypesWithOptions(request, runtime);
}

model ListClusterHealthCheckTaskRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  instanceId?: string(name='InstanceId', example='mse_prepaid_public_cn-7pp2o4wfx01'),
  pageNum?: int32(name='PageNum', example='0'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestPars?: string(name='RequestPars', example='{}'),
}

model ListClusterHealthCheckTaskResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageNumber?: int32(name='PageNumber', example='0'),
    pageSize?: int32(name='PageSize', example='10'),
    result?: [ 
      {
        appVersion?: string(name='AppVersion', example='1.2.1'),
        chargeType?: string(name='ChargeType', example='PREPAY'),
        clusterType?: string(name='ClusterType', example='Nacos-Ans'),
        createTime?: string(name='CreateTime', example='2022-06-20T06:51:46Z'),
        id?: int32(name='Id', description='ID。', example='1'),
        imageVersion?: string(name='ImageVersion', example='null'),
        instanceId?: string(name='InstanceId', example='mse_ingresspost-cn-0jbvrcex****'),
        primaryUser?: string(name='PrimaryUser', example='123456'),
        replica?: string(name='Replica', example='3'),
        riskList?: [ 
          {
            description?: string(name='Description'),
            id?: int32(name='Id', description='ID。', example='3426'),
            module?: string(name='Module', example='null'),
            mute?: boolean(name='Mute', example='false'),
            noticeFeature?: boolean(name='NoticeFeature', example='null'),
            primaryUser?: string(name='PrimaryUser', example='123456'),
            riskCode?: string(name='RiskCode', example='22020010001'),
            riskLevel?: string(name='RiskLevel', example='MID'),
            riskName?: string(name='RiskName'),
            riskType?: string(name='RiskType'),
            situation?: string(name='Situation'),
            suggestion?: string(name='Suggestion'),
            taskId?: long(name='TaskId', example='1'),
            type?: int32(name='Type', example='null'),
            values?: string(name='Values', example='null'),
          }
        ](name='RiskList'),
        score?: int32(name='Score', example='60'),
        spec?: string(name='Spec', example='MSE_SC_2_4_200_c'),
        status?: string(name='Status', example='FINISH'),
        totalItem?: int32(name='TotalItem', example='10'),
        totalRisk?: int32(name='TotalRisk', example='3'),
        type?: string(name='Type', example='null'),
        updateTime?: string(name='UpdateTime', example='2022-11-12 15:07:55'),
        versionCode?: string(name='VersionCode', example='NACOS_ANS_1_2_1_3'),
      }
    ](name='Result'),
    totalSize?: int32(name='TotalSize', example='9'),
  }(name='Data'),
  dynamicCode?: string(name='DynamicCode', example='code'),
  dynamicMessage?: string(name='DynamicMessage', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='4E9FDCFE-0738-493B-B801-82BDFBCB****'),
  success?: boolean(name='Success', example='true'),
}

model ListClusterHealthCheckTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListClusterHealthCheckTaskResponseBody(name='body'),
}

async function listClusterHealthCheckTaskWithOptions(request: ListClusterHealthCheckTaskRequest, runtime: Util.RuntimeOptions): ListClusterHealthCheckTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.requestPars)) {
    query['RequestPars'] = request.requestPars;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListClusterHealthCheckTask',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listClusterHealthCheckTask(request: ListClusterHealthCheckTaskRequest): ListClusterHealthCheckTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return listClusterHealthCheckTaskWithOptions(request, runtime);
}

model ListClusterTypesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  connectType?: string(name='ConnectType', description='The network type. Valid values:

*   slb
*   eni', example='slb'),
  mseVersion?: string(name='MseVersion', description='The edition of the MSE instance that you want to activate.

*   mse_pro: Professional Edition
*   mse_dev: Developer Edition', example='mse_pro'),
  regionId?: string(name='RegionId', description='The ID of the region in which the instance resides. The region is supported by Microservices Engine (MSE).', example='cn-hangzhou'),
}

model ListClusterTypesResponseBody = {
  code?: int32(name='Code', description='The return value.', example='200'),
  data?: [ 
    {
      showName?: string(name='ShowName', description='The type of the MSE engine that can be activated.', example='Zookeeper'),
    }
  ](name='Data', description='The returned data.'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the \\*\\*%s\\*\\* variable in the **ErrMessage** parameter.

>  If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The returned message.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='821B5B05-8919-5FBB-BA75-417BFC093EB8'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='True'),
}

model ListClusterTypesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListClusterTypesResponseBody(name='body'),
}

async function listClusterTypesWithOptions(request: ListClusterTypesRequest, runtime: Util.RuntimeOptions): ListClusterTypesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.connectType)) {
    query['ConnectType'] = request.connectType;
  }
  if (!Util.isUnset(request.mseVersion)) {
    query['MseVersion'] = request.mseVersion;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListClusterTypes',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listClusterTypes(request: ListClusterTypesRequest): ListClusterTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listClusterTypesWithOptions(request, runtime);
}

model ListClusterVersionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  clusterType?: string(name='ClusterType', description='The type of the cluster. Valid values: ZooKeeper, Nacos-Ans, and Eureka.', example='Nacos-Ans'),
  mseVersion?: string(name='MseVersion', example='mse_pro'),
}

model ListClusterVersionsResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: [ 
    {
      clusterType?: string(name='ClusterType', description='The type of the cluster.', example='Nacos-Ans'),
      code?: string(name='Code', description='The code of the cluster type.', example='200'),
      showName?: string(name='ShowName', description='The display name of the cluster type.', example='Nacos'),
    }
  ](name='Data', description='The details of the data.'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is processed successfully.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7717BE5B-C958-5F87-BF49-464AA276EDD1'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model ListClusterVersionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListClusterVersionsResponseBody(name='body'),
}

async function listClusterVersionsWithOptions(request: ListClusterVersionsRequest, runtime: Util.RuntimeOptions): ListClusterVersionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterType)) {
    query['ClusterType'] = request.clusterType;
  }
  if (!Util.isUnset(request.mseVersion)) {
    query['MseVersion'] = request.mseVersion;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListClusterVersions',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listClusterVersions(request: ListClusterVersionsRequest): ListClusterVersionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listClusterVersionsWithOptions(request, runtime);
}

model ListClustersRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  clusterAliasName?: string(name='ClusterAliasName', description='The alias of the instance. Fuzzy match is supported.', example='cluster'),
  pageNum?: int32(name='PageNum', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10'),
  regionId?: string(name='RegionId', description='The ID of the region in which the instance resides. The region is supported by MSE.', example='cn-hangzhou'),
  requestPars?: string(name='RequestPars', description='The extended request parameter in the JSON format.', example='{}'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. For more information about resource groups, see the topic "View basic information of a resource group."', example='rg-acfmxbzafebvvfa'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of a tag.', example='env'),
      value?: string(name='Value', description='The value of a tag.', example='prd'),
    }
  ](name='Tag', description='The list of tags. A maximum number of 20 tags are supported.'),
}

model ListClustersResponseBody = {
  data?: [ 
    {
      appVersion?: string(name='AppVersion', description='The application version.', example='1.9.3'),
      canUpdate?: boolean(name='CanUpdate', description='Indicates whether the instance can be upgraded.', example='true'),
      chargeType?: string(name='ChargeType', description='The billing method, such as subscription or pay-as-you-go.', example='Pay-as-you-go'),
      clusterAliasName?: string(name='ClusterAliasName', description='The alias of the instance.', example='mse-7413****'),
      clusterName?: string(name='ClusterName', description='The name of the instance.', example='mse-cn-st21ri2****'),
      clusterType?: string(name='ClusterType', description='The type of the instance. Valid values: ZooKeeper, Nacos-Ans, and Eureka.', example='Eureka'),
      createTime?: string(name='CreateTime', description='The time when the instance was created.', example='2020-07-31 11:36:08'),
      endDate?: string(name='EndDate', description='The time when the instance expires.', example='2021-08-01 00:00:00'),
      initStatus?: string(name='InitStatus', description='The initialization status of the instance.', example='RESTART_SUCCESS'),
      instanceCount?: long(name='InstanceCount', description='The number of instances.', example='2'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-st21ri2****'),
      internetAddress?: string(name='InternetAddress', description='The public IP address of the instance.', example='47.98.XX.XX'),
      internetDomain?: string(name='InternetDomain', description='The public endpoint of the instance.', example='mse-7413****-p.eureka.mse.aliyuncs.com'),
      intranetAddress?: string(name='IntranetAddress', description='The internal IP address of the instance.', example='192.168.XX.XX'),
      intranetDomain?: string(name='IntranetDomain', description='The internal endpoint of the instance.', example='mse-7413****-eureka.mse.aliyuncs.com'),
      mseVersion?: string(name='MseVersion', description='The edition of the instance.', example='mse_pro'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-acfmv7jiavm4uxa'),
      tags?: map[string]any(name='Tags', description='The tags that are attached to the instance.'),
      versionCode?: string(name='VersionCode', description='The version information.', example='EUREKA_1_9_3'),
    }
  ](name='Data', description='The details of the data.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code.', example='202'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='69AD2AA7-DB47-449B-941B-B14409DF****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
  totalCount?: int32(name='TotalCount', description='The total number of instances.', example='7'),
}

model ListClustersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListClustersResponseBody(name='body'),
}

async function listClustersWithOptions(request: ListClustersRequest, runtime: Util.RuntimeOptions): ListClustersResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListClusters',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listClusters(request: ListClustersRequest): ListClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listClustersWithOptions(request, runtime);
}

model ListEngineNamespacesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-st21ri2****'),
}

model ListEngineNamespacesResponseBody = {
  data?: [ 
    {
      configCount?: int32(name='ConfigCount', description='The number of configurations.', example='1'),
      namespace?: string(name='Namespace', description='The name of the namespace.', example='DEFAULT'),
      namespaceDesc?: string(name='NamespaceDesc', description='The description of the namespace.', example='mytest'),
      namespaceShowName?: string(name='NamespaceShowName', description='The display name of the namespace.', example='public'),
      quota?: int32(name='Quota', description='The quota of configurations.', example='200'),
      serviceCount?: string(name='ServiceCount', description='The number of active services.', example='3'),
      type?: int32(name='Type', description='The type of the namespace. Valid values:
- `0`: global configuration
- `1`: default namespace
- `2`: custom namespace', example='0'),
    }
  ](name='Data', description='The details of the data.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code returned.', example='202'),
  message?: string(name='Message', description='The message returned.', example='The request is processed successfully.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='062D13C5-DEA3-4921-8918-C49A0F1B****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='7'),
}

model ListEngineNamespacesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListEngineNamespacesResponseBody(name='body'),
}

async function listEngineNamespacesWithOptions(request: ListEngineNamespacesRequest, runtime: Util.RuntimeOptions): ListEngineNamespacesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListEngineNamespaces',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listEngineNamespaces(request: ListEngineNamespacesRequest): ListEngineNamespacesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEngineNamespacesWithOptions(request, runtime);
}

model ListEurekaInstancesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='mse-09k1q11****'),
  pageNum?: int32(name='PageNum', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}'),
  serviceName?: string(name='ServiceName', description='The name of the service.', example='name'),
}

model ListEurekaInstancesResponseBody = {
  data?: [ 
    {
      app?: string(name='App', description='The name of the application.', example='CONTACTINFO'),
      durationInSecs?: int32(name='DurationInSecs', description='The timeout period of the instance.   
After the specified timeout period expires, the service is unavailable by default and therefore is deleted.', example='90'),
      homePageUrl?: string(name='HomePageUrl', description='The URL of the homepage.', example='http://30.5.XX.XX:8091/'),
      hostName?: string(name='HostName', description='The hostname.', example='30.5.XX.XX'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='L-PC1A6A28-****.hz.ali.com:contactinfo:8091'),
      ipAddr?: string(name='IpAddr', description='The IP address of the instance.', example='30.5.XX.XX'),
      lastDirtyTimestamp?: long(name='LastDirtyTimestamp', description='The time when the instance was last modified.', example='20201009115543'),
      lastUpdatedTimestamp?: long(name='LastUpdatedTimestamp', description='The time when the instance heartbeat was last checked.', example='20201010071203'),
      metadata?: map[string]any(name='Metadata', description='The metadata.', example='[string]'),
      port?: int32(name='Port', description='The port of the service.', example='8091'),
      renewalIntervalInSecs?: int32(name='RenewalIntervalInSecs', description='The maximum interval between two heartbeat checks after a heartbeat check times out.   
Default value: 10.', example='10'),
      securePort?: int32(name='SecurePort', description='The security port.', example='443'),
      status?: string(name='Status', description='The number of service providers. The value is in the following format: Number of healthy instances/Total number of instances.', example='1/1'),
      vipAddress?: string(name='VipAddress', description='The virtual hostname.', example='contactinfo'),
    }
  ](name='Data', description='The details of the data.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code returned.', example='202'),
  message?: string(name='Message', description='The message returned.', example='The request is processed successfully.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='7'),
}

model ListEurekaInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListEurekaInstancesResponseBody(name='body'),
}

async function listEurekaInstancesWithOptions(request: ListEurekaInstancesRequest, runtime: Util.RuntimeOptions): ListEurekaInstancesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListEurekaInstances',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listEurekaInstances(request: ListEurekaInstancesRequest): ListEurekaInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEurekaInstancesWithOptions(request, runtime);
}

model ListEurekaServicesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='mse-09k1q11****'),
  pageNum?: int32(name='PageNum', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}'),
}

model ListEurekaServicesResponseBody = {
  data?: [ 
    {
      instancesId?: [ string ](name='InstancesId', description='The information about instances.'),
      name?: string(name='Name', description='The name of the service.', example='CONTACTINFO'),
      upStatus?: string(name='UpStatus', description='The number of service providers. The value is in the following format: Number of healthy instances/Total number of instances.', example='1/1'),
    }
  ](name='Data', description='The details of the data.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code returned.', example='202'),
  message?: string(name='Message', description='The message returned.', example='The request is processed successfully.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='7'),
}

model ListEurekaServicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListEurekaServicesResponseBody(name='body'),
}

async function listEurekaServicesWithOptions(request: ListEurekaServicesRequest, runtime: Util.RuntimeOptions): ListEurekaServicesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListEurekaServices',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listEurekaServices(request: ListEurekaServicesRequest): ListEurekaServicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEurekaServicesWithOptions(request, runtime);
}

model ListGatewayRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  descSort?: boolean(name='DescSort', description='Specifies whether to enable the sorting feature. This feature is not available.', example='false'),
  filterParams?: {
    gatewayType?: string(name='GatewayType', description='The type of the gateway.', example='Ingress'),
    gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-5017305290e14centbrveca****'),
    instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse_ingresspre-cn-****'),
    mseTag?: string(name='MseTag', example='[{"key":"tagkey","value":"tagvalue"}]'),
    name?: string(name='Name', description='The name of the gateway.', example='rutain-test'),
    resourceGroupId?: string(name='ResourceGroupId', example='rg-7y2uye*****'),
    vpc?: string(name='Vpc', description='The ID of the virtual private cloud (VPC).', example='vpc-bp13hhyjntbab7w****'),
  }(name='FilterParams', description='The details of parameters.'),
  orderItem?: string(name='OrderItem', description='The order information.', example='{}'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10'),
}

model ListGatewayShrinkRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  descSort?: boolean(name='DescSort', description='Specifies whether to enable the sorting feature. This feature is not available.', example='false'),
  filterParamsShrink?: string(name='FilterParams', description='The details of parameters.'),
  orderItem?: string(name='OrderItem', description='The order information.', example='{}'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10'),
}

model ListGatewayResponseBody = {
  code?: int32(name='Code', description='The return value.', example='200'),
  data?: {
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    result?: [ 
      {
        ahasOn?: boolean(name='AhasOn', description='Indicates whether Application High Availability Service (AHAS) is enabled.', example='false'),
        appVersion?: string(name='AppVersion', description='The version of the application.', example='1.0.1.0'),
        armsOn?: boolean(name='ArmsOn', description='Indicates whether Application Real-Time Monitoring Service (ARMS) is enabled.', example='false'),
        chargeType?: string(name='ChargeType', description='The billing method.', example='POSTPAY'),
        currentVersion?: string(name='CurrentVersion', description='The current version of the gateway.', example='0.1.0-mse-gw'),
        endDate?: string(name='EndDate', description='The time when the subscription gateway expires.', example='4792060800000'),
        gatewayType?: string(name='GatewayType', description='The type of the gateway.', example='Ingress'),
        gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-5017305290e14cebb8ce5cb6a4****'),
        gatewayVersion?: string(name='GatewayVersion', example='1.2.9'),
        gmtCreate?: string(name='GmtCreate', description='The creation time.', example='2021-09-13 19:24:23'),
        gmtModified?: string(name='GmtModified', description='The modification time.', example='2021-09-13 19:24:23'),
        id?: long(name='Id', description='The ID of the gateway.', example='153'),
        initConfig?: {
          enableWaf?: boolean(name='EnableWaf', description='Indicates whether Web Application Firewall (WAF) is enabled.', example='true'),
          supportWaf?: boolean(name='SupportWaf', description='Indicates whether WAF is supported.', example='true'),
        }(name='InitConfig', description='The configurations.'),
        instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse_ingresspost-cn-0jbvrcex****'),
        internetSlb?: [ 
          {
            gatewaySlbMode?: string(name='GatewaySlbMode', description='The mode of the SLB instance.', example='UserHost'),
            gatewaySlbStatus?: string(name='GatewaySlbStatus', description='The status of the SLB instance.', example='Ready'),
            internetNetworkFlow?: string(name='InternetNetworkFlow', description='The traffic of the gateway.', example='20'),
            slbId?: string(name='SlbId', description='SLB ID.', example='lb-bp1ut8asdfgucjk****'),
            slbIp?: string(name='SlbIp', description='SLB IP.', example='153.12.XX.XX'),
            slbPort?: string(name='SlbPort', description='The port number of the SLB instance.', example='slb.s2.small'),
            slbSpec?: string(name='SlbSpec', description='The specifications of the SLB instance.', example='slb.s2.small'),
            statusDesc?: string(name='StatusDesc', description='The description of the status.', example='Creating'),
            type?: string(name='Type', description='The type.', example='PUB_NET'),
          }
        ](name='InternetSlb', description='The details of the Internet-facing SLB instances.'),
        latestVersion?: string(name='LatestVersion', description='The latest version of the gateway.', example='0.1.0-mse-gw'),
        mseTag?: string(name='MseTag', example='{"tagKey":"tagValue"}'),
        mustUpgrade?: boolean(name='MustUpgrade', description='Indicates whether the gateway can be forcefully updated.', example='false'),
        name?: string(name='Name', description='The name of the gateway.', example='tesa-test'),
        primaryUser?: string(name='PrimaryUser', description='The information about the user.', example='18278117654342'),
        region?: string(name='Region', description='The ID of the region.', example='cn-hangzhou'),
        replica?: int32(name='Replica', description='The number of replicas.', example='2'),
        resourceGroupId?: string(name='ResourceGroupId', example='rg-97hg87vi****'),
        rollBack?: boolean(name='RollBack', example='false'),
        slb?: [ 
          {
            gatewaySlbMode?: string(name='GatewaySlbMode', description='The mode of the SLB instance.', example='UserHost'),
            gatewaySlbStatus?: string(name='GatewaySlbStatus', description='The status of the SLB instance.', example='Ready'),
            slbId?: string(name='SlbId', description='SLB ID.', example='lb-bp1ut8asdfgucjk****'),
            slbIp?: string(name='SlbIp', description='SLB IP.', example='153.12.XX.XX'),
            slbPort?: string(name='SlbPort', description='The port number of the SLB instance.', example='80'),
            slbSpec?: string(name='SlbSpec', description='The specifications of the SLB instance.', example='slb.s2.small'),
            statusDesc?: string(name='StatusDesc', description='The description of the status.', example='Creating'),
            type?: string(name='Type', description='The type.', example='PUB_NET'),
          }
        ](name='Slb', description='The details of the Server Load Balancer (SLB) instances.'),
        spec?: string(name='Spec', description='The specifications of the gateway.', example='MSE_GTW_1_2_200_c'),
        status?: int32(name='Status', description='The gateway status.

*   0: The gateway is being created.
*   1: The gateway fails to be created.
*   2: The gateway is running.
*   3: The gateway is changing.
*   4: The gateway is scaling down.
*   6: The gateway is scaling up.
*   8: The gateway is being deleted.
*   9: The gateway is suspended and to be released.
*   10: The gateway is restarting.
*   11: The gateway is being rebuilt.
*   12: The gateway is updating.
*   13: The gateway fails to be updated.', example='2'),
        statusDesc?: string(name='StatusDesc', description='The description of the status.', example='Restarting'),
        supportWasm?: boolean(name='SupportWasm', description='Indicates whether WebAssembly (Wasm) is supported.', example='true'),
        tag?: string(name='Tag', description='The tag.', example='test'),
        upgrade?: boolean(name='Upgrade', description='Indicates whether the gateway can be updated.', example='false'),
        vswitch2?: string(name='Vswitch2', description='The ID of the secondary vSwitch.', example='vsw-bpbrveck45nf****'),
      }
    ](name='Result', description='The returned data.'),
    totalSize?: long(name='TotalSize', description='The total number of entries returned.', example='9'),
  }(name='Data', description='The returned data.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The returned message.', example='You are not authorized to perform this operation. Action: mse:ListGateway, Resource: acs:mse:cn-hangzhou:102123:*'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='34300B3-52EC-5049-8C96-914098CF090C'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model ListGatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListGatewayResponseBody(name='body'),
}

async function listGatewayWithOptions(tmpReq: ListGatewayRequest, runtime: Util.RuntimeOptions): ListGatewayResponse {
  Util.validateModel(tmpReq);
  var request = new ListGatewayShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.filterParams)) {
    request.filterParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.filterParams, 'FilterParams', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.descSort)) {
    query['DescSort'] = request.descSort;
  }
  if (!Util.isUnset(request.filterParamsShrink)) {
    query['FilterParams'] = request.filterParamsShrink;
  }
  if (!Util.isUnset(request.orderItem)) {
    query['OrderItem'] = request.orderItem;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListGateway',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listGateway(request: ListGatewayRequest): ListGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return listGatewayWithOptions(request, runtime);
}

model ListGatewayDomainRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-c9bc5afd61014165bd58f621b491****'),
  type?: string(name='Type', example='All'),
}

model ListGatewayDomainResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: [ 
    {
      certBeforeDate?: string(name='CertBeforeDate', description='The expiration time of the certificate.', example='2031-03-30 02:35:12'),
      certIdentifier?: string(name='CertIdentifier', description='The ID of the certificate.', example='3452-cn-hangzhou'),
      comment?: {
        status?: string(name='Status', example='Error'),
      }(name='Comment'),
      gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='12'),
      gmtCreate?: string(name='GmtCreate', description='The time when the domain name was associated.', example='2031-03-30 02:35:12'),
      gmtModified?: string(name='GmtModified', description='The time when the domain name was last modified.', example='2031-03-30 02:35:12'),
      http2?: string(name='Http2', description='Specifies whether to enable `Http2`.
- `open`: enables `Http2`.
- `close`: disables `Http2`.
- `globalConfig`: uses global configurations.', example='close'),
      id?: long(name='Id', description='ID', example='243'),
      mustHttps?: boolean(name='MustHttps', description='Indicates whether HTTPS is forcibly used.', example='true'),
      name?: string(name='Name', description='The domain name.', example='test.com'),
      protocol?: string(name='Protocol', description='The type of the protocol.', example='HTTP'),
      status?: int32(name='Status', example='3'),
      tlsMax?: string(name='TlsMax', description='The maximum version of Transport Layer Security (TLS).', example='TLS 1.3'),
      tlsMin?: string(name='TlsMin', description='The minimum version of TLS.', example='TLS 1.0'),
      type?: string(name='Type', example='Op'),
    }
  ](name='Data', description='The details of the data.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message returned if the request fails.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3F5D8E93-CA66-57F1-8BCF-A223E11*****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model ListGatewayDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListGatewayDomainResponseBody(name='body'),
}

async function listGatewayDomainWithOptions(request: ListGatewayDomainRequest, runtime: Util.RuntimeOptions): ListGatewayDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListGatewayDomain',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listGatewayDomain(request: ListGatewayDomainRequest): ListGatewayDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return listGatewayDomainWithOptions(request, runtime);
}

model ListGatewayRouteRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  descSort?: boolean(name='DescSort', description='Specifies whether to enable sorting.', example='false'),
  filterParams?: {
    defaultServiceId?: long(name='DefaultServiceId', description='The default service ID.', example='1'),
    domainId?: long(name='DomainId', description='The domain ID.', example='284'),
    domainName?: string(name='DomainName', description='The associated domain name.', example='*.alites.com'),
    gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='81'),
    gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-30a0106924c94bca8712ec4e79fc5acc'),
    name?: string(name='Name', description='The name of the gateway.', example='test'),
    routeOrder?: int32(name='RouteOrder', description='The order.', example='1'),
    status?: int32(name='Status', description='The status.', example='1'),
  }(name='FilterParams', description='The parameters that specify filter conditions, which are in the format of {"key1":"value1"}.'),
  orderItem?: string(name='OrderItem', description='The item based on which entries are sorted.', example='GmtCreate'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10'),
}

model ListGatewayRouteShrinkRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  descSort?: boolean(name='DescSort', description='Specifies whether to enable sorting.', example='false'),
  filterParamsShrink?: string(name='FilterParams', description='The parameters that specify filter conditions, which are in the format of {"key1":"value1"}.'),
  orderItem?: string(name='OrderItem', description='The item based on which entries are sorted.', example='GmtCreate'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10'),
}

model ListGatewayRouteResponseBody = {
  code?: int32(name='Code', description='The code returned.', example='200'),
  data?: {
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='11'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    result?: [ 
      {
        comment?: {
          status?: string(name='Status', description='The status.', example='error'),
        }(name='Comment', description='The route comment (ingress).'),
        defaultServiceId?: long(name='DefaultServiceId', description='The default service ID.', example='1'),
        defaultServiceName?: string(name='DefaultServiceName', description='The default service name.', example='test'),
        destinationType?: string(name='DestinationType', description='The destination type.', example='Single'),
        directResponse?: {
          body?: string(name='Body', description='The return value for service mocking.', example='hello'),
          code?: int32(name='Code', description='The response code returned.', example='200'),
        }(name='DirectResponse', description='The information about service mocking.'),
        domainId?: long(name='DomainId', description='The domain ID.', example='265'),
        domainIdList?: [ long ](name='DomainIdList', description='The list of domain IDs.'),
        domainName?: string(name='DomainName', description='The domain name.', example='y.com'),
        domainNameList?: [ string ](name='DomainNameList', description='The list of domain names.'),
        enableWaf?: string(name='EnableWaf', description='Indicates whether Web Application Firewall (WAF) is activated.', example='false'),
        fallback?: boolean(name='Fallback', description='Indicates whether the Fallback service is enabled.', example='true'),
        fallbackServices?: [ 
          {
            agreementType?: string(name='AgreementType', description='The type of the protocol.', example='DUBBO'),
            groupName?: string(name='GroupName', description='The name of the group to which the service belongs.', example='test'),
            name?: string(name='Name', description='The name.', example='name'),
            namespace?: string(name='Namespace', description='The namespace to which the service belongs.', example='Namespace'),
            percent?: int32(name='Percent', description='The weight in the form of a percentage value.', example='100'),
            serviceId?: long(name='ServiceId', description='The ID of the service.', example='353'),
            serviceName?: string(name='ServiceName', description='The name of the service.', example='service name'),
            servicePort?: int32(name='ServicePort', description='The service port number.', example='8848'),
            sourceType?: string(name='SourceType', description='The type of the service source.', example='MSE'),
            version?: string(name='Version', description='The version of the service.', example='v1'),
          }
        ](name='FallbackServices', description='The information about the Fallback service.'),
        gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='496'),
        gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-cf0e7f52ecc7429dbc7ba4d5e3656100'),
        gmtCreate?: string(name='GmtCreate', description='The creation time.', example='2022-01-25T07:14:01.817+0000'),
        gmtModified?: string(name='GmtModified', description='The modification time.', example='2022-01-07 18:07:57'),
        id?: long(name='Id', description='ID.', example='47'),
        name?: string(name='Name', description='The name.', example='test'),
        predicates?: string(name='Predicates', description='The matching rules.', example='{\\"PathPredicates\\":{\\"Path\\":\\"/rpc/compute \\",\\"Type\\":\\"PRE\\",\\"IgnoreCase\\":true}}'),
        redirect?: {
          code?: int32(name='Code', description='The response code returned.', example='200'),
          host?: string(name='Host', description='The hostname to be redirected to.', example='test.com'),
          path?: string(name='Path', description='The path.', example='/test'),
        }(name='Redirect', description='The information about redirection.'),
        routeOrder?: int32(name='RouteOrder', description='The order.', example='1'),
        routePredicates?: {
          headerPredicates?: [ 
            {
              key?: string(name='Key', description='Header KEY', example='userid'),
              type?: string(name='Type', description='The matching type.', example='PRE'),
              value?: string(name='Value', description='The header value.', example='test'),
            }
          ](name='HeaderPredicates', description='The headers used for route matching.'),
          methodPredicates?: [ string ](name='MethodPredicates', description='The HTTP methods used for route matching.'),
          pathPredicates?: {
            ignoreCase?: boolean(name='IgnoreCase', description='Indicates whether case sensitivity is ignored.', example='true'),
            path?: string(name='Path', description='The path of the node.', example='/getIp'),
            type?: string(name='Type', description='The matching type.', example='PRE'),
          }(name='PathPredicates', description='The path used for route matching.'),
          queryPredicates?: [ 
            {
              key?: string(name='Key', description='The key.', example='userid'),
              type?: string(name='Type', description='The matching type.', example='PRE'),
              value?: string(name='Value', description='The value.', example='test'),
            }
          ](name='QueryPredicates', description='The parameters used for route matching.'),
        }(name='RoutePredicates', description='The matching rules.'),
        routeServices?: [ 
          {
            agreementType?: string(name='AgreementType', description='The type of the protocol.', example='DUBBO'),
            groupName?: string(name='GroupName', description='The name of the group to which the service belongs.', example='api'),
            httpDubboTranscoder?: {
              dubboServiceGroup?: string(name='DubboServiceGroup', description='The Dubbo service group.', example='service group'),
              dubboServiceName?: string(name='DubboServiceName', description='The name of the Dubbo service.', example='org.apache.dubbo.samples.basic.api.DemoService'),
              dubboServiceVersion?: string(name='DubboServiceVersion', description='The version of the Dubbo service.', example='0.0.0'),
              mothedMapList?: [ 
                {
                  dubboMothedName?: string(name='DubboMothedName', description='The method name of the Dubbo service.', example='sayHello'),
                  httpMothed?: string(name='HttpMothed', description='The HTTP method.

> Valid values:

*   ALL_GET

*   ALL_POST

*   ALL_PUT

*   ALL_DELETE

*   ALL_PATCH', example='ALL_GET'),
                  mothedpath?: string(name='Mothedpath', description='The path used for method matching.', example='/mytestzbk/sayhello'),
                  paramMapsList?: [ 
                    {
                      extractKey?: string(name='ExtractKey', description='The key extracted from the input parameter.', example='name'),
                      extractKeySpec?: string(name='ExtractKeySpec', description='The position of the input parameter.

> Valid values:

*   `ALL_QUERY_PARAMETER`: request parameter

*   `ALL_HEADER`: request header

*   `ALL_PATH`: request path

*   `ALL_BODY`: request body', example='ALL_QUERY_PARAMETER'),
                      mappingType?: string(name='MappingType', description='The type of the backend service parameter.', example='java.lang.String'),
                    }
                  ](name='ParamMapsList', description='The information about parameter mappings.'),
                  passThroughAllHeaders?: string(name='PassThroughAllHeaders', description='The pass-through type of the header.

> Valid values:

*   PASS_ALL: All headers are passed through.

*   PASS_NOT: All headers are not passed through.

*   PASS_ASSIGN: Specified headers are passed through.', example='PASS_NOT'),
                  passThroughList?: [ string ](name='PassThroughList', description='The list of headers to be passed through.'),
                }
              ](name='MothedMapList', description='The forwarding rules of the Dubbo service.'),
            }(name='HttpDubboTranscoder', description='The transcoder of the Dubbo protocol.'),
            name?: string(name='Name', description='The name.', example='test'),
            namespace?: string(name='Namespace', description='The namespace.', example='default'),
            percent?: int32(name='Percent', description='The weight in the form of a percentage value.', example='11'),
            serviceId?: long(name='ServiceId', description='The ID of the service.', example='1563'),
            serviceName?: string(name='ServiceName', description='The name of the service.', example='hu'),
            servicePort?: int32(name='ServicePort', description='The Dubbo port number.', example='20880'),
            sourceType?: string(name='SourceType', description='The source type.', example='MSE'),
            version?: string(name='Version', description='The version of the service.', example='v1'),
          }
        ](name='RouteServices', description='The information about services.'),
        services?: string(name='Services', description='The information about services.', example='[]'),
        status?: int32(name='Status', description='The status.', example='2'),
        type?: string(name='Type', description='The route type.', example='Op'),
      }
    ](name='Result', description='The data structure.'),
    totalSize?: long(name='TotalSize', description='The total number of entries returned.', example='36'),
  }(name='Data', description='The returned data.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='83F02EAB-ECDF-55C6-B332-8649E5E7AF2C'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model ListGatewayRouteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListGatewayRouteResponseBody(name='body'),
}

async function listGatewayRouteWithOptions(tmpReq: ListGatewayRouteRequest, runtime: Util.RuntimeOptions): ListGatewayRouteResponse {
  Util.validateModel(tmpReq);
  var request = new ListGatewayRouteShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.filterParams)) {
    request.filterParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.filterParams, 'FilterParams', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.descSort)) {
    query['DescSort'] = request.descSort;
  }
  if (!Util.isUnset(request.filterParamsShrink)) {
    query['FilterParams'] = request.filterParamsShrink;
  }
  if (!Util.isUnset(request.orderItem)) {
    query['OrderItem'] = request.orderItem;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListGatewayRoute',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listGatewayRoute(request: ListGatewayRouteRequest): ListGatewayRouteResponse {
  var runtime = new Util.RuntimeOptions{};
  return listGatewayRouteWithOptions(request, runtime);
}

model ListGatewayServiceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  descSort?: boolean(name='DescSort', description='Specifies whether to enable sorting.', example='false'),
  filterParams?: {
    gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-5017305290e14centbrveca****'),
    groupName?: string(name='GroupName', description='The group.', example='test'),
    name?: string(name='Name', description='The name of the service.', example='test'),
    namespace?: string(name='Namespace', description='The namespace.', example='public'),
    serviceProtocol?: string(name='ServiceProtocol', description='The protocol of the service.

*   HTTP
*   HTTPS
*   HTTP2
*   GRPC
*   DUBBO', example='HTTP'),
    sourceType?: string(name='SourceType', description='The type of the service source.', example='MSE'),
  }(name='FilterParams', description='The parameters that specify filter conditions, which are in the format of {"key1":"value1"}.'),
  orderItem?: string(name='OrderItem', description='The item based on which entries are sorted.', example='GmtCreate'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10'),
}

model ListGatewayServiceShrinkRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  descSort?: boolean(name='DescSort', description='Specifies whether to enable sorting.', example='false'),
  filterParamsShrink?: string(name='FilterParams', description='The parameters that specify filter conditions, which are in the format of {"key1":"value1"}.'),
  orderItem?: string(name='OrderItem', description='The item based on which entries are sorted.', example='GmtCreate'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10'),
}

model ListGatewayServiceResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: {
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The maximum number of entries returned per page. Default value: 10.', example='10'),
    result?: [ 
      {
        gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='1'),
        gatewayTrafficPolicy?: {
          loadBalancerSettings?: {
            consistentHashLBConfig?: {
              consistentHashLBType?: string(name='ConsistentHashLBType', description='The type based on which consistent hashing load balancing is performed.

*   HEADER
*   COOKIE
*   SOURCE_IP
*   QUERY_PARAMETER', example='HEADER'),
              httpCookie?: {
                name?: string(name='Name', description='The name of the cookie.', example='name'),
                path?: string(name='Path', description='The path of the cookie.', example='/path'),
                ttl?: string(name='Ttl', description='The lifecycle of the cookie.', example='360'),
              }(name='HttpCookie', description='The cookie-based load balancing parameters.'),
              minimumRingSize?: long(name='MinimumRingSize', description='The minimum value of the hash ring.', example='10000'),
              parameterName?: string(name='ParameterName', description='The name of the parameter.', example='param'),
            }(name='ConsistentHashLBConfig', description='The consistent hashing settings.'),
            loadbalancerType?: string(name='LoadbalancerType', description='The load balancing type.

*   ROUND_ROBIN
*   LEAST_CONN
*   RANDOM
*   CONSISTENT_HASH', example='RANDOM'),
            warmupDuration?: int32(name='WarmupDuration', description='The prefetch time of least connection load balancing.', example='10'),
          }(name='LoadBalancerSettings', description='The load balancing settings.'),
          tls?: {
            caCertContent?: string(name='CaCertContent', description='The public key of the CA certificate .', example='content'),
            caCertId?: string(name='CaCertId', description='The ID of the certification authority (CA) certificate.', example='5******-cn-hangzhou'),
            certId?: string(name='CertId', description='The ID of the certificate.', example='5******-cn-hangzhou'),
            mode?: string(name='Mode', description='The TLS mode.

*   DISABLE
*   SIMPLE
*   MUTUAL
*   ISTIO_MUTUAL', example='SIMPLE'),
            sni?: string(name='Sni', description='The Server Name Indication (SNI) value.', example='name-sni'),
            subjectAltNames?: [ string ](name='SubjectAltNames', description='The array of subject aliases.'),
          }(name='Tls', description='TLS.'),
        }(name='GatewayTrafficPolicy', description='The traffic management policy.'),
        gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-5017305290e14centbrveca****'),
        gmtCreate?: string(name='GmtCreate', description='The time when the service was created.', example='2022-01-07 18:07:57'),
        gmtModified?: string(name='GmtModified', description='The time when the service was last modified.', example='2022-01-07 18:07:57'),
        groupName?: string(name='GroupName', description='The group.', example='test'),
        healehStatus?: string(name='HealehStatus', description='The health status.

*   Health
*   Unhealthy
*   Unknown', example='Unhealthy'),
        healthCheck?: boolean(name='HealthCheck', description='Indicates whether health checks are performed.', example='true'),
        healthCheckInfo?: {
          check?: boolean(name='Check', description='Indicates whether checks are performed.', example='true'),
          expectedStatuses?: [ int32 ](name='ExpectedStatuses', description='The expected status of the health check.'),
          healthyThreshold?: int32(name='HealthyThreshold', description='The threshold for healthy instances.', example='2'),
          httpHost?: string(name='HttpHost', description='The URL of the HTTP request for the health check.', example='http://172.168.0.1'),
          httpPath?: string(name='HttpPath', description='The path to which the HTTP request for the health check is sent.', example='/health'),
          interval?: int32(name='Interval', description='The health check interval.', example='2'),
          protocol?: string(name='Protocol', description='The network protocol.', example='TCP'),
          timeout?: int32(name='Timeout', description='The timeout period.', example='2'),
          unhealthyThreshold?: int32(name='UnhealthyThreshold', description='The threshold for unhealthy instances.', example='2'),
        }(name='HealthCheckInfo', description='The information about health checks.'),
        healthStatus?: string(name='HealthStatus', description='The health status.

*   Health
*   Unhealthy
*   Unknown', example='Unhealthy'),
        id?: long(name='Id', description='ID.', example='1'),
        ips?: [ string ](name='Ips', description='The IP addresses of the service.'),
        metaInfo?: string(name='MetaInfo', description='The metadata or IP addresses of the service.', example='{}'),
        name?: string(name='Name', description='The name of the service.', example='test'),
        namespace?: string(name='Namespace', description='The namespace.', example='public'),
        ports?: [ int32 ](name='Ports', description='The port array.'),
        serviceNameInRegistry?: string(name='ServiceNameInRegistry', description='The name of the service registered with the service registry.', example='test'),
        servicePort?: long(name='ServicePort', description='The service port.', example='80'),
        serviceProtocol?: string(name='ServiceProtocol', description='The protocol of the service.', example='HTTP'),
        sourceId?: long(name='SourceId', description='The ID of the service source.', example='2'),
        sourceType?: string(name='SourceType', description='The type of the service source.', example='MSE'),
        unhealthyEndpoints?: [ string ](name='UnhealthyEndpoints', description='The array of unhealthy endpoints.'),
        versions?: [ 
          {
            name?: string(name='Name', description='The version number.', example='v1'),
          }
        ](name='Versions', description='The version of the service.'),
      }
    ](name='Result', description='The returned information.'),
    totalSize?: long(name='TotalSize', description='The total number of entries returned.', example='9'),
  }(name='Data', description='The returned data.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F46CDBA4-B1EE-5C94-8A48-51C10177****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model ListGatewayServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListGatewayServiceResponseBody(name='body'),
}

async function listGatewayServiceWithOptions(tmpReq: ListGatewayServiceRequest, runtime: Util.RuntimeOptions): ListGatewayServiceResponse {
  Util.validateModel(tmpReq);
  var request = new ListGatewayServiceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.filterParams)) {
    request.filterParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.filterParams, 'FilterParams', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.descSort)) {
    query['DescSort'] = request.descSort;
  }
  if (!Util.isUnset(request.filterParamsShrink)) {
    query['FilterParams'] = request.filterParamsShrink;
  }
  if (!Util.isUnset(request.orderItem)) {
    query['OrderItem'] = request.orderItem;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListGatewayService',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listGatewayService(request: ListGatewayServiceRequest): ListGatewayServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return listGatewayServiceWithOptions(request, runtime);
}

model ListGatewaySlbRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-1cef5440bf2d484db419fb264d4f****'),
}

model ListGatewaySlbResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: [ 
    {
      editEnable?: boolean(name='EditEnable', description='Indicates whether the edit operation is supported.', example='false'),
      gatewayId?: string(name='GatewayId', description='The ID of the gateway.', example='1'),
      gatewaySlbMode?: string(name='GatewaySlbMode', description='The service source.', example='UserSelect'),
      gatewaySlbStatus?: string(name='GatewaySlbStatus', description='The association status.', example='Ready'),
      gmtCreate?: string(name='GmtCreate', description='The creation time.', example='2022-01-14 14:39:16'),
      httpPort?: int32(name='HttpPort', description='The port number of the HTTP virtual service group.', example='80'),
      httpsPort?: int32(name='HttpsPort', description='The port number of the HTTPS virtual service group.', example='443'),
      httpsVServerGroupId?: string(name='HttpsVServerGroupId', description='The ID of the HTTPS virtual service group.', example='353'),
      id?: string(name='Id', description='ID', example='ID'),
      serviceWeight?: int32(name='ServiceWeight', description='The service weight.', example='80'),
      slbId?: string(name='SlbId', description='SLB ID', example='lb-bp1kmnli3hdpreptw2ah3'),
      slbIp?: string(name='SlbIp', description='SLB IP', example='121.199.XX.XX'),
      slbPort?: string(name='SlbPort', description='The port number of the SLB instance.', example='80,443'),
      statusDesc?: string(name='StatusDesc', description='The description of the status.', example='Associating'),
      type?: string(name='Type', description='The type.', example='PUB_NET'),
      VServerGroupId?: string(name='VServerGroupId', description='The ID of the HTTP virtual service group.', example='353'),
    }
  ](name='Data', description='The data entries returned.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EAB345F4-3AC3-560C-B653-65717703****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model ListGatewaySlbResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListGatewaySlbResponseBody(name='body'),
}

async function listGatewaySlbWithOptions(request: ListGatewaySlbRequest, runtime: Util.RuntimeOptions): ListGatewaySlbResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListGatewaySlb',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listGatewaySlb(request: ListGatewaySlbRequest): ListGatewaySlbResponse {
  var runtime = new Util.RuntimeOptions{};
  return listGatewaySlbWithOptions(request, runtime);
}

model ListInstanceCountRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  clusterType?: string(name='ClusterType', description='The type of the instance. Valid values: ZooKeeper and Nacos-Ans.', example='Nacos-Ans'),
  mseVersion?: string(name='MseVersion', description='The edition type of the instance. Valid values:

*   `mse_dev`: Developer Edition
*   `mse_pro`: Professional Edition', example='mse_pro'),
  regionId?: string(name='RegionId', description='The ID of the region where the instance resides. Examples:

*   cn-hangzhou: China (Hangzhou)
*   cn-beijing: China (Beijing)
*   cn-shanghai: China (Shanghai)
*   cn-zhangjiakou: China (Zhangjiakou)
*   cn-shenzhen: China (Shenzhen)', example='cn-hangzhou'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}'),
}

model ListInstanceCountResponseBody = {
  code?: int32(name='Code', description='The status code. A value of 200 is returned if the request is successful.', example='200'),
  data?: [ int32 ](name='Data', description='The data entries returned.'),
  dynamicCode?: string(name='DynamicCode', description='The dynamic part in the error message.', example='%s'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the \\*\\*%s\\*\\* variable in the **ErrMessage** parameter.

> If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed. If the request failed, the ErrorCode parameter is returned. For more information, see the "Error codes" section of this topic.', example='mse-100-100'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned. If the request is successful, a success message is returned. If the request fails, an error message is returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model ListInstanceCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstanceCountResponseBody(name='body'),
}

async function listInstanceCountWithOptions(request: ListInstanceCountRequest, runtime: Util.RuntimeOptions): ListInstanceCountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterType)) {
    query['ClusterType'] = request.clusterType;
  }
  if (!Util.isUnset(request.mseVersion)) {
    query['MseVersion'] = request.mseVersion;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.requestPars)) {
    query['RequestPars'] = request.requestPars;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListInstanceCount',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listInstanceCount(request: ListInstanceCountRequest): ListInstanceCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstanceCountWithOptions(request, runtime);
}

model ListListenersByConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  dataId?: string(name='DataId', description='The ID of the data.', example='zeekr-clueboss.yml'),
  group?: string(name='Group', description='The group.', example='prod'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-m7r1yurp00e'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='aaeb4d28-c9eb-4fa2-85f5-d03ce7ee8df1'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{\\\\"appGroup\\\\":\\\\"emas-zfive_prehost\\\\",\\\\"appName\\\\":\\\\"emas-zfive\\\\",\\\\"appStage\\\\":\\\\"PRE_PUBLISH\\\\",\\\\"appUnit\\\\":\\\\"\\\\",\\\\"bucId\\\\":\\\\"225902\\\\",\\\\"bucName\\\\":\\\\"Wireless\\\\",\\\\"provider\\\\":\\\\"aliyun\\\\"}'),
}

model ListListenersByConfigResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code returned.', example='202'),
  listeners?: [ 
    {
      ip?: string(name='Ip', description='IP.', example='1.1.1.1'),
      md5?: string(name='Md5', description='The verification string.', example='23sdfdf'),
      status?: string(name='Status', description='The status.', example='beta'),
    }
  ](name='Listeners', description='The information about listeners.'),
  message?: string(name='Message', description='The response message.', example='success'),
  pageNumber?: int32(name='PageNumber', description='The number of the returned page.', example='2'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='75E1442F-11EC-567A-9CF0-5A36F7904F39'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The call was successful.
*   `false`: The request failed.', example='true'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='7'),
}

model ListListenersByConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListListenersByConfigResponseBody(name='body'),
}

/**
  * > The operation is not provided in Nacos SDKs. For information about Nacos SDKs, see the [official documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
  * @param request ListListenersByConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListListenersByConfigResponse
 */
async function listListenersByConfigWithOptions(request: ListListenersByConfigRequest, runtime: Util.RuntimeOptions): ListListenersByConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.dataId)) {
    query['DataId'] = request.dataId;
  }
  if (!Util.isUnset(request.group)) {
    query['Group'] = request.group;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.namespaceId)) {
    query['NamespaceId'] = request.namespaceId;
  }
  if (!Util.isUnset(request.requestPars)) {
    query['RequestPars'] = request.requestPars;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListListenersByConfig',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > The operation is not provided in Nacos SDKs. For information about Nacos SDKs, see the [official documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
  * @param request ListListenersByConfigRequest
  * @return ListListenersByConfigResponse
 */
async function listListenersByConfig(request: ListListenersByConfigRequest): ListListenersByConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return listListenersByConfigWithOptions(request, runtime);
}

model ListListenersByIpRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse_prepaid_public_cn-i7m2cecji09'),
  ip?: string(name='Ip', description='The IP address of the listener.', example='172.22.0.240'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='ea02a522-9482-4255-bb65-dc0636d783f2'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}'),
}

model ListListenersByIpResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='MSE-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code returned.', example='202'),
  listeners?: [ 
    {
      dataId?: string(name='DataId', description='The ID of the data.', example='test.yaml'),
      group?: string(name='Group', description='The group.', example='default'),
      md5?: string(name='Md5', description='The verification string.', example='23sdfdf'),
    }
  ](name='Listeners', description='The information about listeners.'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='54973C90-F379-4372-9AA5-053A3F7****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='True'),
  totalCount?: int32(name='TotalCount', description='The total number of instances.', example='6'),
}

model ListListenersByIpResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListListenersByIpResponseBody(name='body'),
}

/**
  * > The operation is not provided in Nacos SDKs. For information about Nacos SDKs, see the [official documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
  * @param request ListListenersByIpRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListListenersByIpResponse
 */
async function listListenersByIpWithOptions(request: ListListenersByIpRequest, runtime: Util.RuntimeOptions): ListListenersByIpResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ip)) {
    query['Ip'] = request.ip;
  }
  if (!Util.isUnset(request.namespaceId)) {
    query['NamespaceId'] = request.namespaceId;
  }
  if (!Util.isUnset(request.requestPars)) {
    query['RequestPars'] = request.requestPars;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListListenersByIp',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > The operation is not provided in Nacos SDKs. For information about Nacos SDKs, see the [official documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
  * @param request ListListenersByIpRequest
  * @return ListListenersByIpResponse
 */
async function listListenersByIp(request: ListListenersByIpRequest): ListListenersByIpResponse {
  var runtime = new Util.RuntimeOptions{};
  return listListenersByIpWithOptions(request, runtime);
}

model ListNacosConfigsRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  appName?: string(name='AppName', description='The name of the application.', example='fpx-pds-pns'),
  dataId?: string(name='DataId', description='The ID of the configuration.', example='zeekr-*'),
  group?: string(name='Group', description='The name of the group. Default value: `default`.', example='crm'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-7mz2fj****'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='fad732a7-ff1a-4f21-8126-4edd4****'),
  pageNum?: int32(name='PageNum', description='The number of the page to return.', example='5'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='200'),
  regionId?: string(name='RegionId', description='The ID of the region in which the cluster resides.', example='cn-hangzhou'),
  requestPars?: string(name='RequestPars', description='The extended request parameters. The JSON format is supported.', example='{\\"appGroup\\":\\"sm_zk_asi_na610\\",\\"appName\\":\\"sm-zk\\",\\"appStage\\":\\"PUBLISH\\",\\"appUnit\\":\\"center\\",\\"bucId\\":\\"193554\\",\\"bucName\\":\\"Alibaba Mobile Business Group-UC\\",\\"provider\\":\\"aliyun\\"}'),
  tags?: string(name='Tags', description='The tags of the configuration.', example='billing'),
}

model ListNacosConfigsResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  configurations?: [ 
    {
      appName?: string(name='AppName', description='The name of the application.', example='test'),
      dataId?: string(name='DataId', description='The ID of the configuration.', example='log.yaml'),
      group?: string(name='Group', description='The ID of the group.', example='public'),
      id?: string(name='Id', description='The ID of the application.', example='132****'),
    }
  ](name='Configurations', description='The information about configurations.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is processed successfully.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4081087F-3429-5873-A1E7-D4B5479D0B84'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='12'),
}

model ListNacosConfigsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListNacosConfigsResponseBody(name='body'),
}

/**
  * > The current API operation is not provided in Nacos SDK. For information about Nacos SDK, see the [official Nacos documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
  * @param request ListNacosConfigsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListNacosConfigsResponse
 */
async function listNacosConfigsWithOptions(request: ListNacosConfigsRequest, runtime: Util.RuntimeOptions): ListNacosConfigsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.dataId)) {
    query['DataId'] = request.dataId;
  }
  if (!Util.isUnset(request.group)) {
    query['Group'] = request.group;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.namespaceId)) {
    query['NamespaceId'] = request.namespaceId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.requestPars)) {
    query['RequestPars'] = request.requestPars;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListNacosConfigs',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > The current API operation is not provided in Nacos SDK. For information about Nacos SDK, see the [official Nacos documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
  * @param request ListNacosConfigsRequest
  * @return ListNacosConfigsResponse
 */
async function listNacosConfigs(request: ListNacosConfigsRequest): ListNacosConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNacosConfigsWithOptions(request, runtime);
}

model ListNacosHistoryConfigsRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  dataId?: string(name='DataId', description='The ID of the configuration.', example='user-prod.yaml'),
  group?: string(name='Group', description='The name of the group.', example='fc-dev-cluster-1'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-2r42e3bk20n'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='fc0f6e40-****-946b-45e3af313707'),
  pageNum?: int32(name='PageNum', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10'),
  regionId?: string(name='RegionId', description='The ID of the region in which the cluster resides.', example='cn-hangzhou'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{\\"appGroup\\":\\"aliyun-phecda-service-staging\\",\\"appName\\":\\"aliyun-phecda-service\\",\\"appStage\\":\\"DAILY\\",\\"appUnit\\":\\"center\\",\\"bucId\\":\\"250858\\",\\"bucName\\":\\"Alibaba Cloud\\",\\"provider\\":\\"aliyun\\"}'),
}

model ListNacosHistoryConfigsResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='mse-100-000'),
  historyItems?: [ 
    {
      appName?: string(name='AppName', description='The name of the application.', example='gateway'),
      dataId?: string(name='DataId', description='The ID of the configuration.', example='test.yaml'),
      group?: string(name='Group', description='The name of the group.', example='default'),
      id?: long(name='Id', description='The ID of the configuration.', example='23fdsf'),
      lastModifiedTime?: long(name='LastModifiedTime', description='The timestamp when the configuration was last modified.', example='16434400'),
      opType?: string(name='OpType', description='The type of the configuration.', example='yaml'),
    }
  ](name='HistoryItems', description='The information about configurations.'),
  httpCode?: string(name='HttpCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is processed successfully.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='53338ECA-F880-54D8-A9B3-5606355A1B89'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='7'),
}

model ListNacosHistoryConfigsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListNacosHistoryConfigsResponseBody(name='body'),
}

/**
  * > The current API operation is not provided in Nacos SDK. For information about Nacos SDK, see the [official Nacos documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
  * @param request ListNacosHistoryConfigsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListNacosHistoryConfigsResponse
 */
async function listNacosHistoryConfigsWithOptions(request: ListNacosHistoryConfigsRequest, runtime: Util.RuntimeOptions): ListNacosHistoryConfigsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.dataId)) {
    query['DataId'] = request.dataId;
  }
  if (!Util.isUnset(request.group)) {
    query['Group'] = request.group;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.namespaceId)) {
    query['NamespaceId'] = request.namespaceId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.requestPars)) {
    query['RequestPars'] = request.requestPars;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListNacosHistoryConfigs',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > The current API operation is not provided in Nacos SDK. For information about Nacos SDK, see the [official Nacos documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
  * @param request ListNacosHistoryConfigsRequest
  * @return ListNacosHistoryConfigsResponse
 */
async function listNacosHistoryConfigs(request: ListNacosHistoryConfigsRequest): ListNacosHistoryConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNacosHistoryConfigsWithOptions(request, runtime);
}

model ListSSLCertRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-3f97e2989c344f35ab3fd62b19f1****'),
}

model ListSSLCertResponseBody = {
  code?: int32(name='Code', description='The status code returned. A value of 200 indicates that the request is successful.', example='200'),
  data?: [ 
    {
      afterDate?: string(name='AfterDate', description='The effective time of the certificate.', example='2021-04-01 02:35:12'),
      algorithm?: string(name='Algorithm', description='The algorithm of the certificate.', example='test'),
      beforeDate?: string(name='BeforeDate', description='The expiration time of the certificate.', example='2031-03-30 02:35:12'),
      certIdentifier?: string(name='CertIdentifier', description='The ID of the certificate.', example='1234'),
      certName?: string(name='CertName', description='The name of the certificate.', example='test.com'),
      commonName?: string(name='CommonName', description='The domain name with which the certificate is associated.', example='*.test.com'),
      gmtAfter?: string(name='GmtAfter', description='The effective time of the certificate.', example='2021-04-01 02:35:12'),
      gmtBefore?: string(name='GmtBefore', description='The expiration time of the certificate.', example='2031-03-30 02:35:12'),
      issuer?: string(name='Issuer', description='The issuer of the certificate.', example='test'),
      sans?: string(name='Sans', description='The SSL certificate.', example='SSL'),
    }
  ](name='Data', description='The returned data.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message returned if the request fails.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CAA9A229-141D-5FBA-AC5C-516C02026A11'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model ListSSLCertResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSSLCertResponseBody(name='body'),
}

async function listSSLCertWithOptions(request: ListSSLCertRequest, runtime: Util.RuntimeOptions): ListSSLCertResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSSLCert',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSSLCert(request: ListSSLCertRequest): ListSSLCertResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSSLCertWithOptions(request, runtime);
}

model ListSecurityGroupRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The ID of the gateway.', example='gw-e98e40675aaf49bda082137d158e1585'),
}

model ListSecurityGroupResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: [ 
    {
      securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group.', example='sg-8vb8gsmrqyc35k645rk6'),
      securityGroupName?: string(name='SecurityGroupName', description='The name of the security group.', example='sg2'),
      securityGroupType?: string(name='SecurityGroupType', description='The type of the security group. Valid values:

- normal: basic security group 
- enterprise: advanced security group For more information, see [Overview](~~120621~~).', example='enterprise'),
      vpcId?: string(name='VpcId', description='VPC ID.', example='vpc-bp1b'),
    }
  ](name='Data', description='The data structure.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model ListSecurityGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSecurityGroupResponseBody(name='body'),
}

async function listSecurityGroupWithOptions(request: ListSecurityGroupRequest, runtime: Util.RuntimeOptions): ListSecurityGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSecurityGroup',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSecurityGroup(request: ListSecurityGroupRequest): ListSecurityGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSecurityGroupWithOptions(request, runtime);
}

model ListSecurityGroupRuleRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-83b0ddb569434f82b9fe8e4c60c40f7c'),
}

model ListSecurityGroupRuleResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: [ 
    {
      description?: string(name='Description', description='The description of the rule.', example='Test'),
      gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='81'),
      gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-12a432a1f5da423997d8880bd32c304d'),
      gmtCreate?: string(name='GmtCreate', description='The time when the security group rule was created.', example='2022-01-07T10:07:57.000+0000'),
      gmtModified?: string(name='GmtModified', description='The time when the security group rule was last modified.', example='2022-01-07T10:07:57.000+0000'),
      id?: string(name='Id', description='ID.', example='21'),
      ipProtocol?: string(name='IpProtocol', description='The type of the protocol.', example='tcp'),
      portRange?: string(name='PortRange', description='The range of ports.', example='8000/8000'),
      securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group.', example='sg-bp1cg6qlyjepj0y6cf2c'),
    }
  ](name='Data', description='The returned results.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='9EC7BDBF-3C38-5C9C-95DD-61E298CD43E8'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model ListSecurityGroupRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSecurityGroupRuleResponseBody(name='body'),
}

async function listSecurityGroupRuleWithOptions(request: ListSecurityGroupRuleRequest, runtime: Util.RuntimeOptions): ListSecurityGroupRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSecurityGroupRule',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSecurityGroupRule(request: ListSecurityGroupRuleRequest): ListSecurityGroupRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSecurityGroupRuleWithOptions(request, runtime);
}

model ListServiceSourceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The data structure.', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-c51a15c7ee934a4fb945ccf35fe1****'),
}

model ListServiceSourceResponseBody = {
  code?: int32(name='Code', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='200'),
  data?: [ 
    {
      address?: string(name='Address', description='The type of the service source.', example='***'),
      bindingWithGateway?: int32(name='BindingWithGateway', description='The ID of the gateway.', example='1'),
      gatewayId?: long(name='GatewayId', description='The time when the service source was added.', example='1'),
      gatewayUniqueId?: string(name='GatewayUniqueId'),
      gmtCreate?: string(name='GmtCreate', description='The time when the service source was last modified.', example='2022-01-07 18:07:57'),
      gmtModified?: string(name='GmtModified', description='The unique ID of the service source.', example='2022-01-07 18:07:57'),
      groupList?: [ string ](name='GroupList'),
      id?: long(name='Id', description='The name of the service source.', example='1'),
      ingressOptions?: {
        enableIngress?: boolean(name='EnableIngress', description='Alibaba Cloud provides SDKs for multiple programming languages to help you integrate Alibaba Cloud products and services by using APIs. We recommend that you use an SDK to call API operations. This frees you from manual signature verification.', example='true'),
        enableStatus?: boolean(name='EnableStatus'),
        ingressClass?: string(name='IngressClass', description='ingress class', example='com.test.xxx'),
        watchNamespace?: string(name='WatchNamespace', description='Alibaba Cloud CLI allows you to search for API operations, call and debug API operations online, and dynamically generate executable sample code for SDKs.', example='default'),
      }(name='IngressOptions', description='Programming language'),
      name?: string(name='Name', description='The ID of the Container Service for Kubernetes (ACK) cluster, or the endpoint of the Microservices Engine (MSE) Nacos registry.', example='test'),
      pathList?: [ string ](name='PathList'),
      source?: string(name='Source', description='Indicates whether the service source is associated with the gateway.', example='MSE'),
      sourceUniqueId?: string(name='SourceUniqueId', description='Query service sources', example='mse-cn-***'),
      type?: string(name='Type', description='The source of the service source.', example='NACOS'),
    }
  ](name='Data', description='The data structure.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The error message returned if the request fails.', example='200'),
  message?: string(name='Message', description='The status code returned.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='The HTTP status code returned.', example='B8C4B0D8-EBB9-5F20-8295-04224FBE5529'),
  success?: boolean(name='Success', description='The returned results.', example='true'),
}

model ListServiceSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListServiceSourceResponseBody(name='body'),
}

async function listServiceSourceWithOptions(request: ListServiceSourceRequest, runtime: Util.RuntimeOptions): ListServiceSourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListServiceSource',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listServiceSource(request: ListServiceSourceRequest): ListServiceSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return listServiceSourceWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  nextToken?: string(name='NextToken', description='The token that is required for the next query.', example='AAAAAV3MpHK1AP0pfERHZN5pu6kywps2Ezza3n8HAAzCCqsi'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId', description='The resource IDs. You can specify a maximum of 50 resource IDs.'),
  resourceType?: string(name='ResourceType', description='The type of the resources. Valid values:

*   CLUSTER: MSE instance
*   GATEWAY: cloud-native gateway', example='CLUSTER'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of a tag.', example='env'),
      value?: string(name='Value', description='The value of a tag.', example='prd'),
    }
  ](name='Tag', description='The list of tags. You can specify a maximum of 20 tags.'),
}

model ListTagResourcesResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='mse-100-000'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  nextToken?: string(name='NextToken', description='The token that is required for the next query. If the NextToken parameter is empty, no subsequent query is required.', example='AAAAAV3MpHK1AP0pfERHZN5pu6ng3BeUyo2zbY5wgL1DBa2T'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='92ED7C9C-84A2-595F-87FE-354F84C0F739'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId', description='The ID of a resource.', example='mse-cn-7pp2st29t16'),
      resourceType?: string(name='ResourceType', description='The type of a resource.', example='cluster'),
      tagKey?: string(name='TagKey', description='The key of a tag.', example='env'),
      tagValue?: string(name='TagValue', description='The value of a tag.', example='prd'),
    }
  ](name='TagResource')
  }(name='TagResources', description='The list of resources.'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagResources',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ListZkTrackRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  endTs?: long(name='EndTs', example='1669619383'),
  instanceId?: string(name='InstanceId', example='mse-cn-0ju2yq****'),
  pageNum?: long(name='PageNum', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  path?: string(name='Path', example='/path'),
  requestPars?: string(name='RequestPars', description='RequestPars。'),
  reverse?: boolean(name='Reverse', example='false'),
  sessionId?: string(name='SessionId', description='SessionId。', example='0x301fdfbdbf00***'),
  startTs?: long(name='StartTs', example='1669618483'),
}

model ListZkTrackResponseBody = {
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpCode?: string(name='HttpCode', example='200'),
  message?: string(name='Message', example='ok'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='DC34E4A3-5F1C-4E40-86EA-02EDF967****'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='20'),
  traces?: [ 
    {
      acl?: string(name='Acl', description='ACL。', example='world:anyone:cdrwa'),
      dataType?: string(name='DataType', example='persist'),
      eventType?: string(name='EventType', example='NodeCreated'),
      finished?: boolean(name='Finished', example='true'),
      logDate?: string(name='LogDate', example='2022-11-28 15:09:15,606'),
      multiSize?: long(name='MultiSize', example='3'),
      opType?: string(name='OpType', example='Create'),
      path?: string(name='Path', example='/path'),
      result?: string(name='Result', example='success'),
      sessionId?: string(name='SessionId', description='SessionId。', example='0x301fdfbdbf00***'),
      timestamp?: string(name='Timestamp', example='1669619383000'),
      traceType?: string(name='TraceType', example='Push'),
      ttl?: long(name='Ttl', description='TTL。', example='0'),
      watch?: boolean(name='Watch', example='true'),
    }
  ](name='Traces'),
}

model ListZkTrackResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListZkTrackResponseBody(name='body'),
}

async function listZkTrackWithOptions(request: ListZkTrackRequest, runtime: Util.RuntimeOptions): ListZkTrackResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListZkTrack',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listZkTrack(request: ListZkTrackRequest): ListZkTrackResponse {
  var runtime = new Util.RuntimeOptions{};
  return listZkTrackWithOptions(request, runtime);
}

model ListZnodeChildrenRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='mse-09k1q11****'),
  path?: string(name='Path', description='The path of the node.', example='/zookeeper'),
}

model ListZnodeChildrenResponseBody = {
  data?: [ 
    {
      data?: string(name='Data', description='The data of the node.', example='cluster'),
      dir?: boolean(name='Dir', description='Indicates whether the node directory information is returned. Valid values:
- `true`: The information is returned. 
- `false`: The information fails to be returned.', example='true'),
      name?: string(name='Name', description='The name of the node.', example='mse-bc1a29b0-160230875****-reg-center-0-1'),
      path?: string(name='Path', description='The path of the node.', example='/zookeeper'),
    }
  ](name='Data', description='The details of the data.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='mse-100-000'),
  message?: string(name='Message', description='The message returned.', example='The request is processed successfully.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BDB6CE0B-9CAF-41B5-9FEA-E08BE8E2****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model ListZnodeChildrenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListZnodeChildrenResponseBody(name='body'),
}

async function listZnodeChildrenWithOptions(request: ListZnodeChildrenRequest, runtime: Util.RuntimeOptions): ListZnodeChildrenResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListZnodeChildren',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listZnodeChildren(request: ListZnodeChildrenRequest): ListZnodeChildrenResponse {
  var runtime = new Util.RuntimeOptions{};
  return listZnodeChildrenWithOptions(request, runtime);
}

model ModifyGovernanceKubernetesClusterRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='cd23228b3c80c4d4f9ad87cc3****'),
  namespaceInfos?: string(name='NamespaceInfos', description='The information about the namespaces of the cluster.', example='[{"Name":"default","Tags":{"mse-enable":"disabled","kubernetes.io/metadata.name":"default"}},{"Name":"test2","Tags":{"test2":"test2","kubernetes.io/metadata.name":"test2"}}]'),
  regionId?: string(name='RegionId', description='The region in which the cluster resides.', example='cn-hangzhou'),
}

model ModifyGovernanceKubernetesClusterResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: boolean(name='Data', description='The details of the data.', example='True'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is processed successfully.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F9849E97-2455-54B0-A3B4-3F6E4E9FFEB1'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

- `true`: The request is successful. 
- `false`: The request fails.', example='True'),
}

model ModifyGovernanceKubernetesClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyGovernanceKubernetesClusterResponseBody(name='body'),
}

async function modifyGovernanceKubernetesClusterWithOptions(request: ModifyGovernanceKubernetesClusterRequest, runtime: Util.RuntimeOptions): ModifyGovernanceKubernetesClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.namespaceInfos)) {
    query['NamespaceInfos'] = request.namespaceInfos;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyGovernanceKubernetesCluster',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyGovernanceKubernetesCluster(request: ModifyGovernanceKubernetesClusterRequest): ModifyGovernanceKubernetesClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyGovernanceKubernetesClusterWithOptions(request, runtime);
}

model ModifyLosslessRuleRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  aligned?: boolean(name='Aligned', description='Specifies whether to align the lifecycle of the application in the Kubernetes cluster with that of the microservice.', example='true'),
  appId?: string(name='AppId', description='The ID of the application.', example='c644n5frmc@3e75f25fd4*****'),
  appName?: string(name='AppName', description='The name of the application.', example='wx-work-api'),
  delayTime?: long(name='DelayTime', description='The registration latency.', example='1'),
  enable?: boolean(name='Enable', description='Specifies whether to enable the alert rule. Valid values:

*   `true`: enables the rule.
*   `false`: disables the rule.', example='false'),
  funcType?: long(name='FuncType', description='The slope of the prefetching curve.', example='1'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-beijing'),
  related?: boolean(name='Related', description='Specifies whether to associate readiness probe with service prefetching.', example='true'),
  shutdownWaitSeconds?: int32(name='ShutdownWaitSeconds', description='The cooldown duration. Unit: seconds.', example='0'),
  source?: string(name='Source', description='The service source. Valid values:', example='edasmsc'),
  warmupTime?: long(name='WarmupTime', description='The prefetching duration.', example='60'),
}

model ModifyLosslessRuleResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='modifyLosslessRule success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3369AD10-F1A6-4E6F-B99E-20F51826****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model ModifyLosslessRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyLosslessRuleResponseBody(name='body'),
}

async function modifyLosslessRuleWithOptions(request: ModifyLosslessRuleRequest, runtime: Util.RuntimeOptions): ModifyLosslessRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.aligned)) {
    query['Aligned'] = request.aligned;
  }
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.delayTime)) {
    query['DelayTime'] = request.delayTime;
  }
  if (!Util.isUnset(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!Util.isUnset(request.funcType)) {
    query['FuncType'] = request.funcType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.related)) {
    query['Related'] = request.related;
  }
  if (!Util.isUnset(request.shutdownWaitSeconds)) {
    query['ShutdownWaitSeconds'] = request.shutdownWaitSeconds;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.warmupTime)) {
    query['WarmupTime'] = request.warmupTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyLosslessRule',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyLosslessRule(request: ModifyLosslessRuleRequest): ModifyLosslessRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyLosslessRuleWithOptions(request, runtime);
}

model OfflineGatewayRouteRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-77e1153db6e14c0a8b1fae20bcb89ca5'),
  routeId?: string(name='RouteId', description='The ID of the route.', example='645'),
}

model OfflineGatewayRouteResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: boolean(name='Data', description='Indicates whether the route is unpublished.', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8EB24742-AB15-5953-BEFB-1FA18E770EEE'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model OfflineGatewayRouteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OfflineGatewayRouteResponseBody(name='body'),
}

async function offlineGatewayRouteWithOptions(request: OfflineGatewayRouteRequest, runtime: Util.RuntimeOptions): OfflineGatewayRouteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.routeId)) {
    query['RouteId'] = request.routeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OfflineGatewayRoute',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function offlineGatewayRoute(request: OfflineGatewayRouteRequest): OfflineGatewayRouteResponse {
  var runtime = new Util.RuntimeOptions{};
  return offlineGatewayRouteWithOptions(request, runtime);
}

model PullServicesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-eccf313e2224438ba53d95d039e5****'),
  namespace?: string(name='Namespace', description='The namespace.', example='public'),
  sourceType?: string(name='SourceType', description='The type of the service source.', example='K8s'),
}

model PullServicesResponseBody = {
  code?: int32(name='Code', description='The response code returned.', example='200'),
  data?: [ 
    {
      groupName?: string(name='GroupName', description='The group.', example='test'),
      namespace?: string(name='Namespace', description='The namespace.', example='default'),
      namespaceShowName?: string(name='NamespaceShowName', description='The alias of the namespace.', example='public'),
      services?: [ 
        {
          groupName?: string(name='GroupName', description='The group.', example='test'),
          name?: string(name='Name', description='The name of the service.', example='test'),
          namespace?: string(name='Namespace', description='The namespace.', example='public'),
          sourceId?: string(name='SourceId', description='The ID of the service source.', example='1'),
          sourceType?: string(name='SourceType', description='The type of the service source.', example='MSE'),
        }
      ](name='Services', description='The information about services.'),
    }
  ](name='Data', description='The data entries returned.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='You are not authorized to perform this operation. Action: mse:PullServices, Resource: acs:mse:cn-shenzhen:1228932054837788:*'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EC0A99B9-8BA3-5FE3-8FE7-D7C719CF7BD2'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model PullServicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PullServicesResponseBody(name='body'),
}

async function pullServicesWithOptions(request: PullServicesRequest, runtime: Util.RuntimeOptions): PullServicesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PullServices',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pullServices(request: PullServicesRequest): PullServicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return pullServicesWithOptions(request, runtime);
}

model QueryAllSwimmingLaneRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  groupId?: long(name='GroupId', description='The ID of the lane group.', example='186'),
}

model QueryAllSwimmingLaneResponseBody = {
  code?: int32(name='Code', description='The status code. A value of 200 is returned if the request is successful.', example='200'),
  data?: any(name='Data', description='The details of the data.', example='[{id:100,name:"test"}]'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is processed successfully.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DC34E4A3-5F1C-4E40-86EA-02EDF967****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model QueryAllSwimmingLaneResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryAllSwimmingLaneResponseBody(name='body'),
}

async function queryAllSwimmingLaneWithOptions(request: QueryAllSwimmingLaneRequest, runtime: Util.RuntimeOptions): QueryAllSwimmingLaneResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryAllSwimmingLane',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAllSwimmingLane(request: QueryAllSwimmingLaneRequest): QueryAllSwimmingLaneResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAllSwimmingLaneWithOptions(request, runtime);
}

model QueryAllSwimmingLaneGroupRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
}

model QueryAllSwimmingLaneGroupResponseBody = {
  code?: int32(name='Code', description='The status code. A value of 200 is returned if the request is successful.', example='200'),
  data?: any(name='Data', description='The details of the data.', example='[{id:100,name:"test"}]'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned. Valid values: 

- If the request is successful, a success message is returned. 
- If the request fails, an error message is returned.', example='The request is processed successfully.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='54973C90-F379-4372-9AA5-053A3F7****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model QueryAllSwimmingLaneGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryAllSwimmingLaneGroupResponseBody(name='body'),
}

async function queryAllSwimmingLaneGroupWithOptions(request: QueryAllSwimmingLaneGroupRequest, runtime: Util.RuntimeOptions): QueryAllSwimmingLaneGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryAllSwimmingLaneGroup',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAllSwimmingLaneGroup(request: QueryAllSwimmingLaneGroupRequest): QueryAllSwimmingLaneGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAllSwimmingLaneGroupWithOptions(request, runtime);
}

model QueryBusinessLocationsRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
}

model QueryBusinessLocationsResponseBody = {
  data?: [ 
    {
      cnName?: string(name='CnName', description='The Chinese name of the region.', example='China (Shanghai)'),
      description?: string(name='Description', description='The description of the region.', example='China (Shanghai)'),
      districtCnName?: string(name='DistrictCnName', description='The Chinese name of the district.', example='Asia Pacific'),
      districtEnName?: string(name='DistrictEnName', description='The English name of the district.', example='Asia Pacific'),
      districtId?: string(name='DistrictId', description='The ID of the district.', example='asia-pacific'),
      districtOrdering?: int32(name='DistrictOrdering', description='The ordering information of the district.', example='101'),
      districtShowName?: string(name='DistrictShowName', description='The display name of the district.', example='Asia Pacific'),
      enDescription?: string(name='EnDescription', description='The complete description of the region.', example='China East 2 (Shanghai)'),
      enName?: string(name='EnName', description='The English name of the region.', example='China (Shanghai)'),
      name?: string(name='Name', description='The ID of the region.', example='cn-shanghai'),
      ordering?: int32(name='Ordering', description='The ordering information.', example='6'),
      showName?: string(name='ShowName', description='The display name of the region.', example='China (Shanghai)'),
      type?: string(name='Type', description='The type of the data.', example='region'),
    }
  ](name='Data', description='The details of the data.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='mse-100-000'),
  message?: string(name='Message', description='The message returned.', example='The specified parameter is invalid.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3369AD10-F1A6-4E6F-B99E-20F51826****'),
  success?: string(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model QueryBusinessLocationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryBusinessLocationsResponseBody(name='body'),
}

async function queryBusinessLocationsWithOptions(request: QueryBusinessLocationsRequest, runtime: Util.RuntimeOptions): QueryBusinessLocationsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryBusinessLocations',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryBusinessLocations(request: QueryBusinessLocationsRequest): QueryBusinessLocationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryBusinessLocationsWithOptions(request, runtime);
}

model QueryClusterDetailRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  aclSwitch?: boolean(name='AclSwitch', example='false'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-st21ri2****'),
  orderId?: string(name='OrderId', description='The ID of the order.', example='20576750143****'),
}

model QueryClusterDetailResponseBody = {
  data?: {
    aclEntryList?: string(name='AclEntryList', description='The whitelist of the cluster.', example='[]'),
    aclId?: string(name='AclId', description='The ID of the whitelist.', example='acl-bp17020kiqvzutwwj****'),
    appVersion?: string(name='AppVersion', description='The version of the application.', example='1.2.1'),
    chargeType?: string(name='ChargeType', description='The billing method, such as subscription or pay-as-you-go.', example='POSTPAY'),
    clusterAliasName?: string(name='ClusterAliasName', description='The alias of the cluster.', example='mse-7413****'),
    clusterName?: string(name='ClusterName', description='The name of the cluster.', example='mse-bc1a29b0-160230875****'),
    clusterSpecification?: string(name='ClusterSpecification', description='The specifications of the engine.', example='MSE_SC_1_2_200_c'),
    clusterType?: string(name='ClusterType', description='The type of the cluster. Valid values: ZooKeeper, Nacos-Ans, and Eureka.', example='Nacos-Ans'),
    clusterVersion?: string(name='ClusterVersion', description='The version of the cluster.', example='1.2.1'),
    connectionType?: string(name='ConnectionType', description='The connection type. Valid values:

- slb
- eni', example='slb'),
    cpu?: int32(name='Cpu', description='The number of CPUs.', example='1'),
    createTime?: string(name='CreateTime', description='The time when the cluster was created.', example='2020-07-31 11:36:08'),
    diskCapacity?: long(name='DiskCapacity', description='The capacity of the disk. Unit: GB.', example='60'),
    diskType?: string(name='DiskType', description='The type of the disk.', example='alicloud-disk-ssd-multi-zone'),
    healthStatus?: string(name='HealthStatus', description='The health status of the cluster.', example='RESTART_SUCCESS'),
    initCostTime?: long(name='InitCostTime', description='The amount of time taken to create the cluster. Unit: milliseconds.', example='98408'),
    initStatus?: string(name='InitStatus', description='The creation status of the cluster.', example='RESTART_SUCCESS'),
    instanceCount?: int32(name='InstanceCount', description='The number of nodes.', example='3'),
    instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-st21ri2****'),
    instanceModels?: [ 
      {
        creationTimestamp?: string(name='CreationTimestamp', description='The timestamp when the node was created.', example='1578575377732'),
        healthStatus?: string(name='HealthStatus', description='The health status of the node.', example='Running'),
        internetIp?: string(name='InternetIp', description='The public IP address.', example='47.98.XX.XX'),
        ip?: string(name='Ip', description='The IP address of the node.', example='10.12.XX.XX'),
        podName?: string(name='PodName', description='The name of the pod.', example='mse-7413****-159616656****-reg-center-0-0'),
        role?: string(name='Role', description='The role of the node.', example='Peer'),
        singleTunnelVip?: string(name='SingleTunnelVip', description='The single-thread IP address.', example='192.168.XX.XX'),
        zone?: string(name='Zone', example='cn-shanghai-f'),
      }
    ](name='InstanceModels', description='The information about nodes.'),
    internetAddress?: string(name='InternetAddress', description='The public IP address.', example='47.98.XX.XX'),
    internetDomain?: string(name='InternetDomain', description='The public domain name.', example='mse-7413****-p.eureka.mse.aliyuncs.com'),
    internetPort?: string(name='InternetPort', description='The private port.', example='8761'),
    intranetAddress?: string(name='IntranetAddress', description='The private IP address.', example='192.168.XX.XX'),
    intranetDomain?: string(name='IntranetDomain', description='The private domain name.', example='mse-7413****-eureka.mse.aliyuncs.com'),
    intranetPort?: string(name='IntranetPort', description='The private port.', example='8761'),
    memoryCapacity?: long(name='MemoryCapacity', description='The size of the memory. Unit: GB.', example='2'),
    mseVersion?: string(name='MseVersion', description='The version category of the cluster.', example='mse_basic'),
    netType?: string(name='NetType', description='The network type of the cluster. Valid values:

- `privatenet`: private network 
- `pubnet`: the Internet', example='privatenet'),
    orderClusterVersion?: string(name='OrderClusterVersion', example='1.2.0'),
    payInfo?: string(name='PayInfo', description='The billing method, such as subscription or pay-as-you-go.', example='POSTPAY'),
    pubNetworkFlow?: string(name='PubNetworkFlow', description='The public bandwidth. Unit: Mbit/s.    
Valid values: 0 to 5000. A value of 0 indicates no access to the Internet.', example='3'),
    regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
    resourceGroupId?: string(name='ResourceGroupId', example='rg-aek2dhgysj*****'),
    tags?: map[string]any(name='Tags'),
    vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-xxx-xxxx'),
    vpcId?: string(name='VpcId', description='VPC ID.', example='vpc-bp1hcg467ekqsv0zr****'),
  }(name='Data', description='The details of the data.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='mse-100-000'),
  message?: string(name='Message', description='The message returned.', example='The request is processed successfully.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9515ACA4-E94D-440D-989E-C379FCED****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model QueryClusterDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryClusterDetailResponseBody(name='body'),
}

async function queryClusterDetailWithOptions(request: QueryClusterDetailRequest, runtime: Util.RuntimeOptions): QueryClusterDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.aclSwitch)) {
    query['AclSwitch'] = request.aclSwitch;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryClusterDetail',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryClusterDetail(request: QueryClusterDetailRequest): QueryClusterDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryClusterDetailWithOptions(request, runtime);
}

model QueryClusterDiskSpecificationRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  clusterType?: string(name='ClusterType', description='The type of the cluster. Valid values: ZooKeeper, Nacos-Ans, and Eureka.', example='ZooKeeper'),
}

model QueryClusterDiskSpecificationResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: {
    max?: int32(name='Max', description='The maximum capacity of the disk.', example='500'),
    min?: int32(name='Min', description='The minimum capacity of the disk.', example='1'),
    step?: int32(name='Step', description='The step size of the disk capacity.', example='2'),
  }(name='Data', description='The details of the data.'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **Message** parameter. 
> If the specified **InstanceId** parameter is invalid, **The Value of Input Parameter %s is not valid** is returned for **Message** and **InstanceId** is returned for **DynamicMessage**.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is processed successfully.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E13A3A34-7201-50C4-B2D0-0D7DB891811E'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='True'),
}

model QueryClusterDiskSpecificationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryClusterDiskSpecificationResponseBody(name='body'),
}

async function queryClusterDiskSpecificationWithOptions(request: QueryClusterDiskSpecificationRequest, runtime: Util.RuntimeOptions): QueryClusterDiskSpecificationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterType)) {
    query['ClusterType'] = request.clusterType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryClusterDiskSpecification',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryClusterDiskSpecification(request: QueryClusterDiskSpecificationRequest): QueryClusterDiskSpecificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryClusterDiskSpecificationWithOptions(request, runtime);
}

model QueryClusterSpecificationRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  connectType?: string(name='ConnectType', description='The network type. Valid values:

*   slb
*   eni', example='slb'),
  mseVersion?: string(name='MseVersion', description='The edition of the Microservices Engine (MSE) instance that you want to purchase.

*   mse_pro: Professional Edition
*   mse_dev: Developer Edition', example='mse_pro'),
}

model QueryClusterSpecificationResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: [ 
    {
      clusterSpecificationName?: string(name='ClusterSpecificationName', description='The engine specifications that can be used.', example='MSE_SC_1_2_200_c'),
      cpuCapacity?: string(name='CpuCapacity', description='The number of vCPUs in the specifications.', example='1'),
      memoryCapacity?: string(name='MemoryCapacity', description='The memory size in the specifications. Unit: GB.', example='2'),
    }
  ](name='Data', description='The details of the data.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EE5C32A1-BC0E-4B79-817C-103E4EDF****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model QueryClusterSpecificationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryClusterSpecificationResponseBody(name='body'),
}

async function queryClusterSpecificationWithOptions(request: QueryClusterSpecificationRequest, runtime: Util.RuntimeOptions): QueryClusterSpecificationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.connectType)) {
    query['ConnectType'] = request.connectType;
  }
  if (!Util.isUnset(request.mseVersion)) {
    query['MseVersion'] = request.mseVersion;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryClusterSpecification',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryClusterSpecification(request: QueryClusterSpecificationRequest): QueryClusterSpecificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryClusterSpecificationWithOptions(request, runtime);
}

model QueryConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='mse-09k1q11****'),
  configType?: string(name='ConfigType', description='The format of the configuration. Supported formats include TEXT, JSON, XML, and HTML.', example='TEXT'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse_prepaid_public_cn-st2212****'),
  needRunningConf?: boolean(name='NeedRunningConf'),
  requestPars?: string(name='RequestPars', description='The extended request parameter in the JSON format.', example='{}'),
}

model QueryConfigResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: {
    autopurgePurgeInterval?: string(name='AutopurgePurgeInterval', description='A reserved parameter.', example='none'),
    autopurgeSnapRetainCount?: string(name='AutopurgeSnapRetainCount', description='A reserved parameter.', example='none'),
    clusterName?: string(name='ClusterName', description='The name of the cluster.', example='name'),
    configAuthEnabled?: boolean(name='ConfigAuthEnabled', description='Indicates whether RAM authentication of a configuration center is enabled. This parameter is valid for Nacos instances. Valid values:

*   `true`: enabled
*   `false`: disabled', example='true'),
    configAuthSupported?: boolean(name='ConfigAuthSupported', description='Indicates whether RAM authentication is supported by a configuration center of the instance. This parameter is valid for Nacos instances. Valid values:

*   `true`: supported
*   `false`: not supported', example='true'),
    configContentLimit?: long(name='ConfigContentLimit'),
    configSecretEnabled?: boolean(name='ConfigSecretEnabled', description='Indicates whether configuration encryption of a configuration center is enabled by the instance. This parameter is valid for Nacos instances. Valid values:

*   `true`: enabled
*   `false`: disabled', example='true'),
    configSecretSupported?: boolean(name='ConfigSecretSupported', description='Indicates whether configuration encryption of a configuration center is supported by the instance. This parameter is valid for Nacos instances. Valid values:

*   `true`: supported
*   `false`: not supported', example='true'),
    initLimit?: string(name='InitLimit', description='The maximum connection duration of the instance. This parameter is valid for ZooKeeper instances. Unit: seconds.', example='100'),
    juteMaxbuffer?: string(name='JuteMaxbuffer', description='The maximum amount of data on each node. This parameter is valid for ZooKeeper instances. Unit: bytes.', example='1'),
    jvmFlagsCustom?: string(name='JvmFlagsCustom', description='A reserved parameter.', example='none'),
    MCPEnabled?: boolean(name='MCPEnabled', description='Indicates whether Mesh Configuration Protocol (MCP) is enabled. This parameter is valid for Nacos instances. Valid values:

*   `true`: enabled
*   `false`: disabled', example='true'),
    MCPSupported?: boolean(name='MCPSupported', description='Indicates whether MCP is supported. This parameter is valid for Nacos instances. Valid values:

*   `true`: supported
*   `false`: not supported', example='true'),
    maxClientCnxns?: string(name='MaxClientCnxns', description='The number of connections between a client and a server. This parameter is valid for ZooKeeper instances.\\
If this parameter is set to 0, no limits are imposed on the number of connections.', example='0'),
    maxSessionTimeout?: string(name='MaxSessionTimeout', description='The maximum timeout period. This parameter is valid for ZooKeeper instances.', example='-1'),
    minSessionTimeout?: string(name='MinSessionTimeout', description='The minimum timeout period. This parameter is valid for ZooKeeper instances.', example='-1'),
    nacosRunningEnv?: {
      emptyProtect?: boolean(name='emptyProtect'),
    }(name='NacosRunningEnv'),
    namingAuthEnabled?: boolean(name='NamingAuthEnabled', description='Indicates whether RAM authentication of a registry is enabled. This parameter is valid for Nacos instances. Valid values:

*   `true`: enabled
*   `false`: disabled', example='false'),
    namingAuthSupported?: boolean(name='NamingAuthSupported', description='Indicates whether RAM authentication of services is supported by the instance. This parameter is valid for Nacos instances. Valid values:

*   `true`: supported
*   `false`: not supported', example='true'),
    namingCreateServiceSupported?: boolean(name='NamingCreateServiceSupported', description='Indicates whether service creation is supported for the instance. This parameter is valid for Nacos instances. Valid values:

*   `true`: supported
*   `false`: not supported', example='true'),
    openSuperAcl?: boolean(name='OpenSuperAcl', description='Indicates whether super permissions are enabled. This parameter is valid for ZooKeeper instances. Valid values:

*   `true`: enabled
*   `false`: disabled', example='true'),
    passWord?: string(name='PassWord', description='The password of the user. This parameter is valid only if OpenSuperAcl is set to true.', example='password'),
    restartFlag?: boolean(name='RestartFlag', description='Indicates whether the instance was restarted and new configurations have taken effect. Valid values:

*   `true`: The restart was successful.
*   `false`: The restart failed.', example='true'),
    snapshotCount?: string(name='SnapshotCount', description='The frequency for generating snapshots. This parameter is valid for ZooKeeper instances.', example='100000'),
    syncLimit?: string(name='SyncLimit', description='The connection timeout period of the instance. This parameter is valid for ZooKeeper instances. Unit: seconds.', example='10'),
    tickTime?: string(name='TickTime', description='The time unit of the engine. This parameter is valid for ZooKeeper instances. Default value: 2000. Unit: milliseconds.', example='2000'),
    userName?: string(name='UserName', description='The username of the user. This parameter is valid only if OpenSuperAcl is set to true.', example='name'),
  }(name='Data', description='The details of the data.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8BD1E58D-0755-42AC-A599-E6B55112EC53'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model QueryConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryConfigResponseBody(name='body'),
}

async function queryConfigWithOptions(request: QueryConfigRequest, runtime: Util.RuntimeOptions): QueryConfigResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryConfig',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryConfig(request: QueryConfigRequest): QueryConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryConfigWithOptions(request, runtime);
}

model QueryGatewayRegionRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
}

model QueryGatewayRegionResponseBody = {
  code?: int32(name='Code', description='The request is processed successfully.', example='200'),
  data?: [ string ](name='Data', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The ID of the request.', example='200'),
  message?: string(name='Message', description='The HTTP status code returned.', example='The message returned.'),
  requestId?: string(name='RequestId', description='The data structure.', example='9e78a671-4b9b-4dd4-99c1-0b9da87d3dec'),
  success?: boolean(name='Success', description='The status code returned.', example='true'),
}

model QueryGatewayRegionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryGatewayRegionResponseBody(name='body'),
}

async function queryGatewayRegionWithOptions(request: QueryGatewayRegionRequest, runtime: Util.RuntimeOptions): QueryGatewayRegionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryGatewayRegion',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryGatewayRegion(request: QueryGatewayRegionRequest): QueryGatewayRegionResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryGatewayRegionWithOptions(request, runtime);
}

model QueryGatewayTypeRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
}

model QueryGatewayTypeResponseBody = {
  code?: int32(name='Code', description='The status code returned. A value of 200 indicates that the request is successful. Other values indicate that the request fails.', example='200'),
  data?: [ string ](name='Data', description='The information about gateway types.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned. If the request is successful, a success message is returned. If the request fails, an error message is returned.', example='The request is processed successfully.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='52BA6DA6-A702-4362-A32F-DFF79655****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model QueryGatewayTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryGatewayTypeResponseBody(name='body'),
}

async function queryGatewayTypeWithOptions(request: QueryGatewayTypeRequest, runtime: Util.RuntimeOptions): QueryGatewayTypeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryGatewayType',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryGatewayType(request: QueryGatewayTypeRequest): QueryGatewayTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryGatewayTypeWithOptions(request, runtime);
}

model QueryGovernanceKubernetesClusterRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  clusterId?: string(name='ClusterId', description='The ID of the Kubernetes cluster.', example='c24c9354acxxxxxxx'),
  clusterName?: string(name='ClusterName', description='The name of the Kubernetes cluster.', example='example-cluster'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10'),
}

model QueryGovernanceKubernetesClusterResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: {
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    result?: [ 
      {
        clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='abcdef123456789'),
        clusterName?: string(name='ClusterName', description='The name of the cluster.', example='example-cluster'),
        k8sVersion?: string(name='K8sVersion', description='The version of the cluster.', example='1.22'),
        namespaceInfos?: string(name='NamespaceInfos', description='The information of the namespace.', example='[{"Name":"ack-onepilot","Tags":{"name":"ack-onepilot"}}]'),
        pilotStartTime?: string(name='PilotStartTime', description='The time when the ack-one-pilot component was started.', example='2022-05-17T05:39:43.000+0000'),
        region?: string(name='Region', description='Region', example='cn-shanghai'),
      }
    ](name='Result'),
    totalSize?: int32(name='TotalSize', description='The number of clusters.', example='3'),
  }(name='Data', description='The data returned.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='HttpCode', example='200'),
  message?: string(name='Message', description='Message', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DE34D413-2B79-5E77-9696-36D875E822AD'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model QueryGovernanceKubernetesClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryGovernanceKubernetesClusterResponseBody(name='body'),
}

async function queryGovernanceKubernetesClusterWithOptions(request: QueryGovernanceKubernetesClusterRequest, runtime: Util.RuntimeOptions): QueryGovernanceKubernetesClusterResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryGovernanceKubernetesCluster',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryGovernanceKubernetesCluster(request: QueryGovernanceKubernetesClusterRequest): QueryGovernanceKubernetesClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryGovernanceKubernetesClusterWithOptions(request, runtime);
}

model QueryMonitorRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  endTime?: long(name='EndTime', description='The timestamp when the monitoring ends.', example='1666678376'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-****'),
  monitorType?: string(name='MonitorType', description='The metric type. The following metrics are supported:

\\[Basic system metrics]

*   cpuUsage
*   memoryUsage
*   diskUsage
*   gcCount
*   gcTime

\\[Nacos registry]

*   serviceCount
*   writeCostTime
*   readCostTime
*   regCenterTps
*   regCenterQps

\\[Nacos configuration center]

*   publish
*   getConfig

\\[Zookeeper]

*   zk_TpsCount
*   zk_QpsCount
*   zookeeper_AvgRequestLatency', example='regCenterQps'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}'),
  startTime?: long(name='StartTime', description='The timestamp when the monitoring starts.', example='1666678376'),
  step?: long(name='Step', description='The interval between data points. Unit: seconds.', example='7'),
}

model QueryMonitorResponseBody = {
  data?: [ 
    {
      clusterNamePrefix?: string(name='clusterNamePrefix', description='The prefix of the name.', example='mse-xxxx-xxxxxx'),
      podName?: string(name='podName', description='The name of the pod.', example='mse-xxxxxx-xxxxxx-reg-center-0-0'),
      values?: [  map[string]any ](name='values', description='The details of the data.'),
    }
  ](name='Data', description='The details of the data.', example='6'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='mse-100-000'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ADDD8AB7-8D1C-4697-A83E-410D2607****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model QueryMonitorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryMonitorResponseBody(name='body'),
}

async function queryMonitorWithOptions(request: QueryMonitorRequest, runtime: Util.RuntimeOptions): QueryMonitorResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryMonitor',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryMonitor(request: QueryMonitorRequest): QueryMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryMonitorWithOptions(request, runtime);
}

model QuerySlbSpecRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
}

model QuerySlbSpecResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: [ 
    {
      id?: int32(name='Id', description='The ID of the returned data.', example='2'),
      maxConnection?: string(name='MaxConnection', description='The maximum number of connections.', example='50,000'),
      name?: string(name='Name', description='The name of the instance type.', example='Standard I'),
      newConnectionPerSecond?: string(name='NewConnectionPerSecond', description='The maximum connections per second (CPS).', example='50,000'),
      qps?: string(name='Qps', description='The maximum queries per second (QPS).', example='50,000'),
      spec?: string(name='Spec', description='The instance type of the SLB instance.', example='slb.s2.small'),
    }
  ](name='Data', description='The returned data.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned. If the request is successful, a success message is returned. If the request fails, an error message is returned.', example='The request is processed successfully.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model QuerySlbSpecResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySlbSpecResponseBody(name='body'),
}

async function querySlbSpecWithOptions(request: QuerySlbSpecRequest, runtime: Util.RuntimeOptions): QuerySlbSpecResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySlbSpec',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySlbSpec(request: QuerySlbSpecRequest): QuerySlbSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySlbSpecWithOptions(request, runtime);
}

model QuerySwimmingLaneByIdRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  laneId?: long(name='LaneId', description='The ID of the lane.', example='250'),
}

model QuerySwimmingLaneByIdResponseBody = {
  code?: int32(name='Code', description='The status code. A value of 200 is returned if the request is successful.', example='200'),
  data?: any(name='Data', description='The details of the data.', example='{id:102,name:"test"}'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is processed successfully.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='69AD2AA7-DB47-449B-941B-B14409DF****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model QuerySwimmingLaneByIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySwimmingLaneByIdResponseBody(name='body'),
}

async function querySwimmingLaneByIdWithOptions(request: QuerySwimmingLaneByIdRequest, runtime: Util.RuntimeOptions): QuerySwimmingLaneByIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.laneId)) {
    query['LaneId'] = request.laneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySwimmingLaneById',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySwimmingLaneById(request: QuerySwimmingLaneByIdRequest): QuerySwimmingLaneByIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySwimmingLaneByIdWithOptions(request, runtime);
}

model QueryZnodeDetailRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='mse-09k1q11****'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-5bffa4e8630'),
  path?: string(name='Path', description='The path of the node.', example='/zookeeper'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}'),
}

model QueryZnodeDetailResponseBody = {
  data?: {
    data?: string(name='Data', description='The data of the node.', example='cluster'),
    dir?: boolean(name='Dir', description='Indicates whether the node directory information is returned. Valid values:
- `true`: The information is returned. 
- `false`: The information fails to be returned.', example='true'),
    name?: string(name='Name', description='The name of the node.', example='zookeeper'),
    path?: string(name='Path', description='The path of the node.', example='/zookeeper'),
  }(name='Data', description='The details of the data.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='mse-100-000'),
  message?: string(name='Message', description='The message returned.', example='The request is processed successfully.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='58E06A0A-BD2C-47A0-99C2-B100F353****'),
  success?: string(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model QueryZnodeDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryZnodeDetailResponseBody(name='body'),
}

async function queryZnodeDetailWithOptions(request: QueryZnodeDetailRequest, runtime: Util.RuntimeOptions): QueryZnodeDetailResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryZnodeDetail',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryZnodeDetail(request: QueryZnodeDetailRequest): QueryZnodeDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryZnodeDetailWithOptions(request, runtime);
}

model RestartClusterRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='mse-09k1q11****'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-78v1l83****'),
  podNameList?: string(name='PodNameList', description='The name of the pod. You can specify the names of multiple pods at a time. Separate multiple pod names with commas (,).
Example: mse-a8aba010-1629719288255-reg-center-0-1,mse-a8aba010-1629719288255-reg-center-0-2.

The specified pods must belong to the current cluster and be associated with the specified instance. Otherwise, a restart exception occurs.', example='mse-a8aba010-1629719288255-reg-center-0-1'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}'),
}

model RestartClusterResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='mse-100-000'),
  message?: string(name='Message', description='The message returned.', example='The request is processed successfully.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5B170A0D-2C5D-4CF8-B808-03966B86****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model RestartClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RestartClusterResponseBody(name='body'),
}

async function restartClusterWithOptions(request: RestartClusterRequest, runtime: Util.RuntimeOptions): RestartClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.podNameList)) {
    query['PodNameList'] = request.podNameList;
  }
  if (!Util.isUnset(request.requestPars)) {
    query['RequestPars'] = request.requestPars;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RestartCluster',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function restartCluster(request: RestartClusterRequest): RestartClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return restartClusterWithOptions(request, runtime);
}

model RetryClusterRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-st21ri2****'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}'),
}

model RetryClusterResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='NoPermission'),
  message?: string(name='Message', description='The message returned.', example='The request is processed successfully.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DC34E4A3-5F1C-4E40-86EA-02EDF967****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

- `true`: The request is successful.                                 
- `false`: The request fails.', example='true'),
}

model RetryClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RetryClusterResponseBody(name='body'),
}

async function retryClusterWithOptions(request: RetryClusterRequest, runtime: Util.RuntimeOptions): RetryClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.requestPars)) {
    query['RequestPars'] = request.requestPars;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RetryCluster',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function retryCluster(request: RetryClusterRequest): RetryClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return retryClusterWithOptions(request, runtime);
}

model SelectGatewaySlbRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-492af9b04bb4474cae9d645be850****'),
  name?: string(name='Name', description='The name of the SLB instance.', example='test-slb'),
  type?: string(name='Type', description='The type of the SLB instance.', example='PUB_NET'),
}

model SelectGatewaySlbResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned.', example='200'),
  data?: [ 
    {
      slbId?: string(name='SlbId', description='SLB ID.', example='lb-bp14lqiw5n96hq2****'),
      slbName?: string(name='SlbName', description='The name of the SLB instance.', example='MseGatewaySlb-gw'),
    }
  ](name='Data', description='The data structure.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E00C6D90-A28A-5813-8981-0459AA436F46'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model SelectGatewaySlbResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SelectGatewaySlbResponseBody(name='body'),
}

async function selectGatewaySlbWithOptions(request: SelectGatewaySlbRequest, runtime: Util.RuntimeOptions): SelectGatewaySlbResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SelectGatewaySlb',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function selectGatewaySlb(request: SelectGatewaySlbRequest): SelectGatewaySlbResponse {
  var runtime = new Util.RuntimeOptions{};
  return selectGatewaySlbWithOptions(request, runtime);
}

model TagResourcesRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType', example='CLUSTER'),
  tag?: [ 
    {
      key?: string(name='Key', example='env'),
      value?: string(name='Value', example='prd'),
    }
  ](name='Tag'),
}

model TagResourcesResponseBody = {
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='E0A79810-9396-521C-A09D-E757B3E2BAF4'),
  success?: boolean(name='Success', example='true'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TagResources',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UntagResourcesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  all?: boolean(name='All', description='Specifies whether to delete all tags. This parameter takes effect only when the TagKey.N parameter is not specified. Valid values:

*   true
*   false

Default value: false.', example='true'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId', description='The resource IDs. A maximum of 50 resource IDs can be specified.'),
  resourceType?: string(name='ResourceType', description='The type of the resources. Valid values:

*   CLUSTER: MSE instance
*   GATEWAY: cloud-native gateway', example='CLUSTER'),
  tagKey?: [ string ](name='TagKey', description='The tag keys. A maximum of 20 tag keys are supported.'),
}

model UntagResourcesResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  message?: string(name='Message', description='The message returned.', example='The request was successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='58E06A0A-BD2C-47A0-99C2-B100F353****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.all)) {
    query['All'] = request.all;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UntagResources',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model UpdateAclRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  aclEntryList?: string(name='AclEntryList', description='The IP addresses in the whitelist.', example='192.168.0.0/XX,192.168.0.0/XX'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-78v1l83****'),
}

model UpdateAclResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='mse-100-100'),
  message?: string(name='Message', description='The message returned.', example='The request is processed successfully.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7466566F-F30F-4A29-965D-3E0AF21D****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model UpdateAclResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAclResponseBody(name='body'),
}

async function updateAclWithOptions(request: UpdateAclRequest, runtime: Util.RuntimeOptions): UpdateAclResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.aclEntryList)) {
    query['AclEntryList'] = request.aclEntryList;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAcl',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateAcl(request: UpdateAclRequest): UpdateAclResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAclWithOptions(request, runtime);
}

model UpdateBlackWhiteListRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  content?: string(name='Content', description='The content of the blacklist.', example='127.0.2.11'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-c70622ff52fe49beb29bea9a6f52****'),
  id?: long(name='Id', description='The ID of the blacklist.', example='1'),
  isWhite?: boolean(name='IsWhite', description='Specifies whether to modify the whitelist.', example='true'),
  name?: string(name='Name'),
  note?: string(name='Note'),
  resourceIdJsonList?: string(name='ResourceIdJsonList'),
  resourceType?: string(name='ResourceType', description='The type of the resource.', example='GATEWAY'),
  status?: string(name='Status', description='Specifies whether to enable the blacklist or whitelist.', example='on'),
  type?: string(name='Type', description='The type of the blacklist or whitelist.', example='IP'),
}

model UpdateBlackWhiteListResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: long(name='Data', description='The ID of the blacklist or whitelist.', example='13'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='AD5DEDA0-C82A-50D9-AF54-BD3576CCFB4C'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model UpdateBlackWhiteListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateBlackWhiteListResponseBody(name='body'),
}

async function updateBlackWhiteListWithOptions(request: UpdateBlackWhiteListRequest, runtime: Util.RuntimeOptions): UpdateBlackWhiteListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.isWhite)) {
    query['IsWhite'] = request.isWhite;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.note)) {
    query['Note'] = request.note;
  }
  if (!Util.isUnset(request.resourceIdJsonList)) {
    query['ResourceIdJsonList'] = request.resourceIdJsonList;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateBlackWhiteList',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateBlackWhiteList(request: UpdateBlackWhiteListRequest): UpdateBlackWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateBlackWhiteListWithOptions(request, runtime);
}

model UpdateClusterRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  clusterAliasName?: string(name='ClusterAliasName', description='The alias of the cluster.', example='cluster-1'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-78v1l83****'),
  requestPars?: string(name='RequestPars', description='The extended request parameter in the JSON format.', example='{}'),
}

model UpdateClusterResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='mse-100-100'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5B170A0D-2C5D-4CF8-B808-03966B86****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model UpdateClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateClusterResponseBody(name='body'),
}

async function updateClusterWithOptions(request: UpdateClusterRequest, runtime: Util.RuntimeOptions): UpdateClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterAliasName)) {
    query['ClusterAliasName'] = request.clusterAliasName;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.requestPars)) {
    query['RequestPars'] = request.requestPars;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateCluster',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateCluster(request: UpdateClusterRequest): UpdateClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateClusterWithOptions(request, runtime);
}

model UpdateClusterSpecRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='mse-09k1q11****'),
  clusterSpecification?: string(name='ClusterSpecification', description='The specifications of the engine.', example='MSE_SC_2_4_200_c'),
  instanceCount?: int32(name='InstanceCount', description='The number of nodes.', example='3'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-st21ri2****'),
}

model UpdateClusterSpecResponseBody = {
  code?: int32(name='Code', description='The response code returned.', example='200'),
  data?: string(name='Data', description='The data returned.', example='null'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='ID of the Request.', example='5B170A0D-2C5D-4CF8-B808-03966B86****'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   `true`: The call was successful.
*   `false`: The call failed.', example='true'),
}

model UpdateClusterSpecResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateClusterSpecResponseBody(name='body'),
}

/**
  * You can call this API operation to update the number of nodes or specifications of a pay-as-you-go MSE instance. You are charged for node addition or specifications upgrades of the instance. For more information about billing, see [Billing overview](~~139842~~)
  *
  * @param request UpdateClusterSpecRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateClusterSpecResponse
 */
async function updateClusterSpecWithOptions(request: UpdateClusterSpecRequest, runtime: Util.RuntimeOptions): UpdateClusterSpecResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.clusterSpecification)) {
    query['ClusterSpecification'] = request.clusterSpecification;
  }
  if (!Util.isUnset(request.instanceCount)) {
    query['InstanceCount'] = request.instanceCount;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateClusterSpec',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this API operation to update the number of nodes or specifications of a pay-as-you-go MSE instance. You are charged for node addition or specifications upgrades of the instance. For more information about billing, see [Billing overview](~~139842~~)
  *
  * @param request UpdateClusterSpecRequest
  * @return UpdateClusterSpecResponse
 */
async function updateClusterSpec(request: UpdateClusterSpecRequest): UpdateClusterSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateClusterSpecWithOptions(request, runtime);
}

model UpdateConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  autopurgePurgeInterval?: string(name='AutopurgePurgeInterval', description='A reserved parameter.', example='none'),
  autopurgeSnapRetainCount?: string(name='AutopurgeSnapRetainCount', description='A reserved parameter.', example='none'),
  clusterId?: string(name='ClusterId', description='The ID of the instance.', example='mse-09k1q11****'),
  configAuthEnabled?: boolean(name='ConfigAuthEnabled', description='Specifies whether to enable RAM authentication for a configuration center. This parameter is valid for Nacos instances. Valid values:

*   `true`: yes
*   `false`: no

> Before you set this parameter, you must call the QueryConfig operation to obtain the ConfigAuthSupported parameter value to check whether the instance supports this feature.', example='true'),
  configSecretEnabled?: boolean(name='ConfigSecretEnabled', description='Specifies whether to enable configuration encryption for a configuration center. This parameter is valid for Nacos instances. Valid values:

*   `true`: yes
*   `false`: no

> Before you set this parameter, you must call the QueryConfig operation to obtain the ConfigSecretSupported parameter value to check whether the instance supports this feature.', example='true'),
  configType?: string(name='ConfigType', description='The format of the configuration. Supported formats include TEXT, JSON, XML, and HTML.', example='TEXT'),
  initLimit?: string(name='InitLimit', description='The maximum connection duration of the instance. This parameter is valid for ZooKeeper instances. Unit: seconds.', example='100'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse_prepaid_public_cn-st2212****'),
  juteMaxbuffer?: string(name='JuteMaxbuffer', description='The maximum amount of data on each node. This parameter is valid for ZooKeeper instances. The default maximum data amount on each node is 1 megabyte. Unit: bytes.', example='1048575'),
  MCPEnabled?: boolean(name='MCPEnabled', description='Specifies whether to enable Mesh Configuration Protocol (MCP). This parameter is valid for Nacos instances. Valid values:

*   `true`: yes
*   `false`: no

> Before you set this parameter, you must call the QueryConfig operation to obtain the MCPSupported parameter value to check whether the instance supports this feature.', example='true'),
  maxClientCnxns?: string(name='MaxClientCnxns', description='The number of connections between a client and a server. This parameter is valid for ZooKeeper instances.\\
If this parameter is set to 0, no limits are imposed on the number of connections.', example='0'),
  maxSessionTimeout?: string(name='MaxSessionTimeout', description='The maximum timeout period. This parameter is valid for ZooKeeper instances. Unit: seconds.', example='1000'),
  minSessionTimeout?: string(name='MinSessionTimeout', description='The minimum timeout period. This parameter is valid for ZooKeeper instances. Unit: seconds.', example='10'),
  namingAuthEnabled?: boolean(name='NamingAuthEnabled', description='Specifies whether to enable RAM authentication for a registry. This parameter is valid for Nacos instances. Valid values:

*   `true`: yes
*   `false`: no

> Before you set this parameter, you must call the QueryConfig operation to obtain the NamingAuthSupported parameter value to check whether the instance supports this feature.', example='true'),
  openSuperAcl?: string(name='OpenSuperAcl', description='Specifies whether to enable super permissions. This parameter is valid for ZooKeeper instances. Valid values:

*   `true`: yes
*   `false`: no', example='true'),
  passWord?: string(name='PassWord', description='The password that corresponds to the username.

> You must specify this parameter if OpenSuperAcl is set to true.', example='password'),
  requestPars?: string(name='RequestPars', description='The extended request parameter in the JSON format.', example='{}'),
  snapshotCount?: string(name='SnapshotCount', description='The frequency for generating snapshots. This parameter is valid for ZooKeeper instances.', example='100000'),
  syncLimit?: string(name='SyncLimit', description='The connection timeout period of the instance. This parameter is valid for ZooKeeper instances. Unit: seconds.', example='10'),
  tickTime?: string(name='TickTime', description='The time unit. This parameter is valid for ZooKeeper instances. Default value: 2000. Unit: milliseconds.', example='2000'),
  userName?: string(name='UserName', description='The name of the user.

> You must specify this parameter if OpenSuperAcl is set to true.', example='name'),
}

model UpdateConfigResponseBody = {
  code?: int32(name='Code', description='The return code.', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8BD1E58D-0755-42AC-A599-E6B55112****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model UpdateConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateConfigResponseBody(name='body'),
}

async function updateConfigWithOptions(request: UpdateConfigRequest, runtime: Util.RuntimeOptions): UpdateConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.autopurgePurgeInterval)) {
    query['AutopurgePurgeInterval'] = request.autopurgePurgeInterval;
  }
  if (!Util.isUnset(request.autopurgeSnapRetainCount)) {
    query['AutopurgeSnapRetainCount'] = request.autopurgeSnapRetainCount;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.configAuthEnabled)) {
    query['ConfigAuthEnabled'] = request.configAuthEnabled;
  }
  if (!Util.isUnset(request.configSecretEnabled)) {
    query['ConfigSecretEnabled'] = request.configSecretEnabled;
  }
  if (!Util.isUnset(request.configType)) {
    query['ConfigType'] = request.configType;
  }
  if (!Util.isUnset(request.initLimit)) {
    query['InitLimit'] = request.initLimit;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.juteMaxbuffer)) {
    query['JuteMaxbuffer'] = request.juteMaxbuffer;
  }
  if (!Util.isUnset(request.MCPEnabled)) {
    query['MCPEnabled'] = request.MCPEnabled;
  }
  if (!Util.isUnset(request.maxClientCnxns)) {
    query['MaxClientCnxns'] = request.maxClientCnxns;
  }
  if (!Util.isUnset(request.maxSessionTimeout)) {
    query['MaxSessionTimeout'] = request.maxSessionTimeout;
  }
  if (!Util.isUnset(request.minSessionTimeout)) {
    query['MinSessionTimeout'] = request.minSessionTimeout;
  }
  if (!Util.isUnset(request.namingAuthEnabled)) {
    query['NamingAuthEnabled'] = request.namingAuthEnabled;
  }
  if (!Util.isUnset(request.passWord)) {
    query['PassWord'] = request.passWord;
  }
  if (!Util.isUnset(request.requestPars)) {
    query['RequestPars'] = request.requestPars;
  }
  if (!Util.isUnset(request.snapshotCount)) {
    query['SnapshotCount'] = request.snapshotCount;
  }
  if (!Util.isUnset(request.syncLimit)) {
    query['SyncLimit'] = request.syncLimit;
  }
  if (!Util.isUnset(request.tickTime)) {
    query['TickTime'] = request.tickTime;
  }
  if (!Util.isUnset(request.userName)) {
    query['UserName'] = request.userName;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.openSuperAcl)) {
    body['OpenSuperAcl'] = request.openSuperAcl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateConfig',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateConfig(request: UpdateConfigRequest): UpdateConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateConfigWithOptions(request, runtime);
}

model UpdateEngineNamespaceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='mse-09k1q11****'),
  desc?: string(name='Desc', description='The description of the cluster.', example='public'),
  id?: string(name='Id', description='The ID of the namespace.', example='33ff74b6-d21e-4f9b-91a8-bc1ea4ef****'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-st21ri2****'),
  name?: string(name='Name', description='The name of the cluster.', example='name'),
  serviceCount?: int32(name='ServiceCount', description='The number of active services.', example='3'),
}

model UpdateEngineNamespaceResponseBody = {
  data?: {
    configCount?: int32(name='ConfigCount', description='The number of configurations.', example='1'),
    namespace?: string(name='Namespace', description='The name of the namespace.', example='public'),
    namespaceDesc?: string(name='NamespaceDesc', description='The description of the namespace.', example='mytest'),
    namespaceShowName?: string(name='NamespaceShowName', description='The display name of the namespace.', example='mytestshowname'),
    quota?: int32(name='Quota', description='The quota of configurations.', example='1'),
    type?: int32(name='Type', description='The type of the namespace. Valid values:
- `0`: global configuration
- `1`: default namespace
- `2`: custom namespace', example='1'),
  }(name='Data', description='The details of the data.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='mse-100-000'),
  message?: string(name='Message', description='The message returned.', example='The request is processed successfully.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4E9FDCFE-0738-493B-B801-82BDFBCB****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model UpdateEngineNamespaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateEngineNamespaceResponseBody(name='body'),
}

async function updateEngineNamespaceWithOptions(request: UpdateEngineNamespaceRequest, runtime: Util.RuntimeOptions): UpdateEngineNamespaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.desc)) {
    query['Desc'] = request.desc;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.serviceCount)) {
    query['ServiceCount'] = request.serviceCount;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateEngineNamespace',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateEngineNamespace(request: UpdateEngineNamespaceRequest): UpdateEngineNamespaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateEngineNamespaceWithOptions(request, runtime);
}

model UpdateGatewayDomainRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  certIdentifier?: string(name='CertIdentifier', description='The ID of the certificate.', example='6209108-cn-hangzhou'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-86575c0bc9f04ecfbacb92b8e392****'),
  http2?: string(name='Http2', description='Specifies whether to enable `HTTP/2`.

*   `open`: enables `HTTP/2`
*   `close`: disables `HTTP/2`
*   `globalConfig`: uses global configurations', example='close'),
  id?: long(name='Id', description='The ID of the domain name.', example='94'),
  mustHttps?: boolean(name='MustHttps', description='Specifies whether to forcibly use HTTPS.', example='false'),
  protocol?: string(name='Protocol', description='The type of the protocol. Valid values:

*   HTTPS
*   HTTP', example='HTTPS'),
  tlsMax?: string(name='TlsMax', description='The maximum version of Transport Layer Security (TLS).', example='TLS 1.3'),
  tlsMin?: string(name='TlsMin', description='The minimum version of TLS.', example='TLS 1.0'),
}

model UpdateGatewayDomainResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='403'),
  data?: long(name='Data', description='The returned data.', example='94'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6F6C6DE4-DB33-5791-B210-ED2E6FEFFE6F'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model UpdateGatewayDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateGatewayDomainResponseBody(name='body'),
}

async function updateGatewayDomainWithOptions(request: UpdateGatewayDomainRequest, runtime: Util.RuntimeOptions): UpdateGatewayDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.certIdentifier)) {
    query['CertIdentifier'] = request.certIdentifier;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.http2)) {
    query['Http2'] = request.http2;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.mustHttps)) {
    query['MustHttps'] = request.mustHttps;
  }
  if (!Util.isUnset(request.protocol)) {
    query['Protocol'] = request.protocol;
  }
  if (!Util.isUnset(request.tlsMax)) {
    query['TlsMax'] = request.tlsMax;
  }
  if (!Util.isUnset(request.tlsMin)) {
    query['TlsMin'] = request.tlsMin;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateGatewayDomain',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateGatewayDomain(request: UpdateGatewayDomainRequest): UpdateGatewayDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGatewayDomainWithOptions(request, runtime);
}

model UpdateGatewayNameRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-1cef54brvecdb419fb264d4f9b8c'),
  name?: string(name='Name', description='The name of the gateway.', example='demo-test'),
}

model UpdateGatewayNameResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: string(name='Data', description='The returned data.', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned. Valid values: 

- If the request is successful, a success message is returned. 
- If the request fails, an error message is returned.', example='The request is processed successfully.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8C95711F-E702-5395-BFAA-21BA946CDE47'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model UpdateGatewayNameResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateGatewayNameResponseBody(name='body'),
}

async function updateGatewayNameWithOptions(request: UpdateGatewayNameRequest, runtime: Util.RuntimeOptions): UpdateGatewayNameResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateGatewayName',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateGatewayName(request: UpdateGatewayNameRequest): UpdateGatewayNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGatewayNameWithOptions(request, runtime);
}

model UpdateGatewayOptionRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='421'),
  gatewayOption?: GatewayOption(name='GatewayOption', description='The detailed configurations of the gateway.

*   **TraceDetails**: the sampling description of Tracing Analysis. Content: TraceEnabled specifies whether to activate Tracing Analysis. Sample specifies the sampling rate of Tracing Analysis.
*   **LogConfigDetails**: the description of Log Service. Content: LogEnabled specifies whether to activate Log Service. ProjectName specifies the Log Service project to which logs are delivered. LogStoreName specifies the name of the Logstore.
*   **EnableHardwareAcceleration**: specifies whether to enable hardware acceleration.
*   **DisableHttp2Alpn**: specifies whether to disable the HTTP/2 protocol.
*   **EnableWaf**: specifies whether to activate Web Application Firewall (WAF).'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-83b0ddb569434f82b9fe8e4c60c4****'),
}

model UpdateGatewayOptionShrinkRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='421'),
  gatewayOptionShrink?: string(name='GatewayOption', description='The detailed configurations of the gateway.

*   **TraceDetails**: the sampling description of Tracing Analysis. Content: TraceEnabled specifies whether to activate Tracing Analysis. Sample specifies the sampling rate of Tracing Analysis.
*   **LogConfigDetails**: the description of Log Service. Content: LogEnabled specifies whether to activate Log Service. ProjectName specifies the Log Service project to which logs are delivered. LogStoreName specifies the name of the Logstore.
*   **EnableHardwareAcceleration**: specifies whether to enable hardware acceleration.
*   **DisableHttp2Alpn**: specifies whether to disable the HTTP/2 protocol.
*   **EnableWaf**: specifies whether to activate Web Application Firewall (WAF).'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-83b0ddb569434f82b9fe8e4c60c4****'),
}

model UpdateGatewayOptionResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: GatewayOption(name='Data', description='The returned data.', example='{\\"LogConfigDetails\\": {\\"LogEnabled\\": True}, \\"TraceDetails\\": {\\"Sample\\": 17, \\"TraceEnabled\\": True}}'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.

*   If the request is successful, a success message is returned.
*   If the request fails, an error message is returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='124D02EB-DBDD-534D-A701-B4A95D3D****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model UpdateGatewayOptionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateGatewayOptionResponseBody(name='body'),
}

async function updateGatewayOptionWithOptions(tmpReq: UpdateGatewayOptionRequest, runtime: Util.RuntimeOptions): UpdateGatewayOptionResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateGatewayOptionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.gatewayOption)) {
    request.gatewayOptionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.gatewayOption, 'GatewayOption', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.gatewayOptionShrink)) {
    query['GatewayOption'] = request.gatewayOptionShrink;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateGatewayOption',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateGatewayOption(request: UpdateGatewayOptionRequest): UpdateGatewayOptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGatewayOptionWithOptions(request, runtime);
}

model UpdateGatewayRouteRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  destinationType?: string(name='DestinationType', description='The type of the destination service.', example='Mock'),
  directResponseJSON?: {
    body?: string(name='Body', description='The return value for service mocking.', example='hello'),
    code?: long(name='Code', description='The status code returned for service mocking.', example='200'),
  }(name='DirectResponseJSON', description='The information about service mocking.'),
  domainIdListJSON?: string(name='DomainIdListJSON', description='The IDs of domain names with which the route is associated.', example='[90]'),
  enableWaf?: boolean(name='EnableWaf'),
  fallback?: boolean(name='Fallback'),
  fallbackServices?: [ 
    {
      agreementType?: string(name='AgreementType'),
      groupName?: string(name='GroupName'),
      name?: string(name='Name'),
      namespace?: string(name='Namespace'),
      percent?: int32(name='Percent'),
      serviceId?: long(name='ServiceId'),
      servicePort?: int32(name='ServicePort'),
      sourceType?: string(name='SourceType'),
      version?: string(name='Version'),
    }
  ](name='FallbackServices'),
  gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='501'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-86575c0bc9f04ecfbacb92b8e392a2c4'),
  id?: long(name='Id', description='The ID of the route.', example='139'),
  name?: string(name='Name', description='The name of the route.', example='route-web'),
  predicates?: {
    headerPredicates?: [ 
      {
        key?: string(name='Key', description='The key of the request header.', example='debug'),
        type?: string(name='Type', description='The matching mode.', example='PRE'),
        value?: string(name='Value', description='The value of the request header.', example='on'),
      }
    ](name='HeaderPredicates', description='The information about header matching.'),
    methodPredicates?: [ string ](name='MethodPredicates', description='The information about method matching.'),
    pathPredicates?: {
      ignoreCase?: boolean(name='IgnoreCase', description='Specifies whether to perform case-insensitive matches.', example='true'),
      path?: string(name='Path', description='The path.', example='/test'),
      type?: string(name='Type', description='The matching mode.', example='PRE'),
    }(name='PathPredicates', description='The information about path matching.'),
    queryPredicates?: [ 
      {
        key?: string(name='Key', description='The name of the parameter.', example='userid'),
        type?: string(name='Type', description='The matching mode.', example='PRE'),
        value?: string(name='Value', description='The value of the parameter.', example='test'),
      }
    ](name='QueryPredicates', description='The information about URL parameter matching.'),
  }(name='Predicates', description='The matching rules of the route.'),
  redirectJSON?: {
    code?: int32(name='Code', description='The status code returned.', example='302'),
    host?: string(name='Host', description='The hostname to be redirected to.', example='test.com'),
    path?: string(name='Path', description='The path to be redirected to.', example='/test'),
  }(name='RedirectJSON', description='The configuration of the redirect action.'),
  routeOrder?: int32(name='RouteOrder', description='The sequence number of the route.', example='1'),
  services?: [ 
    {
      agreementType?: string(name='AgreementType'),
      groupName?: string(name='GroupName', description='The name of the group to which the service belongs.', example='test'),
      httpDubboTranscoder?: {
        dubboServiceGroup?: string(name='DubboServiceGroup'),
        dubboServiceName?: string(name='DubboServiceName'),
        dubboServiceVersion?: string(name='DubboServiceVersion'),
        mothedMapList?: [ 
          {
            dubboMothedName?: string(name='DubboMothedName'),
            httpMothed?: string(name='HttpMothed'),
            mothedpath?: string(name='Mothedpath'),
            paramMapsList?: [ 
              {
                extractKey?: string(name='ExtractKey'),
                extractKeySpec?: string(name='ExtractKeySpec'),
                mappingType?: string(name='MappingType'),
              }
            ](name='ParamMapsList'),
            passThroughAllHeaders?: string(name='PassThroughAllHeaders'),
            passThroughList?: [ string ](name='PassThroughList'),
          }
        ](name='MothedMapList'),
      }(name='HttpDubboTranscoder'),
      name?: string(name='Name', description='The name of the service.', example='web'),
      namespace?: string(name='Namespace', description='The namespace in which the service resides.', example='default'),
      percent?: int32(name='Percent', description='The weight in the form of a percentage value.', example='80'),
      serviceId?: long(name='ServiceId', description='The ID of the service.', example='1'),
      servicePort?: int32(name='ServicePort'),
      sourceType?: string(name='SourceType', description='The source type of the service.', example='MSE'),
      version?: string(name='Version', description='The version of the service.', example='v1'),
    }
  ](name='Services', description='The information about services.'),
}

model UpdateGatewayRouteShrinkRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  destinationType?: string(name='DestinationType', description='The type of the destination service.', example='Mock'),
  directResponseJSONShrink?: string(name='DirectResponseJSON', description='The information about service mocking.'),
  domainIdListJSON?: string(name='DomainIdListJSON', description='The IDs of domain names with which the route is associated.', example='[90]'),
  enableWaf?: boolean(name='EnableWaf'),
  fallback?: boolean(name='Fallback'),
  fallbackServicesShrink?: string(name='FallbackServices'),
  gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='501'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-86575c0bc9f04ecfbacb92b8e392a2c4'),
  id?: long(name='Id', description='The ID of the route.', example='139'),
  name?: string(name='Name', description='The name of the route.', example='route-web'),
  predicatesShrink?: string(name='Predicates', description='The matching rules of the route.'),
  redirectJSONShrink?: string(name='RedirectJSON', description='The configuration of the redirect action.'),
  routeOrder?: int32(name='RouteOrder', description='The sequence number of the route.', example='1'),
  servicesShrink?: string(name='Services', description='The information about services.'),
}

model UpdateGatewayRouteResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: long(name='Data', description='The returned data.', example='337'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is processed successfully.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='73785414-2C5B-5E28-BD91-B2C742269C48'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model UpdateGatewayRouteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateGatewayRouteResponseBody(name='body'),
}

async function updateGatewayRouteWithOptions(tmpReq: UpdateGatewayRouteRequest, runtime: Util.RuntimeOptions): UpdateGatewayRouteResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateGatewayRouteShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.directResponseJSON)) {
    request.directResponseJSONShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.directResponseJSON, 'DirectResponseJSON', 'json');
  }
  if (!Util.isUnset(tmpReq.fallbackServices)) {
    request.fallbackServicesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.fallbackServices, 'FallbackServices', 'json');
  }
  if (!Util.isUnset(tmpReq.predicates)) {
    request.predicatesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.predicates, 'Predicates', 'json');
  }
  if (!Util.isUnset(tmpReq.redirectJSON)) {
    request.redirectJSONShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.redirectJSON, 'RedirectJSON', 'json');
  }
  if (!Util.isUnset(tmpReq.services)) {
    request.servicesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.services, 'Services', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.destinationType)) {
    query['DestinationType'] = request.destinationType;
  }
  if (!Util.isUnset(request.directResponseJSONShrink)) {
    query['DirectResponseJSON'] = request.directResponseJSONShrink;
  }
  if (!Util.isUnset(request.domainIdListJSON)) {
    query['DomainIdListJSON'] = request.domainIdListJSON;
  }
  if (!Util.isUnset(request.enableWaf)) {
    query['EnableWaf'] = request.enableWaf;
  }
  if (!Util.isUnset(request.fallback)) {
    query['Fallback'] = request.fallback;
  }
  if (!Util.isUnset(request.fallbackServicesShrink)) {
    query['FallbackServices'] = request.fallbackServicesShrink;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.predicatesShrink)) {
    query['Predicates'] = request.predicatesShrink;
  }
  if (!Util.isUnset(request.redirectJSONShrink)) {
    query['RedirectJSON'] = request.redirectJSONShrink;
  }
  if (!Util.isUnset(request.routeOrder)) {
    query['RouteOrder'] = request.routeOrder;
  }
  if (!Util.isUnset(request.servicesShrink)) {
    query['Services'] = request.servicesShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateGatewayRoute',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateGatewayRoute(request: UpdateGatewayRouteRequest): UpdateGatewayRouteResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGatewayRouteWithOptions(request, runtime);
}

model UpdateGatewayRouteCORSRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. In compliance with [RFC 7231](https://tools.ietf.org/html/rfc7231), the backend service must return a response based on the language used by the user.
This parameter is empty by default. Valid values:
* zh-CN: Chinese
* en-US: English', example='zh'),
  corsJSON?: {
    allowCredentials?: boolean(name='AllowCredentials', description='The credentials allowed.', example='true'),
    allowHeaders?: string(name='AllowHeaders', description='The request headers allowed.', example='content-type'),
    allowMethods?: string(name='AllowMethods', description='The HTTP methods allowed.', example='GET,POST'),
    allowOrigins?: string(name='AllowOrigins', description='The origins from which access is allowed.', example='https://api.aliyun-inc.com/'),
    exposeHeaders?: string(name='ExposeHeaders', description='The response headers allowed.', example='*'),
    status?: string(name='Status', description='The status of the policy.', example='off'),
    timeUnit?: string(name='TimeUnit', description='The unit of time.', example='h'),
    unitNum?: long(name='UnitNum', description='The value of time.', example='24'),
  }(name='CorsJSON', description='The information about the CORS policy.'),
  gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='85'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-f70a6ddf2f0941a2bb997b2d16028f37'),
  id?: long(name='Id', description='The ID of the route.', example='55'),
}

model UpdateGatewayRouteCORSShrinkRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. In compliance with [RFC 7231](https://tools.ietf.org/html/rfc7231), the backend service must return a response based on the language used by the user.
This parameter is empty by default. Valid values:
* zh-CN: Chinese
* en-US: English', example='zh'),
  corsJSONShrink?: string(name='CorsJSON', description='The information about the CORS policy.'),
  gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='85'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-f70a6ddf2f0941a2bb997b2d16028f37'),
  id?: long(name='Id', description='The ID of the route.', example='55'),
}

model UpdateGatewayRouteCORSResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: long(name='Data', description='The data structure.', example='618'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='Id of the request', example='41BE990E-44E4-5ED3-AEEB-A276941B1854'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

- `true`: The request is successful.                                  
- `false`: The request fails.', example='true'),
}

model UpdateGatewayRouteCORSResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateGatewayRouteCORSResponseBody(name='body'),
}

async function updateGatewayRouteCORSWithOptions(tmpReq: UpdateGatewayRouteCORSRequest, runtime: Util.RuntimeOptions): UpdateGatewayRouteCORSResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateGatewayRouteCORSShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.corsJSON)) {
    request.corsJSONShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.corsJSON, 'CorsJSON', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.corsJSONShrink)) {
    query['CorsJSON'] = request.corsJSONShrink;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateGatewayRouteCORS',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateGatewayRouteCORS(request: UpdateGatewayRouteCORSRequest): UpdateGatewayRouteCORSResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGatewayRouteCORSWithOptions(request, runtime);
}

model UpdateGatewayRouteHTTPRewriteRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='430'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-90392d768a3847a7b804c505254da96d'),
  httpRewriteJSON?: string(name='HttpRewriteJSON', description='The information about the rewrite policy. The JSON format is supported.', example='{"HTTPRewrite":"{\\"pathType\\":\\"PRE\\",\\"path\\":\\"/\\",\\"status\\":\\"on\\"}"}'),
  id?: long(name='Id', description='The ID of the route.', example='238'),
}

model UpdateGatewayRouteHTTPRewriteResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: long(name='Data', description='The returned data.', example='411'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is processed successfully.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='AE60DA1E-B234-5105-897B-68372453A5A2'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model UpdateGatewayRouteHTTPRewriteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateGatewayRouteHTTPRewriteResponseBody(name='body'),
}

async function updateGatewayRouteHTTPRewriteWithOptions(request: UpdateGatewayRouteHTTPRewriteRequest, runtime: Util.RuntimeOptions): UpdateGatewayRouteHTTPRewriteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.httpRewriteJSON)) {
    query['HttpRewriteJSON'] = request.httpRewriteJSON;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateGatewayRouteHTTPRewrite',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateGatewayRouteHTTPRewrite(request: UpdateGatewayRouteHTTPRewriteRequest): UpdateGatewayRouteHTTPRewriteResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGatewayRouteHTTPRewriteWithOptions(request, runtime);
}

model UpdateGatewayRouteHeaderOpRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='324'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-6bdc977deda44bf589c49d063b4c2d1d'),
  headerOpJSON?: string(name='HeaderOpJSON', description='The information about the header configuration policy.', example='{\\"status\\":\\"on\\",\\"headerOpItems\\":[{\\"directionType\\":\\"Request\\",\\"opType\\":\\"Update\\",\\"key\\":\\"hosts\\",\\"value\\":\\"test.com\\"}]}'),
  id?: long(name='Id', description='The ID of the route.', example='411'),
}

model UpdateGatewayRouteHeaderOpResponseBody = {
  code?: int32(name='Code', description='The status code returned. A value of 200 indicates that the request is successful.', example='200'),
  data?: long(name='Data', description='The returned data.', example='666'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='Id of the request', example='7C8CB294-BED8-5F32-A416-7517725E8F27'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model UpdateGatewayRouteHeaderOpResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateGatewayRouteHeaderOpResponseBody(name='body'),
}

async function updateGatewayRouteHeaderOpWithOptions(request: UpdateGatewayRouteHeaderOpRequest, runtime: Util.RuntimeOptions): UpdateGatewayRouteHeaderOpResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.headerOpJSON)) {
    query['HeaderOpJSON'] = request.headerOpJSON;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateGatewayRouteHeaderOp',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateGatewayRouteHeaderOp(request: UpdateGatewayRouteHeaderOpRequest): UpdateGatewayRouteHeaderOpResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGatewayRouteHeaderOpWithOptions(request, runtime);
}

model UpdateGatewayRouteRetryRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='501'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-3f97e2989c344f35ab3fd62b19f1d10a'),
  id?: long(name='Id', description='The ID of the route.', example='508'),
  retryJSON?: {
    attempts?: int32(name='Attempts', description='The number of retries allowed.', example='2'),
    httpCodes?: [ string ](name='HttpCodes', description='The HTTP status codes returned.'),
    retryOn?: [ string ](name='RetryOn', description='The retry conditions.'),
    status?: string(name='Status', description='The status of the policy.', example='off'),
  }(name='RetryJSON', description='The information about the retry policy.'),
}

model UpdateGatewayRouteRetryShrinkRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='501'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-3f97e2989c344f35ab3fd62b19f1d10a'),
  id?: long(name='Id', description='The ID of the route.', example='508'),
  retryJSONShrink?: string(name='RetryJSON', description='The information about the retry policy.'),
}

model UpdateGatewayRouteRetryResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: long(name='Data', description='The returned data.', example='640'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='Id of the request', example='9297B27D-D932-5E9F-93B9-99D6C5F3A879'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model UpdateGatewayRouteRetryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateGatewayRouteRetryResponseBody(name='body'),
}

async function updateGatewayRouteRetryWithOptions(tmpReq: UpdateGatewayRouteRetryRequest, runtime: Util.RuntimeOptions): UpdateGatewayRouteRetryResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateGatewayRouteRetryShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.retryJSON)) {
    request.retryJSONShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.retryJSON, 'RetryJSON', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.retryJSONShrink)) {
    query['RetryJSON'] = request.retryJSONShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateGatewayRouteRetry',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateGatewayRouteRetry(request: UpdateGatewayRouteRetryRequest): UpdateGatewayRouteRetryResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGatewayRouteRetryWithOptions(request, runtime);
}

model UpdateGatewayRouteTimeoutRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='85'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-533290d279c1405f9628c64f7c8272ee'),
  id?: long(name='Id', description='The ID of the route.', example='567'),
  timeoutJSON?: {
    status?: string(name='Status', description='The status of the policy.', example='off'),
    timeUnit?: string(name='TimeUnit', description='The unit of time. A value of s indicates seconds.', example='s'),
    unitNum?: int32(name='UnitNum', description='The value of the timeout period.', example='1'),
  }(name='TimeoutJSON', description='The timeout period.'),
}

model UpdateGatewayRouteTimeoutShrinkRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='85'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-533290d279c1405f9628c64f7c8272ee'),
  id?: long(name='Id', description='The ID of the route.', example='567'),
  timeoutJSONShrink?: string(name='TimeoutJSON', description='The timeout period.'),
}

model UpdateGatewayRouteTimeoutResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: long(name='Data', description='The details of the data.', example='400'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='Id of the request', example='5359729E-A059-5942-98AF-E981E89C99FA'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. A value of true indicates that the request is successful. A value of false indicates that the request fails.', example='true'),
}

model UpdateGatewayRouteTimeoutResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateGatewayRouteTimeoutResponseBody(name='body'),
}

async function updateGatewayRouteTimeoutWithOptions(tmpReq: UpdateGatewayRouteTimeoutRequest, runtime: Util.RuntimeOptions): UpdateGatewayRouteTimeoutResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateGatewayRouteTimeoutShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.timeoutJSON)) {
    request.timeoutJSONShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.timeoutJSON, 'TimeoutJSON', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.timeoutJSONShrink)) {
    query['TimeoutJSON'] = request.timeoutJSONShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateGatewayRouteTimeout',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateGatewayRouteTimeout(request: UpdateGatewayRouteTimeoutRequest): UpdateGatewayRouteTimeoutResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGatewayRouteTimeoutWithOptions(request, runtime);
}

model UpdateGatewayRouteWafStatusRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  enableWaf?: boolean(name='EnableWaf', description='Specifies whether to enable Web Application Firewall (WAF).', example='true'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-86575c0bc9f04ecfbacb92b8e392****'),
  routeId?: long(name='RouteId', description='The ID of the route entry.', example='645'),
}

model UpdateGatewayRouteWafStatusResponseBody = {
  code?: int32(name='Code', description='The status code returned. A value of 200 indicates that the request is successful.', example='200'),
  data?: {
    cors?: {
      allowCredentials?: boolean(name='AllowCredentials', description='The credentials allowed.', example='true'),
      allowHeaders?: string(name='AllowHeaders', description='The headers allowed.', example='*'),
      allowMethods?: string(name='AllowMethods', description='The methods allowed.', example='GET,POST,PUT,DELETE,HEAD,OPTIONS,PATCH'),
      allowOrigins?: string(name='AllowOrigins', description='The origins allowed.', example='*'),
      exposeHeaders?: string(name='ExposeHeaders', description='The response headers.', example='*'),
      status?: string(name='Status', description='The status.', example='off'),
      timeUnit?: string(name='TimeUnit', description='The time unit.', example='s'),
      unitNum?: long(name='UnitNum', description='The unit number.', example='1'),
    }(name='Cors', description='The configuration for cross-origin resource sharing (CORS).'),
    defaultServiceId?: long(name='DefaultServiceId', description='The default service ID.', example='1'),
    defaultServiceName?: string(name='DefaultServiceName', description='The default service name.', example='test'),
    destinationType?: string(name='DestinationType', description='The destination service type.', example='Single'),
    directResponse?: {
      body?: string(name='Body', description='The mock return value.', example='[{\\"key\\":\\"h68d13466.sqa.eu95\\",\\"dims\\":\\"groupName=All'),
      code?: int32(name='Code', description='The return value.', example='200'),
    }(name='DirectResponse', description='The information about service mocking.'),
    domainId?: long(name='DomainId', description='The ID of the domain name.', example='235'),
    domainIdList?: [ long ](name='DomainIdList', description='The IDs of the domain names.'),
    domainName?: string(name='DomainName', description='The domain name.', example='nbhamster.com'),
    domainNameList?: [ string ](name='DomainNameList', description='The domain names.'),
    enableWaf?: boolean(name='EnableWaf', description='Indicates whether WAF is enabled.', example='0'),
    gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='102'),
    gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-7ea3da97b96543e19f6c597cd4a9****'),
    gmtCreate?: string(name='GmtCreate', description='The creation time.', example='2022-01-26T09:52:41.000+0000'),
    gmtModified?: string(name='GmtModified', description='The modification time.', example='2022-02-24T06:08:29.230+0000'),
    HTTPRewrite?: {
      host?: string(name='Host', description='The domain name.', example='aliyuncs.com'),
      path?: string(name='Path', description='The HTTP request path.', example='/test/client'),
      pathType?: string(name='PathType', description='The path type of the HTTP request.', example='PRE'),
      pattern?: string(name='Pattern', description='The matching pattern.', example='/test'),
      status?: string(name='Status', description='The HTTP status.', example='off'),
      substitution?: string(name='Substitution', description='The replacement.', example='test'),
    }(name='HTTPRewrite', description='The information about the rewrite policy.'),
    headerOp?: {
      headerOpItems?: [ 
        {
          directionType?: string(name='DirectionType', description='The request or response.', example='Response'),
          key?: string(name='Key', description='Header Key.', example='debug'),
          opType?: string(name='OpType', description='The operation type.', example='Add'),
          value?: string(name='Value', description='The header value.', example='test'),
        }
      ](name='HeaderOpItems', description='The policy.'),
      status?: string(name='Status', description='The status.', example='off'),
    }(name='HeaderOp', description='The information about the header configuration policy.'),
    id?: long(name='Id', description='The ID of the route.', example='12'),
    name?: string(name='Name', description='The name of the route.', example='test'),
    predicates?: string(name='Predicates', description='The matching rule.', example='{\\"PathPredicates\\":{\\"Path\\":\\"/metas\\",\\"Type\\":\\"PRE\\",\\"IgnoreCase\\":false}}'),
    redirect?: {
      code?: int32(name='Code', description='The response code returned.', example='200'),
      host?: string(name='Host', description='The hostname.', example='ww.al.c'),
      path?: string(name='Path', description='The path.', example='/'),
    }(name='Redirect', description='The configuration of the redirection.'),
    retry?: {
      attempts?: int32(name='Attempts', description='The number of retries allowed for a request.', example='1'),
      httpCodes?: [ string ](name='HttpCodes', description='The HTTP status code.'),
      retryOn?: [ string ](name='RetryOn', description='The retry condition.'),
      status?: string(name='Status', description='The retry status.', example='on'),
    }(name='Retry', description='The retry configuration.'),
    routeOrder?: int32(name='RouteOrder', description='The sequence number of the route.', example='1'),
    routePredicates?: {
      headerPredicates?: [ 
        {
          key?: string(name='Key', description='The key of the request header.', example='alibo'),
          type?: string(name='Type', description='The matching type.', example='PRE'),
          value?: string(name='Value', description='The value of the request header.', example='200'),
        }
      ](name='HeaderPredicates', description='The rules for matching based on request headers.'),
      methodPredicates?: [ string ](name='MethodPredicates', description='The information about method matching.'),
      pathPredicates?: {
        ignoreCase?: boolean(name='IgnoreCase', description='Indicates whether case sensitivity is ignored.', example='true'),
        path?: string(name='Path', description='The path.', example='/zookeeper/mmgw/unlogined/common.getBu'),
        type?: string(name='Type', description='The matching type.', example='PRE'),
      }(name='PathPredicates', description='The information about route matching.'),
      queryPredicates?: [ 
        {
          key?: string(name='Key', description='The name of the parameter.', example='instanceId'),
          type?: string(name='Type', description='The type.', example='PRE'),
          value?: string(name='Value', description='The value of the parameter.', example='test'),
        }
      ](name='QueryPredicates', description='The information about parameter matching.'),
    }(name='RoutePredicates', description='The information about route matching.'),
    routeServices?: [ 
      {
        groupName?: string(name='GroupName', description='The name of the group to which the service belongs.', example='DEFAULT_GROUP'),
        name?: string(name='Name', description='The name of the service.', example='test-aixue-gray'),
        namespace?: string(name='Namespace', description='The namespace.', example='default'),
        percent?: int32(name='Percent', description='The weight.', example='80'),
        serviceId?: long(name='ServiceId', description='The ID of the service.', example='547'),
        serviceName?: string(name='ServiceName', description='The name of the service.', example='b-service'),
        sourceType?: string(name='SourceType', description='The source type of the service.', example='K8S'),
        version?: string(name='Version', description='The version of the service.', example='v1'),
      }
    ](name='RouteServices', description='The information about services.'),
    services?: string(name='Services', description='The information about services.', example='[{\\"Percent\\":100,\\"ServiceId\\":126}]'),
    status?: int32(name='Status', description='The status of the route.', example='1'),
    timeout?: {
      status?: string(name='Status', description='The status.', example='off'),
      timeUnit?: string(name='TimeUnit', description='The time unit.', example='s'),
      unitNum?: int32(name='UnitNum', description='The unit number.', example='10'),
    }(name='Timeout', description='The timeout configuration.'),
  }(name='Data', description='The returned data.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The response message.', example='success'),
  requestId?: string(name='RequestId', description='ID of the Request.', example='7466566F-F30F-4A29-965D-3E0AF21D****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model UpdateGatewayRouteWafStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateGatewayRouteWafStatusResponseBody(name='body'),
}

async function updateGatewayRouteWafStatusWithOptions(request: UpdateGatewayRouteWafStatusRequest, runtime: Util.RuntimeOptions): UpdateGatewayRouteWafStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.enableWaf)) {
    query['EnableWaf'] = request.enableWaf;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.routeId)) {
    query['RouteId'] = request.routeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateGatewayRouteWafStatus',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateGatewayRouteWafStatus(request: UpdateGatewayRouteWafStatusRequest): UpdateGatewayRouteWafStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGatewayRouteWafStatusWithOptions(request, runtime);
}

model UpdateGatewayServiceTrafficPolicyRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   **zh**: Chinese. This is the default value.
*   **en**: English.', example='zh'),
  gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='429'),
  gatewayTrafficPolicy?: TrafficPolicy(name='GatewayTrafficPolicy', description='The traffic policy of the service.'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-75c5036c083e4f89ba8ef9fafff2e902'),
  serviceId?: long(name='ServiceId', description='The ID of the service.', example='411'),
}

model UpdateGatewayServiceTrafficPolicyShrinkRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   **zh**: Chinese. This is the default value.
*   **en**: English.', example='zh'),
  gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='429'),
  gatewayTrafficPolicyShrink?: string(name='GatewayTrafficPolicy', description='The traffic policy of the service.'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-75c5036c083e4f89ba8ef9fafff2e902'),
  serviceId?: long(name='ServiceId', description='The ID of the service.', example='411'),
}

model UpdateGatewayServiceTrafficPolicyResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: GatewayService(name='Data', description='The details of the data.', example='{\\"GatewayUniqueId\\": \\"gw-2b8ebd75dc554c37a4279ba9917379f2\\", \\"Id\\": 417, \\"GatewayTrafficPolicy\\": {\\"LoadBalancerSettings\\": {\\"LoadbalancerType\\": \\"ROUND_ROBIN\\"}, \\"TlsSetting\\": {\\"TlsMode\\": \\"DISABLE\\"}}}'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='11A61389-F896-5231-A4FB-074D9E2E0055'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model UpdateGatewayServiceTrafficPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateGatewayServiceTrafficPolicyResponseBody(name='body'),
}

async function updateGatewayServiceTrafficPolicyWithOptions(tmpReq: UpdateGatewayServiceTrafficPolicyRequest, runtime: Util.RuntimeOptions): UpdateGatewayServiceTrafficPolicyResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateGatewayServiceTrafficPolicyShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.gatewayTrafficPolicy)) {
    request.gatewayTrafficPolicyShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.gatewayTrafficPolicy, 'GatewayTrafficPolicy', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.gatewayTrafficPolicyShrink)) {
    query['GatewayTrafficPolicy'] = request.gatewayTrafficPolicyShrink;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.serviceId)) {
    query['ServiceId'] = request.serviceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateGatewayServiceTrafficPolicy',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateGatewayServiceTrafficPolicy(request: UpdateGatewayServiceTrafficPolicyRequest): UpdateGatewayServiceTrafficPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGatewayServiceTrafficPolicyWithOptions(request, runtime);
}

model UpdateGatewayServiceVersionRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-eccf313e2224438ba53d95d039e5****'),
  serviceId?: long(name='ServiceId', description='The ID of the service.', example='575'),
  serviceVersion?: string(name='ServiceVersion', description='The version of the service.', example='{\\"name\\":\\"v3\\",\\"labels\\":[{\\"key\\":\\"version\\",\\"value\\":\\"v3\\"}]}'),
}

model UpdateGatewayServiceVersionResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='1'),
  data?: long(name='Data', description='The details of the data.', example='614'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is processed successfully.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D6580AA6-E285-58D2-B00B-12C051B3B7BF'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model UpdateGatewayServiceVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateGatewayServiceVersionResponseBody(name='body'),
}

async function updateGatewayServiceVersionWithOptions(request: UpdateGatewayServiceVersionRequest, runtime: Util.RuntimeOptions): UpdateGatewayServiceVersionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.serviceId)) {
    query['ServiceId'] = request.serviceId;
  }
  if (!Util.isUnset(request.serviceVersion)) {
    query['ServiceVersion'] = request.serviceVersion;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateGatewayServiceVersion',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateGatewayServiceVersion(request: UpdateGatewayServiceVersionRequest): UpdateGatewayServiceVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGatewayServiceVersionWithOptions(request, runtime);
}

model UpdateGatewaySpecRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The ID of the gateway.', example='gw-c70622ff52fe49beb29bea9a6f52****'),
  replica?: int32(name='Replica', description='The number of nodes.', example='3'),
  spec?: string(name='Spec', description='The node specifications.', example='MSE_GTW_4_8_200_c'),
}

model UpdateGatewaySpecResponseBody = {
  code?: int32(name='Code', description='The response code returned.', example='200'),
  data?: string(name='Data', description='The returned data.', example='gw-892ehbv7gg56******'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='ID of the Request.', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model UpdateGatewaySpecResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateGatewaySpecResponseBody(name='body'),
}

/**
  * You can call this operation to update the number or specifications of nodes in a pay-as-you-go cloud-native gateway. You are charged when you add nodes or upgrade node specifications. For more information, see \\[Pricing] (`~~250950~~`).
  *
  * @param request UpdateGatewaySpecRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateGatewaySpecResponse
 */
async function updateGatewaySpecWithOptions(request: UpdateGatewaySpecRequest, runtime: Util.RuntimeOptions): UpdateGatewaySpecResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.replica)) {
    query['Replica'] = request.replica;
  }
  if (!Util.isUnset(request.spec)) {
    query['Spec'] = request.spec;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateGatewaySpec',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to update the number or specifications of nodes in a pay-as-you-go cloud-native gateway. You are charged when you add nodes or upgrade node specifications. For more information, see \\[Pricing] (`~~250950~~`).
  *
  * @param request UpdateGatewaySpecRequest
  * @return UpdateGatewaySpecResponse
 */
async function updateGatewaySpec(request: UpdateGatewaySpecRequest): UpdateGatewaySpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGatewaySpecWithOptions(request, runtime);
}

model UpdateImageRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh'),
  clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='mse-cn-09k1zkrnt0h'),
  versionCode?: string(name='VersionCode', description='The destination version of the image.', example='ZooKeeper_3_5_5'),
}

model UpdateImageResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='mse-100-000'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3855D475-2B66-5CFF-9A51-3D698E52C472'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='True'),
}

model UpdateImageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateImageResponseBody(name='body'),
}

async function updateImageWithOptions(request: UpdateImageRequest, runtime: Util.RuntimeOptions): UpdateImageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.versionCode)) {
    query['VersionCode'] = request.versionCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateImage',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateImage(request: UpdateImageRequest): UpdateImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateImageWithOptions(request, runtime);
}

model UpdateMessageQueueRouteRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  appId?: string(name='AppId', description='The ID of the application.', example='hkhon1po62@c3df23522baa898'),
  enable?: boolean(name='Enable', description='Specifies whether the canary release for messaging feature is enabled for the application. Valid values:

*   `true`: enabled
*   `false`: disabled', example='true'),
  filterSide?: string(name='FilterSide', description='The side for message filtering when the canary release for messaging feature is enabled.', example='Server'),
  region?: string(name='Region', description='The region ID.', example='cn-hangzhou'),
  tags?: [ string ](name='Tags', description='The tag that is negligible for the untagged environment of the application.'),
}

model UpdateMessageQueueRouteShrinkRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  appId?: string(name='AppId', description='The ID of the application.', example='hkhon1po62@c3df23522baa898'),
  enable?: boolean(name='Enable', description='Specifies whether the canary release for messaging feature is enabled for the application. Valid values:

*   `true`: enabled
*   `false`: disabled', example='true'),
  filterSide?: string(name='FilterSide', description='The side for message filtering when the canary release for messaging feature is enabled.', example='Server'),
  region?: string(name='Region', description='The region ID.', example='cn-hangzhou'),
  tagsShrink?: string(name='Tags', description='The tag that is negligible for the untagged environment of the application.'),
}

model UpdateMessageQueueRouteResponseBody = {
  code?: int32(name='Code', description='The status code returned. The value 200 indicates that the request was successful. Other values indicate that the request failed.', example='200'),
  data?: string(name='Data', description='The data of the node.', example='True'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E3919C62-876A-5926-A0BC-18351A24FA35'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model UpdateMessageQueueRouteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateMessageQueueRouteResponseBody(name='body'),
}

async function updateMessageQueueRouteWithOptions(tmpReq: UpdateMessageQueueRouteRequest, runtime: Util.RuntimeOptions): UpdateMessageQueueRouteResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateMessageQueueRouteShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!Util.isUnset(request.filterSide)) {
    query['FilterSide'] = request.filterSide;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.tagsShrink)) {
    query['Tags'] = request.tagsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMessageQueueRoute',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateMessageQueueRoute(request: UpdateMessageQueueRouteRequest): UpdateMessageQueueRouteResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMessageQueueRouteWithOptions(request, runtime);
}

model UpdateNacosClusterRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  checkPort?: int32(name='CheckPort', description='The port used for health checks.', example='80'),
  clusterName?: string(name='ClusterName', description='The name of the Nacos cluster.', example='DEFAULT'),
  groupName?: string(name='GroupName', description='The name of the group.', example='DEFAULT_GROUP'),
  healthChecker?: string(name='HealthChecker', description='The type of the health check.', example='{"type":"none"}'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-123456'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='9e78a671-4b9b-4dd4-99c1-0b9da87d3dec'),
  serviceName?: string(name='ServiceName', description='The name of the service.', example='hello_service'),
  useInstancePortForCheck?: boolean(name='UseInstancePortForCheck', description='Specifies whether to use the port of the instance for a health check.', example='false'),
}

model UpdateNacosClusterResponseBody = {
  code?: int32(name='Code', description='The response code returned.', example='200'),
  data?: string(name='Data', description='The returned result.', example='ok'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The response message.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9e78a671-4b9b-4dd4-99c1-0b9da87d3dec'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model UpdateNacosClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateNacosClusterResponseBody(name='body'),
}

async function updateNacosClusterWithOptions(request: UpdateNacosClusterRequest, runtime: Util.RuntimeOptions): UpdateNacosClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.checkPort)) {
    query['CheckPort'] = request.checkPort;
  }
  if (!Util.isUnset(request.clusterName)) {
    query['ClusterName'] = request.clusterName;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.healthChecker)) {
    query['HealthChecker'] = request.healthChecker;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.namespaceId)) {
    query['NamespaceId'] = request.namespaceId;
  }
  if (!Util.isUnset(request.serviceName)) {
    query['ServiceName'] = request.serviceName;
  }
  if (!Util.isUnset(request.useInstancePortForCheck)) {
    query['UseInstancePortForCheck'] = request.useInstancePortForCheck;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateNacosCluster',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateNacosCluster(request: UpdateNacosClusterRequest): UpdateNacosClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateNacosClusterWithOptions(request, runtime);
}

model UpdateNacosConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  appName?: string(name='AppName', description='The name of the application.', example='postoffice'),
  betaIps?: string(name='BetaIps', description='The list of IP addresses where the beta release of the configuration is performed.', example='196.168.XX.XX'),
  content?: string(name='Content', description='The content of the configuration.', example='attribute1=1221111\\r\\nattribute2=Chinese\\r\\nattribute3=abc11\\r\\nattribute4=1.00111'),
  dataId?: string(name='DataId', description='The ID of the configuration.', example='ky-check-****.yml'),
  desc?: string(name='Desc', description='The description of the configuration.', example='Basic configuration'),
  encryptedDataKey?: string(name='EncryptedDataKey', description='The encryption key.', example='122wdwe****'),
  group?: string(name='Group', description='The name of the group.', example='resource'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-7pp2a****'),
  md5?: string(name='Md5', description='The MD5 value of the configuration.', example='045439703a273a94306422b****'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='78b7af66-d15f-4541-b886-11ed81ecb6c0'),
  tags?: string(name='Tags', description='The tags of the configuration.', example='2021-10-20'),
  type?: string(name='Type', description='The format of the configuration. Supported formats include TEXT, JSON, XML, and HTML.', example='text'),
}

model UpdateNacosConfigResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='NoPermission'),
  httpCode?: string(name='HttpCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is processed successfully.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='69AD2AA7-DB47-449B-941B-B14409DF****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model UpdateNacosConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateNacosConfigResponseBody(name='body'),
}

/**
  * > The current API operation is not provided in Nacos SDK. For information about Nacos SDK, see the [official Nacos documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
  * @param request UpdateNacosConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateNacosConfigResponse
 */
async function updateNacosConfigWithOptions(request: UpdateNacosConfigRequest, runtime: Util.RuntimeOptions): UpdateNacosConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.betaIps)) {
    query['BetaIps'] = request.betaIps;
  }
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.dataId)) {
    query['DataId'] = request.dataId;
  }
  if (!Util.isUnset(request.desc)) {
    query['Desc'] = request.desc;
  }
  if (!Util.isUnset(request.encryptedDataKey)) {
    query['EncryptedDataKey'] = request.encryptedDataKey;
  }
  if (!Util.isUnset(request.group)) {
    query['Group'] = request.group;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.md5)) {
    query['Md5'] = request.md5;
  }
  if (!Util.isUnset(request.namespaceId)) {
    query['NamespaceId'] = request.namespaceId;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateNacosConfig',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > The current API operation is not provided in Nacos SDK. For information about Nacos SDK, see the [official Nacos documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
  * @param request UpdateNacosConfigRequest
  * @return UpdateNacosConfigResponse
 */
async function updateNacosConfig(request: UpdateNacosConfigRequest): UpdateNacosConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateNacosConfigWithOptions(request, runtime);
}

model UpdateNacosInstanceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  clusterName?: string(name='ClusterName', description='The name of the Nacos instance.', example='DEFAULT'),
  enabled?: boolean(name='Enabled', description='Specifies whether to disable this service. Valid values:

*   `true`: yes
*   `false`: no', example='true'),
  ephemeral?: boolean(name='Ephemeral', description='Specifies whether the node is a non-persistent node. Valid values:

*   `true`: yes
*   `false`: no', example='false'),
  groupName?: string(name='GroupName', description='The name of the group.', example='DEFAULT_GROUP'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-123456'),
  ip?: string(name='Ip', description='The IP address of the Nacos instance.', example='1.2.X.X'),
  metadata?: string(name='Metadata', description='The metadata of the instance.', example='[int]'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='9e78a671-4b9b-4dd4-99c1-0****'),
  port?: int32(name='Port', description='The port of the Nacos instance.', example='12281'),
  serviceName?: string(name='ServiceName', description='The name of the service.', example='hello_service'),
  weight?: string(name='Weight', description='The weight. Valid values: 0 to 10000. The value must be an integer. A larger value indicates a higher frequency at which the instance is accessed.', example='1'),
}

model UpdateNacosInstanceResponseBody = {
  code?: int32(name='Code', description='The response code returned.', example='200'),
  data?: string(name='Data', description='The result of the modification.', example='ok'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The returned message.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9e78a671-4b9b-4dd4-99c1-0b9da87d3dec'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model UpdateNacosInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateNacosInstanceResponseBody(name='body'),
}

/**
  * > The operation is not provided in Nacos SDKs. For information about Nacos SDKs, see the [official documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
  * @param request UpdateNacosInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateNacosInstanceResponse
 */
async function updateNacosInstanceWithOptions(request: UpdateNacosInstanceRequest, runtime: Util.RuntimeOptions): UpdateNacosInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterName)) {
    query['ClusterName'] = request.clusterName;
  }
  if (!Util.isUnset(request.enabled)) {
    query['Enabled'] = request.enabled;
  }
  if (!Util.isUnset(request.ephemeral)) {
    query['Ephemeral'] = request.ephemeral;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ip)) {
    query['Ip'] = request.ip;
  }
  if (!Util.isUnset(request.namespaceId)) {
    query['NamespaceId'] = request.namespaceId;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.serviceName)) {
    query['ServiceName'] = request.serviceName;
  }
  if (!Util.isUnset(request.weight)) {
    query['Weight'] = request.weight;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.metadata)) {
    body['Metadata'] = request.metadata;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateNacosInstance',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > The operation is not provided in Nacos SDKs. For information about Nacos SDKs, see the [official documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
  * @param request UpdateNacosInstanceRequest
  * @return UpdateNacosInstanceResponse
 */
async function updateNacosInstance(request: UpdateNacosInstanceRequest): UpdateNacosInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateNacosInstanceWithOptions(request, runtime);
}

model UpdateNacosServiceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  clusterId?: string(name='ClusterId', description='The ID of the cluster.

> This operation contains both the InstanceId and ClusterId parameters. You must configure either InstanceId or ClusterId.', example='mse-09k1q11****'),
  groupName?: string(name='GroupName', description='The name of the group.', example='DEFAULT_GROUP'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.

> This operation contains both the InstanceId and ClusterId parameters. You must configure either InstanceId or ClusterId.', example='mse-cn-st21ri2****'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='5e3ee449-b5c0-4aee-b857-32c0acbebf26'),
  protectThreshold?: string(name='ProtectThreshold', description='The protection threshold.', example='0'),
  serviceName?: string(name='ServiceName', description='The name of the service.', example='com.dingtalk.doc.thumbnails.pdf.ThumbnailService'),
}

model UpdateNacosServiceResponseBody = {
  code?: int32(name='Code', description='The response code returned.', example='1'),
  data?: string(name='Data', description='The details of the data.', example='6'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4E9FDCFE-0738-493B-B801-82BDFBCB****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='True'),
}

model UpdateNacosServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateNacosServiceResponseBody(name='body'),
}

/**
  * > The operation is not provided in Nacos SDKs. For more information about Nacos SDKs, see the [official documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
  * @param request UpdateNacosServiceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateNacosServiceResponse
 */
async function updateNacosServiceWithOptions(request: UpdateNacosServiceRequest, runtime: Util.RuntimeOptions): UpdateNacosServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.namespaceId)) {
    query['NamespaceId'] = request.namespaceId;
  }
  if (!Util.isUnset(request.protectThreshold)) {
    query['ProtectThreshold'] = request.protectThreshold;
  }
  if (!Util.isUnset(request.serviceName)) {
    query['ServiceName'] = request.serviceName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateNacosService',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > The operation is not provided in Nacos SDKs. For more information about Nacos SDKs, see the [official documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
  * @param request UpdateNacosServiceRequest
  * @return UpdateNacosServiceResponse
 */
async function updateNacosService(request: UpdateNacosServiceRequest): UpdateNacosServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateNacosServiceWithOptions(request, runtime);
}

model UpdatePluginConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

zh: Chinese en: English', example='zh'),
  config?: string(name='Config', description='The plug-in configuration.', example='\\# Configure a check for the required fields of the plug-in, such as name, age, and friends. Sample configuration: name: John age: 18 friends: - David - Anne'),
  configLevel?: int32(name='ConfigLevel', description='The application scope of the plug-in.

*   0: global
*   1: domain names
*   2: routes', example='0'),
  enable?: boolean(name='Enable', description='Specifies whether to enable the plug-in.', example='true'),
  gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='1'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-ubuwqygbq4783gqb2y3f87q****'),
  gmtCreate?: string(name='GmtCreate', description='The creation time.', example='1667309705000'),
  gmtModified?: string(name='GmtModified', description='The update time.', example='1667309705000'),
  id?: long(name='Id', description='The ID of the plug-in configuration.', example='1'),
  pluginId?: long(name='PluginId', description='The ID of the gateway plug-in.', example='2'),
}

model UpdatePluginConfigResponseBody = {
  code?: int32(name='Code', description='Code.', example='200'),
  data?: long(name='Data', description='The ID of the plug-in configuration.', example='1'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message.', example='code'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='500'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='03A3E2F4-6804-5663-9D5D-2EC47A1*****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model UpdatePluginConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdatePluginConfigResponseBody(name='body'),
}

async function updatePluginConfigWithOptions(request: UpdatePluginConfigRequest, runtime: Util.RuntimeOptions): UpdatePluginConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.config)) {
    query['Config'] = request.config;
  }
  if (!Util.isUnset(request.configLevel)) {
    query['ConfigLevel'] = request.configLevel;
  }
  if (!Util.isUnset(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.gmtCreate)) {
    query['GmtCreate'] = request.gmtCreate;
  }
  if (!Util.isUnset(request.gmtModified)) {
    query['GmtModified'] = request.gmtModified;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.pluginId)) {
    query['PluginId'] = request.pluginId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdatePluginConfig',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updatePluginConfig(request: UpdatePluginConfigRequest): UpdatePluginConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updatePluginConfigWithOptions(request, runtime);
}

model UpdateSSLCertRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  certIdentifier?: string(name='CertIdentifier', description='The ID of the certificate.', example='5951436-cn-hangzhou'),
  domainId?: long(name='DomainId', description='The ID of the domain name.', example='210'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-2a99625886d54722be94d92e9a69****'),
}

model UpdateSSLCertResponseBody = {
  code?: int32(name='Code', description='The response code returned.', example='200'),
  data?: boolean(name='Data', description='The data structure.', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='Id of the request', example='CA689BED-08F3-54C2-A206-A0924E2ACA0A'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model UpdateSSLCertResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSSLCertResponseBody(name='body'),
}

async function updateSSLCertWithOptions(request: UpdateSSLCertRequest, runtime: Util.RuntimeOptions): UpdateSSLCertResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.certIdentifier)) {
    query['CertIdentifier'] = request.certIdentifier;
  }
  if (!Util.isUnset(request.domainId)) {
    query['DomainId'] = request.domainId;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSSLCert',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateSSLCert(request: UpdateSSLCertRequest): UpdateSSLCertResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSSLCertWithOptions(request, runtime);
}

model UpdateServiceSourceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  address?: string(name='Address', description='The address.', example='c9ad2a0717032427e920754e25b49e3b5'),
  gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='429'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-cdd1bb9bfb8341e9805f931a3ba1f4c6'),
  id?: long(name='Id', description='The ID of the service source.', example='63'),
  ingressOptionsRequest?: {
    enableIngress?: boolean(name='EnableIngress', description='Specifies whether to enable Ingress.', example='true'),
    enableStatus?: boolean(name='EnableStatus', description='Specifies whether to update the Ingress status.', example='true'),
    ingressClass?: string(name='IngressClass', description='Specifies whether to monitor Ingress classes.', example='com.test.xxx'),
    watchNamespace?: string(name='WatchNamespace', description='The namespace whose resources you want to monitor.', example='default'),
  }(name='IngressOptionsRequest', description='The configurations of Ingress resources.', example='zh'),
  name?: string(name='Name', description='The name.', example='istio'),
  pathList?: [ string ](name='PathList', description='An array of service root paths.'),
  source?: string(name='Source', description='The service source. Valid values:

*   K8S: ACK cluster
*   MSE: Nacos instance', example='K8S'),
  type?: string(name='Type', description='The type of the service source. Valid values:

*   K8S: ACK cluster
*   NACOS: Nacos instance', example='K8S'),
}

model UpdateServiceSourceShrinkRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  address?: string(name='Address', description='The address.', example='c9ad2a0717032427e920754e25b49e3b5'),
  gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='429'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-cdd1bb9bfb8341e9805f931a3ba1f4c6'),
  id?: long(name='Id', description='The ID of the service source.', example='63'),
  ingressOptionsRequestShrink?: string(name='IngressOptionsRequest', description='The configurations of Ingress resources.', example='zh'),
  name?: string(name='Name', description='The name.', example='istio'),
  pathListShrink?: string(name='PathList', description='An array of service root paths.'),
  source?: string(name='Source', description='The service source. Valid values:

*   K8S: ACK cluster
*   MSE: Nacos instance', example='K8S'),
  type?: string(name='Type', description='The type of the service source. Valid values:

*   K8S: ACK cluster
*   NACOS: Nacos instance', example='K8S'),
}

model UpdateServiceSourceResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: long(name='Data', description='The returned data.', example='63'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6AB2B0B6-4A86-54E2-A340-FC47A22EE659'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model UpdateServiceSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateServiceSourceResponseBody(name='body'),
}

async function updateServiceSourceWithOptions(tmpReq: UpdateServiceSourceRequest, runtime: Util.RuntimeOptions): UpdateServiceSourceResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateServiceSourceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.ingressOptionsRequest)) {
    request.ingressOptionsRequestShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ingressOptionsRequest, 'IngressOptionsRequest', 'json');
  }
  if (!Util.isUnset(tmpReq.pathList)) {
    request.pathListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.pathList, 'PathList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.address)) {
    query['Address'] = request.address;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.gatewayUniqueId)) {
    query['GatewayUniqueId'] = request.gatewayUniqueId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.ingressOptionsRequestShrink)) {
    query['IngressOptionsRequest'] = request.ingressOptionsRequestShrink;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pathListShrink)) {
    query['PathList'] = request.pathListShrink;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateServiceSource',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateServiceSource(request: UpdateServiceSourceRequest): UpdateServiceSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateServiceSourceWithOptions(request, runtime);
}

model UpdateZnodeRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='mse-09k1q11****'),
  data?: string(name='Data', description='The data of the node.', example='data'),
  path?: string(name='Path', description='The path of the node.', example='/zookeeper'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}'),
}

model UpdateZnodeResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='mse-100-000'),
  message?: string(name='Message', description='The message returned.', example='The request is processed successfully.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model UpdateZnodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateZnodeResponseBody(name='body'),
}

async function updateZnodeWithOptions(request: UpdateZnodeRequest, runtime: Util.RuntimeOptions): UpdateZnodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.data)) {
    query['Data'] = request.data;
  }
  if (!Util.isUnset(request.path)) {
    query['Path'] = request.path;
  }
  if (!Util.isUnset(request.requestPars)) {
    query['RequestPars'] = request.requestPars;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateZnode',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateZnode(request: UpdateZnodeRequest): UpdateZnodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateZnodeWithOptions(request, runtime);
}

model UpgradeClusterRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

- zh: Chinese
- en: English', example='zh'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-nif1w51wi0c'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}'),
  upgradeVersion?: string(name='UpgradeVersion', description='The destination version.', example='1.2.1'),
}

model UpgradeClusterResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request fails.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The status code returned.', example='202'),
  message?: string(name='Message', description='The message returned. Valid values: 

- If the request is successful, a success message is returned. 
- If the request fails, an error message is returned.', example='The request is processed successfully.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8D855418-177B-5FF8-A021-75B930AD890A'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:
- `true`: The request is successful. 
- `false`: The request fails.', example='true'),
}

model UpgradeClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpgradeClusterResponseBody(name='body'),
}

async function upgradeClusterWithOptions(request: UpgradeClusterRequest, runtime: Util.RuntimeOptions): UpgradeClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.requestPars)) {
    query['RequestPars'] = request.requestPars;
  }
  if (!Util.isUnset(request.upgradeVersion)) {
    query['UpgradeVersion'] = request.upgradeVersion;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpgradeCluster',
    version = '2019-05-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function upgradeCluster(request: UpgradeClusterRequest): UpgradeClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeClusterWithOptions(request, runtime);
}

