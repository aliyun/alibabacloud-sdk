/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'mse';
  @version = '2019-05-31';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model GatewayDomain {
  certIdentifier?: string(name='CertIdentifier', description='使用的证书Id'),
  gatewayId?: long(name='GatewayId', description='网关ID'),
  gatewayName?: string(name='GatewayName', description='网关名称'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='网关唯一标识'),
  gmtCreate?: string(name='GmtCreate', description='创建时间'),
  gmtModified?: string(name='GmtModified', description='修改时间'),
  id?: long(name='Id', description='Domain Id'),
  mustHttps?: string(name='MustHttps', description='是否强制跳转'),
  name?: string(name='Name', description='Domain Name'),
  protocol?: string(name='Protocol', description='domainn的协议'),
}

model GatewayOption {
  disableHttp2Alpn?: boolean(name='DisableHttp2Alpn', description='是否禁用http'),
  enableHardwareAcceleration?: boolean(name='EnableHardwareAcceleration', description='是否开启硬件加速'),
  enableWaf?: boolean(name='EnableWaf', description='是否开启waf'),
  logConfigDetails?: {
    logEnabled: boolean(name='LogEnabled', description='是否开启日志投递'),
    logStoreName?: string(name='LogStoreName', description='投递的目标logstore'),
    projectName?: string(name='ProjectName', description='投递的目标project'),
  }(name='LogConfigDetails', description='日志配置详情'),
  traceDetails?: {
    sample?: long(name='Sample', description='trace 采样率'),
    traceEnabled: boolean(name='TraceEnabled', description='trace是否开启'),
  }(name='TraceDetails', description='xtrace config option'),
}

model GatewayService {
  gatewayTrafficPolicy?: TrafficPolicy(name='GatewayTrafficPolicy', description='服务的策略'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='网关uniqueId'),
  groupName?: string(name='GroupName', description='服务所属group'),
  id?: long(name='Id', description='服务id'),
  metaInfo?: string(name='MetaInfo', description='元信息'),
  name?: string(name='Name', description='服务名'),
  namespace?: string(name='Namespace', description='服务所属namesapce'),
  sourceType?: string(name='SourceType', description='服务来源'),
}

model TrafficPolicy {
  loadBalancerSettings?: {
    consistentHashLBConfig?: {
      consistentHashLBType?: string(name='ConsistentHashLBType', description='HEADER, COOKIE, SOURCE_IP, QUERY_PARAMETER'),
      httpCookie?: {
        name?: string(name='Name', description='cookie名'),
        path?: string(name='Path', description='cookie path'),
        TTL?: string(name='TTL', description='cookie生命周期', example='0s'),
      }(name='HttpCookie', description='使用cookie时配置'),
      parameterName?: string(name='ParameterName', description='使用根据header和参数路由时生效'),
    }(name='ConsistentHashLBConfig', description='一致性hash相关配置'),
    loadbalancerType?: string(name='LoadbalancerType', description='负载均衡类型，枚举类可为ROUND_ROBIN, LEAST_CONN,RANDOM, CONSISTENT_HASH', example='RANDOM'),
    warmupDuration?: long(name='WarmupDuration', description='预热时间(单位/s)'),
  }(name='LoadBalancerSettings', description='负载均衡相关配置'),
  tlsSetting?: {
    caCertContent?: string(name='CaCertContent', description='ca证书内容'),
    certId?: string(name='CertId', description='使用的证书id，仅当为mutual时需要填写'),
    sni?: string(name='Sni', description='到后端服务些带'),
    tlsMode: string(name='TlsMode', description='tls模式。为枚举类，可为NONE, SIMPLE, MUITUAL', example='SIMPLE'),
  }(name='TlsSetting', description='tls相关配置'),
}

model AddAuthPolicyRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  appId?: string(name='AppId', example='e9clba2xlc@***', position='Query'),
  authRule: string(name='AuthRule', example='[{"all":true,"black":false,"appIds":["dez4qt7weh@***"]}]', position='Query'),
  authType?: int32(name='AuthType', example='0', position='Query'),
  enable: string(name='Enable', example='true', position='Query'),
  k8sNamespace?: string(name='K8sNamespace', example='c19c6c500e1ff4d7abc7***', position='Query'),
  name: string(name='Name', example='test', position='Query'),
  namespace?: string(name='Namespace', example='default', position='Query'),
  protocol: string(name='Protocol', example='SPRING_CLOUD', position='Query'),
  region: string(name='Region', example='cn-hangzhou', position='Query'),
  source: string(name='Source', example='edasmsc', position='Query'),
}

model AddAuthPolicyResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='dc63-465d-8ef5-20dc18af****'),
  success?: boolean(name='Success', example='true'),
}

model AddAuthPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: AddAuthPolicyResponseBody(name='body'),
}

async function addAuthPolicy(request: AddAuthPolicyRequest): AddAuthPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddAuthPolicy', 'POST', '/', 'json', false, 'json', request);
}

model AddAuthResourceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  authId?: long(name='AuthId', example='13', position='Query'),
  authResourceHeaderList?: [ 
    {
      headerKey?: string(name='HeaderKey'),
      headerMethod?: string(name='HeaderMethod'),
      headerValue?: string(name='HeaderValue'),
    }
  ](name='AuthResourceHeaderList', shrink='json', position='Query'),
  domainId?: long(name='DomainId', example='128', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-86575c0bc9f04ecfbacb92b8e392****', position='Query'),
  ignoreCase?: boolean(name='IgnoreCase', position='Query'),
  matchType?: string(name='MatchType', example='exact', position='Query'),
  path?: string(name='Path', example='/abc', position='Query'),
}

model AddAuthResourceResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: long(name='Data', example='24'),
  httpStatusCode?: int32(name='HttpStatusCode', example='403'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='Id of the request', example='4BBCF560-4DD7-5DBD-B849-CCB135BBBAB7'),
  success?: boolean(name='Success', example='true'),
}

model AddAuthResourceResponse = {
  headers: map[string]string(name='headers'),
  body: AddAuthResourceResponseBody(name='body'),
}

async function addAuthResource(request: AddAuthResourceRequest): AddAuthResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddAuthResource', 'POST', '/', 'json', false, 'json', request);
}

model AddBlackWhiteListRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  content?: string(name='Content', example='1.117.115.51', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-0fe488252dc44d55a9dd57875193****', position='Query'),
  isWhite?: boolean(name='IsWhite', example='false', position='Query'),
  name?: string(name='Name', example='name', position='Query'),
  note?: string(name='Note', example='this is a note', position='Query'),
  resourceIdJsonList?: string(name='ResourceIdJsonList', example='[123]', position='Query'),
  resourceType?: string(name='ResourceType', example='GATEWAY', position='Query'),
  status?: string(name='Status', example='off', position='Query'),
  type?: string(name='Type', example='IP', position='Query'),
}

model AddBlackWhiteListResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: long(name='Data', example='2'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='Id of the request', example='966F6CA7-16D0-50AB-AB02-E140934F90C1'),
  success?: boolean(name='Success', example='true'),
}

model AddBlackWhiteListResponse = {
  headers: map[string]string(name='headers'),
  body: AddBlackWhiteListResponseBody(name='body'),
}

async function addBlackWhiteList(request: AddBlackWhiteListRequest): AddBlackWhiteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddBlackWhiteList', 'POST', '/', 'json', false, 'json', request);
}

model AddGatewayRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  chargeType?: string(name='ChargeType', position='Query'),
  enableHardwareAcceleration?: boolean(name='EnableHardwareAcceleration', description='是否开启硬件加速', example='false', position='Query'),
  enableSls?: boolean(name='EnableSls', description='是否开启SLS日志投递', example='false', position='Query'),
  enableXtrace?: boolean(name='EnableXtrace', description='是否开启xtrace', example='false', position='Query'),
  enterpriseSecurityGroup?: boolean(name='EnterpriseSecurityGroup', description='是否企业安全组类型', example='false', position='Query'),
  internetSlbSpec?: string(name='InternetSlbSpec', description='外网SLB规格', example='slb.s2.small', position='Query'),
  name?: string(name='Name', description='illegal request:%s', example='test-ceshi', position='Query'),
  region: string(name='Region', description='mse-200-021', example='cn-hangzhou', position='Query'),
  replica: int32(name='Replica', description='system error', example='2', position='Query'),
  requestPars?: string(name='RequestPars', description='扩展字段。', example='{}', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfm34x43l*****', position='Query'),
  slbSpec?: string(name='SlbSpec', description='clusterNotFound', example='slb.s2.small', position='Query'),
  spec: string(name='Spec', description='systemError', example='MSE_GTW_2_4_200_c', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='标签键', example='key'),
      value?: string(name='Value', description='标签值', example='value'),
    }
  ](name='Tag', description='标签列表，最多包含20个子项', position='Query'),
  vSwitchId?: string(name='VSwitchId', description='mse-100-001', example='vsw-bp1q8th57frl5khj2li43', position='Query'),
  vSwitchId2?: string(name='VSwitchId2', description='备交换机ID', example='vsw-wz9bu6o5vsvitt5mrxo6s', position='Query'),
  vpc: string(name='Vpc', description='cluster not found', example='vpc-bp15mncnrtm83uauxd1xb', position='Query'),
  xtraceRatio?: string(name='XtraceRatio', description='xtrace采样率，取值[0,100]', example='10', position='Query'),
  zoneInfo?: [ 
    {
      vSwitchId?: string(name='VSwitchId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='ZoneInfo', shrink='json', position='Query'),
}

model AddGatewayResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-5017305290e14cebbrvec4a5****'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='2F46B9E7-67EF-5C8A-BA52-D38D5B32AF2C'),
  success?: boolean(name='Success', example='true'),
}

model AddGatewayResponse = {
  headers: map[string]string(name='headers'),
  body: AddGatewayResponseBody(name='body'),
}

async function addGateway(request: AddGatewayRequest): AddGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddGateway', 'POST', '/', 'json', false, 'json', request);
}

model AddGatewayAuthConsumerRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  description?: string(name='Description', example='description', position='Query'),
  encodeType?: string(name='EncodeType', example='RSA', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', example='gw-c70622ff52fe49beb29bea9a6f52****', position='Query'),
  jwks?: string(name='Jwks', example='{"keys":[{"e":"AQAB","kid":"DHFbpoIUqrY8t2zpA2qXfCmr5VO5ZEr4RzHU_-envvQ","kty":"RSA","n":"xAE7eB6qugXyCAG3yhh7pkDkT65pHymX-P7KfIupjf59vsdo91bSP9C8H07pSAGQO1MV_xFj9VswgsCg4R6otmg5PV2He95lZdHtOcU5DXIg_pbhLdKXbi66GlVeK6ABZOUW3WYtnNHD-91gVuoeJT_DwtGGcp4ignkgXfkiEm4sw-4sfb4qdt5oLbyVpmW6x9cfa7vs2WTfURiCrBoUqgBo_-4WTiULmmHSGZHOjzwa8WtrtOQGsAFjIbno85jp6MnGGGZPYZbDAa_b3y5u-YpW7ypZrvD8BgtKVjgtQgZhLAGezMt0ua3DRrWnKqTZ0BJ_EyxOGuHJrLsn00fnMQ"}]}', position='Query'),
  keyName?: string(name='KeyName', example='iss', position='Query'),
  keyValue?: string(name='KeyValue', example='abcd', position='Query'),
  name: string(name='Name', example='name', position='Query'),
  tokenName?: string(name='TokenName', example='Authorization', position='Query'),
  tokenPass?: boolean(name='TokenPass', example='true', position='Query'),
  tokenPosition?: string(name='TokenPosition', example='HEADER', position='Query'),
  tokenPrefix?: string(name='TokenPrefix', example='Bearer', position='Query'),
  type: string(name='Type', example='JWT', position='Query'),
}

model AddGatewayAuthConsumerResponseBody = {
  code?: int32(name='Code', description='code仅仅用来和success同步', example='200'),
  data?: long(name='Data', example='2'),
  dynamicCode?: string(name='DynamicCode', description='动态错误信息中的占位符', example='code'),
  dynamicMessage?: string(name='DynamicMessage', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='69AD2AA7-DB47-449B-941B-B14409DF****'),
  success?: boolean(name='Success', example='True'),
}

model AddGatewayAuthConsumerResponse = {
  headers: map[string]string(name='headers'),
  body: AddGatewayAuthConsumerResponseBody(name='body'),
}

async function addGatewayAuthConsumer(request: AddGatewayAuthConsumerRequest): AddGatewayAuthConsumerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddGatewayAuthConsumer', 'POST', '/', 'json', false, 'json', request);
}

model AddGatewayDomainRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  certIdentifier?: string(name='CertIdentifier', example='6828169-cn-hangzhou', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-86575c0bc9f04ecfbacb92b8e392****', position='Query'),
  http2?: string(name='Http2', example='close', position='Query'),
  mustHttps?: boolean(name='MustHttps', example='true', position='Query'),
  name?: string(name='Name', example='test.com', position='Query'),
  protocol?: string(name='Protocol', example='HTTP', position='Query'),
  tlsMax?: string(name='TlsMax', example='TLS 1.3', position='Query'),
  tlsMin?: string(name='TlsMin', example='TLS 1.0', position='Query'),
}

model AddGatewayDomainResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: long(name='Data', example='100'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='16BA802F-B848-55DF-9F57-CD71B7272D1F'),
  success?: boolean(name='Success', example='true'),
}

model AddGatewayDomainResponse = {
  headers: map[string]string(name='headers'),
  body: AddGatewayDomainResponseBody(name='body'),
}

async function addGatewayDomain(request: AddGatewayDomainRequest): AddGatewayDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddGatewayDomain', 'POST', '/', 'json', false, 'json', request);
}

model AddGatewayRouteRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  destinationType?: string(name='DestinationType', example='Multiple', position='Query'),
  directResponseJSON?: {
    body?: string(name='Body', example='hello'),
    code?: long(name='Code', example='403'),
  }(name='DirectResponseJSON', shrink='json', position='Query'),
  domainId?: long(name='DomainId', example='20', position='Query'),
  domainIdListJSON?: string(name='DomainIdListJSON', example='[0,94]', position='Query'),
  enableWaf?: boolean(name='EnableWaf', example='true', position='Query'),
  fallback?: boolean(name='Fallback', example='true', position='Query'),
  fallbackServices?: [ 
    {
      agreementType?: string(name='AgreementType', example='DUBBO'),
      groupName?: string(name='GroupName', example='test'),
      name?: string(name='Name', example='user'),
      namespace?: string(name='Namespace', example='default'),
      percent?: int32(name='Percent', example='80'),
      serviceId?: long(name='ServiceId', example='353'),
      servicePort?: int32(name='ServicePort', example='443'),
      sourceType?: string(name='SourceType', example='MSE'),
      version?: string(name='Version', example='v1'),
    }
  ](name='FallbackServices', shrink='json', position='Query'),
  gatewayId?: long(name='GatewayId', example='526', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-492af9b04bb4474cae9d645be8*****', position='Query'),
  name?: string(name='Name', example='test', position='Query'),
  policies?: string(name='Policies', example='{"CORS":"{\\"allowMethods\\":\\"GET,POST,PUT,DELETE,HEAD,OPTIONS,PATCH\\",\\"allowHeaders\\":\\"*\\",\\"exposeHeaders\\":\\"*\\",\\"unitNum\\":12,\\"allowCredentials\\":true,\\"status\\":\\"off\\",\\"allowOrigins\\":\\"*\\",\\"timeUnit\\":\\"h\\"}","Timeout":"{\\"unitNum\\":10,\\"timeUnit\\":\\"s\\",\\"status\\":\\"off\\"}","Retry":"{\\"attempts\\":2,\\"retryOn\\":[\\"5xx\\"],\\"status\\":\\"off\\"}","HTTPRewrite":"{\\"pathType\\":\\"EQUAL\\",\\"path\\":\\"/o\\",\\"status\\":\\"off\\"}","Waf":"{\\"enabled\\":false}","HeaderOp":"{\\"status\\":\\"off\\",\\"headerOpItems\\":[{\\"directionType\\":\\"Request\\",\\"opType\\":\\"Add\\",\\"key\\":\\"kkk\\",\\"value\\":\\"ll\\"}]}"}', position='Query'),
  predicates?: {
    headerPredicates?: [ 
      {
        key?: string(name='Key', example='debug'),
        type?: string(name='Type', example='PRE'),
        value?: string(name='Value', example='test'),
      }
    ](name='HeaderPredicates'),
    methodPredicates?: [ string ](name='MethodPredicates'),
    pathPredicates?: {
      ignoreCase?: boolean(name='IgnoreCase', example='true'),
      path?: string(name='Path', example='/test'),
      type?: string(name='Type', example='PRE'),
    }(name='PathPredicates'),
    queryPredicates?: [ 
      {
        key?: string(name='Key', example='userid'),
        type?: string(name='Type', example='PRE'),
        value?: string(name='Value', example='test'),
      }
    ](name='QueryPredicates'),
  }(name='Predicates', shrink='json', position='Query'),
  redirectJSON?: {
    code?: int32(name='Code', example='302'),
    host?: string(name='Host', example='test.com'),
    path?: string(name='Path', example='/test'),
  }(name='RedirectJSON', shrink='json', position='Query'),
  routeOrder?: int32(name='RouteOrder', example='1', position='Query'),
  routeType?: string(name='RouteType', example='Op', position='Query'),
  services?: [ 
    {
      agreementType?: string(name='AgreementType', example='DUBBO'),
      groupName?: string(name='GroupName', example='test'),
      httpDubboTranscoder?: {
        dubboServiceGroup?: string(name='DubboServiceGroup'),
        dubboServiceName?: string(name='DubboServiceName', example='org.apache.dubbo.samples.basic.api.DemoService'),
        dubboServiceVersion?: string(name='DubboServiceVersion', example='0.0.0'),
        mothedMapList?: [ 
          {
            dubboMothedName?: string(name='DubboMothedName', example='sayHello'),
            httpMothed?: string(name='HttpMothed', example='ALL_GET'),
            mothedpath?: string(name='Mothedpath', example='/mytestzbk/sayhello'),
            paramMapsList?: [ 
              {
                extractKey?: string(name='ExtractKey', example='name'),
                extractKeySpec?: string(name='ExtractKeySpec', example='ALL_QUERY_PARAMETER'),
                mappingType?: string(name='MappingType', example='java.lang.String'),
              }
            ](name='ParamMapsList'),
            passThroughAllHeaders?: string(name='PassThroughAllHeaders', example='PASS_NOT'),
            passThroughList?: [ string ](name='PassThroughList'),
          }
        ](name='MothedMapList'),
      }(name='HttpDubboTranscoder'),
      name?: string(name='Name', example='user'),
      namespace?: string(name='Namespace', example='default'),
      percent?: int32(name='Percent', example='80'),
      serviceId?: long(name='ServiceId', example='353'),
      servicePort?: int32(name='ServicePort', example='443'),
      sourceType?: string(name='SourceType', example='MSE'),
      version?: string(name='Version', example='v1'),
    }
  ](name='Services', shrink='json', position='Query'),
}

model AddGatewayRouteResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: long(name='Data', example='555'),
  errorCode?: string(name='ErrorCode', example='InvalidParameter'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='03A3E2F4-6804-5663-9D5D-2EC47A1*****'),
  success?: boolean(name='Success', example='true'),
}

model AddGatewayRouteResponse = {
  headers: map[string]string(name='headers'),
  body: AddGatewayRouteResponseBody(name='body'),
}

async function addGatewayRoute(request: AddGatewayRouteRequest): AddGatewayRouteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddGatewayRoute', 'POST', '/', 'json', false, 'json', request);
}

model AddGatewayServiceVersionRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='mse-100-007', example='zh', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='duplicated cluster alias name', example='gw-913a49bab6c5461187a3305fb8da****', position='Query'),
  serviceId?: long(name='ServiceId', description='mse-200-105', example='33', position='Query'),
  serviceVersion?: string(name='ServiceVersion', description='duplicatedClusterAliasName', example='{\\"name\\":\\"v1\\",\\"labels\\":[{\\"key\\":\\"version\\",\\"value\\":\\"v1\\"}]}', position='Query'),
}

model AddGatewayServiceVersionResponseBody = {
  code?: int32(name='Code', description='mse-100-001', example='200'),
  data?: long(name='Data', description='system error', example='330'),
  httpStatusCode?: int32(name='HttpStatusCode', description='mse-200-021', example='403'),
  message?: string(name='Message', description='clusterNotFound', example='cluster not found'),
  requestId?: string(name='RequestId', description='illegal request:%s', example='BA4046B6-CFC6-583C-B608-DD75011A590F'),
  success?: boolean(name='Success', description='systemError', example='true'),
}

model AddGatewayServiceVersionResponse = {
  headers: map[string]string(name='headers'),
  body: AddGatewayServiceVersionResponseBody(name='body'),
}

async function addGatewayServiceVersion(request: AddGatewayServiceVersionRequest): AddGatewayServiceVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddGatewayServiceVersion', 'POST', '/', 'json', false, 'json', request);
}

model AddGatewaySlbRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The ID of the HTTPS virtual service group.', example='zh', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', description='The type of the service source. Valid values:

*   PUB_NET: Internet
*   PRIVATE_NET: VPC', example='gw-9cdcf8e4f58144059e73ff4c5ef9****', position='Query'),
  httpPort?: int32(name='HttpPort', description='The service weight.', example='80', position='Query'),
  httpsPort?: int32(name='HttpsPort', description='The HTTP port number (virtual service group).', example='443', position='Query'),
  httpsVServerGroupId?: string(name='HttpsVServerGroupId', description='The HTTPS port number (virtual service group).', example='353', position='Query'),
  serviceWeight?: int32(name='ServiceWeight', description='The ID of the HTTP virtual service group.', example='80', position='Query'),
  slbId: string(name='SlbId', description='system error', example='lb-bp18t6jjskwxh6wy1****', position='Query'),
  type?: string(name='Type', description='The ID of the SLB instance.', example='PUB_NET', position='Query'),
  vServerGroupId?: string(name='VServerGroupId', description='The unique ID of the gateway.', example='353', position='Query'),
  vServiceList?: [ 
    {
      port?: int32(name='Port'),
      protocol?: string(name='Protocol'),
      vServerGroupId?: string(name='VServerGroupId'),
      vServerGroupName?: string(name='VServerGroupName'),
    }
  ](name='VServiceList', shrink='json', position='Query'),
}

model AddGatewaySlbResponseBody = {
  code?: int32(name='Code', description='The request is successfully processed.', example='200'),
  data?: string(name='Data', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='lb-uf6dqr4ondqi5w3df7hdf'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The ID of the request.', example='200'),
  message?: string(name='Message', description='The HTTP status code returned.', example='The message returned.

*   If the request is successful, a success message is returned.
*   If the request fails, an error message is returned.'),
  requestId?: string(name='RequestId', description='Schema of Response', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', description='The response code returned.', example='true'),
}

model AddGatewaySlbResponse = {
  headers: map[string]string(name='headers'),
  body: AddGatewaySlbResponseBody(name='body'),
}

async function addGatewaySlb(request: AddGatewaySlbRequest): AddGatewaySlbResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddGatewaySlb', 'POST', '/', 'json', false, 'json', request);
}

model AddMigrationTaskRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  clusterType?: string(name='ClusterType', description='clusterNotFound', example='Nacos-Ans', position='Query'),
  originInstanceAddress?: string(name='OriginInstanceAddress', description='cluster not found', example='192.168.1.1:8848', position='Query'),
  originInstanceName?: string(name='OriginInstanceName', description='mse-100-001', example='systemError', position='Query'),
  originInstanceNamespace?: string(name='OriginInstanceNamespace', description='system error', example='namesapceId1,namesapceId2', position='Query'),
  projectDesc?: string(name='ProjectDesc', position='Query'),
  requestPars?: string(name='RequestPars', description='mse-200-021', example='{}', position='Query'),
  targetClusterName?: string(name='TargetClusterName', position='Query'),
  targetClusterUrl?: string(name='TargetClusterUrl', example='mse-66*****-nacos-ans.mse.aliyuncs.com:8848', position='Query'),
  targetInstanceId?: string(name='TargetInstanceId', example='mse-cn-ud82*****', position='Query'),
}

model AddMigrationTaskResponseBody = {
  data?: {
    clusterType?: string(name='ClusterType', example='Nacos-Ans'),
    id?: string(name='Id', example='12'),
    originInstanceAddress?: string(name='OriginInstanceAddress', example='192.168.1.1:8848'),
    originInstanceName?: string(name='OriginInstanceName'),
    originInstanceNamespace?: string(name='OriginInstanceNamespace', example='namesapceId1,namesapceId2'),
    projectDesc?: string(name='ProjectDesc', example='testsdfsdfsd'),
    targetClusterName?: string(name='TargetClusterName'),
    targetClusterUrl?: string(name='TargetClusterUrl', example='mse-94d****-nacos-ans.mse.aliyuncs.com:8848'),
    targetInstanceId?: string(name='TargetInstanceId', example='mse-cn-7pp2w*****'),
    userId?: string(name='UserId', example='183876217*****'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  message?: string(name='Message', example='The request is processed successfully.'),
  requestId?: string(name='RequestId', example='7466566F-F30F-4A29-965D-3E0AF21D****'),
  success?: boolean(name='Success', example='true'),
}

model AddMigrationTaskResponse = {
  headers: map[string]string(name='headers'),
  body: AddMigrationTaskResponseBody(name='body'),
}

async function addMigrationTask(request: AddMigrationTaskRequest): AddMigrationTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddMigrationTask', 'POST', '/', 'json', false, 'json', request);
}

model AddMockRuleRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  consumerAppIds: string(name='ConsumerAppIds', example='[{\\"appName\\":\\"provide\\",\\"appId\\":\\"bst8l6o735@f6d8aaf6e56e67d\\"}]', position='Query'),
  dubboMockItems: string(name='DubboMockItems', example='[]', position='Query'),
  enable?: boolean(name='Enable', example='true', position='Query'),
  extraJson: string(name='ExtraJson', example='{}', position='Query'),
  mockType?: long(name='MockType', example='1', position='Query'),
  name: string(name='Name', example='agent-auto-test-sc', position='Query'),
  providerAppId?: string(name='ProviderAppId', example='dcqtkuhnc4@66e5235415****', position='Query'),
  providerAppName?: string(name='ProviderAppName', example='demo-cartservice', position='Query'),
  region: string(name='Region', example='cn-hangzhou', position='Query'),
  scMockItems: string(name='ScMockItems', example='[]', position='Query'),
  source: string(name='Source', example='edasmsc', position='Query'),
}

model AddMockRuleResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    accountId?: string(name='AccountId', example='178432728867xxxx'),
    consumerAppId?: string(name='ConsumerAppId', example='hkhon1po62@a000601b265xxxx'),
    consumerAppName?: string(name='ConsumerAppName', example='demo-xxxx'),
    enable?: boolean(name='Enable', example='true'),
    extraJson?: string(name='ExtraJson', example='desc'),
    id?: long(name='Id', example='275'),
    mockType?: long(name='MockType', example='0'),
    name?: string(name='Name', example='mse-bc1a29b0-160230875****-reg-center-0-1'),
    namespaceId?: string(name='NamespaceId', example='cn-shanghai'),
    providerAppId?: string(name='ProviderAppId', example='hkhon1po62@a000601b265xxxx'),
    providerAppName?: string(name='ProviderAppName', example='demo-xxxx'),
    region?: string(name='Region', example='cn-shanghai'),
    scMockItemJson?: string(name='ScMockItemJson', example='[{"oper":"return+json","Path":"/mock","Value":"{\\n \\"date\\": \\"2021-09-10T07:45:12.357+0000\\",\\n \\"name\\": \\"name\\",\\n \\"id\\": \\"1\\"\\n}","Method":"GET","Condition":"AND","Timeout":1,"ArgumentMockItems":[{"type":"param","name":"id","value":"1","cond":"==","operator":"rawvalue"},{"type":"param","name":"name","value":"aliyun","cond":"==","operator":"rawvalue"}]}]'),
    source?: string(name='Source', example='edasmsc'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', example='true'),
}

model AddMockRuleResponse = {
  headers: map[string]string(name='headers'),
  body: AddMockRuleResponseBody(name='body'),
}

async function addMockRule(request: AddMockRuleRequest): AddMockRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddMockRule', 'POST', '/', 'json', false, 'json', request);
}

model AddSSLCertRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  certIdentifier?: string(name='CertIdentifier', example='5213641-cn-hangzhou', position='Query'),
  domainId?: long(name='DomainId', example='0', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-c70622ff52fe49beb29bea9a6f52****', position='Query'),
}

model AddSSLCertResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='Id of the request', example='E1CC74F0-5BDE-5220-A031-5CA622D80723'),
  success?: boolean(name='Success', example='true'),
}

model AddSSLCertResponse = {
  headers: map[string]string(name='headers'),
  body: AddSSLCertResponseBody(name='body'),
}

async function addSSLCert(request: AddSSLCertRequest): AddSSLCertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddSSLCert', 'POST', '/', 'json', false, 'json', request);
}

model AddSecurityGroupRuleRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='system error', example='zh', position='Query'),
  description?: string(name='Description', description='systemError', example='description', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', description='mse-100-001', example='gw-c9bc5afd61014165bd58f621b491****', position='Query'),
  portRange: string(name='PortRange', description='cluster not found', example='1/65535', position='Query'),
  securityGroupId: string(name='SecurityGroupId', description='clusterNotFound', example='sg-wz929kxhcdpw9z8idqd8', position='Query'),
}

model AddSecurityGroupRuleResponseBody = {
  code?: int32(name='Code', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='200'),
  data?: string(name='Data', description='The ID of the request.', example='12'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The ID of the gateway.', example='200'),
  message?: string(name='Message', description='The description.', example='success'),
  requestId?: string(name='RequestId', description='The range of port numbers.', example='D0DB055C-51F2-5BB2-82A6-CD8A3C6EE6BA'),
  success?: boolean(name='Success', description='The schema of the response.', example='true'),
}

model AddSecurityGroupRuleResponse = {
  headers: map[string]string(name='headers'),
  body: AddSecurityGroupRuleResponseBody(name='body'),
}

async function addSecurityGroupRule(request: AddSecurityGroupRuleRequest): AddSecurityGroupRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddSecurityGroupRule', 'POST', '/', 'json', false, 'json', request);
}

model AddServiceSourceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='Specifies whether to monitor Ingress classes.', example='zh-CN', position='Query'),
  address?: string(name='Address', description='The language in which the returned information is displayed. Valid values:

*   zh-CN: Chinese. This is the default value.
*   en-US: English.
*   ja: Japanese.', example='c9ad2a0717032427e920754e25b49e3b5', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The ID of the request.', example='gw-c70622ff52fe49beb29bea9a6f52****', position='Query'),
  groupList?: [ string ](name='GroupList', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', shrink='json', position='Query'),
  ingressOptionsRequest?: {
    enableIngress?: boolean(name='EnableIngress', description='The message returned.', example='true'),
    enableStatus?: boolean(name='EnableStatus', description='The returned data.', example='true'),
    ingressClass?: string(name='IngressClass', description='The return value.', example='com.test.xxx'),
    watchNamespace?: string(name='WatchNamespace', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='default'),
  }(name='IngressOptionsRequest', description='The HTTP status code returned.', shrink='json', position='Query'),
  name?: string(name='Name', description='The data structure.', example='istio', position='Query'),
  pathList?: [ string ](name='PathList', description='An array of service root paths.', shrink='json', position='Query'),
  source?: string(name='Source', description='The root path of the service.', example='K8S，MSE', position='Query'),
  type?: string(name='Type', description='An array of service root paths.', example='K8S，NACOS', position='Query'),
}

model AddServiceSourceResponseBody = {
  code?: int32(name='Code', description='The address.', example='200'),
  data?: long(name='Data', description='The return value.', example='63'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The namespace whose resources you want to monitor.', example='200'),
  message?: string(name='Message', description='Specifies whether to update the Ingress status.', example='You are not authorized to perform this operation. Action: mse:AddServiceSource, Resource: acs:mse:cn-hangzhou:1105471854403716:instance/gw-082c943a8c304e48a37a7a29a5ddeda7'),
  requestId?: string(name='RequestId', description='The root path of the service.', example='D0DB055C-51F2-5BB2-82A6-CD8A3C6EE6BA'),
  success?: boolean(name='Success', description='The list of service groups.', example='true'),
}

model AddServiceSourceResponse = {
  headers: map[string]string(name='headers'),
  body: AddServiceSourceResponseBody(name='body'),
}

async function addServiceSource(request: AddServiceSourceRequest): AddServiceSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddServiceSource', 'POST', '/', 'json', false, 'json', request);
}

model ApplyGatewayRouteRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='duplicated cluster alias name', example='zh', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='duplicatedClusterAliasName', example='gw-1a4ab101d5924b6f92c5ec98a841761f', position='Query'),
  routeId?: string(name='RouteId', description='mse-200-105', example='950', position='Query'),
}

model ApplyGatewayRouteResponseBody = {
  code?: int32(name='Code', description='clusterNotFound', example='200'),
  data?: boolean(name='Data', description='mse-100-001', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', description='illegal request:%s', example='200'),
  message?: string(name='Message', description='mse-200-021', example='success'),
  requestId?: string(name='RequestId', description='illegalRequest', example='1DB1AB36-8395-540E-AACC-7571D6B2057A'),
  success?: boolean(name='Success', description='cluster not found', example='true'),
}

model ApplyGatewayRouteResponse = {
  headers: map[string]string(name='headers'),
  body: ApplyGatewayRouteResponseBody(name='body'),
}

async function applyGatewayRoute(request: ApplyGatewayRouteRequest): ApplyGatewayRouteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplyGatewayRoute', 'POST', '/', 'json', false, 'json', request);
}

model ApplyTagPoliciesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  appId: string(name='AppId', example='h5pohqu3gd@xxx', deprecated='true', position='Query'),
  appName?: string(name='AppName', description='应用名字', example='example-app', maxLength=64, position='Query'),
  enable?: boolean(name='Enable', example='true', position='Query'),
  namespace?: string(name='Namespace', description='应用所属的MSE命名空间', example='default', maxLength=64, position='Query'),
  namespaceId?: string(name='NamespaceId', example='12233****', position='Query'),
  region: string(name='Region', example='cn-hangzhou', position='Query'),
  rules?: string(name='Rules', position='Query'),
  source?: string(name='Source', example='edasmsc', position='Query'),
}

model ApplyTagPoliciesResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      carryData?: boolean(name='CarryData', example='true'),
      enable?: boolean(name='Enable', example='true'),
      id?: long(name='Id', example='12'),
      instanceNum?: int32(name='InstanceNum', example='1'),
      name?: string(name='Name', example='test'),
      rate?: int32(name='Rate', example='10'),
      remove?: boolean(name='Remove'),
      rules?: string(name='Rules', example='{\\"_base\\": {\\"rate\\": 100, \\"remove\\": true}, \\"blue\\": {\\"rate\\": 0}}'),
      status?: int32(name='Status', example='1'),
      tag?: string(name='Tag', example='gray'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', example='true'),
}

model ApplyTagPoliciesResponse = {
  headers: map[string]string(name='headers'),
  body: ApplyTagPoliciesResponseBody(name='body'),
}

async function applyTagPolicies(request: ApplyTagPoliciesRequest): ApplyTagPoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplyTagPolicies', 'POST', '/', 'json', false, 'json', request);
}

model CloneNacosConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  ids: string(name='Ids', example='253661,253662', position='Query'),
  instanceId: string(name='InstanceId', example='mse_prepaid_public_cn-i7m25igg403', position='Query'),
  originNamespaceId?: string(name='OriginNamespaceId', example='be821963-6d48-4ea5-9910-6057d****', position='Query'),
  policy: string(name='Policy', example='OVERWRITE', position='Query'),
  targetNamespaceId?: string(name='TargetNamespaceId', example='08be4b5d-2d1c-4e6e-aa85-83b9****', position='Query'),
}

model CloneNacosConfigResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    failData?: [ 
      {
        dataId?: string(name='DataId', example='test2.yaml'),
        group?: string(name='Group', example='test'),
      }
    ](name='FailData'),
    skipCount?: int32(name='SkipCount', example='1'),
    skipData?: [ 
      {
        dataId?: string(name='DataId', example='test.yaml'),
        group?: string(name='Group', example='public'),
      }
    ](name='SkipData'),
    succCount?: int32(name='SuccCount', example='100'),
  }(name='Data'),
  dynamicMessage?: string(name='DynamicMessage', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='Clone Completed Successfully'),
  requestId?: string(name='RequestId', example='6678DBA9-5600-5948-ACF8-ED3105B288A3'),
  success?: boolean(name='Success', example='true'),
}

model CloneNacosConfigResponse = {
  headers: map[string]string(name='headers'),
  body: CloneNacosConfigResponseBody(name='body'),
}

async function cloneNacosConfig(request: CloneNacosConfigRequest): CloneNacosConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CloneNacosConfig', 'POST', '/', 'json', false, 'json', request);
}

model CreateApplicationRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  appName: string(name='AppName', description='应用名。', example='spring-cloud-a', position='Query'),
  language?: string(name='Language', example='JAVA', position='Query'),
  namespace?: string(name='Namespace', description='应用所属的MSE命名空间。', example='prod', maxLength=64, position='Query'),
  region: string(name='Region', description='地域。', example='cn-hangzhou', position='Query'),
  sentinelEnable?: string(name='SentinelEnable', example='true', position='Query'),
  source?: string(name='Source', example='ACK', position='Query'),
  switchEnable?: string(name='SwitchEnable', example='true', position='Query'),
}

model CreateApplicationResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    appId?: string(name='AppId', example='xxxxxxxx@xxxxxxxxxx'),
    appName?: string(name='AppName', example='spring-cloud-a'),
    createTime?: long(name='CreateTime', example='1631001140913'),
    extraInfo?: string(name='ExtraInfo', example='{\\"rpcTypes\\":[\\"dubbo\\",\\"springCloud\\"]}'),
    language?: string(name='Language', example='JAVA'),
    licenseKey?: string(name='LicenseKey', example='xxxxxxxx@xxxxxxxxxx'),
    namespace?: string(name='Namespace', example='prod'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    source?: string(name='Source', example='ACK'),
    status?: int32(name='Status', example='1'),
    updateTime?: long(name='UpdateTime', example='1632979237663'),
    userId?: string(name='UserId', example='1888888888'),
    version?: string(name='Version', example='1.0.0'),
  }(name='Data', example='data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='68D91223-CCE9-5F9C-B538-20F617DA48B1'),
  success?: string(name='Success', example='true'),
}

model CreateApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: CreateApplicationResponseBody(name='body'),
}

async function createApplication(request: CreateApplicationRequest): CreateApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateApplication', 'POST', '/', 'json', false, 'json', request);
}

model CreateCircuitBreakerRuleRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  appId?: string(name='AppId', description='应用ID。', example='hkhon1po62@c3df23522bXXXXX', position='Query'),
  appName: string(name='AppName', description='应用名称。', example='spring-cloud-a', position='Query'),
  enable: boolean(name='Enable', description='规则的启用状态。', example='true', position='Query'),
  halfOpenBaseAmountPerStep?: int32(name='HalfOpenBaseAmountPerStep', description='熔断恢复每步最小通过数目，默认值为1。', example='5', position='Query'),
  halfOpenRecoveryStepNum?: int32(name='HalfOpenRecoveryStepNum', description='熔断恢复阶段数，默认值为1。', example='1', position='Query'),
  maxAllowedRtMs?: int32(name='MaxAllowedRtMs', description='慢调用RT（单位毫秒）：超过该时长则判定为慢请求，阈值类型为慢调用比例时必填。', example='200', position='Query'),
  minRequestAmount?: int32(name='MinRequestAmount', description='触发熔断的最小请求数目，若当前统计窗口请求数小于此值，即使达到熔断条件规则也不会触发。默认值为10。', example='10', position='Query'),
  namespace: string(name='Namespace', description='应用所属的微服务命名空间。', example='default', position='Query'),
  regionId?: string(name='RegionId', description='集群所在地域。', example='cn-hangzhou', position='Query'),
  resource: string(name='Resource', description='接口名称：适用该规则的应用资源。需要与控制台接口详情处接口名称一致。', example='/a', position='Query'),
  retryTimeoutMs?: int32(name='RetryTimeoutMs', description='熔断时长（单位毫秒）：即熔断触发后持续的时间。资源进入熔断状态后，在配置的熔断时长内，请求都会快速失败。取值需要为1000的整数倍，默认值为10000，即10秒。', example='10000', position='Query'),
  statIntervalMs?: int32(name='StatIntervalMs', description='统计窗口时长（单位毫秒）：统计的时间窗口长度，取值范围为1秒~120分钟。默认值为20000，即20秒。', example='20000', position='Query'),
  strategy: int32(name='Strategy', description='阈值类型：选择以慢调用比例或异常比例作为阈值。', example='0', position='Query'),
  threshold: float(name='Threshold', description='熔断比例阈值：触发熔断的比例阈值，取值范围为0 - 1，代表0% - 100%。', example='0.8', position='Query'),
}

model CreateCircuitBreakerRuleResponseBody = {
  code?: string(name='Code', description='响应码。', example='200'),
  data?: {
    appId?: string(name='AppId', description='应用ID。', example='hkhon1po62@c3df23522bXXXXX'),
    appName?: string(name='AppName', description='应用名称。', example='spring-cloud-a'),
    enable?: boolean(name='Enable', description='规则的启用状态。', example='true'),
    halfOpenBaseAmountPerStep?: int32(name='HalfOpenBaseAmountPerStep', description='熔断恢复每步最小通过数目。', example='5'),
    halfOpenRecoveryStepNum?: int32(name='HalfOpenRecoveryStepNum', description='熔断恢复阶段数。', example='1'),
    id?: long(name='Id', description='规则ID。', example='1'),
    maxAllowedRtMs?: int32(name='MaxAllowedRtMs', description='慢调用RT（单位毫秒）：超过该时长则判定为慢请求，阈值类型为慢调用比例时必填。', example='200'),
    minRequestAmount?: int32(name='MinRequestAmount', description='触发熔断的最小请求数目，若当前统计窗口请求数小于此值，即使达到熔断条件规则也不会触发。', example='10'),
    namespace?: string(name='Namespace', description='应用所属的微服务命空间。', example='default'),
    regionId?: string(name='RegionId', description='集群所在地域。', example='cn-hangzhou'),
    resource?: string(name='Resource', description='接口名称：适用该规则的应用资源。需要与控制台接口详情处接口名称一致。', example='/a'),
    retryTimeoutMs?: int32(name='RetryTimeoutMs', description='熔断时长（单位毫秒）：即熔断触发后持续的时间。资源进入熔断状态后，在配置的熔断时长内，请求都会快速失败。', example='10000'),
    statIntervalMs?: int32(name='StatIntervalMs', description='统计窗口时长（单位毫秒）：统计的时间窗口长度，取值范围为1秒~120分钟。', example='20000'),
    strategy?: int32(name='Strategy', description='阈值类型：选择以慢调用比例或异常比例作为阈值。', example='0'),
    threshold?: float(name='Threshold', description='熔断比例阈值：触发熔断的比例阈值，取值范围为0 - 1，代表0% - 100%。', example='0.8'),
  }(name='Data', description='规则信息。'),
  message?: string(name='Message', description='响应信息。', example='OK'),
  requestId?: string(name='RequestId', description='请求ID。', example='EE5C32A1-BC0E-4B79-817C-103E4EDF****'),
  success?: boolean(name='Success', description='请求结果。', example='true'),
}

model CreateCircuitBreakerRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCircuitBreakerRuleResponseBody(name='body'),
}

async function createCircuitBreakerRule(request: CreateCircuitBreakerRuleRequest): CreateCircuitBreakerRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCircuitBreakerRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateClusterRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The request is successfully processed.', example='zh', position='Query'),
  chargeType?: string(name='ChargeType', example='POSTPAY', position='Query'),
  clusterSpecification: string(name='ClusterSpecification', description='The specifications of the internal-facing SLB instance. Valid values:

*   `slb.s1.small`
*   `slb.s3.medium`', example='MSE_SC_2_4_60_c', position='Query'),
  clusterType: string(name='ClusterType', description='The extended request parameters in the JSON format.', example='Nacos-Ans', position='Query'),
  clusterVersion: string(name='ClusterVersion', description='The network connection type. Valid values:

*   slb
*   eni', example='NACOS_2_0_0', position='Query'),
  connectionType?: string(name='ConnectionType', description='The ID of the resource group. For the details of resource groups, see [View basic information of a resource group](~~457230~~).', example='slb', position='Query'),
  diskType?: string(name='DiskType', description='The number of nodes in the instance. Valid values: 1 to 9.

\\[Professional Edition]

*   The number of nodes in an instance is greater than or equal to 3 and must be an odd number.

\\[Developer Edition]

*   Only one node can be deployed for an instance.', example='alicloud-disk-ssd', position='Query'),
  instanceCount: int32(name='InstanceCount', description='The region where the instance resides. Examples:

*   `cn-hangzhou`: China (Hangzhou)
*   `cn-beijing`: China (Beijing)
*   `cn-shanghai`: China (Shanghai)
*   `cn-zhangjiakou`: China (Zhangjiakou)
*   `cn-shenzhen`: China (Shenzhen)', example='3', position='Query'),
  instanceName?: string(name='InstanceName', description='The key of a tag.', example='tanshuyingtest001', position='Query'),
  mseVersion?: string(name='MseVersion', description='The tags.', example='mse_pro', position='Query'),
  netType: string(name='NetType', description='The engine version of the instance. Valid values:

\\[Professional version]

*   `NACOS_2_0_0`: Nacos 2.0.0
*   `ZooKeeper_3_8_0`: ZooKeeper 3.8.0

\\[Developer Edition]

*   `NACOS_2_0_0`: Nacos 2.0.0
*   `ZooKeeper_3_8_0`: ZooKeeper 3.8.0', example='privatenet', position='Query'),
  privateSlbSpecification?: string(name='PrivateSlbSpecification', description='The name of the instance.', example='slb.s1.small', position='Query'),
  pubNetworkFlow?: string(name='PubNetworkFlow', description='The network type of the MSE instance. Valid values:

*   `privatenet`: VPC
*   `pubnet`: Internet', example='0', position='Query'),
  pubSlbSpecification?: string(name='PubSlbSpecification', description='The ID of the vSwitch.', example='slb.s1.small', position='Query'),
  region?: string(name='Region', description='Set this parameter unless otherwise specified. Valid values:

*   `mse_pro`: Professional Edition
*   `mse_dev`: Developer Edition', example='cn-hangzhou', position='Query'),
  requestPars?: string(name='RequestPars', description='The list of the tags that you want to add.', example='{}', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The value of a tag.', example='rg-aekzcqmoay3dlyq', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The ID of the request.', example='env'),
      value?: string(name='Value', description='The message returned.', example='prd'),
    }
  ](name='Tag', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', position='Query'),
  vSwitchId?: string(name='VSwitchId', description='The type of the instance. Valid values: ZooKeeper and Nacos-Ans.', example='vsw-bp17opt4v18sto39k****', position='Query'),
  vpcId?: string(name='VpcId', description='The engine specifications. Valid values:

\\[Professional Edition]

*   `MSE_SC_2_4_60_c`: 2 vCPUs and 4 GB of memory
*   `MSE_SC_1_2_60_c`: 1 vCPU and 2 GB of memory
*   `MSE_SC_4_8_60_c`: 4 vCPUs and 8 GB of memory
*   `MSE_SC_8_16_60_c`: 8 vCPUs and 16 GB of memory
*   `MSE_SC_16_32_60_c`: 16 vCPUs and 32 GB of memory

\\[Developer Edition]

*   `MSE_SC_1_2_60_c`: 1 vCPU and 2 GB of memory
*   `MSE_SC_2_4_60_c`: 2 vCPUs and 4 GB of memory', example='vpc-bp1t50e045b5g7i3p****', position='Query'),
}

model CreateClusterResponseBody = {
  errorCode?: string(name='ErrorCode', description='duplicatedClusterAliasName', example='mse-100-000'),
  instanceId?: string(name='InstanceId', description='mse-200-105', example='mse-cn-st21ri2****'),
  message?: string(name='Message', description='The ID of the order.', example='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.'),
  orderId?: string(name='OrderId', description='duplicated cluster alias name', example='20574710974****'),
  requestId?: string(name='RequestId', description='The error code returned if the request failed.', example='dc63-465d-8ef5-20dc18af****'),
  success?: boolean(name='Success', description='mse-100-007', example='true'),
}

model CreateClusterResponse = {
  headers: map[string]string(name='headers'),
  body: CreateClusterResponseBody(name='body'),
}

/**
  * mse-200-105
  *
 * @tags cluster
 */
async function createCluster(request: CreateClusterRequest): CreateClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCluster', 'POST', '/', 'json', false, 'json', request);
}

model CreateEngineNamespaceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  clusterId?: string(name='ClusterId', description='The description of the namespace.', example='mse-98s****', position='Query'),
  desc?: string(name='Desc', description='The ID of the instance.', example='The quota of configurations.', position='Query'),
  id?: string(name='Id', description='Creates a namespace in a Nacos instance.', example='f4fa5b81-2f26-4900-833a-7516b315ebb2', position='Query'),
  instanceId?: string(name='InstanceId', description='The details of the data.', example='mse-cn-st21ri2****', position='Query'),
  name: string(name='Name', description='Development environment', example='dev', position='Query'),
  serviceCount?: int32(name='ServiceCount', description='The ID of the request.', example='100', position='Query'),
}

model CreateEngineNamespaceResponseBody = {
  clusterId?: string(name='ClusterId', example='mse-892k****'),
  data?: {
    configCount?: int32(name='ConfigCount', example='1'),
    namespace?: string(name='Namespace', example='f4fa5b81-2f26-4900-833a-7516b315ebb2'),
    namespaceDesc?: string(name='NamespaceDesc', example='mytest'),
    namespaceShowName?: string(name='NamespaceShowName', example='dev'),
    quota?: int32(name='Quota', example='1'),
    serviceCount?: int32(name='ServiceCount', example='3'),
    type?: int32(name='Type', example='1'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='F6092602-C357-4750-89D9-E572FBEA****'),
  success?: boolean(name='Success', example='true'),
}

model CreateEngineNamespaceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEngineNamespaceResponseBody(name='body'),
}

async function createEngineNamespace(request: CreateEngineNamespaceRequest): CreateEngineNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEngineNamespace', 'POST', '/', 'json', false, 'json', request);
}

model CreateFlowRuleRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  appId?: string(name='AppId', example='ib09eblv6p@c3df23522******', position='Query'),
  appName: string(name='AppName', example='spring-cloud-a', position='Query'),
  controlBehavior?: int32(name='ControlBehavior', example='0', position='Query'),
  enable: boolean(name='Enable', example='false', position='Query'),
  maxQueueingTimeMs?: int32(name='MaxQueueingTimeMs', example='10', position='Query'),
  namespace: string(name='Namespace', example='default', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resource: string(name='Resource', example='/b', position='Query'),
  threshold: int32(name='Threshold', example='20', position='Query'),
}

model CreateFlowRuleResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    appId?: string(name='AppId', example='hkhon1po62@54e1f42f3******'),
    appName?: string(name='AppName', example='spring-cloud-a'),
    controlBehavior?: int32(name='ControlBehavior', example='0'),
    enable?: boolean(name='Enable', example='true'),
    id?: long(name='Id', description='ID。', example='12'),
    maxQueueingTimeMs?: int32(name='MaxQueueingTimeMs', example='500'),
    namespace?: string(name='Namespace', example='default'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    resource?: string(name='Resource', example='app'),
    threshold?: float(name='Threshold', example='200'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='69AD2AA7-DB47-449B-941B-B14409DF****'),
  success?: boolean(name='Success', example='true'),
}

model CreateFlowRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFlowRuleResponseBody(name='body'),
}

async function createFlowRule(request: CreateFlowRuleRequest): CreateFlowRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFlowRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateMseServiceApplicationRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The name of the application.', example='zh', position='Query'),
  appName: string(name='AppName', description='edasmsc', example='bsd-xxyp-open-goods-server', position='Query'),
  extraInfo?: string(name='ExtraInfo', description='The ID of the region.', example='{}', position='Query'),
  language?: string(name='Language', description='The additional information.', example='JAVA', position='Query'),
  mseVersion?: string(name='MseVersion', description='Creates an application.', example='mse_pro', position='Query'),
  region: string(name='Region', description='The creation time.', example='cn-shenzhen', position='Query'),
  sentinelEnable?: string(name='SentinelEnable', description='The source type.', example='true', position='Query'),
  source?: string(name='Source', description='The last modification time.', example='edasmsc', position='Query'),
  switchEnable?: string(name='SwitchEnable', description='The ID of the request.', example='true', position='Query'),
}

model CreateMseServiceApplicationResponseBody = {
  code?: int32(name='Code', description='The license key in use.', example='200'),
  data?: {
    appId?: string(name='AppId', description='The ID of the request.', example='xxxxxxxx@xxxxxxxxxx'),
    appName?: string(name='AppName', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='spring-cloud-a'),
    createTime?: long(name='CreateTime', description='The request was successfully processed.', example='1631001140913'),
    extraInfo?: string(name='ExtraInfo', description='The edition of the MSE instance that you want to purchase.

*   mse_pro: Professional Edition
*   mse_dev: Developer Edition', example='{}'),
    language?: string(name='Language', description='The additional information.', example='JAVA'),
    licenseKey?: string(name='LicenseKey', description='The message returned.', example='xxxxxxxx@xxxxxxxxxx'),
    regionId?: string(name='RegionId', description='The name of the application.', example='cn-hangzhou'),
    source?: string(name='Source', description='The status. Valid values: 1: available; 2: deleted', example='edasmsc'),
    status?: int32(name='Status', description='Specifies whether to enable switching.', example='1'),
    updateTime?: long(name='UpdateTime', description='The data structure.', example='1632979237663'),
    userId?: string(name='UserId', description='The data structure.', example='1234567890'),
    version?: string(name='Version', description='The last modification time.', example='1.0.0'),
  }(name='Data', description='Specifies whether to enable the Sentinel-compatible mode.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The application ID.', example='200'),
  message?: string(name='Message', description='The source.', example='The programming language of the application.'),
  requestId?: string(name='RequestId', description='The additional information.', example='904F6C04-1284-****-8ED2-FFC57E507A72'),
  success?: string(name='Success', description='The creation time.', example='true'),
}

model CreateMseServiceApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMseServiceApplicationResponseBody(name='body'),
}

/**
  * @deprecated
  *
 * @tags msc
 */
// Deprecated
async function createMseServiceApplication(request: CreateMseServiceApplicationRequest): CreateMseServiceApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMseServiceApplication', 'POST', '/', 'json', false, 'json', request);
}

model CreateNacosConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The HTTP status code.', example='zh', position='Query'),
  appName?: string(name='AppName', description='Basic configurations', example='saledatacenter-task', position='Query'),
  betaIps?: string(name='BetaIps', description='The data structure.', example='100.117.XX.XX,100.117.XX.XX', position='Query'),
  content?: string(name='Content', description='The list of IP addresses where the beta release of the configuration is performed.', example='asdf', position='Query'),
  dataId: string(name='DataId', description='The name of the application.', example='common.yaml', position='Query'),
  desc?: string(name='Desc', description='The format of the configuration. Supported formats include TEXT, JSON, and XML.', example='The content of the configuration.', position='Query'),
  group: string(name='Group', description='The tags of the configuration.', example='alime-bridge-aliyun', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the group.', example='mse_prepaid_public_cn-tl32****', position='Query'),
  namespaceId?: string(name='NamespaceId', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='547fd2a0-d0d6-****-80db2a1afb82', position='Query'),
  tags?: string(name='Tags', description='The description of the configuration.', example='Basic module configuration.', position='Query'),
  type?: string(name='Type', description='The ID of the namespace.', example='text', position='Query'),
}

model CreateNacosConfigResponseBody = {
  code?: string(name='Code', description='mse-200-105', example='1'),
  errorCode?: string(name='ErrorCode', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The error message returned.', example='202'),
  message?: string(name='Message', description='The error code returned if the request failed.', example='The code returned.'),
  requestId?: string(name='RequestId', description='The request was successfully processed.', example='673DBD43-569E-510F-B3DE-20BB8DFEB20A'),
  success?: boolean(name='Success', description='duplicatedClusterAliasName', example='true'),
}

model CreateNacosConfigResponse = {
  headers: map[string]string(name='headers'),
  body: CreateNacosConfigResponseBody(name='body'),
}

/**
  * mse-200-105
  *
 * @tags cluster
 */
async function createNacosConfig(request: CreateNacosConfigRequest): CreateNacosConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNacosConfig', 'POST', '/', 'json', false, 'json', request);
}

model CreateNacosInstanceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  clusterName?: string(name='ClusterName', description='Nacos集群名', example='DEFAULT', position='Query'),
  enabled: boolean(name='Enabled', description='服务禁用标志', example='true', position='Query'),
  ephemeral: boolean(name='Ephemeral', description='临时节点标志', example='false', position='Query'),
  groupName: string(name='GroupName', description='分组名', example='DEFAULT_GROUP', position='Query'),
  instanceId: string(name='InstanceId', description='实例id', example='mse-cn-123456', position='Query'),
  ip: string(name='Ip', description='Nacos实例ip', example='1.2.xx.xx', position='Query'),
  metadata?: string(name='Metadata', description='节点元数据', example='{\\"grayversion\\":\\"1.0\\",\\"preserved.register.source\\":\\"SPRING_CLOUD\\",\\"management.context-path\\":\\"\\"}', position='Body'),
  namespaceId?: string(name='NamespaceId', description='命名空间id', example='9e78a671-4b9b-4dd4-99c1-0b9da87****', position='Query'),
  port: int32(name='Port', description='Nacos实例端口', example='12281', minimum=0, maximum=65535, position='Query'),
  serviceName: string(name='ServiceName', description='服务名', example='hello_service', position='Query'),
  weight: string(name='Weight', description='权重', example='1', position='Query'),
}

model CreateNacosInstanceResponseBody = {
  code?: int32(name='Code', description='响应码', example='200'),
  data?: string(name='Data', description='修改结果', example='ok'),
  httpStatusCode?: int32(name='HttpStatusCode', description='http状态码', example='200'),
  message?: string(name='Message', description='响应信息', example='请求成功'),
  requestId?: string(name='RequestId', description='请求id', example='9e78a671-4b9b-4dd4-99c1-0b9da87d3dec'),
  success?: boolean(name='Success', description='成功标志', example='true'),
}

model CreateNacosInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateNacosInstanceResponseBody(name='body'),
}

async function createNacosInstance(request: CreateNacosInstanceRequest): CreateNacosInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNacosInstance', 'POST', '/', 'json', true, 'form', request);
}

model CreateNacosServiceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The ID of the request.', example='zh', position='Query'),
  clusterId?: string(name='ClusterId', description='The data structure.', example='mse-3691a080', position='Query'),
  ephemeral?: boolean(name='Ephemeral', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='true', position='Query'),
  groupName?: string(name='GroupName', description='The protection threshold.', example='DEFAULT_GROUP', position='Query'),
  instanceId?: string(name='InstanceId', description='The name of the group.', example='mse-cn-st21ri2****', position='Query'),
  namespaceId?: string(name='NamespaceId', description='Specifies whether the instance is marked as a temporary node. Valid values:

*   `true`: yes
*   `false`: no', example='production', position='Query'),
  protectThreshold?: string(name='ProtectThreshold', description='The ID of the cluster.

> This operation contains both the InstanceId and ClusterId parameters. You must specify one of them.', example='0', position='Query'),
  serviceName: string(name='ServiceName', description='The ID of the namespace.', example='com.alibabacloud.hipstershop.cartserviceapi.service.CartService', position='Query'),
}

model CreateNacosServiceResponseBody = {
  code?: int32(name='Code', description='The returned message.', example='200'),
  data?: string(name='Data', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='data'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The response code returned.', example='200'),
  message?: string(name='Message', description='duplicatedClusterAliasName', example='success'),
  requestId?: string(name='RequestId', description='The data of the node.', example='5B170A0D-2C5D-4CF8-B808-03966B86****'),
  success?: boolean(name='Success', description='mse-200-105', example='True'),
}

model CreateNacosServiceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateNacosServiceResponseBody(name='body'),
}

/**
  * mse-200-105
  *
 * @tags cluster
 */
async function createNacosService(request: CreateNacosServiceRequest): CreateNacosServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNacosService', 'POST', '/', 'json', false, 'json', request);
}

model CreateOrUpdateSwimmingLaneRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  enable?: boolean(name='Enable', description='是否开启。', example='true', position='Query'),
  enableRules?: boolean(name='EnableRules', description='是否开启规则', example='false', position='Query'),
  entryRule?: string(name='EntryRule', description='json string', position='Query'),
  entryRules?: [ 
    {
      condition?: string(name='Condition', description='指示RestItems如何组合成最终的条件', example='AND'),
      paths?: [ string ](name='Paths', description='路径列表'),
      priority?: int32(name='Priority', description='优先级'),
      restItems?: [ 
        {
          cond?: string(name='Cond', description='匹配符'),
          datum?: string(name='Datum', description='数值'),
          divisor?: int32(name='Divisor', description='除数'),
          name?: string(name='Name', description='名称'),
          nameList?: [ string ](name='NameList', description='匹配列表'),
          operator?: string(name='Operator', description='操作符'),
          rate?: int32(name='Rate', description='百分比'),
          remainder?: int32(name='Remainder', description='余数'),
          type?: string(name='Type', description='匹配类型'),
          value?: string(name='Value', description='值'),
        }
      ](name='RestItems', description='匹配列表'),
    }
  ](name='EntryRules', description='SwimmingLane', position='Body'),
  gatewaySwimmingLaneRouteJson?: {
    conditions?: [ 
      {
        cond?: string(name='Cond'),
        name?: string(name='Name'),
        type?: string(name='Type'),
        value?: string(name='Value'),
      }
    ](name='Conditions'),
    gatewayId?: long(name='GatewayId'),
    gatewayUniqueId?: string(name='GatewayUniqueId'),
    routeIdList?: [ long ](name='RouteIdList'),
  }(name='GatewaySwimmingLaneRouteJson', shrink='json', position='Query'),
  groupId?: long(name='GroupId', description='所属泳道组', example='115', position='Query'),
  id?: long(name='Id', description='泳道Id。如果没有则为新增', example='-1', position='Query'),
  name: string(name='Name', description='名称', position='Query'),
  namespace?: string(name='Namespace', description='MSE命名空间名字', example='default', maxLength=64, position='Query'),
  regionId?: string(name='RegionId', description='region', example='cn-beijing', position='Query'),
  tag?: string(name='Tag', description='匹配到后的目标机器标签', example='gray', position='Query'),
}

model CreateOrUpdateSwimmingLaneResponseBody = {
  code?: int32(name='Code', description='code仅仅用来和success同步', example='200'),
  data?: {
    enable?: boolean(name='enable'),
    enableRules?: boolean(name='enableRules'),
    entryRule?: string(name='entryRule'),
    entryRules?: [ 
      {
        condition?: string(name='condition'),
        path?: string(name='path'),
        paths?: [ string ](name='paths'),
        restItems?: [ 
          {
            cond?: string(name='cond', description='匹配符'),
            datum?: string(name='datum', description='数值'),
            divisor?: int32(name='divisor', description='除数'),
            name?: string(name='name', description='名称'),
            nameList?: [ string ](name='nameList', description='匹配列表'),
            operator?: string(name='operator', description='操作符'),
            rate?: int32(name='rate', description='百分比'),
            remainder?: int32(name='remainder', description='余数'),
            type?: string(name='type', description='匹配类型'),
            value?: string(name='value', description='值'),
          }
        ](name='restItems'),
      }
    ](name='entryRules'),
    gatewaySwimmingLaneRouteJson?: string(name='gatewaySwimmingLaneRouteJson'),
    gmtCreate?: string(name='gmtCreate'),
    gmtModified?: string(name='gmtModified'),
    groupId?: long(name='groupId'),
    id?: long(name='id'),
    name?: string(name='name'),
    regionId?: string(name='regionId'),
    status?: int32(name='status'),
    tag?: string(name='tag'),
  }(name='Data', example='{}'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='EE5C32A1-BC0E-4B79-817C-103E4EDF****'),
  success?: boolean(name='Success', example='true'),
}

model CreateOrUpdateSwimmingLaneResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOrUpdateSwimmingLaneResponseBody(name='body'),
}

async function createOrUpdateSwimmingLane(request: CreateOrUpdateSwimmingLaneRequest): CreateOrUpdateSwimmingLaneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOrUpdateSwimmingLane', 'POST', '/', 'json', true, 'form', request);
}

model CreateOrUpdateSwimmingLaneGroupRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  appIds?: string(name='AppIds', description='应用集合。以 "," 分割应用 id', example='hkhon1po62@c3df23522baa898,hkhon1po62@66e5235415730a5,hkhon1po62@958bba95910341f', position='Query'),
  dbGrayEnable?: boolean(name='DbGrayEnable', description='是否开启数据库灰度', example='true', position='Query'),
  enable?: boolean(name='Enable', description='是否开启。', example='true', position='Query'),
  entryApp?: string(name='EntryApp', description='入口应用。格式 "来源系统:id"，比如 EDAS:UUID 或者 CSB:UUID', example='Ingress', position='Query'),
  id?: long(name='Id', description='主键ID。由SP生成(数据库自增主键)。', example='120', position='Query'),
  messageQueueFilterSide?: string(name='MessageQueueFilterSide', description='消息灰度过滤侧', example='Server', position='Query'),
  messageQueueGrayEnable?: boolean(name='MessageQueueGrayEnable', description='是否开启消息灰度', example='true', position='Query'),
  name: string(name='Name', description='名称', example='group1', position='Query'),
  namespace?: string(name='Namespace', description='MSE命名空间名字', example='default', maxLength=64, position='Query'),
  recordCanaryDetail?: boolean(name='RecordCanaryDetail', description='是否开启记录请求详情。', position='Query'),
  region?: string(name='Region', description='region', example='cn-shanghai', position='Query'),
  status?: int32(name='Status', description='0 未生效', example='0', position='Query'),
}

model CreateOrUpdateSwimmingLaneGroupResponseBody = {
  code?: int32(name='Code', description='code仅仅用来和success同步', example='200'),
  data?: {
    appIds?: string(name='AppIds'),
    dbGrayEnable?: string(name='DbGrayEnable', description='是否开启数据库灰度', example='true'),
    enable?: string(name='Enable'),
    entryApp?: string(name='EntryApp'),
    id?: long(name='Id'),
    messageQueueFilterSide?: string(name='MessageQueueFilterSide', description='消息灰度过滤侧', example='Client'),
    messageQueueGrayEnable?: boolean(name='MessageQueueGrayEnable'),
    name?: string(name='Name', description='应用名', example='example-app'),
    namespace?: string(name='Namespace', description='MSE命名空间名字', example='prod'),
    recordCanaryDetail?: boolean(name='RecordCanaryDetail'),
    region?: string(name='Region'),
    source?: string(name='Source'),
    status?: int32(name='Status'),
    userId?: string(name='UserId'),
  }(name='Data', example='{}'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='EE5C32A1-BC0E-4B79-817C-103E4EDF****'),
  success?: boolean(name='Success', example='true'),
}

model CreateOrUpdateSwimmingLaneGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOrUpdateSwimmingLaneGroupResponseBody(name='body'),
}

async function createOrUpdateSwimmingLaneGroup(request: CreateOrUpdateSwimmingLaneGroupRequest): CreateOrUpdateSwimmingLaneGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOrUpdateSwimmingLaneGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateZnodeRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  clusterId?: string(name='ClusterId', example='mse-09k1q11****', position='Query'),
  data?: string(name='Data', example='data', position='Query'),
  path?: string(name='Path', example='/zookeeper', position='Query'),
}

model CreateZnodeResponseBody = {
  data?: {
    data?: string(name='Data', example='cluster'),
    dir?: boolean(name='Dir', example='true'),
    name?: string(name='Name', example='mse-bc1a29b0-160230875****-reg-center-0-1'),
    path?: string(name='Path', example='/'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpCode?: string(name='HttpCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='DC34E4A3-5F1C-4E40-86EA-02EDF967****'),
  success?: boolean(name='Success', example='true'),
}

model CreateZnodeResponse = {
  headers: map[string]string(name='headers'),
  body: CreateZnodeResponseBody(name='body'),
}

async function createZnode(request: CreateZnodeRequest): CreateZnodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateZnode', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAuthResourceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-3f97e2989c344f35ab3fd62b19f1****', position='Query'),
  id?: long(name='Id', example='36', position='Query'),
}

model DeleteAuthResourceResponseBody = {
  code?: int32(name='Code', example='1'),
  data?: {
    authId?: long(name='AuthId', example='253'),
    domainId?: long(name='DomainId', example='235'),
    domainName?: string(name='DomainName', example='name'),
    gatewayId?: long(name='GatewayId', example='gw-7ea3da97b96543e19f6c597cd4a9****'),
    gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-7ea3da97b96543e19f6c597cd4a9****'),
    gmtCreate?: string(name='GmtCreate', example='2022-01-07T10:07:57.000+0000'),
    gmtModified?: string(name='GmtModified', example='2022-01-07T10:07:57.000+0000'),
    id?: long(name='Id', example='12'),
    isWhite?: boolean(name='IsWhite', example='true'),
    path?: string(name='Path', example='/zookeeper'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='559412D1-BFCE-53CC-B88E-0192C331EF44'),
  success?: boolean(name='Success', example='true'),
}

model DeleteAuthResourceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAuthResourceResponseBody(name='body'),
}

async function deleteAuthResource(request: DeleteAuthResourceRequest): DeleteAuthResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAuthResource', 'POST', '/', 'json', false, 'json', request);
}

model DeleteClusterRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  instanceId?: string(name='InstanceId', example='mse-cn-6ja1rgl****', position='Query'),
}

model DeleteClusterResponseBody = {
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpCode?: string(name='HttpCode', example='202'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='3369AD10-F1A6-4E6F-B99E-20F51826****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteClusterResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteClusterResponseBody(name='body'),
}

async function deleteCluster(request: DeleteClusterRequest): DeleteClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCluster', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEngineNamespaceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  clusterId?: string(name='ClusterId', example='mse-0c738****', position='Query'),
  id?: string(name='Id', example='678ca857-****-b1bf-d0a98c5ca84b', position='Query'),
  instanceId?: string(name='InstanceId', example='mse-cn-7pp2d1****', position='Query'),
}

model DeleteEngineNamespaceResponseBody = {
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpCode?: string(name='HttpCode', example='202'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='A73AC37C-C617-4E3A-8049-372CF49C****'),
  success?: boolean(name='Success', example='True'),
}

model DeleteEngineNamespaceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteEngineNamespaceResponseBody(name='body'),
}

async function deleteEngineNamespace(request: DeleteEngineNamespaceRequest): DeleteEngineNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEngineNamespace', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGatewayRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='system error', example='zh', position='Query'),
  deleteSlb?: boolean(name='DeleteSlb', description='mse-100-001', example='true', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='systemError', example='gw-0fe488252dc44d55a9dd57875193a1d7', position='Query'),
}

model DeleteGatewayResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned.', example='200'),
  data?: {
    gatewayUniqueId?: string(name='GatewayUniqueId', description='The details of the data.', example='gw-7ea3da97b96543e19f6c597c****'),
    gmtCreate?: string(name='GmtCreate', description='The ID of the security group.', example='2022-01-07T10:07:57.000+0000'),
    gmtModified?: string(name='GmtModified', description='The specifications of the gateway.', example='2022-01-07T10:07:57.000+0000'),
    id?: long(name='Id', description='The HTTP status code returned. The value 200 indicates that the request was successful. Other values indicate that the request failed.', example='12'),
    name?: string(name='Name', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='mse-bc1a29b0-reg-center-0-1'),
    primaryUser?: string(name='PrimaryUser', description='The name of the gateway.', example='1231254'),
    region?: string(name='Region', description='The ID of the primary key.', example='cn-hangzhou'),
    replica?: int32(name='Replica', description='The ID of the vSwitch.', example='2'),
    securityGroup?: string(name='SecurityGroup', description='The status of the gateway. Valid values: 0: The gateway is being created. 1: The gateway fails to be created. 2: The gateway is running. 3: The gateway is changing. 4: The gateway is scaling down. 6: The gateway is scaling up. 8: The gateway is being deleted. 10: The gateway is restarting. 11: The gateway is being rebuilt. 12: The gateway is updating. 13: The gateway fails to be updated.', example='sg-bp11ufzqn6mmb8dtzz82'),
    spec?: string(name='Spec', description='The ID of the virtual private cloud (VPC) where the gateway resides.', example='MSE_GTW_16_32_200_c'),
    status?: int32(name='Status', description='The unique ID of the gateway. The ID is automatically generated by the system.', example='1'),
    vpc?: string(name='Vpc', description='The ID of the region.', example='vpc-bp1328cm01m6uel42b5zb'),
    vswitch?: string(name='Vswitch', description='The information about the user.', example='vsw-bp18zeqxx6mpuq843z4n5'),
  }(name='Data', description='The request is successfully processed.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='200'),
  message?: string(name='Message', description='The data structure.', example='The ID of the request.'),
  requestId?: string(name='RequestId', description='The unique ID of the gateway.', example='2FFEA345-BE30-5FE0-8885-42E2DEFD5FE6'),
  success?: boolean(name='Success', description='The returned message.

*   If the request is successful, a success message is returned.
*   If the request fails, an error message is returned, such as the "TaskId not found" message.', example='true'),
}

model DeleteGatewayResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteGatewayResponseBody(name='body'),
}

async function deleteGateway(request: DeleteGatewayRequest): DeleteGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGateway', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGatewayAuthConsumerRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', example='gw-c70622ff52fe49beb29bea9a6f52****', position='Query'),
  id: long(name='Id', example='33ff74b6-d21e-4f9b-91a8-bc1ea4ef****', position='Query'),
}

model DeleteGatewayAuthConsumerResponseBody = {
  code?: int32(name='Code', description='code仅仅用来和success同步', example='200'),
  data?: boolean(name='Data', example='true'),
  dynamicCode?: string(name='DynamicCode', description='动态错误信息中的占位符', example='code'),
  dynamicMessage?: string(name='DynamicMessage', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='69AD2AA7-DB47-449B-941B-B14409DF****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteGatewayAuthConsumerResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteGatewayAuthConsumerResponseBody(name='body'),
}

async function deleteGatewayAuthConsumer(request: DeleteGatewayAuthConsumerRequest): DeleteGatewayAuthConsumerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGatewayAuthConsumer', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGatewayAuthConsumerResourceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  consumerId: long(name='ConsumerId', example='2', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', example='gw-ubuwqygbq4783gqb2y3f87q****', position='Query'),
  idList: string(name='IdList', example='1,2,3,4', position='Query'),
}

model DeleteGatewayAuthConsumerResourceResponseBody = {
  code?: int32(name='Code', description='code仅仅用来和success同步', example='200'),
  data?: boolean(name='Data', example='true'),
  dynamicCode?: string(name='DynamicCode', description='动态错误信息中的占位符', example='code'),
  dynamicMessage?: string(name='DynamicMessage', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', example='NoPermission'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='3369AD10-F1A6-4E6F-B99E-20F51826****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteGatewayAuthConsumerResourceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteGatewayAuthConsumerResourceResponseBody(name='body'),
}

async function deleteGatewayAuthConsumerResource(request: DeleteGatewayAuthConsumerResourceRequest): DeleteGatewayAuthConsumerResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGatewayAuthConsumerResource', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGatewayDomainRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-90392d768a3847a7b804c505254d****', position='Query'),
  id?: string(name='Id', example='109', position='Query'),
}

model DeleteGatewayDomainResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    certIdentifier?: string(name='CertIdentifier', example='243'),
    gatewayId?: long(name='GatewayId', example='253'),
    gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-7ea3da97b96543e19f6c597c****'),
    gmtCreate?: string(name='GmtCreate', example='2022-01-07T10:07:57.000+0000'),
    gmtModified?: string(name='GmtModified', example='2022-01-07T10:07:57.000+0000'),
    id?: long(name='Id', example='2'),
    mustHttps?: boolean(name='MustHttps', example='true'),
    name?: string(name='Name', example='CONTACTINFO'),
    protocol?: string(name='Protocol', example='HTTP'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='Id of the request', example='39016EAC-6EDB-52FE-AE20-4B013DF236FF'),
  success?: boolean(name='Success', example='true'),
}

model DeleteGatewayDomainResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteGatewayDomainResponseBody(name='body'),
}

async function deleteGatewayDomain(request: DeleteGatewayDomainRequest): DeleteGatewayDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGatewayDomain', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGatewayRouteRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-492af9b04bb4474cae9d645be850e3d7', position='Query'),
  routeId?: string(name='RouteId', description='The ID of the route.', example='252', position='Query'),
}

model DeleteGatewayRouteResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned.', example='200'),
  data?: {
    defaultServiceId?: long(name='DefaultServiceId', description='The default service ID.', example='1'),
    gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='125'),
    gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-5017305290e14cebbrvec4a5****'),
    gmtCreate?: string(name='GmtCreate', description='The creation time.', example='2022-01-07 18:07:57'),
    gmtModified?: string(name='GmtModified', description='The modification time.', example='2021-12-30T06:41:52.000+0000'),
    id?: long(name='Id', description='The ID.', example='12'),
    name?: string(name='Name', description='The name.', example='test'),
    predicates?: string(name='Predicates', description='The matching rules.', example='{\\"PathPredicates\\":{\\"Path\\":\\"/metas\\",\\"Type\\":\\"PRE\\",\\"IgnoreCase\\":false}}'),
    routeOrder?: int32(name='RouteOrder', description='The sequence number of the route.', example='1'),
    status?: int32(name='Status', description='The status of the route. Valid values:

*   0: unpublished
*   2: publishing
*   3: published
*   4: editing (updated but not published)
*   5: unpublishing
*   6: unavailable', example='2'),
  }(name='Data', description='The data returned.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ADDD8AB7-8D1C-4697-A83E-410D2607****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model DeleteGatewayRouteResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteGatewayRouteResponseBody(name='body'),
}

async function deleteGatewayRoute(request: DeleteGatewayRouteRequest): DeleteGatewayRouteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGatewayRoute', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGatewayServiceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  gatewayId?: long(name='GatewayId', example='60', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-1a4ab101d5924b6f92c5ec98a841761f', position='Query'),
  serviceId?: string(name='ServiceId', example='190', position='Query'),
}

model DeleteGatewayServiceResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    gatewayId?: long(name='GatewayId', example='1'),
    gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-7ea3da97b96543e19f6c597c****'),
    gmtCreate?: string(name='GmtCreate', example='2022-01-14 14:39:16'),
    gmtModified?: string(name='GmtModified', example='2022-01-07T10:07:57.000+0000'),
    groupName?: string(name='GroupName', example='DEFAULT_GROUP'),
    id?: long(name='Id', example='190'),
    ips?: [ string ](name='Ips'),
    metaInfo?: string(name='MetaInfo', example='{}'),
    name?: string(name='Name', example='test'),
    namespace?: string(name='Namespace', example='default'),
    serviceNameInRegistry?: string(name='ServiceNameInRegistry', example='test'),
    sourceId?: long(name='SourceId', example='1'),
    sourceType?: string(name='SourceType', example='MSE'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='Id of the request', example='B3545F76-6ED1-586F-8DB9-ECE07985F381'),
  success?: boolean(name='Success', example='true'),
}

model DeleteGatewayServiceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteGatewayServiceResponseBody(name='body'),
}

async function deleteGatewayService(request: DeleteGatewayServiceRequest): DeleteGatewayServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGatewayService', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGatewayServiceVersionRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-b6988bd16920479d9104e1729f97****', position='Query'),
  serviceId?: long(name='ServiceId', example='777', position='Query'),
  serviceVersion?: string(name='ServiceVersion', example='{\\"name\\":\\"app\\",\\"labels\\":[{\\"key\\":\\"app\\",\\"value\\":\\"demo-server\\"}]}', position='Query'),
}

model DeleteGatewayServiceVersionResponseBody = {
  code?: int32(name='Code', example='1'),
  data?: long(name='Data', example='1'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='29D52777-BE96-563E-BC6B-796ACE47A7A5'),
  success?: boolean(name='Success', example='true'),
}

model DeleteGatewayServiceVersionResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteGatewayServiceVersionResponseBody(name='body'),
}

async function deleteGatewayServiceVersion(request: DeleteGatewayServiceVersionRequest): DeleteGatewayServiceVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGatewayServiceVersion', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGatewaySlbRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  deleteSlb?: boolean(name='DeleteSlb', example='true', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-c9bc5afd61014165bd58f621b491****', position='Query'),
  id?: string(name='Id', example='395', position='Query'),
  slbId?: string(name='SlbId', position='Query'),
}

model DeleteGatewaySlbResponseBody = {
  code?: int32(name='Code', example='1'),
  data?: string(name='Data', example='28'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='9297B27D-D932-5E9F-93B9-99D6C5F3A879'),
  success?: boolean(name='Success', example='true'),
}

model DeleteGatewaySlbResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteGatewaySlbResponseBody(name='body'),
}

async function deleteGatewaySlb(request: DeleteGatewaySlbRequest): DeleteGatewaySlbResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGatewaySlb', 'POST', '/', 'json', false, 'json', request);
}

model DeleteMigrationTaskRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  id?: string(name='Id', description='The ID of the task.', example='1', position='Query'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}', position='Query'),
}

model DeleteMigrationTaskResponseBody = {
  data?: boolean(name='Data', description='The deletion result.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8BD1E58D-0755-42AC-A599-E6B55112****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model DeleteMigrationTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteMigrationTaskResponseBody(name='body'),
}

async function deleteMigrationTask(request: DeleteMigrationTaskRequest): DeleteMigrationTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteMigrationTask', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNacosConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  beta?: boolean(name='Beta', example='true', position='Query'),
  dataId: string(name='DataId', example='user-ds.yml', position='Query'),
  group: string(name='Group', example='HALVIE_MICRO_GROUP', position='Query'),
  instanceId: string(name='InstanceId', example='mse_prepaid_public_cn-tl32epfyu18', position='Query'),
  namespaceId?: string(name='NamespaceId', example='0e9d849b-****-8435da6c21ad', position='Query'),
}

model DeleteNacosConfigResponseBody = {
  code?: string(name='Code', example='200'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpCode?: string(name='HttpCode', example='202'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='4FEFC13F-EB50-51E1-97D8-C5CBA8CD1B84'),
  success?: boolean(name='Success', example='true'),
}

model DeleteNacosConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteNacosConfigResponseBody(name='body'),
}

async function deleteNacosConfig(request: DeleteNacosConfigRequest): DeleteNacosConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNacosConfig', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNacosConfigsRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The HTTP status code returned.', example='zh', position='Query'),
  ids: string(name='Ids', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='20024,20025,20026,20027,20034,20104,20394', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the namespace.', example='mse_prepaid_public_cn-i7m2e32pd0n', position='Query'),
  namespaceId: string(name='NamespaceId', description='The data structure.', example='1ef93a21-3487-4367-a859-857d8****', position='Query'),
}

model DeleteNacosConfigsResponseBody = {
  code?: int32(name='Code', description='mse-200-105', example='200'),
  errorCode?: string(name='ErrorCode', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The message returned.', example='200'),
  message?: string(name='Message', description='The response code returned.', example='success'),
  requestId?: string(name='RequestId', description='The error code returned if the request failed.', example='73EB5563-CBB3-5F48-999D-512F4EFB7377'),
  success?: boolean(name='Success', description='duplicatedClusterAliasName', example='true'),
}

model DeleteNacosConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteNacosConfigsResponseBody(name='body'),
}

/**
  * mse-200-105
  *
 * @tags cluster
 */
async function deleteNacosConfigs(request: DeleteNacosConfigsRequest): DeleteNacosConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNacosConfigs', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNacosInstanceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='mse-100-001', example='zh', position='Query'),
  clusterName?: string(name='ClusterName', description='illegal request:%s', example='DEFAULT', position='Query'),
  ephemeral: boolean(name='Ephemeral', description='cluster not found', example='false', position='Query'),
  groupName: string(name='GroupName', description='illegalRequest', example='DEFAULT_GROUP', position='Query'),
  instanceId: string(name='InstanceId', description='duplicatedClusterAliasName', example='mse-cn-st21v5****', position='Query'),
  ip: string(name='Ip', description='mse-200-021', example='10.237.1.32', position='Query'),
  namespaceId?: string(name='NamespaceId', description='mse-100-007', example='9e78a671-4b9b-4dd4-99c1-0b9da87****', position='Query'),
  port: int32(name='Port', description='clusterNotFound', example='8080', position='Query'),
  serviceName: string(name='ServiceName', description='duplicated cluster alias name', example='hello_service', position='Query'),
}

model DeleteNacosInstanceResponseBody = {
  code?: int32(name='Code', description='code仅仅用来和success同步', example='200'),
  data?: string(name='Data', example='OK'),
  dynamicMessage?: string(name='DynamicMessage', description='动态错误信息中的占位符', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='system error', example='8BD1E58D-0755-42AC-A599-E6B55112****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteNacosInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteNacosInstanceResponseBody(name='body'),
}

/**
  * The port of the Nacos instance.
  *
 * @tags cluster
 */
async function deleteNacosInstance(request: DeleteNacosInstanceRequest): DeleteNacosInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNacosInstance', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNacosServiceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The ID of the instance.', example='zh', position='Query'),
  groupName: string(name='GroupName', description='systemError', example='DEFAULT_GROUP', position='Query'),
  instanceId: string(name='InstanceId', description='cluster not found', example='mse-cn-123456', position='Query'),
  namespaceId?: string(name='NamespaceId', description='system error', example='9e78a671-4b9b-4dd4-99c1-0****', position='Query'),
  serviceName: string(name='ServiceName', description='mse-100-001', example='hello_service', position='Query'),
}

model DeleteNacosServiceResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned.', example='200'),
  data?: string(name='Data', description='The returned message.', example='ok'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The name of the group.', example='200'),
  message?: string(name='Message', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='The string object.'),
  requestId?: string(name='RequestId', description='The ID of the namespace.', example='9e78a671-4b9b-4dd4-99c1-0b9da87d3dec'),
  success?: boolean(name='Success', description='The ID of the request.', example='true'),
}

model DeleteNacosServiceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteNacosServiceResponseBody(name='body'),
}

/**
  * The language of the response. Valid values:
  * *   zh: Chinese
  * *   en: English
  *
 * @tags cluster
 */
async function deleteNacosService(request: DeleteNacosServiceRequest): DeleteNacosServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNacosService', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNamespaceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  name?: string(name='Name', description='要删除的MSE命名空间名称', example='prod', maxLength=64, position='Query'),
  region?: string(name='Region', description='操作的地域', example='cn-hangzhou', position='Query'),
}

model DeleteNamespaceResponseBody = {
  errorCode?: string(name='ErrorCode', description='错误码。', example='NO_PERMISSION'),
  httpStatusCode?: int32(name='HttpStatusCode', description='HTTP状态码', example='200'),
  message?: string(name='Message', description='请求信息，错误排查用'),
  requestId?: string(name='RequestId', description='请求Id', example='abcde-efg'),
  success?: boolean(name='Success', description='是否成功', example='true'),
}

model DeleteNamespaceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteNamespaceResponseBody(name='body'),
}

async function deleteNamespace(request: DeleteNamespaceRequest): DeleteNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNamespace', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSecurityGroupRuleRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-83b0ddb569434f82b9fe8e4c60c40f7c', position='Query'),
  id?: long(name='Id', example='93', position='Query'),
}

model DeleteSecurityGroupRuleResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    description?: string(name='Description', example='auto-description1'),
    gatewayId?: long(name='GatewayId', example='103'),
    gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-7ea3da97b96543e19f6c597c****'),
    gmtCreate?: string(name='GmtCreate', example='2022-01-07 18:07:57'),
    gmtModified?: string(name='GmtModified', example='2022-01-11T14:12:55.000+0000'),
    id?: long(name='Id', example='2'),
    ipProtocol?: string(name='IpProtocol', example='tcp'),
    portRange?: string(name='PortRange', example='8443/8443'),
    securityGroupId?: string(name='SecurityGroupId', example='sg-uf6hgwe067prhg68agfa'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='43E50CB7-258E-5AFF-9B93-ECC19928C699'),
  success?: boolean(name='Success', example='true'),
}

model DeleteSecurityGroupRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSecurityGroupRuleResponseBody(name='body'),
}

async function deleteSecurityGroupRule(request: DeleteSecurityGroupRuleRequest): DeleteSecurityGroupRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSecurityGroupRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteServiceSourceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-492af9b04bb4474cae9d645be850****', position='Query'),
  sourceId?: long(name='SourceId', example='17', position='Query'),
}

model DeleteServiceSourceResponseBody = {
  code?: int32(name='Code', example='1'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='Id of the request', example='2CEF593F-D60C-5449-9E98-15CA6ECD9189'),
  success?: boolean(name='Success', example='true'),
}

model DeleteServiceSourceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteServiceSourceResponseBody(name='body'),
}

async function deleteServiceSource(request: DeleteServiceSourceRequest): DeleteServiceSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteServiceSource', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSwimmingLaneRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='cluster not found', example='zh', position='Query'),
  laneId: long(name='LaneId', description='clusterNotFound', example='229', position='Query'),
  namespace?: string(name='Namespace', description='MSE命名空间名字', example='default', maxLength=64, position='Query'),
}

model DeleteSwimmingLaneResponseBody = {
  errorCode?: string(name='ErrorCode', description='The ID of the lane.', example='mse-100-000'),
  message?: string(name='Message', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='RestResult'),
  requestId?: string(name='RequestId', description='systemError', example='69AD2AA7-DB47-449B-941B-B14409DF****'),
  success?: boolean(name='Success', description='system error', example='true'),
}

model DeleteSwimmingLaneResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSwimmingLaneResponseBody(name='body'),
}

async function deleteSwimmingLane(request: DeleteSwimmingLaneRequest): DeleteSwimmingLaneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSwimmingLane', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSwimmingLaneGroupRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  groupId?: long(name='GroupId', example='145', position='Query'),
  namespace?: string(name='Namespace', description='MSE命名空间名字', example='default', maxLength=64, position='Query'),
  region?: string(name='Region', position='Query'),
  name?: string(name='name', position='Query'),
}

model DeleteSwimmingLaneGroupResponseBody = {
  code?: int32(name='Code', description='code仅仅用来和success同步', example='200'),
  data?: any(name='Data', example='{}'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='52BA6DA6-A702-4362-A32F-DFF79655****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteSwimmingLaneGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSwimmingLaneGroupResponseBody(name='body'),
}

async function deleteSwimmingLaneGroup(request: DeleteSwimmingLaneGroupRequest): DeleteSwimmingLaneGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSwimmingLaneGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteZnodeRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  clusterId: string(name='ClusterId', example='mse-09k1q11****', position='Query'),
  path: string(name='Path', example='/zookeeper', position='Query'),
  requestPars?: string(name='RequestPars', example='{}', position='Query'),
}

model DeleteZnodeResponseBody = {
  data?: {
    data?: string(name='Data', example='cluster'),
    dir?: boolean(name='Dir', example='true'),
    name?: string(name='Name', example='mse-bc1a29b0-160230875****-reg-center-0-1'),
    path?: string(name='Path', example='/'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpCode?: string(name='HttpCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='DC34E4A3-5F1C-4E40-86EA-02EDF967****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteZnodeResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteZnodeResponseBody(name='body'),
}

async function deleteZnode(request: DeleteZnodeRequest): DeleteZnodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteZnode', 'POST', '/', 'json', false, 'json', request);
}

model ExportNacosConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='clusterNotFound', example='zh', position='Query'),
  appName?: string(name='AppName', description='mse-200-021', example='qjl-gateway-openapi', position='Query'),
  dataId?: string(name='DataId', description='illegalRequest', example='sms-mes-develop.prop****', position='Query'),
  group?: string(name='Group', description='illegal request:%s', example='TIMEDTASK_COMMON_GROUP', position='Query'),
  ids?: string(name='Ids', description='mse-100-007', example='1709,1710', position='Query'),
  instanceId: string(name='InstanceId', description='duplicatedClusterAliasName', example='mse-cn-2r42ddc****', position='Query'),
  namespaceId?: string(name='NamespaceId', description='duplicated cluster alias name', example='ae77c258-4d4f-478f-baaa-084aee0****', position='Query'),
}

model ExportNacosConfigResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    url?: string(name='Url', example='http://xxxxxxxxx'),
  }(name='Data'),
  dynamicMessage?: string(name='DynamicMessage', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='mse-100-001', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='systemError', example='92245803-49B7-54CF-8D49-01A34A0E1CD6'),
  success?: boolean(name='Success', description='system error', example='True'),
}

model ExportNacosConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ExportNacosConfigResponseBody(name='body'),
}

/**
  * The tag of the application.
  *
 * @tags cluster
 */
async function exportNacosConfig(request: ExportNacosConfigRequest): ExportNacosConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportNacosConfig', 'POST', '/', 'json', false, 'json', request);
}

model ExportZookeeperDataRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The ID of the region in which the instance resides. The region is supported by Microservices Engine (MSE).', example='zh', position='Query'),
  exportType?: string(name='ExportType', description='system error', example='snapshot', position='Query'),
  instanceId?: string(name='InstanceId', description='systemError', example='mse-cn-78v1l83****', position='Query'),
  regionId?: string(name='RegionId', description='The instance ID.', example='cn-hangzhou', position='Query'),
  requestPars?: string(name='RequestPars', description='The type of the object that you want to export. Valid values:

*   transactionLog: transaction logs
*   snapshot: snapshots', example='{}', position='Query'),
}

model ExportZookeeperDataResponseBody = {
  data?: {
    contentMap?: map[string]any(name='ContentMap', description='The ID of the instance.'),
    createTime?: long(name='CreateTime', description='The ID of the associated task at the underlying layer. This parameter is used only to troubleshoot failures.', example='1631001140913'),
    exportType?: string(name='ExportType', description='The details of the data.', example='snapshot'),
    extend?: string(name='Extend', description='The type of the object that is exported. Valid values:

*   transactionLog: transaction logs
*   snapshot: snapshots', example='{}'),
    id?: int32(name='Id', description='The task status. Valid values:

*   CREATE: The task is being created.
*   RUNNING: The task is being executed.
*   FINISH: The task is completed.
*   FAILED: The task failed.
*   EXPIRE: The task has expired.', example='1'),
    instanceId?: string(name='InstanceId', description='The HTTP status code returned.', example='mse-cn-st21ri2****'),
    kubeoneTaskIds?: string(name='KubeoneTaskIds', description='The extended information.', example='10'),
    status?: string(name='Status', description='The content of the task.', example='FINISH'),
    updateTime?: long(name='UpdateTime', description='The ID of the task.', example='1632979237663'),
  }(name='Data', description='The error code returned if the request failed.'),
  dynamicMessage?: string(name='DynamicMessage', description='The message returned.

*   If the request is successful, a success message is returned.
*   If the request fails, an error message is returned.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The dynamic part in the error message. This parameter is used to replace the \\*\\*%s\\*\\* variable in the **ErrMessage** parameter.

>  If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='mse-100-000'),
  httpStatusCode?: string(name='HttpStatusCode', description='The ID of the request.', example='200'),
  message?: string(name='Message', description='BaseResult', example='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.'),
  requestId?: string(name='RequestId', description='The request was successfully processed.', example='25EA0A83-9007-4E87-808C-637BE1A****'),
  success?: boolean(name='Success', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='true'),
}

model ExportZookeeperDataResponse = {
  headers: map[string]string(name='headers'),
  body: ExportZookeeperDataResponseBody(name='body'),
}

/**
  * Initiates a task to export ZooKeeper data.
  *
 */
async function exportZookeeperData(request: ExportZookeeperDataRequest): ExportZookeeperDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportZookeeperData', 'POST', '/', 'json', false, 'json', request);
}

model FetchLosslessRuleListRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh-CN', position='Query'),
  appId?: string(name='AppId', description='appId', position='Query'),
  appName?: string(name='AppName', description='Key word of search lossless list', example='spring-boot-sample', position='Query'),
  namespace?: string(name='Namespace', example='default', position='Query'),
  pageNumber: int32(name='PageNumber', description='current', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='limit', example='10', position='Query'),
  regionId: string(name='RegionId', description='region id, such as cn-hangzhou', example='cn-beijing', position='Query'),
}

model FetchLosslessRuleListResponseBody = {
  code?: int32(name='Code', description='code仅仅用来和success同步', example='200'),
  data?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    results?: [ 
      {
        aligned?: boolean(name='Aligned', description='microservices lifecycle aligns to k8s\\"s or NOT', example='true'),
        appId?: string(name='AppId', description='appId'),
        appName?: string(name='AppName', description='appName', example='echo-demo'),
        count?: int32(name='Count', description='instance\\"s count of app', example='3'),
        delayTime?: int32(name='DelayTime', example='60'),
        enable?: boolean(name='Enable', description='rule is open or close', example='true'),
        funcType?: int32(name='FuncType', description='warmup function type, 2 means f(x)=x^2', example='2'),
        lossLessDetail?: boolean(name='LossLessDetail', description='show lossLess offline&online detail', example='false'),
        notice?: boolean(name='Notice', description='enable lossLess offline active notification', example='true'),
        related?: boolean(name='Related', description='K8s\\"s HPA is related to warmup or NOT', example='false'),
        warmupTime?: int32(name='WarmupTime', example='60'),
      }
    ](name='Results'),
    totalSize?: int32(name='TotalSize', example='36'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='Success'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='56D9E600-6348-4260-B35F-583413F****'),
  success?: boolean(name='Success'),
}

model FetchLosslessRuleListResponse = {
  headers: map[string]string(name='headers'),
  body: FetchLosslessRuleListResponseBody(name='body'),
}

/**
  * The returned data.
  *
 * @tags msc
 */
async function fetchLosslessRuleList(request: FetchLosslessRuleListRequest): FetchLosslessRuleListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FetchLosslessRuleList', 'POST', '/', 'json', false, 'json', request);
}

model GetAppMessageQueueRouteRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  appId: string(name='AppId', example='hkhon1po62@c3df23522baa898', position='Query'),
  appName?: string(name='AppName', description='应用名称', example='example-app', maxLength=64, position='Query'),
  namespace?: string(name='Namespace', description='MSE命名空间名字', example='default', maxLength=64, position='Query'),
  region: string(name='Region', example='cn-hangzhou', position='Query'),
}

model GetAppMessageQueueRouteResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    appId?: string(name='AppId', example='hkhon1po62@54e1f42f37cd65a'),
    enable?: boolean(name='Enable', example='true'),
    filterSide?: string(name='FilterSide', example='Server'),
    region?: string(name='Region', example='cn-hangzhou'),
    tags?: [ string ](name='Tags'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='4B00BCB0-105F-5A2A-B75B-641C8E9B18FC'),
  success?: boolean(name='Success', example='true'),
}

model GetAppMessageQueueRouteResponse = {
  headers: map[string]string(name='headers'),
  body: GetAppMessageQueueRouteResponseBody(name='body'),
}

async function getAppMessageQueueRoute(request: GetAppMessageQueueRouteRequest): GetAppMessageQueueRouteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAppMessageQueueRoute', 'POST', '/', 'json', false, 'json', request);
}

model GetApplicationListRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  appId?: string(name='AppId', description='The ID of an application.', example='hkhon1po62@c3df23522b*****', position='Query'),
  appName?: string(name='AppName', description='The name of an application.', example='rest-container', position='Query'),
  language?: string(name='Language', description='The programming language of the application, such as Java and Go.', example='Java', position='Query'),
  namespace?: string(name='Namespace', description='The microservice namespace to which the application belongs.', example='default', maxLength=64, position='Query'),
  pageNumber: int32(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='The number of entries to return on each page.', example='10', position='Query'),
  region: string(name='Region', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  sentinelEnable?: boolean(name='SentinelEnable', description='Specifies whether to enable the Sentinel-compatible mode.', example='true', position='Query'),
  source?: string(name='Source', description='The source of the application. The value is fixed as edasmsc.', example='edasmsc', position='Query'),
  switchEnable?: boolean(name='SwitchEnable', description='Specifies whether to enable switching.', example='true', position='Query'),
}

model GetApplicationListResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: {
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    result?: [ 
      {
        appId?: string(name='AppId', description='The ID of the application.', example='hkhon1po62@5f1b08becb*****'),
        appName?: string(name='AppName', description='The name of the application.', example='finance'),
        extraInfo?: string(name='ExtraInfo', description='The additional information.', example='{}'),
        instancesNumber?: int32(name='InstancesNumber', description='The number of instances.', example='1'),
        language?: string(name='Language', description='The programming language of the application.', example='JAVA'),
        licenseKey?: string(name='LicenseKey', description='The license key in use.', example='diyh1rln1u@*****7ad938167'),
        namespace?: string(name='Namespace'),
        regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou'),
        source?: string(name='Source', description='The source of the application.', example='edasmsc'),
        status?: long(name='Status', description='The status.', example='0'),
        userId?: string(name='UserId', description='The ID of the user.', example='1234567890'),
      }
    ](name='Result', description='The returned information.'),
    totalSize?: int32(name='TotalSize', description='The total number of entries returned.', example='11'),
  }(name='Data', description='The data structure.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='403'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F55E608F-7C15-****-9CFD-DF832EBC4A0F'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model GetApplicationListResponse = {
  headers: map[string]string(name='headers'),
  body: GetApplicationListResponseBody(name='body'),
}

async function getApplicationList(request: GetApplicationListRequest): GetApplicationListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetApplicationList', 'POST', '/', 'json', false, 'json', request);
}

model GetApplicationListWithMetircsRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='mse-200-021', example='zh', position='Query'),
  appId?: string(name='AppId', description='duplicated cluster alias name', example='hkhon1po62@c3df23522baa898', position='Query'),
  appName?: string(name='AppName', description='duplicatedClusterAliasName', example='spring-cloud-a', position='Query'),
  namespace?: string(name='Namespace', example='default', position='Query'),
  pageNumber: int32(name='PageNumber', description='illegalRequest', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='illegal request:%s', example='10', position='Query'),
  region: string(name='Region', description='mse-200-105', example='cn-hangzhou', position='Query'),
  source?: string(name='Source', description='mse-100-007', example='edasmsc', position='Query'),
}

model GetApplicationListWithMetircsResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    result?: [ 
      {
        appId?: string(name='AppId', example='daqijp6c31@xxx'),
        appName?: string(name='AppName', example='finance'),
        appType?: int32(name='AppType', example='2'),
        curMetrics?: [ 
          {
            blockQps?: double(name='BlockQps', example='100'),
            expQps?: double(name='ExpQps', example='100'),
            passQps?: double(name='PassQps', example='100'),
            qps?: double(name='Qps', example='895'),
            rt?: double(name='Rt', example='109'),
            thread?: double(name='Thread', example='1'),
            timestamp?: long(name='Timestamp', example='1666764426528'),
          }
        ](name='CurMetrics'),
        curMetricsFm?: {
          blockQps?: double(name='BlockQps', example='1'),
          expQps?: double(name='ExpQps', example='100'),
          passQps?: double(name='PassQps', example='1'),
          qps?: double(name='Qps', example='1'),
          rt?: double(name='Rt', example='0'),
          thread?: double(name='Thread', example='1'),
          timestamp?: long(name='Timestamp', example='1648117002717'),
        }(name='CurMetricsFm'),
        extraInfo?: string(name='ExtraInfo', example='{}'),
        instancesNumber?: int32(name='InstancesNumber', example='1'),
        language?: string(name='Language', example='JAVA'),
        licenseKey?: string(name='LicenseKey', example='diyh1rln1u@8d97eb7ad938167'),
        namespace?: string(name='Namespace', example='default'),
        regionId?: string(name='RegionId', example='cn-hangzhou'),
        source?: string(name='Source', example='edasmsc'),
        status?: long(name='Status', example='0'),
        tags?: [ string ](name='Tags'),
        userId?: string(name='UserId', example='1234567890'),
      }
    ](name='Result'),
    totalSize?: int32(name='TotalSize', example='11'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', description='cluster not found', example='200'),
  message?: string(name='Message', description='mse-100-001', example='systemError'),
  requestId?: string(name='RequestId', description='system error', example='062D13C5-DEA3-4921-8918-C49A0F1B****'),
  success?: boolean(name='Success', example='true'),
}

model GetApplicationListWithMetircsResponse = {
  headers: map[string]string(name='headers'),
  body: GetApplicationListWithMetircsResponseBody(name='body'),
}

async function getApplicationListWithMetircs(request: GetApplicationListWithMetircsRequest): GetApplicationListWithMetircsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetApplicationListWithMetircs', 'POST', '/', 'json', false, 'json', request);
}

model GetBlackWhiteListRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-32d5c9769c1842b1a2cc3426c59e****', position='Query'),
  isWhite?: boolean(name='IsWhite', example='true', position='Query'),
  resourceType?: string(name='ResourceType', example='GATEWAY', position='Query'),
  type?: string(name='Type', example='IP', position='Query'),
}

model GetBlackWhiteListResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    content?: string(name='Content', example='text'),
    gatewayId?: long(name='GatewayId', example='1'),
    gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-7ea3da97b96543e19f6c597c****'),
    gmtCreate?: string(name='GmtCreate', example='2022-01-07T10:07:57.000+0000'),
    gmtModified?: string(name='GmtModified', example='2022-01-07T10:07:57.000+0000'),
    id?: long(name='Id', example='275'),
    isWhite?: boolean(name='IsWhite', example='true'),
    resourceId?: long(name='ResourceId', example='1'),
    resourceType?: string(name='ResourceType', example='GATEWAY'),
    status?: string(name='Status', example='on'),
    type?: string(name='Type', example='IP'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='Id of the request', example='89CBC928-4F57-51FA-A413-EE0F4CD87200'),
  success?: boolean(name='Success', example='true'),
}

model GetBlackWhiteListResponse = {
  headers: map[string]string(name='headers'),
  body: GetBlackWhiteListResponseBody(name='body'),
}

async function getBlackWhiteList(request: GetBlackWhiteListRequest): GetBlackWhiteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBlackWhiteList', 'POST', '/', 'json', false, 'json', request);
}

model GetEngineNamepaceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  clusterId?: string(name='ClusterId', example='mse-98s****', position='Query'),
  id?: string(name='Id', example='0e958d79-****-b282-b702d66362b5', position='Query'),
  instanceId?: string(name='InstanceId', example='mse.cn-hangzhou.aliyuncs.com', position='Query'),
}

model GetEngineNamepaceResponseBody = {
  configCount?: string(name='ConfigCount', example='1'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpCode?: string(name='HttpCode', example='202'),
  message?: string(name='Message', example='success'),
  namespace?: string(name='Namespace', example='public'),
  namespaceDesc?: string(name='NamespaceDesc', example='mytest'),
  namespaceShowName?: string(name='NamespaceShowName', example='public'),
  quota?: string(name='Quota', example='200'),
  requestId?: string(name='RequestId', example='FA8F966F-420C-52F5-B49E-6ED7CCE02697'),
  success?: boolean(name='Success', example='true'),
  type?: string(name='Type', example='1'),
}

model GetEngineNamepaceResponse = {
  headers: map[string]string(name='headers'),
  body: GetEngineNamepaceResponseBody(name='body'),
}

async function getEngineNamepace(request: GetEngineNamepaceRequest): GetEngineNamepaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEngineNamepace', 'POST', '/', 'json', false, 'json', request);
}

model GetGatewayRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-685f661467b54f48b7b7a76605ce****', position='Query'),
}

model GetGatewayResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    chargeType?: string(name='ChargeType', example='POSTPAY'),
    elastic?: boolean(name='Elastic'),
    elasticPolicy?: {
      elasticType?: string(name='ElasticType'),
      maxReplica?: int32(name='MaxReplica'),
      timePolicyList?: [ 
        {
          desiredReplica?: int32(name='DesiredReplica'),
          endTime?: string(name='EndTime'),
          startTime?: string(name='StartTime'),
        }
      ](name='TimePolicyList'),
    }(name='ElasticPolicy'),
    elasticReplica?: int32(name='ElasticReplica'),
    elasticType?: string(name='ElasticType'),
    endDate?: string(name='EndDate', example='2021-08-01 00:00:00'),
    gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-7ea3da97b96543e19f6c597cd4a9****'),
    gmtCreate?: string(name='GmtCreate', example='2022-01-07T10:07:57.000+0000'),
    gmtModified?: string(name='GmtModified', example='2022-01-07T10:07:57.000+0000'),
    id?: long(name='Id', example='12'),
    instanceId?: string(name='InstanceId', example='mse-cn-st21ri2****'),
    logConfigDetails?: {
      logEnabled?: boolean(name='LogEnabled', example='true'),
      logStoreName?: string(name='LogStoreName', example='mse_access_log'),
      projectName?: string(name='ProjectName', example='k8s-log-c173117256e934a96b7fefdf2ef8a8057'),
    }(name='LogConfigDetails'),
    mseTag?: string(name='MseTag', example='{"TagKey":"TagValue"}'),
    name?: string(name='Name', example='DEFAULT'),
    primaryUser?: string(name='PrimaryUser', example='1231254'),
    region?: string(name='Region', example='cn-hangzhou'),
    replica?: int32(name='Replica', example='2'),
    resourceGroupId?: string(name='ResourceGroupId', example='rg-acfm34x43l*****'),
    securityGroup?: string(name='SecurityGroup', example='sg-bp11ufzqn6mmb8dtzz82'),
    spec?: string(name='Spec', example='MSE_GTW_16_32_200_c'),
    status?: int32(name='Status', example='0'),
    statusDesc?: string(name='StatusDesc'),
    totalReplica?: int32(name='TotalReplica'),
    vpc?: string(name='Vpc', example='vpc-bp1328cm01m6uel42b5zb'),
    vswitch?: string(name='Vswitch', example='vsw-bp18zeqxx6mpuq843z4n5'),
    vswitch2?: string(name='Vswitch2', example='vpc-bp1j6ivhav15ve7q54kq2'),
    xtraceDetails?: {
      sample?: int32(name='Sample', example='10'),
      traceOn?: boolean(name='TraceOn', example='true'),
    }(name='XtraceDetails'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='9C96CDF8-9E6C-5AB6-B83C-8F87A10117E6'),
  success?: boolean(name='Success', example='true'),
}

model GetGatewayResponse = {
  headers: map[string]string(name='headers'),
  body: GetGatewayResponseBody(name='body'),
}

async function getGateway(request: GetGatewayRequest): GetGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetGateway', 'POST', '/', 'json', false, 'json', request);
}

model GetGatewayAuthConsumerDetailRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', example='gw-1a4ab101d5924b6f92c5ec98a84*****', position='Query'),
  id: long(name='Id', example='120', position='Query'),
}

model GetGatewayAuthConsumerDetailResponseBody = {
  code?: int32(name='Code', description='code仅仅用来和success同步', example='200'),
  data?: {
    consumerStatus?: boolean(name='ConsumerStatus', example='true'),
    description?: string(name='Description'),
    encodeType?: string(name='EncodeType', example='RSA'),
    gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-7ea3da97b96543e19f6c597cd4a9****'),
    gmtCreate?: string(name='GmtCreate', example='2031-03-30 02:35:12'),
    gmtModified?: string(name='GmtModified', example='2023-02-01 14:17:57'),
    id?: long(name='Id', example='12'),
    jwks?: string(name='Jwks', example='{
      "keys": [
            {
                  "e": "AQAB",
                  "kid": "DHFbpoIUqrY8t2zpA2qXfCmr5VO5ZEr4RzHU_-envvQ",
                  "kty": "RSA",
                  "n": "xAE7eB6qugXyCAG3yhh7pkDkT65pHymX-P7KfIupjf59vsdo91bSP9C8H07pSAGQO1MV_xFj9VswgsCg4R6otmg5PV2He95lZdHtOcU5DXIg_pbhLdKXbi66GlVeK6ABZOUW3WYtnNHD-91gVuoeJT_DwtGGcp4ignkgXfkiEm4sw-4sfb4qdt5oLbyVpmW6x9cfa7vs2WTfURiCrBoUqgBo_-4WTiULmmHSGZHOjzwa8WtrtOQGsAFjIbno85jp6MnGGGZPYZbDAa_b3y5u-YpW7ypZrvD8BgtKVjgtQgZhLAGezMt0ua3DRrWnKqTZ0BJ_EyxOGuHJrLsn00fnMQ"
            }
      ]
}'),
    keyName?: string(name='KeyName', example='iss'),
    keyValue?: string(name='KeyValue', example='abcd'),
    name?: string(name='Name', example='test'),
    primaryUser?: string(name='PrimaryUser', example='123'),
    resourceList?: [ 
      {
        consumerId?: long(name='ConsumerId', example='123'),
        gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-4822033a8513496fa10f05c934f*****'),
        gmtCreate?: string(name='GmtCreate', example='2022-12-06 01:38:03'),
        gmtModified?: string(name='GmtModified', example='2022-12-06 01:38:03'),
        id?: long(name='Id', example='16'),
        resourceStatus?: boolean(name='ResourceStatus', example='true'),
        routeId?: long(name='RouteId', example='3458'),
        routeName?: string(name='RouteName', example='test'),
      }
    ](name='ResourceList'),
    tokenName?: string(name='TokenName', example='Authorization'),
    tokenPass?: boolean(name='TokenPass', example='true'),
    tokenPosition?: string(name='TokenPosition', example='HEADER'),
    tokenPrefix?: string(name='TokenPrefix', example='Bearer'),
    type?: string(name='Type', example='JWT'),
  }(name='Data'),
  dynamicCode?: string(name='DynamicCode', description='动态错误信息中的占位符', example='code'),
  dynamicMessage?: string(name='DynamicMessage', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', example='true'),
}

model GetGatewayAuthConsumerDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetGatewayAuthConsumerDetailResponseBody(name='body'),
}

async function getGatewayAuthConsumerDetail(request: GetGatewayAuthConsumerDetailRequest): GetGatewayAuthConsumerDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetGatewayAuthConsumerDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetGatewayDomainDetailRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-6d0b23e1d39e41658a968d79a635****', position='Query'),
  id?: string(name='Id', example='29', position='Query'),
}

model GetGatewayDomainDetailResponseBody = {
  code?: int32(name='Code', example='403'),
  data?: {
    afterDate?: long(name='AfterDate', example='2021-04-01 02:35:12'),
    algorithm?: string(name='Algorithm', example='RSA'),
    beforeDate?: long(name='BeforeDate', example='2021-04-01 02:35:12'),
    certIdentifier?: string(name='CertIdentifier', example='234-cn-hangzhou'),
    certName?: string(name='CertName', example='test'),
    commonName?: string(name='CommonName', example='name'),
    gatewayId?: long(name='GatewayId', example='1'),
    gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-7ea3da97b96543e19f6c597cd4a9****'),
    gmtAfter?: string(name='GmtAfter', example='2021-04-01 02:35:12'),
    gmtBefore?: string(name='GmtBefore', example='2021-04-01 02:35:12'),
    gmtCreate?: string(name='GmtCreate', example='2022-01-07T10:07:57.000+0000'),
    gmtModified?: string(name='GmtModified', example='2022-01-07T10:07:57.000+0000'),
    http2?: string(name='Http2', example='close'),
    id?: long(name='Id', example='12'),
    issuer?: string(name='Issuer', example='Istio'),
    mustHttps?: boolean(name='MustHttps', example='true'),
    name?: string(name='Name', example='test.com'),
    protocol?: string(name='Protocol', example='HTTP'),
    sans?: string(name='Sans', example='test.com'),
    tlsMax?: string(name='TlsMax', example='TLS 1.3'),
    tlsMin?: string(name='TlsMin', example='TLS 1.0'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='Id of the request', example='88B83302-CD88-54D3-8DF2-208BFDC73F0D'),
  success?: boolean(name='Success', example='true'),
}

model GetGatewayDomainDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetGatewayDomainDetailResponseBody(name='body'),
}

async function getGatewayDomainDetail(request: GetGatewayDomainDetailRequest): GetGatewayDomainDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetGatewayDomainDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetGatewayOptionRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  gatewayId?: long(name='GatewayId', example='429', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-c9bc5afd61014165bd58f621b491*****', position='Query'),
}

model GetGatewayOptionResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: GatewayOption(name='Data', example='{\\"LogConfigDetails\\": {\\"LogEnabled\\": False}, \\"TraceDetails\\": {\\"TraceEnabled\\": False}}'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='C92F4A4D-A2FD-593E-839E-F3D4DFD2****'),
  success?: boolean(name='Success', example='true'),
}

model GetGatewayOptionResponse = {
  headers: map[string]string(name='headers'),
  body: GetGatewayOptionResponseBody(name='body'),
}

async function getGatewayOption(request: GetGatewayOptionRequest): GetGatewayOptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetGatewayOption', 'POST', '/', 'json', false, 'json', request);
}

model GetGatewayRouteDetailRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-5d3a78a53ec947aa928212d671d400ac', position='Query'),
  routeId?: long(name='RouteId', example='1050', position='Query'),
}

model GetGatewayRouteDetailResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    ahasStatus?: int32(name='AhasStatus', example='1'),
    cors?: {
      allowCredentials?: boolean(name='AllowCredentials', example='true'),
      allowHeaders?: string(name='AllowHeaders', example='*'),
      allowMethods?: string(name='AllowMethods', example='GET,POST,PUT,DELETE,HEAD,OPTIONS,PATCH'),
      allowOrigins?: string(name='AllowOrigins', example='*'),
      exposeHeaders?: string(name='ExposeHeaders', example='*'),
      status?: string(name='Status', example='off'),
      timeUnit?: string(name='TimeUnit', example='h'),
      unitNum?: long(name='UnitNum', example='24'),
    }(name='Cors'),
    defaultServiceId?: long(name='DefaultServiceId', example='3'),
    defaultServiceName?: string(name='DefaultServiceName', example='test'),
    destinationType?: string(name='DestinationType', example='Single'),
    directResponse?: {
      body?: string(name='Body', example='{}'),
      code?: int32(name='Code', example='200'),
    }(name='DirectResponse'),
    domainId?: long(name='DomainId', example='235'),
    domainIdList?: [ long ](name='DomainIdList'),
    domainName?: string(name='DomainName', example='123.com'),
    domainNameList?: [ string ](name='DomainNameList'),
    enableWaf?: boolean(name='EnableWaf', example='true'),
    fallback?: boolean(name='Fallback', example='true'),
    fallbackServices?: [ 
      {
        agreementType?: string(name='AgreementType', example='DUBBO'),
        groupName?: string(name='GroupName', example='test'),
        name?: string(name='Name', example='name'),
        namespace?: string(name='Namespace', example='namespace'),
        percent?: int32(name='Percent', example='80'),
        serviceId?: long(name='ServiceId', example='1'),
        serviceName?: string(name='ServiceName', example='name'),
        servicePort?: int32(name='ServicePort', example='8848'),
        sourceType?: string(name='SourceType', example='MSE'),
        version?: string(name='Version', example='v1'),
      }
    ](name='FallbackServices'),
    gatewayId?: long(name='GatewayId', example='1'),
    gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-7ea3da97b96543e19f6c597c****'),
    gmtCreate?: string(name='GmtCreate', example='2022-01-07 18:07:57'),
    gmtModified?: string(name='GmtModified', example='2022-01-07T10:07:57.000+0000'),
    HTTPRewrite?: {
      host?: string(name='Host', example='aliyuncs.com'),
      path?: string(name='Path', example='/test/client'),
      pathType?: string(name='PathType', example='PRE'),
      pattern?: string(name='Pattern', example='/test'),
      status?: string(name='Status', example='off'),
      substitution?: string(name='Substitution', example='test'),
    }(name='HTTPRewrite'),
    headerOp?: {
      headerOpItems?: [ 
        {
          directionType?: string(name='DirectionType', example='Response'),
          key?: string(name='Key', example='debug'),
          opType?: string(name='OpType', example='Add'),
          value?: string(name='Value', example='test'),
        }
      ](name='HeaderOpItems'),
      status?: string(name='Status', example='off'),
    }(name='HeaderOp'),
    id?: long(name='Id', example='1050'),
    name?: string(name='Name', example='test'),
    policies?: string(name='Policies', example='{
      "CORS": "{\\"allowMethods\\":\\"GET,POST,PUT,DELETE,HEAD,OPTIONS,PATCH\\",\\"allowHeaders\\":\\"*\\",\\"exposeHeaders\\":\\"*\\",\\"unitNum\\":12,\\"allowCredentials\\":true,\\"status\\":\\"off\\",\\"allowOrigins\\":\\"*\\",\\"timeUnit\\":\\"h\\"}",
      "Timeout": "{\\"unitNum\\":10,\\"timeUnit\\":\\"s\\",\\"status\\":\\"off\\"}",
      "Retry": "{\\"attempts\\":2,\\"retryOn\\":[\\"5xx\\"],\\"status\\":\\"off\\"}",
      "HTTPRewrite": "{\\"pathType\\":\\"EQUAL\\",\\"path\\":\\"/o\\",\\"status\\":\\"off\\"}",
      "Waf": "{\\"enabled\\":false}",
      "HeaderOp": "{\\"status\\":\\"off\\",\\"headerOpItems\\":[{\\"directionType\\":\\"Request\\",\\"opType\\":\\"Add\\",\\"key\\":\\"kkk\\",\\"value\\":\\"ll\\"}]}"
}'),
    predicates?: string(name='Predicates', example='{}'),
    redirect?: {
      code?: int32(name='Code', example='200'),
      host?: string(name='Host', example='16'),
      path?: string(name='Path', example='10111'),
    }(name='Redirect'),
    retry?: {
      attempts?: int32(name='Attempts', example='1'),
      httpCodes?: [ string ](name='HttpCodes'),
      retryOn?: [ string ](name='RetryOn'),
      status?: string(name='Status', example='on'),
    }(name='Retry'),
    routeOrder?: int32(name='RouteOrder', example='1'),
    routePredicates?: {
      headerPredicates?: [ 
        {
          key?: string(name='Key', example='id'),
          type?: string(name='Type', example='PRE'),
          value?: string(name='Value', example='200'),
        }
      ](name='HeaderPredicates'),
      methodPredicates?: [ string ](name='MethodPredicates'),
      pathPredicates?: {
        ignoreCase?: boolean(name='IgnoreCase', example='true'),
        path?: string(name='Path', example='/api'),
        type?: string(name='Type', example='PRE'),
      }(name='PathPredicates'),
      queryPredicates?: [ 
        {
          key?: string(name='Key', example='userid'),
          type?: string(name='Type', example='PRE'),
          value?: string(name='Value', example='test'),
        }
      ](name='QueryPredicates'),
    }(name='RoutePredicates'),
    routeServices?: [ 
      {
        agreementType?: string(name='AgreementType', example='DUBBO'),
        groupName?: string(name='GroupName', example='api'),
        name?: string(name='Name', example='dubbo4'),
        namespace?: string(name='Namespace', example='acs_ecs_dashboard'),
        percent?: int32(name='Percent', example='80'),
        serviceId?: long(name='ServiceId', example='782'),
        serviceName?: string(name='ServiceName', example='xkc-crm'),
        servicePort?: int32(name='ServicePort', example='20880'),
        sourceType?: string(name='SourceType', example='MSE'),
        version?: string(name='Version', example='v1'),
      }
    ](name='RouteServices'),
    services?: string(name='Services', example='[{\\"Percent\\":100,\\"ServiceId\\":126}]'),
    status?: int32(name='Status', example='0'),
    timeout?: {
      status?: string(name='Status', example='off'),
      timeUnit?: string(name='TimeUnit', example='s'),
      unitNum?: int32(name='UnitNum', example='10'),
    }(name='Timeout'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='Id of the request', example='FDF2D16C-5D28-5FAA-A56B-30BDE3559880'),
  success?: boolean(name='Success', example='true'),
}

model GetGatewayRouteDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetGatewayRouteDetailResponseBody(name='body'),
}

async function getGatewayRouteDetail(request: GetGatewayRouteDetailRequest): GetGatewayRouteDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetGatewayRouteDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetGatewayServiceDetailRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-f4c960ad071a48a790b36324394c****', position='Query'),
  serviceId?: long(name='ServiceId', example='35', position='Query'),
}

model GetGatewayServiceDetailResponseBody = {
  code?: int32(name='Code', example='1'),
  data?: {
    gatewayId?: long(name='GatewayId', example='1'),
    gatewayTrafficPolicy?: TrafficPolicy(name='GatewayTrafficPolicy', example='{}'),
    gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-7ea3da97b96543e19f6c597c****'),
    gmtCreate?: string(name='GmtCreate', example='2022-01-07 18:07:57'),
    gmtModified?: string(name='GmtModified', example='2022-01-07T10:07:57.000+0000'),
    groupName?: string(name='GroupName', example='test'),
    healthCheck?: string(name='HealthCheck', example='true'),
    healthStatus?: string(name='HealthStatus', example='true'),
    id?: long(name='Id', example='1'),
    ips?: [ string ](name='Ips'),
    labelDetails?: [ 
      {
        key?: string(name='Key', example='label'),
        values?: [ string ](name='Values'),
      }
    ](name='LabelDetails'),
    metaInfo?: string(name='MetaInfo', example='{}'),
    name?: string(name='Name', example='test'),
    namespace?: string(name='Namespace', example='default'),
    portTrafficPolicyList?: [ 
      {
        gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-2837hfd91h34dbg87364g*****'),
        gmtCreate?: string(name='GmtCreate', example='1667460287386'),
        gmtModified?: string(name='GmtModified', example='1667460287386'),
        id?: long(name='Id', example='1'),
        serviceId?: long(name='ServiceId', example='1'),
        servicePort?: int32(name='ServicePort', example='8080'),
        trafficPolicy?: TrafficPolicy(name='TrafficPolicy'),
      }
    ](name='PortTrafficPolicyList'),
    ports?: [ int32 ](name='Ports'),
    serviceNameInRegistry?: string(name='ServiceNameInRegistry', example='test'),
    serviceProtocol?: string(name='ServiceProtocol', example='HTTP'),
    sourceId?: long(name='SourceId', example='1'),
    sourceType?: string(name='SourceType', example='MSE'),
    versionDetails?: [ 
      {
        endpointNum?: int32(name='EndpointNum', example='1'),
        endpointNumPercent?: string(name='EndpointNumPercent', example='20%'),
        serviceVersion?: {
          labels?: [ 
            {
              key?: string(name='Key', example='version'),
              value?: string(name='Value', example='v2'),
            }
          ](name='Labels'),
          name?: string(name='Name', example='v2'),
        }(name='ServiceVersion'),
      }
    ](name='VersionDetails'),
    versions?: [ 
      {
        label?: string(name='Label', example='version'),
        type?: string(name='Type', example='test'),
        value?: string(name='Value', example='v1'),
      }
    ](name='Versions'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='9802C54E-5CC5-5706-927B-993DBB6DCF2F'),
  success?: boolean(name='Success', example='true'),
}

model GetGatewayServiceDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetGatewayServiceDetailResponseBody(name='body'),
}

async function getGatewayServiceDetail(request: GetGatewayServiceDetailRequest): GetGatewayServiceDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetGatewayServiceDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetGovernanceKubernetesClusterRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  clusterId: string(name='ClusterId', example='cd23228b3c80c4d4f9ad7af1d87cc****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model GetGovernanceKubernetesClusterResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    clusterId?: string(name='ClusterId', example='cd23228b3c80c4d4f9ad7af1d87cc30d5'),
    clusterName?: string(name='ClusterName', example='myCluster'),
    k8sVersion?: string(name='K8sVersion', example='1.20.11-aliyun.1'),
    namespaceInfos?: string(name='NamespaceInfos', example='[{\\"Name\\":\\"ack-onepilot\\",\\"Tags\\":null},{\\"Name\\":\\"default\\",\\"Tags\\":{\\"mse-enable\\":\\"enabled\\"}},{\\"Name\\":\\"kube-node-lease\\",\\"Tags\\":null},{\\"Name\\":\\"kube-public\\",\\"Tags\\":null},{\\"Name\\":\\"kube-system\\",\\"Tags\\":null}]'),
    namespaces?: [ 
      {
        name?: string(name='Name', example='default'),
        tags?: string(name='Tags', example='"mse-enable":"enabled"'),
      }
    ](name='Namespaces'),
    pilotStartTime?: string(name='PilotStartTime', example='2022-01-11T11:50:38.000+0000'),
    region?: string(name='Region', example='cn-hangzhou'),
    updateTime?: string(name='UpdateTime', example='2022-01-12T05:24:31.000+0000'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='5B170A0D-2C5D-4CF8-B808-03966B86****'),
  success?: boolean(name='Success', example='True'),
}

model GetGovernanceKubernetesClusterResponse = {
  headers: map[string]string(name='headers'),
  body: GetGovernanceKubernetesClusterResponseBody(name='body'),
}

async function getGovernanceKubernetesCluster(request: GetGovernanceKubernetesClusterRequest): GetGovernanceKubernetesClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetGovernanceKubernetesCluster', 'POST', '/', 'json', false, 'json', request);
}

model GetImageRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  versionCode: string(name='VersionCode', description='集群版本', example='ZooKeeper_3_5_5', position='Query'),
}

model GetImageResponseBody = {
  data?: {
    currentVersionFullShowName?: string(name='CurrentVersionFullShowName', description='当前集群镜像版本的4位全名', example='3.5.5.0'),
    maxVersionChangelogUrl?: string(name='MaxVersionChangelogUrl', description='可升级的最大版本变更日志url', example='https://xxxxx'),
    maxVersionCode?: string(name='MaxVersionCode', description='可升级的增量版本Code', example='ZooKeeper_3_6_3'),
    maxVersionFullShowName?: string(name='MaxVersionFullShowName', description='可升级的增量版本全名', example='3.6.3.0'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpCode?: string(name='HttpCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='25EA0A83-9007-4E87-808C-637BE1A****'),
  success?: boolean(name='Success', example='true'),
}

model GetImageResponse = {
  headers: map[string]string(name='headers'),
  body: GetImageResponseBody(name='body'),
}

async function getImage(request: GetImageRequest): GetImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetImage', 'POST', '/', 'json', false, 'json', request);
}

model GetImportFileUrlRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The error code returned if the request failed.', example='zh', position='Query'),
  contentType?: string(name='ContentType', example='application/zip', position='Query'),
  instanceId: string(name='InstanceId', example='mse_prepaid_public_cn-7pp2b****', position='Query'),
  namespaceId?: string(name='NamespaceId', example='12788f73-9848-4388-98f1-507778f2****', position='Query'),
}

model GetImportFileUrlResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    url?: string(name='Url', example='http://xxxxxxx'),
  }(name='Data'),
  dynamicMessage?: string(name='DynamicMessage', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='19488A00-4AF5-55E1-A689-98BA9F5E7441'),
  success?: boolean(name='Success', example='true'),
}

model GetImportFileUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetImportFileUrlResponseBody(name='body'),
}

/**
  * The HTTP status code returned.
  *
 * @tags cluster
 */
async function getImportFileUrl(request: GetImportFileUrlRequest): GetImportFileUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetImportFileUrl', 'POST', '/', 'json', false, 'json', request);
}

model GetKubernetesSourceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', example='gw-c5d1aadb7df646cfb7065fbf75c1****', position='Query'),
  isAll?: boolean(name='IsAll', position='Query'),
  vpcId?: string(name='VpcId', example='vpc-bp1t50e045b5g7i3p****', position='Query'),
}

model GetKubernetesSourceResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      cluster?: string(name='Cluster', example='cbc1efca895a64af097ff00b26f3f****'),
      name?: string(name='Name', example='k8s-demo'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='Id of the request', example='1085A66C-DEF1-58EE-A0A4-31E00C9FC0D5'),
  success?: boolean(name='Success', example='true'),
}

model GetKubernetesSourceResponse = {
  headers: map[string]string(name='headers'),
  body: GetKubernetesSourceResponseBody(name='body'),
}

async function getKubernetesSource(request: GetKubernetesSourceRequest): GetKubernetesSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetKubernetesSource', 'POST', '/', 'json', false, 'json', request);
}

model GetLosslessRuleByAppRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  appId?: string(name='AppId', description='appId', example='hkhon1po62@c3df23522baa***', position='Query'),
  appName?: string(name='AppName', description='Key word of search lossless list', example='example-app', position='Query'),
  namespace?: string(name='Namespace', example='default', position='Query'),
  regionId?: string(name='RegionId', description='region id, such as cn-hangzhou', example='cn-hangzhou', position='Query'),
}

model GetLosslessRuleByAppResponseBody = {
  code?: int32(name='Code', description='code仅仅用来和success同步', example='200'),
  data?: {
    aligned?: boolean(name='Aligned', description='microservices lifecycle aligns to k8s\\"s or NOT', example='true'),
    appId?: string(name='AppId', description='appId', example='hkhon1po62@24810bf4364a***'),
    appName?: string(name='AppName', description='appName', example='spring-cloud-a'),
    count?: int32(name='Count', description='instance\\"s count of app', example='1'),
    delayTime?: int32(name='DelayTime', example='60'),
    enable?: boolean(name='Enable', description='rule is open or close', example='true'),
    funcType?: int32(name='FuncType', description='warmup function type, 2 means f(x)=x^2', example='2'),
    lossLessDetail?: boolean(name='LossLessDetail', description='show lossLess offline&online detail', example='true'),
    notice?: boolean(name='Notice', description='enable lossLess offline active notification', example='false'),
    related?: boolean(name='Related', description='K8s\\"s HPA is related to warmup or NOT', example='false'),
    warmupTime?: int32(name='WarmupTime', example='120'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='Success'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='DC34E4A3-5F1C-4E40-86EA-02EDF967****'),
  success?: boolean(name='Success', example='true'),
}

model GetLosslessRuleByAppResponse = {
  headers: map[string]string(name='headers'),
  body: GetLosslessRuleByAppResponseBody(name='body'),
}

async function getLosslessRuleByApp(request: GetLosslessRuleByAppRequest): GetLosslessRuleByAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLosslessRuleByApp', 'POST', '/', 'json', false, 'json', request);
}

model GetMseFeatureSwitchRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
}

model GetMseFeatureSwitchResponseBody = {
  errorCode?: string(name='ErrorCode', example='NoPermission'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='6B4653A3-8D9C-5FDC-BB0C-936D40E9794B'),
  result?: map[string]any(name='Result', example='{\\"nacos_config_encrypt\\": False}'),
  success?: boolean(name='Success', example='true'),
}

model GetMseFeatureSwitchResponse = {
  headers: map[string]string(name='headers'),
  body: GetMseFeatureSwitchResponseBody(name='body'),
}

async function getMseFeatureSwitch(request: GetMseFeatureSwitchRequest): GetMseFeatureSwitchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMseFeatureSwitch', 'POST', '/', 'json', false, 'json', request);
}

model GetMseSourceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The endpoint of the instance.', example='zh', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The data structure.', example='gw-7ea3da97b96543e19f6c597cd4a9****', position='Query'),
  type?: string(name='Type', description='The ID of the instance.', example='NACOS', position='Query'),
}

model GetMseSourceResponseBody = {
  code?: int32(name='Code', example='1'),
  data?: [ 
    {
      address?: string(name='Address', example='mse-af1****-nacos-ans.mse.aliyuncs.com:8848'),
      clusterId?: string(name='ClusterId', example='mse_'),
      instanceId?: string(name='InstanceId', example='mse_prepaid_public_cn-7pp2eec****'),
      name?: string(name='Name', example='test'),
      type?: string(name='Type', example='Nacos'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The ID of cluster.', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='The name.', example='5EB2D865-B43F-5526-8F92-857718CF73A2'),
  success?: boolean(name='Success', example='true'),
}

model GetMseSourceResponse = {
  headers: map[string]string(name='headers'),
  body: GetMseSourceResponseBody(name='body'),
}

async function getMseSource(request: GetMseSourceRequest): GetMseSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMseSource', 'POST', '/', 'json', false, 'json', request);
}

model GetNacosConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The message returned.', example='zh', position='Query'),
  beta?: boolean(name='Beta', description='The data structure.', example='true', position='Query'),
  dataId: string(name='DataId', description='The ID of the namespace.', example='halvie-mp-item****', position='Query'),
  group: string(name='Group', description='Specifies whether to perform a beta release. Valid values:

*   `true`: yes
*   `false`: no', example='common', position='Query'),
  instanceId: string(name='InstanceId', description='The name of the configuration group.', example='mse-cn-i7m2h0****', position='Query'),
  namespaceId?: string(name='NamespaceId', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='ddaf8f12-****-b1c1-86e7c72e266b', position='Query'),
}

model GetNacosConfigResponseBody = {
  configuration?: {
    appName?: string(name='AppName', description='The message digest of the configuration.', example='test'),
    betaIps?: string(name='BetaIps', description='The error code returned if the request failed.', example='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.'),
    content?: string(name='Content', description='The description of the configuration.', example='log.level=error'),
    dataId?: string(name='DataId', description='The name of the configuration group.', example='log.yaml'),
    desc?: string(name='Desc', description='The encryption key.', example='The list of IP addresses where the beta release of the configuration is performed.'),
    encryptedDataKey?: string(name='EncryptedDataKey', description='1.1.XX.XX, 2.2.XX.XX', example='key'),
    group?: string(name='Group', description='For testing', example='test'),
    md5?: string(name='Md5', description='The content of the configuration.', example='123rfsdf3'),
    tags?: string(name='Tags', description='The ID of the configuration.', example='context'),
    type?: string(name='Type', description='The tags of the configuration.', example='text'),
  }(name='Configuration', description='The name of the application.'),
  errorCode?: string(name='ErrorCode', description='mse-200-105', example='mse-100-000'),
  message?: string(name='Message', description='The configuration information.', example='success'),
  requestId?: string(name='RequestId', description='The format of the configuration.', example='B4EAB48C-BB4B-5B8D-B33B-35D69606C5AD'),
  success?: boolean(name='Success', description='duplicatedClusterAliasName', example='true'),
}

model GetNacosConfigResponse = {
  headers: map[string]string(name='headers'),
  body: GetNacosConfigResponseBody(name='body'),
}

/**
  * mse-200-105
  *
 * @tags cluster
 */
async function getNacosConfig(request: GetNacosConfigRequest): GetNacosConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetNacosConfig', 'POST', '/', 'json', false, 'json', request);
}

model GetNacosHistoryConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  dataId: string(name='DataId', example='msg-center.main.yaml', position='Query'),
  group: string(name='Group', example='DEFAULT_GROUP', position='Query'),
  instanceId: string(name='InstanceId', example='mse_prepaid_public_cn-st220g9ka02', position='Query'),
  namespaceId?: string(name='NamespaceId', example='6cf708a5-****-89f2-3ba62c5ee9ba', position='Query'),
  nid: string(name='Nid', example='40****', position='Query'),
}

model GetNacosHistoryConfigResponseBody = {
  configuration?: {
    appName?: string(name='AppName', example='test'),
    content?: string(name='Content', example='test'),
    dataId?: string(name='DataId', example='test.yaml'),
    encryptedDataKey?: string(name='EncryptedDataKey', example='23fds****'),
    group?: string(name='Group', example='public'),
    md5?: string(name='Md5', example='23sdf32f****'),
    opType?: string(name='OpType', example='text'),
  }(name='Configuration'),
  errorCode?: string(name='ErrorCode', example='NoPermission'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='69AD2AA7-DB47-449B-941B-B14409DF****'),
  success?: boolean(name='Success', example='true'),
}

model GetNacosHistoryConfigResponse = {
  headers: map[string]string(name='headers'),
  body: GetNacosHistoryConfigResponseBody(name='body'),
}

async function getNacosHistoryConfig(request: GetNacosHistoryConfigRequest): GetNacosHistoryConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetNacosHistoryConfig', 'POST', '/', 'json', false, 'json', request);
}

model GetOverviewRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='duplicated cluster alias name', example='zh', position='Query'),
  period?: int32(name='Period', description='mse-200-105', example='1', position='Query'),
  region?: string(name='Region', description='duplicatedClusterAliasName', example='cn-hangzhou', position='Query'),
}

model GetOverviewResponseBody = {
  code?: int32(name='Code', description='clusterNotFound', example='1'),
  data?: string(name='Data', description='mse-200-021', example='data'),
  httpStatusCode?: int32(name='HttpStatusCode', description='mse-100-001', example='200'),
  message?: string(name='Message', description='illegalRequest', example='illegal request:%s'),
  requestId?: string(name='RequestId', description='You are not authorized to perform this operation.', example='52BA6DA6-A702-4362-A32F-DFF79655****'),
  success?: string(name='Success', description='cluster not found', example='true'),
}

model GetOverviewResponse = {
  headers: map[string]string(name='headers'),
  body: GetOverviewResponseBody(name='body'),
}

/**
  * mse-100-001
  *
 * @tags msc
 */
async function getOverview(request: GetOverviewRequest): GetOverviewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOverview', 'POST', '/', 'json', false, 'json', request);
}

model GetPluginConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The name of the plug-in.', example='zh', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', description='The type.', example='gw-ubuwqygbq4783gqb2y3f87q****', position='Query'),
  pluginId: long(name='PluginId', description='The category of the plug-in.

0: custom

1: permission authorization

2: security protection

3: transmission protocol

4: traffic control

5: traffic observation', example='123', position='Query'),
}

model GetPluginConfigResponseBody = {
  code?: int32(name='Code', description='The description of the README file.', example='200'),
  data?: {
    category?: int32(name='Category', description='Indicates whether the plug-in is enabled.

0: disabled

1: enabled', example='0'),
    configCheck?: string(name='ConfigCheck', description='\\# The configuration includes the fields required for checking, such as name, age, and friends. Sample configuration: name: John age: 18 friends: - David - Anne', example='The application scope of the plug-in.

0: global

1: domain names

2: routes'),
    gatewayConfigList?: [ 
      {
        config?: string(name='Config', description='The ID of the gateway.', example='The unique ID of the gateway.'),
        configLevel?: int32(name='ConfigLevel', description='The dynamic error message.', example='0'),
        enable?: boolean(name='Enable', description='This is a plug-in.', example='true'),
        gatewayId?: long(name='GatewayId', description='The description of the README file.', example='1'),
        gatewayUniqueId?: string(name='GatewayUniqueId', description='\\# The configuration includes the fields required for checking, such as name, age, and friends. Sample configuration: name: John age: 18 friends: - David - Anne', example='gw-ubuwqygbq4783gqb2y3f87q****'),
        gmtCreate?: string(name='GmtCreate', description='The mode.', example='1667309705000'),
        gmtModified?: string(name='GmtModified', description='The dynamic error code.', example='1667309705000'),
        id?: long(name='Id', description='The error code returned if the request failed.', example='1'),
        pluginId?: long(name='PluginId', description='The message returned.', example='1'),
      }
    ](name='GatewayConfigList', description='The version of the plug-in.'),
    id?: long(name='Id', description='The WebAssembly language.

0: C++

1: TinyGo

2: Rust

3: AssemblyScript

4: Zig', example='1'),
    imageName?: string(name='ImageName', description='The unique ID of the gateway.', example='name'),
    mode?: int32(name='Mode', description='The creation time.', example='0'),
    name?: string(name='Name', description='The list of gateway plug-in configurations.', example='name'),
    phase?: int32(name='Phase', description='Indicates whether the plug-in is enabled.', example='0'),
    primaryUser?: string(name='PrimaryUser', description='The name of the image.', example='123'),
    priority?: int32(name='Priority', description='The plug-in configuration.', example='1'),
    publishState?: int32(name='PublishState', description='Indicates whether the request was successful.', example='1'),
    readme?: string(name='Readme', description='The unique ID of the gateway.', example='read me'),
    readmeEn?: string(name='ReadmeEn', description='The ID of the gateway plug-in.', example='read me'),
    status?: string(name='Status', description='The information about the plug-in configuration used for checking.', example='1'),
    summary?: string(name='Summary', description='The ID of the plug-in configuration.', example='The ID of the gateway.'),
    type?: int32(name='Type', description='The publish status.', example='0'),
    version?: string(name='Version', description='The data object.', example='v1'),
    versionJson?: string(name='VersionJson'),
    wasmLang?: int32(name='WasmLang', description='The update time.', example='0'),
  }(name='Data', description='The mode.'),
  dynamicCode?: string(name='DynamicCode', description='The information about the plug-in configuration used for checking.', example='code'),
  dynamicMessage?: string(name='DynamicMessage', description='\\# The configuration includes the fields required for checking, such as name, age, and friends. Sample configuration: name: John age: 18 friends: - David - Anne', example='message'),
  errorCode?: string(name='ErrorCode', description='The description of the README file that is edited in English.', example='500'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The execution stage of the plug-in.

0: default stage

1: authorization stage

2: authentication stage

3: statistics stage', example='200'),
  message?: string(name='Message', description='The execution priority of the plug-in. A larger value indicates a higher priority.', example='success'),
  requestId?: string(name='RequestId', description='The summary of the plug-in.', example='03A3E2F4-6804-5663-9D5D-2EC47A1*****'),
  success?: boolean(name='Success', description='This is a plug-in.', example='true'),
}

model GetPluginConfigResponse = {
  headers: map[string]string(name='headers'),
  body: GetPluginConfigResponseBody(name='body'),
}

async function getPluginConfig(request: GetPluginConfigRequest): GetPluginConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPluginConfig', 'POST', '/', 'json', false, 'json', request);
}

model GetPluginsRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='system error', example='zh', position='Query'),
  category?: int32(name='Category', description='cluster not found', example='1', position='Query'),
  enableOnly?: boolean(name='EnableOnly', description='mse-100-001', example='true', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', description='clusterNotFound', example='gw-0adf3ad751284cc69fcf9669fba*****', position='Query'),
  name?: string(name='Name', description='systemError', example='key-auth', position='Query'),
}

model GetPluginsResponseBody = {
  code?: int32(name='Code', description='The name of the plug-in.', example='200'),
  data?: [ 
    {
      category?: int32(name='Category', description='The dynamic error message.', example='0'),
      configCheck?: string(name='ConfigCheck', description='The version of the plug-in.', example='The summary of the plug-in.'),
      id?: long(name='Id', description='The message returned.', example='1'),
      maxVersion?: string(name='MaxVersion'),
      mode?: int32(name='Mode'),
      name?: string(name='Name', description='The data entries returned.', example='key-auth'),
      newVersionPublishingFlag?: boolean(name='NewVersionPublishingFlag'),
      phase?: int32(name='Phase', description='The type of the plug-in. Valid values:

0: custom

1: permission authorization

2: security protection

3: transmission protocol

4: traffic control

5: traffic observation', example='1'),
      primaryUser?: string(name='PrimaryUser', description='The dynamic part in the error message.', example='123'),
      priority?: int32(name='Priority', description='The name of the plug-in.', example='1'),
      publishState?: int32(name='PublishState', description='The execution stage of the plug-in.

*   0: default stage
*   1: authorization stage
*   2: authentication stage
*   3: statistics stage', example='1'),
      status?: string(name='Status', description='The information about the plug-in configuration used for checking.', example='1'),
      summary?: string(name='Summary', description='The ID of the plug-in.', example='The ID of the creator.'),
      version?: string(name='Version', description='The information about the plug-in.', example='v1'),
      wasmFile?: string(name='WasmFile', description='The execution priority of the plug-in. A larger value indicates a higher priority.', example='https://mse-shared-cn-hangzhou.oss-cn-hangzhou.aliyuncs.com/cfg/import/1917515******/gw-0adf3ad751284cc69fcf9669fba*****/2022/11/02/4d390496-2c17-4b42-a479-f9068ba****/16673573***5.wasm'),
      wasmLang?: int32(name='WasmLang', description='This is a plug-in.', example='0'),
    }
  ](name='Data', description='The error code returned if the request failed.'),
  dynamicCode?: string(name='DynamicCode', description='Indicates whether the request was successful.', example='code'),
  dynamicMessage?: string(name='DynamicMessage', description='The returned code.', example='message'),
  errorCode?: string(name='ErrorCode', description='The language of the response. Valid values:

zh: Chinese en: English', example='500'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The data returned.', example='200'),
  message?: string(name='Message', description='The ID of the request.', example='success'),
  requestId?: string(name='RequestId', description='The type of the plug-in. Valid values:

*   0: custom
*   1: permission authorization
*   2: security protection
*   3: transmission protocol
*   4: traffic control
*   5: traffic observation', example='03A3E2F4-6804-5663-9D5D-2EC47A1*****'),
  success?: boolean(name='Success', description='Specifies whether to enable the plug-in.', example='true'),
}

model GetPluginsResponse = {
  headers: map[string]string(name='headers'),
  body: GetPluginsResponseBody(name='body'),
}

async function getPlugins(request: GetPluginsRequest): GetPluginsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPlugins', 'POST', '/', 'json', false, 'json', request);
}

model GetServiceListRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  appId: string(name='AppId', example='xxx@xxx', position='Query'),
  ip?: string(name='Ip', example='127.0.0.1', position='Query'),
  region?: string(name='Region', example='cn-zhangjiakou', position='Query'),
  serviceName?: string(name='ServiceName', example='com.alibaba.xxx', position='Query'),
  serviceType?: string(name='ServiceType', example='dubbo', position='Query'),
}

model GetServiceListResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      dubboApplicationName?: string(name='DubboApplicationName', example='dubbo-application'),
      edasAppName?: string(name='EdasAppName', example='test'),
      group?: string(name='Group', example='dubbo'),
      metadata?: map[string]any(name='Metadata', example='{}'),
      methods?: [ 
        {
          methodController?: string(name='MethodController', example='com.alibaba.SayHelloController'),
          name?: string(name='Name', example='sayHello'),
          parameterTypes?: [ string ](name='ParameterTypes'),
          paths?: [ string ](name='Paths'),
          requestMethods?: [ string ](name='RequestMethods'),
          returnType?: string(name='ReturnType', example='int'),
        }
      ](name='Methods'),
      registryType?: string(name='RegistryType', example='nacos'),
      serviceName?: string(name='ServiceName', example='com.alibaba.xxx'),
      serviceType?: string(name='ServiceType', example='dubbo'),
      springApplicationName?: string(name='SpringApplicationName', example='spring-application'),
      version?: string(name='Version', example='1.0.0'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='xxx-xxx-xxx'),
  success?: boolean(name='Success', example='true'),
}

model GetServiceListResponse = {
  headers: map[string]string(name='headers'),
  body: GetServiceListResponseBody(name='body'),
}

async function getServiceList(request: GetServiceListRequest): GetServiceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetServiceList', 'POST', '/', 'json', false, 'json', request);
}

model GetServiceListenersRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  clusterId?: string(name='ClusterId', description='当前查询服务的集群标识', example='mse-09k1q11****', position='Query'),
  clusterName?: string(name='ClusterName', description='查询服务下某个集群的实例列表是所需要的参数', example='DEFAULT', position='Query'),
  groupName?: string(name='GroupName', description='服务所在的分组', example='WEB_GROUP', position='Query'),
  hasIpCount?: string(name='HasIpCount', example='none', position='Query'),
  instanceId?: string(name='InstanceId', description='当前查询服务的集群标识', example='mse_prepaid_public_cn-tl32odtt20j', position='Query'),
  namespaceId?: string(name='NamespaceId', description='服务所在的 namespace', example='ddaf8f12-****-b1c1-86e7c72e266b', position='Query'),
  pageNum?: int32(name='PageNum', description='查询第几页', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='每页展示条数', example='10', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  requestPars?: string(name='RequestPars', example='{}', position='Query'),
  serviceName?: string(name='ServiceName', description='查询指定的服务名信息', example='zeekr-orderboss', position='Query'),
}

model GetServiceListenersResponseBody = {
  data?: [ 
    {
      addr?: string(name='Addr', description='地址', example='119.23.84.102'),
      agent?: string(name='Agent', description='客户端版本', example='Nacos-Java-Client:v2.1.1'),
      app?: string(name='App', description='应用', example='app'),
      cluster?: string(name='Cluster', description='集群名称', example='DEFAULT'),
      ip?: string(name='IP', description='ip地址', example='172.16.1.5'),
      namespaceId?: string(name='NamespaceId', description='命名空间id', example='0ba53825-b183-414f-a6a0-288e4f1c467e'),
      port?: string(name='Port', description='端口号', example='8080'),
      serviceName?: string(name='ServiceName', description='服务名称', example='zeekr-orderboss'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpCode?: string(name='HttpCode', example='202'),
  message?: string(name='Message', example='success'),
  pageNumber?: int32(name='PageNumber', description='实例列表的页码', example='1'),
  pageSize?: int32(name='PageSize', description='输入时设置的每页行数', example='10'),
  requestId?: string(name='RequestId', example='54973C90-F379-4372-9AA5-053A3F7****'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', description='查询到的实例总数', example='2'),
}

model GetServiceListenersResponse = {
  headers: map[string]string(name='headers'),
  body: GetServiceListenersResponseBody(name='body'),
}

async function getServiceListeners(request: GetServiceListenersRequest): GetServiceListenersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetServiceListeners', 'POST', '/', 'json', false, 'json', request);
}

model GetTagsBySwimmingLaneGroupIdRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  groupId: long(name='GroupId', example='154', position='Query'),
  namespace?: string(name='Namespace', description='需要查询的MSE命名空间名字', example='default', maxLength=64, position='Query'),
}

model GetTagsBySwimmingLaneGroupIdResponseBody = {
  data?: [ string ](name='Data', example='["gray"]'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='69AD2AA7-DB47-449B-941B-B14409DF****'),
  success?: boolean(name='Success', example='true'),
}

model GetTagsBySwimmingLaneGroupIdResponse = {
  headers: map[string]string(name='headers'),
  body: GetTagsBySwimmingLaneGroupIdResponseBody(name='body'),
}

async function getTagsBySwimmingLaneGroupId(request: GetTagsBySwimmingLaneGroupIdRequest): GetTagsBySwimmingLaneGroupIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTagsBySwimmingLaneGroupId', 'POST', '/', 'json', false, 'json', request);
}

model GetZookeeperDataImportUrlRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The ID of the request.', example='zh', position='Query'),
  contentType?: string(name='ContentType', description='RestResult', example='zip', position='Query'),
  instanceId?: string(name='InstanceId', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='mse_prepaid_public_cn-zvp2xzzkk06', position='Query'),
}

model GetZookeeperDataImportUrlResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned.', example='200'),
  data?: {
    maxSize?: string(name='MaxSize', description='duplicatedClusterAliasName', example='250000'),
    url?: string(name='Url', description='mse-200-105', example='http://xxxxxxxxx'),
  }(name='Data', description='The maximum size of a file that can be uploaded each time. Unit: MB.'),
  dynamicCode?: string(name='DynamicCode', description='The returned data.', example='code'),
  dynamicMessage?: string(name='DynamicMessage', description='The URL that is used to upload the configuration file.', example='You are not authorized to perform this operation.'),
  errorCode?: string(name='ErrorCode', description='The message returned.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The request was successfully processed.', example='200'),
  message?: string(name='Message', description='The dynamic part in the error message.', example='The dynamic part in the error message. This parameter is used to replace the \\*\\*%s\\*\\* variable in the **ErrMessage** parameter.

>  If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.'),
  requestId?: string(name='RequestId', description='The status code. A value of 200 is returned if the request was successful.', example='E4E2058F-C524-5C29-9BC7-5874EA8D7CE2'),
  success?: boolean(name='Success', description='The error code returned if the request failed.', example='true'),
}

model GetZookeeperDataImportUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetZookeeperDataImportUrlResponseBody(name='body'),
}

async function getZookeeperDataImportUrl(request: GetZookeeperDataImportUrlRequest): GetZookeeperDataImportUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetZookeeperDataImportUrl', 'POST', '/', 'json', false, 'json', request);
}

model ImportNacosConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='mse-200-105', example='zh', position='Query'),
  fileUrl: string(name='FileUrl', description='> The operation is not provided in Nacos SDKs. For information about Nacos SDKs, see the [official documentation](https://nacos.io/zh-cn/docs/sdk.html).', example='http://mse-shared.oss-xxx.aliyuncs.com/cfg/import/xxxx/2021/01/11/xxxx.zip', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the request.', example='mse_prepaid_public_cn-****', position='Query'),
  namespaceId?: string(name='NamespaceId', description='mse_prepaid_public_cn-****', example='f5cdc80a-****-8094-282f5650fc00', position='Query'),
  policy?: string(name='Policy', description='Imports Nacos configurations as a file.', example='overwrite', position='Query'),
}

model ImportNacosConfigResponseBody = {
  code?: int32(name='Code', description='mse-200-021', example='1'),
  data?: {
    failData?: [ 
      {
        dataId?: string(name='DataId', description='The ID of the request.', example='test2.yaml'),
        group?: string(name='Group', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='test'),
      }
    ](name='FailData', description='The data structure.'),
    skipCount?: int32(name='SkipCount', description='The ID of the instance.', example='10'),
    skipData?: [ 
      {
        dataId?: string(name='DataId', description='The URL that is used to download the configuration file.', example='test.yaml'),
        group?: string(name='Group', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='public'),
      }
    ](name='SkipData', description='The ID of the namespace.'),
    succCount?: int32(name='SuccCount', description='system error', example='100'),
  }(name='Data', description='systemError'),
  dynamicMessage?: string(name='DynamicMessage', description='mse-100-001', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='illegal request:%s', example='mse-100-100'),
  httpStatusCode?: int32(name='HttpStatusCode', description='duplicated cluster alias name', example='200'),
  message?: string(name='Message', description='clusterNotFound', example='cluster not found'),
  requestId?: string(name='RequestId', description='mse-100-007', example='AF21683A-29C7-4853-AC0F-B5ADEE4****'),
  success?: boolean(name='Success', description='illegalRequest', example='true'),
}

model ImportNacosConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ImportNacosConfigResponseBody(name='body'),
}

/**
  * The details of the data.
  *
 * @tags cluster
 */
async function importNacosConfig(request: ImportNacosConfigRequest): ImportNacosConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportNacosConfig', 'POST', '/', 'json', false, 'json', request);
}

model ImportServicesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  fcServiceName?: string(name='FcServiceName', position='Query'),
  fcVersion?: string(name='FcVersion', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-77e1153db6e14c0a8b1fae20bcb89ca5', position='Query'),
  serviceList?: [ 
    {
      groupName?: string(name='GroupName', example='test'),
      ips?: [ string ](name='Ips'),
      name?: string(name='Name', example='test'),
      namespace?: string(name='Namespace', example='public'),
      servicePort?: long(name='ServicePort', description='服务的端口', example='8080'),
      serviceProtocol?: string(name='ServiceProtocol', description='服务的协议版本', example='GRPC, HTTP'),
    }
  ](name='ServiceList', example='DNS', shrink='json', position='Query'),
  sourceType?: string(name='SourceType', description='服务来源', example='DNS', position='Query'),
  tlsSetting?: string(name='TlsSetting', example='{
      "mode": "MUTUAL",
      "certId": "1*****-cn-hangzhou",
      "caCertContent": "123",
      "sni": "ceshi"
}', position='Query'),
}

model ImportServicesResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='0F0FBA7D-5AC5-5DC4-A1E9-E9656BFAE1B9'),
  success?: boolean(name='Success', example='true'),
}

model ImportServicesResponse = {
  headers: map[string]string(name='headers'),
  body: ImportServicesResponseBody(name='body'),
}

async function importServices(request: ImportServicesRequest): ImportServicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportServices', 'POST', '/', 'json', false, 'json', request);
}

model ImportZookeeperDataRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  fileName?: string(name='FileName', description='The name of the file that you want to import.', example='snapshot.5', position='Query'),
  fileUrl?: string(name='FileUrl', description='The URL of the source data.

> You must set this parameter to the URL that is generated by calling the GetZookeeperDataImportUrl operation.', example='http://xxxxxxxxxx', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse_prepaid_public_cn-u0t2xzvxa06', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}', position='Query'),
}

model ImportZookeeperDataResponseBody = {
  data?: any(name='Data', description='The details of the data.', example='null'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code returned.', example='202'),
  message?: string(name='Message', description='The message returned.', example='The request was successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='52BA6DA6-A702-4362-A32F-DFF79655****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model ImportZookeeperDataResponse = {
  headers: map[string]string(name='headers'),
  body: ImportZookeeperDataResponseBody(name='body'),
}

/**
  * **Danger** This operation clears existing data. Exercise caution when you call this API operation.
  *
 */
async function importZookeeperData(request: ImportZookeeperDataRequest): ImportZookeeperDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportZookeeperData', 'POST', '/', 'json', false, 'json', request);
}

model ListAnsInstancesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='mse-100-001', example='zh', position='Query'),
  clusterId?: string(name='ClusterId', description='mse-100-007', example='mse-09k1q11****', position='Query'),
  clusterName?: string(name='ClusterName', description='clusterNotFound', example='mse-7413****', position='Query'),
  groupName?: string(name='GroupName', description='illegal request:%s', example='test', position='Query'),
  instanceId?: string(name='InstanceId', description='cluster not found', example='mse_prepaid_public_cn-tl327w****', position='Query'),
  namespaceId?: string(name='NamespaceId', description='mse-200-021', example='12233****', position='Query'),
  pageNum: int32(name='PageNum', description='duplicatedClusterAliasName', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='duplicated cluster alias name', example='10', position='Query'),
  requestPars?: string(name='RequestPars', description='mse-200-105', example='{}', position='Query'),
  serviceName: string(name='ServiceName', description='illegalRequest', example='name', position='Query'),
}

model ListAnsInstancesResponseBody = {
  data?: [ 
    {
      app?: string(name='App', example='app'),
      clusterName?: string(name='ClusterName', example='DEFAULT'),
      datumKey?: string(name='DatumKey', example='30.5.XX.XX:unknown:DEFAULT'),
      defaultKey?: string(name='DefaultKey', example='30.5.XX.XX:unknown'),
      enabled?: boolean(name='Enabled', example='true'),
      ephemeral?: boolean(name='Ephemeral', example='true'),
      failCount?: int32(name='FailCount', example='0'),
      healthy?: boolean(name='Healthy', example='true'),
      instanceHeartBeatInterval?: int32(name='InstanceHeartBeatInterval', example='5000'),
      instanceHeartBeatTimeOut?: int32(name='InstanceHeartBeatTimeOut', example='15000'),
      instanceId?: string(name='InstanceId', example='30.5.XX.XX#0#DEFAULT#DEFAULT_GROUP@@consumers:com.alibaba.edas.IHelloService'),
      ip?: string(name='Ip', example='30.5.XX.XX'),
      ipDeleteTimeout?: int32(name='IpDeleteTimeout', example='30000'),
      lastBeat?: long(name='LastBeat', example='20201010'),
      marked?: boolean(name='Marked', example='true'),
      metadata?: map[string]any(name='Metadata', example='[int]'),
      okCount?: int32(name='OkCount', example='0'),
      port?: int32(name='Port', example='8080'),
      serviceName?: string(name='ServiceName', example='DEFAULT_GROUP@@consumers:com.alibaba.edas.IHelloService::'),
      weight?: int32(name='Weight', example='1'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='systemError', example='202'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='52BA6DA6-A702-4362-A32F-DFF79655****'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', description='system error', example='7'),
}

model ListAnsInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ListAnsInstancesResponseBody(name='body'),
}

/**
  * The heartbeat interval of the instance. Unit: seconds.
  *
 */
async function listAnsInstances(request: ListAnsInstancesRequest): ListAnsInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAnsInstances', 'GET', '/', 'json', false, 'json', request);
}

model ListAnsServiceClustersRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  clusterId?: string(name='ClusterId', example='mse-09k1q110q01', position='Query'),
  clusterName?: string(name='ClusterName', example='mse-7413****', position='Query'),
  groupName?: string(name='GroupName', example='DEFAULT_GROUP', position='Query'),
  instanceId?: string(name='InstanceId', example='mse_prepaid_public_cn-tl32a6****', position='Query'),
  namespaceId?: string(name='NamespaceId', example='12233****', position='Query'),
  pageNum: int32(name='PageNum', example='1', position='Query'),
  pageSize: int32(name='PageSize', example='10', position='Query'),
  serviceName?: string(name='ServiceName', example='nacos.test.3', position='Query'),
}

model ListAnsServiceClustersResponseBody = {
  data?: {
    appDetail?: {
      appId?: string(name='AppId', example='hkhon1po62@904cba2c0xxxxxx'),
      appName?: string(name='AppName', example='spring-cloud-b'),
      checkInternal?: int32(name='CheckInternal', example='2'),
      checkPath?: string(name='CheckPath', example='/health'),
      checkTimeout?: int32(name='CheckTimeout', example='5'),
      checkType?: string(name='CheckType', example='connection'),
      healthyCheckTimes?: int32(name='HealthyCheckTimes', example='2'),
      port?: int32(name='Port', example='6001'),
      unhealthyCheckTimes?: int32(name='UnhealthyCheckTimes', example='2'),
    }(name='AppDetail'),
    clusters?: [ 
      {
        defaultCheckPort?: int32(name='DefaultCheckPort', example='80'),
        defaultPort?: int32(name='DefaultPort', example='80'),
        healthCheckerType?: string(name='HealthCheckerType'),
        metadata?: map[string]any(name='Metadata', example='111'),
        name?: string(name='Name', example='test'),
        serviceName?: string(name='ServiceName', example='DEFAULT_GROUP@@nacos.test.3'),
        useIPPort4Check?: boolean(name='UseIPPort4Check', example='true'),
      }
    ](name='Clusters'),
    ephemeral?: boolean(name='Ephemeral', example='true'),
    groupName?: string(name='GroupName', example='DEFAULT_GROUP'),
    metadata?: map[string]any(name='Metadata', example='111'),
    name?: string(name='Name', example='nacos.test.3'),
    protectThreshold?: float(name='ProtectThreshold', example='0'),
    selectorType?: string(name='SelectorType', example='none'),
    source?: string(name='Source', example='console'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='52BA6DA6-A702-4362-A32F-DFF79655****'),
  success?: boolean(name='Success', example='true'),
}

model ListAnsServiceClustersResponse = {
  headers: map[string]string(name='headers'),
  body: ListAnsServiceClustersResponseBody(name='body'),
}

/**
  * Heartbeat Reporting
  *
 * @tags cluster
 */
async function listAnsServiceClusters(request: ListAnsServiceClustersRequest): ListAnsServiceClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAnsServiceClusters', 'POST', '/', 'json', false, 'json', request);
}

model ListAppBySwimmingLaneGroupTagRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  groupId: long(name='GroupId', example='119', position='Query'),
  namespace?: string(name='Namespace', description='需要查询的MSE命名空间名字', example='default', maxLength=64, position='Query'),
  tag: string(name='Tag', example='gray', position='Query'),
}

model ListAppBySwimmingLaneGroupTagResponseBody = {
  code?: int32(name='Code', description='code仅仅用来和success同步', example='200'),
  data?: any(name='Data', example='[{appName:"test",appId:"hkhon1po62@958bba95910341f
"}]'),
  dynamicMessage?: string(name='DynamicMessage', description='动态错误信息中的占位符', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='7466566F-F30F-4A29-965D-3E0AF21D****'),
  success?: boolean(name='Success', example='true'),
}

model ListAppBySwimmingLaneGroupTagResponse = {
  headers: map[string]string(name='headers'),
  body: ListAppBySwimmingLaneGroupTagResponseBody(name='body'),
}

async function listAppBySwimmingLaneGroupTag(request: ListAppBySwimmingLaneGroupTagRequest): ListAppBySwimmingLaneGroupTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAppBySwimmingLaneGroupTag', 'POST', '/', 'json', false, 'json', request);
}

model ListApplicationsWithTagRulesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The number of entries to return on each page.', example='zh', position='Query'),
  appId?: string(name='AppId', description='edas-service-platform', example='xjpc0h9h4d@xxx', deprecated='true', position='Query'),
  appName?: string(name='AppName', description='The number of the page to return.', example='test', maxLength=64, position='Query'),
  namespace?: string(name='Namespace', description='应用所属的MSE命名空间。', example='default', maxLength=64, position='Query'),
  pageNumber: int32(name='PageNumber', description='$.parameters[7].schema.description', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='$.parameters[7].schema.example', example='10', maximum=50, position='Query'),
  region: string(name='Region', description='$.parameters[7].schema.enumValueTitles', example='cn-hangzhou', position='Query'),
  source?: string(name='Source', description='readAndWrite', example='edasmsc', position='Query'),
}

model ListApplicationsWithTagRulesResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber', description='The rate.', example='1'),
    pageSize?: int32(name='PageSize', description='The modification time.', example='10'),
    result?: [ 
      {
        appId?: string(name='AppId', description='The ID of the request.', example='daqijp6c31@xxx'),
        appName?: string(name='AppName', description='The returned message.

*   If the request is successful, a success message is returned.
*   If the request fails, an error message is returned.', example='service-lottery-core'),
        namespace?: string(name='Namespace', description='应用所属的MSE命名空间。', example='default'),
        routeRules?: [ 
          {
            carryData?: boolean(name='CarryData', description='The information about the rules.', example='false'),
            enable?: boolean(name='Enable', description='The name of the rule.', example='true'),
            gmtModified?: string(name='GmtModified', description='The tag.', example='2022-01-06T06:11:06.000+0000'),
            id?: long(name='Id', description='Indicates whether the routing rule is deleted.', example='653'),
            instanceNum?: int32(name='InstanceNum', description='The name of the application.', example='1'),
            name?: string(name='Name', description='The status.', example='dubbo'),
            rate?: int32(name='Rate', description='Indicates whether the field is a primary key.', example='10'),
            remove?: boolean(name='Remove', description='The application ID.', example='true'),
            rules?: string(name='Rules', description='The number of instances.', example='{
  	"dubbo": [{
    "serviceName": "com.taobao.hsf.common.DemoService",
    "group": "",
    "version": "",
    "methodName": "sayHello",
    "condition": "AND",
    "argumentItems": [{
    	"index": 0,
    	"expr": "",
    	"operator": "rawvalue",
    	"value": "jim",
    	"cond": "=="
    }]
  	}]
  }'),
            status?: int32(name='Status', description='The data structure.', example='1'),
            tag?: string(name='Tag', description='The details of the rule.', example='gray'),
          }
        ](name='RouteRules', description='The details of the data.'),
        routeStatus?: long(name='RouteStatus', description='The details of the routing rule.', example='1'),
      }
    ](name='Result', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English'),
    totalSize?: int32(name='TotalSize', description='The ID of the rule.', example='1'),
  }(name='Data', description='The name of the application.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The ID of the region.', example='200'),
  message?: string(name='Message', description='The source of the routing rule. Default value: edasmsc.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the application.', example='7466566F-F30F-4A29-965D-3E0AF21D****'),
  success?: boolean(name='Success', description='The status of the route. Valid values: -0: disabled. -1: enabled.', example='true'),
}

model ListApplicationsWithTagRulesResponse = {
  headers: map[string]string(name='headers'),
  body: ListApplicationsWithTagRulesResponseBody(name='body'),
}

async function listApplicationsWithTagRules(request: ListApplicationsWithTagRulesRequest): ListApplicationsWithTagRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApplicationsWithTagRules', 'GET', '/', 'json', false, 'json', request);
}

model ListAuthPolicyRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  appId?: string(name='AppId', example='jgy4cadmqo@***', position='Query'),
  name?: string(name='Name', example='auto-rule-**', position='Query'),
  namespace?: string(name='Namespace', example='default', position='Query'),
  pageNumber: string(name='PageNumber', example='1', position='Query'),
  pageSize: string(name='PageSize', example='10', position='Query'),
  protocol?: string(name='Protocol', example='SPRING_CLOUD', position='Query'),
  region: string(name='Region', example='cn-shanghai', position='Query'),
  source: string(name='Source', example='edasmsc', position='Query'),
}

model ListAuthPolicyResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    result?: [ 
      {
        accountId?: string(name='AccountId', example='19039813784***'),
        appId?: string(name='AppId', example='hkhon1po62@5f1b08becb*****'),
        appName?: string(name='AppName', example='spring-cloud-a'),
        authRule?: [ 
          {
            appIds?: [ string ](name='AppIds'),
            authType?: int32(name='AuthType', example='0'),
            black?: boolean(name='Black', example='false'),
            k8sNamespaces?: [ string ](name='K8sNamespaces'),
            method?: {
              group?: string(name='Group', example='default'),
              name?: string(name='Name', example='hello'),
              parameterTypes?: [ string ](name='ParameterTypes'),
              returnType?: string(name='ReturnType', example='Boolean'),
              serviceName?: string(name='ServiceName', example='spring-cloud-a'),
              version?: string(name='Version', example='0.0.1'),
            }(name='Method'),
            path?: string(name='Path', example='/a'),
          }
        ](name='AuthRule'),
        authType?: int32(name='AuthType', example='0'),
        enable?: boolean(name='Enable', example='false'),
        id?: int32(name='Id', description='ID。', example='204'),
        k8sNamespace?: string(name='K8sNamespace', example='c19c6c500e1ff4d7abc7bed9b8236***'),
        name?: string(name='Name', example='test'),
        namespaceId?: string(name='NamespaceId', example='ced54a95-4e33-4bda-be7e-37e95868***'),
        protocol?: string(name='Protocol', example='SPRING_CLOUD'),
        regionId?: string(name='RegionId', example='cn-hangzhou'),
        source?: string(name='Source', example='edasmsc'),
        status?: int32(name='Status', example='1'),
      }
    ](name='Result'),
    totalSize?: int32(name='TotalSize', example='11'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='05A5A150-4A5F-5A8C-97D6-710776CC8408'),
  success?: boolean(name='Success', example='True'),
}

model ListAuthPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ListAuthPolicyResponseBody(name='body'),
}

async function listAuthPolicy(request: ListAuthPolicyRequest): ListAuthPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAuthPolicy', 'POST', '/', 'json', false, 'json', request);
}

model ListCircuitBreakerRulesRequest {
  regionId?: string(name='RegionId', position='Host'),
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  appId?: string(name='AppId', description='应用ID。', example='hkhon1po62@c3df23522bXXXXX', position='Query'),
  appName: string(name='AppName', description='应用名称。', example='spring-cloud-a', position='Query'),
  namespace: string(name='Namespace', description='应用所属的微服务命名空间。', example='default', position='Query'),
  pageIndex?: int32(name='PageIndex', description='起始页。', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='页大小。', example='10', position='Query'),
  resource?: string(name='Resource', description='查找指定接口的防护规则。', example='/a', position='Query'),
  resourceSearchKey?: string(name='ResourceSearchKey', description='查找包含接口关键字的防护规则。', example='a', position='Query'),
}

model ListCircuitBreakerRulesResponseBody = {
  code?: int32(name='Code', description='响应码。', example='200'),
  data?: {
    pageNumber?: int32(name='PageNumber', description='起始页。', example='1'),
    pageSize?: int32(name='PageSize', description='页大小。', example='10'),
    result?: [ 
      {
        appId?: string(name='AppId', description='应用ID。', example='hkhon1po62@c3df23522bXXXXX'),
        appName?: string(name='AppName', description='应用名称。', example='spring-cloud-a'),
        enable?: boolean(name='Enable', description='规则的启用状态。', example='true'),
        fallbackObject?: string(name='FallbackObject', description='规则绑定的行为。', example='"{\\"appName\\":\\"spring-cloud-a\\",\\"fallbackBehavior\\":{\\"webFallbackMode\\":0,\\"webRespContentType\\":0,\\"webRespMessage\\":\\"Blocked\\",\\"webRespStatusCode\\":429},\\"id\\":977,\\"name\\":\\"Fallback\\",\\"namespace\\":\\"default\\",\\"resourceClassification\\":1}"'),
        halfOpenBaseAmountPerStep?: int32(name='HalfOpenBaseAmountPerStep', description='熔断恢复每步最小通过数目。', example='5'),
        halfOpenRecoveryStepNum?: int32(name='HalfOpenRecoveryStepNum', description='熔断恢复阶段数。', example='1'),
        maxAllowedRtMs?: int32(name='MaxAllowedRtMs', description='慢调用RT（单位毫秒）：阈值类型为慢调用比例时，超过该时长则判定为慢请求。', example='200'),
        minRequestAmount?: int32(name='MinRequestAmount', description='触发熔断的最小请求数目，若当前统计窗口请求数小于此值，即使达到熔断条件规则也不会触发。', example='10'),
        namespace?: string(name='Namespace', description='应用所属的微服务命空间。', example='default'),
        regionId?: string(name='RegionId', description='集群所在地域。', example='cn-hangzhou'),
        resource?: string(name='Resource', description='接口名称：适用该规则的应用资源。需要与控制台接口详情处接口名称一致。', example='/a'),
        retryTimeoutMs?: int32(name='RetryTimeoutMs', description='熔断时长（单位毫秒）：即熔断触发后持续的时间。资源进入熔断状态后，在配置的熔断时长内，请求都会快速失败。', example='10000'),
        ruleId?: long(name='RuleId', description='规则ID。', example='1'),
        statIntervalMs?: int32(name='StatIntervalMs', description='统计窗口时长（单位毫秒）：统计的时间窗口长度，取值范围为1秒~120分钟。', example='20000'),
        strategy?: int32(name='Strategy', description='阈值类型：选择以慢调用比例或异常比例作为阈值。', example='0'),
        threshold?: float(name='Threshold', description='熔断比例阈值：触发熔断的比例阈值，取值范围为0 - 1，代表0% - 100%。', example='0.8'),
      }
    ](name='Result', description='返回结果。'),
    totalSize?: int32(name='TotalSize', description='总页数。', example='3'),
  }(name='Data', description='规则信息。'),
  httpStatusCode?: int32(name='HttpStatusCode', description='状态码。', example='200'),
  message?: string(name='Message', description='响应信息。', example='OK'),
  requestId?: string(name='RequestId', description='请求ID。', example='4E9FDCFE-0738-493B-B801-82BDFBCB****'),
  success?: boolean(name='Success', description='请求结果。', example='true'),
}

model ListCircuitBreakerRulesResponse = {
  headers: map[string]string(name='headers'),
  body: ListCircuitBreakerRulesResponseBody(name='body'),
}

async function listCircuitBreakerRules(request: ListCircuitBreakerRulesRequest): ListCircuitBreakerRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCircuitBreakerRules', 'POST', '/', 'json', false, 'json', request);
}

model ListClusterConnectionTypesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
}

model ListClusterConnectionTypesResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      showName?: string(name='ShowName', example='slb'),
    }
  ](name='Data'),
  dynamicMessage?: string(name='DynamicMessage', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='8625467C-27DD-5711-878E-6857E3074937'),
  success?: boolean(name='Success', example='True'),
}

model ListClusterConnectionTypesResponse = {
  headers: map[string]string(name='headers'),
  body: ListClusterConnectionTypesResponseBody(name='body'),
}

async function listClusterConnectionTypes(request: ListClusterConnectionTypesRequest): ListClusterConnectionTypesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListClusterConnectionTypes', 'POST', '/', 'json', false, 'json', request);
}

model ListClusterHealthCheckTaskRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='mse-200-021', example='zh', position='Query'),
  instanceId?: string(name='InstanceId', description='duplicatedClusterAliasName', example='mse_prepaid_public_cn-7pp2o4wfx01', position='Query'),
  pageNum?: int32(name='PageNum', description='duplicated cluster alias name', example='0', position='Query'),
  pageSize?: int32(name='PageSize', description='mse-100-007', example='10', position='Query'),
  regionId?: string(name='RegionId', description='illegalRequest', example='cn-hangzhou', position='Query'),
  requestPars?: string(name='RequestPars', description='illegal request:%s', example='{}', position='Query'),
}

model ListClusterHealthCheckTaskResponseBody = {
  code?: int32(name='Code', description='systemError', example='200'),
  data?: {
    pageNumber?: int32(name='PageNumber', description='实例列表的页码', example='0'),
    pageSize?: int32(name='PageSize', description='输入时设置的每页行数', example='10'),
    result?: [ 
      {
        appVersion?: string(name='AppVersion', example='1.2.1'),
        chargeType?: string(name='ChargeType', example='PREPAY'),
        clusterType?: string(name='ClusterType', example='Nacos-Ans'),
        createTime?: string(name='CreateTime', example='2022-06-20T06:51:46Z'),
        id?: int32(name='Id', example='1'),
        imageVersion?: string(name='ImageVersion', example='null'),
        instanceId?: string(name='InstanceId', example='mse_ingresspost-cn-0jbvrcex****'),
        primaryUser?: string(name='PrimaryUser', example='123456'),
        replica?: string(name='Replica', example='3'),
        riskList?: [ 
          {
            description?: string(name='Description'),
            id?: int32(name='Id', example='3426'),
            module?: string(name='Module', example='null'),
            mute?: boolean(name='Mute', example='false'),
            noticeFeature?: boolean(name='NoticeFeature', example='null'),
            primaryUser?: string(name='PrimaryUser', example='123456'),
            riskCode?: string(name='RiskCode', example='22020010001'),
            riskLevel?: string(name='RiskLevel', description='HIGH, MID, LOW, NONE', example='MID'),
            riskName?: string(name='RiskName'),
            riskType?: string(name='RiskType'),
            situation?: string(name='Situation'),
            suggestion?: string(name='Suggestion'),
            taskId?: long(name='TaskId', example='1'),
            type?: int32(name='Type', example='null'),
            values?: string(name='Values', example='null'),
          }
        ](name='RiskList'),
        score?: int32(name='Score', example='60'),
        spec?: string(name='Spec', example='MSE_SC_2_4_200_c'),
        status?: string(name='Status', example='FINISH'),
        totalItem?: int32(name='TotalItem', example='10'),
        totalRisk?: int32(name='TotalRisk', example='3'),
        type?: string(name='Type', example='null'),
        updateTime?: string(name='UpdateTime', example='2022-11-12 15:07:55'),
        versionCode?: string(name='VersionCode', example='NACOS_ANS_1_2_1_3'),
      }
    ](name='Result'),
    totalSize?: int32(name='TotalSize', description='查询到的实例总数', example='9'),
  }(name='Data'),
  dynamicCode?: string(name='DynamicCode', description='动态错误信息中的占位符', example='code'),
  dynamicMessage?: string(name='DynamicMessage', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='system error', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='cluster not found', example='4E9FDCFE-0738-493B-B801-82BDFBCB****'),
  success?: boolean(name='Success', description='mse-100-001', example='true'),
}

model ListClusterHealthCheckTaskResponse = {
  headers: map[string]string(name='headers'),
  body: ListClusterHealthCheckTaskResponseBody(name='body'),
}

async function listClusterHealthCheckTask(request: ListClusterHealthCheckTaskRequest): ListClusterHealthCheckTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListClusterHealthCheckTask', 'POST', '/', 'json', false, 'json', request);
}

model ListClusterTypesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='mse-100-007', example='zh', position='Query'),
  connectType?: string(name='ConnectType', description='duplicatedClusterAliasName', example='slb', position='Query'),
  mseVersion?: string(name='MseVersion', description='duplicated cluster alias name', example='mse_pro', position='Query'),
  regionId?: string(name='RegionId', description='mse-200-105', example='cn-hangzhou', position='Query'),
}

model ListClusterTypesResponseBody = {
  code?: int32(name='Code', description='mse-100-001', example='200'),
  data?: [ 
    {
      showName?: string(name='ShowName', example='Zookeeper'),
    }
  ](name='Data'),
  dynamicMessage?: string(name='DynamicMessage', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='cluster not found', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='illegal request:%s', example='200'),
  message?: string(name='Message', description='systemError', example='system error'),
  requestId?: string(name='RequestId', description='mse-200-021', example='821B5B05-8919-5FBB-BA75-417BFC093EB8'),
  success?: boolean(name='Success', description='clusterNotFound', example='True'),
}

model ListClusterTypesResponse = {
  headers: map[string]string(name='headers'),
  body: ListClusterTypesResponseBody(name='body'),
}

async function listClusterTypes(request: ListClusterTypesRequest): ListClusterTypesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListClusterTypes', 'POST', '/', 'json', false, 'json', request);
}

model ListClusterVersionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='duplicated cluster alias name', example='zh', position='Query'),
  clusterType?: string(name='ClusterType', description='mse-200-105', example='Nacos-Ans', position='Query'),
  mseVersion?: string(name='MseVersion', description='duplicatedClusterAliasName', example='mse_pro', position='Query'),
}

model ListClusterVersionsResponseBody = {
  code?: int32(name='Code', description='cluster not found', example='200'),
  data?: [ 
    {
      clusterType?: string(name='ClusterType', example='Nacos-Ans'),
      code?: string(name='Code', example='NACOS_2_0_0'),
      showName?: string(name='ShowName', example='2.1.0'),
    }
  ](name='Data'),
  dynamicMessage?: string(name='DynamicMessage', description='system error', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='clusterNotFound', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='illegalRequest', example='200'),
  message?: string(name='Message', description='mse-100-001', example='systemError'),
  requestId?: string(name='RequestId', description='illegal request:%s', example='7717BE5B-C958-5F87-BF49-464AA276EDD1'),
  success?: boolean(name='Success', description='mse-200-021', example='true'),
}

model ListClusterVersionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListClusterVersionsResponseBody(name='body'),
}

async function listClusterVersions(request: ListClusterVersionsRequest): ListClusterVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListClusterVersions', 'POST', '/', 'json', false, 'json', request);
}

model ListClustersRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='system error', example='zh', position='Query'),
  clusterAliasName?: string(name='ClusterAliasName', description='illegalRequest', example='cluster', position='Query'),
  pageNum: int32(name='PageNum', description='duplicated cluster alias name', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='mse-100-007', example='10', position='Query'),
  regionId: string(name='RegionId', description='illegal request:%s', example='cn-hangzhou', position='Query'),
  requestPars?: string(name='RequestPars', description='duplicatedClusterAliasName', example='{}', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='mse-200-021', example='rg-acfmxbzafebvvfa', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='mse-100-001', example='env'),
      value?: string(name='Value', description='systemError', example='prd'),
    }
  ](name='Tag', description='clusterNotFound', position='Query'),
}

model ListClustersResponseBody = {
  data?: [ 
    {
      appVersion?: string(name='AppVersion', example='1.9.3'),
      canUpdate?: boolean(name='CanUpdate', example='true'),
      chargeType?: string(name='ChargeType'),
      clusterAliasName?: string(name='ClusterAliasName', example='mse-7413****'),
      clusterName?: string(name='ClusterName', example='mse-cn-st21ri2****'),
      clusterType?: string(name='ClusterType', example='Eureka'),
      createTime?: string(name='CreateTime', example='2020-07-31 11:36:08'),
      endDate?: string(name='EndDate', example='2021-08-01 00:00:00'),
      initStatus?: string(name='InitStatus', example='RESTART_SUCCESS'),
      instanceCount?: long(name='InstanceCount', example='2'),
      instanceId?: string(name='InstanceId', example='mse-cn-st21ri2****'),
      internetAddress?: string(name='InternetAddress', example='47.98.XX.XX'),
      internetDomain?: string(name='InternetDomain', example='mse-7413****-p.eureka.mse.aliyuncs.com'),
      intranetAddress?: string(name='IntranetAddress', example='192.168.XX.XX'),
      intranetDomain?: string(name='IntranetDomain', example='mse-7413****-eureka.mse.aliyuncs.com'),
      mseVersion?: string(name='MseVersion', example='mse_pro'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmv7jiavm4uxa'),
      tags?: map[string]any(name='Tags'),
      versionCode?: string(name='VersionCode', example='EUREKA_1_9_3'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpCode?: string(name='HttpCode', example='202'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='69AD2AA7-DB47-449B-941B-B14409DF****'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', example='7'),
}

model ListClustersResponse = {
  headers: map[string]string(name='headers'),
  body: ListClustersResponseBody(name='body'),
}

async function listClusters(request: ListClustersRequest): ListClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListClusters', 'POST', '/', 'json', false, 'json', request);
}

model ListConfigTrackRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  dataId?: string(name='DataId', example='ballot', position='Query'),
  endTs: long(name='EndTs', example='1657178373', position='Query'),
  group?: string(name='Group', example='DEFAULT_GROUP', position='Query'),
  instanceId: string(name='InstanceId', example='mse_prepaid_public_cn-i7m2ne****', position='Query'),
  ip?: string(name='Ip', example='192.168.22.2', position='Query'),
  namespaceId?: string(name='NamespaceId', example='f3a510e2-df52-4fad-9815-42d8bc40****', position='Query'),
  pageNum: long(name='PageNum', example='1', position='Query'),
  pageSize: long(name='PageSize', example='10', position='Query'),
  requestPars?: string(name='RequestPars', example='{}', position='Query'),
  reverse?: boolean(name='Reverse', example='true', position='Query'),
  startTs: long(name='StartTs', example='1671010148', position='Query'),
}

model ListConfigTrackResponseBody = {
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpCode?: string(name='HttpCode', example='200'),
  message?: string(name='Message'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='0CE3ABD2-1E04-561F-A9B4-0423D50****'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='3'),
  traces?: [ 
    {
      client?: boolean(name='Client', example='false'),
      dataId?: string(name='DataId', example='eir-server.properties'),
      delay?: string(name='Delay', example='0'),
      event?: string(name='Event', example='pull'),
      group?: string(name='Group', example='DEFAULT_GROUP'),
      logDate?: string(name='LogDate', example='2022-11-28 15:09:15'),
      md5?: string(name='Md5', example='d21c9091c60daa0ff7ee2f420141e5a0'),
      push?: boolean(name='Push', example='false'),
      requestIp?: string(name='RequestIp', example='192.168.1.2'),
      responseIp?: string(name='ResponseIp', example='mse-1973b9a0-1670834*****-reg-center-0-2'),
      result?: string(name='Result', example='ok'),
      ts?: string(name='Ts', example='1659666529'),
      type?: string(name='Type', example='beta'),
    }
  ](name='Traces'),
}

model ListConfigTrackResponse = {
  headers: map[string]string(name='headers'),
  body: ListConfigTrackResponseBody(name='body'),
}

async function listConfigTrack(request: ListConfigTrackRequest): ListConfigTrackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListConfigTrack', 'POST', '/', 'json', false, 'json', request);
}

model ListEngineNamespacesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The HTTP status code.', example='zh', position='Query'),
  instanceId?: string(name='InstanceId', description='The data structure.', example='mse-cn-st21ri2****', position='Query'),
}

model ListEngineNamespacesResponseBody = {
  data?: [ 
    {
      configCount?: int32(name='ConfigCount', description='The source from which the namespace was created.', example='1'),
      namespace?: string(name='Namespace', description='The quota value.', example='DEFAULT'),
      namespaceDesc?: string(name='NamespaceDesc', description='The number of active services.', example='mytest'),
      namespaceShowName?: string(name='NamespaceShowName', description='The namespace.', example='public'),
      quota?: int32(name='Quota', description='The description of the namespace.', example='200'),
      serviceCount?: string(name='ServiceCount', description='The error code returned if the request failed.', example='3'),
      sourceType?: string(name='SourceType', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='mse'),
      type?: int32(name='Type', description='The quota.', example='0'),
    }
  ](name='Data', description='The type of the namespace. Valid values:

*   `0`: global configuration
*   `1`: default namespace
*   `2`: custom namespace'),
  errorCode?: string(name='ErrorCode', description='mse-200-105', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The ID of the request.', example='202'),
  message?: string(name='Message', description='The number of entries returned per page.', example='The number of the returned page.'),
  pageNumber?: int32(name='PageNumber', description='The details of the data.', example='1'),
  pageSize?: int32(name='PageSize', description='The details of the data.', example='10'),
  requestId?: string(name='RequestId', description='The request was successfully processed.', example='062D13C5-DEA3-4921-8918-C49A0F1B****'),
  success?: boolean(name='Success', description='duplicatedClusterAliasName', example='true'),
  totalCount?: int32(name='TotalCount', description='The message returned.', example='7'),
}

model ListEngineNamespacesResponse = {
  headers: map[string]string(name='headers'),
  body: ListEngineNamespacesResponseBody(name='body'),
}

async function listEngineNamespaces(request: ListEngineNamespacesRequest): ListEngineNamespacesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEngineNamespaces', 'POST', '/', 'json', false, 'json', request);
}

model ListEurekaInstancesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  clusterId?: string(name='ClusterId', example='mse-09k1q11****', position='Query'),
  pageNum: int32(name='PageNum', example='1', position='Query'),
  pageSize: int32(name='PageSize', example='10', position='Query'),
  requestPars?: string(name='RequestPars', example='{}', position='Query'),
  serviceName: string(name='ServiceName', example='name', position='Query'),
}

model ListEurekaInstancesResponseBody = {
  data?: [ 
    {
      app?: string(name='App', example='CONTACTINFO'),
      durationInSecs?: int32(name='DurationInSecs', example='90'),
      homePageUrl?: string(name='HomePageUrl', example='http://30.5.XX.XX:8091/'),
      hostName?: string(name='HostName', example='30.5.XX.XX'),
      instanceId?: string(name='InstanceId', example='L-PC1A6A28-****.hz.ali.com:contactinfo:8091'),
      ipAddr?: string(name='IpAddr', example='30.5.XX.XX'),
      lastDirtyTimestamp?: long(name='LastDirtyTimestamp', example='20201009115543'),
      lastUpdatedTimestamp?: long(name='LastUpdatedTimestamp', example='20201010071203'),
      metadata?: map[string]any(name='Metadata', example='[string]'),
      port?: int32(name='Port', example='8091'),
      renewalIntervalInSecs?: int32(name='RenewalIntervalInSecs', example='10'),
      securePort?: int32(name='SecurePort', example='443'),
      status?: string(name='Status', example='1/1'),
      vipAddress?: string(name='VipAddress', example='contactinfo'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpCode?: string(name='HttpCode', example='202'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', example='7'),
}

model ListEurekaInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ListEurekaInstancesResponseBody(name='body'),
}

async function listEurekaInstances(request: ListEurekaInstancesRequest): ListEurekaInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEurekaInstances', 'GET', '/', 'json', false, 'json', request);
}

model ListEurekaServicesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  clusterId: string(name='ClusterId', example='mse-09k1q11****', position='Query'),
  pageNum: int32(name='PageNum', example='1', position='Query'),
  pageSize: int32(name='PageSize', example='10', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  requestPars?: string(name='RequestPars', example='{}', position='Query'),
}

model ListEurekaServicesResponseBody = {
  data?: [ 
    {
      instancesId?: [ string ](name='InstancesId'),
      name?: string(name='Name', example='CONTACTINFO'),
      upStatus?: string(name='UpStatus', example='1/1'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpCode?: string(name='HttpCode', example='202'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', example='7'),
}

model ListEurekaServicesResponse = {
  headers: map[string]string(name='headers'),
  body: ListEurekaServicesResponseBody(name='body'),
}

async function listEurekaServices(request: ListEurekaServicesRequest): ListEurekaServicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEurekaServices', 'GET', '/', 'json', false, 'json', request);
}

model ListExportZookeeperDataRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='mse-100-007', example='zh', position='Query'),
  instanceId?: string(name='InstanceId', description='mse-200-105', example='mse-cn-7pp2d1****', position='Query'),
  pageNumber?: int32(name='PageNumber', description='duplicatedClusterAliasName', example='0', position='Query'),
  pageSize?: int32(name='PageSize', description='duplicated cluster alias name', example='10', position='Query'),
}

model ListExportZookeeperDataResponseBody = {
  data?: [ 
    {
      contentMap?: string(name='ContentMap', example='{}'),
      createTime?: long(name='CreateTime', example='1631001140913'),
      exportType?: string(name='ExportType', example='snapshot'),
      extend?: string(name='Extend', example='{}'),
      id?: int32(name='Id', example='1'),
      instanceId?: string(name='InstanceId', example='mse-cn-st21ri2****'),
      kubeoneTaskIds?: string(name='KubeoneTaskIds', example='10'),
      status?: string(name='Status', example='FINISH'),
      updateTime?: long(name='UpdateTime', example='1632979237663'),
    }
  ](name='Data'),
  dynamicMessage?: string(name='DynamicMessage', description='cluster not found', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='systemError', example='mse-100-000'),
  httpStatusCode?: string(name='HttpStatusCode', description='system error', example='200'),
  message?: string(name='Message', description='mse-200-021', example='clusterNotFound'),
  requestId?: string(name='RequestId', description='mse-100-001', example='8BD1E58D-0755-42AC-A599-E6B55112****'),
  success?: boolean(name='Success', description='illegal request:%s', example='true'),
}

model ListExportZookeeperDataResponse = {
  headers: map[string]string(name='headers'),
  body: ListExportZookeeperDataResponseBody(name='body'),
}

async function listExportZookeeperData(request: ListExportZookeeperDataRequest): ListExportZookeeperDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListExportZookeeperData', 'POST', '/', 'json', false, 'json', request);
}

model ListFlowRulesRequest {
  regionId?: string(name='RegionId', position='Host'),
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  appId?: string(name='AppId', example='hkhon1po62@c3df23522******', position='Query'),
  appName: string(name='AppName', example='xx-demo', position='Query'),
  namespace: string(name='Namespace', example='default', position='Query'),
  pageIndex?: int32(name='PageIndex', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  resource?: string(name='Resource', example='/a', position='Query'),
  resourceSearchKey?: string(name='ResourceSearchKey', example='/a', position='Query'),
}

model ListFlowRulesResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    result?: [ 
      {
        appId?: string(name='AppId', example='hkhon1po62@5f1b08becb*****'),
        appName?: string(name='AppName', example='finance'),
        controlBehavior?: int32(name='ControlBehavior', example='0'),
        enable?: boolean(name='Enable', example='true'),
        fallbackObject?: string(name='FallbackObject', example='"{\\"appName\\":\\"spring-cloud-a\\",\\"fallbackBehavior\\":{\\"webFallbackMode\\":0,\\"webRespContentType\\":0,\\"webRespMessage\\":\\"Blocked\\",\\"webRespStatusCode\\":429},\\"id\\":977,\\"name\\":\\"Fallback\\",\\"namespace\\":\\"default\\",\\"resourceClassification\\":1}"'),
        maxQueueingTimeMs?: int32(name='MaxQueueingTimeMs', example='500'),
        metricType?: int32(name='MetricType', example='1'),
        namespace?: string(name='Namespace', example='default'),
        regionId?: string(name='RegionId', example='cn-hangzhou'),
        resource?: string(name='Resource', example='/a'),
        ruleId?: long(name='RuleId', example='2'),
        threshold?: float(name='Threshold', example='10'),
        trafficTags?: map[string]any(name='TrafficTags', example='{\\"origin\\":\\"default\\"}'),
      }
    ](name='Result'),
    totalSize?: int32(name='TotalSize', example='11'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', example='true'),
}

model ListFlowRulesResponse = {
  headers: map[string]string(name='headers'),
  body: ListFlowRulesResponseBody(name='body'),
}

async function listFlowRules(request: ListFlowRulesRequest): ListFlowRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFlowRules', 'POST', '/', 'json', false, 'json', request);
}

model ListGatewayRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  descSort?: boolean(name='DescSort', example='false', position='Query'),
  filterParams?: {
    gatewayType?: string(name='GatewayType', example='Ingress'),
    gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-5017305290e14centbrveca****'),
    instanceId?: string(name='InstanceId', example='mse_ingresspre-cn-****'),
    mseTag?: string(name='MseTag', example='[{"key":"tagkey","value":"tagvalue"}]'),
    name?: string(name='Name', example='rutain-test'),
    resourceGroupId?: string(name='ResourceGroupId', example='rg-7y2uye*****'),
    vpc?: string(name='Vpc', example='vpc-bp13hhyjntbab7w****'),
  }(name='FilterParams', shrink='json', position='Query'),
  orderItem?: string(name='OrderItem', example='{}', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
}

model ListGatewayResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    result?: [ 
      {
        ahasOn?: boolean(name='AhasOn', example='false'),
        appVersion?: string(name='AppVersion', example='1.0.1.0'),
        armsOn?: boolean(name='ArmsOn', example='false'),
        chargeType?: string(name='ChargeType', example='POSTPAY'),
        currentVersion?: string(name='CurrentVersion', example='0.1.0-mse-gw'),
        elastic?: boolean(name='Elastic'),
        elasticInstanceId?: string(name='ElasticInstanceId'),
        elasticPolicy?: {
          elastic?: boolean(name='Elastic'),
          elasticType?: string(name='ElasticType'),
          maxReplica?: int32(name='MaxReplica'),
          timePolicyList?: [ 
            {
              desiredReplica?: int32(name='DesiredReplica'),
              endTime?: string(name='EndTime'),
              startTime?: string(name='StartTime'),
            }
          ](name='TimePolicyList'),
        }(name='ElasticPolicy'),
        elasticReplica?: int32(name='ElasticReplica'),
        elasticType?: string(name='ElasticType'),
        endDate?: string(name='EndDate', example='4792060800000'),
        gatewayType?: string(name='GatewayType', example='Ingress'),
        gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-5017305290e14cebb8ce5cb6a4****'),
        gatewayVersion?: string(name='GatewayVersion', example='1.2.9'),
        gmtCreate?: string(name='GmtCreate', example='2021-09-13 19:24:23'),
        gmtModified?: string(name='GmtModified', example='2021-09-13 19:24:23'),
        id?: long(name='Id', example='153'),
        initConfig?: {
          enableWaf?: boolean(name='EnableWaf', example='true'),
          supportWaf?: boolean(name='SupportWaf', example='true'),
        }(name='InitConfig'),
        instanceId?: string(name='InstanceId', example='mse_ingresspost-cn-0jbvrcex****'),
        internetSlb?: [ 
          {
            gatewaySlbMode?: string(name='GatewaySlbMode', example='UserHost'),
            gatewaySlbStatus?: string(name='GatewaySlbStatus', example='Ready'),
            internetNetworkFlow?: string(name='InternetNetworkFlow', example='20'),
            slbId?: string(name='SlbId', example='lb-bp1ut8asdfgucjk****'),
            slbIp?: string(name='SlbIp', example='153.12.XX.XX'),
            slbPort?: string(name='SlbPort', example='slb.s2.small'),
            slbSpec?: string(name='SlbSpec', example='slb.s2.small'),
            statusDesc?: string(name='StatusDesc'),
            type?: string(name='Type', example='PUB_NET'),
          }
        ](name='InternetSlb'),
        latestVersion?: string(name='LatestVersion', example='0.1.0-mse-gw'),
        mseTag?: string(name='MseTag', example='{"tagKey":"tagValue"}'),
        mustUpgrade?: boolean(name='MustUpgrade', example='false'),
        name?: string(name='Name', example='tesa-test'),
        primaryUser?: string(name='PrimaryUser', example='18278117654342'),
        region?: string(name='Region', example='cn-hangzhou'),
        replica?: int32(name='Replica', example='2'),
        resourceGroupId?: string(name='ResourceGroupId', example='rg-97hg87vi****'),
        rollBack?: boolean(name='RollBack', example='false'),
        slb?: [ 
          {
            gatewaySlbMode?: string(name='GatewaySlbMode', example='UserHost'),
            gatewaySlbStatus?: string(name='GatewaySlbStatus', example='Ready'),
            slbId?: string(name='SlbId', example='lb-bp1ut8asdfgucjk****'),
            slbIp?: string(name='SlbIp', example='153.12.XX.XX'),
            slbPort?: string(name='SlbPort', example='80'),
            slbSpec?: string(name='SlbSpec', example='slb.s2.small'),
            statusDesc?: string(name='StatusDesc'),
            type?: string(name='Type', example='PUB_NET'),
          }
        ](name='Slb'),
        spec?: string(name='Spec', example='MSE_GTW_1_2_200_c'),
        status?: int32(name='Status', example='2'),
        statusDesc?: string(name='StatusDesc'),
        supportWasm?: boolean(name='SupportWasm', example='true'),
        tag?: string(name='Tag', example='test'),
        totalReplica?: int32(name='TotalReplica'),
        upgrade?: boolean(name='Upgrade', example='false'),
        vswitch2?: string(name='Vswitch2', example='vsw-bpbrveck45nf****'),
      }
    ](name='Result'),
    totalSize?: long(name='TotalSize', example='9'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='You are not authorized to perform this operation. Action: mse:ListGateway, Resource: acs:mse:cn-hangzhou:102123:*'),
  requestId?: string(name='RequestId', description='Id of the request', example='34300B3-52EC-5049-8C96-914098CF****'),
  success?: boolean(name='Success', example='true'),
}

model ListGatewayResponse = {
  headers: map[string]string(name='headers'),
  body: ListGatewayResponseBody(name='body'),
}

async function listGateway(request: ListGatewayRequest): ListGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGateway', 'POST', '/', 'json', false, 'json', request);
}

model ListGatewayAuthConsumerRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  consumerStatus?: boolean(name='ConsumerStatus', example='true', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', example='gw-0fe488252dc44d55a9dd57875193****', position='Query'),
  name?: string(name='Name', example='test', position='Query'),
  pageNum: string(name='PageNum', example='1', position='Query'),
  pageSize: string(name='PageSize', example='10', position='Query'),
  type?: string(name='Type', example='JWT', position='Query'),
}

model ListGatewayAuthConsumerResponseBody = {
  code?: int32(name='Code', description='code仅仅用来和success同步', example='200'),
  data?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    result?: [ 
      {
        consumerStatus?: boolean(name='ConsumerStatus', example='true'),
        description?: string(name='Description'),
        gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-5017305290e14centbrveca****'),
        gmtCreate?: string(name='GmtCreate', example='2021-09-13 19:24:23'),
        gmtModified?: string(name='GmtModified', example='2022-01-07 18:07:57'),
        id?: long(name='Id', example='1'),
        name?: string(name='Name', example='test'),
        primaryUser?: string(name='PrimaryUser', example='123'),
        type?: string(name='Type', example='JWT'),
      }
    ](name='Result'),
    totalSize?: long(name='TotalSize', example='9'),
  }(name='Data'),
  dynamicCode?: string(name='DynamicCode', description='动态错误信息中的占位符', example='code'),
  dynamicMessage?: string(name='DynamicMessage', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='dc63-465d-8ef5-20dc18af****'),
  success?: boolean(name='Success', example='true'),
}

model ListGatewayAuthConsumerResponse = {
  headers: map[string]string(name='headers'),
  body: ListGatewayAuthConsumerResponseBody(name='body'),
}

async function listGatewayAuthConsumer(request: ListGatewayAuthConsumerRequest): ListGatewayAuthConsumerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGatewayAuthConsumer', 'POST', '/', 'json', false, 'json', request);
}

model ListGatewayAuthConsumerResourceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  consumerId: long(name='ConsumerId', example='2', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', example='gw-3f97e2989c344f35ab3fd62b19f1****', position='Query'),
  pageNum: string(name='PageNum', example='1', position='Query'),
  pageSize: string(name='PageSize', example='10', position='Query'),
  resourceStatus?: boolean(name='ResourceStatus', example='true', position='Query'),
  routeName?: string(name='RouteName', example='test', position='Query'),
}

model ListGatewayAuthConsumerResourceResponseBody = {
  code?: int32(name='Code', description='code仅仅用来和success同步', example='200'),
  data?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    result?: [ 
      {
        consumerId?: long(name='ConsumerId', example='2'),
        gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-5017305290e14centbrveca****'),
        gmtCreate?: string(name='GmtCreate', example='2022-01-07 18:07:57'),
        gmtModified?: string(name='GmtModified', example='2022-01-07 18:07:57'),
        id?: long(name='Id', example='1'),
        resourceStatus?: boolean(name='ResourceStatus', example='true'),
        routeId?: long(name='RouteId', example='3091'),
        routeName?: string(name='RouteName', example='test'),
      }
    ](name='Result'),
    totalSize?: long(name='TotalSize', example='11'),
  }(name='Data'),
  dynamicCode?: string(name='DynamicCode', description='动态错误信息中的占位符', example='code'),
  dynamicMessage?: string(name='DynamicMessage', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='A73AC37C-C617-4E3A-8049-372CF49C****'),
  success?: boolean(name='Success', example='True'),
}

model ListGatewayAuthConsumerResourceResponse = {
  headers: map[string]string(name='headers'),
  body: ListGatewayAuthConsumerResourceResponseBody(name='body'),
}

async function listGatewayAuthConsumerResource(request: ListGatewayAuthConsumerResourceRequest): ListGatewayAuthConsumerResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGatewayAuthConsumerResource', 'POST', '/', 'json', false, 'json', request);
}

model ListGatewayDomainRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-c9bc5afd61014165bd58f621b491****', position='Query'),
  type?: string(name='Type', description='The type of the domain name.', example='All', position='Query'),
}

model ListGatewayDomainResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: [ 
    {
      certBeforeDate?: string(name='CertBeforeDate', description='The expiration time.', example='2031-03-30 02:35:12'),
      certIdentifier?: string(name='CertIdentifier', description='The ID of the certificate.', example='3452-cn-hangzhou'),
      comment?: {
        status?: string(name='Status', description='The status.', example='Error'),
      }(name='Comment', description='The route comment (ingress).'),
      gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='12'),
      gmtCreate?: string(name='GmtCreate', description='The creation time.', example='2031-03-30 02:35:12'),
      gmtModified?: string(name='GmtModified', description='The update time.', example='2031-03-30 02:35:12'),
      http2?: string(name='Http2', description='Indicates whether `HTTP/2` is enabled.

*   `open`: `HTTP/2` is enabled.
*   `close`: `HTTP/2` is disabled.
*   `globalConfig`: Global configurations are used.', example='close'),
      id?: long(name='Id', description='The domain ID.', example='243'),
      mustHttps?: boolean(name='MustHttps', description='Indicates whether HTTPS is forcefully used.', example='true'),
      name?: string(name='Name', description='The domain name.', example='test.com'),
      protocol?: string(name='Protocol', description='The protocol.', example='HTTP'),
      status?: int32(name='Status', description='The status of the domain name. Valid values:

*   0: unpublish
*   2: publishing
*   3: published
*   4: editing
*   5: unpublishing
*   6: unavailable', example='3'),
      tlsMax?: string(name='TlsMax', description='The maximum version of Transport Layer Security (TLS).', example='TLS 1.3'),
      tlsMin?: string(name='TlsMin', description='The minimum version of TLS.', example='TLS 1.0'),
      type?: string(name='Type', description='The type.', example='Op'),
    }
  ](name='Data', description='The data of the node.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message returned if the request failed.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3F5D8E93-CA66-57F1-8BCF-A223E11B6B91'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model ListGatewayDomainResponse = {
  headers: map[string]string(name='headers'),
  body: ListGatewayDomainResponseBody(name='body'),
}

async function listGatewayDomain(request: ListGatewayDomainRequest): ListGatewayDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGatewayDomain', 'POST', '/', 'json', false, 'json', request);
}

model ListGatewayRouteRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  descSort?: boolean(name='DescSort', description='duplicated cluster alias name', example='false', position='Query'),
  filterParams?: {
    defaultServiceId?: long(name='DefaultServiceId', description='clusterNotFound', example='1'),
    domainId?: long(name='DomainId', description='mse-100-001', example='284'),
    domainName?: string(name='DomainName', description='system error', example='*.alites.com'),
    gatewayId?: long(name='GatewayId', description='illegalRequest', example='81'),
    gatewayUniqueId: string(name='GatewayUniqueId', description='systemError', example='gw-30a0106924c94bca8712ec4e79fc5acc'),
    name?: string(name='Name', description='illegal request:%s', example='test'),
    routeOrder?: int32(name='RouteOrder', description='cluster not found', example='1'),
    status?: int32(name='Status', description='mse-200-021', example='1'),
  }(name='FilterParams', description='mse-100-007', shrink='json', position='Query'),
  orderItem?: string(name='OrderItem', description='duplicatedClusterAliasName', example='GmtCreate', position='Query'),
  pageNumber?: int32(name='PageNumber', description='code', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='mse-200-105', example='10', position='Query'),
}

model ListGatewayRouteResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageNumber?: int32(name='PageNumber', example='11'),
    pageSize?: int32(name='PageSize', example='10'),
    result?: [ 
      {
        comment?: {
          status?: string(name='Status', example='error'),
        }(name='Comment'),
        defaultServiceId?: long(name='DefaultServiceId', example='1'),
        defaultServiceName?: string(name='DefaultServiceName', example='test'),
        destinationType?: string(name='DestinationType', example='Single'),
        directResponse?: {
          body?: string(name='Body', example='hello'),
          code?: int32(name='Code', example='200'),
        }(name='DirectResponse'),
        domainId?: long(name='DomainId', example='265'),
        domainIdList?: [ long ](name='DomainIdList'),
        domainName?: string(name='DomainName', example='y.com'),
        domainNameList?: [ string ](name='DomainNameList'),
        enableWaf?: string(name='EnableWaf', example='false'),
        fallback?: boolean(name='Fallback', example='true'),
        fallbackServices?: [ 
          {
            agreementType?: string(name='AgreementType', example='DUBBO'),
            groupName?: string(name='GroupName', example='test'),
            name?: string(name='Name', example='name'),
            namespace?: string(name='Namespace', example='Namespace'),
            percent?: int32(name='Percent', example='100'),
            serviceId?: long(name='ServiceId', example='353'),
            serviceName?: string(name='ServiceName', example='service name'),
            servicePort?: int32(name='ServicePort', example='8848'),
            sourceType?: string(name='SourceType', example='MSE'),
            version?: string(name='Version', example='v1'),
          }
        ](name='FallbackServices'),
        gatewayId?: long(name='GatewayId', example='496'),
        gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-cf0e7f52ecc7429dbc7ba4d5e3656100'),
        gmtCreate?: string(name='GmtCreate', example='2022-01-25T07:14:01.817+0000'),
        gmtModified?: string(name='GmtModified', example='2022-01-07 18:07:57'),
        id?: long(name='Id', example='47'),
        name?: string(name='Name', example='test'),
        predicates?: string(name='Predicates', example='{\\"PathPredicates\\":{\\"Path\\":\\"/rpc/compute \\",\\"Type\\":\\"PRE\\",\\"IgnoreCase\\":true}}'),
        redirect?: {
          code?: int32(name='Code', example='200'),
          host?: string(name='Host', example='test.com'),
          path?: string(name='Path', example='/test'),
        }(name='Redirect'),
        routeOrder?: int32(name='RouteOrder', example='1'),
        routePredicates?: {
          headerPredicates?: [ 
            {
              key?: string(name='Key', example='userid'),
              type?: string(name='Type', example='PRE'),
              value?: string(name='Value', example='test'),
            }
          ](name='HeaderPredicates'),
          methodPredicates?: [ string ](name='MethodPredicates'),
          pathPredicates?: {
            ignoreCase?: boolean(name='IgnoreCase', example='true'),
            path?: string(name='Path', example='/getIp'),
            type?: string(name='Type', example='PRE'),
          }(name='PathPredicates'),
          queryPredicates?: [ 
            {
              key?: string(name='Key', example='userid'),
              type?: string(name='Type', example='PRE'),
              value?: string(name='Value', example='test'),
            }
          ](name='QueryPredicates'),
        }(name='RoutePredicates'),
        routeServices?: [ 
          {
            agreementType?: string(name='AgreementType', example='DUBBO'),
            groupName?: string(name='GroupName', example='api'),
            httpDubboTranscoder?: {
              dubboServiceGroup?: string(name='DubboServiceGroup', example='service group'),
              dubboServiceName?: string(name='DubboServiceName', example='org.apache.dubbo.samples.basic.api.DemoService'),
              dubboServiceVersion?: string(name='DubboServiceVersion', example='0.0.0'),
              mothedMapList?: [ 
                {
                  dubboMothedName?: string(name='DubboMothedName', example='sayHello'),
                  httpMothed?: string(name='HttpMothed', example='ALL_GET'),
                  mothedpath?: string(name='Mothedpath', example='/mytestzbk/sayhello'),
                  paramMapsList?: [ 
                    {
                      extractKey?: string(name='ExtractKey', example='name'),
                      extractKeySpec?: string(name='ExtractKeySpec', example='ALL_QUERY_PARAMETER'),
                      mappingType?: string(name='MappingType', example='java.lang.String'),
                    }
                  ](name='ParamMapsList'),
                  passThroughAllHeaders?: string(name='PassThroughAllHeaders', example='PASS_NOT'),
                  passThroughList?: [ string ](name='PassThroughList'),
                }
              ](name='MothedMapList'),
            }(name='HttpDubboTranscoder'),
            name?: string(name='Name', example='test'),
            namespace?: string(name='Namespace', example='default'),
            percent?: int32(name='Percent', example='11'),
            serviceId?: long(name='ServiceId', example='1563'),
            serviceName?: string(name='ServiceName', example='hu'),
            servicePort?: int32(name='ServicePort', example='20880'),
            sourceType?: string(name='SourceType', example='MSE'),
            version?: string(name='Version', example='v1'),
          }
        ](name='RouteServices'),
        services?: string(name='Services', example='[]'),
        status?: int32(name='Status', example='2'),
        type?: string(name='Type', example='Op'),
      }
    ](name='Result'),
    totalSize?: long(name='TotalSize', example='36'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='Id of the request', example='83F02EAB-ECDF-55C6-B332-8649E5E7AF2C'),
  success?: boolean(name='Success', example='true'),
}

model ListGatewayRouteResponse = {
  headers: map[string]string(name='headers'),
  body: ListGatewayRouteResponseBody(name='body'),
}

async function listGatewayRoute(request: ListGatewayRouteRequest): ListGatewayRouteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGatewayRoute', 'POST', '/', 'json', false, 'json', request);
}

model ListGatewayRouteOnAuthRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', example='gw-c9bc5afd61014165bd58f621b491****', position='Query'),
  type: string(name='Type', example='JWT', position='Query'),
}

model ListGatewayRouteOnAuthResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      domainId?: long(name='DomainId', example='235'),
      domainIdList?: [ long ](name='DomainIdList'),
      domainName?: string(name='DomainName', example='123.com'),
      domainNameList?: [ string ](name='DomainNameList'),
      gatewayId?: string(name='GatewayId', example='399'),
      gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-7ea3da97b96543e19f6c597c****'),
      id?: int32(name='Id', example='12'),
      name?: string(name='Name', example='ceshi'),
      routePredicates?: {
        pathPredicates?: {
          path?: string(name='Path', example='/api'),
          type?: string(name='Type', example='PRE'),
        }(name='PathPredicates'),
      }(name='RoutePredicates'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='58E06A0A-BD2C-47A0-99C2-B100F353****'),
  success?: boolean(name='Success', example='true'),
}

model ListGatewayRouteOnAuthResponse = {
  headers: map[string]string(name='headers'),
  body: ListGatewayRouteOnAuthResponseBody(name='body'),
}

async function listGatewayRouteOnAuth(request: ListGatewayRouteOnAuthRequest): ListGatewayRouteOnAuthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGatewayRouteOnAuth', 'POST', '/', 'json', false, 'json', request);
}

model ListGatewayServiceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='system error', example='zh', position='Query'),
  descSort?: boolean(name='DescSort', description='mse-100-007', example='false', position='Query'),
  filterParams?: {
    gatewayUniqueId?: string(name='GatewayUniqueId', description='mse-100-001', example='gw-5017305290e14centbrveca****'),
    groupName?: string(name='GroupName', description='cluster not found', example='test'),
    name?: string(name='Name', description='illegal request:%s', example='test'),
    namespace?: string(name='Namespace', description='clusterNotFound', example='public'),
    serviceProtocol?: string(name='ServiceProtocol', description='systemError', example='HTTP'),
    sourceType?: string(name='SourceType', description='mse-200-021', example='MSE'),
  }(name='FilterParams', description='illegalRequest', shrink='json', position='Query'),
  orderItem?: string(name='OrderItem', description='duplicated cluster alias name', example='GmtCreate', position='Query'),
  pageNumber?: int32(name='PageNumber', description='mse-200-105', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='duplicatedClusterAliasName', example='10', position='Query'),
}

model ListGatewayServiceResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    result?: [ 
      {
        gatewayId?: long(name='GatewayId', example='1'),
        gatewayTrafficPolicy?: {
          loadBalancerSettings?: {
            consistentHashLBConfig?: {
              consistentHashLBType?: string(name='ConsistentHashLBType', description='HEADER, COOKIE, SOURCE_IP, QUERY_PARAMETER', example='HEADER'),
              httpCookie?: {
                name?: string(name='Name', example='name'),
                path?: string(name='Path', example='/path'),
                ttl?: string(name='Ttl', example='360'),
              }(name='HttpCookie'),
              minimumRingSize?: long(name='MinimumRingSize', example='10000'),
              parameterName?: string(name='ParameterName', example='param'),
            }(name='ConsistentHashLBConfig'),
            loadbalancerType?: string(name='LoadbalancerType', description='ROUND_ROBIN, LEAST_CONN, RANDOM, CONSISTENT_HASH', example='RANDOM'),
            warmupDuration?: int32(name='WarmupDuration', example='10'),
          }(name='LoadBalancerSettings'),
          tls?: {
            caCertContent?: string(name='CaCertContent', example='content'),
            caCertId?: string(name='CaCertId', example='5******-cn-hangzhou'),
            certId?: string(name='CertId', example='5******-cn-hangzhou'),
            mode?: string(name='Mode', description='DISABLE, SIMPLE, MUTUAL, ISTIO_MUTUAL', example='SIMPLE'),
            sni?: string(name='Sni', example='name-sni'),
            subjectAltNames?: [ string ](name='SubjectAltNames'),
          }(name='Tls'),
        }(name='GatewayTrafficPolicy'),
        gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-5017305290e14centbrveca****'),
        gmtCreate?: string(name='GmtCreate', example='2022-01-07 18:07:57'),
        gmtModified?: string(name='GmtModified', example='2022-01-07 18:07:57'),
        groupName?: string(name='GroupName', example='test'),
        healehStatus?: string(name='HealehStatus', example='Unhealthy'),
        healthCheck?: boolean(name='HealthCheck', example='true'),
        healthCheckInfo?: {
          check?: boolean(name='Check', example='true'),
          expectedStatuses?: [ int32 ](name='ExpectedStatuses'),
          healthyThreshold?: int32(name='HealthyThreshold', example='2'),
          httpHost?: string(name='HttpHost', example='http://172.168.0.1'),
          httpPath?: string(name='HttpPath', example='/health'),
          interval?: int32(name='Interval', example='2'),
          protocol?: string(name='Protocol', example='TCP'),
          timeout?: int32(name='Timeout', example='2'),
          unhealthyThreshold?: int32(name='UnhealthyThreshold', example='2'),
        }(name='HealthCheckInfo'),
        healthStatus?: string(name='HealthStatus', example='Unhealthy'),
        id?: long(name='Id', example='1'),
        ips?: [ string ](name='Ips'),
        metaInfo?: string(name='MetaInfo', example='{}'),
        name?: string(name='Name', example='test'),
        namespace?: string(name='Namespace', example='public'),
        ports?: [ int32 ](name='Ports'),
        serviceNameInRegistry?: string(name='ServiceNameInRegistry', example='test'),
        servicePort?: long(name='ServicePort', example='80'),
        serviceProtocol?: string(name='ServiceProtocol', example='HTTP'),
        sourceId?: long(name='SourceId', example='2'),
        sourceType?: string(name='SourceType', example='MSE'),
        unhealthyEndpoints?: [ string ](name='UnhealthyEndpoints'),
        versions?: [ 
          {
            name?: string(name='Name', example='v1'),
          }
        ](name='Versions'),
      }
    ](name='Result'),
    totalSize?: long(name='TotalSize', example='9'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='Id of the request', example='F46CDBA4-B1EE-5C94-8A48-51C10177****'),
  success?: boolean(name='Success', example='true'),
}

model ListGatewayServiceResponse = {
  headers: map[string]string(name='headers'),
  body: ListGatewayServiceResponseBody(name='body'),
}

async function listGatewayService(request: ListGatewayServiceRequest): ListGatewayServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGatewayService', 'POST', '/', 'json', false, 'json', request);
}

model ListGatewaySlbRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-1cef5440bf2d484db419fb264d4f****', position='Query'),
}

model ListGatewaySlbResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      editEnable?: boolean(name='EditEnable', example='false'),
      gatewayId?: string(name='GatewayId', example='1'),
      gatewaySlbMode?: string(name='GatewaySlbMode', example='UserSelect'),
      gatewaySlbStatus?: string(name='GatewaySlbStatus', example='Ready'),
      gmtCreate?: string(name='GmtCreate', example='2022-01-14 14:39:16'),
      httpPort?: int32(name='HttpPort', example='80'),
      httpsPort?: int32(name='HttpsPort', example='443'),
      httpsVServerGroupId?: string(name='HttpsVServerGroupId', example='353'),
      id?: string(name='Id', example='ID'),
      serviceWeight?: int32(name='ServiceWeight', example='80'),
      slbId?: string(name='SlbId', example='lb-bp1kmnli3hdpreptw2ah3'),
      slbIp?: string(name='SlbIp', example='121.199.XX.XX'),
      slbPort?: string(name='SlbPort', example='80,443'),
      statusDesc?: string(name='StatusDesc'),
      type?: string(name='Type', example='PUB_NET'),
      vServerGroupId?: string(name='VServerGroupId', example='353'),
      vServiceList?: [ 
        {
          port?: string(name='Port'),
          protocol?: string(name='Protocol'),
          vServerGroupId?: string(name='VServerGroupId'),
          vServerGroupName?: string(name='VServerGroupName'),
        }
      ](name='VServiceList'),
      vsMetaInfo?: string(name='VsMetaInfo'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='EAB345F4-3AC3-560C-B653-65717703****'),
  success?: boolean(name='Success', example='true'),
}

model ListGatewaySlbResponse = {
  headers: map[string]string(name='headers'),
  body: ListGatewaySlbResponseBody(name='body'),
}

async function listGatewaySlb(request: ListGatewaySlbRequest): ListGatewaySlbResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGatewaySlb', 'POST', '/', 'json', false, 'json', request);
}

model ListInstanceCountRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  clusterType?: string(name='ClusterType', description='The type of the instance. Valid values: ZooKeeper and Nacos-Ans.', example='Nacos-Ans', position='Query'),
  mseVersion?: string(name='MseVersion', description='The edition type of the instance. Valid values:

*   `mse_dev`: Developer Edition
*   `mse_pro`: Professional Edition', example='mse_pro', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the instance resides. Examples:

*   cn-hangzhou: China (Hangzhou)
*   cn-beijing: China (Beijing)
*   cn-shanghai: China (Shanghai)
*   cn-zhangjiakou: China (Zhangjiakou)
*   cn-shenzhen: China (Shenzhen)', example='cn-hangzhou', position='Query'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}', position='Query'),
}

model ListInstanceCountResponseBody = {
  code?: int32(name='Code', description='The status code. A value of 200 is returned if the request is successful.', example='200'),
  data?: [ int32 ](name='Data', description='The data entries returned.'),
  dynamicCode?: string(name='DynamicCode', description='The dynamic part in the error message.', example='%s'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace `%s` in the `ErrMessage` parameter.

> If the return value of the `ErrMessage` parameter is `The Value of Input Parameter %s is not valid` and the return value of the `DynamicMessage` parameter is `DtsJobId`, the specified `DtsJobId` parameter is invalid.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed. If the request failed, the ErrorCode parameter is returned. For more information, see the [Error codes](~~456441~~) section of this topic.', example='mse-100-100'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned. If the request is successful, a success message is returned. If the request fails, an error message is returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model ListInstanceCountResponse = {
  headers: map[string]string(name='headers'),
  body: ListInstanceCountResponseBody(name='body'),
}

async function listInstanceCount(request: ListInstanceCountRequest): ListInstanceCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstanceCount', 'POST', '/', 'json', false, 'json', request);
}

model ListListenersByConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='mse-200-021', example='zh', position='Query'),
  dataId: string(name='DataId', description='mse-100-007', example='zeekr-clueboss.yml', position='Query'),
  group: string(name='Group', description='illegalRequest', example='prod', position='Query'),
  instanceId: string(name='InstanceId', description='duplicated cluster alias name', example='mse-cn-m7r1yurp00e', position='Query'),
  namespaceId?: string(name='NamespaceId', description='illegal request:%s', example='aaeb4d28-c9eb-4fa2-85f5-d03ce7ee8df1', position='Query'),
  requestPars?: string(name='RequestPars', description='mse-200-105', example='duplicatedClusterAliasName', position='Query'),
}

model ListListenersByConfigResponseBody = {
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='cluster not found', example='202'),
  listeners?: [ 
    {
      ip?: string(name='Ip', example='1.1.1.1'),
      md5?: string(name='Md5', example='23sdfdf'),
      status?: string(name='Status', example='beta'),
    }
  ](name='Listeners', description='systemError'),
  message?: string(name='Message', example='success'),
  pageNumber?: int32(name='PageNumber', example='2'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='75E1442F-11EC-567A-9CF0-5A36F7904F39'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', description='mse-100-001', example='7'),
}

model ListListenersByConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ListListenersByConfigResponseBody(name='body'),
}

/**
  * The HTTP status code returned.
  *
 */
async function listListenersByConfig(request: ListListenersByConfigRequest): ListListenersByConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListListenersByConfig', 'POST', '/', 'json', false, 'json', request);
}

model ListListenersByIpRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='system error', example='zh', position='Query'),
  instanceId: string(name='InstanceId', description='cluster not found', example='mse_prepaid_public_cn-i7m2cecji09', position='Query'),
  ip: string(name='Ip', description='mse-100-001', example='172.22.0.240', position='Query'),
  namespaceId?: string(name='NamespaceId', description='systemError', example='ea02a522-9482-4255-bb65-dc0636d783f2', position='Query'),
  requestPars?: string(name='RequestPars', description='clusterNotFound', example='{}', position='Query'),
}

model ListListenersByIpResponseBody = {
  errorCode?: string(name='ErrorCode', description='The ID of the request.', example='MSE-100-000'),
  httpCode?: string(name='HttpCode', description='The ID of the instance.', example='202'),
  listeners?: [ 
    {
      dataId?: string(name='DataId', description='The HTTP status code.', example='test.yaml'),
      group?: string(name='Group', description='The total number of returned instances.', example='default'),
      md5?: string(name='Md5', description='The data structure.', example='23sdfdf'),
    }
  ](name='Listeners', description='The ID of the namespace.'),
  message?: string(name='Message', description='The data structure.', example='The verification string.'),
  pageNumber?: int32(name='PageNumber', description='The group.', example='1'),
  pageSize?: int32(name='PageSize', description='The ID of the data.', example='10'),
  requestId?: string(name='RequestId', description='The information about listeners.', example='54973C90-F379-4372-9AA5-053A3F7****'),
  success?: boolean(name='Success', description='The message returned.', example='True'),
  totalCount?: int32(name='TotalCount', description='The IP address of the listener.', example='6'),
}

model ListListenersByIpResponse = {
  headers: map[string]string(name='headers'),
  body: ListListenersByIpResponseBody(name='body'),
}

/**
  * The group.
  *
 */
async function listListenersByIp(request: ListListenersByIpRequest): ListListenersByIpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListListenersByIp', 'POST', '/', 'json', false, 'json', request);
}

model ListMigrationTaskRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='illegalRequest', example='zh', position='Query'),
  originInstanceName?: string(name='OriginInstanceName', description='duplicatedClusterAliasName', example='whdc', position='Query'),
  pageNum?: long(name='PageNum', description='mse-100-007', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='duplicated cluster alias name', example='10', position='Query'),
  requestPars?: string(name='RequestPars', description='mse-200-105', example='{}', position='Query'),
}

model ListMigrationTaskResponseBody = {
  data?: [ 
    {
      clusterType?: string(name='ClusterType', description='system error', example='Nacos-Ans'),
      gmtCreate?: string(name='GmtCreate', example='2022-01-07T10:07:57.000+0000'),
      gmtModified?: string(name='GmtModified', example='2021-12-30T06:41:52.000+0000'),
      id?: long(name='Id', description='mse-100-001', example='1'),
      originInstanceAddress?: string(name='OriginInstanceAddress', example='192.168.1.1:8848'),
      originInstanceName?: string(name='OriginInstanceName', example='test'),
      originInstanceNamespace?: string(name='OriginInstanceNamespace', example='fsdfsdfdsf'),
      projectDesc?: string(name='ProjectDesc', example='test'),
      targetClusterName?: string(name='TargetClusterName', example='multiple-nacos'),
      targetClusterUrl?: string(name='TargetClusterUrl', example='mse-f1******-nacos-ans.mse.aliyuncs.com:8848'),
      targetInstanceId?: string(name='TargetInstanceId', example='mse-cn-zv*****'),
      userId?: string(name='UserId', description='systemError', example='2'),
    }
  ](name='Data', description='clusterNotFound'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='mse-200-021', example='200'),
  message?: string(name='Message'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='451EBE59-5F33-5B15-83C1-78593B9*****'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='2'),
}

model ListMigrationTaskResponse = {
  headers: map[string]string(name='headers'),
  body: ListMigrationTaskResponseBody(name='body'),
}

async function listMigrationTask(request: ListMigrationTaskRequest): ListMigrationTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListMigrationTask', 'GET', '/', 'json', false, 'json', request);
}

model ListNacosConfigsRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The ID of the group.', example='zh', position='Query'),
  appName?: string(name='AppName', description='The name of the application.', example='fpx-pds-pns', position='Query'),
  dataId?: string(name='DataId', description='The configurations.', example='zeekr-*', position='Query'),
  group?: string(name='Group', description='The data structure.', example='crm', position='Query'),
  instanceId: string(name='InstanceId', description='The page number of the returned page.', example='mse-cn-7mz2fj****', position='Query'),
  namespaceId?: string(name='NamespaceId', description='The ID of the application.', example='fad732a7-ff1a-4f21-8126-4edd4****', position='Query'),
  pageNum: int32(name='PageNum', description='The request was successfully processed.', example='5', position='Query'),
  pageSize: int32(name='PageSize', description='The number of entries returned per page.', example='200', position='Query'),
  regionId?: string(name='RegionId', description='The error code returned if the request failed.', example='cn-hangzhou', position='Query'),
  requestPars?: string(name='RequestPars', description='The ID of the request.', example='The message returned.', position='Query'),
  tags?: string(name='Tags', description='The ID of the configuration.', example='billing', position='Query'),
}

model ListNacosConfigsResponseBody = {
  code?: int32(name='Code', example='200'),
  configurations?: [ 
    {
      appName?: string(name='AppName', example='test'),
      dataId?: string(name='DataId', example='log.yaml'),
      group?: string(name='Group', example='public'),
      id?: string(name='Id', example='132****'),
    }
  ](name='Configurations'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='200'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', description='Queries Nacos configurations.', example='4081087F-3429-5873-A1E7-D4B5479D0B84'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', description='> The operation is not provided in Nacos SDKs. For information about Nacos SDKs, see the [official documentation](https://nacos.io/zh-cn/docs/sdk.html).', example='12'),
}

model ListNacosConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: ListNacosConfigsResponseBody(name='body'),
}

/**
  * The number of the page to return.
  *
 * @tags cluster
 */
async function listNacosConfigs(request: ListNacosConfigsRequest): ListNacosConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNacosConfigs', 'POST', '/', 'json', false, 'json', request);
}

model ListNacosHistoryConfigsRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='systemError', example='zh', position='Query'),
  dataId?: string(name='DataId', description='clusterNotFound', example='user-prod.yaml', position='Query'),
  group?: string(name='Group', description='cluster not found', example='fc-dev-cluster-1', position='Query'),
  instanceId: string(name='InstanceId', description='illegal request:%s', example='mse-cn-2r42e3bk20n', position='Query'),
  namespaceId?: string(name='NamespaceId', description='mse-100-001', example='fc0f6e40-****-946b-45e3af313707', position='Query'),
  pageNum: int32(name='PageNum', description='mse-100-007', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='illegalRequest', example='10', position='Query'),
  regionId?: string(name='RegionId', description='mse-200-021', example='cn-hangzhou', position='Query'),
  requestPars?: string(name='RequestPars', description='duplicatedClusterAliasName', example='duplicated cluster alias name', position='Query'),
}

model ListNacosHistoryConfigsResponseBody = {
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  historyItems?: [ 
    {
      appName?: string(name='AppName', example='gateway'),
      dataId?: string(name='DataId', example='test.yaml'),
      group?: string(name='Group', example='default'),
      id?: long(name='Id', example='23fdsf'),
      lastModifiedTime?: long(name='LastModifiedTime', example='16434400'),
      opType?: string(name='OpType', example='yaml'),
    }
  ](name='HistoryItems'),
  httpCode?: string(name='HttpCode', example='200'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='53338ECA-F880-54D8-A9B3-5606355A1B89'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', example='7'),
}

model ListNacosHistoryConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: ListNacosHistoryConfigsResponseBody(name='body'),
}

/**
  * The message returned.
  *
 * @tags cluster
 */
async function listNacosHistoryConfigs(request: ListNacosHistoryConfigsRequest): ListNacosHistoryConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNacosHistoryConfigs', 'POST', '/', 'json', false, 'json', request);
}

model ListNamingTrackRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='system error', example='zh', position='Query'),
  endTs: long(name='EndTs', description='clusterNotFound', example='1665299698', position='Query'),
  group?: string(name='Group', description='mse-100-007', example='group', position='Query'),
  instanceId: string(name='InstanceId', description='duplicatedClusterAliasName', example='mse_prepaid_public_cn-tl32d*****', position='Query'),
  ip?: string(name='Ip', description='illegal request:%s', example='172.16.183.232', position='Query'),
  namespaceId?: string(name='NamespaceId', description='illegalRequest', example='cd4d3703-e2a6-46b5-85c6-4447e4f****', position='Query'),
  pageNum: long(name='PageNum', description='mse-100-001', example='1', position='Query'),
  pageSize: long(name='PageSize', description='cluster not found', example='10', position='Query'),
  requestPars?: string(name='RequestPars', description='mse-200-105', example='{}', position='Query'),
  reverse?: boolean(name='Reverse', description='systemError', example='false', position='Query'),
  serviceName?: string(name='ServiceName', description='duplicated cluster alias name', example='fpx-xms-baseinfo', position='Query'),
  startTs: long(name='StartTs', description='mse-200-021', example='1660238450', position='Query'),
}

model ListNamingTrackResponseBody = {
  errorCode?: string(name='ErrorCode', description='The name of the service.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The ID of the instance.', example='200'),
  message?: string(name='Message', description='The name of the node.', example='The IP address of the client.'),
  pageNumber?: long(name='PageNumber', description='The data information.', example='1'),
  pageSize?: long(name='PageSize', description='The HTTP status code returned.', example='10'),
  requestId?: string(name='RequestId', description='The push time.', example='9916CBED-B2D5-5685-9129-4592FE1*****'),
  success?: boolean(name='Success', description='The group.', example='true'),
  totalCount?: long(name='TotalCount', description='The details of the data.', example='7'),
  traces?: [ 
    {
      clientIp?: string(name='ClientIp', description='The start timestamp. Unit: seconds.', example='120.40.32.235'),
      group?: string(name='Group', description='The number of entries to return on each page.', example='prod'),
      instanceSize?: string(name='InstanceSize', description='The number of the page to return.', example='1'),
      nodeName?: string(name='NodeName', description='The IP address of the client.', example='mse-197*****-167083******-reg-center-0-0'),
      pushTime?: string(name='PushTime', description='The ID of the namespace.', example='2022-12-16 11:48:07'),
      pushTimeAll?: string(name='PushTimeAll', description='Specifies whether to sort the query results in chronological order or reverse chronological order. Default value: `false`.

*   `true`: sorts the query results in reverse chronological order.
*   `false`: sorts the query results in chronological order.', example='628ms'),
      pushTimeNetwork?: string(name='PushTimeNetwork', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='37ms'),
      serverName?: string(name='ServerName', description='The end timestamp. Unit: seconds.', example='fpx-xms-baseinfo'),
      slaTime?: string(name='SlaTime', description='The data structure.', example='628ms'),
    }
  ](name='Traces', description='The name of the service.'),
}

model ListNamingTrackResponse = {
  headers: map[string]string(name='headers'),
  body: ListNamingTrackResponseBody(name='body'),
}

async function listNamingTrack(request: ListNamingTrackRequest): ListNamingTrackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNamingTrack', 'GET', '/', 'json', false, 'json', request);
}

model ListSSLCertRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The returned data.', example='zh', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The expiration time.', example='gw-3f97e2989c344f35ab3fd62b19f1****', position='Query'),
}

model ListSSLCertResponseBody = {
  code?: int32(name='Code', description='Queries the certificates associated with the domain names of a gateway.', example='200'),
  data?: [ 
    {
      afterDate?: string(name='AfterDate', example='2021-04-01 02:35:12'),
      algorithm?: string(name='Algorithm', example='test'),
      beforeDate?: string(name='BeforeDate', example='2031-03-30 02:35:12'),
      certIdentifier?: string(name='CertIdentifier', example='1234'),
      certName?: string(name='CertName', example='test.com'),
      commonName?: string(name='CommonName', example='*.test.com'),
      gmtAfter?: string(name='GmtAfter', example='2021-04-01 02:35:12'),
      gmtBefore?: string(name='GmtBefore', example='2031-03-30 02:35:12'),
      issuer?: string(name='Issuer', example='test'),
      sans?: string(name='Sans', example='SSL'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', description='gw-3f97e2989c344f35ab3fd62b19f1****', example='200'),
  message?: string(name='Message', description='The name of the certificate.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CAA9A229-141D-5FBA-AC5C-516C02026A11'),
  success?: boolean(name='Success', example='true'),
}

model ListSSLCertResponse = {
  headers: map[string]string(name='headers'),
  body: ListSSLCertResponseBody(name='body'),
}

async function listSSLCert(request: ListSSLCertRequest): ListSSLCertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSSLCert', 'POST', '/', 'json', false, 'json', request);
}

model ListSecurityGroupRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='duplicatedClusterAliasName', example='zh', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', description='mse-200-105', example='gw-e98e40675aaf49bda082137d158e1585', position='Query'),
}

model ListSecurityGroupResponseBody = {
  code?: int32(name='Code', description='mse-200-021', example='200'),
  data?: [ 
    {
      securityGroupId?: string(name='SecurityGroupId', description='systemError', example='sg-8vb8gsmrqyc35k645rk6'),
      securityGroupName?: string(name='SecurityGroupName', description='system error', example='sg2'),
      securityGroupType?: string(name='SecurityGroupType', example='enterprise'),
      vpcId?: string(name='VpcId', example='vpc-bp1b'),
    }
  ](name='Data', description='cluster not found'),
  httpStatusCode?: int32(name='HttpStatusCode', description='illegalRequest', example='200'),
  message?: string(name='Message', description='illegal request:%s', example='success'),
  requestId?: string(name='RequestId', description='mse-100-007', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', description='clusterNotFound', example='true'),
}

model ListSecurityGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ListSecurityGroupResponseBody(name='body'),
}

async function listSecurityGroup(request: ListSecurityGroupRequest): ListSecurityGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSecurityGroup', 'POST', '/', 'json', false, 'json', request);
}

model ListSecurityGroupRuleRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', description='网关ID', example='gw-83b0ddb569434f82b9fe8e4c60c40f7c', position='Query'),
}

model ListSecurityGroupRuleResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      description?: string(name='Description'),
      gatewayId?: long(name='GatewayId', example='81'),
      gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-12a432a1f5da423997d8880bd32c304d'),
      gmtCreate?: string(name='GmtCreate', example='2022-01-07T10:07:57.000+0000'),
      gmtModified?: string(name='GmtModified', example='2022-01-07T10:07:57.000+0000'),
      id?: string(name='Id', example='21'),
      ipProtocol?: string(name='IpProtocol', example='tcp'),
      portRange?: string(name='PortRange', example='8000/8000'),
      securityGroupId?: string(name='SecurityGroupId', example='sg-bp1cg6qlyjepj0y6cf2c'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='9EC7BDBF-3C38-5C9C-95DD-61E298CD43E8'),
  success?: boolean(name='Success', example='true'),
}

model ListSecurityGroupRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ListSecurityGroupRuleResponseBody(name='body'),
}

async function listSecurityGroupRule(request: ListSecurityGroupRuleRequest): ListSecurityGroupRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSecurityGroupRule', 'POST', '/', 'json', false, 'json', request);
}

model ListServiceSourceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='duplicatedClusterAliasName', example='zh', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='mse-200-105', example='gw-c51a15c7ee934a4fb945ccf35fe1****', position='Query'),
}

model ListServiceSourceResponseBody = {
  code?: int32(name='Code', description='mse-200-021', example='200'),
  data?: [ 
    {
      address?: string(name='Address', example='***'),
      bindingWithGateway?: int32(name='BindingWithGateway', example='1'),
      gatewayId?: long(name='GatewayId', example='1'),
      gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-2u9uhd9283hd92hgd39g239dg2*****'),
      gmtCreate?: string(name='GmtCreate', example='2022-01-07 18:07:57'),
      gmtModified?: string(name='GmtModified', example='2022-01-07 18:07:57'),
      groupList?: [ string ](name='GroupList'),
      id?: long(name='Id', description='systemError', example='1'),
      ingressOptions?: {
        enableIngress?: boolean(name='EnableIngress', example='true'),
        enableStatus?: boolean(name='EnableStatus', example='true'),
        ingressClass?: string(name='IngressClass', example='com.test.xxx'),
        watchNamespace?: string(name='WatchNamespace', example='default'),
      }(name='IngressOptions'),
      name?: string(name='Name', description='system error', example='test'),
      pathList?: [ string ](name='PathList'),
      source?: string(name='Source', example='MSE'),
      sourceUniqueId?: string(name='SourceUniqueId', example='mse-cn-***'),
      type?: string(name='Type', example='NACOS'),
    }
  ](name='Data', description='cluster not found'),
  httpStatusCode?: int32(name='HttpStatusCode', description='illegalRequest', example='200'),
  message?: string(name='Message', description='illegal request:%s', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='mse-100-007', example='B8C4B0D8-EBB9-5F20-8295-04224FBE5529'),
  success?: boolean(name='Success', description='clusterNotFound', example='true'),
}

model ListServiceSourceResponse = {
  headers: map[string]string(name='headers'),
  body: ListServiceSourceResponseBody(name='body'),
}

async function listServiceSource(request: ListServiceSourceRequest): ListServiceSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListServiceSource', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The key of a tag.', example='zh', position='Query'),
  nextToken?: string(name='NextToken', description='The request was successfully processed.', example='AAAAAV3MpHK1AP0pfERHZN5pu6kywps2Ezza3n8HAAzCCqsi', position='Query'),
  regionId: string(name='RegionId', description='The message returned.', example='cn-hangzhou', position='Query'),
  resourceId?: [ string ](name='ResourceId', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', position='Query'),
  resourceType: string(name='ResourceType', description='The error code returned if the request failed.', example='CLUSTER', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The type of a resource.', example='env'),
      value?: string(name='Value', description='The value of a tag.', example='prd'),
    }
  ](name='Tag', description='The details of a resource and its tags, including the resource ID, the resource type, and the keys and values of the tags.', position='Query'),
}

model ListTagResourcesResponseBody = {
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  message?: string(name='Message'),
  nextToken?: string(name='NextToken', description='下一个查询开始Token，NextToken为空说明没有下一个', example='AAAAAV3MpHK1AP0pfERHZN5pu6ng3BeUyo2zbY5wgL1DBa2T'),
  requestId?: string(name='RequestId', example='92ED7C9C-84A2-595F-87FE-354F84C0F739'),
  success?: boolean(name='Success', example='true'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId', description='资源ID', example='mse-cn-7pp2st29t16'),
      resourceType?: string(name='ResourceType', description='资源类型', example='cluster'),
      tagKey?: string(name='TagKey', description='标签键', example='env'),
      tagValue?: string(name='TagValue', description='标签值', example='prd'),
    }
  ](name='TagResource')
  }(name='TagResources', description='资源列表'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ListZkTrackRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='mse-100-001', example='zh', position='Query'),
  endTs: long(name='EndTs', description='illegal request:%s', example='1669619383', position='Query'),
  instanceId: string(name='InstanceId', description='duplicatedClusterAliasName', example='mse-cn-0ju2yq****', position='Query'),
  pageNum: long(name='PageNum', description='clusterNotFound', example='1', position='Query'),
  pageSize: long(name='PageSize', description='mse-200-021', example='20', position='Query'),
  path?: string(name='Path', description='duplicated cluster alias name', example='/path', position='Query'),
  requestPars?: string(name='RequestPars', description='mse-200-105', example='{}', position='Query'),
  reverse?: boolean(name='Reverse', description='cluster not found', example='false', position='Query'),
  sessionId?: string(name='SessionId', description='mse-100-007', example='0x301fdfbdbf00***', position='Query'),
  startTs: long(name='StartTs', description='illegalRequest', example='1669618483', position='Query'),
}

model ListZkTrackResponseBody = {
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='system error', example='200'),
  message?: string(name='Message', example='ok'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='DC34E4A3-5F1C-4E40-86EA-02EDF967****'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='20'),
  traces?: [ 
    {
      acl?: string(name='Acl', example='world:anyone:cdrwa'),
      dataType?: string(name='DataType', description='数据类型：persist、ephemeral', example='persist'),
      eventType?: string(name='EventType', description='事件类型
对于notify：
  ○ NodeCreated
  ○ NodeDeleted
  ○ NodeDataChanged
  ○ NodeChildrenChanged', example='NodeCreated'),
      finished?: boolean(name='Finished', example='true'),
      logDate?: string(name='LogDate', example='2022-11-28 15:09:15,606'),
      multiSize?: long(name='MultiSize', example='3'),
      opType?: string(name='OpType', description='操作类型
对于Push
  ○ Create
  ○ Update
  ○ Delete
  ○ SetAcl
  ○ Multi
对于Pull
  ○ GetData
  ○ GetChild
  ○ GetStat', example='Create'),
      path?: string(name='Path', example='/path'),
      result?: string(name='Result', example='success'),
      sessionId?: string(name='SessionId', example='0x301fdfbdbf00***'),
      timestamp?: string(name='Timestamp', example='1669619383000'),
      traceType?: string(name='TraceType', description='轨迹类型：push、pull、notify', example='Push'),
      ttl?: long(name='Ttl', example='0'),
      watch?: boolean(name='Watch', description='监听', example='true'),
    }
  ](name='Traces'),
}

model ListZkTrackResponse = {
  headers: map[string]string(name='headers'),
  body: ListZkTrackResponseBody(name='body'),
}

async function listZkTrack(request: ListZkTrackRequest): ListZkTrackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListZkTrack', 'GET', '/', 'json', false, 'json', request);
}

model ListZnodeChildrenRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  clusterId: string(name='ClusterId', example='mse-09k1q11****', position='Query'),
  path: string(name='Path', example='/zookeeper', position='Query'),
}

model ListZnodeChildrenResponseBody = {
  data?: [ 
    {
      data?: string(name='Data', example='cluster'),
      dir?: boolean(name='Dir', example='true'),
      name?: string(name='Name', example='mse-bc1a29b0-160230875****-reg-center-0-1'),
      path?: string(name='Path', example='/zookeeper'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='BDB6CE0B-9CAF-41B5-9FEA-E08BE8E2****'),
  success?: boolean(name='Success', example='true'),
}

model ListZnodeChildrenResponse = {
  headers: map[string]string(name='headers'),
  body: ListZnodeChildrenResponseBody(name='body'),
}

async function listZnodeChildren(request: ListZnodeChildrenRequest): ListZnodeChildrenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListZnodeChildren', 'POST', '/', 'json', false, 'json', request);
}

model ModifyGovernanceKubernetesClusterRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  clusterId: string(name='ClusterId', example='cd23228b3c80c4d4f9ad87cc3****', position='Query'),
  namespaceInfos: string(name='NamespaceInfos', example='[{"Name":"default","Tags":{"mse-enable":"disabled","kubernetes.io/metadata.name":"default"}},{"Name":"test2","Tags":{"test2":"test2","kubernetes.io/metadata.name":"test2"}}]', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ModifyGovernanceKubernetesClusterResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: boolean(name='Data', example='True'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='F9849E97-2455-54B0-A3B4-3F6E4E9FFEB1'),
  success?: boolean(name='Success', example='True'),
}

model ModifyGovernanceKubernetesClusterResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyGovernanceKubernetesClusterResponseBody(name='body'),
}

async function modifyGovernanceKubernetesCluster(request: ModifyGovernanceKubernetesClusterRequest): ModifyGovernanceKubernetesClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyGovernanceKubernetesCluster', 'POST', '/', 'json', false, 'json', request);
}

model ModifyLosslessRuleRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The error code returned if the request failed.', example='zh', position='Query'),
  aligned: boolean(name='Aligned', description='The data structure.', example='true', position='Query'),
  appId: string(name='AppId', description='The slope of the prefetching curve.', example='c644n5frmc@3e75f25fd4*****', position='Query'),
  appName?: string(name='AppName', description='The registration latency.', example='wx-work-api', position='Query'),
  delayTime: int32(name='DelayTime', description='Specifies whether to display online and offline processing details.', example='1', position='Query'),
  enable: boolean(name='Enable', description='int64', example='false', position='Query'),
  funcType: int32(name='FuncType', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='1', position='Query'),
  lossLessDetail?: boolean(name='LossLessDetail', description='Id of the request', example='false', position='Query'),
  namespace?: string(name='Namespace', description='int64', example='default', position='Query'),
  notice?: boolean(name='Notice', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='false', position='Query'),
  regionId: string(name='RegionId', description='int64', example='cn-beijing', position='Query'),
  related: boolean(name='Related', description='The ID of the request.', example='true', position='Query'),
  warmupTime: int32(name='WarmupTime', description='Specifies whether to align the lifecycle of the application in the Kubernetes cluster with that of the microservice.', example='60', position='Query'),
}

model ModifyLosslessRuleResponseBody = {
  code?: int32(name='Code', description='响应码。', example='200'),
  data?: any(name='Data', description='返回数据。', example='null'),
  errorCode?: string(name='ErrorCode', description='mse-100-007', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='HTTP状态码。', example='200'),
  message?: string(name='Message', description='illegalRequest', example='modifyLosslessRule success'),
  requestId?: string(name='RequestId', description='mse-200-105', example='3369AD10-F1A6-4E6F-B99E-20F51826****'),
  success?: boolean(name='Success', description='duplicated cluster alias name', example='true'),
}

model ModifyLosslessRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyLosslessRuleResponseBody(name='body'),
}

async function modifyLosslessRule(request: ModifyLosslessRuleRequest): ModifyLosslessRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyLosslessRule', 'POST', '/', 'json', false, 'json', request);
}

model OfflineGatewayRouteRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='duplicatedClusterAliasName', example='zh', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='mse-200-105', example='gw-77e1153db6e14c0a8b1fae20bcb89ca5', position='Query'),
  routeId?: string(name='RouteId', description='code', example='645', position='Query'),
}

model OfflineGatewayRouteResponseBody = {
  code?: int32(name='Code', description='clusterNotFound', example='200'),
  data?: boolean(name='Data', description='mse-100-001', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', description='illegalRequest', example='200'),
  message?: string(name='Message', description='illegal request:%s', example='mse-200-021'),
  requestId?: string(name='RequestId', description='mse-100-007', example='8EB24742-AB15-5953-BEFB-1FA18E770EEE'),
  success?: boolean(name='Success', description='cluster not found', example='true'),
}

model OfflineGatewayRouteResponse = {
  headers: map[string]string(name='headers'),
  body: OfflineGatewayRouteResponseBody(name='body'),
}

async function offlineGatewayRoute(request: OfflineGatewayRouteRequest): OfflineGatewayRouteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OfflineGatewayRoute', 'POST', '/', 'json', false, 'json', request);
}

model OrderClusterHealthCheckRiskNoticeRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-st21ri2****', position='Query'),
  mute?: boolean(name='Mute', description='Specifies whether to disable the notification feature if the risk item occurs.

*   true: disabled
*   false: enabled', example='false', position='Query'),
  noticeType?: string(name='NoticeType', description='A reserved parameter.', example='null', position='Query'),
  regionId?: string(name='RegionId', description='The region in which the cluster resides.', example='cn-hangzhou', position='Query'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}', position='Query'),
  riskCode?: string(name='RiskCode', description='The ID of the risk item.', example='30010010001', position='Query'),
}

model OrderClusterHealthCheckRiskNoticeResponseBody = {
  code?: int32(name='Code', description='The status code. A value of 200 is returned if the request is successful.', example='200'),
  data?: boolean(name='Data', description='The data of the node.', example='null'),
  dynamicCode?: string(name='DynamicCode', description='The dynamic part in the error message.', example='code'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the \\*\\*%s\\*\\* variable in the **ErrMessage** parameter.

> If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.

*   If the request is successful, a success message is returned.
*   If the request fails, an error message is returned, such as the "TaskId not found" message.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='AF21683A-29C7-4853-AC0F-B5ADEE4D****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model OrderClusterHealthCheckRiskNoticeResponse = {
  headers: map[string]string(name='headers'),
  body: OrderClusterHealthCheckRiskNoticeResponseBody(name='body'),
}

async function orderClusterHealthCheckRiskNotice(request: OrderClusterHealthCheckRiskNoticeRequest): OrderClusterHealthCheckRiskNoticeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OrderClusterHealthCheckRiskNotice', 'POST', '/', 'json', false, 'json', request);
}

model PullServicesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The message returned.', example='zh', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The type of the service source.', example='gw-eccf313e2224438ba53d95d039e5****', position='Query'),
  namespace?: string(name='Namespace', description='The data structure.', example='public', position='Query'),
  sourceType?: string(name='SourceType', description='The ID of the service source.', example='K8s', position='Query'),
}

model PullServicesResponseBody = {
  code?: int32(name='Code', description='zh', example='200'),
  data?: [ 
    {
      groupName?: string(name='GroupName', description='K8s', example='test'),
      namespace?: string(name='Namespace', description='The ID of the request.', example='default'),
      namespaceShowName?: string(name='NamespaceShowName', description='mse-200-021', example='public'),
      services?: [ 
        {
          groupName?: string(name='GroupName', description='mse-100-007', example='test'),
          name?: string(name='Name', description='duplicatedClusterAliasName', example='test'),
          namespace?: string(name='Namespace', description='duplicated cluster alias name', example='public'),
          sourceId?: string(name='SourceId', description='illegalRequest', example='1'),
          sourceType?: string(name='SourceType', description='illegal request:%s', example='MSE'),
        }
      ](name='Services', description='Queries all the microservices of a service source.'),
    }
  ](name='Data', description='The data entries returned.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The namespace.', example='200'),
  message?: string(name='Message', description='The name of the service.', example='You are not authorized to perform this operation. Action: mse:PullServices, Resource: acs:mse:cn-shenzhen:1228932054837788:*'),
  requestId?: string(name='RequestId', description='public', example='EC0A99B9-8BA3-5FE3-8FE7-D7C719CF7BD2'),
  success?: boolean(name='Success', description='The name of the group.', example='true'),
}

model PullServicesResponse = {
  headers: map[string]string(name='headers'),
  body: PullServicesResponseBody(name='body'),
}

async function pullServices(request: PullServicesRequest): PullServicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PullServices', 'POST', '/', 'json', false, 'json', request);
}

model PutClusterHealthCheckTaskRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='RestResult', example='zh', position='Query'),
  instanceId?: string(name='InstanceId', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='mse_prepaid_public_cn-2r42o83h506', position='Query'),
}

model PutClusterHealthCheckTaskResponseBody = {
  code?: int32(name='Code', description='The error code returned if the request failed.', example='200'),
  data?: boolean(name='Data', description='mse-200-105', example='null'),
  dynamicCode?: string(name='DynamicCode', description='The dynamic part in the error message. This parameter is used to replace the \\*\\*%s\\*\\* variable in the **ErrMessage** parameter.

> If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='code'),
  dynamicMessage?: string(name='DynamicMessage', description='The returned message.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The HTTP status code returned.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The message returned.

*   If the request is successful, a success message is returned.
*   If the request fails, an error message is returned, such as the "TaskId not found" message.', example='200'),
  message?: string(name='Message', description='The request is successfully processed.', example='The dynamic part in the error message.'),
  requestId?: string(name='RequestId', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='5B170A0D-2C5D-4CF8-B808-03966B86****'),
  success?: boolean(name='Success', description='The status code. A value of 200 is returned if the request is successful.', example='true'),
}

model PutClusterHealthCheckTaskResponse = {
  headers: map[string]string(name='headers'),
  body: PutClusterHealthCheckTaskResponseBody(name='body'),
}

async function putClusterHealthCheckTask(request: PutClusterHealthCheckTaskRequest): PutClusterHealthCheckTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutClusterHealthCheckTask', 'POST', '/', 'json', false, 'json', request);
}

model QueryAllSwimmingLaneRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The ID of the lane group.', example='zh', position='Query'),
  groupId: long(name='GroupId', description='system error', example='186', position='Query'),
  namespace?: string(name='Namespace', description='MSE命名空间名字', example='default', maxLength=64, position='Query'),
}

model QueryAllSwimmingLaneResponseBody = {
  data?: [ 
    {
      id?: long(name='Id', description='泳道组Id。', example='123'),
      messageQueueFilterSide?: string(name='MessageQueueFilterSide', description='在哪一侧实现消息灰度。', example='Client'),
      messageQueueGrayEnable?: boolean(name='MessageQueueGrayEnable', description='是否开启消息灰度。'),
      name?: string(name='Name', description='泳道组名称。', example='swimmingGroup'),
      namespace?: string(name='Namespace', description='泳道所属的MSE命名空间。', example='default'),
      recordCanaryDetail?: boolean(name='RecordCanaryDetail', description='是否记录请求详情（全链路灰度可观测）。'),
      regionId?: string(name='RegionId', description='所属地域。', example='cn-hangzhou'),
      tag?: string(name='Tag', description='泳道对应的标签。'),
      userId?: string(name='UserId', description='泳道所属的用户id。', example='12345'),
      enableRules?: boolean(name='enableRules', description='是否开启规则。'),
      gmtCreate?: string(name='gmtCreate', description='泳道创建时间。'),
      gmtModified?: string(name='gmtModified', description='泳道更新时间。'),
      groupId?: string(name='groupId', description='泳道组Id。'),
    }
  ](name='Data', description='The HTTP status code returned.', example='[{id:100,name:"test"}]'),
  errorCode?: string(name='ErrorCode', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='mse-100-000'),
  message?: string(name='Message', description='The status code. A value of 200 is returned if the request is successful.', example='The error code returned if the request failed.'),
  requestId?: string(name='RequestId', description='The returned result.', example='DC34E4A3-5F1C-4E40-86EA-02EDF967****'),
  success?: boolean(name='Success', description='The ID of the request.', example='true'),
}

model QueryAllSwimmingLaneResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAllSwimmingLaneResponseBody(name='body'),
}

async function queryAllSwimmingLane(request: QueryAllSwimmingLaneRequest): QueryAllSwimmingLaneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAllSwimmingLane', 'POST', '/', 'json', false, 'json', request);
}

model QueryAllSwimmingLaneGroupRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='system error', example='zh', position='Query'),
  namespace?: string(name='Namespace', description='需要查询的MSE命名空间名字', example='default', maxLength=64, position='Query'),
}

model QueryAllSwimmingLaneGroupResponseBody = {
  code?: int32(name='Code', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='200'),
  data?: [ 
    {
      appIds?: string(name='AppIds', description='应用Id列表', example='abcde@abcde,abcde@abcde'),
      entryApp?: string(name='EntryApp', description='入口应用类型+入口应用Id', example='mse:abcde@abcde'),
      id?: long(name='Id', description='泳道组Id', example='123'),
      messageQueueFilterSide?: string(name='MessageQueueFilterSide', description='在哪一侧实现消息灰度', example='Client'),
      messageQueueGrayEnable?: boolean(name='MessageQueueGrayEnable', description='是否开启消息灰度'),
      name?: string(name='Name', description='泳道组名称', example='swimmingGroup'),
      namespace?: string(name='Namespace', description='泳道所属的MSE命名空间', example='default'),
      recordCanaryDetail?: boolean(name='RecordCanaryDetail', description='是否记录请求详情（全链路灰度可观测）'),
      region?: string(name='Region', description='所属地域', example='cn-hangzhou'),
      userId?: string(name='UserId', description='泳道所属的用户id', example='12345'),
    }
  ](name='Data', description='The dynamic part in the error message.', example='[{id:100,name:"test"}]'),
  dynamicMessage?: string(name='DynamicMessage', description='The request was successfully processed.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The status code. A value of 200 is returned if the request is successful.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The error code returned if the request failed.', example='200'),
  message?: string(name='Message', description='The HTTP status code returned.', example='The returned message.

*   If the request is successful, a success message is returned.
*   If the request fails, an error message is returned.'),
  requestId?: string(name='RequestId', description='RestResult', example='54973C90-F379-4372-9AA5-053A3F7****'),
  success?: boolean(name='Success', description='The ID of the request.', example='true'),
}

model QueryAllSwimmingLaneGroupResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAllSwimmingLaneGroupResponseBody(name='body'),
}

async function queryAllSwimmingLaneGroup(request: QueryAllSwimmingLaneGroupRequest): QueryAllSwimmingLaneGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAllSwimmingLaneGroup', 'POST', '/', 'json', false, 'json', request);
}

model QueryBusinessLocationsRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
}

model QueryBusinessLocationsResponseBody = {
  data?: [ 
    {
      cnName?: string(name='CnName'),
      description?: string(name='Description'),
      districtCnName?: string(name='DistrictCnName'),
      districtEnName?: string(name='DistrictEnName', example='Asia Pacific'),
      districtId?: string(name='DistrictId', example='asia-pacific'),
      districtOrdering?: int32(name='DistrictOrdering', example='101'),
      districtShowName?: string(name='DistrictShowName'),
      enDescription?: string(name='EnDescription', example='China East 2 (Shanghai)'),
      enName?: string(name='EnName', example='China (Shanghai)'),
      name?: string(name='Name', example='cn-shanghai'),
      ordering?: int32(name='Ordering', example='6'),
      showName?: string(name='ShowName'),
      type?: string(name='Type', example='region'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='3369AD10-F1A6-4E6F-B99E-20F51826****'),
  success?: string(name='Success', example='true'),
}

model QueryBusinessLocationsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryBusinessLocationsResponseBody(name='body'),
}

async function queryBusinessLocations(request: QueryBusinessLocationsRequest): QueryBusinessLocationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryBusinessLocations', 'GET', '/', 'json', false, 'json', request);
}

model QueryClusterDetailRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  aclSwitch?: boolean(name='AclSwitch', example='false', position='Query'),
  instanceId?: string(name='InstanceId', example='mse-cn-st21ri2****', position='Query'),
  orderId?: string(name='OrderId', example='20576750143****', position='Query'),
}

model QueryClusterDetailResponseBody = {
  data?: {
    aclEntryList?: string(name='AclEntryList', example='[]'),
    aclId?: string(name='AclId', example='acl-bp17020kiqvzutwwj****'),
    appVersion?: string(name='AppVersion', example='1.2.1'),
    chargeType?: string(name='ChargeType'),
    clusterAliasName?: string(name='ClusterAliasName', example='mse-7413****'),
    clusterName?: string(name='ClusterName', example='mse-bc1a29b0-160230875****'),
    clusterSpecification?: string(name='ClusterSpecification', example='MSE_SC_1_2_200_c'),
    clusterType?: string(name='ClusterType', example='Nacos-Ans'),
    clusterVersion?: string(name='ClusterVersion', example='1.2.1'),
    connectionType?: string(name='ConnectionType', example='slb'),
    cpu?: int32(name='Cpu', example='1'),
    createTime?: string(name='CreateTime', example='2020-07-31 11:36:08'),
    diskCapacity?: long(name='DiskCapacity', example='60'),
    diskType?: string(name='DiskType', example='alicloud-disk-ssd-multi-zone'),
    healthStatus?: string(name='HealthStatus', example='RESTART_SUCCESS'),
    initCostTime?: long(name='InitCostTime', example='98408'),
    initStatus?: string(name='InitStatus', example='RESTART_SUCCESS'),
    instanceCount?: int32(name='InstanceCount', example='3'),
    instanceId?: string(name='InstanceId', example='mse-cn-st21ri2****'),
    instanceModels?: [ 
      {
        creationTimestamp?: string(name='CreationTimestamp', example='1578575377732'),
        healthStatus?: string(name='HealthStatus', example='Running'),
        internetIp?: string(name='InternetIp', example='47.98.XX.XX'),
        ip?: string(name='Ip', example='10.12.XX.XX'),
        podName?: string(name='PodName', example='mse-7413****-159616656****-reg-center-0-0'),
        role?: string(name='Role', example='Peer'),
        singleTunnelVip?: string(name='SingleTunnelVip', example='192.168.XX.XX'),
        zone?: string(name='Zone', example='cn-shanghai-f'),
      }
    ](name='InstanceModels'),
    internetAddress?: string(name='InternetAddress', example='47.98.XX.XX'),
    internetDomain?: string(name='InternetDomain', example='mse-7413****-p.eureka.mse.aliyuncs.com'),
    internetPort?: string(name='InternetPort', example='8761'),
    intranetAddress?: string(name='IntranetAddress', example='192.168.XX.XX'),
    intranetDomain?: string(name='IntranetDomain', example='mse-7413****-eureka.mse.aliyuncs.com'),
    intranetPort?: string(name='IntranetPort', example='8761'),
    memoryCapacity?: long(name='MemoryCapacity', example='2'),
    mseVersion?: string(name='MseVersion', example='mse_basic'),
    netType?: string(name='NetType', example='privatenet'),
    orderClusterVersion?: string(name='OrderClusterVersion', example='1.2.0'),
    payInfo?: string(name='PayInfo'),
    pubNetworkFlow?: string(name='PubNetworkFlow', example='3'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    resourceGroupId?: string(name='ResourceGroupId', example='rg-aek2dhgysj*****'),
    tags?: map[string]any(name='Tags'),
    vSwitchId?: string(name='VSwitchId', example='vsw-xxx-xxxx'),
    vpcId?: string(name='VpcId', example='vpc-bp1hcg467ekqsv0zr****'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='9515ACA4-E94D-440D-989E-C379FCED****'),
  success?: boolean(name='Success', example='true'),
}

model QueryClusterDetailResponse = {
  headers: map[string]string(name='headers'),
  body: QueryClusterDetailResponseBody(name='body'),
}

async function queryClusterDetail(request: QueryClusterDetailRequest): QueryClusterDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryClusterDetail', 'POST', '/', 'json', false, 'json', request);
}

model QueryClusterDiskSpecificationRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  clusterType?: string(name='ClusterType', example='ZooKeeper', position='Query'),
}

model QueryClusterDiskSpecificationResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    max?: int32(name='Max', example='500'),
    min?: int32(name='Min', example='1'),
    step?: int32(name='Step', example='2'),
  }(name='Data'),
  dynamicMessage?: string(name='DynamicMessage', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='E13A3A34-7201-50C4-B2D0-0D7DB891811E'),
  success?: boolean(name='Success', example='True'),
}

model QueryClusterDiskSpecificationResponse = {
  headers: map[string]string(name='headers'),
  body: QueryClusterDiskSpecificationResponseBody(name='body'),
}

async function queryClusterDiskSpecification(request: QueryClusterDiskSpecificationRequest): QueryClusterDiskSpecificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryClusterDiskSpecification', 'POST', '/', 'json', false, 'json', request);
}

model QueryClusterInfoRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='clusterNotFound', example='zh', position='Query'),
  aclSwitch?: boolean(name='AclSwitch', description='illegalRequest', example='false', position='Query'),
  clusterId?: string(name='ClusterId', description='duplicatedClusterAliasName', example='mse-09k1q11****', position='Query'),
  instanceId?: string(name='InstanceId', description='duplicated cluster alias name', example='mse_prepaid_public_cn-7mz2t63ci03', position='Query'),
  orderId?: string(name='OrderId', description='mse-100-007', example='20574710974****', position='Query'),
  regionId?: string(name='RegionId', description='illegal request:%s', example='cn-hangzhou', position='Query'),
  requestPars?: string(name='RequestPars', description='mse-200-021', example='{}', position='Query'),
}

model QueryClusterInfoResponseBody = {
  data?: {
    aclEntryList?: string(name='AclEntryList', example='["127.0.0.0/32"]'),
    aclId?: string(name='AclId', example='acl-bp144q24cgqvzckmxxxx'),
    appVersion?: string(name='AppVersion', example='2.1.0'),
    chargeType?: string(name='ChargeType', example='POSTPAY'),
    clusterAliasName?: string(name='ClusterAliasName'),
    clusterName?: string(name='ClusterName', example='mse-74355150-xxxxxxx'),
    clusterSpecification?: string(name='ClusterSpecification', example='MSE_SC_2_4_60_c'),
    clusterType?: string(name='ClusterType', example='Nacos-Ans'),
    clusterVersion?: string(name='ClusterVersion', example='NACOS_2_0_0'),
    connectionType?: string(name='ConnectionType', example='null'),
    cpu?: int32(name='Cpu', example='null'),
    createTime?: string(name='CreateTime', example='2022-12-15 10:02:07'),
    diskCapacity?: long(name='DiskCapacity', example='null'),
    diskType?: string(name='DiskType', example='null'),
    healthStatus?: string(name='HealthStatus', example='INIT_SUCCESS'),
    initCostTime?: long(name='InitCostTime', example='53353'),
    initStatus?: string(name='InitStatus', example='INIT_SUCCESS'),
    instanceCount?: int32(name='InstanceCount', example='3'),
    instanceId?: string(name='InstanceId', example='mse-cn-st21ri2****'),
    instanceModels?: [ 
      {
        creationTimestamp?: string(name='CreationTimestamp', example='null'),
        healthStatus?: string(name='HealthStatus', example='null'),
        internetIp?: string(name='InternetIp', example='null'),
        ip?: string(name='Ip', example='null'),
        podName?: string(name='PodName', example='null'),
        role?: string(name='Role', example='null'),
        singleTunnelVip?: string(name='SingleTunnelVip', example='null'),
        zone?: string(name='Zone', example='null'),
      }
    ](name='InstanceModels'),
    internetAddress?: string(name='InternetAddress', example='null'),
    internetDomain?: string(name='InternetDomain', example='mse-xxxxxx-p.nacos-ans.mse.aliyuncs.com'),
    internetPort?: string(name='InternetPort', example='8848,6443,9848,8761'),
    intranetAddress?: string(name='IntranetAddress', example='null'),
    intranetDomain?: string(name='IntranetDomain', example='mse-xxxxx-nacos-ans.mse.aliyuncs.com'),
    intranetPort?: string(name='IntranetPort', example='8848,6443,9848,8761'),
    memoryCapacity?: long(name='MemoryCapacity', example='null'),
    mseVersion?: string(name='MseVersion', example='mse_pro'),
    netType?: string(name='NetType', example='privatenet'),
    payInfo?: string(name='PayInfo'),
    pubNetworkFlow?: string(name='PubNetworkFlow', example='1'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    tags?: map[string]any(name='Tags'),
    vSwitchId?: string(name='VSwitchId', example='vsw-bp1egfakxxxxx'),
    vpcId?: string(name='VpcId', example='vpc-bp1v5nbauzh8xxxxxxx'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  message?: string(name='Message', description='mse-100-001', example='systemError'),
  requestId?: string(name='RequestId', description='system error', example='415088B3-A7BE-56F6-9CD9-C42DE895CD41'),
  success?: boolean(name='Success', example='true'),
}

model QueryClusterInfoResponse = {
  headers: map[string]string(name='headers'),
  body: QueryClusterInfoResponseBody(name='body'),
}

async function queryClusterInfo(request: QueryClusterInfoRequest): QueryClusterInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryClusterInfo', 'POST', '/', 'json', false, 'json', request);
}

model QueryClusterSpecificationRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  connectType?: string(name='ConnectType', description='网络连接类型', example='slb', position='Query'),
  mseVersion?: string(name='MseVersion', example='mse_pro', position='Query'),
}

model QueryClusterSpecificationResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      clusterSpecificationName?: string(name='ClusterSpecificationName', example='MSE_SC_1_2_200_c'),
      cpuCapacity?: string(name='CpuCapacity', example='1'),
      memoryCapacity?: string(name='MemoryCapacity', example='2'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='EE5C32A1-BC0E-4B79-817C-103E4EDF****'),
  success?: boolean(name='Success', example='true'),
}

model QueryClusterSpecificationResponse = {
  headers: map[string]string(name='headers'),
  body: QueryClusterSpecificationResponseBody(name='body'),
}

async function queryClusterSpecification(request: QueryClusterSpecificationRequest): QueryClusterSpecificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryClusterSpecification', 'POST', '/', 'json', false, 'json', request);
}

model QueryConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  clusterId?: string(name='ClusterId', example='mse-09k1q11****', position='Query'),
  configType?: string(name='ConfigType', example='null', position='Query'),
  instanceId?: string(name='InstanceId', example='mse_prepaid_public_cn-st2212****', position='Query'),
  needRunningConf?: boolean(name='NeedRunningConf', example='true', position='Query'),
  requestPars?: string(name='RequestPars', example='{}', position='Query'),
}

model QueryConfigResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    autopurgePurgeInterval?: string(name='AutopurgePurgeInterval', example='none'),
    autopurgeSnapRetainCount?: string(name='AutopurgeSnapRetainCount', example='none'),
    clusterName?: string(name='ClusterName', example='name'),
    configAuthEnabled?: boolean(name='ConfigAuthEnabled', example='true'),
    configAuthSupported?: boolean(name='ConfigAuthSupported', example='true'),
    configContentLimit?: long(name='ConfigContentLimit', example='100'),
    configSecretEnabled?: boolean(name='ConfigSecretEnabled', example='true'),
    configSecretSupported?: boolean(name='ConfigSecretSupported', example='true'),
    eurekaSupported?: boolean(name='EurekaSupported'),
    extendedTypesEnable?: boolean(name='ExtendedTypesEnable', example='true'),
    initLimit?: string(name='InitLimit', example='100'),
    juteMaxbuffer?: string(name='JuteMaxbuffer', example='1'),
    jvmFlagsCustom?: string(name='JvmFlagsCustom', example='none'),
    MCPEnabled?: boolean(name='MCPEnabled', example='true'),
    MCPSupported?: boolean(name='MCPSupported', example='true'),
    maxClientCnxns?: string(name='MaxClientCnxns', example='0'),
    maxSessionTimeout?: string(name='MaxSessionTimeout', description='最大超时时间', example='-1'),
    minSessionTimeout?: string(name='MinSessionTimeout', description='最小超时时间', example='-1'),
    nacosRunningEnv?: {
      emptyProtect?: boolean(name='emptyProtect', example='true'),
    }(name='NacosRunningEnv'),
    namingAuthEnabled?: boolean(name='NamingAuthEnabled', example='false'),
    namingAuthSupported?: boolean(name='NamingAuthSupported', example='true'),
    namingCreateServiceSupported?: boolean(name='NamingCreateServiceSupported', example='true'),
    openSuperAcl?: boolean(name='OpenSuperAcl', example='true'),
    passWord?: string(name='PassWord', example='password'),
    restartFlag?: boolean(name='RestartFlag', example='true'),
    snapshotCount?: string(name='SnapshotCount', example='100000'),
    syncLimit?: string(name='SyncLimit', example='10'),
    TLSEnabled?: boolean(name='TLSEnabled'),
    tickTime?: string(name='TickTime', example='2000'),
    userName?: string(name='UserName', example='name'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='8BD1E58D-0755-42AC-A599-E6B55112EC53'),
  success?: boolean(name='Success', example='true'),
}

model QueryConfigResponse = {
  headers: map[string]string(name='headers'),
  body: QueryConfigResponseBody(name='body'),
}

async function queryConfig(request: QueryConfigRequest): QueryConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryConfig', 'POST', '/', 'json', false, 'json', request);
}

model QueryGatewayRegionRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
}

model QueryGatewayRegionResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ string ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='9e78a671-4b9b-4dd4-99c1-0b9da87d3dec'),
  success?: boolean(name='Success', example='true'),
}

model QueryGatewayRegionResponse = {
  headers: map[string]string(name='headers'),
  body: QueryGatewayRegionResponseBody(name='body'),
}

async function queryGatewayRegion(request: QueryGatewayRegionRequest): QueryGatewayRegionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryGatewayRegion', 'POST', '/', 'json', false, 'json', request);
}

model QueryGatewayTypeRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
}

model QueryGatewayTypeResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ string ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='52BA6DA6-A702-4362-A32F-DFF79655****'),
  success?: boolean(name='Success', example='true'),
}

model QueryGatewayTypeResponse = {
  headers: map[string]string(name='headers'),
  body: QueryGatewayTypeResponseBody(name='body'),
}

async function queryGatewayType(request: QueryGatewayTypeRequest): QueryGatewayTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryGatewayType', 'POST', '/', 'json', false, 'json', request);
}

model QueryGovernanceKubernetesClusterRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='system error', example='zh', position='Query'),
  clusterId?: string(name='ClusterId', description='cluster not found', example='c24c9354acxxxxxxx', position='Query'),
  clusterName?: string(name='ClusterName', description='clusterNotFound', example='example-cluster', position='Query'),
  pageNumber: int32(name='PageNumber', description='mse-100-001', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='systemError', example='10', minimum=5, maximum=100, position='Query'),
}

model QueryGovernanceKubernetesClusterResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber', description='The ID of cluster.', example='1'),
    pageSize?: int32(name='PageSize', description='The region where the cluster resides.', example='10'),
    result?: [ 
      {
        clusterId?: string(name='ClusterId', description='The returned message.', example='abcdef123456789'),
        clusterName?: string(name='ClusterName', description='The HTTP status code returned.', example='example-cluster'),
        k8sVersion?: string(name='K8sVersion', description='The response data.', example='1.22'),
        namespaceInfos?: string(name='NamespaceInfos', description='The data structure.', example='[{"Name":"ack-onepilot","Tags":{"name":"ack-onepilot"}}]'),
        pilotStartTime?: string(name='PilotStartTime', description='The data structure.', example='2022-05-17T05:39:43.000+0000'),
        region?: string(name='Region', description='The ID of the request.', example='cn-shanghai'),
      }
    ](name='Result', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English'),
    totalSize?: int32(name='TotalSize', description='The name of the cluster.', example='3'),
  }(name='Data', description='The number of entries to return on each page.'),
  message?: string(name='Message', description='The ID of the Kubernetes cluster.', example='success'),
  requestId?: string(name='RequestId', description='The number of the page to return.', example='DE34D413-2B79-5E77-9696-36D875E822AD'),
  success?: boolean(name='Success', description='The version of the cluster.', example='true'),
}

model QueryGovernanceKubernetesClusterResponse = {
  headers: map[string]string(name='headers'),
  body: QueryGovernanceKubernetesClusterResponseBody(name='body'),
}

async function queryGovernanceKubernetesCluster(request: QueryGovernanceKubernetesClusterRequest): QueryGovernanceKubernetesClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryGovernanceKubernetesCluster', 'GET', '/', 'json', false, 'json', request);
}

model QueryInstancesInfoRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='zh', position='Query'),
  clusterId?: string(name='ClusterId', description='The ID of the order.', example='mse-09k1q11****', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the region where the instance resides.', example='mse_prepaid_public_cn-tl32g1u9k01', position='Query'),
  orderId?: string(name='OrderId', description='The extended request parameters in the JSON format.', example='20574710974****', position='Query'),
  regionId?: string(name='RegionId', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='cn-hangzhou', position='Query'),
  requestPars?: string(name='RequestPars', description='BaseResult', example='{}', position='Query'),
}

model QueryInstancesInfoResponseBody = {
  data?: [ 
    {
      clientPort?: string(name='ClientPort', description='mse-200-105', example='8848'),
      creationTimestamp?: string(name='CreationTimestamp', description='The zone.', example='2022-12-15T02:02:15Z'),
      healthStatus?: string(name='HealthStatus', description='The pod name.', example='null'),
      internetIp?: string(name='InternetIp', description='The creation time. The value of this parameter is a timestamp.', example='120.55.71.x'),
      ip?: string(name='Ip', description='The internal IP address.', example='25.24.91.x'),
      podName?: string(name='PodName', description='The public IP address.', example='mse-xxxxx-xxxxx-reg-center-0-1'),
      role?: string(name='Role', description='The IP address of the pod.', example='null'),
      singleTunnelVip?: string(name='SingleTunnelVip', description='The enabled port.', example='172.16.66.x'),
      zone?: string(name='Zone', description='duplicatedClusterAliasName', example='cn-hangzhou-k'),
    }
  ](name='Data', description='A reserved parameter.'),
  errorCode?: string(name='ErrorCode', description='The details of the data.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The details of the data.', example='202'),
  message?: string(name='Message', description='The ID of the request.', example='The error code returned if the request failed.'),
  requestId?: string(name='RequestId', description='The HTTP status code.', example='54973C90-F379-4372-9AA5-053A3F7****'),
  success?: boolean(name='Success', description='The request is successfully processed.', example='true'),
}

model QueryInstancesInfoResponse = {
  headers: map[string]string(name='headers'),
  body: QueryInstancesInfoResponseBody(name='body'),
}

async function queryInstancesInfo(request: QueryInstancesInfoRequest): QueryInstancesInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryInstancesInfo', 'POST', '/', 'json', false, 'json', request);
}

model QueryMonitorRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The message returned.', example='zh', position='Query'),
  endTime: long(name='EndTime', description='The ID of the instance.', example='1666678376', position='Query'),
  instanceId?: string(name='InstanceId', description='The data structure.', example='mse-cn-****', position='Query'),
  monitorType: string(name='MonitorType', description='The timestamp when the monitoring ends.', example='regCenterQps', position='Query'),
  requestPars?: string(name='RequestPars', description='The timestamp when the monitoring starts.', example='{}', position='Query'),
  startTime: long(name='StartTime', description='The interval between data points. Unit: seconds.', example='1666678376', position='Query'),
  step?: long(name='Step', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='7', position='Query'),
}

model QueryMonitorResponseBody = {
  data?: [ 
    {
      clusterNamePrefix?: string(name='clusterNamePrefix', description='The content of the data.', example='mse-xxxx-xxxxxx'),
      podName?: string(name='podName', description='The details of the data.', example='mse-xxxxxx-xxxxxx-reg-center-0-0'),
      values?: [  map[string]any ](name='values', description='The error code returned if the request failed.'),
    }
  ](name='Data', description='The name of the pod.', example='6'),
  errorCode?: string(name='ErrorCode', description='mse-200-105', example='mse-100-000'),
  message?: string(name='Message', description='The ID of the request.', example='The details of the data.'),
  requestId?: string(name='RequestId', description='The details of the data.', example='ADDD8AB7-8D1C-4697-A83E-410D2607****'),
  success?: boolean(name='Success', description='duplicatedClusterAliasName', example='true'),
}

model QueryMonitorResponse = {
  headers: map[string]string(name='headers'),
  body: QueryMonitorResponseBody(name='body'),
}

async function queryMonitor(request: QueryMonitorRequest): QueryMonitorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMonitor', 'POST', '/', 'json', false, 'json', request);
}

model QueryNamespaceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  name?: string(name='Name', description='要搜索的命名空间名字', example='default', maxLength=64, position='Query'),
  region: string(name='Region', description='操作的地域', example='cn-hangzhou', position='Query'),
}

model QueryNamespaceResponseBody = {
  data?: [ 
    {
      namespace?: string(name='Namespace', description='命名空间名字', example='default'),
      region?: string(name='Region', description='命名空间所属的地域', example='cn-hangzhou'),
    }
  ](name='Data', description='返回的数据'),
  errorCode?: string(name='ErrorCode', description='错误码。', example='NoPermission'),
  httpStatusCode?: int32(name='HttpStatusCode', description='HttpStatusCode。', example='200'),
  message?: string(name='Message', description='错误时的提示信息'),
  requestId?: string(name='RequestId', description='请求id', example='abcde-fg'),
  success?: boolean(name='Success', description='请求是否成功', example='true'),
}

model QueryNamespaceResponse = {
  headers: map[string]string(name='headers'),
  body: QueryNamespaceResponseBody(name='body'),
}

async function queryNamespace(request: QueryNamespaceRequest): QueryNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryNamespace', 'POST', '/', 'json', false, 'json', request);
}

model QuerySlbSpecRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
}

model QuerySlbSpecResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      id?: int32(name='Id', example='2'),
      maxConnection?: string(name='MaxConnection', example='50,000'),
      name?: string(name='Name'),
      newConnectionPerSecond?: string(name='NewConnectionPerSecond', example='50,000'),
      qps?: string(name='Qps', example='50,000'),
      spec?: string(name='Spec', example='slb.s2.small'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', example='true'),
}

model QuerySlbSpecResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySlbSpecResponseBody(name='body'),
}

async function querySlbSpec(request: QuerySlbSpecRequest): QuerySlbSpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySlbSpec', 'GET', '/', 'json', false, 'json', request);
}

model QuerySwimmingLaneByIdRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The ID of the lane.', example='zh', position='Query'),
  laneId: long(name='LaneId', description='system error', example='250', position='Query'),
  namespace?: string(name='Namespace', description='MSE命名空间名字', example='default', maxLength=64, position='Query'),
}

model QuerySwimmingLaneByIdResponseBody = {
  code?: int32(name='Code', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='200'),
  data?: {
    enable?: boolean(name='enable'),
    enableRules?: boolean(name='enableRules'),
    entryRule?: string(name='entryRule'),
    entryRules?: [ 
      {
        condition?: string(name='condition'),
        path?: string(name='path'),
        paths?: [ string ](name='paths'),
        restItems?: [ 
          {
            cond?: string(name='cond', description='匹配符'),
            datum?: string(name='datum', description='数值'),
            divisor?: int32(name='divisor', description='除数'),
            name?: string(name='name', description='名称'),
            nameList?: [ string ](name='nameList', description='匹配列表'),
            operator?: string(name='operator', description='操作符'),
            rate?: int32(name='rate', description='百分比'),
            remainder?: int32(name='remainder', description='余数'),
            type?: string(name='type', description='匹配类型'),
            value?: string(name='value', description='值'),
          }
        ](name='restItems'),
      }
    ](name='entryRules'),
    gatewaySwimmingLaneRouteJson?: string(name='gatewaySwimmingLaneRouteJson'),
    gmtCreate?: string(name='gmtCreate'),
    gmtModified?: string(name='gmtModified'),
    groupId?: long(name='groupId'),
    id?: long(name='id'),
    name?: string(name='name'),
    regionId?: string(name='regionId'),
    status?: int32(name='status'),
    tag?: string(name='tag'),
  }(name='Data', description='The request was successfully processed.', example='{id:102,name:"test"}'),
  errorCode?: string(name='ErrorCode', description='The status code. A value of 200 is returned if the request is successful.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The error code returned if the request failed.', example='200'),
  message?: string(name='Message', description='The HTTP status code returned.', example='The message returned.'),
  requestId?: string(name='RequestId', description='RestResult', example='69AD2AA7-DB47-449B-941B-B14409DF****'),
  success?: boolean(name='Success', description='The ID of the request.', example='true'),
}

model QuerySwimmingLaneByIdResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySwimmingLaneByIdResponseBody(name='body'),
}

async function querySwimmingLaneById(request: QuerySwimmingLaneByIdRequest): QuerySwimmingLaneByIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySwimmingLaneById', 'POST', '/', 'json', false, 'json', request);
}

model QueryZnodeDetailRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  clusterId?: string(name='ClusterId', example='mse-09k1q11****', position='Query'),
  instanceId?: string(name='InstanceId', example='mse-cn-5bffa4e8630', position='Query'),
  path: string(name='Path', example='/zookeeper', position='Query'),
  requestPars?: string(name='RequestPars', example='{}', position='Query'),
}

model QueryZnodeDetailResponseBody = {
  data?: {
    data?: string(name='Data', example='cluster'),
    dir?: boolean(name='Dir', example='true'),
    name?: string(name='Name', example='zookeeper'),
    path?: string(name='Path', example='/zookeeper'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='58E06A0A-BD2C-47A0-99C2-B100F353****'),
  success?: string(name='Success', example='true'),
}

model QueryZnodeDetailResponse = {
  headers: map[string]string(name='headers'),
  body: QueryZnodeDetailResponseBody(name='body'),
}

async function queryZnodeDetail(request: QueryZnodeDetailRequest): QueryZnodeDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryZnodeDetail', 'GET', '/', 'json', false, 'json', request);
}

model RemoveApplicationRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  appId?: string(name='AppId', description='要删除的应用id。', example='abcde@12345', position='Query'),
  appName?: string(name='AppName', description='要删除的应用名字。', example='example-app', position='Query'),
  namespace?: string(name='Namespace', description='微服务命名空间。', example='prod', maxLength=64, position='Query'),
  region: string(name='Region', description='地域。', example='cn-hangzhou', position='Query'),
}

model RemoveApplicationResponseBody = {
  data?: string(name='Data', description='删除执行结果。', example='success'),
  errorCode?: string(name='ErrorCode', description='错误码。', example='NoPermission'),
  message?: string(name='Message', description='错误信息。', example='success'),
  requestId?: string(name='RequestId', description='请求id。', example='abcde-12345'),
  success?: boolean(name='Success', description='是否成功。', example='true'),
}

model RemoveApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveApplicationResponseBody(name='body'),
}

async function removeApplication(request: RemoveApplicationRequest): RemoveApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveApplication', 'POST', '/', 'json', false, 'json', request);
}

model RemoveAuthPolicyRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  policyId: string(name='PolicyId', example='259', position='Query'),
}

model RemoveAuthPolicyResponseBody = {
  code?: int32(name='Code', example='500'),
  data?: string(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='9515ACA4-E94D-440D-989E-C379FCED****'),
  success?: boolean(name='Success', example='True'),
}

model RemoveAuthPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveAuthPolicyResponseBody(name='body'),
}

async function removeAuthPolicy(request: RemoveAuthPolicyRequest): RemoveAuthPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveAuthPolicy', 'POST', '/', 'json', false, 'json', request);
}

model RestartClusterRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  clusterId?: string(name='ClusterId', example='mse-09k1q11****', position='Query'),
  instanceId?: string(name='InstanceId', example='mse-cn-78v1l83****', position='Query'),
  podNameList?: string(name='PodNameList', example='mse-a8aba010-1629719288255-reg-center-0-1', position='Query'),
  requestPars?: string(name='RequestPars', example='{}', position='Query'),
}

model RestartClusterResponseBody = {
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='5B170A0D-2C5D-4CF8-B808-03966B86****'),
  success?: boolean(name='Success', example='true'),
}

model RestartClusterResponse = {
  headers: map[string]string(name='headers'),
  body: RestartClusterResponseBody(name='body'),
}

async function restartCluster(request: RestartClusterRequest): RestartClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RestartCluster', 'POST', '/', 'json', false, 'json', request);
}

model RetryClusterRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  instanceId?: string(name='InstanceId', example='mse-cn-st21ri2****', position='Query'),
  requestPars?: string(name='RequestPars', example='{}', position='Query'),
}

model RetryClusterResponseBody = {
  errorCode?: string(name='ErrorCode', example='NoPermission'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='DC34E4A3-5F1C-4E40-86EA-02EDF967****'),
  success?: boolean(name='Success', example='true'),
}

model RetryClusterResponse = {
  headers: map[string]string(name='headers'),
  body: RetryClusterResponseBody(name='body'),
}

async function retryCluster(request: RetryClusterRequest): RetryClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RetryCluster', 'POST', '/', 'json', false, 'json', request);
}

model SelectGatewaySlbRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-492af9b04bb4474cae9d645be850****', position='Query'),
  name?: string(name='Name', example='test-slb', position='Query'),
  type?: string(name='Type', example='PUB_NET', position='Query'),
}

model SelectGatewaySlbResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      slbId?: string(name='SlbId', example='lb-bp14lqiw5n96hq2****'),
      slbName?: string(name='SlbName', example='MseGatewaySlb-gw'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='E00C6D90-A28A-5813-8981-0459AA436F46'),
  success?: boolean(name='Success', example='true'),
}

model SelectGatewaySlbResponse = {
  headers: map[string]string(name='headers'),
  body: SelectGatewaySlbResponseBody(name='body'),
}

async function selectGatewaySlb(request: SelectGatewaySlbRequest): SelectGatewaySlbResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SelectGatewaySlb', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='cluster not found', example='zh', position='Query'),
  regionId: string(name='RegionId', description='mse-200-105', example='cn-hangzhou', position='Query'),
  resourceId?: [ string ](name='ResourceId', description='duplicated cluster alias name', position='Query'),
  resourceType: string(name='ResourceType', description='duplicatedClusterAliasName', example='CLUSTER', position='Query'),
  tag: [ 
    {
      key?: string(name='Key', description='mse-200-021', example='env'),
      value?: string(name='Value', description='clusterNotFound', example='prd'),
    }
  ](name='Tag', description='illegalRequest', position='Query'),
}

model TagResourcesResponseBody = {
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  message?: string(name='Message', description='systemError', example='system error'),
  requestId?: string(name='RequestId', description='mse-100-001', example='E0A79810-9396-521C-A09D-E757B3E2BAF4'),
  success?: boolean(name='Success', example='true'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='clusterNotFound', example='zh', position='Query'),
  all?: boolean(name='All', description='duplicated cluster alias name', example='true', position='Query'),
  regionId: string(name='RegionId', description='mse-200-105', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', description='mse-100-007', position='Query'),
  resourceType: string(name='ResourceType', description='duplicatedClusterAliasName', example='CLUSTER', position='Query'),
  tagKey?: [ string ](name='TagKey', description='illegal request:%s', position='Query'),
}

model UntagResourcesResponseBody = {
  errorCode?: string(name='ErrorCode', description='system error', example='mse-100-000'),
  message?: string(name='Message', description='mse-100-001', example='systemError'),
  requestId?: string(name='RequestId', description='cluster not found', example='58E06A0A-BD2C-47A0-99C2-B100F353****'),
  success?: boolean(name='Success', example='true'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAclRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  aclEntryList?: string(name='AclEntryList', example='192.168.0.0/XX,192.168.0.0/XX', position='Query'),
  instanceId?: string(name='InstanceId', example='mse-cn-78v1l83****', position='Query'),
}

model UpdateAclResponseBody = {
  errorCode?: string(name='ErrorCode', example='mse-100-100'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='7466566F-F30F-4A29-965D-3E0AF21D****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateAclResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAclResponseBody(name='body'),
}

async function updateAcl(request: UpdateAclRequest): UpdateAclResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAcl', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAuthPolicyRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  appId?: string(name='AppId', example='abcde@12345', position='Query'),
  authRule?: string(name='AuthRule', example='[{\\"all\\":true,\\"appIds\\":[\\"f6xqzbao96@4adfaf3c92c947a\\"],\\"black\\":false}]', position='Query'),
  enable?: string(name='Enable', example='true', position='Query'),
  id: string(name='Id', example='432', position='Query'),
  k8sNamespace?: string(name='K8sNamespace', example='c19c6c500e1ff4d7abc7bed9b8236***', position='Query'),
  name?: string(name='Name', example='demo-test', position='Query'),
  protocol?: string(name='Protocol', example='SPRING_CLOUD', position='Query'),
  region?: string(name='Region', example='cn-hangzhou', position='Query'),
  source?: string(name='Source', example='edasmsc', position='Query'),
}

model UpdateAuthPolicyResponseBody = {
  code?: int32(name='Code', example='500'),
  data?: string(name='Data', example='{}'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='83E3909D-D26F-5D97-B73B-407A26***'),
  success?: boolean(name='Success', example='true'),
}

model UpdateAuthPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAuthPolicyResponseBody(name='body'),
}

async function updateAuthPolicy(request: UpdateAuthPolicyRequest): UpdateAuthPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAuthPolicy', 'POST', '/', 'json', false, 'json', request);
}

model UpdateBlackWhiteListRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='mse-100-001', example='zh', position='Query'),
  content?: string(name='Content', description='duplicated cluster alias name', example='127.0.2.11', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='illegalRequest', example='gw-c70622ff52fe49beb29bea9a6f52****', position='Query'),
  id?: long(name='Id', description='code', example='1', position='Query'),
  isWhite?: boolean(name='IsWhite', description='illegal request:%s', example='true', position='Query'),
  name?: string(name='Name', description='cluster not found', example='name', position='Query'),
  note?: string(name='Note', description='clusterNotFound', example='this is a note', position='Query'),
  resourceIdJsonList?: string(name='ResourceIdJsonList', description='mse-200-021', example='[123]', position='Query'),
  resourceType?: string(name='ResourceType', description='mse-200-105', example='GATEWAY', position='Query'),
  status?: string(name='Status', description='mse-100-007', example='on', position='Query'),
  type?: string(name='Type', description='duplicatedClusterAliasName', example='IP', position='Query'),
}

model UpdateBlackWhiteListResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: long(name='Data', example='13'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='system error', example='AD5DEDA0-C82A-50D9-AF54-BD3576CCFB4C'),
  success?: boolean(name='Success', example='true'),
}

model UpdateBlackWhiteListResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateBlackWhiteListResponseBody(name='body'),
}

async function updateBlackWhiteList(request: UpdateBlackWhiteListRequest): UpdateBlackWhiteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateBlackWhiteList', 'POST', '/', 'json', false, 'json', request);
}

model UpdateCircuitBreakerRuleRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  appId?: string(name='AppId', description='应用ID。', example='hkhon1po62@c3df23522bXXXXX', position='Query'),
  appName: string(name='AppName', description='应用名称。', example='spring-cloud-a', position='Query'),
  enable?: boolean(name='Enable', description='规则的启用状态。', example='true', position='Query'),
  halfOpenBaseAmountPerStep?: int32(name='HalfOpenBaseAmountPerStep', description='熔断恢复每步最小通过数目，默认值为1。', example='5', position='Query'),
  halfOpenRecoveryStepNum?: int32(name='HalfOpenRecoveryStepNum', description='熔断恢复阶段数，默认值为1。', example='1', position='Query'),
  maxAllowedRtMs?: int32(name='MaxAllowedRtMs', description='慢调用RT（单位毫秒）：阈值类型为慢调用比例时，超过该时长则判定为慢请求。', example='200', position='Query'),
  minRequestAmount?: int32(name='MinRequestAmount', description='触发熔断的最小请求数目，若当前统计窗口请求数小于此值，即使达到熔断条件规则也不会触发。默认值为10。', example='10', position='Query'),
  namespace: string(name='Namespace', description='应用所属的微服务命空间。', example='default', position='Query'),
  retryTimeoutMs?: int32(name='RetryTimeoutMs', description='熔断时长（单位毫秒）：即熔断触发后持续的时间。资源进入熔断状态后，在配置的熔断时长内，请求都会快速失败。取值需要为1000的整数倍，默认值为10000，即10秒。', example='10000', position='Query'),
  ruleId: long(name='RuleId', description='规则ID。', example='1', position='Query'),
  statIntervalMs?: int32(name='StatIntervalMs', description='统计窗口时长（单位毫秒）：统计的时间窗口长度，取值范围为1秒~120分钟。默认值为20000，即20秒。', example='20000', position='Query'),
  strategy?: int32(name='Strategy', description='阈值类型：选择以慢调用比例或异常比例作为阈值。', example='0', position='Query'),
  threshold?: float(name='Threshold', description='熔断比例阈值：触发熔断的比例阈值，取值范围为0 - 1，代表0% - 100%。', example='0.8', position='Query'),
}

model UpdateCircuitBreakerRuleResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    appId?: string(name='AppId', description='应用ID。', example='hkhon1po62@c3df23522bXXXXX'),
    appName?: string(name='AppName', description='应用名称。', example='spring-cloud-a'),
    enable?: boolean(name='Enable', description='规则的启用状态。', example='true'),
    halfOpenBaseAmountPerStep?: int32(name='HalfOpenBaseAmountPerStep', description='熔断恢复每步最小通过数目。', example='5'),
    halfOpenRecoveryStepNum?: int32(name='HalfOpenRecoveryStepNum', description='熔断恢复阶段数。', example='1'),
    id?: long(name='Id', description='规则ID。', example='1'),
    maxAllowedRtMs?: int32(name='MaxAllowedRtMs', description='慢调用RT（单位毫秒）：超过该时长则判定为慢请求，阈值类型为慢调用比例时必填。', example='200'),
    minRequestAmount?: int32(name='MinRequestAmount', description='触发熔断的最小请求数目，若当前统计窗口请求数小于此值，即使达到熔断条件规则也不会触发。', example='10'),
    namespace?: string(name='Namespace', description='应用所属的微服务命名空间。', example='default'),
    resource?: string(name='Resource', description='接口名称：适用该规则的应用资源。需要与控制台接口详情处接口名称一致。', example='/a'),
    retryTimeoutMs?: int32(name='RetryTimeoutMs', description='熔断时长（单位毫秒）：即熔断触发后持续的时间。资源进入熔断状态后，在配置的熔断时长内，请求都会快速失败。', example='10000'),
    statIntervalMs?: int32(name='StatIntervalMs', description='统计窗口时长（单位毫秒）：统计的时间窗口长度，取值范围为1秒~120分钟。', example='20000'),
    strategy?: int32(name='Strategy', description='阈值类型：选择以慢调用比例或异常比例作为阈值。', example='0'),
    threshold?: float(name='Threshold', description='熔断比例阈值：触发熔断的比例阈值，取值范围为0 - 1，代表0% - 100%。', example='0.8'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='EE5C32A1-BC0E-4B79-817C-103E4EDF****'),
  success?: boolean(name='Success', description='请求结果。', example='true'),
}

model UpdateCircuitBreakerRuleResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateCircuitBreakerRuleResponseBody(name='body'),
}

async function updateCircuitBreakerRule(request: UpdateCircuitBreakerRuleRequest): UpdateCircuitBreakerRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCircuitBreakerRule', 'POST', '/', 'json', false, 'json', request);
}

model UpdateClusterRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  clusterAliasName?: string(name='ClusterAliasName', example='cluster-1', position='Query'),
  instanceId?: string(name='InstanceId', example='mse-cn-78v1l83****', position='Query'),
  requestPars?: string(name='RequestPars', example='{}', position='Query'),
}

model UpdateClusterResponseBody = {
  errorCode?: string(name='ErrorCode', example='mse-100-100'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='5B170A0D-2C5D-4CF8-B808-03966B86****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateClusterResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateClusterResponseBody(name='body'),
}

async function updateCluster(request: UpdateClusterRequest): UpdateClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCluster', 'POST', '/', 'json', false, 'json', request);
}

model UpdateClusterSpecRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='system error', example='zh', position='Query'),
  clusterId?: string(name='ClusterId', description='mse-200-021', example='mse-09k1q11****', position='Query'),
  clusterSpecification?: string(name='ClusterSpecification', description='mse-100-001', example='MSE_SC_2_4_200_c', position='Query'),
  instanceCount?: int32(name='InstanceCount', description='cluster not found', example='3', position='Query'),
  instanceId: string(name='InstanceId', description='clusterNotFound', example='mse-cn-st21ri2****', position='Query'),
  mseVersion?: string(name='MseVersion', description='systemError', example='mse_pro', position='Query'),
}

model UpdateClusterSpecResponseBody = {
  code?: int32(name='Code', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='200'),
  data?: string(name='Data', description='The ID of the request.', example='null'),
  errorCode?: string(name='ErrorCode', description='The HTTP status code returned.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The number of destination nodes.', example='200'),
  message?: string(name='Message', description='The destination engine specifications.', example='The MSE version.'),
  requestId?: string(name='RequestId', description='The ID of the instance.', example='5B170A0D-2C5D-4CF8-B808-03966B86****'),
  success?: boolean(name='Success', description='The data structure.', example='true'),
}

model UpdateClusterSpecResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateClusterSpecResponseBody(name='body'),
}

/**
  * MSE_SC_2_4_200_c
  *
 */
async function updateClusterSpec(request: UpdateClusterSpecRequest): UpdateClusterSpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateClusterSpec', 'POST', '/', 'json', false, 'json', request);
}

model UpdateConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  autopurgePurgeInterval?: string(name='AutopurgePurgeInterval', example='none', position='Query'),
  autopurgeSnapRetainCount?: string(name='AutopurgeSnapRetainCount', example='none', position='Query'),
  clusterId?: string(name='ClusterId', example='mse-09k1q11****', position='Query'),
  configAuthEnabled?: boolean(name='ConfigAuthEnabled', example='true', position='Query'),
  configSecretEnabled?: boolean(name='ConfigSecretEnabled', example='true', position='Query'),
  configType?: string(name='ConfigType', example='TEXT', position='Query'),
  eurekaSupported?: boolean(name='EurekaSupported', example='true', position='Query'),
  extendedTypesEnable?: string(name='ExtendedTypesEnable', example='true', position='Query'),
  initLimit?: string(name='InitLimit', example='100', position='Query'),
  instanceId?: string(name='InstanceId', example='mse_prepaid_public_cn-st2212****', position='Query'),
  juteMaxbuffer?: string(name='JuteMaxbuffer', example='1048575', position='Query'),
  MCPEnabled?: boolean(name='MCPEnabled', example='true', position='Query'),
  maxClientCnxns?: string(name='MaxClientCnxns', example='0', position='Query'),
  maxSessionTimeout?: string(name='MaxSessionTimeout', description='最大超时时间', example='1000', position='Query'),
  minSessionTimeout?: string(name='MinSessionTimeout', description='最小超时时间', example='10', position='Query'),
  namingAuthEnabled?: boolean(name='NamingAuthEnabled', example='true', position='Query'),
  openSuperAcl?: string(name='OpenSuperAcl', example='true', position='Body'),
  passWord?: string(name='PassWord', example='password', position='Query'),
  requestPars?: string(name='RequestPars', example='{}', position='Query'),
  snapshotCount?: string(name='SnapshotCount', example='100000', position='Query'),
  syncLimit?: string(name='SyncLimit', example='10', position='Query'),
  TLSEnabled?: boolean(name='TLSEnabled', position='Query'),
  tickTime?: string(name='TickTime', example='2000', position='Query'),
  userName?: string(name='UserName', example='name', position='Query'),
}

model UpdateConfigResponseBody = {
  code?: int32(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='8BD1E58D-0755-42AC-A599-E6B55112****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateConfigResponseBody(name='body'),
}

async function updateConfig(request: UpdateConfigRequest): UpdateConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateConfig', 'POST', '/', 'json', true, 'form', request);
}

model UpdateEngineNamespaceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  clusterId?: string(name='ClusterId', example='mse-09k1q11****', position='Query'),
  desc?: string(name='Desc', example='public', position='Query'),
  id: string(name='Id', example='33ff74b6-d21e-4f9b-91a8-bc1ea4ef****', position='Query'),
  instanceId?: string(name='InstanceId', example='mse-cn-st21ri2****', position='Query'),
  name: string(name='Name', example='name', position='Query'),
  serviceCount?: int32(name='ServiceCount', example='3', position='Query'),
}

model UpdateEngineNamespaceResponseBody = {
  data?: {
    configCount?: int32(name='ConfigCount', example='1'),
    namespace?: string(name='Namespace', example='public'),
    namespaceDesc?: string(name='NamespaceDesc', example='mytest'),
    namespaceShowName?: string(name='NamespaceShowName', example='mytestshowname'),
    quota?: int32(name='Quota', example='1'),
    type?: int32(name='Type', example='1'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='4E9FDCFE-0738-493B-B801-82BDFBCB****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateEngineNamespaceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateEngineNamespaceResponseBody(name='body'),
}

async function updateEngineNamespace(request: UpdateEngineNamespaceRequest): UpdateEngineNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateEngineNamespace', 'POST', '/', 'json', false, 'json', request);
}

model UpdateFlowRuleRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  appId?: string(name='AppId', example='hkhon1po62@c3df23522******', position='Query'),
  appName: string(name='AppName', example='spring-cloud-a', position='Query'),
  controlBehavior?: int32(name='ControlBehavior', example='0', position='Query'),
  enable?: boolean(name='Enable', example='true', position='Query'),
  maxQueueingTimeMs?: int32(name='MaxQueueingTimeMs', example='500', position='Query'),
  namespace: string(name='Namespace', example='default', position='Query'),
  ruleId: long(name='RuleId', example='13', position='Query'),
  threshold?: int32(name='Threshold', example='30', position='Query'),
}

model UpdateFlowRuleResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    appId?: string(name='AppId', example='hpn9ac29kz@e31a4b871******'),
    appName?: string(name='AppName', example='spring-cloud-a'),
    controlBehavior?: int32(name='ControlBehavior', example='0'),
    enable?: boolean(name='Enable', example='true'),
    id?: long(name='Id', example='12'),
    maxQueueingTimeMs?: int32(name='MaxQueueingTimeMs', example='500'),
    namespace?: string(name='Namespace', example='default'),
    resource?: string(name='Resource', example='/c'),
    threshold?: float(name='Threshold', example='5'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='52BA6DA6-A702-4362-A32F-DFF79655****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateFlowRuleResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateFlowRuleResponseBody(name='body'),
}

async function updateFlowRule(request: UpdateFlowRuleRequest): UpdateFlowRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateFlowRule', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGatewayAuthConsumerRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  description?: string(name='Description', position='Query'),
  encodeType?: string(name='EncodeType', example='RSA', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', example='gw-90392d768a3847a7b804c505254d****', position='Query'),
  id: long(name='Id', example='63', position='Query'),
  jwks?: string(name='Jwks', example='{"keys":[{"e":"AQAB","kid":"DHFbpoIUqrY8t2zpA2qXfCmr5VO5ZEr4RzHU_-envvQ","kty":"RSA","n":"xAE7eB6qugXyCAG3yhh7pkDkT65pHymX-P7KfIupjf59vsdo91bSP9C8H07pSAGQO1MV_xFj9VswgsCg4R6otmg5PV2He95lZdHtOcU5DXIg_pbhLdKXbi66GlVeK6ABZOUW3WYtnNHD-91gVuoeJT_DwtGGcp4ignkgXfkiEm4sw-4sfb4qdt5oLbyVpmW6x9cfa7vs2WTfURiCrBoUqgBo_-4WTiULmmHSGZHOjzwa8WtrtOQGsAFjIbno85jp6MnGGGZPYZbDAa_b3y5u-YpW7ypZrvD8BgtKVjgtQgZhLAGezMt0ua3DRrWnKqTZ0BJ_EyxOGuHJrLsn00fnMQ"}]}', position='Query'),
  keyName?: string(name='KeyName', example='iss', position='Query'),
  keyValue?: string(name='KeyValue', example='abcd', position='Query'),
  tokenName?: string(name='TokenName', example='Authorization', position='Query'),
  tokenPass?: boolean(name='TokenPass', example='true', position='Query'),
  tokenPosition?: string(name='TokenPosition', example='HEADER', position='Query'),
  tokenPrefix?: string(name='TokenPrefix', example='Bearer', position='Query'),
}

model UpdateGatewayAuthConsumerResponseBody = {
  code?: int32(name='Code', description='code仅仅用来和success同步', example='200'),
  data?: long(name='Data', example='2'),
  dynamicCode?: string(name='DynamicCode', description='动态错误信息中的占位符', example='code'),
  dynamicMessage?: string(name='DynamicMessage', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='EE5C32A1-BC0E-4B79-817C-103E4EDF****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateGatewayAuthConsumerResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateGatewayAuthConsumerResponseBody(name='body'),
}

async function updateGatewayAuthConsumer(request: UpdateGatewayAuthConsumerRequest): UpdateGatewayAuthConsumerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGatewayAuthConsumer', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGatewayAuthConsumerResourceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  consumerId: long(name='ConsumerId', example='2', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', example='gw-3f97e2989c344f35ab3fd62b19f1****', position='Query'),
  resourceList: [ 
    {
      routeId?: long(name='RouteId', example='7816'),
      routeName?: string(name='RouteName', example='helo'),
    }
  ](name='ResourceList', shrink='json', position='Query'),
}

model UpdateGatewayAuthConsumerResourceResponseBody = {
  code?: int32(name='Code', description='code仅仅用来和success同步', example='200'),
  data?: boolean(name='Data', example='true'),
  dynamicCode?: string(name='DynamicCode', description='动态错误信息中的占位符', example='code'),
  dynamicMessage?: string(name='DynamicMessage', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateGatewayAuthConsumerResourceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateGatewayAuthConsumerResourceResponseBody(name='body'),
}

async function updateGatewayAuthConsumerResource(request: UpdateGatewayAuthConsumerResourceRequest): UpdateGatewayAuthConsumerResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGatewayAuthConsumerResource', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGatewayAuthConsumerResourceStatusRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  consumerId: long(name='ConsumerId', example='2', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', example='gw-2a99625886d54722be94d92e9a69****', position='Query'),
  idList: string(name='IdList', example='1,2,3,4', position='Query'),
  resourceStatus: boolean(name='ResourceStatus', example='true', position='Query'),
}

model UpdateGatewayAuthConsumerResourceStatusResponseBody = {
  code?: int32(name='Code', description='code仅仅用来和success同步', example='200'),
  data?: boolean(name='Data', example='true'),
  dynamicCode?: string(name='DynamicCode', description='动态错误信息中的占位符', example='code'),
  dynamicMessage?: string(name='DynamicMessage', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateGatewayAuthConsumerResourceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateGatewayAuthConsumerResourceStatusResponseBody(name='body'),
}

async function updateGatewayAuthConsumerResourceStatus(request: UpdateGatewayAuthConsumerResourceStatusRequest): UpdateGatewayAuthConsumerResourceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGatewayAuthConsumerResourceStatus', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGatewayAuthConsumerStatusRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  consumerStatus: boolean(name='ConsumerStatus', example='true', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', example='gw-685f661467b54f48b7b7a76605ce****', position='Query'),
  id: long(name='Id', example='1', position='Query'),
}

model UpdateGatewayAuthConsumerStatusResponseBody = {
  code?: int32(name='Code', description='code仅仅用来和success同步', example='200'),
  data?: boolean(name='Data', example='true'),
  dynamicCode?: string(name='DynamicCode', description='动态错误信息中的占位符', example='code'),
  dynamicMessage?: string(name='DynamicMessage', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='56D9E600-6348-4260-B35F-583413F****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateGatewayAuthConsumerStatusResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateGatewayAuthConsumerStatusResponseBody(name='body'),
}

async function updateGatewayAuthConsumerStatus(request: UpdateGatewayAuthConsumerStatusRequest): UpdateGatewayAuthConsumerStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGatewayAuthConsumerStatus', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGatewayDomainRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  certIdentifier?: string(name='CertIdentifier', example='6209108-cn-hangzhou', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-86575c0bc9f04ecfbacb92b8e392****', position='Query'),
  http2?: string(name='Http2', example='close', position='Query'),
  id?: long(name='Id', example='94', position='Query'),
  mustHttps?: boolean(name='MustHttps', example='false', position='Query'),
  protocol?: string(name='Protocol', example='HTTPS', position='Query'),
  tlsMax?: string(name='TlsMax', example='TLS 1.3', position='Query'),
  tlsMin?: string(name='TlsMin', example='TLS 1.0', position='Query'),
}

model UpdateGatewayDomainResponseBody = {
  code?: int32(name='Code', example='403'),
  data?: long(name='Data', example='94'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='6F6C6DE4-DB33-5791-B210-ED2E6FEFFE6F'),
  success?: boolean(name='Success', example='true'),
}

model UpdateGatewayDomainResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateGatewayDomainResponseBody(name='body'),
}

async function updateGatewayDomain(request: UpdateGatewayDomainRequest): UpdateGatewayDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGatewayDomain', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGatewayNameRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-1cef54brvecdb419fb264d4f9b8c', position='Query'),
  name?: string(name='Name', example='demo-test', position='Query'),
}

model UpdateGatewayNameResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='8C95711F-E702-5395-BFAA-21BA946CDE47'),
  success?: boolean(name='Success', example='true'),
}

model UpdateGatewayNameResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateGatewayNameResponseBody(name='body'),
}

async function updateGatewayName(request: UpdateGatewayNameRequest): UpdateGatewayNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGatewayName', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGatewayOptionRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  gatewayId?: long(name='GatewayId', example='421', position='Query'),
  gatewayOption?: GatewayOption(name='GatewayOption', shrink='json', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-83b0ddb569434f82b9fe8e4c60c4****', position='Query'),
}

model UpdateGatewayOptionResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: GatewayOption(name='Data', example='{\\"LogConfigDetails\\": {\\"LogEnabled\\": True}, \\"TraceDetails\\": {\\"Sample\\": 17, \\"TraceEnabled\\": True}}'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='124D02EB-DBDD-534D-A701-B4A95D3D****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateGatewayOptionResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateGatewayOptionResponseBody(name='body'),
}

async function updateGatewayOption(request: UpdateGatewayOptionRequest): UpdateGatewayOptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGatewayOption', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGatewayRouteRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  destinationType?: string(name='DestinationType', description='The data returned.', example='Mock', position='Query'),
  directResponseJSON?: {
    body?: string(name='Body', example='hello'),
    code?: long(name='Code', example='200'),
  }(name='DirectResponseJSON', description='The error code returned if the request failed.', shrink='json', position='Query'),
  domainIdListJSON?: string(name='DomainIdListJSON', example='[90]', position='Query'),
  enableWaf?: boolean(name='EnableWaf', example='false', position='Query'),
  fallback?: boolean(name='Fallback', example='true', position='Query'),
  fallbackServices?: [ 
    {
      agreementType?: string(name='AgreementType', example='DUBBO'),
      groupName?: string(name='GroupName', example='test'),
      name?: string(name='Name', example='name'),
      namespace?: string(name='Namespace', example='Namespace'),
      percent?: int32(name='Percent', example='80'),
      serviceId?: long(name='ServiceId', example='1'),
      servicePort?: int32(name='ServicePort', example='8848'),
      sourceType?: string(name='SourceType', example='MSE'),
      version?: string(name='Version', example='v1'),
    }
  ](name='FallbackServices', shrink='json', position='Query'),
  gatewayId?: long(name='GatewayId', description='The name of the Dubbo service.', example='501', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-86575c0bc9f04ecfbacb92b8e392a2c4', position='Query'),
  id?: long(name='Id', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='139', position='Query'),
  name?: string(name='Name', description='The version of the Dubbo service.', example='route-web', position='Query'),
  predicates?: {
    headerPredicates?: [ 
      {
        key?: string(name='Key', description='The parameter mapping object.', example='debug'),
        type?: string(name='Type', description='The key extracted from the input parameter.', example='PRE'),
        value?: string(name='Value', description='The position of the input parameter.

> Valid values:

*   `ALL_QUERY_PARAMETER`: request parameter

*   `ALL_HEADER`: request header

*   `ALL_PATH`: request path

*   `ALL_BODY`: request body', example='on'),
      }
    ](name='HeaderPredicates', description='The value of the header to be passed through.'),
    methodPredicates?: [ string ](name='MethodPredicates', description='The pass-through type of the header.

> Valid values:

*   PASS_ALL: All headers are passed through.

*   PASS_NOT: All headers are not passed through.

*   PASS_ASSIGN: Specified headers are passed through.'),
    pathPredicates?: {
      ignoreCase?: boolean(name='IgnoreCase', description='The path that is used to match a method.', example='true'),
      path?: string(name='Path', description='The method name of the Dubbo service.', example='/test'),
      type?: string(name='Type', description='The HTTP method.

> Valid values:

*   ALL_GET

*   ALL_POST

*   ALL_PUT

*   ALL_DELETE

*   ALL_PATCH', example='PRE'),
    }(name='PathPredicates', description='The method mapping object.'),
    queryPredicates?: [ 
      {
        key?: string(name='Key', description='The ID of the route.', example='userid'),
        type?: string(name='Type', description='The information about service mocking.', example='PRE'),
        value?: string(name='Value', description='The destination service type.', example='test'),
      }
    ](name='QueryPredicates', description='The type of the backend service parameter.'),
  }(name='Predicates', description='The forwarding rules of the Dubbo service.', shrink='json', position='Query'),
  redirectJSON?: {
    code?: int32(name='Code', example='302'),
    host?: string(name='Host', example='test.com'),
    path?: string(name='Path', example='/test'),
  }(name='RedirectJSON', shrink='json', position='Query'),
  routeOrder?: int32(name='RouteOrder', description='The Dubbo service group.', example='1', position='Query'),
  services?: [ 
    {
      agreementType?: string(name='AgreementType', description='Specifies whether to enable the Fallback service.', example='DUBBO'),
      groupName?: string(name='GroupName', description='Specifies whether to activate Web Application Firewall (WAF).', example='test'),
      httpDubboTranscoder?: {
        dubboServiceGroup?: string(name='DubboServiceGroup', description='The weight in the form of a percentage value.', example='service name'),
        dubboServiceName?: string(name='DubboServiceName', description='The data object.', example='org.apache.dubbo.samples.basic.api.DemoService'),
        dubboServiceVersion?: string(name='DubboServiceVersion', description='The ID of the service.', example='0.0.0'),
        mothedMapList?: [ 
          {
            dubboMothedName?: string(name='DubboMothedName', description='The source type.', example='sayHello'),
            httpMothed?: string(name='HttpMothed', description='The namespace in which the service resides.', example='ALL_GET'),
            mothedpath?: string(name='Mothedpath', description='The name of the group to which the service belongs.', example='/mytestzbk/sayhello'),
            paramMapsList?: [ 
              {
                extractKey?: string(name='ExtractKey', description='The message returned.', example='name'),
                extractKeySpec?: string(name='ExtractKeySpec', description='The HTTP status code returned.', example='ALL_QUERY_PARAMETER'),
                mappingType?: string(name='MappingType', description='The request is successfully processed.', example='java.lang.String'),
              }
            ](name='ParamMapsList', description='The data structure.'),
            passThroughAllHeaders?: string(name='PassThroughAllHeaders', description='The type of the protocol. Valid values:', example='PASS_NOT'),
            passThroughList?: [ string ](name='PassThroughList', description='The service port number.'),
          }
        ](name='MothedMapList', description='The version of the service.'),
      }(name='HttpDubboTranscoder', description='The information about the Fallback service.'),
      name?: string(name='Name', description='The status code returned.', example='web'),
      namespace?: string(name='Namespace', description='The path to be redirected to.', example='default'),
      percent?: int32(name='Percent', description='The associated domain name.', example='80'),
      serviceId?: long(name='ServiceId', description='The unique ID of the gateway.', example='1'),
      servicePort?: int32(name='ServicePort', description='The status code returned.', example='20880'),
      sourceType?: string(name='SourceType', description='The hostname to be redirected to.', example='MSE'),
      version?: string(name='Version', description='The information about redirection.', example='v1'),
    }
  ](name='Services', description='The mock return code.', shrink='json', position='Query'),
}

model UpdateGatewayRouteResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: long(name='Data', example='337'),
  errorCode?: string(name='ErrorCode', example='NoPermission'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='73785414-2C5B-5E28-BD91-B2C742269C48'),
  success?: boolean(name='Success', example='true'),
}

model UpdateGatewayRouteResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateGatewayRouteResponseBody(name='body'),
}

async function updateGatewayRoute(request: UpdateGatewayRouteRequest): UpdateGatewayRouteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGatewayRoute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGatewayRouteAuthRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  authJSON: {
    type?: string(name='Type', example='JWT'),
  }(name='AuthJSON', shrink='json', position='Query'),
  gatewayId?: long(name='GatewayId', example='102', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', example='gw-0adf3ad751284cc69fcf9669fba*****', position='Query'),
  id: long(name='Id', example='109', position='Query'),
}

model UpdateGatewayRouteAuthResponseBody = {
  code?: int32(name='Code', description='code仅仅用来和success同步', example='200'),
  data?: long(name='Data', example='123'),
  dynamicCode?: string(name='DynamicCode', description='动态错误信息中的占位符', example='code'),
  dynamicMessage?: string(name='DynamicMessage', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='54973C90-F379-4372-9AA5-053A3F7****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateGatewayRouteAuthResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateGatewayRouteAuthResponseBody(name='body'),
}

async function updateGatewayRouteAuth(request: UpdateGatewayRouteAuthRequest): UpdateGatewayRouteAuthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGatewayRouteAuth', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGatewayRouteCORSRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  corsJSON?: {
    allowCredentials?: boolean(name='AllowCredentials', example='true'),
    allowHeaders?: string(name='AllowHeaders', example='content-type'),
    allowMethods?: string(name='AllowMethods', example='GET,POST'),
    allowOrigins?: string(name='AllowOrigins', example='https://api.aliyun-inc.com/'),
    exposeHeaders?: string(name='ExposeHeaders', example='*'),
    status?: string(name='Status', example='off'),
    timeUnit?: string(name='TimeUnit', example='h'),
    unitNum?: long(name='UnitNum', example='24'),
  }(name='CorsJSON', shrink='json', position='Query'),
  gatewayId?: long(name='GatewayId', example='85', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-f70a6ddf2f0941a2bb997b2d16028f37', position='Query'),
  id?: long(name='Id', example='55', position='Query'),
}

model UpdateGatewayRouteCORSResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: long(name='Data', example='618'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='Id of the request', example='41BE990E-44E4-5ED3-AEEB-A276941B1854'),
  success?: boolean(name='Success', example='true'),
}

model UpdateGatewayRouteCORSResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateGatewayRouteCORSResponseBody(name='body'),
}

async function updateGatewayRouteCORS(request: UpdateGatewayRouteCORSRequest): UpdateGatewayRouteCORSResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGatewayRouteCORS', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGatewayRouteHTTPRewriteRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  gatewayId?: long(name='GatewayId', example='430', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-90392d768a3847a7b804c505254da96d', position='Query'),
  httpRewriteJSON?: string(name='HttpRewriteJSON', example='{"pathType":"PRE","path":"/","status":"off"}', position='Query'),
  id?: long(name='Id', example='238', position='Query'),
}

model UpdateGatewayRouteHTTPRewriteResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: long(name='Data', example='411'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='AE60DA1E-B234-5105-897B-68372453A5A2'),
  success?: boolean(name='Success', example='true'),
}

model UpdateGatewayRouteHTTPRewriteResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateGatewayRouteHTTPRewriteResponseBody(name='body'),
}

async function updateGatewayRouteHTTPRewrite(request: UpdateGatewayRouteHTTPRewriteRequest): UpdateGatewayRouteHTTPRewriteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGatewayRouteHTTPRewrite', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGatewayRouteHeaderOpRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  gatewayId?: long(name='GatewayId', example='324', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-6bdc977deda44bf589c49d063b4c2d1d', position='Query'),
  headerOpJSON?: string(name='HeaderOpJSON', example='{\\"status\\":\\"on\\",\\"headerOpItems\\":[{\\"directionType\\":\\"Request\\",\\"opType\\":\\"Update\\",\\"key\\":\\"hosts\\",\\"value\\":\\"test.com\\"}]}', position='Query'),
  id?: long(name='Id', example='411', position='Query'),
}

model UpdateGatewayRouteHeaderOpResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: long(name='Data', example='666'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='Id of the request', example='7C8CB294-BED8-5F32-A416-7517725E8F27'),
  success?: boolean(name='Success', example='true'),
}

model UpdateGatewayRouteHeaderOpResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateGatewayRouteHeaderOpResponseBody(name='body'),
}

async function updateGatewayRouteHeaderOp(request: UpdateGatewayRouteHeaderOpRequest): UpdateGatewayRouteHeaderOpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGatewayRouteHeaderOp', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGatewayRouteRetryRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  gatewayId?: long(name='GatewayId', example='501', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-3f97e2989c344f35ab3fd62b19f1d10a', position='Query'),
  id?: long(name='Id', example='508', position='Query'),
  retryJSON?: {
    attempts?: int32(name='Attempts', example='2'),
    httpCodes?: [ string ](name='HttpCodes'),
    retryOn?: [ string ](name='RetryOn'),
    status?: string(name='Status', example='off'),
  }(name='RetryJSON', shrink='json', position='Query'),
}

model UpdateGatewayRouteRetryResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: long(name='Data', example='640'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='Id of the request', example='9297B27D-D932-5E9F-93B9-99D6C5F3A879'),
  success?: boolean(name='Success', example='true'),
}

model UpdateGatewayRouteRetryResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateGatewayRouteRetryResponseBody(name='body'),
}

async function updateGatewayRouteRetry(request: UpdateGatewayRouteRetryRequest): UpdateGatewayRouteRetryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGatewayRouteRetry', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGatewayRouteTimeoutRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  gatewayId?: long(name='GatewayId', example='85', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-533290d279c1405f9628c64f7c8272ee', position='Query'),
  id?: long(name='Id', example='567', position='Query'),
  timeoutJSON?: {
    status?: string(name='Status', example='off'),
    timeUnit?: string(name='TimeUnit', example='s'),
    unitNum?: int32(name='UnitNum', example='1'),
  }(name='TimeoutJSON', shrink='json', position='Query'),
}

model UpdateGatewayRouteTimeoutResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: long(name='Data', example='400'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='Id of the request', example='5359729E-A059-5942-98AF-E981E89C99FA'),
  success?: boolean(name='Success', example='true'),
}

model UpdateGatewayRouteTimeoutResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateGatewayRouteTimeoutResponseBody(name='body'),
}

async function updateGatewayRouteTimeout(request: UpdateGatewayRouteTimeoutRequest): UpdateGatewayRouteTimeoutResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGatewayRouteTimeout', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGatewayRouteWafStatusRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='duplicatedClusterAliasName', example='zh', position='Query'),
  enableWaf?: boolean(name='EnableWaf', description='duplicated cluster alias name', example='true', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='mse-200-105', example='gw-86575c0bc9f04ecfbacb92b8e392****', position='Query'),
  routeId?: long(name='RouteId', description='code', example='645', position='Query'),
}

model UpdateGatewayRouteWafStatusResponseBody = {
  code?: int32(name='Code', description='clusterNotFound', example='200'),
  data?: {
    cors?: {
      allowCredentials?: boolean(name='AllowCredentials', example='true'),
      allowHeaders?: string(name='AllowHeaders', example='*'),
      allowMethods?: string(name='AllowMethods', example='GET,POST,PUT,DELETE,HEAD,OPTIONS,PATCH'),
      allowOrigins?: string(name='AllowOrigins', example='*'),
      exposeHeaders?: string(name='ExposeHeaders', example='*'),
      status?: string(name='Status', example='off'),
      timeUnit?: string(name='TimeUnit', example='s'),
      unitNum?: long(name='UnitNum', example='1'),
    }(name='Cors'),
    defaultServiceId?: long(name='DefaultServiceId', example='1'),
    defaultServiceName?: string(name='DefaultServiceName', example='test'),
    destinationType?: string(name='DestinationType', example='Single'),
    directResponse?: {
      body?: string(name='Body', example='[{\\"key\\":\\"h68d13466.sqa.eu95\\",\\"dims\\":\\"groupName=All}]'),
      code?: int32(name='Code', example='200'),
    }(name='DirectResponse'),
    domainId?: long(name='DomainId', example='235'),
    domainIdList?: [ long ](name='DomainIdList'),
    domainName?: string(name='DomainName', example='nbhamster.com'),
    domainNameList?: [ string ](name='DomainNameList'),
    enableWaf?: boolean(name='EnableWaf', example='0'),
    gatewayId?: long(name='GatewayId', example='102'),
    gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-7ea3da97b96543e19f6c597cd4a9****'),
    gmtCreate?: string(name='GmtCreate', example='2022-01-26T09:52:41.000+0000'),
    gmtModified?: string(name='GmtModified', example='2022-02-24T06:08:29.230+0000'),
    HTTPRewrite?: {
      host?: string(name='Host', example='aliyuncs.com'),
      path?: string(name='Path', example='/test/client'),
      pathType?: string(name='PathType', example='PRE'),
      pattern?: string(name='Pattern', example='/test'),
      status?: string(name='Status', example='off'),
      substitution?: string(name='Substitution', example='test'),
    }(name='HTTPRewrite'),
    headerOp?: {
      headerOpItems?: [ 
        {
          directionType?: string(name='DirectionType', example='Response'),
          key?: string(name='Key', example='debug'),
          opType?: string(name='OpType', example='Add'),
          value?: string(name='Value', example='test'),
        }
      ](name='HeaderOpItems'),
      status?: string(name='Status', example='off'),
    }(name='HeaderOp'),
    id?: long(name='Id', description='systemError', example='12'),
    name?: string(name='Name', description='system error', example='test'),
    predicates?: string(name='Predicates', example='{\\"PathPredicates\\":{\\"Path\\":\\"/metas\\",\\"Type\\":\\"PRE\\",\\"IgnoreCase\\":false}}'),
    redirect?: {
      code?: int32(name='Code', example='200'),
      host?: string(name='Host', example='ww.al.c'),
      path?: string(name='Path', example='/'),
    }(name='Redirect'),
    retry?: {
      attempts?: int32(name='Attempts', example='1'),
      httpCodes?: [ string ](name='HttpCodes'),
      retryOn?: [ string ](name='RetryOn'),
      status?: string(name='Status', example='on'),
    }(name='Retry'),
    routeOrder?: int32(name='RouteOrder', example='1'),
    routePredicates?: {
      headerPredicates?: [ 
        {
          key?: string(name='Key', example='alibo'),
          type?: string(name='Type', example='PRE'),
          value?: string(name='Value', example='200'),
        }
      ](name='HeaderPredicates'),
      methodPredicates?: [ string ](name='MethodPredicates'),
      pathPredicates?: {
        ignoreCase?: boolean(name='IgnoreCase', example='true'),
        path?: string(name='Path', example='/zookeeper/mmgw/unlogined/common.getBu'),
        type?: string(name='Type', example='PRE'),
      }(name='PathPredicates'),
      queryPredicates?: [ 
        {
          key?: string(name='Key', example='instanceId'),
          type?: string(name='Type', example='PRE'),
          value?: string(name='Value', example='test'),
        }
      ](name='QueryPredicates'),
    }(name='RoutePredicates'),
    routeServices?: [ 
      {
        groupName?: string(name='GroupName', example='DEFAULT_GROUP'),
        name?: string(name='Name', example='test-aixue-gray'),
        namespace?: string(name='Namespace', example='default'),
        percent?: int32(name='Percent', example='80'),
        serviceId?: long(name='ServiceId', example='547'),
        serviceName?: string(name='ServiceName', example='b-service'),
        sourceType?: string(name='SourceType', example='K8S'),
        version?: string(name='Version', example='v1'),
      }
    ](name='RouteServices'),
    services?: string(name='Services', example='[{\\"Percent\\":100,\\"ServiceId\\":126}]'),
    status?: int32(name='Status', example='1'),
    timeout?: {
      status?: string(name='Status', example='off'),
      timeUnit?: string(name='TimeUnit', example='s'),
      unitNum?: int32(name='UnitNum', example='10'),
    }(name='Timeout'),
  }(name='Data', description='mse-100-001'),
  httpStatusCode?: int32(name='HttpStatusCode', description='illegal request:%s', example='200'),
  message?: string(name='Message', description='mse-200-021', example='success'),
  requestId?: string(name='RequestId', description='illegalRequest', example='7466566F-F30F-4A29-965D-3E0AF21D****'),
  success?: boolean(name='Success', description='cluster not found', example='true'),
}

model UpdateGatewayRouteWafStatusResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateGatewayRouteWafStatusResponseBody(name='body'),
}

async function updateGatewayRouteWafStatus(request: UpdateGatewayRouteWafStatusRequest): UpdateGatewayRouteWafStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGatewayRouteWafStatus', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGatewayServiceTrafficPolicyRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The ID of the gateway.', example='zh', position='Query'),
  gatewayId?: long(name='GatewayId', description='cluster not found', example='429', position='Query'),
  gatewayTrafficPolicy: TrafficPolicy(name='GatewayTrafficPolicy', description='systemError', shrink='json', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='system error', example='gw-75c5036c083e4f89ba8ef9fafff2e902', position='Query'),
  serviceId?: long(name='ServiceId', description='mse-100-001', example='411', position='Query'),
}

model UpdateGatewayServiceTrafficPolicyResponseBody = {
  code?: int32(name='Code', description='The ID of the request.', example='200'),
  data?: GatewayService(name='Data', description='The message returned.', example='{\\"GatewayUniqueId\\": \\"gw-2b8ebd75dc554c37a4279ba9917379f2\\", \\"Id\\": 417, \\"GatewayTrafficPolicy\\": {\\"LoadBalancerSettings\\": {\\"LoadbalancerType\\": \\"ROUND_ROBIN\\"}, \\"TlsSetting\\": {\\"TlsMode\\": \\"DISABLE\\"}}}'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The unique ID of the gateway.', example='200'),
  message?: string(name='Message', description='The language of the response. Valid values:

*   **zh-CN**: Chinese
*   **en-US**: English.', example='The data structure.'),
  requestId?: string(name='RequestId', description='The traffic policy of the gateway.', example='11A61389-F896-5231-A4FB-074D9E2E0055'),
  success?: boolean(name='Success', description='The HTTP status code returned.', example='true'),
}

model UpdateGatewayServiceTrafficPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateGatewayServiceTrafficPolicyResponseBody(name='body'),
}

async function updateGatewayServiceTrafficPolicy(request: UpdateGatewayServiceTrafficPolicyRequest): UpdateGatewayServiceTrafficPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGatewayServiceTrafficPolicy', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGatewayServiceVersionRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-eccf313e2224438ba53d95d039e5****', position='Query'),
  serviceId?: long(name='ServiceId', example='575', position='Query'),
  serviceVersion?: string(name='ServiceVersion', example='{\\"name\\":\\"v3\\",\\"labels\\":[{\\"key\\":\\"version\\",\\"value\\":\\"v3\\"}]}', position='Query'),
}

model UpdateGatewayServiceVersionResponseBody = {
  code?: int32(name='Code', example='1'),
  data?: long(name='Data', example='614'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='D6580AA6-E285-58D2-B00B-12C051B3B7BF'),
  success?: boolean(name='Success', example='true'),
}

model UpdateGatewayServiceVersionResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateGatewayServiceVersionResponseBody(name='body'),
}

async function updateGatewayServiceVersion(request: UpdateGatewayServiceVersionRequest): UpdateGatewayServiceVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGatewayServiceVersion', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGatewaySpecRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='duplicated cluster alias name', example='zh', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', description='code', example='gw-c70622ff52fe49beb29bea9a6f52****', position='Query'),
  replica: int32(name='Replica', description='duplicatedClusterAliasName', example='3', position='Query'),
  spec: string(name='Spec', description='mse-200-105', example='MSE_GTW_4_8_200_c', position='Query'),
}

model UpdateGatewaySpecResponseBody = {
  code?: int32(name='Code', description='cluster not found', example='200'),
  data?: string(name='Data', description='systemError', example='gw-892ehbv7gg56******'),
  httpStatusCode?: int32(name='HttpStatusCode', description='illegal request:%s', example='200'),
  message?: string(name='Message', description='mse-200-021', example='clusterNotFound'),
  requestId?: string(name='RequestId', description='illegalRequest', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', description='mse-100-001', example='true'),
}

model UpdateGatewaySpecResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateGatewaySpecResponseBody(name='body'),
}

/**
  * system error
  *
 * @tags gateway
 */
async function updateGatewaySpec(request: UpdateGatewaySpecRequest): UpdateGatewaySpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGatewaySpec', 'POST', '/', 'json', false, 'json', request);
}

model UpdateImageRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='system error', example='zh', position='Query'),
  clusterId: string(name='ClusterId', description='mse-100-001', example='mse-8e8e9060', position='Query'),
  versionCode: string(name='VersionCode', description='systemError', example='ZooKeeper_3_5_5', position='Query'),
}

model UpdateImageResponseBody = {
  errorCode?: string(name='ErrorCode', description='The data structure.', example='mse-100-000'),
  message?: string(name='Message', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='success'),
  requestId?: string(name='RequestId', description='The destination version number.

> You must call the GetImage operation to obtain the maximum destination version number that corresponds to MaxVersionCode.', example='3855D475-2B66-5CFF-9A51-3D698E52C472'),
  success?: boolean(name='Success', description='The ID of the request.', example='True'),
}

model UpdateImageResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateImageResponseBody(name='body'),
}

async function updateImage(request: UpdateImageRequest): UpdateImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateImage', 'POST', '/', 'json', false, 'json', request);
}

model UpdateMessageQueueRouteRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  appId: string(name='AppId', example='hkhon1po62@c3df23522baa898', position='Query'),
  appName?: string(name='AppName', description='应用名称', example='example-app', maxLength=64, position='Query'),
  enable?: boolean(name='Enable', example='true', position='Query'),
  filterSide?: string(name='FilterSide', example='Server', position='Query'),
  namespace?: string(name='Namespace', description='MSE命名空间名字', example='default', maxLength=64, position='Query'),
  region: string(name='Region', example='cn-hangzhou', position='Query'),
  tags?: [ string ](name='Tags', shrink='json', position='Query'),
}

model UpdateMessageQueueRouteResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', example='True'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='E3919C62-876A-5926-A0BC-18351A24FA35'),
  success?: boolean(name='Success', example='true'),
}

model UpdateMessageQueueRouteResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateMessageQueueRouteResponseBody(name='body'),
}

async function updateMessageQueueRoute(request: UpdateMessageQueueRouteRequest): UpdateMessageQueueRouteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateMessageQueueRoute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateMigrationTaskRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The data structure.', example='zh', position='Query'),
  clusterType?: string(name='ClusterType', description='The address of the source instance node.', example='Nacos-Ans', position='Query'),
  id?: string(name='Id', description='The type of the instance. Valid values:

*   Nacos-Ans
*   ZooKeeper
*   Eureka', example='1', position='Query'),
  originInstanceAddress?: string(name='OriginInstanceAddress', description='The name of the source instance.', example='192.168.1.1:8848', position='Query'),
  originInstanceName?: string(name='OriginInstanceName', description='Source instance', example='The list of namespaces. This parameter is optional if you want to migrate applications from a Nacos instance.', position='Query'),
  originInstanceNamespace?: string(name='OriginInstanceNamespace', description='The ID of the destination instance.', example='namesapceId1,namesapceId2', position='Query'),
  projectDesc?: string(name='ProjectDesc', description='This is a description.', example='The language of the response. Valid values:

*   zh: Chinese
*   en: English', position='Query'),
  requestPars?: string(name='RequestPars', description='The ID of the task.', example='{}', position='Query'),
  targetClusterName?: string(name='TargetClusterName', description='Destination instance', example='The URL of the destination instance.', position='Query'),
  targetClusterUrl?: string(name='TargetClusterUrl', description='The description.', example='mse-66*****-nacos-ans.mse.aliyuncs.com:8848', position='Query'),
  targetInstanceId?: string(name='TargetInstanceId', description='The name of the destination instance.', example='mse-cn-ud82*****', position='Query'),
}

model UpdateMigrationTaskResponseBody = {
  data?: {
    clusterType?: string(name='ClusterType', description='The address of the source instance node.', example='Nacos-Ans'),
    gmtCreate?: string(name='GmtCreate', description='The modification time.', example='2022-01-07T10:07:57.000+0000'),
    gmtModified?: string(name='GmtModified', description='The ID of the request.', example='2022-01-07T10:07:57.000+0000'),
    id?: string(name='Id', description='The ID of the user.', example='1'),
    originInstanceAddress?: string(name='OriginInstanceAddress', description='The name of the source instance.', example='192.168.100.2:2181'),
    originInstanceName?: string(name='OriginInstanceName', description='The list of namespaces. This parameter is optional if applications are migrated from a Nacos instance.', example='src'),
    originInstanceNamespace?: string(name='OriginInstanceNamespace', description='The ID of the destination instance.', example='fsdfsdfdsf'),
    projectDesc?: string(name='ProjectDesc', description='The creation time.', example='1232345'),
    targetClusterName?: string(name='TargetClusterName', description='The URL of the destination instance.', example='multiple-nacos'),
    targetClusterUrl?: string(name='TargetClusterUrl', description='The description.', example='mse-0b*****-nacos-ans.mse.aliyuncs.com:8848'),
    targetInstanceId?: string(name='TargetInstanceId', description='The name of the destination instance.', example='mse-cn-zvp2u*****'),
    userId?: string(name='UserId', description='The type of the instance.

*   Nacos-Ans
*   ZooKeeper
*   Eureka', example='183876217*****'),
  }(name='Data', description='The ID of the task.'),
  errorCode?: string(name='ErrorCode', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The data structure.', example='200'),
  message?: string(name='Message', description='The request was successfully processed.', example='The error code returned if the request failed.'),
  requestId?: string(name='RequestId', description='The message returned.', example='AF21683A-29C7-4853-AC0F-B5ADEE4****'),
  success?: boolean(name='Success', description='mse-200-105', example='true'),
}

model UpdateMigrationTaskResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateMigrationTaskResponseBody(name='body'),
}

async function updateMigrationTask(request: UpdateMigrationTaskRequest): UpdateMigrationTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateMigrationTask', 'POST', '/', 'json', false, 'json', request);
}

model UpdateNacosClusterRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='system error', example='zh', position='Query'),
  checkPort?: int32(name='CheckPort', description='cluster not found', example='80', position='Query'),
  clusterName: string(name='ClusterName', description='clusterNotFound', example='DEFAULT', position='Query'),
  groupName: string(name='GroupName', description='illegal request:%s', example='DEFAULT_GROUP', position='Query'),
  healthChecker?: string(name='HealthChecker', description='systemError', example='{"type":"none"}', position='Query'),
  instanceId: string(name='InstanceId', description='mse-100-007', example='mse-cn-123456', position='Query'),
  namespaceId?: string(name='NamespaceId', description='mse-200-021', example='9e78a671-4b9b-4dd4-99c1-0b9da87d3dec', position='Query'),
  serviceName: string(name='ServiceName', description='illegalRequest', example='hello_service', position='Query'),
  useInstancePortForCheck?: boolean(name='UseInstancePortForCheck', description='mse-100-001', example='false', position='Query'),
}

model UpdateNacosClusterResponseBody = {
  code?: int32(name='Code', description='The port used for health checks.', example='200'),
  data?: string(name='Data', description='The type of the health check.', example='ok'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The name of the service.', example='200'),
  message?: string(name='Message', description='The ID of the namespace.', example='The name of the Nacos cluster.'),
  requestId?: string(name='RequestId', description='The name of the group.', example='9e78a671-4b9b-4dd4-99c1-0b9da87d3dec'),
  success?: boolean(name='Success', description='Specifies whether to use the port of the instance for a health check.', example='true'),
}

model UpdateNacosClusterResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateNacosClusterResponseBody(name='body'),
}

async function updateNacosCluster(request: UpdateNacosClusterRequest): UpdateNacosClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateNacosCluster', 'POST', '/', 'json', false, 'json', request);
}

model UpdateNacosConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  appName?: string(name='AppName', description='mse-100-007', example='postoffice', position='Query'),
  betaIps?: string(name='BetaIps', example='196.168.XX.XX', position='Query'),
  content?: string(name='Content', description='cluster not found', example='mse-100-001', position='Query'),
  dataId: string(name='DataId', description='duplicatedClusterAliasName', example='ky-check-****.yml', position='Query'),
  desc?: string(name='Desc', description='illegal request:%s', example='mse-200-021', position='Query'),
  encryptedDataKey?: string(name='EncryptedDataKey', example='122wdwe****', position='Query'),
  group: string(name='Group', description='duplicated cluster alias name', example='resource', position='Query'),
  instanceId: string(name='InstanceId', description='mse-200-105', example='mse-cn-7pp2a****', position='Query'),
  md5?: string(name='Md5', description='system error', example='045439703a273a94306422b****', position='Query'),
  namespaceId?: string(name='NamespaceId', description='systemError', example='78b7af66-d15f-4541-b886-11ed81ecb6c0', position='Query'),
  tags?: string(name='Tags', description='illegalRequest', example='2021-10-20', position='Query'),
  type?: string(name='Type', description='clusterNotFound', example='text', position='Query'),
}

model UpdateNacosConfigResponseBody = {
  errorCode?: string(name='ErrorCode', example='NoPermission'),
  httpCode?: string(name='HttpCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='69AD2AA7-DB47-449B-941B-B14409DF****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateNacosConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateNacosConfigResponseBody(name='body'),
}

/**
  * attribute1=1221111\\r\\nattribute2=Chinese\\r\\nattribute3=abc11\\r\\nattribute4=1.00111
  *
 */
async function updateNacosConfig(request: UpdateNacosConfigRequest): UpdateNacosConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateNacosConfig', 'POST', '/', 'json', false, 'json', request);
}

model UpdateNacosInstanceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  clusterName?: string(name='ClusterName', description='Nacos集群名', example='DEFAULT', position='Query'),
  enabled: boolean(name='Enabled', description='服务禁用标志', example='true', position='Query'),
  ephemeral: boolean(name='Ephemeral', description='临时节点标志', example='false', position='Query'),
  groupName: string(name='GroupName', description='分组名', example='DEFAULT_GROUP', position='Query'),
  instanceId: string(name='InstanceId', description='实例id', example='mse-cn-123456', position='Query'),
  ip: string(name='Ip', description='Nacos实例ip', example='1.2.X.X', position='Query'),
  metadata?: string(name='Metadata', description='节点元数据', example='[int]', position='Body'),
  namespaceId?: string(name='NamespaceId', description='命名空间id', example='9e78a671-4b9b-4dd4-99c1-0****', position='Query'),
  port: int32(name='Port', description='Nacos实例端口', example='12281', position='Query'),
  serviceName: string(name='ServiceName', description='服务名', example='hello_service', position='Query'),
  weight: string(name='Weight', description='权重', example='1', position='Query'),
}

model UpdateNacosInstanceResponseBody = {
  code?: int32(name='Code', description='响应码', example='200'),
  data?: string(name='Data', description='修改结果', example='ok'),
  httpStatusCode?: int32(name='HttpStatusCode', description='http状态码', example='200'),
  message?: string(name='Message', description='响应信息', example='请求成功'),
  requestId?: string(name='RequestId', description='请求id', example='9e78a671-4b9b-4dd4-99c1-0b9da87d3dec'),
  success?: boolean(name='Success', description='成功标志', example='true'),
}

model UpdateNacosInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateNacosInstanceResponseBody(name='body'),
}

async function updateNacosInstance(request: UpdateNacosInstanceRequest): UpdateNacosInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateNacosInstance', 'POST', '/', 'json', true, 'form', request);
}

model UpdateNacosServiceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='system error', example='zh', position='Query'),
  clusterId?: string(name='ClusterId', description='systemError', example='mse-09k1q11****', position='Query'),
  groupName?: string(name='GroupName', description='clusterNotFound', example='DEFAULT_GROUP', position='Query'),
  instanceId?: string(name='InstanceId', description='illegal request:%s', example='mse-cn-st21ri2****', position='Query'),
  namespaceId?: string(name='NamespaceId', description='cluster not found', example='5e3ee449-b5c0-4aee-b857-32c0acbebf26', position='Query'),
  protectThreshold?: string(name='ProtectThreshold', description='mse-100-001', example='0', position='Query'),
  serviceName: string(name='ServiceName', description='mse-200-021', example='com.dingtalk.doc.thumbnails.pdf.ThumbnailService', position='Query'),
}

model UpdateNacosServiceResponseBody = {
  code?: int32(name='Code', description='The protection threshold.', example='1'),
  data?: string(name='Data', description='The ID of the namespace.', example='6'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The name of the group.', example='200'),
  message?: string(name='Message', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='success'),
  requestId?: string(name='RequestId', description='The name of the service.', example='4E9FDCFE-0738-493B-B801-82BDFBCB****'),
  success?: boolean(name='Success', description='The ID of the cluster.

> This operation contains both the InstanceId and ClusterId parameters. You must specify one of them.', example='True'),
}

model UpdateNacosServiceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateNacosServiceResponseBody(name='body'),
}

/**
  * 5e3ee449-b5c0-4aee-b857-32c0acbebf26
  *
 */
async function updateNacosService(request: UpdateNacosServiceRequest): UpdateNacosServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateNacosService', 'POST', '/', 'json', false, 'json', request);
}

model UpdatePluginConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='systemError', example='zh', position='Query'),
  config?: string(name='Config', description='illegal request:%s', example='mse-200-021', position='Query'),
  configLevel?: int32(name='ConfigLevel', description='clusterNotFound', example='0', position='Query'),
  enable?: boolean(name='Enable', description='illegalRequest', example='true', position='Query'),
  gatewayId?: long(name='GatewayId', description='duplicatedClusterAliasName', example='1', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', description='duplicated cluster alias name', example='gw-ubuwqygbq4783gqb2y3f87q****', position='Query'),
  gmtCreate?: string(name='GmtCreate', description='cluster not found', example='1667309705000', position='Query'),
  gmtModified?: string(name='GmtModified', description='mse-100-001', example='1667309705000', position='Query'),
  id?: long(name='Id', description='mse-200-105', example='1', position='Query'),
  pluginId: long(name='PluginId', description='mse-100-007', example='2', position='Query'),
}

model UpdatePluginConfigResponseBody = {
  code?: int32(name='Code', description='code仅仅用来和success同步', example='200'),
  data?: long(name='Data', example='1'),
  dynamicMessage?: string(name='DynamicMessage', description='动态错误信息中的占位符', example='code'),
  errorCode?: string(name='ErrorCode', example='500'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='03A3E2F4-6804-5663-9D5D-2EC47A1*****'),
  success?: boolean(name='Success', example='true'),
}

model UpdatePluginConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdatePluginConfigResponseBody(name='body'),
}

async function updatePluginConfig(request: UpdatePluginConfigRequest): UpdatePluginConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdatePluginConfig', 'POST', '/', 'json', false, 'json', request);
}

model UpdateSSLCertRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  certIdentifier?: string(name='CertIdentifier', description='The ID of the certificate.', example='5951436-cn-hangzhou', position='Query'),
  domainId?: long(name='DomainId', description='The ID of the domain name.', example='210', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-2a99625886d54722be94d92e9a69****', position='Query'),
}

model UpdateSSLCertResponseBody = {
  code?: int32(name='Code', description='The response code returned.', example='200'),
  data?: boolean(name='Data', description='Indicates whether the update is successful.', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='Id of the request', example='CA689BED-08F3-54C2-A206-A0924E2ACA0A'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model UpdateSSLCertResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSSLCertResponseBody(name='body'),
}

async function updateSSLCert(request: UpdateSSLCertRequest): UpdateSSLCertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSSLCert', 'POST', '/', 'json', false, 'json', request);
}

model UpdateServiceSourceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  address?: string(name='Address', example='c9ad2a0717032427e920754e25b49e3b5', position='Query'),
  gatewayId?: long(name='GatewayId', example='429', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-cdd1bb9bfb8341e9805f931a3ba1f4c6', position='Query'),
  id?: long(name='Id', example='63', position='Query'),
  ingressOptionsRequest?: {
    enableIngress?: boolean(name='EnableIngress', example='true'),
    enableStatus?: boolean(name='EnableStatus', example='true'),
    ingressClass?: string(name='IngressClass', example='com.test.xxx'),
    watchNamespace?: string(name='WatchNamespace', example='default'),
  }(name='IngressOptionsRequest', example='zh', shrink='json', position='Query'),
  name?: string(name='Name', example='istio', position='Query'),
  pathList?: [ string ](name='PathList', shrink='json', position='Query'),
  source?: string(name='Source', example='K8S', position='Query'),
  type?: string(name='Type', example='K8S', position='Query'),
}

model UpdateServiceSourceResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: long(name='Data', example='63'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='6AB2B0B6-4A86-54E2-A340-FC47A22EE659'),
  success?: boolean(name='Success', example='true'),
}

model UpdateServiceSourceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateServiceSourceResponseBody(name='body'),
}

async function updateServiceSource(request: UpdateServiceSourceRequest): UpdateServiceSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateServiceSource', 'POST', '/', 'json', false, 'json', request);
}

model UpdateZnodeRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  clusterId: string(name='ClusterId', example='mse-09k1q11****', position='Query'),
  data: string(name='Data', example='data', position='Query'),
  path: string(name='Path', example='/zookeeper', position='Query'),
  requestPars?: string(name='RequestPars', example='{}', position='Query'),
}

model UpdateZnodeResponseBody = {
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateZnodeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateZnodeResponseBody(name='body'),
}

async function updateZnode(request: UpdateZnodeRequest): UpdateZnodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateZnode', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeClusterRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='返回结果显示的语言。取值：zh（默认值）：中文，en：英文', example='zh', position='Query'),
  instanceId: string(name='InstanceId', example='mse-cn-nif1w51wi0c', position='Query'),
  requestPars?: string(name='RequestPars', example='{}', position='Query'),
  upgradeVersion: string(name='UpgradeVersion', example='1.2.1', position='Query'),
}

model UpgradeClusterResponseBody = {
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpCode?: string(name='HttpCode', example='202'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='8D855418-177B-5FF8-A021-75B930AD890A'),
  success?: boolean(name='Success', example='true'),
}

model UpgradeClusterResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeClusterResponseBody(name='body'),
}

async function upgradeCluster(request: UpgradeClusterRequest): UpgradeClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeCluster', 'POST', '/', 'json', false, 'json', request);
}

