/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'mse';
  @version = '2019-05-31';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model GatewayDomain {
  certIdentifier?: string(name='CertIdentifier'),
  gatewayId?: long(name='GatewayId'),
  gatewayName?: string(name='GatewayName'),
  gatewayUniqueId?: string(name='GatewayUniqueId'),
  gmtCreate?: string(name='GmtCreate'),
  gmtModified?: string(name='GmtModified'),
  id?: long(name='Id'),
  mustHttps?: string(name='MustHttps'),
  name?: string(name='Name'),
  protocol?: string(name='Protocol'),
}

model GatewayOption {
  disableHttp2Alpn?: boolean(name='DisableHttp2Alpn'),
  enableHardwareAcceleration?: boolean(name='EnableHardwareAcceleration'),
  enableWaf?: boolean(name='EnableWaf'),
  logConfigDetails?: {
    logEnabled: boolean(name='LogEnabled'),
    logStoreName?: string(name='LogStoreName'),
    projectName?: string(name='ProjectName'),
  }(name='LogConfigDetails'),
  traceDetails?: {
    sample?: long(name='Sample'),
    serviceId?: long(name='ServiceId'),
    servicePort?: string(name='ServicePort'),
    traceEnabled: boolean(name='TraceEnabled'),
    traceType?: string(name='TraceType', example='XTRACE'),
  }(name='TraceDetails'),
}

model GatewayService {
  gatewayTrafficPolicy?: TrafficPolicy(name='GatewayTrafficPolicy'),
  gatewayUniqueId?: string(name='GatewayUniqueId'),
  groupName?: string(name='GroupName'),
  id?: long(name='Id'),
  metaInfo?: string(name='MetaInfo'),
  name?: string(name='Name'),
  namespace?: string(name='Namespace'),
  sourceType?: string(name='SourceType'),
}

model TrafficPolicy {
  loadBalancerSettings?: {
    consistentHashLBConfig?: {
      consistentHashLBType?: string(name='ConsistentHashLBType'),
      httpCookie?: {
        name?: string(name='Name'),
        path?: string(name='Path'),
        TTL?: string(name='TTL', example='0s'),
      }(name='HttpCookie'),
      parameterName?: string(name='ParameterName'),
    }(name='ConsistentHashLBConfig'),
    loadbalancerType?: string(name='LoadbalancerType', example='RANDOM'),
    warmupDuration?: long(name='WarmupDuration'),
  }(name='LoadBalancerSettings'),
  tlsSetting?: {
    caCertContent?: string(name='CaCertContent'),
    certId?: string(name='CertId'),
    sni?: string(name='Sni'),
    tlsMode: string(name='TlsMode', example='SIMPLE'),
  }(name='TlsSetting'),
}

model AddAuthPolicyRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh', position='Query'),
  appId?: string(name='AppId', example='e9clba2xlc@***', position='Query'),
  authRule: string(name='AuthRule', example='[{"all":true,"black":false,"appIds":["dez4qt7weh@***"]}]', position='Query'),
  authType?: int32(name='AuthType', example='0', position='Query'),
  enable: string(name='Enable', example='true', position='Query'),
  k8sNamespace?: string(name='K8sNamespace', example='c19c6c500e1ff4d7abc7***', position='Query'),
  name: string(name='Name', example='test', position='Query'),
  namespace?: string(name='Namespace', example='default', position='Query'),
  protocol: string(name='Protocol', example='SPRING_CLOUD', position='Query'),
  region: string(name='Region', example='cn-hangzhou', position='Query'),
  source: string(name='Source', example='edasmsc', position='Query'),
}

model AddAuthPolicyResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='dc63-465d-8ef5-20dc18af****'),
  success?: boolean(name='Success', example='true'),
}

model AddAuthPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddAuthPolicyResponseBody(name='body'),
}

async function addAuthPolicy(request: AddAuthPolicyRequest): AddAuthPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddAuthPolicy', 'POST', '/', 'json', false, 'json', request);
}

model AddAuthResourceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  authId?: long(name='AuthId', description='The ID of the authorization record.', example='13', position='Query'),
  authResourceHeaderList?: [ 
    {
      headerKey?: string(name='HeaderKey', description='The parameter of the HTTP header.', example='Access-Control-Allow-Origin'),
      headerMethod?: string(name='HeaderMethod', description='The header matching mode.

Valid values:

*   SUFFIX

    <!-- -->

    <!-- -->

    <!-- -->

*   EXIST

    <!-- -->

    <!-- -->

    <!-- -->

*   PREFIX

    <!-- -->

    <!-- -->

    <!-- -->

*   EQUAL

    <!-- -->

    <!-- -->

    <!-- -->

*   EXCLUDE

    <!-- -->

    <!-- -->

    <!-- -->

*   NOT_EQUAL

    <!-- -->

    <!-- -->

    <!-- -->

*   NOT_EXIST

    <!-- -->

    <!-- -->

    <!-- -->

*   REGREX

    <!-- -->

    <!-- -->

    <!-- -->

*   INCLUDE

    <!-- -->

    <!-- -->

    <!-- -->', example='EQUAL'),
      headerValue?: string(name='HeaderValue', description='The parameter value of the HTTP header.', example='*'),
    }
  ](name='AuthResourceHeaderList', description='The authentication resource headers.', shrink='json', position='Query'),
  domainId?: long(name='DomainId', description='The domain ID.', example='128', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-86575c0bc9f04ecfbacb92b8e392****', position='Query'),
  ignoreCase?: boolean(name='IgnoreCase', description='Specifies whether the matching is not case-sensitive. Default value: true.', example='true', position='Query'),
  matchType?: string(name='MatchType', description='The matching type. Valid values:

*   EQUAL
*   PRE
*   ERGULAR', example='exact', position='Query'),
  path?: string(name='Path', description='The path.', example='/abc', position='Query'),
}

model AddAuthResourceResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: long(name='Data', description='The data structure.', example='24'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='403'),
  message?: string(name='Message', description='The error message.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4BBCF560-4DD7-5DBD-B849-CCB135BBBAB7'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model AddAuthResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddAuthResourceResponseBody(name='body'),
}

async function addAuthResource(request: AddAuthResourceRequest): AddAuthResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddAuthResource', 'POST', '/', 'json', false, 'json', request);
}

model AddBlackWhiteListRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  content?: string(name='Content', description='The content of the blacklist.', example='1.117.115.51', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-0fe488252dc44d55a9dd57875193****', position='Query'),
  isWhite?: boolean(name='IsWhite', description='The whitelist. Default value: No.', example='false', position='Query'),
  name?: string(name='Name', description='The name.', example='name', position='Query'),
  note?: string(name='Note', description='The description.', example='this is a note', position='Query'),
  resourceIdJsonList?: string(name='ResourceIdJsonList', description='The resource IDs in the JSON format.', example='[123]', position='Query'),
  resourceType?: string(name='ResourceType', description='The effective scope of the blacklist or whitelist. Valid values:

*   GATEWAY
*   DOMAIN
*   ROUTE', example='GATEWAY', position='Query'),
  status?: string(name='Status', description='The status of the blacklist.

*   on: enabled
*   off: disabled', example='off', position='Query'),
  type?: string(name='Type', description='The type of object in the blacklist or whitelist.', example='IP', position='Query'),
}

model AddBlackWhiteListResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: long(name='Data', description='The ID of the record.', example='2'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='966F6CA7-16D0-50AB-AB02-E140934F90C1'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model AddBlackWhiteListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddBlackWhiteListResponseBody(name='body'),
}

async function addBlackWhiteList(request: AddBlackWhiteListRequest): AddBlackWhiteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddBlackWhiteList', 'POST', '/', 'json', false, 'json', request);
}

model AddGatewayRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  chargeType?: string(name='ChargeType', description='The billing method.

Valid values:

*   PREPAY

    <!-- -->

    :

    <!-- -->

    the subscription billing method

    <!-- -->

*   POSTPAY

    <!-- -->

    :

    <!-- -->

    the pay-as-you-go billing method

    <!-- -->', example='POSTPAY', position='Query'),
  enableHardwareAcceleration?: boolean(name='EnableHardwareAcceleration', description='Specifies whether to activate Tracing Analysis.', example='false', position='Query'),
  enableSls?: boolean(name='EnableSls', description='The tag of the gateway.', example='false', position='Query'),
  enableXtrace?: boolean(name='EnableXtrace', description='The sampling rate of Tracing Analysis. Valid values: \\[1,100].', example='false', position='Query'),
  enterpriseSecurityGroup?: boolean(name='EnterpriseSecurityGroup', description='Specifies whether to enable hardware acceleration.', example='false', position='Query'),
  internetSlbSpec?: string(name='InternetSlbSpec', description='The ID of the secondary vSwitch.', example='slb.s2.small', position='Query'),
  mserVersion?: string(name='MserVersion', description='The MSE instance type. Valid values:

*   mse_pro: ordinary instance.
*   mse_serverless: serverless instance.', example='mse_pro', position='Query'),
  name?: string(name='Name', description='The ID of the region.', example='test-ceshi', position='Query'),
  nlbNetworkType?: string(name='NlbNetworkType', description='The network type of the Network Load Balancer (NLB) instance when the serverless NLB instance is purchased. Valid values:

*   pubnet
*   privatenet
*   privatepubnet', example='pubnet', position='Query'),
  region: string(name='Region', description='The specifications of the internal-facing Server Load Balancer (SLB) instance. Valid values:

*   slb.s1.small
*   slb.s2.small
*   slb.s2.medium
*   slb.s3.small
*   slb.s3.medium
*   slb.s3.large', example='cn-hangzhou', position='Query'),
  replica?: int32(name='Replica', description='The number of nodes.', example='2', position='Query'),
  requestPars?: string(name='RequestPars', description='The extended field.', example='{}', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='rg-acfm34x43l*****', position='Query'),
  slbSpec?: string(name='SlbSpec', description='The specifications of the internal-facing Server Load Balancer (SLB) instance. Valid values:

*   slb.s1.small
*   slb.s2.small
*   slb.s2.medium
*   slb.s3.small
*   slb.s3.medium
*   slb.s3.large', example='slb.s2.small', position='Query'),
  spec?: string(name='Spec', description='The node specifications. Valid values:

*   MSE_GTW\\_16\\_32\\_200\\_c(16C32G)
*   MSE_GTW\\_2\\_4\\_200\\_c(2C4G)
*   MSE_GTW\\_4\\_8\\_200\\_c(4C8G)
*   MSE_GTW\\_8\\_16\\_200\\_c(8C16G)', example='MSE_GTW_2_4_200_c', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The value of the tag.', example='key'),
      value?: string(name='Value', description='The ID of the resource group.', example='value'),
    }
  ](name='Tag', description='The tag object.', position='Query'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the primary vSwitch.', example='vsw-bp1q8th57frl5khj2li43', position='Query'),
  vSwitchId2?: string(name='VSwitchId2', description='Specifies whether to use an advanced security group.', example='vsw-wz9bu6o5vsvitt5mrxo6s', position='Query'),
  vpc: string(name='Vpc', description='The ID of the primary vSwitch.', example='vpc-bp15mncnrtm83uauxd1xb', position='Query'),
  xtraceRatio?: string(name='XtraceRatio', description='Specifies whether to activate Log Service.', example='10', position='Query'),
  zoneInfo?: [ 
    {
      vSwitchId?: string(name='VSwitchId', description='The vSwitch ID.', example='vsw-bp*****'),
      zoneId?: string(name='ZoneId', description='The zone ID.', example='cn-shenzhen-e'),
    }
  ](name='ZoneInfo', description='The details of the zone.', shrink='json', position='Query'),
}

model AddGatewayResponseBody = {
  code?: int32(name='Code', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='200'),
  data?: {
    gatewayUniqueId?: string(name='GatewayUniqueId', description='code', example='gw-5017305290e14cebbrvec4a5****'),
  }(name='Data', description='The unique ID of the gateway.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The message returned.

*   If the request is successful, a success message is returned.
*   If the request fails, an error message is returned.', example='200'),
  message?: string(name='Message', description='The request is successfully processed.', example='The return value.'),
  requestId?: string(name='RequestId', description='The HTTP status code returned.', example='2F46B9E7-67EF-5C8A-BA52-D38D5B32AF2C'),
  success?: boolean(name='Success', description='The returned data.', example='true'),
}

model AddGatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddGatewayResponseBody(name='body'),
}

async function addGateway(request: AddGatewayRequest): AddGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddGateway', 'POST', '/', 'json', false, 'json', request);
}

model AddGatewayAuthRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh', position='Query'),
  authResourceConfig?: string(name='AuthResourceConfig', position='Query'),
  authResourceList?: [ 
    {
      authResourceHeaderList?: [ 
        {
          headerKey?: string(name='HeaderKey', example='x-req'),
          headerMethod?: string(name='HeaderMethod', example='EQUAL'),
          headerValue?: string(name='HeaderValue', example='123'),
        }
      ](name='AuthResourceHeaderList'),
      domainId?: long(name='DomainId', description='The domain ID.', example='1'),
      ignoreCase?: boolean(name='IgnoreCase', example='true'),
      matchType?: string(name='MatchType', example='EQUAL'),
      path?: string(name='Path', description='The request path.', example='/test'),
    }
  ](name='AuthResourceList', description='The information about the resource to be authorized.', shrink='json', position='Query'),
  authResourceMode?: int32(name='AuthResourceMode', example='1', position='Query'),
  clientId?: string(name='ClientId', description='The application ID registered with the OIDC authentication service.', example='23460e2fdd9bf9ad106****', position='Query'),
  clientSecret?: string(name='ClientSecret', description='The application secret registered with the OIDC authentication service.', example='123****', position='Query'),
  cookieDomain?: string(name='CookieDomain', description='The domain name of the cookie. After the authentication is passed, the cookie is sent to the specified domain name to maintain the logon status. For example, if you set `Cookie-domain` to a.example.com, the cookie is sent to the domain name `a.example.com`. If you set `Cookie-domain` to .example.com, the cookie is sent to all subdomains of `example.com`.', example='test.com', position='Query'),
  externalAuthZJSON?: {
    allowRequestHeaders?: [ string ](name='AllowRequestHeaders', description='The header that can be carried in an authentication request.'),
    allowUpstreamHeaders?: [ string ](name='AllowUpstreamHeaders', description='The header that can be retained in an authentication response.'),
    bodyMaxBytes?: int32(name='BodyMaxBytes', example='4000000'),
    isRestrict?: boolean(name='IsRestrict', description='Specifies whether the gateway allows a client request when the authentication server is unavailable. If a connection to the authentication server fails to be established or a 5xx error code is returned, the authentication server is unavailable.', example='true'),
    prefixPath?: string(name='PrefixPath', description='The path of the authentication API provided by the authentication service. The path supports the prefix match method.', example='/auth'),
    serviceId?: long(name='ServiceId', description='The ID of the service.', example='1'),
    timeout?: int32(name='Timeout', description='The timeout period. Unit: seconds.', example='100'),
    tokenKey?: string(name='TokenKey', description='The header that stores a token in an authentication request. In most cases, a token is stored in the Authorization or Cookie header.', example='Authorization'),
    withRequestBody?: boolean(name='WithRequestBody', example='true'),
  }(name='ExternalAuthZJSON', description='The information about the custom authentication service.', shrink='json', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-492af9b04bb4474cae9d645be850e3d7', position='Query'),
  isWhite?: boolean(name='IsWhite', description='Specifies whether to enable the whitelist feature.', example='true', position='Query'),
  issuer?: string(name='Issuer', description='The iss value of JWT claims, which indicates the issuer. You must make sure that the value of this parameter is the same as the iss value in the payload of JWT claims.', example='testing@secure.istio.io', position='Query'),
  jwks?: string(name='Jwks', description='The JWT public key. The JSON format is supported.', example='{"keys":[{"e":"AQAB","kid":"DHFbpoIUqrY8t2zpA2qXfCmr5VO5ZEr4RzHU_-envvQ","kty":"RSA","n":"xAE7eB6qugXyCAG3yhh7pkDkT65pHymX-P7KfIupjf59vsdo91bSP9C8H07pSAGQO1MV_xFj9VswgsCg4R6otmg5PV2He95lZdHtOcU5DXIg_pbhLdKXbi66GlVeK6ABZOUW3WYtnNHD-91gVuoeJT_DwtGGcp4ignkgXfkiEm4sw-4sfb4qdt5oLbyVpmW6x9cfa7vs2WTfURiCrBoUqgBo_-4WTiULmmHSGZHOjzwa8WtrtOQGsAFjIbno85jp6MnGGGZPYZbDAa_b3y5u-YpW7ypZrvD8BgtKVjgtQgZhLAGezMt0ua3DRrWnKqTZ0BJ_EyxOGuHJrLsn00fnMQ"}]}', position='Query'),
  loginUrl?: string(name='LoginUrl', description='The URL that is used to log on to the IDaaS instance.', example='***', position='Query'),
  name?: string(name='Name', description='The name.', example='jwt', position='Query'),
  redirectUrl?: string(name='RedirectUrl', description='The redirect URL.', example='https://test-.com/oauth2/callback', position='Query'),
  scopesList?: [ string ](name='ScopesList', description='The OIDC scope.', shrink='json', position='Query'),
  status?: boolean(name='Status', description='The status.', example='true', position='Query'),
  sub?: string(name='Sub', description='The sub value of JWT claims, which indicates the subject. You must make sure that the value of this parameter is the same as the sub value in the payload of JWT claims. If you do not set this parameter or leave it empty, the default value, which is the value of the Issuer parameter, is used.', example='testing@secure.istio.io', position='Query'),
  tokenName?: string(name='TokenName', description='The name of the parameter that is required to verify a token. By default, a token is prefixed with Bearer and stored in the authorization header. Example: `Authorization: Bearer token`.', example='Authorization', position='Query'),
  tokenNamePrefix?: string(name='TokenNamePrefix', description='The name prefix of the parameter that is required to verify a token. By default, a token is prefixed with Bearer and stored in the authorization header. Example: `Authorization: Bearer token`', example='Bearer', position='Query'),
  tokenPass?: boolean(name='TokenPass', description='Specifies whether to enable pass-through.', example='true', position='Query'),
  tokenPosition?: string(name='TokenPosition', description='The position of the parameter that is required to verify a token. By default, a token is prefixed with Bearer and stored in the authorization header. Example: `Authorization: Bearer token`.', example='HEADER', position='Query'),
  type?: string(name='Type', description='The authentication type. JSON Web Token (JWT) authentication, OpenID Connect (OIDC) authentication, Identity as a Service (IDaaS) authentication, or custom authentication are supported.', example='JWT', position='Query'),
}

model AddGatewayAuthResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: long(name='Data', description='The data returned.', example='3'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4279C00F-A5E1-53C6-A43B-751C1C524D0B'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model AddGatewayAuthResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddGatewayAuthResponseBody(name='body'),
}

async function addGatewayAuth(request: AddGatewayAuthRequest): AddGatewayAuthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddGatewayAuth', 'POST', '/', 'json', false, 'json', request);
}

model AddGatewayAuthConsumerRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  description?: string(name='Description', description='The description of the consumer.', example='description', position='Query'),
  encodeType?: string(name='EncodeType', description='The encryption type. Valid values:

*   RSA
*   OCT', example='RSA', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-c70622ff52fe49beb29bea9a6f52****', position='Query'),
  jwks?: string(name='Jwks', description='The JWT public key. The JSON format is supported.', example='{"keys":[{"e":"AQAB","kid":"DHFbpoIUqrY8t2zpA2qXfCmr5VO5ZEr4RzHU_-envvQ","kty":"RSA","n":"xAE7eB6qugXyCAG3yhh7pkDkT65pHymX-P7KfIupjf59vsdo91bSP9C8H07pSAGQO1MV_xFj9VswgsCg4R6otmg5PV2He95lZdHtOcU5DXIg_pbhLdKXbi66GlVeK6ABZOUW3WYtnNHD-91gVuoeJT_DwtGGcp4ignkgXfkiEm4sw-4sfb4qdt5oLbyVpmW6x9cfa7vs2WTfURiCrBoUqgBo_-4WTiULmmHSGZHOjzwa8WtrtOQGsAFjIbno85jp6MnGGGZPYZbDAa_b3y5u-YpW7ypZrvD8BgtKVjgtQgZhLAGezMt0ua3DRrWnKqTZ0BJ_EyxOGuHJrLsn00fnMQ"}]}', position='Query'),
  keyName?: string(name='KeyName', description='The name of the key used for JWT-based identity authentication.', example='iss', position='Query'),
  keyValue?: string(name='KeyValue', description='The value of the key used for JWT-based identity authentication.', example='abcd', position='Query'),
  name: string(name='Name', description='The name of the consumer.', example='name', position='Query'),
  tokenName?: string(name='TokenName', description='The names of the parameters that are required to verify each token. By default, each token is prefixed with Bearer and stored in the Authorization header, such as `Authorization: Bearer <Content of a token>`.', example='Authorization', position='Query'),
  tokenPass?: boolean(name='TokenPass', description='Specifies whether to enable pass-through.', example='true', position='Query'),
  tokenPosition?: string(name='TokenPosition', description='The positions of the parameters that are required to verify each token. By default, each token is prefixed with Bearer and stored in the Authorization header, such as `Authorization: Bearer <Content of a token>`.', example='HEADER', position='Query'),
  tokenPrefix?: string(name='TokenPrefix', description='The prefixes of the parameters that are required to verify each token. By default, each token is prefixed with Bearer and stored in the Authorization header, such as `Authorization: Bearer <Content of a token>`.', example='Bearer', position='Query'),
  type: string(name='Type', description='The authentication type. Valid values:

*   JWT', example='JWT', position='Query'),
}

model AddGatewayAuthConsumerResponseBody = {
  code?: int32(name='Code', description='The status code. A value of 200 is returned if the request is successful.', example='200'),
  data?: long(name='Data', description='The ID of the consumer.', example='2'),
  dynamicCode?: string(name='DynamicCode', description='The dynamic part in the error message.', example='code'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the `%s` variable in the `ErrMessage` parameter.

>  If the return value of the `ErrMessage` parameter is `The Value of Input Parameter %s is not valid` and the return value of the `DynamicMessage` parameter is `DtsJobId`, the specified `DtsJobId` parameter is invalid.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code that is returned.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='69AD2AA7-DB47-449B-941B-B14409DF****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='True'),
}

model AddGatewayAuthConsumerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddGatewayAuthConsumerResponseBody(name='body'),
}

async function addGatewayAuthConsumer(request: AddGatewayAuthConsumerRequest): AddGatewayAuthConsumerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddGatewayAuthConsumer', 'POST', '/', 'json', false, 'json', request);
}

model AddGatewayDomainRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  certIdentifier?: string(name='CertIdentifier', description='The ID of the certificate.', example='6828169-cn-hangzhou', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-86575c0bc9f04ecfbacb92b8e392****', position='Query'),
  http2?: string(name='Http2', description='Specifies whether to enable `HTTP/2`.

*   `open`: enables `HTTP/2`
*   `close`: disables `HTTP/2`
*   `globalConfig`: uses global configurations', example='close', position='Query'),
  mustHttps?: boolean(name='MustHttps', description='Specifies whether to enable HTTPS.', example='true', position='Query'),
  name?: string(name='Name', description='The domain name.', example='test.com', position='Query'),
  protocol?: string(name='Protocol', description='The type of the protocol. Valid values:

*   `HTTP`
*   `HTTPS`', example='HTTP', position='Query'),
  tlsMax?: string(name='TlsMax', description='The maximum version of Transport Layer Security (TLS).', example='TLS 1.3', position='Query'),
  tlsMin?: string(name='TlsMin', description='The minimum version of TLS.', example='TLS 1.0', position='Query'),
}

model AddGatewayDomainResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: long(name='Data', description='The returned data.', example='100'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='16BA802F-B848-55DF-9F57-CD71B7272D1F'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model AddGatewayDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddGatewayDomainResponseBody(name='body'),
}

async function addGatewayDomain(request: AddGatewayDomainRequest): AddGatewayDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddGatewayDomain', 'POST', '/', 'json', false, 'json', request);
}

model AddGatewayRouteRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  description?: string(name='Description', example='a route for xxx', position='Query'),
  destinationType?: string(name='DestinationType', description='The type of the destination service. Valid values:

*   Single
*   Multiple
*   VersionOriented
*   Mock
*   Redirect', example='Multiple', position='Query'),
  directResponseJSON?: {
    body?: string(name='Body', description='The mock return value.', example='hello'),
    code?: long(name='Code', description='The mock return code.', example='403'),
  }(name='DirectResponseJSON', description='The mock response configuration.', shrink='json', position='Query'),
  domainId?: long(name='DomainId', description='The domain ID.', example='20', position='Query'),
  domainIdListJSON?: string(name='DomainIdListJSON', description='The domain IDs.', example='[0,94]', position='Query'),
  enableWaf?: boolean(name='EnableWaf', description='Specifies whether to activate Web Application Firewall (WAF).', example='true', position='Query'),
  fallback?: boolean(name='Fallback', description='Specifies whether to enable the Fallback service.', example='true', position='Query'),
  fallbackServices?: [ 
    {
      agreementType?: string(name='AgreementType', description='The type of the protocol.', example='DUBBO'),
      groupName?: string(name='GroupName', description='The name of the group to which the service belongs.', example='test'),
      name?: string(name='Name', description='The name.', example='user'),
      namespace?: string(name='Namespace', description='The namespace to which the service belongs.', example='default'),
      percent?: int32(name='Percent', description='The weight in the form of a percentage value.', example='80'),
      serviceId?: long(name='ServiceId', description='The ID of the service.', example='353'),
      servicePort?: int32(name='ServicePort', description='The service port number.', example='443'),
      sourceType?: string(name='SourceType', description='The source type.', example='MSE'),
      version?: string(name='Version', description='The version of the service.', example='v1'),
    }
  ](name='FallbackServices', description='The information about the Fallback service.', shrink='json', position='Query'),
  gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='526', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-492af9b04bb4474cae9d645be8*****', position='Query'),
  name?: string(name='Name', description='The name of the route.', example='test', position='Query'),
  policies?: string(name='Policies', description='The routing policy in a JSON string.', example='{"CORS":"{\\"allowMethods\\":\\"GET,POST,PUT,DELETE,HEAD,OPTIONS,PATCH\\",\\"allowHeaders\\":\\"*\\",\\"exposeHeaders\\":\\"*\\",\\"unitNum\\":12,\\"allowCredentials\\":true,\\"status\\":\\"off\\",\\"allowOrigins\\":\\"*\\",\\"timeUnit\\":\\"h\\"}","Timeout":"{\\"unitNum\\":10,\\"timeUnit\\":\\"s\\",\\"status\\":\\"off\\"}","Retry":"{\\"attempts\\":2,\\"retryOn\\":[\\"5xx\\"],\\"status\\":\\"off\\"}","HTTPRewrite":"{\\"pathType\\":\\"EQUAL\\",\\"path\\":\\"/o\\",\\"status\\":\\"off\\"}","Waf":"{\\"enabled\\":false}","HeaderOp":"{\\"status\\":\\"off\\",\\"headerOpItems\\":[{\\"directionType\\":\\"Request\\",\\"opType\\":\\"Add\\",\\"key\\":\\"kkk\\",\\"value\\":\\"ll\\"}]}"}', position='Query'),
  predicates?: {
    headerPredicates?: [ 
      {
        key?: string(name='Key', description='The key of the request header.', example='debug'),
        type?: string(name='Type', description='The matching type.', example='PRE'),
        value?: string(name='Value', description='The value of the request header.', example='test'),
      }
    ](name='HeaderPredicates', description='The information about header matching.'),
    methodPredicates?: [ string ](name='MethodPredicates', description='The information about method matching.'),
    pathPredicates?: {
      ignoreCase?: boolean(name='IgnoreCase', description='Specifies whether to ignore case sensitivity.', example='true'),
      path?: string(name='Path', description='The path.', example='/test'),
      type?: string(name='Type', description='The route matching type. Valid values:

*   PRE: prefix matching
*   EQUAL: exact matching
*   ERGULAR: regular expression matching', example='PRE'),
    }(name='PathPredicates', description='The information about route matching.'),
    queryPredicates?: [ 
      {
        key?: string(name='Key', description='The name of the parameter.', example='userid'),
        type?: string(name='Type', description='The matching type.', example='PRE'),
        value?: string(name='Value', description='The value of the parameter.', example='test'),
      }
    ](name='QueryPredicates', description='The information about URL parameter matching.'),
  }(name='Predicates', description='The matching rule.', shrink='json', position='Query'),
  redirectJSON?: {
    code?: int32(name='Code', description='The status code returned.', example='302'),
    host?: string(name='Host', description='The hostname to be redirected to.', example='test.com'),
    path?: string(name='Path', description='The path to be redirected to.', example='/test'),
  }(name='RedirectJSON', description='The configuration of the redirection.', shrink='json', position='Query'),
  routeOrder?: int32(name='RouteOrder', description='The sequence number of the route. (A small value indicates a high priority.)', example='1', position='Query'),
  routeType?: string(name='RouteType', description='The route type. Valid values:

Op: Manage routes.', example='Op', position='Query'),
  services?: [ 
    {
      agreementType?: string(name='AgreementType', description='The type of the protocol.', example='DUBBO'),
      groupName?: string(name='GroupName', description='The name of the group to which the service belongs.', example='test'),
      httpDubboTranscoder?: {
        dubboServiceGroup?: string(name='DubboServiceGroup', description='The name of the service group.', example='None'),
        dubboServiceName?: string(name='DubboServiceName', description='The name of the Dubbo service.', example='org.apache.dubbo.samples.basic.api.DemoService'),
        dubboServiceVersion?: string(name='DubboServiceVersion', description='The version of the Dubbo service.', example='0.0.0'),
        mothedMapList?: [ 
          {
            dubboMothedName?: string(name='DubboMothedName', description='The method name of the Dubbo service.', example='sayHello'),
            httpMothed?: string(name='HttpMothed', description='The HTTP method.

> Valid values:

*   ALL_GET

*   ALL_POST

*   ALL_PUT

*   ALL_DELETE

*   ALL_PATCH', example='ALL_GET'),
            mothedpath?: string(name='Mothedpath', description='The path used for method matching.', example='/mytestzbk/sayhello'),
            paramMapsList?: [ 
              {
                extractKey?: string(name='ExtractKey', description='The key extracted from the input parameter.', example='name'),
                extractKeySpec?: string(name='ExtractKeySpec', description='The position of the input parameter.

> Valid values:

*   `ALL_QUERY_PARAMETER`: request parameter

*   `ALL_HEADER`: request header
*   `ALL_PATH`: request path
*   `ALL_BODY`: request body', example='ALL_QUERY_PARAMETER'),
                mappingType?: string(name='MappingType', description='The type of the backend service parameter.', example='java.lang.String'),
              }
            ](name='ParamMapsList', description='The information about parameter mappings.'),
            passThroughAllHeaders?: string(name='PassThroughAllHeaders', description='The pass-through type of the header.

> Valid values:

*   PASS_ALL: All headers are passed through.

*   PASS_NOT: All headers are not passed through.

*   PASS_ASSIGN: Specified headers are passed through.', example='PASS_NOT'),
            passThroughList?: [ string ](name='PassThroughList', description='The list of headers to be passed through.'),
          }
        ](name='MothedMapList', description='The forwarding rules of the Dubbo service.'),
      }(name='HttpDubboTranscoder', description='The transcoder of the Dubbo protocol.'),
      name?: string(name='Name', description='The name.', example='user'),
      namespace?: string(name='Namespace', description='The namespace to which the service belongs.', example='default'),
      percent?: int32(name='Percent', description='The weight in the form of a percentage value.', example='80'),
      serviceId?: long(name='ServiceId', description='The ID of the service.', example='353'),
      servicePort?: int32(name='ServicePort', description='The service port number.', example='443'),
      sourceType?: string(name='SourceType', description='The source type.', example='MSE'),
      version?: string(name='Version', description='The version of the service.', example='v1'),
    }
  ](name='Services', description='The list of services.', shrink='json', position='Query'),
}

model AddGatewayRouteResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: long(name='Data', description='The ID of the created route.', example='555'),
  errorCode?: string(name='ErrorCode', description='The error code that is returned.

*   InvalidParameter: The parameter is invalid. For example, the parameter is incomplete or the parameter format is invalid.
*   IllegalRequest: The request is invalid. Unauthorized access to data initiated by parameters is identified.
*   NoPermission: You are not authorized to perform this operation.
*   NotFound: The resource does not exist and error 404 is returned.
*   InternalError: An internal error occurred.', example='InvalidParameter'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='03A3E2F4-6804-5663-9D5D-2EC47A1*****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model AddGatewayRouteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddGatewayRouteResponseBody(name='body'),
}

async function addGatewayRoute(request: AddGatewayRouteRequest): AddGatewayRouteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddGatewayRoute', 'POST', '/', 'json', false, 'json', request);
}

model AddGatewayServiceVersionRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-913a49bab6c5461187a3305fb8da****', position='Query'),
  serviceId?: long(name='ServiceId', description='The ID of the service.', example='33', position='Query'),
  serviceVersion?: string(name='ServiceVersion', description='The version of the service.', example='{\\"name\\":\\"v1\\",\\"labels\\":[{\\"key\\":\\"version\\",\\"value\\":\\"v1\\"}]}', position='Query'),
}

model AddGatewayServiceVersionResponseBody = {
  code?: int32(name='Code', description='The status code returned. The value 200 indicates that the request is successfully processed.', example='200'),
  data?: long(name='Data', description='The ID of the gateway service.', example='330'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='403'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BA4046B6-CFC6-583C-B608-DD75011A590F'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model AddGatewayServiceVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddGatewayServiceVersionResponseBody(name='body'),
}

async function addGatewayServiceVersion(request: AddGatewayServiceVersionRequest): AddGatewayServiceVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddGatewayServiceVersion', 'POST', '/', 'json', false, 'json', request);
}

model AddGatewaySlbRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-9cdcf8e4f58144059e73ff4c5ef9****', position='Query'),
  httpPort?: int32(name='HttpPort', description='The HTTP port number (virtual service group).', example='80', position='Query'),
  httpsPort?: int32(name='HttpsPort', description='The HTTPS port number (virtual service group).', example='443', position='Query'),
  httpsVServerGroupId?: string(name='HttpsVServerGroupId', description='The ID of the HTTPS virtual service group.', example='353', position='Query'),
  serviceWeight?: int32(name='ServiceWeight', description='The service weight.', example='80', position='Query'),
  slbId: string(name='SlbId', description='The ID of the SLB instance.', example='lb-bp18t6jjskwxh6wy1****', position='Query'),
  type?: string(name='Type', description='The type of the service source. Valid values:

*   PUB_NET: Internet
*   PRIVATE_NET: VPC', example='PUB_NET', position='Query'),
  vServerGroupId?: string(name='VServerGroupId', description='The ID of the HTTP virtual service group.', example='353', position='Query'),
  vServiceList?: [ 
    {
      port?: int32(name='Port', description='The port number.', example='443'),
      protocol?: string(name='Protocol', description='The protocol type. Valid values:

*   HTTP
*   HTTPS', example='HTTPS'),
      vServerGroupId?: string(name='VServerGroupId', description='The ID of the virtual server group.', example='rsp-bp1j**t0fyl**'),
      vServerGroupName?: string(name='VServerGroupName', description='The name of the virtual server group.', example='k8s/31**0/***/istio-system/clusterid'),
    }
  ](name='VServiceList', description='The SLB monitoring information.', shrink='json', position='Query'),
}

model AddGatewaySlbResponseBody = {
  code?: int32(name='Code', description='The response code returned.', example='200'),
  data?: string(name='Data', description='The data returned.', example='lb-uf6dqr4ondqi5w3df7hdf'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.

*   If the request is successful, a success message is returned.
*   If the request fails, an error message is returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model AddGatewaySlbResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddGatewaySlbResponseBody(name='body'),
}

async function addGatewaySlb(request: AddGatewaySlbRequest): AddGatewaySlbResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddGatewaySlb', 'POST', '/', 'json', false, 'json', request);
}

model AddMigrationTaskRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  clusterType?: string(name='ClusterType', description='The type of the instance. Valid values:

*   Nacos-Ans
*   ZooKeeper
*   Eureka', example='Nacos-Ans', position='Query'),
  originInstanceAddress?: string(name='OriginInstanceAddress', description='The endpoint of the source instance node.', example='192.168.1.1:8848', position='Query'),
  originInstanceName?: string(name='OriginInstanceName', description='The name of the source instance.', example='Source instance', position='Query'),
  originInstanceNamespace?: string(name='OriginInstanceNamespace', description='The list of namespaces. This parameter is optional if you want to migrate applications from a Nacos instance.', example='namesapceId1,namesapceId2', position='Query'),
  projectDesc?: string(name='ProjectDesc', description='The description.', example='This is a description.', position='Query'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}', position='Query'),
  targetClusterName?: string(name='TargetClusterName', description='The name of the destination instance.', example='Destination instance', position='Query'),
  targetClusterUrl?: string(name='TargetClusterUrl', description='The URL of the destination instance.', example='mse-66*****-nacos-ans.mse.aliyuncs.com:8848', position='Query'),
  targetInstanceId?: string(name='TargetInstanceId', description='The ID of the destination instance.', example='mse-cn-ud82*****', position='Query'),
}

model AddMigrationTaskResponseBody = {
  data?: {
    clusterType?: string(name='ClusterType', description='The type of the instance. Valid values:

*   Nacos-Ans
*   ZooKeeper
*   Eureka', example='Nacos-Ans'),
    id?: string(name='Id', description='The ID of the task.', example='12'),
    originInstanceAddress?: string(name='OriginInstanceAddress', description='The endpoint of the source instance node.', example='192.168.1.1:8848'),
    originInstanceName?: string(name='OriginInstanceName', description='The name of the source instance.', example='Source instance'),
    originInstanceNamespace?: string(name='OriginInstanceNamespace', description='The list of namespaces. This parameter is optional if applications are migrated from a Nacos instance.', example='namesapceId1,namesapceId2'),
    projectDesc?: string(name='ProjectDesc', description='The description.', example='testsdfsdfsd'),
    targetClusterName?: string(name='TargetClusterName', description='The name of the destination instance.', example='Destination instance'),
    targetClusterUrl?: string(name='TargetClusterUrl', description='The URL of the destination instance.', example='mse-94d****-nacos-ans.mse.aliyuncs.com:8848'),
    targetInstanceId?: string(name='TargetInstanceId', description='The ID of the destination instance.', example='mse-cn-7pp2w*****'),
    userId?: string(name='UserId', description='The ID of the user.', example='183876217*****'),
  }(name='Data', description='The data structure.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  message?: string(name='Message', description='The message returned.', example='The request is processed successfully.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7466566F-F30F-4A29-965D-3E0AF21D****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model AddMigrationTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddMigrationTaskResponseBody(name='body'),
}

async function addMigrationTask(request: AddMigrationTaskRequest): AddMigrationTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddMigrationTask', 'POST', '/', 'json', false, 'json', request);
}

model AddMockRuleRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  consumerAppIds: string(name='ConsumerAppIds', description='The ID of the custom application.', example='[{\\"appName\\":\\"provide\\",\\"appId\\":\\"bst8l6o735@f6d8aaf6e56e67d\\"}]', position='Query'),
  dubboMockItems: string(name='DubboMockItems', description='The items in the recycle bin.', example='[]', position='Query'),
  enable?: boolean(name='Enable', description='Specifies whether to enable the alert rule. Valid values:

*   `true`: enables the alert rule.
*   `false`: disables the alert rule.', example='true', position='Query'),
  extraJson: string(name='ExtraJson', description='The description.', example='{}', position='Query'),
  mockType?: long(name='MockType', description='The response time (RT) threshold of slow calls. Valid values:

*   \\- 15: 15 ms
*   \\- 30: 30 ms
*   \\- 60: 60 ms
*   \\- 120: 120 ms', example='1', position='Query'),
  name: string(name='Name', description='The name of the rule.', example='agent-auto-test-sc', position='Query'),
  providerAppId?: string(name='ProviderAppId', description='The ID of the service provider application.', example='dcqtkuhnc4@66e5235415****', position='Query'),
  providerAppName?: string(name='ProviderAppName', description='The name of the service provider application.', example='demo-cartservice', position='Query'),
  region: string(name='Region', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  scMockItems: string(name='ScMockItems', description='The input parameters. The JSON format is supported.', example='[]', position='Query'),
  source: string(name='Source', description='The rule source.', example='edasmsc', position='Query'),
}

model AddMockRuleResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: {
    accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account.', example='178432728867xxxx'),
    consumerAppId?: string(name='ConsumerAppId', description='The ID of the consumer application.', example='hkhon1po62@a000601b265xxxx'),
    consumerAppName?: string(name='ConsumerAppName', description='The name of the consumer application.', example='demo-xxxx'),
    enable?: boolean(name='Enable', description='Indicates whether the mock rule is enabled.

*   `true`: enabled
*   `false`: disabled', example='true'),
    extraJson?: string(name='ExtraJson', description='The description.', example='desc'),
    id?: long(name='Id', description='The ID of the rule.', example='275'),
    mockType?: long(name='MockType', description='The mock type. Valid values:

*   \\- `[unk]0[unk]`: desktop client
*   \\- `[unk]1[unk]`: mobile client', example='0'),
    name?: string(name='Name', description='The name.', example='mse-bc1a29b0-160230875****-reg-center-0-1'),
    namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='cn-shanghai'),
    providerAppId?: string(name='ProviderAppId', description='The ID of the service provider application.', example='hkhon1po62@a000601b265xxxx'),
    providerAppName?: string(name='ProviderAppName', description='The name of the service provider application.', example='demo-xxxx'),
    region?: string(name='Region', description='The region ID.', example='cn-shanghai'),
    scMockItemJson?: string(name='ScMockItemJson', description='The HTTP mock rule.', example='[{"oper":"return+json","Path":"/mock","Value":"{\\n \\"date\\": \\"2021-09-10T07:45:12.357+0000\\",\\n \\"name\\": \\"name\\",\\n \\"id\\": \\"1\\"\\n}","Method":"GET","Condition":"AND","Timeout":1,"ArgumentMockItems":[{"type":"param","name":"id","value":"1","cond":"==","operator":"rawvalue"},{"type":"param","name":"name","value":"aliyun","cond":"==","operator":"rawvalue"}]}]'),
    source?: string(name='Source', description='The service source.', example='edasmsc'),
  }(name='Data', description='The details of the data.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model AddMockRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddMockRuleResponseBody(name='body'),
}

async function addMockRule(request: AddMockRuleRequest): AddMockRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddMockRule', 'POST', '/', 'json', false, 'json', request);
}

model AddSSLCertRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  certIdentifier?: string(name='CertIdentifier', description='The ID of the certificate.', example='5213641-cn-hangzhou', position='Query'),
  domainId?: long(name='DomainId', description='The domain ID.', example='0', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-c70622ff52fe49beb29bea9a6f52****', position='Query'),
}

model AddSSLCertResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: boolean(name='Data', description='Indicates whether the association is successful.', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E1CC74F0-5BDE-5220-A031-5CA622D80723'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model AddSSLCertResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddSSLCertResponseBody(name='body'),
}

async function addSSLCert(request: AddSSLCertRequest): AddSSLCertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddSSLCert', 'POST', '/', 'json', false, 'json', request);
}

model AddSecurityGroupRuleRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  description?: string(name='Description', description='The description.', example='description', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', description='The ID of the gateway.', example='gw-c9bc5afd61014165bd58f621b491****', position='Query'),
  portRange: string(name='PortRange', description='The range of port numbers.', example='1/65535', position='Query'),
  securityGroupId: string(name='SecurityGroupId', description='The ID of the security group.', example='sg-wz929kxhcdpw9z8idqd8', position='Query'),
}

model AddSecurityGroupRuleResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: string(name='Data', description='The returned data.', example='12'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D0DB055C-51F2-5BB2-82A6-CD8A3C6EE6BA'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model AddSecurityGroupRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddSecurityGroupRuleResponseBody(name='body'),
}

async function addSecurityGroupRule(request: AddSecurityGroupRuleRequest): AddSecurityGroupRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddSecurityGroupRule', 'POST', '/', 'json', false, 'json', request);
}

model AddServiceSourceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh-CN (default): Chinese
*   en-US: English
*   ja: Japanese', example='zh-CN', position='Query'),
  address?: string(name='Address', description='Specifies whether to monitor Ingress classes.', example='c9ad2a0717032427e920754e25b49e3b5', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='Specifies whether to update the Ingress status.', example='gw-c70622ff52fe49beb29bea9a6f52****', position='Query'),
  groupList?: [ string ](name='GroupList', description='The data structure.', shrink='json', position='Query'),
  ingressOptionsRequest?: {
    enableIngress?: boolean(name='EnableIngress', description='The group to which the service belongs.', example='true'),
    enableStatus?: boolean(name='EnableStatus', description='The language of the response. Valid values:

*   zh-CN: Chinese. This is the default value.
*   en-US: English.
*   ja: Japanese.', example='true'),
    ingressClass?: string(name='IngressClass', description='An array of service root paths.', example='com.test.xxx'),
    watchNamespace?: string(name='WatchNamespace', description='The root path of the service.', example='default'),
  }(name='IngressOptionsRequest', description='The list of service groups.', shrink='json', position='Query'),
  name?: string(name='Name', description='The namespace whose resources you want to monitor.', example='istio', position='Query'),
  pathList?: [ string ](name='PathList', description='The HTTP status code returned.', shrink='json', position='Query'),
  source?: string(name='Source', description='The service source.

*   K8s: ACK cluster
*   NACOS: MSE Nacos instance', example='K8s,MSE', position='Query'),
  toAuthorizeSecurityGroups?: [ 
    {
      description?: string(name='Description', description='The description of the authorization record.', example='rule for xxx'),
      portRange?: string(name='PortRange', description='The authorized port range of the security group. You can select multiple port ranges. Separate each port range with a comma (,).', example='8080/8080,9000/10000'),
      securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group.', example='sg-bp1acepclex0vmi1****'),
    }
  ](name='ToAuthorizeSecurityGroups', description='The list of security groups to be authorized. You can specify security groups to allow backend services to access data sources that you create.', shrink='json', position='Query'),
  type?: string(name='Type', description='The type of the service source.

*   K8s: Container Service for Kubernetes (ACK) cluster
*   NACOS: Nacos instance', example='The Ingress configuration.', position='Query'),
}

model AddServiceSourceResponseBody = {
  code?: int32(name='Code', description='duplicatedClusterAliasName', example='200'),
  data?: long(name='Data', description='mse-100-007', example='63'),
  httpStatusCode?: int32(name='HttpStatusCode', description='code', example='200'),
  message?: string(name='Message', description='mse-200-105', example='You are not authorized to perform this operation. Action: mse:AddServiceSource, Resource: acs:mse:cn-hangzhou:1105471854403716:instance/gw-082c943a8c304e48a37a7a29a5ddeda7'),
  requestId?: string(name='RequestId', description='The response data.', example='D0DB055C-51F2-5BB2-82A6-CD8A3C6EE6BA'),
  success?: boolean(name='Success', description='duplicated cluster alias name', example='true'),
}

model AddServiceSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddServiceSourceResponseBody(name='body'),
}

async function addServiceSource(request: AddServiceSourceRequest): AddServiceSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddServiceSource', 'POST', '/', 'json', false, 'json', request);
}

model ApplyGatewayRouteRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-1a4ab101d5924b6f92c5ec98a841761f', position='Query'),
  routeId?: string(name='RouteId', description='The ID of the route.', example='950', position='Query'),
}

model ApplyGatewayRouteResponseBody = {
  code?: int32(name='Code', description='The response code returned.', example='200'),
  data?: boolean(name='Data', description='The data of the node.', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1DB1AB36-8395-540E-AACC-7571D6B2057A'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model ApplyGatewayRouteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApplyGatewayRouteResponseBody(name='body'),
}

async function applyGatewayRoute(request: ApplyGatewayRouteRequest): ApplyGatewayRouteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplyGatewayRoute', 'POST', '/', 'json', false, 'json', request);
}

model ApplyTagPoliciesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  appId: string(name='AppId', description='The ID of the application.', example='h5pohqu3gd@xxx', deprecated='true', position='Query'),
  appName?: string(name='AppName', description='The name of the application.', example='example-app', maxLength=64, position='Query'),
  enable?: boolean(name='Enable', description='Specifies whether to enable the routing rule.', example='true', position='Query'),
  namespace?: string(name='Namespace', description='The Microservices Engine (MSE) namespace to which the application belongs.', example='default', maxLength=64, position='Query'),
  namespaceId?: string(name='NamespaceId', description='Optional. The ID of the namespace.', example='12233****', position='Query'),
  region?: string(name='Region', description='The region ID.', example='cn-hangzhou', position='Query'),
  rules?: map[string]RulesValue(name='Rules', description='The details of the routing rule.', example='{ "blue": { # Tag key. "rate": 20, # Rate. A value of 20 indicates that 20% of the traffic is routed to the node identified by the tag. "name": "luoye-route-test", # Routing rule name. "carryData": false, # Specifies whether to enable pass-through. This parameter is applicable to end-to-end canary release. "rules": { # Rule information. "dubbo": \\[{ # Dubbo rule. The system also supports Spring Cloud and Istio rule. "serviceName": "com.taobao.hsf.common.DemoService", # Service name (operation name). "group": "", # Group name. "version": "", # Service version. "methodName": "sayHello", # Method name. "condition": "AND", # Logical operator used by the following items. Valid values: AND and OR. "argumentItems": \\[{ # Array of rule details. "index": 0, # Index field. "expr": "", # Expression. Its details is described below. "operator": "rawvalue", # The comparison mode. A value of rawvalue indicates direct comparison. A value of mode indicates the modulo operation. A value of list indicates using a whitelist. "value": "jim", # Base value. The value obtained by the expression will be compared with this value. If operator is set to list, separate the items specified for this parameter with commas (,). Example: 1,2,3. "cond": "==" # Comparison operator. Valid values: >=, <=, >, <, and ==. }] }] } }, "\\_base": { # Another tag key. "rate": 80 # Rate. A value of 20 indicates that 20% of the traffic is routed to the node identified by the tag. } }', shrink='json', position='Query'),
}

model ApplyTagPoliciesResponseBody = {
  data?: [ 
    {
      carryData?: boolean(name='CarryData', description='Indicates whether the field is the primary key.', example='true'),
      enable?: boolean(name='Enable', description='Indicates whether the rule is enabled. Valid values:

*   `true`: The rule is enabled.
*   `false`: The rule is disabled.', example='true'),
      id?: long(name='Id', description='The ID of the primary key.', example='12'),
      instanceNum?: int32(name='InstanceNum', description='The number of instances.', example='1'),
      name?: string(name='Name', description='The policy name.', example='test'),
      rate?: int32(name='Rate', description='The rate.', example='10'),
      remove?: boolean(name='Remove', description='Indicates whether the routing rule was deleted.'),
      rules?: string(name='Rules', description='The details of the routing rule.', example='{\\"_base\\": {\\"rate\\": 100, \\"remove\\": true}, \\"blue\\": {\\"rate\\": 0}}'),
      status?: int32(name='Status', description='The status.', example='1'),
      tag?: string(name='Tag', description='The tag.', example='gray'),
    }
  ](name='Data', description='The details of the data.'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model ApplyTagPoliciesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApplyTagPoliciesResponseBody(name='body'),
}

async function applyTagPolicies(request: ApplyTagPoliciesRequest): ApplyTagPoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplyTagPolicies', 'POST', '/', 'json', false, 'json', request);
}

model BindSentinelBlockFallbackDefinitionRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh', position='Query'),
  appName: string(name='AppName', example='spring-cloud-a', position='Query'),
  fallbackId: long(name='FallbackId', example='21', position='Query'),
  namespace: string(name='Namespace', example='prod', position='Query'),
  resource: string(name='Resource', example='/a', position='Query'),
  targetType: string(name='TargetType', example='1', position='Query'),
}

model BindSentinelBlockFallbackDefinitionResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='4E9FDCFE-0738-493B-B801-82BDFBCB****'),
  success?: string(name='Success', example='true'),
}

model BindSentinelBlockFallbackDefinitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BindSentinelBlockFallbackDefinitionResponseBody(name='body'),
}

async function bindSentinelBlockFallbackDefinition(request: BindSentinelBlockFallbackDefinitionRequest): BindSentinelBlockFallbackDefinitionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindSentinelBlockFallbackDefinition', 'POST', '/', 'json', false, 'json', request);
}

model CloneNacosConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  ids: string(name='Ids', description='The data structure.', example='253661,253662', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the destination namespace.', example='mse_prepaid_public_cn-i7m25igg403', position='Query'),
  originNamespaceId?: string(name='OriginNamespaceId', description='The policy used when a write conflict occurs.

*   ABORT
*   SKIP
*   OVERWRITE', example='be821963-6d48-4ea5-9910-6057d****', position='Query'),
  policy: string(name='Policy', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='OVERWRITE', position='Query'),
  targetNamespaceId?: string(name='TargetNamespaceId', description='The IDs of configurations.', example='08be4b5d-2d1c-4e6e-aa85-83b9****', position='Query'),
}

model CloneNacosConfigResponseBody = {
  code?: int32(name='Code', description='The dynamic part in the error message. This parameter is used to replace the \\*\\*%s\\*\\* variable in the **ErrMessage** parameter.

>  If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='200'),
  data?: {
    failData?: [ 
      {
        dataId?: string(name='DataId', description='mse-200-105', example='test2.yaml'),
        group?: string(name='Group', description='duplicatedClusterAliasName', example='test'),
      }
    ](name='FailData', description='The ID of the data.'),
    skipCount?: int32(name='SkipCount', description='The data structure.', example='1'),
    skipData?: [ 
      {
        dataId?: string(name='DataId', description='The details of the failed configurations.', example='test.yaml'),
        group?: string(name='Group', description='The data structure.', example='public'),
      }
    ](name='SkipData', description='The ID of the data.'),
    succCount?: int32(name='SuccCount', description='The details of the skipped configurations.', example='100'),
  }(name='Data', description='The number of skipped operations.'),
  dynamicMessage?: string(name='DynamicMessage', description='The number of successful operations.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The message returned.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='200'),
  message?: string(name='Message', description='The details of the data.', example='Clone Completed Successfully'),
  requestId?: string(name='RequestId', description='The error code returned if the request failed.', example='6678DBA9-5600-5948-ACF8-ED3105B288A3'),
  success?: boolean(name='Success', description='The response code returned.', example='true'),
}

model CloneNacosConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CloneNacosConfigResponseBody(name='body'),
}

/**
  * mse-200-105
  *
 * @tags cluster
 */
async function cloneNacosConfig(request: CloneNacosConfigRequest): CloneNacosConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CloneNacosConfig', 'POST', '/', 'json', false, 'json', request);
}

model CloneSentinelRuleFromAhasRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh', position='Query'),
  ahasNamespace: string(name='AhasNamespace', example='default', position='Query'),
  appName?: string(name='AppName', example='spring-cloud-a', position='Query'),
  isAHASPublicRegion?: boolean(name='IsAHASPublicRegion', example='false', position='Query'),
  namespace: string(name='Namespace', example='default', position='Query'),
}

model CloneSentinelRuleFromAhasResponseBody = {
  data?: map[string][ string ](name='Data'),
  requestId?: string(name='RequestId', example='EE5C32A1-BC0E-4B79-817C-103E4EDF****'),
}

model CloneSentinelRuleFromAhasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CloneSentinelRuleFromAhasResponseBody(name='body'),
}

async function cloneSentinelRuleFromAhas(request: CloneSentinelRuleFromAhasRequest): CloneSentinelRuleFromAhasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CloneSentinelRuleFromAhas', 'POST', '/', 'json', false, 'json', request);
}

model CreateApplicationRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  appName: string(name='AppName', description='The name of the application.', example='spring-cloud-a', position='Query'),
  language?: string(name='Language', description='The programming language of the application.', example='JAVA', position='Query'),
  namespace?: string(name='Namespace', description='MSE命名空间名字。', example='prod', maxLength=64, position='Query'),
  region: string(name='Region', description='The region to which the application belongs.', example='cn-hangzhou', position='Query'),
  sentinelEnable?: string(name='SentinelEnable', description='Specifies whether to start the switch.', example='true', position='Query'),
  source?: string(name='Source', description='The service where the application is deployed. A value of ACK indicates Container Service for Kubernetes.', example='ACK', position='Query'),
  switchEnable?: string(name='SwitchEnable', description='The name of the Microservices Engine (MSE) namespace.', example='true', position='Query'),
}

model CreateApplicationResponseBody = {
  code?: int32(name='Code', description='The response code returned.', example='200'),
  data?: {
    appId?: string(name='AppId', description='The ID of the application.', example='xxxxxxxx@xxxxxxxxxx'),
    appName?: string(name='AppName', description='The name of the application.', example='spring-cloud-a'),
    createTime?: long(name='CreateTime', description='The creation time.', example='1631001140913'),
    extraInfo?: string(name='ExtraInfo', description='The additional information.', example='{\\"rpcTypes\\":[\\"dubbo\\",\\"springCloud\\"]}'),
    language?: string(name='Language', description='The programming language of the application.', example='JAVA'),
    licenseKey?: string(name='LicenseKey', description='The license key in use.', example='xxxxxxxx@xxxxxxxxxx'),
    namespace?: string(name='Namespace', description='MSE命名空间名字。', example='prod'),
    regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
    source?: string(name='Source', description='The service where the application is deployed. Valid values:

*   \\- ACK: Container Service for Kubernetes
*   \\- Normal: another service', example='ACK'),
    status?: int32(name='Status', description='The status of the application. A value of 1 indicates that the application is in a normal state.', example='1'),
    updateTime?: long(name='UpdateTime', description='The update time.', example='1632979237663'),
    userId?: string(name='UserId', description='The ID of the Alibaba Cloud account.', example='1888888888'),
    version?: string(name='Version', description='版本号。', example='1.0.0'),
  }(name='Data', description='The data of the node.', example='data'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='68D91223-CCE9-5F9C-B538-20F617DA48B1'),
  success?: string(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model CreateApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateApplicationResponseBody(name='body'),
}

async function createApplication(request: CreateApplicationRequest): CreateApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateApplication', 'POST', '/', 'json', false, 'json', request);
}

model CreateCircuitBreakerRuleRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  appId?: string(name='AppId', description='The ID of the application.', example='hkhon1po62@c3df23522bXXXXX', position='Query'),
  appName: string(name='AppName', description='The application name.', example='spring-cloud-a', position='Query'),
  enable: boolean(name='Enable', description='Specifies whether to enable the rule.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true', position='Query'),
  halfOpenBaseAmountPerStep?: int32(name='HalfOpenBaseAmountPerStep', description='The minimum number of requests that can be passed in each step after circuit breaking recovers. Default value: 1.', example='5', position='Query'),
  halfOpenRecoveryStepNum?: int32(name='HalfOpenRecoveryStepNum', description='The number of circuit breaking recovery steps. Default value: 1.', example='1', position='Query'),
  maxAllowedRtMs?: int32(name='MaxAllowedRtMs', description='The maximum response time (RT). Unit: milliseconds. If the RT of a request is greater than the value of this parameter, a slow call is counted. If you set Strategy to 0, you must specify this parameter.', example='200', position='Query'),
  minRequestAmount?: int32(name='MinRequestAmount', description='The minimum number of requests to trigger circuit breaking. If the number of requests in the current time window is less than the value of this parameter, circuit breaking is not triggered even if the circuit breaking rule is met. Default value: 10.', example='10', position='Query'),
  namespace: string(name='Namespace', description='The microservice namespace to which the application belongs.', example='default', position='Query'),
  regionId?: string(name='RegionId', description='The region in which the instance resides.', example='cn-hangzhou', position='Query'),
  resource: string(name='Resource', description='The name of the interface to which the rule applies. The interface name must be the same as the name on the interface details page in the console.', example='/a', position='Query'),
  resourceType?: int32(name='ResourceType', position='Query'),
  retryTimeoutMs?: int32(name='RetryTimeoutMs', description='The period in which circuit breaking is implemented. Unit: milliseconds. If circuit breaking is implemented on the requests for the route, the calls to all the requests for the route fail in the configured circuit breaking period. The value must be an integral multiple of 1,000. Default value: 10000. This value indicates 10 seconds.', example='10000', position='Query'),
  statIntervalMs?: int32(name='StatIntervalMs', description='The length of the time window. Unit: milliseconds. The valid range is from 1 second to 120 minutes. The default value is 20000. This value indicates 20 seconds.', example='20000', position='Query'),
  strategy: int32(name='Strategy', description='The threshold type.

Valid values:

*   0

    <!-- -->

    :

    <!-- -->

    slow call proportion

    <!-- -->

*   1

    <!-- -->

    :

    <!-- -->

    abnormal proportion

    <!-- -->', example='0', position='Query'),
  threshold: float(name='Threshold', description='A percentage threshold for triggering circuit breaking. Valid values: 0-1. These values represent 0% to 100%.', example='0.8', position='Query'),
}

model CreateCircuitBreakerRuleResponseBody = {
  code?: string(name='Code', description='The response code returned.', example='200'),
  data?: {
    appId?: string(name='AppId', description='The ID of the application.', example='hkhon1po62@c3df23522bXXXXX'),
    appName?: string(name='AppName', description='The name of the application.', example='spring-cloud-a'),
    enable?: boolean(name='Enable', description='Indicates whether the rule is enabled.', example='true'),
    halfOpenBaseAmountPerStep?: int32(name='HalfOpenBaseAmountPerStep', description='The minimum number of requests that can be passed in each step after circuit breaking recovers.', example='5'),
    halfOpenRecoveryStepNum?: int32(name='HalfOpenRecoveryStepNum', description='The number of circuit breaking recovery steps.', example='1'),
    id?: long(name='Id', description='The ID of the rule.', example='1'),
    maxAllowedRtMs?: int32(name='MaxAllowedRtMs', description='The maximum response time (RT). Unit: milliseconds. If the RT of a request is greater than the value of this parameter, a slow call is counted. If you set Strategy to 0, you must specify this parameter.', example='200'),
    minRequestAmount?: int32(name='MinRequestAmount', description='The minimum number of requests to trigger circuit breaking. If the number of requests in the current time window is less than the value of this parameter, circuit breaking is not triggered even if the circuit breaking rule is met.', example='10'),
    namespace?: string(name='Namespace', description='The microservice namespace to which the application belongs.', example='default'),
    regionId?: string(name='RegionId', description='The region in which the instance resides.', example='cn-hangzhou'),
    resource?: string(name='Resource', description='The name of the interface to which the rule is applicable. The interface name must be the same as the name on the interface details page in the console.', example='/a'),
    retryTimeoutMs?: int32(name='RetryTimeoutMs', description='The period in which circuit breaking is implemented. Unit: milliseconds. If circuit breaking is implemented on the requests for the route, the calls to all the requests for the route fail in the configured circuit breaking period.', example='10000'),
    statIntervalMs?: int32(name='StatIntervalMs', description='The length of the time window. Unit: milliseconds. The valid range is from 1 second to 120 minutes.', example='20000'),
    strategy?: int32(name='Strategy', description='The threshold type.

Valid values:

*   0

    <!-- -->

    :

    <!-- -->

    Slow call ratio

    <!-- -->

*   1

    <!-- -->

    :

    <!-- -->

    Abnormal proportion

    <!-- -->', example='0'),
    threshold?: float(name='Threshold', description='A percentage threshold for triggering circuit breaking. Valid values: 0-1. These values represent 0% to 100%.', example='0.8'),
  }(name='Data', description='The details of the rule.'),
  message?: string(name='Message', description='The message returned.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='EE5C32A1-BC0E-4B79-817C-103E4EDF****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
}

model CreateCircuitBreakerRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCircuitBreakerRuleResponseBody(name='body'),
}

async function createCircuitBreakerRule(request: CreateCircuitBreakerRuleRequest): CreateCircuitBreakerRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCircuitBreakerRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateClusterRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  chargeType?: string(name='ChargeType', description='The billing method. Valid values: PREPAY and POSTPAY.

Ignore this parameter for serverless instances.', example='POSTPAY', position='Query'),
  clusterSpecification: string(name='ClusterSpecification', description='The engine specifications. Valid values:

\\[Professional Edition]

*   `MSE_SC_2_4_60_c`: 2 vCPUs and 4 GB of memory
*   `MSE_SC_1_2_60_c`: 1 vCPU and 2 GB of memory
*   `MSE_SC_4_8_60_c`: 4 vCPUs and 8 GB of memory
*   `MSE_SC_8_16_60_c`: 8 vCPUs and 16 GB of memory
*   `MSE_SC_16_32_60_c`: 16 vCPUs and 32 GB of memory

\\[Developer Edition]

*   `MSE_SC_1_2_60_c`: 1 vCPU and 2 GB of memory
*   `MSE_SC_2_4_60_c`: 2 vCPUs and 4 GB of memory

\\[Serverless Edition]

Ignore this parameter or set this parameter to `MSE_SC_SERVERLESS`.', example='MSE_SC_2_4_60_c', position='Query'),
  clusterType: string(name='ClusterType', description='The type of the instance. Valid values: ZooKeeper and Nacos-Ans.', example='Nacos-Ans', position='Query'),
  clusterVersion: string(name='ClusterVersion', description='The engine version of the instance. Valid values:

\\[Professional Edition]

*   `NACOS_2_0_0`
*   `ZooKeeper_3_8_0`

\\[Developer Edition]

*   `NACOS_2_0_0`
*   `ZooKeeper_3_8_0`

\\[Serverless Edition]

*   `NACOS_2_0_0`
*   `ZooKeeper_3_8_0`', example='NACOS_2_0_0', position='Query'),
  connectionType?: string(name='ConnectionType', description='The network connection type. Valid values: `slb` or `single_eni`. For instances of the Developer Edition in some regions, only the value `single_eni` is supported.', example='slb', position='Query'),
  diskType?: string(name='DiskType', description='This parameter is obsolete.', example='alicloud-disk-ssd', deprecated='true', position='Query'),
  eipEnabled?: boolean(name='EipEnabled', description='Specifies whether to enable Internet access (Elastic IP Address) if ConnectionType is set to `single_eni`.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', position='Query'),
  instanceCount: int32(name='InstanceCount', description='The number of nodes in the instance. Valid values: 1 to 9.

\\[Professional Edition]

*   The value must be greater than or equal to 3 and must be an odd number.

\\[Developer Edition]

*   The value must be 1.

\\[Serverless Edition]

Ignore this parameter.', example='3', position='Query'),
  instanceName?: string(name='InstanceName', description='The custom name of the instance.', example='tanshuyingtest001', position='Query'),
  mseVersion?: string(name='MseVersion', description='Configure this parameter unless otherwise specified. Valid values:

*   `mse_pro`: Professional Edition
*   `mse_dev`: Developer Edition
*   `mse_dev`: Serverless Edition', example='mse_pro', position='Query'),
  netType: string(name='NetType', description='The network type of the MSE instance. Valid values:

*   `privatenet`: VPC
*   `pubnet`: Internet', example='privatenet', position='Query'),
  privateSlbSpecification?: string(name='PrivateSlbSpecification', description='This parameter is obsolete.', example='slb.s1.small', deprecated='true', position='Query'),
  pubNetworkFlow?: string(name='PubNetworkFlow', description='This parameter is valid only if the ConnectionType parameter is set to `slb`. The value 0 indicates that the Server Load Balancer (SLB) instance is not connected over the Internet. A value greater than 1 indicates the fixed bandwidth that is used to access the SLB instance over the Internet. Unit: Mbit/s.

Valid values: 0 to 5000.', example='0', position='Query'),
  pubSlbSpecification?: string(name='PubSlbSpecification', description='This parameter is obsolete.', example='slb.s1.small', deprecated='true', position='Query'),
  region?: string(name='Region', description='The region where the instance resides. Examples:

*   `cn-hangzhou`: China (Hangzhou)
*   `cn-beijing`: China (Beijing)
*   `cn-shanghai`: China (Shanghai)
*   `cn-zhangjiakou`: China (Zhangjiakou)
*   `cn-shenzhen`: China (Shenzhen)', example='cn-hangzhou', position='Query'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. For the details of resource groups, see [View basic information of a resource group](~~457230~~).', example='rg-aekzcqmoay3dlyq', position='Query'),
  securityGroupType?: string(name='SecurityGroupType', description='The type of the security group to which the instance belongs. This parameter is valid only if the ConnectionType parameter is set to `single_eni`.

Valid values:

*   enterprise
*   normal', example='enterprise', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the resource.', example='env'),
      value?: string(name='Value', description='The value of tag N to add to the resource.', example='prd'),
    }
  ](name='Tag', description='The tags to add to the resource. You can specify up to 20 tags.', position='Query'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-bp17opt4v18sto39k****', position='Query'),
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC).', example='vpc-bp1t50e045b5g7i3p****', position='Query'),
}

model CreateClusterResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-st21ri2****'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  orderId?: string(name='OrderId', description='The ID of the order.', example='20574710974****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='dc63-465d-8ef5-20dc18af****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model CreateClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateClusterResponseBody(name='body'),
}

/**
  * Before you call this API operation, you must make sure that you fully understand the billing methods and pricing of MSE.
  *
 * @tags cluster
 */
async function createCluster(request: CreateClusterRequest): CreateClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCluster', 'POST', '/', 'json', false, 'json', request);
}

model CreateEngineNamespaceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  clusterId?: string(name='ClusterId', description='The ID of the instance.', example='mse-98s****', position='Query'),
  desc?: string(name='Desc', description='The description of the namespace.', example='Development environment', position='Query'),
  id?: string(name='Id', description='The custom ID of the namespace. If you do not specify this parameter, the automatically generated Universally Unique Identifier (UUID) is returned.', example='f4fa5b81-2f26-4900-833a-7516b315ebb2', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-st21ri2****', position='Query'),
  name: string(name='Name', description='The display name of the namespace.', example='dev', position='Query'),
  serviceCount?: int32(name='ServiceCount', description='The maximum number of services that can run in the namespace.', example='100', position='Query'),
}

model CreateEngineNamespaceResponseBody = {
  clusterId?: string(name='ClusterId', description='The ID of the instance.', example='mse-892k****'),
  data?: {
    configCount?: int32(name='ConfigCount', description='The number of configurations.', example='1'),
    namespace?: string(name='Namespace', description='The ID of the namespace.', example='f4fa5b81-2f26-4900-833a-7516b315ebb2'),
    namespaceDesc?: string(name='NamespaceDesc', description='The description of the namespace.', example='mytest'),
    namespaceShowName?: string(name='NamespaceShowName', description='The display name of the namespace.', example='dev'),
    quota?: int32(name='Quota', description='The quota of configurations.', example='1'),
    serviceCount?: int32(name='ServiceCount', description='The number of active services.', example='3'),
    type?: int32(name='Type', description='The type of the namespace. Valid values:

*   `0`: global configuration
*   `1`: default namespace
*   `2`: custom namespace', example='1'),
  }(name='Data', description='The details of the data.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F6092602-C357-4750-89D9-E572FBEA****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model CreateEngineNamespaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateEngineNamespaceResponseBody(name='body'),
}

async function createEngineNamespace(request: CreateEngineNamespaceRequest): CreateEngineNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEngineNamespace', 'POST', '/', 'json', false, 'json', request);
}

model CreateFlowRuleRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  appId?: string(name='AppId', description='The application ID.', example='ib09eblv6p@c3df23522******', position='Query'),
  appName: string(name='AppName', description='The application name.', example='spring-cloud-a', position='Query'),
  controlBehavior?: int32(name='ControlBehavior', description='The throttling effect.

Valid values:

*   0

    <!-- -->

    :

    <!-- -->

    fast failure

    <!-- -->

*   2

    <!-- -->

    :

    <!-- -->

    in queue

    <!-- -->', example='0', position='Query'),
  enable: boolean(name='Enable', description='Specifies whether to enable the rule.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='false', position='Query'),
  maxQueueingTimeMs?: int32(name='MaxQueueingTimeMs', description='The timeout period. Unit: milliseconds. This value is required if the ControlBehavior parameter is set to 2.', example='10', position='Query'),
  namespace: string(name='Namespace', description='The namespace.', example='default', position='Query'),
  regionId?: string(name='RegionId', description='The region in which the instance resides.', example='cn-hangzhou', position='Query'),
  resource: string(name='Resource', description='The name of the API resource.', example='/b', position='Query'),
  resourceType?: int32(name='ResourceType', position='Query'),
  threshold: int32(name='Threshold', description='The throttling threshold.', example='20', position='Query'),
}

model CreateFlowRuleResponseBody = {
  code?: string(name='Code', description='The response code.', example='200'),
  data?: {
    appId?: string(name='AppId', description='The application ID.', example='hkhon1po62@54e1f42f3******'),
    appName?: string(name='AppName', description='The application name.', example='spring-cloud-a'),
    controlBehavior?: int32(name='ControlBehavior', description='The throttling effect.

Valid values:

*   0

    <!-- -->

    :

    <!-- -->

    fast failure

    <!-- -->

*   2

    <!-- -->

    :

    <!-- -->

    in queue

    <!-- -->', example='0'),
    enable?: boolean(name='Enable', description='Indicates whether the rule is enabled.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
    id?: long(name='Id', description='The ID.', example='12'),
    maxQueueingTimeMs?: int32(name='MaxQueueingTimeMs', description='The timeout period for queuing when the value of ControlBehavior is set to 2. Unit: milliseconds.', example='500'),
    namespace?: string(name='Namespace', description='The namespace.', example='default'),
    regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
    resource?: string(name='Resource', description='The name of the API resource.', example='app'),
    threshold?: float(name='Threshold', description='The throttling threshold.', example='200'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The error message returned.'),
  requestId?: string(name='RequestId', description='The request ID.', example='69AD2AA7-DB47-449B-941B-B14409DF****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
}

model CreateFlowRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFlowRuleResponseBody(name='body'),
}

async function createFlowRule(request: CreateFlowRuleRequest): CreateFlowRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFlowRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateGatewayCircuitBreakerRuleRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh', position='Query'),
  behaviorType: int32(name='BehaviorType', example='0', position='Query'),
  bodyEncoding?: int32(name='BodyEncoding', example='0', position='Query'),
  enable: int32(name='Enable', example='0', position='Query'),
  gatewayId?: long(name='GatewayId', example='14407', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', example='gw-c9bc5afd61014165bd58f621b491*****', position='Query'),
  maxAllowedMs?: int32(name='MaxAllowedMs', example='10', position='Query'),
  minRequestAmount: int32(name='MinRequestAmount', example='10', position='Query'),
  recoveryTimeoutSec: int32(name='RecoveryTimeoutSec', example='12', position='Query'),
  responseContentBody?: string(name='ResponseContentBody', example='text', position='Query'),
  responseRedirectUrl?: string(name='ResponseRedirectUrl', example='www.******.com', position='Query'),
  responseStatusCode?: int32(name='ResponseStatusCode', example='429', position='Query'),
  routeId: long(name='RouteId', example='645', position='Query'),
  routeName: string(name='RouteName', example='routeName', position='Query'),
  statDurationSec: int32(name='StatDurationSec', example='11', position='Query'),
  strategy: int32(name='Strategy', example='0', position='Query'),
  triggerRatio: int32(name='TriggerRatio', example='10', position='Query'),
}

model CreateGatewayCircuitBreakerRuleResponseBody = {
  data?: long(name='Data', example='28'),
  requestId?: string(name='RequestId', example='DC34E4A3-5F1C-4E40-86EA-02EDF967****'),
}

model CreateGatewayCircuitBreakerRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateGatewayCircuitBreakerRuleResponseBody(name='body'),
}

async function createGatewayCircuitBreakerRule(request: CreateGatewayCircuitBreakerRuleRequest): CreateGatewayCircuitBreakerRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateGatewayCircuitBreakerRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateGatewayFlowRuleRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh', position='Query'),
  behaviorType: int32(name='BehaviorType', example='0', position='Query'),
  bodyEncoding?: int32(name='BodyEncoding', example='0', position='Query'),
  enable: int32(name='Enable', example='0', position='Query'),
  gatewayId?: long(name='GatewayId', example='14407', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', example='gw-e2d226bba4b2445c9e29fa7f8216****', position='Query'),
  responseContentBody?: string(name='ResponseContentBody', example='text', position='Query'),
  responseRedirectUrl?: string(name='ResponseRedirectUrl', example='www.******.com', position='Query'),
  responseStatusCode?: int32(name='ResponseStatusCode', example='429', position='Query'),
  routeId: long(name='RouteId', example='52853', position='Query'),
  routeName: string(name='RouteName', example='routeName', position='Query'),
  threshold: int32(name='Threshold', example='10', position='Query'),
}

model CreateGatewayFlowRuleResponseBody = {
  data?: long(name='Data', example='608'),
  requestId?: string(name='RequestId', example='72FC625E-9629-591B-9C01-3F0BFDAB****'),
}

model CreateGatewayFlowRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateGatewayFlowRuleResponseBody(name='body'),
}

async function createGatewayFlowRule(request: CreateGatewayFlowRuleRequest): CreateGatewayFlowRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateGatewayFlowRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateGatewayIsolationRuleRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh', position='Query'),
  behaviorType: int32(name='BehaviorType', example='0', position='Query'),
  bodyEncoding?: int32(name='BodyEncoding', example='0', position='Query'),
  enable: int32(name='Enable', example='0', position='Query'),
  gatewayId?: long(name='GatewayId', example='14407', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', example='gw-e2d226bba4b2445c9e29fa7f8216****', position='Query'),
  maxConcurrency: int32(name='MaxConcurrency', example='100', position='Query'),
  responseContentBody?: string(name='ResponseContentBody', example='text', position='Query'),
  responseRedirectUrl?: string(name='ResponseRedirectUrl', example='www.******.com', position='Query'),
  responseStatusCode?: int32(name='ResponseStatusCode', example='429', position='Query'),
  routeId: long(name='RouteId', example='52853', position='Query'),
  routeName: string(name='RouteName', example='routeName', position='Query'),
}

model CreateGatewayIsolationRuleResponseBody = {
  data?: long(name='Data', example='608'),
  requestId?: string(name='RequestId', example='94B12406-E44D-57C9-BF93-A8B35BFF****'),
}

model CreateGatewayIsolationRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateGatewayIsolationRuleResponseBody(name='body'),
}

async function createGatewayIsolationRule(request: CreateGatewayIsolationRuleRequest): CreateGatewayIsolationRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateGatewayIsolationRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateIsolationRuleRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh', position='Query'),
  appId?: string(name='AppId', example='hkhon1po62@c3df23522bXXXXX', position='Query'),
  appName: string(name='AppName', example='spring-cloud-a', position='Query'),
  enable: boolean(name='Enable', example='true', position='Query'),
  namespace: string(name='Namespace', example='default', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resource: string(name='Resource', example='/a', position='Query'),
  threshold: float(name='Threshold', example='3', position='Query'),
}

model CreateIsolationRuleResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    appId?: string(name='AppId', example='hpn9ac29kz@e31a4b871******'),
    appName?: string(name='AppName', example='spring-cloud-a'),
    enable?: boolean(name='Enable', example='true'),
    id?: long(name='Id', example='1'),
    namespace?: string(name='Namespace', example='default'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    resource?: string(name='Resource', example='/a'),
    threshold?: float(name='Threshold', example='3'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='4E9FDCFE-0738-493B-B801-82BDFBCB****'),
  success?: boolean(name='Success', example='true'),
}

model CreateIsolationRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateIsolationRuleResponseBody(name='body'),
}

async function createIsolationRule(request: CreateIsolationRuleRequest): CreateIsolationRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateIsolationRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateMseServiceApplicationRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  appName: string(name='AppName', description='The name of the application.', example='bsd-xxyp-open-goods-server', position='Query'),
  extraInfo?: string(name='ExtraInfo', description='The additional information.', example='{}', position='Query'),
  language?: string(name='Language', description='The programming language of the application.', example='JAVA', position='Query'),
  mseVersion?: string(name='MseVersion', description='The edition of the MSE instance that you want to purchase.

*   mse_pro: Professional Edition.
*   mse_dev: Developer Edition.', example='mse_pro', position='Query'),
  region: string(name='Region', description='The ID of the region where the instance resides. Examples:

*   cn-hangzhou: China (Hangzhou)
*   cn-beijing: China (Beijing)
*   cn-shanghai: China (Shanghai)
*   cn-zhangjiakou: China (Zhangjiakou)
*   cn-shenzhen: China (Shenzhen)', example='cn-shenzhen', position='Query'),
  sentinelEnable?: string(name='SentinelEnable', description='Specifies whether to enable the Sentinel-compatible mode.', example='true', position='Query'),
  source?: string(name='Source', description='The service source.', example='edasmsc', position='Query'),
  switchEnable?: string(name='SwitchEnable', description='Specifies whether to enable switching.', example='true', position='Query'),
}

model CreateMseServiceApplicationResponseBody = {
  data?: {
    appId?: string(name='AppId', description='The application ID.', example='xxxxxxxx@xxxxxxxxxx'),
    appName?: string(name='AppName', description='The name of the application.', example='spring-cloud-a'),
    createTime?: long(name='CreateTime', description='The creation time.', example='1631001140913'),
    extraInfo?: string(name='ExtraInfo', description='The additional information.', example='{}'),
    language?: string(name='Language', description='The programming language of the application.', example='JAVA'),
    licenseKey?: string(name='LicenseKey', description='The license key in use.', example='xxxxxxxx@xxxxxxxxxx'),
    regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
    source?: string(name='Source', description='The source type.', example='edasmsc'),
    status?: int32(name='Status', description='The status. Valid values: 1: available; 2: deleted.', example='1'),
    updateTime?: long(name='UpdateTime', description='The last modification time.', example='1632979237663'),
    userId?: string(name='UserId', description='The ID of the user.', example='1234567890'),
    version?: string(name='Version', description='The version information.', example='1.0.0'),
  }(name='Data', description='The data structure.'),
  message?: string(name='Message', description='The message returned.', example='The request was successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='904F6C04-1284-****-8ED2-FFC57E507A72'),
  success?: string(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model CreateMseServiceApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMseServiceApplicationResponseBody(name='body'),
}

/**
  * @deprecated
  *
 * @tags msc
 */
// Deprecated
async function createMseServiceApplication(request: CreateMseServiceApplicationRequest): CreateMseServiceApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMseServiceApplication', 'POST', '/', 'json', false, 'json', request);
}

model CreateNacosConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  appName?: string(name='AppName', description='The name of the application.', example='saledatacenter-task', position='Query'),
  betaIps?: string(name='BetaIps', description='The list of IP addresses where the beta release of the configuration is performed.', example='100.117.XX.XX,100.117.XX.XX', position='Query'),
  content?: string(name='Content', description='The content of the configuration.', example='asdf', position='Query'),
  dataId: string(name='DataId', description='The ID of the data.', example='common.yaml', position='Query'),
  desc?: string(name='Desc', description='The description of the configuration.', example='Basic module configuration.', position='Query'),
  group: string(name='Group', description='The ID of the group.', example='alime-bridge-aliyun', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='mse_prepaid_public_cn-tl32****', position='Query'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='547fd2a0-d0d6-****-80db2a1afb82', position='Query'),
  tags?: string(name='Tags', description='The tags of the configuration.', example='Basic configurations', position='Query'),
  type?: string(name='Type', description='The format of the configuration. Supported formats include TEXT, JSON, and XML.', example='text', position='Query'),
}

model CreateNacosConfigResponseBody = {
  code?: string(name='Code', description='The code returned.', example='1'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code.', example='202'),
  message?: string(name='Message', description='The error message returned.', example='The request was successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='673DBD43-569E-510F-B3DE-20BB8DFEB20A'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model CreateNacosConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateNacosConfigResponseBody(name='body'),
}

/**
  * > The operation is not provided in Nacos SDKs. For information about Nacos SDKs, see the [official documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
 * @tags cluster
 */
async function createNacosConfig(request: CreateNacosConfigRequest): CreateNacosConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNacosConfig', 'POST', '/', 'json', false, 'json', request);
}

model CreateNacosInstanceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  clusterName?: string(name='ClusterName', description='The name of the Nacos instance.', example='DEFAULT', position='Query'),
  enabled: boolean(name='Enabled', description='Specifies whether to enable the service for the instance.', example='true', position='Query'),
  ephemeral: boolean(name='Ephemeral', description='Specifies whether to mark the instance as a temporary node.', example='false', position='Query'),
  groupName: string(name='GroupName', description='The name of the group.', example='DEFAULT_GROUP', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-123456', position='Query'),
  ip: string(name='Ip', description='The IP address of the Nacos instance.', example='1.2.xx.xx', position='Query'),
  metadata?: string(name='Metadata', description='The node metadata of the instance.', example='{\\"grayversion\\":\\"1.0\\",\\"preserved.register.source\\":\\"SPRING_CLOUD\\",\\"management.context-path\\":\\"\\"}', position='Body'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='9e78a671-4b9b-4dd4-99c1-0b9da87****', position='Query'),
  port: int32(name='Port', description='The port number of the Nacos instance.', example='12281', minimum=0, maximum=65535, position='Query'),
  serviceName: string(name='ServiceName', description='The name of the service.', example='hello_service', position='Query'),
  weight: string(name='Weight', description='The weight. Valid values: 0 to 10000. The value must be an integer. A larger value indicates a higher frequency at which the instance is accessed.', example='1', position='Query'),
}

model CreateNacosInstanceResponseBody = {
  code?: int32(name='Code', description='The response code returned.', example='200'),
  data?: string(name='Data', description='The result returned.', example='ok'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9e78a671-4b9b-4dd4-99c1-0b9da87d3dec'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model CreateNacosInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateNacosInstanceResponseBody(name='body'),
}

/**
  * > The operation is not provided in Nacos SDKs. For information about Nacos SDKs, see the [official documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
 * @tags cluster
 */
async function createNacosInstance(request: CreateNacosInstanceRequest): CreateNacosInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNacosInstance', 'POST', '/', 'json', true, 'form', request);
}

model CreateNacosServiceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  clusterId?: string(name='ClusterId', description='The ID of the cluster.

> This operation contains both the InstanceId and ClusterId parameters. You must specify one of them.', example='mse-3691a080', position='Query'),
  ephemeral?: boolean(name='Ephemeral', description='Specifies whether the instance is marked as a temporary node. Valid values:

*   `true`: yes
*   `false`: no', example='true', position='Query'),
  groupName?: string(name='GroupName', description='The name of the group.', example='DEFAULT_GROUP', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.

> This operation contains both the InstanceId and ClusterId parameters. You must specify one of them.', example='mse-cn-st21ri2****', position='Query'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='production', position='Query'),
  protectThreshold?: string(name='ProtectThreshold', description='The protection threshold.', example='0', position='Query'),
  serviceName: string(name='ServiceName', description='The name of the service.', example='com.alibabacloud.hipstershop.cartserviceapi.service.CartService', position='Query'),
}

model CreateNacosServiceResponseBody = {
  code?: int32(name='Code', description='The response code returned.', example='200'),
  data?: string(name='Data', description='The data of the node.', example='data'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5B170A0D-2C5D-4CF8-B808-03966B86****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='True'),
}

model CreateNacosServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateNacosServiceResponseBody(name='body'),
}

/**
  * > The operation is not provided in Nacos SDKs. For information about Nacos SDKs, see the [official documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
 * @tags cluster
 */
async function createNacosService(request: CreateNacosServiceRequest): CreateNacosServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNacosService', 'POST', '/', 'json', false, 'json', request);
}

model CreateOrUpdateSwimmingLaneRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values: zh and en. Default value: zh. The value zh indicates Chinese, and the value en indicates English.', example='zh', position='Query'),
  enable?: boolean(name='Enable', description='Specifies whether to enable the lane.', example='true', position='Query'),
  enableRules?: boolean(name='EnableRules', description='Specifies whether to configure a routing rule for the lane. If an Ingress gateway is used, this parameter is not required.', example='false', position='Query'),
  entryRule?: string(name='EntryRule', description='The JSON string.', example='{}', deprecated='true', position='Query'),
  entryRules?: [ 
    {
      condition?: string(name='Condition', example='AND'),
      paths?: [ string ](name='Paths'),
      priority?: int32(name='Priority'),
      restItems?: [ 
        {
          cond?: string(name='Cond'),
          datum?: string(name='Datum'),
          divisor?: int32(name='Divisor'),
          name?: string(name='Name'),
          nameList?: [ string ](name='NameList'),
          operator?: string(name='Operator'),
          rate?: int32(name='Rate'),
          remainder?: int32(name='Remainder'),
          type?: string(name='Type'),
          value?: string(name='Value'),
        }
      ](name='RestItems'),
    }
  ](name='EntryRules', position='Body'),
  gatewaySwimmingLaneRouteJson?: {
    canaryModel?: int32(name='CanaryModel', example='0'),
    conditions?: [ 
      {
        cond?: string(name='Cond', description='The matching condition. Valid values:

*   PRE: prefix matching
*   EQUAL: exact matching
*   ERGULAR: regular expression matching', example='PRE'),
        name?: string(name='Name', description='The name of the parameter.', example='name'),
        type?: string(name='Type', description='The type of the parameter. Valid values:

*   header
*   param', example='header'),
        value?: string(name='Value', description='The value of the parameter.', example='xiaoming'),
      }
    ](name='Conditions', description='The matching conditions.'),
    gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='1'),
    gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-84efde2ee1464260bdb17a5b****'),
    percentage?: int32(name='Percentage', example='20'),
    routeIdList?: [ long ](name='RouteIdList', description='The route IDs.'),
  }(name='GatewaySwimmingLaneRouteJson', description='The information about the routing rule for the gateway. This parameter is required when a cloud-native gateway is used as the ingress.', shrink='json', position='Query'),
  groupId?: long(name='GroupId', description='The language of the response. Valid values:****

*   **zh-CN**: Chinese
*   **en-US**: English

> Default value: **zh-CN**.', example='115', position='Query'),
  id?: long(name='Id', description='The ID of the primary key. The value -1 indicates a request that is used to create a lane. A value greater than 0 indicates a request that is used to modify a lane.', example='-1', position='Query'),
  name: string(name='Name', description='The name of the lane.', example='Test lane', maxLength=64, position='Query'),
  namespace?: string(name='Namespace', example='default', maxLength=64, position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-beijing', position='Query'),
  tag?: string(name='Tag', description='The tag.', example='gray', maxLength=64, position='Query'),
}

model CreateOrUpdateSwimmingLaneResponseBody = {
  code?: int32(name='Code', description='The status code. The value 200 is returned if the request is successful.', example='200'),
  data?: {
    enable?: boolean(name='enable'),
    enableRules?: boolean(name='enableRules'),
    entryRule?: string(name='entryRule'),
    entryRules?: [ 
      {
        condition?: string(name='condition'),
        path?: string(name='path'),
        paths?: [ string ](name='paths'),
        restItems?: [ 
          {
            cond?: string(name='cond'),
            datum?: string(name='datum'),
            divisor?: int32(name='divisor'),
            name?: string(name='name'),
            nameList?: [ string ](name='nameList'),
            operator?: string(name='operator'),
            rate?: int32(name='rate'),
            remainder?: int32(name='remainder'),
            type?: string(name='type'),
            value?: string(name='value'),
          }
        ](name='restItems'),
      }
    ](name='entryRules'),
    gatewaySwimmingLaneRouteJson?: string(name='gatewaySwimmingLaneRouteJson'),
    gmtCreate?: string(name='gmtCreate'),
    gmtModified?: string(name='gmtModified'),
    groupId?: long(name='groupId'),
    id?: long(name='id'),
    name?: string(name='name'),
    regionId?: string(name='regionId'),
    status?: int32(name='status'),
    tag?: string(name='tag'),
  }(name='Data', description='The details of the data.', example='{}'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request was successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EE5C32A1-BC0E-4B79-817C-103E4EDF****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model CreateOrUpdateSwimmingLaneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOrUpdateSwimmingLaneResponseBody(name='body'),
}

async function createOrUpdateSwimmingLane(request: CreateOrUpdateSwimmingLaneRequest): CreateOrUpdateSwimmingLaneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOrUpdateSwimmingLane', 'POST', '/', 'json', true, 'form', request);
}

model CreateOrUpdateSwimmingLaneGroupRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  appIds?: string(name='AppIds', description='The IDs of applications. Separate application IDs with commas (,).', example='hkhon1po62@c3df23522baa898,hkhon1po62@66e5235415730a5,hkhon1po62@958bba95910341f', position='Query'),
  canaryModel?: int32(name='CanaryModel', position='Query'),
  dbGrayEnable?: boolean(name='DbGrayEnable', description='Specifies whether to enable database canary release.', example='true', position='Query'),
  entryApp?: string(name='EntryApp', description='The ingress application.', example='Ingress', position='Query'),
  id?: long(name='Id', description='The ID of the lane group. A value of -1 is used to create a lane group. A value greater than 0 is used to modify the specified lane group.', example='120', position='Query'),
  messageQueueFilterSide?: string(name='MessageQueueFilterSide', description='The side for message filtering when the canary release for messaging feature is enabled.', example='Server', position='Query'),
  messageQueueGrayEnable?: boolean(name='MessageQueueGrayEnable', description='Specifies whether to enable canary release for messaging.', example='true', position='Query'),
  name: string(name='Name', description='The name.', example='group1', position='Query'),
  namespace?: string(name='Namespace', description='The name of the Microservices Engine (MSE) namespace.', example='default', maxLength=64, position='Query'),
  paths?: [ string ](name='Paths', shrink='json', position='Query'),
  recordCanaryDetail?: boolean(name='RecordCanaryDetail', description='Specifies whether to record request details.', position='Query'),
  region?: string(name='Region', description='The region ID.', example='cn-shanghai', position='Query'),
  routeIds?: [ long ](name='RouteIds', shrink='json', position='Query'),
  status?: int32(name='Status', description='The status of the lane group. The value 0 specifies that the lane group is disabled. The value 1 specifies that the lane group is enabled.', example='0', position='Query'),
}

model CreateOrUpdateSwimmingLaneGroupResponseBody = {
  data?: {
    appIds?: string(name='AppIds', example='abcd1@abcde123,abcd1@abcde124'),
    canaryModel?: int32(name='CanaryModel'),
    dbGrayEnable?: string(name='DbGrayEnable', example='true'),
    entryApp?: string(name='EntryApp', example='mse:abcd1@a2345'),
    id?: long(name='Id'),
    messageQueueFilterSide?: string(name='MessageQueueFilterSide', example='Client'),
    messageQueueGrayEnable?: boolean(name='MessageQueueGrayEnable'),
    name?: string(name='Name', example='example-app'),
    namespace?: string(name='Namespace', example='prod'),
    paths?: string(name='Paths'),
    recordCanaryDetail?: boolean(name='RecordCanaryDetail'),
    region?: string(name='Region', example='cn-hangzhou'),
    userId?: string(name='UserId', example='12345'),
  }(name='Data', description='The response parameters.', example='{}'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='mse-100-000'),
  message?: string(name='Message', description='The message returned.', example='The request was successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EE5C32A1-BC0E-4B79-817C-103E4EDF****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

true: The request was successful. false: The request failed.', example='true'),
}

model CreateOrUpdateSwimmingLaneGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOrUpdateSwimmingLaneGroupResponseBody(name='body'),
}

async function createOrUpdateSwimmingLaneGroup(request: CreateOrUpdateSwimmingLaneGroupRequest): CreateOrUpdateSwimmingLaneGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOrUpdateSwimmingLaneGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateZnodeRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  clusterId?: string(name='ClusterId', description='The ID of the instance.', example='mse-09k1q11****', position='Query'),
  data?: string(name='Data', description='The data of the node.', example='data', position='Query'),
  path?: string(name='Path', description='The path of the node.', example='/zookeeper', position='Query'),
}

model CreateZnodeResponseBody = {
  data?: {
    data?: string(name='Data', description='The data of the node.', example='cluster'),
    dir?: boolean(name='Dir', description='Indicates whether the node information was returned. Valid values:

*   `true`: The node information was returned.
*   `false`: The node information failed to be returned.', example='true'),
    name?: string(name='Name', description='The name of the node.', example='mse-bc1a29b0-160230875****-reg-center-0-1'),
    path?: string(name='Path', description='The path of the node.', example='/'),
  }(name='Data', description='The details of the data.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DC34E4A3-5F1C-4E40-86EA-02EDF967****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model CreateZnodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateZnodeResponseBody(name='body'),
}

async function createZnode(request: CreateZnodeRequest): CreateZnodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateZnode', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAuthResourceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-3f97e2989c344f35ab3fd62b19f1****', position='Query'),
  id?: long(name='Id', description='The destination ID.', example='36', position='Query'),
}

model DeleteAuthResourceResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='1'),
  data?: {
    authId?: long(name='AuthId', description='The authentication ID.', example='253'),
    domainId?: long(name='DomainId', description='The ID of the domain name.', example='235'),
    domainName?: string(name='DomainName', description='The domain name.', example='name'),
    gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='gw-7ea3da97b96543e19f6c597cd4a9****'),
    gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-7ea3da97b96543e19f6c597cd4a9****'),
    gmtCreate?: string(name='GmtCreate', description='The creation time.', example='2022-01-07T10:07:57.000+0000'),
    gmtModified?: string(name='GmtModified', description='The modification time.', example='2022-01-07T10:07:57.000+0000'),
    id?: long(name='Id', description='The ID of the primary key.', example='12'),
    isWhite?: boolean(name='IsWhite', description='Indicates whether the whitelist mode is enabled.', example='true'),
    path?: string(name='Path', description='The path.', example='/zookeeper'),
  }(name='Data', description='The returned data.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='559412D1-BFCE-53CC-B88E-0192C331EF44'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model DeleteAuthResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAuthResourceResponseBody(name='body'),
}

async function deleteAuthResource(request: DeleteAuthResourceRequest): DeleteAuthResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAuthResource', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCircuitBreakerRulesRequest {
  regionId?: string(name='RegionId', position='Host'),
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values: zh and en. Default value: zh. The value zh indicates Chinese, and the value en indicates English.', example='zh', position='Query'),
  appName: string(name='AppName', description='The name of the application.', example='spring-cloud-a', position='Query'),
  ids?: [ long ](name='Ids', description='The IDs of the rules that you want to delete.', shrink='json', position='Query'),
  namespace: string(name='Namespace', description='The microservice namespace to which the application belongs.', example='default', position='Query'),
}

model DeleteCircuitBreakerRulesResponseBody = {
  code?: int32(name='Code', description='The response code.', example='200'),
  data?: [ long ](name='Data', description='The IDs of the rules that were deleted.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='FAF577DD-8E8E-5BE6-80CC-380E19******'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model DeleteCircuitBreakerRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCircuitBreakerRulesResponseBody(name='body'),
}

async function deleteCircuitBreakerRules(request: DeleteCircuitBreakerRulesRequest): DeleteCircuitBreakerRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCircuitBreakerRules', 'POST', '/', 'json', false, 'json', request);
}

model DeleteClusterRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-6ja1rgl****', position='Query'),
}

model DeleteClusterResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code returned.', example='202'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3369AD10-F1A6-4E6F-B99E-20F51826****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model DeleteClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteClusterResponseBody(name='body'),
}

async function deleteCluster(request: DeleteClusterRequest): DeleteClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCluster', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEngineNamespaceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='mse-0c738****', position='Query'),
  id?: string(name='Id', description='The ID of the namespace.', example='678ca857-****-b1bf-d0a98c5ca84b', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-7pp2d1****', position='Query'),
}

model DeleteEngineNamespaceResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code returned.', example='202'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A73AC37C-C617-4E3A-8049-372CF49C****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='True'),
}

model DeleteEngineNamespaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEngineNamespaceResponseBody(name='body'),
}

async function deleteEngineNamespace(request: DeleteEngineNamespaceRequest): DeleteEngineNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEngineNamespace', 'POST', '/', 'json', false, 'json', request);
}

model DeleteFlowRulesRequest {
  regionId?: string(name='RegionId', position='Host'),
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  appName: string(name='AppName', description='The application name.', example='spring-cloud-a', position='Query'),
  ids?: [ long ](name='Ids', description='The IDs of the rules to be deleted.', example='[1,2]', shrink='json', position='Query'),
  namespace: string(name='Namespace', description='The microservice namespace to which the application belongs.', example='default', position='Query'),
}

model DeleteFlowRulesResponseBody = {
  code?: int32(name='Code', description='The response code.', example='200'),
  data?: [ long ](name='Data', description='The IDs of the rules that were deleted.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='FAF577DD-8E8E-5BE6-80CC-380E19******'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model DeleteFlowRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFlowRulesResponseBody(name='body'),
}

async function deleteFlowRules(request: DeleteFlowRulesRequest): DeleteFlowRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFlowRules', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGatewayRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  deleteSlb?: boolean(name='DeleteSlb', description='Specifies whether to delete the SLB instance purchased for the gateway when you delete the gateway.', example='true', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-0fe488252dc44d55a9dd57875193a1d7', position='Query'),
}

model DeleteGatewayResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned. The value 200 indicates that the request was successful. Other values indicate that the request failed.', example='200'),
  data?: {
    gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway. The ID is automatically generated by the system.', example='gw-7ea3da97b96543e19f6c597c****'),
    gmtCreate?: string(name='GmtCreate', description='The creation time.', example='2022-01-07T10:07:57.000+0000'),
    gmtModified?: string(name='GmtModified', description='The time when the gateway was last updated.', example='2022-01-07T10:07:57.000+0000'),
    id?: long(name='Id', description='The ID of the primary key.', example='12'),
    name?: string(name='Name', description='The name of the gateway.', example='mse-bc1a29b0-reg-center-0-1'),
    primaryUser?: string(name='PrimaryUser', description='The information about the user.', example='1231254'),
    region?: string(name='Region', description='The ID of the region.', example='cn-hangzhou'),
    replica?: int32(name='Replica', description='The number of gateway replicas.', example='2'),
    securityGroup?: string(name='SecurityGroup', description='The ID of the security group.', example='sg-bp11ufzqn6mmb8dtzz82'),
    spec?: string(name='Spec', description='The specifications of the gateway.', example='MSE_GTW_16_32_200_c'),
    status?: int32(name='Status', description='The status of the gateway. Valid values: 0: The gateway is being created. 1: The gateway fails to be created. 2: The gateway is running. 3: The gateway is changing. 4: The gateway is scaling down. 6: The gateway is scaling up. 8: The gateway is being deleted. 10: The gateway is restarting. 11: The gateway is being rebuilt. 12: The gateway is updating. 13: The gateway fails to be updated.', example='1'),
    vpc?: string(name='Vpc', description='The ID of the virtual private cloud (VPC) where the gateway resides.', example='vpc-bp1328cm01m6uel42b5zb'),
    vswitch?: string(name='Vswitch', description='The ID of the vSwitch.', example='vsw-bp18zeqxx6mpuq843z4n5'),
  }(name='Data', description='The details of the data.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The returned message.

*   If the request is successful, a success message is returned.
*   If the request fails, an error message is returned, such as the "TaskId not found" message.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2FFEA345-BE30-5FE0-8885-42E2DEFD5FE6'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model DeleteGatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteGatewayResponseBody(name='body'),
}

async function deleteGateway(request: DeleteGatewayRequest): DeleteGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGateway', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGatewayAuthConsumerRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-c70622ff52fe49beb29bea9a6f52****', position='Query'),
  id: long(name='Id', description='The ID of the consumer on which the gateway performs authentication operations.', example='33ff74b6-d21e-4f9b-91a8-bc1ea4ef****', position='Query'),
}

model DeleteGatewayAuthConsumerResponseBody = {
  code?: int32(name='Code', description='The status code. A value of 200 is returned if the request is successful.', example='200'),
  data?: boolean(name='Data', description='Indicates whether the execution was successful. Valid values:

*   true: The execution was successful.
*   false: The execution failed.', example='true'),
  dynamicCode?: string(name='DynamicCode', description='The dynamic part in the error message.', example='code'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the \\*\\*%s\\*\\* variable in the **ErrMessage** parameter.

> If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The request ID.', example='69AD2AA7-DB47-449B-941B-B14409DF****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model DeleteGatewayAuthConsumerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteGatewayAuthConsumerResponseBody(name='body'),
}

async function deleteGatewayAuthConsumer(request: DeleteGatewayAuthConsumerRequest): DeleteGatewayAuthConsumerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGatewayAuthConsumer', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGatewayAuthConsumerResourceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  consumerId: long(name='ConsumerId', description='The consumer ID.', example='2', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-ubuwqygbq4783gqb2y3f87q****', position='Query'),
  idList: string(name='IdList', description='The IDs of the authorized resources that you want to delete.', example='1,2,3,4', position='Query'),
}

model DeleteGatewayAuthConsumerResourceResponseBody = {
  code?: int32(name='Code', description='The response code. The status code 200 indicates that the request was successful.', example='200'),
  data?: boolean(name='Data', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
  dynamicCode?: string(name='DynamicCode', description='The dynamic part in the error message.', example='code'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the \\*\\*%s\\*\\* variable in the **ErrMessage** parameter.

> If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='NoPermission'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The returned message.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The request ID.', example='3369AD10-F1A6-4E6F-B99E-20F51826****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`
*   `false`', example='true'),
}

model DeleteGatewayAuthConsumerResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteGatewayAuthConsumerResourceResponseBody(name='body'),
}

async function deleteGatewayAuthConsumerResource(request: DeleteGatewayAuthConsumerResourceRequest): DeleteGatewayAuthConsumerResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGatewayAuthConsumerResource', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGatewayCircuitBreakerRuleRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', example='gw-1cef5440bf2d484db419fb264d4f****', position='Query'),
  routeId: long(name='RouteId', example='11151', position='Query'),
  ruleId: long(name='RuleId', example='1', position='Query'),
}

model DeleteGatewayCircuitBreakerRuleResponseBody = {
  data?: boolean(name='Data', example='True'),
  requestId?: string(name='RequestId', example='52BA6DA6-A702-4362-A32F-DFF79655****'),
}

model DeleteGatewayCircuitBreakerRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteGatewayCircuitBreakerRuleResponseBody(name='body'),
}

async function deleteGatewayCircuitBreakerRule(request: DeleteGatewayCircuitBreakerRuleRequest): DeleteGatewayCircuitBreakerRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGatewayCircuitBreakerRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGatewayDomainRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-90392d768a3847a7b804c505254d****', position='Query'),
  id?: string(name='Id', description='The domain ID.', example='109', position='Query'),
}

model DeleteGatewayDomainResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: {
    certIdentifier?: string(name='CertIdentifier', description='The ID of the certificate.', example='243'),
    gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='253'),
    gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-7ea3da97b96543e19f6c597c****'),
    gmtCreate?: string(name='GmtCreate', description='The time when the domain name was added.', example='2022-01-07T10:07:57.000+0000'),
    gmtModified?: string(name='GmtModified', description='The last modification time.', example='2022-01-07T10:07:57.000+0000'),
    id?: long(name='Id', description='The domain ID.', example='2'),
    mustHttps?: boolean(name='MustHttps', description='Indicates whether HTTP probing is allowed.', example='true'),
    name?: string(name='Name', description='The name.', example='CONTACTINFO'),
    protocol?: string(name='Protocol', description='The protocol.', example='HTTP'),
  }(name='Data', description='The returned data.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='39016EAC-6EDB-52FE-AE20-4B013DF236FF'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model DeleteGatewayDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteGatewayDomainResponseBody(name='body'),
}

async function deleteGatewayDomain(request: DeleteGatewayDomainRequest): DeleteGatewayDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGatewayDomain', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGatewayFlowRuleRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', example='gw-e2d226bba4b2445c9e29fa7f8216****', position='Query'),
  routeId: long(name='RouteId', example='11151', position='Query'),
  ruleId: long(name='RuleId', example='1', position='Query'),
}

model DeleteGatewayFlowRuleResponseBody = {
  data?: boolean(name='Data', example='True'),
  requestId?: string(name='RequestId', example='2B74E7F7-DF54-5AB1-B8F2-67391B83****'),
}

model DeleteGatewayFlowRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteGatewayFlowRuleResponseBody(name='body'),
}

async function deleteGatewayFlowRule(request: DeleteGatewayFlowRuleRequest): DeleteGatewayFlowRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGatewayFlowRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGatewayIsolationRuleRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', example='gw-e2d226bba4b2445c9e29fa7f8216****', position='Query'),
  routeId: long(name='RouteId', example='11151', position='Query'),
  ruleId: long(name='RuleId', example='1', position='Query'),
}

model DeleteGatewayIsolationRuleResponseBody = {
  data?: boolean(name='Data', example='True'),
  requestId?: string(name='RequestId', example='94B12406-E44D-57C9-BF93-A8B35BFF****'),
}

model DeleteGatewayIsolationRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteGatewayIsolationRuleResponseBody(name='body'),
}

async function deleteGatewayIsolationRule(request: DeleteGatewayIsolationRuleRequest): DeleteGatewayIsolationRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGatewayIsolationRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGatewayRouteRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-492af9b04bb4474cae9d645be850e3d7', position='Query'),
  routeId?: string(name='RouteId', description='The ID of the route.', example='252', position='Query'),
}

model DeleteGatewayRouteResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned.', example='200'),
  data?: {
    defaultServiceId?: long(name='DefaultServiceId', description='The default service ID.', example='1'),
    gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='125'),
    gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-5017305290e14cebbrvec4a5****'),
    gmtCreate?: string(name='GmtCreate', description='The creation time.', example='2022-01-07 18:07:57'),
    gmtModified?: string(name='GmtModified', description='The modification time.', example='2021-12-30T06:41:52.000+0000'),
    id?: long(name='Id', description='The ID.', example='12'),
    name?: string(name='Name', description='The name.', example='test'),
    predicates?: string(name='Predicates', description='The matching rules.', example='{\\"PathPredicates\\":{\\"Path\\":\\"/metas\\",\\"Type\\":\\"PRE\\",\\"IgnoreCase\\":false}}'),
    routeOrder?: int32(name='RouteOrder', description='The sequence number of the route.', example='1'),
    status?: int32(name='Status', description='The status of the route. Valid values:

*   0: unpublished
*   2: publishing
*   3: published
*   4: editing (updated but not published)
*   5: unpublishing
*   6: unavailable', example='2'),
  }(name='Data', description='The data returned.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ADDD8AB7-8D1C-4697-A83E-410D2607****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model DeleteGatewayRouteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteGatewayRouteResponseBody(name='body'),
}

async function deleteGatewayRoute(request: DeleteGatewayRouteRequest): DeleteGatewayRouteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGatewayRoute', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGatewayServiceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='60', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-1a4ab101d5924b6f92c5ec98a841761f', position='Query'),
  serviceId?: string(name='ServiceId', description='The ID of the service.', example='190', position='Query'),
}

model DeleteGatewayServiceResponseBody = {
  code?: int32(name='Code', description='The response code returned.', example='200'),
  data?: {
    gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='1'),
    gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-7ea3da97b96543e19f6c597c****'),
    gmtCreate?: string(name='GmtCreate', description='The time when the service was created.', example='2022-01-14 14:39:16'),
    gmtModified?: string(name='GmtModified', description='The last modification time.', example='2022-01-07T10:07:57.000+0000'),
    groupName?: string(name='GroupName', description='The name of the group.', example='DEFAULT_GROUP'),
    id?: long(name='Id', description='The ID of the service.', example='190'),
    ips?: [ string ](name='Ips', description='IP'),
    metaInfo?: string(name='MetaInfo', description='The basic information about the service.', example='{}'),
    name?: string(name='Name', description='The name of the service.', example='test'),
    namespace?: string(name='Namespace', description='The namespace.', example='default'),
    serviceNameInRegistry?: string(name='ServiceNameInRegistry', description='The name of the service registered with the service registry.', example='test'),
    sourceId?: long(name='SourceId', description='The ID of the service source.', example='1'),
    sourceType?: string(name='SourceType', description='The source type of the service.', example='MSE'),
  }(name='Data', description='The returned data.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='The unique ID of the request.', example='B3545F76-6ED1-586F-8DB9-ECE07985F381'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model DeleteGatewayServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteGatewayServiceResponseBody(name='body'),
}

async function deleteGatewayService(request: DeleteGatewayServiceRequest): DeleteGatewayServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGatewayService', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGatewayServiceVersionRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-b6988bd16920479d9104e1729f97****', position='Query'),
  serviceId?: long(name='ServiceId', description='The ID of the service.', example='777', position='Query'),
  serviceVersion?: string(name='ServiceVersion', description='The version of the service.', example='{\\"name\\":\\"app\\",\\"labels\\":[{\\"key\\":\\"app\\",\\"value\\":\\"demo-server\\"}]}', position='Query'),
}

model DeleteGatewayServiceVersionResponseBody = {
  code?: int32(name='Code', description='The response code returned.', example='1'),
  data?: long(name='Data', description='The returned data.', example='1'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.

*   If the request is successful, a success message is returned.
*   If the request fails, an error message is returned, such as the "TaskId not found" message.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='29D52777-BE96-563E-BC6B-796ACE47A7A5'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model DeleteGatewayServiceVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteGatewayServiceVersionResponseBody(name='body'),
}

async function deleteGatewayServiceVersion(request: DeleteGatewayServiceVersionRequest): DeleteGatewayServiceVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGatewayServiceVersion', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGatewaySlbRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  deleteSlb?: boolean(name='DeleteSlb', description='Specifies whether to delete the SLB instance purchased for the gateway when you delete the gateway.', example='true', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-c9bc5afd61014165bd58f621b491****', position='Query'),
  id?: string(name='Id', description='The ID of the association record.', example='395', position='Query'),
  slbId?: string(name='SlbId', description='The ID of the SLB instance that needs to be deleted.', example='lb-uf6duug6s13x4abc8****', position='Query'),
}

model DeleteGatewaySlbResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='1'),
  data?: string(name='Data', description='The deletion result.', example='28'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.

*   If the request is successful, a success message is returned.
*   If the request fails, an error message is returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9297B27D-D932-5E9F-93B9-99D6C5F3A879'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model DeleteGatewaySlbResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteGatewaySlbResponseBody(name='body'),
}

async function deleteGatewaySlb(request: DeleteGatewaySlbRequest): DeleteGatewaySlbResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGatewaySlb', 'POST', '/', 'json', false, 'json', request);
}

model DeleteIsolationRulesRequest {
  regionId?: string(name='RegionId', position='Host'),
  acceptLanguage?: string(name='AcceptLanguage', example='zh', position='Query'),
  appName: string(name='AppName', example='spring-cloud-a', position='Query'),
  ids?: [ long ](name='Ids', shrink='json', position='Query'),
  namespace: string(name='Namespace', example='default', position='Query'),
}

model DeleteIsolationRulesResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ long ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='4E9FDCFE-0738-493B-B801-82BDFBCB****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteIsolationRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIsolationRulesResponseBody(name='body'),
}

async function deleteIsolationRules(request: DeleteIsolationRulesRequest): DeleteIsolationRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteIsolationRules', 'POST', '/', 'json', false, 'json', request);
}

model DeleteMigrationTaskRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  id?: string(name='Id', description='The ID of the task.', example='1', position='Query'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}', position='Query'),
}

model DeleteMigrationTaskResponseBody = {
  data?: boolean(name='Data', description='The deletion result.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8BD1E58D-0755-42AC-A599-E6B55112****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model DeleteMigrationTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMigrationTaskResponseBody(name='body'),
}

async function deleteMigrationTask(request: DeleteMigrationTaskRequest): DeleteMigrationTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteMigrationTask', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNacosConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  beta?: boolean(name='Beta', description='The error code returned if the request failed.', example='true', position='Query'),
  dataId: string(name='DataId', description='The ID of the request.', example='user-ds.yml', position='Query'),
  group: string(name='Group', description='The message returned.', example='HALVIE_MICRO_GROUP', position='Query'),
  instanceId: string(name='InstanceId', description='The HTTP status code.', example='mse_prepaid_public_cn-tl32epfyu18', position='Query'),
  namespaceId?: string(name='NamespaceId', description='The request is successfully processed.', example='0e9d849b-****-8435da6c21ad', position='Query'),
}

model DeleteNacosConfigResponseBody = {
  code?: string(name='Code', example='200'),
  errorCode?: string(name='ErrorCode', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='> The operation is not provided in Nacos SDKs. For information about Nacos SDKs, see the [official documentation](https://nacos.io/zh-cn/docs/sdk.html).', example='202'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Deletes a Nacos configuration.', example='4FEFC13F-EB50-51E1-97D8-C5CBA8CD1B84'),
  success?: boolean(name='Success', example='true'),
}

model DeleteNacosConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNacosConfigResponseBody(name='body'),
}

async function deleteNacosConfig(request: DeleteNacosConfigRequest): DeleteNacosConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNacosConfig', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNacosConfigsRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  ids: string(name='Ids', description='The IDs of configurations.', example='20024,20025,20026,20027,20034,20104,20394', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='mse_prepaid_public_cn-i7m2e32pd0n', position='Query'),
  namespaceId: string(name='NamespaceId', description='The ID of the namespace.', example='1ef93a21-3487-4367-a859-857d8****', position='Query'),
}

model DeleteNacosConfigsResponseBody = {
  code?: int32(name='Code', description='The response code returned.', example='200'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='73EB5563-CBB3-5F48-999D-512F4EFB7377'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model DeleteNacosConfigsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNacosConfigsResponseBody(name='body'),
}

/**
  * >  The current API operation is not provided in Nacos SDK. For more information about the Nacos-SDK API, see the [official documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
 * @tags cluster
 */
async function deleteNacosConfigs(request: DeleteNacosConfigsRequest): DeleteNacosConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNacosConfigs', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNacosInstanceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  clusterName?: string(name='ClusterName', description='The alias of the cluster.', example='DEFAULT', position='Query'),
  ephemeral: boolean(name='Ephemeral', description='Specifies whether the node is an ephemeral node. Valid values:

*   `true`: yes
*   `false`: no', example='false', position='Query'),
  groupName: string(name='GroupName', description='The name of the group.', example='DEFAULT_GROUP', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the Nacos instance.', example='mse-cn-st21v5****', position='Query'),
  ip: string(name='Ip', description='The IP address of the Nacos instance.', example='10.237.1.32', position='Query'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='9e78a671-4b9b-4dd4-99c1-0b9da87****', position='Query'),
  port: int32(name='Port', description='The port of the Nacos instance.', example='8080', position='Query'),
  serviceName: string(name='ServiceName', description='The name of the service.', example='hello_service', position='Query'),
}

model DeleteNacosInstanceResponseBody = {
  code?: int32(name='Code', description='The status code. The value 200 is returned if the request is successful.', example='200'),
  data?: string(name='Data', description='The data of the node.', example='OK'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message returned.', example='The request was successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8BD1E58D-0755-42AC-A599-E6B55112****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model DeleteNacosInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNacosInstanceResponseBody(name='body'),
}

/**
  * > The operation is not provided in Nacos SDKs. For information about Nacos SDKs, see the [official documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
 * @tags cluster
 */
async function deleteNacosInstance(request: DeleteNacosInstanceRequest): DeleteNacosInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNacosInstance', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNacosServiceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  groupName: string(name='GroupName', description='The name of the group.', example='DEFAULT_GROUP', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-123456', position='Query'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='9e78a671-4b9b-4dd4-99c1-0****', position='Query'),
  serviceName: string(name='ServiceName', description='The name of the service.', example='hello_service', position='Query'),
}

model DeleteNacosServiceResponseBody = {
  code?: int32(name='Code', description='The response code returned.', example='200'),
  data?: string(name='Data', description='The deletion result.', example='ok'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The returned message.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9e78a671-4b9b-4dd4-99c1-0b9da87d3dec'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model DeleteNacosServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNacosServiceResponseBody(name='body'),
}

/**
  * > The operation is not provided in Nacos SDKs. For information about Nacos SDKs, see the [official documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
 * @tags cluster
 */
async function deleteNacosService(request: DeleteNacosServiceRequest): DeleteNacosServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNacosService', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNamespaceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language in which you want to display the results. Valid values: zh and en. Default value: zh. The value zh indicates Chinese, and the value en indicates English.', example='zh', position='Query'),
  name?: string(name='Name', example='prod', maxLength=64, position='Query'),
  region?: string(name='Region', example='cn-hangzhou', position='Query'),
}

model DeleteNamespaceResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='NO_PERMISSION'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='abcde-efg'),
  success?: boolean(name='Success', example='true'),
}

model DeleteNamespaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNamespaceResponseBody(name='body'),
}

async function deleteNamespace(request: DeleteNamespaceRequest): DeleteNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNamespace', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSecurityGroupRuleRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  cascadingDelete?: boolean(name='CascadingDelete', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-83b0ddb569434f82b9fe8e4c60c40f7c', position='Query'),
  id?: long(name='Id', description='The destination ID.', example='93', position='Query'),
}

model DeleteSecurityGroupRuleResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: {
    description?: string(name='Description', description='The description.', example='auto-description1'),
    gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='103'),
    gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-7ea3da97b96543e19f6c597c****'),
    gmtCreate?: string(name='GmtCreate', description='The creation time.', example='2022-01-07 18:07:57'),
    gmtModified?: string(name='GmtModified', description='The modification time.', example='2022-01-11T14:12:55.000+0000'),
    id?: long(name='Id', description='The ID.', example='2'),
    ipProtocol?: string(name='IpProtocol', description='The transport layer protocol. The value of this parameter is case-insensitive. Valid values:

*   icmp
*   gre
*   tcp
*   udp
*   all: All protocols are supported.', example='tcp'),
    portRange?: string(name='PortRange', description='The range of ports for the transport layer protocol in the destination security group. Valid values:

*   When the IpProtocol parameter is set to tcp or udp, the port number range is 1 to 65535. The start port number and the end port number are separated by a forward slash (/). Example: 1/200.
*   If the IpProtocol parameter is set to icmp, the port number range is -1/-1, which indicates all ports.
*   If the IpProtocol parameter is set to gre, the port number range is -1/-1, which indicates all ports.
*   If the IpProtocol parameter is set to all, the port number range is -1/-1, which indicates all ports.', example='8443/8443'),
    securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group.', example='sg-uf6hgwe067prhg68agfa'),
  }(name='Data', description='The returned data.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='43E50CB7-258E-5AFF-9B93-ECC19928C699'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model DeleteSecurityGroupRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSecurityGroupRuleResponseBody(name='body'),
}

async function deleteSecurityGroupRule(request: DeleteSecurityGroupRuleRequest): DeleteSecurityGroupRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSecurityGroupRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteServiceSourceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-492af9b04bb4474cae9d645be850****', position='Query'),
  sourceId?: long(name='SourceId', description='The ID of the data source.', example='17', position='Query'),
}

model DeleteServiceSourceResponseBody = {
  code?: int32(name='Code', description='The response code returned.', example='1'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2CEF593F-D60C-5449-9E98-15CA6ECD9189'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model DeleteServiceSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteServiceSourceResponseBody(name='body'),
}

async function deleteServiceSource(request: DeleteServiceSourceRequest): DeleteServiceSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteServiceSource', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSwimmingLaneRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  laneId: long(name='LaneId', description='The ID of the lane.', example='229', position='Query'),
  namespace?: string(name='Namespace', description='The name of the Microservices Engine (MSE) namespace.', example='default', maxLength=64, position='Query'),
}

model DeleteSwimmingLaneResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code.', example='mse-100-000'),
  message?: string(name='Message', description='The error message returned.', example='The request was successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='69AD2AA7-DB47-449B-941B-B14409DF****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model DeleteSwimmingLaneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSwimmingLaneResponseBody(name='body'),
}

async function deleteSwimmingLane(request: DeleteSwimmingLaneRequest): DeleteSwimmingLaneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSwimmingLane', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSwimmingLaneGroupRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  groupId?: long(name='GroupId', description='The ID of the lane group.', example='145', position='Query'),
  name?: string(name='Name', description='The name.', example='example-app', position='Query'),
  namespace?: string(name='Namespace', description='The name of the Microservices Engine (MSE) namespace.', example='default', maxLength=64, position='Query'),
}

model DeleteSwimmingLaneGroupResponseBody = {
  data?: any(name='Data', description='The details of the data.', example='{}'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='mse-100-000'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='52BA6DA6-A702-4362-A32F-DFF79655****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model DeleteSwimmingLaneGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSwimmingLaneGroupResponseBody(name='body'),
}

async function deleteSwimmingLaneGroup(request: DeleteSwimmingLaneGroupRequest): DeleteSwimmingLaneGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSwimmingLaneGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteZnodeRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  clusterId: string(name='ClusterId', description='The ID of the instance.', example='mse-09k1q11****', position='Query'),
  path: string(name='Path', description='The path of the node.', example='/zookeeper', position='Query'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}', position='Query'),
}

model DeleteZnodeResponseBody = {
  data?: {
    data?: string(name='Data', description='The data of the node.', example='cluster'),
    dir?: boolean(name='Dir', description='Indicates whether the node information was returned. Valid values:

*   `true`: The node information was returned.
*   `false`: The node information failed to be returned.', example='true'),
    name?: string(name='Name', description='The name of the node.', example='mse-bc1a29b0-160230875****-reg-center-0-1'),
    path?: string(name='Path', description='The path of the node.', example='/'),
  }(name='Data', description='The details of the data.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DC34E4A3-5F1C-4E40-86EA-02EDF967****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model DeleteZnodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteZnodeResponseBody(name='body'),
}

async function deleteZnode(request: DeleteZnodeRequest): DeleteZnodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteZnode', 'POST', '/', 'json', false, 'json', request);
}

model ExportNacosConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  appName?: string(name='AppName', description='The application tag.', example='qjl-gateway-openapi', deprecated='true', position='Query'),
  dataId?: string(name='DataId', description='The ID of the data that you want to export.

> 

*   Multiple export methods are supported.

*   If you want to export a single configuration, you must leave the Ids parameter empty and specify the DataID and Group parameters.', example='sms-mes-develop.prop****', deprecated='true', position='Query'),
  dataIds?: string(name='DataIds', description='The configuration group name and the ID of the configuration that you want to export. Separate multiple configurations with comma (,).', example='testGroup+testDataId1,testGroup+testDataId2', position='Query'),
  group?: string(name='Group', description='The name of the configuration group.', example='TIMEDTASK_COMMON_GROUP', deprecated='true', position='Query'),
  ids?: string(name='Ids', description='The ID of the primary key of a configuration item.

>  - Multiple export methods are supported. You must specify this parameter if you want to export multiple configurations. - You can obtain the value of this parameter by calling the ListNacosConfigs operation. - If you specify this parameter, multiple configurations are exported. The DataId and Group parameters are invalid.', example='1709,1710', deprecated='true', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-2r42ddc****', position='Query'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='ae77c258-4d4f-478f-baaa-084aee0****', position='Query'),
}

model ExportNacosConfigResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: {
    url?: string(name='Url', description='The URL that is used to download the exported configurations.', example='http://xxxxxxxxx'),
  }(name='Data', description='The details of the data.'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace **%s** in the **ErrMessage** parameter.

> If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request was successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='92245803-49B7-54CF-8D49-01A34A0E1CD6'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='True'),
}

model ExportNacosConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportNacosConfigResponseBody(name='body'),
}

/**
  * > The operation is not provided in Nacos SDKs. For information about Nacos SDKs, see the [official documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
 * @tags cluster
 */
async function exportNacosConfig(request: ExportNacosConfigRequest): ExportNacosConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportNacosConfig', 'POST', '/', 'json', false, 'json', request);
}

model ExportZookeeperDataRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  exportType?: string(name='ExportType', description='The type of the object that is exported. Valid values:

*   transactionLog: transaction logs
*   snapshot: snapshots', example='snapshot', position='Query'),
  instanceId?: string(name='InstanceId', description='The instance ID.', example='mse-cn-78v1l83****', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the instance resides. The region is supported by Microservices Engine (MSE).', example='cn-hangzhou', position='Query'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}', position='Query'),
}

model ExportZookeeperDataResponseBody = {
  data?: {
    contentMap?: map[string]any(name='ContentMap', description='The content of a task.'),
    createTime?: long(name='CreateTime', description='The creation time.', example='1631001140913'),
    exportType?: string(name='ExportType', description='The type of the object that is exported. Valid values:

*   transactionLog: transaction logs
*   snapshot: snapshots', example='snapshot'),
    extend?: string(name='Extend', description='The extended information.', example='{}'),
    id?: int32(name='Id', description='The ID of the task.', example='1'),
    instanceId?: string(name='InstanceId', description='The ID of the instance', example='mse-cn-st21ri2****'),
    kubeoneTaskIds?: string(name='KubeoneTaskIds', description='The ID of the associated task at the underlying layer. This parameter is used only to troubleshoot failures.', example='10'),
    status?: string(name='Status', description='The status of the task. Valid values:

*   CREATE: The object is being created.
*   RUNNING: The task is running.
*   FINISH: The task is completed.
*   FAILED: The task fails.
*   EXPIRE: The task has expired.', example='FINISH'),
    updateTime?: long(name='UpdateTime', description='The last update time.', example='1632979237663'),
  }(name='Data', description='The details of the data.'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the \\*\\*%s\\*\\* variable in the **ErrMessage** parameter.

> If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.

*   If the request is successful, a success message is returned.
*   If the request fails, an error message is returned.', example='The request was successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='25EA0A83-9007-4E87-808C-637BE1A****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model ExportZookeeperDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportZookeeperDataResponseBody(name='body'),
}

/**
  * Only one task can run at a time.
  *
 * @tags cluster
 */
async function exportZookeeperData(request: ExportZookeeperDataRequest): ExportZookeeperDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportZookeeperData', 'POST', '/', 'json', false, 'json', request);
}

model FetchLosslessRuleListRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh-CN', position='Query'),
  appId?: string(name='AppId', description='The ID of the application.', example='hyaziyb6sc@86827c61f5ed8fc', position='Query'),
  appName?: string(name='AppName', description='The name of the application.', example='spring-boot-sample', position='Query'),
  namespace?: string(name='Namespace', description='The namespace.', example='default', position='Query'),
  pageNumber: int32(name='PageNumber', description='The page number.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='The number of entries per page.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-beijing', position='Query'),
}

model FetchLosslessRuleListResponseBody = {
  code?: int32(name='Code', description='The response code returned.', example='200'),
  data?: {
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    results?: [ 
      {
        aligned?: boolean(name='Aligned', description='Indicates whether service registration is complete before readiness probe.', example='true'),
        appId?: string(name='AppId', description='The ID of the application.', example='hkhon1po62@24810bf4364aea1'),
        appName?: string(name='AppName', description='The name of the application.', example='echo-demo'),
        count?: int32(name='Count', description='The number of instances.', example='3'),
        delayTime?: int32(name='DelayTime', description='The registration latency. Unit: seconds.', example='60'),
        enable?: boolean(name='Enable', description='Indicates whether graceful start is enabled. Valid values:

*   `true`: enabled
*   `false`: disabled', example='true'),
        funcType?: int32(name='FuncType', description='The slope of the prefetching curve.', example='2'),
        lossLessDetail?: boolean(name='LossLessDetail', description='Indicates whether online and offline processing details are displayed.', example='false'),
        notice?: boolean(name='Notice', description='Indicates whether notification is enabled.', example='true'),
        related?: boolean(name='Related', description='Indicates whether service prefetching is complete before readiness probe.', example='false'),
        warmupTime?: int32(name='WarmupTime', description='The prefetching duration. Unit: seconds.', example='60'),
      }
    ](name='Results', description='The returned data.'),
    totalSize?: int32(name='TotalSize', description='The total number of entries returned.', example='36'),
  }(name='Data', description='The returned result.'),
  errorCode?: string(name='ErrorCode', example='Success'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='56D9E600-6348-4260-B35F-583413F****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='True'),
}

model FetchLosslessRuleListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FetchLosslessRuleListResponseBody(name='body'),
}

/**
  * You can call this operation to query the rules for graceful start and shutdown.
  *
 * @tags msc
 */
async function fetchLosslessRuleList(request: FetchLosslessRuleListRequest): FetchLosslessRuleListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FetchLosslessRuleList', 'POST', '/', 'json', false, 'json', request);
}

model GetAppMessageQueueRouteRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  appId: string(name='AppId', description='The ID of the application.', example='hkhon1po62@c3df23522baa898', position='Query'),
  appName?: string(name='AppName', description='The name of the application.', example='example-app', maxLength=64, position='Query'),
  namespace?: string(name='Namespace', description='The name of the Microservices Engine (MSE) namespace.', example='default', maxLength=64, position='Query'),
  region: string(name='Region', description='The region where the instance resides. Examples:

*   `cn-hangzhou`: China (Hangzhou)
*   `cn-beijing`: China (Beijing)
*   `cn-shanghai`: China (Shanghai)
*   `cn-zhangjiakou`: China (Zhangjiakou)
*   `cn-shenzhen`: China (Shenzhen)', example='cn-hangzhou', position='Query'),
}

model GetAppMessageQueueRouteResponseBody = {
  code?: int32(name='Code', description='The response code returned.', example='200'),
  data?: {
    appId?: string(name='AppId', description='The ID of the application.', example='hkhon1po62@54e1f42f37cd65a'),
    enable?: boolean(name='Enable', description='Indicates whether the canary release for messaging feature is enabled.

*   `true`: enabled
*   `false`: disabled', example='true'),
    filterSide?: string(name='FilterSide', description='The side for message filtering when the canary release for messaging feature is enabled.', example='Server'),
    region?: string(name='Region', description='The region ID.', example='cn-hangzhou'),
    tags?: [ string ](name='Tags', description='The tags used to ignore message consumption for nodes in untagged environments.'),
  }(name='Data', description='The data returned.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.

*   If the request is successful, a success message is returned.
*   If the request fails, an error message is returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4B00BCB0-105F-5A2A-B75B-641C8E9B18FC'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values: true and false. The value true indicates that the request was successful. The value false indicates that the request failed.', example='true'),
}

model GetAppMessageQueueRouteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAppMessageQueueRouteResponseBody(name='body'),
}

async function getAppMessageQueueRoute(request: GetAppMessageQueueRouteRequest): GetAppMessageQueueRouteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAppMessageQueueRoute', 'POST', '/', 'json', false, 'json', request);
}

model GetApplicationInstanceListRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language in which you want to display the results. Valid values: zh and en. zh indicates Chinese, which is the default value. en indicates English.', example='zh', position='Query'),
  appId?: string(name='AppId', description='The application ID.', example='abcde@12345', deprecated='true', position='Query'),
  appName?: string(name='AppName', description='The application name.', example='example-app', maxLength=64, position='Query'),
  namespace?: string(name='Namespace', description='The Microservices Engine (MSE) namespace to which the application belongs.', example='default', maxLength=64, position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20', position='Query'),
  region?: string(name='Region', description='The region.', example='cn-hangzhou', position='Query'),
  tag?: string(name='Tag', description='The tags that you want to add to nodes.', example='gray', position='Query'),
}

model GetApplicationInstanceListResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    result?: [ 
      {
        ip?: string(name='Ip', description='The node IP address.', example='10.1.2.3'),
        port?: string(name='Port', description='The application port.', example='8080'),
        tags?: [ 
          {
            tag?: string(name='Tag', description='标签值。', example='gray'),
          }
        ](name='Tags', description='The node tags.'),
      }
    ](name='Result', description='The queried nodes.'),
    totalSize?: int32(name='TotalSize', description='The total number of nodes.', example='100'),
  }(name='Data', description='The returned data.'),
}

model GetApplicationInstanceListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetApplicationInstanceListResponseBody(name='body'),
}

async function getApplicationInstanceList(request: GetApplicationInstanceListRequest): GetApplicationInstanceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetApplicationInstanceList', 'POST', '/', 'json', false, 'json', request);
}

model GetApplicationListRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  appId?: string(name='AppId', description='The ID of an application.', example='hkhon1po62@c3df23522b*****', position='Query'),
  appName?: string(name='AppName', description='The name of an application.', example='rest-container', position='Query'),
  language?: string(name='Language', description='The programming language of the application, such as Java and Go.', example='Java', position='Query'),
  namespace?: string(name='Namespace', description='The microservice namespace to which the application belongs.', example='default', maxLength=64, position='Query'),
  pageNumber: int32(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='The number of entries to return on each page.', example='10', position='Query'),
  region: string(name='Region', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  sentinelEnable?: boolean(name='SentinelEnable', description='Specifies whether to enable the Sentinel-compatible mode.', example='true', position='Query'),
  source?: string(name='Source', description='The source of the application. The value is fixed as edasmsc.', example='edasmsc', position='Query'),
  switchEnable?: boolean(name='SwitchEnable', description='Specifies whether to enable switching.', example='true', position='Query'),
}

model GetApplicationListResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    result?: [ 
      {
        appId?: string(name='AppId', description='The ID of the application.', example='hkhon1po62@5f1b08becb*****'),
        appName?: string(name='AppName', description='The name of the application.', example='finance'),
        extraInfo?: string(name='ExtraInfo', description='The additional information.', example='{}'),
        instancesNumber?: int32(name='InstancesNumber', description='The number of instances.', example='1'),
        language?: string(name='Language', description='The programming language of the application.', example='JAVA'),
        namespace?: string(name='Namespace', description='The microservice namespace to which the application belongs.', example='default'),
        regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
        source?: string(name='Source', description='The source of the application.', example='edasmsc'),
        status?: long(name='Status', description='The status.', example='0'),
        userId?: string(name='UserId', description='The user ID.', example='1234567890'),
      }
    ](name='Result', description='The data returned.'),
    totalSize?: int32(name='TotalSize', description='The total number of entries returned.', example='11'),
  }(name='Data', description='The details of the data.'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F55E608F-7C15-****-9CFD-DF832EBC4A0F'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model GetApplicationListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetApplicationListResponseBody(name='body'),
}

async function getApplicationList(request: GetApplicationListRequest): GetApplicationListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetApplicationList', 'POST', '/', 'json', false, 'json', request);
}

model GetBlackWhiteListRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-32d5c9769c1842b1a2cc3426c59e****', position='Query'),
  isWhite?: boolean(name='IsWhite', description='Specifies whether to enable the whitelist.', example='true', position='Query'),
  resourceType?: string(name='ResourceType', description='The type of the resource.', example='GATEWAY', position='Query'),
  type?: string(name='Type', description='The type.', example='IP', position='Query'),
}

model GetBlackWhiteListResponseBody = {
  code?: int32(name='Code', description='The status code returned. A value of 200 indicates that the request is successful.', example='200'),
  data?: {
    content?: string(name='Content', description='The content of the blacklist.', example='text'),
    gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='1'),
    gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-7ea3da97b96543e19f6c597c****'),
    gmtCreate?: string(name='GmtCreate', description='The creation time.', example='2022-01-07T10:07:57.000+0000'),
    gmtModified?: string(name='GmtModified', description='The modification time.', example='2022-01-07T10:07:57.000+0000'),
    id?: long(name='Id', description='The ID.', example='275'),
    isWhite?: boolean(name='IsWhite', description='Indicates whether the whitelist is enabled.', example='true'),
    resourceId?: long(name='ResourceId', description='The ID of the resource.', example='1'),
    resourceType?: string(name='ResourceType', description='The type of a resource.', example='GATEWAY'),
    status?: string(name='Status', description='The status of the blacklist or whitelist.', example='on'),
    type?: string(name='Type', description='The type.', example='IP'),
  }(name='Data', description='The data of the node.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='89CBC928-4F57-51FA-A413-EE0F4CD87200'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model GetBlackWhiteListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBlackWhiteListResponseBody(name='body'),
}

async function getBlackWhiteList(request: GetBlackWhiteListRequest): GetBlackWhiteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBlackWhiteList', 'POST', '/', 'json', false, 'json', request);
}

model GetEngineNamepaceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='mse-98s****', position='Query'),
  id?: string(name='Id', description='The destination ID.', example='0e958d79-****-b282-b702d66362b5', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse.cn-hangzhou.aliyuncs.com', position='Query'),
}

model GetEngineNamepaceResponseBody = {
  configCount?: string(name='ConfigCount', description='The number of configurations.', example='1'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code returned.', example='202'),
  message?: string(name='Message', description='The message returned.', example='success'),
  namespace?: string(name='Namespace', description='The ID of the namespace.', example='public'),
  namespaceDesc?: string(name='NamespaceDesc', description='The description of the namespace.', example='mytest'),
  namespaceShowName?: string(name='NamespaceShowName', description='The display name of the namespace.', example='public'),
  quota?: string(name='Quota', description='The quota of configurations.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='FA8F966F-420C-52F5-B49E-6ED7CCE02697'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
  type?: string(name='Type', description='The type of the namespace. Valid values:

*   0: global configuration
*   1: default namespace
*   2: custom namespace', example='1'),
}

model GetEngineNamepaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEngineNamepaceResponseBody(name='body'),
}

async function getEngineNamepace(request: GetEngineNamepaceRequest): GetEngineNamepaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEngineNamepace', 'POST', '/', 'json', false, 'json', request);
}

model GetGatewayRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-685f661467b54f48b7b7a76605ce****', position='Query'),
}

model GetGatewayResponseBody = {
  code?: int32(name='Code', description='The status code returned. A value of 200 indicates that the request is successful.', example='200'),
  data?: {
    chargeType?: string(name='ChargeType', description='The billing method, such as subscription or pay-as-you-go.', example='POSTPAY'),
    elastic?: boolean(name='Elastic', description='Indicates whether auto scale-out is enabled.', example='true'),
    elasticPolicy?: {
      elasticType?: string(name='ElasticType', description='The type of auto scale-out. Valid value:

*   CronHPA: scale-out by time', example='CronHPA'),
      maxReplica?: int32(name='MaxReplica', description='The maximum number of instances that are automatically scaled out. This parameter is used for horizontal scale-out.', example='5'),
      timePolicyList?: [ 
        {
          desiredReplica?: int32(name='DesiredReplica', description='The number of expected replicas.', example='2'),
          endTime?: string(name='EndTime', description='The end time of auto scale-out.', example='18:00'),
          startTime?: string(name='StartTime', description='The start time of auto scale-out.', example='16:00'),
        }
      ](name='TimePolicyList', description='The policy of scale-out by time.'),
    }(name='ElasticPolicy', description='The auto scale-out policy.'),
    elasticReplica?: int32(name='ElasticReplica', description='The number of replicas that are automatically scaled out.', example='1'),
    elasticType?: string(name='ElasticType', description='The type of auto scale-out. Valid value:

*   CronHPA: scale-out by time', example='CronHPA'),
    endDate?: string(name='EndDate', description='The time when the gateway expires.', example='2021-08-01 00:00:00'),
    gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-7ea3da97b96543e19f6c597cd4a9****'),
    gmtCreate?: string(name='GmtCreate', description='The time when the gateway was created. The time is displayed in GMT. The time is the local time of the region in which the gateway resides.', example='2022-01-07T10:07:57.000+0000'),
    gmtModified?: string(name='GmtModified', description='The time when the gateway was last modified.', example='2022-01-07T10:07:57.000+0000'),
    id?: long(name='Id', description='The ID of the gateway.', example='12'),
    instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-st21ri2****'),
    logConfigDetails?: {
      logEnabled?: boolean(name='LogEnabled', description='Indicates whether Log Service is activated.', example='true'),
      logStoreName?: string(name='LogStoreName', description='The name of the Logstore.', example='mse_access_log'),
      projectName?: string(name='ProjectName', description='The name of the project.', example='k8s-log-c173117256e934a96b7fefdf2ef8a8057'),
    }(name='LogConfigDetails', description='The log configuration.'),
    mseTag?: string(name='MseTag', description='The tag of the resource.', example='{"TagKey":"TagValue"}'),
    name?: string(name='Name', description='The name of the gateway.', example='DEFAULT'),
    primaryUser?: string(name='PrimaryUser', description='The Alibaba Cloud account ID of the user who created the gateway.', example='1231254'),
    region?: string(name='Region', description='The region ID.', example='cn-hangzhou'),
    replica?: int32(name='Replica', description='The number of gateway replicas.', example='2'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfm34x43l*****'),
    securityGroup?: string(name='SecurityGroup', description='The ID of the security group.', example='sg-bp11ufzqn6mmb8dtzz82'),
    spec?: string(name='Spec', description='The specifications of the gateway.', example='MSE_GTW_16_32_200_c'),
    status?: int32(name='Status', description='The status of the gateway. Valid values:

*   0: The gateway is being created.
*   1: The gateway fails to be created.
*   2: The gateway is running.
*   3: The gateway is changing.
*   4: The gateway is scaling in.
*   6: The gateway is scaling out.
*   8: The gateway is being deleted.
*   10: The gateway is restarting.
*   11: The gateway is being rebuilt.
*   12: The gateway is updating.
*   13: The gateway fails to be updated.', example='0'),
    statusDesc?: string(name='StatusDesc', description='The description of the status.', example='Restarting'),
    totalReplica?: int32(name='TotalReplica', description='The total number of replicas, including the number of replicas that are automatically scaled out.', example='3'),
    vpc?: string(name='Vpc', description='The ID of the VPC.', example='vpc-bp1328cm01m6uel42b5zb'),
    vswitch?: string(name='Vswitch', description='The ID of the vSwitch.', example='vsw-bp18zeqxx6mpuq843z4n5'),
    vswitch2?: string(name='Vswitch2', description='The ID of the secondary vSwitch.', example='vpc-bp1j6ivhav15ve7q54kq2'),
    xtraceDetails?: {
      sample?: int32(name='Sample', description='The sampling rate of Tracing Analysis.', example='10'),
      traceOn?: boolean(name='TraceOn', description='Indicates whether sampling by using Tracing Analysis is enabled.', example='true'),
    }(name='XtraceDetails', description='The details of Tracing Analysis.'),
  }(name='Data', description='The information about the gateway.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9C96CDF8-9E6C-5AB6-B83C-8F87A10117E6'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model GetGatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetGatewayResponseBody(name='body'),
}

async function getGateway(request: GetGatewayRequest): GetGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetGateway', 'POST', '/', 'json', false, 'json', request);
}

model GetGatewayAuthConsumerDetailRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-1a4ab101d5924b6f92c5ec98a84*****', position='Query'),
  id: long(name='Id', description='The ID of the consumer.', example='120', position='Query'),
}

model GetGatewayAuthConsumerDetailResponseBody = {
  code?: int32(name='Code', description='The status code. A value of 200 is returned if the request is successful.', example='200'),
  data?: {
    consumerStatus?: boolean(name='ConsumerStatus', description='The status of the consumer. Valid values:

*   true: enabled
*   false: disabled', example='true'),
    description?: string(name='Description', description='The description.', example='Description'),
    encodeType?: string(name='EncodeType', description='The encryption type. Valid values:

*   RSA
*   OCT', example='RSA'),
    gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-7ea3da97b96543e19f6c597cd4a9****'),
    gmtCreate?: string(name='GmtCreate', description='The time when the consumer authentication record was created.', example='2031-03-30 02:35:12'),
    gmtModified?: string(name='GmtModified', description='The time when the consumer authentication record was modified.', example='2023-02-01 14:17:57'),
    id?: long(name='Id', description='The ID of the consumer.', example='12'),
    jwks?: string(name='Jwks', description='The JWT public key. The JSON format is supported.', example='{
      "keys": [
            {
                  "e": "AQAB",
                  "kid": "DHFbpoIUqrY8t2zpA2qXfCmr5VO5ZEr4RzHU_-envvQ",
                  "kty": "RSA",
                  "n": "xAE7eB6qugXyCAG3yhh7pkDkT65pHymX-P7KfIupjf59vsdo91bSP9C8H07pSAGQO1MV_xFj9VswgsCg4R6otmg5PV2He95lZdHtOcU5DXIg_pbhLdKXbi66GlVeK6ABZOUW3WYtnNHD-91gVuoeJT_DwtGGcp4ignkgXfkiEm4sw-4sfb4qdt5oLbyVpmW6x9cfa7vs2WTfURiCrBoUqgBo_-4WTiULmmHSGZHOjzwa8WtrtOQGsAFjIbno85jp6MnGGGZPYZbDAa_b3y5u-YpW7ypZrvD8BgtKVjgtQgZhLAGezMt0ua3DRrWnKqTZ0BJ_EyxOGuHJrLsn00fnMQ"
            }
      ]
}'),
    keyName?: string(name='KeyName', description='The name of the key used for JWT-based identity authentication.', example='iss'),
    keyValue?: string(name='KeyValue', description='The value of the key used for JWT-based identity authentication.', example='abcd'),
    name?: string(name='Name', description='The name of the consumer.', example='test'),
    primaryUser?: string(name='PrimaryUser', description='The creator.', example='123'),
    resourceList?: [ 
      {
        consumerId?: long(name='ConsumerId', description='The consumer ID.', example='123'),
        gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-4822033a8513496fa10f05c934f*****'),
        gmtCreate?: string(name='GmtCreate', description='The time when the resource associated with the consumer authentication record was created.', example='2022-12-06 01:38:03'),
        gmtModified?: string(name='GmtModified', description='The time when the resource associated with the consumer authentication record was modified.', example='2022-12-06 01:38:03'),
        id?: long(name='Id', description='The ID of the authorized resource for the consumer.', example='16'),
        resourceStatus?: boolean(name='ResourceStatus', description='The resource authorization state. Valid values:

*   true: Resource authorization is enabled.
*   false: Resource authorization is disabled.', example='true'),
        routeId?: long(name='RouteId', description='The ID of the route.', example='3458'),
        routeName?: string(name='RouteName', description='The name of the route.', example='test'),
      }
    ](name='ResourceList', description='The resource list.'),
    tokenName?: string(name='TokenName', description='The names of the parameters that are required to verify each token. By default, each token is prefixed with Bearer and stored in the Authorization header, such as `Authorization: Bearer <Content of a token>`.', example='Authorization'),
    tokenPass?: boolean(name='TokenPass', description='Specifies whether to enable pass-through.', example='true'),
    tokenPosition?: string(name='TokenPosition', description='The positions of the parameters that are required to verify each token. By default, each token is prefixed with Bearer and stored in the Authorization header, such as `Authorization: Bearer <Content of a token>`.', example='HEADER'),
    tokenPrefix?: string(name='TokenPrefix', description='The prefixes of the parameters that are required to verify each token. By default, each token is prefixed with Bearer and stored in the Authorization header, such as `Authorization: Bearer <Content of a token>`.', example='Bearer'),
    type?: string(name='Type', description='The authentication type. Valid values:

*   JWT', example='JWT'),
  }(name='Data', description='The data returned.'),
  dynamicCode?: string(name='DynamicCode', description='The dynamic part in the error message.', example='code'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the \\*\\*%s\\*\\* variable in the **ErrMessage** parameter.

>  If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code that is returned.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model GetGatewayAuthConsumerDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetGatewayAuthConsumerDetailResponseBody(name='body'),
}

async function getGatewayAuthConsumerDetail(request: GetGatewayAuthConsumerDetailRequest): GetGatewayAuthConsumerDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetGatewayAuthConsumerDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetGatewayAuthDetailRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh', position='Query'),
  gatewayId?: long(name='GatewayId', example='2274', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-6f0dbd108a0249d2b675b3ef50b*****', position='Query'),
  id?: long(name='Id', example='1100', position='Query'),
}

model GetGatewayAuthDetailResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    authResourceConfig?: string(name='AuthResourceConfig'),
    authResourceMode?: int32(name='AuthResourceMode', example='0'),
    clientId?: string(name='ClientId', example='example-app'),
    clientSecret?: string(name='ClientSecret', example='xxxxx'),
    cookieDomain?: string(name='CookieDomain', example='hello.com'),
    externalAuthZ?: {
      allowRequestHeaders?: [ string ](name='AllowRequestHeaders'),
      allowUpstreamHeaders?: [ string ](name='AllowUpstreamHeaders'),
      bodyMaxBytes?: int32(name='BodyMaxBytes', example='4000000'),
      isRestrict?: boolean(name='IsRestrict', example='true'),
      prefixPath?: string(name='PrefixPath', example='/auth'),
      service?: {
        groupName?: string(name='GroupName', example='test'),
        name?: string(name='Name', example='httpbin-auth-service'),
        namespace?: string(name='Namespace', example='default'),
        sourceType?: string(name='SourceType', example='K8S'),
      }(name='Service'),
      serviceId?: long(name='ServiceId', example='15300'),
      timeout?: int32(name='Timeout', example='10'),
      tokenKey?: string(name='TokenKey', example='Authorization'),
      withRequestBody?: boolean(name='WithRequestBody', example='true'),
    }(name='ExternalAuthZ'),
    gatewayId?: long(name='GatewayId', example='2274'),
    gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-6f0dbd108a0249d2b675b3ef50b*****'),
    gmtCreate?: string(name='GmtCreate', example='2024-02-19T02:41:03.000+0000'),
    gmtModified?: string(name='GmtModified', example='2024-02-19T02:41:03.000+0000'),
    id?: long(name='Id', example='1100'),
    isWhite?: boolean(name='IsWhite', example='true'),
    issuer?: string(name='Issuer', example='https://example.com/auth'),
    jwks?: string(name='Jwks', example='{\\n  \\"keys\\":[\\n    {\\n      \\"kty\\": \\"RSA\\",\\n      \\"e\\": \\"AQAB\\",\\n      \\"use\\": \\"sig\\",\\n      \\"kid\\": \\"1rGufmH1YN8rqM9ZOLgo7eEST3AnL89Y-m-XGFioLoA\\",\\n      \\"alg\\": \\"RS256\\",\\n      \\"n\\": \\"rM2GIc0YTMqwNCwXnjKbW5QndkCEZgyLu3uQUnyZF7HvMTekiTvQg_39mg3dV1eaYYkYfZBogyroJBqAQXhk6VVCxlBjFVp2xstJPVWngMOOlcafwN_BKdN-EQ06O_Uu__e7gNKI3DunkNk0cNaFETE7d4meRYyTlgEzYgsrW05_ufR0BKoddL3E5JsCpUxRjH9ICbodBx0U74W6Dcci-R2EA1DBrEcboE6n90uoJs6UJNriAK_71nAsYonihU5aQFFnyPTkJHfRwHK6JlME6rn-b-rpLSpdyc6U1nOFZP2DEpz8U5FrYoLYSZIU-MQGxDhCnGc_rxl2IyP9B2qcCQ\\"\\n    }\\n  ]\\n}\\n'),
    loginUrl?: string(name='LoginUrl', example='https://daxxxxcn.aliyunidaas.com/'),
    name?: string(name='Name', example='test'),
    redirectUrl?: string(name='RedirectUrl', example='https://yourdomain/path'),
    resourceList?: [ 
      {
        authId?: long(name='AuthId', example='2274'),
        authResourceHeaderList?: [ 
          {
            headerKey?: string(name='HeaderKey', example='x-req'),
            headerMethod?: string(name='HeaderMethod', example='EQUAL'),
            headerValue?: string(name='HeaderValue', example='123'),
          }
        ](name='AuthResourceHeaderList'),
        domainId?: long(name='DomainId', example='1765'),
        domainName?: string(name='DomainName', example='example.com'),
        gatewayId?: long(name='GatewayId', example='2274'),
        gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-6f0dbd108a0249d2b675b3ef50b*****'),
        gmtCreate?: string(name='GmtCreate', example='2024-02-19T03:32:38.000+0000'),
        gmtModified?: string(name='GmtModified', example='2024-02-19T03:32:38.000+0000'),
        id?: long(name='Id', example='1303'),
        ignoreCase?: boolean(name='IgnoreCase', example='true'),
        isWhite?: boolean(name='IsWhite', example='true'),
        matchType?: string(name='MatchType', example='EQUAL'),
        path?: string(name='Path', example='/test'),
      }
    ](name='ResourceList'),
    scopesList?: string(name='ScopesList', example='["openid","email"]'),
    status?: boolean(name='Status', example='false'),
    sub?: string(name='Sub', example='https://example.com/auth'),
    tokenName?: string(name='TokenName', example='Authorization'),
    tokenNamePrefix?: string(name='TokenNamePrefix', example='Bearer'),
    tokenPass?: boolean(name='TokenPass', example='true'),
    tokenPosition?: string(name='TokenPosition', example='HEADER'),
    type?: string(name='Type', example='JWT'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='9C96CDF8-9E6C-XXXX-XXXX-8F87A10117E6'),
  success?: boolean(name='Success', example='true'),
}

model GetGatewayAuthDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetGatewayAuthDetailResponseBody(name='body'),
}

async function getGatewayAuthDetail(request: GetGatewayAuthDetailRequest): GetGatewayAuthDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetGatewayAuthDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetGatewayDomainDetailRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-6d0b23e1d39e41658a968d79a635****', position='Query'),
  id?: string(name='Id', description='The domain ID.', example='29', position='Query'),
}

model GetGatewayDomainDetailResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='403'),
  data?: {
    afterDate?: long(name='AfterDate', description='The start time.', example='2021-04-01 02:35:12'),
    algorithm?: string(name='Algorithm', description='The algorithm.', example='RSA'),
    beforeDate?: long(name='BeforeDate', description='The expiration time.', example='2021-04-01 02:35:12'),
    certIdentifier?: string(name='CertIdentifier', description='The ID of the certificate.', example='234-cn-hangzhou'),
    certName?: string(name='CertName', description='The name of the certificate.', example='test'),
    commonName?: string(name='CommonName', description='The public domain name.', example='name'),
    gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='1'),
    gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-7ea3da97b96543e19f6c597cd4a9****'),
    gmtAfter?: string(name='GmtAfter', description='The start time.', example='2021-04-01 02:35:12'),
    gmtBefore?: string(name='GmtBefore', description='The expiration time.', example='2021-04-01 02:35:12'),
    gmtCreate?: string(name='GmtCreate', description='The creation time.', example='2022-01-07T10:07:57.000+0000'),
    gmtModified?: string(name='GmtModified', description='The update time.', example='2022-01-07T10:07:57.000+0000'),
    http2?: string(name='Http2', description='Indicates whether `HTTP/2` is enabled.

*   `open`: `HTTP/2` is enabled.
*   `close`: `HTTP/2` is disabled.
*   `globalConfig`: Global configurations are used.', example='close'),
    id?: long(name='Id', description='The ID.', example='12'),
    issuer?: string(name='Issuer', description='The issuer.', example='Istio'),
    mustHttps?: boolean(name='MustHttps', description='Indicates whether HTTPS is forcibly used.', example='true'),
    name?: string(name='Name', description='The domain name.', example='test.com'),
    protocol?: string(name='Protocol', description='The protocol of the gateway.', example='HTTP'),
    sans?: string(name='Sans', description='The name of the extended field.', example='test.com'),
    tlsMax?: string(name='TlsMax', description='The maximum version of Transport Layer Security (TLS).', example='TLS 1.3'),
    tlsMin?: string(name='TlsMin', description='The minimum version of TLS.', example='TLS 1.0'),
  }(name='Data', description='The returned data.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='88B83302-CD88-54D3-8DF2-208BFDC73F0D'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model GetGatewayDomainDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetGatewayDomainDetailResponseBody(name='body'),
}

async function getGatewayDomainDetail(request: GetGatewayDomainDetailRequest): GetGatewayDomainDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetGatewayDomainDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetGatewayOptionRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='429', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-c9bc5afd61014165bd58f621b491*****', position='Query'),
}

model GetGatewayOptionResponseBody = {
  code?: int32(name='Code', description='The status code returned. The value 200 indicates that the request is successfully processed.', example='200'),
  data?: GatewayOption(name='Data', description='The detailed configurations of the gateway.

*   **TraceDetails**: the sampling description of Managed Service for OpenTelemetry. Content: TraceEnabled indicates whether Managed Service for OpenTelemetry is activated. Sample indicates the sampling rate of Managed Service for OpenTelemetry.
*   **LogConfigDetails**: the description of Simple Log Service. Content: LogEnabled indicates whether Simple Log Service is activated. ProjectName indicates the Simple Log Service project to which logs are delivered. LogStoreName indicates the name of the Logstore.
*   **EnableHardwareAcceleration**: indicates whether hardware acceleration is enabled.
*   **DisableHttp2Alpn**: indicates whether the HTTP/2 protocol is disabled.
*   **EnableWaf**: indicates whether Web Application Firewall (WAF) is enabled.', example='{\\"LogConfigDetails\\": {\\"LogEnabled\\": False}, \\"TraceDetails\\": {\\"TraceEnabled\\": False}}'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.

*   If the request is successful, a success message is returned.
*   If the request fails, an error message is returned, such as the "TaskId not found" message.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C92F4A4D-A2FD-593E-839E-F3D4DFD2****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model GetGatewayOptionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetGatewayOptionResponseBody(name='body'),
}

async function getGatewayOption(request: GetGatewayOptionRequest): GetGatewayOptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetGatewayOption', 'POST', '/', 'json', false, 'json', request);
}

model GetGatewayRouteDetailRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-5d3a78a53ec947aa928212d671d400ac', position='Query'),
  routeId?: long(name='RouteId', description='The ID of the route.', example='1050', position='Query'),
}

model GetGatewayRouteDetailResponseBody = {
  code?: int32(name='Code', description='The status code returned. A value of 200 indicates that the request is successful.', example='200'),
  data?: {
    ahasStatus?: int32(name='AhasStatus', description='The status of Application High Availability Service (AHAS).', example='1'),
    cors?: {
      allowCredentials?: boolean(name='AllowCredentials', description='The credentials allowed.', example='true'),
      allowHeaders?: string(name='AllowHeaders', description='The headers allowed.', example='*'),
      allowMethods?: string(name='AllowMethods', description='The methods allowed.', example='GET,POST,PUT,DELETE,HEAD,OPTIONS,PATCH'),
      allowOrigins?: string(name='AllowOrigins', description='The origins allowed.', example='*'),
      exposeHeaders?: string(name='ExposeHeaders', description='The response headers.', example='*'),
      status?: string(name='Status', description='The status.', example='off'),
      timeUnit?: string(name='TimeUnit', description='The time unit.', example='h'),
      unitNum?: long(name='UnitNum', description='The unit number.', example='24'),
    }(name='Cors', description='The configuration for cross-origin resource sharing (CORS).'),
    defaultServiceId?: long(name='DefaultServiceId', description='The default service ID.', example='3'),
    defaultServiceName?: string(name='DefaultServiceName', description='The default service name.', example='test'),
    description?: string(name='Description', example='a route for xxx'),
    destinationType?: string(name='DestinationType', description='The destination service type.', example='Single'),
    directResponse?: {
      body?: string(name='Body', description='The mock return value.', example='{}'),
      code?: int32(name='Code', description='The response code returned.', example='200'),
    }(name='DirectResponse', description='The information about service mocking.'),
    domainId?: long(name='DomainId', description='The domain ID.', example='235'),
    domainIdList?: [ long ](name='DomainIdList', description='The IDs of domains.'),
    domainName?: string(name='DomainName', description='The domain name.', example='123.com'),
    domainNameList?: [ string ](name='DomainNameList', description='The list of domain names.'),
    enableWaf?: boolean(name='EnableWaf', description='Indicates whether Web Application Firewall (WAF) is activated.', example='true'),
    fallback?: boolean(name='Fallback', description='Indicates whether the Fallback service is enabled.', example='true'),
    fallbackServices?: [ 
      {
        agreementType?: string(name='AgreementType', description='The protocol type.', example='DUBBO'),
        groupName?: string(name='GroupName', description='The name of the group to which the service belongs.', example='test'),
        name?: string(name='Name', description='The name.', example='name'),
        namespace?: string(name='Namespace', description='The namespace to which the service belongs.', example='namespace'),
        percent?: int32(name='Percent', description='The weight in the form of a percentage value.', example='80'),
        serviceId?: long(name='ServiceId', description='The service ID.', example='1'),
        serviceName?: string(name='ServiceName', description='The service name.', example='name'),
        servicePort?: int32(name='ServicePort', description='The port number of the service.', example='8848'),
        sourceType?: string(name='SourceType', description='The source type of the service.', example='MSE'),
        version?: string(name='Version', description='The service version.', example='v1'),
      }
    ](name='FallbackServices', description='The information of the Fallback service.'),
    flowMirror?: {
      percentage?: int32(name='Percentage', description='流量复制比例（%），取值0-100。', example='90'),
      port?: int32(name='Port', description='目标服务端口。', example='8790'),
      status?: string(name='Status', description='开启状态，取值：

- on：开启
- off：关闭', example='on'),
      targetServiceId?: long(name='TargetServiceId', description='目标服务ID。', example='21'),
      targetServiceName?: string(name='TargetServiceName', description='目标服务名称。', example='test'),
    }(name='FlowMirror', description='流量镜像配置。'),
    gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='1'),
    gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-7ea3da97b96543e19f6c597c****'),
    gmtCreate?: string(name='GmtCreate', description='The creation time.', example='2022-01-07 18:07:57'),
    gmtModified?: string(name='GmtModified', description='The last modification time.', example='2022-01-07T10:07:57.000+0000'),
    HTTPRewrite?: {
      host?: string(name='Host', description='The hostname of the gateway.', example='aliyuncs.com'),
      path?: string(name='Path', description='The path of the node.', example='/test/client'),
      pathType?: string(name='PathType', description='The rewrite type.', example='PRE'),
      pattern?: string(name='Pattern', description='The matching pattern.', example='/test'),
      status?: string(name='Status', description='The status of the policy.', example='off'),
      substitution?: string(name='Substitution', description='The replacement.', example='test'),
    }(name='HTTPRewrite', description='The information about the rewrite policy.'),
    headerOp?: {
      headerOpItems?: [ 
        {
          directionType?: string(name='DirectionType', description='The request or response.', example='Response'),
          key?: string(name='Key', description='The header key.', example='debug'),
          opType?: string(name='OpType', description='The type of the operation.', example='Add'),
          value?: string(name='Value', description='The header value.', example='test'),
        }
      ](name='HeaderOpItems', description='The information about headers.'),
      status?: string(name='Status', description='The status.', example='off'),
    }(name='HeaderOp', description='The header settings.'),
    id?: long(name='Id', description='The ID.', example='1050'),
    name?: string(name='Name', description='The name.', example='test'),
    policies?: string(name='Policies', description='The routing policy in a JSON string.', example='{
      "CORS": "{\\"allowMethods\\":\\"GET,POST,PUT,DELETE,HEAD,OPTIONS,PATCH\\",\\"allowHeaders\\":\\"*\\",\\"exposeHeaders\\":\\"*\\",\\"unitNum\\":12,\\"allowCredentials\\":true,\\"status\\":\\"off\\",\\"allowOrigins\\":\\"*\\",\\"timeUnit\\":\\"h\\"}",
      "Timeout": "{\\"unitNum\\":10,\\"timeUnit\\":\\"s\\",\\"status\\":\\"off\\"}",
      "Retry": "{\\"attempts\\":2,\\"retryOn\\":[\\"5xx\\"],\\"status\\":\\"off\\"}",
      "HTTPRewrite": "{\\"pathType\\":\\"EQUAL\\",\\"path\\":\\"/o\\",\\"status\\":\\"off\\"}",
      "Waf": "{\\"enabled\\":false}",
      "HeaderOp": "{\\"status\\":\\"off\\",\\"headerOpItems\\":[{\\"directionType\\":\\"Request\\",\\"opType\\":\\"Add\\",\\"key\\":\\"kkk\\",\\"value\\":\\"ll\\"}]}"
}'),
    predicates?: string(name='Predicates', description='The matching conditions.', example='{}'),
    redirect?: {
      code?: int32(name='Code', description='The response code returned.', example='200'),
      host?: string(name='Host', description='The hostname.', example='16'),
      path?: string(name='Path', description='The path.', example='10111'),
    }(name='Redirect', description='The configuration of the redirection.'),
    retry?: {
      attempts?: int32(name='Attempts', description='The number of retries allowed.', example='1'),
      httpCodes?: [ string ](name='HttpCodes', description='The HTTP status codes.'),
      retryOn?: [ string ](name='RetryOn', description='The retry condition.'),
      status?: string(name='Status', description='The retry status.', example='on'),
    }(name='Retry', description='The retry configuration.'),
    routeOrder?: int32(name='RouteOrder', description='The sequence number of the route.', example='1'),
    routePredicates?: {
      headerPredicates?: [ 
        {
          key?: string(name='Key', description='The key of the request header.', example='id'),
          type?: string(name='Type', description='The route type.', example='PRE'),
          value?: string(name='Value', description='The value of the request header.', example='200'),
        }
      ](name='HeaderPredicates', description='The information about header matching.'),
      methodPredicates?: [ string ](name='MethodPredicates', description='The information about method matching.'),
      pathPredicates?: {
        ignoreCase?: boolean(name='IgnoreCase', description='Indicates whether case sensitivity is ignored.', example='true'),
        path?: string(name='Path', description='The path.', example='/api'),
        type?: string(name='Type', description='The matching type.', example='PRE'),
      }(name='PathPredicates', description='The information about route matching.'),
      queryPredicates?: [ 
        {
          key?: string(name='Key', description='The parameter name.', example='userid'),
          type?: string(name='Type', description='The route type.', example='PRE'),
          value?: string(name='Value', description='The value of the parameter.', example='test'),
        }
      ](name='QueryPredicates', description='The information about parameter matching.'),
    }(name='RoutePredicates', description='The information about route matching.'),
    routeServices?: [ 
      {
        agreementType?: string(name='AgreementType', description='The protocol type.', example='DUBBO'),
        groupName?: string(name='GroupName', description='The name of the group to which the service belongs.', example='api'),
        healthStatus?: string(name='HealthStatus', example='Health'),
        httpDubboTranscoder?: {
          dubboServiceGroup?: string(name='DubboServiceGroup'),
          dubboServiceName?: string(name='DubboServiceName'),
          dubboServiceVersion?: string(name='DubboServiceVersion'),
          mothedMapList?: [ 
            {
              dubboMothedName?: string(name='DubboMothedName'),
              httpMothed?: string(name='HttpMothed'),
              mothedpath?: string(name='Mothedpath'),
              paramMapsList?: [ 
                {
                  extractKey?: string(name='ExtractKey'),
                  extractKeySpec?: string(name='ExtractKeySpec'),
                  mappingType?: string(name='MappingType'),
                }
              ](name='ParamMapsList'),
              passThroughAllHeaders?: string(name='PassThroughAllHeaders'),
              passThroughList?: [ string ](name='PassThroughList'),
            }
          ](name='MothedMapList'),
        }(name='HttpDubboTranscoder'),
        name?: string(name='Name', description='The service name.', example='dubbo4'),
        namespace?: string(name='Namespace', description='The namespace.', example='acs_ecs_dashboard'),
        percent?: int32(name='Percent', description='The weight.', example='80'),
        serviceId?: long(name='ServiceId', description='The service ID.', example='782'),
        serviceName?: string(name='ServiceName', description='The service name.', example='xkc-crm'),
        servicePort?: int32(name='ServicePort', description='The port number of the service.', example='20880'),
        sourceType?: string(name='SourceType', description='The source type of the service.', example='MSE'),
        unhealthyEndpoints?: [ string ](name='UnhealthyEndpoints'),
        version?: string(name='Version', description='The service version.', example='v1'),
      }
    ](name='RouteServices', description='The services.'),
    services?: string(name='Services', description='The configurations of services.', example='[{\\"Percent\\":100,\\"ServiceId\\":126}]'),
    status?: int32(name='Status', description='The status of the route. Valid values:

*   0: unpublished
*   2: publishing
*   3: published
*   4: editing (updated but not published)
*   5: unpublishing
*   6: unavailable', example='0'),
    timeout?: {
      status?: string(name='Status', description='The status.', example='off'),
      timeUnit?: string(name='TimeUnit', description='The time unit.', example='s'),
      unitNum?: int32(name='UnitNum', description='The unit number.', example='10'),
    }(name='Timeout', description='The timeout configuration.'),
  }(name='Data', description='The data returned.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message returned if the request failed.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='FDF2D16C-5D28-5FAA-A56B-30BDE3559880'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model GetGatewayRouteDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetGatewayRouteDetailResponseBody(name='body'),
}

async function getGatewayRouteDetail(request: GetGatewayRouteDetailRequest): GetGatewayRouteDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetGatewayRouteDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetGatewayServiceDetailRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-f4c960ad071a48a790b36324394c****', position='Query'),
  serviceId?: long(name='ServiceId', description='The ID of the service.', example='35', position='Query'),
}

model GetGatewayServiceDetailResponseBody = {
  code?: int32(name='Code', description='The response code returned.', example='1'),
  data?: {
    gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='1'),
    gatewayTrafficPolicy?: TrafficPolicy(name='GatewayTrafficPolicy', description='The traffic policy of the service.', example='{}'),
    gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-7ea3da97b96543e19f6c597c****'),
    gmtCreate?: string(name='GmtCreate', description='The creation time.', example='2022-01-07 18:07:57'),
    gmtModified?: string(name='GmtModified', description='The last modification time.', example='2022-01-07T10:07:57.000+0000'),
    groupName?: string(name='GroupName', description='The name of the group.', example='test'),
    healthCheck?: string(name='HealthCheck', description='Indicates whether the health check is enabled.', example='true'),
    healthStatus?: string(name='HealthStatus', description='The status of the health check. Valid values:', example='true'),
    id?: long(name='Id', description='The ID of the service.', example='1'),
    ips?: [ string ](name='Ips', description='The IP address of the service.'),
    labelDetails?: [ 
      {
        key?: string(name='Key', description='The tag.', example='label'),
        values?: [ string ](name='Values', description='The tag values.'),
      }
    ](name='LabelDetails', description='The details of the tag.'),
    metaInfo?: string(name='MetaInfo', description='The basic information about the service.', example='{}'),
    name?: string(name='Name', description='The name of the service.', example='test'),
    namespace?: string(name='Namespace', description='The namespace.', example='default'),
    portTrafficPolicyList?: [ 
      {
        gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-2837hfd91h34dbg87364g*****'),
        gmtCreate?: string(name='GmtCreate', description='The time when the service was created.', example='1667460287386'),
        gmtModified?: string(name='GmtModified', description='The time when the service was modified.', example='1667460287386'),
        id?: long(name='Id', description='The ID of the port configuration.', example='1'),
        serviceId?: long(name='ServiceId', description='The service ID.', example='1'),
        servicePort?: int32(name='ServicePort', description='The service port number.', example='8080'),
        trafficPolicy?: TrafficPolicy(name='TrafficPolicy', description='The traffic policy.'),
      }
    ](name='PortTrafficPolicyList', description='The traffic policy of service ports.'),
    ports?: [ int32 ](name='Ports', description='The array of service ports.'),
    serviceFQDN?: string(name='ServiceFQDN'),
    serviceNameInRegistry?: string(name='ServiceNameInRegistry', description='The name of the service registered with the service registry.', example='test'),
    serviceProtocol?: string(name='ServiceProtocol', description='The protocol of the service.', example='HTTP'),
    sourceId?: long(name='SourceId', description='The ID of the service source.', example='1'),
    sourceType?: string(name='SourceType', description='The source type of the service.', example='MSE'),
    versionDetails?: [ 
      {
        endpointNum?: int32(name='EndpointNum', description='The number of instances.', example='1'),
        endpointNumPercent?: string(name='EndpointNumPercent', description='The percentage of instances.', example='20%'),
        serviceVersion?: {
          labels?: [ 
            {
              key?: string(name='Key', description='The tag.', example='version'),
              value?: string(name='Value', description='The tag value.', example='v2'),
            }
          ](name='Labels', description='The tags.'),
          name?: string(name='Name', description='The version number.', example='v2'),
        }(name='ServiceVersion', description='The version of the service.'),
      }
    ](name='VersionDetails', description='The details of versions.'),
    versions?: [ 
      {
        label?: string(name='Label', description='The tag.', example='version'),
        type?: string(name='Type', description='The type of the service.', example='test'),
        value?: string(name='Value', description='The tag value.', example='v1'),
      }
    ](name='Versions', description='The version of the service.'),
  }(name='Data', description='The details of the data.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9802C54E-5CC5-5706-927B-993DBB6DCF2F'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model GetGatewayServiceDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetGatewayServiceDetailResponseBody(name='body'),
}

async function getGatewayServiceDetail(request: GetGatewayServiceDetailRequest): GetGatewayServiceDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetGatewayServiceDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetGovernanceKubernetesClusterRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  clusterId: string(name='ClusterId', description='The ID of the instance.', example='cd23228b3c80c4d4f9ad7af1d87cc****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which the instance resides. The region is supported by MSE.', example='cn-hangzhou', position='Query'),
}

model GetGovernanceKubernetesClusterResponseBody = {
  data?: {
    clusterId?: string(name='ClusterId', description='The ID of the instance.', example='cd23228b3c80c4d4f9ad7af1d87cc30d5'),
    clusterName?: string(name='ClusterName', description='The name of the instance.', example='myCluster'),
    k8sVersion?: string(name='K8sVersion', description='The version of Kubernetes.', example='1.20.11-aliyun.1'),
    namespaceInfos?: string(name='NamespaceInfos', description='The information of the namespace.', example='[{\\"Name\\":\\"ack-onepilot\\",\\"Tags\\":null},{\\"Name\\":\\"default\\",\\"Tags\\":{\\"mse-enable\\":\\"enabled\\"}},{\\"Name\\":\\"kube-node-lease\\",\\"Tags\\":null},{\\"Name\\":\\"kube-public\\",\\"Tags\\":null},{\\"Name\\":\\"kube-system\\",\\"Tags\\":null}]'),
    namespaces?: [ 
      {
        mseNamespace?: string(name='MseNamespace', description='The name of the MSE namespace that you want to access.', example='default'),
        name?: string(name='Name', description='The name of the namespace in the ACK cluster.', example='default'),
      }
    ](name='Namespaces', description='The queried namespaces.'),
    pilotStartTime?: string(name='PilotStartTime', description='The time when the pilot component was started.', example='2022-01-11T11:50:38.000+0000'),
    region?: string(name='Region', description='The ID of the region in which the instance resides. The region is supported by MSE.', example='cn-hangzhou'),
    updateTime?: string(name='UpdateTime', description='The time of the last modification.', example='2022-01-12T05:24:31.000+0000'),
  }(name='Data', description='The details of the data.'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5B170A0D-2C5D-4CF8-B808-03966B86****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='True'),
}

model GetGovernanceKubernetesClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetGovernanceKubernetesClusterResponseBody(name='body'),
}

async function getGovernanceKubernetesCluster(request: GetGovernanceKubernetesClusterRequest): GetGovernanceKubernetesClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetGovernanceKubernetesCluster', 'POST', '/', 'json', false, 'json', request);
}

model GetImageRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  versionCode: string(name='VersionCode', description='The version number of the current instance.', example='ZooKeeper_3_5_5', position='Query'),
}

model GetImageResponseBody = {
  data?: {
    currentVersionFullShowName?: string(name='CurrentVersionFullShowName', description='The full version number of the current instance image. The parameter is in the X.X.X.X format.', example='3.5.5.0'),
    maxVersionChangelogUrl?: string(name='MaxVersionChangelogUrl', description='The URL of the changelog for the maximum version to which the current version can be upgraded.', example='https://xxxxx'),
    maxVersionCode?: string(name='MaxVersionCode', description='The code of the maximum version to which the current version can be upgraded.', example='ZooKeeper_3_6_3'),
    maxVersionFullShowName?: string(name='MaxVersionFullShowName', description='The full number of the maximum version to which the current version can be upgraded.', example='3.6.3.0'),
  }(name='Data', description='The details of the data.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='25EA0A83-9007-4E87-808C-637BE1A****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model GetImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetImageResponseBody(name='body'),
}

async function getImage(request: GetImageRequest): GetImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetImage', 'POST', '/', 'json', false, 'json', request);
}

model GetImportFileUrlRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  contentType?: string(name='ContentType', description='The file type.', example='application/zip', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='mse_prepaid_public_cn-7pp2b****', position='Query'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='12788f73-9848-4388-98f1-507778f2****', position='Query'),
}

model GetImportFileUrlResponseBody = {
  code?: int32(name='Code', description='The error code returned if the request failed.', example='200'),
  data?: {
    url?: string(name='Url', description='The URL that is used to upload the configuration file.', example='http://xxxxxxx'),
  }(name='Data', description='The details of the data.'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the \\\\*\\\\*%s\\\\*\\\\* variable in the **ErrMessage** parameter.\\n\\n>  If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message returned.', example='The request was successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='19488A00-4AF5-55E1-A689-98BA9F5E7441'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:
*   `true`: The request was successful. 
*  `false`: The request failed.', example='true'),
}

model GetImportFileUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetImportFileUrlResponseBody(name='body'),
}

/**
  * > The operation is not provided in Nacos SDKs. For information about Nacos SDKs, see the [official documentation](https://nacos.io/zh-cn/docs/sdk.html).\\n
  *
 * @tags cluster
 */
async function getImportFileUrl(request: GetImportFileUrlRequest): GetImportFileUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetImportFileUrl', 'POST', '/', 'json', false, 'json', request);
}

model GetKubernetesSourceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-c5d1aadb7df646cfb7065fbf75c1****', position='Query'),
  isAll?: boolean(name='IsAll', description='Specifies whether to obtain the information about all Kubernetes clusters. If you set the value to false, only the information about unassociated clusters is obtained.', position='Query'),
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC).', example='vpc-bp1t50e045b5g7i3p****', position='Query'),
}

model GetKubernetesSourceResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: [ 
    {
      cluster?: string(name='Cluster', description='The ID of the ACK cluster.', example='cbc1efca895a64af097ff00b26f3f****'),
      name?: string(name='Name', description='The name of the ACK cluster.', example='k8s-demo'),
    }
  ](name='Data', description='The data structure.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1085A66C-DEF1-58EE-A0A4-31E00C9FC0D5'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model GetKubernetesSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetKubernetesSourceResponseBody(name='body'),
}

async function getKubernetesSource(request: GetKubernetesSourceRequest): GetKubernetesSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetKubernetesSource', 'POST', '/', 'json', false, 'json', request);
}

model GetLosslessRuleByAppRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  appId?: string(name='AppId', description='The ID of the application.', example='hkhon1po62@c3df23522baa***', position='Query'),
  appName?: string(name='AppName', description='The name of the application.', example='example-app', position='Query'),
  namespace?: string(name='Namespace', description='The name of the MSE namespace.', example='default', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
}

model GetLosslessRuleByAppResponseBody = {
  code?: int32(name='Code', description='The response code.', example='200'),
  data?: {
    aligned?: boolean(name='Aligned', description='Indicates whether service registration is complete before readiness probe.', example='true'),
    appId?: string(name='AppId', description='The ID of the application.', example='hkhon1po62@24810bf4364a***'),
    appName?: string(name='AppName', description='The name of the application.', example='spring-cloud-a'),
    count?: int32(name='Count', description='The number of instances.', example='1'),
    delayTime?: int32(name='DelayTime', description='The registration latency. Unit: seconds.', example='60'),
    enable?: boolean(name='Enable', description='Indicates whether graceful start is enabled. Valid values:

*   `true`: enabled
*   `false`: disabled', example='true'),
    funcType?: int32(name='FuncType', description='The slope of the prefetching curve.', example='2'),
    lossLessDetail?: boolean(name='LossLessDetail', description='Indicates whether online and offline processing details are displayed.', example='true'),
    notice?: boolean(name='Notice', description='Indicates whether notification is enabled.', example='false'),
    related?: boolean(name='Related', description='Indicates whether service prefetching is complete before readiness probe.', example='false'),
    warmupTime?: int32(name='WarmupTime', description='The prefetching duration. Unit: seconds.', example='120'),
  }(name='Data', description='The data returned.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='Success'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='DC34E4A3-5F1C-4E40-86EA-02EDF967****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model GetLosslessRuleByAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLosslessRuleByAppResponseBody(name='body'),
}

/**
  * You can call this operation to query the rules for graceful start and shutdown of an application.
  * You can query the rules for graceful start and shutdown of an application preferentially by using the AppId parameter.
  * If the AppId parameter is left empty, you can use the RegionId, Namespace, and AppName parameters to query the rules for graceful start and shutdown of an application.
  *
 * @tags msc
 */
async function getLosslessRuleByApp(request: GetLosslessRuleByAppRequest): GetLosslessRuleByAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLosslessRuleByApp', 'POST', '/', 'json', false, 'json', request);
}

model GetMseFeatureSwitchRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
}

model GetMseFeatureSwitchResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='NoPermission'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6B4653A3-8D9C-5FDC-BB0C-936D40E9794B'),
  result?: map[string]any(name='Result', description='The returned result.', example='{\\"nacos_config_encrypt\\": False}'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model GetMseFeatureSwitchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMseFeatureSwitchResponseBody(name='body'),
}

async function getMseFeatureSwitch(request: GetMseFeatureSwitchRequest): GetMseFeatureSwitchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMseFeatureSwitch', 'POST', '/', 'json', false, 'json', request);
}

model GetMseSourceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-7ea3da97b96543e19f6c597cd4a9****', position='Query'),
  type?: string(name='Type', description='The MSE engine type. Valid values:

*   NACOS
*   ZOOKEEPER', example='NACOS', position='Query'),
  vpcId?: string(name='VpcId', position='Query'),
}

model GetMseSourceResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='1'),
  data?: [ 
    {
      address?: string(name='Address', description='The endpoint of the instance.', example='mse-af1****-nacos-ans.mse.aliyuncs.com:8848'),
      clusterId?: string(name='ClusterId', description='The ID of cluster.', example='mse_'),
      instanceId?: string(name='InstanceId', description='The ID of the instance', example='mse_prepaid_public_cn-7pp2eec****'),
      name?: string(name='Name', description='The name.', example='test'),
      type?: string(name='Type', description='The type.', example='Nacos'),
    }
  ](name='Data', description='The data structure.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.

*   If the request is successful, a success message is returned.
*   If the request fails, an error message is returned, such as the "TaskId not found" message.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5EB2D865-B43F-5526-8F92-857718CF73A2'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model GetMseSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMseSourceResponseBody(name='body'),
}

async function getMseSource(request: GetMseSourceRequest): GetMseSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMseSource', 'POST', '/', 'json', false, 'json', request);
}

model GetNacosConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  beta?: boolean(name='Beta', description='Specifies whether to perform a beta release. Valid values:

*   `true`: yes
*   `false`: no', example='true', position='Query'),
  dataId: string(name='DataId', description='The ID of the data.', example='halvie-mp-item****', position='Query'),
  group: string(name='Group', description='The name of the configuration group.', example='common', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-i7m2h0****', position='Query'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='ddaf8f12-****-b1c1-86e7c72e266b', position='Query'),
}

model GetNacosConfigResponseBody = {
  configuration?: {
    appName?: string(name='AppName', description='The name of the application.', example='test'),
    betaIps?: string(name='BetaIps', description='The list of IP addresses where the beta release of the configuration is performed.', example='1.1.XX.XX,2.2.XX.XX'),
    content?: string(name='Content', description='The content of the configuration.', example='log.level=error'),
    dataId?: string(name='DataId', description='The ID of the configuration.', example='log.yaml'),
    desc?: string(name='Desc', description='The description of the configuration.', example='For testing'),
    encryptedDataKey?: string(name='EncryptedDataKey', description='The encryption key.', example='key'),
    group?: string(name='Group', description='The name of the configuration group.', example='test'),
    md5?: string(name='Md5', description='The message digest of the configuration.', example='123rfsdf3'),
    tags?: string(name='Tags', description='The tags of the configuration.', example='context'),
    type?: string(name='Type', description='The format of the configuration.', example='text'),
  }(name='Configuration', description='The configuration information.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B4EAB48C-BB4B-5B8D-B33B-35D69606C5AD'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model GetNacosConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNacosConfigResponseBody(name='body'),
}

/**
  * > The operation is not provided in Nacos SDKs. For information about Nacos SDKs, see the [official documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
 * @tags cluster
 */
async function getNacosConfig(request: GetNacosConfigRequest): GetNacosConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetNacosConfig', 'POST', '/', 'json', false, 'json', request);
}

model GetNacosHistoryConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  dataId: string(name='DataId', description='The ID of the data.', example='msg-center.main.yaml', position='Query'),
  group: string(name='Group', description='The name of the group.', example='DEFAULT_GROUP', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='mse_prepaid_public_cn-st220g9ka02', position='Query'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='6cf708a5-****-89f2-3ba62c5ee9ba', position='Query'),
  nid: string(name='Nid', description='The version ID of the configuration.', example='40****', position='Query'),
}

model GetNacosHistoryConfigResponseBody = {
  configuration?: {
    appName?: string(name='AppName', description='The name of the application.', example='test'),
    content?: string(name='Content', description='The content of the configuration.', example='test'),
    dataId?: string(name='DataId', description='The ID of the configuration.', example='test.yaml'),
    encryptedDataKey?: string(name='EncryptedDataKey', description='The encryption key.', example='23fds****'),
    group?: string(name='Group', description='The name of the configuration group.', example='public'),
    md5?: string(name='Md5', description='The MD5 value of the configuration.', example='23sdf32f****'),
    opType?: string(name='OpType', description='The configuration type.', example='text'),
  }(name='Configuration', description='The configuration information.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='NoPermission'),
  message?: string(name='Message', description='The message returned.', example='The request was successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='69AD2AA7-DB47-449B-941B-B14409DF****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model GetNacosHistoryConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNacosHistoryConfigResponseBody(name='body'),
}

/**
  * > The operation is not provided in Nacos SDKs. For information about Nacos SDKs, see the [official documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
 * @tags cluster
 */
async function getNacosHistoryConfig(request: GetNacosHistoryConfigRequest): GetNacosHistoryConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetNacosHistoryConfig', 'POST', '/', 'json', false, 'json', request);
}

model GetOverviewRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  period?: int32(name='Period', description='The query time. Unit: days. For example, if you set this parameter to 30, the governance rules within the last 30 days are queried.', example='1', position='Query'),
  region?: string(name='Region', description='The ID of the region.', example='cn-hangzhou', position='Query'),
}

model GetOverviewResponseBody = {
  code?: int32(name='Code', description='The response code returned.', example='1'),
  data?: string(name='Data', description='The details of the data.', example='data'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request was successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='52BA6DA6-A702-4362-A32F-DFF79655****'),
  success?: string(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model GetOverviewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOverviewResponseBody(name='body'),
}

/**
  * You can call this operation to query overview information about service governance.
  *
 * @tags msc
 */
async function getOverview(request: GetOverviewRequest): GetOverviewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOverview', 'POST', '/', 'json', false, 'json', request);
}

model GetPluginConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

zh: Chinese en: English', example='zh', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-ubuwqygbq4783gqb2y3f87q****', position='Query'),
  pluginId: long(name='PluginId', description='The ID of the gateway plug-in.', example='123', position='Query'),
}

model GetPluginConfigResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: {
    category?: int32(name='Category', description='The category of the plug-in. Valid values:

0: user-defined

1: permission authentication

2: security protection

3: transmission protocol

4: traffic control

5: traffic observation', example='0'),
    configCheck?: string(name='ConfigCheck', description='The information about the plug-in configuration used for checking.', example='\\# The configuration includes the fields required for checking, such as name, age, and friends. Sample configuration: name: John age: 18 friends: - David - Anne'),
    gatewayConfigList?: [ 
      {
        config?: string(name='Config', description='The plug-in configuration.', example='\\# Configure a check for the required fields of the plug-in, such as name, age, and friends. Sample configuration: name: John age: 18 friends: - David - Anne'),
        configLevel?: int32(name='ConfigLevel', description='The application scope of the plug-in. Valid values:

0: global

1: domain names

2: routes', example='0'),
        enable?: boolean(name='Enable', description='Indicates whether the plug-in is enabled.', example='true'),
        gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='1'),
        gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-ubuwqygbq4783gqb2y3f87q****'),
        gmtCreate?: string(name='GmtCreate', description='The creation time.', example='1667309705000'),
        gmtModified?: string(name='GmtModified', description='The update time.', example='1667309705000'),
        id?: long(name='Id', description='The ID of the plug-in configuration.', example='1'),
        pluginId?: long(name='PluginId', description='The ID of the gateway plug-in.', example='1'),
      }
    ](name='GatewayConfigList', description='The list of gateway plug-in configurations.'),
    id?: long(name='Id', description='The ID of the plug-in.', example='1'),
    imageName?: string(name='ImageName', description='The name of the image.', example='name'),
    mode?: int32(name='Mode', description='The mode.', example='0'),
    name?: string(name='Name', description='The name of the plug-in.', example='name'),
    phase?: int32(name='Phase', description='The execution stage of the plug-in. Valid values:

0: default stage

1: authorization stage

2: authentication stage

3: statistics stage', example='0'),
    primaryUser?: string(name='PrimaryUser', description='The ID of the creator.', example='123'),
    priority?: int32(name='Priority', description='The execution priority of the plug-in. A larger value indicates a higher priority.', example='1'),
    publishState?: int32(name='PublishState', description='The publish status.', example='1'),
    readme?: string(name='Readme', description='The description of the README file.', example='read me'),
    readmeEn?: string(name='ReadmeEn', description='The description of the README file that is edited in English.', example='read me'),
    status?: string(name='Status', description='Indicates whether the plug-in is enabled. Valid values:

0: disabled

1: enabled', example='1'),
    summary?: string(name='Summary', description='The summary of the plug-in.', example='This is a plug-in.'),
    type?: int32(name='Type', description='The type.', example='0'),
    version?: string(name='Version', description='The version of the plug-in.', example='v1'),
    versionJson?: string(name='VersionJson'),
    wasmLang?: int32(name='WasmLang', description='The WebAssembly language. Valid values:

0: C++

1: TinyGo

2: Rust

3: AssemblyScript

4: Zig', example='0'),
  }(name='Data', description='The returned data.'),
  dynamicCode?: string(name='DynamicCode', description='The dynamic error code.', example='code'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic error message.', example='message'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='500'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='03A3E2F4-6804-5663-9D5D-2EC47A1*****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model GetPluginConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPluginConfigResponseBody(name='body'),
}

async function getPluginConfig(request: GetPluginConfigRequest): GetPluginConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPluginConfig', 'POST', '/', 'json', false, 'json', request);
}

model GetPluginsRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

zh: Chinese en: English', example='zh', position='Query'),
  category?: int32(name='Category', description='The type of the plug-in. Valid values:

*   0: custom
*   1: permission authorization
*   2: security protection
*   3: transmission protocol
*   4: traffic control
*   5: traffic observation', example='1', position='Query'),
  enableOnly?: boolean(name='EnableOnly', description='Specifies whether to enable the plug-in.', example='true', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', description='The ID of the gateway.', example='gw-0adf3ad751284cc69fcf9669fba*****', position='Query'),
  name?: string(name='Name', description='The name of the plug-in.', example='key-auth', position='Query'),
}

model GetPluginsResponseBody = {
  code?: int32(name='Code', description='The returned code.', example='200'),
  data?: [ 
    {
      category?: int32(name='Category', description='The type of the plug-in. Valid values:

0: custom

1: permission authorization

2: security protection

3: transmission protocol

4: traffic control

5: traffic observation', example='0'),
      configCheck?: string(name='ConfigCheck', description='The information about the plug-in configuration used for checking.', example='\\# The configuration includes the fields required for checking, such as name, age, and friends. Sample configuration: name: John age: 18 friends: - David - Anne'),
      id?: long(name='Id', description='The ID of the plug-in.', example='1'),
      maxVersion?: string(name='MaxVersion', example='1.0.0'),
      mode?: int32(name='Mode', example='0'),
      name?: string(name='Name', description='The name of the plug-in.', example='key-auth'),
      newVersionPublishingFlag?: boolean(name='NewVersionPublishingFlag', example='false'),
      phase?: int32(name='Phase', description='The execution stage of the plug-in.

*   0: default stage
*   1: authorization stage
*   2: authentication stage
*   3: statistics stage', example='1'),
      primaryUser?: string(name='PrimaryUser', description='The ID of the creator.', example='123'),
      priority?: int32(name='Priority', description='The execution priority of the plug-in. A larger value indicates a higher priority.', example='1'),
      publishState?: int32(name='PublishState', description='The publish status.', example='1'),
      status?: string(name='Status', description='Indicates whether the plug-in is enabled.

*   0: disabled
*   1: enabled', example='1'),
      summary?: string(name='Summary', description='The summary of the plug-in.', example='This is a plug-in.'),
      version?: string(name='Version', description='The version of the plug-in.', example='v1'),
      wasmFile?: string(name='WasmFile', description='The URL of the Object Storage Service (OSS) bucket that stores the WebAssembly plug-in.', example='https://mse-shared-cn-hangzhou.oss-cn-hangzhou.aliyuncs.com/cfg/import/1917515******/gw-0adf3ad751284cc69fcf9669fba*****/2022/11/02/4d390496-2c17-4b42-a479-f9068ba****/16673573***5.wasm'),
      wasmLang?: int32(name='WasmLang', description='The WebAssembly language. Valid values:

*   0: C++
*   1: TinyGo
*   2: Rust
*   3: AssemblyScript
*   4: Zig', example='0'),
    }
  ](name='Data', description='The data entries returned.'),
  dynamicCode?: string(name='DynamicCode', description='The dynamic part in the error message.', example='code'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic error message.', example='message'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='500'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='03A3E2F4-6804-5663-9D5D-2EC47A1*****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetPluginsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPluginsResponseBody(name='body'),
}

async function getPlugins(request: GetPluginsRequest): GetPluginsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPlugins', 'POST', '/', 'json', false, 'json', request);
}

model GetServiceListRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response.', example='zh', position='Query'),
  appId: string(name='AppId', description='The ID of the application.', example='xxx@xxx', position='Query'),
  ip?: string(name='Ip', description='The IP address.', example='127.0.0.1', position='Query'),
  region?: string(name='Region', description='The ID of the region.', example='cn-zhangjiakou', position='Query'),
  serviceName?: string(name='ServiceName', description='The name of the service.', example='com.alibaba.xxx', position='Query'),
  serviceType?: string(name='ServiceType', description='The type of the framework.', example='dubbo', position='Query'),
}

model GetServiceListResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: [ 
    {
      dubboApplicationName?: string(name='DubboApplicationName', description='The name of the Dubbo application.', example='dubbo-application'),
      edasAppName?: string(name='EdasAppName', description='The name of the application.', example='test'),
      group?: string(name='Group', description='The group.', example='dubbo'),
      metadata?: map[string]any(name='Metadata', description='The metadata.', example='{}'),
      methods?: [ 
        {
          methodController?: string(name='MethodController', description='The controller of the method.', example='com.alibaba.SayHelloController'),
          name?: string(name='Name', description='The name of the method.', example='sayHello'),
          parameterTypes?: [ string ](name='ParameterTypes', description='The data types of the parameters.'),
          paths?: [ string ](name='Paths', description='The paths.'),
          requestMethods?: [ string ](name='RequestMethods', description='The methods.'),
          returnType?: string(name='ReturnType', description='The type of the return value.', example='int'),
        }
      ](name='Methods', description='The methods.'),
      registryType?: string(name='RegistryType', description='The type of the service registry.', example='nacos'),
      serviceName?: string(name='ServiceName', description='The name of the service.', example='com.alibaba.xxx'),
      serviceType?: string(name='ServiceType', description='The type of the service.', example='dubbo'),
      springApplicationName?: string(name='SpringApplicationName', description='The name of the Spring application.', example='spring-application'),
      version?: string(name='Version', description='The version information.', example='1.0.0'),
    }
  ](name='Data', description='The data entries returned.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='xxx-xxx-xxx'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetServiceListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetServiceListResponseBody(name='body'),
}

async function getServiceList(request: GetServiceListRequest): GetServiceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetServiceList', 'POST', '/', 'json', false, 'json', request);
}

model GetServiceListPageRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values: zh and en. Default value: zh. The value zh indicates Chinese, and the value en indicates English.', example='zh', position='Query'),
  appId?: string(name='AppId', description='The application ID.', example='dez4xxxxx@f3f75ed8ffxxxxx', position='Query'),
  appName?: string(name='AppName', description='The application name.', example='example-app', maxLength=64, position='Query'),
  ip?: string(name='Ip', description='The IP address from which the query is initiated.', example='223.5.5.5', position='Query'),
  namespace?: string(name='Namespace', description='The name of the MSE namespace.', example='default', maxLength=64, position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10', position='Query'),
  region?: string(name='Region', description='The region ID.', example='cn-hangzhou', position='Query'),
  serviceName?: string(name='ServiceName', description='The service name.', example='sc-A', position='Query'),
  serviceType?: string(name='ServiceType', description='The service type.', example='springCloud', position='Query'),
}

model GetServiceListPageResponseBody = {
  data?: {
    pageNumber?: string(name='PageNumber', description='The page number.', example='1'),
    pageSize?: string(name='PageSize', description='The number of entries per page.', example='10'),
    result?: [ 
      {
        appId?: string(name='AppId', description='The application ID.', example='dez4xxxxx@f3f75ed8ffxxxxx'),
        appName?: string(name='AppName', description='The application name.', example='example-app'),
        gmtModifyTime?: string(name='GmtModifyTime', description='The time when the service was last updated.', example='123456'),
        group?: string(name='Group', description='The group to which the service belongs.', example='DEFAULT_GROUP'),
        instanceNum?: int32(name='InstanceNum', description='The number of service nodes.', example='1'),
        serviceName?: string(name='ServiceName', description='The service name.', example='sc-A'),
        version?: string(name='Version', description='The service version.', example='1'),
      }
    ](name='Result', description='The data on the current page.'),
    totalSize?: string(name='TotalSize', description='The total number of entries returned.', example='100'),
  }(name='Data', description='The response to the request.'),
  message?: string(name='Message', description='The request information.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='A2F946FB-F2E3-5BF4-8CBE-xxxxxxxx'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='True'),
}

model GetServiceListPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetServiceListPageResponseBody(name='body'),
}

async function getServiceListPage(request: GetServiceListPageRequest): GetServiceListPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetServiceListPage', 'POST', '/', 'json', false, 'json', request);
}

model GetServiceListenersRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  clusterId?: string(name='ClusterId', description='The ID of the MSE instance to which the service belongs.

> You must specify InstanceId or ClusterId.', example='mse-09k1q11****', position='Query'),
  clusterName?: string(name='ClusterName', description='The name of the cluster to which the service belongs.

> The cluster is a concept for Nacos services and is not equivalent to a Microservices Engine (MSE) instance.', example='DEFAULT', position='Query'),
  groupName?: string(name='GroupName', description='The group to which the service belongs.', example='WEB_GROUP', position='Query'),
  hasIpCount?: string(name='HasIpCount', description='A reserved parameter.', example='none', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the instance to which the service belongs.

> You must specify InstanceId or ClusterId.', example='mse_prepaid_public_cn-tl32odtt20j', position='Query'),
  namespaceId?: string(name='NamespaceId', description='The namespace to which the service belongs.', example='ddaf8f12-****-b1c1-86e7c72e266b', position='Query'),
  pageNum?: int32(name='PageNum', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}', position='Query'),
  serviceName?: string(name='ServiceName', description='The name of the service whose listeners you want to query.', example='zeekr-orderboss', position='Query'),
}

model GetServiceListenersResponseBody = {
  data?: [ 
    {
      addr?: string(name='Addr', description='The IP address of the listener.', example='119.23.84.102'),
      agent?: string(name='Agent', description='The listener client version.', example='Nacos-Java-Client:v2.1.1'),
      app?: string(name='App', description='The application name of the listener.', example='app'),
      cluster?: string(name='Cluster', description='The name of the cluster to which the monitored service belongs.', example='DEFAULT'),
      ip?: string(name='IP', description='The IP address of the monitored service.', example='172.16.1.5'),
      namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='0ba53825-b183-414f-a6a0-288e4f1c467e'),
      port?: string(name='Port', description='The port number of the monitored service.', example='8080'),
      serviceName?: string(name='ServiceName', description='The name of the monitored service.', example='zeekr-orderboss'),
    }
  ](name='Data', description='The returned data.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code returned.', example='202'),
  message?: string(name='Message', description='The message returned.

*   If the request is successful, a success message is returned.
*   If the request fails, an error message is returned.', example='success'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='54973C90-F379-4372-9AA5-053A3F7****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
  totalCount?: int32(name='TotalCount', description='The number of listeners that are queried.', example='2'),
}

model GetServiceListenersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetServiceListenersResponseBody(name='body'),
}

async function getServiceListeners(request: GetServiceListenersRequest): GetServiceListenersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetServiceListeners', 'POST', '/', 'json', false, 'json', request);
}

model GetServiceMethodPageRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh', position='Query'),
  appId?: string(name='AppId', example='hkhonxxxxx@f3f75ed8ffxxxxx', position='Query'),
  appName?: string(name='AppName', example='example-app', maxLength=64, position='Query'),
  ip?: string(name='Ip', example='223.5.5.5', position='Query'),
  methodController?: string(name='MethodController', example='com.alibabacloud.mse.demo.a.AController', position='Query'),
  name?: string(name='Name', example='aMethod', position='Query'),
  namespace?: string(name='Namespace', example='default', maxLength=64, position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, maximum=65536, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=65536, position='Query'),
  path?: string(name='Path', example='/a', position='Query'),
  region?: string(name='Region', example='cn-hangzhou', position='Query'),
  serviceGroup?: string(name='ServiceGroup', position='Query'),
  serviceName?: string(name='ServiceName', example='sc-A', position='Query'),
  serviceType?: string(name='ServiceType', example='springCloud', position='Query'),
  serviceVersion?: string(name='ServiceVersion', example='1.0.0', position='Query'),
}

model GetServiceMethodPageResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    result?: [ 
      {
        methodController?: string(name='MethodController', example='com.alibabacloud.mse.demo.a.AController'),
        name?: string(name='Name', example='aMethod'),
        nameDetail?: string(name='NameDetail', example='示例接口描述信息。'),
        parameterDefinitions?: [ 
          {
            description?: string(name='Description', example='参数描述示例'),
            name?: string(name='Name', example='aParam'),
            type?: string(name='Type', example='java.lang.String'),
          }
        ](name='ParameterDefinitions'),
        parameterDetails?: [ string ](name='ParameterDetails'),
        parameterTypes?: [ string ](name='ParameterTypes'),
        paths?: [ string ](name='Paths'),
        requestMethods?: [ string ](name='RequestMethods'),
        returnDetails?: string(name='ReturnDetails', example='java.lang.String'),
        returnType?: string(name='ReturnType', example='java.lang.String'),
      }
    ](name='Result'),
    totalSize?: int32(name='TotalSize', example='100'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='2DD5A212-C77B-3XXF-9XXE-XXX9XXXE5XX1'),
  success?: boolean(name='Success', example='True'),
}

model GetServiceMethodPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetServiceMethodPageResponseBody(name='body'),
}

async function getServiceMethodPage(request: GetServiceMethodPageRequest): GetServiceMethodPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetServiceMethodPage', 'POST', '/', 'json', false, 'json', request);
}

model GetTagsBySwimmingLaneGroupIdRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  groupId: long(name='GroupId', description='The ID of the lane group.', example='154', position='Query'),
  namespace?: string(name='Namespace', description='The name of the Microservices Engine (MSE) namespace that you want to query.', example='default', maxLength=64, position='Query'),
}

model GetTagsBySwimmingLaneGroupIdResponseBody = {
  data?: [ string ](name='Data', description='The data of the tag.', example='["gray"]'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  message?: string(name='Message', description='The message returned.', example='The request was successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='69AD2AA7-DB47-449B-941B-B14409DF****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model GetTagsBySwimmingLaneGroupIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTagsBySwimmingLaneGroupIdResponseBody(name='body'),
}

async function getTagsBySwimmingLaneGroupId(request: GetTagsBySwimmingLaneGroupIdRequest): GetTagsBySwimmingLaneGroupIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTagsBySwimmingLaneGroupId', 'POST', '/', 'json', false, 'json', request);
}

model GetZookeeperDataImportUrlRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='RestResult', example='zh', position='Query'),
  contentType?: string(name='ContentType', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zip', position='Query'),
  instanceId?: string(name='InstanceId', description='The type of the file.', example='mse_prepaid_public_cn-zvp2xzzkk06', position='Query'),
}

model GetZookeeperDataImportUrlResponseBody = {
  code?: int32(name='Code', description='The error code returned if the request failed.', example='200'),
  data?: {
    maxSize?: string(name='MaxSize', description='code', example='250000'),
    url?: string(name='Url', description='The maximum size of a file that can be uploaded each time. Unit: MB.', example='http://xxxxxxxxx'),
  }(name='Data', description='The URL that is used to upload the configuration file.'),
  dynamicCode?: string(name='DynamicCode', description='The dynamic part in the error message. This parameter is used to replace the \\*\\*%s\\*\\* variable in the **ErrMessage** parameter.

>  If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='code'),
  dynamicMessage?: string(name='DynamicMessage', description='The returned data.', example='You are not authorized to perform this operation.'),
  errorCode?: string(name='ErrorCode', description='The HTTP status code returned.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The message returned.', example='200'),
  message?: string(name='Message', description='The request was successfully processed.', example='The dynamic part in the error message.'),
  requestId?: string(name='RequestId', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='E4E2058F-C524-5C29-9BC7-5874EA8D7CE2'),
  success?: boolean(name='Success', description='The status code. A value of 200 is returned if the request was successful.', example='true'),
}

model GetZookeeperDataImportUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetZookeeperDataImportUrlResponseBody(name='body'),
}

async function getZookeeperDataImportUrl(request: GetZookeeperDataImportUrlRequest): GetZookeeperDataImportUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetZookeeperDataImportUrl', 'POST', '/', 'json', false, 'json', request);
}

model ImportNacosConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  fileUrl: string(name='FileUrl', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='http://mse-shared.oss-xxx.aliyuncs.com/cfg/import/xxxx/2021/01/11/xxxx.zip', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the namespace.', example='mse_prepaid_public_cn-****', position='Query'),
  namespaceId?: string(name='NamespaceId', description='The policy.', example='f5cdc80a-****-8094-282f5650fc00', position='Query'),
  policy?: string(name='Policy', description='The policy.

Valid values:

*   ABORT

    <!-- -->

    <!-- -->

    <!-- -->

*   OVERWRITE

    <!-- -->

    <!-- -->

    <!-- -->

*   SKIP

    <!-- -->

    <!-- -->

    <!-- -->', example='overwrite', position='Query'),
}

model ImportNacosConfigResponseBody = {
  code?: int32(name='Code', description='The error message returned.', example='1'),
  data?: {
    failData?: [ 
      {
        dataId?: string(name='DataId', description='The ID of the group.', example='test2.yaml'),
        group?: string(name='Group', example='test'),
      }
    ](name='FailData', description='The data structure.'),
    skipCount?: int32(name='SkipCount', description='The information about skipped configurations.', example='10'),
    skipData?: [ 
      {
        dataId?: string(name='DataId', description='The ID of the group.', example='test.yaml'),
        group?: string(name='Group', description='The information about configurations that are failed to be imported.', example='public'),
      }
    ](name='SkipData', description='The data structure.'),
    succCount?: int32(name='SuccCount', description='The number of configurations that are skipped.', example='100'),
  }(name='Data', description='The number of configurations that are imported.'),
  dynamicMessage?: string(name='DynamicMessage', description='The details of the data.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The code returned.', example='mse-100-100'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The ID of the request.', example='200'),
  message?: string(name='Message', description='The request is successfully processed.', example='The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **ErrMessage** parameter.

>  If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.'),
  requestId?: string(name='RequestId', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='AF21683A-29C7-4853-AC0F-B5ADEE4****'),
  success?: boolean(name='Success', description='The error code that is returned.', example='true'),
}

model ImportNacosConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImportNacosConfigResponseBody(name='body'),
}

/**
  * > The operation is not provided in Nacos SDKs. For information about Nacos SDKs, see the [official documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
 * @tags cluster
 */
async function importNacosConfig(request: ImportNacosConfigRequest): ImportNacosConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportNacosConfig', 'POST', '/', 'json', false, 'json', request);
}

model ImportServicesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  fcAlias?: string(name='FcAlias', position='Query'),
  fcServiceName?: string(name='FcServiceName', position='Query'),
  fcVersion?: string(name='FcVersion', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-77e1153db6e14c0a8b1fae20bcb89ca5', position='Query'),
  serviceList?: [ 
    {
      groupName?: string(name='GroupName', description='The group.', example='test'),
      ips?: [ string ](name='Ips', description='The IP addresses of the service.'),
      name?: string(name='Name', description='The name of the service.', example='test'),
      namespace?: string(name='Namespace', description='The namespace.', example='public'),
      servicePort?: long(name='ServicePort', description='The port of the service.', example='8080'),
      serviceProtocol?: string(name='ServiceProtocol', description='The protocol of the service.', example='GRPC, HTTP'),
    }
  ](name='ServiceList', description='The information about services.', example='DNS', shrink='json', position='Query'),
  sourceType?: string(name='SourceType', description='The service source. Valid values:

*   MSE: MSE Nacos instance
*   K8s: ACK cluster
*   VIP: fixed address
*   DNS: DNS domain', example='DNS', position='Query'),
  tlsSetting?: string(name='TlsSetting', description='The Transport Layer Security (TLS) settings. Valid values:

*   mode: TLS mode
*   certId: certificate ID
*   caCertId: CA certificate ID
*   caCertContent: CA certificate public key
*   sni: service name identification', example='{
      "mode": "MUTUAL",
      "certId": "1*****-cn-hangzhou",
      "caCertContent": "123",
      "sni": "ceshi"
}', position='Query'),
}

model ImportServicesResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: boolean(name='Data', description='The result returned.', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0F0FBA7D-5AC5-5DC4-A1E9-E9656BFAE1B9'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model ImportServicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImportServicesResponseBody(name='body'),
}

async function importServices(request: ImportServicesRequest): ImportServicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportServices', 'POST', '/', 'json', false, 'json', request);
}

model ImportZookeeperDataRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  fileName?: string(name='FileName', description='The name of the file that you want to import.', example='snapshot.5', position='Query'),
  fileUrl?: string(name='FileUrl', description='The URL of the source data.

> You must set this parameter to the URL that is generated by calling the GetZookeeperDataImportUrl operation.', example='http://xxxxxxxxxx', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse_prepaid_public_cn-u0t2xzvxa06', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}', position='Query'),
}

model ImportZookeeperDataResponseBody = {
  data?: any(name='Data', description='The details of the data.', example='null'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code returned.', example='202'),
  message?: string(name='Message', description='The message returned.', example='The request was successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='52BA6DA6-A702-4362-A32F-DFF79655****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model ImportZookeeperDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImportZookeeperDataResponseBody(name='body'),
}

/**
  * **Danger** This operation clears existing data. Exercise caution when you call this API operation.
  *
 */
async function importZookeeperData(request: ImportZookeeperDataRequest): ImportZookeeperDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportZookeeperData', 'POST', '/', 'json', false, 'json', request);
}

model ListAnsInstancesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  clusterId?: string(name='ClusterId', description='The ID of the Nacos instance.

> This operation contains both the InstanceId and ClusterId parameters. You must specify one of them.', example='mse-09k1q11****', position='Query'),
  clusterName?: string(name='ClusterName', description='The alias of the Nacos instance.', example='mse-7413****', position='Query'),
  groupName?: string(name='GroupName', description='The name of the contact group.', example='test', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.

> This operation contains both the InstanceId and ClusterId parameters. You must specify one of them.', example='mse_prepaid_public_cn-tl327w****', position='Query'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='12233****', position='Query'),
  pageNum: int32(name='PageNum', description='The number of the page to return.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='The number of entries to return on each page.', example='10', position='Query'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}', position='Query'),
  serviceName: string(name='ServiceName', description='The name of the service.', example='name', position='Query'),
}

model ListAnsInstancesResponseBody = {
  data?: [ 
    {
      app?: string(name='App', description='The name of the application.', example='app'),
      clusterName?: string(name='ClusterName', description='The name of the cluster.', example='DEFAULT'),
      datumKey?: string(name='DatumKey', description='The reference key.', example='30.5.XX.XX:unknown:DEFAULT'),
      defaultKey?: string(name='DefaultKey', description='The default key.', example='30.5.XX.XX:unknown'),
      enabled?: boolean(name='Enabled', description='The effective status of the instance. Valid values:

*   `true`: The instance takes effect.
*   `false`: The instance does not take effect.', example='true'),
      ephemeral?: boolean(name='Ephemeral', description='Indicates whether the information about the ephemeral node is obtained. Valid values:

*   `true`: yes
*   `false`: no', example='true'),
      failCount?: int32(name='FailCount', description='The number of counted failures.', example='0'),
      healthy?: boolean(name='Healthy', description='The health status of the instance. Valid values:

*   `true`: The instance is healthy.
*   `false`: The instance is unhealthy.', example='true'),
      instanceHeartBeatInterval?: int32(name='InstanceHeartBeatInterval', description='The heartbeat interval of the instance. Unit: seconds.', example='5000'),
      instanceHeartBeatTimeOut?: int32(name='InstanceHeartBeatTimeOut', description='The timeout period of the instance heartbeat.', example='15000'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='30.5.XX.XX#0#DEFAULT#DEFAULT_GROUP@@consumers:com.alibaba.edas.IHelloService'),
      ip?: string(name='Ip', description='The public IP address.', example='30.5.XX.XX'),
      ipDeleteTimeout?: int32(name='IpDeleteTimeout', description='The timeout period for removing an IP address.', example='30000'),
      lastBeat?: long(name='LastBeat', description='The last heartbeat time.', example='20201010'),
      marked?: boolean(name='Marked', description='Indicates whether the instance was marked. Valid values:

*   `true`: The instance marking was successful.
*   `false`: The instance marking failed.', example='true'),
      metadata?: map[string]any(name='Metadata', description='The metadata.', example='[int]'),
      okCount?: int32(name='OkCount', description='The number of counted successes.', example='0'),
      port?: int32(name='Port', description='The port number.', example='8080'),
      serviceName?: string(name='ServiceName', description='The name of the service.', example='DEFAULT_GROUP@@consumers:com.alibaba.edas.IHelloService::'),
      weight?: int32(name='Weight', description='The weight.', example='1'),
    }
  ](name='Data', description='The details of the data.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code returned.', example='202'),
  message?: string(name='Message', description='The message returned.', example='The request was successfully processed.'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='52BA6DA6-A702-4362-A32F-DFF79655****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
  totalCount?: int32(name='TotalCount', description='The total number of returned instances.', example='7'),
}

model ListAnsInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAnsInstancesResponseBody(name='body'),
}

/**
  * > The operation is not provided in Nacos SDKs. For information about Nacos SDKs, see the [official documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
 */
async function listAnsInstances(request: ListAnsInstancesRequest): ListAnsInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAnsInstances', 'GET', '/', 'json', false, 'json', request);
}

model ListAnsServiceClustersRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  clusterId?: string(name='ClusterId', description='The ID of the MSE cluster.

> The MSE cluster is different from the cluster of the Nacos service.', example='mse-09k1q110q01', position='Query'),
  clusterName?: string(name='ClusterName', description='The alias of the cluster.', example='mse-7413****', position='Query'),
  groupName?: string(name='GroupName', description='The name of the group.', example='DEFAULT_GROUP', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse_prepaid_public_cn-tl32a6****', position='Query'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='12233****', position='Query'),
  pageNum: int32(name='PageNum', description='The number of the page to return.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='The number of entries to return on each page.', example='10', position='Query'),
  serviceName?: string(name='ServiceName', description='The name of the service.', example='nacos.test.3', position='Query'),
}

model ListAnsServiceClustersResponseBody = {
  data?: {
    appDetail?: {
      appId?: string(name='AppId', description='The ID of the application for which Microservices Governance is enabled.', example='hkhon1po62@904cba2c0xxxxxx'),
      appName?: string(name='AppName', description='The name of the application for which Microservices Governance is enabled.', example='spring-cloud-b'),
      checkInternal?: int32(name='CheckInternal', description='The health check interval. Unit: seconds.', example='2'),
      checkPath?: string(name='CheckPath', description='The path of the health check. This parameter is required only when the CheckType parameter is set to http.', example='/health'),
      checkTimeout?: int32(name='CheckTimeout', description='The timeout period of the health check response. Unit: seconds.', example='5'),
      checkType?: string(name='CheckType', description='The type of the health check. Valid values:

*   connection: connection status check
*   tcp: TCP connection check
*   http: HTTP connection check', example='connection'),
      healthyCheckTimes?: int32(name='HealthyCheckTimes', description='The maximum number of health check retries when the instance state changes from unhealthy to healthy.', example='2'),
      port?: int32(name='Port', description='The port number of the application for which Microservices Governance is enabled.', example='6001'),
      unhealthyCheckTimes?: int32(name='UnhealthyCheckTimes', description='The maximum number of health check retries when the instance state changes from healthy to unhealthy.', example='2'),
    }(name='AppDetail', description='The information about the associated application for which Microservices Governance is enabled when the Source parameter is set to governance.'),
    clusters?: [ 
      {
        defaultCheckPort?: int32(name='DefaultCheckPort', description='The default port used for a health check.', example='80'),
        defaultPort?: int32(name='DefaultPort', description='The default port.', example='80'),
        healthCheckerType?: string(name='HealthCheckerType', description='The type of the health check.', example='Heartbeat Reporting'),
        metadata?: map[string]any(name='Metadata', description='The metadata of the cluster.', example='111'),
        name?: string(name='Name', description='The cluster name.', example='test'),
        serviceName?: string(name='ServiceName', description='The full name of the service.', example='DEFAULT_GROUP@@nacos.test.3'),
        useIPPort4Check?: boolean(name='UseIPPort4Check', description='Indicates whether an end-to-end health check was initiated by the server. This parameter is valid only if the service is not a temporary service.', example='true'),
      }
    ](name='Clusters', description='The cluster information.'),
    ephemeral?: boolean(name='Ephemeral', description='Indicates whether the service is a temporary service. Valid values:

*   `true`: yes
*   `false`: no', example='true'),
    groupName?: string(name='GroupName', description='The service group to which the service belongs.', example='DEFAULT_GROUP'),
    metadata?: map[string]any(name='Metadata', description='The metadata of the service.', example='111'),
    name?: string(name='Name', description='The name of the service.', example='nacos.test.3'),
    protectThreshold?: float(name='ProtectThreshold', description='The protection threshold.', example='0'),
    selectorType?: string(name='SelectorType', description='The election mode.', example='none'),
    source?: string(name='Source', description='The source type of the service. Valid values:

*   console: The service was registered in the console.
*   sdk: The service was registered by using the SDK.
*   governance: The service was registered on Microservices Governance.', example='console'),
  }(name='Data', description='The data returned.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request was successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='52BA6DA6-A702-4362-A32F-DFF79655****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model ListAnsServiceClustersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAnsServiceClustersResponseBody(name='body'),
}

/**
  * > The operation is not provided in Nacos SDKs. For information about Nacos SDKs, see the [official documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
 * @tags cluster
 */
async function listAnsServiceClusters(request: ListAnsServiceClustersRequest): ListAnsServiceClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAnsServiceClusters', 'POST', '/', 'json', false, 'json', request);
}

model ListAnsServicesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  clusterId?: string(name='ClusterId', description='The ID of the cluster.

> This operation contains both the InstanceId and ClusterId parameters. You must specify one of them.', example='mse-09k1q11****', position='Query'),
  clusterName?: string(name='ClusterName', description='查询服务下某个集群的实例列表是所需要的参数', position='Query'),
  groupName?: string(name='GroupName', description='The name of the contact group.', example='name', position='Query'),
  hasIpCount?: string(name='HasIpCount', description='Specifies whether to query the number of instances that are used for the service.', example='true', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.

> This operation contains both the InstanceId and ClusterId parameters. You must specify one of them.', example='mse-cn-st21v5****', position='Query'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='12233****', position='Query'),
  pageNum: int32(name='PageNum', description='The number of the page to return.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='The number of entries returned per page.', example='10', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}', position='Query'),
  serviceName?: string(name='ServiceName', description='The name of the service.', example='name', position='Query'),
}

model ListAnsServicesResponseBody = {
  data?: [ 
    {
      clusterCount?: int32(name='ClusterCount', description='The total number of clusters.', example='1'),
      groupName?: string(name='GroupName', description='The name of the contact group.', example='name'),
      healthyInstanceCount?: int32(name='HealthyInstanceCount', description='The total number of instances with healthy heartbeats.', example='1'),
      ipCount?: int32(name='IpCount', description='The total number of instances that are used for the current service.', example='1'),
      name?: string(name='Name', description='The name of the service.', example='name'),
      source?: string(name='Source'),
    }
  ](name='Data', description='The details of the data.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code returned.', example='202'),
  message?: string(name='Message', description='The message returned.', example='The request was successfully processed.'),
  pageNumber?: int32(name='PageNumber', description='The number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='52BA6DA6-A702-4362-A32F-DFF79655****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
  totalCount?: int32(name='TotalCount', description='The total number of instances returned.', example='7'),
}

model ListAnsServicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAnsServicesResponseBody(name='body'),
}

/**
  * > The operation is not provided in Nacos SDKs. For information about Nacos SDKs, see the [official documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
 * @tags cluster
 */
async function listAnsServices(request: ListAnsServicesRequest): ListAnsServicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAnsServices', 'POST', '/', 'json', false, 'json', request);
}

model ListAppBySwimmingLaneGroupTagRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  groupId: long(name='GroupId', description='The ID of the lane group.', example='119', position='Query'),
  namespace?: string(name='Namespace', description='The name of the Microservices Engine (MSE) namespace that you want to query.', example='default', maxLength=64, position='Query'),
  tag: string(name='Tag', description='The tag.', example='gray', position='Query'),
}

model ListAppBySwimmingLaneGroupTagResponseBody = {
  data?: any(name='Data', description='The details of the data.', example='[{appName:"test",appId:"hkhon1po62@958bba95910341f
"}]'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  message?: string(name='Message', description='The message returned.', example='The request was successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7466566F-F30F-4A29-965D-3E0AF21D****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model ListAppBySwimmingLaneGroupTagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAppBySwimmingLaneGroupTagResponseBody(name='body'),
}

/**
  * @deprecated
  *
 * @tags msc
 */
// Deprecated
async function listAppBySwimmingLaneGroupTag(request: ListAppBySwimmingLaneGroupTagRequest): ListAppBySwimmingLaneGroupTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAppBySwimmingLaneGroupTag', 'POST', '/', 'json', false, 'json', request);
}

model ListAppBySwimmingLaneGroupTagsRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language in which you want to display the results. Valid values: zh and en. zh indicates Chinese, which is the default value. en indicates English.', example='zh', position='Query'),
  groupId: long(name='GroupId', description='The ID of the lane group.', example='1', position='Query'),
  namespace: string(name='Namespace', description='The name of the MSE namespace that you want to query.', example='default', maxLength=64, position='Query'),
  tags?: [ string ](name='Tags', description='The tag based on which you want to list applications.', shrink='json', position='Query'),
}

model ListAppBySwimmingLaneGroupTagsResponseBody = {
  data?: map[string][ DataValue   ](name='Data', description='The returned data.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Success'),
  message?: string(name='Message', description='The additional request information.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='6832e76b-bb5f-4dea-****-************'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:', example='True'),
}

model ListAppBySwimmingLaneGroupTagsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAppBySwimmingLaneGroupTagsResponseBody(name='body'),
}

async function listAppBySwimmingLaneGroupTags(request: ListAppBySwimmingLaneGroupTagsRequest): ListAppBySwimmingLaneGroupTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAppBySwimmingLaneGroupTags', 'POST', '/', 'json', false, 'json', request);
}

model ListApplicationsWithTagRulesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  appId?: string(name='AppId', description='The ID of the application.', example='xjpc0h9h4d@xxx', deprecated='true', position='Query'),
  appName?: string(name='AppName', description='The name of the application.', example='test', maxLength=64, position='Query'),
  namespace?: string(name='Namespace', description='The MSE namespace to which the application belongs.', example='default', maxLength=64, position='Query'),
  pageNumber: int32(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='The number of entries to return on each page.', example='10', maximum=50, position='Query'),
  region?: string(name='Region', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  source?: string(name='Source', description='The source of the routing rule. Default value: edasmsc.', example='edasmsc', position='Query'),
}

model ListApplicationsWithTagRulesResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    result?: [ 
      {
        appId?: string(name='AppId', description='The application ID.', example='daqijp6c31@xxx'),
        appName?: string(name='AppName', description='The application name.', example='service-lottery-core'),
        namespace?: string(name='Namespace', description='The MSE namespace to which the application belongs.', example='default'),
        routeRules?: [ 
          {
            enable?: boolean(name='Enable', description='Indicates whether the alert rule is enabled. Valid values:

*   `true`
*   `false`', example='true'),
            id?: long(name='Id', description='The rule ID.', example='653'),
            instanceNum?: int32(name='InstanceNum', description='The number of instances.', example='1'),
            name?: string(name='Name', description='The rule name.', example='dubbo'),
            rate?: int32(name='Rate', description='The rate.', example='10'),
            rules?: {
              dubbo?: [ 
                {
                  appId?: string(name='appId'),
                  argumentItems?: [ 
                    {
                      cond?: string(name='cond'),
                      datum?: string(name='datum'),
                      divisor?: int32(name='divisor'),
                      expr?: string(name='expr'),
                      index?: int32(name='index'),
                      nameList?: [ string ](name='nameList'),
                      operator?: string(name='operator'),
                      rate?: int32(name='rate'),
                      remainder?: int32(name='remainder'),
                      value?: string(name='value'),
                    }
                  ](name='argumentItems'),
                  condition?: string(name='condition'),
                  group?: string(name='group'),
                  methodName?: string(name='methodName'),
                  paramTypes?: [ string ](name='paramTypes'),
                  serviceName?: string(name='serviceName'),
                  tags?: [ string ](name='tags'),
                  triggerPolicy?: string(name='triggerPolicy'),
                  version?: string(name='version'),
                }
              ](name='dubbo'),
              springcloud?: [ 
                {
                  appId?: string(name='appId'),
                  condition?: string(name='condition'),
                  enable?: boolean(name='enable'),
                  path?: string(name='path'),
                  paths?: [ string ](name='paths'),
                  priority?: int32(name='priority'),
                  restItems?: [ 
                    {
                      cond?: string(name='cond'),
                      datum?: string(name='datum'),
                      divisor?: int32(name='divisor'),
                      name?: string(name='name'),
                      nameList?: [ string ](name='nameList'),
                      operator?: string(name='operator'),
                      rate?: int32(name='rate'),
                      remainder?: int32(name='remainder'),
                      type?: string(name='type'),
                      value?: string(name='value'),
                    }
                  ](name='restItems'),
                  tags?: [ string ](name='tags'),
                  triggerPolicy?: string(name='triggerPolicy'),
                }
              ](name='springcloud'),
            }(name='Rules', description='The details of the routing rule.', example='{
  	"dubbo": [{
    "serviceName": "com.taobao.hsf.common.DemoService",
    "group": "",
    "version": "",
    "methodName": "sayHello",
    "condition": "AND",
    "argumentItems": [{
    	"index": 0,
    	"expr": "",
    	"operator": "rawvalue",
    	"value": "jim",
    	"cond": "=="
    }]
  	}]
  }'),
            status?: int32(name='Status', description='The status.', example='1'),
            tag?: string(name='Tag', description='The tag.', example='gray'),
          }
        ](name='RouteRules', description='The queried rules.'),
        routeStatus?: long(name='RouteStatus', description='The route state. Valid values:

*   0: disabled
*   1: enabled', example='1'),
      }
    ](name='Result', description='The returned data.'),
    totalSize?: int32(name='TotalSize', description='The total number of entries returned.', example='1'),
  }(name='Data', description='The response parameters.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The returned message.

*   If the request is successful, a success message is returned.
*   If the request fails, an error message is returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7466566F-F30F-4A29-965D-3E0AF21D****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model ListApplicationsWithTagRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListApplicationsWithTagRulesResponseBody(name='body'),
}

async function listApplicationsWithTagRules(request: ListApplicationsWithTagRulesRequest): ListApplicationsWithTagRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApplicationsWithTagRules', 'GET', '/', 'json', false, 'json', request);
}

model ListAuthPolicyRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values: zh-CN and en-US. Default value: zh-CN. The value zh-CN indicates Chinese and the value en-US indicates English.', example='zh', position='Query'),
  appId?: string(name='AppId', description='The application ID.', example='jgy4cadmqo@***', position='Query'),
  name?: string(name='Name', description='The name of the authentication rule.', example='auto-rule-**', position='Query'),
  namespace?: string(name='Namespace', description='The name of the Microservices Engine (MSE) namespace.', example='default', position='Query'),
  pageNumber: string(name='PageNumber', description='The page number.', example='1', position='Query'),
  pageSize: string(name='PageSize', description='The number of entries per page.', example='10', position='Query'),
  protocol?: string(name='Protocol', description='The protocol type. Valid values:

*   **SPRING_CLOUD**
*   **DUBBO**
*   **istio**', example='SPRING_CLOUD', position='Query'),
  region: string(name='Region', description='The region ID.', example='cn-shanghai', position='Query'),
  source: string(name='Source', description='The service source.', example='edasmsc', position='Query'),
}

model ListAuthPolicyResponseBody = {
  code?: int32(name='Code', description='The response code.', example='200'),
  data?: {
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    result?: [ 
      {
        accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account to which the resource belongs.', example='19039813784***'),
        appId?: string(name='AppId', description='The application ID.', example='hkhon1po62@5f1b08becb*****'),
        appName?: string(name='AppName', description='The application name.', example='spring-cloud-a'),
        authRule?: [ 
          {
            appIds?: [ string ](name='AppIds', description='The IDs of applications.'),
            authType?: int32(name='AuthType', description='The rule type. Valid values:

*   0: by application
*   1: by namespace', example='0'),
            black?: boolean(name='Black', description='Indicates whether the rule is a blacklist rule.', example='false'),
            k8sNamespaces?: [ string ](name='K8sNamespaces', description='The queried namespaces.'),
            method?: {
              group?: string(name='Group', description='The group.', example='default'),
              name?: string(name='Name', description='The method name.', example='hello'),
              parameterTypes?: [ string ](name='ParameterTypes', description='The types of request parameters.'),
              returnType?: string(name='ReturnType', description='The type of the return value.', example='Boolean'),
              serviceName?: string(name='ServiceName', description='The service name.', example='spring-cloud-a'),
              version?: string(name='Version', description='The method version.', example='0.0.1'),
            }(name='Method', description='The request method.'),
            path?: string(name='Path', description='The service path.', example='/a'),
          }
        ](name='AuthRule', description='The content of the service authentication rule.'),
        authType?: int32(name='AuthType', description='The rule type. Valid values:

*   0: by application
*   1: by namespace', example='0'),
        enable?: boolean(name='Enable', description='Indicates whether the rule was enabled or disabled. Valid values:

*   `true`: enabled
*   `false`: disabled', example='false'),
        id?: int32(name='Id', description='The rule ID.', example='204'),
        k8sNamespace?: string(name='K8sNamespace', description='The namespace.', example='c19c6c500e1ff4d7abc7bed9b8236***'),
        name?: string(name='Name', description='The name of the authentication rule.', example='test'),
        namespaceId?: string(name='NamespaceId', description='The namespace ID.', example='ced54a95-4e33-4bda-be7e-37e95868***'),
        protocol?: string(name='Protocol', description='The protocol type. Valid values:

*   **SPRING_CLOUD**
*   **DUBBO**
*   **istio**', example='SPRING_CLOUD'),
        regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
        source?: string(name='Source', description='The source of the application.', example='edasmsc'),
        status?: int32(name='Status', description='The status.', example='1'),
      }
    ](name='Result', description='The data returned.'),
    totalSize?: int32(name='TotalSize', description='The total number of entries.', example='11'),
  }(name='Data', description='The details of the data.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The returned message.'),
  requestId?: string(name='RequestId', description='The request ID.', example='05A5A150-4A5F-5A8C-97D6-710776CC8408'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='True'),
}

model ListAuthPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAuthPolicyResponseBody(name='body'),
}

async function listAuthPolicy(request: ListAuthPolicyRequest): ListAuthPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAuthPolicy', 'POST', '/', 'json', false, 'json', request);
}

model ListCircuitBreakerRulesRequest {
  regionId?: string(name='RegionId', position='Host'),
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values: zh-CN and en-US. Default value: zh-CN. The value zh-CN indicates Chinese, and the value en-US indicates English.', example='zh', position='Query'),
  appId?: string(name='AppId', description='The ID of the application.', example='hkhon1po62@c3df23522bXXXXX', position='Query'),
  appName: string(name='AppName', description='The name of the application.', example='spring-cloud-a', position='Query'),
  namespace: string(name='Namespace', description='The microservice namespace to which the application belongs.', example='default', position='Query'),
  pageIndex?: int32(name='PageIndex', description='The start page of the returned pages. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 6.', example='10', position='Query'),
  resource?: string(name='Resource', description='This parameter is used for exact match of circuit breaking rules.', example='/a', position='Query'),
  resourceSearchKey?: string(name='ResourceSearchKey', description='This parameter is used for fuzzy match of circuit breaking rules.', example='a', position='Query'),
}

model ListCircuitBreakerRulesResponseBody = {
  code?: int32(name='Code', description='The response code.', example='200'),
  data?: {
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    result?: [ 
      {
        appId?: string(name='AppId', description='The ID of the application.', example='hkhon1po62@c3df23522bXXXXX'),
        appName?: string(name='AppName', description='The name of the application.', example='spring-cloud-a'),
        enable?: boolean(name='Enable', description='Indicates whether the rule was enabled.', example='true'),
        fallbackObject?: string(name='FallbackObject', description='The behavior that was bound to the rule.', example='"{\\"appName\\":\\"spring-cloud-a\\",\\"fallbackBehavior\\":{\\"webFallbackMode\\":0,\\"webRespContentType\\":0,\\"webRespMessage\\":\\"Blocked\\",\\"webRespStatusCode\\":429},\\"id\\":977,\\"name\\":\\"Fallback\\",\\"namespace\\":\\"default\\",\\"resourceClassification\\":1}"'),
        halfOpenBaseAmountPerStep?: int32(name='HalfOpenBaseAmountPerStep', description='The minimum number of requests that can be passed in each step after circuit breaking recovers.', example='5'),
        halfOpenRecoveryStepNum?: int32(name='HalfOpenRecoveryStepNum', description='The number of circuit breaking recovery steps.', example='1'),
        maxAllowedRtMs?: int32(name='MaxAllowedRtMs', description='The maximum RT. Unit: milliseconds. If the RT of a request is greater than the value of this parameter, a slow call is counted. If you set Strategy to 0, you must specify this parameter.', example='200'),
        minRequestAmount?: int32(name='MinRequestAmount', description='The minimum number of requests to trigger circuit breaking. If the number of requests in the current time window is less than the value of this parameter, circuit breaking is not triggered even if the circuit breaking rule is met.', example='10'),
        namespace?: string(name='Namespace', description='The microservice namespace to which the application belongs.', example='default'),
        regionId?: string(name='RegionId', description='The region in which the instance resides.', example='cn-hangzhou'),
        resource?: string(name='Resource', description='The name of the interface to which the rule is applicable. The interface name must be the same as the name on the interface details page in the console.', example='/a'),
        resourceType?: int32(name='ResourceType'),
        retryTimeoutMs?: int32(name='RetryTimeoutMs', description='The period in which circuit breaking is implemented. Unit: milliseconds. If circuit breaking is implemented on the requests for the route, the calls to all the requests for the route fail in the configured circuit breaking period.', example='10000'),
        ruleId?: long(name='RuleId', description='The ID of the rule.', example='1'),
        statIntervalMs?: int32(name='StatIntervalMs', description='The length of the time window. Unit: milliseconds. The valid range is from 1 second to 120 minutes.', example='20000'),
        strategy?: int32(name='Strategy', description='The threshold type.

Valid values:

*   0

    <!-- -->

    :

    <!-- -->

    slow call proportion

    <!-- -->

*   1

    <!-- -->

    :

    <!-- -->

    abnormal proportion

    <!-- -->', example='0'),
        threshold?: float(name='Threshold', description='A percentage threshold for triggering circuit breaking. Valid values: 0-1. These values represent 0% to 100%.', example='0.8'),
      }
    ](name='Result', description='The returned result.'),
    totalSize?: int32(name='TotalSize', description='The total number of pages.', example='3'),
  }(name='Data', description='The details of the rule.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='4E9FDCFE-0738-493B-B801-82BDFBCB****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ListCircuitBreakerRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCircuitBreakerRulesResponseBody(name='body'),
}

async function listCircuitBreakerRules(request: ListCircuitBreakerRulesRequest): ListCircuitBreakerRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCircuitBreakerRules', 'POST', '/', 'json', false, 'json', request);
}

model ListClusterConnectionTypesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
}

model ListClusterConnectionTypesResponseBody = {
  code?: int32(name='Code', description='The response code returned.', example='200'),
  data?: [ 
    {
      showName?: string(name='ShowName', description='The connection type.', example='slb'),
    }
  ](name='Data', description='The details of the data.'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **ErrMessage** parameter.

>  If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8625467C-27DD-5711-878E-6857E3074937'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='True'),
}

model ListClusterConnectionTypesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListClusterConnectionTypesResponseBody(name='body'),
}

async function listClusterConnectionTypes(request: ListClusterConnectionTypesRequest): ListClusterConnectionTypesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListClusterConnectionTypes', 'POST', '/', 'json', false, 'json', request);
}

model ListClusterHealthCheckTaskRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse_prepaid_public_cn-7pp2o4wfx01', position='Query'),
  pageNum?: int32(name='PageNum', description='The number of the page to return.', example='0', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10', position='Query'),
  regionId?: string(name='RegionId', description='The region in which the instance resides.', example='cn-hangzhou', position='Query'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}', position='Query'),
}

model ListClusterHealthCheckTaskResponseBody = {
  code?: int32(name='Code', description='The status code. A value of 200 is returned if the request was successful.', example='200'),
  data?: {
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='0'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    result?: [ 
      {
        appVersion?: string(name='AppVersion', description='The complete version number.', example='1.2.1'),
        chargeType?: string(name='ChargeType', description='The billing method.', example='PREPAY'),
        clusterType?: string(name='ClusterType', description='The type of the cluster.', example='Nacos-Ans'),
        createTime?: string(name='CreateTime', description='The time when the task was created.', example='2022-06-20T06:51:46Z'),
        id?: int32(name='Id', description='The ID.', example='1'),
        imageVersion?: string(name='ImageVersion', description='A redundant parameter.', example='null'),
        instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse_ingresspost-cn-0jbvrcex****'),
        primaryUser?: string(name='PrimaryUser', description='The ID of the user to which the instance belongs.', example='123456'),
        replica?: string(name='Replica', description='The number of nodes in the instance.', example='3'),
        riskList?: [ 
          {
            description?: string(name='Description', description='The description.', example='{\\\\"desc\\\\":\\\\"The engine version is outdated and a large number of features are not supported. Upgrade the engine to the latest version at the earliest opportunity. \\\\"}'),
            id?: int32(name='Id', description='The ID.', example='3426'),
            module?: string(name='Module', description='A redundant parameter.', example='null'),
            mute?: boolean(name='Mute', description='Indicates whether the risk item notification feature is disabled.

*   true: disabled
*   false: enabled', example='false'),
            noticeFeature?: boolean(name='NoticeFeature', description='A redundant parameter.', example='null'),
            primaryUser?: string(name='PrimaryUser', description='The ID of the user to which the cluster belongs.', example='123456'),
            riskCode?: string(name='RiskCode', description='The risk code.', example='22020010001'),
            riskLevel?: string(name='RiskLevel', description='The severity of the risk. Valid values:

*   HIGH: high risk
*   MID: medium risk
*   LOW: low risk', example='MID'),
            riskName?: string(name='RiskName', description='The name of the risk.', example='The engine version is outdated.'),
            riskType?: string(name='RiskType', description='The type of the risk.', example='Version risk'),
            situation?: string(name='Situation', description='The situation.', example='{\\\\"desc\\\\":\\\\"The engine version is outdated and a large number of features are not supported.\\\\",\\\\"links\\\\":\\[{\\\\"type\\\\":\\\\"url\\\\",\\\\"value\\\\":\\\\"https://xxxx"\\\\",\\\\"desc\\\\":\\\\"Release notes\\\\"}]}'),
            suggestion?: string(name='Suggestion', description='The suggestion.', example='{"desc": "Upgrade to the latest version at the earliest opportunity.", "links":\\[{"type": "upgrade", "desc": "Click to upgrade"}]}'),
            taskId?: long(name='TaskId', description='The ID of the associated parent task.', example='1'),
            type?: int32(name='Type', description='A redundant parameter.', example='null'),
            values?: string(name='Values', description='A redundant parameter.', example='null'),
          }
        ](name='RiskList', description='The list of risk items.'),
        score?: int32(name='Score', description='The total score.', example='60'),
        spec?: string(name='Spec', description='The specifications.', example='MSE_SC_2_4_200_c'),
        status?: string(name='Status', description='The status of the task.', example='FINISH'),
        totalItem?: int32(name='TotalItem', description='The total number of check items.', example='10'),
        totalRisk?: int32(name='TotalRisk', description='The total number of risk items.', example='3'),
        type?: string(name='Type', description='A redundant parameter.', example='null'),
        updateTime?: string(name='UpdateTime', description='The last update time.', example='2022-11-12 15:07:55'),
        versionCode?: string(name='VersionCode', description='The version number.', example='NACOS_ANS_1_2_1_3'),
      }
    ](name='Result', description='The list of health check tasks.'),
    totalSize?: int32(name='TotalSize', description='The total number of returned entries.', example='9'),
  }(name='Data', description='The details of the data.'),
  dynamicCode?: string(name='DynamicCode', description='The dynamic part in the error message.', example='code'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the \\*\\*%s\\*\\* variable in the **ErrMessage** parameter.

> If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed. Take note of the following rules:

*   The **ErrorCode** parameter is not returned if the request is successful.
*   The **ErrorCode** parameter is returned if the request fails. For more information, see the **Error codes** section in this topic.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request was successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4E9FDCFE-0738-493B-B801-82BDFBCB****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model ListClusterHealthCheckTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListClusterHealthCheckTaskResponseBody(name='body'),
}

async function listClusterHealthCheckTask(request: ListClusterHealthCheckTaskRequest): ListClusterHealthCheckTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListClusterHealthCheckTask', 'POST', '/', 'json', false, 'json', request);
}

model ListClusterTypesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  connectType?: string(name='ConnectType', description='The network type. Valid values:

*   slb
*   eni', example='slb', position='Query'),
  mseVersion?: string(name='MseVersion', description='The edition of the MSE instance that you want to purchase.

*   mse_pro: Professional Edition
*   mse_dev: Developer Edition', example='mse_pro', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the instance resides. The region is supported by Microservices Engine (MSE).', example='cn-hangzhou', position='Query'),
}

model ListClusterTypesResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: [ 
    {
      code?: string(name='Code'),
      showName?: string(name='ShowName', description='The type of the MSE engine that can be activated.', example='Zookeeper'),
    }
  ](name='Data', description='The data entries returned.'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the \\*\\*%s\\*\\* variable in the **ErrMessage** parameter.

> If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request was successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='821B5B05-8919-5FBB-BA75-417BFC093EB8'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='True'),
}

model ListClusterTypesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListClusterTypesResponseBody(name='body'),
}

async function listClusterTypes(request: ListClusterTypesRequest): ListClusterTypesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListClusterTypes', 'POST', '/', 'json', false, 'json', request);
}

model ListClusterVersionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  clusterType?: string(name='ClusterType', description='The type of the instance. Valid values: ZooKeeper, Nacos-Ans, and Eureka.', example='Nacos-Ans', position='Query'),
  mseVersion?: string(name='MseVersion', description='The instance edition. Valid values:

*   `mse_dev`: Developer Edition.
*   `mse_pro`: Professional Edition. This is the default value.', example='mse_pro', position='Query'),
}

model ListClusterVersionsResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: [ 
    {
      clusterType?: string(name='ClusterType', description='The type of the instance.', example='Nacos-Ans'),
      code?: string(name='Code', description='The code of the instance type.', example='NACOS_2_0_0'),
      showName?: string(name='ShowName', description='The version of the instance.', example='2.1.0'),
    }
  ](name='Data', description='The details of the data.'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request was successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7717BE5B-C958-5F87-BF49-464AA276EDD1'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model ListClusterVersionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListClusterVersionsResponseBody(name='body'),
}

async function listClusterVersions(request: ListClusterVersionsRequest): ListClusterVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListClusterVersions', 'POST', '/', 'json', false, 'json', request);
}

model ListClustersRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  clusterAliasName?: string(name='ClusterAliasName', description='The alias of the instance. Fuzzy match is supported.', example='cluster', position='Query'),
  keyId?: string(name='KeyId', position='Query'),
  pageNum: int32(name='PageNum', description='The number of the page to return.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='The number of entries to return on each page.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which the instance resides. The region is supported by MSE.', example='cn-hangzhou', position='Query'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. For more information about resource groups, see the topic "View basic information of a resource group."', example='rg-acfmxbzafebvvfa', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag.', example='env'),
      value?: string(name='Value', description='The value of the tag.', example='prd'),
    }
  ](name='Tag', description='The list of tags. A maximum number of 20 tags are supported.', position='Query'),
}

model ListClustersResponseBody = {
  data?: [ 
    {
      appVersion?: string(name='AppVersion', description='The application version.', example='1.9.3'),
      canUpdate?: boolean(name='CanUpdate', description='Indicates whether the instance can be upgraded.', example='true'),
      chargeType?: string(name='ChargeType', description='The billing method, such as subscription or pay-as-you-go.', example='Pay-as-you-go'),
      clusterAliasName?: string(name='ClusterAliasName', description='The alias of the cluster.', example='mse-7413****'),
      clusterName?: string(name='ClusterName', description='The name of the cluster.', example='mse-cn-st21ri2****'),
      clusterType?: string(name='ClusterType', description='The type of the cluster. Valid values: ZooKeeper, Nacos-Ans, and Eureka.', example='Eureka'),
      createTime?: string(name='CreateTime', description='The time when the cluster was created.', example='2020-07-31 11:36:08'),
      endDate?: string(name='EndDate', description='The time when the cluster expires.', example='2021-08-01 00:00:00'),
      initStatus?: string(name='InitStatus', description='The initialization status of the instance.', example='RESTART_SUCCESS'),
      instanceCount?: long(name='InstanceCount', description='The number of clusters.', example='2'),
      instanceId?: string(name='InstanceId', description='The instance ID.', example='mse-cn-st21ri2****'),
      internetAddress?: string(name='InternetAddress', description='The public IP address.', example='47.98.XX.XX'),
      internetDomain?: string(name='InternetDomain', description='The public endpoint.', example='mse-7413****-p.eureka.mse.aliyuncs.com'),
      intranetAddress?: string(name='IntranetAddress', description='The internal IP address.', example='192.168.XX.XX'),
      intranetDomain?: string(name='IntranetDomain', description='The internal endpoint.', example='mse-7413****-eureka.mse.aliyuncs.com'),
      maintenancePeriod?: {
        endTime?: string(name='EndTime'),
        startTime?: string(name='StartTime'),
      }(name='MaintenancePeriod'),
      mseVersion?: string(name='MseVersion', description='The edition of the cluster.', example='mse_pro'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-acfmv7jiavm4uxa'),
      tags?: map[string]any(name='Tags', description='The tags that are attached to the instance.'),
      versionCode?: string(name='VersionCode', description='The version information.', example='EUREKA_1_9_3'),
      vpcId?: string(name='VpcId', example='vpc-bp1hcg467ekqsv0zr****'),
    }
  ](name='Data', description='The details of the data.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code returned.', example='202'),
  message?: string(name='Message', description='The message returned.', example='The request was successfully processed.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='69AD2AA7-DB47-449B-941B-B14409DF****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
  totalCount?: int32(name='TotalCount', description='The total number of returned instances.', example='7'),
}

model ListClustersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListClustersResponseBody(name='body'),
}

async function listClusters(request: ListClustersRequest): ListClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListClusters', 'POST', '/', 'json', false, 'json', request);
}

model ListConfigTrackRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  dataId?: string(name='DataId', description='The ID of the configuration.', example='ballot', position='Query'),
  endTs: long(name='EndTs', description='The end timestamp. Unit: seconds.', example='1657178373', position='Query'),
  group?: string(name='Group', description='The name of the configuration group.', example='DEFAULT_GROUP', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='mse_prepaid_public_cn-i7m2ne****', position='Query'),
  ip?: string(name='Ip', description='The IP address of the listener.', example='192.168.22.2', position='Query'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='f3a510e2-df52-4fad-9815-42d8bc40****', position='Query'),
  pageNum: long(name='PageNum', description='The number of the page to return.', example='1', position='Query'),
  pageSize: long(name='PageSize', description='The number of entries to return on each page.', example='10', position='Query'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}', position='Query'),
  reverse?: boolean(name='Reverse', description='Specifies whether to enable reverse ordering. Valid values:

*   true
*   false', example='true', position='Query'),
  startTs: long(name='StartTs', description='The start timestamp. Unit: seconds.', example='1671010148', position='Query'),
}

model ListConfigTrackResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request was successfully processed.'),
  pageNumber?: long(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0CE3ABD2-1E04-561F-A9B4-0423D50****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='3'),
  traces?: [ 
    {
      client?: boolean(name='Client', description='Indicates whether the request is sent from the client. Valid values:

*   true
*   false', example='false'),
      dataId?: string(name='DataId', description='The ID of the configuration.', example='eir-server.properties'),
      delay?: string(name='Delay', description='The response latency. Unit: milliseconds.', example='0'),
      event?: string(name='Event', description='The event. Valid values:

*   pull: configuration acquisition events
*   persist: persistence events', example='pull'),
      group?: string(name='Group', description='The name of the configuration group.', example='DEFAULT_GROUP'),
      logDate?: string(name='LogDate', description='The logging time.', example='2022-11-28 15:09:15'),
      md5?: string(name='Md5', description='The MD5 value.', example='d21c9091c60daa0ff7ee2f420141e5a0'),
      push?: boolean(name='Push', description='Indicates whether messages are pushed by a server. Valid values:

*   true
*   false', example='false'),
      requestIp?: string(name='RequestIp', description='The source IP address of the request.', example='192.168.1.2'),
      responseIp?: string(name='ResponseIp', description='The response node.', example='mse-1973b9a0-1670834*****-reg-center-0-2'),
      result?: string(name='Result', description='The result.', example='ok'),
      ts?: string(name='Ts', description='The timestamp that indicates the time when the metric value is collected.

Unit: seconds.', example='1659666529'),
      type?: string(name='Type', description='The release type. Valid values:

*   beta: beta release
*   tag: canary release
*   batch: batch release', example='beta'),
    }
  ](name='Traces', description='The track data.'),
}

model ListConfigTrackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListConfigTrackResponseBody(name='body'),
}

async function listConfigTrack(request: ListConfigTrackRequest): ListConfigTrackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListConfigTrack', 'POST', '/', 'json', false, 'json', request);
}

model ListEngineNamespacesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-st21ri2****', position='Query'),
}

model ListEngineNamespacesResponseBody = {
  data?: [ 
    {
      configCount?: int32(name='ConfigCount', description='The quota value.', example='1'),
      namespace?: string(name='Namespace', description='The namespace.', example='DEFAULT'),
      namespaceDesc?: string(name='NamespaceDesc', description='The description of the namespace.', example='mytest'),
      namespaceShowName?: string(name='NamespaceShowName', description='The name of the namespace.', example='public'),
      quota?: int32(name='Quota', description='The quota.', example='200'),
      serviceCount?: string(name='ServiceCount', description='The number of active services.', example='3'),
      sourceType?: string(name='SourceType', description='The source from which the namespace was created.', example='mse'),
      type?: int32(name='Type', description='The type of the namespace. Valid values:

*   `0`: global configuration
*   `1`: default namespace
*   `2`: custom namespace', example='0'),
    }
  ](name='Data', description='The details of the data.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code.', example='202'),
  message?: string(name='Message', description='The message returned.', example='The request was successfully processed.'),
  pageNumber?: int32(name='PageNumber', description='The number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='062D13C5-DEA3-4921-8918-C49A0F1B****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
  totalCount?: int32(name='TotalCount', description='The total number of returned instances.', example='7'),
}

model ListEngineNamespacesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEngineNamespacesResponseBody(name='body'),
}

async function listEngineNamespaces(request: ListEngineNamespacesRequest): ListEngineNamespacesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEngineNamespaces', 'POST', '/', 'json', false, 'json', request);
}

model ListEurekaInstancesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  clusterId?: string(name='ClusterId', description='The ID of the instance.', example='mse-09k1q11****', position='Query'),
  pageNum: int32(name='PageNum', description='The number of the page to return.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='The number of entries to return on each page.', example='10', position='Query'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}', position='Query'),
  serviceName: string(name='ServiceName', description='The name of the service.', example='name', position='Query'),
}

model ListEurekaInstancesResponseBody = {
  data?: [ 
    {
      app?: string(name='App', description='The name of the application.', example='CONTACTINFO'),
      durationInSecs?: int32(name='DurationInSecs', description='The timeout period of the instance.\\
After the specified timeout period expires, the service is unavailable by default and is deleted.', example='90'),
      homePageUrl?: string(name='HomePageUrl', description='The URL of the homepage.', example='http://30.5.XX.XX:8091/'),
      hostName?: string(name='HostName', description='The hostname.', example='30.5.XX.XX'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='L-PC1A6A28-****.hz.ali.com:contactinfo:8091'),
      ipAddr?: string(name='IpAddr', description='The IP address.', example='30.5.XX.XX'),
      lastDirtyTimestamp?: long(name='LastDirtyTimestamp', description='The time when the instance was last modified.', example='20201009115543'),
      lastUpdatedTimestamp?: long(name='LastUpdatedTimestamp', description='The time when the instance heartbeat was last checked.', example='20201010071203'),
      metadata?: map[string]any(name='Metadata', description='The metadata.', example='[string]'),
      port?: int32(name='Port', description='The service port number.', example='8091'),
      renewalIntervalInSecs?: int32(name='RenewalIntervalInSecs', description='The maximum interval between two heartbeat checks after a heartbeat check times out.\\
Default value: 10.', example='10'),
      securePort?: int32(name='SecurePort', description='The security port.', example='443'),
      status?: string(name='Status', description='The number of service providers. The value is in the following format: Number of healthy instances/Total number of instances.', example='1/1'),
      vipAddress?: string(name='VipAddress', description='The virtual IP address (VIP).', example='contactinfo'),
    }
  ](name='Data', description='The details of the data.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code returned.', example='202'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
  totalCount?: int32(name='TotalCount', description='The total number of returned instances.', example='7'),
}

model ListEurekaInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEurekaInstancesResponseBody(name='body'),
}

async function listEurekaInstances(request: ListEurekaInstancesRequest): ListEurekaInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEurekaInstances', 'GET', '/', 'json', false, 'json', request);
}

model ListEurekaServicesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  clusterId: string(name='ClusterId', description='The ID of the instance.', example='mse-09k1q11****', position='Query'),
  pageNum: int32(name='PageNum', description='The number of the page to return.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='The number of entries to return on each page.', example='10', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}', position='Query'),
}

model ListEurekaServicesResponseBody = {
  data?: [ 
    {
      instancesId?: [ string ](name='InstancesId', description='The details of the instance.'),
      name?: string(name='Name', description='The name of the service.', example='CONTACTINFO'),
      upStatus?: string(name='UpStatus', description='The number of service providers. The value is in the following format: Number of healthy instances/Total number of instances.', example='1/1'),
    }
  ](name='Data', description='The details of the data.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code returned.', example='202'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
  totalCount?: int32(name='TotalCount', description='The total number of returned instances.', example='7'),
}

model ListEurekaServicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEurekaServicesResponseBody(name='body'),
}

async function listEurekaServices(request: ListEurekaServicesRequest): ListEurekaServicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEurekaServices', 'GET', '/', 'json', false, 'json', request);
}

model ListExportZookeeperDataRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-7pp2d1****', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='0', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10', position='Query'),
}

model ListExportZookeeperDataResponseBody = {
  data?: [ 
    {
      contentMap?: string(name='ContentMap', description='The details of the task.', example='{}'),
      createTime?: long(name='CreateTime', description='The time when the task was created.', example='1631001140913'),
      exportType?: string(name='ExportType', description='The type of the object that is exported. Valid values:

*   transactionLog: transaction logs
*   snapshot: snapshots', example='snapshot'),
      extend?: string(name='Extend', description='The extension information that is in the JSON format. The extension information facilitates addition of parameters.', example='{}'),
      id?: int32(name='Id', description='The ID of the task.', example='1'),
      instanceId?: string(name='InstanceId', description='The ID of the instance', example='mse-cn-st21ri2****'),
      kubeoneTaskIds?: string(name='KubeoneTaskIds', description='The ID of the associated task at the underlying layer. This parameter is used only to troubleshoot failures.', example='10'),
      status?: string(name='Status', description='The status of the task. Valid values:

*   CREATE: The task is being created.
*   RUNNING: The task is being executed.
*   FINISH: The task is completed.
*   FAILED: The task failed.
*   EXPIRE: The task has expired.', example='FINISH'),
      updateTime?: long(name='UpdateTime', description='The time when the task was updated.', example='1632979237663'),
    }
  ](name='Data', description='The details of the data.'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the \\*\\*%s\\*\\* variable in the **ErrMessage** parameter.

> If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request was successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8BD1E58D-0755-42AC-A599-E6B55112****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model ListExportZookeeperDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListExportZookeeperDataResponseBody(name='body'),
}

async function listExportZookeeperData(request: ListExportZookeeperDataRequest): ListExportZookeeperDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListExportZookeeperData', 'POST', '/', 'json', false, 'json', request);
}

model ListFlowRulesRequest {
  regionId?: string(name='RegionId', position='Host'),
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  appId?: string(name='AppId', description='The ID of the application.', example='hkhon1po62@c3df23522******', position='Query'),
  appName: string(name='AppName', description='The name of the application.', example='xx-demo', position='Query'),
  namespace: string(name='Namespace', description='The namespace.', example='default', position='Query'),
  pageIndex?: int32(name='PageIndex', description='The page number. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10', position='Query'),
  resource?: string(name='Resource', description='The name of the resource.', example='/a', position='Query'),
  resourceSearchKey?: string(name='ResourceSearchKey', description='The keyword that is used for the search.', example='/a', position='Query'),
}

model ListFlowRulesResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: {
    pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    result?: [ 
      {
        appId?: string(name='AppId', description='The ID of the application.', example='hkhon1po62@5f1b08becb*****'),
        appName?: string(name='AppName', description='The application name.', example='finance'),
        controlBehavior?: int32(name='ControlBehavior', description='The throttling effect.

Valid values:

*   0

    <!-- -->

    :

    <!-- -->

    fast failure

    <!-- -->

*   2

    <!-- -->

    :

    <!-- -->

    in queue

    <!-- -->', example='0'),
        enable?: boolean(name='Enable', description='Indicates whether the throttling rule was enabled.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
        fallbackObject?: string(name='FallbackObject', description='The throttling behavior.', example='"{\\"appName\\":\\"spring-cloud-a\\",\\"fallbackBehavior\\":{\\"webFallbackMode\\":0,\\"webRespContentType\\":0,\\"webRespMessage\\":\\"Blocked\\",\\"webRespStatusCode\\":429},\\"id\\":977,\\"name\\":\\"Fallback\\",\\"namespace\\":\\"default\\",\\"resourceClassification\\":1}"'),
        maxQueueingTimeMs?: int32(name='MaxQueueingTimeMs', description='The timeout period for queuing when the value of ControlBehavior is set to 2. Unit: milliseconds.', example='500'),
        metricType?: int32(name='MetricType', description='The statistical dimension. The value 1 indicates that the number of accepted requests is used for statistics.', example='1'),
        namespace?: string(name='Namespace', description='The namespace.', example='default'),
        regionId?: string(name='RegionId', description='The ID of the region in which the instance resides.', example='cn-hangzhou'),
        resource?: string(name='Resource', description='The name of the interface resource.', example='/a'),
        resourceType?: int32(name='ResourceType'),
        ruleId?: long(name='RuleId', description='The rule ID.', example='2'),
        threshold?: float(name='Threshold', description='The throttling threshold.', example='10'),
        trafficTags?: map[string]any(name='TrafficTags', description='A reserved parameter.', example='{\\"origin\\":\\"default\\"}'),
      }
    ](name='Result', description='The data returned.'),
    totalSize?: int32(name='TotalSize', description='The total number of entries.', example='11'),
  }(name='Data', description='The details of the data.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The returned message.'),
  requestId?: string(name='RequestId', description='The request ID.', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.

Valid values:

*   true

    <!-- -->

    :

    <!-- -->

    The request was successful.

    <!-- -->

*   false

    <!-- -->

    :

    <!-- -->

    The request failed.

    <!-- -->', example='true'),
}

model ListFlowRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFlowRulesResponseBody(name='body'),
}

async function listFlowRules(request: ListFlowRulesRequest): ListFlowRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFlowRules', 'POST', '/', 'json', false, 'json', request);
}

model ListGatewayRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  descSort?: boolean(name='DescSort', description='Specifies whether to enable the sorting feature. This feature is not available.', example='false', position='Query'),
  filterParams?: {
    gatewayType?: string(name='GatewayType', description='The type of the gateway.', example='Ingress'),
    gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-5017305290e14centbrveca****'),
    instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse_ingresspre-cn-****'),
    mseTag?: string(name='MseTag', description='The tag of the instance.', example='[{"key":"tagkey","value":"tagvalue"}]'),
    name?: string(name='Name', description='The name of the gateway.', example='rutain-test'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-7y2uye*****'),
    vpc?: string(name='Vpc', description='The ID of the virtual private cloud (VPC).', example='vpc-bp13hhyjntbab7w****'),
  }(name='FilterParams', description='The details of parameters.', shrink='json', position='Query'),
  orderItem?: string(name='OrderItem', description='The order information.', example='{}', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10', position='Query'),
}

model ListGatewayResponseBody = {
  code?: int32(name='Code', description='The return value.', example='200'),
  data?: {
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    result?: [ 
      {
        ahasOn?: boolean(name='AhasOn', description='Indicates whether Application High Availability Service (AHAS) is activated.', example='false'),
        appVersion?: string(name='AppVersion', description='The version of the application.', example='1.0.1.0'),
        armsOn?: boolean(name='ArmsOn', description='Indicates whether Application Real-Time Monitoring Service (ARMS) is activated.', example='false'),
        chargeType?: string(name='ChargeType', description='The billing method.', example='POSTPAY'),
        currentVersion?: string(name='CurrentVersion', description='The current version of the gateway.', example='0.1.0-mse-gw'),
        elastic?: boolean(name='Elastic', description='Indicates whether auto scale-out is enabled.', example='true'),
        elasticInstanceId?: string(name='ElasticInstanceId', description='The ID of the elastic gateway. This parameter is returned if auto scale-out is used.', example='mse_ingresselastic_public_cn-uqm3d0*****'),
        elasticPolicy?: {
          elastic?: boolean(name='Elastic', description='Indicates whether auto scale-out is enabled.', example='true'),
          elasticType?: string(name='ElasticType', description='The type of auto scale-out. Valid value:

*   CronHPA: scale-out by time', example='CronHPA'),
          maxReplica?: int32(name='MaxReplica', description='The maximum number of instances that are automatically scaled out. This parameter is used for horizontal scale-out.', example='10'),
          timePolicyList?: [ 
            {
              desiredReplica?: int32(name='DesiredReplica', description='The expected number of replicas for auto scale-out.', example='4'),
              endTime?: string(name='EndTime', description='The end time of auto scale-out.', example='09:00'),
              startTime?: string(name='StartTime', description='The start time of auto scale-out.', example='07:00'),
            }
          ](name='TimePolicyList', description='The time policy list for auto scale-out.'),
        }(name='ElasticPolicy', description='The auto scale-out policy.'),
        elasticReplica?: int32(name='ElasticReplica', description='The number of replicas that are automatically scaled out.', example='2'),
        elasticType?: string(name='ElasticType', description='The type of auto scale-out. Valid value:

*   CronHPA: scale-out by time', example='CronHPA'),
        endDate?: string(name='EndDate', description='The time when the instance expires.', example='4792060800000'),
        gatewayType?: string(name='GatewayType', description='The gateway type.', example='Ingress'),
        gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-5017305290e14cebb8ce5cb6a4****'),
        gatewayVersion?: string(name='GatewayVersion', description='The version of the gateway.', example='1.2.9'),
        gmtCreate?: string(name='GmtCreate', description='The time when the gateway was created.', example='2021-09-13 19:24:23'),
        gmtModified?: string(name='GmtModified', description='The time when the gateway was modified.', example='2021-09-13 19:24:23'),
        id?: long(name='Id', description='The gateway ID.', example='153'),
        initConfig?: {
          enableWaf?: boolean(name='EnableWaf', description='Indicates whether Web Application Firewall (WAF) is enabled.', example='true'),
          supportWaf?: boolean(name='SupportWaf', description='Indicates whether WAF is supported.', example='true'),
        }(name='InitConfig', description='The configurations.'),
        instanceId?: string(name='InstanceId', description='The instance ID.', example='mse_ingresspost-cn-0jbvrcex****'),
        internetSlb?: [ 
          {
            gatewaySlbMode?: string(name='GatewaySlbMode', description='The mode of the SLB instance.', example='UserHost'),
            gatewaySlbStatus?: string(name='GatewaySlbStatus', description='The state of the SLB instance.', example='Ready'),
            internetNetworkFlow?: string(name='InternetNetworkFlow', description='The traffic of the gateway.', example='20'),
            slbId?: string(name='SlbId', description='The ID of the SLB instance.', example='lb-bp1ut8asdfgucjk****'),
            slbIp?: string(name='SlbIp', description='The IP address of the SLB instance.', example='153.12.XX.XX'),
            slbPort?: string(name='SlbPort', description='The port number of the SLB instance.', example='slb.s2.small'),
            slbSpec?: string(name='SlbSpec', description='The specifications of the SLB instance.', example='slb.s2.small'),
            statusDesc?: string(name='StatusDesc', description='The description of the state.', example='Creating'),
            type?: string(name='Type', description='The type of the SLB instance.', example='PUB_NET'),
          }
        ](name='InternetSlb', description='The details of the Internet-facing SLB instances.'),
        latestVersion?: string(name='LatestVersion', description='The latest version of the gateway.', example='0.1.0-mse-gw'),
        maintenancePeriod?: {
          endTime?: string(name='EndTime'),
          startTime?: string(name='StartTime'),
          timeZone?: string(name='TimeZone'),
        }(name='MaintenancePeriod'),
        mseTag?: string(name='MseTag', description='The resource tag.', example='{"tagKey":"tagValue"}'),
        mseVersion?: string(name='MseVersion'),
        mustUpgrade?: boolean(name='MustUpgrade', description='Indicates whether the instance was forcefully upgraded.', example='false'),
        name?: string(name='Name', description='The gateway name.', example='tesa-test'),
        primaryUser?: string(name='PrimaryUser', description='The user information.', example='18278117654342'),
        region?: string(name='Region', description='The region ID.', example='cn-hangzhou'),
        replica?: int32(name='Replica', description='The number of replicas.', example='2'),
        resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-97hg87vi****'),
        rollBack?: boolean(name='RollBack', description='Indicates whether rollbacks are allowed.', example='false'),
        slb?: [ 
          {
            gatewaySlbMode?: string(name='GatewaySlbMode', description='The mode of the SLB instance.', example='UserHost'),
            gatewaySlbStatus?: string(name='GatewaySlbStatus', description='The state of the SLB instance.', example='Ready'),
            slbId?: string(name='SlbId', description='The ID of the SLB instance.', example='lb-bp1ut8asdfgucjk****'),
            slbIp?: string(name='SlbIp', description='The IP address of the SLB instance.', example='153.12.XX.XX'),
            slbPort?: string(name='SlbPort', description='The port number of the SLB instance.', example='80'),
            slbSpec?: string(name='SlbSpec', description='The specifications of the SLB instance.', example='slb.s2.small'),
            statusDesc?: string(name='StatusDesc', description='The description of the state.', example='Creating'),
            type?: string(name='Type', description='The network type. Valid values:

*   PUB_NET
*   PRIVATE_NET', example='PUB_NET'),
          }
        ](name='Slb', description='The details of Server Load Balancer (SLB) instances.'),
        spec?: string(name='Spec', description='The specifications of the gateway.', example='MSE_GTW_1_2_200_c'),
        status?: int32(name='Status', description='The gateway state. Valid values:

*   0: The gateway is being created.
*   1: The gateway failed to be created.
*   2: The gateway is running.
*   3: The gateway is being changed.
*   4: The gateway is scaling in.
*   6: The gateway is scaling out.
*   8: The gateway is being deleted.
*   9: The gateway is suspended and is to be released.
*   10: The gateway is restarting.
*   11: The gateway is being rebuilt.
*   12: The gateway is being upgraded.
*   13: The gateway failed to be upgraded.', example='2'),
        statusDesc?: string(name='StatusDesc', description='The description of the gateway state.', example='Restarting'),
        supportWasm?: boolean(name='SupportWasm', description='Indicates whether WebAssembly (Wasm) is supported.', example='true'),
        tag?: string(name='Tag', description='The tag.', example='test'),
        totalReplica?: int32(name='TotalReplica', description='The total number of replicas, including the number of replicas that are automatically scaled out.', example='4'),
        upgrade?: boolean(name='Upgrade', description='Indicates whether the instance was upgraded.', example='false'),
        vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC) to which the gateway belongs.', example='vpc-uf6heojei217tv14*****'),
        vswitch2?: string(name='Vswitch2', description='The ID of the secondary vSwitch.', example='vsw-bpbrveck45nf****'),
      }
    ](name='Result', description='The data returned.'),
    totalSize?: long(name='TotalSize', description='The total number of entries returned.', example='9'),
  }(name='Data', description='The data returned.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='You are not authorized to perform this operation. Action: mse:ListGateway, Resource: acs:mse:cn-hangzhou:102123:*'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='34300B3-52EC-5049-8C96-914098CF****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model ListGatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListGatewayResponseBody(name='body'),
}

async function listGateway(request: ListGatewayRequest): ListGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGateway', 'POST', '/', 'json', false, 'json', request);
}

model ListGatewayAuthConsumerRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  consumerStatus?: boolean(name='ConsumerStatus', description='The status of the consumer. Valid values:

*   true: enabled
*   false: disabled', example='true', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-0fe488252dc44d55a9dd57875193****', position='Query'),
  name?: string(name='Name', description='The name of the consumer.', example='test', position='Query'),
  pageNum: string(name='PageNum', description='The number of the page to return.', example='1', position='Query'),
  pageSize: string(name='PageSize', description='The number of entries to return on each page.', example='10', position='Query'),
  type?: string(name='Type', description='The authentication type. Valid values:

*   JWT', example='JWT', position='Query'),
}

model ListGatewayAuthConsumerResponseBody = {
  code?: int32(name='Code', description='The status code. A value of 200 is returned if the request is successful.', example='200'),
  data?: {
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    result?: [ 
      {
        consumerStatus?: boolean(name='ConsumerStatus', description='The status of the consumer. Valid values:

*   true: enabled
*   false: disabled', example='true'),
        description?: string(name='Description', description='The description of the consumer.', example='Description'),
        gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-5017305290e14centbrveca****'),
        gmtCreate?: string(name='GmtCreate', description='The creation time.', example='2021-09-13 19:24:23'),
        gmtModified?: string(name='GmtModified', description='The modification time.', example='2022-01-07 18:07:57'),
        id?: long(name='Id', description='The ID of the consumer.', example='1'),
        name?: string(name='Name', description='The name of the consumer.', example='test'),
        primaryUser?: string(name='PrimaryUser', description='The creator.', example='123'),
        type?: string(name='Type', description='The authentication type. Valid values:

*   JWT', example='JWT'),
      }
    ](name='Result', description='The returned information.'),
    totalSize?: long(name='TotalSize', description='The total number of returned entries.', example='9'),
  }(name='Data', description='The data structure.'),
  dynamicCode?: string(name='DynamicCode', description='The dynamic part in the error message.', example='code'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **ErrMessage** parameter.

>  If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code that is returned.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='dc63-465d-8ef5-20dc18af****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model ListGatewayAuthConsumerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListGatewayAuthConsumerResponseBody(name='body'),
}

async function listGatewayAuthConsumer(request: ListGatewayAuthConsumerRequest): ListGatewayAuthConsumerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGatewayAuthConsumer', 'POST', '/', 'json', false, 'json', request);
}

model ListGatewayAuthConsumerResourceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  consumerId: long(name='ConsumerId', description='The ID of the consumer.', example='2', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-3f97e2989c344f35ab3fd62b19f1****', position='Query'),
  pageNum: string(name='PageNum', description='The number of the page to return.', example='1', position='Query'),
  pageSize: string(name='PageSize', description='The number of entries to return on each page.', example='10', position='Query'),
  resourceStatus?: boolean(name='ResourceStatus', description='The resource authorization status. Valid values:

*   true: enabled
*   false: disabled', example='true', position='Query'),
  routeName?: string(name='RouteName', description='The name of the route.', example='test', position='Query'),
}

model ListGatewayAuthConsumerResourceResponseBody = {
  code?: int32(name='Code', description='The status code. A value of 200 is returned if the request is successful.', example='200'),
  data?: {
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    result?: [ 
      {
        consumerId?: long(name='ConsumerId', description='The ID of the consumer.', example='2'),
        gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-5017305290e14centbrveca****'),
        gmtCreate?: string(name='GmtCreate', description='The creation time.', example='2022-01-07 18:07:57'),
        gmtModified?: string(name='GmtModified', description='The modification time.', example='2022-01-07 18:07:57'),
        id?: long(name='Id', description='The ID of the authorized resource for the consumer.', example='1'),
        resourceStatus?: boolean(name='ResourceStatus', description='The resource authorization status. Valid values:

*   true: enabled
*   false: disabled', example='true'),
        routeId?: long(name='RouteId', description='The ID of the route.', example='3091'),
        routeName?: string(name='RouteName', description='The name of the route.', example='test'),
      }
    ](name='Result', description='The data structure.'),
    totalSize?: long(name='TotalSize', description='The total number of entries returned.', example='11'),
  }(name='Data', description='The returned result.'),
  dynamicCode?: string(name='DynamicCode', description='The dynamic part in the error message.', example='code'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the \\*\\*%s\\*\\* variable in the **ErrMessage** parameter.

>  If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code that is returned.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A73AC37C-C617-4E3A-8049-372CF49C****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='True'),
}

model ListGatewayAuthConsumerResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListGatewayAuthConsumerResourceResponseBody(name='body'),
}

async function listGatewayAuthConsumerResource(request: ListGatewayAuthConsumerResourceRequest): ListGatewayAuthConsumerResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGatewayAuthConsumerResource', 'POST', '/', 'json', false, 'json', request);
}

model ListGatewayCircuitBreakerRuleRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh', position='Query'),
  filterParams: string(name='FilterParams', description='just for POP', example='param', position='Query'),
}

model ListGatewayCircuitBreakerRuleResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='100'),
    result?: [ 
      {
        behaviorType?: int32(name='BehaviorType', example='0'),
        bodyEncoding?: int32(name='BodyEncoding', example='0'),
        enable?: int32(name='Enable', example='0'),
        gatewayId?: long(name='GatewayId', example='11919'),
        gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-5017305290e14centbrveca****'),
        id?: long(name='Id', example='467'),
        idList?: [ long ](name='IdList'),
        limitMode?: int32(name='LimitMode', example='0'),
        maxAllowedMs?: int32(name='MaxAllowedMs', example='14'),
        minRequestAmount?: int32(name='MinRequestAmount', example='10'),
        recoveryTimeoutSec?: int32(name='RecoveryTimeoutSec', example='12'),
        responseAdditionalHeaders?: string(name='ResponseAdditionalHeaders', example='key=value'),
        responseContentBody?: string(name='ResponseContentBody', example='text'),
        responseRedirectUrl?: string(name='ResponseRedirectUrl', example='www.******.com'),
        responseStatusCode?: int32(name='ResponseStatusCode', example='204'),
        routeId?: long(name='RouteId', example='3091'),
        routeName?: string(name='RouteName', example='routeName'),
        statDurationSec?: int32(name='StatDurationSec', example='11'),
        strategy?: int32(name='Strategy', example='0'),
        triggerRatio?: int32(name='TriggerRatio', example='10'),
      }
    ](name='Result'),
    results?: [ 
      {
        behaviorType?: int32(name='BehaviorType', example='0'),
        bodyEncoding?: int32(name='BodyEncoding', example='0'),
        enable?: int32(name='Enable', example='0'),
        gatewayId?: long(name='GatewayId', example='11919'),
        gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-1ee34548c68f4778a25c05abd657****'),
        id?: long(name='Id', example='467'),
        idList?: [ long ](name='IdList'),
        limitMode?: int32(name='LimitMode', example='0'),
        maxAllowedMs?: int32(name='MaxAllowedMs', example='10'),
        minRequestAmount?: int32(name='MinRequestAmount', example='10'),
        recoveryTimeoutSec?: int32(name='RecoveryTimeoutSec', example='12'),
        responseAdditionalHeaders?: string(name='ResponseAdditionalHeaders', example='key=value'),
        responseContentBody?: string(name='ResponseContentBody', example='text'),
        responseRedirectUrl?: string(name='ResponseRedirectUrl', example='www.******.com'),
        responseStatusCode?: int32(name='ResponseStatusCode', example='204'),
        routeId?: long(name='RouteId', example='3450'),
        routeName?: string(name='RouteName', example='routeName'),
        statDurationSec?: int32(name='StatDurationSec', example='11'),
        strategy?: int32(name='Strategy', example='0'),
        triggerRatio?: int32(name='TriggerRatio', example='10'),
      }
    ](name='Results'),
    totalSize?: int32(name='TotalSize', example='11'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='DC34E4A3-5F1C-4E40-86EA-02EDF967****'),
}

model ListGatewayCircuitBreakerRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListGatewayCircuitBreakerRuleResponseBody(name='body'),
}

async function listGatewayCircuitBreakerRule(request: ListGatewayCircuitBreakerRuleRequest): ListGatewayCircuitBreakerRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGatewayCircuitBreakerRule', 'POST', '/', 'json', false, 'json', request);
}

model ListGatewayDomainRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  domainName?: string(name='DomainName', example='example.com', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-c9bc5afd61014165bd58f621b491****', position='Query'),
  type?: string(name='Type', description='The type of the domain name.', example='All', position='Query'),
}

model ListGatewayDomainResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: [ 
    {
      certBeforeDate?: string(name='CertBeforeDate', description='The time when the certificate expires.', example='2031-03-30 02:35:12'),
      certIdentifier?: string(name='CertIdentifier', description='The certificate ID.', example='3452-cn-hangzhou'),
      comment?: {
        status?: string(name='Status', description='The route status.', example='Error'),
      }(name='Comment', description='The route comment. This parameter is returned only in ingress scenarios.'),
      gatewayId?: long(name='GatewayId', description='The gateway ID.', example='12'),
      gmtCreate?: string(name='GmtCreate', description='The time when the domain name was created.', example='2031-03-30 02:35:12'),
      gmtModified?: string(name='GmtModified', description='The time when the domain name was updated.', example='2031-03-30 02:35:12'),
      http2?: string(name='Http2', description='Indicates whether `HTTP/2` is enabled.

*   `open`: `HTTP/2` is enabled.
*   `close`: `HTTP/2` is disabled.
*   `globalConfig`: Global configurations are used.', example='close'),
      id?: long(name='Id', description='The ID of the domain name.', example='243'),
      mustHttps?: boolean(name='MustHttps', description='Indicates whether HTTPS is forcefully used.', example='true'),
      name?: string(name='Name', description='The domain name.', example='test.com'),
      protocol?: string(name='Protocol', description='The protocol.', example='HTTP'),
      status?: int32(name='Status', description='The state of the domain name. Valid values:

*   0: unpublished
*   2: publishing
*   3: published
*   4: editing
*   5: unpublishing
*   6: unavailable', example='3'),
      tlsMax?: string(name='TlsMax', description='The maximum version of Transport Layer Security (TLS).', example='TLS 1.3'),
      tlsMin?: string(name='TlsMin', description='The minimum version of TLS.', example='TLS 1.0'),
      type?: string(name='Type', description='The type of the domain name source. Valid values:

*   Op: console
*   Ingress: MSE Ingress', example='Op'),
    }
  ](name='Data', description='The details of the data.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message returned if the request failed.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3F5D8E93-CA66-57F1-8BCF-A223E11B6B91'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model ListGatewayDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListGatewayDomainResponseBody(name='body'),
}

async function listGatewayDomain(request: ListGatewayDomainRequest): ListGatewayDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGatewayDomain', 'POST', '/', 'json', false, 'json', request);
}

model ListGatewayFlowRuleRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh', position='Query'),
  filterParams: string(name='FilterParams', description='just for POP', example='param', position='Query'),
}

model ListGatewayFlowRuleResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='100'),
    result?: [ 
      {
        behaviorType?: int32(name='BehaviorType', example='0'),
        bodyEncoding?: int32(name='BodyEncoding', example='0'),
        enable?: int32(name='Enable', example='0'),
        gatewayId?: long(name='GatewayId', example='14407'),
        gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-e2d226bba4b2445c9e29fa7f8216****'),
        id?: long(name='Id', example='549'),
        responseContentBody?: string(name='ResponseContentBody', example='text'),
        responseRedirectUrl?: string(name='ResponseRedirectUrl', example='www.******.com'),
        responseStatusCode?: int32(name='ResponseStatusCode', example='429'),
        routeId?: long(name='RouteId', example='48811'),
        routeName?: string(name='RouteName', example='routeA'),
        threshold?: int32(name='Threshold', example='10'),
      }
    ](name='Result'),
    results?: [ 
      {
        behaviorType?: int32(name='BehaviorType', example='0'),
        bodyEncoding?: int32(name='BodyEncoding', example='0'),
        enable?: int32(name='Enable', example='0'),
        gatewayId?: long(name='GatewayId', example='14407'),
        gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-e2d226bba4b2445c9e29fa7f8216****'),
        id?: long(name='Id', example='549'),
        idList?: [ long ](name='IdList'),
        limitMode?: int32(name='LimitMode', example='0'),
        responseAdditionalHeaders?: string(name='ResponseAdditionalHeaders', example='key=value'),
        responseContentBody?: string(name='ResponseContentBody', example='text'),
        responseRedirectUrl?: string(name='ResponseRedirectUrl', example='www.******.com'),
        responseStatusCode?: int32(name='ResponseStatusCode', example='429'),
        routeId?: long(name='RouteId', example='48811'),
        routeName?: string(name='RouteName', example='routeA'),
        statDurationMs?: int32(name='StatDurationMs', example='10'),
        threshold?: int32(name='Threshold', example='10'),
      }
    ](name='Results'),
    totalSize?: int32(name='TotalSize', example='1'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='0951EBF0-798E-5E0B-8D38-460A14AD****'),
}

model ListGatewayFlowRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListGatewayFlowRuleResponseBody(name='body'),
}

async function listGatewayFlowRule(request: ListGatewayFlowRuleRequest): ListGatewayFlowRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGatewayFlowRule', 'POST', '/', 'json', false, 'json', request);
}

model ListGatewayIsolationRuleRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh', position='Query'),
  filterParams: string(name='FilterParams', description='just for POP', example='param', position='Query'),
}

model ListGatewayIsolationRuleResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='100'),
    result?: [ 
      {
        behaviorType?: int32(name='BehaviorType', example='0'),
        bodyEncoding?: int32(name='BodyEncoding', example='0'),
        enable?: int32(name='Enable', example='0'),
        gatewayId?: long(name='GatewayId', example='14407'),
        gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-e2d226bba4b2445c9e29fa7f8216****'),
        id?: long(name='Id', example='358'),
        idList?: [ long ](name='IdList'),
        limitMode?: int32(name='LimitMode', example='0'),
        maxConcurrency?: int32(name='MaxConcurrency', example='100'),
        responseAdditionalHeaders?: string(name='ResponseAdditionalHeaders', example='key:value'),
        responseContentBody?: string(name='ResponseContentBody', example='text'),
        responseRedirectUrl?: string(name='ResponseRedirectUrl', example='www.******.com'),
        responseStatusCode?: int32(name='ResponseStatusCode', example='429'),
        routeId?: long(name='RouteId', example='52853'),
        routeName?: string(name='RouteName', example='routeName'),
      }
    ](name='Result'),
    results?: [ 
      {
        behaviorType?: int32(name='BehaviorType', example='0'),
        bodyEncoding?: int32(name='BodyEncoding', example='0'),
        enable?: int32(name='Enable', example='0'),
        gatewayId?: long(name='GatewayId', example='14407'),
        gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-e2d226bba4b2445c9e29fa7f8216****'),
        id?: long(name='Id', example='358'),
        idList?: [ long ](name='IdList'),
        limitMode?: int32(name='LimitMode', example='1'),
        maxConcurrency?: int32(name='MaxConcurrency', example='100'),
        responseAdditionalHeaders?: string(name='ResponseAdditionalHeaders', example='key=value'),
        responseContentBody?: string(name='ResponseContentBody', example='text'),
        responseRedirectUrl?: string(name='ResponseRedirectUrl', example='www.******.com'),
        responseStatusCode?: int32(name='ResponseStatusCode', example='429'),
        routeId?: long(name='RouteId', example='52853'),
        routeName?: string(name='RouteName', example='routeName'),
      }
    ](name='Results'),
    totalSize?: int32(name='TotalSize', example='1'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6F025D43-8632-5716-AE9B-7EDDF16C****'),
}

model ListGatewayIsolationRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListGatewayIsolationRuleResponseBody(name='body'),
}

async function listGatewayIsolationRule(request: ListGatewayIsolationRuleRequest): ListGatewayIsolationRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGatewayIsolationRule', 'POST', '/', 'json', false, 'json', request);
}

model ListGatewayRouteRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  descSort?: boolean(name='DescSort', description='Specifies whether to enable sorting. This parameter is unavailable.', example='false', position='Query'),
  filterParams?: {
    defaultServiceId?: long(name='DefaultServiceId', description='The default service ID.', example='1', deprecated='true'),
    domainId?: long(name='DomainId', description='The domain ID.', example='284'),
    domainName?: string(name='DomainName', description='The associated domain name.', example='*.alites.com'),
    gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='81'),
    gatewayUniqueId: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-30a0106924c94bca8712ec4e79fc5acc'),
    name?: string(name='Name', description='The name of the gateway.', example='test'),
    path?: string(name='Path', example='/test'),
    routeOrder?: int32(name='RouteOrder', description='The order.', example='1'),
    status?: int32(name='Status', description='The status.', example='1'),
  }(name='FilterParams', description='The parameters that specify filter conditions. The parameters are in the format of {"key1":"value1"}.', shrink='json', position='Query'),
  orderItem?: string(name='OrderItem', description='The item based on which entries are sorted.', example='GmtCreate', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10', position='Query'),
}

model ListGatewayRouteResponseBody = {
  code?: int32(name='Code', description='The code returned.', example='200'),
  data?: {
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='11'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    result?: [ 
      {
        comment?: {
          status?: string(name='Status', description='The status.', example='error'),
        }(name='Comment', description='The route comment (ingress).'),
        defaultServiceId?: long(name='DefaultServiceId', description='The default service ID.', example='1'),
        defaultServiceName?: string(name='DefaultServiceName', description='The default service name.', example='test'),
        destinationType?: string(name='DestinationType', description='The destination service type.', example='Single'),
        directResponse?: {
          body?: string(name='Body', description='The return value for service mocking.', example='hello'),
          code?: int32(name='Code', description='The response code returned.', example='200'),
        }(name='DirectResponse', description='The information about service mocking.'),
        domainId?: long(name='DomainId', description='The domain ID.', example='265'),
        domainIdList?: [ long ](name='DomainIdList', description='The domain IDs.'),
        domainName?: string(name='DomainName', description='The domain name.', example='y.com'),
        domainNameList?: [ string ](name='DomainNameList', description='The domain names.'),
        enableWaf?: string(name='EnableWaf', description='Indicates whether Web Application Firewall (WAF) is activated.', example='false'),
        fallback?: boolean(name='Fallback', description='Indicates whether the Fallback service is enabled.', example='true'),
        fallbackServices?: [ 
          {
            agreementType?: string(name='AgreementType', description='The type of the protocol.', example='DUBBO'),
            groupName?: string(name='GroupName', description='The name of the group to which the service belongs.', example='test'),
            name?: string(name='Name', description='The name.', example='name'),
            namespace?: string(name='Namespace', description='The namespace to which the service belongs.', example='Namespace'),
            percent?: int32(name='Percent', description='The weight in the form of a percentage value.', example='100'),
            serviceId?: long(name='ServiceId', description='The ID of the service.', example='353'),
            serviceName?: string(name='ServiceName', description='The name of the service.', example='service name'),
            servicePort?: int32(name='ServicePort', description='The service port number.', example='8848'),
            sourceType?: string(name='SourceType', description='The source type.', example='MSE'),
            version?: string(name='Version', description='The version of the service.', example='v1'),
          }
        ](name='FallbackServices', description='The information about the Fallback service.'),
        gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='496'),
        gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-cf0e7f52ecc7429dbc7ba4d5e3656100'),
        gmtCreate?: string(name='GmtCreate', description='The creation time.', example='2022-01-25T07:14:01.817+0000'),
        gmtModified?: string(name='GmtModified', description='The modification time.', example='2022-01-07 18:07:57'),
        id?: long(name='Id', description='The ID.', example='47'),
        name?: string(name='Name', description='The name.', example='test'),
        predicates?: string(name='Predicates', description='The matching rules.', example='{\\"PathPredicates\\":{\\"Path\\":\\"/rpc/compute \\",\\"Type\\":\\"PRE\\",\\"IgnoreCase\\":true}}'),
        redirect?: {
          code?: int32(name='Code', description='The response code returned.', example='200'),
          host?: string(name='Host', description='The hostname to be redirected to.', example='test.com'),
          path?: string(name='Path', description='The path.', example='/test'),
        }(name='Redirect', description='The information about redirection.'),
        routeOrder?: int32(name='RouteOrder', description='The order.', example='1'),
        routePredicates?: {
          headerPredicates?: [ 
            {
              key?: string(name='Key', description='The header key.', example='userid'),
              type?: string(name='Type', description='The matching type.', example='PRE'),
              value?: string(name='Value', description='The value.', example='test'),
            }
          ](name='HeaderPredicates', description='The headers used for route matching.'),
          methodPredicates?: [ string ](name='MethodPredicates', description='The HTTP methods used for route matching.'),
          pathPredicates?: {
            ignoreCase?: boolean(name='IgnoreCase', description='Indicates whether case sensitivity is ignored.', example='true'),
            path?: string(name='Path', description='The path of the node.', example='/getIp'),
            type?: string(name='Type', description='The matching type.', example='PRE'),
          }(name='PathPredicates', description='The path used for route matching.'),
          queryPredicates?: [ 
            {
              key?: string(name='Key', description='The key.', example='userid'),
              type?: string(name='Type', description='The matching type.', example='PRE'),
              value?: string(name='Value', description='The value.', example='test'),
            }
          ](name='QueryPredicates', description='The parameters used for route matching.'),
        }(name='RoutePredicates', description='The matching rules.'),
        routeServices?: [ 
          {
            agreementType?: string(name='AgreementType', description='The type of the protocol.', example='DUBBO'),
            groupName?: string(name='GroupName', description='The name of the group to which the service belongs.', example='api'),
            healthStatus?: string(name='HealthStatus', example='Health'),
            httpDubboTranscoder?: {
              dubboServiceGroup?: string(name='DubboServiceGroup', description='The Dubbo service group.', example='service group'),
              dubboServiceName?: string(name='DubboServiceName', description='The name of the Dubbo service.', example='org.apache.dubbo.samples.basic.api.DemoService'),
              dubboServiceVersion?: string(name='DubboServiceVersion', description='The version of the Dubbo service.', example='0.0.0'),
              mothedMapList?: [ 
                {
                  dubboMothedName?: string(name='DubboMothedName', description='The method name of the Dubbo service.', example='sayHello'),
                  httpMothed?: string(name='HttpMothed', description='The HTTP method.

> Valid values:

*   ALL_GET

*   ALL_POST

*   ALL_PUT

*   ALL_DELETE

*   ALL_PATCH', example='ALL_GET'),
                  mothedpath?: string(name='Mothedpath', description='The path used for method matching.', example='/mytestzbk/sayhello'),
                  paramMapsList?: [ 
                    {
                      extractKey?: string(name='ExtractKey', description='The key extracted from the input parameter.', example='name'),
                      extractKeySpec?: string(name='ExtractKeySpec', description='The position of the input parameter.

> Valid values:

*   `ALL_QUERY_PARAMETER`: request parameter

*   `ALL_HEADER`: request header

*   `ALL_PATH`: request path

*   `ALL_BODY`: request body', example='ALL_QUERY_PARAMETER'),
                      mappingType?: string(name='MappingType', description='The type of the backend service parameter.', example='java.lang.String'),
                    }
                  ](name='ParamMapsList', description='The information about parameter mappings.'),
                  passThroughAllHeaders?: string(name='PassThroughAllHeaders', description='The pass-through type of the header.

> Valid values:

*   PASS_ALL: All headers are passed through.

*   PASS_NOT: All headers are not passed through.

*   PASS_ASSIGN: Specified headers are passed through.', example='PASS_NOT'),
                  passThroughList?: [ string ](name='PassThroughList', description='The list of headers to be passed through.'),
                }
              ](name='MothedMapList', description='The forwarding rules of the Dubbo service.'),
            }(name='HttpDubboTranscoder', description='The transcoder of the Dubbo protocol.'),
            name?: string(name='Name', description='The name.', example='test'),
            namespace?: string(name='Namespace', description='The namespace.', example='default'),
            percent?: int32(name='Percent', description='The weight in the form of a percentage value.', example='11'),
            serviceId?: long(name='ServiceId', description='The ID of the service.', example='1563'),
            serviceName?: string(name='ServiceName', description='The name of the service.', example='hu'),
            servicePort?: int32(name='ServicePort', description='The Dubbo port number.', example='20880'),
            sourceType?: string(name='SourceType', description='The source type.', example='MSE'),
            unhealthyEndpoints?: [ string ](name='UnhealthyEndpoints'),
            version?: string(name='Version', description='The version of the service.', example='v1'),
          }
        ](name='RouteServices', description='The information about services.'),
        services?: string(name='Services', description='The information about services.', example='[]'),
        status?: int32(name='Status', description='The status.', example='2'),
        type?: string(name='Type', description='The route type.', example='Op'),
      }
    ](name='Result', description='The data structure.'),
    totalSize?: long(name='TotalSize', description='The total number of entries returned.', example='36'),
  }(name='Data', description='The data returned.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message returned if the request failed.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='83F02EAB-ECDF-55C6-B332-8649E5E7AF2C'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model ListGatewayRouteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListGatewayRouteResponseBody(name='body'),
}

async function listGatewayRoute(request: ListGatewayRouteRequest): ListGatewayRouteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGatewayRoute', 'POST', '/', 'json', false, 'json', request);
}

model ListGatewayRouteOnAuthRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-c9bc5afd61014165bd58f621b491****', position='Query'),
  type: string(name='Type', description='The authentication method. Valid values:

*   JWT', example='JWT', position='Query'),
}

model ListGatewayRouteOnAuthResponseBody = {
  code?: int32(name='Code', description='The response code.', example='200'),
  data?: [ 
    {
      domainId?: long(name='DomainId', description='The domain ID.', example='235'),
      domainIdList?: [ long ](name='DomainIdList', description='The domain IDs.'),
      domainName?: string(name='DomainName', description='The domain name.', example='123.com'),
      domainNameList?: [ string ](name='DomainNameList', description='The domain names.'),
      gatewayId?: string(name='GatewayId', description='The gateway ID.', example='399'),
      gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-7ea3da97b96543e19f6c597c****'),
      id?: int32(name='Id', description='The route ID.', example='12'),
      name?: string(name='Name', description='The name of the route.', example='ceshi'),
      routePredicates?: {
        pathPredicates?: {
          path?: string(name='Path', description='The path.', example='/api'),
          type?: string(name='Type', description='The matching type.', example='PRE'),
        }(name='PathPredicates', description='The information about route matching.'),
      }(name='RoutePredicates', description='The information about route matching.'),
    }
  ](name='Data', description='The details of the data.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The returned message.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The request ID.', example='58E06A0A-BD2C-47A0-99C2-B100F353****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`
*   `false`', example='true'),
}

model ListGatewayRouteOnAuthResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListGatewayRouteOnAuthResponseBody(name='body'),
}

async function listGatewayRouteOnAuth(request: ListGatewayRouteOnAuthRequest): ListGatewayRouteOnAuthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGatewayRouteOnAuth', 'POST', '/', 'json', false, 'json', request);
}

model ListGatewayServiceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  descSort?: boolean(name='DescSort', description='Specifies whether to enable sorting.', example='false', position='Query'),
  filterParams?: {
    gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-5017305290e14centbrveca****'),
    groupName?: string(name='GroupName', description='The group.', example='test'),
    name?: string(name='Name', description='The name of the service.', example='test'),
    namespace?: string(name='Namespace', description='The namespace to which the service belongs.', example='public'),
    serviceProtocol?: string(name='ServiceProtocol', description='The protocol of the service.

*   HTTP
*   HTTPS
*   HTTP2
*   GRPC
*   DUBBO', example='HTTP'),
    sourceType?: string(name='SourceType', description='The type of the source.', example='MSE'),
  }(name='FilterParams', description='The parameters that are used to specify filter conditions. The values of the parameters are in the format of {"key1":"value1"}.', shrink='json', position='Query'),
  orderItem?: string(name='OrderItem', description='The item based on which entries are sorted.', example='GmtCreate', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10', position='Query'),
}

model ListGatewayServiceResponseBody = {
  code?: int32(name='Code', description='The return value.', example='200'),
  data?: {
    pageNumber?: int32(name='PageNumber', description='The number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: 10.', example='10'),
    result?: [ 
      {
        gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='1'),
        gatewayTrafficPolicy?: {
          loadBalancerSettings?: {
            consistentHashLBConfig?: {
              consistentHashLBType?: string(name='ConsistentHashLBType', description='The type based on which consistent hashing load balancing is performed.

*   HEADER
*   COOKIE
*   SOURCE_IP
*   QUERY_PARAMETER', example='HEADER'),
              httpCookie?: {
                name?: string(name='Name', description='The name of the cookie.', example='name'),
                path?: string(name='Path', description='The path of the cookie.', example='/path'),
                ttl?: string(name='Ttl', description='The lifecycle of the cookie.', example='360'),
              }(name='HttpCookie', description='The cookie-based load balancing parameters.'),
              minimumRingSize?: long(name='MinimumRingSize', description='The minimum value of the hash ring.', example='10000'),
              parameterName?: string(name='ParameterName', description='The name of the parameter.', example='param'),
            }(name='ConsistentHashLBConfig', description='The consistent hashing settings.'),
            loadbalancerType?: string(name='LoadbalancerType', description='The load balancing type.

*   ROUND_ROBIN
*   LEAST_CONN
*   RANDOM
*   CONSISTENT_HASH', example='RANDOM'),
            warmupDuration?: int32(name='WarmupDuration', description='The prefetch time of the least connection load balancing.', example='10'),
          }(name='LoadBalancerSettings', description='The load balancing settings.'),
          tls?: {
            caCertContent?: string(name='CaCertContent', description='The public key of the CA certificate .', example='content'),
            caCertId?: string(name='CaCertId', description='The ID of the certification authority (CA) certificate.', example='5******-cn-hangzhou'),
            certId?: string(name='CertId', description='The ID of the certificate.', example='5******-cn-hangzhou'),
            mode?: string(name='Mode', description='The TLS mode.

*   DISABLE
*   SIMPLE
*   MUTUAL
*   ISTIO_MUTUAL', example='SIMPLE'),
            sni?: string(name='Sni', description='The Server Name Indication (SNI) value.', example='name-sni'),
            subjectAltNames?: [ string ](name='SubjectAltNames', description='The array of subject aliases.'),
          }(name='Tls', description='The Transport Layer Security (TLS).'),
        }(name='GatewayTrafficPolicy', description='The traffic management policy.'),
        gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-5017305290e14centbrveca****'),
        gmtCreate?: string(name='GmtCreate', description='The creation time.', example='2022-01-07 18:07:57'),
        gmtModified?: string(name='GmtModified', description='The modification time.', example='2022-01-07 18:07:57'),
        groupName?: string(name='GroupName', description='The name of the group.', example='test'),
        healehStatus?: string(name='HealehStatus', description='The health status.

*   Health
*   Unhealthy
*   Unknown', example='Unhealthy'),
        healthCheck?: boolean(name='HealthCheck', description='Indicates whether health checks are performed.', example='true'),
        healthCheckInfo?: {
          check?: boolean(name='Check', description='Indicates whether checks are performed.', example='true'),
          expectedStatuses?: [ int32 ](name='ExpectedStatuses', description='The expected status of the health check.'),
          healthyThreshold?: int32(name='HealthyThreshold', description='The threshold for healthy instances.', example='2'),
          httpHost?: string(name='HttpHost', description='The URL of the HTTP request for the health check.', example='http://172.168.0.1'),
          httpPath?: string(name='HttpPath', description='The path to which the HTTP request for the health check is sent.', example='/health'),
          interval?: int32(name='Interval', description='The health check interval.', example='2'),
          protocol?: string(name='Protocol', description='The network protocol.', example='TCP'),
          timeout?: int32(name='Timeout', description='The timeout period.', example='2'),
          unhealthyThreshold?: int32(name='UnhealthyThreshold', description='The threshold for unhealthy instances.', example='2'),
        }(name='HealthCheckInfo', description='The information about health checks.'),
        healthStatus?: string(name='HealthStatus', description='The health status.

*   Health
*   Unhealthy
*   Unknown', example='Unhealthy'),
        id?: long(name='Id', description='The ID.', example='1'),
        ips?: [ string ](name='Ips', description='The IP addresses.'),
        metaInfo?: string(name='MetaInfo', description='The metadata or IP addresses of the service.', example='{}'),
        name?: string(name='Name', description='The name of the service.', example='test'),
        namespace?: string(name='Namespace', description='The namespace.', example='public'),
        ports?: [ int32 ](name='Ports', description='The port array.'),
        serviceFQDN?: string(name='ServiceFQDN'),
        serviceNameInRegistry?: string(name='ServiceNameInRegistry', description='The name of the service that is registered with the service registry.', example='test'),
        servicePort?: long(name='ServicePort', description='The service port.', example='80'),
        serviceProtocol?: string(name='ServiceProtocol', description='The protocol of the service.', example='HTTP'),
        sourceId?: long(name='SourceId', description='The ID of the service source.', example='2'),
        sourceType?: string(name='SourceType', description='The type of the service source.', example='MSE'),
        unhealthyEndpoints?: [ string ](name='UnhealthyEndpoints', description='The array of unhealthy endpoints.'),
        versions?: [ 
          {
            name?: string(name='Name', description='The version number.', example='v1'),
          }
        ](name='Versions', description='The version of the service.'),
      }
    ](name='Result', description='The returned information.'),
    totalSize?: long(name='TotalSize', description='The total number of entries returned.', example='9'),
  }(name='Data', description='The response parameters.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message returned if the request failed.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F46CDBA4-B1EE-5C94-8A48-51C10177****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model ListGatewayServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListGatewayServiceResponseBody(name='body'),
}

async function listGatewayService(request: ListGatewayServiceRequest): ListGatewayServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGatewayService', 'POST', '/', 'json', false, 'json', request);
}

model ListGatewaySlbRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-1cef5440bf2d484db419fb264d4f****', position='Query'),
}

model ListGatewaySlbResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: [ 
    {
      editEnable?: boolean(name='EditEnable', description='Indicates whether the edit operation is supported.', example='false'),
      gatewayId?: string(name='GatewayId', description='The ID of the gateway.', example='1'),
      gatewaySlbMode?: string(name='GatewaySlbMode', description='The mode of the SLB instance.', example='UserSelect'),
      gatewaySlbStatus?: string(name='GatewaySlbStatus', description='The association status.', example='Ready'),
      gmtCreate?: string(name='GmtCreate', description='The creation time.', example='2022-01-14 14:39:16'),
      httpPort?: int32(name='HttpPort', description='The port number of the HTTP virtual service group.', example='80'),
      httpsPort?: int32(name='HttpsPort', description='The port number of the HTTPS virtual service group.', example='443'),
      httpsVServerGroupId?: string(name='HttpsVServerGroupId', description='The ID of the HTTPS virtual service group.', example='353'),
      id?: string(name='Id', description='The ID.', example='ID'),
      serviceWeight?: int32(name='ServiceWeight', description='The service weight.', example='80'),
      slbId?: string(name='SlbId', description='The ID of the SLB instance.', example='lb-bp1kmnli3hdpreptw2ah3'),
      slbIp?: string(name='SlbIp', description='The IP address of the SLB instance.', example='121.199.XX.XX'),
      slbPort?: string(name='SlbPort', description='The port number of the SLB instance.', example='80,443'),
      slbType?: string(name='SlbType'),
      statusDesc?: string(name='StatusDesc', description='The description of the status.', example='Associating'),
      type?: string(name='Type', description='The type.', example='PUB_NET'),
      vServerGroupId?: string(name='VServerGroupId', description='The ID of the HTTP virtual service group.', example='353'),
      vServiceList?: [ 
        {
          port?: string(name='Port'),
          protocol?: string(name='Protocol'),
          vServerGroupId?: string(name='VServerGroupId'),
          vServerGroupName?: string(name='VServerGroupName'),
        }
      ](name='VServiceList'),
      vsMetaInfo?: string(name='VsMetaInfo'),
    }
  ](name='Data', description='The data entries returned.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EAB345F4-3AC3-560C-B653-65717703****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model ListGatewaySlbResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListGatewaySlbResponseBody(name='body'),
}

async function listGatewaySlb(request: ListGatewaySlbRequest): ListGatewaySlbResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGatewaySlb', 'POST', '/', 'json', false, 'json', request);
}

model ListInstanceCountRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  clusterType?: string(name='ClusterType', description='The type of the instance. Valid values: ZooKeeper and Nacos-Ans.', example='Nacos-Ans', position='Query'),
  mseVersion?: string(name='MseVersion', description='The edition type of the instance. Valid values:

*   `mse_dev`: Developer Edition
*   `mse_pro`: Professional Edition', example='mse_pro', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the instance resides. Examples:

*   cn-hangzhou: China (Hangzhou)
*   cn-beijing: China (Beijing)
*   cn-shanghai: China (Shanghai)
*   cn-zhangjiakou: China (Zhangjiakou)
*   cn-shenzhen: China (Shenzhen)', example='cn-hangzhou', position='Query'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}', position='Query'),
}

model ListInstanceCountResponseBody = {
  code?: int32(name='Code', description='The status code. A value of 200 is returned if the request is successful.', example='200'),
  data?: [ int32 ](name='Data', description='The data entries returned.'),
  dynamicCode?: string(name='DynamicCode', description='The dynamic part in the error message.', example='%s'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace `%s` in the `ErrMessage` parameter.

>  If the return value of the `ErrMessage` parameter is `The Value of Input Parameter %s is not valid` and the return value of the `DynamicMessage` parameter is `DtsJobId`, the specified `DtsJobId` parameter is invalid.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed. If the request failed, the ErrorCode parameter is returned. For more information, see the [Error codes](~~456441~~) section of this topic.', example='mse-100-100'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The returned message. If the request is successful, a success message is returned. If the request fails, an error message is returned.', example='The request was successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model ListInstanceCountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstanceCountResponseBody(name='body'),
}

async function listInstanceCount(request: ListInstanceCountRequest): ListInstanceCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstanceCount', 'POST', '/', 'json', false, 'json', request);
}

model ListIsolationRulesRequest {
  regionId?: string(name='RegionId', position='Host'),
  acceptLanguage?: string(name='AcceptLanguage', example='zh', position='Query'),
  appId?: string(name='AppId', example='hkhon1po62@c3df23522bXXXXX', position='Query'),
  appName: string(name='AppName', example='spring-cloud-a', position='Query'),
  namespace: string(name='Namespace', example='default', position='Query'),
  pageIndex?: int32(name='PageIndex', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  resource?: string(name='Resource', example='/a', position='Query'),
  resourceSearchKey?: string(name='ResourceSearchKey', example='a', position='Query'),
}

model ListIsolationRulesResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    result?: [ 
      {
        appId?: string(name='AppId', example='hkhon1po62@c3df23522bXXXXX'),
        appName?: string(name='AppName', example='spring-cloud-a'),
        enable?: boolean(name='Enable', example='true'),
        fallbackObject?: string(name='FallbackObject', example='"{\\"appName\\":\\"spring-cloud-a\\",\\"fallbackBehavior\\":{\\"webFallbackMode\\":0,\\"webRespContentType\\":0,\\"webRespMessage\\":\\"Blocked\\",\\"webRespStatusCode\\":429},\\"id\\":977,\\"name\\":\\"Fallback\\",\\"namespace\\":\\"default\\",\\"resourceClassification\\":1}"'),
        namespace?: string(name='Namespace', example='default'),
        regionId?: string(name='RegionId', example='cn-hangzhou'),
        resource?: string(name='Resource', example='/a'),
        ruleId?: long(name='RuleId', example='1'),
        threshold?: int32(name='Threshold', example='3'),
      }
    ](name='Result'),
    totalSize?: int32(name='TotalSize', example='3'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='4E9FDCFE-0738-493B-B801-82BDFBCB****'),
  success?: boolean(name='Success', example='true'),
}

model ListIsolationRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIsolationRulesResponseBody(name='body'),
}

async function listIsolationRules(request: ListIsolationRulesRequest): ListIsolationRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListIsolationRules', 'POST', '/', 'json', false, 'json', request);
}

model ListListenersByConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  dataId: string(name='DataId', description='The ID of the data.', example='zeekr-clueboss.yml', position='Query'),
  group: string(name='Group', description='The name of the group.', example='prod', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-m7r1yurp00e', position='Query'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='aaeb4d28-c9eb-4fa2-85f5-d03ce7ee8df1', position='Query'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{\\\\"appGroup\\\\":\\\\"emas-zfive_prehost\\\\",\\\\"appName\\\\":\\\\"emas-zfive\\\\",\\\\"appStage\\\\":\\\\"PRE_PUBLISH\\\\",\\\\"appUnit\\\\":\\\\"\\\\",\\\\"bucId\\\\":\\\\"225902\\\\",\\\\"bucName\\\\":\\\\"Wireless\\\\",\\\\"provider\\\\":\\\\"aliyun\\\\"}', position='Query'),
}

model ListListenersByConfigResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code returned.', example='202'),
  listeners?: [ 
    {
      ip?: string(name='Ip', description='The IP address.', example='1.1.1.1'),
      labels?: map[string]string(name='Labels'),
      md5?: string(name='Md5', description='The verification string.', example='23sdfdf'),
      status?: string(name='Status', description='The status.', example='beta'),
      version?: string(name='Version'),
    }
  ](name='Listeners', description='The information about listeners.'),
  message?: string(name='Message', description='The message returned.', example='success'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='2'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='75E1442F-11EC-567A-9CF0-5A36F7904F39'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='7'),
}

model ListListenersByConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListListenersByConfigResponseBody(name='body'),
}

/**
  * > The operation is not provided in Nacos SDKs. For information about Nacos SDKs, see the [official documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
 * @tags cluster
 */
async function listListenersByConfig(request: ListListenersByConfigRequest): ListListenersByConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListListenersByConfig', 'POST', '/', 'json', false, 'json', request);
}

model ListListenersByIpRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='mse_prepaid_public_cn-i7m2cecji09', position='Query'),
  ip: string(name='Ip', description='The IP address of the listener.', example='172.22.0.240', position='Query'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='ea02a522-9482-4255-bb65-dc0636d783f2', position='Query'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}', position='Query'),
}

model ListListenersByIpResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='MSE-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code.', example='202'),
  listeners?: [ 
    {
      dataId?: string(name='DataId', description='The ID of the data.', example='test.yaml'),
      group?: string(name='Group', description='The group.', example='default'),
      md5?: string(name='Md5', description='The verification string.', example='23sdfdf'),
      namespaceId?: string(name='NamespaceId'),
    }
  ](name='Listeners', description='The information about listeners.'),
  message?: string(name='Message', description='The message returned.', example='The request was successfully processed.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='54973C90-F379-4372-9AA5-053A3F7****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='True'),
  totalCount?: int32(name='TotalCount', description='The total number of returned instances.', example='6'),
}

model ListListenersByIpResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListListenersByIpResponseBody(name='body'),
}

/**
  * > The operation is not provided in Nacos SDKs. For information about Nacos SDKs, see the [official documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
 * @tags cluster
 */
async function listListenersByIp(request: ListListenersByIpRequest): ListListenersByIpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListListenersByIp', 'POST', '/', 'json', false, 'json', request);
}

model ListMigrationTaskRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  originInstanceName?: string(name='OriginInstanceName', description='The name of the source instance.', example='whdc', position='Query'),
  pageNum?: long(name='PageNum', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page.', example='10', position='Query'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}', position='Query'),
}

model ListMigrationTaskResponseBody = {
  data?: [ 
    {
      clusterType?: string(name='ClusterType', description='The type of the instance.

*   Nacos-Ans
*   ZooKeeper
*   Eureka', example='Nacos-Ans'),
      gmtCreate?: string(name='GmtCreate', description='The creation time.', example='2022-01-07T10:07:57.000+0000'),
      gmtModified?: string(name='GmtModified', description='The update time.', example='2021-12-30T06:41:52.000+0000'),
      id?: long(name='Id', description='The ID of the job.', example='1'),
      originInstanceAddress?: string(name='OriginInstanceAddress', description='The address of the source instance node.', example='192.168.1.1:8848'),
      originInstanceName?: string(name='OriginInstanceName', description='The name of the source instance.', example='test'),
      originInstanceNamespace?: string(name='OriginInstanceNamespace', description='The list of namespaces. This parameter is optional if applications are migrated from a Nacos instance.', example='fsdfsdfdsf'),
      projectDesc?: string(name='ProjectDesc', description='The description.', example='test'),
      targetClusterName?: string(name='TargetClusterName', description='The name of the destination instance.', example='multiple-nacos'),
      targetClusterUrl?: string(name='TargetClusterUrl', description='The URL of the destination instance.', example='mse-f1******-nacos-ans.mse.aliyuncs.com:8848'),
      targetInstanceId?: string(name='TargetInstanceId', description='The ID of the destination instance.', example='mse-cn-zv*****'),
      userId?: string(name='UserId', description='The ID of the user.', example='2'),
    }
  ](name='Data', description='The array structure.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request was successfully processed.'),
  pageNumber?: long(name='PageNumber', description='The number of the returned page.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='451EBE59-5F33-5B15-83C1-78593B9*****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
  totalCount?: long(name='TotalCount', description='The total number of entries.', example='2'),
}

model ListMigrationTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMigrationTaskResponseBody(name='body'),
}

async function listMigrationTask(request: ListMigrationTaskRequest): ListMigrationTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListMigrationTask', 'POST', '/', 'json', false, 'json', request);
}

model ListNacosConfigsRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  appName?: string(name='AppName', description='The name of the application.', example='fpx-pds-pns', position='Query'),
  dataId?: string(name='DataId', description='The ID of the data.', example='zeekr-*', position='Query'),
  group?: string(name='Group', description='The name of the group. Default value: `default`', example='crm', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-7mz2fj****', position='Query'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='fad732a7-ff1a-4f21-8126-4edd4****', position='Query'),
  pageNum: int32(name='PageNum', description='The number of the page to return.', example='5', position='Query'),
  pageSize: int32(name='PageSize', description='The number of entries to return on each page.', example='200', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the instance resides. The region is supported by Microservices Engine (MSE).', example='cn-hangzhou', position='Query'),
  requestPars?: string(name='RequestPars', description='The extended request parameters. The JSON format is supported.', example='{\\\\"appGroup\\\\":\\\\"sm_zk_asi_na610\\\\",\\\\"appName\\\\":\\\\"sm-zk\\\\",\\\\"appStage\\\\":\\\\"PUBLISH\\\\",\\\\"appUnit\\\\":\\\\"center\\\\",\\\\"bucId\\\\":\\\\"193554\\\\",\\\\"bucName\\\\":\\\\"Alibaba Mobile Business Group-UC\\\\",\\\\"provider\\\\":\\\\"aliyun\\\\"}', position='Query'),
  tags?: string(name='Tags', description='The tags.', example='billing', position='Query'),
}

model ListNacosConfigsResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  configurations?: [ 
    {
      appName?: string(name='AppName', description='The name of the application.', example='test'),
      dataId?: string(name='DataId', description='The ID of the configuration.', example='log.yaml'),
      group?: string(name='Group', description='The ID of the group.', example='public'),
      id?: string(name='Id', description='The ID of the application.', example='132****'),
    }
  ](name='Configurations', description='The configurations.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request was successfully processed.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4081087F-3429-5873-A1E7-D4B5479D0B84'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
  totalCount?: int32(name='TotalCount', description='The total number of returned instances.', example='12'),
}

model ListNacosConfigsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNacosConfigsResponseBody(name='body'),
}

/**
  * > The operation is not provided in Nacos SDKs. For information about Nacos SDKs, see the [official documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
 * @tags cluster
 */
async function listNacosConfigs(request: ListNacosConfigsRequest): ListNacosConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNacosConfigs', 'POST', '/', 'json', false, 'json', request);
}

model ListNacosHistoryConfigsRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  dataId?: string(name='DataId', description='The ID of the data.', example='user-prod.yaml', position='Query'),
  group?: string(name='Group', description='The name of the configuration group.', example='fc-dev-cluster-1', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-2r42e3bk20n', position='Query'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='fc0f6e40-****-946b-45e3af313707', position='Query'),
  pageNum: int32(name='PageNum', description='The number of the page to return.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='The number of entries to return on each page.', example='10', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the instance resides. The region is supported by MSE.', example='cn-hangzhou', position='Query'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{\\\\"appGroup\\\\":\\\\"aliyun-phecda-service-staging\\\\",\\\\"appName\\\\":\\\\"aliyun-phecda-service\\\\",\\\\"appStage\\\\":\\\\"DAILY\\\\",\\\\"appUnit\\\\":\\\\"center\\\\",\\\\"bucId\\\\":\\\\"250858\\\\",\\\\"bucName\\\\":\\\\"Alibaba Cloud\\\\",\\\\"provider\\\\":\\\\"aliyun\\\\"}', position='Query'),
}

model ListNacosHistoryConfigsResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  historyItems?: [ 
    {
      appName?: string(name='AppName', description='The application tag.', example='gateway'),
      dataId?: string(name='DataId', description='The ID of the data.', example='test.yaml'),
      group?: string(name='Group', description='The name of the group.', example='default'),
      id?: long(name='Id', description='The ID of the configuration.', example='23fdsf'),
      lastModifiedTime?: long(name='LastModifiedTime', description='The timestamp when the configuration was last modified.', example='16434400'),
      opType?: string(name='OpType', description='The format of the configuration file.', example='yaml'),
      srcUser?: string(name='SrcUser'),
    }
  ](name='HistoryItems', description='The configuration items.'),
  httpCode?: string(name='HttpCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request was successfully processed.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='53338ECA-F880-54D8-A9B3-5606355A1B89'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='7'),
}

model ListNacosHistoryConfigsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNacosHistoryConfigsResponseBody(name='body'),
}

/**
  * > The operation is not provided in Nacos SDKs. For information about Nacos SDKs, see the [official documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
 * @tags cluster
 */
async function listNacosHistoryConfigs(request: ListNacosHistoryConfigsRequest): ListNacosHistoryConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNacosHistoryConfigs', 'POST', '/', 'json', false, 'json', request);
}

model ListNamingTrackRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  endTs: long(name='EndTs', description='The end timestamp. Unit: seconds.', example='1665299698', position='Query'),
  group?: string(name='Group', description='The group.', example='group', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='mse_prepaid_public_cn-tl32d*****', position='Query'),
  ip?: string(name='Ip', description='The IP address of the client.', example='172.16.183.232', position='Query'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='cd4d3703-e2a6-46b5-85c6-4447e4f****', position='Query'),
  pageNum: long(name='PageNum', description='The number of the page to return.', example='1', position='Query'),
  pageSize: long(name='PageSize', description='The number of entries to return on each page.', example='10', position='Query'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}', position='Query'),
  reverse?: boolean(name='Reverse', description='Specifies whether to sort the query results in chronological order or reverse chronological order. Default value: `false`.

*   `true`: sorts the query results in reverse chronological order.
*   `false`: sorts the query results in chronological order.', example='false', position='Query'),
  serviceName?: string(name='ServiceName', description='The name of the service.', example='fpx-xms-baseinfo', position='Query'),
  startTs: long(name='StartTs', description='The start timestamp. Unit: seconds.', example='1660238450', position='Query'),
}

model ListNamingTrackResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request was successfully processed.'),
  pageNumber?: long(name='PageNumber', description='The number of the returned page.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9916CBED-B2D5-5685-9129-4592FE1*****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
  totalCount?: long(name='TotalCount', description='The total number of returned entries.', example='7'),
  traces?: [ 
    {
      clientIp?: string(name='ClientIp', description='The IP address of the client.', example='120.40.32.235'),
      group?: string(name='Group', description='The group.', example='prod'),
      instanceSize?: string(name='InstanceSize', description='The number of instances.', example='1'),
      nodeName?: string(name='NodeName', description='The name of the node.', example='mse-197*****-167083******-reg-center-0-0'),
      pushTime?: string(name='PushTime', description='The push time.', example='2022-12-16 11:48:07'),
      pushTimeAll?: string(name='PushTimeAll', description='The total push time.', example='628ms'),
      pushTimeNetwork?: string(name='PushTimeNetwork', description='The push time for the network.', example='37ms'),
      serverName?: string(name='ServerName', description='The name of the service.', example='fpx-xms-baseinfo'),
      slaTime?: string(name='SlaTime', description='The duration that is specified in the service-level agreement (SLA).', example='628ms'),
    }
  ](name='Traces', description='The data information.'),
}

model ListNamingTrackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNamingTrackResponseBody(name='body'),
}

async function listNamingTrack(request: ListNamingTrackRequest): ListNamingTrackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNamingTrack', 'GET', '/', 'json', false, 'json', request);
}

model ListSSLCertRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  certName?: string(name='CertName', example='certabc', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-3f97e2989c344f35ab3fd62b19f1****', position='Query'),
}

model ListSSLCertResponseBody = {
  code?: int32(name='Code', description='The status code returned. A value of 200 indicates that the request is successful.', example='200'),
  data?: [ 
    {
      afterDate?: string(name='AfterDate', description='The time when the certificate expires. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='2021-04-01 02:35:12'),
      algorithm?: string(name='Algorithm', description='The algorithm.', example='test'),
      beforeDate?: string(name='BeforeDate', description='The time when the certificate took effect. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='2031-03-30 02:35:12'),
      certIdentifier?: string(name='CertIdentifier', description='The ID of the certificate.', example='1234'),
      certName?: string(name='CertName', description='The name of the certificate.', example='test.com'),
      commonName?: string(name='CommonName', description='The domain name with which the certificate is associated.', example='*.test.com'),
      gmtAfter?: string(name='GmtAfter', description='The time when the certificate expires. This value is a GMT timestamp.', example='2021-04-01 02:35:12'),
      gmtBefore?: string(name='GmtBefore', description='The time when the certificate took effect. This value is a GMT timestamp.', example='2031-03-30 02:35:12'),
      issuer?: string(name='Issuer', description='The issuer of the certificate.', example='test'),
      sans?: string(name='Sans', description='The SSL certificate.', example='SSL'),
    }
  ](name='Data', description='The returned data.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message returned.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CAA9A229-141D-5FBA-AC5C-516C02026A11'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model ListSSLCertResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSSLCertResponseBody(name='body'),
}

async function listSSLCert(request: ListSSLCertRequest): ListSSLCertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSSLCert', 'POST', '/', 'json', false, 'json', request);
}

model ListSecurityGroupRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', description='The ID of the gateway.', example='gw-e98e40675aaf49bda082137d158e1585', position='Query'),
}

model ListSecurityGroupResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: [ 
    {
      securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group.', example='sg-8vb8gsmrqyc35k645rk6'),
      securityGroupName?: string(name='SecurityGroupName', description='The name of the security group.', example='sg2'),
      securityGroupType?: string(name='SecurityGroupType', description='The type of the security group. Valid values:

*   normal: basic security group
*   enterprise: advanced security group For more information, see [Advanced security groups](~~120621~~).', example='enterprise'),
      vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC).', example='vpc-bp1b'),
    }
  ](name='Data', description='The data structure.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model ListSecurityGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSecurityGroupResponseBody(name='body'),
}

async function listSecurityGroup(request: ListSecurityGroupRequest): ListSecurityGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSecurityGroup', 'POST', '/', 'json', false, 'json', request);
}

model ListSecurityGroupRuleRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-83b0ddb569434f82b9fe8e4c60c40f7c', position='Query'),
}

model ListSecurityGroupRuleResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: [ 
    {
      authCidrs?: [ string ](name='AuthCidrs'),
      description?: string(name='Description', description='The rule description.', example='Test'),
      gatewayId?: long(name='GatewayId', description='The gateway ID.', example='81'),
      gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-12a432a1f5da423997d8880bd32c304d'),
      gmtCreate?: string(name='GmtCreate', description='The creation time.', example='2022-01-07T10:07:57.000+0000'),
      gmtModified?: string(name='GmtModified', description='The last modification time.', example='2022-01-07T10:07:57.000+0000'),
      id?: string(name='Id', description='The ID of the security group authorization record.', example='21'),
      ipProtocol?: string(name='IpProtocol', description='The protocol type.', example='tcp'),
      portRange?: string(name='PortRange', description='The port range.', example='8000/8000'),
      securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group.', example='sg-bp1cg6qlyjepj0y6cf2c'),
    }
  ](name='Data', description='The returned result.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9EC7BDBF-3C38-5C9C-95DD-61E298CD43E8'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model ListSecurityGroupRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSecurityGroupRuleResponseBody(name='body'),
}

async function listSecurityGroupRule(request: ListSecurityGroupRuleRequest): ListSecurityGroupRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSecurityGroupRule', 'POST', '/', 'json', false, 'json', request);
}

model ListSentinelBlockFallbackDefinitionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh', position='Query'),
  appName: string(name='AppName', example='spring-cloud-a', position='Query'),
  classificationSet?: [ int32 ](name='ClassificationSet', shrink='json', position='Query'),
  namespace: string(name='Namespace', example='default', position='Query'),
}

model ListSentinelBlockFallbackDefinitionsResponseBody = {
  data?: [ 
    {
      appName?: string(name='AppName', example='spring-cloud-a'),
      fallbackBehavior?: map[string]any(name='FallbackBehavior', example='{"webRespStatusCode":429,"webRespMessage":"test","webFallbackMode":0,"webRespContentType":0}'),
      id?: string(name='Id', example='12'),
      name?: string(name='Name', example='defaultFallback'),
      namespace?: string(name='Namespace', example='default'),
      resourceClassification?: string(name='ResourceClassification', example='1'),
      targetMap?: map[string]any(name='TargetMap', example='{"/params/{hot}":[1]}'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='4E9FDCFE-0738-493B-B801-82BDFBCB****'),
  success?: boolean(name='Success', example='true'),
}

model ListSentinelBlockFallbackDefinitionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSentinelBlockFallbackDefinitionsResponseBody(name='body'),
}

async function listSentinelBlockFallbackDefinitions(request: ListSentinelBlockFallbackDefinitionsRequest): ListSentinelBlockFallbackDefinitionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSentinelBlockFallbackDefinitions', 'POST', '/', 'json', false, 'json', request);
}

model ListServiceSourceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-c51a15c7ee934a4fb945ccf35fe1****', position='Query'),
  source?: string(name='Source', description='Specifies the type of the returned service source. If this parameter is not specified, service sources of all types are returned. Valid values:

*   K8s
*   MSE
*   MSE_ZK
*   SAE
*   EDAS', example='MSE', position='Query'),
}

model ListServiceSourceResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: [ 
    {
      address?: string(name='Address', description='The ID of the Container Service for Kubernetes (ACK) cluster or the endpoint of the Microservices Engine (MSE) instance.', example='***'),
      bindingWithGateway?: int32(name='BindingWithGateway', description='Indicates whether the service source is associated with the gateway. The value 1 indicates that the service source is associated with the gateway.', example='1'),
      gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='1'),
      gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-2u9uhd9283hd92hgd39g239dg2*****'),
      gmtCreate?: string(name='GmtCreate', description='The creation time.', example='2022-01-07 18:07:57'),
      gmtModified?: string(name='GmtModified', description='The update time.', example='2022-01-07 18:07:57'),
      groupList?: [ string ](name='GroupList', description='The array of service groups.'),
      id?: long(name='Id', description='The ID.', example='1'),
      ingressOptions?: {
        enableIngress?: boolean(name='EnableIngress', description='Indicates whether Ingresses are enabled.', example='true'),
        enableStatus?: boolean(name='EnableStatus', description='Indicates whether the Ingress status is updated.', example='true'),
        ingressClass?: string(name='IngressClass', description='The Ingress class.', example='com.test.xxx'),
        watchNamespace?: string(name='WatchNamespace', description='The namespace that you want to monitor.', example='default'),
      }(name='IngressOptions', description='The information about the support for Ingresses by applications.'),
      name?: string(name='Name', description='The name.', example='test'),
      pathList?: [ string ](name='PathList', description='The array of root paths of service lists.'),
      source?: string(name='Source', description='The type of the service source.', example='MSE'),
      sourceUniqueId?: string(name='SourceUniqueId', description='The unique ID of the service source.', example='mse-cn-***'),
      type?: string(name='Type', description='The type.', example='NACOS'),
    }
  ](name='Data', description='The returned data.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message returned.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B8C4B0D8-EBB9-5F20-8295-04224FBE5529'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model ListServiceSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListServiceSourceResponseBody(name='body'),
}

async function listServiceSource(request: ListServiceSourceRequest): ListServiceSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListServiceSource', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  nextToken?: string(name='NextToken', description='The token used to start the next query.', example='AAAAAV3MpHK1AP0pfERHZN5pu6kywps2Ezza3n8HAAzCCqsi', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  resourceId?: [ string ](name='ResourceId', description='The resource IDs. You can specify a maximum of 50 resource IDs.', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resource. Valid values:

*   CLUSTER: MSE instance
*   GATEWAY: cloud-native gateway', example='CLUSTER', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag.', example='env'),
      value?: string(name='Value', description='The value of the tag.', example='prd'),
    }
  ](name='Tag', description='The list of tags. A maximum number of 20 tags are supported.', position='Query'),
}

model ListTagResourcesResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  message?: string(name='Message', description='The message returned.', example='The request was successfully processed.'),
  nextToken?: string(name='NextToken', description='The token that is required for the next query. If the NextToken parameter is empty, no subsequent query is required.', example='AAAAAV3MpHK1AP0pfERHZN5pu6ng3BeUyo2zbY5wgL1DBa2T'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='92ED7C9C-84A2-595F-87FE-354F84C0F739'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId', description='The ID of the resource.', example='mse-cn-7pp2st29t16'),
      resourceType?: string(name='ResourceType', description='The type of the resource.', example='cluster'),
      tagKey?: string(name='TagKey', description='The tag key.', example='env'),
      tagValue?: string(name='TagValue', description='The tag value.', example='prd'),
    }
  ](name='TagResource')
  }(name='TagResources', description='The list of resources.'),
}

model ListTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ListZkTrackRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  endTs: long(name='EndTs', description='The end timestamp. Unit: seconds.', example='1669619383', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-0ju2yq****', position='Query'),
  pageNum: long(name='PageNum', description='The number of the page to return.', example='1', position='Query'),
  pageSize: long(name='PageSize', description='The number of entries to return on each page.', example='20', position='Query'),
  path?: string(name='Path', description='The path.', example='/path', position='Query'),
  requestPars?: string(name='RequestPars', description='The request parameters.', example='{}', position='Query'),
  reverse?: boolean(name='Reverse', description='Specifies whether to enable reverse ordering.', example='false', position='Query'),
  sessionId?: string(name='SessionId', description='The session ID.', example='0x301fdfbdbf00***', position='Query'),
  startTs: long(name='StartTs', description='The start timestamp. Unit: seconds.', example='1669618483', position='Query'),
}

model ListZkTrackResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The message returned.', example='ok'),
  pageNumber?: long(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries returned per page.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DC34E4A3-5F1C-4E40-86EA-02EDF967****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='20'),
  traces?: [ 
    {
      acl?: string(name='Acl', description='The access control list (ACL).', example='world:anyone:cdrwa'),
      dataType?: string(name='DataType', description='The data type. Valid values:

*   persist
*   ephemeral', example='persist'),
      eventType?: string(name='EventType', description='The type of the event. For trajectory of the Notify type:

*   NodeCreated
*   NodeDeleted
*   NodeDataChanged
*   NodeChildrenChanged', example='NodeCreated'),
      finished?: boolean(name='Finished', description='Indicates whether the transaction ended.', example='true'),
      logDate?: string(name='LogDate', description='The logging time.', example='2022-11-28 15:09:15,606'),
      multiSize?: long(name='MultiSize', description='The transaction size.', example='3'),
      opType?: string(name='OpType', description='The type of the operation. For trajectory of the Push type:

*   Create
*   Update
*   Delete
*   SetAcl
*   Multi

For trajectory of the Pull type:

*   GetData
*   GetChild
*   GetStat', example='Create'),
      path?: string(name='Path', description='The path.', example='/path'),
      result?: string(name='Result', description='The returned result.', example='success'),
      sessionId?: string(name='SessionId', description='The session ID.', example='0x301fdfbdbf00***'),
      timestamp?: string(name='Timestamp', description='The timestamp. It is not available.', example='1669619383000'),
      traceType?: string(name='TraceType', description='The type of the trajectory. Valid values:

*   Push
*   Pull
*   Notify', example='Push'),
      ttl?: long(name='Ttl', description='The time to live (TTL).', example='0'),
      watch?: boolean(name='Watch', description='Indicates whether the monitoring feature is enabled.', example='true'),
    }
  ](name='Traces', description='The track data.'),
}

model ListZkTrackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListZkTrackResponseBody(name='body'),
}

async function listZkTrack(request: ListZkTrackRequest): ListZkTrackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListZkTrack', 'POST', '/', 'json', false, 'json', request);
}

model ListZnodeChildrenRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  clusterId: string(name='ClusterId', description='The ID of the instance.', example='mse-09k1q11****', position='Query'),
  path: string(name='Path', description='The path of the node.', example='/zookeeper', position='Query'),
}

model ListZnodeChildrenResponseBody = {
  data?: [ 
    {
      data?: string(name='Data', description='The data of the node.', example='cluster'),
      dir?: boolean(name='Dir', description='Indicates whether the node information was returned. Valid values:

*   `true`: The node information was returned.
*   `false`: The node information failed to be returned.', example='true'),
      name?: string(name='Name', description='The name of the node.', example='mse-bc1a29b0-160230875****-reg-center-0-1'),
      path?: string(name='Path', description='The path of the node.', example='/zookeeper'),
    }
  ](name='Data', description='The details of the data.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BDB6CE0B-9CAF-41B5-9FEA-E08BE8E2****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model ListZnodeChildrenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListZnodeChildrenResponseBody(name='body'),
}

async function listZnodeChildren(request: ListZnodeChildrenRequest): ListZnodeChildrenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListZnodeChildren', 'POST', '/', 'json', false, 'json', request);
}

model ModifyGovernanceKubernetesClusterRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  clusterId: string(name='ClusterId', description='The ID of the instance.', example='cd23228b3c80c4d4f9ad87cc3****', position='Query'),
  namespaceInfos?: [ 
    {
      mseNamespace?: string(name='MseNamespace', description='The microservice namespace. If you do not specify this parameter, Microservice Governance is not enabled for the namespace.', example='default'),
      name?: string(name='Name', description='The name of the Kubernetes namespace.', example='default'),
    }
  ](name='NamespaceInfos', description='The information about the namespace for which Microservices Engine(MSE) Microservices Governance is enabled.', shrink='json', position='Body'),
  regionId: string(name='RegionId', description='The ID of the region in which the instance resides. The region is supported by MSE.', example='cn-hangzhou', position='Query'),
}

model ModifyGovernanceKubernetesClusterResponseBody = {
  code?: int32(name='Code', description='The response code returned.', example='200'),
  data?: boolean(name='Data', description='The deletion result.', example='True'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F9849E97-2455-54B0-A3B4-3F6E4E9FFEB1'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model ModifyGovernanceKubernetesClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyGovernanceKubernetesClusterResponseBody(name='body'),
}

async function modifyGovernanceKubernetesCluster(request: ModifyGovernanceKubernetesClusterRequest): ModifyGovernanceKubernetesClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyGovernanceKubernetesCluster', 'POST', '/', 'json', true, 'form', request);
}

model ModifyLosslessRuleRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  aligned: boolean(name='Aligned', description='Specifies whether to align the lifecycle of the application in the Kubernetes cluster with that of the microservice.', example='true', position='Query'),
  appId: string(name='AppId', description='The ID of the application.', example='c644n5frmc@3e75f25fd4*****', position='Query'),
  appName?: string(name='AppName', description='The name of the application.', example='wx-work-api', position='Query'),
  delayTime: int32(name='DelayTime', description='The registration latency.', example='1', position='Query'),
  enable: boolean(name='Enable', description='Specifies whether to enable the alert rule. Valid values:

*   `true`: enables the rule.
*   `false`: disables the rule.', example='false', position='Query'),
  funcType: int32(name='FuncType', description='The slope of the prefetching curve.', example='1', position='Query'),
  lossLessDetail?: boolean(name='LossLessDetail', description='Specifies whether to display online and offline processing details.', example='false', position='Query'),
  namespace?: string(name='Namespace', description='The microservice namespace to which the rule applies.', example='default', position='Query'),
  notice?: boolean(name='Notice', description='Specifies whether to enable notification.', example='false', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-beijing', position='Query'),
  related: boolean(name='Related', description='Specifies whether to associate with service prefetching.', example='true', position='Query'),
  warmupTime: int32(name='WarmupTime', description='The prefetching duration.', example='60', position='Query'),
}

model ModifyLosslessRuleResponseBody = {
  code?: int32(name='Code', description='响应码。', example='200'),
  data?: any(name='Data', description='返回数据。', example='null'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='HTTP状态码。', example='200'),
  message?: string(name='Message', description='The message returned.', example='modifyLosslessRule success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3369AD10-F1A6-4E6F-B99E-20F51826****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model ModifyLosslessRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyLosslessRuleResponseBody(name='body'),
}

async function modifyLosslessRule(request: ModifyLosslessRuleRequest): ModifyLosslessRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyLosslessRule', 'POST', '/', 'json', false, 'json', request);
}

model OfflineGatewayRouteRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-77e1153db6e14c0a8b1fae20bcb89ca5', position='Query'),
  routeId?: string(name='RouteId', description='The ID of the route.', example='645', position='Query'),
}

model OfflineGatewayRouteResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: boolean(name='Data', description='Indicates whether the route is unpublished.', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8EB24742-AB15-5953-BEFB-1FA18E770EEE'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model OfflineGatewayRouteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OfflineGatewayRouteResponseBody(name='body'),
}

async function offlineGatewayRoute(request: OfflineGatewayRouteRequest): OfflineGatewayRouteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OfflineGatewayRoute', 'POST', '/', 'json', false, 'json', request);
}

model OrderClusterHealthCheckRiskNoticeRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-st21ri2****', position='Query'),
  mute?: boolean(name='Mute', description='Specifies whether to disable the notification feature if the risk item occurs.

*   true: disabled
*   false: enabled', example='false', position='Query'),
  noticeType?: string(name='NoticeType', description='A reserved parameter.', example='null', position='Query'),
  regionId?: string(name='RegionId', description='The region in which the cluster resides.', example='cn-hangzhou', position='Query'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}', position='Query'),
  riskCode?: string(name='RiskCode', description='The ID of the risk item.', example='30010010001', position='Query'),
}

model OrderClusterHealthCheckRiskNoticeResponseBody = {
  code?: int32(name='Code', description='The status code. A value of 200 is returned if the request is successful.', example='200'),
  data?: boolean(name='Data', description='Indicates whether the subscription was successful.', example='null'),
  dynamicCode?: string(name='DynamicCode', description='The dynamic part in the error message.', example='code'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the \\*\\*%s\\*\\* variable in the **ErrMessage** parameter.

> If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.

*   If the request is successful, a success message is returned.
*   If the request fails, an error message is returned, such as the "TaskId not found" message.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='AF21683A-29C7-4853-AC0F-B5ADEE4D****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model OrderClusterHealthCheckRiskNoticeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OrderClusterHealthCheckRiskNoticeResponseBody(name='body'),
}

async function orderClusterHealthCheckRiskNotice(request: OrderClusterHealthCheckRiskNoticeRequest): OrderClusterHealthCheckRiskNoticeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OrderClusterHealthCheckRiskNotice', 'POST', '/', 'json', false, 'json', request);
}

model PullServicesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-eccf313e2224438ba53d95d039e5****', position='Query'),
  namespace?: string(name='Namespace', description='The namespace.', example='public', position='Query'),
  sourceType?: string(name='SourceType', description='The type of the service source.', example='K8s', position='Query'),
}

model PullServicesResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: [ 
    {
      groupName?: string(name='GroupName', description='The name of the group.', example='test'),
      namespace?: string(name='Namespace', description='The namespace.', example='default'),
      namespaceShowName?: string(name='NamespaceShowName', description='The alias of the namespace.', example='public'),
      services?: [ 
        {
          groupName?: string(name='GroupName', description='The name of the group.', example='test'),
          name?: string(name='Name', description='The name of the service.', example='test'),
          namespace?: string(name='Namespace', description='The namespace.', example='public'),
          sourceId?: string(name='SourceId', description='The ID of the service source.', example='1'),
          sourceType?: string(name='SourceType', description='The type of the service source.', example='MSE'),
        }
      ](name='Services', description='The information about services.'),
    }
  ](name='Data', description='The returned data.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='You are not authorized to perform this operation. Action: mse:PullServices, Resource: acs:mse:cn-shenzhen:1228932054837788:*'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EC0A99B9-8BA3-5FE3-8FE7-D7C719CF7BD2'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model PullServicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PullServicesResponseBody(name='body'),
}

async function pullServices(request: PullServicesRequest): PullServicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PullServices', 'POST', '/', 'json', false, 'json', request);
}

model PutClusterHealthCheckTaskRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse_prepaid_public_cn-2r42o83h506', position='Query'),
}

model PutClusterHealthCheckTaskResponseBody = {
  code?: int32(name='Code', description='The status code. A value of 200 is returned if the request is successful.', example='200'),
  data?: boolean(name='Data', description='The data returned.', example='null'),
  dynamicCode?: string(name='DynamicCode', description='The dynamic part in the error message.', example='code'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the \\*\\*%s\\*\\* variable in the **ErrMessage** parameter.

> If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.

*   If the request is successful, a success message is returned.
*   If the request fails, an error message is returned, such as the "TaskId not found" message.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5B170A0D-2C5D-4CF8-B808-03966B86****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model PutClusterHealthCheckTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PutClusterHealthCheckTaskResponseBody(name='body'),
}

async function putClusterHealthCheckTask(request: PutClusterHealthCheckTaskRequest): PutClusterHealthCheckTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutClusterHealthCheckTask', 'POST', '/', 'json', false, 'json', request);
}

model QueryAllSwimmingLaneRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  groupId: long(name='GroupId', description='The ID of the lane group.', example='186', position='Query'),
  namespace?: string(name='Namespace', description='The name of the MSE namespace.', example='default', maxLength=64, position='Query'),
}

model QueryAllSwimmingLaneResponseBody = {
  data?: [ 
    {
      entryRules?: [ 
        {
          condition?: string(name='condition'),
          path?: string(name='path'),
          paths?: [ string ](name='paths'),
          restItems?: [ 
            {
              cond?: string(name='cond'),
              datum?: string(name='datum'),
              divisor?: int32(name='divisor'),
              name?: string(name='name'),
              nameList?: [ string ](name='nameList'),
              operator?: string(name='operator'),
              rate?: int32(name='rate'),
              remainder?: int32(name='remainder'),
              type?: string(name='type'),
              value?: string(name='value'),
            }
          ](name='restItems'),
        }
      ](name='EntryRules'),
      gatewaySwimmingLaneRoute?: {
        canaryModel?: int32(name='CanaryModel', example='0'),
        conditions?: [ 
          {
            cond?: string(name='Cond', example='PRE'),
            name?: string(name='Name', example='name'),
            type?: string(name='Type', example='header'),
            value?: string(name='Value', example='xiaoming'),
          }
        ](name='Conditions'),
        gatewayId?: long(name='GatewayId', example='1'),
        gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-84efde2ee1464260bdb17a5b****'),
        percentage?: int32(name='Percentage', example='20'),
        routeIdList?: [ long ](name='RouteIdList'),
      }(name='GatewaySwimmingLaneRoute'),
      groupId?: string(name='GroupId'),
      id?: long(name='Id', example='123'),
      messageQueueFilterSide?: string(name='MessageQueueFilterSide', example='Client'),
      messageQueueGrayEnable?: boolean(name='MessageQueueGrayEnable'),
      name?: string(name='Name', example='swimmingGroup'),
      namespace?: string(name='Namespace', example='default'),
      recordCanaryDetail?: boolean(name='RecordCanaryDetail'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      tag?: string(name='Tag'),
      userId?: string(name='UserId', example='12345'),
      enableRules?: boolean(name='enableRules'),
      gmtCreate?: string(name='gmtCreate'),
      gmtModified?: string(name='gmtModified'),
    }
  ](name='Data', description='The details of the data.', example='[{id:100,name:"test"}]'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='mse-100-000'),
  message?: string(name='Message', description='The returned message.', example='The request was successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DC34E4A3-5F1C-4E40-86EA-02EDF967****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model QueryAllSwimmingLaneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAllSwimmingLaneResponseBody(name='body'),
}

async function queryAllSwimmingLane(request: QueryAllSwimmingLaneRequest): QueryAllSwimmingLaneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAllSwimmingLane', 'POST', '/', 'json', false, 'json', request);
}

model QueryAllSwimmingLaneGroupRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  namespace?: string(name='Namespace', description='The name of the Microservices Engine (MSE) namespace that you want to query.', example='default', maxLength=64, position='Query'),
}

model QueryAllSwimmingLaneGroupResponseBody = {
  code?: int32(name='Code', description='The status code. A value of 200 is returned if the request is successful.', example='200'),
  data?: [ 
    {
      appIds?: string(name='AppIds', example='abcde@abcde,abcde@abcde'),
      canaryModel?: int32(name='CanaryModel'),
      entryApp?: string(name='EntryApp', example='mse:abcde@abcde'),
      id?: long(name='Id', example='123'),
      messageQueueFilterSide?: string(name='MessageQueueFilterSide', example='Client'),
      messageQueueGrayEnable?: boolean(name='MessageQueueGrayEnable'),
      name?: string(name='Name', example='swimmingGroup'),
      namespace?: string(name='Namespace', example='default'),
      paths?: string(name='Paths'),
      recordCanaryDetail?: boolean(name='RecordCanaryDetail'),
      region?: string(name='Region', example='cn-hangzhou'),
      userId?: string(name='UserId', example='12345'),
    }
  ](name='Data', description='The details of the data.', example='[{id:100,name:"test"}]'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The returned message.

*   If the request is successful, a success message is returned.
*   If the request fails, an error message is returned.', example='The request was successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='54973C90-F379-4372-9AA5-053A3F7****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model QueryAllSwimmingLaneGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAllSwimmingLaneGroupResponseBody(name='body'),
}

async function queryAllSwimmingLaneGroup(request: QueryAllSwimmingLaneGroupRequest): QueryAllSwimmingLaneGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAllSwimmingLaneGroup', 'POST', '/', 'json', false, 'json', request);
}

model QueryBusinessLocationsRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
}

model QueryBusinessLocationsResponseBody = {
  data?: [ 
    {
      cnName?: string(name='CnName', description='The Chinese name of the region.', example='China (Shanghai)'),
      description?: string(name='Description', description='The description.', example='China (Shanghai)'),
      districtCnName?: string(name='DistrictCnName', description='The Chinese name of the district.', example='Asia Pacific'),
      districtEnName?: string(name='DistrictEnName', description='The English name of the district.', example='Asia Pacific'),
      districtId?: string(name='DistrictId', description='The ID of the region.', example='asia-pacific'),
      districtOrdering?: int32(name='DistrictOrdering', description='The ordering information of the district.', example='101'),
      districtShowName?: string(name='DistrictShowName', description='The display name of the district.', example='Asia Pacific'),
      enDescription?: string(name='EnDescription', description='The complete description of the region.', example='China East 2 (Shanghai)'),
      enName?: string(name='EnName', description='The English name of the region.', example='China (Shanghai)'),
      name?: string(name='Name', description='The name.', example='cn-shanghai'),
      ordering?: int32(name='Ordering', description='The ordering information.', example='6'),
      showName?: string(name='ShowName', description='The display name.', example='China (Shanghai)'),
      type?: string(name='Type', description='The type.', example='region'),
    }
  ](name='Data', description='The details of the data.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  message?: string(name='Message', description='The message returned.', example='The parameter is invalid.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3369AD10-F1A6-4E6F-B99E-20F51826****'),
  success?: string(name='Success', description='The result of the request.', example='true'),
}

model QueryBusinessLocationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryBusinessLocationsResponseBody(name='body'),
}

async function queryBusinessLocations(request: QueryBusinessLocationsRequest): QueryBusinessLocationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryBusinessLocations', 'GET', '/', 'json', false, 'json', request);
}

model QueryClusterDetailRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  aclSwitch?: boolean(name='AclSwitch', description='Specifies whether to query access control lists (ACLs).', example='false', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-st21ri2****', position='Query'),
  orderId?: string(name='OrderId', description='The ID of the order.', example='20576750143****', position='Query'),
}

model QueryClusterDetailResponseBody = {
  data?: {
    aclEntryList?: string(name='AclEntryList', description='The whitelist.', example='[]'),
    aclId?: string(name='AclId', description='The ID of the whitelist.', example='acl-bp17020kiqvzutwwj****'),
    appVersion?: string(name='AppVersion', description='The application version.', example='1.2.1'),
    chargeType?: string(name='ChargeType', description='The billing method, such as subscription or pay-as-you-go.', example='Pay-as-you-go'),
    clusterAliasName?: string(name='ClusterAliasName', description='The alias of the instance.', example='mse-7413****'),
    clusterName?: string(name='ClusterName', description='The name of the instance.', example='mse-bc1a29b0-160230875****'),
    clusterSpecification?: string(name='ClusterSpecification', description='The engine specifications.', example='MSE_SC_1_2_200_c'),
    clusterType?: string(name='ClusterType', description='The type of the instance. Valid values: ZooKeeper, Nacos-Ans, and Eureka.', example='Nacos-Ans'),
    clusterVersion?: string(name='ClusterVersion', description='The version of the instance.', example='1.2.1'),
    connectionType?: string(name='ConnectionType', description='The network connection type. Valid values:

*   slb
*   eni', example='slb'),
    cpu?: int32(name='Cpu', description='The number of vCPUs.', example='1'),
    createTime?: string(name='CreateTime', description='The time when the instance was created.', example='2020-07-31 11:36:08'),
    diskCapacity?: long(name='DiskCapacity', description='The capacity of the disk. Unit: GB.', example='60'),
    diskType?: string(name='DiskType', description='The type of the disk.', example='alicloud-disk-ssd-multi-zone'),
    healthStatus?: string(name='HealthStatus', description='The health status of the instance.', example='RESTART_SUCCESS'),
    initCostTime?: long(name='InitCostTime', description='The amount of time taken to create the instance. Unit: milliseconds.', example='98408'),
    initStatus?: string(name='InitStatus', description='The creation status of the instance.', example='RESTART_SUCCESS'),
    instanceCount?: int32(name='InstanceCount', description='The number of instance nodes.', example='3'),
    instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-st21ri2****'),
    instanceModels?: [ 
      {
        creationTimestamp?: string(name='CreationTimestamp', description='The timestamp when the instance was created.', example='1578575377732'),
        healthStatus?: string(name='HealthStatus', description='The health status of the instance.', example='Running'),
        internetIp?: string(name='InternetIp', description='The public IP address.', example='47.98.XX.XX'),
        ip?: string(name='Ip', description='The IP address of the instance.', example='10.12.XX.XX'),
        podName?: string(name='PodName', description='The name of the pod.', example='mse-7413****-159616656****-reg-center-0-0'),
        role?: string(name='Role', description='The role.', example='Peer'),
        singleTunnelVip?: string(name='SingleTunnelVip', description='The single-thread IP address.', example='192.168.XX.XX'),
        zone?: string(name='Zone', description='The zone ID.', example='cn-shanghai-f'),
      }
    ](name='InstanceModels', description='The list of instance nodes.'),
    internetAddress?: string(name='InternetAddress', description='The public IP address of the instance.', example='47.98.XX.XX'),
    internetDomain?: string(name='InternetDomain', description='The public endpoint of the instance.', example='mse-7413****-p.eureka.mse.aliyuncs.com'),
    internetPort?: string(name='InternetPort', description='The private port number.', example='8761'),
    intranetAddress?: string(name='IntranetAddress', description='The internal IP address.', example='192.168.XX.XX'),
    intranetDomain?: string(name='IntranetDomain', description='The internal endpoint of the instance.', example='mse-7413****-eureka.mse.aliyuncs.com'),
    intranetPort?: string(name='IntranetPort', description='The private port number.', example='8761'),
    memoryCapacity?: long(name='MemoryCapacity', description='The size of the memory. Unit: GB.', example='2'),
    mseVersion?: string(name='MseVersion', description='The edition of Microservices Engine (MSE).', example='mse_basic'),
    netType?: string(name='NetType', description='The network type of the instance. Valid values:

*   `privatenet`: VPC
*   `pubnet`: Internet', example='privatenet'),
    orderClusterVersion?: string(name='OrderClusterVersion', description='The version number of the original order.', example='1.2.0'),
    payInfo?: string(name='PayInfo', description='The billing method, such as subscription or pay-as-you-go.', example='Pay-as-you-go'),
    pubNetworkFlow?: string(name='PubNetworkFlow', description='The public bandwidth. Unit: Mbit/s.\\
Valid values: 0 to 5000. The value 0 indicates no access to the Internet.', example='3'),
    regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-aek2dhgysj*****'),
    tags?: map[string]any(name='Tags', description='The tags that are attached to the instance.'),
    vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-xxx-xxxx'),
    vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC).', example='vpc-bp1hcg467ekqsv0zr****'),
  }(name='Data', description='The details of the data.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9515ACA4-E94D-440D-989E-C379FCED****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model QueryClusterDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryClusterDetailResponseBody(name='body'),
}

async function queryClusterDetail(request: QueryClusterDetailRequest): QueryClusterDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryClusterDetail', 'POST', '/', 'json', false, 'json', request);
}

model QueryClusterDiskSpecificationRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  clusterType?: string(name='ClusterType', description='The type of the instance. Valid values: ZooKeeper, Nacos-Ans, and Eureka.', example='ZooKeeper', position='Query'),
}

model QueryClusterDiskSpecificationResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: {
    max?: int32(name='Max', description='The maximum disk capacity. Unit: GB.', example='500'),
    min?: int32(name='Min', description='The minimum disk capacity. Unit: GB.', example='1'),
    step?: int32(name='Step', description='The step size of the disk capacity.', example='2'),
  }(name='Data', description='The details of the data.'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the \\*\\*%s\\*\\* variable in the **ErrMessage** parameter.

>  If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E13A3A34-7201-50C4-B2D0-0D7DB891811E'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='True'),
}

model QueryClusterDiskSpecificationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryClusterDiskSpecificationResponseBody(name='body'),
}

async function queryClusterDiskSpecification(request: QueryClusterDiskSpecificationRequest): QueryClusterDiskSpecificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryClusterDiskSpecification', 'POST', '/', 'json', false, 'json', request);
}

model QueryClusterInfoRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  aclSwitch?: boolean(name='AclSwitch', description='Specifies whether to query the configuration of a public IP address whitelist.', example='false', position='Query'),
  clusterId?: string(name='ClusterId', description='The ID of the instance.', example='mse-09k1q11****', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse_prepaid_public_cn-7mz2t63ci03', position='Query'),
  orderId?: string(name='OrderId', description='The ID of the order.', example='20574710974****', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}', position='Query'),
}

model QueryClusterInfoResponseBody = {
  data?: {
    aclEntryList?: string(name='AclEntryList', description='The public IP address whitelist.', example='["127.0.0.0/32"]'),
    aclId?: string(name='AclId', description='The ID of the instance in the public IP address whitelist.', example='acl-bp144q24cgqvzckmxxxx'),
    appVersion?: string(name='AppVersion', description='The version of the instance.', example='2.1.0'),
    canUpdate?: boolean(name='CanUpdate'),
    chargeType?: string(name='ChargeType', description='The billing method, such as subscription or pay-as-you-go.', example='POSTPAY'),
    clusterAliasName?: string(name='ClusterAliasName', description='The alias of the instance.', example='Development environment'),
    clusterName?: string(name='ClusterName', description='The full name of the instance.', example='mse-74355150-xxxxxxx'),
    clusterSpecification?: string(name='ClusterSpecification', description='The engine specifications.', example='MSE_SC_2_4_60_c'),
    clusterType?: string(name='ClusterType', description='The type of the instance. Valid values: ZooKeeper, Nacos-Ans, and Eureka.', example='Nacos-Ans'),
    clusterVersion?: string(name='ClusterVersion', description='The version of the order.', example='NACOS_2_0_0'),
    connectionType?: string(name='ConnectionType', description='A deprecated parameter.', example='null'),
    cpu?: int32(name='Cpu', description='A deprecated parameter.', example='null'),
    createTime?: string(name='CreateTime', description='The time when the instance was created.', example='2022-12-15 10:02:07'),
    diskCapacity?: long(name='DiskCapacity', description='A deprecated parameter.', example='null'),
    diskType?: string(name='DiskType', description='A deprecated parameter.', example='null'),
    eipInstanceId?: string(name='EipInstanceId', description='The ID of the instance that is associated with the Elastic IP Address (EIP).', example='eip-bp1uujshd5funmyy8rcl9'),
    endDate?: string(name='EndDate', description='The time when the subscription instance expires.', example='2021-08-01 00:00:00'),
    expectZones?: [ string ](name='ExpectZones', description='The zones to which the current cluster can be distributed.'),
    healthStatus?: string(name='HealthStatus', description='The status of the instance.', example='INIT_SUCCESS'),
    initCostTime?: long(name='InitCostTime', description='The time that is required to initialize the instance. Unit: milliseconds.', example='53353'),
    initStatus?: string(name='InitStatus', description='The initial status of the instance.', example='INIT_SUCCESS'),
    instanceCount?: int32(name='InstanceCount', description='The number of instance nodes.', example='3'),
    instanceId?: string(name='InstanceId', description='The ID of the instance', example='mse-cn-st21ri2****'),
    instanceModels?: [ 
      {
        creationTimestamp?: string(name='CreationTimestamp', description='A reserved parameter.', example='null'),
        healthStatus?: string(name='HealthStatus', description='A reserved parameter.', example='null'),
        internetIp?: string(name='InternetIp', description='A reserved parameter.', example='null'),
        ip?: string(name='Ip', description='A reserved parameter.', example='null'),
        podName?: string(name='PodName', description='A reserved parameter.', example='null'),
        role?: string(name='Role', description='A reserved parameter.', example='null'),
        singleTunnelVip?: string(name='SingleTunnelVip', description='A reserved parameter.', example='null'),
        zone?: string(name='Zone', description='A reserved parameter.', example='null'),
      }
    ](name='InstanceModels', description='The reserved structure.'),
    internetAddress?: string(name='InternetAddress', description='A reserved parameter.', example='null'),
    internetDomain?: string(name='InternetDomain', description='The public endpoint.', example='mse-xxxxxx-p.nacos-ans.mse.aliyuncs.com'),
    internetPort?: string(name='InternetPort', description='The instance ports that are accessible over the Internet.', example='8848,6443,9848,8761'),
    intranetAddress?: string(name='IntranetAddress', description='A reserved parameter.', example='null'),
    intranetDomain?: string(name='IntranetDomain', description='The internal endpoint.', example='mse-xxxxx-nacos-ans.mse.aliyuncs.com'),
    intranetPort?: string(name='IntranetPort', description='The instance ports that are accessible over an internal network.', example='8848,6443,9848,8761'),
    maintenancePeriod?: {
      endTime?: string(name='EndTime', description='The start time of the O\\&M time window.', example='02:00'),
      startTime?: string(name='StartTime', description='The end time of the O\\&M time window.', example='06:00'),
    }(name='MaintenancePeriod', description='The O\\&M time window.'),
    memoryCapacity?: long(name='MemoryCapacity', description='A deprecated parameter.', example='null'),
    mseVersion?: string(name='MseVersion', description='The version of the instance.', example='mse_pro'),
    netType?: string(name='NetType', description='The network connection type of the instance.', example='privatenet'),
    payInfo?: string(name='PayInfo', description='The billing method.', example='Pay-as-you-go'),
    pubNetworkFlow?: string(name='PubNetworkFlow', description='The public bandwidth. Unit: Mbit/s.\\
Valid values: 0 to 5000. The value 0 indicates no access to the Internet.', example='1'),
    regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
    securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group to which the elastic network interface (ENI) is connected.', example='sg-uf6hgwe067prhg68agfa'),
    securityGroupType?: string(name='SecurityGroupType', description='The type of the security group to which the ENI is connected.', example='enterprise'),
    tags?: map[string]any(name='Tags', description='The tag.'),
    vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-bp1egfakxxxxx'),
    versionCode?: string(name='VersionCode'),
    vpcId?: string(name='VpcId', description='The ID of the VPC where the instance resides.', example='vpc-bp1v5nbauzh8xxxxxxx'),
  }(name='Data', description='The details of the data.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  message?: string(name='Message', description='The message returned.

*   If the request is successful, a success message is returned.
*   If the request fails, an error message is returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='415088B3-A7BE-56F6-9CD9-C42DE895CD41'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model QueryClusterInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryClusterInfoResponseBody(name='body'),
}

async function queryClusterInfo(request: QueryClusterInfoRequest): QueryClusterInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryClusterInfo', 'POST', '/', 'json', false, 'json', request);
}

model QueryClusterSpecificationRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  connectType?: string(name='ConnectType', description='The network type. Valid values:

*   slb
*   eni', example='slb', position='Query'),
  mseVersion?: string(name='MseVersion', description='The edition of the MSE instance that you want to purchase.

*   mse_pro: Professional Edition
*   mse_dev: Developer Edition', example='mse_pro', position='Query'),
}

model QueryClusterSpecificationResponseBody = {
  code?: int32(name='Code', description='The return value.', example='200'),
  data?: [ 
    {
      clusterSpecificationName?: string(name='ClusterSpecificationName', description='The engine specifications that can be used.', example='MSE_SC_1_2_200_c'),
      cpuCapacity?: string(name='CpuCapacity', description='The number of vCPUs in the specifications.', example='1'),
      memoryCapacity?: string(name='MemoryCapacity', description='The memory size in the specifications. Unit: GB.', example='2'),
    }
  ](name='Data', description='The details of the data.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request was successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EE5C32A1-BC0E-4B79-817C-103E4EDF****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model QueryClusterSpecificationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryClusterSpecificationResponseBody(name='body'),
}

async function queryClusterSpecification(request: QueryClusterSpecificationRequest): QueryClusterSpecificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryClusterSpecification', 'POST', '/', 'json', false, 'json', request);
}

model QueryConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='mse-09k1q11****', position='Query'),
  configType?: string(name='ConfigType', description='A reserved parameter.', example='null', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse_prepaid_public_cn-st2212****', position='Query'),
  needRunningConf?: boolean(name='NeedRunningConf', description='Specifies whether runtime configurations are required.', example='true', position='Query'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}', position='Query'),
}

model QueryConfigResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: {
    autopurgePurgeInterval?: string(name='AutopurgePurgeInterval', description='A reserved parameter.', example='none'),
    autopurgeSnapRetainCount?: string(name='AutopurgeSnapRetainCount', description='A reserved parameter.', example='none'),
    clusterName?: string(name='ClusterName', description='The name of the instance.', example='name'),
    configAuthEnabled?: boolean(name='ConfigAuthEnabled', description='Indicates whether RAM authentication of a configuration center is enabled. This parameter is valid for Nacos instances. Valid values:

*   `true`: enabled.
*   `false`: disabled.', example='true'),
    configAuthSupported?: boolean(name='ConfigAuthSupported', description='Indicates whether RAM authentication is supported by a configuration center of the instance. This parameter is valid for Nacos instances. Valid values:

*   `true`: supported.
*   `false`: not supported.', example='true'),
    configContentLimit?: long(name='ConfigContentLimit', description='The maximum size of contents in a configuration. Unit: KB.', example='100'),
    configSecretEnabled?: boolean(name='ConfigSecretEnabled', description='Indicates whether configuration encryption of a configuration center is enabled by the instance. This parameter is valid for Nacos instances. Valid values:

*   `true`: enabled.
*   `false`: disabled.', example='true'),
    configSecretSupported?: boolean(name='ConfigSecretSupported', description='Indicates whether configuration encryption of a configuration center is supported by the instance. This parameter is valid for Nacos instances. Valid values:

*   `true`: supported.
*   `false`: not supported.', example='true'),
    consoleUIEnabled?: boolean(name='ConsoleUIEnabled', description='Indicates whether the Nacos open source console is enabled.', example='true'),
    eurekaSupported?: boolean(name='EurekaSupported', description='Indicates whether access port 8761 was enabled for Eureka. If this port is disabled, applications cannot use the Eureka protocol for service registration and discovery.', example='true'),
    extendedTypesEnable?: boolean(name='ExtendedTypesEnable', description='Indicates whether the time to live (TTL) configuration is enabled. This parameter is valid for ZooKeeper instances.', example='true'),
    initLimit?: string(name='InitLimit', description='The maximum connection duration of the instance. Unit: seconds. This parameter is valid for ZooKeeper instances.', example='100'),
    juteMaxbuffer?: string(name='JuteMaxbuffer', description='The maximum amount of data on each node. This parameter is valid for ZooKeeper instances. Unit: bytes.', example='1'),
    jvmFlagsCustom?: string(name='JvmFlagsCustom', description='A reserved parameter.', example='none'),
    MCPEnabled?: boolean(name='MCPEnabled', description='Indicates whether Mesh Configuration Protocol (MCP) is enabled. This parameter is valid for Nacos instances. Valid values:

*   `true`: enabled.
*   `false`: disabled.', example='true'),
    MCPSupported?: boolean(name='MCPSupported', description='Indicates whether MCP is supported. This parameter is valid for Nacos instances. Valid values:

*   `true`: supported.
*   `false`: not supported.', example='true'),
    maxClientCnxns?: string(name='MaxClientCnxns', description='The number of connections between a client and a server. This parameter is valid for ZooKeeper instances.\\
If this parameter is set to 0, no limits are imposed on the number of connections.', example='0'),
    maxSessionTimeout?: string(name='MaxSessionTimeout', description='The maximum timeout period. This parameter is valid for ZooKeeper instances.', example='-1'),
    minSessionTimeout?: string(name='MinSessionTimeout', description='The minimum timeout period. This parameter is valid for ZooKeeper instances.', example='-1'),
    nacosRunningEnv?: {
      emptyProtect?: boolean(name='emptyProtect', description='Indicates whether empty list protection is enabled.', example='true'),
    }(name='NacosRunningEnv', description='The runtime configuration of the Nacos instance.'),
    namingAuthEnabled?: boolean(name='NamingAuthEnabled', description='Indicates whether RAM authentication of a registry is enabled. This parameter is valid for Nacos instances. Valid values:

*   `true`: enabled.
*   `false`: disabled.', example='false'),
    namingAuthSupported?: boolean(name='NamingAuthSupported', description='Indicates whether RAM authentication of services is supported by the instance. This parameter is valid for Nacos instances. Valid values:

*   `true`: supported.
*   `false`: not supported.', example='true'),
    namingCreateServiceSupported?: boolean(name='NamingCreateServiceSupported', description='Indicates whether service creation is supported for the instance. This parameter is valid for Nacos instances. Valid values:

*   `true`: supported.
*   `false`: not supported.', example='true'),
    openSuperAcl?: boolean(name='OpenSuperAcl', description='Indicates whether super permissions are enabled. This parameter is valid for ZooKeeper instances. Valid values:

*   `true`: enabled.
*   `false`: disabled.', example='true'),
    passWord?: string(name='PassWord', description='The password that corresponds to the username. This parameter is valid only if OpenSuperAcl is set to true.', example='password'),
    restartFlag?: boolean(name='RestartFlag', description='Indicates whether the instance was restarted and new configurations have taken effect. Valid values:

*   `true`: The restart was successful.
*   `false`: The restart failed.', example='true'),
    snapshotCount?: string(name='SnapshotCount', description='The frequency for generating snapshots. This parameter is valid for ZooKeeper instances.', example='100000'),
    syncLimit?: string(name='SyncLimit', description='The connection timeout period of the instance. This parameter is valid for ZooKeeper instances. Unit: seconds.', example='10'),
    TLSEnabled?: boolean(name='TLSEnabled', description='MSE Nacos supports TLS transmission link encryption since version 2.1.2.1. Nacos clients must be upgraded to version 2.2.1 or later. After TLS is enabled, the system performance will decrease by about 10%. You must evaluate the system capacity. For more information about the relevant operations, see Nacos TLS transmission encryption.', example='true'),
    tickTime?: string(name='TickTime', description='The time unit of the engine. This parameter is valid for ZooKeeper instances. Default value: 2000. Unit: milliseconds.', example='2000'),
    userName?: string(name='UserName', description='The username of the user. This parameter is valid only if OpenSuperAcl is set to true.', example='name'),
  }(name='Data', description='The details of the data.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request was successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8BD1E58D-0755-42AC-A599-E6B55112EC53'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model QueryConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryConfigResponseBody(name='body'),
}

async function queryConfig(request: QueryConfigRequest): QueryConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryConfig', 'POST', '/', 'json', false, 'json', request);
}

model QueryGatewayRegionRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
}

model QueryGatewayRegionResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: [ string ](name='Data', description='The returned data.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9e78a671-4b9b-4dd4-99c1-0b9da87d3dec'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model QueryGatewayRegionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryGatewayRegionResponseBody(name='body'),
}

async function queryGatewayRegion(request: QueryGatewayRegionRequest): QueryGatewayRegionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryGatewayRegion', 'POST', '/', 'json', false, 'json', request);
}

model QueryGatewayTypeRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
}

model QueryGatewayTypeResponseBody = {
  code?: int32(name='Code', description='The status code returned. The value 200 indicates that the request was successful. Other values indicate that the request failed.', example='200'),
  data?: [ string ](name='Data', description='The information about the gateway type. The data type of this parameter is List.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned. If the request is successful, a success message is returned. If the request fails, an error message is returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='52BA6DA6-A702-4362-A32F-DFF79655****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model QueryGatewayTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryGatewayTypeResponseBody(name='body'),
}

async function queryGatewayType(request: QueryGatewayTypeRequest): QueryGatewayTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryGatewayType', 'POST', '/', 'json', false, 'json', request);
}

model QueryGovernanceKubernetesClusterRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  clusterId?: string(name='ClusterId', description='The ID of the Kubernetes cluster.', example='c24c9354acxxxxxxx', position='Query'),
  clusterName?: string(name='ClusterName', description='The name of the Kubernetes cluster.', example='example-cluster', position='Query'),
  pageNumber: int32(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='The number of entries to return on each page.', example='10', minimum=5, maximum=100, position='Query'),
}

model QueryGovernanceKubernetesClusterResponseBody = {
  data?: {
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    result?: [ 
      {
        clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='abcdef123456789'),
        clusterName?: string(name='ClusterName', description='The name of the cluster.', example='example-cluster'),
        k8sVersion?: string(name='K8sVersion', description='The version of the cluster.', example='1.22'),
        namespaceInfos?: string(name='NamespaceInfos', description='The information about the namespace.', example='[{"Name":"ack-onepilot","Tags":{"name":"ack-onepilot"}}]'),
        pilotStartTime?: string(name='PilotStartTime', description='The time when the pilot component was started.', example='2022-05-17T05:39:43.000+0000'),
        region?: string(name='Region', description='The region where the cluster resides.', example='cn-shanghai'),
      }
    ](name='Result', description='The details of the data.'),
    totalSize?: int32(name='TotalSize', description='The total number of clusters.', example='3'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DE34D413-2B79-5E77-9696-36D875E822AD'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model QueryGovernanceKubernetesClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryGovernanceKubernetesClusterResponseBody(name='body'),
}

async function queryGovernanceKubernetesCluster(request: QueryGovernanceKubernetesClusterRequest): QueryGovernanceKubernetesClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryGovernanceKubernetesCluster', 'GET', '/', 'json', false, 'json', request);
}

model QueryInstancesInfoRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='mse-09k1q11****', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse_prepaid_public_cn-tl32g1u9k01', position='Query'),
  orderId?: string(name='OrderId', description='The ID of the order.', example='20574710974****', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the instance resides.', example='cn-hangzhou', position='Query'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}', position='Query'),
}

model QueryInstancesInfoResponseBody = {
  data?: [ 
    {
      clientPort?: string(name='ClientPort', description='The enabled port.', example='8848'),
      creationTimestamp?: string(name='CreationTimestamp', description='The creation time.', example='2022-12-15T02:02:15Z'),
      healthStatus?: string(name='HealthStatus', description='A reserved parameter.', example='null'),
      internetIp?: string(name='InternetIp', description='The public IP address.', example='120.55.71.x'),
      ip?: string(name='Ip', description='The IP address of the pod.', example='25.24.91.x'),
      podName?: string(name='PodName', description='The pod name.', example='mse-xxxxx-xxxxx-reg-center-0-1'),
      role?: string(name='Role', description='A reserved parameter.', example='null'),
      singleTunnelVip?: string(name='SingleTunnelVip', description='The internal IP address.', example='172.16.66.x'),
      zone?: string(name='Zone', description='The zone ID.', example='cn-hangzhou-k'),
      zoneDistributed?: boolean(name='ZoneDistributed', description='Indicates whether all pods in the cluster are distributed in the specified zones.', example='true'),
    }
  ](name='Data', description='The details of the data.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code.', example='202'),
  message?: string(name='Message', description='The message that is returned.

*   If the request is successful, a success message is returned.
*   If the request fails, an error message is returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='54973C90-F379-4372-9AA5-053A3F7****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model QueryInstancesInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryInstancesInfoResponseBody(name='body'),
}

async function queryInstancesInfo(request: QueryInstancesInfoRequest): QueryInstancesInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryInstancesInfo', 'POST', '/', 'json', false, 'json', request);
}

model QueryMonitorRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  endTime: long(name='EndTime', description='The timestamp when the monitoring ends.', example='1666678376', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-****', position='Query'),
  monitorType: string(name='MonitorType', description='The metric type. The following metric types are supported:

\\[Basic system metrics]

*   cpuUsage
*   memoryUsage
*   diskUsage
*   gcCount
*   gcTime

\\[Nacos registry]

*   serviceCount
*   writeCostTime
*   readCostTime
*   TPS regCenterTps
*   QPS regCenterQps

\\[Nacos configuration center]

*   publish
*   getConfig

\\[zookeeper]

*   TPS zk_TpsCount
*   QPS zk_QpsCount
*   zookeeper_AvgRequestLatency', example='regCenterQps', position='Query'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}', position='Query'),
  startTime: long(name='StartTime', description='The timestamp when the monitoring starts.', example='1666678376', position='Query'),
  step?: long(name='Step', description='The interval between data points. Unit: seconds.', example='7', position='Query'),
}

model QueryMonitorResponseBody = {
  data?: [ 
    {
      clusterNamePrefix?: string(name='clusterNamePrefix', description='The prefix of the name.', example='mse-xxxx-xxxxxx'),
      podName?: string(name='podName', description='The name of the pod.', example='mse-xxxxxx-xxxxxx-reg-center-0-0'),
      values?: [  map[string]any ](name='values', description='The details of the data.'),
    }
  ](name='Data', description='The details of the data.', example='6'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  message?: string(name='Message', description='The message returned.', example='The request was successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ADDD8AB7-8D1C-4697-A83E-410D2607****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model QueryMonitorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMonitorResponseBody(name='body'),
}

async function queryMonitor(request: QueryMonitorRequest): QueryMonitorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMonitor', 'POST', '/', 'json', false, 'json', request);
}

model QueryNamespaceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values: zh and en. Default value: zh. The value zh which indicates Chinese, and the value en indicates English.', example='zh', position='Query'),
  name?: string(name='Name', example='default', maxLength=64, position='Query'),
  region: string(name='Region', example='cn-hangzhou', position='Query'),
}

model QueryNamespaceResponseBody = {
  data?: [ 
    {
      namespace?: string(name='Namespace', description='The name of the namespace.', example='default'),
      region?: string(name='Region', description='The region to which the namespace belongs.', example='cn-hangzhou'),
    }
  ](name='Data', description='The data returned.'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='Success'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='abcde-fg'),
  success?: boolean(name='Success', example='true'),
}

model QueryNamespaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryNamespaceResponseBody(name='body'),
}

async function queryNamespace(request: QueryNamespaceRequest): QueryNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryNamespace', 'POST', '/', 'json', false, 'json', request);
}

model QuerySlbSpecRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
}

model QuerySlbSpecResponseBody = {
  code?: int32(name='Code', description='The return value.', example='200'),
  data?: [ 
    {
      id?: int32(name='Id', description='The ID of the returned data.', example='2'),
      maxConnection?: string(name='MaxConnection', description='The maximum number of connections.', example='50,000'),
      name?: string(name='Name', description='The name of the instance.', example='Standard I'),
      newConnectionPerSecond?: string(name='NewConnectionPerSecond', description='The number of connections per second.', example='50,000'),
      qps?: string(name='Qps', description='The number of queries per second (QPS).', example='50,000'),
      spec?: string(name='Spec', description='The specification of the instance.', example='slb.s2.small'),
    }
  ](name='Data', description='The data entries returned.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned. If the request is successful, a success message is returned. If the request fails, an error message is returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model QuerySlbSpecResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySlbSpecResponseBody(name='body'),
}

async function querySlbSpec(request: QuerySlbSpecRequest): QuerySlbSpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySlbSpec', 'GET', '/', 'json', false, 'json', request);
}

model QuerySwimmingLaneByIdRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  laneId: long(name='LaneId', description='The ID of the lane.', example='250', position='Query'),
  namespace?: string(name='Namespace', description='The name of the Microservices Engine (MSE) namespace.', example='default', maxLength=64, position='Query'),
}

model QuerySwimmingLaneByIdResponseBody = {
  data?: {
    enable?: boolean(name='enable'),
    enableRules?: boolean(name='enableRules'),
    entryRule?: string(name='entryRule'),
    entryRules?: [ 
      {
        condition?: string(name='condition'),
        path?: string(name='path'),
        paths?: [ string ](name='paths'),
        restItems?: [ 
          {
            cond?: string(name='cond'),
            datum?: string(name='datum'),
            divisor?: int32(name='divisor'),
            name?: string(name='name'),
            nameList?: [ string ](name='nameList'),
            operator?: string(name='operator'),
            rate?: int32(name='rate'),
            remainder?: int32(name='remainder'),
            type?: string(name='type'),
            value?: string(name='value'),
          }
        ](name='restItems'),
      }
    ](name='entryRules'),
    gatewaySwimmingLaneRouteJson?: string(name='gatewaySwimmingLaneRouteJson'),
    gmtCreate?: string(name='gmtCreate'),
    gmtModified?: string(name='gmtModified'),
    groupId?: long(name='groupId'),
    id?: long(name='id'),
    name?: string(name='name'),
    regionId?: string(name='regionId'),
    status?: int32(name='status'),
    tag?: string(name='tag'),
  }(name='Data', description='The details of the data.', example='{id:102,name:"test"}'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='mse-100-000'),
  message?: string(name='Message', description='The returned message.', example='The request was successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='69AD2AA7-DB47-449B-941B-B14409DF****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model QuerySwimmingLaneByIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySwimmingLaneByIdResponseBody(name='body'),
}

async function querySwimmingLaneById(request: QuerySwimmingLaneByIdRequest): QuerySwimmingLaneByIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySwimmingLaneById', 'POST', '/', 'json', false, 'json', request);
}

model QueryZnodeDetailRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='mse-09k1q11****', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-5bffa4e8630', position='Query'),
  path: string(name='Path', description='The path of the node.', example='/zookeeper', position='Query'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}', position='Query'),
}

model QueryZnodeDetailResponseBody = {
  data?: {
    data?: string(name='Data', description='The data of the node.', example='cluster'),
    dir?: boolean(name='Dir', description='Indicates whether the node information was returned. Valid values:

*   `true`: The node information was returned.
*   `false`: The node information failed to be returned.', example='true'),
    name?: string(name='Name', description='The name of the node.', example='zookeeper'),
    path?: string(name='Path', description='The path of the node.', example='/zookeeper'),
  }(name='Data', description='The details of the data.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='58E06A0A-BD2C-47A0-99C2-B100F353****'),
  success?: string(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model QueryZnodeDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryZnodeDetailResponseBody(name='body'),
}

async function queryZnodeDetail(request: QueryZnodeDetailRequest): QueryZnodeDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryZnodeDetail', 'GET', '/', 'json', false, 'json', request);
}

model RemoveApplicationRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh', position='Query'),
  appId?: string(name='AppId', example='abcde@12345', position='Query'),
  appName?: string(name='AppName', example='example-app', position='Query'),
  namespace?: string(name='Namespace', example='prod', maxLength=64, position='Query'),
  region?: string(name='Region', example='cn-hangzhou', position='Query'),
}

model RemoveApplicationResponseBody = {
  data?: string(name='Data', example='success'),
  errorCode?: string(name='ErrorCode', example='NoPermission'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='abcde-12345'),
  success?: boolean(name='Success', example='true'),
}

model RemoveApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveApplicationResponseBody(name='body'),
}

async function removeApplication(request: RemoveApplicationRequest): RemoveApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveApplication', 'POST', '/', 'json', false, 'json', request);
}

model RemoveAuthPolicyRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh', position='Query'),
  policyId: string(name='PolicyId', example='259', position='Query'),
}

model RemoveAuthPolicyResponseBody = {
  code?: int32(name='Code', example='500'),
  data?: string(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='9515ACA4-E94D-440D-989E-C379FCED****'),
  success?: boolean(name='Success', example='True'),
}

model RemoveAuthPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveAuthPolicyResponseBody(name='body'),
}

async function removeAuthPolicy(request: RemoveAuthPolicyRequest): RemoveAuthPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveAuthPolicy', 'POST', '/', 'json', false, 'json', request);
}

model RestartClusterRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='mse-09k1q11****', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-78v1l83****', position='Query'),
  podNameList?: string(name='PodNameList', description='The names of pods. You can specify the names of multiple pods at a time. Separate multiple pod names with commas (,). Example: mse-a8aba010-1629719288255-reg-center-0-1,mse-a8aba010-1629719288255-reg-center-0-2.

The specified pods must belong to the current cluster and be associated with the specified instance. Otherwise, a restart exception occurs.', example='mse-a8aba010-1629719288255-reg-center-0-1', position='Query'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}', position='Query'),
}

model RestartClusterResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5B170A0D-2C5D-4CF8-B808-03966B86****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model RestartClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RestartClusterResponseBody(name='body'),
}

async function restartCluster(request: RestartClusterRequest): RestartClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RestartCluster', 'POST', '/', 'json', false, 'json', request);
}

model RetryClusterRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-st21ri2****', position='Query'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}', position='Query'),
}

model RetryClusterResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='NoPermission'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DC34E4A3-5F1C-4E40-86EA-02EDF967****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model RetryClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RetryClusterResponseBody(name='body'),
}

async function retryCluster(request: RetryClusterRequest): RetryClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RetryCluster', 'POST', '/', 'json', false, 'json', request);
}

model SelectGatewaySlbRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-492af9b04bb4474cae9d645be850****', position='Query'),
  name?: string(name='Name', description='The name of the SLB instance.', example='test-slb', position='Query'),
  type?: string(name='Type', description='The type of the SLB instance.', example='PUB_NET', position='Query'),
}

model SelectGatewaySlbResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: [ 
    {
      slbId?: string(name='SlbId', description='The ID of the SLB instance.', example='lb-bp14lqiw5n96hq2****'),
      slbName?: string(name='SlbName', description='The name of the SLB instance.', example='MseGatewaySlb-gw'),
    }
  ](name='Data', description='The data structure.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E00C6D90-A28A-5813-8981-0459AA436F46'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model SelectGatewaySlbResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SelectGatewaySlbResponseBody(name='body'),
}

async function selectGatewaySlb(request: SelectGatewaySlbRequest): SelectGatewaySlbResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SelectGatewaySlb', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  resourceId?: [ string ](name='ResourceId', description='The instance ID.

> This parameter specifies the instance ID that is passed. Examples:

- ResourceId.0 specifies the first instance ID that is passed.
- ResourceId.1 specifies the second instance ID that is passed.', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resources. Valid values:

*   CLUSTER: Microservices Engine (MSE) instance
*   GATEWAY: cloud-native gateway', example='CLUSTER', position='Query'),
  tag: [ 
    {
      key?: string(name='Key', description='The tag key. Valid values of N: 1 to 20. The tag key cannot be an empty string. The tag key must be 1 to 128 characters in length. The tag key cannot start with acs: or aliyun or contain [http:// or https://.](http://https://。)', example='env'),
      value?: string(name='Value', description='The value of the tag.', example='prd'),
    }
  ](name='Tag', description='The list of tags. You can specify a maximum of 20 tags.', position='Query'),
}

model TagResourcesResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  message?: string(name='Message', description='The message returned.', example='The request was successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E0A79810-9396-521C-A09D-E757B3E2BAF4'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model TagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  all?: boolean(name='All', description='Specifies whether to delete all tags. This parameter takes effect only when the TagKey.N parameter is not specified. Valid values:

*   true
*   false

Default value: false.', example='true', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', description='The resource IDs. A maximum of 50 resource IDs can be specified.', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resource. Valid values:

*   CLUSTER: MSE instance
*   GATEWAY: cloud-native gateway', example='CLUSTER', position='Query'),
  tagKey?: [ string ](name='TagKey', description='The tag keys. A maximum of 20 tag keys are supported.', position='Query'),
}

model UntagResourcesResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  message?: string(name='Message', description='The message returned.', example='The request was successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='58E06A0A-BD2C-47A0-99C2-B100F353****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model UntagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAclRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  aclEntryList?: string(name='AclEntryList', description='The IP addresses or CIDR blocks in the IP address whitelist.', example='192.168.0.0/XX,192.168.0.0/XX', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-78v1l83****', position='Query'),
}

model UpdateAclResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-100'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7466566F-F30F-4A29-965D-3E0AF21D****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model UpdateAclResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAclResponseBody(name='body'),
}

async function updateAcl(request: UpdateAclRequest): UpdateAclResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAcl', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAuthPolicyRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values: zh-CN and en-US. Default value: zh-CN. The value zh-CN indicates Chinese, and the value en-US indicates English.', example='zh', position='Query'),
  appId?: string(name='AppId', description='The application ID.', example='abcde@12345', position='Query'),
  authRule?: string(name='AuthRule', description='The content of the service authentication rule.', example='[{\\"all\\":true,\\"appIds\\":[\\"f6xqzbao96@4adfaf3c92c947a\\"],\\"black\\":false}]', position='Query'),
  enable?: string(name='Enable', description='Specifies whether to enable the rule.', example='true', position='Query'),
  id: string(name='Id', description='The rule ID.', example='432', position='Query'),
  k8sNamespace?: string(name='K8sNamespace', description='The ID of the ACK cluster namespace.', example='c19c6c500e1ff4d7abc7bed9b8236***', position='Query'),
  name?: string(name='Name', description='The name of the rule.', example='demo-test', position='Query'),
  protocol?: string(name='Protocol', description='The protocol type. Valid values:

*   **SPRING_CLOUD**
*   **DUBBO**
*   **istio**', example='SPRING_CLOUD', position='Query'),
  region?: string(name='Region', description='The region ID.', example='cn-hangzhou', position='Query'),
  source?: string(name='Source', description='The source for application access.', example='edasmsc', position='Query'),
}

model UpdateAuthPolicyResponseBody = {
  code?: int32(name='Code', description='The response code.', example='500'),
  data?: string(name='Data', description='The details of the data.', example='{}'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The returned message.'),
  requestId?: string(name='RequestId', description='The request ID.', example='83E3909D-D26F-5D97-B73B-407A26***'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values: true: The request was successful. false: The request failed.', example='true'),
}

model UpdateAuthPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAuthPolicyResponseBody(name='body'),
}

async function updateAuthPolicy(request: UpdateAuthPolicyRequest): UpdateAuthPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAuthPolicy', 'POST', '/', 'json', false, 'json', request);
}

model UpdateBlackWhiteListRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  content?: string(name='Content', description='The content of the blacklist.', example='127.0.2.11', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-c70622ff52fe49beb29bea9a6f52****', position='Query'),
  id?: long(name='Id', description='The ID of the blacklist.', example='1', position='Query'),
  isWhite?: boolean(name='IsWhite', description='Specifies whether to enable the whitelist.', example='true', position='Query'),
  name?: string(name='Name', description='The name.', example='name', position='Query'),
  note?: string(name='Note', description='The description.', example='this is a note', position='Query'),
  resourceIdJsonList?: string(name='ResourceIdJsonList', description='The resource IDs in the JSON format.', example='[123]', position='Query'),
  resourceType?: string(name='ResourceType', description='The type of the resource.', example='GATEWAY', position='Query'),
  status?: string(name='Status', description='Specifies whether to enable the blacklist or whitelist.', example='on', position='Query'),
  type?: string(name='Type', description='The type of the blacklist or whitelist.', example='IP', position='Query'),
}

model UpdateBlackWhiteListResponseBody = {
  code?: int32(name='Code', description='The return value.', example='200'),
  data?: long(name='Data', description='The ID of the record.', example='13'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='AD5DEDA0-C82A-50D9-AF54-BD3576CCFB4C'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model UpdateBlackWhiteListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateBlackWhiteListResponseBody(name='body'),
}

async function updateBlackWhiteList(request: UpdateBlackWhiteListRequest): UpdateBlackWhiteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateBlackWhiteList', 'POST', '/', 'json', false, 'json', request);
}

model UpdateCircuitBreakerRuleRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values: zh-CN and en-US. Default value: zh-CN. The value zh-CN indicates Chinese, and the value en-US indicates English.', example='zh', position='Query'),
  appId?: string(name='AppId', description='The ID of the application.', example='hkhon1po62@c3df23522bXXXXX', position='Query'),
  appName: string(name='AppName', description='The name of the application.', example='spring-cloud-a', position='Query'),
  enable?: boolean(name='Enable', description='Specifies whether to enable the rule.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true', position='Query'),
  halfOpenBaseAmountPerStep?: int32(name='HalfOpenBaseAmountPerStep', description='The minimum number of requests that can be passed in each step after circuit breaking recovers. Default value: 1.', example='5', position='Query'),
  halfOpenRecoveryStepNum?: int32(name='HalfOpenRecoveryStepNum', description='The number of circuit breaking recovery steps. Default value: 1.', example='1', position='Query'),
  maxAllowedRtMs?: int32(name='MaxAllowedRtMs', description='The maximum response time (RT). Unit: milliseconds. If the RT of a request is greater than the value of this parameter, a slow call is counted. If you set Strategy to 0, you must specify this parameter.', example='200', position='Query'),
  minRequestAmount?: int32(name='MinRequestAmount', description='The minimum number of requests to trigger circuit breaking. If the number of requests in the current time window is less than the value of this parameter, circuit breaking is not triggered even if the circuit breaking rule is met. Default value: 10.', example='10', position='Query'),
  namespace: string(name='Namespace', description='The microservice namespace to which the application belongs.', example='default', position='Query'),
  retryTimeoutMs?: int32(name='RetryTimeoutMs', description='The period in which circuit breaking is implemented. Unit: milliseconds. If circuit breaking is implemented on the requests for the route, the calls to all the requests for the route fail in the configured circuit breaking period. The value must be an integral multiple of 1,000. Default value: 10000. This value indicates 10 seconds.', example='10000', position='Query'),
  ruleId: long(name='RuleId', description='The rule ID.', example='1', position='Query'),
  statIntervalMs?: int32(name='StatIntervalMs', description='The length of the time window. Unit: milliseconds. The valid range is from 1 second to 120 minutes. The default value is 20000. This value indicates 20 seconds.', example='20000', position='Query'),
  strategy?: int32(name='Strategy', description='The threshold type.

Valid values:

*   0

    <!-- -->

    :

    <!-- -->

    slow call proportion

    <!-- -->

*   1

    <!-- -->

    :

    <!-- -->

    abnormal proportion

    <!-- -->', example='0', position='Query'),
  threshold?: float(name='Threshold', description='A percentage threshold for triggering circuit breaking. Valid values: 0-1. These values represent 0% to 100%.', example='0.8', position='Query'),
}

model UpdateCircuitBreakerRuleResponseBody = {
  code?: string(name='Code', description='The response code.', example='200'),
  data?: {
    appId?: string(name='AppId', description='The ID of the application.', example='hkhon1po62@c3df23522bXXXXX'),
    appName?: string(name='AppName', description='The name of the application.', example='spring-cloud-a'),
    enable?: boolean(name='Enable', description='Indicates whether the rule is enabled.', example='true'),
    halfOpenBaseAmountPerStep?: int32(name='HalfOpenBaseAmountPerStep', description='The minimum number of requests that can be passed in each step after circuit breaking recovers.', example='5'),
    halfOpenRecoveryStepNum?: int32(name='HalfOpenRecoveryStepNum', description='The number of circuit breaking recovery steps.', example='1'),
    id?: long(name='Id', description='The ID of the rule.', example='1'),
    maxAllowedRtMs?: int32(name='MaxAllowedRtMs', description='The maximum RT. Unit: milliseconds. If the RT of a request is greater than the value of this parameter, a slow call is counted. If you set Strategy to 0, you must specify this parameter.', example='200'),
    minRequestAmount?: int32(name='MinRequestAmount', description='The minimum number of requests to trigger circuit breaking. If the number of requests in the current time window is less than the value of this parameter, circuit breaking is not triggered even if the circuit breaking rule is met.', example='10'),
    namespace?: string(name='Namespace', description='The microservice namespace to which the application belongs.', example='default'),
    resource?: string(name='Resource', description='The name of the interface to which the rule is applicable. The interface name must be the same as the name on the interface details page in the console.', example='/a'),
    retryTimeoutMs?: int32(name='RetryTimeoutMs', description='The period in which circuit breaking is implemented. Unit: milliseconds. If circuit breaking is implemented on the requests for the route, the calls to all the requests for the route fail in the configured circuit breaking period.', example='10000'),
    statIntervalMs?: int32(name='StatIntervalMs', description='The length of the time window. Unit: milliseconds. The valid range is from 1 second to 120 minutes.', example='20000'),
    strategy?: int32(name='Strategy', description='The threshold type.

Valid values:

*   0

    <!-- -->

    :

    <!-- -->

    slow call proportion

    <!-- -->

*   1

    <!-- -->

    :

    <!-- -->

    abnormal proportion

    <!-- -->', example='0'),
    threshold?: float(name='Threshold', description='A percentage threshold for triggering circuit breaking. Valid values: 0-1. These values represent 0% to 100%.', example='0.8'),
  }(name='Data', description='The details of the rule.'),
  message?: string(name='Message', description='The returned message.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='EE5C32A1-BC0E-4B79-817C-103E4EDF****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.

Valid values:

*   true

    <!-- -->

    :

    <!-- -->

    The request was successful.

    <!-- -->

*   false

    <!-- -->

    :

    <!-- -->

    The request failed.

    <!-- -->', example='true'),
}

model UpdateCircuitBreakerRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateCircuitBreakerRuleResponseBody(name='body'),
}

async function updateCircuitBreakerRule(request: UpdateCircuitBreakerRuleRequest): UpdateCircuitBreakerRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCircuitBreakerRule', 'POST', '/', 'json', false, 'json', request);
}

model UpdateClusterRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  clusterAliasName?: string(name='ClusterAliasName', description='The alias of the instance.', example='cluster-1', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-78v1l83****', position='Query'),
  maintenanceEndTime?: string(name='MaintenanceEndTime', description='The end time of the O\\&M window.', example='06:00', position='Query'),
  maintenanceStartTime?: string(name='MaintenanceStartTime', description='The start time of the O\\&M window.', example='02:00', position='Query'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}', position='Query'),
}

model UpdateClusterResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-100'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5B170A0D-2C5D-4CF8-B808-03966B86****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model UpdateClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateClusterResponseBody(name='body'),
}

async function updateCluster(request: UpdateClusterRequest): UpdateClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCluster', 'POST', '/', 'json', false, 'json', request);
}

model UpdateClusterSpecRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  autoPay?: boolean(name='AutoPay', position='Query'),
  clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='mse-09k1q11****', position='Query'),
  clusterSpecification?: string(name='ClusterSpecification', description='The destination engine specifications.', example='MSE_SC_2_4_200_c', position='Query'),
  instanceCount?: int32(name='InstanceCount', description='The number of destination nodes.', example='3', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-st21ri2****', position='Query'),
  mseVersion?: string(name='MseVersion', description='The MSE version.', example='mse_pro', position='Query'),
  pubNetworkFlow?: int32(name='PubNetworkFlow', minimum=0, position='Query'),
}

model UpdateClusterSpecResponseBody = {
  code?: int32(name='Code', description='The response code returned.', example='200'),
  data?: string(name='Data', description='A reserved parameter.', example='null'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed. Take note of the following rules:

*   The **ErrorCode** parameter is not returned if the request succeeds.
*   The **ErrorCode** parameter is returned if the request fails. For more information, see the **Error codes** section in this topic.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5B170A0D-2C5D-4CF8-B808-03966B86****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model UpdateClusterSpecResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateClusterSpecResponseBody(name='body'),
}

/**
  * You can call this operation to update the number or specifications of nodes in a pay-as-you-go MSE instance. You are charged when you add nodes or upgrade node specifications. For more information, see \\[Pricing] (`~~1806469~~`).
  *
 * @tags cluster
 */
async function updateClusterSpec(request: UpdateClusterSpecRequest): UpdateClusterSpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateClusterSpec', 'POST', '/', 'json', false, 'json', request);
}

model UpdateConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  autopurgePurgeInterval?: string(name='AutopurgePurgeInterval', description='A reserved parameter.', example='none', position='Query'),
  autopurgeSnapRetainCount?: string(name='AutopurgeSnapRetainCount', description='A reserved parameter.', example='none', position='Query'),
  clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='mse-09k1q11****', position='Query'),
  configAuthEnabled?: boolean(name='ConfigAuthEnabled', description='Specifies whether to enable Resource Access Management (RAM) authentication for a configuration center. This parameter is valid for Nacos instances. Valid values:

*   `true`: enabled.
*   `false`: disabled.

> Before you configure this parameter, you must call the QueryConfig operation to obtain the ConfigAuthSupported parameter value to check whether the instance supports the RAM authentication feature.', example='true', position='Query'),
  configSecretEnabled?: boolean(name='ConfigSecretEnabled', description='Specifies whether to enable configuration encryption for a configuration center. This parameter is valid for Nacos instances. Valid values:

*   `true`: enabled.
*   `false`: disabled.

> Before you configure this parameter, you must call the QueryConfig operation to obtain the ConfigSecretSupported parameter value to check whether the instance supports configuration encryption.', example='true', position='Query'),
  configType?: string(name='ConfigType', description='The format of the configuration. Supported formats include TEXT, JSON, XML, and HTML.', example='TEXT', position='Query'),
  consoleUIEnabled?: boolean(name='ConsoleUIEnabled', position='Query'),
  eurekaSupported?: boolean(name='EurekaSupported', example='true', position='Query'),
  extendedTypesEnable?: string(name='ExtendedTypesEnable', description='Specifies whether to enable the time to live (TTL) configuration. This parameter is valid for ZooKeeper instances.', example='true', position='Query'),
  initLimit?: string(name='InitLimit', description='The maximum connection duration of the instance. This parameter is valid for ZooKeeper instances. Unit: seconds.', example='100', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse_prepaid_public_cn-st2212****', position='Query'),
  juteMaxbuffer?: string(name='JuteMaxbuffer', description='The maximum amount of data on each node. This parameter is valid for ZooKeeper instances. The default maximum data amount on each node is 1 megabyte. Unit: bytes.', example='1048575', position='Query'),
  MCPEnabled?: boolean(name='MCPEnabled', description='Specifies whether to enable Mesh Configuration Protocol (MCP). This parameter is valid for Nacos instances. Valid values:

*   `true`: enabled.
*   `false`: disabled.

> Before you configure this parameter, you must call the QueryConfig operation to obtain the MCPSupported parameter value to check whether the instance supports MCP.', example='true', position='Query'),
  maxClientCnxns?: string(name='MaxClientCnxns', description='The number of connections between a client and a server. This parameter is valid for ZooKeeper instances.\\
If this parameter is set to 0, no limits are imposed on the number of connections.', example='0', position='Query'),
  maxSessionTimeout?: string(name='MaxSessionTimeout', description='The maximum timeout period. This parameter is valid for ZooKeeper instances. Unit: seconds.', example='1000', position='Query'),
  minSessionTimeout?: string(name='MinSessionTimeout', description='The minimum timeout period. This parameter is valid for ZooKeeper instances. Unit: seconds.', example='10', position='Query'),
  namingAuthEnabled?: boolean(name='NamingAuthEnabled', description='Specifies whether to enable RAM authentication for a registry. This parameter is valid for Nacos instances. Valid values:

*   `true`: enabled.
*   `false`: disabled.

> Before you configure this parameter, you must call the QueryConfig operation to obtain the NamingAuthSupporte parameter value to check whether the instance supports the RAM authentication feature.', example='true', position='Query'),
  openSuperAcl?: string(name='OpenSuperAcl', description='Specifies whether to enable super permissions. This parameter is valid for ZooKeeper instances. Valid values:

*   `true`: enabled
*   `false`: disabled', example='true', position='Body'),
  passWord?: string(name='PassWord', description='The password that corresponds to the username.

> You must specify this parameter if OpenSuperAcl is set to true.', example='password', position='Query'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}', position='Query'),
  snapshotCount?: string(name='SnapshotCount', description='The frequency for generating snapshots. This parameter is valid for ZooKeeper instances.', example='100000', position='Query'),
  syncLimit?: string(name='SyncLimit', description='The connection timeout period of the instance. This parameter is valid for ZooKeeper instances. Unit: seconds.', example='10', position='Query'),
  TLSEnabled?: boolean(name='TLSEnabled', example='true', position='Query'),
  tickTime?: string(name='TickTime', description='The time unit. This parameter is valid for ZooKeeper instances. Default value: 2000. Unit: milliseconds.', example='2000', position='Query'),
  userName?: string(name='UserName', description='The name of the user.

> You must specify this parameter if OpenSuperAcl is set to true.', example='name', position='Query'),
}

model UpdateConfigResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request was successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8BD1E58D-0755-42AC-A599-E6B55112****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model UpdateConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateConfigResponseBody(name='body'),
}

async function updateConfig(request: UpdateConfigRequest): UpdateConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateConfig', 'POST', '/', 'json', true, 'form', request);
}

model UpdateEngineNamespaceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='mse-09k1q11****', position='Query'),
  desc?: string(name='Desc', description='The description of the cluster.', example='public', position='Query'),
  id: string(name='Id', description='The ID of the namespace.', example='33ff74b6-d21e-4f9b-91a8-bc1ea4ef****', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-st21ri2****', position='Query'),
  name: string(name='Name', description='The name of the cluster.', example='name', position='Query'),
  serviceCount?: int32(name='ServiceCount', description='The number of active services.', example='3', position='Query'),
}

model UpdateEngineNamespaceResponseBody = {
  data?: {
    configCount?: int32(name='ConfigCount', description='The quota value.', example='1'),
    namespace?: string(name='Namespace', description='The namespace.', example='public'),
    namespaceDesc?: string(name='NamespaceDesc', description='The description of the namespace.', example='mytest'),
    namespaceShowName?: string(name='NamespaceShowName', description='The display name of the namespace.', example='mytestshowname'),
    quota?: int32(name='Quota', description='The quota of configurations.', example='1'),
    type?: int32(name='Type', description='The type of the namespace. Valid values:

*   `0`: global configuration
*   `1`: default namespace
*   `2`: custom namespace', example='1'),
  }(name='Data', description='The details of the data.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4E9FDCFE-0738-493B-B801-82BDFBCB****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model UpdateEngineNamespaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateEngineNamespaceResponseBody(name='body'),
}

async function updateEngineNamespace(request: UpdateEngineNamespaceRequest): UpdateEngineNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateEngineNamespace', 'POST', '/', 'json', false, 'json', request);
}

model UpdateFlowRuleRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  appId?: string(name='AppId', description='The application ID.', example='hkhon1po62@c3df23522******', position='Query'),
  appName: string(name='AppName', description='The application name.', example='spring-cloud-a', position='Query'),
  controlBehavior?: int32(name='ControlBehavior', description='The throttling effect.

Valid values:

*   0

    <!-- -->

    :

    <!-- -->

    fast failure

    <!-- -->

*   2

    <!-- -->

    :

    <!-- -->

    in queue

    <!-- -->', example='0', position='Query'),
  enable?: boolean(name='Enable', description='Specifies whether to enable the rule.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true', position='Query'),
  maxQueueingTimeMs?: int32(name='MaxQueueingTimeMs', description='The timeout period. Unit: milliseconds. This parameter is required when the value of ControlBehavior is set to 2.', example='500', position='Query'),
  namespace: string(name='Namespace', description='The namespace.', example='default', position='Query'),
  ruleId: long(name='RuleId', description='The rule ID.', example='13', position='Query'),
  threshold?: int32(name='Threshold', description='The throttling threshold.', example='30', position='Query'),
}

model UpdateFlowRuleResponseBody = {
  code?: string(name='Code', description='The response code.', example='200'),
  data?: {
    appId?: string(name='AppId', description='The application ID.', example='hpn9ac29kz@e31a4b871******'),
    appName?: string(name='AppName', description='The application name.', example='spring-cloud-a'),
    controlBehavior?: int32(name='ControlBehavior', description='The throttling effect.

Valid values:

*   0

    <!-- -->

    :

    <!-- -->

    fast failure

    <!-- -->

*   2

    <!-- -->

    :

    <!-- -->

    in queue

    <!-- -->', example='0'),
    enable?: boolean(name='Enable', description='Indicates whether the rule was enabled.

Valid value:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
    id?: long(name='Id', description='The rule ID.', example='12'),
    maxQueueingTimeMs?: int32(name='MaxQueueingTimeMs', description='The timeout period for queuing when the value of ControlBehavior is set to 2. Unit: milliseconds.', example='500'),
    namespace?: string(name='Namespace', description='The namespace.', example='default'),
    resource?: string(name='Resource', description='The name of the API resource.', example='/c'),
    threshold?: float(name='Threshold', description='The throttling threshold.', example='5'),
  }(name='Data', description='The data of the node.'),
  message?: string(name='Message', description='The returned message.'),
  requestId?: string(name='RequestId', description='The request ID.', example='52BA6DA6-A702-4362-A32F-DFF79655****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.

Valid values:

*   true

    <!-- -->

    :

    <!-- -->

    The request was successful.

    <!-- -->

*   false

    <!-- -->

    :

    <!-- -->

    The request failed.

    <!-- -->', example='true'),
}

model UpdateFlowRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateFlowRuleResponseBody(name='body'),
}

async function updateFlowRule(request: UpdateFlowRuleRequest): UpdateFlowRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateFlowRule', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGatewayAuthConsumerRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  description?: string(name='Description', description='The description of the consumer.', example='Description', position='Query'),
  encodeType?: string(name='EncodeType', description='The encryption type. Valid values:

*   RSA
*   OCT', example='RSA', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-90392d768a3847a7b804c505254d****', position='Query'),
  id: long(name='Id', description='The ID of the consumer.', example='63', position='Query'),
  jwks?: string(name='Jwks', description='The JWT public key. The JSON format is supported.', example='{"keys":[{"e":"AQAB","kid":"DHFbpoIUqrY8t2zpA2qXfCmr5VO5ZEr4RzHU_-envvQ","kty":"RSA","n":"xAE7eB6qugXyCAG3yhh7pkDkT65pHymX-P7KfIupjf59vsdo91bSP9C8H07pSAGQO1MV_xFj9VswgsCg4R6otmg5PV2He95lZdHtOcU5DXIg_pbhLdKXbi66GlVeK6ABZOUW3WYtnNHD-91gVuoeJT_DwtGGcp4ignkgXfkiEm4sw-4sfb4qdt5oLbyVpmW6x9cfa7vs2WTfURiCrBoUqgBo_-4WTiULmmHSGZHOjzwa8WtrtOQGsAFjIbno85jp6MnGGGZPYZbDAa_b3y5u-YpW7ypZrvD8BgtKVjgtQgZhLAGezMt0ua3DRrWnKqTZ0BJ_EyxOGuHJrLsn00fnMQ"}]}', position='Query'),
  keyName?: string(name='KeyName', description='The name of the key used for JWT-based identity authentication.', example='iss', position='Query'),
  keyValue?: string(name='KeyValue', description='The value of the key used for JWT-based identity authentication.', example='abcd', position='Query'),
  tokenName?: string(name='TokenName', description='The names of the parameters that are required to verify each token. By default, each token is prefixed with Bearer and stored in the Authorization header, such as `Authorization: Bearer <Content of a token>`.', example='Authorization', position='Query'),
  tokenPass?: boolean(name='TokenPass', description='Specifies whether to enable pass-through.', example='true', position='Query'),
  tokenPosition?: string(name='TokenPosition', description='The positions of the parameters that are required to verify each token. By default, each token is prefixed with Bearer and stored in the Authorization header, such as `Authorization: Bearer <Content of a token>`.', example='HEADER', position='Query'),
  tokenPrefix?: string(name='TokenPrefix', description='The prefixes of the parameters that are required to verify each token. By default, each token is prefixed with Bearer and stored in the Authorization header, such as `Authorization: Bearer <Content of a token>`.', example='Bearer', position='Query'),
}

model UpdateGatewayAuthConsumerResponseBody = {
  code?: int32(name='Code', description='The status code. A value of 200 is returned if the request is successful.', example='200'),
  data?: long(name='Data', description='The ID of the consumer.', example='2'),
  dynamicCode?: string(name='DynamicCode', description='The dynamic part in the error message.', example='code'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the \\*\\*%s\\*\\* variable in the **ErrMessage** parameter.

>  If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code that is returned.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EE5C32A1-BC0E-4B79-817C-103E4EDF****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model UpdateGatewayAuthConsumerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateGatewayAuthConsumerResponseBody(name='body'),
}

async function updateGatewayAuthConsumer(request: UpdateGatewayAuthConsumerRequest): UpdateGatewayAuthConsumerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGatewayAuthConsumer', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGatewayAuthConsumerResourceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  consumerId: long(name='ConsumerId', description='The gateway authentication consumer ID.', example='2', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-3f97e2989c344f35ab3fd62b19f1****', position='Query'),
  resourceList?: [ 
    {
      routeId?: long(name='RouteId', description='The route ID.', example='7816'),
      routeName?: string(name='RouteName', description='The name of the route.', example='helo'),
    }
  ](name='ResourceList', description='The gateway authentication consumer ID.', shrink='json', position='Query'),
}

model UpdateGatewayAuthConsumerResourceResponseBody = {
  code?: int32(name='Code', description='The status code. A value of 200 is returned if the request is successful.', example='200'),
  data?: boolean(name='Data', description='Indicates whether the list of the resources was updated. Valid values:

*   true: The list of the resources was updated.
*   false: The list of the resources was not updated.', example='true'),
  dynamicCode?: string(name='DynamicCode', description='The dynamic part in the error message.', example='code'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **ErrMessage** parameter.

>  If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The request ID.', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model UpdateGatewayAuthConsumerResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateGatewayAuthConsumerResourceResponseBody(name='body'),
}

async function updateGatewayAuthConsumerResource(request: UpdateGatewayAuthConsumerResourceRequest): UpdateGatewayAuthConsumerResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGatewayAuthConsumerResource', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGatewayAuthConsumerResourceStatusRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  consumerId: long(name='ConsumerId', description='The ID of the consumer.', example='2', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-2a99625886d54722be94d92e9a69****', position='Query'),
  idList: string(name='IdList', description='The list of IDs of the authorized resources that a user wants to update.', example='1,2,3,4', position='Query'),
  resourceStatus: boolean(name='ResourceStatus', description='The resource authorization status. Valid values:

*   true: enabled
*   false: disabled', example='true', position='Query'),
}

model UpdateGatewayAuthConsumerResourceStatusResponseBody = {
  code?: int32(name='Code', description='The status code. A value of 200 is returned if the request is successful.', example='200'),
  data?: boolean(name='Data', description='Indicates whether the execution was successful. Valid values:

*   true: The execution was successful.
*   false: The execution failed.', example='true'),
  dynamicCode?: string(name='DynamicCode', description='The dynamic part in the error message.', example='code'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the `%s` variable in the `ErrMessage` parameter.

>  If the return value of the `ErrMessage` parameter is `The Value of Input Parameter %s is not valid` and the return value of the `DynamicMessage` parameter is `DtsJobId`, the specified `DtsJobId` parameter is invalid.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code that is returned.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model UpdateGatewayAuthConsumerResourceStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateGatewayAuthConsumerResourceStatusResponseBody(name='body'),
}

async function updateGatewayAuthConsumerResourceStatus(request: UpdateGatewayAuthConsumerResourceStatusRequest): UpdateGatewayAuthConsumerResourceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGatewayAuthConsumerResourceStatus', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGatewayAuthConsumerStatusRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  consumerStatus: boolean(name='ConsumerStatus', description='The status of the consumer. Valid values:

*   true: The consumer is enabled.
*   false: The consumer is disabled.', example='true', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-685f661467b54f48b7b7a76605ce****', position='Query'),
  id: long(name='Id', description='The consumer ID.', example='1', position='Query'),
}

model UpdateGatewayAuthConsumerStatusResponseBody = {
  code?: int32(name='Code', description='The response code. The status code 200 indicates that the request was successful.', example='200'),
  data?: boolean(name='Data', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
  dynamicCode?: string(name='DynamicCode', description='The dynamic part in the error message.', example='code'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the \\*\\*%s\\*\\* variable in the **ErrMessage** parameter.

> If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The returned message.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The request ID.', example='56D9E600-6348-4260-B35F-583413F****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`
*   `false`', example='true'),
}

model UpdateGatewayAuthConsumerStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateGatewayAuthConsumerStatusResponseBody(name='body'),
}

async function updateGatewayAuthConsumerStatus(request: UpdateGatewayAuthConsumerStatusRequest): UpdateGatewayAuthConsumerStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGatewayAuthConsumerStatus', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGatewayCircuitBreakerRuleRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh', position='Query'),
  behaviorType: int32(name='BehaviorType', example='0', position='Query'),
  bodyEncoding?: int32(name='BodyEncoding', example='0', position='Query'),
  enable: int32(name='Enable', example='0', position='Query'),
  gatewayId?: long(name='GatewayId', example='14407', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', example='gw-c9bc5afd61014165bd58f621b491****', position='Query'),
  id: long(name='Id', example='369', position='Query'),
  maxAllowedMs?: int32(name='MaxAllowedMs', example='10', position='Query'),
  minRequestAmount: int32(name='MinRequestAmount', example='10', position='Query'),
  recoveryTimeoutSec: int32(name='RecoveryTimeoutSec', example='12', position='Query'),
  responseContentBody?: string(name='ResponseContentBody', example='text', position='Query'),
  responseRedirectUrl?: string(name='ResponseRedirectUrl', example='www.******.com', position='Query'),
  responseStatusCode?: int32(name='ResponseStatusCode', example='429', position='Query'),
  routeId: long(name='RouteId', example='645', position='Query'),
  routeName: string(name='RouteName', example='routeName', position='Query'),
  statDurationSec: int32(name='StatDurationSec', example='11', position='Query'),
  strategy: int32(name='Strategy', example='0', position='Query'),
  triggerRatio: int32(name='TriggerRatio', example='10', position='Query'),
}

model UpdateGatewayCircuitBreakerRuleResponseBody = {
  data?: {
    behaviorType?: int32(name='BehaviorType', example='0'),
    bodyEncoding?: int32(name='BodyEncoding', example='0'),
    enable?: int32(name='Enable', example='0'),
    gatewayId?: long(name='GatewayId', example='14407'),
    gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-c9bc5afd61014165bd58f621b491****'),
    id?: long(name='Id', example='369'),
    idList?: [ long ](name='IdList'),
    limitMode?: int32(name='LimitMode', example='0'),
    maxAllowedMs?: int32(name='MaxAllowedMs', example='10'),
    minRequestAmount?: int32(name='MinRequestAmount', example='10'),
    recoveryTimeoutSec?: int32(name='RecoveryTimeoutSec', example='12'),
    responseAdditionalHeaders?: string(name='ResponseAdditionalHeaders', example='key=value'),
    responseContentBody?: string(name='ResponseContentBody', example='text'),
    responseRedirectUrl?: string(name='ResponseRedirectUrl', example='www.******.com'),
    responseStatusCode?: int32(name='ResponseStatusCode', example='201'),
    routeId?: long(name='RouteId', example='645'),
    routeName?: string(name='RouteName', example='routeName'),
    statDurationSec?: int32(name='StatDurationSec', example='11'),
    strategy?: int32(name='Strategy', example='0'),
    triggerRatio?: int32(name='TriggerRatio', example='10'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='DC34E4A3-5F1C-4E40-86EA-02EDF967****'),
}

model UpdateGatewayCircuitBreakerRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateGatewayCircuitBreakerRuleResponseBody(name='body'),
}

async function updateGatewayCircuitBreakerRule(request: UpdateGatewayCircuitBreakerRuleRequest): UpdateGatewayCircuitBreakerRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGatewayCircuitBreakerRule', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGatewayDomainRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  certIdentifier?: string(name='CertIdentifier', description='The ID of the certificate.', example='6209108-cn-hangzhou', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-86575c0bc9f04ecfbacb92b8e392****', position='Query'),
  http2?: string(name='Http2', description='Specifies whether to enable `HTTP/2`.

*   `open`: `HTTP/2` is enabled.
*   `close`: `HTTP/2` is disabled.
*   `globalConfig`: Global configurations are used.', example='close', position='Query'),
  id?: long(name='Id', description='The ID of the domain name that you want to update.', example='94', position='Query'),
  mustHttps?: boolean(name='MustHttps', description='Specifies whether to forcibly use HTTPS.', example='false', position='Query'),
  protocol?: string(name='Protocol', description='The type of the protocol. Valid values:

*   HTTPS
*   HTTP', example='HTTPS', position='Query'),
  tlsMax?: string(name='TlsMax', description='The maximum version of Transport Layer Security (TLS).', example='TLS 1.3', position='Query'),
  tlsMin?: string(name='TlsMin', description='The minimum version of TLS.', example='TLS 1.0', position='Query'),
}

model UpdateGatewayDomainResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='403'),
  data?: long(name='Data', description='The returned data.', example='94'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6F6C6DE4-DB33-5791-B210-ED2E6FEFFE6F'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model UpdateGatewayDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateGatewayDomainResponseBody(name='body'),
}

async function updateGatewayDomain(request: UpdateGatewayDomainRequest): UpdateGatewayDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGatewayDomain', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGatewayFlowRuleRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh', position='Query'),
  behaviorType: int32(name='BehaviorType', example='0', position='Query'),
  bodyEncoding?: int32(name='BodyEncoding', example='0', position='Query'),
  enable: int32(name='Enable', example='0', position='Query'),
  gatewayId?: long(name='GatewayId', example='14407', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', example='gw-e2d226bba4b2445c9e29fa7f8216****', position='Query'),
  id: long(name='Id', example='549', position='Query'),
  responseContentBody?: string(name='ResponseContentBody', example='text', position='Query'),
  responseRedirectUrl?: string(name='ResponseRedirectUrl', example='www.******.com', position='Query'),
  responseStatusCode?: int32(name='ResponseStatusCode', example='429', position='Query'),
  routeId: long(name='RouteId', example='48811', position='Query'),
  routeName: string(name='RouteName', example='routeA', position='Query'),
  threshold: int32(name='Threshold', example='10', position='Query'),
}

model UpdateGatewayFlowRuleResponseBody = {
  data?: {
    behaviorType?: int32(name='BehaviorType', example='0'),
    bodyEncoding?: int32(name='BodyEncoding', example='0'),
    enable?: int32(name='Enable', example='0'),
    gatewayId?: long(name='GatewayId', example='14407'),
    gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-e2d226bba4b2445c9e29fa7f8216****'),
    id?: long(name='Id', example='549'),
    idList?: [ long ](name='IdList'),
    limitMode?: int32(name='LimitMode', example='0'),
    responseAdditionalHeaders?: string(name='ResponseAdditionalHeaders', example='key=value'),
    responseContentBody?: string(name='ResponseContentBody', example='Text'),
    responseRedirectUrl?: string(name='ResponseRedirectUrl', example='www.******.com'),
    responseStatusCode?: int32(name='ResponseStatusCode', example='429'),
    routeId?: long(name='RouteId', example='48811'),
    routeName?: string(name='RouteName', example='routeA'),
    statDurationMs?: int32(name='StatDurationMs', example='10'),
    threshold?: int32(name='Threshold', example='10'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='2B74E7F7-DF54-5AB1-B8F2-67391B83****'),
}

model UpdateGatewayFlowRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateGatewayFlowRuleResponseBody(name='body'),
}

async function updateGatewayFlowRule(request: UpdateGatewayFlowRuleRequest): UpdateGatewayFlowRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGatewayFlowRule', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGatewayIsolationRuleRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh', position='Query'),
  behaviorType: int32(name='BehaviorType', example='0', position='Query'),
  bodyEncoding?: int32(name='BodyEncoding', example='0', position='Query'),
  enable: int32(name='Enable', example='0', position='Query'),
  gatewayId?: long(name='GatewayId', example='14407', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', example='gw-e2d226bba4b2445c9e29fa7f8216****', position='Query'),
  id: long(name='Id', example='358', position='Query'),
  maxConcurrency: int32(name='MaxConcurrency', example='100', position='Query'),
  responseContentBody?: string(name='ResponseContentBody', example='text', position='Query'),
  responseRedirectUrl?: string(name='ResponseRedirectUrl', example='www.******.com', position='Query'),
  responseStatusCode?: int32(name='ResponseStatusCode', example='429', position='Query'),
  routeId: long(name='RouteId', example='52853', position='Query'),
  routeName: string(name='RouteName', example='routeName', position='Query'),
}

model UpdateGatewayIsolationRuleResponseBody = {
  data?: {
    behaviorType?: int32(name='BehaviorType', example='0'),
    bodyEncoding?: int32(name='BodyEncoding', example='0'),
    enable?: int32(name='Enable', example='0'),
    gatewayId?: long(name='GatewayId', example='14407'),
    gatewayUniqueId?: string(name='GatewayUniqueId', example='gw-e2d226bba4b2445c9e29fa7f8216****'),
    id?: long(name='Id', example='358'),
    idList?: [ long ](name='IdList'),
    limitMode?: int32(name='LimitMode', example='0'),
    maxConcurrency?: int32(name='MaxConcurrency', example='100'),
    responseAdditionalHeaders?: string(name='ResponseAdditionalHeaders', example='key=value'),
    responseContentBody?: string(name='ResponseContentBody', example='text'),
    responseRedirectUrl?: string(name='ResponseRedirectUrl', example='www.******.com'),
    responseStatusCode?: int32(name='ResponseStatusCode', example='429'),
    routeId?: long(name='RouteId', example='52853'),
    routeName?: string(name='RouteName', example='routeName'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='94B12406-E44D-57C9-BF93-A8B35BFF****'),
}

model UpdateGatewayIsolationRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateGatewayIsolationRuleResponseBody(name='body'),
}

async function updateGatewayIsolationRule(request: UpdateGatewayIsolationRuleRequest): UpdateGatewayIsolationRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGatewayIsolationRule', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGatewayNameRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-1cef54brvecdb419fb264d4f9b8c', position='Query'),
  name?: string(name='Name', description='The name of the gateway.', example='demo-test', position='Query'),
}

model UpdateGatewayNameResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: string(name='Data', description='The returned data.', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.

*   If the request is successful, a success message is returned.
*   If the request fails, an error message is returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8C95711F-E702-5395-BFAA-21BA946CDE47'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model UpdateGatewayNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateGatewayNameResponseBody(name='body'),
}

async function updateGatewayName(request: UpdateGatewayNameRequest): UpdateGatewayNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGatewayName', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGatewayOptionRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='421', position='Query'),
  gatewayOption?: GatewayOption(name='GatewayOption', description='The detailed configurations of the gateway.

*   **TraceDetails**: the sampling description of Managed Service for OpenTelemetry. Content: TraceEnabled indicates whether Managed Service for OpenTelemetry is activated. Sample indicates the sampling rate of Managed Service for OpenTelemetry.
*   **LogConfigDetails**: the description of Simple Log Service. Content: LogEnabled indicates whether Simple Log Service is activated. ProjectName indicates the Simple Log Service project to which logs are delivered. LogStoreName indicates the name of the Logstore.
*   **EnableHardwareAcceleration**: indicates whether hardware acceleration is enabled.
*   **DisableHttp2Alpn**: indicates whether the HTTP/2 protocol is disabled.
*   **EnableWaf**: indicates whether Web Application Firewall (WAF) is enabled.', shrink='json', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-83b0ddb569434f82b9fe8e4c60c4****', position='Query'),
}

model UpdateGatewayOptionResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: GatewayOption(name='Data', description='The data returned.', example='{\\"LogConfigDetails\\": {\\"LogEnabled\\": True}, \\"TraceDetails\\": {\\"Sample\\": 17, \\"TraceEnabled\\": True}}'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.

*   If the request is successful, a success message is returned.
*   If the request fails, an error message is returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='124D02EB-DBDD-534D-A701-B4A95D3D****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model UpdateGatewayOptionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateGatewayOptionResponseBody(name='body'),
}

async function updateGatewayOption(request: UpdateGatewayOptionRequest): UpdateGatewayOptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGatewayOption', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGatewayRouteRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  description?: string(name='Description', example='a route for xxx', position='Query'),
  destinationType?: string(name='DestinationType', description='The destination service type.', example='Mock', position='Query'),
  directResponseJSON?: {
    body?: string(name='Body', description='The mock return value.', example='hello'),
    code?: long(name='Code', description='The mock return code.', example='200'),
  }(name='DirectResponseJSON', description='The information about service mocking.', shrink='json', position='Query'),
  domainIdListJSON?: string(name='DomainIdListJSON', description='The associated domain name.', example='[90]', position='Query'),
  enableWaf?: boolean(name='EnableWaf', description='Specifies whether to activate Web Application Firewall (WAF).', example='false', position='Query'),
  fallback?: boolean(name='Fallback', description='Specifies whether to enable the Fallback service.', example='true', position='Query'),
  fallbackServices?: [ 
    {
      agreementType?: string(name='AgreementType', description='The type of the protocol. Valid values:', example='DUBBO'),
      groupName?: string(name='GroupName', description='The name of the group to which the service belongs.', example='test'),
      name?: string(name='Name', description='The name.', example='name'),
      namespace?: string(name='Namespace', description='The namespace in which the service resides.', example='Namespace'),
      percent?: int32(name='Percent', description='The weight in the form of a percentage value.', example='80'),
      serviceId?: long(name='ServiceId', description='The ID of the service.', example='1'),
      servicePort?: int32(name='ServicePort', description='The service port number.', example='8848'),
      sourceType?: string(name='SourceType', description='The source type.', example='MSE'),
      version?: string(name='Version', description='The version of the service.', example='v1'),
    }
  ](name='FallbackServices', description='The information about the Fallback service.', shrink='json', position='Query'),
  gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='501', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-86575c0bc9f04ecfbacb92b8e392a2c4', position='Query'),
  id?: long(name='Id', description='The ID of the route.', example='139', position='Query'),
  name?: string(name='Name', description='The name of the route.', example='route-web', deprecated='true', position='Query'),
  predicates?: {
    headerPredicates?: [ 
      {
        key?: string(name='Key', description='The key of the request header.', example='debug'),
        type?: string(name='Type', description='The matching type.', example='PRE'),
        value?: string(name='Value', description='The value of the request header.', example='on'),
      }
    ](name='HeaderPredicates', description='The information about header matching.'),
    methodPredicates?: [ string ](name='MethodPredicates', description='The information about method matching.'),
    pathPredicates?: {
      ignoreCase?: boolean(name='IgnoreCase', description='Specifies whether to perform case-insensitive matching.', example='true'),
      path?: string(name='Path', description='The path used for route matching.', example='/test'),
      type?: string(name='Type', description='The matching type.', example='PRE'),
    }(name='PathPredicates', description='The information about path matching.'),
    queryPredicates?: [ 
      {
        key?: string(name='Key', description='The name of the parameter.', example='userid'),
        type?: string(name='Type', description='The matching type.', example='PRE'),
        value?: string(name='Value', description='The value of the parameter.', example='test'),
      }
    ](name='QueryPredicates', description='The information about parameter matching.'),
  }(name='Predicates', description='The route matching conditions.', shrink='json', position='Query'),
  redirectJSON?: {
    code?: int32(name='Code', description='The status code returned.', example='302'),
    host?: string(name='Host', description='The hostname to be redirected to.', example='test.com'),
    path?: string(name='Path', description='The path to be redirected to.', example='/test'),
  }(name='RedirectJSON', description='The information about redirection.', shrink='json', position='Query'),
  routeOrder?: int32(name='RouteOrder', description='The sequence number of the route.', example='1', position='Query'),
  services?: [ 
    {
      agreementType?: string(name='AgreementType', description='The type of the protocol. Valid values:', example='DUBBO'),
      groupName?: string(name='GroupName', description='The name of the group to which the service belongs.', example='test'),
      httpDubboTranscoder?: {
        dubboServiceGroup?: string(name='DubboServiceGroup', description='The Dubbo service group.', example='service name'),
        dubboServiceName?: string(name='DubboServiceName', description='The name of the Dubbo service.', example='org.apache.dubbo.samples.basic.api.DemoService'),
        dubboServiceVersion?: string(name='DubboServiceVersion', description='The version of the Dubbo service.', example='0.0.0'),
        mothedMapList?: [ 
          {
            dubboMothedName?: string(name='DubboMothedName', description='The method name of the Dubbo service.', example='sayHello'),
            httpMothed?: string(name='HttpMothed', description='The HTTP method.

> Valid values:

*   ALL_GET

*   ALL_POST

*   ALL_PUT

*   ALL_DELETE

*   ALL_PATCH', example='ALL_GET'),
            mothedpath?: string(name='Mothedpath', description='The path that is used to match a method.', example='/mytestzbk/sayhello'),
            paramMapsList?: [ 
              {
                extractKey?: string(name='ExtractKey', description='The key extracted from the input parameter.', example='name'),
                extractKeySpec?: string(name='ExtractKeySpec', description='The position of the input parameter.

> Valid values:

*   `ALL_QUERY_PARAMETER`: request parameter

*   `ALL_HEADER`: request header

*   `ALL_PATH`: request path

*   `ALL_BODY`: request body', example='ALL_QUERY_PARAMETER'),
                mappingType?: string(name='MappingType', description='The type of the backend service parameter.', example='java.lang.String'),
              }
            ](name='ParamMapsList', description='The information of parameter mappings.'),
            passThroughAllHeaders?: string(name='PassThroughAllHeaders', description='The pass-through type of the header.

> Valid values:

*   PASS_ALL: All headers are passed through.

*   PASS_NOT: All headers are not passed through.

*   PASS_ASSIGN: Specified headers are passed through.', example='PASS_NOT'),
            passThroughList?: [ string ](name='PassThroughList', description='The list of headers to be passed through.'),
          }
        ](name='MothedMapList', description='The forwarding rules of the Dubbo service.'),
      }(name='HttpDubboTranscoder', description='The transcoder of the Dubbo protocol.'),
      name?: string(name='Name', description='The name.', example='web'),
      namespace?: string(name='Namespace', description='The namespace in which the service resides.', example='default'),
      percent?: int32(name='Percent', description='The percentage.', example='80'),
      serviceId?: long(name='ServiceId', description='The ID of the service.', example='1'),
      servicePort?: int32(name='ServicePort', description='The Dubbo port number.', example='20880'),
      sourceType?: string(name='SourceType', description='The source type.', example='MSE'),
      version?: string(name='Version', description='The version of the service.', example='v1'),
    }
  ](name='Services', description='The information about destination services.', shrink='json', position='Query'),
}

model UpdateGatewayRouteResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: long(name='Data', description='The data returned.', example='337'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='NoPermission'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='73785414-2C5B-5E28-BD91-B2C742269C48'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model UpdateGatewayRouteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateGatewayRouteResponseBody(name='body'),
}

async function updateGatewayRoute(request: UpdateGatewayRouteRequest): UpdateGatewayRouteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGatewayRoute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGatewayRouteAuthRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  authJSON: {
    type?: string(name='Type', description='The authentication type. If an empty string is passed, no authentication type is available. Valid values:

*   JWT', example='JWT'),
  }(name='AuthJSON', description='The authentication configurations.', shrink='json', position='Query'),
  gatewayId?: long(name='GatewayId', description='The gateway ID.', example='102', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-0adf3ad751284cc69fcf9669fba*****', position='Query'),
  id: long(name='Id', description='The route ID.', example='109', position='Query'),
}

model UpdateGatewayRouteAuthResponseBody = {
  code?: int32(name='Code', description='The response code. The status code 200 indicates that the request was successful.', example='200'),
  data?: long(name='Data', description='The route ID.', example='123'),
  dynamicCode?: string(name='DynamicCode', description='The dynamic part in the error message.', example='code'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message. This parameter is used to replace the \\*\\*%s\\*\\* variable in the **ErrMessage** parameter.

> If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The returned message.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The request ID.', example='54973C90-F379-4372-9AA5-053A3F7****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`
*   `false`', example='true'),
}

model UpdateGatewayRouteAuthResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateGatewayRouteAuthResponseBody(name='body'),
}

async function updateGatewayRouteAuth(request: UpdateGatewayRouteAuthRequest): UpdateGatewayRouteAuthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGatewayRouteAuth', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGatewayRouteCORSRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. In compliance with [RFC 7231](https://tools.ietf.org/html/rfc7231), the backend service must return a response based on the language used by the user.

*   No default value.
*   zh-CN: Chinese
*   en-US: English', example='zh', position='Query'),
  corsJSON?: {
    allowCredentials?: boolean(name='AllowCredentials', description='The credentials allowed.', example='true'),
    allowHeaders?: string(name='AllowHeaders', description='The request headers allowed.', example='content-type'),
    allowMethods?: string(name='AllowMethods', description='The HTTP methods allowed.', example='GET,POST'),
    allowOrigins?: string(name='AllowOrigins', description='The origins from which access is allowed.', example='https://api.aliyun-inc.com/'),
    exposeHeaders?: string(name='ExposeHeaders', description='The response headers allowed.', example='*'),
    status?: string(name='Status', description='The status of the policy.', example='off'),
    timeUnit?: string(name='TimeUnit', description='The unit of time.', example='h'),
    unitNum?: long(name='UnitNum', description='The value of time.', example='24'),
  }(name='CorsJSON', description='The information about the CORS policy.', shrink='json', position='Query'),
  gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='85', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-f70a6ddf2f0941a2bb997b2d16028f37', position='Query'),
  id?: long(name='Id', description='The ID of the associated record.', example='55', position='Query'),
}

model UpdateGatewayRouteCORSResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: long(name='Data', description='The data structure.', example='618'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='41BE990E-44E4-5ED3-AEEB-A276941B1854'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model UpdateGatewayRouteCORSResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateGatewayRouteCORSResponseBody(name='body'),
}

async function updateGatewayRouteCORS(request: UpdateGatewayRouteCORSRequest): UpdateGatewayRouteCORSResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGatewayRouteCORS', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGatewayRouteHTTPRewriteRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='430', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-90392d768a3847a7b804c505254da96d', position='Query'),
  httpRewriteJSON?: string(name='HttpRewriteJSON', description='The information about the rewrite policy. The JSON format is supported.', example='{"pathType":"PRE","path":"/","status":"off"}', position='Query'),
  id?: long(name='Id', description='The ID of the route.', example='238', position='Query'),
}

model UpdateGatewayRouteHTTPRewriteResponseBody = {
  code?: int32(name='Code', description='The return value.', example='200'),
  data?: long(name='Data', description='The returned data.', example='411'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='AE60DA1E-B234-5105-897B-68372453A5A2'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model UpdateGatewayRouteHTTPRewriteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateGatewayRouteHTTPRewriteResponseBody(name='body'),
}

async function updateGatewayRouteHTTPRewrite(request: UpdateGatewayRouteHTTPRewriteRequest): UpdateGatewayRouteHTTPRewriteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGatewayRouteHTTPRewrite', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGatewayRouteHeaderOpRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='324', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-6bdc977deda44bf589c49d063b4c2d1d', position='Query'),
  headerOpJSON?: string(name='HeaderOpJSON', description='The description of user header settings.', example='{\\"status\\":\\"on\\",\\"headerOpItems\\":[{\\"directionType\\":\\"Request\\",\\"opType\\":\\"Update\\",\\"key\\":\\"hosts\\",\\"value\\":\\"test.com\\"}]}', position='Query'),
  id?: long(name='Id', description='The ID of the record.', example='411', position='Query'),
}

model UpdateGatewayRouteHeaderOpResponseBody = {
  code?: int32(name='Code', description='The status code returned. A value of 200 indicates that the request is successful.', example='200'),
  data?: long(name='Data', description='The returned data.', example='666'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7C8CB294-BED8-5F32-A416-7517725E8F27'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model UpdateGatewayRouteHeaderOpResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateGatewayRouteHeaderOpResponseBody(name='body'),
}

async function updateGatewayRouteHeaderOp(request: UpdateGatewayRouteHeaderOpRequest): UpdateGatewayRouteHeaderOpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGatewayRouteHeaderOp', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGatewayRouteRetryRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='501', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-3f97e2989c344f35ab3fd62b19f1d10a', position='Query'),
  id?: long(name='Id', description='The ID of the associated record.', example='508', position='Query'),
  retryJSON?: {
    attempts?: int32(name='Attempts', description='The number of retries.', example='2'),
    httpCodes?: [ string ](name='HttpCodes', description='The HTTP status codes.'),
    retryOn?: [ string ](name='RetryOn', description='The retry conditions.'),
    status?: string(name='Status', description='The status of the policy.', example='off'),
  }(name='RetryJSON', description='The information about the retry policy.', shrink='json', position='Query'),
}

model UpdateGatewayRouteRetryResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: long(name='Data', description='The returned data.', example='640'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9297B27D-D932-5E9F-93B9-99D6C5F3A879'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model UpdateGatewayRouteRetryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateGatewayRouteRetryResponseBody(name='body'),
}

async function updateGatewayRouteRetry(request: UpdateGatewayRouteRetryRequest): UpdateGatewayRouteRetryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGatewayRouteRetry', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGatewayRouteTimeoutRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='85', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-533290d279c1405f9628c64f7c8272ee', position='Query'),
  id?: long(name='Id', description='The ID of the associated record.', example='567', position='Query'),
  timeoutJSON?: {
    status?: string(name='Status', description='The status of the policy.', example='off'),
    timeUnit?: string(name='TimeUnit', description='The unit of time. A value of s indicates seconds.', example='s'),
    unitNum?: int32(name='UnitNum', description='The value of the timeout period.', example='1'),
  }(name='TimeoutJSON', description='The timeout period.', shrink='json', position='Query'),
}

model UpdateGatewayRouteTimeoutResponseBody = {
  code?: int32(name='Code', description='The return value.', example='200'),
  data?: long(name='Data', description='The data of the node.', example='400'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='You are not authorized to perform this operation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5359729E-A059-5942-98AF-E981E89C99FA'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. true: The request was successful. false: The request failed.', example='true'),
}

model UpdateGatewayRouteTimeoutResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateGatewayRouteTimeoutResponseBody(name='body'),
}

async function updateGatewayRouteTimeout(request: UpdateGatewayRouteTimeoutRequest): UpdateGatewayRouteTimeoutResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGatewayRouteTimeout', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGatewayRouteWafStatusRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  enableWaf?: boolean(name='EnableWaf', description='Specifies whether to activate Web Application Firewall (WAF).', example='true', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-86575c0bc9f04ecfbacb92b8e392****', position='Query'),
  routeId?: long(name='RouteId', description='The ID of the route.', example='645', position='Query'),
}

model UpdateGatewayRouteWafStatusResponseBody = {
  code?: int32(name='Code', description='The status code returned. A value of 200 indicates that the request is successful.', example='200'),
  data?: {
    cors?: {
      allowCredentials?: boolean(name='AllowCredentials', description='The credentials allowed.', example='true'),
      allowHeaders?: string(name='AllowHeaders', description='The headers allowed.', example='*'),
      allowMethods?: string(name='AllowMethods', description='The methods allowed.', example='GET,POST,PUT,DELETE,HEAD,OPTIONS,PATCH'),
      allowOrigins?: string(name='AllowOrigins', description='The origins allowed.', example='*'),
      exposeHeaders?: string(name='ExposeHeaders', description='The response headers.', example='*'),
      status?: string(name='Status', description='The status.', example='off'),
      timeUnit?: string(name='TimeUnit', description='The time unit.', example='s'),
      unitNum?: long(name='UnitNum', description='The unit number.', example='1'),
    }(name='Cors', description='The configuration for cross-origin resource sharing (CORS).'),
    defaultServiceId?: long(name='DefaultServiceId', description='The default service ID.', example='1'),
    defaultServiceName?: string(name='DefaultServiceName', description='The default service name.', example='test'),
    destinationType?: string(name='DestinationType', description='The destination service type.', example='Single'),
    directResponse?: {
      body?: string(name='Body', description='The mock return value.', example='[{\\"key\\":\\"h68d13466.sqa.eu95\\",\\"dims\\":\\"groupName=All}]'),
      code?: int32(name='Code', description='The return value.', example='200'),
    }(name='DirectResponse', description='The information about service mocking.'),
    domainId?: long(name='DomainId', description='The domain ID.', example='235'),
    domainIdList?: [ long ](name='DomainIdList', description='The list of domain IDs.'),
    domainName?: string(name='DomainName', description='The domain name.', example='nbhamster.com'),
    domainNameList?: [ string ](name='DomainNameList', description='The domain names.'),
    enableWaf?: boolean(name='EnableWaf', description='Indicates whether WAF is activated.', example='0'),
    gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='102'),
    gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-7ea3da97b96543e19f6c597cd4a9****'),
    gmtCreate?: string(name='GmtCreate', description='The creation time.', example='2022-01-26T09:52:41.000+0000'),
    gmtModified?: string(name='GmtModified', description='The modification time.', example='2022-02-24T06:08:29.230+0000'),
    HTTPRewrite?: {
      host?: string(name='Host', description='The domain name.', example='aliyuncs.com'),
      path?: string(name='Path', description='The HTTP request path.', example='/test/client'),
      pathType?: string(name='PathType', description='The path type of the HTTP request.', example='PRE'),
      pattern?: string(name='Pattern', description='The matching pattern.', example='/test'),
      status?: string(name='Status', description='The HTTP status.', example='off'),
      substitution?: string(name='Substitution', description='The replacement.', example='test'),
    }(name='HTTPRewrite', description='The information about the rewrite policy.'),
    headerOp?: {
      headerOpItems?: [ 
        {
          directionType?: string(name='DirectionType', description='The request or response.', example='Response'),
          key?: string(name='Key', description='The header key.', example='debug'),
          opType?: string(name='OpType', description='The operation type.', example='Add'),
          value?: string(name='Value', description='The header value.', example='test'),
        }
      ](name='HeaderOpItems', description='The policy.'),
      status?: string(name='Status', description='The status.', example='off'),
    }(name='HeaderOp', description='The header settings.'),
    id?: long(name='Id', description='The ID of the route.', example='12'),
    name?: string(name='Name', description='The name of the route.', example='test'),
    predicates?: string(name='Predicates', description='The matching rule.', example='{\\"PathPredicates\\":{\\"Path\\":\\"/metas\\",\\"Type\\":\\"PRE\\",\\"IgnoreCase\\":false}}'),
    redirect?: {
      code?: int32(name='Code', description='The response code returned.', example='200'),
      host?: string(name='Host', description='The hostname.', example='ww.al.c'),
      path?: string(name='Path', description='The path.', example='/'),
    }(name='Redirect', description='The configuration of the redirection.'),
    retry?: {
      attempts?: int32(name='Attempts', description='The number of retries allowed for a request.', example='1'),
      httpCodes?: [ string ](name='HttpCodes', description='The HTTP status code.'),
      retryOn?: [ string ](name='RetryOn', description='The retry condition.'),
      status?: string(name='Status', description='The retry status.', example='on'),
    }(name='Retry', description='The retry configuration.'),
    routeOrder?: int32(name='RouteOrder', description='The sequence number of the route.', example='1'),
    routePredicates?: {
      headerPredicates?: [ 
        {
          key?: string(name='Key', description='The key of the request header.', example='alibo'),
          type?: string(name='Type', description='The matching type.', example='PRE'),
          value?: string(name='Value', description='The value of the request header.', example='200'),
        }
      ](name='HeaderPredicates', description='The information about matching based on request headers.'),
      methodPredicates?: [ string ](name='MethodPredicates', description='The information about method matching.'),
      pathPredicates?: {
        ignoreCase?: boolean(name='IgnoreCase', description='Indicates whether case sensitivity is ignored.', example='true'),
        path?: string(name='Path', description='The path.', example='/zookeeper/mmgw/unlogined/common.getBu'),
        type?: string(name='Type', description='The matching type.', example='PRE'),
      }(name='PathPredicates', description='The information about route matching.'),
      queryPredicates?: [ 
        {
          key?: string(name='Key', description='The name of the parameter.', example='instanceId'),
          type?: string(name='Type', description='The type.', example='PRE'),
          value?: string(name='Value', description='The value of the parameter.', example='test'),
        }
      ](name='QueryPredicates', description='The parameter matching rules.'),
    }(name='RoutePredicates', description='The information about route matching.'),
    routeServices?: [ 
      {
        groupName?: string(name='GroupName', description='The name of the group to which the service belongs.', example='DEFAULT_GROUP'),
        name?: string(name='Name', description='The name of the service.', example='test-aixue-gray'),
        namespace?: string(name='Namespace', description='The namespace.', example='default'),
        percent?: int32(name='Percent', description='The weight.', example='80'),
        serviceId?: long(name='ServiceId', description='The ID of the service.', example='547'),
        serviceName?: string(name='ServiceName', description='The name of the service.', example='b-service'),
        sourceType?: string(name='SourceType', description='The source type.', example='K8S'),
        version?: string(name='Version', description='The version of the service.', example='v1'),
      }
    ](name='RouteServices', description='The information about services.'),
    services?: string(name='Services', description='The information about services.', example='[{\\"Percent\\":100,\\"ServiceId\\":126}]'),
    status?: int32(name='Status', description='The status of the route.', example='1'),
    timeout?: {
      status?: string(name='Status', description='The status.', example='off'),
      timeUnit?: string(name='TimeUnit', description='The time unit.', example='s'),
      unitNum?: int32(name='UnitNum', description='The unit number.', example='10'),
    }(name='Timeout', description='The timeout configuration.'),
  }(name='Data', description='The returned data.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7466566F-F30F-4A29-965D-3E0AF21D****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model UpdateGatewayRouteWafStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateGatewayRouteWafStatusResponseBody(name='body'),
}

async function updateGatewayRouteWafStatus(request: UpdateGatewayRouteWafStatusRequest): UpdateGatewayRouteWafStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGatewayRouteWafStatus', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGatewayServiceCheckRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language in which you want to display the results. Valid values: zh and en. zh indicates Chinese, which is the default value. en indicates English.', example='zh', position='Query'),
  check?: boolean(name='Check', description='Specifies whether to enable the health check.', example='true', position='Query'),
  expectedStatuses?: [ int32 ](name='ExpectedStatuses', description='The expected status code, which is required if the health check protocol is HTTP.', shrink='json', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-8d410698bd7f4628ab76b*****72dd1d', position='Query'),
  healthyThreshold?: int32(name='HealthyThreshold', description='The healthy threshold of the health check.', example='2', position='Query'),
  httpHost?: string(name='HttpHost', description='The health check domain name, which is optional if the health check protocol is HTTP.', example='example.com', position='Query'),
  httpPath?: string(name='HttpPath', description='The health check path, which is required if the health check protocol is HTTP.', example='/healthz', position='Query'),
  interval?: int32(name='Interval', description='The interval at which the health check is performed.', example='2', position='Query'),
  protocol?: string(name='Protocol', description='The health check protocol. Valid values:

*   HTTP
*   TCP', example='HTTP', position='Query'),
  serviceId?: string(name='ServiceId', description='The ID of the service.', example='12', position='Query'),
  timeout?: int32(name='Timeout', description='The timeout period of responses to the health check. Unit: seconds.', example='5', position='Query'),
  unhealthyThreshold?: int32(name='UnhealthyThreshold', description='The unhealthy threshold of the health check.', example='2', position='Query'),
}

model UpdateGatewayServiceCheckResponseBody = {
  code?: int32(name='Code', description='The response code. The status code 200 indicates that the request was successful.', example='200'),
  data?: long(name='Data', description='The service ID of the operation.', example='12'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='OK'),
  requestId?: string(name='RequestId', description='The request ID.', example='62CBFCB8-DDC6-588C-BF1B-88828AF*****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values: true and false.', example='true'),
}

model UpdateGatewayServiceCheckResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateGatewayServiceCheckResponseBody(name='body'),
}

async function updateGatewayServiceCheck(request: UpdateGatewayServiceCheckRequest): UpdateGatewayServiceCheckResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGatewayServiceCheck', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGatewayServiceTrafficPolicyRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   **zh-CN** (default): Chinese
*   **en-US**: English', example='zh', position='Query'),
  gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='429', position='Query'),
  gatewayTrafficPolicy: TrafficPolicy(name='GatewayTrafficPolicy', description='The traffic policy of the gateway.', shrink='json', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-75c5036c083e4f89ba8ef9fafff2e902', position='Query'),
  serviceId?: long(name='ServiceId', description='The ID of the service.', example='411', position='Query'),
}

model UpdateGatewayServiceTrafficPolicyResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: GatewayService(name='Data', description='The details of the data.', example='{\\"GatewayUniqueId\\": \\"gw-2b8ebd75dc554c37a4279ba9917379f2\\", \\"Id\\": 417, \\"GatewayTrafficPolicy\\": {\\"LoadBalancerSettings\\": {\\"LoadbalancerType\\": \\"ROUND_ROBIN\\"}, \\"TlsSetting\\": {\\"TlsMode\\": \\"DISABLE\\"}}}'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request was successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='11A61389-F896-5231-A4FB-074D9E2E0055'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model UpdateGatewayServiceTrafficPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateGatewayServiceTrafficPolicyResponseBody(name='body'),
}

async function updateGatewayServiceTrafficPolicy(request: UpdateGatewayServiceTrafficPolicyRequest): UpdateGatewayServiceTrafficPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGatewayServiceTrafficPolicy', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGatewayServiceVersionRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-eccf313e2224438ba53d95d039e5****', position='Query'),
  serviceId?: long(name='ServiceId', description='The ID of the service.', example='575', position='Query'),
  serviceVersion?: string(name='ServiceVersion', description='The version of the service.', example='{\\"name\\":\\"v3\\",\\"labels\\":[{\\"key\\":\\"version\\",\\"value\\":\\"v3\\"}]}', position='Query'),
}

model UpdateGatewayServiceVersionResponseBody = {
  code?: int32(name='Code', description='The response code returned.', example='1'),
  data?: long(name='Data', description='The data of the node.', example='614'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D6580AA6-E285-58D2-B00B-12C051B3B7BF'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model UpdateGatewayServiceVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateGatewayServiceVersionResponseBody(name='body'),
}

async function updateGatewayServiceVersion(request: UpdateGatewayServiceVersionRequest): UpdateGatewayServiceVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGatewayServiceVersion', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGatewaySpecRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', description='The ID of the gateway.', example='gw-c70622ff52fe49beb29bea9a6f52****', position='Query'),
  replica: int32(name='Replica', description='The number of nodes.', example='3', position='Query'),
  spec: string(name='Spec', description='The node specifications of the gateway.', example='MSE_GTW_4_8_200_c', position='Query'),
}

model UpdateGatewaySpecResponseBody = {
  code?: int32(name='Code', description='The response code returned.', example='200'),
  data?: string(name='Data', description='The returned message.', example='gw-892ehbv7gg56******'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model UpdateGatewaySpecResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateGatewaySpecResponseBody(name='body'),
}

/**
  * You can call this operation to update the number of nodes or the specifications of nodes in a pay-as-you-go or subscription cloud-native gateway. If you add nodes or increase the specifications, you will incur fees. For more information, see [Pricing](~~250950~~).
  *
 * @tags gateway
 */
async function updateGatewaySpec(request: UpdateGatewaySpecRequest): UpdateGatewaySpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGatewaySpec', 'POST', '/', 'json', false, 'json', request);
}

model UpdateImageRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  clusterId: string(name='ClusterId', description='The ID of the destination cluster.', example='mse-8e8e9060', position='Query'),
  versionCode: string(name='VersionCode', description='The destination version number.

> You must call the GetImage operation to obtain the maximum destination version number that corresponds to MaxVersionCode.', example='ZooKeeper_3_5_5', position='Query'),
}

model UpdateImageResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3855D475-2B66-5CFF-9A51-3D698E52C472'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='True'),
}

model UpdateImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateImageResponseBody(name='body'),
}

async function updateImage(request: UpdateImageRequest): UpdateImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateImage', 'POST', '/', 'json', false, 'json', request);
}

model UpdateIsolationRuleRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh', position='Query'),
  appId?: string(name='AppId', example='hkhon1po62@c3df23522******', position='Query'),
  appName: string(name='AppName', example='spring-cloud-a', position='Query'),
  enable?: boolean(name='Enable', example='true', position='Query'),
  namespace: string(name='Namespace', example='default', position='Query'),
  ruleId: long(name='RuleId', example='1', position='Query'),
  threshold?: float(name='Threshold', example='3', position='Query'),
}

model UpdateIsolationRuleResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    appId?: string(name='AppId', example='hkhon1po62@c3df23522bXXXXX'),
    appName?: string(name='AppName', example='spring-cloud-a'),
    enable?: boolean(name='Enable', example='true'),
    id?: long(name='Id', example='1'),
    namespace?: string(name='Namespace', example='default'),
    resource?: string(name='Resource', example='/a'),
    threshold?: float(name='Threshold', example='3'),
  }(name='Data'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='4E9FDCFE-0738-493B-B801-82BDFBCB****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateIsolationRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateIsolationRuleResponseBody(name='body'),
}

async function updateIsolationRule(request: UpdateIsolationRuleRequest): UpdateIsolationRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateIsolationRule', 'POST', '/', 'json', false, 'json', request);
}

model UpdateMessageQueueRouteRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  appId: string(name='AppId', description='The ID of the application.', example='hkhon1po62@c3df23522baa898', position='Query'),
  appName?: string(name='AppName', example='example-app', maxLength=64, position='Query'),
  enable?: boolean(name='Enable', description='Specifies whether the canary release for messaging feature is enabled for the application. Valid values:

*   `true`: enabled
*   `false`: disabled', example='true', position='Query'),
  filterSide?: string(name='FilterSide', description='The side for message filtering when the canary release for messaging feature is enabled.', example='Server', position='Query'),
  namespace?: string(name='Namespace', example='default', maxLength=64, position='Query'),
  region: string(name='Region', description='The region ID.', example='cn-hangzhou', position='Query'),
  tags?: [ string ](name='Tags', description='The tag that is negligible for the untagged environment of the application.', shrink='json', position='Query'),
}

model UpdateMessageQueueRouteResponseBody = {
  code?: int32(name='Code', description='The status code returned. The value 200 indicates that the request was successful. Other values indicate that the request failed.', example='200'),
  data?: string(name='Data', description='The data of the node.', example='True'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E3919C62-876A-5926-A0BC-18351A24FA35'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model UpdateMessageQueueRouteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateMessageQueueRouteResponseBody(name='body'),
}

async function updateMessageQueueRoute(request: UpdateMessageQueueRouteRequest): UpdateMessageQueueRouteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateMessageQueueRoute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateMigrationTaskRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  clusterType?: string(name='ClusterType', description='The type of the instance. Valid values:

*   Nacos-Ans
*   ZooKeeper
*   Eureka', example='Nacos-Ans', position='Query'),
  id?: string(name='Id', description='The ID of the task.', example='1', position='Query'),
  originInstanceAddress?: string(name='OriginInstanceAddress', description='The address of the source instance node.', example='192.168.1.1:8848', position='Query'),
  originInstanceName?: string(name='OriginInstanceName', description='The name of the source instance.', example='Source instance', position='Query'),
  originInstanceNamespace?: string(name='OriginInstanceNamespace', description='The list of namespaces. This parameter is optional if you want to migrate applications from a Nacos instance.', example='namesapceId1,namesapceId2', position='Query'),
  projectDesc?: string(name='ProjectDesc', description='The description.', example='This is a description.', position='Query'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}', position='Query'),
  targetClusterName?: string(name='TargetClusterName', description='The name of the destination instance.', example='Destination instance', position='Query'),
  targetClusterUrl?: string(name='TargetClusterUrl', description='The URL of the destination instance.', example='mse-66*****-nacos-ans.mse.aliyuncs.com:8848', position='Query'),
  targetInstanceId?: string(name='TargetInstanceId', description='The ID of the destination instance.', example='mse-cn-ud82*****', position='Query'),
}

model UpdateMigrationTaskResponseBody = {
  data?: {
    clusterType?: string(name='ClusterType', description='The type of the instance.

*   Nacos-Ans
*   ZooKeeper
*   Eureka', example='Nacos-Ans'),
    gmtCreate?: string(name='GmtCreate', description='The creation time.', example='2022-01-07T10:07:57.000+0000'),
    gmtModified?: string(name='GmtModified', description='The modification time.', example='2022-01-07T10:07:57.000+0000'),
    id?: string(name='Id', description='The ID of the task.', example='1'),
    originInstanceAddress?: string(name='OriginInstanceAddress', description='The address of the source instance node.', example='192.168.100.2:2181'),
    originInstanceName?: string(name='OriginInstanceName', description='The name of the source instance.', example='src'),
    originInstanceNamespace?: string(name='OriginInstanceNamespace', description='The list of namespaces. This parameter is optional if applications are migrated from a Nacos instance.', example='fsdfsdfdsf'),
    projectDesc?: string(name='ProjectDesc', description='The description.', example='1232345'),
    targetClusterName?: string(name='TargetClusterName', description='The name of the destination instance.', example='multiple-nacos'),
    targetClusterUrl?: string(name='TargetClusterUrl', description='The URL of the destination instance.', example='mse-0b*****-nacos-ans.mse.aliyuncs.com:8848'),
    targetInstanceId?: string(name='TargetInstanceId', description='The ID of the destination instance.', example='mse-cn-zvp2u*****'),
    userId?: string(name='UserId', description='The ID of the user.', example='183876217*****'),
  }(name='Data', description='The data structure.'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request was successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='AF21683A-29C7-4853-AC0F-B5ADEE4****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model UpdateMigrationTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateMigrationTaskResponseBody(name='body'),
}

async function updateMigrationTask(request: UpdateMigrationTaskRequest): UpdateMigrationTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateMigrationTask', 'POST', '/', 'json', false, 'json', request);
}

model UpdateNacosClusterRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  checkPort?: int32(name='CheckPort', description='The port used for health checks.', example='80', position='Query'),
  clusterName: string(name='ClusterName', description='The name of the Nacos cluster.', example='DEFAULT', position='Query'),
  groupName: string(name='GroupName', description='The name of the group.', example='DEFAULT_GROUP', position='Query'),
  healthChecker?: string(name='HealthChecker', description='The type of the health check.', example='{"type":"none"}', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-123456', position='Query'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='9e78a671-4b9b-4dd4-99c1-0b9da87d3dec', position='Query'),
  serviceName: string(name='ServiceName', description='The name of the service.', example='hello_service', position='Query'),
  useInstancePortForCheck?: boolean(name='UseInstancePortForCheck', description='Specifies whether to use the port of the instance for a health check.', example='false', position='Query'),
}

model UpdateNacosClusterResponseBody = {
  code?: int32(name='Code', description='The response code returned.', example='200'),
  data?: string(name='Data', description='The result returned.', example='ok'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9e78a671-4b9b-4dd4-99c1-0b9da87d3dec'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model UpdateNacosClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateNacosClusterResponseBody(name='body'),
}

async function updateNacosCluster(request: UpdateNacosClusterRequest): UpdateNacosClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateNacosCluster', 'POST', '/', 'json', false, 'json', request);
}

model UpdateNacosConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  appName?: string(name='AppName', description='The name of the application.', example='postoffice', position='Query'),
  betaIps?: string(name='BetaIps', description='The list of IP addresses where the beta release of the configuration is performed.', example='196.168.XX.XX', position='Query'),
  content?: string(name='Content', description='The content of the configuration.', example='attribute1=1221111\\r\\nattribute2=Chinese\\r\\nattribute3=abc11\\r\\nattribute4=1.00111', position='Query'),
  dataId: string(name='DataId', description='The ID of the configuration.', example='ky-check-****.yml', position='Query'),
  desc?: string(name='Desc', description='The description of the configuration.', example='Basic configurations', position='Query'),
  encryptedDataKey?: string(name='EncryptedDataKey', description='The encryption key.', example='122wdwe****', position='Query'),
  group: string(name='Group', description='The name of the group.', example='resource', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-7pp2a****', position='Query'),
  md5?: string(name='Md5', description='The MD5 value of the configuration.', example='045439703a273a94306422b****', position='Query'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='78b7af66-d15f-4541-b886-11ed81ecb6c0', position='Query'),
  tags?: string(name='Tags', description='The list of tags.', example='2021-10-20', position='Query'),
  type?: string(name='Type', description='The format of the configuration. Supported formats include TEXT, JSON, XML, and HTML.', example='text', position='Query'),
}

model UpdateNacosConfigResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='NoPermission'),
  httpCode?: string(name='HttpCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request was successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='69AD2AA7-DB47-449B-941B-B14409DF****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model UpdateNacosConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateNacosConfigResponseBody(name='body'),
}

/**
  * >  The current API operation is not provided in Nacos SDK. For more information about Nacos SDK, see the [official documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
 * @tags cluster
 */
async function updateNacosConfig(request: UpdateNacosConfigRequest): UpdateNacosConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateNacosConfig', 'POST', '/', 'json', false, 'json', request);
}

model UpdateNacosInstanceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  clusterName?: string(name='ClusterName', description='The name of the Nacos instance.', example='DEFAULT', position='Query'),
  enabled: boolean(name='Enabled', description='Specifies whether to disable this service. Valid values:

*   `true`: yes.
*   `false`: no.', example='true', position='Query'),
  ephemeral: boolean(name='Ephemeral', description='Specifies whether the node is a non-persistent node. Valid values:

*   `true`: yes.
*   `false`: no.', example='false', position='Query'),
  groupName: string(name='GroupName', description='The name of the group.', example='DEFAULT_GROUP', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-123456', position='Query'),
  ip: string(name='Ip', description='The IP address of the Nacos instance.', example='1.2.X.X', position='Query'),
  metadata?: string(name='Metadata', description='The metadata of the instance.', example='[int]', position='Body'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='9e78a671-4b9b-4dd4-99c1-0****', position='Query'),
  port: int32(name='Port', description='The port number of the Nacos instance.', example='12281', position='Query'),
  serviceName: string(name='ServiceName', description='The name of the service.', example='hello_service', position='Query'),
  weight: string(name='Weight', description='The weight. Valid values: 0 to 10000. The value must be an integer. A larger value indicates a higher frequency at which the instance is accessed.', example='1', position='Query'),
}

model UpdateNacosInstanceResponseBody = {
  code?: int32(name='Code', description='The response code returned.', example='200'),
  data?: string(name='Data', description='The result of the modification.', example='ok'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The returned message.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9e78a671-4b9b-4dd4-99c1-0b9da87d3dec'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model UpdateNacosInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateNacosInstanceResponseBody(name='body'),
}

/**
  * > The operation is not provided in Nacos SDKs. For information about Nacos SDKs, see the [official documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
 */
async function updateNacosInstance(request: UpdateNacosInstanceRequest): UpdateNacosInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateNacosInstance', 'POST', '/', 'json', true, 'form', request);
}

model UpdateNacosServiceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  clusterId?: string(name='ClusterId', description='The ID of the cluster.

> This operation contains both the InstanceId and ClusterId parameters. You must specify one of them.', example='mse-09k1q11****', position='Query'),
  groupName?: string(name='GroupName', description='The name of the group.', example='DEFAULT_GROUP', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.

> This operation contains both the InstanceId and ClusterId parameters. You must specify one of them.', example='mse-cn-st21ri2****', position='Query'),
  namespaceId?: string(name='NamespaceId', description='The ID of the namespace.', example='5e3ee449-b5c0-4aee-b857-32c0acbebf26', position='Query'),
  protectThreshold?: string(name='ProtectThreshold', description='The protection threshold.', example='0', position='Query'),
  serviceName: string(name='ServiceName', description='The name of the service.', example='com.dingtalk.doc.thumbnails.pdf.ThumbnailService', position='Query'),
}

model UpdateNacosServiceResponseBody = {
  code?: int32(name='Code', description='The response code returned.', example='1'),
  data?: string(name='Data', description='The details of the data.', example='6'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4E9FDCFE-0738-493B-B801-82BDFBCB****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='True'),
}

model UpdateNacosServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateNacosServiceResponseBody(name='body'),
}

/**
  * > The operation is not provided in Nacos SDKs. For information about Nacos SDKs, see the [official documentation](https://nacos.io/zh-cn/docs/sdk.html).
  *
 */
async function updateNacosService(request: UpdateNacosServiceRequest): UpdateNacosServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateNacosService', 'POST', '/', 'json', false, 'json', request);
}

model UpdatePluginConfigRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

zh: Chinese en: English', example='zh', position='Query'),
  config?: string(name='Config', description='The plug-in configuration. Configurations of WebAssembly plug-ins are in the YAML format, and configurations of Lua plug-ins are in the Lua code.', example='\\# Configure a check for the required fields of the plug-in, such as name, age, and friends. Sample configuration: name: John age: 18 friends: - David - Anne', position='Query'),
  configLevel?: int32(name='ConfigLevel', description='The application scope of the plug-in.

*   0: global
*   1: route
*   2: domain name', example='0', position='Query'),
  enable?: boolean(name='Enable', description='Specifies whether to enable the plug-in.', example='true', position='Query'),
  gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='1', position='Query'),
  gatewayUniqueId: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-ubuwqygbq4783gqb2y3f87q****', position='Query'),
  gmtCreate?: string(name='GmtCreate', description='The creation time.', example='1667309705000', position='Query'),
  gmtModified?: string(name='GmtModified', description='The update time.', example='1667309705000', position='Query'),
  id?: long(name='Id', description='The ID of the plug-in configuration.', example='1', position='Query'),
  pluginId: long(name='PluginId', description='The ID of the gateway plug-in.', example='2', position='Query'),
}

model UpdatePluginConfigResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: long(name='Data', description='The ID of the plug-in configuration.', example='1'),
  dynamicMessage?: string(name='DynamicMessage', description='The dynamic part in the error message.', example='code'),
  errorCode?: string(name='ErrorCode', description='The error code that is returned.', example='500'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='03A3E2F4-6804-5663-9D5D-2EC47A1*****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model UpdatePluginConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePluginConfigResponseBody(name='body'),
}

async function updatePluginConfig(request: UpdatePluginConfigRequest): UpdatePluginConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdatePluginConfig', 'POST', '/', 'json', false, 'json', request);
}

model UpdateSSLCertRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  certIdentifier?: string(name='CertIdentifier', description='The ID of the certificate.', example='5951436-cn-hangzhou', position='Query'),
  domainId?: long(name='DomainId', description='The ID of the domain name.', example='210', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-2a99625886d54722be94d92e9a69****', position='Query'),
}

model UpdateSSLCertResponseBody = {
  code?: int32(name='Code', description='The response code returned.', example='200'),
  data?: boolean(name='Data', description='Indicates whether the update is successful.', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The request ID.', example='CA689BED-08F3-54C2-A206-A0924E2ACA0A'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model UpdateSSLCertResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSSLCertResponseBody(name='body'),
}

async function updateSSLCert(request: UpdateSSLCertRequest): UpdateSSLCertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSSLCert', 'POST', '/', 'json', false, 'json', request);
}

model UpdateServiceSourceRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese.
*   en: English.', example='zh', position='Query'),
  address?: string(name='Address', description='The address.', example='c9ad2a0717032427e920754e25b49e3b5', position='Query'),
  gatewayId?: long(name='GatewayId', description='The ID of the gateway.', example='429', position='Query'),
  gatewayUniqueId?: string(name='GatewayUniqueId', description='The unique ID of the gateway.', example='gw-cdd1bb9bfb8341e9805f931a3ba1f4c6', position='Query'),
  id?: long(name='Id', description='The ID of the service source.', example='63', position='Query'),
  ingressOptionsRequest?: {
    enableIngress?: boolean(name='EnableIngress', description='Specifies whether to enable Ingress.', example='true'),
    enableStatus?: boolean(name='EnableStatus', description='Specifies whether to update the Ingress status.', example='true'),
    ingressClass?: string(name='IngressClass', description='Specifies whether to monitor Ingress classes.', example='com.test.xxx'),
    watchNamespace?: string(name='WatchNamespace', description='The namespace whose resources you want to monitor.', example='default'),
  }(name='IngressOptionsRequest', description='The configurations of Ingress resources.', example='zh', shrink='json', position='Query'),
  name?: string(name='Name', description='The name.', example='istio', position='Query'),
  pathList?: [ string ](name='PathList', description='An array of service root paths.', shrink='json', position='Query'),
  source?: string(name='Source', description='The service source. Valid values:

*   K8s: ACK cluster.
*   MSE: Nacos instance.', example='K8s', position='Query'),
  type?: string(name='Type', description='The type of the service source. Valid values:

*   K8s: ACK cluster.
*   NACOS: Nacos instance.', example='K8s', position='Query'),
}

model UpdateServiceSourceResponseBody = {
  code?: int32(name='Code', description='The status code returned.', example='200'),
  data?: long(name='Data', description='The returned data.', example='63'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6AB2B0B6-4A86-54E2-A340-FC47A22EE659'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model UpdateServiceSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateServiceSourceResponseBody(name='body'),
}

async function updateServiceSource(request: UpdateServiceSourceRequest): UpdateServiceSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateServiceSource', 'POST', '/', 'json', false, 'json', request);
}

model UpdateZnodeRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  clusterId: string(name='ClusterId', description='The ID of the instance.', example='mse-09k1q11****', position='Query'),
  data: string(name='Data', description='The data of the node.', example='data', position='Query'),
  path: string(name='Path', description='The path of the node.', example='/zookeeper', position='Query'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}', position='Query'),
}

model UpdateZnodeResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  message?: string(name='Message', description='The message returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='316F5F64-F73D-42DC-8632-01E308B6****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model UpdateZnodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateZnodeResponseBody(name='body'),
}

async function updateZnode(request: UpdateZnodeRequest): UpdateZnodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateZnode', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeClusterRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   zh: Chinese
*   en: English', example='zh', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='mse-cn-nif1w51wi0c', position='Query'),
  requestPars?: string(name='RequestPars', description='The extended request parameters in the JSON format.', example='{}', position='Query'),
  upgradeVersion: string(name='UpgradeVersion', description='The destination version.', example='1.2.1', position='Query'),
}

model UpgradeClusterResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='mse-100-000'),
  httpCode?: string(name='HttpCode', description='The response code returned.', example='202'),
  message?: string(name='Message', description='The message returned.

*   If the request is successful, a success message is returned.
*   If the request fails, an error message is returned.', example='The request is successfully processed.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8D855418-177B-5FF8-A021-75B930AD890A'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model UpgradeClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpgradeClusterResponseBody(name='body'),
}

async function upgradeCluster(request: UpgradeClusterRequest): UpgradeClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeCluster', 'POST', '/', 'json', false, 'json', request);
}

model RulesValue = {
  status?: int32(name='Status'),
  rate?: int32(name='Rate'),
  enable?: boolean(name='Enable'),
  tag?: string(name='Tag'),
  name?: string(name='Name', example='gray'),
  id?: long(name='Id'),
  instanceNum?: int32(name='InstanceNum'),
  rules?: {
    springcloud?: [ 
      {
        condition?: string(name='condition'),
        restItems?: [ 
          {
            datum?: string(name='datum'),
            operator?: string(name='operator'),
            nameList?: [ string ](name='nameList'),
            cond?: string(name='cond'),
            divisor?: int32(name='divisor'),
            remainder?: int32(name='remainder'),
            rate?: int32(name='rate', example='20'),
            type?: string(name='type'),
            name?: string(name='name'),
            value?: any(name='value'),
          }
        ](name='restItems'),
        triggerPolicy?: string(name='triggerPolicy'),
        enable?: boolean(name='enable'),
        appId?: string(name='appId'),
        priority?: int32(name='priority'),
        tags?: [ string ](name='tags'),
        paths?: [ string ](name='paths'),
        path?: string(name='path'),
      }
    ](name='springcloud'),
    dubbo?: [ 
      {
        appId?: string(name='appId'),
        tags?: [ string ](name='tags'),
        triggerPolicy?: string(name='triggerPolicy'),
        serviceName?: string(name='serviceName'),
        group?: string(name='group'),
        version?: string(name='version'),
        methodName?: string(name='methodName'),
        paramTypes?: [ string ](name='paramTypes'),
        condition?: string(name='condition', example='AND'),
        argumentItems?: [ 
          {
            operator?: string(name='operator'),
            nameList?: [ string ](name='nameList'),
            datum?: string(name='datum'),
            cond?: string(name='cond'),
            divisor?: int32(name='divisor'),
            remainder?: int32(name='remainder'),
            rate?: int32(name='rate'),
            index?: int32(name='index'),
            expr?: string(name='expr'),
            value?: any(name='value'),
          }
        ](name='argumentItems'),
      }
    ](name='dubbo'),
  }(name='Rules'),
}

model DataValue = {
  userId?: string(name='UserId', description='The ID of the user to which the application belongs.', example='12345'),
  regionId?: string(name='RegionId', description='The region where the application resides.', example='cn-hangzhou'),
  namespace?: string(name='Namespace', description='The microservice namespace where the application resides.', example='default'),
  appName?: string(name='AppName', description='The application name.', example='example-app-name'),
  appId?: string(name='AppId', description='The application ID.', example='123456abcde@12345abcde'),
}

