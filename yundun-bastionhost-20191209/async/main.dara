/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Yundun-bastionhost';
  @version = '2019-12-09';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AcceptApproveCommandRequest {
  commandId: string(name='CommandId', description='The ID of the command that you want to approve.

>  You can call the [ListApproveCommands](https://help.aliyun.com/document_detail/2584310.html) operation to query the IDs of all commands that need to be reviewed.

This parameter is required.', example='7', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host.

>  You can call the DescribeInstances operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model AcceptApproveCommandResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
}

model AcceptApproveCommandResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AcceptApproveCommandResponseBody(name='body'),
}

/**
  * @description You can call this operation as a Bastionhost administrator to approve the request to run a command of an O\\&M engineer.
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of AcceptApproveCommand  AcceptApproveCommandRequest
  * @return AcceptApproveCommandResponse
 */
async function acceptApproveCommand(request: AcceptApproveCommandRequest): AcceptApproveCommandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AcceptApproveCommand', 'POST', '/', 'json', false, 'json', request);
}

model AcceptOperationTicketRequest {
  comment?: string(name='Comment', description='The review description.', example='O\\&M allowed', position='Query'),
  effectCount?: string(name='EffectCount', description='The maximum number of logons allowed. Valid values:

*   **0**: The number of logons is unlimited. The O\\&M engineer can log on to the specified asset for unlimited times during the validity period.
*   **1**: The O\\&M engineer can log on to the specified asset only once during the validity period.

> *   You can set this parameter only to 0 if you review an O\\&M application on a database.
> *   If you do not specify this parameter, the default value 0 is used.', example='1', position='Query'),
  effectEndTime?: string(name='EffectEndTime', description='The end time of the validity period. The value is a UNIX timestamp. Unit: seconds.', example='1679393152', position='Query'),
  effectStartTime?: string(name='EffectStartTime', description='The start time of the validity period. The value is a UNIX timestamp. Unit: seconds.', example='1685600242', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  operationTicketId: string(name='OperationTicketId', description='The ID of the O\\&M application that you want to approve. You can call the ListOperationTickets operation to query the IDs of all O\\&M applications that require review.

This parameter is required.', example='1', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model AcceptOperationTicketResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
}

model AcceptOperationTicketResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AcceptOperationTicketResponseBody(name='body'),
}

/**
  * @description You can call this operation as a Bastionhost administrator to approve an O\\&M application of an O\\&M engineer.
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of AcceptOperationTicket  AcceptOperationTicketRequest
  * @return AcceptOperationTicketResponse
 */
async function acceptOperationTicket(request: AcceptOperationTicketRequest): AcceptOperationTicketResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AcceptOperationTicket', 'POST', '/', 'json', false, 'json', request);
}

model AddDatabasesToGroupRequest {
  databaseIds: [ string ](name='DatabaseIds', description='An array that consists of the database IDs.

This parameter is required.', position='Query'),
  hostGroupId: string(name='HostGroupId', description='The ID of the asset group to which you want to add the databases.

>  You can call the [ListHostGroups](https://help.aliyun.com/document_detail/201307.html) operation to query the ID of the asset group.

This parameter is required.', example='1', position='Query'),
  instanceId: string(name='InstanceId', description='The bastion host ID.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model AddDatabasesToGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
  results?: [ 
    {
      code?: string(name='Code', description='The error code returned. If **OK** is returned, the operation was successful. If another error code is returned, the operation failed.', example='OK'),
      databaseId?: string(name='DatabaseId', description='The database ID.', example='9'),
      hostGroupId?: string(name='HostGroupId', description='The asset group ID.', example='1'),
      message?: string(name='Message', description='The error message returned.'),
    }
  ](name='Results', description='The data returned.'),
}

model AddDatabasesToGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddDatabasesToGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddDatabasesToGroup  AddDatabasesToGroupRequest
  * @return AddDatabasesToGroupResponse
 */
async function addDatabasesToGroup(request: AddDatabasesToGroupRequest): AddDatabasesToGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddDatabasesToGroup', 'POST', '/', 'json', false, 'json', request);
}

model AddHostsToGroupRequest {
  hostGroupId: string(name='HostGroupId', description='The ID of the asset group to which you want to add hosts.

>You can call the [ListHostGroups](https://help.aliyun.com/document_detail/201307.html) operation to query the asset group ID.

This parameter is required.', example='1', position='Query'),
  hostIds: string(name='HostIds', description='The IDs of the hosts that you want to add to the asset group. Specify a JSON string. You can specify up to 100 host IDs.

> You can call the [ListHosts](https://help.aliyun.com/document_detail/200665.html) operation to query the host IDs.

This parameter is required.', example='["1","2","3"]', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host whose asset group you want to add hosts to.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host whose asset group you want to add hosts to.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model AddHostsToGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='81500666-d7f5-4143-8329-0223cc738105'),
  results?: [ 
    {
      code?: string(name='Code', description='The return code that indicates whether the call was successful. Valid values:

*   **OK**: The call was successful.

*   **UNEXPECTED**: An unknown error occurred.

*   **INVALID_ARGUMENT**: A request parameter is invalid.
    >Make sure that the request parameters are valid and call the operation again.

*   **OBJECT_NOT_FOUND**: The specified object on which you want to perform the operation does not exist.
    > Make sure that the specified bastion host ID and host IDs are valid. Then, call the operation again.

*   **OBJECT_AlREADY_EXISTS**: The specified object on which you want to perform the operation already exists.', example='OK'),
      hostGroupId?: string(name='HostGroupId', description='The asset group ID.', example='1'),
      hostId?: string(name='HostId', description='The host ID.', example='1'),
      message?: string(name='Message', description='This parameter is deprecated.', example='N/A'),
    }
  ](name='Results', description='The result of the call.'),
}

model AddHostsToGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddHostsToGroupResponseBody(name='body'),
}

/**
  * @description You can call this operation to add one or more hosts to a host group. You can add multiple hosts to a host group to manage and grant permissions on the hosts in a centralized manner.
  * # Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  * @param request  the request parameters of AddHostsToGroup  AddHostsToGroupRequest
  * @return AddHostsToGroupResponse
 */
async function addHostsToGroup(request: AddHostsToGroupRequest): AddHostsToGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddHostsToGroup', 'POST', '/', 'json', false, 'json', request);
}

model AddInstanceRdMemberRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='bastionhost-cn-7mz2ve7h00a', position='Query'),
  memberId: string(name='MemberId', description='This parameter is required.', example='1857311509574932', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model AddInstanceRdMemberResponseBody = {
  requestId?: string(name='RequestId', example='4F6C075F-FC86-476E-943B-097BD4E12948'),
}

model AddInstanceRdMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddInstanceRdMemberResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddInstanceRdMember  AddInstanceRdMemberRequest
  * @return AddInstanceRdMemberResponse
 */
async function addInstanceRdMember(request: AddInstanceRdMemberRequest): AddInstanceRdMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddInstanceRdMember', 'POST', '/', 'json', false, 'json', request);
}

model AddUsersToGroupRequest {
  instanceId: string(name='InstanceId', description='The ID of the bastion host for which you want to add users to the user group.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host for which you want to add users to the user group.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  userGroupId: string(name='UserGroupId', description='The ID of the user group to which you want to add users.

> You can call the [ListUserGroups](https://help.aliyun.com/document_detail/204509.html) operation to query the ID of the user group.

This parameter is required.', example='１', position='Query'),
  userIds: string(name='UserIds', description='The ID of the user that you want to add to the user group. The value is a JSON string. You can add up to 100 user IDs. If you specify multiple IDs, separate the IDs with commas (,).

> You can call the [ListUsers](https://help.aliyun.com/document_detail/204522.html) operation to query the ID of the user.

This parameter is required.', example='["1","2","3"]', position='Query'),
}

model AddUsersToGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
  results?: [ 
    {
      code?: string(name='Code', description='The return code that indicates whether the call was successful. Valid values:

*   **OK**: The call was successful.

*   **UNEXPECTED**: An unknown error occurred.

*   **INVALID_ARGUMENT**: A request parameter is invalid.

> Make sure that the request parameters are valid and call the operation again.

*   **OBJECT_NOT_FOUND**: The specified object on which you want to perform the operation does not exist.

> Check whether the specified ID of the bastion host exists, whether the specified hosts exist, and whether the specified host IDs are valid. Then, call the operation again.

*   **OBJECT_AlREADY_EXISTS**: The specified object on which you want to perform the operation already exists.', example='OK'),
      message?: string(name='Message', description='This parameter is deprecated.'),
      userGroupId?: string(name='UserGroupId', description='The ID of the group.', example='1'),
      userId?: string(name='UserId', description='The ID of the user.', example='1'),
    }
  ](name='Results', description='The result of the call.'),
}

model AddUsersToGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddUsersToGroupResponseBody(name='body'),
}

/**
  * @description #
  * You can call this operation to add one or more users to a user group. After you call the [CreateUserGroup](https://help.aliyun.com/document_detail/204596.html) operation to create a user group, you can call the AddUsersToGroup operation to add multiple users to the user group. Then, you can manage and grant permissions to the users at a time.
  * # Limit
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of AddUsersToGroup  AddUsersToGroupRequest
  * @return AddUsersToGroupResponse
 */
async function addUsersToGroup(request: AddUsersToGroupRequest): AddUsersToGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddUsersToGroup', 'POST', '/', 'json', false, 'json', request);
}

model AttachDatabaseAccountsToUserRequest {
  databases?: [ 
    {
      databaseAccountIds?: [ string ](name='DatabaseAccountIds', description='An array that consists of database account IDs.'),
      databaseId?: string(name='DatabaseId', description='The ID of the database that you want to authorize the user to manage.', example='22'),
    }
  ](name='Databases', description='An array that consists of database objects.

>  You can specify up to 10 databases and 10 database accounts. The database accounts are not required. If you do not specify a database account, the user is authorized to manage only the databases.', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host whose user you want to grant permissions.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-wwo36qbv601', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  userId: string(name='UserId', description='The ID of the user to be authorized.

>  You can call the [ListUsers](https://help.aliyun.com/document_detail/204522.html) operation to query the user ID.

This parameter is required.', example='1', position='Query'),
}

model AttachDatabaseAccountsToUserResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='23120B8E-8737-50BD-A3A3-902A7821F04D'),
  results?: [ 
    {
      code?: string(name='Code', description='The error code that is returned. If **OK** is returned, the authorization was successful. If another error code is returned, the authorization failed.', example='OK'),
      databaseAccounts?: [ 
        {
          code?: string(name='Code', description='The error code that is returned. If OK is returned, the authorization was successful. If another error code is returned, the authorization failed.', example='OK'),
          databaseAccountId?: string(name='DatabaseAccountId', description='The database account ID.', example='6'),
          message?: string(name='Message', description='The error message that is returned.', example='success'),
        }
      ](name='DatabaseAccounts', description='A list that shows the authorization results of the database accounts.'),
      databaseId?: string(name='DatabaseId', description='The database ID.', example='22'),
      message?: string(name='Message', description='The error message that is returned.'),
      userId?: string(name='UserId', description='The user ID.', example='1'),
    }
  ](name='Results', description='The result of the call.'),
}

model AttachDatabaseAccountsToUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AttachDatabaseAccountsToUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AttachDatabaseAccountsToUser  AttachDatabaseAccountsToUserRequest
  * @return AttachDatabaseAccountsToUserResponse
 */
async function attachDatabaseAccountsToUser(request: AttachDatabaseAccountsToUserRequest): AttachDatabaseAccountsToUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachDatabaseAccountsToUser', 'POST', '/', 'json', false, 'json', request);
}

model AttachDatabaseAccountsToUserGroupRequest {
  databases?: [ 
    {
      databaseAccountIds?: [ string ](name='DatabaseAccountIds', description='An array that consists of database account IDs.'),
      databaseId?: string(name='DatabaseId', description='The ID of the database that you want to authorize the user group to manage.', example='58'),
    }
  ](name='Databases', description='An array that consists of the database objects.

>  You can specify up to 10 databases and 10 database accounts. The database accounts are not required. If you do not specify a database account, the user group is authorized to manage only the databases.', position='Query'),
  instanceId: string(name='InstanceId', description='The bastion host ID.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-zvp282aly06', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  userGroupId: string(name='UserGroupId', description='This parameter is required.', example='2', position='Query'),
}

model AttachDatabaseAccountsToUserGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='5D0EB759-CB0A-537D-A2CC-13A9854FA08D'),
  results?: [ 
    {
      code?: string(name='Code', description='The error code returned. If OK is returned, the authorization was successful. If another error code is returned, the authorization failed.', example='OK'),
      databaseAccounts?: [ 
        {
          code?: string(name='Code', description='The error code returned. If OK is returned, the authorization was successful. If another error code is returned, the authorization failed.', example='OK'),
          databaseAccountId?: string(name='DatabaseAccountId', description='The database account ID.', example='8'),
          message?: string(name='Message', description='The error message returned.'),
        }
      ](name='DatabaseAccounts', description='A list that shows the authorization results of the database accounts.'),
      databaseId?: string(name='DatabaseId', description='The database ID.', example='2'),
      message?: string(name='Message', description='The error message returned.'),
      userGroupId?: string(name='UserGroupId', description='The user group ID.', example='1'),
    }
  ](name='Results', description='The result of the call.'),
}

model AttachDatabaseAccountsToUserGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AttachDatabaseAccountsToUserGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AttachDatabaseAccountsToUserGroup  AttachDatabaseAccountsToUserGroupRequest
  * @return AttachDatabaseAccountsToUserGroupResponse
 */
async function attachDatabaseAccountsToUserGroup(request: AttachDatabaseAccountsToUserGroupRequest): AttachDatabaseAccountsToUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachDatabaseAccountsToUserGroup', 'POST', '/', 'json', false, 'json', request);
}

model AttachHostAccountsToHostShareKeyRequest {
  hostAccountIds?: string(name='HostAccountIds', description='The host account IDs.

>  You must specify this parameter. You can call the [ListHostAccounts](https://help.aliyun.com/document_detail/462937.html) operation to query the host account IDs.', example='["1","2","3"]', position='Query'),
  hostShareKeyId?: string(name='HostShareKeyId', description='The shared key ID.

>  You must specify this parameter. You can call the [ListHostShareKeys](https://help.aliyun.com/document_detail/462973.html) operation to query the shared key ID.', example='10267', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host. You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host. For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model AttachHostAccountsToHostShareKeyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
  results?: [ 
    {
      code?: string(name='Code', description='The error code returned. If **OK** is returned, the association was successful. If another error code is returned, the association failed.', example='OK'),
      hostAccountId?: string(name='HostAccountId', description='The ID of the host account.', example='1201'),
      hostShareKeyId?: string(name='HostShareKeyId', description='The ID of the shared key.', example='10267'),
      message?: string(name='Message', description='The error message returned.', example='The host account does not exist'),
    }
  ](name='Results', description='The result of the call.'),
}

model AttachHostAccountsToHostShareKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AttachHostAccountsToHostShareKeyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AttachHostAccountsToHostShareKey  AttachHostAccountsToHostShareKeyRequest
  * @return AttachHostAccountsToHostShareKeyResponse
 */
async function attachHostAccountsToHostShareKey(request: AttachHostAccountsToHostShareKeyRequest): AttachHostAccountsToHostShareKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachHostAccountsToHostShareKey', 'POST', '/', 'json', false, 'json', request);
}

model AttachHostAccountsToUserRequest {
  hosts: string(name='Hosts', description='The IDs of the hosts and host accounts that you want to authorize the user to manage. You can specify up to 10 host IDs and up to 10 host account IDs for each host. You can specify only host IDs. In this case, the user is authorized to manage only the specified hosts. For more information about this parameter, see the "Description of the Hosts parameter" section of this topic.

> You can call the [ListHosts](https://help.aliyun.com/document_detail/200665.html) operation to query the ID of the host and the [ListHostAccounts](https://help.aliyun.com/document_detail/204372.html) operation to query the ID of the host account.

This parameter is required.', example='[ {"HostId":"1"}, {"HostId":"2","HostAccountIds":["1","2","3"]}, {"HostId":"3","HostAccountIds":["4","5","6"]}, {"HostId":"4","HostAccountIds":["9","8","7"]}  ]', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host for which you want to authorize the user to manage the hosts and host accounts.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host for which you want to authorize the user to manage the hosts and host accounts.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  userId: string(name='UserId', description='The ID of the user that you want to authorize to manage the hosts and host accounts.

> You can call the [ListUsers](https://help.aliyun.com/document_detail/204522.html) operation to query the ID of the user.

This parameter is required.', example='1', position='Query'),
}

model AttachHostAccountsToUserResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
  results?: [ 
    {
      code?: string(name='Code', description='The return code that indicates whether the call was successful. Valid values:

*   **OK**: The call was successful.

*   **UNEXPECTED**: An unknown error occurred.

*   **INVALID_ARGUMENT**: A request parameter is invalid.

> Make sure that the request parameters are valid and call the operation again.

*   **OBJECT_NOT_FOUND**: The specified object on which you want to perform the operation does not exist.

> Check whether the specified ID of the bastion host exists, whether the specified hosts exist, and whether the specified host IDs are valid. Then, call the operation again.

*   **OBJECT_AlREADY_EXISTS**: The specified object on which you want to perform the operation already exists.', example='OK'),
      hostAccounts?: [ 
        {
          code?: string(name='Code', description='The return code that indicates whether the user was authorized to manage the host accounts. Valid values:

*   **OK**: The call was successful.
*   **UNEXPECTED**: An unknown error occurred.
*   **INVALID_ARGUMENT**: A request parameter is invalid.
*   **OBJECT_NOT_FOUND**: The specified object on which you want to perform the operation does not exist.
*   **OBJECT_AlREADY_EXISTS**: The specified object on which you want to perform the operation already exists.', example='OK'),
          hostAccountId?: string(name='HostAccountId', description='The ID of the host account.', example='1'),
          message?: string(name='Message', description='This parameter is deprecated.'),
        }
      ](name='HostAccounts', description='The result of authorizing the user to manage the host accounts.'),
      hostId?: string(name='HostId', description='The ID of the host.', example='1'),
      message?: string(name='Message', description='This parameter is deprecated.'),
      userId?: string(name='UserId', description='The ID of the user.', example='1'),
    }
  ](name='Results', description='The result of the call.'),
}

model AttachHostAccountsToUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AttachHostAccountsToUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AttachHostAccountsToUser  AttachHostAccountsToUserRequest
  * @return AttachHostAccountsToUserResponse
 */
async function attachHostAccountsToUser(request: AttachHostAccountsToUserRequest): AttachHostAccountsToUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachHostAccountsToUser', 'POST', '/', 'json', false, 'json', request);
}

model AttachHostAccountsToUserGroupRequest {
  hosts: string(name='Hosts', description='The IDs of the host and host account that you want to authorize the user group to manage. You can specify up to 10 host IDs and up to 10 host account IDs for each host. You can specify only host IDs. In this case, the user group is authorized to manage only the specified hosts. For more information about this parameter, see the "Description of the Hosts parameter" section of this topic.

> You can call the [ListHosts](https://help.aliyun.com/document_detail/200665.html) operation to query the ID of the host and the [ListHostAccounts](https://help.aliyun.com/document_detail/204372.html) operation to query the ID of the host account.

This parameter is required.', example='[ {"HostId":"1"}, {"HostId":"2","HostAccountIds":["1","2","3",...]}, {"HostId":"3","HostAccountIds":["4","5","6",...]}, {"HostId":"4","HostAccountIds":["9","8","7",...]} ... ]', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host in which you want to authorize the user group to manage the specified hosts and host accounts.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host in which you want to authorize the user group to manage the specified hosts and host accounts.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  userGroupId: string(name='UserGroupId', description='The ID of the user group that you want to authorize to manage the specified hosts and host accounts.

> You can call the [ListUserGroups](https://help.aliyun.com/document_detail/204509.html) operation to query the ID of the user group.

This parameter is required.', example='1', position='Query'),
}

model AttachHostAccountsToUserGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
  results?: [ 
    {
      code?: string(name='Code', description='The return code that indicates whether the call was successful. Valid values:

*   **OK**: The call was successful.
*   **UNEXPECTED**: An unknown error occurred.
*   **INVALID_ARGUMENT**: A request parameter is invalid.
*   **OBJECT_NOT_FOUND**: The specified object on which you want to perform the operation does not exist.
*   **OBJECT_AlREADY_EXISTS**: The specified object on which you want to perform the operation already exists.', example='OK'),
      hostAccounts?: [ 
        {
          code?: string(name='Code', description='The return code that indicates whether the user group was authorized to manage the specified host account. Valid values:

*   **OK**: The call was successful.
*   **UNEXPECTED**: An unknown error occurred.
*   **INVALID_ARGUMENT**: A request parameter is invalid.
*   **OBJECT_NOT_FOUND**: The specified object on which you want to perform the operation does not exist.
*   **OBJECT_AlREADY_EXISTS**: The specified object on which you want to perform the operation already exists.', example='OK'),
          hostAccountId?: string(name='HostAccountId', description='The ID of the host account.', example='1'),
          message?: string(name='Message', description='This parameter is deprecated.', example='N/A'),
        }
      ](name='HostAccounts', description='The result of authorizing the specified user group to manage the specified host accounts.'),
      hostId?: string(name='HostId', description='The ID of the host.', example='1'),
      message?: string(name='Message', description='This parameter is deprecated.', example='N/A'),
      userGroupId?: string(name='UserGroupId', description='The ID of the user group.', example='1'),
    }
  ](name='Results', description='The result of the call.'),
}

model AttachHostAccountsToUserGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AttachHostAccountsToUserGroupResponseBody(name='body'),
}

/**
  * @description After you authorize a user group to manage specific hosts and host accounts, all the users in the user group have access to the authorized hosts and host accounts.
  * @param request  the request parameters of AttachHostAccountsToUserGroup  AttachHostAccountsToUserGroupRequest
  * @return AttachHostAccountsToUserGroupResponse
 */
async function attachHostAccountsToUserGroup(request: AttachHostAccountsToUserGroupRequest): AttachHostAccountsToUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachHostAccountsToUserGroup', 'POST', '/', 'json', false, 'json', request);
}

model AttachHostGroupAccountsToUserRequest {
  hostGroups: string(name='HostGroups', description='The ID of the host group and the name of the host account that you want to authorize the user to manage. You can specify up to 10 host group IDs and up to 10 host account names for each host group. You can specify only host group IDs. In this case, the user is authorized to manage only the specified host groups. For more information about this parameter, see the "Description of the HostGroups parameter" section of this topic.

> You can call the [ListHostGroups](https://help.aliyun.com/document_detail/201307.html) operation to query the ID of the host group and the [ListHostAccounts](https://help.aliyun.com/document_detail/204372.html) operation to query the name of the host account.

This parameter is required.', example='[ {"HostGroupId":"1"}, {"HostGroupId":"2","HostAccountNames":["root","111","abc"]}, {"HostGroupId":"3","HostAccountNames":["root","111","abc"]}, {"HostGroupId":"4","HostAccountNames":["root","111","abc"]} ]', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host for which you want to authorize the user to manage the host groups and host accounts.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host for which you want to authorize the user to manage the host groups and host accounts.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  userId: string(name='UserId', description='The ID of the user that you want to authorize to manage the host groups and host accounts.

> You can call the [ListUsers](https://help.aliyun.com/document_detail/204522.html) operation to query the ID of the user.

This parameter is required.', example='1', position='Query'),
}

model AttachHostGroupAccountsToUserResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
  results?: [ 
    {
      code?: string(name='Code', description='The return code that indicates whether the call was successful. Valid values:

*   **OK**: The call was successful.
*   **UNEXPECTED**: An unknown error occurred.
*   **INVALID_ARGUMENT**: A request parameter is invalid.
*   **OBJECT_NOT_FOUND**: The specified object on which you want to perform the operation does not exist.
*   **OBJECT_AlREADY_EXISTS**: The specified object on which you want to perform the operation already exists.', example='OK'),
      hostAccountNames?: [ 
        {
          code?: string(name='Code', description='The return code that indicates whether the user was authorized to manage the host account. Valid values:

*   **OK**: The call was successful.
*   **UNEXPECTED**: An unknown error occurred.
*   **INVALID_ARGUMENT**: A request parameter is invalid.
*   **OBJECT_NOT_FOUND**: The specified object on which you want to perform the operation does not exist.
*   **OBJECT_AlREADY_EXISTS**: The specified object on which you want to perform the operation already exists.', example='OK'),
          hostAccountName?: string(name='HostAccountName', description='The name of the host account.', example='root'),
          message?: string(name='Message', description='This parameter is deprecated.'),
        }
      ](name='HostAccountNames', description='The result of authorizing the user to manage the host accounts.'),
      hostGroupId?: string(name='HostGroupId', description='The ID of the host group.', example='1'),
      message?: string(name='Message', description='This parameter is deprecated.'),
      userId?: string(name='UserId', description='The ID of the user.', example='1'),
    }
  ](name='Results', description='The result of the call.'),
}

model AttachHostGroupAccountsToUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AttachHostGroupAccountsToUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AttachHostGroupAccountsToUser  AttachHostGroupAccountsToUserRequest
  * @return AttachHostGroupAccountsToUserResponse
 */
async function attachHostGroupAccountsToUser(request: AttachHostGroupAccountsToUserRequest): AttachHostGroupAccountsToUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachHostGroupAccountsToUser', 'POST', '/', 'json', false, 'json', request);
}

model AttachHostGroupAccountsToUserGroupRequest {
  hostGroups: string(name='HostGroups', description='The ID of the host group and the name of the host account that you want to authorize the user group to manage. You can specify up to 10 host group IDs and up to 10 host account names for each host group. You can specify only host group IDs. In this case, the user group is authorized to manage only the specified host groups. For more information about this parameter, see the "Description of the HostGroups parameter" section of this topic.

> You can call the [ListHostGroups](https://help.aliyun.com/document_detail/201307.html) operation to query the ID of the host group and the [ListHostAccounts](https://help.aliyun.com/document_detail/204372.html) operation to query the name of the host account.

This parameter is required.', example='[ {"HostGroupId":"1"}, {"HostGroupId":"2","HostAccountNames":["root","111","abc"]}, {"HostGroupId":"3","HostAccountNames":["root","111","abc"]}, {"HostGroupId":"4","HostAccountNames":["root","111","abc"]}]', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host for which you want to authorize the user group to manage the specified host groups and host accounts.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host for which you want to authorize the user group to manage the specified host groups and host accounts.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  userGroupId: string(name='UserGroupId', description='The ID of the user group that you want to authorize to manage the specified host groups and host accounts.

> You can call the [ListUserGroups](https://help.aliyun.com/document_detail/204509.html) operation to query the ID of the user group.

This parameter is required.', example='1', position='Query'),
}

model AttachHostGroupAccountsToUserGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
  results?: [ 
    {
      code?: string(name='Code', description='The return code that indicates whether the call was successful. Valid values:

*   **OK**: The call was successful.
*   **UNEXPECTED**: An unknown error occurred.
*   **INVALID_ARGUMENT**: A request parameter is invalid.
*   **OBJECT_NOT_FOUND**: The specified object on which you want to perform the operation does not exist.
*   **OBJECT_AlREADY_EXISTS**: The specified object on which you want to perform the operation already exists.', example='OK'),
      hostAccountNames?: [ 
        {
          code?: string(name='Code', description='The return code that indicates whether the user group was authorized to manage the specified host account. Valid values:

*   **OK**: The call was successful.
*   **UNEXPECTED**: An unknown error occurred.
*   **INVALID_ARGUMENT**: A request parameter is invalid.
*   **OBJECT_NOT_FOUND**: The specified object on which you want to perform the operation does not exist.
*   **OBJECT_AlREADY_EXISTS**: The specified object on which you want to perform the operation already exists.', example='OK'),
          hostAccountName?: string(name='HostAccountName', description='The name of the host account.', example='abc'),
          message?: string(name='Message', description='This parameter is deprecated.'),
        }
      ](name='HostAccountNames', description='The result of authorizing the user group to manage the specified host accounts.'),
      hostGroupId?: string(name='HostGroupId', description='The ID of the host group.', example='1'),
      message?: string(name='Message', description='This parameter is deprecated.'),
      userGroupId?: string(name='UserGroupId', description='The ID of the user group.', example='1'),
    }
  ](name='Results', description='The result of the call.'),
}

model AttachHostGroupAccountsToUserGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AttachHostGroupAccountsToUserGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AttachHostGroupAccountsToUserGroup  AttachHostGroupAccountsToUserGroupRequest
  * @return AttachHostGroupAccountsToUserGroupResponse
 */
async function attachHostGroupAccountsToUserGroup(request: AttachHostGroupAccountsToUserGroupRequest): AttachHostGroupAccountsToUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachHostGroupAccountsToUserGroup', 'POST', '/', 'json', false, 'json', request);
}

model ConfigInstanceSecurityGroupsRequest {
  authorizedSecurityGroups: [ string ](name='AuthorizedSecurityGroups', description='An array that consists of the IDs of authorized security groups.

This parameter is required.', example='sg-bp14u00sh39jvw5****', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-78v1gh****', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.', example='cn-hangzhou', position='Query'),
}

model ConfigInstanceSecurityGroupsResponseBody = {
  instanceId?: string(name='InstanceId', description='The ID of the bastion host for which security groups were configured.', example='bastionhost-cn-78v1gh****'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='0ECCC399-4D35-48A7-8379-5C6180E66235'),
}

model ConfigInstanceSecurityGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigInstanceSecurityGroupsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ConfigInstanceSecurityGroups  ConfigInstanceSecurityGroupsRequest
  * @return ConfigInstanceSecurityGroupsResponse
 */
async function configInstanceSecurityGroups(request: ConfigInstanceSecurityGroupsRequest): ConfigInstanceSecurityGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigInstanceSecurityGroups', 'POST', '/', 'json', false, 'json', request);
}

model ConfigInstanceWhiteListRequest {
  instanceId: string(name='InstanceId', description='The ID of the bastion host for which you want to configure a whitelist of public IP addresses.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-78v1gh****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.', example='cn-hangzhou', position='Query'),
  whiteList?: [ string ](name='WhiteList', description='The IP address whitelist that you want to configure.', example='10.162.XX.XX', position='Query'),
  whiteListPolicies?: [ 
    {
      description?: string(name='Description'),
      entry?: string(name='Entry'),
    }
  ](name='WhiteListPolicies', position='Query'),
}

model ConfigInstanceWhiteListResponseBody = {
  instanceId?: string(name='InstanceId', description='The ID of the bastion host for which a whitelist of public IP addresses is configured.', example='bastionhost-cn-78v1gh****'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='47820E32-5968-45CF-982F-09CB80DC180B'),
}

model ConfigInstanceWhiteListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigInstanceWhiteListResponseBody(name='body'),
}

/**
  * @description ## Usage notes
  * You can call this operation to configure a whitelist of public IP addresses for a bastion host. By default, a bastion host is accessible from all public IP addresses. If you want to allow the requests from specific public IP addresses, you can call this operation to add trusted IP addresses to the whitelist of the bastion host.  
  * ## Limits
  * You can call this operation up to 30 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of ConfigInstanceWhiteList  ConfigInstanceWhiteListRequest
  * @return ConfigInstanceWhiteListResponse
 */
async function configInstanceWhiteList(request: ConfigInstanceWhiteListRequest): ConfigInstanceWhiteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigInstanceWhiteList', 'POST', '/', 'json', false, 'json', request);
}

model CreateDatabaseRequest {
  activeAddressType: string(name='ActiveAddressType', description='The address type of the database to add. Valid values:

*   Public
*   Private

This parameter is required.', example='Public', position='Query'),
  comment?: string(name='Comment', description='The remarks of the database to add. The remarks can be up to 500 characters in length.', example='cpp', position='Query'),
  databaseName?: string(name='DatabaseName', description='The name of the database to add. This parameter is required if Source is set to **Local**.', example='Oracle', position='Query'),
  databasePort?: int32(name='DatabasePort', description='The port of the database. This parameter is required if Source is set to **Local**.', example='5433', position='Query'),
  databasePrivateAddress?: string(name='DatabasePrivateAddress', description='The internal IP address of the database. Specify an IPv4 address or a domain name.

>  This parameter is required if ActiveAddressType is set to Private.', example='pgm-uf6o******', position='Query'),
  databasePublicAddress?: string(name='DatabasePublicAddress', description='The public IP address of the database. Specify an IPv4 address or a domain name.

>  This parameter is required if ActiveAddressType is set to Public.', example='rm-uf65251k51******', position='Query'),
  databaseType: string(name='DatabaseType', description='The type of the database engine. Valid values:

*   **MySQL**
*   **Oracle**
*   **PostgreSQL**
*   **SQLServer**

This parameter is required.', example='MySQL', position='Query'),
  instanceId: string(name='InstanceId', description='The bastion host ID.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-7mz2g5hu20e', position='Query'),
  networkDomainId?: string(name='NetworkDomainId', description='The ID of the network domain to which the database to add belongs.

>  You can call the [ListNetworkDomains](https://help.aliyun.com/document_detail/2758827.html) operation to query the network domain ID.', example='1', position='Query'),
  polarDBEndpointType?: string(name='PolarDBEndpointType', description='The endpoint type of the PolarDB database. This parameter is required if Source is set to PolarDB. Valid values:

*   Cluster
*   Primary', example='Cluster', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-shanghai', position='Query'),
  source: string(name='Source', description='The type of the database to add. Valid values:

*   Local: on-premises database.
*   Rds: ApsaraDB RDS instance.
*   PolarDB: PolarDB cluster.

This parameter is required.', example='Local', position='Query'),
  sourceInstanceId?: string(name='SourceInstanceId', description='The instance ID of the database to add.

> This parameter is required if **Source** is set to **Rds** or **PolarDB**.', example='i-bp19ienyt0yax748****', position='Query'),
  sourceInstanceRegionId?: string(name='SourceInstanceRegionId', description='The region ID of the database to add.

>  This parameter is required if **Source** is set to **Rds** or **PolarDB**.', example='cn-shanghai', position='Query'),
}

model CreateDatabaseResponseBody = {
  databaseId?: string(name='DatabaseId', description='The database ID.', example='334'),
  requestId?: string(name='RequestId', description='The request ID.', example='98EDD923-236C-5A88-88E7-4979A91B9325'),
}

model CreateDatabaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDatabaseResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDatabase  CreateDatabaseRequest
  * @return CreateDatabaseResponse
 */
async function createDatabase(request: CreateDatabaseRequest): CreateDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDatabase', 'POST', '/', 'json', false, 'json', request);
}

model CreateDatabaseAccountRequest {
  databaseAccountName: string(name='DatabaseAccountName', description='The username of the database account to be created. The username can be up to 128 characters in length.

This parameter is required.', example='root', position='Query'),
  databaseId: string(name='DatabaseId', description='The ID of the database for which you want to create a database account.

>  You can call the [ListDatabaseAccounts](https://help.aliyun.com/document_detail/2758839.html) operation to query the database account ID.

This parameter is required.', example='3', position='Query'),
  databaseSchema?: string(name='DatabaseSchema', description='The name of the database. This parameter is required for PostgreSQL and Oracle databases.', example='orcl', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host for which you want to create a database account.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-5yd34ol020a', position='Query'),
  loginAttribute?: string(name='LoginAttribute', description='The logon attribute. This parameter is required for Oracle databases. Valid values:

*   SERVICENAME
*   SID', example='SID', position='Query'),
  password?: string(name='Password', description='The password of the database account to be created.', example='MCQ******', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host for which you want to create a database account.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-shanghai', position='Query'),
}

model CreateDatabaseAccountResponseBody = {
  databaseAccountId?: string(name='DatabaseAccountId', description='The ID of the database account.', example='40'),
  requestId?: string(name='RequestId', description='The request ID.', example='B07C465D-B09F-54DD-8FEC-90788BEABAFC'),
}

model CreateDatabaseAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDatabaseAccountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDatabaseAccount  CreateDatabaseAccountRequest
  * @return CreateDatabaseAccountResponse
 */
async function createDatabaseAccount(request: CreateDatabaseAccountRequest): CreateDatabaseAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDatabaseAccount', 'POST', '/', 'json', false, 'json', request);
}

model CreateExportConfigJobRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model CreateExportConfigJobResponseBody = {
  jobId?: string(name='JobId', example='1'),
  requestId?: string(name='RequestId', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
}

model CreateExportConfigJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateExportConfigJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateExportConfigJob  CreateExportConfigJobRequest
  * @return CreateExportConfigJobResponse
 */
async function createExportConfigJob(request: CreateExportConfigJobRequest): CreateExportConfigJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateExportConfigJob', 'POST', '/', 'json', false, 'json', request);
}

model CreateHostRequest {
  activeAddressType: string(name='ActiveAddressType', description='The endpoint type of the host that you want to create. Valid values:

*   **Public**: public endpoint
*   **Private**: internal endpoint

This parameter is required.', example='Public', position='Query'),
  comment?: string(name='Comment', description='The description of the host that you want to create. The value can be up to 500 characters in length.', example='Local Host', position='Query'),
  hostName: string(name='HostName', description='The name of the host that you want to create. The name can be up to 128 characters in length.

This parameter is required.', example='host01', position='Query'),
  hostPrivateAddress?: string(name='HostPrivateAddress', description='The internal endpoint of the host that you want to create. You can set this parameter to a domain name or an IP address.

> This parameter is required if the **ActiveAddressType** parameter is set to **Private**.', example='192.168.XX.XX', position='Query'),
  hostPublicAddress?: string(name='HostPublicAddress', description='The public endpoint of the host that you want to create. You can set this parameter to a domain name or an IP address.

> This parameter is required if the **ActiveAddressType** parameter is set to **Public**.', example='172.16.XX.XX', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host in which you want to create the host.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  instanceRegionId?: string(name='InstanceRegionId', description='The ID of the region to which the ECS instance or the host in an ApsaraDB MyBase dedicated cluster belongs.

> This parameter is required if the **Source** parameter is set to **Ecs** or **Rds**.', example='cn-hangzhou', position='Query'),
  networkDomainId?: string(name='NetworkDomainId', description='The ID of the network domain to which the host to be imported belongs.

> You can call the [ListNetworkDomains](https://help.aliyun.com/document_detail/2758827.html) operation to query the network domain ID.', example='1', position='Query'),
  OSType: string(name='OSType', description='The operating system of the host that you want to create. Valid values:

*   **Linux**
*   **Windows**

This parameter is required.', example='Linux', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host to which you want to import the host.

> For information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  source: string(name='Source', description='The source of the host that you want to create. Valid values:

*   **Local**: a host in a data center
*   **Ecs**: an Elastic Compute Service (ECS) instance
*   **Rds**: a host in an ApsaraDB MyBase dedicated cluster

This parameter is required.', example='Local', position='Query'),
  sourceInstanceId?: string(name='SourceInstanceId', description='The ID of the ECS instance or the host in an ApsaraDB MyBase dedicated cluster.

> This parameter is required if the **Source** parameter is set to **Ecs** or **Rds**.', example='i-dfabfda', position='Query'),
}

model CreateHostResponseBody = {
  hostId?: string(name='HostId', description='The ID of the host.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
}

model CreateHostResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateHostResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateHost  CreateHostRequest
  * @return CreateHostResponse
 */
async function createHost(request: CreateHostRequest): CreateHostResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateHost', 'POST', '/', 'json', false, 'json', request);
}

model CreateHostAccountRequest {
  hostAccountName: string(name='HostAccountName', description='The name of the host account. The name can be up to 128 characters in length.

This parameter is required.', example='abc', position='Query'),
  hostId: string(name='HostId', description='The ID of the host to which you want to add a host account.

>  You can call the [ListHosts](https://help.aliyun.com/document_detail/200665.html) operation to query the ID of the host.

This parameter is required.', example='1', position='Query'),
  hostShareKeyId?: string(name='HostShareKeyId', description='The ID of the shared key.', example='1', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host in which you want to add a host account to the host.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  passPhrase?: string(name='PassPhrase', description='The passphrase for the private key of the host account.

> You can configure this parameter only if ProtocolName is set to SSH. You do not need to configure this parameter if ProtocolName is set to RDP.', example='****', position='Query'),
  password?: string(name='Password', description='The password of the host account.', example='****', position='Query'),
  privateKey?: string(name='PrivateKey', description='The private key of the host account. Specify a Base64-encoded string.

> This parameter is valid only if ProtocolName is set to SSH. You do not need to configure this parameter if ProtocolName is set to RDP. You can configure a password and a private key for the host account at the same time. If both a password and a private key are configured for the host account, Bastionhost preferentially uses the private key for logon.', example='****', position='Query'),
  privilegeType?: string(name='PrivilegeType', position='Query'),
  protocolName: string(name='ProtocolName', description='The protocol of the host to which you want to add a host account.

Valid values:

*   SSH
*   RDP

This parameter is required.', example='SSH', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host in which you want to add a host account to the host.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  rotationMode?: string(name='RotationMode', position='Query'),
}

model CreateHostAccountResponseBody = {
  hostAccountId?: string(name='HostAccountId', description='The operation that you want to perform. Set the value to **CreateHostAccount**.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
}

model CreateHostAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateHostAccountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateHostAccount  CreateHostAccountRequest
  * @return CreateHostAccountResponse
 */
async function createHostAccount(request: CreateHostAccountRequest): CreateHostAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateHostAccount', 'POST', '/', 'json', false, 'json', request);
}

model CreateHostGroupRequest {
  comment?: string(name='Comment', description='The remarks of the asset group. The remarks can be up to 500 characters in length.', example='Local host group.', position='Query'),
  hostGroupName: string(name='HostGroupName', description='The name of the asset group. The name can be up to 128 characters in length.

This parameter is required.', example='HostGroup01', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host on which you want to create an asset group.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host on which you want to create an asset group.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model CreateHostGroupResponseBody = {
  hostGroupId?: string(name='HostGroupId', description='The asset group ID.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
}

model CreateHostGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateHostGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateHostGroup  CreateHostGroupRequest
  * @return CreateHostGroupResponse
 */
async function createHostGroup(request: CreateHostGroupRequest): CreateHostGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateHostGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateHostShareKeyRequest {
  hostShareKeyName: string(name='HostShareKeyName', description='The name of the shared key that you want to create. The name can be a maximum of 128 characters in length.

This parameter is required.', example='name', position='Query'),
  instanceId: string(name='InstanceId', description='The bastion host ID.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  passPhrase?: string(name='PassPhrase', description='The password of the private key. The value is a Base64-encoded string.', example='*****', position='Query'),
  privateKey: string(name='PrivateKey', description='The private key. The value is a Base64-encoded string.

>  You can specify a Rivest-Shamir-Adleman (RSA) key that is generated by using the ssh-keygen command or a key that is generated by using the Ed25519 algorithm.

This parameter is required.', example='****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model CreateHostShareKeyResponseBody = {
  hostShareKeyId?: long(name='HostShareKeyId', description='The ID of the shared key.', example='10235'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
}

model CreateHostShareKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateHostShareKeyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateHostShareKey  CreateHostShareKeyRequest
  * @return CreateHostShareKeyResponse
 */
async function createHostShareKey(request: CreateHostShareKeyRequest): CreateHostShareKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateHostShareKey', 'POST', '/', 'json', false, 'json', request);
}

model CreateNetworkDomainRequest {
  comment?: string(name='Comment', description='The remarks of the network domain. The remarks can be up to 500 characters in length.', example='comment', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host for which you want to create a network domain.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-lbj3bw4ma02', position='Query'),
  networkDomainName: string(name='NetworkDomainName', description='The name of the network domain that you want to create. The name can be up to 128 characters in length.

This parameter is required.', position='Query'),
  networkDomainType: string(name='NetworkDomainType', description='The connection mode of the network domain to be created. Valid values:

*   Direct
*   Proxy

This parameter is required.', example='Proxy', position='Query'),
  proxies?: [ 
    {
      address?: string(name='Address', description='The IP address of the proxy server.', example='`47.104.**.**`'),
      nodeType?: string(name='NodeType', description='The node type of the proxy server. Valid values:

- **Master**: primary proxy server.
- **Slave**: secondary proxy server.', example='Master'),
      password?: string(name='Password', description='The Base64-encoded password of the proxy server.', example='***'),
      port?: int32(name='Port', description='The port of the proxy server.', example='22'),
      proxyType?: string(name='ProxyType', description='The proxy type. Valid values:

- **SSHProxy**
- **HTTPProxy**
- **Socks5Proxy**', example='SSHProxy'),
      user?: string(name='User', description='The username of the proxy server.', example='root'),
    }
  ](name='Proxies', description='The information about the proxy servers.', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host for which you want to create a network domain.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model CreateNetworkDomainResponseBody = {
  networkDomainId?: string(name='NetworkDomainId', description='The ID of the network domain.', example='31'),
  requestId?: string(name='RequestId', description='The request ID.', example='A2873E9C-A7EA-5735-845C-65D3792623D2'),
}

model CreateNetworkDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateNetworkDomainResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateNetworkDomain  CreateNetworkDomainRequest
  * @return CreateNetworkDomainResponse
 */
async function createNetworkDomain(request: CreateNetworkDomainRequest): CreateNetworkDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNetworkDomain', 'POST', '/', 'json', false, 'json', request);
}

model CreateOperationTicketRequest {
  approveComment: string(name='ApproveComment', description='This parameter is required.', position='Query'),
  assetAccountName: string(name='AssetAccountName', description='This parameter is required.', example='root', position='Query'),
  assetId: string(name='AssetId', description='This parameter is required.', example='2', position='Query'),
  effectEndTime?: long(name='EffectEndTime', example='1679393152', position='Query'),
  effectStartTime?: long(name='EffectStartTime', example='1685600242', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  isOneTimeEffect?: boolean(name='IsOneTimeEffect', example='false', position='Query'),
  protocolName: string(name='ProtocolName', description='This parameter is required.', example='SSH', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model CreateOperationTicketResponseBody = {
  operationTicketId?: string(name='OperationTicketId', example='2'),
  requestId?: string(name='RequestId', example='0ECCC399-4D35-48A7-8379-5C6180E66235'),
}

model CreateOperationTicketResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOperationTicketResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateOperationTicket  CreateOperationTicketRequest
  * @return CreateOperationTicketResponse
 */
async function createOperationTicket(request: CreateOperationTicketRequest): CreateOperationTicketResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOperationTicket', 'POST', '/', 'json', false, 'json', request);
}

model CreatePolicyRequest {
  comment?: string(name='Comment', description='The remarks of the control policy. The remarks can be up to 500 characters in length.', example='comment', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host for which you want to create a control policy.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-20p364c1w0g', position='Query'),
  policyName: string(name='PolicyName', description='The name of the control policy. The name can be up to 128 characters in length.

This parameter is required.', example='policytest', position='Query'),
  priority?: string(name='Priority', description='The priority of the control policy.

*   Valid values: 1 to 100. The default value is 1, which indicates the highest priority.
*   You can configure the same priority for different control policies. If multiple control policies have the same priority, the control policy that is created at the latest point in time has the highest priority. If a command control policy and a command approval policy contain the same commands, the commands are prioritized in descending order: reject, allow, and approve. In access control policies, a blacklist has a higher priority than a whitelist.', example='1', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host for which you want to create a control policy.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-shanghai', position='Query'),
}

model CreatePolicyResponseBody = {
  policyId?: string(name='PolicyId', description='The control policy ID.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='7E68165E-1191-5CC2-B54B-5EF7390A5400'),
}

model CreatePolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreatePolicy  CreatePolicyRequest
  * @return CreatePolicyResponse
 */
async function createPolicy(request: CreatePolicyRequest): CreatePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePolicy', 'POST', '/', 'json', false, 'json', request);
}

model CreateRuleRequest {
  comment?: string(name='Comment', description='The remarks of the authorization rule. The remarks can be up to 500 characters in length.', example='comment', position='Query'),
  databases?: [ 
    {
      databaseAccountIds?: [ string ](name='DatabaseAccountIds', description='An array that consists of database account IDs.'),
      databaseId?: string(name='DatabaseId', description='The database ID.', example='[
    {
        "DatabaseId": "1"
    }
]'),
    }
  ](name='Databases', description='The information about the database that runs on your server.', position='Query'),
  effectiveEndTime?: long(name='EffectiveEndTime', description='The end time of the validity period of the authorization rule. Specify a UNIX timestamp representing the number of seconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1672502400', position='Query'),
  effectiveStartTime?: long(name='EffectiveStartTime', description='The start time of the validity period of the authorization rule. Specify a UNIX timestamp representing the number of seconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1669630029', position='Query'),
  hostGroups?: [ 
    {
      hostAccountNames?: [ string ](name='HostAccountNames', description='An array that consists of asset account names.'),
      hostGroupId?: string(name='HostGroupId', description='The asset group ID.', example='[{"HostGroupId":"1"}]'),
    }
  ](name='HostGroups', description='The information about the asset group that you want to authorize to manage.', position='Query'),
  hosts?: [ 
    {
      hostAccountIds?: [ string ](name='HostAccountIds', description='An array that consists of host account IDs.'),
      hostId?: string(name='HostId', description='The host ID.', example='[{"HostId":"1"}]'),
    }
  ](name='Hosts', description='The host information.', position='Query'),
  instanceId: string(name='InstanceId', description='The bastion host ID.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-5yd2ymfsa0e', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  ruleName: string(name='RuleName', description='The name of the authorization rule. The name can be up to 128 characters in length.

This parameter is required.', example='rule', position='Query'),
  userGroupIds?: [ string ](name='UserGroupIds', description='An array that consists of user group IDs.', position='Query'),
  userIds?: [ string ](name='UserIds', description='An array that consists of user IDs.', position='Query'),
}

model CreateRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='BFA818E3-0A53-51F4-8DB5-AF2A62A6D042'),
  ruleId?: string(name='RuleId', description='The authorization rule ID.', example='1'),
}

model CreateRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateRule  CreateRuleRequest
  * @return CreateRuleResponse
 */
async function createRule(request: CreateRuleRequest): CreateRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateUserRequest {
  comment?: string(name='Comment', description='The remarks of the user that you want to add. The remarks can be up to 500 characters in length.', example='comment', position='Query'),
  displayName?: string(name='DisplayName', description='The display name of the user that you want to add. The display name can be up to 128 characters in length.

>  If you leave this parameter empty, the logon name is used as the display name.', example='Bob', position='Query'),
  effectiveEndTime?: long(name='EffectiveEndTime', description='The end time of the validity period of the user. Specify a UNIX timestamp. Unit: seconds.', example='1672502400', position='Query'),
  effectiveStartTime?: long(name='EffectiveStartTime', description='The start time of the validity period of the user. Specify a UNIX timestamp. Unit: seconds.', example='1669630029', position='Query'),
  email?: string(name='Email', description='The email address of the user that you want to add.

> 

*   This parameter is required if TwoFactorStatus is set to Enable and TwoFactorMethods is set to email, or if TwoFactorStatus is set to Global and TwoFactorMethods is set to email in the global two-factor authentication settings.

*   You can call the [GetInstanceTwoFactor](https://help.aliyun.com/document_detail/462968.html) operation to query the global two-factor authentication settings.', example='username@example.com', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host to which you want to add a user.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  language?: string(name='Language', description='This parameter is required if LanguageStatus is set to Custom. Valid values:

*   **zh-cn**: simplified Chinese.
*   **en**: English.', example='en', position='Query'),
  languageStatus?: string(name='LanguageStatus', description='Specifies whether to send notifications in the language specified in the global settings or a custom language.

*   **Global**
*   **Custom**

>  If you leave this parameter empty, the default value Global is used.', example='Custom', position='Query'),
  mobile?: string(name='Mobile', description='The mobile phone number of the user that you want to add.

> 

*   This parameter is required if TwoFactorStatus is set to Enable and TwoFactorMethods is set to sms or dingtalk, or if TwoFactorStatus is set to Global and TwoFactorMethods is set to sms or dingtalk in the global two-factor authentication settings.

*   You can call the [GetInstanceTwoFactor](https://help.aliyun.com/document_detail/462968.html) operation to query the global two-factor authentication settings.', example='1359999****', position='Query'),
  mobileCountryCode?: string(name='MobileCountryCode', description='The location where the mobile phone number of the user is registered. Default value: CN. Valid values:

*   **CN**: the Chinese mainland, whose international dialing code is +86.
*   **HK**: Hong Kong (China), whose international dialing code is +852.
*   **MO**: Macao (China), whose international dialing code is +853.
*   **TW**: Taiwan (China), whose international dialing code is +886.
*   **RU**: Russia, whose international dialing code is +7.
*   **SG**: Singapore, whose international dialing code is +65.
*   **MY**: Malaysia, whose international dialing code is +60.
*   **ID**: Indonesia, whose international dialing code is +62.
*   **DE**: Germany, whose international dialing code is +49.
*   **AU**: Australia, whose international dialing code is +61.
*   **US**: US, whose international dialing code is +1.
*   **AE**: United Arab Emirates, whose international dialing code is +971.
*   **JP**: Japan, whose international dialing code is +81.
*   **GB**: UK, whose international dialing code is +44.
*   **IN**: India, whose international dialing code is +91.
*   **KR**: Republic of Korea, whose international dialing code is +82.
*   **PH**: Philippines, whose international dialing code is +63.
*   **CH**: Switzerland, whose international dialing code is +41.
*   **SE:** Sweden, whose international dialing code is +46.
*   **SA:** Saudi Arabia, whose international dialing code is +966.', example='CN', position='Query'),
  needResetPassword?: boolean(name='NeedResetPassword', description='Specifies whether password reset is required upon the next logon. Valid values:

*   **true**
*   **false**

>  If you leave this parameter empty, the default value false is used.', example='true', position='Query'),
  password?: string(name='Password', description='The logon password of the user that you want to add. The logon password must be 8 to 128 characters in length. It must contain uppercase letters, lowercase letters, digits, and special characters.

> This parameter is required if Source is set to Local.', example='213****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host to which you want to add a user.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  source: string(name='Source', description='The type of the user that you want to add. Valid values:

*   **Local**: a local user.
*   **Ram**: a RAM user.
*   **AD**: an AD-authenticated user.
*   **LDAP**: an LDAP-authenticated user.

This parameter is required.', example='local', position='Query'),
  sourceUserId?: string(name='SourceUserId', description='The unique ID of the user that you want to add.

> 

*   This parameter uniquely identifies a RAM user of the bastion host. This parameter is required if Source is set to Ram. You can call the [ListUsers](https://help.aliyun.com/document_detail/28684.html) operation in RAM to obtain the unique ID of the user from the UserId response parameter.

*   This parameter is required if Source is set to AD or LDAP. Specify the distinguished name (DN) of the Active Directory (AD)-authenticated user or Lightweight Directory Access Protocol (LDAP)-authenticated user that you want to add.', example='122748924538****', position='Query'),
  twoFactorMethods?: string(name='TwoFactorMethods', description='The two-factor authentication method. You can select only one method. Valid values:

*   **sms**: text message-based two-factor authentication.
*   **email**: email-based two-factor authentication.
*   **dingtalk**: DingTalk-based two-factor authentication.
*   **totp OTP**: one-time password (OTP) token-based two-factor authentication.

>  If TwoFactorStatus is set to Enable, you must select one of the preceding values for TwoFactorMethods.', example='["sms"]', position='Query'),
  twoFactorStatus?: string(name='TwoFactorStatus', description='Specifies whether two-factor authentication is enabled for the user. Valid values:

*   **Global**: The global settings apply.
*   **Disable**: Two-factor authentication is disabled.
*   **Enable**: Two-factor authentication is enabled and user-specific settings apply.

>  If you leave this parameter empty, the default value Global is used.', example='Enable', position='Query'),
  userName: string(name='UserName', description='The logon name of the user that you want to add. The logon name must be 1 to 128 characters in length and can contain only letters, digits, and underscores (_).

This parameter is required.', example='abc_def', position='Query'),
}

model CreateUserResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
  userId?: string(name='UserId', description='The ID of the user that is added.', example='1'),
}

model CreateUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateUserResponseBody(name='body'),
}

/**
  * @description You can call the CreateUser operation to add local users, Resource Access Management (RAM) users, Active Directory (AD)-authenticated users, or Lightweight Directory Access Protocol (LDAP)-authenticated users to a bastion host. After a Bastionhost administrator adds a user to a bastion host, O\\&M engineers can log on to the bastion host as the user to perform O\\&M operations on the hosts that the user is authorized to manage.
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  * @param request  the request parameters of CreateUser  CreateUserRequest
  * @return CreateUserResponse
 */
async function createUser(request: CreateUserRequest): CreateUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateUser', 'POST', '/', 'json', false, 'json', request);
}

model CreateUserGroupRequest {
  comment?: string(name='Comment', description='The description of the user group. The description can be up to 500 characters in length.', example='comment', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host for which you want to create a user group.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host for which you want to create a user group.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  userGroupName: string(name='UserGroupName', description='The name of the user group that you want to create. This name can be a up to 128 characters in length.

This parameter is required.', example='group', position='Query'),
}

model CreateUserGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
  userGroupId?: string(name='UserGroupId', description='The ID of the user group.', example='1'),
}

model CreateUserGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateUserGroupResponseBody(name='body'),
}

/**
  * @description You can call this operation to create a user group for a bastion host as an administrator. Then, you can call the [AddUsersToGroup](https://help.aliyun.com/document_detail/204600.html) operation to add users to the user group at a time. After you add the users to the user group, you can authorize and manage the users in a centralized manner.
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of CreateUserGroup  CreateUserGroupRequest
  * @return CreateUserGroupResponse
 */
async function createUserGroup(request: CreateUserGroupRequest): CreateUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateUserGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateUserPublicKeyRequest {
  comment?: string(name='Comment', description='The description of the public key. The description can be up to 500 characters in length.', example='comment', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host on which you want to create a public key for the user.

> You can call the [listinstances](https://help.aliyun.com/document_detail/204522.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  publicKey: string(name='PublicKey', description='The public key. Encode the value by using the Base64 algorithm.

This parameter is required.', example='c3NoLWVkMjU1MTkgQUFBQUMzTnphQzFsWkRJMU5URTVBQUFBSUxGQnQxUUpyT3IxK2hTTGRkbERMZUx4WGRIZ3hBalBxWHJIbWNFNWxqSk8gbm93Y29kZXJAbm93Y29kZXJkZU1hY0Jvb2stUHJvLmxvY2Fs', position='Query'),
  publicKeyName: string(name='PublicKeyName', description='The name of the public key.

This parameter is required.', example='Public key of a user', position='Query'),
  regionId?: string(name='RegionId', description='Specifies the region ID of the bastion host on which you want to create a public key for the user.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  userId: string(name='UserId', description='The ID of the user for whom you want to create a public key.

>  You can call the [ListUsers](https://help.aliyun.com/document_detail/204522.html) operation to query the user ID.

This parameter is required.', example='1', position='Query'),
}

model CreateUserPublicKeyResponseBody = {
  publicKeyId?: string(name='PublicKeyId', description='The ID of the public key.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='5EAB922E-F476-5DFA-9290-313C608E724B'),
}

model CreateUserPublicKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateUserPublicKeyResponseBody(name='body'),
}

/**
  * @description You can call the CreateUserPublicKey operation to create a public key for the specified user of a bastion host.
  * @param request  the request parameters of CreateUserPublicKey  CreateUserPublicKeyRequest
  * @return CreateUserPublicKeyResponse
 */
async function createUserPublicKey(request: CreateUserPublicKeyRequest): CreateUserPublicKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateUserPublicKey', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDatabaseRequest {
  databaseId: string(name='DatabaseId', description='The ID of the database that you want to delete.

> You can call the [ListDatabases](https://help.aliyun.com/document_detail/2758822.html) operation to query the database ID.

This parameter is required.', example='11', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host from which you want to delete the database.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-78v1ghxxxxx', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model DeleteDatabaseResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='81500666-d7f5-4143-8329-0223cc738105'),
}

model DeleteDatabaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDatabaseResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDatabase  DeleteDatabaseRequest
  * @return DeleteDatabaseResponse
 */
async function deleteDatabase(request: DeleteDatabaseRequest): DeleteDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDatabase', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDatabaseAccountRequest {
  databaseAccountId: string(name='DatabaseAccountId', description='The ID of the database account that you want to delete.

>  You can call the [ListDatabaseAccounts](https://help.aliyun.com/document_detail/2758839.html) operation to query the database account ID.

This parameter is required.', example='9', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host from which you want to delete the database account.

> You can call the DescribeInstances operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host from which you want to delete the database account.

> For more information about the mapping between region IDs and region names, [see Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model DeleteDatabaseAccountResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='81500666-d7f5-4143-8329-0223cc738105'),
}

model DeleteDatabaseAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDatabaseAccountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDatabaseAccount  DeleteDatabaseAccountRequest
  * @return DeleteDatabaseAccountResponse
 */
async function deleteDatabaseAccount(request: DeleteDatabaseAccountRequest): DeleteDatabaseAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDatabaseAccount', 'POST', '/', 'json', false, 'json', request);
}

model DeleteHostRequest {
  hostId: string(name='HostId', description='The ID of the host that you want to delete.

> You can call the [ListHosts](https://help.aliyun.com/document_detail/200665.html) operation to query the ID of the host.

This parameter is required.', example='1', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host on which you want to delete the host.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host on which you want to delete the host.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model DeleteHostResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
}

model DeleteHostResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteHostResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteHost  DeleteHostRequest
  * @return DeleteHostResponse
 */
async function deleteHost(request: DeleteHostRequest): DeleteHostResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteHost', 'POST', '/', 'json', false, 'json', request);
}

model DeleteHostAccountRequest {
  hostAccountId: string(name='HostAccountId', description='The ID of the host account that you want to remove.

>  You can call the [ListHostAccounts](https://help.aliyun.com/document_detail/204372.html) operation to query the ID of the host account.

This parameter is required.', example='1', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host from which you want to remove the host account.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host from which you want to remove the host account.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model DeleteHostAccountResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
}

model DeleteHostAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteHostAccountResponseBody(name='body'),
}

/**
  * @description ## Usage notes
  * This interface is used to delete individual host accounts. If a host account is no longer in use, you can invoke this interface to delete the host account for that host that has been configured on the bastion.
  * >  After you remove the host account, you must enter the username and password of the host when you log on to the host in Bastionhost.  
  * ## QPS Limit
  * The single-user QPS limit of this interface is 10 times/second. If the limit is exceeded, the API call will be stream-limited, which may affect your business, please call reasonably.
  * @param request  the request parameters of DeleteHostAccount  DeleteHostAccountRequest
  * @return DeleteHostAccountResponse
 */
async function deleteHostAccount(request: DeleteHostAccountRequest): DeleteHostAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteHostAccount', 'POST', '/', 'json', false, 'json', request);
}

model DeleteHostGroupRequest {
  hostGroupId: string(name='HostGroupId', description='The ID of the asset group that you want to delete.

> You can call the [ListHostGroups](https://help.aliyun.com/document_detail/201307.html) operation to query the asset group ID.

This parameter is required.', example='1', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host whose asset group you want to delete.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host whose asset group you want to delete.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model DeleteHostGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
}

model DeleteHostGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteHostGroupResponseBody(name='body'),
}

/**
  * @description You can call this operation to delete a single host group. If you no longer need to perform O\\&M operations on all hosts in a host group, you can call this operation to delete the host group.
  * ### Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of DeleteHostGroup  DeleteHostGroupRequest
  * @return DeleteHostGroupResponse
 */
async function deleteHostGroup(request: DeleteHostGroupRequest): DeleteHostGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteHostGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteHostShareKeyRequest {
  hostShareKeyId?: string(name='HostShareKeyId', description='The shared key ID.

>  You must specify this parameter. You can call the [ListHostShareKeys](https://help.aliyun.com/document_detail/462973.html) operation to query the shared key ID.', example='11206', position='Query'),
  instanceId: string(name='InstanceId', description='The bastion host ID.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model DeleteHostShareKeyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
}

model DeleteHostShareKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteHostShareKeyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteHostShareKey  DeleteHostShareKeyRequest
  * @return DeleteHostShareKeyResponse
 */
async function deleteHostShareKey(request: DeleteHostShareKeyRequest): DeleteHostShareKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteHostShareKey', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNetworkDomainRequest {
  instanceId: string(name='InstanceId', description='The ID of the bastion host whose network domain you want to delete.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost_std_intl-sg-uq833e2dz02', position='Query'),
  networkDomainId: string(name='NetworkDomainId', description='The ID of the network domain to be deleted.

This parameter is required.', example='2', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host whose network domain you want to delete.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model DeleteNetworkDomainResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='66B9D942-E3C8-5068-A479-5A7B7BF3DE35'),
}

model DeleteNetworkDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNetworkDomainResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteNetworkDomain  DeleteNetworkDomainRequest
  * @return DeleteNetworkDomainResponse
 */
async function deleteNetworkDomain(request: DeleteNetworkDomainRequest): DeleteNetworkDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNetworkDomain', 'POST', '/', 'json', false, 'json', request);
}

model DeletePolicyRequest {
  instanceId: string(name='InstanceId', description='The ID of the bastion host whose control policy you want to delete.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  policyId: string(name='PolicyId', description='The ID of the control policy to be deleted.

>  You can call the [ListPolicies](https://help.aliyun.com/document_detail/2758876.html) operation to query the control policy ID.

This parameter is required.', example='1', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model DeletePolicyResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
}

model DeletePolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeletePolicy  DeletePolicyRequest
  * @return DeletePolicyResponse
 */
async function deletePolicy(request: DeletePolicyRequest): DeletePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePolicy', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRuleRequest {
  instanceId: string(name='InstanceId', description='The ID of the bastion host from which you want to delete the authorization rule.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host from which you want to delete the authorization rule.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  ruleId: string(name='RuleId', description='The ID of the authorization rule that you want to delete.

>  You can call the [ListRules](https://help.aliyun.com/document_detail/2758868.html) operation to query the authorization rule ID.

This parameter is required.', example='5', position='Query'),
}

model DeleteRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
}

model DeleteRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteRule  DeleteRuleRequest
  * @return DeleteRuleResponse
 */
async function deleteRule(request: DeleteRuleRequest): DeleteRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteUserRequest {
  instanceId: string(name='InstanceId', description='The ID of the bastion host to which the user to be deleted belongs.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host to which the user to be deleted belongs.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  userId: string(name='UserId', description='The ID of the user to be deleted.

>  You can call the [ListUsers](https://help.aliyun.com/document_detail/204522.html) operation to query the user ID.

This parameter is required.', example='1', position='Query'),
}

model DeleteUserResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
}

model DeleteUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteUser  DeleteUserRequest
  * @return DeleteUserResponse
 */
async function deleteUser(request: DeleteUserRequest): DeleteUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUser', 'POST', '/', 'json', false, 'json', request);
}

model DeleteUserGroupRequest {
  instanceId: string(name='InstanceId', description='The ID of the bastion host on which you want to delete the user group.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host on which you want to delete the user group.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  userGroupId: string(name='UserGroupId', description='The ID of the user group that you want to delete.

> You can call the [ListUserGroups](https://help.aliyun.com/document_detail/204509.html) operation to query the ID of the user group.

This parameter is required.', example='１', position='Query'),
}

model DeleteUserGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
}

model DeleteUserGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteUserGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteUserGroup  DeleteUserGroupRequest
  * @return DeleteUserGroupResponse
 */
async function deleteUserGroup(request: DeleteUserGroupRequest): DeleteUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUserGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteUserPublicKeyRequest {
  instanceId: string(name='InstanceId', description='The ID of the Bastionhost instance to which the users to be queried belong.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the Bastionhost instance.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  publicKeyId: string(name='PublicKeyId', description='The public key ID.

>  You can call the [ListUserPublicKeys](https://help.aliyun.com/document_detail/477555.html) operation to query the public key ID.

This parameter is required.', example='11', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host. For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model DeleteUserPublicKeyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
}

model DeleteUserPublicKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteUserPublicKeyResponseBody(name='body'),
}

/**
  * @description You can call the DeleteUserPublicKey operation to delete a public key from the specified user of a bastion host.
  * @param request  the request parameters of DeleteUserPublicKey  DeleteUserPublicKeyRequest
  * @return DeleteUserPublicKeyResponse
 */
async function deleteUserPublicKey(request: DeleteUserPublicKeyRequest): DeleteUserPublicKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUserPublicKey', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceAttributeRequest {
  instanceId: string(name='InstanceId', description='The ID of the Bastionhost instance.

This parameter is required.', example='bastionhost-cn-78v1ghxxxxx', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
}

model DescribeInstanceAttributeResponseBody = {
  instanceAttribute?: {
    appOperationModule?: string(name='AppOperationModule'),
    authorizedSecurityGroups?: [ string ](name='AuthorizedSecurityGroups', description='The IDs of authorized security groups.'),
    bandwidth?: string(name='Bandwidth', description='The total bandwidth of the bastion host.', example='30'),
    bandwidthPackage?: string(name='BandwidthPackage', description='The bandwidth plan ID.', example='5'),
    dbOperationModule?: string(name='DbOperationModule', description='The status of the database O&M feature.', example='Disable'),
    description?: string(name='Description', description='The description of the instance.'),
    eniInstanceId?: string(name='EniInstanceId', description='The ID of the Elastic Network Interface (ENI).', example='eni-bp1455jrzwm7moaxxxxx'),
    expireTime?: long(name='ExpireTime', description='The time when the instance expires.', example='1578326400000'),
    HSMModule?: string(name='HSMModule'),
    iDaaSModule?: string(name='IDaaSModule'),
    instanceId?: string(name='InstanceId', description='The ID of the instance.', example='bastionhost-cn-78v1ghxxxxx'),
    instanceStatus?: string(name='InstanceStatus', description='The status of the instance. Valid values:

*   PENDING: The instance is not initialized.
*   CREATING: The instance is being created.
*   RUNNING: The instance is running.
*   EXPIRED: The instance expired.
*   CREATE_FAILED: The instance fails to be created.
*   UPGRADING: The configurations of the instance are being changed.
*   UPGRADE_FAILED: The configurations of the instance fail to be changed.', example='RUNNING'),
    internetEndpoint?: string(name='InternetEndpoint', description='The public endpoint.', example='drawvxalwb-public.bastionhost.aliyuncs.com'),
    intranetEndpoint?: string(name='IntranetEndpoint', description='The private endpoint.', example='drawvxalwb.bastionhost.aliyuncs.com'),
    kmsSecretModule?: string(name='KmsSecretModule'),
    licenseCode?: string(name='LicenseCode', description='The license code.', example='bhah_ent_50_asset'),
    modifyPasswordModule?: string(name='ModifyPasswordModule', description='The status of the automatic password change feature.

- **Enable**
- **Disable**', example='Enable'),
    networkProxyModule?: string(name='NetworkProxyModule', description='The status of the network domain feature.

- **Enable**
- **Disable**', example='Enable'),
    ports?: [ 
      {
        customPort?: int32(name='CustomPort', description='The custom port.

> Only the SSH and RDP ports can be changed. If no custom O\\&M port is specified for the bastion host, the value of StandardPort is returned.', example='600xx'),
        standardPort?: int32(name='StandardPort', description='The standard port of the bastion host. Valid values:

*   **SSH**: 60022.
*   **RDP**: 63389.
*   **HTTPS**: 443.', example='60022'),
      }
    ](name='Ports', description='An array that consists of the O&M ports of the bastion host.'),
    privateExportIps?: [ string ](name='PrivateExportIps', description='An array that consists of the egress private IP addresses of the bastion host.'),
    privateWhiteList?: [ string ](name='PrivateWhiteList', description='The private IP addresses that are allowed to access the instance.'),
    publicExportIps?: [ string ](name='PublicExportIps', description='An array that consists of the egress public IP addresses of the bastion host.'),
    publicIps?: [ string ](name='PublicIps', description='The public IP address.'),
    publicNetworkAccess?: boolean(name='PublicNetworkAccess', description='Indicates whether the Bastionhost instance can be accessed over the Internet.', example='true'),
    publicWhiteList?: [ string ](name='PublicWhiteList', description='The public IP addresses that are allowed to access the instance.'),
    RDModule?: string(name='RDModule'),
    regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-aekzc427dbl2shy'),
    routerRules?: [ string ](name='RouterRules'),
    scriptDeliverModule?: string(name='ScriptDeliverModule'),
    securityGroupIds?: [ string ](name='SecurityGroupIds', description='The IDs of the security groups to which the instance belongs.'),
    slaveVswitchId?: string(name='SlaveVswitchId'),
    startTime?: long(name='StartTime', description='The time when the instance started.', example='1577681345000'),
    storage?: long(name='Storage', description='The storage capacity of the bastion host. Unit: bytes.', example='2199023255552'),
    vpcId?: string(name='VpcId', description='The ID of the VPC to which the instance belongs.', example='vpc-bp1c85tzgqu1bf5bxxxxx'),
    vswitchId?: string(name='VswitchId', description='The ID of the vSwitch to which the instance connects.', example='vsw-bp1xfwzzfti0kjbfxxxxx'),
    webTerminalModule?: string(name='WebTerminalModule', description='The status of the web terminal.

- **Enable**
- **Disable**', example='Enable'),
    whiteListPolicies?: [ 
      {
        description?: string(name='Description'),
        entry?: string(name='Entry'),
      }
    ](name='WhiteListPolicies'),
  }(name='InstanceAttribute', description='The attribute information about the bastion host.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='082FAB35-6AB9-4FD5-8750-D36673548E76'),
}

model DescribeInstanceAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstanceAttributeResponseBody(name='body'),
}

/**
  * @description ****
  * @param request  the request parameters of DescribeInstanceAttribute  DescribeInstanceAttributeRequest
  * @return DescribeInstanceAttributeResponse
 */
async function describeInstanceAttribute(request: DescribeInstanceAttributeRequest): DescribeInstanceAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstancesRequest {
  instanceId?: [ string ](name='InstanceId', description='An array that consists of the IDs of the bastion hosts.', example='bastionhost-cn-78v1ghxxxxx', position='Query'),
  instanceStatus?: string(name='InstanceStatus', description='The status of the bastion host. Valid values:

*   **PENDING**: The bastion host is not initialized.
*   **CREATING**: The bastion host is being created.
*   **RUNNING**: The bastion host is running.
*   **EXPIRED**: The bastion host expired.
*   **CREATE_FAILED**: The bastion host fails to be created.
*   **UPGRADING**: The configurations of the bastion host are being changed.
*   **UPGRADE_FAILED**: The configurations of the bastion host fail to be changed.', example='RUNNING', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**.', example='10', minimum=1, maximum=100, position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the bastion host belongs.', example='rg-acfm26ougi****', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag.', example='test'),
      value?: string(name='Value', description='The value of the tag.', example='testapi'),
    }
  ](name='Tag', description='An array consisting of the tags that are added to the bastion hosts.', position='Query'),
}

model DescribeInstancesResponseBody = {
  instances?: [ 
    {
      bandWidth?: long(name='BandWidth'),
      description?: string(name='Description', description='The remarks of the bastion host.', example='Test API'),
      expireTime?: long(name='ExpireTime', description='The timestamp when the bastion host expires. Unit: milliseconds.', example='1578326400000'),
      imageVersion?: string(name='ImageVersion', description='The image version of the bastion host.', example='3.0.0'),
      instanceId?: string(name='InstanceId', description='The bastion host ID.', example='bastionhost-cn-78v1gh****'),
      instanceStatus?: string(name='InstanceStatus', description='The status of the bastion host. Valid values:

*   **PENDING**: The bastion host is not initialized.
*   **CREATING**: The bastion host is being created.
*   **RUNNING**: The bastion host is running.
*   **EXPIRED**: The bastion host expired.
*   **CREATE_FAILED**: The bastion host fails to be created.
*   **UPGRADING**: The configurations of the bastion host are being changed.
*   **UPGRADE_FAILED**: The configurations of the bastion host fail to be changed.', example='RUNNING'),
      internetEndpoint?: string(name='InternetEndpoint', description='The public O\\&M address of the bastion host.', example='drawvxalwb-public.bastionhost.aliyuncs.com'),
      intranetEndpoint?: string(name='IntranetEndpoint', description='The private O\\&M address of the bastion host.', example='drawvxalwb.bastionhost.aliyuncs.com'),
      legacy?: boolean(name='Legacy', description='Indicates whether the bastion host runs an earlier version. Valid values:

*   **true**: The bastion host runs V2 or V3.1.
*   **false**: The bastion host runs V3.2.', example='false'),
      licenseCode?: string(name='LicenseCode', description='The license code of the bastion host.', example='bhah_ent_50_asset'),
      planCode?: string(name='PlanCode', description='The edition of the bastion host. Valid values:

*   **cloudbastion**: Basic Edition.
*   **cloudbastion_ha**: Enterprise Edition.', example='cloudbastion_ha'),
      publicNetworkAccess?: boolean(name='PublicNetworkAccess', description='Indicates whether the bastion host can be accessed from the Internet. Valid values:

*   **true**
*   **false**', example='true'),
      regionId?: string(name='RegionId', description='The region ID of the bastion host.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the bastion host belongs.', example='g-acfm26ougi****'),
      slaveVswitchId?: string(name='SlaveVswitchId'),
      startTime?: long(name='StartTime', description='The timestamp when the bastion host is purchased or renewed. Unit: milliseconds.', example='1577681345000'),
      vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC) to which the bastion host belongs.', example='vpc-bp1c85tzgqu1bf5b****'),
      vswitchId?: string(name='VswitchId', description='The ID of the vSwitch to which the bastion host belongs.', example='vsw-bp1xfwzzfti0kjbf****'),
    }
  ](name='Instances', description='An array that consists of the bastion hosts returned.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='61D36C55-AAFC-4678-8FAD-34FEF9E7182E'),
  totalCount?: long(name='TotalCount', description='The total number of bastion hosts that are queried.', example='4'),
}

model DescribeInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeInstances  DescribeInstancesRequest
  * @return DescribeInstancesResponse
 */
async function describeInstances(request: DescribeInstancesRequest): DescribeInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The natural language in which responses are returned. Valid values:

*   **zh-CN**: Chinese. This is the default value.
*   **en-US**: English.
*   **ja**: Japanese.', example='zh-CN', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-shenzhen', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName', description='The name of the region.', example='China (Hangzhou)'),
      regionEndpoint?: string(name='RegionEndpoint', description='The endpoint of the region.', example='yundun-bastionhost.aliyuncs.com'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
    }
  ](name='Regions', description='The information about regions where you can create bastion hosts.'),
  requestId?: string(name='RequestId', description='The ID of request.', example='B7281856-F27D-4ECE-B4F1-50511E550xxx'),
}

model DescribeRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRegions  DescribeRegionsRequest
  * @return DescribeRegionsResponse
 */
async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DetachDatabaseAccountsFromUserRequest {
  databases?: [ 
    {
      databaseAccountIds?: [ string ](name='DatabaseAccountIds', description='An array that consists of database account IDs.'),
      databaseId?: string(name='DatabaseId', description='The ID of the database on which you want to revoke permissions.', example='8'),
    }
  ](name='Databases', description='The databases.', position='Query'),
  instanceId: string(name='InstanceId', description='The bastion host ID.

> You can call the DescribeInstances operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-pe335ipfk01', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-shanghai', position='Query'),
  userId: string(name='UserId', description='The ID of the user from whom you want to revoke the permissions on databases and database accounts.

> You can call the [ListUsers](https://help.aliyun.com/document_detail/204522.html) operation to query the ID of the user.

This parameter is required.', example='1', position='Query'),
}

model DetachDatabaseAccountsFromUserResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='79D7E114-CB52-5695-AB15-12776C308387'),
  results?: [ 
    {
      code?: string(name='Code', description='The error code that is returned. If **OK** is returned, the operation was successful. If another error code is returned, the operation failed.', example='OK'),
      databaseAccounts?: [ 
        {
          code?: string(name='Code', description='The error code that is returned. If OK is returned, the operation was successful. If another error code is returned, the operation failed.', example='OK'),
          databaseAccountId?: string(name='DatabaseAccountId', description='The ID of the database account on which the permissions are revoked.', example='9'),
          message?: string(name='Message', description='The error message that is returned.'),
        }
      ](name='DatabaseAccounts', description='A list that shows the operation results of the database accounts.'),
      databaseId?: string(name='DatabaseId', description='The ID of the database on which the permissions are revoked.', example='4'),
      message?: string(name='Message', description='The error message that is returned.'),
      userId?: string(name='UserId', description='The user ID.', example='1'),
    }
  ](name='Results', description='The result of the call.'),
}

model DetachDatabaseAccountsFromUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetachDatabaseAccountsFromUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DetachDatabaseAccountsFromUser  DetachDatabaseAccountsFromUserRequest
  * @return DetachDatabaseAccountsFromUserResponse
 */
async function detachDatabaseAccountsFromUser(request: DetachDatabaseAccountsFromUserRequest): DetachDatabaseAccountsFromUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachDatabaseAccountsFromUser', 'POST', '/', 'json', false, 'json', request);
}

model DetachDatabaseAccountsFromUserGroupRequest {
  databases?: [ 
    {
      databaseAccountIds?: [ string ](name='DatabaseAccountIds', description='An array that consists of database account IDs.'),
      databaseId?: string(name='DatabaseId', description='The ID of the database on which the permissions are to be revoked.', example='4'),
    }
  ](name='Databases', description='The information about the database.', position='Query'),
  instanceId: string(name='InstanceId', description='The bastion host ID.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-7mz2v120f0y', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  userGroupId: string(name='UserGroupId', description='The ID of the user group from which you want to revoke permissions on databases and database accounts.

> You can call the [ListUserGroups](https://help.aliyun.com/document_detail/204509.html) operation to query the ID of the user group.

This parameter is required.', example='1', position='Query'),
}

model DetachDatabaseAccountsFromUserGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='AC528ED1-C302-56E5-9CB5-ADA625D64FF9'),
  results?: [ 
    {
      code?: string(name='Code', description='The error code that is returned. If OK is returned, the operation was successful. If other error codes are returned, the operation failed.', example='OK'),
      databaseAccounts?: [ 
        {
          code?: string(name='Code', description='The error code that is returned. If OK is returned, the operation was successful. If other error codes are returned, the operation failed.', example='OK'),
          databaseAccountId?: string(name='DatabaseAccountId', description='The ID of the database account on which the permissions are revoked.', example='5'),
          message?: string(name='Message', description='The error message that is returned.', example='N/A'),
        }
      ](name='DatabaseAccounts', description='A list that shows the authorization results of the database accounts.'),
      databaseId?: string(name='DatabaseId', description='The ID of the database on which the permissions are revoked.', example='27'),
      message?: string(name='Message', description='The error message that is returned.', example='N/A'),
      userGroupId?: string(name='UserGroupId', description='The user group ID.', example='3'),
    }
  ](name='Results', description='The result of the call.'),
}

model DetachDatabaseAccountsFromUserGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetachDatabaseAccountsFromUserGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DetachDatabaseAccountsFromUserGroup  DetachDatabaseAccountsFromUserGroupRequest
  * @return DetachDatabaseAccountsFromUserGroupResponse
 */
async function detachDatabaseAccountsFromUserGroup(request: DetachDatabaseAccountsFromUserGroupRequest): DetachDatabaseAccountsFromUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachDatabaseAccountsFromUserGroup', 'POST', '/', 'json', false, 'json', request);
}

model DetachHostAccountsFromHostShareKeyRequest {
  hostAccountIds: string(name='HostAccountIds', description='The host account IDs.

>  You can call the [ListHostAccountsForHostShareKey](https://help.aliyun.com/document_detail/462975.html) operation to query the host account IDs.

This parameter is required.', example='["1","2","3"]', position='Query'),
  hostShareKeyId: string(name='HostShareKeyId', description='The shared key ID.

>  You can call the [ListHostShareKeys](https://help.aliyun.com/document_detail/462973.html) operation to query the shared key ID.

This parameter is required.', example='11', position='Query'),
  instanceId: string(name='InstanceId', description='The bastion host ID.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model DetachHostAccountsFromHostShareKeyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
  results?: [ 
    {
      code?: string(name='Code', description='The error code returned. If **OK** is returned, the disassociation was successful. If a different error code is returned, the disassociation failed.', example='OK'),
      hostAccountId?: string(name='HostAccountId', description='The ID of the host account.', example='12407'),
      hostShareKeyId?: string(name='HostShareKeyId', description='The ID of the shared key.', example='11'),
      message?: string(name='Message', description='The error message returned.', example='The host account does not exist'),
    }
  ](name='Results', description='The result of the call.'),
}

model DetachHostAccountsFromHostShareKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetachHostAccountsFromHostShareKeyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DetachHostAccountsFromHostShareKey  DetachHostAccountsFromHostShareKeyRequest
  * @return DetachHostAccountsFromHostShareKeyResponse
 */
async function detachHostAccountsFromHostShareKey(request: DetachHostAccountsFromHostShareKeyRequest): DetachHostAccountsFromHostShareKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachHostAccountsFromHostShareKey', 'POST', '/', 'json', false, 'json', request);
}

model DetachHostAccountsFromUserRequest {
  hosts: string(name='Hosts', description='The IDs of the hosts and host accounts on which you want to revoke permissions from the user. You can specify up to 10 host IDs and up to 10 host account IDs for each host. You can specify only host IDs. In this case, the permissions on the specified hosts and all accounts of the hosts are revoked from the user. For more information about this parameter, see the Description of the Hosts parameter section of this topic.

>  You can call the [ListHosts](https://help.aliyun.com/document_detail/200665.html) operation to query the host IDs and the [ListHostAccountsForUser](https://help.aliyun.com/document_detail/466581.html) operation to query the host account IDs.

This parameter is required.', example='[ {"HostId":"1"}, {"HostId":"2","HostAccountIds":["1","2","3"]}, {"HostId":"3","HostAccountIds":["4","5","6"]}, {"HostId":"4","HostAccountIds":["9","8","7"]} ]', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host on which you want to revoke permissions on the specified hosts and host accounts from the user.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host on which you want to revoke permissions on the specified hosts and host accounts from the user.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  userId: string(name='UserId', description='The ID of the user from whom you want to revoke permissions on the specified hosts and host accounts.

>  You can call the [ListUsers](https://help.aliyun.com/document_detail/204522.html) operation to query the user ID.

This parameter is required.', example='1', position='Query'),
}

model DetachHostAccountsFromUserResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
  results?: [ 
    {
      code?: string(name='Code', description='The return code that indicates whether the call was successful. Valid values:

*   **OK**: The call was successful.
*   **UNEXPECTED**: An unknown error occurred.
*   **INVALID_ARGUMENT**: A request parameter is invalid.
*   **OBJECT_NOT_FOUND**: The specified object on which you want to perform the operation does not exist.
*   **OBJECT_AlREADY_EXISTS**: The specified object on which you want to perform the operation already exists.', example='OK'),
      hostAccounts?: [ 
        {
          code?: string(name='Code', description='The return code that indicates whether permissions on the specified host accounts were revoked from the user. Valid values:

*   **OK**: The call was successful.
*   **UNEXPECTED**: An unknown error occurred.
*   **INVALID_ARGUMENT**: A request parameter is invalid.
*   **OBJECT_NOT_FOUND**: The specified object on which you want to perform the operation does not exist.
*   **OBJECT_AlREADY_EXISTS**: The specified object on which you want to perform the operation already exists.', example='OK'),
          hostAccountId?: string(name='HostAccountId', description='The host account ID.', example='1'),
          message?: string(name='Message', description='This parameter is deprecated.'),
        }
      ](name='HostAccounts', description='The result of revoking permissions on the specified host accounts from the user.'),
      hostId?: string(name='HostId', description='The host ID.', example='1'),
      message?: string(name='Message', description='This parameter is deprecated.'),
      userId?: string(name='UserId', description='The user ID.', example='1'),
    }
  ](name='Results', description='The result of the call.'),
}

model DetachHostAccountsFromUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetachHostAccountsFromUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DetachHostAccountsFromUser  DetachHostAccountsFromUserRequest
  * @return DetachHostAccountsFromUserResponse
 */
async function detachHostAccountsFromUser(request: DetachHostAccountsFromUserRequest): DetachHostAccountsFromUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachHostAccountsFromUser', 'POST', '/', 'json', false, 'json', request);
}

model DetachHostAccountsFromUserGroupRequest {
  hosts: string(name='Hosts', description='The IDs of the host and host account on which you want to revoke permissions from the user group.

You can specify up to 10 host IDs and up to 10 host account IDs for each host. You can specify only host IDs. In this case, the permissions on both the specified hosts and all host accounts of the hosts are revoked from the user group. For more information about this parameter, see the "Description of the Hosts parameter" section of this topic.

>  You can call the [ListHosts](https://help.aliyun.com/document_detail/200665.html) operation to query the ID of the host and the [ListHostAccounts](https://help.aliyun.com/document_detail/204372.html) operation to query the ID of the host account.

This parameter is required.', example='[ {"HostId":"1"}, {"HostId":"2","HostAccountIds":["1","2","3",...]}, {"HostId":"3","HostAccountIds":["4","5","6"]}, {"HostId":"4","HostAccountIds":["9","8","7"]} ]', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host in which you want to revoke permissions on the specified hosts and host accounts from the user group.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host in which you want to revoke permissions on the specified hosts and host accounts from the user group.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  userGroupId: string(name='UserGroupId', description='The ID of the user group from which you want to revoke permissions on the specified hosts and host accounts.

>  You can call the [ListUserGroups](https://help.aliyun.com/document_detail/204509.html) operation to query the ID of the user group.

This parameter is required.', example='１', position='Query'),
}

model DetachHostAccountsFromUserGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
  results?: [ 
    {
      code?: string(name='Code', description='The return code that indicates whether the call was successful. Valid values:

*   **OK**: The call was successful.
*   **UNEXPECTED**: An unknown error occurred.
*   **INVALID_ARGUMENT**: A request parameter is invalid.
*   **OBJECT_NOT_FOUND**: The specified object on which you want to perform the operation does not exist.
*   **OBJECT_AlREADY_EXISTS**: The specified object on which you want to perform the operation already exists.', example='OK'),
      hostAccounts?: [ 
        {
          code?: string(name='Code', description='The return code that indicates whether permissions on the specified host account were revoked from the user group. Valid values:

*   **OK**: The call was successful.
*   **UNEXPECTED**: An unknown error occurred.
*   **INVALID_ARGUMENT**: A request parameter is invalid.
*   **OBJECT_NOT_FOUND**: The specified object on which you want to perform the operation does not exist.
*   **OBJECT_AlREADY_EXISTS**: The specified object on which you want to perform the operation already exists.', example='OK'),
          hostAccountId?: string(name='HostAccountId', description='The ID of the host account.', example='１'),
          message?: string(name='Message', description='This parameter is deprecated.'),
        }
      ](name='HostAccounts', description='The result of revoking permissions on the specified host accounts from the user group.'),
      hostId?: string(name='HostId', description='The ID of the host.', example='１'),
      message?: string(name='Message', description='This parameter is deprecated.'),
      userGroupId?: string(name='UserGroupId', description='The ID of the group.', example='１'),
    }
  ](name='Results', description='The result of the call.'),
}

model DetachHostAccountsFromUserGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetachHostAccountsFromUserGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DetachHostAccountsFromUserGroup  DetachHostAccountsFromUserGroupRequest
  * @return DetachHostAccountsFromUserGroupResponse
 */
async function detachHostAccountsFromUserGroup(request: DetachHostAccountsFromUserGroupRequest): DetachHostAccountsFromUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachHostAccountsFromUserGroup', 'POST', '/', 'json', false, 'json', request);
}

model DetachHostGroupAccountsFromUserRequest {
  hostGroups: string(name='HostGroups', description='The ID of the host group and the name of the host account on which you want to revoke permissions from the user. You can specify up to 10 host group IDs and up to 10 host account names for each host group. You can specify only host group IDs. In this case, the permissions on the specified host groups and all host accounts in the host groups are revoked from the user. For more information about this parameter, see the "Description of the HostGroups parameter" section of this topic.

> You can call the [ListHostGroups](https://help.aliyun.com/document_detail/201307.html) operation to query the ID of the host group and the [ListHostAccounts](https://help.aliyun.com/document_detail/204372.html) operation to query the name of the host account.

This parameter is required.', example='[ {"HostGroupId":"1"}, {"HostGroupId":"2","HostAccountNames":["root","111","abc"]}]', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host for which you want to revoke permissions on the specified host groups and host accounts from the user.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host for which you want to revoke permissions on the specified host groups and host accounts from the user.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  userId: string(name='UserId', description='The ID of the user from which you want to revoke permissions on the specified host groups and host accounts.

> You can call the [ListUsers](https://help.aliyun.com/document_detail/204522.html) operation to query the ID of the user.

This parameter is required.', example='1', position='Query'),
}

model DetachHostGroupAccountsFromUserResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
  results?: [ 
    {
      code?: string(name='Code', description='The return code that indicates whether the call was successful. Valid values:

*   **OK**: The call was successful.
*   **UNEXPECTED**: An unknown error occurred.
*   **INVALID_ARGUMENT**: A request parameter is invalid.
*   **OBJECT_NOT_FOUND**: The specified object on which you want to perform the operation does not exist.
*   **OBJECT_AlREADY_EXISTS**: The specified object on which you want to perform the operation already exists.', example='OK'),
      hostAccountNames?: [ 
        {
          code?: string(name='Code', description='The return code that indicates whether permissions on the specified host account were revoked from the user. Valid values:

*   **OK**: The call was successful.
*   **UNEXPECTED**: An unknown error occurred.
*   **INVALID_ARGUMENT**: A request parameter is invalid.
*   **OBJECT_NOT_FOUND**: The specified object on which you want to perform the operation does not exist.
*   **OBJECT_AlREADY_EXISTS**: The specified object on which you want to perform the operation already exists.', example='OK'),
          hostAccountName?: string(name='HostAccountName', description='The name of the host account.', example='root'),
          message?: string(name='Message', description='This parameter is deprecated.', example='N/A'),
        }
      ](name='HostAccountNames', description='The result of revoking permissions on the specified host accounts from the user.'),
      hostGroupId?: string(name='HostGroupId', description='The ID of the host group.', example='1'),
      message?: string(name='Message', description='This parameter is deprecated.', example='N/A'),
      userId?: string(name='UserId', description='The ID of the user.', example='1'),
    }
  ](name='Results', description='The result of the call.'),
}

model DetachHostGroupAccountsFromUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetachHostGroupAccountsFromUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DetachHostGroupAccountsFromUser  DetachHostGroupAccountsFromUserRequest
  * @return DetachHostGroupAccountsFromUserResponse
 */
async function detachHostGroupAccountsFromUser(request: DetachHostGroupAccountsFromUserRequest): DetachHostGroupAccountsFromUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachHostGroupAccountsFromUser', 'POST', '/', 'json', false, 'json', request);
}

model DetachHostGroupAccountsFromUserGroupRequest {
  hostGroups: string(name='HostGroups', description='The ID of the host group and the name of host account on which you want to revoke permissions from the user group. You can specify up to 10 host group IDs and up to 10 host account names for each host group. You can specify only host group IDs. In this case, the permissions on the specified host groups and all host accounts in the host groups are revoked from the user group. For more information about this parameter, see the "Description of the HostGroups parameter" section of this topic.

>  You can call the [ListHostGroups](https://help.aliyun.com/document_detail/201307.html) operation to query the ID of the host group and the [ListHostAccounts](https://help.aliyun.com/document_detail/204372.html) operation to query the name of the host account.

This parameter is required.', example='[ {"HostGroupId":"1"}, {"HostGroupId":"2","HostAccountNames":["root","111","abc"]}, {"HostGroupId":"3","HostAccountNames":["root","111","abc"]}, {"HostGroupId":"4","HostAccountNames":["root","111","abc"]}]', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host for which you want to revoke permissions on the specified host groups and host accounts from the user group.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host for which you want to revoke permissions on the specified host groups and host accounts from the user group.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  userGroupId: string(name='UserGroupId', description='The ID of the user group from which you want to revoke permissions on the specified host groups and host accounts.

>  You can call the [ListUserGroups](https://help.aliyun.com/document_detail/204509.html) operation to query the ID of the user group.

This parameter is required.', example='1', position='Query'),
}

model DetachHostGroupAccountsFromUserGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
  results?: [ 
    {
      code?: string(name='Code', description='The return code that indicates whether the call was successful. Valid values:

*   **OK**: The call was successful.
*   **UNEXPECTED**: An unknown error occurred.
*   **INVALID_ARGUMENT**: A request parameter is invalid.
*   **OBJECT_NOT_FOUND**: The specified object on which you want to perform the operation does not exist.
*   **OBJECT_AlREADY_EXISTS**: The specified object on which you want to perform the operation already exists.', example='OK'),
      hostAccountNames?: [ 
        {
          code?: string(name='Code', description='The return code that indicates whether permissions on the specified host account were revoked from the specified user group. Valid values:

*   **OK**: The call was successful.
*   **UNEXPECTED**: An unknown error occurred.
*   **INVALID_ARGUMENT**: A request parameter is invalid.
*   **OBJECT_NOT_FOUND**: The specified object on which you want to perform the operation does not exist.
*   **OBJECT_AlREADY_EXISTS**: The specified object on which you want to perform the operation already exists.', example='OK'),
          hostAccountName?: string(name='HostAccountName', description='The name of the host account.', example='root'),
          message?: string(name='Message', description='This parameter is deprecated.'),
        }
      ](name='HostAccountNames', description='The result of revoking permissions on the specified host accounts from the user group.'),
      hostGroupId?: string(name='HostGroupId', description='The ID of the host group.', example='1'),
      message?: string(name='Message', description='This parameter is deprecated.'),
      userGroupId?: string(name='UserGroupId', description='The ID of the group.', example='1'),
    }
  ](name='Results', description='The result of the call.'),
}

model DetachHostGroupAccountsFromUserGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetachHostGroupAccountsFromUserGroupResponseBody(name='body'),
}

/**
  * @description ****
  * @param request  the request parameters of DetachHostGroupAccountsFromUserGroup  DetachHostGroupAccountsFromUserGroupRequest
  * @return DetachHostGroupAccountsFromUserGroupResponse
 */
async function detachHostGroupAccountsFromUserGroup(request: DetachHostGroupAccountsFromUserGroupRequest): DetachHostGroupAccountsFromUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachHostGroupAccountsFromUserGroup', 'POST', '/', 'json', false, 'json', request);
}

model DisableInstancePublicAccessRequest {
  instanceId: string(name='InstanceId', description='The ID of the bastion host whose Internet access you want to disable.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-78v1gh****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.', example='cn-hangzhou', position='Query'),
}

model DisableInstancePublicAccessResponseBody = {
  instanceId?: string(name='InstanceId', description='The ID of the bastion host whose Internet access is disabled.', example='bastionhost-cn-78v1gh****'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='76FAAF15-D3A3-4099-9941-FC408D9FDB4C'),
}

model DisableInstancePublicAccessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisableInstancePublicAccessResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DisableInstancePublicAccess  DisableInstancePublicAccessRequest
  * @return DisableInstancePublicAccessResponse
 */
async function disableInstancePublicAccess(request: DisableInstancePublicAccessRequest): DisableInstancePublicAccessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableInstancePublicAccess', 'POST', '/', 'json', false, 'json', request);
}

model DisableRuleRequest {
  instanceId: string(name='InstanceId', description='The bastion host ID.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-78v1gh****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  ruleId: string(name='RuleId', description='The ID of the authorization rule to be disabled.

>  You can call the [ListRules](https://help.aliyun.com/document_detail/2758868.html) operation to query the authorization rule ID to be disabled.

This parameter is required.', example='1', position='Query'),
}

model DisableRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='98DBE5C2-7D7A-5393-9E5A-71074336D33B'),
}

model DisableRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisableRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DisableRule  DisableRuleRequest
  * @return DisableRuleResponse
 */
async function disableRule(request: DisableRuleRequest): DisableRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableRule', 'POST', '/', 'json', false, 'json', request);
}

model EnableInstancePublicAccessRequest {
  instanceId: string(name='InstanceId', description='The ID of the bastion host.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-78v1gh****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.', example='cn-hangzhou', position='Query'),
}

model EnableInstancePublicAccessResponseBody = {
  instanceId?: string(name='InstanceId', description='The ID of the bastion host whose Internet access is enabled.', example='bastionhost-cn-78v1gh****'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='D47B5043-FDD6-4FBE-976E-5FC67A23578F'),
}

model EnableInstancePublicAccessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableInstancePublicAccessResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnableInstancePublicAccess  EnableInstancePublicAccessRequest
  * @return EnableInstancePublicAccessResponse
 */
async function enableInstancePublicAccess(request: EnableInstancePublicAccessRequest): EnableInstancePublicAccessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableInstancePublicAccess', 'POST', '/', 'json', false, 'json', request);
}

model EnableRuleRequest {
  instanceId: string(name='InstanceId', description='The bastion host ID.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-78v1ghxxxxx', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  ruleId: string(name='RuleId', description='The ID of the authorization rule that you want to enable.

>  You can call the [ListRules](https://help.aliyun.com/document_detail/2758868.html) operation to query the authorization rule ID.

This parameter is required.', example='3', position='Query'),
}

model EnableRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4F6C075F-FC86-476E-943B-097BD4E12948'),
}

model EnableRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnableRule  EnableRuleRequest
  * @return EnableRuleResponse
 */
async function enableRule(request: EnableRuleRequest): EnableRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableRule', 'POST', '/', 'json', false, 'json', request);
}

model GenerateAssetOperationTokenRequest {
  assetAccountId?: string(name='AssetAccountId', description='The ID of the account whose assets the O\\&M token takes effect.

>  You must specify at least one of the following parameters: AssetAccountId and AssetAccountName. If you specify both parameters, AssetAccountId takes precedence.', example='2', position='Query'),
  assetAccountName?: string(name='AssetAccountName', description='The name of the host account. If you use a custom account, enter a real account name.

>  When both AssetAccountId and AssetAccountName are specified, AssetAccountId takes precedence.', example='root', position='Query'),
  assetAccountPassword?: string(name='AssetAccountPassword', description='The Base64-encoded password. This parameter is required if you want to apply for an O\\&M token for a custom account.', example='dGVzdHBhc3N3b3Jk', position='Query'),
  assetAccountProtocolName?: string(name='AssetAccountProtocolName', description='The name of the protocol. Valid values:

*   SSH
*   RDP
*   Oracle
*   PostgreSQL
*   MySQL
*   SQLServer', example='SSH', position='Query'),
  assetId: string(name='AssetId', description='The ID of the asset for which you want to apply for an O\\&M token.

This parameter is required.', example='11', position='Query'),
  assetType: string(name='AssetType', description='The type of the asset for which you want to apply for an O\\&M token. Valid values:

*   **Host**
*   **Database**

This parameter is required.', example='Host', position='Query'),
  databaseSchema?: string(name='DatabaseSchema', description='The name of the database. If you set OperationMode to Sso and AssetAccountProtocolName to PostgreSQL or Oracle and you select Custom Account for the Database Account parameter, you must specify this parameter.

>This parameter is available only for bastion hosts that run V3.2.44 or later.', example='orcl', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host for which you want to apply an O\\&M token.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  loginAttribute?: string(name='LoginAttribute', description='The logon attribute. If you set OperationMode to Sso and AssetAccountProtocolName to Oracle, you must specify this parameter. Valid values:

*   **SERVICENAME**
*   **SID**

>  This parameter is available only for Bastionhost V3.2.44 and later.', example='SID', position='Query'),
  operationMode?: string(name='OperationMode', description='The O\\&M logon method. Valid values:

*   **WebToken**: O\\&M token-based logon.
*   **Sso**: local client-based logon.

>  This parameter is available only for Bastionhost V3.2.44 and later. If you do not specify this parameter, the default value WebToken is used.', example='Sso', position='Query'),
  operationNote?: string(name='OperationNote', description='The logon remarks. This parameter is required if an administrator enables the feature of logon remarks on the Control Policies page.', example='comment', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  ssoClient?: string(name='SsoClient', description='The type of the local client that you want to perform O\\&M operations on Linux assets. If you set OperationMode to Sso and AssetAccountProtocolName to SSH, you must specify this parameter. Valid values:

*   **ssh**: Perform O\\&M operations on Linux assets by connecting to a bastion host from an SSH client.
*   **sftp**: Perform O\\&M operations on Linux assets by connecting to a bastion host from a Secure File Transfer Protocol (SFTP) client.

>  This parameter is available only for Bastionhost V3.2.44 and later.', example='ssh', position='Query'),
}

model GenerateAssetOperationTokenResponseBody = {
  assetOperationToken?: {
    countLeft?: long(name='CountLeft', description='The remaining number of times that you can use the O\\&M token.', example='1'),
    expireTime?: long(name='ExpireTime', description='The time when the O\\&M token expires. The value is a UNIX timestamp.', example='1709110797'),
    hasCountLimit?: boolean(name='HasCountLimit', description='Indicates whether the number of times that you can use the O\\&M token is limited.', example='true'),
    maxRenewCount?: long(name='MaxRenewCount', description='The maximum number of renewals. A value of 0 indicates that renewal is not supported.', example='10'),
    renewCount?: long(name='RenewCount', description='The number of times the O\\&M token is renewed.', example='1'),
    ssoUrl?: string(name='SsoUrl', description='The single sign-on (SSO) URL.', example='sso://eyJOT0RFX0NPTU1PTiI6eyJNb2R******'),
    token?: string(name='Token', description='The O\\&M token that you apply for.', example='NmYyMmEzNmMwYzljNGY******'),
    tokenId?: string(name='TokenId', description='The ID of the O\\&M token.', example='1'),
  }(name='AssetOperationToken', description='The data returned.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
}

model GenerateAssetOperationTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateAssetOperationTokenResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GenerateAssetOperationToken  GenerateAssetOperationTokenRequest
  * @return GenerateAssetOperationTokenResponse
 */
async function generateAssetOperationToken(request: GenerateAssetOperationTokenRequest): GenerateAssetOperationTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateAssetOperationToken', 'POST', '/', 'json', false, 'json', request);
}

model GetDatabaseRequest {
  databaseId: string(name='DatabaseId', description='The ID of the database to query.

>  You can call the [ListDatabases](https://help.aliyun.com/document_detail/2758822.html) operation to query the database ID.

This parameter is required.', example='21', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host that manages the database to query.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-wwo36qbv601', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host that manages the database to query.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model GetDatabaseResponseBody = {
  database?: {
    activeAddressType?: string(name='ActiveAddressType', description='The address type of the database. Valid values:

*   Public
*   Private', example='Public'),
    comment?: string(name='Comment', description='The remarks of the database.', example='comment'),
    databaseId?: string(name='DatabaseId', description='The database ID.', example='22'),
    databaseName?: string(name='DatabaseName', description='The name of the database.', example='test'),
    databasePort?: long(name='DatabasePort', description='The port of the database.', example='3306'),
    databasePrivateAddress?: string(name='DatabasePrivateAddress', description='The internal endpoint of the database.', example='rm-bp1zq******'),
    databasePublicAddress?: string(name='DatabasePublicAddress', description='The public endpoint of the database.', example='rm-uf65******'),
    databaseType?: string(name='DatabaseType', description='The database engine. Valid values:

*   **mysql**
*   **sqlserver**
*   **postgresql**
*   **oracle**', example='MySQL'),
    networkDomainId?: string(name='NetworkDomainId', description='The ID of the network domain to which the database belongs.', example='45'),
    source?: string(name='Source', description='The database type. Valid values:

*   **Local**: on-premises database.
*   **Rds**: ApsaraDB RDS instance.
*   **PolarDB**: PolarDB cluster.', example='Local'),
    sourceInstanceId?: string(name='SourceInstanceId', description='The ID of the ApsaraDB RDS instance or PolarDB cluster.

> If **Source** is set to **Local**, this parameter is empty.', example='i-wz9527ob0e0nftcsffke'),
    sourceInstanceRegionId?: string(name='SourceInstanceRegionId', description='The region ID of the ApsaraDB RDS instance or PolarDB cluster.', example='cn-hangzhou'),
    sourceInstanceState?: string(name='SourceInstanceState', description='The status of the database. Valid values:

*   **Normal**
*   **Release**', example='Normal'),
  }(name='Database', description='The returned detailed information about the database.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4D72B883-9D15-5B05-B987-DFD10EB1FFB4'),
}

model GetDatabaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDatabaseResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDatabase  GetDatabaseRequest
  * @return GetDatabaseResponse
 */
async function getDatabase(request: GetDatabaseRequest): GetDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDatabase', 'POST', '/', 'json', false, 'json', request);
}

model GetDatabaseAccountRequest {
  databaseAccountId: string(name='DatabaseAccountId', description='The ID of the database account to query.

>  You can call the [ListDatabaseAccounts](https://help.aliyun.com/document_detail/2758839.html) operation to query the database account ID.

This parameter is required.', example='9', position='Query'),
  instanceId: string(name='InstanceId', description='The bastion host ID.
> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-i7m2d7zrw11', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.
> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-beijing', position='Query'),
}

model GetDatabaseAccountResponseBody = {
  databaseAccount?: {
    databaseAccountId?: string(name='DatabaseAccountId', description='The database account ID.', example='9'),
    databaseAccountName?: string(name='DatabaseAccountName', description='The name of the database account.', example='uac'),
    databaseSchema?: string(name='DatabaseSchema', description='The database name. A value is returned for this parameter if the database engine is PostgreSQL or Oracle.', example='orcl'),
    hasPassword?: boolean(name='HasPassword', description='Indicates whether the database account has a password.
Valid values:
* true
* false', example='true'),
    loginAttribute?: string(name='LoginAttribute', description='The logon attribute. A value is returned for this parameter if the database engine is Oracle. Valid values:

*   SERVICENAME
*   SID', example='SID'),
  }(name='DatabaseAccount', description='The returned information about the database account.'),
  requestId?: string(name='RequestId', description='The request ID.', example='FA06D274-8D0A-59FB-8B7E-584C0EEBBFFF'),
}

model GetDatabaseAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDatabaseAccountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDatabaseAccount  GetDatabaseAccountRequest
  * @return GetDatabaseAccountResponse
 */
async function getDatabaseAccount(request: GetDatabaseAccountRequest): GetDatabaseAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDatabaseAccount', 'POST', '/', 'json', false, 'json', request);
}

model GetExportConfigJobRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  jobId: string(name='JobId', description='This parameter is required.', example='2', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model GetExportConfigJobResponseBody = {
  downloadUrl?: string(name='DownloadUrl', example='https://bastionhost-cn-hangzhou-164***.oss-cn-hangzhou.aliyuncs.com/bastionhost-cn-2******'),
  expireTime?: long(name='ExpireTime', example='1679393152'),
  jobId?: string(name='JobId', example='2'),
  message?: string(name='Message', example='message'),
  requestId?: string(name='RequestId', example='98DBE5C2-7D7A-5393-9E5A-71074336D33B'),
  status?: string(name='Status', example='Success'),
}

model GetExportConfigJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetExportConfigJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetExportConfigJob  GetExportConfigJobRequest
  * @return GetExportConfigJobResponse
 */
async function getExportConfigJob(request: GetExportConfigJobRequest): GetExportConfigJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetExportConfigJob', 'POST', '/', 'json', false, 'json', request);
}

model GetHostRequest {
  hostId: string(name='HostId', description='The ID of the host that you want to query. You can specify only one host ID.

>  You can call the [ListHosts](https://help.aliyun.com/document_detail/200665.html) operation to query the ID of the host.

This parameter is required.', example='1', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host in which you want to query the host.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host in which you want to query the host.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model GetHostResponseBody = {
  host?: {
    activeAddressType?: string(name='ActiveAddressType', description='The address type of the host. Valid values:

*   **Public**: a public address
*   **Private**: a private address', example='Public'),
    comment?: string(name='Comment', description='The description of the host.', example='host'),
    hostId?: string(name='HostId', description='The ID of the host.', example='1'),
    hostName?: string(name='HostName', description='The hostname.', example='host'),
    hostPrivateAddress?: string(name='HostPrivateAddress', description='The internal endpoint of the host. The value is a domain name or an IP address.', example='192.168.XX.XX'),
    hostPublicAddress?: string(name='HostPublicAddress', description='The public address of the host. The value is a domain name or an IP address.', example='1.1.XX.XX'),
    networkDomainId?: string(name='NetworkDomainId', description='The ID of the network domain to which the host belongs.', example='1'),
    OSType?: string(name='OSType', description='The operating system of the host. Valid values:

*   **Linux**
*   **Windows**', example='Linux'),
    prefKex?: string(name='PrefKex', description='The preferred key exchange algorithm of the host. The value of this parameter is returned if OSType is set to Linux. Valid values:

*   **default**
*   **diffie-hellman-group1-sha1**
*   **diffie-hellman-group14-sha1**
*   **diffie-hellman-group-exchange-sha1**', example='default'),
    protocols?: [ 
      {
        hostFingerPrint?: string(name='HostFingerPrint', description='The fingerprint of the host. This parameter uniquely identifies a host. A value is returned for this parameter only if you have performed O\\&M operations on the host by using the bastion host. Otherwise, no value is returned.', example='ssh-ed25519|3e:46:5a:e1:1f:0d:39:7e:61:35:d5:fa:7b:2b:**:**'),
        port?: int32(name='Port', description='The service port of the host.', example='22'),
        protocolName?: string(name='ProtocolName', description='The protocol that is used to connect to the host. Valid values:

*   **SSH**
*   **RDP**', example='SSH'),
      }
    ](name='Protocols', description='The protocol information about the host.'),
    source?: string(name='Source', description='The source of the host. Valid values:

*   **Local**: a host in a data center
*   **Ecs**: an Elastic Compute Service (ECS) instance
*   **Rds**: a host in an ApsaraDB MyBase dedicated cluster', example='Local'),
    sourceInstanceId?: string(name='SourceInstanceId', description='The ID of the ECS instance or the host in an ApsaraDB MyBase dedicated cluster.

>  If **Local** is returned for the **Source** parameter, no value is returned for this parameter.', example='i-bp19ienyt0yax748****'),
    sourceInstanceState?: string(name='SourceInstanceState', description='The status of the host. Valid values:

*   **Normal**: normal
*   **Release**: released', example='Normal'),
  }(name='Host', description='The returned information about the host.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
}

model GetHostResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHostResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetHost  GetHostRequest
  * @return GetHostResponse
 */
async function getHost(request: GetHostRequest): GetHostResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetHost', 'POST', '/', 'json', false, 'json', request);
}

model GetHostAccountRequest {
  hostAccountId: string(name='HostAccountId', description='The ID of the host account that you want to query.

> You can call the [ListHostAccounts](https://help.aliyun.com/document_detail/204372.html) operation to query the ID of the host account.

This parameter is required.', example='1', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host in which you want to query the details of the host account.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host in which you want to query the details of the host account.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model GetHostAccountResponseBody = {
  hostAccount?: {
    hasPassword?: boolean(name='HasPassword', description='Indicates whether a password is configured for the host account. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
    hostAccountId?: string(name='HostAccountId', description='The ID of the host account.', example='1'),
    hostAccountName?: string(name='HostAccountName', description='The name of the host account.', example='abc'),
    hostId?: string(name='HostId', description='The ID of the host to which the host account belongs.', example='1'),
    hostShareKeyId?: string(name='HostShareKeyId', description='The ID of the shared key.', example='1'),
    hostShareKeyName?: string(name='HostShareKeyName', description='The name of the shared key.', example='name'),
    privateKeyFingerprint?: string(name='PrivateKeyFingerprint', description='The fingerprint of the private key.', example='fe:ca:37:42:30:00:9d:95:e6:73:e5:b0:32:0a:**:**'),
    privilegeType?: string(name='PrivilegeType'),
    protocolName?: string(name='ProtocolName', description='The protocol that is used by the host. Valid values:

*   **SSH**
*   **RDP**', example='SSH'),
    rotationMode?: string(name='RotationMode'),
  }(name='HostAccount', description='The details of the host account that was queried.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
}

model GetHostAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHostAccountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetHostAccount  GetHostAccountRequest
  * @return GetHostAccountResponse
 */
async function getHostAccount(request: GetHostAccountRequest): GetHostAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetHostAccount', 'POST', '/', 'json', false, 'json', request);
}

model GetHostGroupRequest {
  hostGroupId: string(name='HostGroupId', description='The ID of the asset group to query.

> You can call the [ListHostGroups](https://help.aliyun.com/document_detail/204509.html) operation to query the asset group ID.

This parameter is required.', example='1', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host whose asset group you want to query.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host whose asset group you want to query.

> For more information about the mapping between region IDs and region names, [see Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model GetHostGroupResponseBody = {
  hostGroup?: {
    comment?: string(name='Comment', description='The remarks of the asset group.', example='Description'),
    hostGroupId?: string(name='HostGroupId', description='The asset group ID.', example='1'),
    hostGroupName?: string(name='HostGroupName', description='The name of the asset group.', example='Host group 1'),
  }(name='HostGroup', description='The returned detailed information about the asset group.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
}

model GetHostGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHostGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetHostGroup  GetHostGroupRequest
  * @return GetHostGroupResponse
 */
async function getHostGroup(request: GetHostGroupRequest): GetHostGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetHostGroup', 'POST', '/', 'json', false, 'json', request);
}

model GetHostShareKeyRequest {
  hostShareKeyId: string(name='HostShareKeyId', description='The ID of the shared key whose information you want to query.

>  You can call the [ListHostShareKeys](https://help.aliyun.com/document_detail/462973.html) operation to query the shared key ID.

This parameter is required.', example='10427', position='Query'),
  instanceId: string(name='InstanceId', description='The bastion host ID.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model GetHostShareKeyResponseBody = {
  hostShareKey?: {
    hostShareKeyId?: string(name='HostShareKeyId', description='The ID of the shared key.', example='10427'),
    hostShareKeyName?: string(name='HostShareKeyName', description='The name of the shared key.', example='name'),
    lastModifyKeyAt?: long(name='LastModifyKeyAt', description='The time when the information about the shared key was last modified. The value is a UNIX timestamp. Unit: seconds.', example='1644287246'),
    privateKeyFingerPrint?: string(name='PrivateKeyFingerPrint', description='The fingerprint of the private key.', example='***'),
  }(name='HostShareKey', description='The returned information about the shared key.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
}

model GetHostShareKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHostShareKeyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetHostShareKey  GetHostShareKeyRequest
  * @return GetHostShareKeyResponse
 */
async function getHostShareKey(request: GetHostShareKeyRequest): GetHostShareKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetHostShareKey', 'POST', '/', 'json', false, 'json', request);
}

model GetInstanceADAuthServerRequest {
  instanceId: string(name='InstanceId', description='The bastion host ID.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model GetInstanceADAuthServerResponseBody = {
  ad?: {
    account?: string(name='Account', description='The distinguished name (DN) of the AD server account.', example='cn=Manager,dc=test,dc=com'),
    baseDN?: string(name='BaseDN', description='The Base DN of the AD server.', example='dc=test,dc=com'),
    domain?: string(name='Domain', description='The domain on the AD server.', example='domain'),
    emailMapping?: string(name='EmailMapping', description='The field that is used to indicate the email address of a user on the AD server.', example='emailAttr'),
    filter?: string(name='Filter', description='The condition that is used to filter users.', example='(&(objectClass=top))'),
    hasPassword?: boolean(name='HasPassword', description='Indicates whether passwords are required. Valid values:

*   **true**:
*   **false**', example='true'),
    isSSL?: boolean(name='IsSSL', description='Indicates whether SSL is supported. Valid values:

*   **true**
*   **false**', example='true'),
    mobileMapping?: string(name='MobileMapping', description='The field that is used to indicate the mobile phone number of a user on the AD server.', example='mobileAttr'),
    nameMapping?: string(name='NameMapping', description='The field that is used to indicate the name of a user on the AD server.', example='nameAttr'),
    port?: long(name='Port', description='The port that is used to access the AD server.', example='389'),
    server?: string(name='Server', description='The address of the AD server.', example='192.168.XX.XX'),
    standbyServer?: string(name='StandbyServer', description='The address of the secondary AD server.', example='192.168.XX.XX'),
  }(name='AD', description='The settings of AD authentication.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='89398CFB-4EB6-4C7E-BB3C-EF213AC8FA50'),
}

model GetInstanceADAuthServerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceADAuthServerResponseBody(name='body'),
}

/**
  * @description ###
  * You can call this operation to query the settings of AD authentication on a bastion host. After you configure AD authentication on a bastion host, you can import AD-authenticated users into the bastion host. After the AD-authenticated users are imported into the bastion host, the AD-authenticated users can log on to the bastion host to perform O\\&M operations on servers.
  * ### Limit
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of GetInstanceADAuthServer  GetInstanceADAuthServerRequest
  * @return GetInstanceADAuthServerResponse
 */
async function getInstanceADAuthServer(request: GetInstanceADAuthServerRequest): GetInstanceADAuthServerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInstanceADAuthServer', 'POST', '/', 'json', false, 'json', request);
}

model GetInstanceLDAPAuthServerRequest {
  instanceId: string(name='InstanceId', description='The ID of the bastion host.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model GetInstanceLDAPAuthServerResponseBody = {
  LDAP?: {
    account?: string(name='Account', description='The account of the LDAP server.', example='cn=Manager,dc=test,dc=com'),
    baseDN?: string(name='BaseDN', description='The Base distinguished name (DN).', example='dc=test,dc=com'),
    emailMapping?: string(name='EmailMapping', description='The field that is used to indicate the email address of a user on the LDAP server.', example='emailAttr'),
    filter?: string(name='Filter', description='The condition that is used to filter users.', example='(&(objectClass=top))'),
    hasPassword?: string(name='HasPassword', description='Indicates whether passwords are required. Valid values:

*   **true**: required
*   **false**: not required', example='true'),
    isSSL?: boolean(name='IsSSL', description='Indicates whether SSL is supported. Valid values:

*   **true**: supported
*   **false**: not supported', example='true'),
    loginNameMapping?: string(name='LoginNameMapping', description='The field that is used to indicate the logon name of a user on the LDAP server.', example='userNameAttr'),
    mobileMapping?: string(name='MobileMapping', description='The field that is used to indicate the mobile phone number of a user on the LDAP server.', example='mobileAttr'),
    nameMapping?: string(name='NameMapping', description='The field that is used to indicate the name of a user on the LDAP server.', example='nameAttr'),
    port?: long(name='Port', description='The port that is used to access the LDAP server.', example='389'),
    server?: string(name='Server', description='The address of the LDAP server.', example='192.168.XX.XX'),
    standbyServer?: string(name='StandbyServer', description='The address of the secondary LDAP server.', example='192.168.XX.XX'),
  }(name='LDAP', description='The settings of LDAP authentication.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='1C60E741-102D-5E8F-9710-B06D3F0183FE'),
}

model GetInstanceLDAPAuthServerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceLDAPAuthServerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetInstanceLDAPAuthServer  GetInstanceLDAPAuthServerRequest
  * @return GetInstanceLDAPAuthServerResponse
 */
async function getInstanceLDAPAuthServer(request: GetInstanceLDAPAuthServerRequest): GetInstanceLDAPAuthServerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInstanceLDAPAuthServer', 'POST', '/', 'json', false, 'json', request);
}

model GetInstanceStoreInfoRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model GetInstanceStoreInfoResponseBody = {
  max?: long(name='Max', example='102400'),
  requestId?: string(name='RequestId', example='5EAB922E-F476-5DFA-9290-313C608E724B'),
  usage?: long(name='Usage', example='1024'),
}

model GetInstanceStoreInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceStoreInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetInstanceStoreInfo  GetInstanceStoreInfoRequest
  * @return GetInstanceStoreInfoResponse
 */
async function getInstanceStoreInfo(request: GetInstanceStoreInfoRequest): GetInstanceStoreInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInstanceStoreInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetInstanceTwoFactorRequest {
  instanceId: string(name='InstanceId', description='The ID of the bastion host.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model GetInstanceTwoFactorResponseBody = {
  config?: {
    enableTwoFactor?: boolean(name='EnableTwoFactor', description='Indicates whether two-factor authentication is enabled. Valid values:

*   **true**
*   **false**', example='true'),
    skipTwoFactorTime?: long(name='SkipTwoFactorTime', description='The duration within which two-factor authentication is not required after a local user passes two-factor authentication. Valid values: `0 to 168`. Unit: hours.

> If 0 is returned, a local user must pass two-factor authentication every time the local user logs on to the bastion host.', example='1'),
    twoFactorMethods?: [ string ](name='TwoFactorMethods', description='The two-factor authentication methods.'),
  }(name='Config', description='The settings of two-factor authentication.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
}

model GetInstanceTwoFactorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceTwoFactorResponseBody(name='body'),
}

/**
  * @description You can call this operation to query the settings of two-factor authentication on a bastion host. After you enable two-factor authentication, Bastionhost sends a verification code to a local user when the local user logs on to a bastion host. A local user can log on to the bastion host only when the local user enters the valid username and password and the verification code. This reduces the security risks caused by account information leaks.
  * ### Limit
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of GetInstanceTwoFactor  GetInstanceTwoFactorRequest
  * @return GetInstanceTwoFactorResponse
 */
async function getInstanceTwoFactor(request: GetInstanceTwoFactorRequest): GetInstanceTwoFactorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInstanceTwoFactor', 'POST', '/', 'json', false, 'json', request);
}

model GetNetworkDomainRequest {
  instanceId: string(name='InstanceId', description='The bastion host ID.
> You can call the [DescribeInstances ](https://help.aliyun.com/document_detail/153281.html)operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-i7m2btk6g48', position='Query'),
  networkDomainId: string(name='NetworkDomainId', description='The ID of the network domain to query.
> You can call the [ListNetworkDomains ](https://help.aliyun.com/document_detail/2758827.html)operation to query the network domain ID.

This parameter is required.', example='3', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model GetNetworkDomainResponseBody = {
  networkDomain?: {
    comment?: string(name='Comment', description='The remarks of the network domain.', example='comment'),
    default?: boolean(name='Default', description='Indicates whether the network domain is a built-in network domain.

* **true**
* **false**', example='false'),
    networkDomainId?: string(name='NetworkDomainId', description='The network domain ID.', example='2'),
    networkDomainName?: string(name='NetworkDomainName', description='The name of the network domain.', example='SSH Proxy'),
    networkDomainType?: string(name='NetworkDomainType', description='The connection mode of the network domain. Valid values:

* Direct
* Proxy', example='Proxy'),
    proxies?: [ 
      {
        address?: string(name='Address', description='The IP address of the proxy server.', example='`47.102.**.**`'),
        hasPassword?: boolean(name='HasPassword', description='Indicates whether the proxy server has a password. Valid values:

- **true**
- **false**', example='true'),
        nodeType?: string(name='NodeType', description='The node type of the proxy server. Valid values:
- **Master**: primary proxy server.
- **Slave**: secondary proxy server.', example='Master'),
        port?: int32(name='Port', description='The port of the proxy server.', example='22'),
        proxyState?: string(name='ProxyState', description='The status of the proxy server.

- **Available**
- **Unavailable**', example='Unavailable'),
        proxyStateErrorCode?: string(name='ProxyStateErrorCode', description='The error code that indicates the status of the proxy server.

- **CHECK_PWD_FAILED**: The password is invalid.
- **CHECK_PWD_TIMEOUT**: The password verification session timed out.
- **CHECK_PWD_NETWORK_ERR**: A network error occurred.
- **UNEXPECTED**: An unknown error occurred.', example='CHECK_PWD_TIMEOUT'),
        proxyType?: string(name='ProxyType', description='The proxy type. Valid values:

- **SSHProxy**
- **HTTPProxy**
- **Socks5Proxy**', example='HTTPProxy'),
        user?: string(name='User', description='The username of the proxy server.', example='root'),
      }
    ](name='Proxies', description='The information about the proxy servers.'),
  }(name='NetworkDomain', description='The detailed information about the network domain.'),
  requestId?: string(name='RequestId', description='The request ID.', example='05F59944-2E24-595C-B21A-8C9955E60FAF'),
}

model GetNetworkDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNetworkDomainResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetNetworkDomain  GetNetworkDomainRequest
  * @return GetNetworkDomainResponse
 */
async function getNetworkDomain(request: GetNetworkDomainRequest): GetNetworkDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetNetworkDomain', 'POST', '/', 'json', false, 'json', request);
}

model GetPolicyRequest {
  instanceId: string(name='InstanceId', description='The ID of the bastion host to which the control policy to query belongs.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-zvp2d3syb0g', position='Query'),
  policyId: string(name='PolicyId', description='The ID of the control policy that you want to query.

>  You can call the [ListPolicies](https://help.aliyun.com/document_detail/2758876.html) operation to query the control policy ID.

This parameter is required.', example='3', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host to which the control policy to query belongs.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model GetPolicyResponseBody = {
  policy?: {
    accessTimeRangeConfig?: {
      effectiveTime?: [ 
        {
          days?: [ string ](name='Days', description='The days of a week on which logons are allowed.'),
          hours?: [ string ](name='Hours', description='The time periods during which logons are allowed.'),
        }
      ](name='EffectiveTime', description='The details of the periods during which logons are allowed.'),
    }(name='AccessTimeRangeConfig', description='The details of the logon period restrictions.'),
    approvalConfig?: {
      switchStatus?: string(name='SwitchStatus', description='Indicates whether O\\&M approval is enabled in the control policy. Valid values:

*   **On**: O\\&M approval is enabled.
*   **Off**: O\\&M approval is disabled.', example='Off'),
    }(name='ApprovalConfig', description='The O\\&M approval setting.'),
    commandConfig?: {
      approval?: {
        commands?: [ string ](name='Commands', description='An array of commands that can be run only after approval.'),
      }(name='Approval', description='The details of the command approval settings.'),
      deny?: {
        aclType?: string(name='AclType', description='The type of command control. Valid values:

*   white: whitelist mode.
*   black: blacklist mode.', example='black'),
        commands?: [ string ](name='Commands', description='An array of controlled commands.'),
      }(name='Deny', description='The details of the command control setting.'),
    }(name='CommandConfig', description='The details of the command policy.'),
    comment?: string(name='Comment', description='The description of the control policy.', example='comment'),
    IPAclConfig?: {
      aclType?: string(name='AclType', description='The mode of access control on source IP addresses. Valid values:

*   white: whitelist mode.
*   black: blacklist mode.', example='black'),
      iPs?: [ string ](name='IPs', description='The IP addresses from which logons are not allowed.'),
    }(name='IPAclConfig', description='The access control settings on source IP addresses.'),
    policyId?: string(name='PolicyId', description='The ID of the control policy.', example='3'),
    policyName?: string(name='PolicyName', description='The name of the control policy.', example='test'),
    priority?: long(name='Priority', description='The priority of the control policy. A smaller value indicates a higher priority.', example='1'),
    protocolConfig?: {
      RDP?: {
        clipboardDownload?: string(name='ClipboardDownload', description='Indicates whether downloading from the clipboard is enabled. Valid values:

*   Enable
*   Disable', example='Enable'),
        clipboardUpload?: string(name='ClipboardUpload', description='Indicates whether file uploading from the clipboard is enabled. Valid values:

*   Enable
*   Disable', example='Enable'),
        diskRedirection?: string(name='DiskRedirection', description='Indicates whether driver mapping is enabled. Valid values:

*   Enable
*   Disable', example='Enable'),
        recordKeyboard?: string(name='RecordKeyboard', description='Indicates whether keyboard recording is enabled. Valid values:

*   Enable
*   Disable', example='Enable'),
      }(name='RDP', description='The configuration details of Remote Desktop Protocol (RDP) options.'),
      SSH?: {
        execCommand?: string(name='ExecCommand', description='Indicates whether remote command execution is enabled. Valid values:

*   Enable
*   Disable', example='Enable'),
        SFTPChannel?: string(name='SFTPChannel', description='Indicates whether the SFTP channel option is enabled. Valid values:

*   Enable
*   Disable', example='Enable'),
        SFTPDownloadFile?: string(name='SFTPDownloadFile', description='Indicates whether file downloading is enabled in SFTP-based O\\&M. Valid values:

*   Enable
*   Disable', example='Enable'),
        SFTPMkdir?: string(name='SFTPMkdir', description='Indicates whether folder creation is enabled in SFTP-based O\\&M. Valid values:

*   Enable
*   Disable', example='Enable'),
        SFTPRemoveFile?: string(name='SFTPRemoveFile', description='Indicates whether file deletion is enabled in SFTP-based O\\&M. Valid values:

*   Enable
*   Disable', example='Enable'),
        SFTPRenameFile?: string(name='SFTPRenameFile', description='Indicates whether file renaming is enabled in SFTP-based O\\&M. Valid values:

*   Enable
*   Disable', example='Enable'),
        SFTPRmdir?: string(name='SFTPRmdir', description='Indicates whether folder deletion is enabled in SFTP-based O\\&M. Valid values:

*   Enable
*   Disable', example='Enable'),
        SFTPUploadFile?: string(name='SFTPUploadFile', description='Indicates whether file uploading is enabled in SFTP-based O\\&M. Valid values:

*   Enable
*   Disable', example='Enable'),
        SSHChannel?: string(name='SSHChannel', description='Indicates whether the SSH channel option is enabled. Valid values:

*   Enable
*   Disable', example='Enable'),
        x11Forwarding?: string(name='X11Forwarding', description='Indicates whether X11 forwarding is enabled. Valid values:

*   Enable
*   Disable', example='Enable'),
      }(name='SSH', description='The configuration details of SSH and SSH File Transfer Protocol (SFTP) options.'),
    }(name='ProtocolConfig', description='The details of protocol control.'),
  }(name='Policy', description='The details of the control policy.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0D29F2C0-8B4B-5861-9474-F3F23D25594B'),
}

model GetPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPolicy  GetPolicyRequest
  * @return GetPolicyResponse
 */
async function getPolicy(request: GetPolicyRequest): GetPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPolicy', 'POST', '/', 'json', false, 'json', request);
}

model GetPolicyAssetScopeRequest {
  instanceId: string(name='InstanceId', description='The bastion host ID.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  policyId: string(name='PolicyId', description='The control policy ID.

> You can call the [ListPolicies](https://help.aliyun.com/document_detail/2758876.html) operation to query the control policy ID.

This parameter is required.', example='7', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model GetPolicyAssetScopeResponseBody = {
  assetScope?: {
    databases?: [ 
      {
        accountScopeType?: string(name='AccountScopeType', description='The scope of database accounts to which the control policy applies. Valid values:

*   **All**: The control policy applies to all database accounts of the database.
*   **AccountId**: The control policy applies to specified database accounts of the database.', example='AccountId'),
        databaseAccountIds?: [ string ](name='DatabaseAccountIds', description='The IDs of database accounts to which the control policy applies.'),
        databaseId?: string(name='DatabaseId', description='The database ID.', example='17'),
      }
    ](name='Databases', description='The databases and database accounts to which the control policy applies.'),
    hostGroups?: [ 
      {
        accountNames?: [ string ](name='AccountNames', description='The asset accounts to which the control policy applies.'),
        accountScopeType?: string(name='AccountScopeType', description='The scope of asset accounts to which the control policy applies. Valid values:

*   **All**: The control policy applies to all accounts in the asset group.
*   **AccountName**: The control policy applies to specified accounts in the asset group.', example='All'),
        hostGroupId?: string(name='HostGroupId', description='The asset group ID.', example='4'),
      }
    ](name='HostGroups', description='The asset groups and asset accounts to which the control policy applies.'),
    hosts?: [ 
      {
        accountScopeType?: string(name='AccountScopeType', description='The scope of host accounts to which the control policy applies. Valid values:

*   **All**: The control policy applies to all accounts of the host.
*   **AccountId**: The control policy applies to specified accounts of the host.', example='All'),
        hostAccountIds?: [ string ](name='HostAccountIds', description='The host accounts to which the control policy applies.'),
        hostId?: string(name='HostId', description='The host ID.', example='1'),
      }
    ](name='Hosts', description='The hosts and host accounts to which the control policy applies.'),
    scopeType?: string(name='ScopeType', description='The scope of assets to which the control policy applies.

*   If **All** is returned for this parameter, the control policy applies to all assets.

*   If no value is returned for this parameter, the control policy applies to the assets specified in the return values of Databases, HostGroups, and Hosts.', example='All'),
  }(name='AssetScope', description='The assets to which the control policy applies.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
}

model GetPolicyAssetScopeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPolicyAssetScopeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPolicyAssetScope  GetPolicyAssetScopeRequest
  * @return GetPolicyAssetScopeResponse
 */
async function getPolicyAssetScope(request: GetPolicyAssetScopeRequest): GetPolicyAssetScopeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPolicyAssetScope', 'POST', '/', 'json', false, 'json', request);
}

model GetPolicyUserScopeRequest {
  instanceId: string(name='InstanceId', description='The ID of the bastion host to which the control policy to query belongs.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastion-xxxx-xx', position='Query'),
  policyId: string(name='PolicyId', description='The ID of the control policy that you want to query.

> You can call the [ListPolicies](https://help.aliyun.com/document_detail/2758876.html) operation to query the control policy ID.

This parameter is required.', example='1', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host to which the control policy to query belongs.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model GetPolicyUserScopeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
  userScope?: {
    scopeType?: string(name='ScopeType', description='The scope of users to whom the control policy applies.
*   If **All** is returned for this parameter, the control policy applies to all users.

*   If no value is returned for this parameter, the control policy applies to the assets specified in the return values of UserGroupIds and UserIds.', example='All'),
    userGroupIds?: [ string ](name='UserGroupIds', description='The user groups to which the control policy applies.'),
    userIds?: [ string ](name='UserIds', description='The users to whom the control policy applies.'),
  }(name='UserScope', description='The users to whom the control policy applies.'),
}

model GetPolicyUserScopeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPolicyUserScopeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPolicyUserScope  GetPolicyUserScopeRequest
  * @return GetPolicyUserScopeResponse
 */
async function getPolicyUserScope(request: GetPolicyUserScopeRequest): GetPolicyUserScopeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPolicyUserScope', 'POST', '/', 'json', false, 'json', request);
}

model GetRuleRequest {
  instanceId: string(name='InstanceId', description='The bastion host ID.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-wwo35essw07', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-beijing', position='Query'),
  ruleId: string(name='RuleId', description='The ID of the authorization rule to query.

>  You can call the [ListRules](https://help.aliyun.com/document_detail/2758868.html) operation to query the authorization rule ID.

This parameter is required.', example='18', position='Query'),
}

model GetRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
  rule?: {
    comment?: string(name='Comment', description='The remarks of the authorization rule.', example='comment'),
    databases?: [ 
      {
        databaseAccounts?: [ 
          {
            databaseAccountId?: string(name='DatabaseAccountId', description='The ID of the database account that the policy authorizes users to manage.', example='5'),
          }
        ](name='DatabaseAccounts', description='The database accounts on which permissions are granted by using the authorization rule.'),
        databaseId?: string(name='DatabaseId', description='The ID of the database that the policy authorizes users to manage.', example='2'),
      }
    ](name='Databases', description='The databases on which permissions are granted by using the authorization rule.'),
    effectiveEndTime?: string(name='EffectiveEndTime', description='The end time of the validity period of the authorization rule. The value is a UNIX timestamp. Unit: seconds.', example='1698720972'),
    effectiveStartTime?: string(name='EffectiveStartTime', description='The start time of the validity period of the authorization rule. The value is a UNIX timestamp. Unit: seconds.', example='1687140883'),
    hostGroups?: [ 
      {
        hostAccountNames?: [ string ](name='HostAccountNames', description='The asset accounts on which permissions are granted by using the authorization rule.'),
        hostGroupId?: string(name='HostGroupId', description='The ID of the asset group that the policy authorizes users to manage.', example='7'),
      }
    ](name='HostGroups', description='The asset groups on which permissions are granted by using the authorization rule.'),
    hosts?: [ 
      {
        hostAccounts?: [ 
          {
            hostAccountId?: string(name='HostAccountId', description='The ID of the host account that the policy authorizes users to manage.', example='9'),
          }
        ](name='HostAccounts', description='The host accounts that the policy authorizes users to manage.'),
        hostId?: string(name='HostId', description='The ID of the host that the policy authorizes users to manage.', example='52'),
      }
    ](name='Hosts', description='The information about the hosts that the policy authorizes users to manage.'),
    ruleId?: string(name='RuleId', description='The ID of the authorization rule.', example='3'),
    ruleName?: string(name='RuleName', description='The name of the authorization rule.', example='rule'),
    userGroups?: [ 
      {
        userGroupId?: string(name='UserGroupId', description='The ID of the authorized user group.', example='2'),
      }
    ](name='UserGroups', description='The authorized user groups.'),
    users?: [ 
      {
        userId?: string(name='UserId', description='The ID of the authorized user.', example='3'),
      }
    ](name='Users', description='The authorized users.'),
  }(name='Rule', description='The returned information about the authorization rule.'),
}

model GetRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetRule  GetRuleRequest
  * @return GetRuleResponse
 */
async function getRule(request: GetRuleRequest): GetRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRule', 'POST', '/', 'json', false, 'json', request);
}

model GetUserRequest {
  instanceId: string(name='InstanceId', description='The ID of the bastion host on which you want to query the user.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host on which you want to query the user.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  userId: string(name='UserId', description='The ID of the user.

> You can call the [ListUsers](https://help.aliyun.com/document_detail/204522.html) operation to query the ID of the user.

This parameter is required.', example='1', position='Query'),
}

model GetUserResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
  user?: {
    comment?: string(name='Comment', description='The description of the user.', example='comment'),
    displayName?: string(name='DisplayName', description='The display name of the user.', example='Bob'),
    effectiveEndTime?: long(name='EffectiveEndTime', description='The end of the validity period of the user. The value is a UNIX timestamp. Unit: seconds.', example='1672502400'),
    effectiveStartTime?: long(name='EffectiveStartTime', description='The beginning of the validity period of the user. The value is a UNIX timestamp. Unit: seconds.', example='1669630029'),
    email?: string(name='Email', description='The email address of the user.', example='1099**@qq.com'),
    language?: string(name='Language', description='This parameter is required if LanguageStatus is set to Custom.

- **zh-cn**: simplified Chinese.
- **en**: English.', example='en'),
    languageStatus?: string(name='LanguageStatus', description='Indicates whether notifications are sent in the language specified in the global settings or a custom language.

*   **Global**: Global
*   **Custom**: Custom', example='Custom'),
    mobile?: string(name='Mobile', description='The mobile phone number of the user.', example='1359999****'),
    mobileCountryCode?: string(name='MobileCountryCode', description='The location in which the mobile number of the user is registered. Valid values:

*   **CN**: the Chinese mainland, whose country calling code is +86
*   **HK**: Hong Kong (China), whose country calling code is +852
*   **MO**: Macao (China), whose country calling code is +853
*   **TW**: Taiwan (China), whose country calling code is +886
*   **RU**: Russia, whose country calling code is +7
*   **SG**: Singapore, whose country calling code is +65
*   **MY**: Malaysia, whose country calling code is +60
*   **ID**: Indonesia, whose country calling code is +62
*   **DE**: Germany, whose country calling code is +49
*   **AU**: Australia, whose country calling code is +61
*   **US**: US, whose country calling code is +1
*   **AE**: United Arab Emirates, whose country calling code is +971
*   **JP:** Japan, whose country calling code is +81
*   **GB**: UK, whose country calling code is +44
*   **IN**: India, whose country calling code is +91
*   **KR**: Republic of Korea, whose country calling code is +82
*   **PH**: Philippines, whose country calling code is +63
*   **CH**: Switzerland, whose country calling code is +41
*   **SE**: Sweden, whose country calling code is +46', example='CN'),
    needResetPassword?: boolean(name='NeedResetPassword', description='Specifies whether password reset is required upon the next logon. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
    source?: string(name='Source', description='The source of the user. Valid values:

*   **Local**: a local user
*   **Ram**: a RAM user', example='Local'),
    sourceUserId?: string(name='SourceUserId', description='The unique ID of the user.

> This parameter uniquely identifies a RAM user of the bastion host. A value is returned for this parameter if the **Source** parameter is set to **Ram**. No value is returned for this parameter if the **Source** parameter is set to **Local**.', example='122748924538****'),
    twoFactorMethods?: [ string ](name='TwoFactorMethods', description='An array that consists of the details of the two-factor authentication method.'),
    twoFactorStatus?: string(name='TwoFactorStatus', description='The two-factor authentication status of the user. Valid values:

*   **Global**: The global settings are used.
*   **Disable**: The two-factor authentication is disabled.
*   **Enable**: The two-factor authentication is enabled and the user-specific setting is used.', example='Enable'),
    userId?: string(name='UserId', description='The ID of the user.', example='1'),
    userName?: string(name='UserName', description='The logon name of the user.', example='abcabc_def'),
    userState?: [ string ](name='UserState', description='An array that consists of the details of the user status.'),
  }(name='User', description='The detailed information about the queried user.'),
}

model GetUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetUser  GetUserRequest
  * @return GetUserResponse
 */
async function getUser(request: GetUserRequest): GetUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUser', 'POST', '/', 'json', false, 'json', request);
}

model GetUserGroupRequest {
  instanceId: string(name='InstanceId', description='The ID of the bastion host in which you want to query the details of the user group.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host in which you want to query the details of the user group.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  userGroupId: string(name='UserGroupId', description='The ID of the user group.

> You can call the [ListUserGroups](https://help.aliyun.com/document_detail/204509.html) operation to query the ID of the user group.

This parameter is required.', example='1', position='Query'),
}

model GetUserGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
  userGroup?: {
    comment?: string(name='Comment', description='The description of the user group.', example='comment'),
    userGroupId?: string(name='UserGroupId', description='The ID of the group.', example='1'),
    userGroupName?: string(name='UserGroupName', description='The name of the user group.', example='UserGroup01'),
  }(name='UserGroup', description='The details of the user group returned.'),
}

model GetUserGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetUserGroup  GetUserGroupRequest
  * @return GetUserGroupResponse
 */
async function getUserGroup(request: GetUserGroupRequest): GetUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUserGroup', 'POST', '/', 'json', false, 'json', request);
}

model ListApproveCommandsRequest {
  instanceId: string(name='InstanceId', description='The ID of the bastion host.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-zvp2xvysf08', position='Query'),
  pageNumber: string(name='PageNumber', description='The number of the page. Default value: **1**.

This parameter is required.', example='1', position='Query'),
  pageSize: string(name='PageSize', description='The number of entries per page.\\
Maximum value: 1000. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

>  We recommend that you do not leave this parameter empty.

This parameter is required.', example='20', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-beijing', position='Query'),
}

model ListApproveCommandsResponseBody = {
  approveCommands?: [ 
    {
      approveCommandId?: string(name='ApproveCommandId', description='The ID of the command to be reviewed.', example='1'),
      assetAccountName?: string(name='AssetAccountName', description='The username of the asset account that is used for O\\&M.', example='root'),
      assetIp?: string(name='AssetIp', description='The IP address of the asset for O\\&M.', example='10.167.XX.XX'),
      assetName?: string(name='AssetName', description='The name of the asset.', example='poros-test'),
      clientIp?: string(name='ClientIp', description='The source IP address from which the application is submitted.', example='172.18.XX.XX'),
      clientUser?: string(name='ClientUser', description='The Bastionhost user who submitted the O\\&M application.', example='test'),
      command?: string(name='Command', description='The command to be reviewed.', example='/bin/bash'),
      createTime?: string(name='CreateTime', description='The time when the O\\&M application was submitted. The value is a UNIX timestamp. Unit: seconds.', example='1679393152'),
      protocolName?: string(name='ProtocolName', description='The O\\&M protocol.', example='SSH'),
      sessionId?: string(name='SessionId', description='The ID of the O\\&M session that triggered the review.', example='95f873ab64a76d5b0000000000004d5e'),
      state?: string(name='State', description='The status of the review. Valid values: **Wait**: The command is pending review.', example='Wait'),
    }
  ](name='ApproveCommands', description='The commands to be reviewed.'),
  requestId?: string(name='RequestId', description='The request ID.', example='E3EF7711-766D-5888-997B-EFBA76809229'),
  totalCount?: long(name='TotalCount', description='The total number of commands to be reviewed.', example='15'),
}

model ListApproveCommandsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListApproveCommandsResponseBody(name='body'),
}

/**
  * @description You can call this operation to query commands to be reviewed by a Bastionhost administrator.
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of ListApproveCommands  ListApproveCommandsRequest
  * @return ListApproveCommandsResponse
 */
async function listApproveCommands(request: ListApproveCommandsRequest): ListApproveCommandsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApproveCommands', 'POST', '/', 'json', false, 'json', request);
}

model ListDatabaseAccountsRequest {
  databaseAccountName?: string(name='DatabaseAccountName', description='The name of the database account to query. The name can be up to 128 characters in length. Only exact match is supported.', example='test', position='Query'),
  databaseId?: string(name='DatabaseId', description='The ID of the database whose database accounts you want to query.

>  You can call the [ListDatabases](https://help.aliyun.com/document_detail/2758822.html) operation to query the database ID.', example='3', position='Query'),
  instanceId: string(name='InstanceId', description='The bastion host ID.

> You can call the DescribeInstances operation to query the bastion host ID.[](~~153281~~)

This parameter is required.', example='bastionhost-cn-7mz2za0ro06', position='Query'),
  pageNumber?: string(name='PageNumber', description='The page number. Default value: 1.', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries per page.\\
Valid values: 1 to 100. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

> We recommend that you do not leave this parameter empty.', example='20', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-shanghai', position='Query'),
}

model ListDatabaseAccountsResponseBody = {
  databaseAccounts?: [ 
    {
      databaseAccountId?: string(name='DatabaseAccountId', description='The database account ID.', example='59'),
      databaseAccountName?: string(name='DatabaseAccountName', description='The name of the database account.', example='test'),
      databaseId?: string(name='DatabaseId', description='The database ID.', example='4'),
      databaseSchema?: string(name='DatabaseSchema', description='The name of the database. A value is returned for this parameter if the engine of the database with the specified database ID is PostgreSQL or Oracle.', example='orcl'),
      hasPassword?: string(name='HasPassword', description='Indicates whether the database account has a password. Valid values:

*   **true**
*   **false**', example='true'),
    }
  ](name='DatabaseAccounts', description='The returned database accounts.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4F6C075F-FC86-476E-943B-097BD4E12948'),
  totalCount?: long(name='TotalCount', description='The total number of database accounts returned.', example='10'),
}

model ListDatabaseAccountsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDatabaseAccountsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDatabaseAccounts  ListDatabaseAccountsRequest
  * @return ListDatabaseAccountsResponse
 */
async function listDatabaseAccounts(request: ListDatabaseAccountsRequest): ListDatabaseAccountsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDatabaseAccounts', 'POST', '/', 'json', false, 'json', request);
}

model ListDatabaseAccountsForUserRequest {
  databaseAccountName?: string(name='DatabaseAccountName', description='The name of the database account to query. The name can be up to 128 characters in length. Only exact match is supported.', example='test', position='Query'),
  databaseId: string(name='DatabaseId', description='The ID of the database whose accounts you want to query.

This parameter is required.', example='89', position='Query'),
  instanceId: string(name='InstanceId', description='The bastion host ID.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-zz42zoqql01', position='Query'),
  pageNumber?: string(name='PageNumber', description='The page number. Default value: **1**.', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries per page.\\
Valid values: 1 to 100. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

> We recommend that you do not leave this parameter empty.', example='20', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-shanghai', position='Query'),
  userId: string(name='UserId', description='The ID of the user to query. This operation returns whether the user is authorized to manage each database account.

> You can call the ListUsers operation to query the ID of the user.[](~~204522~~)

This parameter is required.', example='2', position='Query'),
}

model ListDatabaseAccountsForUserResponseBody = {
  databaseAccounts?: [ 
    {
      databaseAccountId?: string(name='DatabaseAccountId', description='The database account ID.', example='6'),
      databaseAccountName?: string(name='DatabaseAccountName', description='The name of the database account.', example='test'),
      databaseId?: string(name='DatabaseId', description='The ID of the database to which the database account belongs.', example='70'),
      isAuthorized?: boolean(name='IsAuthorized', description='Indicates whether the user is authorized to manage the database account. Valid values:

*   **true**
*   **false**', example='true'),
      protocolName?: string(name='ProtocolName', description='The protocol used by the database account. Valid values:

*   **MySQL**
*   **Oracle**
*   **PostgreSQL**
*   **SQLServer**', example='MySQL'),
    }
  ](name='DatabaseAccounts', description='The database accounts returned.'),
  requestId?: string(name='RequestId', description='The request ID.', example='00E3701B-3616-55FE-93EC-E7CF5480B654'),
  totalCount?: long(name='TotalCount', description='The total number of database accounts that are returned.', example='3'),
}

model ListDatabaseAccountsForUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDatabaseAccountsForUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDatabaseAccountsForUser  ListDatabaseAccountsForUserRequest
  * @return ListDatabaseAccountsForUserResponse
 */
async function listDatabaseAccountsForUser(request: ListDatabaseAccountsForUserRequest): ListDatabaseAccountsForUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDatabaseAccountsForUser', 'POST', '/', 'json', false, 'json', request);
}

model ListDatabaseAccountsForUserGroupRequest {
  databaseAccountName?: string(name='DatabaseAccountName', description='The name of the database account to query. The name can be up to 128 characters in length. Only exact match is supported.', example='test', position='Query'),
  databaseId: string(name='DatabaseId', description='The ID of the database whose database accounts you want to query.

>  You can call the [ListDatabaseAccounts](https://help.aliyun.com/document_detail/2758839.html) operation to query the database account ID.

This parameter is required.', example='36', position='Query'),
  instanceId: string(name='InstanceId', description='The bastion host ID.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-pe334a03o0h', position='Query'),
  pageNumber?: string(name='PageNumber', description='The page number. Default value: **1**.', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries per page.\\
Valid values: 1 to 100. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

> We recommend that you do not leave this parameter empty.', example='20', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  userGroupId: string(name='UserGroupId', description='The ID of the user group to query. This operation returns whether the user group is authorized to manage each database account.

>  You can call the [ListUserGroups](https://help.aliyun.com/document_detail/204509.html) operation to query the user group ID.

This parameter is required.', example='3', position='Query'),
}

model ListDatabaseAccountsForUserGroupResponseBody = {
  databaseAccounts?: [ 
    {
      databaseAccountId?: string(name='DatabaseAccountId', description='The ID of the database account.', example='4'),
      databaseAccountName?: string(name='DatabaseAccountName', description='The name of the database account.', example='root'),
      databaseId?: string(name='DatabaseId', description='The ID of the database to which the database account belongs.', example='11'),
      isAuthorized?: boolean(name='IsAuthorized', description='Indicates whether the user group is authorized to manage the database account. Valid values:

*   **true**
*   **false**', example='true'),
      protocolName?: string(name='ProtocolName', description='The protocol used by the database account. Valid values:

*   **MySQL**
*   **Oracle**
*   **PostgreSQL**
*   **SQLServer**', example='MySQL'),
    }
  ](name='DatabaseAccounts', description='The database accounts returned.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
  totalCount?: long(name='TotalCount', description='The total number of database accounts returned.', example='10'),
}

model ListDatabaseAccountsForUserGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDatabaseAccountsForUserGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDatabaseAccountsForUserGroup  ListDatabaseAccountsForUserGroupRequest
  * @return ListDatabaseAccountsForUserGroupResponse
 */
async function listDatabaseAccountsForUserGroup(request: ListDatabaseAccountsForUserGroupRequest): ListDatabaseAccountsForUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDatabaseAccountsForUserGroup', 'POST', '/', 'json', false, 'json', request);
}

model ListDatabasesRequest {
  databaseType?: string(name='DatabaseType', description='The engine of the database to query. Valid values:

*   **MySQL**
*   **Oracle**
*   **PostgreSQL**
*   **SQLServer**', example='MySQL', position='Query'),
  hostGroupId?: string(name='HostGroupId', description='The ID of the asset group to query. This operation returns the databases in the asset group.

> You can call the [ListHostGroups](https://help.aliyun.com/document_detail/201307.html) operation to query the ID of the asset group.', example='20', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host to query.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-7mz28f5tk0o', position='Query'),
  networkDomainId?: string(name='NetworkDomainId', description='The ID of the network domain where the database to query resides.', example='2', position='Query'),
  pageNumber?: string(name='PageNumber', description='The number of the page to return. Default value: 1.', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries per page.
Valid values: 1 to100. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

> We recommend that you do not leave this parameter empty.', example='20', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host to query.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  source?: string(name='Source', description='The type of the database to query. Valid values:

* **Local**: on-premises database.
* **Rds**: ApsaraDB for RDS instance.
* **PolarDB**: PolarDB cluster', example='Local', position='Query'),
}

model ListDatabasesResponseBody = {
  databases?: [ 
    {
      activeAddressType?: string(name='ActiveAddressType', description='The address type of the database. Valid values:

* **Public**
* **Private**', example='Public'),
      comment?: string(name='Comment', description='The remarks of the database.', example='comment'),
      databaseId?: string(name='DatabaseId', description='The database ID.', example='9'),
      databaseName?: string(name='DatabaseName', description='The name of the database.', example='MySQL0'),
      databasePort?: int32(name='DatabasePort', description='The port of the database.', example='3306'),
      databasePrivateAddress?: string(name='DatabasePrivateAddress', description='The internal address of the database. The value is a domain name or an IP address.', example='rm-wz973w7******'),
      databasePublicAddress?: string(name='DatabasePublicAddress', description='The public address of the database. The value is a domain name or an IP address.', example='rm-uf65n2******'),
      databaseType?: string(name='DatabaseType', description='The database engine. Valid values:
*   **MySQL**
*   **Oracle**
*   **PostgreSQL**
*   **SQLServer**', example='MySQL'),
      networkDomainId?: string(name='NetworkDomainId', description='The ID of the network domain where the database resides.', example='8'),
      source?: string(name='Source', description='The type of the database. Valid values:

* **Local**: on-premises database.
* **Rds**: ApsaraDB for RDS instance.
* **PolarDB**: PolarDB cluster', example='Local'),
      sourceInstanceId?: string(name='SourceInstanceId', description='The ID of the ApsaraDB for RDS instance or PolarDB cluster.
> No value is returned for this parameter if **Source** is set to **Local**.', example='i-wz9ejupczf41******'),
      sourceInstanceRegionId?: string(name='SourceInstanceRegionId', description='The region ID of the ApsaraDB for RDS instance or PolarDB cluster.', example='cn-hangzhou'),
      sourceInstanceState?: string(name='SourceInstanceState', description='The status of the database. Valid values:

* **Normal**
* **Release**', example='Normal'),
    }
  ](name='Databases', description='The databases returned.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
  totalCount?: long(name='TotalCount', description='The total number of databases returned.', example='4'),
}

model ListDatabasesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDatabasesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDatabases  ListDatabasesRequest
  * @return ListDatabasesResponse
 */
async function listDatabases(request: ListDatabasesRequest): ListDatabasesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDatabases', 'POST', '/', 'json', false, 'json', request);
}

model ListDatabasesForUserRequest {
  databaseAddress?: string(name='DatabaseAddress', description='The address of the database to query. Only exact match is supported.', example='`47.101.**.**`', position='Query'),
  databaseName?: string(name='DatabaseName', description='The name of the database to query.', example='MySQL-8.0', position='Query'),
  databaseType?: string(name='DatabaseType', description='The engine of the database to query. Valid values:

*   **MySQL**
*   **Oracle**
*   **PostgreSQL**
*   **SQLServer**', example='MySQL', position='Query'),
  instanceId: string(name='InstanceId', description='The bastion host ID.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-tl32swayw7o', position='Query'),
  networkDomainId?: string(name='NetworkDomainId', description='The ID of the network domain where the database to query resides.', example='5', position='Query'),
  pageNumber?: string(name='PageNumber', description='The page number. Default value: **1**. Pages start from page 1.', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries per page.\\
Valid values: 1 to 100. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

> We recommend that you do not leave this parameter empty.', example='20', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  userId: string(name='UserId', description='The ID of the user to query.

This parameter is required.', example='3', position='Query'),
}

model ListDatabasesForUserResponseBody = {
  databases?: [ 
    {
      activeAddressType?: string(name='ActiveAddressType', description='The address type of the database. Valid values:

*   **Public**
*   **Private**', example='Private'),
      comment?: string(name='Comment', description='The remarks of the database.', example='comment'),
      databaseId?: string(name='DatabaseId', description='The database ID.', example='36'),
      databaseName?: string(name='DatabaseName', description='The database name.', example='MySQL56'),
      databasePort?: long(name='DatabasePort', description='The database port.', example='3306'),
      databasePrivateAddress?: string(name='DatabasePrivateAddress', description='The internal endpoint of the database. The value is a domain name or an IP address.', example='rm-wz97******'),
      databasePublicAddress?: string(name='DatabasePublicAddress', description='The public endpoint of the database. The value is a domain name or an IP address.', example='rm-uf65******'),
      databaseType?: string(name='DatabaseType', description='The database engine. Valid values:

*   **MySQL**
*   **Oracle**
*   **PostgreSQL**
*   **SQLServer**', example='MySQL'),
      networkDomainId?: string(name='NetworkDomainId', description='The ID of the network domain where the database resides.', example='2'),
      source?: string(name='Source', description='The database type. Valid values:

*   **Local**: on-premises database.
*   **Rds**: ApsaraDB RDS instance.
*   **PolarDB**: PolarDB cluster.', example='Local'),
      sourceInstanceId?: string(name='SourceInstanceId', description='The ID of the ApsaraDB RDS instance or PolarDB cluster.

>  No value is returned for this parameter if **Source** is set to **Local**.', example='i-wz9fv2hwux78x9h1pmje'),
    }
  ](name='Databases', description='The databases returned.'),
  requestId?: string(name='RequestId', description='The request ID.', example='A8A665B9-8550-4942-9DEE-73198051856B'),
  totalCount?: long(name='TotalCount', description='The total number of databases returned.', example='15'),
}

model ListDatabasesForUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDatabasesForUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDatabasesForUser  ListDatabasesForUserRequest
  * @return ListDatabasesForUserResponse
 */
async function listDatabasesForUser(request: ListDatabasesForUserRequest): ListDatabasesForUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDatabasesForUser', 'POST', '/', 'json', false, 'json', request);
}

model ListDatabasesForUserGroupRequest {
  databaseAddress?: string(name='DatabaseAddress', description='The address of the database to query. Only exact match is supported.', example='`47.101.**.**`', position='Query'),
  databaseName?: string(name='DatabaseName', description='The name of the database to query.', example='test', position='Query'),
  databaseType?: string(name='DatabaseType', description='The engine of the database to query. Valid values:

*   **MySQL**
*   **Oracle**
*   **PostgreSQL**
*   **SQLServer**', example='MySQL', position='Query'),
  instanceId: string(name='InstanceId', description='The bastion host ID.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-7mz2ve7h00a', position='Query'),
  networkDomainId?: string(name='NetworkDomainId', example='2', position='Query'),
  pageNumber?: string(name='PageNumber', description='The page number. Default value: 1.', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries per page.\\
Valid values: 1 to 100. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

> We recommend that you do not leave this parameter empty.', example='20', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  userGroupId: string(name='UserGroupId', description='The ID of the user group to query.

This parameter is required.', example='2', position='Query'),
}

model ListDatabasesForUserGroupResponseBody = {
  databases?: [ 
    {
      activeAddressType?: string(name='ActiveAddressType', description='The address type of the database. Valid values:

*   **Public**
*   **Private**', example='Private'),
      comment?: string(name='Comment', description='The remarks of the database.', example='comment'),
      databaseAccountCount?: long(name='DatabaseAccountCount', description='The total number of database accounts returned.', example='2'),
      databaseId?: string(name='DatabaseId', description='The ID of the database to which the database account belongs.', example='2'),
      databaseName?: string(name='DatabaseName', description='The name of the database.', example='MySQL0'),
      databasePort?: long(name='DatabasePort', description='The port of the database.', example='3306'),
      databasePrivateAddress?: string(name='DatabasePrivateAddress', description='The internal address of the database. The value is a domain name or an IP address.', example='rm-bp1******'),
      databasePublicAddress?: string(name='DatabasePublicAddress', description='The public address of the database. The value is a domain name or an IP address.', example='rm-uf65******'),
      databaseType?: string(name='DatabaseType', description='The database engine. Valid values:

*   **MySQL**
*   **Oracle**
*   **PostgreSQL**
*   **SQLServer**', example='MySQL'),
      networkDomainId?: string(name='NetworkDomainId', description='The ID of the network domain where the database resides.', example='5'),
      source?: string(name='Source', description='The type of the database. Valid values:

*   **Local**: on-premises database.
*   **Rds**: ApsaraDB RDS instance.
*   **PolarDB**: PolarDB cluster.', example='Local'),
      sourceInstanceId?: string(name='SourceInstanceId', description='The ID of the ApsaraDB RDS instance or PolarDB cluster.

> No value is returned for this parameter if **Source** is set to **Local**.', example='i-wz9c7mjxywmdmqk7q6e4'),
    }
  ](name='Databases', description='The databases returned.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
  totalCount?: long(name='TotalCount', description='The total number of databases returned.', example='15'),
}

model ListDatabasesForUserGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDatabasesForUserGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDatabasesForUserGroup  ListDatabasesForUserGroupRequest
  * @return ListDatabasesForUserGroupResponse
 */
async function listDatabasesForUserGroup(request: ListDatabasesForUserGroupRequest): ListDatabasesForUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDatabasesForUserGroup', 'POST', '/', 'json', false, 'json', request);
}

model ListHostAccountsRequest {
  hostAccountName?: string(name='HostAccountName', description='The name of the host account that you want to query. The name can be up to 128 characters in length. Only exact match is supported.', example='abc', position='Query'),
  hostId: string(name='HostId', description='The ID of the specified host whose accounts you want to query.

>  You can call the [ListHosts](https://help.aliyun.com/document_detail/200665.html) operation to query the ID of the host.

This parameter is required.', example='1', position='Query'),
  hostIds?: string(name='HostIds', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host in which you want to query accounts of the specified host.

>  You can call the DescribeInstances operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  pageNumber?: string(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page.

Maximum value: 100. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

>  We recommend that you do not leave this parameter empty.', example='20', position='Query'),
  protocolName?: string(name='ProtocolName', description='The protocol used by the host whose accounts you want to query.

Valid values:

*   SSH
*   RDP', example='SSH', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host in which you want to query accounts of the specified host.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model ListHostAccountsResponseBody = {
  hostAccounts?: [ 
    {
      hasPassword?: boolean(name='HasPassword', description='Indicates whether a password is configured for the host account.

Valid values:

*   true: A password is configured for the host account.
*   false: No passwords are configured for the host account.', example='true'),
      hostAccountId?: string(name='HostAccountId', description='The ID of the host account.', example='1'),
      hostAccountName?: string(name='HostAccountName', description='The name of the host account.', example='abc'),
      hostId?: string(name='HostId', description='The ID of the host.', example='1'),
      hostShareKeyId?: string(name='HostShareKeyId', description='The ID of the shared key.', example='1'),
      hostShareKeyName?: string(name='HostShareKeyName', description='The name of the shared key.', example='name'),
      privateKeyFingerprint?: string(name='PrivateKeyFingerprint', description='The fingerprint of the private key for the host account.', example='fe:ca:37:42:30:00:9d:95:e6:73:e5:b0:32:0a:**:**'),
      privilegeType?: string(name='PrivilegeType'),
      protocolName?: string(name='ProtocolName', description='The protocol that is used by the host.

Valid values:

*   SSH
*   RDP', example='SSH'),
      rotationMode?: string(name='RotationMode'),
    }
  ](name='HostAccounts', description='An array that consists of the queried host accounts.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
  totalCount?: int32(name='TotalCount', description='The total number of host accounts that are queried.', example='1'),
}

model ListHostAccountsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHostAccountsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListHostAccounts  ListHostAccountsRequest
  * @return ListHostAccountsResponse
 */
async function listHostAccounts(request: ListHostAccountsRequest): ListHostAccountsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHostAccounts', 'POST', '/', 'json', false, 'json', request);
}

model ListHostAccountsForHostShareKeyRequest {
  hostShareKeyId: string(name='HostShareKeyId', description='The shared key ID.

>  You can call the [ListHostShareKeys](https://help.aliyun.com/document_detail/462973.html) operation to query the shared key ID.

This parameter is required.', example='1124', position='Query'),
  instanceId: string(name='InstanceId', description='The bastion host ID.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  pageNumber?: string(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page. Default value: **10**.', example='10', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model ListHostAccountsForHostShareKeyResponseBody = {
  hostAccounts?: [ 
    {
      hostAccountName?: string(name='HostAccountName', description='The name of the host account.', example='root1234'),
      hostId?: string(name='HostId', description='The ID of the host.', example='1113'),
      hostsAccountId?: string(name='HostsAccountId', description='The ID of the host account.', example='1235'),
      protocolName?: string(name='ProtocolName', description='The O\\&M protocol.', example='SSH'),
    }
  ](name='HostAccounts', description='An array that consists of the host accounts that are associated with the shared key.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
  totalCount?: long(name='TotalCount', description='The total number of the host accounts that are associated with the shared key.', example='5'),
}

model ListHostAccountsForHostShareKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHostAccountsForHostShareKeyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListHostAccountsForHostShareKey  ListHostAccountsForHostShareKeyRequest
  * @return ListHostAccountsForHostShareKeyResponse
 */
async function listHostAccountsForHostShareKey(request: ListHostAccountsForHostShareKeyRequest): ListHostAccountsForHostShareKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHostAccountsForHostShareKey', 'POST', '/', 'json', false, 'json', request);
}

model ListHostAccountsForUserRequest {
  hostAccountName?: string(name='HostAccountName', description='The name of the host account that you want to query. Exact match is supported.', example='root', position='Query'),
  hostId: string(name='HostId', description='The ID of the host to query.

> You can call the [ListHosts](https://help.aliyun.com/document_detail/200665.html) operation to query the ID of the host.

This parameter is required.', example='1', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host on which you want to perform the query. The host accounts that the specified user is authorized to manage on the specified host are queried.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  pageNumber?: string(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page.\\
Maximum value: 100. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

> We recommend that you do not leave this parameter empty.', example='20', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host on which you want to perform the query. The host accounts that the specified user is authorized to manage on the specified host are queried.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  userId: string(name='UserId', description='The ID of the user for which you want to query authorized host accounts.

> You can call the [ListUsers](https://help.aliyun.com/document_detail/204522.html) operation to query the ID of the user.

This parameter is required.', example='1', position='Query'),
}

model ListHostAccountsForUserResponseBody = {
  hostAccounts?: [ 
    {
      hostAccountId?: string(name='HostAccountId', description='The ID of the host account.', example='1'),
      hostAccountName?: string(name='HostAccountName', description='The name of the host account.', example='root'),
      hostId?: string(name='HostId', description='The ID of the host for which the host accounts were queried.', example='1'),
      isAuthorized?: boolean(name='IsAuthorized', description='Indicates whether the user is authorized to manage the host account. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
      protocolName?: string(name='ProtocolName', description='The protocol that is used by the host. Valid values:

*   **SSH**
*   **RDP**', example='SSH'),
    }
  ](name='HostAccounts', description='An array that consists of the queried host accounts.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
  totalCount?: int32(name='TotalCount', description='The total number of host accounts that were queried.', example='1'),
}

model ListHostAccountsForUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHostAccountsForUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListHostAccountsForUser  ListHostAccountsForUserRequest
  * @return ListHostAccountsForUserResponse
 */
async function listHostAccountsForUser(request: ListHostAccountsForUserRequest): ListHostAccountsForUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHostAccountsForUser', 'POST', '/', 'json', false, 'json', request);
}

model ListHostAccountsForUserGroupRequest {
  hostAccountName?: string(name='HostAccountName', description='The name of the host account that you want to query. Exact match is supported.', example='root', position='Query'),
  hostId: string(name='HostId', description='The ID of the host to query.

> You can call the [ListHosts](https://help.aliyun.com/document_detail/200665.html) operation to query the ID of the host.

This parameter is required.', example='1', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host on which you want to query the host accounts to be managed by the specified user group on the specified host.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  pageNumber?: string(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page.\\
Maximum value: 100. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

> We recommend that you do not leave this parameter empty.', example='20', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host on which you want to query the host accounts to be managed by the specified user group on the specified host.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  userGroupId: string(name='UserGroupId', description='The ID of the user group for which you want to query authorized host accounts.

> You can call the [ListUserGroups](https://help.aliyun.com/document_detail/204509.html) operation to query the ID of the user group.

This parameter is required.', example='1', position='Query'),
}

model ListHostAccountsForUserGroupResponseBody = {
  hostAccounts?: [ 
    {
      hostAccountId?: string(name='HostAccountId', description='The ID of the host account.', example='1'),
      hostAccountName?: string(name='HostAccountName', description='The name of the host account.', example='host１'),
      hostId?: string(name='HostId', description='The ID of the host for which the host accounts were queried.', example='１'),
      isAuthorized?: boolean(name='IsAuthorized', description='Indicates whether the user group is authorized to manage the host account. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
      protocolName?: string(name='ProtocolName', description='The protocol that is used by the host. Valid values:

*   **SSH**
*   **RDP**', example='SSH'),
    }
  ](name='HostAccounts', description='An array that consists of the queried host accounts.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
  totalCount?: int32(name='TotalCount', description='The total number of host accounts that were queried.', example='1'),
}

model ListHostAccountsForUserGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHostAccountsForUserGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListHostAccountsForUserGroup  ListHostAccountsForUserGroupRequest
  * @return ListHostAccountsForUserGroupResponse
 */
async function listHostAccountsForUserGroup(request: ListHostAccountsForUserGroupRequest): ListHostAccountsForUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHostAccountsForUserGroup', 'POST', '/', 'json', false, 'json', request);
}

model ListHostGroupAccountNamesForUserRequest {
  hostGroupId: string(name='HostGroupId', description='The ID of the host group.

> You can call the [ListHostGroups](https://help.aliyun.com/document_detail/201307.html) operation to query the ID of the host group.

This parameter is required.', example='1', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host to which the user belongs.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host to which the user belongs.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  userId: string(name='UserId', description='The ID of the user.

> You can call the [ListUsers](https://help.aliyun.com/document_detail/204522.html) operation to query the ID of the user.

This parameter is required.', example='1', position='Query'),
}

model ListHostGroupAccountNamesForUserResponseBody = {
  hostAccountNames?: [ string ](name='HostAccountNames', description='An array that consists of the names of host accounts.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
}

model ListHostGroupAccountNamesForUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHostGroupAccountNamesForUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListHostGroupAccountNamesForUser  ListHostGroupAccountNamesForUserRequest
  * @return ListHostGroupAccountNamesForUserResponse
 */
async function listHostGroupAccountNamesForUser(request: ListHostGroupAccountNamesForUserRequest): ListHostGroupAccountNamesForUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHostGroupAccountNamesForUser', 'POST', '/', 'json', false, 'json', request);
}

model ListHostGroupAccountNamesForUserGroupRequest {
  hostGroupId: string(name='HostGroupId', description='The ID of the host group.

> You can call the [ListHostGroups](https://help.aliyun.com/document_detail/201307.html) operation to query the ID of the host group.

This parameter is required.', example='1', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host on which you want to query the host account names the user group is authorized to manage in a host group.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host on which you want to query the host account names the user group is authorized to manage in a host group.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  userGroupId: string(name='UserGroupId', description='The ID of the user group.

> You can call the [ListUserGroups](https://help.aliyun.com/document_detail/204509.html) operation to query the ID of the user group.

This parameter is required.', example='1', position='Query'),
}

model ListHostGroupAccountNamesForUserGroupResponseBody = {
  hostAccountNames?: [ string ](name='HostAccountNames', description='The names of host accounts returned.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
}

model ListHostGroupAccountNamesForUserGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHostGroupAccountNamesForUserGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListHostGroupAccountNamesForUserGroup  ListHostGroupAccountNamesForUserGroupRequest
  * @return ListHostGroupAccountNamesForUserGroupResponse
 */
async function listHostGroupAccountNamesForUserGroup(request: ListHostGroupAccountNamesForUserGroupRequest): ListHostGroupAccountNamesForUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHostGroupAccountNamesForUserGroup', 'POST', '/', 'json', false, 'json', request);
}

model ListHostGroupsRequest {
  hostGroupName?: string(name='HostGroupName', description='The name of the host group that you want to query. Only exact match is supported.', example='Host group 1', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host to query.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/462953.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  pageNumber?: string(name='PageNumber', description='The page number. Default value: **1**.', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries per page. Valid values: 1 to 100. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

>  We recommend that you do not leave this parameter empty.', example='20', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host in which you want to query the host group.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model ListHostGroupsResponseBody = {
  hostGroups?: [ 
    {
      comment?: string(name='Comment', description='The remarks of the asset group.', example='Description'),
      hostGroupId?: string(name='HostGroupId', description='The asset group ID.', example='1'),
      hostGroupName?: string(name='HostGroupName', description='The name of the asset group.', example='Host group 1'),
      memberCount?: int32(name='MemberCount', description='The number of hosts in the asset group.', example='1'),
    }
  ](name='HostGroups', description='The asset groups returned.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
  totalCount?: int32(name='TotalCount', description='The total number of asset groups returned.', example='1'),
}

model ListHostGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHostGroupsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListHostGroups  ListHostGroupsRequest
  * @return ListHostGroupsResponse
 */
async function listHostGroups(request: ListHostGroupsRequest): ListHostGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHostGroups', 'POST', '/', 'json', false, 'json', request);
}

model ListHostGroupsForUserRequest {
  hostGroupName?: string(name='HostGroupName', description='The name of the host group to query. The name can be up to 128 characters in length. Only exact match is supported.', example='group', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host whose user you want to query.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  mode?: string(name='Mode', description='The category of the host groups to query. Valid values:

*   **Authorized** (default): queries the host groups that the user is authorized to manage.
*   **Unauthorized**: queries the host groups that the user is not authorized to manage.', example='Authorized', position='Query'),
  pageNumber?: string(name='PageNumber', description='The page number. Default value: **1**.', example='１', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries per page.\\
Valid values: 1 to 100. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

>  We recommend that you do not leave this parameter empty.', example='20', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host whose user you want to query.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  userId: string(name='UserId', description='The user ID.

>  You can call the [ListUsers](https://help.aliyun.com/document_detail/204522.html) operation to query the user ID.

This parameter is required.', example='１', position='Query'),
}

model ListHostGroupsForUserResponseBody = {
  hostGroups?: [ 
    {
      comment?: string(name='Comment', description='The remarks of the host group.', example='comment'),
      hostGroupId?: string(name='HostGroupId', description='The host group ID.', example='１'),
      hostGroupName?: string(name='HostGroupName', description='The name of the host group.', example='group'),
    }
  ](name='HostGroups', description='The host groups returned.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
  totalCount?: int32(name='TotalCount', description='The total number of host groups returned.', example='1'),
}

model ListHostGroupsForUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHostGroupsForUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListHostGroupsForUser  ListHostGroupsForUserRequest
  * @return ListHostGroupsForUserResponse
 */
async function listHostGroupsForUser(request: ListHostGroupsForUserRequest): ListHostGroupsForUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHostGroupsForUser', 'POST', '/', 'json', false, 'json', request);
}

model ListHostGroupsForUserGroupRequest {
  hostGroupName?: string(name='HostGroupName', description='The name of the host group that you want to query. Only exact match is supported.', example='group', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host to which the user group belongs.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  mode?: string(name='Mode', description='Specifies the category of the host group that you want to query. Valid values:

*   **Authorized**: queries the host groups that the user group is authorized to manage. This is the default value.
*   **Unauthorized**: queries the host groups that the user group is not authorized to manage.', example='Authorized', position='Query'),
  pageNumber?: string(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page.\\
Maximum value: 100. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

> We recommend that you do not leave this parameter empty.', example='20', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host to which the user group belongs.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  userGroupId: string(name='UserGroupId', description='The ID of the user group.

> You can call the [ListUserGroups](https://help.aliyun.com/document_detail/204509.html) operation to query the ID of the user group.

This parameter is required.', example='1', position='Query'),
}

model ListHostGroupsForUserGroupResponseBody = {
  hostGroups?: [ 
    {
      comment?: string(name='Comment', description='The description of the host group.', example='comment'),
      hostGroupId?: string(name='HostGroupId', description='The ID of the host group.', example='1'),
      hostGroupName?: string(name='HostGroupName', description='The name of the host group.', example='group'),
    }
  ](name='HostGroups', description='The host groups returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
  totalCount?: int32(name='TotalCount', description='The total number of host groups returned.', example='1'),
}

model ListHostGroupsForUserGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHostGroupsForUserGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListHostGroupsForUserGroup  ListHostGroupsForUserGroupRequest
  * @return ListHostGroupsForUserGroupResponse
 */
async function listHostGroupsForUserGroup(request: ListHostGroupsForUserGroupRequest): ListHostGroupsForUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHostGroupsForUserGroup', 'POST', '/', 'json', false, 'json', request);
}

model ListHostShareKeysRequest {
  instanceId: string(name='InstanceId', description='The bastion host ID.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  pageNumber?: string(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page. Default value: **20**.', example='20', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model ListHostShareKeysResponseBody = {
  hostShareKeys?: [ 
    {
      hostAccountCount?: long(name='HostAccountCount', description='The number of the associated host accounts.', example='1'),
      hostShareKeyId?: string(name='HostShareKeyId', description='The shared key ID.', example='10247'),
      hostShareKeyName?: string(name='HostShareKeyName', description='The name of the shared key.', example='name'),
      lastModifyKeyAt?: long(name='LastModifyKeyAt', description='The time when the shared key was last modified. The value is a UNIX timestamp. Unit: seconds.', example='1644806406'),
      privateKeyFingerPrint?: string(name='PrivateKeyFingerPrint', description='The fingerprint of the private key.', example='****'),
    }
  ](name='HostShareKeys', description='An array that consists of the shared keys.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
  totalCount?: long(name='TotalCount', description='The total number of the shared keys.', example='10'),
}

model ListHostShareKeysResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHostShareKeysResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListHostShareKeys  ListHostShareKeysRequest
  * @return ListHostShareKeysResponse
 */
async function listHostShareKeys(request: ListHostShareKeysRequest): ListHostShareKeysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHostShareKeys', 'POST', '/', 'json', false, 'json', request);
}

model ListHostsRequest {
  hostAddress?: string(name='HostAddress', description='The address of the host that you want to query. You can set this parameter to a domain name or an IP address. Only exact match is supported.', example='1.1.XX.XX', position='Query'),
  hostGroupId?: string(name='HostGroupId', description='The ID of the host group to which the host to be queried belongs.

> You can call the [ListHostGroups](https://help.aliyun.com/document_detail/201307.html) operation to query the ID of the host group.', example='1', position='Query'),
  hostName?: string(name='HostName', description='The name of the host that you want to query. Only exact match is supported.', example='host', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host on which you want to query hosts.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  OSType?: string(name='OSType', description='The operating system of the host that you want to query. Valid values:

*   **Linux**
*   **Windows**', example='Linux', position='Query'),
  pageNumber?: string(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page. Default value: **10**.

> We recommend that you do not leave this parameter empty.', example='20', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host on which you want to query hosts.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  source?: string(name='Source', description='The source of the host that you want to query. Valid values:

*   **Local**: a host in a data center
*   **Ecs**: an Elastic Compute Service (ECS) instance
*   **Rds**: a host in an ApsaraDB MyBase dedicated cluster', example='Local', position='Query'),
  sourceInstanceId?: string(name='SourceInstanceId', description='The ID of the ECS instance or the host in an ApsaraDB MyBase dedicated cluster that you want to query. Only exact match is supported.', example='i-bp19ienyt0yax748****', position='Query'),
  sourceInstanceState?: string(name='SourceInstanceState', description='The status of the host that you want to query. Valid values:

*   **Normal**: normal
*   **Release**: released', example='Normal', position='Query'),
}

model ListHostsResponseBody = {
  hosts?: [ 
    {
      activeAddressType?: string(name='ActiveAddressType', description='The address type of the host. Valid values:

*   **Public**: a public address
*   **Private**: a private address', example='Public'),
      comment?: string(name='Comment', description='The description of the host.', example='host'),
      hostAccountCount?: int32(name='HostAccountCount', description='The number of host accounts.', example='1'),
      hostId?: string(name='HostId', description='The ID of the host.', example='1'),
      hostName?: string(name='HostName', description='The name of the host.', example='name'),
      hostPrivateAddress?: string(name='HostPrivateAddress', description='The private address of the host. The value is a domain name or an IP address.', example='192.168.XX.XX'),
      hostPublicAddress?: string(name='HostPublicAddress', description='The public address of the host. The value is a domain name or an IP address.', example='1.1.XX.XX'),
      OSType?: string(name='OSType', description='The operating system of the host. Valid values:

*   **Linux**
*   **Windows**', example='Linux'),
      source?: string(name='Source', description='The source of the host. Valid values:

*   **Local**: a host in a data center
*   **Ecs**: an ECS instance
*   **Rds**: a host in an ApsaraDB MyBase dedicated cluster', example='Local'),
      sourceInstanceId?: string(name='SourceInstanceId', description='The ID of the ECS instance or the host in an ApsaraDB MyBase dedicated cluster.

> No value is returned for this parameter if the **Source** parameter is set to **Local**.', example='i-bp19ienyt0yax748****'),
      sourceInstanceState?: string(name='SourceInstanceState', description='The status of the host. Valid values:

*   **Normal**: normal
*   **Release**: released', example='Normal'),
    }
  ](name='Hosts', description='An array that consists of the hosts returned.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
  totalCount?: int32(name='TotalCount', description='The total number of hosts returned.', example='1'),
}

model ListHostsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHostsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListHosts  ListHostsRequest
  * @return ListHostsResponse
 */
async function listHosts(request: ListHostsRequest): ListHostsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHosts', 'POST', '/', 'json', false, 'json', request);
}

model ListHostsForUserRequest {
  hostAddress?: string(name='HostAddress', description='The endpoint of the host that you want to query. You can set this parameter to a domain name or an IP address. Only exact match is supported.', example='192.168.XX.XX', position='Query'),
  hostName?: string(name='HostName', description='The name of the host that you want to query. Only exact match is supported.', example='abc', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host on which you want to query the hosts that the user is authorized or not authorized to manage.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  mode?: string(name='Mode', description='Specifies the category of the hosts that you want to query. Valid values:

*   **Authorized**: queries the hosts that the user is authorized to manage. This is the default value.
*   **Unauthorized**: queries the hosts that the user is not authorized to manage.', example='Authorized', position='Query'),
  OSType?: string(name='OSType', description='The operating system of the host that you want to query. Valid values:

*   **Linux**
*   **Windows**', example='Linux', position='Query'),
  pageNumber?: string(name='PageNumber', description='The number of the page. Default value: 1.', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries per page.\\
Maximum value: 100. Default value: 20. If you leave this parameter empty, 20 entries are returned per page.

> We recommend that you do not leave this parameter empty.', example='20', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host on which you want to query the hosts that the user is authorized or not authorized to manage.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  userId: string(name='UserId', description='The ID of the user.

> You can call the [ListUsers](https://help.aliyun.com/document_detail/204522.html) operation to query the ID of the user.

This parameter is required.', example='1', position='Query'),
}

model ListHostsForUserResponseBody = {
  hosts?: [ 
    {
      activeAddressType?: string(name='ActiveAddressType', description='The endpoint type of the host. Valid values:

*   **Public**: public endpoint
*   **Private**: internal endpoint', example='Public'),
      comment?: string(name='Comment', description='The description of the host.', example='comment'),
      hostId?: string(name='HostId', description='The ID of the host.', example='1'),
      hostName?: string(name='HostName', description='The name of the host.', example='host01'),
      hostPrivateAddress?: string(name='HostPrivateAddress', description='The internal endpoint of the host. The value is a domain name or an IP address.', example='192.168.XX.XX'),
      hostPublicAddress?: string(name='HostPublicAddress', description='The public endpoint of the host. The value is a domain name or an IP address.', example='10.158.XX.XX'),
      OSType?: string(name='OSType', description='The operating system of the host. Valid values:

*   **Linux**
*   **Windows**', example='Linux'),
    }
  ](name='Hosts', description='The hosts returned.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
  totalCount?: int32(name='TotalCount', description='The total number of hosts returned.', example='1'),
}

model ListHostsForUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHostsForUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListHostsForUser  ListHostsForUserRequest
  * @return ListHostsForUserResponse
 */
async function listHostsForUser(request: ListHostsForUserRequest): ListHostsForUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHostsForUser', 'POST', '/', 'json', false, 'json', request);
}

model ListHostsForUserGroupRequest {
  hostAddress?: string(name='HostAddress', description='The endpoint of the host that you want to query. You can set this parameter to a domain name or an IP address. Only exact match is supported.', example='192.168.XX.XX', position='Query'),
  hostName?: string(name='HostName', description='The name of the host that you want to query. Only exact match is supported.', example='abc', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host on which you want to query the hosts that the user group is authorized or not authorized to manage.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  mode?: string(name='Mode', description='Specifies the category of the hosts that you want to query. Valid values:

*   **Authorized**: queries the hosts that the user group is authorized to manage. This is the default value.
*   **Unauthorized**: queries the hosts that the user group is not authorized to manage.', example='Authorized', position='Query'),
  OSType?: string(name='OSType', description='The operating system of the host that you want to query. Valid values:

*   **Linux**
*   **Windows**', example='Linux', position='Query'),
  pageNumber?: string(name='PageNumber', description='The number of the page. Default value: 1.', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries per page.\\
Maximum value: 100. Default value: 20. If you leave this parameter empty, 20 entries are returned per page.

> We recommend that you do not leave this parameter empty.', example='20', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host on which you want to query the hosts that the user group is authorized or not authorized to manage.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  userGroupId: string(name='UserGroupId', description='The ID of the user group for which you want to query hosts.

> You can call the [ListUserGroups](https://help.aliyun.com/document_detail/204509.html) operation to query the ID of the user group.

This parameter is required.', example='1', position='Query'),
}

model ListHostsForUserGroupResponseBody = {
  hosts?: [ 
    {
      activeAddressType?: string(name='ActiveAddressType', description='The address type of the host. Valid values:

*   **Public**: public endpoint
*   **Private**: internal endpoint', example='Public'),
      comment?: string(name='Comment', description='The description of the host.', example='comment'),
      hostId?: string(name='HostId', description='The ID of the host.', example='1'),
      hostName?: string(name='HostName', description='The name of the host.', example='host1'),
      hostPrivateAddress?: string(name='HostPrivateAddress', description='The internal endpoint of the host. The value is a domain name or an IP address.', example='192.168.XX.XX'),
      hostPublicAddress?: string(name='HostPublicAddress', description='The public endpoint of the host. The value is a domain name or an IP address.', example='10.158.XX.XX'),
      OSType?: string(name='OSType', description='The operating system of the host. Valid values:

*   **Linux**
*   **Windows**', example='Linux'),
    }
  ](name='Hosts', description='The hosts returned.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
  totalCount?: int32(name='TotalCount', description='The total number of hosts returned.', example='10'),
}

model ListHostsForUserGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHostsForUserGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListHostsForUserGroup  ListHostsForUserGroupRequest
  * @return ListHostsForUserGroupResponse
 */
async function listHostsForUserGroup(request: ListHostsForUserGroupRequest): ListHostsForUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHostsForUserGroup', 'POST', '/', 'json', false, 'json', request);
}

model ListInstanceRdMembersRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  maxResults?: int32(name='MaxResults', example='20', position='Query'),
  nextToken?: string(name='NextToken', example='4ieSWJCwxvW3dk3wF.BqkrZmP72nWu5zJ5NWydMqyEs****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ListInstanceRdMembersResponseBody = {
  maxResults?: int32(name='MaxResults', example='20'),
  members?: [ 
    {
      memberId?: string(name='MemberId', example='1197234496852779'),
    }
  ](name='Members'),
  nextToken?: string(name='NextToken', example='4ieSWJCwxvW3dk3wF.BqkrZmP72nWu5zJ5NWydMqyEs****'),
  requestId?: string(name='RequestId', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
}

model ListInstanceRdMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstanceRdMembersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListInstanceRdMembers  ListInstanceRdMembersRequest
  * @return ListInstanceRdMembersResponse
 */
async function listInstanceRdMembers(request: ListInstanceRdMembersRequest): ListInstanceRdMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstanceRdMembers', 'POST', '/', 'json', false, 'json', request);
}

model ListNetworkDomainsRequest {
  instanceId: string(name='InstanceId', description='The bastion host ID.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-tl329pvu70x', position='Query'),
  networkDomainName?: string(name='NetworkDomainName', description='The name of the network domain.', position='Query'),
  networkDomainType?: string(name='NetworkDomainType', description='The connection mode of the network domain. Valid values:

*   **Direct**
*   **Proxy**', example='Proxy', position='Query'),
  pageNumber?: string(name='PageNumber', description='The page number. Default value: **1**.', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries per page.\\
Valid values: 1 to 100. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

> We recommend that you do not leave this parameter empty.', example='20', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model ListNetworkDomainsResponseBody = {
  networkDomains?: [ 
    {
      comment?: string(name='Comment', description='The remarks of the network domain.', example='comment'),
      default?: boolean(name='Default', description='Indicates whether the network domain is built-in.

*   **true**
*   **false**', example='true'),
      networkDomainId?: string(name='NetworkDomainId', description='The network domain ID.', example='2'),
      networkDomainName?: string(name='NetworkDomainName', description='The name of the network domain.', example='test'),
      networkDomainType?: string(name='NetworkDomainType', description='The connection mode of the network domain. Valid values:

*   **Direct**
*   **Proxy**', example='Proxy'),
      proxiesState?: [ 
        {
          nodeType?: string(name='NodeType', description='The node type of the proxy server. Valid values:

*   **Master**: primary proxy server.
*   **Slave**: secondary proxy server.', example='Master'),
          proxyState?: string(name='ProxyState', description='The status of the proxy server.

*   **Available**
*   **Unavailable**', example='Available'),
        }
      ](name='ProxiesState'),
    }
  ](name='NetworkDomains', description='The network domains that are returned.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
  totalCount?: long(name='TotalCount', description='The total number of network domains that are returned.', example='5'),
}

model ListNetworkDomainsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNetworkDomainsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListNetworkDomains  ListNetworkDomainsRequest
  * @return ListNetworkDomainsResponse
 */
async function listNetworkDomains(request: ListNetworkDomainsRequest): ListNetworkDomainsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNetworkDomains', 'POST', '/', 'json', false, 'json', request);
}

model ListOperationDatabaseAccountsRequest {
  databaseAccountName?: string(name='DatabaseAccountName', description='The name of the database account. Exact match is supported.', example='test', position='Query'),
  databaseId: string(name='DatabaseId', description='The database ID.

>  You can call the [ListOperationDatabases](https://help.aliyun.com/document_detail/2758856.html) operation to query the database ID.

This parameter is required.', example='56', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-2r42t9cvf0i', position='Query'),
  pageNumber?: string(name='PageNumber', description='The page number. Default value: **1**.', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries per page.\\
Maximum value: 100. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

>  We recommend that you do not leave this parameter empty.', example='20', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-shanghai', position='Query'),
}

model ListOperationDatabaseAccountsResponseBody = {
  databaseAccounts?: [ 
    {
      DBName?: string(name='DBName', description='The name of the PostgreSQL or Oracle database.', example='xe'),
      databaseAccountId?: string(name='DatabaseAccountId', description='The database account ID.', example='3'),
      databaseAccountName?: string(name='DatabaseAccountName', description='The name of the database account.', example='system'),
      databaseId?: string(name='DatabaseId', description='The database ID.', example='2'),
      hasPassword?: string(name='HasPassword', description='Indicates whether a password is configured for the database host account.', example='true'),
      loginAttribute?: string(name='LoginAttribute', description='The logon attribute. One of the following values is returned if the database engine is Oracle:

*   **SERVICENAME**
*   **SID**', example='SID'),
      protocolName?: string(name='ProtocolName', description='The protocol that is used by the database account.', example='MySQL'),
    }
  ](name='DatabaseAccounts', description='The database accounts returned.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='5'),
}

model ListOperationDatabaseAccountsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListOperationDatabaseAccountsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListOperationDatabaseAccounts  ListOperationDatabaseAccountsRequest
  * @return ListOperationDatabaseAccountsResponse
 */
async function listOperationDatabaseAccounts(request: ListOperationDatabaseAccountsRequest): ListOperationDatabaseAccountsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOperationDatabaseAccounts', 'POST', '/', 'json', false, 'json', request);
}

model ListOperationDatabasesRequest {
  databaseAddress?: string(name='DatabaseAddress', description='The address of the database.', example='10.167.66.167', position='Query'),
  databaseName?: string(name='DatabaseName', description='The name of the database instance. The system supports exact search.', example='aaa', position='Query'),
  databaseType?: string(name='DatabaseType', description='The type of the database. Valid values:

*   **MySQL**
*   **SQLServer**
*   **Oracle**
*   **PostgreSQL**', example='MySQL', position='Query'),
  instanceId: string(name='InstanceId', description='The bastion host ID.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-tl32wloo90y', position='Query'),
  pageNumber?: string(name='PageNumber', description='The page number. Default value: **1**.', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries per page.\\
Maximum value: 100. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

>  We recommend that you do not leave this parameter empty.', example='20', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-shanghai', position='Query'),
  source?: string(name='Source', description='The source of the database instance. Valid values:

*   **Local**
*   **Rds**
*   **PolarDB**', example='Local', position='Query'),
  sourceInstanceId?: string(name='SourceInstanceId', description='The ID of the ApsaraDB RDS instance. The system supports exact search.', example='i-bp19ienyt0yax748****', position='Query'),
  sourceInstanceState?: string(name='SourceInstanceState', description='The instance state.

*   **Normal**
*   **RemoteRelease**', example='Normal', position='Query'),
}

model ListOperationDatabasesResponseBody = {
  databases?: [ 
    {
      activeAddressType?: string(name='ActiveAddressType', description='The address type of the database. Valid values:

*   **Public**
*   **Private**', example='Private'),
      comment?: string(name='Comment', description='The remarks of the database.', example='cpp'),
      databaseId?: string(name='DatabaseId', description='The database ID.', example='26'),
      databaseName?: string(name='DatabaseName', description='The database name.', example='zDatabase'),
      databasePort?: long(name='DatabasePort', description='The port of the database.', example='3306'),
      databasePrivateAddress?: string(name='DatabasePrivateAddress', description='The private address of the database.', example='rm-b******9b.mysql.rds.aliyuncs.com'),
      databasePublicAddress?: string(name='DatabasePublicAddress', description='The public address of the database.', example='rm-uf******p45.mysql.rds.aliyuncs.com'),
      databaseType?: string(name='DatabaseType', description='The database engine. Valid values:

*   **MySQL**
*   **PostgreSQL**
*   **Oracle**
*   **SQLServer**', example='MySQL'),
      source?: string(name='Source', description='The database type. Valid values:

*   **Local**: on-premises database.
*   **Rds**: ApsaraDB RDS instance.
*   **PolarDB**: PolarDB cluster.', example='Local'),
      sourceInstanceId?: string(name='SourceInstanceId', description='The ID of the ApsaraDB RDS instance.', example='i-wz9225bhipya******'),
      sourceInstanceRegionId?: string(name='SourceInstanceRegionId', description='The region ID of the ApsaraDB RDS instance.', example='cn-shanghai'),
      sourceInstanceState?: string(name='SourceInstanceState', description='The database status. Valid values:

*   **Normal**
*   **Release**', example='Normal'),
    }
  ](name='Databases', description='The databases returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='15'),
}

model ListOperationDatabasesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListOperationDatabasesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListOperationDatabases  ListOperationDatabasesRequest
  * @return ListOperationDatabasesResponse
 */
async function listOperationDatabases(request: ListOperationDatabasesRequest): ListOperationDatabasesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOperationDatabases', 'POST', '/', 'json', false, 'json', request);
}

model ListOperationHostAccountsRequest {
  hostAccountName?: string(name='HostAccountName', description='The name of the host account to query. Only exact match is supported.', example='root', position='Query'),
  hostId: string(name='HostId', description='The ID of the host whose accounts you want to query.

>  You can call the [ListOperationHosts](https://help.aliyun.com/document_detail/2758857.html) operation to query the host ID.

This parameter is required.', example='1', position='Query'),
  instanceId: string(name='InstanceId', description='The bastion host ID.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  pageNumber?: string(name='PageNumber', description='The page number. Default value: **1**.', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries per page.\\
Valid values: 1 to 100. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

>  We recommend that you do not leave this parameter empty.', example='20', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model ListOperationHostAccountsResponseBody = {
  hostAccounts?: [ 
    {
      hasPassword?: boolean(name='HasPassword', description='Indicates whether a password is configured for the host account.

*   **true**
*   **false**', example='true'),
      hostAccountId?: string(name='HostAccountId', description='The host account ID.', example='1'),
      hostAccountName?: string(name='HostAccountName', description='The host account name.', example='root'),
      hostId?: string(name='HostId', description='The host ID.', example='１'),
      hostShareKeyId?: string(name='HostShareKeyId', description='The ID of the shared key that is associated with the host.', example='3'),
      privateKeyFingerprint?: string(name='PrivateKeyFingerprint', description='The fingerprint of the private key for the host account.', example='fe:ca:37:42:30:00:9d:95:e6:73:e5:b0:32:0a:**:**'),
      protocolName?: string(name='ProtocolName', description='The protocol that is used by the host account.

*   **SSH**
*   **RDP**', example='SSH'),
      SSHConfig?: {
        enableSFTPChannel?: boolean(name='EnableSFTPChannel', description='Indicates whether SFTP channels are enabled for the account.'),
        enableSSHChannel?: boolean(name='EnableSSHChannel', description='Indicates whether SSH channels are enabled for the account.'),
      }(name='SSHConfig', description='Indicates whether the Secure File Transfer Protocol (SFTP) channels or the SSH channels are enabled for the host account that uses the SSH protocol.'),
    }
  ](name='HostAccounts', description='The host accounts returned.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
  totalCount?: long(name='TotalCount', description='The total number of host accounts returned.', example='1'),
}

model ListOperationHostAccountsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListOperationHostAccountsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListOperationHostAccounts  ListOperationHostAccountsRequest
  * @return ListOperationHostAccountsResponse
 */
async function listOperationHostAccounts(request: ListOperationHostAccountsRequest): ListOperationHostAccountsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOperationHostAccounts', 'POST', '/', 'json', false, 'json', request);
}

model ListOperationHostsRequest {
  hostAddress?: string(name='HostAddress', description='The address of the host that you want to query. You can set this parameter to a domain name or an IP address. Only exact match is supported.', example='10.162.172.132', position='Query'),
  hostName?: string(name='HostName', description='The name of the host that you want to query. Only exact match is supported.', example='abc', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-09k22avmw0q', position='Query'),
  OSType?: string(name='OSType', description='The operating system of the host that you want to query. Valid values:

*   **Linux**
*   **Windows**', example='Linux', position='Query'),
  pageNumber?: string(name='PageNumber', description='The page number. Default value: 1.', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries per page.\\
Maximum value: 100. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

>  We recommend that you do not leave this parameter empty.', example='20', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  source?: string(name='Source', description='The source of the host that you want to query. Valid values:

*   **Local**
*   **Ecs**', example='Local', position='Query'),
  sourceInstanceId?: string(name='SourceInstanceId', description='The ID of the Elastic Compute Service (ECS) instance. Exact match is supported.', example='i-bp19ienyt0yax748****', position='Query'),
  sourceInstanceState?: string(name='SourceInstanceState', description='The status of the host that you want to query. Valid values:

*   **Normal**
*   **Release**', example='Normal', position='Query'),
}

model ListOperationHostsResponseBody = {
  hosts?: [ 
    {
      activeAddressType?: string(name='ActiveAddressType', description='The address type of the host. Valid values:

*   **Public**
*   **Private**', example='Public'),
      comment?: string(name='Comment', description='The remarks of the host.', example='comment'),
      hostId?: string(name='HostId', description='The host ID.', example='1'),
      hostName?: string(name='HostName', description='The host name.', example='host1'),
      hostPrivateAddress?: string(name='HostPrivateAddress', description='The private IP address of the host.', example='192.168.XX.XX'),
      hostPublicAddress?: string(name='HostPublicAddress', description='The public IP address of the host.', example='10.158.XX.XX'),
      OSType?: string(name='OSType', description='The host OS.

*   **Linux**
*   **Windows**', example='Linux'),
      source?: string(name='Source', description='The host type. Valid values:

*   **Local**: on-premises host.
*   **Ecs**: Elastic Compute Service (ECS) instance.', example='Local'),
      sourceInstanceId?: string(name='SourceInstanceId', description='The ECS instance ID.', example='i-bp19ienyt0yax748****'),
      sourceInstanceState?: string(name='SourceInstanceState', description='The host status. Valid values:

*   **Normal**
*   **Release**', example='Normal'),
    }
  ](name='Hosts', description='The hosts returned.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4F6C075F-FC86-476E-943B-097BD4E12948'),
  totalCount?: long(name='TotalCount', description='The total number of hosts returned.', example='5'),
}

model ListOperationHostsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListOperationHostsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListOperationHosts  ListOperationHostsRequest
  * @return ListOperationHostsResponse
 */
async function listOperationHosts(request: ListOperationHostsRequest): ListOperationHostsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOperationHosts', 'POST', '/', 'json', false, 'json', request);
}

model ListOperationTicketsRequest {
  assetAddress?: string(name='AssetAddress', description='The IP address of the asset that is contained in the O\\&M application to be reviewed.', example='10.167.XX.XX', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  pageNumber?: string(name='PageNumber', description='The number of the page. Default value: **1**.', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries per page.\\
Maximum value: 1000. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

>  We recommend that you do not leave this parameter empty.', example='20', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model ListOperationTicketsResponseBody = {
  operationTickets?: [ 
    {
      applyUserId?: string(name='ApplyUserId', description='The ID of the O\\&M applicant.', example='1'),
      applyUsername?: string(name='ApplyUsername', description='The username of the O\\&M applicant.', example='test'),
      approveComment?: string(name='ApproveComment', description='The remarks entered when the O\\&M personnel applies for O\\&M permissions.', example='Apply for O\\&M'),
      assetAccountId?: string(name='AssetAccountId', description='The ID of the asset account.', example='1'),
      assetAccountName?: string(name='AssetAccountName', description='The username of the asset account.', example='root'),
      assetAddress?: string(name='AssetAddress', description='The IP address of the asset.', example='10.167.XX.XX'),
      assetId?: string(name='AssetId', description='The ID of the asset.', example='2'),
      assetName?: string(name='AssetName', description='The name of the asset.', example='poros-test'),
      assetNetworkDomainId?: string(name='AssetNetworkDomainId', description='The network domain ID of the asset.', example='2'),
      assetOs?: string(name='AssetOs', description='The operating system of the asset.', example='Linux'),
      assetSource?: string(name='AssetSource', description='The name of the asset source to which the asset belongs. Valid values:

*   **Local**: an on-premises host.
*   **Ecs**: an Elastic Compute Service (ECS) instance.
*   **Rds**: an ApsaraDB RDS instance.
*   A third-party asset source.', example='Local'),
      assetSourceInstanceId?: string(name='AssetSourceInstanceId', description='The ID of the asset source to which the asset belongs.', example='1'),
      createdTime?: long(name='CreatedTime', description='The time when the O\\&M application was submitted. The value is a UNIX timestamp. Unit: seconds.', example='1669965908'),
      effectCount?: int32(name='EffectCount', description='The maximum number of logons applied by the O\\&M engineer. Valid values:

*   **0**: The number of logons is unlimited. The O\\&M engineer can log on to the specified asset for unlimited times during the validity period.
*   **1**: The O\\&M engineer can log on to the specified asset only once during the validity period.', example='0'),
      effectEndTime?: int32(name='EffectEndTime', description='The end time of the validity period. The value is a UNIX timestamp. Unit: seconds.', example='1679393152'),
      effectStartTime?: int32(name='EffectStartTime', description='The start time of the validity period. The value is a UNIX timestamp. Unit: seconds.', example='1685600242'),
      operationTicketId?: string(name='OperationTicketId', description='The ID of the O\\&M application to be reviewed.', example='1'),
      protocolName?: string(name='ProtocolName', description='The O\\&M protocol.', example='SSH'),
      state?: string(name='State', description='The status of the review. Valid value:

*   Normal: to be reviewed', example='Normal'),
    }
  ](name='OperationTickets', description='The O\\&M applications to be reviewed.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
  totalCount?: long(name='TotalCount', description='The total number of O\\&M applications to be reviewed.', example='20'),
}

model ListOperationTicketsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListOperationTicketsResponseBody(name='body'),
}

/**
  * @description You can call this operation to query the O\\&M applications to be reviewed by a Bastionhost administrator.
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of ListOperationTickets  ListOperationTicketsRequest
  * @return ListOperationTicketsResponse
 */
async function listOperationTickets(request: ListOperationTicketsRequest): ListOperationTicketsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOperationTickets', 'POST', '/', 'json', false, 'json', request);
}

model ListPoliciesRequest {
  instanceId: string(name='InstanceId', description='The bastion host ID.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-5yd393wzk08', position='Query'),
  pageNumber?: string(name='PageNumber', description='The page number. Default value: **1**.', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries per page.\\
Valid values: 1 to 100. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

> We recommend that you do not leave this parameter empty.', example='20', position='Query'),
  policyName?: string(name='PolicyName', description='The name of the control policy to query. Only exact match is supported.', example='123', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model ListPoliciesResponseBody = {
  policies?: [ 
    {
      comment?: string(name='Comment', description='The remarks of the control policy.'),
      policyId?: string(name='PolicyId', description='The control policy ID.', example='2'),
      policyName?: string(name='PolicyName', description='The name of the control policy.', example='test'),
      priority?: long(name='Priority', description='The priority of the control policy. A smaller value indicates a higher priority.', example='1'),
    }
  ](name='Policies', description='The control policies.'),
  requestId?: string(name='RequestId', description='The request ID.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
  totalCount?: long(name='TotalCount', description='The total number of control policies that are returned.', example='10'),
}

model ListPoliciesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPoliciesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPolicies  ListPoliciesRequest
  * @return ListPoliciesResponse
 */
async function listPolicies(request: ListPoliciesRequest): ListPoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPolicies', 'POST', '/', 'json', false, 'json', request);
}

model ListRulesRequest {
  instanceId: string(name='InstanceId', description='The bastion host ID.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-5yd34ol020a', position='Query'),
  pageNumber?: string(name='PageNumber', description='The page number. Default value: 1.', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries per page.\\
Valid values: 1 to 100. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

> We recommend that you do not leave this parameter empty.', example='20', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  ruleName?: string(name='RuleName', description='The name of the authorization rule to query. Only exact match is supported.', example='rule', position='Query'),
  ruleState?: string(name='RuleState', description='The state of the authorization rule to query.

*   **Enabled**
*   **Disabled**', example='Enabled', position='Query'),
}

model ListRulesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
  rules?: [ 
    {
      comment?: string(name='Comment', description='The remarks of the authorization rule.', example='comment'),
      effectiveEndTime?: long(name='EffectiveEndTime', description='The end time of the validity period of the authorization rule. The value is a timestamp. Unit: seconds.', example='1709258400'),
      effectiveStartTime?: long(name='EffectiveStartTime', description='The start time of the validity period of the authorization rule. The value is a timestamp. Unit: seconds.', example='1685499134'),
      ruleId?: string(name='RuleId', description='The authorization rule ID.', example='13'),
      ruleName?: string(name='RuleName', description='The name of the authorization rule.', example='rule'),
      ruleState?: string(name='RuleState', description='The state of the authorization rule.

*   **Enabled**
*   **Disabled**', example='Enabled'),
    }
  ](name='Rules', description='The authorization rules that are returned.'),
  totalCount?: long(name='TotalCount', description='The total number of authorization rules that are returned.', example='1'),
}

model ListRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRulesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListRules  ListRulesRequest
  * @return ListRulesResponse
 */
async function listRules(request: ListRulesRequest): ListRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRules', 'POST', '/', 'json', false, 'json', request);
}

model ListTagKeysRequest {
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the bastion host.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resource.

Set the value to INSTANCE, which indicates that the resource is a bastion host.

This parameter is required.', example='INSTANCE', position='Query'),
}

model ListTagKeysResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='50177258-E817-4D2F-A5C6-3FD7BC4806E3'),
  tagKeys?: [ 
    {
      tagCount?: int32(name='TagCount', description='The total number of tag keys.', example='2'),
      tagKey?: string(name='TagKey', description='The name of the tag key.', example='key2'),
    }
  ](name='TagKeys', description='An array that consists of tags.'),
  totalCount?: int32(name='TotalCount', description='The total number of tags returned.', example='5'),
}

model ListTagKeysResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagKeysResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTagKeys  ListTagKeysRequest
  * @return ListTagKeysResponse
 */
async function listTagKeys(request: ListTagKeysRequest): ListTagKeysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagKeys', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', description='The token for starting the next query.', example='6EwFJmScBXFFC3nf.9Rq7HzA7APx7GWLbkZbjHrR6Pq39w', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the Bastionhost instance.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceId?: [ string ](name='ResourceId', description='The IDs of instances.', example='bastionhost-cn-78v1gcxxxxx', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resource.

Set the value to INSTANCE, which indicates that the resource is a Bastionhost instance.

This parameter is required.', example='INSTANCE', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N.

Valid values of N: 1 to 20.', example='test'),
      value?: string(name='Value', description='The value of tag N.

Valid values of N: 1 to 20.', example='testapi'),
    }
  ](name='Tag', description='The tags.', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', description='The token for starting the next query.', example='4ieSWJCwxvW3dk3wF.BqkrZmP72nWu5zJ5NWydMqyEs****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='134D6018-EB68-4B7C-BABF-4DB09023E014'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', description='The ID of the instance.', example='bastionhost-cn-78v1gc****'),
      resourceType?: string(name='ResourceType', description='The type of the resource.

The returned value is INSTANCE, which indicates that the resource is a Bastionhost instance.', example='INSTANCE'),
      tagKey?: string(name='TagKey', description='The key of the tag.', example='test'),
      tagValue?: string(name='TagValue', description='The value of the tag.', example='testapi'),
    }
  ](name='TagResources', description='The information about Bastionhost instances and the tags bound to Bastionhost instances.

The following information is included: instance ID, resource type, tag key, and tag value.'),
}

model ListTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTagResources  ListTagResourcesRequest
  * @return ListTagResourcesResponse
 */
async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ListUserGroupsRequest {
  instanceId: string(name='InstanceId', description='The ID of the bastion host on which you want to query user groups.
 >You can call the [DescribeInstances ](https://help.aliyun.com/document_detail/462953.html)operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  pageNumber?: string(name='PageNumber', description='The number of the page to return. Default value: 1.', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page.
Maximum value: 100. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.', example='20', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host on which you want to query user groups.
> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/462924.html).', example='cn-hangzhou', position='Query'),
  userGroupName?: string(name='UserGroupName', description='The name of the user group that you want to query. Only exact match is supported.', example='TestGroup01', position='Query'),
}

model ListUserGroupsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
  totalCount?: int32(name='TotalCount', description='The total number of user groups returned.', example='1'),
  userGroups?: [ 
    {
      comment?: string(name='Comment', description='The description of the user group.', example='comment'),
      memberCount?: int32(name='MemberCount', description='The number of users in the user group.', example='5'),
      userGroupId?: string(name='UserGroupId', description='The ID of the user group.', example='1'),
      userGroupName?: string(name='UserGroupName', description='The name of the user group.', example='TestGroup01'),
    }
  ](name='UserGroups', description='The user groups returned.'),
}

model ListUserGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserGroupsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUserGroups  ListUserGroupsRequest
  * @return ListUserGroupsResponse
 */
async function listUserGroups(request: ListUserGroupsRequest): ListUserGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUserGroups', 'POST', '/', 'json', false, 'json', request);
}

model ListUserPublicKeysRequest {
  instanceId: string(name='InstanceId', description='The ID of the bastion host on which you want to query all public keys of the user.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  pageNumber?: string(name='PageNumber', description='The number of the page to return. Default value: 1.', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page.\\
Maximum value: 100. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

> We recommend that you do not leave this parameter empty.', example='50', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host on which you want to query all public keys of the user.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-shanghai', position='Query'),
  userId?: string(name='UserId', description='The ID of the user whose public keys you want to query.', example='2', position='Query'),
}

model ListUserPublicKeysResponseBody = {
  publicKeys?: [ 
    {
      comment?: string(name='Comment', description='The description of the public key.', example='comment'),
      fingerPrint?: string(name='FingerPrint', description='The fingerprint of the public key.', example='d8:7d:b6:27:70:2d:07:fb:c6:b6:66:0a:86:7b:0f:9a'),
      publicKeyId?: string(name='PublicKeyId', description='The ID of the public key.', example='1'),
      publicKeyName?: string(name='PublicKeyName', description='The name of the public key.', example='Keyname'),
      userId?: string(name='UserId', description='The ID of the user to which the public key belongs.', example='1'),
    }
  ](name='PublicKeys', description='An array that consists of the public keys of the user.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
  totalCount?: long(name='TotalCount', description='The total number of public keys.', example='5'),
}

model ListUserPublicKeysResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserPublicKeysResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUserPublicKeys  ListUserPublicKeysRequest
  * @return ListUserPublicKeysResponse
 */
async function listUserPublicKeys(request: ListUserPublicKeysRequest): ListUserPublicKeysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUserPublicKeys', 'POST', '/', 'json', false, 'json', request);
}

model ListUsersRequest {
  displayName?: string(name='DisplayName', description='The display name of the user that you want to query. Only exact match is supported.', example='abc', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host whose users you want to query.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  mobile?: string(name='Mobile', description='The mobile phone number of the user that you want to query. Only exact match is supported.', example='1359999****', position='Query'),
  pageNumber?: string(name='PageNumber', description='The page number. Default value: **1**.', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries per page.\\
Valid values: 1 to 100. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

>  We recommend that you do not leave this parameter empty.', example='20', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host whose users you want to query.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  source?: string(name='Source', description='The type of the user that you want to query. Valid values:

*   **Local**: a local user.
*   **Ram**: a Resource Access Management (RAM) user.
*   **AD**: an Active Directory (AD)-authenticated user.
*   **LDAP**: a Lightweight Directory Access Protocol (LDAP)-authenticated user.', example='Local', position='Query'),
  sourceUserId?: string(name='SourceUserId', description='The unique ID of the user that you want to query. Only exact match is supported.

>  This parameter uniquely identifies a RAM user of the bastion host. This parameter is valid if **Source** is set to **Ram**. You can call the [ListUsers](https://help.aliyun.com/document_detail/28684.html) operation in RAM to obtain the unique ID of the user from the **UserId** response parameter.', example='122748924538****', position='Query'),
  userGroupId?: string(name='UserGroupId', description='The ID of the user group to which the user you want to query belongs.

>  You can call the [ListUserGroups](https://help.aliyun.com/document_detail/204509.html) operation to query the user group ID.', example='1', position='Query'),
  userName?: string(name='UserName', description='The logon name of the user that you want to query. Only exact match is supported.', example='abc', position='Query'),
  userState?: string(name='UserState', description='The state of the user that you want to query. Valid values:

*   **Normal**: The user is in normal state.
*   **Frozen**: The user is locked.
*   **Expired**: The user has expired.', example='Normal', position='Query'),
}

model ListUsersResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
  totalCount?: int32(name='TotalCount', description='The total number of users returned.', example='1'),
  users?: [ 
    {
      comment?: string(name='Comment', description='The remarks of the user.', example='comment'),
      displayName?: string(name='DisplayName', description='The display name of the user.', example='Bob'),
      effectiveEndTime?: long(name='EffectiveEndTime', description='The end time of the validity period of the user. The value is a UNIX timestamp. Unit: seconds.', example='1672502400'),
      effectiveStartTime?: long(name='EffectiveStartTime', description='The start time of the validity period of the user. The value is a UNIX timestamp. Unit: seconds.', example='1669630029'),
      email?: string(name='Email', description='The email address of the user.', example='1099**@qq.com'),
      language?: string(name='Language', description='This parameter is required if LanguageStatus is set to Custom. Valid values:

*   **zh-cn**: simplified Chinese.
*   **en**: English.', example='en'),
      languageStatus?: string(name='LanguageStatus', description='Indicates whether notifications are sent in the language specified in the global settings or a custom language.

*   **Global**
*   **Custom**', example='Custom'),
      mobile?: string(name='Mobile', description='The mobile phone number of the user.', example='1359999****'),
      mobileCountryCode?: string(name='MobileCountryCode', description='The location where the mobile phone number of the user is registered. Valid values:

*   **CN**: the Chinese mainland, whose international dialing code is +86.
*   **HK**: Hong Kong (China), whose international dialing code is +852.
*   **MO**: Macao (China), whose international dialing code is +853.
*   **TW**: Taiwan (China), whose international dialing code is +886.
*   **RU**: Russia, whose international dialing code is +7.
*   **SG**: Singapore, whose international dialing code is +65.
*   **MY**: Malaysia, whose international dialing code is +60.
*   **ID**: Indonesia, whose international dialing code is +62.
*   **DE**: Germany, whose international dialing code is +49.
*   **AU**: Australia, whose international dialing code is +61.
*   **US**: US, whose international dialing code is +1.
*   **AE**: United Arab Emirates, whose international dialing code is +971.
*   **JP:** Japan, whose international dialing code is +81.
*   **GB**: UK, whose international dialing code is +44.
*   **IN**: India, whose international dialing code is +91.
*   **KR**: Republic of Korea, whose international dialing code is +82.
*   **PH**: Philippines, whose international dialing code is +63.
*   **CH**: Switzerland, whose international dialing code is +41.
*   **SE**: Sweden, whose international dialing code is +46.', example='CN'),
      needResetPassword?: boolean(name='NeedResetPassword', description='Indicates whether password reset is required upon the next logon. Valid values:

*   **true**
*   **false**', example='true'),
      source?: string(name='Source', description='The type of the user. Valid values:

*   **Local**: a local user.
*   **Ram**: a RAM user.
*   **AD**: an AD-authenticated user.
*   **LDAP**: an LDAP-authenticated user.', example='Local'),
      sourceUserId?: string(name='SourceUserId', description='The unique ID of the user.

>  This parameter uniquely identifies a RAM user of the bastion host. A value is returned for this parameter if **Source** is set to **Ram**. No value is returned for this parameter if **Source** is set to **Local**.', example='122748924538****'),
      twoFactorMethods?: [ string ](name='TwoFactorMethods', description='An array of the enabled two-factor authentication methods.'),
      twoFactorStatus?: string(name='TwoFactorStatus', description='Indicates whether two-factor authentication is enabled for the user. Valid values:

*   **Global**: The global setting applies.
*   **Disable**: Two-factor authentication is disabled.
*   **Enable**: Two-factor authentication is enabled. The user-specific setting for the authentication method applies.', example='Enable'),
      userId?: string(name='UserId', description='The user ID.', example='1'),
      userName?: string(name='UserName', description='The logon name of the user.', example='abc_def'),
      userState?: [ string ](name='UserState', description='An array that lists the states of users.'),
    }
  ](name='Users', description='The users returned.'),
}

model ListUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUsersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUsers  ListUsersRequest
  * @return ListUsersResponse
 */
async function listUsers(request: ListUsersRequest): ListUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUsers', 'POST', '/', 'json', false, 'json', request);
}

model LockUsersRequest {
  instanceId: string(name='InstanceId', description='The ID of the bastion host to which the users to be locked belong.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host to which the users to be locked belong.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  userIds: string(name='UserIds', description='The ID of the user to be locked. The value is a JSON string. You can add up to 100 user IDs. If you specify multiple IDs, separate the IDs with commas (,).

> You can call the [ListUsers](https://help.aliyun.com/document_detail/204522.html) operation to query the ID of the user.

This parameter is required.', example='["1","2","3"]', position='Query'),
}

model LockUsersResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
  results?: [ 
    {
      code?: string(name='Code', description='The return code that indicates whether the call was successful. Valid values:

*   **OK**: The call was successful.

*   **UNEXPECTED**: An unknown error occurred.

*   **INVALID_ARGUMENT**: A request parameter is invalid.

>Make sure that the request parameters are valid and call the operation again.

*   **OBJECT_NOT_FOUND**: The specified object on which you want to perform the operation does not exist.

>Check whether the specified ID of the bastion host exists, whether the specified hosts exist, and whether the specified host IDs are valid. Then, call the operation again.

*   **OBJECT_AlREADY_EXISTS**: The specified object on which you want to perform the operation already exists.', example='OK'),
      message?: string(name='Message', description='This parameter is deprecated.', example='N/A'),
      userId?: string(name='UserId', description='The ID of the user.', example='1'),
    }
  ](name='Results', description='The result of the call.'),
}

model LockUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: LockUsersResponseBody(name='body'),
}

/**
  * @description # Description
  * You can call this operation to lock one or more users of a bastion host. If a user does not need to use a bastion host to perform O\\&M operations within a specific period of time, you can lock the user. The locked user can no longer log on to or perform O\\&M operations on the hosts on which the user is granted permissions. If you want to unlock the user later, you can call the [UnlockUsers](https://help.aliyun.com/document_detail/204590.html) operation.
  * # Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of LockUsers  LockUsersRequest
  * @return LockUsersResponse
 */
async function lockUsers(request: LockUsersRequest): LockUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LockUsers', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDatabaseRequest {
  activeAddressType?: string(name='ActiveAddressType', description='The new address type of the database. Valid values:

*   **Public**
*   **Private**', example='Public', position='Query'),
  comment?: string(name='Comment', description='The new remarks of the database.', example='tttttttt', position='Query'),
  databaseId: string(name='DatabaseId', description='The ID of the database to modify.

This parameter is required.', example='11', position='Query'),
  databaseName?: string(name='DatabaseName', description='The new name of the database.', example='pgsql', position='Query'),
  databasePort?: string(name='DatabasePort', description='The new port of the database.', example='5433', position='Query'),
  databasePrivateAddress?: string(name='DatabasePrivateAddress', description='The new internal address of the database. Specify an IPv4 address or a domain name.', example='pc-bp169******', position='Query'),
  databasePublicAddress?: string(name='DatabasePublicAddress', description='The new public address of the database. Specify an IPv4 address or a domain name.', example='pgm-uf6c******', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host that manages the database to modify.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-72137xe5n01', position='Query'),
  networkDomainId?: string(name='NetworkDomainId', description='The ID of the new network domain for the database.

>  You can call the [ListNetworkDomains](https://help.aliyun.com/document_detail/2758827.html) operation to query the network domain ID.', example='2', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host that manages the database to modify.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  sourceInstanceId?: string(name='SourceInstanceId', description='The ID of the ApsaraDB for RDS instance or PolarDB cluster to modify.

> This parameter is required if **Source** is set to **Rds** or **PolarDB**.', example='i-wz99nexqd62z3bvuvpz5', position='Query'),
}

model ModifyDatabaseResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='162088A7-7D47-56A3-9D04-93DE7B6DBE1C'),
}

model ModifyDatabaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDatabaseResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyDatabase  ModifyDatabaseRequest
  * @return ModifyDatabaseResponse
 */
async function modifyDatabase(request: ModifyDatabaseRequest): ModifyDatabaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDatabase', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDatabaseAccountRequest {
  databaseAccountId: string(name='DatabaseAccountId', description='The ID of the database account to modify.

>  You can call the [ListDatabaseAccounts](https://help.aliyun.com/document_detail/2758839.html) operation to query the database account ID.

This parameter is required.', example='2', position='Query'),
  databaseAccountName?: string(name='DatabaseAccountName', description='The new username of the database account. The username can be up to 128 characters in length.', example='aaa', position='Query'),
  databaseSchema?: string(name='DatabaseSchema', description='The new name of the database. This parameter is required if the database engine is PostgreSQL or Oracle.', example='orcl', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host that manages the database account to modify.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-zpr2zyqx603', position='Query'),
  password?: string(name='Password', description='The new password of the database account.', example='14SZ!******', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host that manages the database account to modify.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model ModifyDatabaseAccountResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='850FA4B4-5BD2-5269-903E-3B7E07E6C975'),
}

model ModifyDatabaseAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDatabaseAccountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyDatabaseAccount  ModifyDatabaseAccountRequest
  * @return ModifyDatabaseAccountResponse
 */
async function modifyDatabaseAccount(request: ModifyDatabaseAccountRequest): ModifyDatabaseAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDatabaseAccount', 'POST', '/', 'json', false, 'json', request);
}

model ModifyHostRequest {
  comment?: string(name='Comment', description='The new description of the host. The description can be up to 500 characters in length.', example='Host for test.', position='Query'),
  hostId: string(name='HostId', description='The ID of the host.

> You can call the [ListHosts](https://help.aliyun.com/document_detail/200665.html) operation to query the ID of the host.

This parameter is required.', example='1', position='Query'),
  hostName?: string(name='HostName', description='The new name of the host. The name can be up to 128 characters.', example='TestHost', position='Query'),
  hostPrivateAddress?: string(name='HostPrivateAddress', description='The new internal endpoint of the host. You can set this parameter to a domain name or an IP address.', example='193.168.XX.XX', position='Query'),
  hostPublicAddress?: string(name='HostPublicAddress', description='The new public endpoint of the host. You can set this parameter to a domain name or an IP address.', example='200.1.XX.XX', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host on which you want to modify the information about the host.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  networkDomainId?: string(name='NetworkDomainId', description='The ID of the new network domain to which the host belongs.

> You can call the [ListNetworkDomains](https://help.aliyun.com/document_detail/2758827.html) operation to query the network domain ID.', example='1', position='Query'),
  OSType?: string(name='OSType', description='The new operating system of the host. Valid values:

*   **Linux**
*   **Windows**', example='Linux', position='Query'),
  prefKex?: string(name='PrefKex', description='The preferred key exchange algorithm of the host. If you set OSType to Linux, you can modify this parameter. Valid values:

*   **default**
*   **diffie-hellman-group1-sha1**
*   **diffie-hellman-group14-sha1**
*   **diffie-hellman-group-exchange-sha1**', example='default', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host on which you want to modify the information about the host.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model ModifyHostResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
}

model ModifyHostResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyHostResponseBody(name='body'),
}

/**
  * @description You can call the ModifyHost operation to modify the basic information about a host in a data center, an Elastic Compute Service (ECS) instance, or a host in an ApsaraDB MyBase dedicated cluster.
  * > The basic information about ECS instances and hosts in ApsaraDB MyBase dedicated clusters within your Alibaba Cloud account is synchronized to Bastionhost on a regular basis. After you modify the basic information about an ECS instance or a host in an ApsaraDB MyBase dedicated cluster, the modification result may be overwritten by the synchronized information.
  * @param request  the request parameters of ModifyHost  ModifyHostRequest
  * @return ModifyHostResponse
 */
async function modifyHost(request: ModifyHostRequest): ModifyHostResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyHost', 'POST', '/', 'json', false, 'json', request);
}

model ModifyHostAccountRequest {
  hostAccountId: string(name='HostAccountId', description='The ID of the host account whose information you want to modify.

> You can call the [ListHostAccounts](https://help.aliyun.com/document_detail/204372.html) operation to query the ID of the host account.

This parameter is required.', example='1', position='Query'),
  hostAccountName?: string(name='HostAccountName', description='The new name of the host account. The name can be up to 128 characters in length.', example='abc', position='Query'),
  hostShareKeyId?: string(name='HostShareKeyId', description='The ID of the shared key that is associated with the host.

>  You can call the [ListHostShareKeys](https://help.aliyun.com/document_detail/462973.html) operation to query the shared key ID.', example='1', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host in which you want to modify the information about the host account.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  passPhrase?: string(name='PassPhrase', description='The passphrase for the new private key of the host account.

>  This parameter is valid only if the protocol used by the host is SSH. You do not need to configure this parameter if the protocol used by the host is Remote Desktop Protocol (RDP).', example='****', position='Query'),
  password?: string(name='Password', description='The new password of the host account.', example='****', position='Query'),
  privateKey?: string(name='PrivateKey', description='The new private key of the host account. Specify a Base64-encoded string.

>  This parameter takes effect only if the protocol used by the host is SSH. You do not need to configure this parameter if the protocol used by the host is Remote Desktop Protocol (RDP). You can call the [GetHostAccount](https://help.aliyun.com/document_detail/204391.html) operation to query the protocol used by the host. You can configure a password and a private key for the host account at the same time. If both a password and a private key are configured for the host account, Bastionhost preferentially uses the private key for logon.', example='****', position='Query'),
  privilegeType?: string(name='PrivilegeType', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host in which you want to query the details of the host account.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  rotationMode?: string(name='RotationMode', position='Query'),
}

model ModifyHostAccountResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
}

model ModifyHostAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyHostAccountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyHostAccount  ModifyHostAccountRequest
  * @return ModifyHostAccountResponse
 */
async function modifyHostAccount(request: ModifyHostAccountRequest): ModifyHostAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyHostAccount', 'POST', '/', 'json', false, 'json', request);
}

model ModifyHostGroupRequest {
  comment?: string(name='Comment', description='The new remarks of the asset group. The remarks can be up to 500 characters in length.', example='comment', position='Query'),
  hostGroupId: string(name='HostGroupId', description='The ID of the asset group that you want to modify.

>  You can call the [ListHostGroups](https://help.aliyun.com/document_detail/201307.html) operation to query the ID of the host group.

This parameter is required.', example='1', position='Query'),
  hostGroupName?: string(name='HostGroupName', description='The new name of the asset group. The name can be up to 128 characters in length.', example='Group01', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host whose asset group you want to modify.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host whose asset group you want to modify.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model ModifyHostGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
}

model ModifyHostGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyHostGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyHostGroup  ModifyHostGroupRequest
  * @return ModifyHostGroupResponse
 */
async function modifyHostGroup(request: ModifyHostGroupRequest): ModifyHostGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyHostGroup', 'POST', '/', 'json', false, 'json', request);
}

model ModifyHostShareKeyRequest {
  hostShareKeyId: string(name='HostShareKeyId', description='The ID of the shared key whose information you want to modify.

This parameter is required.', example='10247', position='Query'),
  hostShareKeyName?: string(name='HostShareKeyName', description='The name of the shared key.', example='name', position='Query'),
  instanceId: string(name='InstanceId', description='The bastion host ID.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  passPhrase?: string(name='PassPhrase', description='The password of the private key. Specify a Base64-encoded string.', example='****', position='Query'),
  privateKey?: string(name='PrivateKey', description='The private key. Specify a Base64-encoded string.

>  Only Rivest-Shamir-Adleman (RSA) keys that are generated by using the ssh-keygen command and keys that are generated by using the Ed25519 algorithm are supported.', example='****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model ModifyHostShareKeyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
}

model ModifyHostShareKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyHostShareKeyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyHostShareKey  ModifyHostShareKeyRequest
  * @return ModifyHostShareKeyResponse
 */
async function modifyHostShareKey(request: ModifyHostShareKeyRequest): ModifyHostShareKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyHostShareKey', 'POST', '/', 'json', false, 'json', request);
}

model ModifyHostsActiveAddressTypeRequest {
  activeAddressType: string(name='ActiveAddressType', description='The new portal type of the host. Valid values:

*   **Public**: public portal
*   **Private**: internal portal

This parameter is required.', example='Private', position='Query'),
  hostIds: string(name='HostIds', description='The ID of the host for which you want to change the portal type. The value is a JSON string. You can add up to 100 host IDs.

>  You can call the [ListHosts](https://help.aliyun.com/document_detail/200665.html) operation to query the ID of the host.

This parameter is required.', example='["1","2"]', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host for which you want to change the portal type of the host.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw***', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host for which you want to change the portal type of the host.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model ModifyHostsActiveAddressTypeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
  results?: [ 
    {
      code?: string(name='Code', description='The return code that indicates whether the call was successful. Valid values:

*   **OK**: The call was successful.
*   **UNEXPECTED**: An unknown error occurred.
*   **INVALID_ARGUMENT**: A request parameter is invalid.
*   **OBJECT_NOT_FOUND**: The specified object on which you want to perform the operation does not exist.
*   **OBJECT_AlREADY_EXISTS**: The specified object on which you want to perform the operation already exists.', example='OK'),
      hostId?: string(name='HostId', description='The ID of the host.', example='1'),
      message?: string(name='Message', description='This parameter is deprecated.'),
    }
  ](name='Results', description='The result of the call.'),
}

model ModifyHostsActiveAddressTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyHostsActiveAddressTypeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyHostsActiveAddressType  ModifyHostsActiveAddressTypeRequest
  * @return ModifyHostsActiveAddressTypeResponse
 */
async function modifyHostsActiveAddressType(request: ModifyHostsActiveAddressTypeRequest): ModifyHostsActiveAddressTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyHostsActiveAddressType', 'POST', '/', 'json', false, 'json', request);
}

model ModifyHostsPortRequest {
  hostIds: string(name='HostIds', description='The ID of the host for which you want to change the port. The value is a JSON string. You can add up to 100 host IDs. If you specify multiple IDs, separate the IDs with commas (,).

>  You can call the [ListHosts](https://help.aliyun.com/document_detail/200665.html) operation to query the IDs of hosts.

This parameter is required.', example='["1","2","3"]', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host for which you want to change the port of the host.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  port: string(name='Port', description='The new port of the host. The port number must be an integer. Valid values: 22 to 65535.

This parameter is required.', example='22', position='Query'),
  protocolName: string(name='ProtocolName', description='The protocol that is used to connect to the host. Valid values:

*   **SSH**
*   **RDP**

This parameter is required.', example='SSH', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host for which you want to change the port of the host.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model ModifyHostsPortResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
  results?: [ 
    {
      code?: string(name='Code', description='The return code that indicates whether the call was successful. Valid values:

*   **OK**: The call was successful.
*   **UNEXPECTED**: An unknown error occurred.
*   **INVALID_ARGUMENT**: A request parameter is invalid.
    > Make sure that the request parameters are valid and call the operation again.

*   **OBJECT_NOT_FOUND**: The specified object on which you want to perform the operation does not exist.

    > Check whether the specified ID of the bastion host exists, whether the specified hosts exist, and whether the specified host IDs are valid. Then, call the operation again.

*   **OBJECT_AlREADY_EXISTS**: The specified object on which you want to perform the operation already exists.', example='OK'),
      hostId?: string(name='HostId', description='The ID of the host.', example='1'),
      message?: string(name='Message', description='This parameter is deprecated.', example='-'),
    }
  ](name='Results', description='The result of the call.'),
}

model ModifyHostsPortResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyHostsPortResponseBody(name='body'),
}

/**
  * @description ## Usage notes
  * You can call this operation to change the port for the O&M protocol on one or more hosts. If the standard port for the O&M protocol on your host is vulnerable to attacks, you can call this operation to specify a custom port. For example, the standard port for SSH is port 22.  
  * >  Ports 0 to 1024 are reserved for Bastionhost. Do not change the port for the O&M protocol to a reserved port.  
  * ## QPS limit
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of ModifyHostsPort  ModifyHostsPortRequest
  * @return ModifyHostsPortResponse
 */
async function modifyHostsPort(request: ModifyHostsPortRequest): ModifyHostsPortResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyHostsPort', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceADAuthServerRequest {
  account: string(name='Account', description='The username of the account that is used for the AD server.

This parameter is required.', example='cn=Manager,dc=test,dc=com', position='Query'),
  baseDN: string(name='BaseDN', description='The Base distinguished name (DN).

This parameter is required.', example='dc=test,dc=com', position='Query'),
  domain: string(name='Domain', description='The domain on the AD server.

This parameter is required.', example='domain', position='Query'),
  emailMapping?: string(name='EmailMapping', description='The field that is used to indicate the email address of a user on the AD server.', example='emailAttr', position='Query'),
  filter?: string(name='Filter', description='The condition that is used to filter users.', example='(objectClass=top)', position='Query'),
  instanceId: string(name='InstanceId', description='The bastion host ID.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  isSSL: string(name='IsSSL', description='Specifies whether SSL is supported. Valid values:

*   **true**
*   **false**

This parameter is required.', example='true', position='Query'),
  mobileMapping?: string(name='MobileMapping', description='The field that is used to indicate the mobile phone number of a user on the AD server.', example='mobileAttr', position='Query'),
  nameMapping?: string(name='NameMapping', description='The field that is used to indicate the name of a user on the AD server.', example='nameAttr', position='Query'),
  password?: string(name='Password', description='The password of the account that is used for the AD server.', example='******', position='Query'),
  port: string(name='Port', description='The port that is used to access the server.

This parameter is required.', example='389', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  server: string(name='Server', description='The address of the AD server.

This parameter is required.', example='192.168.XX.XX', position='Query'),
  standbyServer?: string(name='StandbyServer', description='The address of the secondary AD server.', example='192.168.XX.XX', position='Query'),
}

model ModifyInstanceADAuthServerResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='C9E97677-BD74-584B-AFCE-948C2A70BB82'),
}

model ModifyInstanceADAuthServerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyInstanceADAuthServerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyInstanceADAuthServer  ModifyInstanceADAuthServerRequest
  * @return ModifyInstanceADAuthServerResponse
 */
async function modifyInstanceADAuthServer(request: ModifyInstanceADAuthServerRequest): ModifyInstanceADAuthServerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceADAuthServer', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceAttributeRequest {
  description?: string(name='Description', description='The description of the bastion host.

> The description must be up to 30 characters in length, and can contain letters, digits, underscores (_), and hyphens (-).', example='Bastionhost demo', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-78v1gh****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model ModifyInstanceAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='E07158EA-D1A3-4BAA-84DA-2FE230D03884'),
}

model ModifyInstanceAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyInstanceAttributeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyInstanceAttribute  ModifyInstanceAttributeRequest
  * @return ModifyInstanceAttributeResponse
 */
async function modifyInstanceAttribute(request: ModifyInstanceAttributeRequest): ModifyInstanceAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceLDAPAuthServerRequest {
  account: string(name='Account', description='The username of the account that is used for the LDAP server.

This parameter is required.', example='cn=Manager,dc=test,dc=com', position='Query'),
  baseDN: string(name='BaseDN', description='The Base distinguished name (DN).

This parameter is required.', example='dc=test,dc=com', position='Query'),
  emailMapping?: string(name='EmailMapping', description='The field that is used to indicate the email address of a user on the LDAP server.', example='emailAttr', position='Query'),
  filter?: string(name='Filter', description='The condition that is used to filter users.', example='(objectClass=top)', position='Query'),
  instanceId: string(name='InstanceId', description='The bastion host ID.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  isSSL?: string(name='IsSSL', description='Specifies whether to support SSL. Valid values:

*   **true**
*   **false**', example='true', position='Query'),
  loginNameMapping?: string(name='LoginNameMapping', description='The field that is used to indicate the logon name of a user on the LDAP server.', example='userNameAttr', position='Query'),
  mobileMapping?: string(name='MobileMapping', description='The field that is used to indicate the mobile phone number of a user on the LDAP server.', example='mobileAttr', position='Query'),
  nameMapping?: string(name='NameMapping', description='The field that is used to indicate the name of a user on the LDAP server.', example='nameAttr', position='Query'),
  password?: string(name='Password', description='The password of the account that is used for the LDAP server. You must configure a password when you configure LDAP authentication. If you leave this parameter empty when you modify the settings of LDAP authentication, the current password is used.', example='******', position='Query'),
  port: string(name='Port', description='The port that is used to access the LDAP server.

This parameter is required.', example='389', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  server: string(name='Server', description='The address of the LDAP server.

This parameter is required.', example='192.168.XX.XX', position='Query'),
  standbyServer?: string(name='StandbyServer', description='The address of the secondary LDAP server.', example='192.168.XX.XX', position='Query'),
}

model ModifyInstanceLDAPAuthServerResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='8F1085E3-F048-5F34-B650-F145216E4AA4'),
}

model ModifyInstanceLDAPAuthServerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyInstanceLDAPAuthServerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyInstanceLDAPAuthServer  ModifyInstanceLDAPAuthServerRequest
  * @return ModifyInstanceLDAPAuthServerResponse
 */
async function modifyInstanceLDAPAuthServer(request: ModifyInstanceLDAPAuthServerRequest): ModifyInstanceLDAPAuthServerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceLDAPAuthServer', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceTwoFactorRequest {
  enableTwoFactor?: string(name='EnableTwoFactor', description='Specifies whether to enable two-factor authentication. Valid values:

*   **true**: yes
*   **false**: no', example='true', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  skipTwoFactorTime?: string(name='SkipTwoFactorTime', description='The duration within which two-factor authentication is not required after a user passes two-factor authentication. Valid values: 0 to 168. Unit: hours. If you set this parameter to 0, the user must pass two-factor authentication every time the user logs on to the bastion host.', example='1', position='Query'),
  twoFactorMethods?: string(name='TwoFactorMethods', description='The method used to send a verification code for two-factor authentication. If EnableTwoFactor is set to true, you must specify at least one method. Valid values:

*   **sms:** text message.
*   **email**: email.
*   **dingtalk**: notice in DingTalk.
*   **totp**: one-time password (OTP) token.
*   **gmusbkey**: SM-based USB key.', example='["sms"]', position='Query'),
}

model ModifyInstanceTwoFactorResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='9CE1A352-15E9-5EB4-B589-87A8DEECB20D'),
}

model ModifyInstanceTwoFactorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyInstanceTwoFactorResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyInstanceTwoFactor  ModifyInstanceTwoFactorRequest
  * @return ModifyInstanceTwoFactorResponse
 */
async function modifyInstanceTwoFactor(request: ModifyInstanceTwoFactorRequest): ModifyInstanceTwoFactorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceTwoFactor', 'POST', '/', 'json', false, 'json', request);
}

model ModifyNetworkDomainRequest {
  comment?: string(name='Comment', description='The new remarks of the network domain.', example='xxx', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host to which the network domain to modify belongs.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-x0r3hyr3f09', position='Query'),
  networkDomainId: string(name='NetworkDomainId', description='The ID of the network domain to modify.

This parameter is required.', example='3', position='Query'),
  networkDomainName?: string(name='NetworkDomainName', description='The new name of the network domain.', example='test', position='Query'),
  networkDomainType?: string(name='NetworkDomainType', description='The new connection mode of the network domain. Valid values:

*   **Direct**
*   **Proxy**', example='Proxy', position='Query'),
  proxies?: [ 
    {
      address?: string(name='Address', description='The new IP address of the proxy server.', example='114.21**.**'),
      nodeType?: string(name='NodeType', description='The node type of the proxy server to modify. Valid values:

*   **Master**: primary proxy server.
*   **Slave**: secondary proxy server.', example='Slave'),
      password?: string(name='Password', description='The new password of the proxy server account.', example='***'),
      port?: int32(name='Port', description='The new port of the proxy server.', example='22'),
      proxyType?: string(name='ProxyType', description='The new proxy mode. Valid values:

*   **SSHProxy**
*   **HTTPProxy**
*   **Socks5Proxy**', example='HTTPProxy'),
      user?: string(name='User', description='The new username of the proxy server account.', example='test'),
    }
  ](name='Proxies', description='The information about the proxy servers in the network domain.', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host to which the network domain to modify belongs.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model ModifyNetworkDomainResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='ED49CD1E-3510-5E5C-9133-E2067B656501'),
}

model ModifyNetworkDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyNetworkDomainResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyNetworkDomain  ModifyNetworkDomainRequest
  * @return ModifyNetworkDomainResponse
 */
async function modifyNetworkDomain(request: ModifyNetworkDomainRequest): ModifyNetworkDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyNetworkDomain', 'POST', '/', 'json', false, 'json', request);
}

model ModifyPolicyRequest {
  comment?: string(name='Comment', description='The new remarks of the control policy.', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host to which the control policy to modify belongs.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-09k1u8mv501', position='Query'),
  policyId: string(name='PolicyId', description='The ID of the control policy that you want to modify.

This parameter is required.', example='7', position='Query'),
  policyName?: string(name='PolicyName', description='The new name of the control policy.', example='test', position='Query'),
  priority?: string(name='Priority', description='The priority of the modified control policy. Valid values: 1 to 100. The smaller the value, the higher the priority. Default value: 1.', example='3', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host to which the control policy to modify belongs.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model ModifyPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='A34F9731-A4EA-5D1D-8445-BAEF782BFFE6'),
}

model ModifyPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyPolicy  ModifyPolicyRequest
  * @return ModifyPolicyResponse
 */
async function modifyPolicy(request: ModifyPolicyRequest): ModifyPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyPolicy', 'POST', '/', 'json', false, 'json', request);
}

model ModifyRuleRequest {
  comment?: string(name='Comment', description='The new remarks of the authorization rule. It can be up to 500 characters in length.', position='Query'),
  databases?: [ 
    {
      databaseAccountIds?: [ string ](name='DatabaseAccountIds', description='The database account IDs.'),
      databaseId?: string(name='DatabaseId', description='The database ID.', example='[
    {
        "DatabaseId": "1"
    }
]'),
    }
  ](name='Databases', description='The databases and database accounts that a user associated with the modified rule can manage.', position='Query'),
  effectiveEndTime?: long(name='EffectiveEndTime', description='The end time of the new validity period of the authorization rule. The value is a UNIX timestamp. Unit: seconds.', example='1672502400', position='Query'),
  effectiveStartTime?: long(name='EffectiveStartTime', description='The start time of the new validity period of the authorization rule. The value is a UNIX timestamp. Unit: seconds.', example='1669630029', position='Query'),
  hostGroups?: [ 
    {
      hostAccountNames?: [ string ](name='HostAccountNames', description='The names of the asset accounts.'),
      hostGroupId?: string(name='HostGroupId', description='The asset group ID.', example='[{"HostGroupId":"1"}]'),
    }
  ](name='HostGroups', description='The asset groups and asset accounts that a user associated with the modified rule can manage.', position='Query'),
  hosts?: [ 
    {
      hostAccountIds?: [ string ](name='HostAccountIds', description='The host account IDs.'),
      hostId?: string(name='HostId', description='The host ID.', example='[{"HostId":"1"}]'),
    }
  ](name='Hosts', description='An array that consists of the host IDs and host account IDs with which the modified authorization rule is associated.', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host whose authorization rule you want to modify.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-zmb2y9ydw08', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host to which the authorization rule to modify belongs.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  ruleId: string(name='RuleId', description='The ID of the authorization rule to modify.

This parameter is required.', example='68', position='Query'),
  ruleName?: string(name='RuleName', description='The new name of the authorization rule. The name must be 1 to 128 characters in length and can contain periods (.), underscores (_), hyphens (-), single quotation marks (\\"), and spaces. It cannot start with a special character.', example='test', position='Query'),
  userGroupIds?: [ string ](name='UserGroupIds', description='The IDs of the user groups with which the modified authorization rule is associated.', position='Query'),
  userIds?: [ string ](name='UserIds', description='The IDs of the users with whom the modified authorization rule is associated.', position='Query'),
}

model ModifyRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='67EB57AD-5C83-537B-B2A1-6082798965F0'),
}

model ModifyRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyRule  ModifyRuleRequest
  * @return ModifyRuleResponse
 */
async function modifyRule(request: ModifyRuleRequest): ModifyRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyRule', 'POST', '/', 'json', false, 'json', request);
}

model ModifyUserRequest {
  comment?: string(name='Comment', description='The new remarks of the user. The remarks can be up to 500 characters in length.

>  Leave this parameter empty if you do not want to change the remarks of the user.', example='comment', position='Query'),
  displayName?: string(name='DisplayName', description='The new display name of the user. The display name can be up to 128 characters in length.

>  Leave this parameter empty if you do not want to change the display name of the user.', example='Bob', position='Query'),
  effectiveEndTime?: long(name='EffectiveEndTime', description='The end time of the validity period of the user. Specify a UNIX timestamp. Unit: seconds.

>  Leave this parameter empty if you do not want to change the end time of the validity period.', example='1672502400', position='Query'),
  effectiveStartTime?: long(name='EffectiveStartTime', description='The start time of the validity period of the user. Specify a UNIX timestamp. Unit: seconds.

>  Leave this parameter empty if you do not want to change the start time of the validity period.', example='1669630029', position='Query'),
  email?: string(name='Email', description='The new email address of the user.

> 

*   This parameter is required if TwoFactorStatus is set to Enable and TwoFactorMethods is set to email, or if TwoFactorStatus is set to Global and TwoFactorMethods is set to email in the global two-factor authentication settings.

*   You can call the [GetInstanceTwoFactor](https://help.aliyun.com/document_detail/462968.html) operation to query the global two-factor authentication settings.

*   Leave this parameter empty if you do not want to change the email address of the user.', example='username@example.com', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host on which you want to modify the information about the user.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  language?: string(name='Language', description='This parameter is required if LanguageStatus is set to Custom.

- **zh-cn**: simplified Chinese
- **en**: English', example='en', position='Query'),
  languageStatus?: string(name='LanguageStatus', description='Specifies whether to send notifications in the language specified in the global settings or a custom language.

*   **Global**
*   **Custom**

>  Leave this parameter empty if you do not want to change the natural language used to notify the user.', example='Custom', position='Query'),
  mobile?: string(name='Mobile', description='The new mobile phone number of the user.

> 

*   This parameter is required if TwoFactorStatus is set to Enable and TwoFactorMethods is set to sms or dingtalk, or if TwoFactorStatus is set to Global and TwoFactorMethods is set to sms or dingtalk in the global two-factor authentication settings.

*   You can call the [GetInstanceTwoFactor](https://help.aliyun.com/document_detail/462968.html) operation to query the global two-factor authentication settings.

*   Leave this parameter empty if you do not want to change the mobile phone number of the user.', example='1358888****', position='Query'),
  mobileCountryCode?: string(name='MobileCountryCode', description='The country where the new mobile number of the user is registered. Valid values:

*   **CN:** the Chinese mainland, whose country calling code is +86
*   **HK:** Hong Kong (China), whose country calling code is +852
*   **MO:** Macao (China), whose country calling code is +853
*   **TW:** Taiwan (China), whose country calling code is +886
*   **RU:** Russia, whose country calling code is +7
*   **SG:** Singapore, whose country calling code is +65
*   **MY:** Malaysia, whose country calling code is +60
*   **ID:** Indonesia, whose country calling code is +62
*   **DE:** Germany, whose country calling code is +49
*   **AU:** Australia, whose country calling code is +61
*   **US:** US, whose country calling code is +1
*   **AE:** United Arab Emirates, whose country calling code is +971
*   **JP:** Japan, whose country calling code is +81
*   **GB:** UK, whose country calling code is +44
*   **IN:** India, whose country calling code is +91
*   **KR:** Republic of Korea, whose country calling code is +82
*   **PH:** Philippines, whose country calling code is +63
*   **CH:** Switzerland, whose country calling code is +41
*   **SE:** Sweden, whose country calling code is +46
*   **SA:** Saudi Arabia, whose country calling code is +966', example='CN', position='Query'),
  needResetPassword?: boolean(name='NeedResetPassword', description='Specifies whether password reset is required upon the next logon. Valid values:

*   **true**
*   **false**

>  Leave this parameter empty if you do not want to change the password reset settings for the user.', example='true', position='Query'),
  password?: string(name='Password', description='The new password of the user. The password must be 8 to 128 characters in length. It must contain uppercase letters, lowercase letters, digits, and special characters.

> Leave this parameter empty if you do not want to change the password of the user.', example='321****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host on which you want to modify the information about the user.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  twoFactorMethods?: string(name='TwoFactorMethods', description='The two-factor authentication method. You can select only one method. Valid values:

*   **sms**: text message-based two-factor authentication.
*   **email**: email-based two-factor authentication.
*   **dingtalk**: DingTalk-based two-factor authentication.
*   **totp OTP:** one-time password (OTP) token-based two-factor authentication.

>  If TwoFactorStatus is set to Enable, you must specify one of the valid values as TwoFactorMethods.', example='sms', position='Query'),
  twoFactorStatus?: string(name='TwoFactorStatus', description='Specifies whether two-factor authentication is enabled for the user. Valid values:

*   **Global**: The global settings apply.
*   **Disable**: Two-factor authentication is disabled.
*   **Enable**: Two-factor authentication is enabled and user-specific settings apply.

>  Leave this parameter empty if you do not want to change the two-factory authentication settings for the user.', example='Enable', position='Query'),
  userId: string(name='UserId', description='The ID of the user whose information you want to modify.

>  You can call the [ListUsers](https://help.aliyun.com/document_detail/204522.html) operation to query the user ID.

This parameter is required.', example='1', position='Query'),
}

model ModifyUserResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
}

model ModifyUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyUser  ModifyUserRequest
  * @return ModifyUserResponse
 */
async function modifyUser(request: ModifyUserRequest): ModifyUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyUser', 'POST', '/', 'json', false, 'json', request);
}

model ModifyUserGroupRequest {
  comment?: string(name='Comment', description='The new description of the user group. The description can be up to 500 characters in length.', example='comment', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host in which you want to modify the information about the user group.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host in which you want to modify the information about the user group.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  userGroupId: string(name='UserGroupId', description='The ID of the user group that you want to modify.

> You can call the [ListUserGroups](https://help.aliyun.com/document_detail/204509.html) operation to query the ID of the user group.

This parameter is required.', example='1', position='Query'),
  userGroupName?: string(name='UserGroupName', description='The new name of the user group. This name can be up to 128 characters in length.', example='TestUserGroup', position='Query'),
}

model ModifyUserGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
}

model ModifyUserGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyUserGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyUserGroup  ModifyUserGroupRequest
  * @return ModifyUserGroupResponse
 */
async function modifyUserGroup(request: ModifyUserGroupRequest): ModifyUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyUserGroup', 'POST', '/', 'json', false, 'json', request);
}

model ModifyUserPublicKeyRequest {
  comment?: string(name='Comment', description='The new description of the user group. The description can be up to 500 characters in length.', example='comment', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host on which you want to modify the public key of a user.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-nif236pmc1u', position='Query'),
  publicKey?: string(name='PublicKey', description='The new public key.

>  Specify a Base64-encoded string.', example='c3NoLWVkMjU1MTkgQUFBQUMzTnphQzFsWkRJMU5URTVBQUFBSUhVcjY4UENFYWFzZjFYRVpNYTVsMlNBQytHV3FpeXVsRVpndkV4dmlPM28gcm9vdEA5NjBkMmNhOTcwYjU=', position='Query'),
  publicKeyId: string(name='PublicKeyId', description='The ID of the public key that you want to modify.

>  You can call the [ListUserPublicKeys](https://help.aliyun.com/document_detail/477555.html) operation to query the public key ID.

This parameter is required.', example='2', position='Query'),
  publicKeyName?: string(name='PublicKeyName', description='The name of the public key that you want to modify. This name can be up to 128 characters in length.', example='name', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host that is used to modify the public key of the user.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model ModifyUserPublicKeyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='AAB631FB-ABD0-5783-99F3-F29573B129E4'),
}

model ModifyUserPublicKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyUserPublicKeyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyUserPublicKey  ModifyUserPublicKeyRequest
  * @return ModifyUserPublicKeyResponse
 */
async function modifyUserPublicKey(request: ModifyUserPublicKeyRequest): ModifyUserPublicKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyUserPublicKey', 'POST', '/', 'json', false, 'json', request);
}

model MoveDatabasesToNetworkDomainRequest {
  databaseIds: [ string ](name='DatabaseIds', description='The IDs of the databases that you want to add to the network domain.

This parameter is required.', position='Query'),
  instanceId: string(name='InstanceId', description='The bastion host ID.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-zpr3h2zo60l', position='Query'),
  networkDomainId: string(name='NetworkDomainId', description='The ID of the network domain to which you want to add databases.

> You can call the [ListNetworkDomains](https://help.aliyun.com/document_detail/2758827.html) operation to query the network domain ID.

This parameter is required.', example='3', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.
> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model MoveDatabasesToNetworkDomainResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='E5B1BC32-72B2-5BFD-BF75-5D38261264D1'),
  results?: [ 
    {
      code?: string(name='Code', description='Indicates whether the database is added to the network domain.

> The code LICENSE_OUT_OF_LIMIT indicates that the network domain feature is not supported by the current Bastionhost edition.', example='OK'),
      databaseId?: string(name='DatabaseId', description='The database ID.', example='45'),
      message?: string(name='Message', description='The error message that is returned.', example='N/A'),
    }
  ](name='Results', description='The results of the call.'),
}

model MoveDatabasesToNetworkDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MoveDatabasesToNetworkDomainResponseBody(name='body'),
}

/**
  * @param request  the request parameters of MoveDatabasesToNetworkDomain  MoveDatabasesToNetworkDomainRequest
  * @return MoveDatabasesToNetworkDomainResponse
 */
async function moveDatabasesToNetworkDomain(request: MoveDatabasesToNetworkDomainRequest): MoveDatabasesToNetworkDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MoveDatabasesToNetworkDomain', 'POST', '/', 'json', false, 'json', request);
}

model MoveHostsToNetworkDomainRequest {
  hostIds: [ string ](name='HostIds', description='The IDs of the hosts that you want to add to the network domain.

This parameter is required.', position='Query'),
  instanceId: string(name='InstanceId', description='The bastion host ID.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-uax2zmx8005', position='Query'),
  networkDomainId: string(name='NetworkDomainId', description='The ID of the network domain to which you want to add hosts.

>  You can call the [ListNetworkDomains](https://help.aliyun.com/document_detail/2758827.html) operation to query the network domain ID.

This parameter is required.', example='2', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model MoveHostsToNetworkDomainResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='F9B9E190-9C8E-5FEE-B963-7E9F1FD7FB4E'),
  results?: [ 
    {
      code?: string(name='Code', description='The return code that indicates whether the host is added to the network domain.

> The code LICENSE_OUT_OF_LIMIT indicates that the network domain feature is not supported by the current Bastionhost edition.', example='OK'),
      hostId?: string(name='HostId', description='The host ID.', example='1'),
      message?: string(name='Message', description='The error message that is returned.'),
    }
  ](name='Results', description='The result of the call.'),
}

model MoveHostsToNetworkDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MoveHostsToNetworkDomainResponseBody(name='body'),
}

/**
  * @param request  the request parameters of MoveHostsToNetworkDomain  MoveHostsToNetworkDomainRequest
  * @return MoveHostsToNetworkDomainResponse
 */
async function moveHostsToNetworkDomain(request: MoveHostsToNetworkDomainRequest): MoveHostsToNetworkDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MoveHostsToNetworkDomain', 'POST', '/', 'json', false, 'json', request);
}

model MoveResourceGroupRequest {
  regionId: string(name='RegionId', description='The region ID of the bastion host.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId: string(name='ResourceGroupId', description='The ID of the resource group to which the bastion host is moved.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the resource group ID of the bastion host.

This parameter is required.', example='rg-aekznp3oyo****', position='Query'),
  resourceId: string(name='ResourceId', description='The ID of the bastion host for which you want to change the resource group.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-78v1gh****', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resource. Set the value to **INSTANCE**, which indicates that the resource is a bastion host.

This parameter is required.', example='INSTANCE', position='Query'),
}

model MoveResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='1DEEC28D-27B1-4358-B6DC-E1285AE655C5'),
}

model MoveResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MoveResourceGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of MoveResourceGroup  MoveResourceGroupRequest
  * @return MoveResourceGroupResponse
 */
async function moveResourceGroup(request: MoveResourceGroupRequest): MoveResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MoveResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model RejectApproveCommandRequest {
  commandId: string(name='CommandId', description='The ID of the command that you want to reject.

>  You can call the [ListApproveCommands](https://help.aliyun.com/document_detail/2584310.html) operation to query the IDs of all commands that need to be reviewed.

This parameter is required.', example='574', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model RejectApproveCommandResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
}

model RejectApproveCommandResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RejectApproveCommandResponseBody(name='body'),
}

/**
  * @description You can call this operation as a Bastionhost administrator to reject the request to run a command of an O\\&M engineer.
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of RejectApproveCommand  RejectApproveCommandRequest
  * @return RejectApproveCommandResponse
 */
async function rejectApproveCommand(request: RejectApproveCommandRequest): RejectApproveCommandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RejectApproveCommand', 'POST', '/', 'json', false, 'json', request);
}

model RejectOperationTicketRequest {
  comment?: string(name='Comment', description='The review remarks.', example='comment', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  operationTicketId: string(name='OperationTicketId', description='The ID of the O\\&M application that you want to reject.

>  You can call the [ListOperationTickets](https://help.aliyun.com/document_detail/2584313.html) operation to query the IDs of all O\\&M applications that require review.

This parameter is required.', example='2', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model RejectOperationTicketResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
}

model RejectOperationTicketResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RejectOperationTicketResponseBody(name='body'),
}

/**
  * @description You can call this operation to reject an O\\&M application of an O\\&M engineer as a Bastionhost administrator.
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of RejectOperationTicket  RejectOperationTicketRequest
  * @return RejectOperationTicketResponse
 */
async function rejectOperationTicket(request: RejectOperationTicketRequest): RejectOperationTicketResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RejectOperationTicket', 'POST', '/', 'json', false, 'json', request);
}

model RemoveDatabasesFromGroupRequest {
  databaseIds: [ string ](name='DatabaseIds', description='The IDs of the databases that you want to remove.

This parameter is required.', position='Query'),
  hostGroupId: string(name='HostGroupId', description='The ID of the asset group from which you want to remove databases.

> You can call the [ListHostGroups](https://help.aliyun.com/document_detail/201307.html) operation to query the asset group ID.

This parameter is required.', example='1', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host whose asset group you want to manage.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-78v1ghxxxxx', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host whose asset group you want to manage.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model RemoveDatabasesFromGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
  results?: [ 
    {
      code?: string(name='Code', description='The error code that is returned. If OK is returned, the operation was successful. If another error code is returned, the operation failed.', example='OK'),
      databaseId?: string(name='DatabaseId', description='The database ID.', example='20'),
      hostGroupId?: string(name='HostGroupId', description='The asset group ID.', example='1'),
      message?: string(name='Message', description='The error message that is returned.'),
    }
  ](name='Results', description='The result of the call.'),
}

model RemoveDatabasesFromGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveDatabasesFromGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemoveDatabasesFromGroup  RemoveDatabasesFromGroupRequest
  * @return RemoveDatabasesFromGroupResponse
 */
async function removeDatabasesFromGroup(request: RemoveDatabasesFromGroupRequest): RemoveDatabasesFromGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveDatabasesFromGroup', 'POST', '/', 'json', false, 'json', request);
}

model RemoveHostsFromGroupRequest {
  hostGroupId: string(name='HostGroupId', description='The ID of the asset group from which you want to remove hosts.

>  You can call the [ListHostGroups](https://help.aliyun.com/document_detail/201307.html) operation to query the asset group ID.

This parameter is required.', example='1', position='Query'),
  hostIds: string(name='HostIds', description='The IDs of the hosts that you want to remove from the host group. Specify a JSON string. You can specify up to 100 host IDs.

>  You can call the [ListHosts](https://help.aliyun.com/document_detail/200665.html) operation to query the host IDs.

This parameter is required.', example='["1","2","3"]', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host whose asset group you want to manage.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host whose asset group you want to manage.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model RemoveHostsFromGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
  results?: [ 
    {
      code?: string(name='Code', description='The return code that indicates whether the call was successful. Valid values:

*   **OK**: The call was successful.

*   **UNEXPECTED**: An unknown error occurred.

*   **INVALID_ARGUMENT**: A request parameter is invalid.
    > Make sure that the request parameters are valid and call the operation again.

*   **OBJECT_NOT_FOUND**: The specified object on which you want to perform the operation does not exist.
    > Make sure that the specified bastion host ID and host IDs are valid and call the operation again.

*   **OBJECT_AlREADY_EXISTS**: The specified object on which you want to perform the operation already exists.', example='OK'),
      hostGroupId?: string(name='HostGroupId', description='The ID of the asset group.', example='1'),
      hostId?: string(name='HostId', description='The ID of the host.', example='1'),
      message?: string(name='Message', description='This parameter is deprecated.', example='无'),
    }
  ](name='Results', description='The result of the call.'),
}

model RemoveHostsFromGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveHostsFromGroupResponseBody(name='body'),
}

/**
  * @description You can call the RemoveHostsFromGroup operation to remove multiple hosts from an asset group at a time. If you no longer need to manage some hosts in an asset group, you can call this operation to remove the hosts from the asset group.
  * # [](#qps-)QPS limit
  * You can call this API operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
  * @param request  the request parameters of RemoveHostsFromGroup  RemoveHostsFromGroupRequest
  * @return RemoveHostsFromGroupResponse
 */
async function removeHostsFromGroup(request: RemoveHostsFromGroupRequest): RemoveHostsFromGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveHostsFromGroup', 'POST', '/', 'json', false, 'json', request);
}

model RemoveInstanceRdMemberRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  memberId: string(name='MemberId', description='This parameter is required.', example='1597141696147832', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model RemoveInstanceRdMemberResponseBody = {
  requestId?: string(name='RequestId', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
}

model RemoveInstanceRdMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveInstanceRdMemberResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemoveInstanceRdMember  RemoveInstanceRdMemberRequest
  * @return RemoveInstanceRdMemberResponse
 */
async function removeInstanceRdMember(request: RemoveInstanceRdMemberRequest): RemoveInstanceRdMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveInstanceRdMember', 'POST', '/', 'json', false, 'json', request);
}

model RemoveUsersFromGroupRequest {
  instanceId: string(name='InstanceId', description='The ID of the bastion host for which you want to remove users from the user group.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host for which you want to remove users from the user group.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  userGroupId: string(name='UserGroupId', description='The ID of the user group from which you want to remove users.

>  You can call the [ListUserGroups](https://help.aliyun.com/document_detail/204509.html) operation to query the ID of the user group.

This parameter is required.', example='１', position='Query'),
  userIds: string(name='UserIds', description='The ID of the user who you want to remove. The value is a JSON string. You can add up to 100 user IDs. If you specify multiple IDs, separate the IDs with commas (,).

>  You can call the [ListUsers](https://help.aliyun.com/document_detail/204522.html) operation to query the IDs of users.

This parameter is required.', example='["1","2","3"]', position='Query'),
}

model RemoveUsersFromGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
  results?: [ 
    {
      code?: string(name='Code', description='The return code that indicates whether the call was successful. Valid values:

*   **OK**: The call was successful.

*   **UNEXPECTED**: An unknown error occurred.

*   **INVALID_ARGUMENT**: A request parameter is invalid.

> Make sure that the request parameters are valid and call the operation again.

*   **OBJECT_NOT_FOUND**: The specified object on which you want to perform the operation does not exist.

> Check whether the specified ID of the bastion host exists, whether the specified hosts exist, and whether the specified host IDs are valid. Then, call the operation again.

*   **OBJECT_AlREADY_EXISTS**: The specified object on which you want to perform the operation already exists.', example='OK'),
      message?: string(name='Message', description='This parameter is deprecated.', example='success'),
      userGroupId?: string(name='UserGroupId', description='The ID of the group.', example='1'),
      userId?: string(name='UserId', description='The ID of the user.', example='1'),
    }
  ](name='Results', description='The result of the call.'),
}

model RemoveUsersFromGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveUsersFromGroupResponseBody(name='body'),
}

/**
  * @description You can call this operation to remove one or more users from a user group. When users in a user group are transferred to a new position, resign, or are switched to another user group, you can call this operation to remove the users from the current user group at a time.  
  * ## QPS limit
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of RemoveUsersFromGroup  RemoveUsersFromGroupRequest
  * @return RemoveUsersFromGroupResponse
 */
async function removeUsersFromGroup(request: RemoveUsersFromGroupRequest): RemoveUsersFromGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveUsersFromGroup', 'POST', '/', 'json', false, 'json', request);
}

model RenewAssetOperationTokenRequest {
  instanceId: string(name='InstanceId', description='The bastion host ID.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.
> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  tokenId?: string(name='TokenId', description='The ID of the O\\&M token that you want to renew.

>  You can call the [GenerateAssetOperationToken](https://help.aliyun.com/document_detail/2758861.html) operation to query the O\\&M token ID.', example='NmYyMmEzNmMwYzljNGYxMjh******', position='Query'),
}

model RenewAssetOperationTokenResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
}

model RenewAssetOperationTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenewAssetOperationTokenResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RenewAssetOperationToken  RenewAssetOperationTokenRequest
  * @return RenewAssetOperationTokenResponse
 */
async function renewAssetOperationToken(request: RenewAssetOperationTokenRequest): RenewAssetOperationTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenewAssetOperationToken', 'POST', '/', 'json', false, 'json', request);
}

model ResetHostAccountCredentialRequest {
  credentialType: string(name='CredentialType', description='The type of the logon credential that you want to delete. Valid values:

*   **Password**
*   **PrivateKey**

This parameter is required.', example='Password', position='Query'),
  hostAccountId: string(name='HostAccountId', description='The ID of the host account for which the logon credential is to be deleted.

>  You can call the [ListHostAccounts](https://help.aliyun.com/document_detail/204372.html) operation to query the ID of the host account.

This parameter is required.', example='1', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host from which you want to delete the logon credential for the host account.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host from which you want to delete the logon credential for the host account.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model ResetHostAccountCredentialResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EC9BF0F4-8783-491A-BC8C-1B4DD94976DE'),
}

model ResetHostAccountCredentialResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetHostAccountCredentialResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ResetHostAccountCredential  ResetHostAccountCredentialRequest
  * @return ResetHostAccountCredentialResponse
 */
async function resetHostAccountCredential(request: ResetHostAccountCredentialRequest): ResetHostAccountCredentialResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetHostAccountCredential', 'POST', '/', 'json', false, 'json', request);
}

model SetPolicyAccessTimeRangeConfigRequest {
  accessTimeRangeConfig: {
    effectiveTime?: [ 
      {
        days?: [ int32 ](name='Days', description='The days of the week during which users can log on to the assets.'),
        hours?: [ int32 ](name='Hours', description='The time periods of the day during which users can log on to the assets.'),
      }
    ](name='EffectiveTime', description='The details about the periods during which users can log on to the assets.'),
  }(name='AccessTimeRangeConfig', description='The logon period limits.

This parameter is required.', shrink='json', position='Query'),
  instanceId: string(name='InstanceId', description='The bastion host ID.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  policyId: string(name='PolicyId', description='The control policy ID.

>  You can call the [ListPolicies](https://help.aliyun.com/document_detail/2758876.html) operation to query the control policy ID.

This parameter is required.', example='13', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model SetPolicyAccessTimeRangeConfigResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
}

model SetPolicyAccessTimeRangeConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetPolicyAccessTimeRangeConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetPolicyAccessTimeRangeConfig  SetPolicyAccessTimeRangeConfigRequest
  * @return SetPolicyAccessTimeRangeConfigResponse
 */
async function setPolicyAccessTimeRangeConfig(request: SetPolicyAccessTimeRangeConfigRequest): SetPolicyAccessTimeRangeConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetPolicyAccessTimeRangeConfig', 'POST', '/', 'json', false, 'json', request);
}

model SetPolicyApprovalConfigRequest {
  approvalConfig: {
    switchStatus: string(name='SwitchStatus', description='Specifies whether to enable O&M approval in the control policy. Valid values:

* **On**: enables O&M approval.
* **Off**: disables O&M approval.

This parameter is required.', example='On'),
  }(name='ApprovalConfig', description='The O&M approval setting in the control policy.

This parameter is required.', shrink='json', position='Query'),
  instanceId: string(name='InstanceId', description='The bastion host ID.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  policyId: string(name='PolicyId', description='The ID of the control policy that you want to modify.

>  You can call the [ListPolicies](https://help.aliyun.com/document_detail/2758876.html) operation to query the control policy ID.

This parameter is required.', example='7', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model SetPolicyApprovalConfigResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
}

model SetPolicyApprovalConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetPolicyApprovalConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetPolicyApprovalConfig  SetPolicyApprovalConfigRequest
  * @return SetPolicyApprovalConfigResponse
 */
async function setPolicyApprovalConfig(request: SetPolicyApprovalConfigRequest): SetPolicyApprovalConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetPolicyApprovalConfig', 'POST', '/', 'json', false, 'json', request);
}

model SetPolicyAssetScopeRequest {
  databases?: [ 
    {
      accountScopeType?: string(name='AccountScopeType', description='The scope of database accounts to which the control policy applies. Valid values:

*   **All**: The control policy applies to all database accounts of the database.
*   **AccountId**: The control policy applies to specified database accounts of the database.', example='AccountId'),
      databaseAccountIds?: [ string ](name='DatabaseAccountIds', description='The database accounts to which the control policy applies.

>  This parameter is required if AccountScopeType is set to AccountId.'),
      databaseId?: string(name='DatabaseId', description='The database ID.', example='3'),
    }
  ](name='Databases', description='The databases to which the control policy applies.

>  This parameter is required if ScopeType is set to Database. You can specify up to 500 databases.', position='Query'),
  hostGroups?: [ 
    {
      accountNames?: [ string ](name='AccountNames', description='The asset accounts to which the control policy applies.

> This parameter is required if AccountScopeType is set to AccountName.'),
      accountScopeType?: string(name='AccountScopeType', description='The scope of asset accounts to which the control policy applies. Valid values:

* **All**: The control policy applies to all accounts in the asset group.
* **AccountName**: The control policy applies to specified accounts in the asset group.', example='All'),
      hostGroupId?: string(name='HostGroupId', description='The asset group ID.', example='86'),
    }
  ](name='HostGroups', description='The asset groups to which the control policy applies.

> This parameter is required if ScopeType is set to HostGroup. You can specify up to 100 asset groups.', position='Query'),
  hosts?: [ 
    {
      accountScopeType?: string(name='AccountScopeType', description='The scope of host accounts to which the control policy applies. Valid values:

* **All**: The control policy applies to all accounts of the host.
* **AccountId**: The control policy applies specified accounts of the host.', example='All'),
      hostAccountIds?: [ string ](name='HostAccountIds', description='The host accounts to which the control policy applies.

> This parameter is required if AccountScopeType is set to AccountId.'),
      hostId?: string(name='HostId', description='The host ID.', example='1'),
    }
  ](name='Hosts', description='The hosts to which the control policy applies.

> This parameter is required if ScopeType is set to Host. You can specify up to 500 hosts.', position='Query'),
  instanceId: string(name='InstanceId', description='The bastion host ID.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  policyId: string(name='PolicyId', description='The ID of the control policy that you want to modify.

>  You can call the [ListPolicies](https://help.aliyun.com/document_detail/2758876.html) operation to query the control policy ID.

This parameter is required.', example='7', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  scopeType: string(name='ScopeType', description='The scope of assets to which the control policy applies. Valid values:

* **All**: The control policy applies to all assets.
* **Host**: The control policy applies to specified hosts.
* **Database**: The control policy applies to specified databases.
* **HostGroup**: The control policy applies to specified asset groups.

This parameter is required.', example='All', position='Query'),
}

model SetPolicyAssetScopeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='5EAB922E-F476-5DFA-9290-313C608E724B'),
}

model SetPolicyAssetScopeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetPolicyAssetScopeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetPolicyAssetScope  SetPolicyAssetScopeRequest
  * @return SetPolicyAssetScopeResponse
 */
async function setPolicyAssetScope(request: SetPolicyAssetScopeRequest): SetPolicyAssetScopeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetPolicyAssetScope', 'POST', '/', 'json', false, 'json', request);
}

model SetPolicyCommandConfigRequest {
  commandConfig: {
    approval?: {
      commands?: [ string ](name='Commands', description='The commands that can be run only after approval.'),
    }(name='Approval', description='The command approval settings.

> A command approval policy is used to approve the commands that are excluded from a whitelist or blacklist specified in a command control policy. The command control policy takes precedence over the command approval policy in validation.'),
    deny: {
      aclType: string(name='AclType', description='The type of command control. Valid values:

*   **black**: blacklist mode.
*   **white**: whitelist mode.

This parameter is required.', example='white'),
      commands?: [ string ](name='Commands', description='The commands to be controlled.

> This parameter is required if AclType is set to white.'),
    }(name='Deny', description='The command control settings.

This parameter is required.'),
  }(name='CommandConfig', description='The command control settings.

> This parameter applies only to Linux hosts.

This parameter is required.', shrink='json', position='Query'),
  instanceId: string(name='InstanceId', description='The bastion host ID.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-78v1ghxxxxx', position='Query'),
  policyId: string(name='PolicyId', description='The ID of the control policy that you want to modify.

> You can call the [ListPolicies](https://help.aliyun.com/document_detail/2758876.html) operation to query the control policy ID.

This parameter is required.', example='45', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model SetPolicyCommandConfigResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4F6C075F-FC86-476E-943B-097BD4E12948'),
}

model SetPolicyCommandConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetPolicyCommandConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetPolicyCommandConfig  SetPolicyCommandConfigRequest
  * @return SetPolicyCommandConfigResponse
 */
async function setPolicyCommandConfig(request: SetPolicyCommandConfigRequest): SetPolicyCommandConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetPolicyCommandConfig', 'POST', '/', 'json', false, 'json', request);
}

model SetPolicyIPAclConfigRequest {
  IPAclConfig: {
    aclType: string(name='AclType', description='The mode of access control on source IP addresses. Valid values:

*   **black**: blacklist mode.
*   **white**: whitelist mode.

This parameter is required.', example='white'),
    iPs: [ string ](name='IPs', description='The source IP addresses in the blacklist or whitelist.

> 

*   This parameter is required if AclType is set to white.

*   If AclType is set to black but you do not want to add IP addresses to the blacklist, you can leave IPs empty.

This parameter is required.'),
  }(name='IPAclConfig', description='The access control settings for source IP addresses.

This parameter is required.', shrink='json', position='Query'),
  instanceId: string(name='InstanceId', description='The bastion host ID.

> You can call the DescribeInstances operation to query the bastion host ID.[](~~153281~~)

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  policyId: string(name='PolicyId', description='The ID of the control policy that you want to modify.

>  You can call the [ListPolicies](https://help.aliyun.com/document_detail/2758876.html) operation to query the control policy ID.

This parameter is required.', example='3', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model SetPolicyIPAclConfigResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
}

model SetPolicyIPAclConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetPolicyIPAclConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetPolicyIPAclConfig  SetPolicyIPAclConfigRequest
  * @return SetPolicyIPAclConfigResponse
 */
async function setPolicyIPAclConfig(request: SetPolicyIPAclConfigRequest): SetPolicyIPAclConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetPolicyIPAclConfig', 'POST', '/', 'json', false, 'json', request);
}

model SetPolicyProtocolConfigRequest {
  instanceId: string(name='InstanceId', description='The bastion host ID.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  policyId: string(name='PolicyId', description='The ID of the control policy that you want to modify.

> You can call the [ListPolicies](https://help.aliyun.com/document_detail/2758876.html) operation to query the control policy ID.

This parameter is required.', example='61', position='Query'),
  protocolConfig: {
    RDP?: {
      clipboardDownload?: string(name='ClipboardDownload', description='Specifies whether to enable downloading from the clipboard. Valid values:

*   Enable
*   Disable

> If you do not specify this parameter, the default value Disable is used.', example='Enable'),
      clipboardUpload?: string(name='ClipboardUpload', description='Specifies whether to enable uploading from the clipboard. Valid values:

*   Enable
*   Disable

> If you do not specify this parameter, the default value Disable is used.', example='Enable'),
      diskRedirection?: string(name='DiskRedirection', description='Specifies whether to enable driver mapping. Valid values:

*   Enable
*   Disable

> If you do not specify this parameter, the default value Disable is used.', example='Enable'),
      recordKeyboard?: string(name='RecordKeyboard', description='Specifies whether to enable keyboard operation recording. Valid values:

*   Enable
*   Disable

> If you do not specify this parameter, the default value Disable is used.', example='Enable'),
    }(name='RDP', description='The settings of the Remote Desktop Protocol (RDP) options.'),
    SSH?: {
      execCommand?: string(name='ExecCommand', description='Specifies whether to enable remote command execution. Valid values:

*   Enable
*   Disable

> If you do not specify this parameter, the default value Disable is used.', example='Enable'),
      SFTPChannel?: string(name='SFTPChannel', description='Specifies whether to enable SFTP channels. Valid values:

*   Enable
*   Disable

> 

*   If you do not specify this parameter, the default value Disable is used.

*   You must set at least one of the following parameters to Enable: SSHChannel and SFTPChannel.

*   If you select Enable Only SFTP Permission for a host account, do not set SSHChannel and SFTPChannel to Disable for the account. Otherwise, users of the bastion host cannot use the account to access the host.', example='Enable'),
      SFTPDownloadFile?: string(name='SFTPDownloadFile', description='Specifies whether to enable file downloading during SFTP-based O\\&M. Valid values:

*   Enable
*   Disable

> If you do not specify this parameter, the default value Disable is used.', example='Enable'),
      SFTPMkdir?: string(name='SFTPMkdir', description='Specifies whether to enable folder creation during SFTP-based O\\&M. Valid values:

*   Enable
*   Disable

> If you do not specify this parameter, the default value Disable is used.', example='Enable'),
      SFTPRemoveFile?: string(name='SFTPRemoveFile', description='Specifies whether to enable file deletion during SFTP-based O\\&M. Valid values:

*   Enable
*   Disable

> If you do not specify this parameter, the default value Disable is used.', example='Enable'),
      SFTPRenameFile?: string(name='SFTPRenameFile', description='Specifies whether to enable file renaming during SFTP-based O\\&M. Valid values:

*   Enable
*   Disable

> If you do not specify this parameter, the default value Disable is used.', example='Enable'),
      SFTPRmdir?: string(name='SFTPRmdir', description='Specifies whether to enable folder deletion during SFTP-based O\\&M. Valid values:

*   Enable
*   Disable

> If you do not specify this parameter, the default value Disable is used.', example='Enable'),
      SFTPUploadFile?: string(name='SFTPUploadFile', description='Specifies whether to enable file uploading during SFTP-based O\\&M. Valid values:

*   Enable
*   Disable

> If you do not specify this parameter, the default value Disable is used.', example='Enable'),
      SSHChannel?: string(name='SSHChannel', description='Specifies whether to enable SSH channels. Valid values:

*   Enable
*   Disable

> 

*   If you do not specify this parameter, the default value Disable is used.

*   You must set at least one of the following parameters to Enable: SSHChannel and SFTPChannel. If you set SSHChannel to Disable, SSH-based logon is disabled for the asset account. Proceed with caution.

*   If you select Enable Only SFTP Permission for a host account, do not set SSHChannel and SFTPChannel to Disable for the account. Otherwise, users of the bastion host cannot use the account to access the host.', example='Enable'),
      x11Forwarding?: string(name='X11Forwarding', description='Specifies whether to enable X11 forwarding. Valid values:

*   Enable
*   Disable

> If you do not specify this parameter, the default value Disable is used.', example='Enable'),
    }(name='SSH', description='The settings of the SSH and SSH Fine Transfer Protocol (SFTP) options.'),
  }(name='ProtocolConfig', description='The protocol control settings.

This parameter is required.', shrink='json', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
}

model SetPolicyProtocolConfigResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='81500666-d7f5-4143-8329-0223cc738105'),
}

model SetPolicyProtocolConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetPolicyProtocolConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetPolicyProtocolConfig  SetPolicyProtocolConfigRequest
  * @return SetPolicyProtocolConfigResponse
 */
async function setPolicyProtocolConfig(request: SetPolicyProtocolConfigRequest): SetPolicyProtocolConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetPolicyProtocolConfig', 'POST', '/', 'json', false, 'json', request);
}

model SetPolicyUserScopeRequest {
  instanceId: string(name='InstanceId', description='The bastion host ID.

>  You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the bastion host ID.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  policyId: string(name='PolicyId', description='The ID of the control policy that you want to modify.

>  You can call the [ListPolicies](https://help.aliyun.com/document_detail/2758876.html) operation to query the control policy ID.

This parameter is required.', example='1', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  scopeType: string(name='ScopeType', description='The scope of users to whom the control policy applies. Valid values:

* **All**: The control policy applies to all users.
* **User**: The control policy applies to specified users.
* **UserGroup**: The control policy applies to specified user groups.

This parameter is required.', example='All', position='Query'),
  userGroupIds?: [ string ](name='UserGroupIds', description='The user groups to which the control policy applies.

> This parameter is required if ScopeType is set to UserGroup. You can specify up to 100 user group IDs.', position='Query'),
  userIds?: [ string ](name='UserIds', description='The users to whom the control policy applies.

> This parameter is required if ScopeType is set to User. You can specify up to 500 user IDs.', position='Query'),
}

model SetPolicyUserScopeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
}

model SetPolicyUserScopeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetPolicyUserScopeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetPolicyUserScope  SetPolicyUserScopeRequest
  * @return SetPolicyUserScopeResponse
 */
async function setPolicyUserScope(request: SetPolicyUserScopeRequest): SetPolicyUserScopeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetPolicyUserScope', 'POST', '/', 'json', false, 'json', request);
}

model StartInstanceRequest {
  clientSecurityGroupIds?: [ string ](name='ClientSecurityGroupIds', position='Query'),
  enablePortalPrivateAccess?: boolean(name='EnablePortalPrivateAccess', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the bastion host that you want to enable.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-78v1gh****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host.', example='cn-hangzhou', position='Query'),
  securityGroupIds: [ string ](name='SecurityGroupIds', description='An array consisting of the IDs of security groups to which the bastion host is added.

This parameter is required.', example='sg-bp1aiupc4yjqgmm****', position='Query'),
  slaveVswitchId?: string(name='SlaveVswitchId', position='Query'),
  vswitchId?: string(name='VswitchId', description='The ID of the vSwitch to which the bastion host belongs.', example='vsw-bp1xfwzzfti0kjbf****', position='Query'),
}

model StartInstanceResponseBody = {
  instanceId?: string(name='InstanceId', description='The ID of the bastion host that you enable.', example='bastionhost-cn-78v1gh****'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='0F85AE0A-6A87-48F3-A0C7-90B998788A36'),
}

model StartInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartInstance  StartInstanceRequest
  * @return StartInstanceResponse
 */
async function startInstance(request: StartInstanceRequest): StartInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartInstance', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  regionId: string(name='RegionId', description='The region ID of the bastion hosts to which you want to create and add tags.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', description='An array that consists of IDs of bastion hosts.

Valid values: 1 to 20.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query IDs of bastion hosts.

This parameter is required.', example='bastionhost-cn-78v1gc****', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resource.

Set the value to **INSTANCE**, which indicates that the resource is a bastion host.

This parameter is required.', example='INSTANCE', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key of the bastion host. You can specify up to 20 tags for the bastion host.

> - Thekey cannot be an empty string. The key can be up to 128 characters in length. 
> - It cannot start with **aliyun** or **acs:**, and cannot contain **http://** or **https://**.', example='operation'),
      value?: string(name='Value', description='The tag value of the bastion host.\\
You can specify up to 20 tags for the bastion host.

> *   The value can be a string of up to 128 characters or an empty string.
> *   It cannot start with **aliyun** or **acs:**, and cannot contain **http://** or **https://**.', example='operation_test'),
    }
  ](name='Tag', description='The tags.', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='2F24F0A8-4C69-4E89-9392-457D107E2D4A'),
}

model TagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of TagResources  TagResourcesRequest
  * @return TagResourcesResponse
 */
async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UnlockUsersRequest {
  instanceId: string(name='InstanceId', description='The ID of the bastion host to which the users to be unlocked belong.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the bastion host to which the users to be unlocked belong.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).', example='cn-hangzhou', position='Query'),
  userIds: string(name='UserIds', description='The ID of the user that you want to unlock. The value is a JSON string. You can add up to 100 user IDs. If you specify multiple IDs, separate the IDs with commas (,).

> You can call the [ListUsers](https://help.aliyun.com/document_detail/204522.html) operation to query the ID of the user.

This parameter is required.', example='["1","2"]', position='Query'),
}

model UnlockUsersResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='EC9BF0F4-8983-491A-BC8C-1B4DD94976DE'),
  results?: [ 
    {
      code?: string(name='Code', description='The result of the call. Valid values:

*   **OK**: The call was successful.

*   **UNEXPECTED**: An unknown error occurred.

*   **INVALID_ARGUMENT**: A request parameter is invalid.

    **

    **Note**Make sure that the request parameters are valid and call the operation again.

*   **OBJECT_NOT_FOUND**: The specified object on which you want to perform the operation does not exist.

    **

    **Note**Check whether the specified ID of the bastion host exists, whether the specified hosts exist, and whether the specified host IDs are valid. Then, call the operation again.

*   **OBJECT_AlREADY_EXISTS**: The specified object on which you want to perform the operation already exists.', example='OK'),
      message?: string(name='Message', description='This parameter is deprecated.', example='N/A'),
      userId?: string(name='UserId', description='The ID of the user.', example='１'),
    }
  ](name='Results', description='An array that consists of information about the result of the call.'),
}

model UnlockUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnlockUsersResponseBody(name='body'),
}

/**
  * @description After you call the [LockUsers](https://help.aliyun.com/document_detail/204591.html) operation to lock one or more users of a bastion host, you can call this operation to unlock the users. After the users are unlocked, the users can perform O\\&M operations by using the bastion host.
  * # Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of UnlockUsers  UnlockUsersRequest
  * @return UnlockUsersResponse
 */
async function unlockUsers(request: UnlockUsersRequest): UnlockUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnlockUsers', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', description='Specifies whether to delete all tags that are added to the bastion host.

*   If you specify TagKey.N, the value of this parameter can only be **false**, which indicates that only a specified tag is deleted.
*   If you do not specify TagKey.N and the value of this parameter is **true**, all tags are deleted. If you do not specify TagKey.N and the value of this parameter is **false**, no tags are deleted.', example='false', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the bastion host to query.

> For more information about the mapping between region IDs and region names, see [Regions and zones](https://help.aliyun.com/document_detail/40654.html).

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', description='An array that consists of IDs of bastion hosts.

Valid values: 1 to 20.

> You can call the [DescribeInstances](https://help.aliyun.com/document_detail/153281.html) operation to query the ID of the bastion host.

This parameter is required.', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resource.

Set the value to **INSTANCE**, which indicates that the resource is a bastion host.

This parameter is required.', example='INSTANCE', position='Query'),
  tagKey?: [ string ](name='TagKey', description='The key of tag N.

Valid values of N: 1 to 20.', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='A8A665B9-8550-4942-9DEE-73198051856B'),
}

model UntagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UntagResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UntagResources  UntagResourcesRequest
  * @return UntagResourcesResponse
 */
async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

model VerifyInstanceADAuthServerRequest {
  account: string(name='Account', description='This parameter is required.', example='cn=Manager,dc=test,dc=com', position='Query'),
  baseDN: string(name='BaseDN', description='This parameter is required.', example='dc=test,dc=com', position='Query'),
  domain: string(name='Domain', description='This parameter is required.', example='domain', position='Query'),
  filter?: string(name='Filter', example='(objectClass=top)', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  isSSL: string(name='IsSSL', description='This parameter is required.', example='true', position='Query'),
  password: string(name='Password', description='This parameter is required.', example='******', position='Query'),
  port: string(name='Port', description='This parameter is required.', example='389', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  server: string(name='Server', description='This parameter is required.', example='192.168.XX.XX', position='Query'),
  standbyServer?: string(name='StandbyServer', example='192.168.XX.XX', position='Query'),
}

model VerifyInstanceADAuthServerResponseBody = {
  requestId?: string(name='RequestId', example='8F1085E3-F048-5F34-B650-F145216E4AA5'),
}

model VerifyInstanceADAuthServerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VerifyInstanceADAuthServerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of VerifyInstanceADAuthServer  VerifyInstanceADAuthServerRequest
  * @return VerifyInstanceADAuthServerResponse
 */
async function verifyInstanceADAuthServer(request: VerifyInstanceADAuthServerRequest): VerifyInstanceADAuthServerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VerifyInstanceADAuthServer', 'POST', '/', 'json', false, 'json', request);
}

model VerifyInstanceLDAPAuthServerRequest {
  account: string(name='Account', description='This parameter is required.', example='cn=Manager,dc=test,dc=com', position='Query'),
  baseDN: string(name='BaseDN', description='This parameter is required.', example='dc=test,dc=com', position='Query'),
  filter?: string(name='Filter', example='(objectClass=top)', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='bastionhost-cn-st220aw****', position='Query'),
  isSSL?: string(name='IsSSL', example='true', position='Query'),
  password?: string(name='Password', example='******', position='Query'),
  port: string(name='Port', description='This parameter is required.', example='389', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  server: string(name='Server', description='This parameter is required.', example='192.168.XX.XX', position='Query'),
  standbyServer?: string(name='StandbyServer', example='192.168.XX.XX', position='Query'),
}

model VerifyInstanceLDAPAuthServerResponseBody = {
  requestId?: string(name='RequestId', example='C9E97677-BD74-584B-AFCE-948C2A70BB83'),
}

model VerifyInstanceLDAPAuthServerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VerifyInstanceLDAPAuthServerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of VerifyInstanceLDAPAuthServer  VerifyInstanceLDAPAuthServerRequest
  * @return VerifyInstanceLDAPAuthServerResponse
 */
async function verifyInstanceLDAPAuthServer(request: VerifyInstanceLDAPAuthServerRequest): VerifyInstanceLDAPAuthServerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VerifyInstanceLDAPAuthServer', 'POST', '/', 'json', false, 'json', request);
}

