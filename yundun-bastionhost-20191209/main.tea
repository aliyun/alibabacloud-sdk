/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('yundun-bastionhost', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AddHostsToGroupRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  hostGroupId?: string(name='HostGroupId'),
  hostIds?: string(name='HostIds'),
}

model AddHostsToGroupResponseBody = {
  requestId?: string(name='RequestId'),
  results?: [ 
    {
      code?: string(name='Code'),
      message?: string(name='Message'),
      hostGroupId?: string(name='HostGroupId'),
      hostId?: string(name='HostId'),
    }
  ](name='Results'),
}

model AddHostsToGroupResponse = {
  headers: map[string]string(name='headers'),
  body: AddHostsToGroupResponseBody(name='body'),
}

async function addHostsToGroupWithOptions(request: AddHostsToGroupRequest, runtime: Util.RuntimeOptions): AddHostsToGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddHostsToGroup', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addHostsToGroup(request: AddHostsToGroupRequest): AddHostsToGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return addHostsToGroupWithOptions(request, runtime);
}

model AddUsersToGroupRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  userGroupId?: string(name='UserGroupId'),
  userIds?: string(name='UserIds'),
}

model AddUsersToGroupResponseBody = {
  requestId?: string(name='RequestId'),
  results?: [ 
    {
      code?: string(name='Code'),
      message?: string(name='Message'),
      userGroupId?: string(name='UserGroupId'),
      userId?: string(name='UserId'),
    }
  ](name='Results'),
}

model AddUsersToGroupResponse = {
  headers: map[string]string(name='headers'),
  body: AddUsersToGroupResponseBody(name='body'),
}

async function addUsersToGroupWithOptions(request: AddUsersToGroupRequest, runtime: Util.RuntimeOptions): AddUsersToGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddUsersToGroup', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addUsersToGroup(request: AddUsersToGroupRequest): AddUsersToGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return addUsersToGroupWithOptions(request, runtime);
}

model AttachHostAccountsToUserRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  userId?: string(name='UserId'),
  hosts?: string(name='Hosts'),
}

model AttachHostAccountsToUserResponseBody = {
  requestId?: string(name='RequestId'),
  results?: [ 
    {
      code?: string(name='Code'),
      message?: string(name='Message'),
      hostId?: string(name='HostId'),
      userId?: string(name='UserId'),
      hostAccounts?: [ 
        {
          code?: string(name='Code'),
          message?: string(name='Message'),
          hostAccountId?: string(name='HostAccountId'),
        }
      ](name='HostAccounts'),
    }
  ](name='Results'),
}

model AttachHostAccountsToUserResponse = {
  headers: map[string]string(name='headers'),
  body: AttachHostAccountsToUserResponseBody(name='body'),
}

async function attachHostAccountsToUserWithOptions(request: AttachHostAccountsToUserRequest, runtime: Util.RuntimeOptions): AttachHostAccountsToUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AttachHostAccountsToUser', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function attachHostAccountsToUser(request: AttachHostAccountsToUserRequest): AttachHostAccountsToUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachHostAccountsToUserWithOptions(request, runtime);
}

model AttachHostAccountsToUserGroupRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  userGroupId?: string(name='UserGroupId'),
  hosts?: string(name='Hosts'),
}

model AttachHostAccountsToUserGroupResponseBody = {
  requestId?: string(name='RequestId'),
  results?: [ 
    {
      code?: string(name='Code'),
      message?: string(name='Message'),
      hostId?: string(name='HostId'),
      userGroupId?: string(name='UserGroupId'),
      hostAccounts?: [ 
        {
          code?: string(name='Code'),
          message?: string(name='Message'),
          hostAccountId?: string(name='HostAccountId'),
        }
      ](name='HostAccounts'),
    }
  ](name='Results'),
}

model AttachHostAccountsToUserGroupResponse = {
  headers: map[string]string(name='headers'),
  body: AttachHostAccountsToUserGroupResponseBody(name='body'),
}

async function attachHostAccountsToUserGroupWithOptions(request: AttachHostAccountsToUserGroupRequest, runtime: Util.RuntimeOptions): AttachHostAccountsToUserGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AttachHostAccountsToUserGroup', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function attachHostAccountsToUserGroup(request: AttachHostAccountsToUserGroupRequest): AttachHostAccountsToUserGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachHostAccountsToUserGroupWithOptions(request, runtime);
}

model AttachHostGroupAccountsToUserRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  userId?: string(name='UserId'),
  hostGroups?: string(name='HostGroups'),
}

model AttachHostGroupAccountsToUserResponseBody = {
  requestId?: string(name='RequestId'),
  results?: [ 
    {
      code?: string(name='Code'),
      message?: string(name='Message'),
      hostGroupId?: string(name='HostGroupId'),
      userId?: string(name='UserId'),
      hostAccountNames?: [ 
        {
          code?: string(name='Code'),
          message?: string(name='Message'),
          hostAccountName?: string(name='HostAccountName'),
        }
      ](name='HostAccountNames'),
    }
  ](name='Results'),
}

model AttachHostGroupAccountsToUserResponse = {
  headers: map[string]string(name='headers'),
  body: AttachHostGroupAccountsToUserResponseBody(name='body'),
}

async function attachHostGroupAccountsToUserWithOptions(request: AttachHostGroupAccountsToUserRequest, runtime: Util.RuntimeOptions): AttachHostGroupAccountsToUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AttachHostGroupAccountsToUser', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function attachHostGroupAccountsToUser(request: AttachHostGroupAccountsToUserRequest): AttachHostGroupAccountsToUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachHostGroupAccountsToUserWithOptions(request, runtime);
}

model AttachHostGroupAccountsToUserGroupRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  userGroupId?: string(name='UserGroupId'),
  hostGroups?: string(name='HostGroups'),
}

model AttachHostGroupAccountsToUserGroupResponseBody = {
  requestId?: string(name='RequestId'),
  results?: [ 
    {
      code?: string(name='Code'),
      message?: string(name='Message'),
      hostGroupId?: string(name='HostGroupId'),
      userGroupId?: string(name='UserGroupId'),
      hostAccountNames?: [ 
        {
          code?: string(name='Code'),
          message?: string(name='Message'),
          hostAccountName?: string(name='HostAccountName'),
        }
      ](name='HostAccountNames'),
    }
  ](name='Results'),
}

model AttachHostGroupAccountsToUserGroupResponse = {
  headers: map[string]string(name='headers'),
  body: AttachHostGroupAccountsToUserGroupResponseBody(name='body'),
}

async function attachHostGroupAccountsToUserGroupWithOptions(request: AttachHostGroupAccountsToUserGroupRequest, runtime: Util.RuntimeOptions): AttachHostGroupAccountsToUserGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AttachHostGroupAccountsToUserGroup', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function attachHostGroupAccountsToUserGroup(request: AttachHostGroupAccountsToUserGroupRequest): AttachHostGroupAccountsToUserGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachHostGroupAccountsToUserGroupWithOptions(request, runtime);
}

model ConfigInstanceSecurityGroupsRequest {
  lang?: string(name='Lang'),
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  authorizedSecurityGroups?: [ string ](name='AuthorizedSecurityGroups'),
}

model ConfigInstanceSecurityGroupsResponseBody = {
  instanceId?: string(name='InstanceId'),
  requestId?: string(name='RequestId'),
}

model ConfigInstanceSecurityGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigInstanceSecurityGroupsResponseBody(name='body'),
}

async function configInstanceSecurityGroupsWithOptions(request: ConfigInstanceSecurityGroupsRequest, runtime: Util.RuntimeOptions): ConfigInstanceSecurityGroupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ConfigInstanceSecurityGroups', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function configInstanceSecurityGroups(request: ConfigInstanceSecurityGroupsRequest): ConfigInstanceSecurityGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return configInstanceSecurityGroupsWithOptions(request, runtime);
}

model ConfigInstanceWhiteListRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  whiteList?: [ string ](name='WhiteList'),
}

model ConfigInstanceWhiteListResponseBody = {
  instanceId?: string(name='InstanceId'),
  requestId?: string(name='RequestId'),
}

model ConfigInstanceWhiteListResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigInstanceWhiteListResponseBody(name='body'),
}

async function configInstanceWhiteListWithOptions(request: ConfigInstanceWhiteListRequest, runtime: Util.RuntimeOptions): ConfigInstanceWhiteListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ConfigInstanceWhiteList', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function configInstanceWhiteList(request: ConfigInstanceWhiteListRequest): ConfigInstanceWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return configInstanceWhiteListWithOptions(request, runtime);
}

model CreateHostRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  hostPrivateAddress?: string(name='HostPrivateAddress'),
  hostPublicAddress?: string(name='HostPublicAddress'),
  activeAddressType?: string(name='ActiveAddressType'),
  hostName?: string(name='HostName'),
  source?: string(name='Source'),
  OSType?: string(name='OSType'),
  comment?: string(name='Comment'),
  sourceInstanceId?: string(name='SourceInstanceId'),
  instanceRegionId?: string(name='InstanceRegionId'),
}

model CreateHostResponseBody = {
  hostId?: string(name='HostId'),
  requestId?: string(name='RequestId'),
}

model CreateHostResponse = {
  headers: map[string]string(name='headers'),
  body: CreateHostResponseBody(name='body'),
}

async function createHostWithOptions(request: CreateHostRequest, runtime: Util.RuntimeOptions): CreateHostResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateHost', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createHost(request: CreateHostRequest): CreateHostResponse {
  var runtime = new Util.RuntimeOptions{};
  return createHostWithOptions(request, runtime);
}

model CreateHostAccountRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  hostId?: string(name='HostId'),
  protocolName?: string(name='ProtocolName'),
  hostAccountName?: string(name='HostAccountName'),
  password?: string(name='Password'),
  privateKey?: string(name='PrivateKey'),
  passPhrase?: string(name='PassPhrase'),
}

model CreateHostAccountResponseBody = {
  hostAccountId?: string(name='HostAccountId'),
  requestId?: string(name='RequestId'),
}

model CreateHostAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CreateHostAccountResponseBody(name='body'),
}

async function createHostAccountWithOptions(request: CreateHostAccountRequest, runtime: Util.RuntimeOptions): CreateHostAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateHostAccount', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createHostAccount(request: CreateHostAccountRequest): CreateHostAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return createHostAccountWithOptions(request, runtime);
}

model CreateHostGroupRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  hostGroupName?: string(name='HostGroupName'),
  comment?: string(name='Comment'),
}

model CreateHostGroupResponseBody = {
  hostGroupId?: string(name='HostGroupId'),
  requestId?: string(name='RequestId'),
}

model CreateHostGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateHostGroupResponseBody(name='body'),
}

async function createHostGroupWithOptions(request: CreateHostGroupRequest, runtime: Util.RuntimeOptions): CreateHostGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateHostGroup', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createHostGroup(request: CreateHostGroupRequest): CreateHostGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createHostGroupWithOptions(request, runtime);
}

model CreateUserRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  source?: string(name='Source'),
  userName?: string(name='UserName'),
  password?: string(name='Password'),
  displayName?: string(name='DisplayName'),
  comment?: string(name='Comment'),
  email?: string(name='Email'),
  mobile?: string(name='Mobile'),
  sourceUserId?: string(name='SourceUserId'),
  mobileCountryCode?: string(name='MobileCountryCode'),
}

model CreateUserResponseBody = {
  userId?: string(name='UserId'),
  requestId?: string(name='RequestId'),
}

model CreateUserResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUserResponseBody(name='body'),
}

async function createUserWithOptions(request: CreateUserRequest, runtime: Util.RuntimeOptions): CreateUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateUser', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createUser(request: CreateUserRequest): CreateUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUserWithOptions(request, runtime);
}

model CreateUserGroupRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  userGroupName?: string(name='UserGroupName'),
  comment?: string(name='Comment'),
}

model CreateUserGroupResponseBody = {
  userGroupId?: string(name='UserGroupId'),
  requestId?: string(name='RequestId'),
}

model CreateUserGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUserGroupResponseBody(name='body'),
}

async function createUserGroupWithOptions(request: CreateUserGroupRequest, runtime: Util.RuntimeOptions): CreateUserGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateUserGroup', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createUserGroup(request: CreateUserGroupRequest): CreateUserGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUserGroupWithOptions(request, runtime);
}

model DeleteHostRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  hostId?: string(name='HostId'),
}

model DeleteHostResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteHostResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteHostResponseBody(name='body'),
}

async function deleteHostWithOptions(request: DeleteHostRequest, runtime: Util.RuntimeOptions): DeleteHostResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteHost', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteHost(request: DeleteHostRequest): DeleteHostResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteHostWithOptions(request, runtime);
}

model DeleteHostAccountRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  hostAccountId?: string(name='HostAccountId'),
}

model DeleteHostAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteHostAccountResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteHostAccountResponseBody(name='body'),
}

async function deleteHostAccountWithOptions(request: DeleteHostAccountRequest, runtime: Util.RuntimeOptions): DeleteHostAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteHostAccount', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteHostAccount(request: DeleteHostAccountRequest): DeleteHostAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteHostAccountWithOptions(request, runtime);
}

model DeleteHostGroupRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  hostGroupId?: string(name='HostGroupId'),
}

model DeleteHostGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteHostGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteHostGroupResponseBody(name='body'),
}

async function deleteHostGroupWithOptions(request: DeleteHostGroupRequest, runtime: Util.RuntimeOptions): DeleteHostGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteHostGroup', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteHostGroup(request: DeleteHostGroupRequest): DeleteHostGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteHostGroupWithOptions(request, runtime);
}

model DeleteUserRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  userId?: string(name='UserId'),
}

model DeleteUserResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteUserResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteUserResponseBody(name='body'),
}

async function deleteUserWithOptions(request: DeleteUserRequest, runtime: Util.RuntimeOptions): DeleteUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteUser', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteUser(request: DeleteUserRequest): DeleteUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteUserWithOptions(request, runtime);
}

model DeleteUserGroupRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  userGroupId?: string(name='UserGroupId'),
}

model DeleteUserGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteUserGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteUserGroupResponseBody(name='body'),
}

async function deleteUserGroupWithOptions(request: DeleteUserGroupRequest, runtime: Util.RuntimeOptions): DeleteUserGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteUserGroup', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteUserGroup(request: DeleteUserGroupRequest): DeleteUserGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteUserGroupWithOptions(request, runtime);
}

model DescribeInstanceAttributeRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
}

model DescribeInstanceAttributeResponseBody = {
  requestId?: string(name='RequestId'),
  instanceAttribute?: {
    vpcId?: string(name='VpcId'),
    vswitchId?: string(name='VswitchId'),
    description?: string(name='Description'),
    expireTime?: long(name='ExpireTime'),
    modifyPasswordModule?: string(name='ModifyPasswordModule'),
    eniInstanceId?: string(name='EniInstanceId'),
    instanceId?: string(name='InstanceId'),
    internetEndpoint?: string(name='InternetEndpoint'),
    regionId?: string(name='RegionId'),
    intranetEndpoint?: string(name='IntranetEndpoint'),
    startTime?: long(name='StartTime'),
    resourceGroupId?: string(name='ResourceGroupId'),
    networkProxyModule?: string(name='NetworkProxyModule'),
    webTerminalModule?: string(name='WebTerminalModule'),
    instanceStatus?: string(name='InstanceStatus'),
    licenseCode?: string(name='LicenseCode'),
    publicNetworkAccess?: boolean(name='PublicNetworkAccess'),
    storage?: long(name='Storage'),
    ports?: [ 
      {
        standardPort?: int32(name='StandardPort'),
        customPort?: int32(name='CustomPort'),
      }
    ](name='Ports'),
    publicExportIps?: [ string ](name='PublicExportIps'),
    publicWhiteList?: [ string ](name='PublicWhiteList'),
    authorizedSecurityGroups?: [ string ](name='AuthorizedSecurityGroups'),
    privateExportIps?: [ string ](name='PrivateExportIps'),
    publicIps?: [ string ](name='PublicIps'),
    securityGroupIds?: [ string ](name='SecurityGroupIds'),
    privateWhiteList?: [ string ](name='PrivateWhiteList'),
  }(name='InstanceAttribute'),
}

model DescribeInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceAttributeResponseBody(name='body'),
}

async function describeInstanceAttributeWithOptions(request: DescribeInstanceAttributeRequest, runtime: Util.RuntimeOptions): DescribeInstanceAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceAttribute', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceAttribute(request: DescribeInstanceAttributeRequest): DescribeInstanceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceAttributeWithOptions(request, runtime);
}

model DescribeInstancesRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  instanceStatus?: string(name='InstanceStatus'),
  resourceGroupId?: string(name='ResourceGroupId'),
  instanceId?: [ string ](name='InstanceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeInstancesResponseBody = {
  totalCount?: long(name='TotalCount'),
  requestId?: string(name='RequestId'),
  instances?: [ 
    {
      vpcId?: string(name='VpcId'),
      vswitchId?: string(name='VswitchId'),
      imageVersion?: string(name='ImageVersion'),
      planCode?: string(name='PlanCode'),
      description?: string(name='Description'),
      expireTime?: long(name='ExpireTime'),
      legacy?: boolean(name='Legacy'),
      instanceId?: string(name='InstanceId'),
      internetEndpoint?: string(name='InternetEndpoint'),
      regionId?: string(name='RegionId'),
      intranetEndpoint?: string(name='IntranetEndpoint'),
      startTime?: long(name='StartTime'),
      resourceGroupId?: string(name='ResourceGroupId'),
      instanceStatus?: string(name='InstanceStatus'),
      licenseCode?: string(name='LicenseCode'),
      publicNetworkAccess?: boolean(name='PublicNetworkAccess'),
    }
  ](name='Instances'),
}

model DescribeInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstancesResponseBody(name='body'),
}

async function describeInstancesWithOptions(request: DescribeInstancesRequest, runtime: Util.RuntimeOptions): DescribeInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstances', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstances(request: DescribeInstancesRequest): DescribeInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstancesWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage'),
}

model DescribeRegionsResponseBody = {
  requestId?: string(name='RequestId'),
  regions?: [ 
    {
      regionEndpoint?: string(name='RegionEndpoint'),
      localName?: string(name='LocalName'),
      regionId?: string(name='RegionId'),
    }
  ](name='Regions'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRegions', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DetachHostAccountsFromUserRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  userId?: string(name='UserId'),
  hosts?: string(name='Hosts'),
}

model DetachHostAccountsFromUserResponseBody = {
  requestId?: string(name='RequestId'),
  results?: [ 
    {
      code?: string(name='Code'),
      message?: string(name='Message'),
      hostId?: string(name='HostId'),
      userId?: string(name='UserId'),
      hostAccounts?: [ 
        {
          code?: string(name='Code'),
          message?: string(name='Message'),
          hostAccountId?: string(name='HostAccountId'),
        }
      ](name='HostAccounts'),
    }
  ](name='Results'),
}

model DetachHostAccountsFromUserResponse = {
  headers: map[string]string(name='headers'),
  body: DetachHostAccountsFromUserResponseBody(name='body'),
}

async function detachHostAccountsFromUserWithOptions(request: DetachHostAccountsFromUserRequest, runtime: Util.RuntimeOptions): DetachHostAccountsFromUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DetachHostAccountsFromUser', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function detachHostAccountsFromUser(request: DetachHostAccountsFromUserRequest): DetachHostAccountsFromUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachHostAccountsFromUserWithOptions(request, runtime);
}

model DetachHostAccountsFromUserGroupRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  userGroupId?: string(name='UserGroupId'),
  hosts?: string(name='Hosts'),
}

model DetachHostAccountsFromUserGroupResponseBody = {
  requestId?: string(name='RequestId'),
  results?: [ 
    {
      code?: string(name='Code'),
      message?: string(name='Message'),
      hostId?: string(name='HostId'),
      userGroupId?: string(name='UserGroupId'),
      hostAccounts?: [ 
        {
          code?: string(name='Code'),
          message?: string(name='Message'),
          hostAccountId?: string(name='HostAccountId'),
        }
      ](name='HostAccounts'),
    }
  ](name='Results'),
}

model DetachHostAccountsFromUserGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DetachHostAccountsFromUserGroupResponseBody(name='body'),
}

async function detachHostAccountsFromUserGroupWithOptions(request: DetachHostAccountsFromUserGroupRequest, runtime: Util.RuntimeOptions): DetachHostAccountsFromUserGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DetachHostAccountsFromUserGroup', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function detachHostAccountsFromUserGroup(request: DetachHostAccountsFromUserGroupRequest): DetachHostAccountsFromUserGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachHostAccountsFromUserGroupWithOptions(request, runtime);
}

model DetachHostGroupAccountsFromUserRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  userId?: string(name='UserId'),
  hostGroups?: string(name='HostGroups'),
}

model DetachHostGroupAccountsFromUserResponseBody = {
  requestId?: string(name='RequestId'),
  results?: [ 
    {
      code?: string(name='Code'),
      message?: string(name='Message'),
      hostGroupId?: string(name='HostGroupId'),
      userId?: string(name='UserId'),
      hostAccountNames?: [ 
        {
          code?: string(name='Code'),
          message?: string(name='Message'),
          hostAccountName?: string(name='HostAccountName'),
        }
      ](name='HostAccountNames'),
    }
  ](name='Results'),
}

model DetachHostGroupAccountsFromUserResponse = {
  headers: map[string]string(name='headers'),
  body: DetachHostGroupAccountsFromUserResponseBody(name='body'),
}

async function detachHostGroupAccountsFromUserWithOptions(request: DetachHostGroupAccountsFromUserRequest, runtime: Util.RuntimeOptions): DetachHostGroupAccountsFromUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DetachHostGroupAccountsFromUser', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function detachHostGroupAccountsFromUser(request: DetachHostGroupAccountsFromUserRequest): DetachHostGroupAccountsFromUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachHostGroupAccountsFromUserWithOptions(request, runtime);
}

model DetachHostGroupAccountsFromUserGroupRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  userGroupId?: string(name='UserGroupId'),
  hostGroups?: string(name='HostGroups'),
}

model DetachHostGroupAccountsFromUserGroupResponseBody = {
  requestId?: string(name='RequestId'),
  results?: [ 
    {
      code?: string(name='Code'),
      message?: string(name='Message'),
      hostGroupId?: string(name='HostGroupId'),
      userGroupId?: string(name='UserGroupId'),
      hostAccountNames?: [ 
        {
          code?: string(name='Code'),
          message?: string(name='Message'),
          hostAccountName?: string(name='HostAccountName'),
        }
      ](name='HostAccountNames'),
    }
  ](name='Results'),
}

model DetachHostGroupAccountsFromUserGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DetachHostGroupAccountsFromUserGroupResponseBody(name='body'),
}

async function detachHostGroupAccountsFromUserGroupWithOptions(request: DetachHostGroupAccountsFromUserGroupRequest, runtime: Util.RuntimeOptions): DetachHostGroupAccountsFromUserGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DetachHostGroupAccountsFromUserGroup', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function detachHostGroupAccountsFromUserGroup(request: DetachHostGroupAccountsFromUserGroupRequest): DetachHostGroupAccountsFromUserGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachHostGroupAccountsFromUserGroupWithOptions(request, runtime);
}

model DisableInstancePublicAccessRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
}

model DisableInstancePublicAccessResponseBody = {
  instanceId?: string(name='InstanceId'),
  requestId?: string(name='RequestId'),
}

model DisableInstancePublicAccessResponse = {
  headers: map[string]string(name='headers'),
  body: DisableInstancePublicAccessResponseBody(name='body'),
}

async function disableInstancePublicAccessWithOptions(request: DisableInstancePublicAccessRequest, runtime: Util.RuntimeOptions): DisableInstancePublicAccessResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DisableInstancePublicAccess', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function disableInstancePublicAccess(request: DisableInstancePublicAccessRequest): DisableInstancePublicAccessResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableInstancePublicAccessWithOptions(request, runtime);
}

model EnableInstancePublicAccessRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
}

model EnableInstancePublicAccessResponseBody = {
  instanceId?: string(name='InstanceId'),
  requestId?: string(name='RequestId'),
}

model EnableInstancePublicAccessResponse = {
  headers: map[string]string(name='headers'),
  body: EnableInstancePublicAccessResponseBody(name='body'),
}

async function enableInstancePublicAccessWithOptions(request: EnableInstancePublicAccessRequest, runtime: Util.RuntimeOptions): EnableInstancePublicAccessResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('EnableInstancePublicAccess', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function enableInstancePublicAccess(request: EnableInstancePublicAccessRequest): EnableInstancePublicAccessResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableInstancePublicAccessWithOptions(request, runtime);
}

model GetHostRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  hostId?: string(name='HostId'),
}

model GetHostResponseBody = {
  requestId?: string(name='RequestId'),
  host?: {
    comment?: string(name='Comment'),
    activeAddressType?: string(name='ActiveAddressType'),
    hostPublicAddress?: string(name='HostPublicAddress'),
    hostName?: string(name='HostName'),
    source?: string(name='Source'),
    hostPrivateAddress?: string(name='HostPrivateAddress'),
    OSType?: string(name='OSType'),
    hostId?: string(name='HostId'),
    sourceInstanceState?: string(name='SourceInstanceState'),
    sourceInstanceId?: string(name='SourceInstanceId'),
    protocols?: [ 
      {
        hostFingerPrint?: string(name='HostFingerPrint'),
        port?: int32(name='Port'),
        protocolName?: string(name='ProtocolName'),
      }
    ](name='Protocols'),
  }(name='Host'),
}

model GetHostResponse = {
  headers: map[string]string(name='headers'),
  body: GetHostResponseBody(name='body'),
}

async function getHostWithOptions(request: GetHostRequest, runtime: Util.RuntimeOptions): GetHostResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetHost', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getHost(request: GetHostRequest): GetHostResponse {
  var runtime = new Util.RuntimeOptions{};
  return getHostWithOptions(request, runtime);
}

model GetHostAccountRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  hostAccountId?: string(name='HostAccountId'),
}

model GetHostAccountResponseBody = {
  requestId?: string(name='RequestId'),
  hostAccount?: {
    hasPassword?: boolean(name='HasPassword'),
    privateKeyFingerprint?: string(name='PrivateKeyFingerprint'),
    protocolName?: string(name='ProtocolName'),
    hostAccountName?: string(name='HostAccountName'),
    hostAccountId?: string(name='HostAccountId'),
    hostId?: string(name='HostId'),
  }(name='HostAccount'),
}

model GetHostAccountResponse = {
  headers: map[string]string(name='headers'),
  body: GetHostAccountResponseBody(name='body'),
}

async function getHostAccountWithOptions(request: GetHostAccountRequest, runtime: Util.RuntimeOptions): GetHostAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetHostAccount', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getHostAccount(request: GetHostAccountRequest): GetHostAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return getHostAccountWithOptions(request, runtime);
}

model GetHostGroupRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  hostGroupId?: string(name='HostGroupId'),
}

model GetHostGroupResponseBody = {
  requestId?: string(name='RequestId'),
  hostGroup?: {
    hostGroupId?: string(name='HostGroupId'),
    comment?: string(name='Comment'),
    hostGroupName?: string(name='HostGroupName'),
  }(name='HostGroup'),
}

model GetHostGroupResponse = {
  headers: map[string]string(name='headers'),
  body: GetHostGroupResponseBody(name='body'),
}

async function getHostGroupWithOptions(request: GetHostGroupRequest, runtime: Util.RuntimeOptions): GetHostGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetHostGroup', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getHostGroup(request: GetHostGroupRequest): GetHostGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return getHostGroupWithOptions(request, runtime);
}

model GetInstanceUpgradeInfoRequest {
  lang?: string(name='Lang'),
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
}

model GetInstanceUpgradeInfoResponseBody = {
  requestId?: string(name='RequestId'),
  instanceUpgradeInfo?: {
    upgradeMode?: string(name='UpgradeMode'),
    operable?: boolean(name='Operable'),
    aliUid?: long(name='AliUid'),
    latestStartTime?: long(name='LatestStartTime'),
    imageVersion?: string(name='ImageVersion'),
    instanceId?: string(name='InstanceId'),
    periodInterval?: int32(name='PeriodInterval'),
    upgradeStartTime?: long(name='UpgradeStartTime'),
    upgradeEndTime?: long(name='UpgradeEndTime'),
    candidatePeriodList?: [ 
      {
        candidateStartTime?: long(name='CandidateStartTime'),
        candidateEndTime?: long(name='CandidateEndTime'),
      }
    ](name='CandidatePeriodList'),
    invalidPeriodList?: [ 
      {
        invalidEndTime?: long(name='InvalidEndTime'),
        invalidStartTime?: long(name='InvalidStartTime'),
      }
    ](name='InvalidPeriodList'),
  }(name='InstanceUpgradeInfo'),
}

model GetInstanceUpgradeInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetInstanceUpgradeInfoResponseBody(name='body'),
}

async function getInstanceUpgradeInfoWithOptions(request: GetInstanceUpgradeInfoRequest, runtime: Util.RuntimeOptions): GetInstanceUpgradeInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetInstanceUpgradeInfo', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getInstanceUpgradeInfo(request: GetInstanceUpgradeInfoRequest): GetInstanceUpgradeInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceUpgradeInfoWithOptions(request, runtime);
}

model GetUserRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  userId?: string(name='UserId'),
}

model GetUserResponseBody = {
  requestId?: string(name='RequestId'),
  user?: {
    displayName?: string(name='DisplayName'),
    comment?: string(name='Comment'),
    email?: string(name='Email'),
    mobile?: string(name='Mobile'),
    mobileCountryCode?: string(name='MobileCountryCode'),
    userId?: string(name='UserId'),
    source?: string(name='Source'),
    userName?: string(name='UserName'),
    sourceUserId?: string(name='SourceUserId'),
    userState?: [ string ](name='UserState'),
  }(name='User'),
}

model GetUserResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserResponseBody(name='body'),
}

async function getUserWithOptions(request: GetUserRequest, runtime: Util.RuntimeOptions): GetUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetUser', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getUser(request: GetUserRequest): GetUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUserWithOptions(request, runtime);
}

model GetUserGroupRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  userGroupId?: string(name='UserGroupId'),
}

model GetUserGroupResponseBody = {
  requestId?: string(name='RequestId'),
  userGroup?: {
    userGroupName?: string(name='UserGroupName'),
    comment?: string(name='Comment'),
    userGroupId?: string(name='UserGroupId'),
  }(name='UserGroup'),
}

model GetUserGroupResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserGroupResponseBody(name='body'),
}

async function getUserGroupWithOptions(request: GetUserGroupRequest, runtime: Util.RuntimeOptions): GetUserGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetUserGroup', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getUserGroup(request: GetUserGroupRequest): GetUserGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUserGroupWithOptions(request, runtime);
}

model ListHostAccountsRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  hostId?: string(name='HostId'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
  hostAccountName?: string(name='HostAccountName'),
  protocolName?: string(name='ProtocolName'),
}

model ListHostAccountsResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  hostAccounts?: [ 
    {
      hasPassword?: boolean(name='HasPassword'),
      privateKeyFingerprint?: string(name='PrivateKeyFingerprint'),
      protocolName?: string(name='ProtocolName'),
      hostAccountName?: string(name='HostAccountName'),
      hostAccountId?: string(name='HostAccountId'),
      hostId?: string(name='HostId'),
    }
  ](name='HostAccounts'),
}

model ListHostAccountsResponse = {
  headers: map[string]string(name='headers'),
  body: ListHostAccountsResponseBody(name='body'),
}

async function listHostAccountsWithOptions(request: ListHostAccountsRequest, runtime: Util.RuntimeOptions): ListHostAccountsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListHostAccounts', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listHostAccounts(request: ListHostAccountsRequest): ListHostAccountsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listHostAccountsWithOptions(request, runtime);
}

model ListHostAccountsForUserRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  userId?: string(name='UserId'),
  hostId?: string(name='HostId'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
  hostAccountName?: string(name='HostAccountName'),
}

model ListHostAccountsForUserResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  hostAccounts?: [ 
    {
      hostAccountName?: string(name='HostAccountName'),
      hostAccountId?: string(name='HostAccountId'),
      isAuthorized?: boolean(name='IsAuthorized'),
      protocolName?: string(name='ProtocolName'),
      hostId?: string(name='HostId'),
    }
  ](name='HostAccounts'),
}

model ListHostAccountsForUserResponse = {
  headers: map[string]string(name='headers'),
  body: ListHostAccountsForUserResponseBody(name='body'),
}

async function listHostAccountsForUserWithOptions(request: ListHostAccountsForUserRequest, runtime: Util.RuntimeOptions): ListHostAccountsForUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListHostAccountsForUser', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listHostAccountsForUser(request: ListHostAccountsForUserRequest): ListHostAccountsForUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return listHostAccountsForUserWithOptions(request, runtime);
}

model ListHostAccountsForUserGroupRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  userGroupId?: string(name='UserGroupId'),
  hostId?: string(name='HostId'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
  hostAccountName?: string(name='HostAccountName'),
}

model ListHostAccountsForUserGroupResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  hostAccounts?: [ 
    {
      hostAccountName?: string(name='HostAccountName'),
      hostAccountId?: string(name='HostAccountId'),
      isAuthorized?: boolean(name='IsAuthorized'),
      protocolName?: string(name='ProtocolName'),
      hostId?: string(name='HostId'),
    }
  ](name='HostAccounts'),
}

model ListHostAccountsForUserGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ListHostAccountsForUserGroupResponseBody(name='body'),
}

async function listHostAccountsForUserGroupWithOptions(request: ListHostAccountsForUserGroupRequest, runtime: Util.RuntimeOptions): ListHostAccountsForUserGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListHostAccountsForUserGroup', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listHostAccountsForUserGroup(request: ListHostAccountsForUserGroupRequest): ListHostAccountsForUserGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return listHostAccountsForUserGroupWithOptions(request, runtime);
}

model ListHostGroupAccountNamesForUserRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  userId?: string(name='UserId'),
  hostGroupId?: string(name='HostGroupId'),
}

model ListHostGroupAccountNamesForUserResponseBody = {
  requestId?: string(name='RequestId'),
  hostAccountNames?: [ string ](name='HostAccountNames'),
}

model ListHostGroupAccountNamesForUserResponse = {
  headers: map[string]string(name='headers'),
  body: ListHostGroupAccountNamesForUserResponseBody(name='body'),
}

async function listHostGroupAccountNamesForUserWithOptions(request: ListHostGroupAccountNamesForUserRequest, runtime: Util.RuntimeOptions): ListHostGroupAccountNamesForUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListHostGroupAccountNamesForUser', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listHostGroupAccountNamesForUser(request: ListHostGroupAccountNamesForUserRequest): ListHostGroupAccountNamesForUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return listHostGroupAccountNamesForUserWithOptions(request, runtime);
}

model ListHostGroupAccountNamesForUserGroupRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  userGroupId?: string(name='UserGroupId'),
  hostGroupId?: string(name='HostGroupId'),
}

model ListHostGroupAccountNamesForUserGroupResponseBody = {
  requestId?: string(name='RequestId'),
  hostAccountNames?: [ string ](name='HostAccountNames'),
}

model ListHostGroupAccountNamesForUserGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ListHostGroupAccountNamesForUserGroupResponseBody(name='body'),
}

async function listHostGroupAccountNamesForUserGroupWithOptions(request: ListHostGroupAccountNamesForUserGroupRequest, runtime: Util.RuntimeOptions): ListHostGroupAccountNamesForUserGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListHostGroupAccountNamesForUserGroup', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listHostGroupAccountNamesForUserGroup(request: ListHostGroupAccountNamesForUserGroupRequest): ListHostGroupAccountNamesForUserGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return listHostGroupAccountNamesForUserGroupWithOptions(request, runtime);
}

model ListHostGroupsRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
  hostGroupName?: string(name='HostGroupName'),
}

model ListHostGroupsResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  hostGroups?: [ 
    {
      memberCount?: int32(name='MemberCount'),
      hostGroupId?: string(name='HostGroupId'),
      comment?: string(name='Comment'),
      hostGroupName?: string(name='HostGroupName'),
    }
  ](name='HostGroups'),
}

model ListHostGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListHostGroupsResponseBody(name='body'),
}

async function listHostGroupsWithOptions(request: ListHostGroupsRequest, runtime: Util.RuntimeOptions): ListHostGroupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListHostGroups', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listHostGroups(request: ListHostGroupsRequest): ListHostGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listHostGroupsWithOptions(request, runtime);
}

model ListHostGroupsForUserRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  mode?: string(name='Mode'),
  userId?: string(name='UserId'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
  hostGroupName?: string(name='HostGroupName'),
}

model ListHostGroupsForUserResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  hostGroups?: [ 
    {
      hostGroupId?: string(name='HostGroupId'),
      comment?: string(name='Comment'),
      hostGroupName?: string(name='HostGroupName'),
    }
  ](name='HostGroups'),
}

model ListHostGroupsForUserResponse = {
  headers: map[string]string(name='headers'),
  body: ListHostGroupsForUserResponseBody(name='body'),
}

async function listHostGroupsForUserWithOptions(request: ListHostGroupsForUserRequest, runtime: Util.RuntimeOptions): ListHostGroupsForUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListHostGroupsForUser', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listHostGroupsForUser(request: ListHostGroupsForUserRequest): ListHostGroupsForUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return listHostGroupsForUserWithOptions(request, runtime);
}

model ListHostGroupsForUserGroupRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  mode?: string(name='Mode'),
  userGroupId?: string(name='UserGroupId'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
  hostGroupName?: string(name='HostGroupName'),
}

model ListHostGroupsForUserGroupResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  hostGroups?: [ 
    {
      hostGroupId?: string(name='HostGroupId'),
      comment?: string(name='Comment'),
      hostGroupName?: string(name='HostGroupName'),
    }
  ](name='HostGroups'),
}

model ListHostGroupsForUserGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ListHostGroupsForUserGroupResponseBody(name='body'),
}

async function listHostGroupsForUserGroupWithOptions(request: ListHostGroupsForUserGroupRequest, runtime: Util.RuntimeOptions): ListHostGroupsForUserGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListHostGroupsForUserGroup', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listHostGroupsForUserGroup(request: ListHostGroupsForUserGroupRequest): ListHostGroupsForUserGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return listHostGroupsForUserGroupWithOptions(request, runtime);
}

model ListHostsRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
  OSType?: string(name='OSType'),
  hostName?: string(name='HostName'),
  hostAddress?: string(name='HostAddress'),
  source?: string(name='Source'),
  sourceInstanceId?: string(name='SourceInstanceId'),
  sourceInstanceState?: string(name='SourceInstanceState'),
  hostGroupId?: string(name='HostGroupId'),
}

model ListHostsResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  hosts?: [ 
    {
      comment?: string(name='Comment'),
      activeAddressType?: string(name='ActiveAddressType'),
      hostPublicAddress?: string(name='HostPublicAddress'),
      hostName?: string(name='HostName'),
      hostAccountCount?: int32(name='HostAccountCount'),
      source?: string(name='Source'),
      hostPrivateAddress?: string(name='HostPrivateAddress'),
      OSType?: string(name='OSType'),
      hostId?: string(name='HostId'),
      sourceInstanceState?: string(name='SourceInstanceState'),
      sourceInstanceId?: string(name='SourceInstanceId'),
    }
  ](name='Hosts'),
}

model ListHostsResponse = {
  headers: map[string]string(name='headers'),
  body: ListHostsResponseBody(name='body'),
}

async function listHostsWithOptions(request: ListHostsRequest, runtime: Util.RuntimeOptions): ListHostsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListHosts', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listHosts(request: ListHostsRequest): ListHostsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listHostsWithOptions(request, runtime);
}

model ListHostsForUserRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  mode?: string(name='Mode'),
  userId?: string(name='UserId'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
  hostAddress?: string(name='HostAddress'),
  hostName?: string(name='HostName'),
  OSType?: string(name='OSType'),
}

model ListHostsForUserResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  hosts?: [ 
    {
      comment?: string(name='Comment'),
      activeAddressType?: string(name='ActiveAddressType'),
      hostPublicAddress?: string(name='HostPublicAddress'),
      hostName?: string(name='HostName'),
      hostPrivateAddress?: string(name='HostPrivateAddress'),
      OSType?: string(name='OSType'),
      hostId?: string(name='HostId'),
    }
  ](name='Hosts'),
}

model ListHostsForUserResponse = {
  headers: map[string]string(name='headers'),
  body: ListHostsForUserResponseBody(name='body'),
}

async function listHostsForUserWithOptions(request: ListHostsForUserRequest, runtime: Util.RuntimeOptions): ListHostsForUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListHostsForUser', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listHostsForUser(request: ListHostsForUserRequest): ListHostsForUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return listHostsForUserWithOptions(request, runtime);
}

model ListHostsForUserGroupRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  mode?: string(name='Mode'),
  userGroupId?: string(name='UserGroupId'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
  hostAddress?: string(name='HostAddress'),
  hostName?: string(name='HostName'),
  OSType?: string(name='OSType'),
}

model ListHostsForUserGroupResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  hosts?: [ 
    {
      comment?: string(name='Comment'),
      activeAddressType?: string(name='ActiveAddressType'),
      hostPublicAddress?: string(name='HostPublicAddress'),
      hostName?: string(name='HostName'),
      hostPrivateAddress?: string(name='HostPrivateAddress'),
      OSType?: string(name='OSType'),
      hostId?: string(name='HostId'),
    }
  ](name='Hosts'),
}

model ListHostsForUserGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ListHostsForUserGroupResponseBody(name='body'),
}

async function listHostsForUserGroupWithOptions(request: ListHostsForUserGroupRequest, runtime: Util.RuntimeOptions): ListHostsForUserGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListHostsForUserGroup', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listHostsForUserGroup(request: ListHostsForUserGroupRequest): ListHostsForUserGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return listHostsForUserGroupWithOptions(request, runtime);
}

model ListTagKeysRequest {
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model ListTagKeysResponseBody = {
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  tagKeys?: [ 
    {
      tagCount?: int32(name='TagCount'),
      tagKey?: string(name='TagKey'),
    }
  ](name='TagKeys'),
}

model ListTagKeysResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagKeysResponseBody(name='body'),
}

async function listTagKeysWithOptions(request: ListTagKeysRequest, runtime: Util.RuntimeOptions): ListTagKeysResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTagKeys', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTagKeys(request: ListTagKeysRequest): ListTagKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagKeysWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  nextToken?: string(name='NextToken'),
  resourceId?: [ string ](name='ResourceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: [ 
    {
      tagValue?: string(name='TagValue'),
      resourceType?: string(name='ResourceType'),
      resourceId?: string(name='ResourceId'),
      tagKey?: string(name='TagKey'),
    }
  ](name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTagResources', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ListUserGroupsRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
  userGroupName?: string(name='UserGroupName'),
}

model ListUserGroupsResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  userGroups?: [ 
    {
      userGroupName?: string(name='UserGroupName'),
      memberCount?: int32(name='MemberCount'),
      comment?: string(name='Comment'),
      userGroupId?: string(name='UserGroupId'),
    }
  ](name='UserGroups'),
}

model ListUserGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListUserGroupsResponseBody(name='body'),
}

async function listUserGroupsWithOptions(request: ListUserGroupsRequest, runtime: Util.RuntimeOptions): ListUserGroupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListUserGroups', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listUserGroups(request: ListUserGroupsRequest): ListUserGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUserGroupsWithOptions(request, runtime);
}

model ListUsersRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
  userName?: string(name='UserName'),
  displayName?: string(name='DisplayName'),
  source?: string(name='Source'),
  mobile?: string(name='Mobile'),
  userState?: string(name='UserState'),
  sourceUserId?: string(name='SourceUserId'),
  userGroupId?: string(name='UserGroupId'),
}

model ListUsersResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  users?: [ 
    {
      displayName?: string(name='DisplayName'),
      email?: string(name='Email'),
      comment?: string(name='Comment'),
      mobileCountryCode?: string(name='MobileCountryCode'),
      mobile?: string(name='Mobile'),
      userId?: string(name='UserId'),
      source?: string(name='Source'),
      userName?: string(name='UserName'),
      sourceUserId?: string(name='SourceUserId'),
      userState?: [ string ](name='UserState'),
    }
  ](name='Users'),
}

model ListUsersResponse = {
  headers: map[string]string(name='headers'),
  body: ListUsersResponseBody(name='body'),
}

async function listUsersWithOptions(request: ListUsersRequest, runtime: Util.RuntimeOptions): ListUsersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListUsers', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listUsers(request: ListUsersRequest): ListUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUsersWithOptions(request, runtime);
}

model LockUsersRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  userIds?: string(name='UserIds'),
}

model LockUsersResponseBody = {
  requestId?: string(name='RequestId'),
  results?: [ 
    {
      code?: string(name='Code'),
      message?: string(name='Message'),
      userId?: string(name='UserId'),
    }
  ](name='Results'),
}

model LockUsersResponse = {
  headers: map[string]string(name='headers'),
  body: LockUsersResponseBody(name='body'),
}

async function lockUsersWithOptions(request: LockUsersRequest, runtime: Util.RuntimeOptions): LockUsersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('LockUsers', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function lockUsers(request: LockUsersRequest): LockUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return lockUsersWithOptions(request, runtime);
}

model ModifyHostRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  hostId?: string(name='HostId'),
  hostPrivateAddress?: string(name='HostPrivateAddress'),
  hostPublicAddress?: string(name='HostPublicAddress'),
  OSType?: string(name='OSType'),
  hostName?: string(name='HostName'),
  comment?: string(name='Comment'),
}

model ModifyHostResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyHostResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyHostResponseBody(name='body'),
}

async function modifyHostWithOptions(request: ModifyHostRequest, runtime: Util.RuntimeOptions): ModifyHostResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyHost', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyHost(request: ModifyHostRequest): ModifyHostResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyHostWithOptions(request, runtime);
}

model ModifyHostAccountRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  hostAccountId?: string(name='HostAccountId'),
  hostAccountName?: string(name='HostAccountName'),
  password?: string(name='Password'),
  privateKey?: string(name='PrivateKey'),
  passPhrase?: string(name='PassPhrase'),
}

model ModifyHostAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyHostAccountResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyHostAccountResponseBody(name='body'),
}

async function modifyHostAccountWithOptions(request: ModifyHostAccountRequest, runtime: Util.RuntimeOptions): ModifyHostAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyHostAccount', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyHostAccount(request: ModifyHostAccountRequest): ModifyHostAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyHostAccountWithOptions(request, runtime);
}

model ModifyHostGroupRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  hostGroupId?: string(name='HostGroupId'),
  hostGroupName?: string(name='HostGroupName'),
  comment?: string(name='Comment'),
}

model ModifyHostGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyHostGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyHostGroupResponseBody(name='body'),
}

async function modifyHostGroupWithOptions(request: ModifyHostGroupRequest, runtime: Util.RuntimeOptions): ModifyHostGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyHostGroup', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyHostGroup(request: ModifyHostGroupRequest): ModifyHostGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyHostGroupWithOptions(request, runtime);
}

model ModifyHostsActiveAddressTypeRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  hostIds?: string(name='HostIds'),
  activeAddressType?: string(name='ActiveAddressType'),
}

model ModifyHostsActiveAddressTypeResponseBody = {
  requestId?: string(name='RequestId'),
  results?: [ 
    {
      code?: string(name='Code'),
      message?: string(name='Message'),
      hostId?: string(name='HostId'),
    }
  ](name='Results'),
}

model ModifyHostsActiveAddressTypeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyHostsActiveAddressTypeResponseBody(name='body'),
}

async function modifyHostsActiveAddressTypeWithOptions(request: ModifyHostsActiveAddressTypeRequest, runtime: Util.RuntimeOptions): ModifyHostsActiveAddressTypeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyHostsActiveAddressType', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyHostsActiveAddressType(request: ModifyHostsActiveAddressTypeRequest): ModifyHostsActiveAddressTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyHostsActiveAddressTypeWithOptions(request, runtime);
}

model ModifyHostsPortRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  hostIds?: string(name='HostIds'),
  protocolName?: string(name='ProtocolName'),
  port?: string(name='Port'),
}

model ModifyHostsPortResponseBody = {
  requestId?: string(name='RequestId'),
  results?: [ 
    {
      code?: string(name='Code'),
      message?: string(name='Message'),
      hostId?: string(name='HostId'),
    }
  ](name='Results'),
}

model ModifyHostsPortResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyHostsPortResponseBody(name='body'),
}

async function modifyHostsPortWithOptions(request: ModifyHostsPortRequest, runtime: Util.RuntimeOptions): ModifyHostsPortResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyHostsPort', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyHostsPort(request: ModifyHostsPortRequest): ModifyHostsPortResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyHostsPortWithOptions(request, runtime);
}

model ModifyInstanceAttributeRequest {
  instanceId?: string(name='InstanceId'),
  description?: string(name='Description'),
  regionId?: string(name='RegionId'),
}

model ModifyInstanceAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceAttributeResponseBody(name='body'),
}

async function modifyInstanceAttributeWithOptions(request: ModifyInstanceAttributeRequest, runtime: Util.RuntimeOptions): ModifyInstanceAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyInstanceAttribute', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyInstanceAttribute(request: ModifyInstanceAttributeRequest): ModifyInstanceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceAttributeWithOptions(request, runtime);
}

model ModifyInstanceUpgradePeriodRequest {
  lang?: string(name='Lang'),
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  upgradeStartTime?: string(name='UpgradeStartTime'),
  upgradeMode?: string(name='UpgradeMode'),
}

model ModifyInstanceUpgradePeriodResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceUpgradePeriodResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceUpgradePeriodResponseBody(name='body'),
}

async function modifyInstanceUpgradePeriodWithOptions(request: ModifyInstanceUpgradePeriodRequest, runtime: Util.RuntimeOptions): ModifyInstanceUpgradePeriodResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyInstanceUpgradePeriod', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyInstanceUpgradePeriod(request: ModifyInstanceUpgradePeriodRequest): ModifyInstanceUpgradePeriodResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceUpgradePeriodWithOptions(request, runtime);
}

model ModifyUserRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  userId?: string(name='UserId'),
  password?: string(name='Password'),
  displayName?: string(name='DisplayName'),
  comment?: string(name='Comment'),
  email?: string(name='Email'),
  mobile?: string(name='Mobile'),
  mobileCountryCode?: string(name='MobileCountryCode'),
}

model ModifyUserResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyUserResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyUserResponseBody(name='body'),
}

async function modifyUserWithOptions(request: ModifyUserRequest, runtime: Util.RuntimeOptions): ModifyUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyUser', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyUser(request: ModifyUserRequest): ModifyUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyUserWithOptions(request, runtime);
}

model ModifyUserGroupRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  userGroupId?: string(name='UserGroupId'),
  userGroupName?: string(name='UserGroupName'),
  comment?: string(name='Comment'),
}

model ModifyUserGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyUserGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyUserGroupResponseBody(name='body'),
}

async function modifyUserGroupWithOptions(request: ModifyUserGroupRequest, runtime: Util.RuntimeOptions): ModifyUserGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyUserGroup', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyUserGroup(request: ModifyUserGroupRequest): ModifyUserGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyUserGroupWithOptions(request, runtime);
}

model MoveResourceGroupRequest {
  resourceId?: string(name='ResourceId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceType?: string(name='ResourceType'),
  regionId?: string(name='RegionId'),
}

model MoveResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model MoveResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: MoveResourceGroupResponseBody(name='body'),
}

async function moveResourceGroupWithOptions(request: MoveResourceGroupRequest, runtime: Util.RuntimeOptions): MoveResourceGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('MoveResourceGroup', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function moveResourceGroup(request: MoveResourceGroupRequest): MoveResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return moveResourceGroupWithOptions(request, runtime);
}

model RemoveHostsFromGroupRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  hostGroupId?: string(name='HostGroupId'),
  hostIds?: string(name='HostIds'),
}

model RemoveHostsFromGroupResponseBody = {
  requestId?: string(name='RequestId'),
  results?: [ 
    {
      code?: string(name='Code'),
      message?: string(name='Message'),
      hostGroupId?: string(name='HostGroupId'),
      hostId?: string(name='HostId'),
    }
  ](name='Results'),
}

model RemoveHostsFromGroupResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveHostsFromGroupResponseBody(name='body'),
}

async function removeHostsFromGroupWithOptions(request: RemoveHostsFromGroupRequest, runtime: Util.RuntimeOptions): RemoveHostsFromGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveHostsFromGroup', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeHostsFromGroup(request: RemoveHostsFromGroupRequest): RemoveHostsFromGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeHostsFromGroupWithOptions(request, runtime);
}

model RemoveUsersFromGroupRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  userGroupId?: string(name='UserGroupId'),
  userIds?: string(name='UserIds'),
}

model RemoveUsersFromGroupResponseBody = {
  requestId?: string(name='RequestId'),
  results?: [ 
    {
      code?: string(name='Code'),
      message?: string(name='Message'),
      userGroupId?: string(name='UserGroupId'),
      userId?: string(name='UserId'),
    }
  ](name='Results'),
}

model RemoveUsersFromGroupResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveUsersFromGroupResponseBody(name='body'),
}

async function removeUsersFromGroupWithOptions(request: RemoveUsersFromGroupRequest, runtime: Util.RuntimeOptions): RemoveUsersFromGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveUsersFromGroup', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeUsersFromGroup(request: RemoveUsersFromGroupRequest): RemoveUsersFromGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeUsersFromGroupWithOptions(request, runtime);
}

model ResetHostAccountCredentialRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  hostAccountId?: string(name='HostAccountId'),
  credentialType?: string(name='CredentialType'),
}

model ResetHostAccountCredentialResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResetHostAccountCredentialResponse = {
  headers: map[string]string(name='headers'),
  body: ResetHostAccountCredentialResponseBody(name='body'),
}

async function resetHostAccountCredentialWithOptions(request: ResetHostAccountCredentialRequest, runtime: Util.RuntimeOptions): ResetHostAccountCredentialResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ResetHostAccountCredential', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function resetHostAccountCredential(request: ResetHostAccountCredentialRequest): ResetHostAccountCredentialResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetHostAccountCredentialWithOptions(request, runtime);
}

model StartInstanceRequest {
  instanceId?: string(name='InstanceId'),
  vswitchId?: string(name='VswitchId'),
  regionId?: string(name='RegionId'),
  securityGroupIds?: [ string ](name='SecurityGroupIds'),
}

model StartInstanceResponseBody = {
  instanceId?: string(name='InstanceId'),
  requestId?: string(name='RequestId'),
}

model StartInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: StartInstanceResponseBody(name='body'),
}

async function startInstanceWithOptions(request: StartInstanceRequest, runtime: Util.RuntimeOptions): StartInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartInstance', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startInstance(request: StartInstanceRequest): StartInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return startInstanceWithOptions(request, runtime);
}

model TagResourcesRequest {
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  resourceId?: [ string ](name='ResourceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TagResources', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UnlockUsersRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  userIds?: string(name='UserIds'),
}

model UnlockUsersResponseBody = {
  requestId?: string(name='RequestId'),
  results?: [ 
    {
      code?: string(name='Code'),
      message?: string(name='Message'),
      userId?: string(name='UserId'),
    }
  ](name='Results'),
}

model UnlockUsersResponse = {
  headers: map[string]string(name='headers'),
  body: UnlockUsersResponseBody(name='body'),
}

async function unlockUsersWithOptions(request: UnlockUsersRequest, runtime: Util.RuntimeOptions): UnlockUsersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UnlockUsers', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function unlockUsers(request: UnlockUsersRequest): UnlockUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return unlockUsersWithOptions(request, runtime);
}

model UntagResourcesRequest {
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  all?: boolean(name='All'),
  resourceId?: [ string ](name='ResourceId'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UntagResources', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model UpgradeInstanceImageVersionRequest {
  lang?: string(name='Lang'),
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
}

model UpgradeInstanceImageVersionResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpgradeInstanceImageVersionResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeInstanceImageVersionResponseBody(name='body'),
}

async function upgradeInstanceImageVersionWithOptions(request: UpgradeInstanceImageVersionRequest, runtime: Util.RuntimeOptions): UpgradeInstanceImageVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpgradeInstanceImageVersion', '2019-12-09', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function upgradeInstanceImageVersion(request: UpgradeInstanceImageVersionRequest): UpgradeInstanceImageVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeInstanceImageVersionWithOptions(request, runtime);
}

