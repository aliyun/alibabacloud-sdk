/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('qktest', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model A {
  a?: string(name='A', description='a'),
}

model CompleteMultipartUpload {
  part?: [
    Part
  ](name='Part', description='description'),
}

model Part {
  ETag?: string(name='ETag', description='description'),
  lastModified?: string(name='LastModified', description='description'),
  partNumber?: long(name='PartNumber', description='description'),
  size?: long(name='Size', description='description'),
}

model ListTestBooksRequest {
  filter?: string(name='Filter', description='查询过滤参数，多个过滤参数之间是且的关系。例如:过滤实例名称为i-a123、i-b123，且实例状态为Stopped：&Filter.1.Name=InstanceName&Filter.1.Value.1=i-a123&Filter.1.Value.2=i-b123&Filter.2.Name=Status&Filter.2.Value=Stopped。'),
  maxResults?: int32(name='MaxResults', description='返回结果的最大个数。'),
  nextToken?: string(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  testBookIds?: [ string ](name='TestBookIds'),
}

model ListTestBooksResponseBody = {
  nextToken?: int32(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  requestId?: string(name='RequestId', description='Id of the request'),
  testBooks?: [ 
    {
      createTime?: string(name='CreateTime', description='创建时间'),
      resourceGroupId?: string(name='ResourceGroupId', description='资源组ID'),
      testBookId?: string(name='TestBookId', description='资源一级ID'),
      testBookName?: string(name='TestBookName', description='资源名称'),
    }
  ](name='TestBooks', description='数组，返回示例目录。'),
  totalCount?: int32(name='TotalCount', description='总记录数。'),
}

model ListTestBooksResponse = {
  headers: map[string]string(name='headers'),
  body: ListTestBooksResponseBody(name='body'),
}

async function listTestBooksWithOptions(request: ListTestBooksRequest, runtime: Util.RuntimeOptions): ListTestBooksResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTestBooks',
    version = '2021-09-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTestBooks(request: ListTestBooksRequest): ListTestBooksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTestBooksWithOptions(request, runtime);
}

