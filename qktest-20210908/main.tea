/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('qktest', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model A {
  a?: string(name='A', description='a'),
}

model CompleteMultipartUpload {
  part?: [
    Part
  ](name='Part', description='description'),
}

model Part {
  ETag?: string(name='ETag', description='description'),
  lastModified?: string(name='LastModified', description='description'),
  partNumber?: long(name='PartNumber', description='description'),
  size?: long(name='Size', description='description'),
}

model GetAsyncErrorRequestStatResultRequest {
  dbName?: string(name='DbName'),
  end?: long(name='End'),
  instanceId?: string(name='InstanceId'),
  nodeId?: string(name='NodeId'),
  sqlIdList?: string(name='SqlIdList'),
  start?: long(name='Start'),
}

model GetAsyncErrorRequestStatResultResponseBody = {
  code?: long(name='Code'),
  data?: {
    complete?: boolean(name='complete'),
    fail?: boolean(name='fail'),
    isFinish?: boolean(name='isFinish'),
    result?: {
      stat?: [ map[string]DataResultValue ](name='stat')
    }(name='result'),
    resultId?: string(name='resultId'),
    state?: string(name='state'),
    timestamp?: long(name='timestamp'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetAsyncErrorRequestStatResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetAsyncErrorRequestStatResultResponseBody(name='body'),
}

async function getAsyncErrorRequestStatResultWithOptions(request: GetAsyncErrorRequestStatResultRequest, runtime: Util.RuntimeOptions): GetAsyncErrorRequestStatResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dbName)) {
    query['DbName'] = request.dbName;
  }
  if (!Util.isUnset(request.end)) {
    query['End'] = request.end;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.sqlIdList)) {
    query['SqlIdList'] = request.sqlIdList;
  }
  if (!Util.isUnset(request.start)) {
    query['Start'] = request.start;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAsyncErrorRequestStatResult',
    version = '2021-09-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAsyncErrorRequestStatResult(request: GetAsyncErrorRequestStatResultRequest): GetAsyncErrorRequestStatResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAsyncErrorRequestStatResultWithOptions(request, runtime);
}

model HsfWithMultiParamRequest {
  address?: {
    code?: long(name='code'),
    name?: string(name='name'),
    size?: string(name='size'),
    white?: boolean(name='white'),
  }(name='address'),
  area?: {
    address?: {
      code?: long(name='code'),
      name?: string(name='name'),
      size?: string(name='size'),
      white?: boolean(name='white'),
    }(name='address'),
    addressList?: [ 
      {
        code?: long(name='code'),
        name?: string(name='name'),
        size?: string(name='size'),
        white?: boolean(name='white'),
      }
    ](name='addressList'),
    arrAddr?: [ 
      {
        code?: int32(name='code'),
        name?: string(name='name'),
        size?: string(name='size'),
        white?: boolean(name='white'),
      }
    ](name='arrAddr'),
    arrInt?: [ int32 ](name='arrInt'),
    id?: long(name='id'),
    listStr?: [ string ](name='listStr'),
    mapAddr?: map[string]AreaMapAddrValue(name='mapAddr'),
    mapStr?: map[string]string(name='mapStr'),
    requestId?: string(name='requestId'),
  }(name='area'),
  test2?: string(name='test2'),
}

model HsfWithMultiParamResponse = {
  headers: map[string]string(name='headers'),
  body: string(name='body'),
}

async function hsfWithMultiParamWithOptions(request: HsfWithMultiParamRequest, runtime: Util.RuntimeOptions): HsfWithMultiParamResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HsfWithMultiParam',
    version = '2021-09-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'string',
  };
  return callApi(params, req, runtime);
}

async function hsfWithMultiParam(request: HsfWithMultiParamRequest): HsfWithMultiParamResponse {
  var runtime = new Util.RuntimeOptions{};
  return hsfWithMultiParamWithOptions(request, runtime);
}

model ListTestBooksRequest {
  filter?: string(name='Filter', description='查询过滤参数，多个过滤参数之间是且的关系。例如:过滤实例名称为i-a123、i-b123，且实例状态为Stopped：&Filter.1.Name=InstanceName&Filter.1.Value.1=i-a123&Filter.1.Value.2=i-b123&Filter.2.Name=Status&Filter.2.Value=Stopped。'),
  maxResults?: int32(name='MaxResults', description='返回结果的最大个数。'),
  nextToken?: string(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  testBookIds?: [ string ](name='TestBookIds'),
}

model ListTestBooksResponseBody = {
  nextToken?: int32(name='NextToken', description='当总结果个数大于MaxResults时，用于翻页的token。'),
  requestId?: string(name='RequestId', description='Id of the request'),
  testBooks?: [ 
    {
      createTime?: string(name='CreateTime', description='创建时间'),
      resourceGroupId?: string(name='ResourceGroupId', description='资源组ID'),
      testBookId?: string(name='TestBookId', description='资源一级ID'),
      testBookName?: string(name='TestBookName', description='资源名称'),
    }
  ](name='TestBooks', description='数组，返回示例目录。'),
  totalCount?: int32(name='TotalCount', description='总记录数。'),
}

model ListTestBooksResponse = {
  headers: map[string]string(name='headers'),
  body: ListTestBooksResponseBody(name='body'),
}

async function listTestBooksWithOptions(request: ListTestBooksRequest, runtime: Util.RuntimeOptions): ListTestBooksResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTestBooks',
    version = '2021-09-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTestBooks(request: ListTestBooksRequest): ListTestBooksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTestBooksWithOptions(request, runtime);
}

model MapTestRequest {
  map?: map[string]string(name='Map'),
}

model MapTestResponseBody = {
  requestid?: map[string]any(name='Requestid'),
}

model MapTestResponse = {
  headers: map[string]string(name='headers'),
  body: MapTestResponseBody(name='body'),
}

async function mapTestWithOptions(request: MapTestRequest, runtime: Util.RuntimeOptions): MapTestResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'MapTest',
    version = '2021-09-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function mapTest(request: MapTestRequest): MapTestResponse {
  var runtime = new Util.RuntimeOptions{};
  return mapTestWithOptions(request, runtime);
}

model DataResultValue = {
  sqlId?: string(name='sqlId'),
  instanceId?: string(name='instanceId'),
  count?: int32(name='count'),
}

model AreaMapAddrValue = {
  code?: long(name='code'),
  name?: string(name='name'),
  white?: boolean(name='white'),
  size?: string(name='size'),
}

