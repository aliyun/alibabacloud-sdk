/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'OssSddp';
  @version = '2024-02-22';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model GetSddpVersionRequest {
  clientToken?: string(name='ClientToken', position='Query'),
}

model GetSddpVersionResponseBody = {
  content?: int32(name='Content'),
  requestId?: string(name='RequestId'),
}

model GetSddpVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSddpVersionResponseBody(name='body'),
}

async function getSddpVersion(request: GetSddpVersionRequest): GetSddpVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSddpVersion', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeSddpVersionRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  ossVersion?: int32(name='OssVersion', minimum=0, maximum=2, position='Query'),
}

model UpgradeSddpVersionResponseBody = {
  content?: string(name='Content'),
  requestId?: string(name='RequestId'),
}

model UpgradeSddpVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpgradeSddpVersionResponseBody(name='body'),
}

async function upgradeSddpVersion(request: UpgradeSddpVersionRequest): UpgradeSddpVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeSddpVersion', 'POST', '/', 'json', false, 'json', request);
}

