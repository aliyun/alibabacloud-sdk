/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'CioMarketPop';
  @version = '2025-07-09';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model GetEveryOneSellsFormListRequest {
  auth?: string(name='Auth', position='Query'),
}

model GetEveryOneSellsFormListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: [ 
    {
      id?: long(name='Id', example='1'),
      virtualMainDepartment?: string(name='VirtualMainDepartment', example='virtualMainDepartment'),
      virtualDepartmentName?: string(name='VirtualDepartmentName', example='virtualDepartmentName'),
      virtualDepartmentCode?: string(name='VirtualDepartmentCode', example='virtualDepartmentCode'),
      virtualParentDepartment?: string(name='VirtualParentDepartment', example='virtualParentDepartment'),
      virtualDepartmentStatus?: string(name='VirtualDepartmentStatus', example='virtualDepartmentStatus'),
      dingId?: string(name='DingId', example='1234'),
      empStatus?: string(name='EmpStatus', example='work'),
    }
  ](name='body'),
}

/**
  * @param request  the request parameters of GetEveryOneSellsFormList  GetEveryOneSellsFormListRequest
  * @return GetEveryOneSellsFormListResponse
 */
async function getEveryOneSellsFormList(request: GetEveryOneSellsFormListRequest): GetEveryOneSellsFormListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEveryOneSellsFormList', 'GET', '/', 'array', false, 'json', request);
}

