/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @signatureAlgorithm = 'v2';
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('ciomarketpop', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model GetEveryOneSellsFormListRequest {
  auth?: string(name='Auth'),
}

model GetEveryOneSellsFormListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: [ 
    {
      id?: long(name='Id', example='1'),
      virtualMainDepartment?: string(name='VirtualMainDepartment', example='virtualMainDepartment'),
      virtualDepartmentName?: string(name='VirtualDepartmentName', example='virtualDepartmentName'),
      virtualDepartmentCode?: string(name='VirtualDepartmentCode', example='virtualDepartmentCode'),
      virtualParentDepartment?: string(name='VirtualParentDepartment', example='virtualParentDepartment'),
      virtualDepartmentStatus?: string(name='VirtualDepartmentStatus', example='virtualDepartmentStatus'),
      dingId?: string(name='DingId', example='1234'),
      empStatus?: string(name='EmpStatus', example='work'),
    }
  ](name='body'),
}

/**
 * @summary 全员营销
 *
 * @param request GetEveryOneSellsFormListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetEveryOneSellsFormListResponse
 */
async function getEveryOneSellsFormListWithOptions(request: GetEveryOneSellsFormListRequest, runtime: Util.RuntimeOptions): GetEveryOneSellsFormListResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetEveryOneSellsFormList',
    version = '2025-07-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'array',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 全员营销
 *
 * @param request GetEveryOneSellsFormListRequest
 * @return GetEveryOneSellsFormListResponse
 */
async function getEveryOneSellsFormList(request: GetEveryOneSellsFormListRequest): GetEveryOneSellsFormListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEveryOneSellsFormListWithOptions(request, runtime);
}

model PushEveryOneSellMsgRequest {
  dingIdList?: [ string ](name='DingIdList', example='["1234567"]'),
  pushMsg?: string(name='PushMsg', example='推送内容'),
  pushType?: string(name='PushType', example='1'),
}

model PushEveryOneSellMsgShrinkRequest {
  dingIdListShrink?: string(name='DingIdList', example='["1234567"]'),
  pushMsg?: string(name='PushMsg', example='推送内容'),
  pushType?: string(name='PushType', example='1'),
}

model PushEveryOneSellMsgResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: string(name='body'),
}

/**
 * @summary 推送钉钉消息
 *
 * @param tmpReq PushEveryOneSellMsgRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PushEveryOneSellMsgResponse
 */
async function pushEveryOneSellMsgWithOptions(tmpReq: PushEveryOneSellMsgRequest, runtime: Util.RuntimeOptions): PushEveryOneSellMsgResponse {
  Util.validateModel(tmpReq);
  var request = new PushEveryOneSellMsgShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.dingIdList)) {
    request.dingIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dingIdList, 'DingIdList', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.dingIdListShrink)) {
    body['DingIdList'] = request.dingIdListShrink;
  }
  if (!Util.isUnset(request.pushMsg)) {
    body['PushMsg'] = request.pushMsg;
  }
  if (!Util.isUnset(request.pushType)) {
    body['PushType'] = request.pushType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PushEveryOneSellMsg',
    version = '2025-07-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'string',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 推送钉钉消息
 *
 * @param request PushEveryOneSellMsgRequest
 * @return PushEveryOneSellMsgResponse
 */
async function pushEveryOneSellMsg(request: PushEveryOneSellMsgRequest): PushEveryOneSellMsgResponse {
  var runtime = new Util.RuntimeOptions{};
  return pushEveryOneSellMsgWithOptions(request, runtime);
}

