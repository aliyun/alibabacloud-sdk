/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'ImageSearch';
  @version = '2020-12-14';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model DeleteImageRequest {
  filter?: string(name='Filter', position='Body'),
  instanceName: string(name='InstanceName', description='The name of the Image Search instance. The name can be up to 20 characters in length.

This parameter is required.', example='demoinstance1', position='Body'),
  isDeleteByFilter?: boolean(name='IsDeleteByFilter', position='Body'),
  picName?: string(name='PicName', description='The name of the image.

*   If this parameter is not set, the system deletes all the images that correspond to the specified ProductId parameter.
*   If this parameter is set, the system deletes only the image that is specified by the ProductId and PicName parameters.', example='2092061_1.jpg', position='Body'),
  productId?: string(name='ProductId', description='The ID of the commodity.

>  A commodity may have multiple images.', example='2092061_1', position='Body'),
}

model DeleteImageResponseBody = {
  code?: int32(name='Code', description='The error code returned.

*   A value of 0 indicates that the operation is successful.
*   Values other than 0 indicate errors.', example='0'),
  data?: {
    picNames?: [ string ](name='PicNames', description='The name (PicName) of the deleted image.', example='5555.jpg'),
  }(name='Data', description='The information about the deleted images.'),
  message?: string(name='Message', description='The error message returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0703956F-9BCC-48FA-99F7-96C0BF449C69'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model DeleteImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteImageResponseBody(name='body'),
}

/**
  * @description This operation deletes images from an Image Search instance.
  * >  A success response is returned even if the specified image does not exist on the instance. Therefore, you cannot determine whether the image exists on the instance based on the response.
  * ## QPS limits
  * By default, the maximum number of queries supported by this operation is 20. In this case, the system can process at most 20 requests every second.
  * @param request  the request parameters of DeleteImage  DeleteImageRequest
  * @return DeleteImageResponse
 */
async function deleteImage(request: DeleteImageRequest): DeleteImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteImage', 'POST', '/', 'json', true, 'form', request);
}

model DetailRequest {
  instanceName: string(name='InstanceName', description='The name of the instance.

This parameter is required.', example='imagesearchName', position='Query'),
}

model DetailResponseBody = {
  instance?: {
    capacity?: int32(name='Capacity', description='The capacity of the plan. Unit: Ã— 10,000 images.', example='10'),
    name?: string(name='Name', description='The name of the instance.', example='imagesearchName'),
    qps?: int32(name='Qps', description='The number of queries per second supported by the plan.', example='1'),
    region?: string(name='Region', description='The information about the region.', example='cn-shanghai'),
    serviceType?: int32(name='ServiceType', description='The Image Search model.

0: commodity search. 1: generic image search.', example='0'),
    totalCount?: long(name='TotalCount', description='The number of images.', example='10063'),
    utcCreate?: string(name='UtcCreate', description='The time when the instance was created. Unit: milliseconds.', example='1620382716000'),
    utcExpireTime?: string(name='UtcExpireTime', description='The time when the instance expires. Unit: milliseconds.', example='1623081600000'),
  }(name='Instance', description='The details about the instance.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='36C43E96-8F68-44AA-B1AF-B1F7AB94A6C1'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model DetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetailResponseBody(name='body'),
}

/**
  * @description This operation queries instance details.
  * ## QPS limits
  * By default, the maximum number of queries supported by this operation is 1. In this case, the system can process only 1 request every second.
  * @param request  the request parameters of Detail  DetailRequest
  * @return DetailResponse
 */
async function detail(request: DetailRequest): DetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Detail', 'POST', '/', 'json', false, 'json', request);
}

model DumpMetaRequest {
  instanceName: string(name='InstanceName', description='The name of the instance.

This parameter is required.', example='imagesearchName', minimum=1, maximum=10000000, position='Query'),
}

model DumpMetaResponseBody = {
  data?: {
    dumpMetaStatus?: string(name='DumpMetaStatus', description='The status of the export task.

*   PROCESSING: in progress
*   FAIL: failed
*   SUCCESS: successful', example='PROCESSING'),
    id?: string(name='Id', description='The ID of the export task.', example='500'),
  }(name='Data', description='The information about the export task.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='36C43E96-8F68-44AA-B1AF-B1F7AB94A6C1'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model DumpMetaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DumpMetaResponseBody(name='body'),
}

/**
  * @description This operation creates a task for exporting metadata from an Image Search instance.
  * ## QPS limits
  * By default, the maximum number of queries supported by this operation is 1. In this case, the system can process at most 1 request every second.
  * @param request  the request parameters of DumpMeta  DumpMetaRequest
  * @return DumpMetaResponse
 */
async function dumpMeta(request: DumpMetaRequest): DumpMetaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DumpMeta', 'POST', '/', 'json', false, 'json', request);
}

model DumpMetaListRequest {
  id?: long(name='Id', description='The ID of the export task.', example='500', position='Query'),
  instanceName: string(name='InstanceName', description='The name of the Image Search instance. The name can be up to 20 characters in length.

This parameter is required.', example='demoinstance1', minimum=1, maximum=10000000, position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: 1.', example='1', minimum=1, maximum=500, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of images to return on each page. Default value: 10.', example='10', minimum=1, maximum=500, position='Query'),
}

model DumpMetaListResponseBody = {
  data?: {
    dumpMetaList?: [ 
      {
        code?: string(name='Code', description='The error code returned.

*   A value of 0 indicates that the operation is successful.
*   Values other than 0 indicate errors.', example='0'),
        id?: long(name='Id', description='The ID of the task.', example='500'),
        metaUrl?: string(name='MetaUrl', description='The address where you can download the metadata. The address is valid for 2 hours.', example='https://imagesearchname.oss-cn-shanghai.aliyuncs.com/xxx'),
        msg?: string(name='Msg', description='The error message returned.', example='success'),
        status?: string(name='Status', description='The status of the export task.

*   PROCESSING: in progress
*   FAIL: failed
*   SUCCESS: successful', example='SUCCESS'),
        utcCreate?: string(name='UtcCreate', description='The time when the task was created. Unit: milliseconds.', example='1629095713000'),
        utcModified?: long(name='UtcModified', description='The time when the task was updated. Unit: milliseconds.', example='1629095760000'),
      }
    ](name='DumpMetaList', description='A list of tasks that are used to export metadata.'),
    pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10'),
    totalCount?: long(name='TotalCount', description='The total number of tasks.', example='15'),
  }(name='Data', description='The information about the task that is used to export metadata.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B3137727-7D6E-488C-BA21-0E034C38A879'),
}

model DumpMetaListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DumpMetaListResponseBody(name='body'),
}

/**
  * @description This operation queries tasks that are used for exporting metadata from an Image Search instance.
  * ## QPS limits
  * By default, the maximum number of queries supported by this operation is 1. In this case, the system can process at most 1 request every second.
  * @param request  the request parameters of DumpMetaList  DumpMetaListRequest
  * @return DumpMetaListResponse
 */
async function dumpMetaList(request: DumpMetaListRequest): DumpMetaListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DumpMetaList', 'POST', '/', 'json', false, 'json', request);
}

model IncreaseInstanceRequest {
  bucketName: string(name='BucketName', description='The name of the Object Storage Service (OSS) bucket.

>  The bucket must be in the same region as the Image Search instance.

This parameter is required.', example='bucketName', position='Query'),
  callbackAddress?: string(name='CallbackAddress', description='The callback address.', example='http://xxxxx', position='Query'),
  instanceName: string(name='InstanceName', description='The name of the instance.

This parameter is required.', example='imagesearchName', position='Query'),
  path: string(name='Path', description='The absolute path to the increment.meta file in the bucket. The path must start with a forward slash (/) and cannot end with a forward slash (/).

This parameter is required.', example='/xxx/xxx', position='Query'),
}

model IncreaseInstanceResponseBody = {
  data?: {
    id?: string(name='Id', description='The ID of the task.', example='500'),
    incrementStatus?: string(name='IncrementStatus', description='The status of the task.

*   PROCESSING: in progress
*   FAIL: failed
*   SUCCESS: successful', example='PROCESSING'),
  }(name='Data', description='The information about the task.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='36C43E96-8F68-44AA-B1AF-B1F7AB94A6C1'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model IncreaseInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IncreaseInstanceResponseBody(name='body'),
}

/**
  * @description This operation creates a batch task on an Image Search instance.
  * ## QPS limits
  * By default, the maximum number of queries supported by this operation is 1. In this case, the system can process at most 1 request every second.
  * @param request  the request parameters of IncreaseInstance  IncreaseInstanceRequest
  * @return IncreaseInstanceResponse
 */
async function increaseInstance(request: IncreaseInstanceRequest): IncreaseInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'IncreaseInstance', 'POST', '/', 'json', false, 'json', request);
}

model IncreaseListRequest {
  bucketName?: string(name='BucketName', description='The name of the Object Storage Service (OSS) bucket.', example='bucketName', position='Query'),
  id?: long(name='Id', description='The ID of the batch task.', example='500', position='Query'),
  instanceName: string(name='InstanceName', description='The name of the Image Search instance. The name can be up to 20 characters in length.

This parameter is required.', example='demoinstance1', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: 1.', example='1', minimum=1, maximum=500, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of images to return on each page. Default value: 10.', example='10', minimum=1, maximum=500, position='Query'),
  path?: string(name='Path', description='The absolute path to the increment.meta file in the bucket. The path must start with a forward slash (/) and cannot end with a forward slash (/).', example='/xxx/xxx', position='Query'),
}

model IncreaseListResponseBody = {
  data?: {
    increments?: {
      instance?: [ 
      {
        bucketName?: string(name='BucketName', description='The name of the Object Storage Service (OSS) bucket.', example='bucketName'),
        callbackAddress?: string(name='CallbackAddress', description='The callback address.', example='http://xxxxx'),
        code?: string(name='Code', description='The error code returned.

*   A value of 0 indicates that the operation is successful.
*   Values other than 0 indicate errors.', example='0'),
        errorUrl?: string(name='ErrorUrl', description='The address where you can download the result. The address is valid for 2 hours.', example='https://imagesearchname.oss-cn-shanghai.aliyuncs.com/xxx'),
        id?: long(name='Id', description='The ID of the task.', example='500'),
        msg?: string(name='Msg', description='The error message returned.', example='sucess'),
        path?: string(name='Path', description='The absolute path to the increment.meta file in the bucket. The path must start with a forward slash (/) and cannot end with a forward slash (/).', example='/xx/xx'),
        status?: string(name='Status', description='The status of the batch task.

*   PROCESSING: in progress
*   FAIL: failed
*   SUCCESS: successful', example='SUCCESS'),
        utcCreate?: string(name='UtcCreate', description='The time when the task was created. Unit: milliseconds.', example='1629095713000'),
        utcModified?: long(name='UtcModified', description='The time when the task was updated. Unit: milliseconds.', example='1629095760000'),
      }
    ](name='Instance')
    }(name='Increments', description='A list of batch tasks.'),
    pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10'),
    totalCount?: long(name='TotalCount', description='The total number of tasks.', example='15'),
  }(name='Data', description='The information about the batch task.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B3137727-7D6E-488C-BA21-0E034C38A879'),
}

model IncreaseListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IncreaseListResponseBody(name='body'),
}

/**
  * @description This operation queries batch tasks on an Image Search instance.
  * ## QPS limits
  * By default, the maximum number of queries supported by this operation is 1. In this case, the system can process at most 1 request every second.
  * @param request  the request parameters of IncreaseList  IncreaseListRequest
  * @return IncreaseListResponse
 */
async function increaseList(request: IncreaseListRequest): IncreaseListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'IncreaseList', 'POST', '/', 'json', false, 'json', request);
}

model SearchImageByNameRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  categoryId?: int32(name='CategoryId', description='The category of the product. For more information, see [Category references](https://help.aliyun.com/document_detail/179184.html).

*   For product search: If a category is specified, the specified category prevails. If no category is specified, the system estimates and selects a category. The category selected by the system is included in the response.
*   For generic search: The parameter value is set to 88888888 regardless of whether a category is specified.', example='88888888', minimum=0, maximum=88888888, position='Body'),
  distinctProductId?: boolean(name='DistinctProductId', position='Body'),
  filter?: string(name='Filter', description='The filter conditions. int_attr supports the following operators: >, >=, <, <=, and =. str_attr supports the following operators: = and !=. You can set the logical operator between conditions to AND or OR.

Examples:

*   int_attr>=100
*   str_attr!="value1"
*   int_attr=1000 AND str_attr="value1"', example='int_attr>=100', position='Body'),
  instanceName: string(name='InstanceName', description='The name of the Image Search instance. The name can be up to 20 characters in length.

This parameter is required.', example='demoinstance1', position='Body'),
  num?: int32(name='Num', description='The number of images to return on each page. Valid values: 1 to 100. Default value: 10.', example='10', minimum=1, maximum=100, position='Body'),
  picName: string(name='PicName', description='The name of the image.

This parameter is required.', example='2092061_1.jpg', position='Body'),
  productId: string(name='ProductId', description='The ID of the product.

This parameter is required.', example='2092061_1', position='Body'),
  start?: int32(name='Start', description='The number of the image to return. Valid values: 0 to 499. Default value: 0.', example='0', minimum=0, maximum=499, position='Body'),
}

model SearchImageByNameResponseBody = {
  auctions?: [ 
    {
      categoryId?: int32(name='CategoryId', description='The category of the image.', example='20'),
      customContent?: string(name='CustomContent', description='The user-defined content.', example='zidingyi'),
      intAttr?: int32(name='IntAttr', description='The attribute, which is an integer.', example='2'),
      intAttr2?: int32(name='IntAttr2', example='20'),
      intAttr3?: int32(name='IntAttr3'),
      intAttr4?: int32(name='IntAttr4'),
      picName?: string(name='PicName', description='The name of the image.', example='2092061_1.jpg'),
      productId?: string(name='ProductId', description='The ID of the product.', example='2092061_1'),
      score?: float(name='Score', description='The similarity score of the returned image. Valid values: 0 to 1.

>  To use this feature, you must upgrade the SDK to version 3.1.1.', example='1'),
      sortExprValues?: string(name='SortExprValues', description='The score information about the image.

> *   This parameter is not supported. We recommend that you use the Score parameter.
>*   The SortExprValues parameter indicates a 2-tuple in which values are separated by a semicolon (;). The first value indicates the correlation score of the returned image. A greater value indicates a higher correlation with the sample image. Different algorithms are used.
>*   If the value of CategoryId is within the value range from 0 to 2, the value range of SortExprValues is from 0 to 7.33136443711219e+24.
>*   If the value of CategoryId is not within the value range from 0 to 2, the value range of SortExprValues is from 0 to 5.37633353624177e+24. If the returned image is identical with the sample image, the highest correlation score is generated.', example='5.37633353624177e+24;0'),
      strAttr?: string(name='StrAttr', description='The attribute, which is a string.', example='ss'),
      strAttr2?: string(name='StrAttr2', example='test'),
      strAttr3?: string(name='StrAttr3'),
      strAttr4?: string(name='StrAttr4'),
    }
  ](name='Auctions', description='The product descriptions returned.'),
  code?: int32(name='Code', description='The error code returned.

*   A value of 0 indicates that the operation is successful.
*   Values other than 0 indicate errors.', example='0'),
  head?: {
    docsFound?: int32(name='DocsFound', description='The number of images returned.', example='10'),
    docsReturn?: int32(name='DocsReturn', description='The number of images that match the search conditions on the Image Search instance.', example='10000'),
    searchTime?: int32(name='SearchTime', description='The time it takes to complete the search process. Unit: milliseconds.', example='95'),
  }(name='Head', description='The summary of the search result.'),
  msg?: string(name='Msg', description='The error message returned.', example='success'),
  picInfo?: {
    allCategories?: [ 
      {
        id?: int32(name='Id', description='The ID of the category.', example='other'),
        name?: string(name='Name', description='The name of the category.', example='88888888'),
      }
    ](name='AllCategories', description='The categories that are supported by the system.'),
    categoryId?: int32(name='CategoryId', description='The category selected by the system.

If a category is specified in the request, the specified category prevails.', example='20'),
    multiRegion?: [ 
      {
        region?: string(name='Region', description='The result of subject recognition.

The subject area of the image, in the format of x1,x2,y1,y2. Specifically, x1 and y1 specify the upper-left pixel, and x2 and y2 specify the lower-right pixel. If a subject area is specified in the request, the specified subject area prevails.', example='280,486,232,351'),
      }
    ](name='MultiRegion', description='The recognized subjects.'),
    region?: string(name='Region', description='The result of subject recognition.

The subject area of the image, in the format of x1,x2,y1,y2. Specifically, x1 and y1 specify the upper-left pixel, and x2 and y2 specify the lower-right pixel. If a subject area is specified in the request, the specified subject area prevails.', example='280,486,232,351'),
  }(name='PicInfo', description='The information such as the system-selected category and result of subject recognition.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='36C43E96-8F68-44AA-B1AF-B1F7AB94A6C1'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model SearchImageByNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchImageByNameResponseBody(name='body'),
}

/**
  * @description This operation searches for images by image name on an Image Search instance.
  * ## QPS limits
  * The maximum number of queries per second is displayed in the Image Search console. The upper limit is specified when you purchase the instance. You can set the upper limit to 5 QPS or 10 QPS.
  * @param request  the request parameters of SearchImageByName  SearchImageByNameRequest
  * @return SearchImageByNameResponse
 */
async function searchImageByName(request: SearchImageByNameRequest): SearchImageByNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchImageByName', 'POST', '/', 'json', true, 'form', request);
}

model SearchImageByTextRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  distinctProductId?: boolean(name='DistinctProductId', example='false', position='Body'),
  filter?: string(name='Filter', example='int_attr=1000 AND str_attr="value1"', position='Body'),
  instanceName: string(name='InstanceName', description='This parameter is required.', example='demoinstance1', position='Body'),
  num?: int32(name='Num', example='10', minimum=1, maximum=100, position='Body'),
  start?: int32(name='Start', example='0', minimum=0, maximum=499, position='Body'),
  text: string(name='Text', description='This parameter is required.', example='xxxx', position='Body'),
}

model SearchImageByTextResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction', example='xxx'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName', example='111'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId', example='222'),
    authPrincipalType?: string(name='AuthPrincipalType', example='SubUser'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage', example='xxxxxx'),
    noPermissionType?: string(name='NoPermissionType', example='ImplicitDeny'),
    policyType?: string(name='PolicyType', example='PauseNotify'),
  }(name='AccessDeniedDetail'),
  auctions?: [ 
    {
      categoryId?: int32(name='CategoryId', example='8888888'),
      customContent?: string(name='CustomContent', example='zidingyi'),
      intAttr?: int32(name='IntAttr', example='2'),
      intAttr2?: int32(name='IntAttr2', example='2'),
      intAttr3?: int32(name='IntAttr3', example='2'),
      intAttr4?: int32(name='IntAttr4', example='2'),
      picName?: string(name='PicName', example='2092061_1.jpg'),
      productId?: string(name='ProductId', example='2092061_1'),
      score?: float(name='Score', example='1'),
      strAttr?: string(name='StrAttr', example='xxxx'),
      strAttr2?: string(name='StrAttr2', example='xxxx'),
      strAttr3?: string(name='StrAttr3', example='xxxx'),
      strAttr4?: string(name='StrAttr4', example='xxxx'),
    }
  ](name='Auctions'),
  code?: int32(name='Code', example='0'),
  head?: {
    docsFound?: int32(name='DocsFound', example='10'),
    docsReturn?: int32(name='DocsReturn', example='10000'),
    searchTime?: int32(name='SearchTime', example='95'),
  }(name='Head'),
  msg?: string(name='Msg', example='success'),
  picInfo?: {
    allCategories?: [ 
      {
        id?: int32(name='Id', example='88888888'),
        name?: string(name='Name', example='other'),
      }
    ](name='AllCategories'),
  }(name='PicInfo'),
  requestId?: string(name='RequestId', example='B3137727-7D6E-488C-BA21-0E034C38A879'),
  success?: boolean(name='Success', example='true'),
}

model SearchImageByTextResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchImageByTextResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SearchImageByText  SearchImageByTextRequest
  * @return SearchImageByTextResponse
 */
async function searchImageByText(request: SearchImageByTextRequest): SearchImageByTextResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchImageByText', 'POST', '/', 'json', true, 'form', request);
}

model UpdateImageRequest {
  customContent?: string(name='CustomContent', description='The user-defined content. The value can be up to 4,096 characters in length.

>  If you set this parameter, the response includes this parameter and its value. You can add text such as an image description.', example='zidingyi', position='Body'),
  instanceName: string(name='InstanceName', description='The name of the Image Search instance. The name can be up to 20 characters in length.

This parameter is required.', example='demoinstance1', position='Body'),
  intAttr?: int32(name='IntAttr', description='The attribute, which is an integer. The attribute can be used to filter images when you search for images. If you set this parameter, the response includes this parameter and its value.', example='2', position='Body'),
  intAttr2?: int32(name='IntAttr2', example='20', position='Body'),
  intAttr3?: int32(name='IntAttr3', position='Query'),
  intAttr4?: int32(name='IntAttr4', position='Query'),
  picName: string(name='PicName', description='The name of the image. The name can be up to 512 characters in length.

> *   An image is uniquely identified by the values of the ProductId and PicName parameters.
>*   If you add an image whose product ID (ProductId) and image name (PicName) are the same as those of an existing image, the newly added image overwrites the existing image.

This parameter is required.', example='namexxx.jpg', position='Body'),
  productId: string(name='ProductId', description='The ID of the product. The ID can be up to 512 characters in length.

>  A product may have multiple images.

This parameter is required.', example='2092061_1', position='Body'),
  strAttr?: string(name='StrAttr', description='The attribute, which is a string. The value can be up to 128 characters in length. The attribute can be used to filter images. If you set this parameter, the response includes this parameter and its value.', example='ss', position='Body'),
  strAttr2?: string(name='StrAttr2', example='test', position='Body'),
  strAttr3?: string(name='StrAttr3', position='Query'),
  strAttr4?: string(name='StrAttr4', position='Query'),
}

model UpdateImageResponseBody = {
  code?: int32(name='Code', description='The error code returned.

*   A value of 0 indicates that the operation is successful.
*   Values other than 0 indicate errors.', example='0'),
  message?: string(name='Message', description='Id of the request', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E0845DE6-52AF-4B50-9F15-51ED4044E6AB'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model UpdateImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateImageResponseBody(name='body'),
}

/**
  * @description This operation updates image information on an Image Search instance.
  * > *   Limits are imposed on the instance creation time.
  * >*   This operation is supported by instances that are created in the Singapore (Singapore) region after December 2021. This operation is not supported in other regions.
  * ## QPS limits
  * By default, the maximum number of queries supported by this operation is 20. In this case, the system can process at most 20 requests every second.
  * @param request  the request parameters of UpdateImage  UpdateImageRequest
  * @return UpdateImageResponse
 */
async function updateImage(request: UpdateImageRequest): UpdateImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateImage', 'POST', '/', 'json', true, 'form', request);
}

