/**
 *
 */
import Util;
import OSS;
import RPC;
import OpenPlatform;
import OSSUtil;
import FileForm;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('imagesearch', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddImageRequest {
  categoryId?: int32(name='CategoryId'),
  crop?: boolean(name='Crop'),
  customContent?: string(name='CustomContent'),
  instanceName?: string(name='InstanceName'),
  intAttr?: int32(name='IntAttr'),
  picContent?: string(name='PicContent'),
  picName?: string(name='PicName'),
  productId?: string(name='ProductId'),
  region?: string(name='Region'),
  strAttr?: string(name='StrAttr'),
}

model AddImageAdvanceRequest {
  picContentObject: readable(name='PicContentObject'),
  categoryId?: int32(name='CategoryId'),
  crop?: boolean(name='Crop'),
  customContent?: string(name='CustomContent'),
  instanceName?: string(name='InstanceName'),
  intAttr?: int32(name='IntAttr'),
  picName?: string(name='PicName'),
  productId?: string(name='ProductId'),
  region?: string(name='Region'),
  strAttr?: string(name='StrAttr'),
}

model AddImageResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  picInfo?: {
    categoryId?: int32(name='CategoryId'),
    region?: string(name='Region'),
  }(name='PicInfo'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddImageResponse = {
  headers: map[string]string(name='headers'),
  body: AddImageResponseBody(name='body'),
}

async function addImageWithOptions(request: AddImageRequest, runtime: Util.RuntimeOptions): AddImageResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.categoryId)) {
    body['CategoryId'] = request.categoryId;
  }
  if (!Util.isUnset(request.crop)) {
    body['Crop'] = request.crop;
  }
  if (!Util.isUnset(request.customContent)) {
    body['CustomContent'] = request.customContent;
  }
  if (!Util.isUnset(request.instanceName)) {
    body['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.intAttr)) {
    body['IntAttr'] = request.intAttr;
  }
  if (!Util.isUnset(request.picContent)) {
    body['PicContent'] = request.picContent;
  }
  if (!Util.isUnset(request.picName)) {
    body['PicName'] = request.picName;
  }
  if (!Util.isUnset(request.productId)) {
    body['ProductId'] = request.productId;
  }
  if (!Util.isUnset(request.region)) {
    body['Region'] = request.region;
  }
  if (!Util.isUnset(request.strAttr)) {
    body['StrAttr'] = request.strAttr;
  }

  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddImage',
    version = '2020-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addImage(request: AddImageRequest): AddImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return addImageWithOptions(request, runtime);
}

async function addImageAdvance(request: AddImageAdvanceRequest, runtime: Util.RuntimeOptions): AddImageResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ImageSearch',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var addImageReq = new AddImageRequest{};
  OpenApiUtil.convert(request, addImageReq);

  if(!Util.isUnset(request.picContentObject)){
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.objectKey,
      content = request.picContentObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    addImageReq.picContent =   `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  }
  var addImageResp = addImageWithOptions(addImageReq, runtime);
  return addImageResp;
}

model DeleteImageRequest {
  instanceName?: string(name='InstanceName'),
  picName?: string(name='PicName'),
  productId?: string(name='ProductId'),
}

model DeleteImageResponseBody = {
  code?: int32(name='Code'),
  data?: {
    picNames?: [ string ](name='PicNames'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteImageResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteImageResponseBody(name='body'),
}

async function deleteImageWithOptions(request: DeleteImageRequest, runtime: Util.RuntimeOptions): DeleteImageResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.instanceName)) {
    body['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.picName)) {
    body['PicName'] = request.picName;
  }
  if (!Util.isUnset(request.productId)) {
    body['ProductId'] = request.productId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteImage',
    version = '2020-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteImage(request: DeleteImageRequest): DeleteImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteImageWithOptions(request, runtime);
}

model DetailRequest {
  instanceName?: string(name='InstanceName'),
}

model DetailResponseBody = {
  instance?: {
    capacity?: int32(name='Capacity'),
    name?: string(name='Name'),
    qps?: int32(name='Qps'),
    region?: string(name='Region'),
    serviceType?: int32(name='ServiceType'),
    totalCount?: long(name='TotalCount'),
    utcCreate?: string(name='UtcCreate'),
    utcExpireTime?: string(name='UtcExpireTime'),
  }(name='Instance'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DetailResponse = {
  headers: map[string]string(name='headers'),
  body: DetailResponseBody(name='body'),
}

async function detailWithOptions(request: DetailRequest, runtime: Util.RuntimeOptions): DetailResponse {
  Util.validateModel(request);
  var query = {};
  query['InstanceName'] = request.instanceName;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'Detail',
    version = '2020-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function detail(request: DetailRequest): DetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return detailWithOptions(request, runtime);
}

model DumpMetaRequest {
  instanceName?: string(name='InstanceName'),
}

model DumpMetaResponseBody = {
  data?: {
    dumpMetaStatus?: string(name='DumpMetaStatus'),
    id?: string(name='Id'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DumpMetaResponse = {
  headers: map[string]string(name='headers'),
  body: DumpMetaResponseBody(name='body'),
}

async function dumpMetaWithOptions(request: DumpMetaRequest, runtime: Util.RuntimeOptions): DumpMetaResponse {
  Util.validateModel(request);
  var query = {};
  query['InstanceName'] = request.instanceName;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DumpMeta',
    version = '2020-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function dumpMeta(request: DumpMetaRequest): DumpMetaResponse {
  var runtime = new Util.RuntimeOptions{};
  return dumpMetaWithOptions(request, runtime);
}

model DumpMetaListRequest {
  id?: long(name='Id'),
  instanceName?: string(name='InstanceName'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DumpMetaListResponseBody = {
  data?: {
    dumpMetaList?: [ 
      {
        code?: string(name='Code'),
        id?: long(name='Id'),
        metaUrl?: string(name='MetaUrl'),
        msg?: string(name='Msg'),
        status?: string(name='Status'),
        utcCreate?: string(name='UtcCreate'),
        utcModified?: long(name='UtcModified'),
      }
    ](name='DumpMetaList'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DumpMetaListResponse = {
  headers: map[string]string(name='headers'),
  body: DumpMetaListResponseBody(name='body'),
}

async function dumpMetaListWithOptions(request: DumpMetaListRequest, runtime: Util.RuntimeOptions): DumpMetaListResponse {
  Util.validateModel(request);
  var query = {};
  query['Id'] = request.id;
  query['InstanceName'] = request.instanceName;
  query['PageNumber'] = request.pageNumber;
  query['PageSize'] = request.pageSize;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DumpMetaList',
    version = '2020-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function dumpMetaList(request: DumpMetaListRequest): DumpMetaListResponse {
  var runtime = new Util.RuntimeOptions{};
  return dumpMetaListWithOptions(request, runtime);
}

model IncreaseInstanceRequest {
  bucketName?: string(name='BucketName'),
  callbackAddress?: string(name='CallbackAddress'),
  instanceName?: string(name='InstanceName'),
  path?: string(name='Path'),
}

model IncreaseInstanceResponseBody = {
  data?: {
    id?: string(name='Id'),
    incrementStatus?: string(name='IncrementStatus'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model IncreaseInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: IncreaseInstanceResponseBody(name='body'),
}

async function increaseInstanceWithOptions(request: IncreaseInstanceRequest, runtime: Util.RuntimeOptions): IncreaseInstanceResponse {
  Util.validateModel(request);
  var query = {};
  query['BucketName'] = request.bucketName;
  query['CallbackAddress'] = request.callbackAddress;
  query['InstanceName'] = request.instanceName;
  query['Path'] = request.path;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'IncreaseInstance',
    version = '2020-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function increaseInstance(request: IncreaseInstanceRequest): IncreaseInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return increaseInstanceWithOptions(request, runtime);
}

model IncreaseListRequest {
  bucketName?: string(name='BucketName'),
  id?: long(name='Id'),
  instanceName?: string(name='InstanceName'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  path?: string(name='Path'),
}

model IncreaseListResponseBody = {
  data?: {
    increments?: {
      instance?: [ 
      {
        bucketName?: string(name='BucketName'),
        callbackAddress?: string(name='CallbackAddress'),
        code?: string(name='Code'),
        errorUrl?: string(name='ErrorUrl'),
        id?: long(name='Id'),
        msg?: string(name='Msg'),
        path?: string(name='Path'),
        status?: string(name='Status'),
        utcCreate?: string(name='UtcCreate'),
        utcModified?: long(name='UtcModified'),
      }
    ](name='Instance')
    }(name='Increments'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model IncreaseListResponse = {
  headers: map[string]string(name='headers'),
  body: IncreaseListResponseBody(name='body'),
}

async function increaseListWithOptions(request: IncreaseListRequest, runtime: Util.RuntimeOptions): IncreaseListResponse {
  Util.validateModel(request);
  var query = {};
  query['BucketName'] = request.bucketName;
  query['Id'] = request.id;
  query['InstanceName'] = request.instanceName;
  query['PageNumber'] = request.pageNumber;
  query['PageSize'] = request.pageSize;
  query['Path'] = request.path;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'IncreaseList',
    version = '2020-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function increaseList(request: IncreaseListRequest): IncreaseListResponse {
  var runtime = new Util.RuntimeOptions{};
  return increaseListWithOptions(request, runtime);
}

model SearchImageByNameRequest {
  categoryId?: int32(name='CategoryId'),
  filter?: string(name='Filter'),
  instanceName?: string(name='InstanceName'),
  num?: int32(name='Num'),
  picName?: string(name='PicName'),
  productId?: string(name='ProductId'),
  regionId?: string(name='RegionId'),
  start?: int32(name='Start'),
}

model SearchImageByNameResponseBody = {
  auctions?: [ 
    {
      categoryId?: int32(name='CategoryId'),
      customContent?: string(name='CustomContent'),
      intAttr?: int32(name='IntAttr'),
      picName?: string(name='PicName'),
      productId?: string(name='ProductId'),
      score?: float(name='Score'),
      sortExprValues?: string(name='SortExprValues'),
      strAttr?: string(name='StrAttr'),
    }
  ](name='Auctions'),
  code?: int32(name='Code'),
  head?: {
    docsFound?: int32(name='DocsFound'),
    docsReturn?: int32(name='DocsReturn'),
    searchTime?: int32(name='SearchTime'),
  }(name='Head'),
  msg?: string(name='Msg'),
  picInfo?: {
    allCategories?: [ 
      {
        id?: int32(name='Id'),
        name?: string(name='Name'),
      }
    ](name='AllCategories'),
    categoryId?: int32(name='CategoryId'),
    multiRegion?: [ 
      {
        region?: string(name='Region'),
      }
    ](name='MultiRegion'),
    region?: string(name='Region'),
  }(name='PicInfo'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SearchImageByNameResponse = {
  headers: map[string]string(name='headers'),
  body: SearchImageByNameResponseBody(name='body'),
}

async function searchImageByNameWithOptions(request: SearchImageByNameRequest, runtime: Util.RuntimeOptions): SearchImageByNameResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.categoryId)) {
    body['CategoryId'] = request.categoryId;
  }
  if (!Util.isUnset(request.filter)) {
    body['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.instanceName)) {
    body['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.num)) {
    body['Num'] = request.num;
  }
  if (!Util.isUnset(request.picName)) {
    body['PicName'] = request.picName;
  }
  if (!Util.isUnset(request.productId)) {
    body['ProductId'] = request.productId;
  }
  if (!Util.isUnset(request.start)) {
    body['Start'] = request.start;
  }

  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SearchImageByName',
    version = '2020-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function searchImageByName(request: SearchImageByNameRequest): SearchImageByNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchImageByNameWithOptions(request, runtime);
}

model SearchImageByPicRequest {
  categoryId?: int32(name='CategoryId'),
  crop?: boolean(name='Crop'),
  filter?: string(name='Filter'),
  instanceName?: string(name='InstanceName'),
  num?: int32(name='Num'),
  picContent?: string(name='PicContent'),
  region?: string(name='Region'),
  regionId?: string(name='RegionId'),
  start?: int32(name='Start'),
}

model SearchImageByPicAdvanceRequest {
  picContentObject: readable(name='PicContentObject'),
  categoryId?: int32(name='CategoryId'),
  crop?: boolean(name='Crop'),
  filter?: string(name='Filter'),
  instanceName?: string(name='InstanceName'),
  num?: int32(name='Num'),
  region?: string(name='Region'),
  regionId?: string(name='RegionId'),
  start?: int32(name='Start'),
}

model SearchImageByPicResponseBody = {
  auctions?: [ 
    {
      categoryId?: int32(name='CategoryId'),
      customContent?: string(name='CustomContent'),
      intAttr?: int32(name='IntAttr'),
      picName?: string(name='PicName'),
      productId?: string(name='ProductId'),
      score?: float(name='Score'),
      sortExprValues?: string(name='SortExprValues'),
      strAttr?: string(name='StrAttr'),
    }
  ](name='Auctions'),
  code?: int32(name='Code'),
  head?: {
    docsFound?: int32(name='DocsFound'),
    docsReturn?: int32(name='DocsReturn'),
    searchTime?: int32(name='SearchTime'),
  }(name='Head'),
  msg?: string(name='Msg'),
  picInfo?: {
    allCategories?: [ 
      {
        id?: int32(name='Id'),
        name?: string(name='Name'),
      }
    ](name='AllCategories'),
    categoryId?: int32(name='CategoryId'),
    multiRegion?: [ 
      {
        region?: string(name='Region'),
      }
    ](name='MultiRegion'),
    region?: string(name='Region'),
  }(name='PicInfo'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SearchImageByPicResponse = {
  headers: map[string]string(name='headers'),
  body: SearchImageByPicResponseBody(name='body'),
}

async function searchImageByPicWithOptions(request: SearchImageByPicRequest, runtime: Util.RuntimeOptions): SearchImageByPicResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.categoryId)) {
    body['CategoryId'] = request.categoryId;
  }
  if (!Util.isUnset(request.crop)) {
    body['Crop'] = request.crop;
  }
  if (!Util.isUnset(request.filter)) {
    body['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.instanceName)) {
    body['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.num)) {
    body['Num'] = request.num;
  }
  if (!Util.isUnset(request.picContent)) {
    body['PicContent'] = request.picContent;
  }
  if (!Util.isUnset(request.region)) {
    body['Region'] = request.region;
  }
  if (!Util.isUnset(request.start)) {
    body['Start'] = request.start;
  }

  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SearchImageByPic',
    version = '2020-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function searchImageByPic(request: SearchImageByPicRequest): SearchImageByPicResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchImageByPicWithOptions(request, runtime);
}

async function searchImageByPicAdvance(request: SearchImageByPicAdvanceRequest, runtime: Util.RuntimeOptions): SearchImageByPicResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'ImageSearch',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var searchImageByPicReq = new SearchImageByPicRequest{};
  OpenApiUtil.convert(request, searchImageByPicReq);

  if(!Util.isUnset(request.picContentObject)){
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.objectKey,
      content = request.picContentObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    searchImageByPicReq.picContent =   `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  }
  var searchImageByPicResp = searchImageByPicWithOptions(searchImageByPicReq, runtime);
  return searchImageByPicResp;
}

model UpdateImageRequest {
  customContent?: string(name='CustomContent'),
  instanceName?: string(name='InstanceName'),
  intAttr?: int32(name='IntAttr'),
  picName?: string(name='PicName'),
  productId?: string(name='ProductId'),
  strAttr?: string(name='StrAttr'),
}

model UpdateImageResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message', description='Id of the request'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateImageResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateImageResponseBody(name='body'),
}

async function updateImageWithOptions(request: UpdateImageRequest, runtime: Util.RuntimeOptions): UpdateImageResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.customContent)) {
    body['CustomContent'] = request.customContent;
  }
  if (!Util.isUnset(request.instanceName)) {
    body['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.intAttr)) {
    body['IntAttr'] = request.intAttr;
  }
  if (!Util.isUnset(request.picName)) {
    body['PicName'] = request.picName;
  }
  if (!Util.isUnset(request.productId)) {
    body['ProductId'] = request.productId;
  }
  if (!Util.isUnset(request.strAttr)) {
    body['StrAttr'] = request.strAttr;
  }

  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateImage',
    version = '2020-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateImage(request: UpdateImageRequest): UpdateImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateImageWithOptions(request, runtime);
}

