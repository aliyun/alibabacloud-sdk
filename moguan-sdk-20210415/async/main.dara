/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'moguan-sdk';
  @version = '2021-04-15';
  @endpointRule = 'central';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model RegisterDeviceRequest {
  appKey: string(name='AppKey', description='This parameter is required.', example='NWTtS623eqo6s070', position='Body'),
  deviceId: string(name='DeviceId', description='This parameter is required.', example='99daf4a623f2b623ae08e79d6d4bf686', position='Body'),
  extend: map[string]any(name='Extend', description='This parameter is required.', example='{}', shrink='json', position='Body'),
  sdkCode: string(name='SdkCode', description='This parameter is required.', example='SDKCodeTest01', position='Body'),
  userDeviceId: string(name='UserDeviceId', description='This parameter is required.', example='D001', position='Body'),
}

model RegisterDeviceResponseBody = {
  data?: {
    license?: string(name='License', example='rSDUqJEawcrhaHVDXgQQ2vV3eOQDzuos5TAJgx9uolqVaAKkgcBHfWd/jYknsiVeYxsLWyscP0U6ia0XL/u6t7ira9XnI3Jv9qHzosrAW09YrT68VigxqwrutxtexXGgrXFzYmcMMe05rYhEmyyoeNu0CB40HxggXIIw10vH0pvhMLd0ssz6FbaOGhZ/7WDzFAqeXlz7+whZFNlXwaCfIwHTDIj9nBHHsBzWWocOHO=='),
    publicKey?: string(name='PublicKey', example='SSTfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCwdTbYqDHxAlmdSFowPthsG3wKyXdembceyc5j31FZIYGESE4x6ND0al5ejdx26d2ZMRDzlkjnLqUN3snezRA1x0qs92taGXMrIvYDi0dEsz3X/a/VXHPxNu0+/PBT9RYzakLDV9F/6QdYn4PQUvHSTfz2ghaS5SCj++VVDe4CBBIDAAPB'),
    rid?: string(name='Rid', example='1082f5e57a004a0799198d4a370c3efa'),
    signature?: string(name='Signature', example='VnxhWhjL2D3kkGcv8Q/wHzyD6dTEYIDfnIgzDWLS7iQRiCWLu1K+EA+Q6iiH1lpaDNGeQ65zVpbB1wtGMmJymQMJeJ5RHzEo74wwXP48Yfn6tdAoZwtLkxXqZo5N99W/JyEyHyeisC44ZIpLcs1YPv3Wr+uRirUgjHhZXorxJ1E='),
  }(name='Data'),
  errorCode?: int32(name='ErrorCode', example='0'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='A68E0F1E-9CEE-4BB9-8880-943730FFD9A9'),
}

model RegisterDeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RegisterDeviceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RegisterDevice  RegisterDeviceRequest
  * @return RegisterDeviceResponse
 */
async function registerDevice(request: RegisterDeviceRequest): RegisterDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RegisterDevice', 'POST', '/', 'json', true, 'form', request);
}

