/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  
  checkConfig(config);
  @endpoint = getEndpoint('moguan-sdk', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model RegisterDeviceRequest {
  appKey?: string(name='AppKey', example='NWTtS623eqo6s070'),
  deviceId?: string(name='DeviceId', example='99daf4a623f2b623ae08e79d6d4bf686'),
  extend?: map[string]any(name='Extend', example='{}'),
  sdkCode?: string(name='SdkCode', example='SDKCodeTest01'),
  userDeviceId?: string(name='UserDeviceId', example='D001'),
}

model RegisterDeviceShrinkRequest {
  appKey?: string(name='AppKey', example='NWTtS623eqo6s070'),
  deviceId?: string(name='DeviceId', example='99daf4a623f2b623ae08e79d6d4bf686'),
  extendShrink?: string(name='Extend', example='{}'),
  sdkCode?: string(name='SdkCode', example='SDKCodeTest01'),
  userDeviceId?: string(name='UserDeviceId', example='D001'),
}

model RegisterDeviceResponseBody = {
  data?: {
    license?: string(name='License', example='rSDUqJEawcrhaHVDXgQQ2vV3eOQDzuos5TAJgx9uolqVaAKkgcBHfWd/jYknsiVeYxsLWyscP0U6ia0XL/u6t7ira9XnI3Jv9qHzosrAW09YrT68VigxqwrutxtexXGgrXFzYmcMMe05rYhEmyyoeNu0CB40HxggXIIw10vH0pvhMLd0ssz6FbaOGhZ/7WDzFAqeXlz7+whZFNlXwaCfIwHTDIj9nBHHsBzWWocOHO=='),
    publicKey?: string(name='PublicKey', example='SSTfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCwdTbYqDHxAlmdSFowPthsG3wKyXdembceyc5j31FZIYGESE4x6ND0al5ejdx26d2ZMRDzlkjnLqUN3snezRA1x0qs92taGXMrIvYDi0dEsz3X/a/VXHPxNu0+/PBT9RYzakLDV9F/6QdYn4PQUvHSTfz2ghaS5SCj++VVDe4CBBIDAAPB'),
    rid?: string(name='Rid', example='1082f5e57a004a0799198d4a370c3efa'),
    signature?: string(name='Signature', example='VnxhWhjL2D3kkGcv8Q/wHzyD6dTEYIDfnIgzDWLS7iQRiCWLu1K+EA+Q6iiH1lpaDNGeQ65zVpbB1wtGMmJymQMJeJ5RHzEo74wwXP48Yfn6tdAoZwtLkxXqZo5N99W/JyEyHyeisC44ZIpLcs1YPv3Wr+uRirUgjHhZXorxJ1E='),
  }(name='Data'),
  errorCode?: int32(name='ErrorCode', example='0'),
  errorMessage?: string(name='ErrorMessage'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='A68E0F1E-9CEE-4BB9-8880-943730FFD9A9'),
}

model RegisterDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RegisterDeviceResponseBody(name='body'),
}

async function registerDeviceWithOptions(tmpReq: RegisterDeviceRequest, runtime: Util.RuntimeOptions): RegisterDeviceResponse {
  Util.validateModel(tmpReq);
  var request = new RegisterDeviceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.extend)) {
    request.extendShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.extend, 'Extend', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appKey)) {
    body['AppKey'] = request.appKey;
  }
  if (!Util.isUnset(request.deviceId)) {
    body['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.extendShrink)) {
    body['Extend'] = request.extendShrink;
  }
  if (!Util.isUnset(request.sdkCode)) {
    body['SdkCode'] = request.sdkCode;
  }
  if (!Util.isUnset(request.userDeviceId)) {
    body['UserDeviceId'] = request.userDeviceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RegisterDevice',
    version = '2021-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function registerDevice(request: RegisterDeviceRequest): RegisterDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return registerDeviceWithOptions(request, runtime);
}

