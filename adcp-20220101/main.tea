/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  
  checkConfig(config);
  @endpoint = getEndpoint('adcp', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AttachClusterToHubRequest {
  clusterId?: string(name='ClusterId'),
  clusterIds?: string(name='ClusterIds'),
}

model AttachClusterToHubResponseBody = {
  clusterId?: string(name='ClusterId'),
  managedClusterIds?: [ string ](name='ManagedClusterIds'),
  requestId?: string(name='RequestId'),
}

model AttachClusterToHubResponse = {
  headers: map[string]string(name='headers'),
  body: AttachClusterToHubResponseBody(name='body'),
}

async function attachClusterToHubWithOptions(request: AttachClusterToHubRequest, runtime: Util.RuntimeOptions): AttachClusterToHubResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.clusterIds)) {
    body['ClusterIds'] = request.clusterIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AttachClusterToHub',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function attachClusterToHub(request: AttachClusterToHubRequest): AttachClusterToHubResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachClusterToHubWithOptions(request, runtime);
}

model CreateHubClusterRequest {
  apiServerPublicEip?: boolean(name='ApiServerPublicEip'),
  auditLogEnabled?: boolean(name='AuditLogEnabled'),
  auditLogProject?: string(name='AuditLogProject'),
  auditLogStoreTTL?: string(name='AuditLogStoreTTL'),
  controlPlaneLogEnabled?: boolean(name='ControlPlaneLogEnabled'),
  controlPlaneLogProject?: string(name='ControlPlaneLogProject'),
  controlPlaneLogTTL?: string(name='ControlPlaneLogTTL'),
  isEnterpriseSecurityGroup?: boolean(name='IsEnterpriseSecurityGroup', description='是否企业安全组'),
  name?: string(name='Name', description='集群名称'),
  regionId?: string(name='RegionId'),
  vSwitches?: string(name='VSwitches'),
  vpcId?: string(name='VpcId'),
}

model CreateHubClusterResponseBody = {
  clusterId?: string(name='ClusterId'),
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model CreateHubClusterResponse = {
  headers: map[string]string(name='headers'),
  body: CreateHubClusterResponseBody(name='body'),
}

async function createHubClusterWithOptions(request: CreateHubClusterRequest, runtime: Util.RuntimeOptions): CreateHubClusterResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.apiServerPublicEip)) {
    body['ApiServerPublicEip'] = request.apiServerPublicEip;
  }
  if (!Util.isUnset(request.auditLogEnabled)) {
    body['AuditLogEnabled'] = request.auditLogEnabled;
  }
  if (!Util.isUnset(request.auditLogProject)) {
    body['AuditLogProject'] = request.auditLogProject;
  }
  if (!Util.isUnset(request.auditLogStoreTTL)) {
    body['AuditLogStoreTTL'] = request.auditLogStoreTTL;
  }
  if (!Util.isUnset(request.controlPlaneLogEnabled)) {
    body['ControlPlaneLogEnabled'] = request.controlPlaneLogEnabled;
  }
  if (!Util.isUnset(request.controlPlaneLogProject)) {
    body['ControlPlaneLogProject'] = request.controlPlaneLogProject;
  }
  if (!Util.isUnset(request.controlPlaneLogTTL)) {
    body['ControlPlaneLogTTL'] = request.controlPlaneLogTTL;
  }
  if (!Util.isUnset(request.isEnterpriseSecurityGroup)) {
    body['IsEnterpriseSecurityGroup'] = request.isEnterpriseSecurityGroup;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.vSwitches)) {
    body['VSwitches'] = request.vSwitches;
  }
  if (!Util.isUnset(request.vpcId)) {
    body['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateHubCluster',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createHubCluster(request: CreateHubClusterRequest): CreateHubClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return createHubClusterWithOptions(request, runtime);
}

model DeleteHubClusterRequest {
  clusterId?: string(name='ClusterId'),
  force?: boolean(name='Force'),
}

model DeleteHubClusterResponseBody = {
  clusterId?: string(name='ClusterId'),
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model DeleteHubClusterResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteHubClusterResponseBody(name='body'),
}

async function deleteHubClusterWithOptions(request: DeleteHubClusterRequest, runtime: Util.RuntimeOptions): DeleteHubClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.force)) {
    query['Force'] = request.force;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteHubCluster',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteHubCluster(request: DeleteHubClusterRequest): DeleteHubClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteHubClusterWithOptions(request, runtime);
}

model DescribeHubClusterDetailsRequest {
  clusterId?: string(name='ClusterId', description='集群ID'),
}

model DescribeHubClusterDetailsResponseBody = {
  cluster?: {
    apiServer?: {
      enabledPublic?: boolean(name='EnabledPublic'),
      loadBalancerId?: string(name='LoadBalancerId'),
    }(name='ApiServer'),
    clusterInfo?: {
      clusterId?: string(name='ClusterId'),
      clusterSpec?: string(name='ClusterSpec'),
      creationTime?: string(name='CreationTime'),
      errorMessage?: string(name='ErrorMessage'),
      name?: string(name='Name'),
      profile?: string(name='Profile'),
      regionId?: string(name='RegionId'),
      state?: string(name='State'),
      updateTime?: string(name='UpdateTime'),
      version?: string(name='Version'),
    }(name='ClusterInfo'),
    endpoints?: {
      intranetApiServerEndpoint?: string(name='IntranetApiServerEndpoint'),
      publicApiServerEndpoint?: string(name='PublicApiServerEndpoint'),
    }(name='Endpoints'),
    network?: {
      clusterDomain?: string(name='ClusterDomain'),
      IPStack?: string(name='IPStack'),
      securityGroupIDs?: [ string ](name='SecurityGroupIDs'),
      vSwitches?: [ string ](name='VSwitches'),
      vpcId?: string(name='VpcId'),
    }(name='Network'),
  }(name='Cluster'),
  requestId?: string(name='RequestId'),
}

model DescribeHubClusterDetailsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHubClusterDetailsResponseBody(name='body'),
}

async function describeHubClusterDetailsWithOptions(request: DescribeHubClusterDetailsRequest, runtime: Util.RuntimeOptions): DescribeHubClusterDetailsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeHubClusterDetails',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeHubClusterDetails(request: DescribeHubClusterDetailsRequest): DescribeHubClusterDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHubClusterDetailsWithOptions(request, runtime);
}

model DescribeHubClusterKubeconfigRequest {
  clusterId?: string(name='ClusterId'),
  privateIpAddress?: boolean(name='PrivateIpAddress'),
}

model DescribeHubClusterKubeconfigResponseBody = {
  kubeconfig?: string(name='Kubeconfig'),
  requestId?: string(name='RequestId'),
}

model DescribeHubClusterKubeconfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHubClusterKubeconfigResponseBody(name='body'),
}

async function describeHubClusterKubeconfigWithOptions(request: DescribeHubClusterKubeconfigRequest, runtime: Util.RuntimeOptions): DescribeHubClusterKubeconfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.privateIpAddress)) {
    query['PrivateIpAddress'] = request.privateIpAddress;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeHubClusterKubeconfig',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeHubClusterKubeconfig(request: DescribeHubClusterKubeconfigRequest): DescribeHubClusterKubeconfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHubClusterKubeconfigWithOptions(request, runtime);
}

model DescribeHubClusterLogsRequest {
  clusterId?: string(name='ClusterId', description='集群ID'),
}

model DescribeHubClusterLogsResponseBody = {
  logs?: [ 
    {
      clusterId?: string(name='ClusterId'),
      clusterLog?: string(name='ClusterLog'),
      creationTime?: string(name='CreationTime'),
      logLevel?: string(name='LogLevel'),
    }
  ](name='Logs'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DescribeHubClusterLogsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHubClusterLogsResponseBody(name='body'),
}

async function describeHubClusterLogsWithOptions(request: DescribeHubClusterLogsRequest, runtime: Util.RuntimeOptions): DescribeHubClusterLogsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeHubClusterLogs',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeHubClusterLogs(request: DescribeHubClusterLogsRequest): DescribeHubClusterLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHubClusterLogsWithOptions(request, runtime);
}

model DescribeHubClustersResponseBody = {
  clusters?: [ 
    {
      apiServer?: {
        enabledPublic?: boolean(name='EnabledPublic'),
        loadBalancerId?: string(name='LoadBalancerId'),
      }(name='ApiServer'),
      clusterInfo?: {
        clusterId?: string(name='ClusterId'),
        clusterSpec?: string(name='ClusterSpec'),
        creationTime?: string(name='CreationTime'),
        errorMessage?: string(name='ErrorMessage'),
        name?: string(name='Name'),
        profile?: string(name='Profile'),
        regionId?: string(name='RegionId'),
        state?: string(name='State'),
        updateTime?: string(name='UpdateTime'),
        version?: string(name='Version'),
      }(name='ClusterInfo'),
      endpoints?: {
        intranetApiServerEndpoint?: string(name='IntranetApiServerEndpoint'),
        publicApiServerEndpoint?: string(name='PublicApiServerEndpoint'),
      }(name='Endpoints'),
      network?: {
        clusterDomain?: string(name='ClusterDomain'),
        securityGroupIDs?: [ string ](name='SecurityGroupIDs'),
        vSwitches?: [ string ](name='VSwitches'),
        vpcId?: string(name='VpcId'),
      }(name='Network'),
    }
  ](name='Clusters'),
  requestId?: string(name='RequestId'),
}

model DescribeHubClustersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHubClustersResponseBody(name='body'),
}

async function describeHubClustersWithOptions(runtime: Util.RuntimeOptions): DescribeHubClustersResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeHubClusters',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeHubClusters(): DescribeHubClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHubClustersWithOptions(runtime);
}

model DescribeManagedClustersRequest {
  clusterId?: string(name='ClusterId', description='集群ID'),
}

model DescribeManagedClustersResponseBody = {
  clusters?: [ 
    {
      cluster?: {
        clusterID?: string(name='ClusterID'),
        clusterSpec?: string(name='ClusterSpec'),
        clusterType?: string(name='ClusterType'),
        created?: string(name='Created'),
        currentVersion?: string(name='CurrentVersion'),
        initVersion?: string(name='InitVersion'),
        name?: string(name='Name'),
        profile?: string(name='Profile'),
        region?: string(name='Region'),
        resourceGroupId?: string(name='ResourceGroupId'),
        state?: string(name='State'),
        updated?: string(name='Updated'),
        vSwitchID?: string(name='VSwitchID'),
        vpcID?: string(name='VpcID'),
      }(name='Cluster'),
      status?: {
        message?: string(name='Message'),
        state?: string(name='State'),
      }(name='Status'),
    }
  ](name='Clusters'),
  requestId?: string(name='RequestId'),
}

model DescribeManagedClustersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeManagedClustersResponseBody(name='body'),
}

async function describeManagedClustersWithOptions(request: DescribeManagedClustersRequest, runtime: Util.RuntimeOptions): DescribeManagedClustersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeManagedClusters',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeManagedClusters(request: DescribeManagedClustersRequest): DescribeManagedClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeManagedClustersWithOptions(request, runtime);
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
      regionVpcEndpoint?: string(name='RegionVpcEndpoint'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRegions(): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(runtime);
}

model DetachClusterFromHubRequest {
  clusterId?: string(name='ClusterId'),
  clusterIds?: string(name='ClusterIds'),
}

model DetachClusterFromHubResponseBody = {
  clusterId?: string(name='ClusterId'),
  managedClusterIds?: [ string ](name='ManagedClusterIds'),
  requestId?: string(name='RequestId'),
}

model DetachClusterFromHubResponse = {
  headers: map[string]string(name='headers'),
  body: DetachClusterFromHubResponseBody(name='body'),
}

async function detachClusterFromHubWithOptions(request: DetachClusterFromHubRequest, runtime: Util.RuntimeOptions): DetachClusterFromHubResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.clusterIds)) {
    body['ClusterIds'] = request.clusterIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DetachClusterFromHub',
    version = '2022-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function detachClusterFromHub(request: DetachClusterFromHubRequest): DetachClusterFromHubResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachClusterFromHubWithOptions(request, runtime);
}

