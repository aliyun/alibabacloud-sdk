/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'adcp';
  @version = '2022-01-01';
  @endpointRule = 'central';
  @endpointMap = {
    cn-beijing = 'adcp.cn-beijing.aliyuncs.com',
    cn-zhangjiakou = 'adcp.cn-zhangjiakou.aliyuncs.com',
    cn-hangzhou = 'adcp.cn-hangzhou.aliyuncs.com',
    cn-shanghai = 'adcp.cn-shanghai.aliyuncs.com',
    cn-shenzhen = 'adcp.cn-shenzhen.aliyuncs.com',
    cn-heyuan = 'adcp.cn-heyuan.aliyuncs.com',
    cn-hongkong = 'adcp.cn-hongkong.aliyuncs.com',
    ap-northeast-1 = 'adcp.ap-northeast-1.aliyuncs.com',
    ap-southeast-1 = 'adcp.ap-southeast-1.aliyuncs.com',
    ap-southeast-5 = 'adcp.ap-southeast-5.aliyuncs.com',
    ap-south-1 = 'adcp.ap-south-1.aliyuncs.com',
    ap-southeast-2 = 'adcp.ap-southeast-2.aliyuncs.com',
    ap-southeast-3 = 'adcp.ap-southeast-3.aliyuncs.com',
    cn-chengdu = 'adcp-vpc.cn-chengdu.aliyuncs.com',
    cn-huhehaote = 'adcp.cn-huhehaote.aliyuncs.com',
    cn-qingdao = 'adcp.cn-qingdao.aliyuncs.com',
    cn-shanghai-finance-1 = 'adcp-vpc.cn-shanghai-finance-1.aliyuncs.com',
    cn-wulanchabu = 'adcp.cn-wulanchabu.aliyuncs.com',
    eu-central-1 = 'adcp.eu-central-1.aliyuncs.com',
    eu-west-1 = 'adcp-vpc.eu-west-1.aliyuncs.com',
    me-east-1 = 'adcp.me-east-1.aliyuncs.com',
    us-east-1 = 'adcp.us-east-1.aliyuncs.com',
    us-west-1 = 'adcp.us-west-1.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AttachClusterToHubRequest {
  attachToMesh?: boolean(name='AttachToMesh', position='Query'),
  clusterId: string(name='ClusterId', position='Query'),
  clusterIds: string(name='ClusterIds', position='Body'),
}

model AttachClusterToHubResponseBody = {
  clusterId?: string(name='ClusterId'),
  managedClusterIds?: [ string ](name='ManagedClusterIds'),
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model AttachClusterToHubResponse = {
  headers: map[string]string(name='headers'),
  body: AttachClusterToHubResponseBody(name='body'),
}

async function attachClusterToHub(request: AttachClusterToHubRequest): AttachClusterToHubResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachClusterToHub', 'POST', '/', 'json', true, 'form', request);
}

model CreateHubClusterRequest {
  apiServerPublicEip?: boolean(name='ApiServerPublicEip', position='Body'),
  auditLogEnabled?: boolean(name='AuditLogEnabled', position='Body'),
  isEnterpriseSecurityGroup?: boolean(name='IsEnterpriseSecurityGroup', description='是否企业安全组', position='Body'),
  name?: string(name='Name', description='集群名称', position='Body'),
  profile?: string(name='Profile', description='集群配置', position='Body'),
  regionId: string(name='RegionId', position='Body'),
  vSwitches: string(name='VSwitches', position='Body'),
  vpcId: string(name='VpcId', position='Body'),
}

model CreateHubClusterResponseBody = {
  clusterId?: string(name='ClusterId'),
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model CreateHubClusterResponse = {
  headers: map[string]string(name='headers'),
  body: CreateHubClusterResponseBody(name='body'),
}

async function createHubCluster(request: CreateHubClusterRequest): CreateHubClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateHubCluster', 'POST', '/', 'json', true, 'form', request);
}

model DeleteHubClusterRequest {
  clusterId: string(name='ClusterId', position='Query'),
  force?: boolean(name='Force', position='Query'),
}

model DeleteHubClusterResponseBody = {
  clusterId?: string(name='ClusterId'),
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model DeleteHubClusterResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteHubClusterResponseBody(name='body'),
}

async function deleteHubCluster(request: DeleteHubClusterRequest): DeleteHubClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteHubCluster', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHubClusterDetailsRequest {
  clusterId: string(name='ClusterId', description='集群ID', position='Query'),
}

model DescribeHubClusterDetailsResponseBody = {
  cluster?: {
    apiServer?: {
      apiServerEipId?: string(name='ApiServerEipId'),
      enabledPublic?: boolean(name='EnabledPublic'),
      loadBalancerId?: string(name='LoadBalancerId'),
    }(name='ApiServer'),
    clusterInfo?: {
      clusterId?: string(name='ClusterId'),
      clusterSpec?: string(name='ClusterSpec'),
      creationTime?: string(name='CreationTime'),
      errorMessage?: string(name='ErrorMessage'),
      name?: string(name='Name'),
      profile?: string(name='Profile'),
      regionId?: string(name='RegionId'),
      state?: string(name='State'),
      updateTime?: string(name='UpdateTime'),
      version?: string(name='Version'),
    }(name='ClusterInfo'),
    conditions?: [ 
      {
        message?: string(name='Message'),
        reason?: string(name='Reason'),
        status?: string(name='Status'),
        type?: string(name='Type'),
      }
    ](name='Conditions'),
    endpoints?: {
      intranetApiServerEndpoint?: string(name='IntranetApiServerEndpoint'),
      publicApiServerEndpoint?: string(name='PublicApiServerEndpoint'),
    }(name='Endpoints'),
    logConfig?: {
      enableLog?: boolean(name='EnableLog'),
      logProject?: string(name='LogProject'),
      logStoreTTL?: string(name='LogStoreTTL'),
    }(name='LogConfig'),
    meshConfig?: {
      enableMesh?: boolean(name='EnableMesh'),
      meshId?: string(name='MeshId'),
    }(name='MeshConfig'),
    network?: {
      clusterDomain?: string(name='ClusterDomain'),
      IPStack?: string(name='IPStack'),
      securityGroupIDs?: [ string ](name='SecurityGroupIDs'),
      vSwitches?: [ string ](name='VSwitches'),
      vpcId?: string(name='VpcId'),
    }(name='Network'),
  }(name='Cluster'),
  requestId?: string(name='RequestId'),
}

model DescribeHubClusterDetailsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHubClusterDetailsResponseBody(name='body'),
}

async function describeHubClusterDetails(request: DescribeHubClusterDetailsRequest): DescribeHubClusterDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHubClusterDetails', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHubClusterKubeconfigRequest {
  clusterId: string(name='ClusterId', position='Query'),
  privateIpAddress?: boolean(name='PrivateIpAddress', position='Query'),
}

model DescribeHubClusterKubeconfigResponseBody = {
  kubeconfig?: string(name='Kubeconfig'),
  requestId?: string(name='RequestId'),
}

model DescribeHubClusterKubeconfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHubClusterKubeconfigResponseBody(name='body'),
}

async function describeHubClusterKubeconfig(request: DescribeHubClusterKubeconfigRequest): DescribeHubClusterKubeconfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHubClusterKubeconfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHubClusterLogsRequest {
  clusterId: string(name='ClusterId', description='集群ID', position='Query'),
}

model DescribeHubClusterLogsResponseBody = {
  logs?: [ 
    {
      clusterId?: string(name='ClusterId'),
      clusterLog?: string(name='ClusterLog'),
      creationTime?: string(name='CreationTime'),
      logLevel?: string(name='LogLevel'),
    }
  ](name='Logs'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DescribeHubClusterLogsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHubClusterLogsResponseBody(name='body'),
}

async function describeHubClusterLogs(request: DescribeHubClusterLogsRequest): DescribeHubClusterLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHubClusterLogs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHubClustersRequest {
  profile?: string(name='Profile', position='Query'),
}

model DescribeHubClustersResponseBody = {
  clusters?: [ 
    {
      apiServer?: {
        apiServerEipId?: string(name='ApiServerEipId'),
        enabledPublic?: boolean(name='EnabledPublic'),
        loadBalancerId?: string(name='LoadBalancerId'),
      }(name='ApiServer'),
      clusterInfo?: {
        clusterId?: string(name='ClusterId'),
        clusterSpec?: string(name='ClusterSpec'),
        creationTime?: string(name='CreationTime'),
        errorMessage?: string(name='ErrorMessage'),
        name?: string(name='Name'),
        profile?: string(name='Profile'),
        regionId?: string(name='RegionId'),
        state?: string(name='State'),
        updateTime?: string(name='UpdateTime'),
        version?: string(name='Version'),
      }(name='ClusterInfo'),
      conditions?: [ 
        {
          message?: string(name='Message'),
          reason?: string(name='Reason'),
          status?: string(name='Status'),
          type?: string(name='Type'),
        }
      ](name='Conditions'),
      endpoints?: {
        intranetApiServerEndpoint?: string(name='IntranetApiServerEndpoint'),
        publicApiServerEndpoint?: string(name='PublicApiServerEndpoint'),
      }(name='Endpoints'),
      logConfig?: {
        enableLog?: boolean(name='EnableLog'),
        logProject?: string(name='LogProject'),
        logStoreTTL?: string(name='LogStoreTTL'),
      }(name='LogConfig'),
      meshConfig?: {
        enableMesh?: boolean(name='EnableMesh'),
        meshId?: string(name='MeshId'),
      }(name='MeshConfig'),
      network?: {
        clusterDomain?: string(name='ClusterDomain'),
        securityGroupIDs?: [ string ](name='SecurityGroupIDs'),
        vSwitches?: [ string ](name='VSwitches'),
        vpcId?: string(name='VpcId'),
      }(name='Network'),
    }
  ](name='Clusters'),
  requestId?: string(name='RequestId'),
}

model DescribeHubClustersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHubClustersResponseBody(name='body'),
}

async function describeHubClusters(request: DescribeHubClustersRequest): DescribeHubClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHubClusters', 'POST', '/', 'json', false, 'json', request);
}

model DescribeManagedClustersRequest {
  clusterId: string(name='ClusterId', description='集群ID', position='Query'),
}

model DescribeManagedClustersResponseBody = {
  clusters?: [ 
    {
      cluster?: {
        clusterID?: string(name='ClusterID'),
        clusterSpec?: string(name='ClusterSpec'),
        clusterType?: string(name='ClusterType'),
        created?: string(name='Created'),
        currentVersion?: string(name='CurrentVersion'),
        initVersion?: string(name='InitVersion'),
        name?: string(name='Name'),
        profile?: string(name='Profile'),
        region?: string(name='Region'),
        resourceGroupId?: string(name='ResourceGroupId'),
        state?: string(name='State'),
        updated?: string(name='Updated'),
        vSwitchID?: string(name='VSwitchID'),
        vpcID?: string(name='VpcID'),
      }(name='Cluster'),
      meshStatus?: {
        inMesh?: boolean(name='InMesh'),
      }(name='MeshStatus'),
      status?: {
        message?: string(name='Message'),
        state?: string(name='State'),
      }(name='Status'),
    }
  ](name='Clusters'),
  requestId?: string(name='RequestId'),
}

model DescribeManagedClustersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeManagedClustersResponseBody(name='body'),
}

async function describeManagedClusters(request: DescribeManagedClustersRequest): DescribeManagedClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeManagedClusters', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  language?: string(name='Language', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName'),
      regionId?: string(name='RegionId'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'GET', '/', 'json', false, 'json', request);
}

model DetachClusterFromHubRequest {
  clusterId: string(name='ClusterId', position='Query'),
  clusterIds: string(name='ClusterIds', position='Body'),
  detachFromMesh?: boolean(name='DetachFromMesh', position='Query'),
}

model DetachClusterFromHubResponseBody = {
  clusterId?: string(name='ClusterId'),
  managedClusterIds?: [ string ](name='ManagedClusterIds'),
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model DetachClusterFromHubResponse = {
  headers: map[string]string(name='headers'),
  body: DetachClusterFromHubResponseBody(name='body'),
}

async function detachClusterFromHub(request: DetachClusterFromHubRequest): DetachClusterFromHubResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachClusterFromHub', 'POST', '/', 'json', true, 'form', request);
}

model UpdateHubClusterFeatureRequest {
  apiServerEipId?: string(name='ApiServerEipId', position='Query'),
  auditLogEnabled?: boolean(name='AuditLogEnabled', position='Query'),
  clusterId: string(name='ClusterId', description='集群ID', position='Query'),
  deletionProtection?: boolean(name='DeletionProtection', position='Query'),
  enableArgoCD?: boolean(name='EnableArgoCD', position='Query'),
  enableMesh?: boolean(name='EnableMesh', position='Query'),
  name?: string(name='Name', position='Query'),
  publicApiServerEnabled?: boolean(name='PublicApiServerEnabled', position='Query'),
}

model UpdateHubClusterFeatureResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateHubClusterFeatureResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateHubClusterFeatureResponseBody(name='body'),
}

async function updateHubClusterFeature(request: UpdateHubClusterFeatureRequest): UpdateHubClusterFeatureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateHubClusterFeature', 'POST', '/', 'json', false, 'json', request);
}

