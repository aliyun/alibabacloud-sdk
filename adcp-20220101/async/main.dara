/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'adcp';
  @version = '2022-01-01';
  @endpointRule = 'central';
  @endpointMap = {
    cn-beijing = 'adcp.cn-beijing.aliyuncs.com',
    cn-zhangjiakou = 'adcp.cn-zhangjiakou.aliyuncs.com',
    cn-hangzhou = 'adcp.cn-hangzhou.aliyuncs.com',
    cn-shanghai = 'adcp.cn-shanghai.aliyuncs.com',
    cn-shenzhen = 'adcp.cn-shenzhen.aliyuncs.com',
    cn-heyuan = 'adcp.cn-heyuan.aliyuncs.com',
    cn-hongkong = 'adcp.cn-hongkong.aliyuncs.com',
    ap-northeast-1 = 'adcp.ap-northeast-1.aliyuncs.com',
    ap-southeast-1 = 'adcp.ap-southeast-1.aliyuncs.com',
    ap-southeast-5 = 'adcp.ap-southeast-5.aliyuncs.com',
    ap-south-1 = 'adcp.ap-south-1.aliyuncs.com',
    ap-southeast-2 = 'adcp.ap-southeast-2.aliyuncs.com',
    ap-southeast-3 = 'adcp.ap-southeast-3.aliyuncs.com',
    cn-chengdu = 'adcp-vpc.cn-chengdu.aliyuncs.com',
    cn-huhehaote = 'adcp.cn-huhehaote.aliyuncs.com',
    cn-qingdao = 'adcp.cn-qingdao.aliyuncs.com',
    cn-shanghai-finance-1 = 'adcp-vpc.cn-shanghai-finance-1.aliyuncs.com',
    cn-wulanchabu = 'adcp.cn-wulanchabu.aliyuncs.com',
    eu-central-1 = 'adcp.eu-central-1.aliyuncs.com',
    eu-west-1 = 'adcp-vpc.eu-west-1.aliyuncs.com',
    me-east-1 = 'adcp.me-east-1.aliyuncs.com',
    us-east-1 = 'adcp.us-east-1.aliyuncs.com',
    us-west-1 = 'adcp.us-west-1.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AttachClusterToHubRequest {
  attachToMesh?: boolean(name='AttachToMesh', description='Specifies whether to associate the clusters with Service Mesh (ASM) instances. Valid values:', example='true', position='Query'),
  clusterId: string(name='ClusterId', description='The ID of the master instance.', example='cd08d62e6506a4fa5a8c44c19d0fc****', position='Query'),
  clusterIds: string(name='ClusterIds', description='A JSON string that can be parsed into a string array. The string specifies the clusters that you want to associate with the master instance.', example='["cdea10134be464ba4acb36cc831a6****"]', position='Body'),
}

model AttachClusterToHubResponseBody = {
  clusterId?: string(name='ClusterId', description='The ID of the master instance.', example='c8e28143817db4b039b8548d7c899****'),
  managedClusterIds?: [ string ](name='ManagedClusterIds', description='A list of the IDs of the clusters that you want to associate with the master instance.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EA06613B-37A3-549E-BAE0-E4AD8A6E93D7'),
  taskId?: string(name='TaskId', description='The ID of the task.', example='T-623a96b7bbeaac074b00****'),
}

model AttachClusterToHubResponse = {
  headers: map[string]string(name='headers'),
  body: AttachClusterToHubResponseBody(name='body'),
}

async function attachClusterToHub(request: AttachClusterToHubRequest): AttachClusterToHubResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachClusterToHub', 'POST', '/', 'json', true, 'form', request);
}

model CreateHubClusterRequest {
  apiServerPublicEip?: boolean(name='ApiServerPublicEip', description='Specifies whether to use a public IP address to expose the API server. Valid values: - true: uses a public IP address to expose the API server. - true: uses an internal IP address to expose the API server.', example='true', position='Body'),
  argoServerEnabled?: boolean(name='ArgoServerEnabled', position='Body'),
  auditLogEnabled?: boolean(name='AuditLogEnabled', description='Specifies whether to enable audit logs. Valid values: - true: enables audit logs. - false: disables audit logs.', example='false', position='Body'),
  isEnterpriseSecurityGroup?: boolean(name='IsEnterpriseSecurityGroup', description='Specifies whether the security group is an advanced security group.', example='false', position='Body'),
  name?: string(name='Name', description='The name of the master instance.', example='ack-demo', position='Body'),
  priceLimit?: string(name='PriceLimit', position='Body'),
  profile?: string(name='Profile', description='Scenario-oriented master control type. The value can be:

- `Default`: Standard scenario Master instance.
- `XFlow`: Workflow scenario master instance.

Default Value: `Default`.', example='Default', position='Body'),
  regionId: string(name='RegionId', description='The ID of the region. You can call the DescribeRegions operation to query available regions.', example='cn-beijing', position='Body'),
  vSwitches: string(name='VSwitches', description='The ID of the vSwitch.', example='["vsw-2zeaijsas4zkzz81xm***"]', position='Body'),
  vpcId: string(name='VpcId', description='The ID of the virtual private cloud (VPC) to which the master instance belongs. You can call the DescribeVpcs operation to query available VPCs.', example='vpc-f8zin0jscsr84s96tg***', position='Body'),
  workflowScheduleMode?: string(name='WorkflowScheduleMode', position='Body'),
}

model CreateHubClusterResponseBody = {
  clusterId?: string(name='ClusterId', description='The ID of the master instance.', example='c09946603cd764dac96135f51d1ba****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='62F5AA2B-A2C9-5135-BCE2-C21670998D01'),
  taskId?: string(name='TaskId', description='The ID of the task.', example='T-62523eda841eca071400****'),
}

model CreateHubClusterResponse = {
  headers: map[string]string(name='headers'),
  body: CreateHubClusterResponseBody(name='body'),
}

async function createHubCluster(request: CreateHubClusterRequest): CreateHubClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateHubCluster', 'POST', '/', 'json', true, 'form', request);
}

model DeleteHubClusterRequest {
  clusterId: string(name='ClusterId', description='The ID of the master instance.', example='cd90dd24a86fd42f895a1b77df620****', position='Query'),
  force?: boolean(name='Force', description='Specifies whether to forcefully delete the master instance. Valid values: - true: forcefully delete the master instance. - false: does not forcefully delete the master instance. Default value: false.', example='false', position='Query'),
  retainResources?: [ string ](name='RetainResources', shrink='json', position='Query'),
}

model DeleteHubClusterResponseBody = {
  clusterId?: string(name='ClusterId', description='The ID of the master instance.', example='cb09fda0dc2f94a8397c76638c7ec****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7A827E32-6D24-5757-B3FD-D9396495FBDC'),
  taskId?: string(name='TaskId', description='The ID of the master instance.', example='T-623a96b7bbeaac074b00****'),
}

model DeleteHubClusterResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteHubClusterResponseBody(name='body'),
}

async function deleteHubCluster(request: DeleteHubClusterRequest): DeleteHubClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteHubCluster', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHubClusterDetailsRequest {
  clusterId: string(name='ClusterId', description='The ID of the master instance.', example='c676decda7b8148d69a9aba751877b9d3', position='Query'),
}

model DescribeHubClusterDetailsResponseBody = {
  cluster?: {
    apiServer?: {
      apiServerEipId?: string(name='ApiServerEipId', description='The ID of the elastic IP address (EIP).', example='eip-abc'),
      enabledPublic?: boolean(name='EnabledPublic', description='Indicates whether a public endpoint is used to expose the API server. Valid values: - true: a public endpoint is used to expose the API server. - false: no public endpoint is used to expose the API server.', example='true'),
      loadBalancerId?: string(name='LoadBalancerId', description='The ID of the Server Load Balancer (SLB) instance.', example='lb-hp3ioqbfeq37h13rwe***'),
    }(name='ApiServer', description='Information about the API server of the master instance.'),
    clusterInfo?: {
      clusterId?: string(name='ClusterId', description='The ID of the master instance.', example='cb09fda0dc2f94a8397c76638c7ecf***'),
      clusterSpec?: string(name='ClusterSpec', description='The specification of the master instance. Valid values: - ack.pro.small: ACK Pro', example='ack.pro.small'),
      creationTime?: string(name='CreationTime', description='The time when the master instance was created.', example='2022-03-23T06:22:28Z'),
      errorMessage?: string(name='ErrorMessage', description='The error message that is returned when the system fails to create the master instance.', example='The specified product does not exist.'),
      name?: string(name='Name', description='The name of the master instance.', example='ackone-heyuan'),
      profile?: string(name='Profile', description='The configurations of the master instance.', example='Default'),
      regionId?: string(name='RegionId', description='The ID of the region in which the master instance resides.', example='cn-beijing'),
      state?: string(name='State', description='The status of the master instance. Valid values: - initial: The master instance is being initialized. - failed: The master instance failed to be created. - running: The master instance is running. - inactive: The master instance is inactive. - deleting: The master instance is being deleted. - delete_failed: The master instance failed to be deleted. - deleted: The master instance is deleted.', example='running'),
      updateTime?: string(name='UpdateTime', description='The time when the master instance was updated.', example='2022-03-21T02:51:35.542Z'),
      version?: string(name='Version', description='The Kubernetes version of the master instance.', example='1.22.3-aliyun.1'),
    }(name='ClusterInfo', description='The details about the master instance.'),
    conditions?: [ 
      {
        message?: string(name='Message', description='The error message of the deletion condition.', example='Successful'),
        reason?: string(name='Reason', description='The reason for the deletion condition.', example='Successful'),
        status?: string(name='Status', description='The status of the deletion condition. Valid values:
- True: The master instance cannot be deleted.
- False: The master instance can be deleted.
- Unknow: Whether the master instance can be deleted is unknown.', example='True'),
        type?: string(name='Type', description='The type of deletion condition.', example='DeletionProtection'),
      }
    ](name='Conditions', description='The list of the deletion conditions of the master instance.'),
    endpoints?: {
      intranetApiServerEndpoint?: string(name='IntranetApiServerEndpoint', description='The internal endpoint of the API server of the master instance.', example='https://172.16.6.**:6443'),
      publicApiServerEndpoint?: string(name='PublicApiServerEndpoint', description='The public endpoint of the API server of the master instance.', example='https://123.57.21.***:6443'),
    }(name='Endpoints', description='The endpoint of the master instance.'),
    logConfig?: {
      enableLog?: boolean(name='EnableLog', description='Indicates whether audit logs are enabled. Valid values: - true: audit logs are enabled. - false: audit logs are disabled.', example='false'),
      logProject?: string(name='LogProject', description='The name of the Log Service project.', example='k8s-log-abc'),
      logStoreTTL?: string(name='LogStoreTTL', description='The retention period of the logs.', example='7'),
    }(name='LogConfig', description='The logging configuration.'),
    meshConfig?: {
      enableMesh?: boolean(name='EnableMesh', description='Indicates whether ASM is enabled. Valid values: - true: ASM is enabled. - false: ASM is disabled.', example='false'),
      meshId?: string(name='MeshId', description='The ID of the ASM instance.', example='cb09fda0dc2f94a8397c76638c7ecf***'),
    }(name='MeshConfig', description='The Service Mesh (ASM) configurations.'),
    network?: {
      clusterDomain?: string(name='ClusterDomain', description='The domain name of the master instance.', example='cluster.local'),
      IPStack?: string(name='IPStack', description='The IP version that is supported by the master instance. Valid values: - ipv4: IPv4. - ipv6: IPv6. - dual: IPv4 and IPv6.', example='ipv4'),
      securityGroupIDs?: [ string ](name='SecurityGroupIDs', description='The ID of the associated security group.'),
      vSwitches?: [ string ](name='VSwitches', description='A list of the vSwitches that are used by the master instance.'),
      vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC) in which the master instance resides.', example='vpc-f8ziib1019r9o0hdv2***'),
    }(name='Network', description='The network configurations of the master instance.'),
    workflowConfig?: {
      argoServerEnabled?: boolean(name='ArgoServerEnabled'),
      priceLimit?: string(name='PriceLimit'),
      workflowScheduleMode?: string(name='WorkflowScheduleMode'),
      workflowUnits?: [ 
        {
          regionId?: string(name='RegionId'),
          vSwitches?: [ 
            {
              vswitchId?: string(name='VswitchId'),
              zoneId?: string(name='ZoneId'),
            }
          ](name='VSwitches'),
          vpcId?: string(name='VpcId'),
        }
      ](name='WorkflowUnits'),
    }(name='WorkflowConfig'),
  }(name='Cluster', description='The details about the master instance.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='52C1B7DF-96C1-5214-97B6-1B0859FEAFE5'),
}

model DescribeHubClusterDetailsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHubClusterDetailsResponseBody(name='body'),
}

async function describeHubClusterDetails(request: DescribeHubClusterDetailsRequest): DescribeHubClusterDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHubClusterDetails', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHubClusterKubeconfigRequest {
  clusterId: string(name='ClusterId', description='The ID of the master instance.', example='c102fe5f1ee5d4c87a68121a77d8b****', position='Query'),
  privateIpAddress?: boolean(name='PrivateIpAddress', description='Specifies whether to obtain the credential that is used to connect to the master instance over the internal network. Valid values: - `true`: obtains only the credential that is used to access the master instance over the internal network. - `false`: obtains only the credential that is used to access the master instance over the Internet. Default value: `false`.', example='false', position='Query'),
}

model DescribeHubClusterKubeconfigResponseBody = {
  kubeconfig?: string(name='Kubeconfig', description='The content of the kubeconfig file of the master instance.', example='"\\napiVersion: v1\\nclusters:\\n- cluster:\\n server: https://172.16.11.***:6443\\n certificate-authority-data: LS0tLS1CRU=...\\n name: kubernetes\\ncontexts:\\n- context:\\n cluster: kubernetes\\n user: \\"kubernetes-a****\\"\\n name: kubernetes-admin-cc2cbf5802bec4bfa9fae4014d8c****\\ncurrent-context: kubernetes-admin-cc2cbf5802bec4bfa9fae4014d8c9****\\nkind: Config\\npreferences: {}\\nusers:\\n- name: \\"kubernetes-admin\\"\\n user:\\n client-certificate-data: LS0tLS1CRU...\\n client-key-data: LS0tCg==...\\n"'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5BE4C329-DCC2-5B61-8F66-112B7D7FC712'),
}

model DescribeHubClusterKubeconfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHubClusterKubeconfigResponseBody(name='body'),
}

async function describeHubClusterKubeconfig(request: DescribeHubClusterKubeconfigRequest): DescribeHubClusterKubeconfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHubClusterKubeconfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHubClusterLogsRequest {
  clusterId: string(name='ClusterId', description='The ID of the master instance.', example='c9cb1d933b2ab47ff9cd25571477dc8f2', position='Query'),
}

model DescribeHubClusterLogsResponseBody = {
  logs?: [ 
    {
      clusterId?: string(name='ClusterId', description='The ID of the master instance.', example='c102fe5f1ee5d4c87a68121a77d8b0f38'),
      clusterLog?: string(name='ClusterLog', description='A log of the master instance.', example='Cluster Created'),
      creationTime?: string(name='CreationTime', description='The time when the log was created. Format: <i>yyyy-mm-dd</i>t<i>hh:mm:ss</i>z (UTC time).', example='2021-12-02T11:48:15+08:00'),
      logLevel?: string(name='LogLevel', description='The severity level of the log. Valid values: - error: errors. - warn: warnings. - info: information.', example='INFO'),
    }
  ](name='Logs', description='Brief information about operation logs.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='661192D7-25A6-54C2-B643-1129CB7D2768'),
}

model DescribeHubClusterLogsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHubClusterLogsResponseBody(name='body'),
}

async function describeHubClusterLogs(request: DescribeHubClusterLogsRequest): DescribeHubClusterLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHubClusterLogs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHubClustersRequest {
  profile?: string(name='Profile', description='The scenario where master instances are used. Valid values:

*   `Default`: standard scenarios.
*   `XFlow`: workflow scenarios.

Default value: `Default`.', example='Default', position='Query'),
}

model DescribeHubClustersResponseBody = {
  clusters?: [ 
    {
      apiServer?: {
        apiServerEipId?: string(name='ApiServerEipId', description='The ID of the elastic IP address (EIP).', example='eip-xxx'),
        enabledPublic?: boolean(name='EnabledPublic', description='Indicates whether the API server is accessible over the Internet. Valid values:

*   true: The API server is accessible over the Internet.
*   false: The API server is inaccessible over the Internet.', example='true'),
        loadBalancerId?: string(name='LoadBalancerId', description='The ID of the Server Load Balancer (SLB) instance that is associated with the Kubernetes API server.', example='lb-bp1qyp4l6bscqxw69****'),
      }(name='ApiServer', description='The details of the Kubernetes API server.'),
      clusterInfo?: {
        clusterId?: string(name='ClusterId', description='The ID of the master instance.', example='c2d3e0121ea214b438010502a8019****'),
        clusterSpec?: string(name='ClusterSpec', description='The specification of the master instance.

*   ack.pro.small: ACK Pro cluster', example='ack.pro.small'),
        creationTime?: string(name='CreationTime', description='The time when the master instance was created.', example='2021-11-05T10:25:48Z'),
        errorMessage?: string(name='ErrorMessage', description='The error message returned when the master instance failed to be created.', example='Success'),
        name?: string(name='Name', description='The name of the master instance.', example='ackone-heyuan'),
        profile?: string(name='Profile', description='The configurations of the master instance.', example='Default'),
        regionId?: string(name='RegionId', description='The ID of the region in which the master instance resides.', example='cn-beijing'),
        state?: string(name='State', description='The status of the master instance. Valid values:

*   initial: The master instance is being initialized.
*   failed: The master instance failed to be created.
*   running: The master instance is running
*   inactive: The master instance is pending.
*   deleting: The master instance is being deleted.
*   delete_failed: The master instance failed to be deleted.
*   deleted: The master instance is deleted.', example='running'),
        updateTime?: string(name='UpdateTime', description='The last time when the master instance was updated.', example='2021-09-02T13:39:50Z'),
        version?: string(name='Version', description='The Kubernetes version of the master instance.', example='1.22.3-aliyun.1'),
      }(name='ClusterInfo', description='The details of the master instance.'),
      conditions?: [ 
        {
          message?: string(name='Message', description='The error message of the deletion condition.', example='Successful!'),
          reason?: string(name='Reason', description='The reason for the deletion condition.', example='Successful'),
          status?: string(name='Status', description='The status of the deletion condition. Valid values:

*   True: The master instance cannot be deleted.
*   False: The master instance can be deleted.
*   Unknow: Whether the master instance can be deleted is unknown.', example='True'),
          type?: string(name='Type', description='The type of deletion condition.', example='DeletionProtection'),
        }
      ](name='Conditions', description='The list of the deletion conditions of the master instance.'),
      endpoints?: {
        intranetApiServerEndpoint?: string(name='IntranetApiServerEndpoint', description='The internal endpoint of the API server.', example='https://172.16.6.**:6443'),
        publicApiServerEndpoint?: string(name='PublicApiServerEndpoint', description='The public endpoint of the API server.', example='https://123.57.21.***:6443'),
      }(name='Endpoints', description='The endpoint of the master instance.'),
      logConfig?: {
        enableLog?: boolean(name='EnableLog', description='Indicates whether audit logging is enabled. Valid values:

*   true: Audit logging is enabled.
*   false: Audit logging is disabled.', example='true'),
        logProject?: string(name='LogProject', description='The name of the project of Log Service.', example='audit-log-abc'),
        logStoreTTL?: string(name='LogStoreTTL', description='The number of days that logs are retained by Log Service.', example='7'),
      }(name='LogConfig', description='The logging configurations.'),
      meshConfig?: {
        enableMesh?: boolean(name='EnableMesh', description='Indicates whether ASM is enabled. Valid values:

*   true: ASM is enabled.
*   false: ASM is disabled.', example='false'),
        meshId?: string(name='MeshId', description='The ID of the ASM instance.', example='c2d3e0121ea214b438010502a8019****'),
      }(name='MeshConfig', description='The configurations of Alibaba Cloud Service Mesh (ASM).'),
      network?: {
        clusterDomain?: string(name='ClusterDomain', description='The domain name of the master instance.', example='cluster.local'),
        securityGroupIDs?: [ string ](name='SecurityGroupIDs', description='The security group IDs of the master instance.'),
        vSwitches?: [ string ](name='VSwitches', description='The IDs of the vSwitches to which the master instance is connected.'),
        vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC) to which the master instance belongs.', example='vpc-2zeusrwi7c2mlww4a****'),
      }(name='Network', description='The network configurations of the master instance.'),
    }
  ](name='Clusters', description='The list of the master instances returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2D676EFC-8C04-5CCE-A08E-BB97D24B47E8'),
}

model DescribeHubClustersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHubClustersResponseBody(name='body'),
}

async function describeHubClusters(request: DescribeHubClustersRequest): DescribeHubClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHubClusters', 'POST', '/', 'json', false, 'json', request);
}

model DescribeManagedClustersRequest {
  clusterId: string(name='ClusterId', description='The ID of the master instance.', example='c2f41fd4599454a9c9ad8b3daafe873ad', position='Query'),
}

model DescribeManagedClustersResponseBody = {
  clusters?: [ 
    {
      cluster?: {
        clusterID?: string(name='ClusterID', description='The ID of the master instance.', example='c2f41fd4599454a9c9ad8b3daafe873ad'),
        clusterSpec?: string(name='ClusterSpec', description='The specification of the master instance. Valid values: - ack.pro.small: ACK Pro.', example='ack.pro.small'),
        clusterType?: string(name='ClusterType', description='The type of the master instance.', example='One'),
        created?: string(name='Created', description='The time when the master instance was created.', example='2022-03-23T06:22:28Z'),
        currentVersion?: string(name='CurrentVersion', description='The current Kubernetes version of the master instance.', example='1.22.3-aliyun.1'),
        initVersion?: string(name='InitVersion', description='The original Kubernetes version of the master instance.', example='1.20.4-aliyun.1'),
        name?: string(name='Name', description='The name of the master instance.', example='ackone-heyuan'),
        profile?: string(name='Profile', description='The name of the master instance.', example='Default'),
        region?: string(name='Region', description='The region in which the master instance resides.', example='cn-hangzhou'),
        resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmx7o7ewyqcby'),
        state?: string(name='State', description='The status of the associated clusters. Valid values: - initial: The associated clusters are being initialized. - failed: The associated clustersfailed to be created. - running: The associated clusters are running. - inactive: The associated clusters are inactive. - deleting: The associated clusters are being deleted. - deleted: The associated clusters are deleted.', example='running'),
        updated?: string(name='Updated', description='The time when the master instance was updated.', example='2022-03-23T06:22:28Z'),
        vSwitchID?: string(name='VSwitchID', description='The ID of the vSwitch.', example='vsw-m5e0pbkgmhvzecf7enfym'),
        vpcID?: string(name='VpcID', description='VPC ID.', example='vpc-bp1fhizs9fxuvit06zeb9'),
      }(name='Cluster', description='The name of the master instance.'),
      meshStatus?: {
        inMesh?: boolean(name='InMesh', description='Indicates whether the clusters are associated with ASM instances. Valid values: - true: The clusters are associated with ASM instances. - false: The clusters are not associated with ASM instances.', example='true'),
      }(name='MeshStatus', description='The status of the association between the clusters and Service Mesh (ASM).'),
      status?: {
        message?: string(name='Message', description='The status information.', example='SUCCESS'),
        state?: string(name='State', description='The status of the association between the clusters and the master instance. Valid values: - Installing: The clusters are being associated with the master instance. - Successed: The clusters are associated with the master instance. - Failed: The clusters failed to be associated with the master instance. - Deleting: The clusters are being disassociated from the master instance. - Deleted: The clusters are disassociated from the master instance.', example='Successed'),
      }(name='Status', description='The status of the association between the clusters and the master instance.'),
    }
  ](name='Clusters', description='Information about the master instance.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BDA85C7A-FC81-56C4-9BC2-9112EE970059'),
}

model DescribeManagedClustersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeManagedClustersResponseBody(name='body'),
}

async function describeManagedClusters(request: DescribeManagedClustersRequest): DescribeManagedClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeManagedClusters', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  language?: string(name='Language', description='The language. Valid values: zh, en, and jp.', example='zh', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName', description='The name of the region.', example='The name of the region.'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-beijing'),
    }
  ](name='Regions', description='A list of available regions that are returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C0EE05F4-6C1D-5993-B028-B569F9ED6B51'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'GET', '/', 'json', false, 'json', request);
}

model DescribeUserPermissionsRequest {
  userId: string(name='UserId', example='21175****', position='Query'),
}

model DescribeUserPermissionsResponseBody = {
  permissions?: [ 
    {
      resourceId?: string(name='ResourceId', example='cffef3c9c7ba145b083292942a2c3****'),
      resourceType?: string(name='ResourceType', example='cluster'),
      roleName?: string(name='RoleName', example='view'),
      roleType?: string(name='RoleType', example='dev'),
    }
  ](name='Permissions'),
  requestId?: string(name='RequestId', description='Id of the request', example='EA06613B-37A3-549E-BAE0-E4AD8A6E93D7'),
}

model DescribeUserPermissionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserPermissionsResponseBody(name='body'),
}

async function describeUserPermissions(request: DescribeUserPermissionsRequest): DescribeUserPermissionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUserPermissions', 'POST', '/', 'json', false, 'json', request);
}

model DetachClusterFromHubRequest {
  clusterId: string(name='ClusterId', description='The ID of the master instance.', example='cb09fda0dc2f94a8397c76638c7ec****', position='Query'),
  clusterIds: string(name='ClusterIds', description='A JSON string that can be parsed into a string array. The string specifies the clusters that you want to disassociate from the master instance.', example='["c1c731554c1ec4a1ca9bb690ff9ed****"]', position='Body'),
  detachFromMesh?: boolean(name='DetachFromMesh', description='Specifies whether to only disassociate the clusters from Service Mesh (ASM) instances. Valid values: - true: only disassociates the clusters from ASM instances. - false: disassociates the clusters from the master instance and ASM instances.', example='false', position='Query'),
}

model DetachClusterFromHubResponseBody = {
  clusterId?: string(name='ClusterId', description='The ID of the master instance.', example='cc490b1e67ccc43a784727f29f33e****'),
  managedClusterIds?: [ string ](name='ManagedClusterIds', description='The IDs of the clusters that are disassociated from the master instance.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4412F213-DBCD-5D1B-A9A1-F6C26C6C19D9'),
  taskId?: string(name='TaskId', description='The ID of the task.', example='T-623a96b7bbeaac074b00****'),
}

model DetachClusterFromHubResponse = {
  headers: map[string]string(name='headers'),
  body: DetachClusterFromHubResponseBody(name='body'),
}

async function detachClusterFromHub(request: DetachClusterFromHubRequest): DetachClusterFromHubResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachClusterFromHub', 'POST', '/', 'json', true, 'form', request);
}

model GrantUserPermissionsRequest {
  permissions?: [ 
    {
      clusterId?: string(name='ClusterId', example='cf67bdb0ffcb349ecabc1ca70da78****'),
      namespace?: string(name='Namespace', example='test'),
      roleName: string(name='RoleName', example='dev'),
      roleType: string(name='RoleType', example='cluster'),
    }
  ](name='Permissions', shrink='json', position='Query'),
  userId: string(name='UserId', example='2367****', position='Query'),
}

model GrantUserPermissionsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='4412F213-DBCD-5D1B-A9A1-F6C26C6C19D9'),
}

model GrantUserPermissionsResponse = {
  headers: map[string]string(name='headers'),
  body: GrantUserPermissionsResponseBody(name='body'),
}

async function grantUserPermissions(request: GrantUserPermissionsRequest): GrantUserPermissionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GrantUserPermissions', 'POST', '/', 'json', false, 'json', request);
}

model UpdateHubClusterFeatureRequest {
  apiServerEipId?: string(name='ApiServerEipId', description='The ID of the EIP.', example='eip-xxx', position='Query'),
  argoCDEnabled?: boolean(name='ArgoCDEnabled', position='Query'),
  argoServerEnabled?: boolean(name='ArgoServerEnabled', position='Query'),
  auditLogEnabled?: boolean(name='AuditLogEnabled', description='Specifies whether to enable audit logs. Valid values: - true: enable audit logs. - false: disables audit logs.', example='true', position='Query'),
  clusterId: string(name='ClusterId', description='The ID of the master instance.', example='c46979b1075f04d99b5f2b710393e5****', position='Query'),
  deletionProtection?: boolean(name='DeletionProtection', description='Specifies whether to enable deletion protection for the master instance. After you enable deletion protection, you cannot delete the master instance in the console or by calling API operations. Valid values:', example='true', position='Query'),
  enableMesh?: boolean(name='EnableMesh', description='Specifies whether to enable Service Mesh (ASM). Valid values: true: enables ASM. false: disables ASM.', example='true', position='Query'),
  name?: string(name='Name', description='The name of the master instance. The name must be 1 to 63 characters in length, and can contain letters and digits. The name must start with a letter. The name can contain letters, digits, underscores (_), and hyphens (-).', example='ack-demo', position='Query'),
  priceLimit?: string(name='PriceLimit', position='Query'),
  publicApiServerEnabled?: boolean(name='PublicApiServerEnabled', description='Specifies whether to associate an elastic IP address (EIP) with the API server. Default value: false. To associate an EIP with the API server, set the value to true. You can use a custom EIP by setting the ApiServerEipId parameter. If you do not set the ApiServerEipId parameter, the system automatically creates an EIP.', example='true', position='Query'),
  vSwitches?: [ string ](name='VSwitches', shrink='json', position='Query'),
  workflowScheduleMode?: string(name='WorkflowScheduleMode', position='Query'),
}

model UpdateHubClusterFeatureResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='52C1B7DF-96C1-5214-97B6-1B0859FEAFE5'),
}

model UpdateHubClusterFeatureResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateHubClusterFeatureResponseBody(name='body'),
}

async function updateHubClusterFeature(request: UpdateHubClusterFeatureRequest): UpdateHubClusterFeatureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateHubClusterFeature', 'POST', '/', 'json', false, 'json', request);
}

