/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'adcp';
  @version = '2022-01-01';
  @endpointRule = 'central';
  @endpointMap = {
    cn-beijing = 'adcp.cn-beijing.aliyuncs.com',
    cn-zhangjiakou = 'adcp.cn-zhangjiakou.aliyuncs.com',
    cn-hangzhou = 'adcp.cn-hangzhou.aliyuncs.com',
    cn-shanghai = 'adcp.cn-shanghai.aliyuncs.com',
    cn-shenzhen = 'adcp.cn-shenzhen.aliyuncs.com',
    cn-heyuan = 'adcp.cn-heyuan.aliyuncs.com',
    cn-hongkong = 'adcp.cn-hongkong.aliyuncs.com',
    ap-northeast-1 = 'adcp.ap-northeast-1.aliyuncs.com',
    ap-southeast-1 = 'adcp.ap-southeast-1.aliyuncs.com',
    ap-southeast-5 = 'adcp.ap-southeast-5.aliyuncs.com',
    ap-south-1 = 'adcp.ap-south-1.aliyuncs.com',
    ap-southeast-2 = 'adcp.ap-southeast-2.aliyuncs.com',
    ap-southeast-3 = 'adcp.ap-southeast-3.aliyuncs.com',
    cn-chengdu = 'adcp-vpc.cn-chengdu.aliyuncs.com',
    cn-huhehaote = 'adcp.cn-huhehaote.aliyuncs.com',
    cn-qingdao = 'adcp.cn-qingdao.aliyuncs.com',
    cn-shanghai-finance-1 = 'adcp-vpc.cn-shanghai-finance-1.aliyuncs.com',
    cn-wulanchabu = 'adcp.cn-wulanchabu.aliyuncs.com',
    eu-central-1 = 'adcp.eu-central-1.aliyuncs.com',
    eu-west-1 = 'adcp-vpc.eu-west-1.aliyuncs.com',
    me-east-1 = 'adcp.me-east-1.aliyuncs.com',
    us-east-1 = 'adcp.us-east-1.aliyuncs.com',
    us-west-1 = 'adcp.us-west-1.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AttachClusterToHubRequest {
  attachToMesh?: boolean(name='AttachToMesh', description='The operation that you want to perform. Set the value to **AttachClusterToHub**.', example='true', position='Query'),
  clusterId: string(name='ClusterId', description='The ID of the task.', example='cd08d62e6506a4fa5a8c44c19d0fc****', position='Query'),
  clusterIds: string(name='ClusterIds', description='The ID of the request.', example='["cdea10134be464ba4acb36cc831a6****"]', position='Body'),
}

model AttachClusterToHubResponseBody = {
  clusterId?: string(name='ClusterId', description='You can call the AttachClusterToHub operation to associate an Container Service for Kubernetes (ACK) cluster with a master instance of ACK One.', example='c8e28143817db4b039b8548d7c899****'),
  managedClusterIds?: [ string ](name='ManagedClusterIds', description='Zhishi'),
  requestId?: string(name='RequestId', description='Example 1', example='EA06613B-37A3-549E-BAE0-E4AD8A6E93D7'),
  taskId?: string(name='TaskId', example='T-623a96b7bbeaac074b00****'),
}

model AttachClusterToHubResponse = {
  headers: map[string]string(name='headers'),
  body: AttachClusterToHubResponseBody(name='body'),
}

async function attachClusterToHub(request: AttachClusterToHubRequest): AttachClusterToHubResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachClusterToHub', 'POST', '/', 'json', true, 'form', request);
}

model CreateHubClusterRequest {
  apiServerPublicEip?: boolean(name='ApiServerPublicEip', description='Specifies whether to expose the API server to the Internet. Valid values:

*   true: exposes the API server to the Internet.
*   false: exposes the API server to the internal network.', example='true', position='Body'),
  argoServerEnabled?: boolean(name='ArgoServerEnabled', example='true', position='Body'),
  auditLogEnabled?: boolean(name='AuditLogEnabled', description='Specifies whether to enable the audit log feature. Valid values:

*   true: enables the audit log feature.
*   false: disables the audit log feature.', example='false', position='Body'),
  isEnterpriseSecurityGroup?: boolean(name='IsEnterpriseSecurityGroup', description='Specifies whether to use an advanced security group.', example='false', position='Body'),
  name?: string(name='Name', description='The name of the master instance.', example='ack-demo', position='Body'),
  priceLimit?: string(name='PriceLimit', example='0.08', position='Body'),
  profile?: string(name='Profile', description='The type of scenario for which the master instance is suitable. Valid values:

*   `Default`: The master instance is suitable for standard scenarios.
*   `XFlow`: The master instance is suitable for workflow scenarios.

Default value: `Default`.', example='Default', position='Body'),
  regionId: string(name='RegionId', description='The ID of the region. You can call the DescribeRegions operation to query available regions.', example='cn-beijing', position='Body'),
  vSwitches: string(name='VSwitches', description='The ID of the vSwitch.', example='["vsw-2zeaijsas4zkzz81xm***"]', position='Body'),
  vpcId: string(name='VpcId', description='The ID of the virtual private cloud (VPC) to which the master instance belongs. You can call the DescribeVpcs operation to query available VPCs.', example='vpc-f8zin0jscsr84s96tg***', position='Body'),
  workflowScheduleMode?: string(name='WorkflowScheduleMode', example='cost-optimized', position='Body'),
}

model CreateHubClusterResponseBody = {
  clusterId?: string(name='ClusterId', description='The ID of the master instance.', example='c09946603cd764dac96135f51d1ba****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='62F5AA2B-A2C9-5135-BCE2-C2167099****'),
  taskId?: string(name='TaskId', description='The ID of the task.', example='T-62523eda841eca071400****'),
}

model CreateHubClusterResponse = {
  headers: map[string]string(name='headers'),
  body: CreateHubClusterResponseBody(name='body'),
}

async function createHubCluster(request: CreateHubClusterRequest): CreateHubClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateHubCluster', 'POST', '/', 'json', true, 'form', request);
}

model DeleteHubClusterRequest {
  clusterId: string(name='ClusterId', description='The ID of the master instance.', example='cd90dd24a86fd42f895a1b77df620****', position='Query'),
  force?: boolean(name='Force', description='Specifies whether to forcefully delete the master instance in ACK One. Valid values:

*   true: forcefully deletes the master instance in ACK One.
*   false: does not forcibly delete the master instance in ACK One.

Default value: false.', example='false', position='Query'),
  retainResources?: [ string ](name='RetainResources', description='The list of resources to retain.', shrink='json', position='Query'),
}

model DeleteHubClusterResponseBody = {
  clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='cb09fda0dc2f94a8397c76638c7ec****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7A827E32-6D24-5757-B3FD-D9396495FBDC'),
  taskId?: string(name='TaskId', description='The ID of the job.', example='T-623a96b7bbeaac074b00****'),
}

model DeleteHubClusterResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteHubClusterResponseBody(name='body'),
}

async function deleteHubCluster(request: DeleteHubClusterRequest): DeleteHubClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteHubCluster', 'POST', '/', 'json', false, 'json', request);
}

model DeletePolicyInstanceRequest {
  clusterId: string(name='ClusterId', description='The ID of the master instance.', example='c09946603cd764dac96135f51d1ba****', position='Query'),
  clusterIds?: [ string ](name='ClusterIds', description='A array of JSON strings. The JSON strings in the array indicate the IDs of the associated clusters for which the policy is deleted.', shrink='json', position='Query'),
  policyName: string(name='PolicyName', description='The name of the policy.', example='ACKNoEnvVarSecrets', position='Query'),
}

model DeletePolicyInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EA06613B-37A3-549E-BAE0-E4AD8A6E93D7'),
}

model DeletePolicyInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePolicyInstanceResponseBody(name='body'),
}

async function deletePolicyInstance(request: DeletePolicyInstanceRequest): DeletePolicyInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePolicyInstance', 'POST', '/', 'json', false, 'json', request);
}

model DeleteUserPermissionRequest {
  clusterId: string(name='ClusterId', description='The ID of the master instance.', example='c09946603cd764dac96135f51d1ba****', position='Query'),
  userId: string(name='UserId', description='The ID of the RAM user.', example='2176****', position='Query'),
}

model DeleteUserPermissionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='2D676EFC-8C04-5CCE-A08E-BB97D24B47E8'),
}

model DeleteUserPermissionResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteUserPermissionResponseBody(name='body'),
}

async function deleteUserPermission(request: DeleteUserPermissionRequest): DeleteUserPermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUserPermission', 'POST', '/', 'json', false, 'json', request);
}

model DeployPolicyInstanceRequest {
  clusterId: string(name='ClusterId', description='The ID of the master instance.', example='c102fe5f1ee5d4c87a68121a77d8b****', position='Query'),
  clusterIds: [ string ](name='ClusterIds', description='An array of JSON strings. The JSON strings in the array indicate the IDs of the associated clusters in which the policy instance is deployed.', shrink='json', position='Query'),
  namespaces?: [ string ](name='Namespaces', description='A list of namespaces.', shrink='json', position='Query'),
  policyAction: string(name='PolicyAction', description='The action of the policy. Valid values:

*   deny: blocks deployments that match the policy.
*   warn: generates alerts for deployments that match the policy.', example='warn', position='Query'),
  policyName: string(name='PolicyName', description='The name of the policy.', example='ACKNoEnvVarSecrets', position='Query'),
}

model DeployPolicyInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='2D676EFC-8C04-5CCE-A08E-BB97D24B47E8'),
}

model DeployPolicyInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeployPolicyInstanceResponseBody(name='body'),
}

async function deployPolicyInstance(request: DeployPolicyInstanceRequest): DeployPolicyInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeployPolicyInstance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHubClusterDetailsRequest {
  clusterId: string(name='ClusterId', description='The ID of the master instance.', example='c676decda7b8148d69a9aba751877****', position='Query'),
}

model DescribeHubClusterDetailsResponseBody = {
  cluster?: {
    apiServer?: {
      apiServerEipId?: string(name='ApiServerEipId', description='The ID of the elastic IP address (EIP).', example='eip-abc****'),
      enabledPublic?: boolean(name='EnabledPublic', description='Indicates whether the API server is accessible over the Internet. Valid values:

*   true: The API server is accessible over the Internet.
*   false: The API server is inaccessible over the Internet.', example='true'),
      loadBalancerId?: string(name='LoadBalancerId', description='The ID of the Server Load Balancer (SLB) instance.', example='lb-hp3ioqbfeq37h13rwe***'),
    }(name='ApiServer', description='The details of the API server of the master instance.'),
    clusterInfo?: {
      clusterId?: string(name='ClusterId', description='The ID of the master instance.', example='cb09fda0dc2f94a8397c76638c7ecf***'),
      clusterSpec?: string(name='ClusterSpec', description='The specification of the master instance. Valid value:

*   ack.pro.small: ACK Pro cluster', example='ack.pro.small'),
      creationTime?: string(name='CreationTime', description='The time when the master instance was created.', example='2022-03-23T06:22:28Z'),
      errorMessage?: string(name='ErrorMessage', description='The error message returned when the master instance failed to be created.', example='The specified product does not exist.'),
      name?: string(name='Name', description='The name of the master instance.', example='ackone-heyuan'),
      profile?: string(name='Profile', description='The configurations of the master instance.', example='Default'),
      regionId?: string(name='RegionId', description='The ID of the region in which the master instance resides.', example='cn-beijing'),
      state?: string(name='State', description='The status of the master instance. Valid values:

*   initial: The master instance is being initialized.
*   failed: The master instance failed to be created.
*   running: The master instance is running
*   inactive: The master instance is pending.
*   deleting: The master instance is being deleted.
*   delete_failed: The master instance failed to be deleted.
*   deleted: The master instance is deleted.', example='running'),
      updateTime?: string(name='UpdateTime', description='The time when the master instance was updated.', example='2022-03-21T02:51:35.542Z'),
      version?: string(name='Version', description='The version of the master instance.', example='1.22.3-aliyun.1'),
    }(name='ClusterInfo', description='The details of the master instance.'),
    conditions?: [ 
      {
        message?: string(name='Message', description='The error message returned.', example='Successful'),
        reason?: string(name='Reason', description='The reason for the deletion condition.', example='Successful'),
        status?: string(name='Status', description='The status of the master instance that the deletion condition indicates. Valid values:

*   True: The master instance cannot be deleted.
*   False: The master instance can be deleted.
*   Unknow: Whether the master instance can be deleted is unknown.', example='True'),
        type?: string(name='Type', description='The type of deletion condition.', example='DeletionProtection'),
      }
    ](name='Conditions', description='The deletion conditions of the master instance.'),
    endpoints?: {
      intranetApiServerEndpoint?: string(name='IntranetApiServerEndpoint', description='The endpoint that is used to access the API server over the internal network.', example='https://172.16.6.**:6443'),
      publicApiServerEndpoint?: string(name='PublicApiServerEndpoint', description='The endpoint that is used to access the API server over the Internet.', example='https://123.57.21.***:6443'),
    }(name='Endpoints', description='The endpoint of the master instance.'),
    logConfig?: {
      enableLog?: boolean(name='EnableLog', description='Indicates whether the audit logging feature is enabled. Valid values:

*   true: Audit logging is enabled.
*   false: Audit logging is disabled.', example='false'),
      logProject?: string(name='LogProject', description='The name of the project of Log Service.', example='k8s-log-abc'),
      logStoreTTL?: string(name='LogStoreTTL', description='The number of days that logs are retained by Log Service.', example='7'),
    }(name='LogConfig', description='The logging configuration.'),
    meshConfig?: {
      enableMesh?: boolean(name='EnableMesh', description='Indicates whether ASM is enabled. Valid values:

*   true: ASM is enabled.
*   false: ASM is disabled.', example='false'),
      meshId?: string(name='MeshId', description='service mesh (ASM) instance ID', example='cb09fda0dc2f94a8397c76638c7ecf***'),
    }(name='MeshConfig', description='The configurations of Alibaba Cloud Service Mesh (ASM).'),
    network?: {
      clusterDomain?: string(name='ClusterDomain', description='The domain name of the master instance.', example='cluster.local'),
      IPStack?: string(name='IPStack', description='The IP version that is supported by the master instance. Valid values:

*   ipv4: IPv4.
*   ipv6: IPv6.
*   dual: IPv4 and IPv6.', example='ipv4'),
      securityGroupIDs?: [ string ](name='SecurityGroupIDs', description='The IDs of the associated security groups.'),
      vSwitches?: [ string ](name='VSwitches', description='The details of the vSwitches.'),
      vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC) in which the master instance resides.', example='vpc-f8ziib1019r9o0hdv2***'),
    }(name='Network', description='The network configurations of the master instance.'),
    workflowConfig?: {
      argoServerEnabled?: boolean(name='ArgoServerEnabled', example='true'),
      priceLimit?: string(name='PriceLimit', example='0.08'),
      workflowScheduleMode?: string(name='WorkflowScheduleMode', example='cost-optimized'),
      workflowUnits?: [ 
        {
          regionId?: string(name='RegionId', example='cn-beijing'),
          vSwitches?: [ 
            {
              vswitchId?: string(name='VswitchId', example='vsw-wz9sf0hsuizl7bxnj****'),
              zoneId?: string(name='ZoneId', example='cn-hangzhou-e'),
            }
          ](name='VSwitches'),
          vpcId?: string(name='VpcId', example='vpc-f8zukabbkv5aw7zkm****'),
        }
      ](name='WorkflowUnits'),
    }(name='WorkflowConfig'),
  }(name='Cluster', description='The details of the master instance.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='52C1B7DF-96C1-5214-97B6-1B0859FEAFE5'),
}

model DescribeHubClusterDetailsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHubClusterDetailsResponseBody(name='body'),
}

async function describeHubClusterDetails(request: DescribeHubClusterDetailsRequest): DescribeHubClusterDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHubClusterDetails', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHubClusterKubeconfigRequest {
  clusterId: string(name='ClusterId', description='The ID of the master instance.', example='c102fe5f1ee5d4c87a68121a77d8b****', position='Query'),
  privateIpAddress?: boolean(name='PrivateIpAddress', description='Specifies whether to obtain the kubeconfig file that is used to connect to the cluster over the internal network. Valid values:

*   `true`: obtains the kubeconfig file that is used to connect to the master instance over the internal network.
*   `false`: obtains the kubeconfig file that is used to connect to the master instance over the Internet.

Default value: `false`', example='false', position='Query'),
}

model DescribeHubClusterKubeconfigResponseBody = {
  kubeconfig?: string(name='Kubeconfig', description='The content of the kubeconfig file.', example='"\\napiVersion: v1\\nclusters:\\n- cluster:\\n    server: https://172.16.11.***:6443\\n    certificate-authority-data: LS0tLS1CRU=...\\n  name: kubernetes\\ncontexts:\\n- context:\\n    cluster: kubernetes\\n    user: \\"kubernetes-a****\\"\\n  name: kubernetes-admin-cc2cbf5802bec4bfa9fae4014d8c****\\ncurrent-context: kubernetes-admin-cc2cbf5802bec4bfa9fae4014d8c9****\\nkind: Config\\npreferences: {}\\nusers:\\n- name: \\"kubernetes-admin\\"\\n  user:\\n    client-certificate-data: LS0tLS1CRU...\\n    client-key-data: LS0tCg==...\\n"'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5BE4C329-DCC2-5B61-8F66-112B7D7FC712'),
}

model DescribeHubClusterKubeconfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHubClusterKubeconfigResponseBody(name='body'),
}

async function describeHubClusterKubeconfig(request: DescribeHubClusterKubeconfigRequest): DescribeHubClusterKubeconfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHubClusterKubeconfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHubClusterLogsRequest {
  clusterId: string(name='ClusterId', description='The ID of the master instance.', example='c9cb1d933b2ab47ff9cd25571477dc8f2', position='Query'),
}

model DescribeHubClusterLogsResponseBody = {
  logs?: [ 
    {
      clusterId?: string(name='ClusterId', description='The ID of the master instance.', example='c102fe5f1ee5d4c87a68121a77d8b0f38'),
      clusterLog?: string(name='ClusterLog', description='A log of the master instance.', example='Cluster Created'),
      creationTime?: string(name='CreationTime', description='The time when the log was created. Format: <i>yyyy-mm-dd</i>t<i>hh:mm:ss</i>z (UTC time).', example='2021-12-02T11:48:15+08:00'),
      logLevel?: string(name='LogLevel', description='The severity level of the log. Valid values: - error: errors. - warn: warnings. - info: information.', example='INFO'),
    }
  ](name='Logs', description='Brief information about operation logs.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='661192D7-25A6-54C2-B643-1129CB7D2768'),
}

model DescribeHubClusterLogsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHubClusterLogsResponseBody(name='body'),
}

async function describeHubClusterLogs(request: DescribeHubClusterLogsRequest): DescribeHubClusterLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHubClusterLogs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHubClustersRequest {
  profile?: string(name='Profile', example='Default', position='Query'),
}

model DescribeHubClustersResponseBody = {
  clusters?: [ 
    {
      apiServer?: {
        apiServerEipId?: string(name='ApiServerEipId', example='eip-xxx'),
        enabledPublic?: boolean(name='EnabledPublic', example='true'),
        loadBalancerId?: string(name='LoadBalancerId', example='lb-bp1qyp4l6bscqxw69****'),
      }(name='ApiServer'),
      clusterInfo?: {
        clusterId?: string(name='ClusterId', example='c2d3e0121ea214b438010502a8019****'),
        clusterSpec?: string(name='ClusterSpec', example='ack.pro.small'),
        creationTime?: string(name='CreationTime', example='2021-11-05T10:25:48Z'),
        errorMessage?: string(name='ErrorMessage', example='Success'),
        name?: string(name='Name', example='ackone-heyuan'),
        profile?: string(name='Profile', example='Default'),
        regionId?: string(name='RegionId', example='cn-beijing'),
        state?: string(name='State', example='running'),
        updateTime?: string(name='UpdateTime', example='2021-09-02T13:39:50Z'),
        version?: string(name='Version', example='1.22.3-aliyun.1'),
      }(name='ClusterInfo'),
      conditions?: [ 
        {
          message?: string(name='Message', example='Successful!'),
          reason?: string(name='Reason', example='Successful'),
          status?: string(name='Status', example='True'),
          type?: string(name='Type', example='DeletionProtection'),
        }
      ](name='Conditions'),
      endpoints?: {
        intranetApiServerEndpoint?: string(name='IntranetApiServerEndpoint', example='https://172.16.6.**:6443'),
        publicApiServerEndpoint?: string(name='PublicApiServerEndpoint', example='https://123.57.21.***:6443'),
      }(name='Endpoints'),
      logConfig?: {
        enableLog?: boolean(name='EnableLog', example='true'),
        logProject?: string(name='LogProject', example='audit-log-abc'),
        logStoreTTL?: string(name='LogStoreTTL', example='7'),
      }(name='LogConfig'),
      meshConfig?: {
        enableMesh?: boolean(name='EnableMesh', example='false'),
        meshId?: string(name='MeshId', example='c2d3e0121ea214b438010502a8019****'),
      }(name='MeshConfig'),
      network?: {
        clusterDomain?: string(name='ClusterDomain', example='cluster.local'),
        securityGroupIDs?: [ string ](name='SecurityGroupIDs'),
        vSwitches?: [ string ](name='VSwitches'),
        vpcId?: string(name='VpcId', example='vpc-2zeusrwi7c2mlww4a****'),
      }(name='Network'),
    }
  ](name='Clusters'),
  requestId?: string(name='RequestId', example='2D676EFC-8C04-5CCE-A08E-BB97D24B47E8'),
}

model DescribeHubClustersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHubClustersResponseBody(name='body'),
}

async function describeHubClusters(request: DescribeHubClustersRequest): DescribeHubClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHubClusters', 'POST', '/', 'json', false, 'json', request);
}

model DescribeManagedClustersRequest {
  clusterId: string(name='ClusterId', description='The status of the association between the clusters and Service Mesh (ASM).', example='c2f41fd4599454a9c9ad8b3daafe873ad', position='Query'),
}

model DescribeManagedClustersResponseBody = {
  clusters?: [ 
    {
      cluster?: {
        clusterID?: string(name='ClusterID', description='Information about the master instance.', example='c2f41fd4599454a9c9ad8b3daafe873ad'),
        clusterSpec?: string(name='ClusterSpec', description='The ID of the master instance.', example='ack.pro.small'),
        clusterType?: string(name='ClusterType', description='The time when the master instance was created.', example='One'),
        created?: string(name='Created', description='The ID of the master instance.', example='2022-03-23T06:22:28Z'),
        currentVersion?: string(name='CurrentVersion', description='The name of the master instance.', example='1.22.3-aliyun.1'),
        initVersion?: string(name='InitVersion', description='The specification of the master instance. Valid values: - ack.pro.small: ACK Pro.', example='1.20.4-aliyun.1'),
        name?: string(name='Name', description='The status information.', example='ackone-heyuan'),
        profile?: string(name='Profile', description='The ID of the request.', example='Default'),
        region?: string(name='Region', description='The ID of the master instance.', example='cn-hangzhou'),
        resourceGroupId?: string(name='ResourceGroupId', description='The name of the master instance.', example='rg-acfmx7o7ewyqcby'),
        state?: string(name='State', description='The current Kubernetes version of the master instance.', example='running'),
        updated?: string(name='Updated', description='The ID of the vSwitch.', example='2022-03-23T06:22:28Z'),
        vSwitchID?: string(name='VSwitchID', description='The original Kubernetes version of the master instance.', example='vsw-m5e0pbkgmhvzecf7enfym'),
        vpcID?: string(name='VpcID', description='The status of the association between the clusters and the master instance. Valid values: - Installing: The clusters are being associated with the master instance. - Successed: The clusters are associated with the master instance. - Failed: The clusters failed to be associated with the master instance. - Deleting: The clusters are being disassociated from the master instance. - Deleted: The clusters are disassociated from the master instance.', example='vpc-bp1fhizs9fxuvit06zeb9'),
      }(name='Cluster', description='The name of the master instance.'),
      meshStatus?: {
        inMesh?: boolean(name='InMesh', example='true'),
      }(name='MeshStatus', description='Zhishi'),
      status?: {
        message?: string(name='Message', description='Query the clusters that are associated with a master instance.', example='SUCCESS'),
        state?: string(name='State', description='You can call the DescribeManagedClusters operation to query the clusters that are associated with a master instance.', example='Successed'),
      }(name='Status', description='Example 1'),
    }
  ](name='Clusters', description='The status of the associated clusters. Valid values: - initial: The associated clusters are being initialized. - failed: The associated clustersfailed to be created. - running: The associated clusters are running. - inactive: The associated clusters are inactive. - deleting: The associated clusters are being deleted. - deleted: The associated clusters are deleted.'),
  requestId?: string(name='RequestId', description='VPC ID', example='BDA85C7A-FC81-56C4-9BC2-9112EE970059'),
}

model DescribeManagedClustersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeManagedClustersResponseBody(name='body'),
}

async function describeManagedClusters(request: DescribeManagedClustersRequest): DescribeManagedClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeManagedClusters', 'POST', '/', 'json', false, 'json', request);
}

model DescribePoliciesRequest {
}

model DescribePoliciesResponseBody = {
  policies?: [ 
    {
      category?: string(name='Category', description='The policy type.', example='psp'),
      names?: [ string ](name='Names', description='The names of the policies of each policy type.'),
    }
  ](name='Policies', description='A list of policies.'),
  requestId?: string(name='RequestId', description='The request ID.', example='9439169C-64C1-5849-9F7C-E3E60BDDEF7A'),
}

model DescribePoliciesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePoliciesResponseBody(name='body'),
}

async function describePolicies(request: DescribePoliciesRequest): DescribePoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePolicies', 'POST', '/', 'json', false, 'json', request);
}

model DescribePolicyDetailsRequest {
  policyName?: string(name='PolicyName', description='The name of the policy.', example='ACKAllowedRepos', position='Query'),
}

model DescribePolicyDetailsResponseBody = {
  policy?: {
    action?: string(name='Action', description='The action of the policy. Valid values:

*   enforce: blocks deployments that match the policy.
*   inform: generates alerts for deployments that match the policy.', example='enforce'),
    category?: string(name='Category', description='The type of the policy.', example='k8s-general'),
    created?: string(name='Created', description='The time when the policy was created.', example='2021-11-18T10:52:17+08:00'),
    description?: string(name='Description', description='The description of the policy.', example='Requires container images to begin with a repo string from a specified list'),
    name?: string(name='Name', description='The name of the policy.', example='ACKAllowedRepos'),
    noConfig?: int32(name='NoConfig', description='Indicates whether parameters are required. Valid values:

*   0: Parameters are required.
*   1: Parameters are optional.', example='0'),
    severity?: string(name='Severity', description='The severity level of the policy.', example='high'),
    template?: string(name='Template', description='The content of the policy.'),
    updated?: string(name='Updated', description='The time when the policy was last updated.', example='2021-11-18T10:52:17+08:00'),
  }(name='Policy', description='Detailed information about the policy.'),
  requestId?: string(name='RequestId', description='The request ID.', example='2D676EFC-8C04-5CCE-A08E-BB97D24B47E8'),
}

model DescribePolicyDetailsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePolicyDetailsResponseBody(name='body'),
}

async function describePolicyDetails(request: DescribePolicyDetailsRequest): DescribePolicyDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePolicyDetails', 'POST', '/', 'json', false, 'json', request);
}

model DescribePolicyGovernanceInClusterRequest {
  clusterId: string(name='ClusterId', description='The ID of the master instance.', example='c09946603cd764dac96135f51d1ba****', position='Query'),
}

model DescribePolicyGovernanceInClusterResponseBody = {
  policyGovernances?: [ 
    {
      cluster?: {
        clusterId?: string(name='ClusterId', description='The ID of the associated cluster.', example='ca5cf1b5edb5c4736a6ea0dfb4061****'),
        clusterSpec?: string(name='ClusterSpec', description='The specifications of the associated cluster.', example='ack.pro.small'),
        clusterType?: string(name='ClusterType', description='The type of the associated cluster.', example='ManagedKubernetes'),
        name?: string(name='Name', description='The name of the associated cluster.', example='ack-001'),
        profile?: string(name='Profile', description='The identifier of the associated cluster.', example='Default'),
        regionId?: string(name='RegionId', description='The region ID of the associated cluster.', example='cn-heyuan'),
        state?: string(name='State', description='The status of the associated cluster.', example='running'),
      }(name='Cluster', description='The information about the associated clusters in which the policies are deployed.'),
      policyGovernance?: {
        admitLog?: {
          count?: string(name='Count', description='The number of log entries in the query result.', example='100'),
          logProject?: string(name='LogProject', description='The name of the Log Service project.', example='demo'),
          logStore?: string(name='LogStore', description='The name of the Logstore.', example='demo'),
          logs?: [ map[string]string ](name='Logs', description='The content of the audit log.'),
          progress?: string(name='Progress', description='The status of the query. Valid values:

*   Complete: The query is successful, and the complete result is returned.
*   Incomplete: The query is successful, but the query result is incomplete. To obtain the complete result, you must call the operation again.', example='Complete'),
        }(name='AdmitLog', description='The audit log generated by the associated cluster.'),
        onState?: [ 
          {
            enabledCount?: long(name='EnabledCount', description='The types of policies that are enabled in the associated cluster.', example='2'),
            severity?: string(name='Severity', description='The severity level.', example='low'),
            totalCount?: long(name='TotalCount', description='The types of policies of each severity level.', example='2'),
          }
        ](name='OnState', description='The number of policies of each severity level enabled in the associated cluster.'),
        violation?: {
          totalViolations?: {
            deny?: [ 
              {
                severity?: string(name='Severity', description='The severity level.', example='low'),
                violations?: long(name='Violations', description='The number of deployments that are blocked.', example='2'),
              }
            ](name='Deny', description='The information about the deployments that are blocked.'),
            warn?: [ 
              {
                severity?: string(name='Severity', description='The severity level.', example='low'),
                violations?: string(name='Violations', description='The number of deployments that have triggered alerting.', example='2'),
              }
            ](name='Warn', description='The information about the deployments that have triggered alerting.'),
          }(name='TotalViolations', description='The number of deployments that match the policies in the associated cluster, including deployments that are blocked and deployments that have triggered alerting. The deployments are classified by severity level.'),
          violations?: {
            deny?: [ 
              {
                policyDescription?: string(name='PolicyDescription', description='The description of the policy.', example='Restricts secrets used in pod envs'),
                policyName?: string(name='PolicyName', description='The name of the policy.', example='ACKPSPCapabilities'),
                severity?: string(name='Severity', description='The severity level of the policy.', example='low'),
                violations?: long(name='Violations', description='The number of times that the policy blocks deployments.', example='2'),
              }
            ](name='Deny', description='The information about the deployments that are blocked.'),
            warn?: [ 
              {
                policyDescription?: string(name='PolicyDescription', description='The description of the policy.', example='Restricts secrets used in pod envs'),
                policyName?: string(name='PolicyName', description='The name of the policy.', example='ACKPSPCapabilities'),
                severity?: string(name='Severity', description='The severity level of the policy.', example='low'),
                violations?: long(name='Violations', description='The number of times that the policy generates alerts.', example='2'),
              }
            ](name='Warn', description='The information about the deployments that have triggered alerting.'),
          }(name='Violations', description='The number of deployments that match the policies in the associated cluster, including deployments that are blocked and deployments that have triggered alerting. The deployments are classified by policy type.'),
        }(name='Violation', description='The number of deployments that match the policies in the associated cluster, including deployments that are blocked and deployments that have triggered alerting.'),
      }(name='PolicyGovernance', description='The detailed policy information.'),
    }
  ](name='PolicyGovernances', description='The detailed information about the policies.'),
  requestId?: string(name='RequestId', description='The request ID.', example='96C6A284-0EC3-5486-9A97-E8E9EE27E9EF'),
}

model DescribePolicyGovernanceInClusterResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePolicyGovernanceInClusterResponseBody(name='body'),
}

async function describePolicyGovernanceInCluster(request: DescribePolicyGovernanceInClusterRequest): DescribePolicyGovernanceInClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePolicyGovernanceInCluster', 'POST', '/', 'json', false, 'json', request);
}

model DescribePolicyInstancesRequest {
  clusterId: string(name='ClusterId', description='The ID of the master instance.', example='c102fe5f1ee5d4c87a68121a77d8b****', position='Query'),
  policyName: string(name='PolicyName', description='The name of the policy.', example='ACKNoEnvVarSecrets', position='Query'),
}

model DescribePolicyInstancesResponseBody = {
  policies?: [ 
    {
      clusterId?: string(name='ClusterId', description='The ID of the associated cluster.', example='cd0e6882394f7496589837cac3585****'),
      instanceName?: string(name='InstanceName', description='The name of the policy instance.', example='no-env-var-secrets-****'),
      policyAction?: string(name='PolicyAction', description='The action of the policy. Valid values:

*   deny: blocks deployments that match the policy.
*   warn: generates alerts for deployments that match the policy.', example='warn'),
      policyCategory?: string(name='PolicyCategory', description='The type of the policy.', example='k8s-general'),
      policyDescription?: string(name='PolicyDescription', description='The description of the policy.', example='Restricts secrets used in pod envs'),
      policyName?: string(name='PolicyName', description='The name of the policy.', example='ACKPSPCapabilities'),
      policyParameters?: map[string]string(name='PolicyParameters', description='The parameters of the policy instance.'),
      policyScope?: string(name='PolicyScope', description='The applicable scope of the policy instance.

A value of \\* indicates all namespaces. This is the default value.

Multiple namespaces are separated by commas (,).', example='*'),
      policySeverity?: string(name='PolicySeverity', description='The severity level of the policy.', example='low'),
      totalViolations?: long(name='TotalViolations', description='The total number of deployments that match the policy in the associated cluster, including the deployments that are blocked and the deployments that have triggered alerting.', example='2'),
    }
  ](name='Policies', description='A list of policy instances.'),
  requestId?: string(name='RequestId', description='The request ID.', example='5BE4C329-DCC2-5B61-8F66-112B7D7FC712'),
}

model DescribePolicyInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePolicyInstancesResponseBody(name='body'),
}

async function describePolicyInstances(request: DescribePolicyInstancesRequest): DescribePolicyInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePolicyInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribePolicyInstancesStatusRequest {
  clusterId: string(name='ClusterId', description='The ID of the master instance.', example='c676decda7b8148d69a9aba751877****', position='Query'),
}

model DescribePolicyInstancesStatusResponseBody = {
  policies?: {
    policyInstances?: [ 
      {
        policyCategory?: string(name='PolicyCategory', description='The type of the policy.', example='cis-k8s'),
        policyClusters?: [ 
          {
            clusterId?: string(name='ClusterId', description='The ID of the associated cluster.', example='c639e5310e73e4a29ab18d6330a633****'),
            status?: string(name='Status', description='The status of the deployment.', example='Success'),
          }
        ](name='PolicyClusters', description='The associated clusters in which the policy instances are deployed.'),
        policyDescription?: string(name='PolicyDescription', description='The description of the policy.', example='Restricts use of the cluster-admin role.'),
        policyInstancesCount?: long(name='PolicyInstancesCount', description='The number of policy instances that are deployed. If this parameter is empty, no policy instance is deployed.', example='2'),
        policyName?: string(name='PolicyName', description='The name of the policy.', example='ACKRestrictRoleBindings'),
        policySeverity?: string(name='PolicySeverity', description='The severity level of the policy.', example='low'),
      }
    ](name='PolicyInstances', description='The number of policy instances of each policy type.'),
    severityInfo?: [ 
      {
        severityCount?: string(name='SeverityCount', description='The number of policy instances.', example='2'),
        severityType?: string(name='SeverityType', description='The severity level.', example='low'),
      }
    ](name='SeverityInfo', description='The number of policy instances that are deployed in the cluster.'),
  }(name='Policies', description='The number of policy instances of each policy type.'),
  requestId?: string(name='RequestId', description='The request ID.', example='5D89C59A-A7EB-5BF8-B094-6479175346CA'),
}

model DescribePolicyInstancesStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePolicyInstancesStatusResponseBody(name='body'),
}

async function describePolicyInstancesStatus(request: DescribePolicyInstancesStatusRequest): DescribePolicyInstancesStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePolicyInstancesStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  language?: string(name='Language', description='The ID of the request.', example='The operation that you want to perform. Set the value to **DescribeRegions**.', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName'),
      regionId?: string(name='RegionId', description='You can call the DescribeRegions operation to query available regions.', example='cn-beijing'),
    }
  ](name='Regions', description='Example 1'),
  requestId?: string(name='RequestId', description='The name of the region.', example='C0EE05F4-6C1D-5993-B028-B569F9ED6B51'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'GET', '/', 'json', false, 'json', request);
}

model DescribeUserPermissionsRequest {
  userId: string(name='UserId', description='The ID of the RAM user that you want to query.', example='21175****', position='Query'),
}

model DescribeUserPermissionsResponseBody = {
  permissions?: [ 
    {
      resourceId?: string(name='ResourceId', description='The authorization setting. Valid values:

*   {cluster_id} is returned if the permissions are scoped to a cluster.
*   {cluster_id}/{namespace} is returned if the permissions are scoped to a namespace of a cluster.
*   all-clusters is returned if the permissions are scoped to all clusters.', example='cffef3c9c7ba145b083292942a2c3****'),
      resourceType?: string(name='ResourceType', description='The authorization type. Valid values:

*   cluster: indicates that the permissions are scoped to a cluster.
*   namespace: indicates that the permissions are scoped to a namespace of a cluster.', example='cluster'),
      roleName?: string(name='RoleName', description='The name of the custom role. If a custom role is assigned, the value is the name of the assigned custom role.', example='view'),
      roleType?: string(name='RoleType', description='The type of predefined role. Valid values:

*   admin: administrator
*   dev: developer', example='dev'),
    }
  ](name='Permissions', description='The details about the permissions of the RAM user.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EA06613B-37A3-549E-BAE0-E4AD8A6E93D7'),
}

model DescribeUserPermissionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserPermissionsResponseBody(name='body'),
}

async function describeUserPermissions(request: DescribeUserPermissionsRequest): DescribeUserPermissionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUserPermissions', 'POST', '/', 'json', false, 'json', request);
}

model DetachClusterFromHubRequest {
  clusterId: string(name='ClusterId', description='The ID of the request.', example='cb09fda0dc2f94a8397c76638c7ec****', position='Query'),
  clusterIds: string(name='ClusterIds', description='The operation that you want to perform. Set the value to **DetachClusterFromHub**.', example='["c1c731554c1ec4a1ca9bb690ff9ed****"]', position='Body'),
  detachFromMesh?: boolean(name='DetachFromMesh', description='Example 1', example='false', position='Query'),
}

model DetachClusterFromHubResponseBody = {
  clusterId?: string(name='ClusterId', description='Zhishi', example='cc490b1e67ccc43a784727f29f33e****'),
  managedClusterIds?: [ string ](name='ManagedClusterIds'),
  requestId?: string(name='RequestId', description='You can call the DetachClusterFromHub operation to disassociate clusters from a master instance.', example='4412F213-DBCD-5D1B-A9A1-F6C26C6C19D9'),
  taskId?: string(name='TaskId', example='T-623a96b7bbeaac074b00****'),
}

model DetachClusterFromHubResponse = {
  headers: map[string]string(name='headers'),
  body: DetachClusterFromHubResponseBody(name='body'),
}

async function detachClusterFromHub(request: DetachClusterFromHubRequest): DetachClusterFromHubResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachClusterFromHub', 'POST', '/', 'json', true, 'form', request);
}

model GrantUserPermissionRequest {
  clusterId: string(name='ClusterId', example='c102fe5f1ee5d4c87a68121a77d8b****', position='Query'),
  isRamRole?: boolean(name='IsRamRole', position='Query'),
  namespace?: string(name='Namespace', example='default', position='Query'),
  roleName: string(name='RoleName', example='admin', position='Query'),
  roleType: string(name='RoleType', example='cluster', position='Query'),
  userId: string(name='UserId', example='2176****', position='Query'),
}

model GrantUserPermissionResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='2D676EFC-8C04-5CCE-A08E-BB97D24B47E8'),
}

model GrantUserPermissionResponse = {
  headers: map[string]string(name='headers'),
  body: GrantUserPermissionResponseBody(name='body'),
}

async function grantUserPermission(request: GrantUserPermissionRequest): GrantUserPermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GrantUserPermission', 'POST', '/', 'json', false, 'json', request);
}

model GrantUserPermissionsRequest {
  permissions?: [ 
    {
      clusterId?: string(name='ClusterId', example='cf67bdb0ffcb349ecabc1ca70da78****'),
      isRamRole?: boolean(name='IsRamRole'),
      namespace?: string(name='Namespace', example='test'),
      roleName: string(name='RoleName', example='dev'),
      roleType: string(name='RoleType', example='cluster'),
    }
  ](name='Permissions', shrink='json', position='Query'),
  userId: string(name='UserId', example='2367****', position='Query'),
}

model GrantUserPermissionsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='4412F213-DBCD-5D1B-A9A1-F6C26C6C19D9'),
}

model GrantUserPermissionsResponse = {
  headers: map[string]string(name='headers'),
  body: GrantUserPermissionsResponseBody(name='body'),
}

async function grantUserPermissions(request: GrantUserPermissionsRequest): GrantUserPermissionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GrantUserPermissions', 'POST', '/', 'json', false, 'json', request);
}

model UpdateHubClusterFeatureRequest {
  apiServerEipId?: string(name='ApiServerEipId', description='The ID of the EIP.', example='eip-xxx', position='Query'),
  argoCDEnabled?: boolean(name='ArgoCDEnabled', example='true', position='Query'),
  argoServerEnabled?: boolean(name='ArgoServerEnabled', example='true', position='Query'),
  auditLogEnabled?: boolean(name='AuditLogEnabled', description='Specifies whether to enable the audit logging feature. Valid values:

*   true: enables the audit logging feature.
*   false: disables the audit logging feature.', example='true', position='Query'),
  clusterId: string(name='ClusterId', description='The ID of the cluster.', example='c46979b1075f04d99b5f2b710393e5****', position='Query'),
  deletionProtection?: boolean(name='DeletionProtection', description='Specifies whether to enable deletion protection for the cluster. After you enable deletion protection, you cannot delete the master instance in the console or by calling the DeleteHubCluster operation. Valid values:

*   true: enables deletion protection for the cluster.
*   false: disables deletion protection for the cluster. This is the default value.', example='true', position='Query'),
  enableMesh?: boolean(name='EnableMesh', description='Specifies whether to enable Alibaba Cloud Service Mesh (ASM). Valid values:

true: enables ASM. false: disables ASM.', example='true', position='Query'),
  monitorEnabled?: boolean(name='MonitorEnabled', position='Query'),
  name?: string(name='Name', description='The name of the cluster. The name must be 1 to 63 characters in length. It must start with a letter, and can contain letters, digits, underscores (\\_), and hyphens (-).', example='ack-demo', position='Query'),
  priceLimit?: string(name='PriceLimit', description='The limit on the prices of containers in the workflow. This parameter takes effect only if the WorkflowScheduleMode parameter is set to cost-optimized.', example='0.08', position='Query'),
  publicApiServerEnabled?: boolean(name='PublicApiServerEnabled', description='Specifies whether to associate an elastic IP address (EIP) with the API server. Valid values:

*   true: associates an EIP with the API server. You can specify the ApiServerEipId parameter. If you do not specify the ApiServerEipId parameter, the system automatically creates an EIP.
*   false: disassociates an EIP from the API server.', example='true', position='Query'),
  vSwitches?: [ string ](name='VSwitches', shrink='json', position='Query'),
  workflowScheduleMode?: string(name='WorkflowScheduleMode', example='cost-optimized', position='Query'),
}

model UpdateHubClusterFeatureResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='52C1B7DF-96C1-5214-97B6-1B0859FEAFE5'),
}

model UpdateHubClusterFeatureResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateHubClusterFeatureResponseBody(name='body'),
}

async function updateHubClusterFeature(request: UpdateHubClusterFeatureRequest): UpdateHubClusterFeatureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateHubClusterFeature', 'POST', '/', 'json', false, 'json', request);
}

model UpdateUserPermissionRequest {
  clusterId: string(name='ClusterId', description='The ID of the master instance.', example='c8e28143817db4b039b8548d7c899****', position='Query'),
  namespace?: string(name='Namespace', description='The namespace to which the permissions are scoped. By default, this parameter is empty when you set RoleType to cluster.', example='default', position='Query'),
  roleName: string(name='RoleName', description='Specifies the predefined role that you want to assign. Valid values:

*   admin: the administrator role.
*   dev: the developer role.', example='admin', position='Query'),
  roleType: string(name='RoleType', description='The authorization type. Valid values:

*   cluster: specifies that the permissions are scoped to a master instance.
*   namespace: specifies that the permissions are scoped to a namespace of a cluster.', example='cluster', position='Query'),
  userId: string(name='UserId', description='The ID of the RAM user.', example='2176****', position='Query'),
}

model UpdateUserPermissionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='62F5AA2B-A2C9-5135-BCE2-C2167099****'),
}

model UpdateUserPermissionResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateUserPermissionResponseBody(name='body'),
}

async function updateUserPermission(request: UpdateUserPermissionRequest): UpdateUserPermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateUserPermission', 'POST', '/', 'json', false, 'json', request);
}

