/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'companyreg';
  @version = '2020-03-06';
  @endpointRule = 'regional';
  @endpointMap = {
    'ap-northeast-1' = 'companyreg.aliyuncs.com',
    'ap-northeast-2-pop' = 'companyreg.aliyuncs.com',
    'ap-south-1' = 'companyreg.aliyuncs.com',
    'ap-southeast-1' = 'companyreg.aliyuncs.com',
    'ap-southeast-2' = 'companyreg.aliyuncs.com',
    'ap-southeast-3' = 'companyreg.aliyuncs.com',
    'ap-southeast-5' = 'companyreg.aliyuncs.com',
    'cn-beijing' = 'companyreg.aliyuncs.com',
    'cn-beijing-finance-1' = 'companyreg.aliyuncs.com',
    'cn-beijing-finance-pop' = 'companyreg.aliyuncs.com',
    'cn-beijing-gov-1' = 'companyreg.aliyuncs.com',
    'cn-beijing-nu16-b01' = 'companyreg.aliyuncs.com',
    'cn-chengdu' = 'companyreg.aliyuncs.com',
    'cn-edge-1' = 'companyreg.aliyuncs.com',
    'cn-fujian' = 'companyreg.aliyuncs.com',
    'cn-haidian-cm12-c01' = 'companyreg.aliyuncs.com',
    'cn-hangzhou-bj-b01' = 'companyreg.aliyuncs.com',
    'cn-hangzhou-finance' = 'companyreg.aliyuncs.com',
    'cn-hangzhou-internal-prod-1' = 'companyreg.aliyuncs.com',
    'cn-hangzhou-internal-test-1' = 'companyreg.aliyuncs.com',
    'cn-hangzhou-internal-test-2' = 'companyreg.aliyuncs.com',
    'cn-hangzhou-internal-test-3' = 'companyreg.aliyuncs.com',
    'cn-hangzhou-test-306' = 'companyreg.aliyuncs.com',
    'cn-hongkong' = 'companyreg.aliyuncs.com',
    'cn-hongkong-finance-pop' = 'companyreg.aliyuncs.com',
    'cn-huhehaote' = 'companyreg.aliyuncs.com',
    'cn-huhehaote-nebula-1' = 'companyreg.aliyuncs.com',
    'cn-north-2-gov-1' = 'companyreg.aliyuncs.com',
    'cn-qingdao' = 'companyreg.aliyuncs.com',
    'cn-qingdao-nebula' = 'companyreg.aliyuncs.com',
    'cn-shanghai' = 'companyreg.aliyuncs.com',
    'cn-shanghai-et15-b01' = 'companyreg.aliyuncs.com',
    'cn-shanghai-et2-b01' = 'companyreg.aliyuncs.com',
    'cn-shanghai-finance-1' = 'companyreg.aliyuncs.com',
    'cn-shanghai-inner' = 'companyreg.aliyuncs.com',
    'cn-shanghai-internal-test-1' = 'companyreg.aliyuncs.com',
    'cn-shenzhen' = 'companyreg.aliyuncs.com',
    'cn-shenzhen-finance-1' = 'companyreg.aliyuncs.com',
    'cn-shenzhen-inner' = 'companyreg.aliyuncs.com',
    'cn-shenzhen-st4-d01' = 'companyreg.aliyuncs.com',
    'cn-shenzhen-su18-b01' = 'companyreg.aliyuncs.com',
    'cn-wuhan' = 'companyreg.aliyuncs.com',
    'cn-wulanchabu' = 'companyreg.aliyuncs.com',
    'cn-yushanfang' = 'companyreg.aliyuncs.com',
    'cn-zhangbei' = 'companyreg.aliyuncs.com',
    'cn-zhangbei-na61-b01' = 'companyreg.aliyuncs.com',
    'cn-zhangjiakou' = 'companyreg.aliyuncs.com',
    'cn-zhangjiakou-na62-a01' = 'companyreg.aliyuncs.com',
    'cn-zhengzhou-nebula-1' = 'companyreg.aliyuncs.com',
    'eu-central-1' = 'companyreg.aliyuncs.com',
    'eu-west-1' = 'companyreg.aliyuncs.com',
    'eu-west-1-oxs' = 'companyreg.aliyuncs.com',
    'me-east-1' = 'companyreg.aliyuncs.com',
    'rus-west-1-pop' = 'companyreg.aliyuncs.com',
    'us-east-1' = 'companyreg.aliyuncs.com',
    'us-west-1' = 'companyreg.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model BindProduceAuthorizationRequest {
  authorizedUserIds?: string(name='AuthorizedUserIds', example='1219541161213057,1219541161213059', position='Body'),
  bizId: string(name='BizId', description='This parameter is required.', example='P20210815211849000001', position='Body'),
  bizType: string(name='BizType', description='This parameter is required.', example='esp.bookkeeping_ai', position='Body'),
}

model BindProduceAuthorizationResponseBody = {
  data?: {
    authorizedUserList?: [ 
      {
        accountValidType?: int32(name='AccountValidType', example='2'),
        userId?: string(name='UserId', example='1219541161213058'),
        userName?: string(name='UserName', example='test@alibaba-inc.com'),
      }
    ](name='AuthorizedUserList'),
    message?: string(name='Message'),
    success?: boolean(name='Success', example='false'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='200'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId', example='AC492C5D-29D0-5103-9271-2C3A9D99F5CA'),
}

model BindProduceAuthorizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BindProduceAuthorizationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BindProduceAuthorization  BindProduceAuthorizationRequest
  * @return BindProduceAuthorizationResponse
 */
async function bindProduceAuthorization(request: BindProduceAuthorizationRequest): BindProduceAuthorizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindProduceAuthorization', 'POST', '/', 'json', true, 'form', request);
}

model CloseIntentionForPartnerRequest {
  bizType: string(name='BizType', description='This parameter is required.', example='esp.beian_assist', position='Query'),
  intentionBizId: string(name='IntentionBizId', description='This parameter is required.', example='I20211105230733000001', position='Query'),
  note: string(name='Note', description='This parameter is required.', position='Query'),
}

model CloseIntentionForPartnerResponseBody = {
  errorCode?: string(name='ErrorCode', example='NoPermission'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId', example='4674B06A-B57F-5922-890C-D23D17C5BD21'),
  success?: boolean(name='Success', example='True'),
}

model CloseIntentionForPartnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CloseIntentionForPartnerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CloseIntentionForPartner  CloseIntentionForPartnerRequest
  * @return CloseIntentionForPartnerResponse
 */
async function closeIntentionForPartner(request: CloseIntentionForPartnerRequest): CloseIntentionForPartnerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CloseIntentionForPartner', 'POST', '/', 'json', false, 'json', request);
}

model CloseUserIntentionRequest {
  bizType?: string(name='BizType', example='esp.bookkeeping', position='Query'),
  intentionBizId: string(name='IntentionBizId', description='This parameter is required.', example='I20201027162033000001', position='Query'),
  note: string(name='Note', description='This parameter is required.', position='Query'),
}

model CloseUserIntentionResponseBody = {
  errorCode?: string(name='ErrorCode', example='NoPermission'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId', example='DD5639FF-1240-51DE-9BA8-2075670A1EAC'),
  success?: boolean(name='Success', example='True'),
}

model CloseUserIntentionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CloseUserIntentionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CloseUserIntention  CloseUserIntentionRequest
  * @return CloseUserIntentionResponse
 */
async function closeUserIntention(request: CloseUserIntentionRequest): CloseUserIntentionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CloseUserIntention', 'POST', '/', 'json', false, 'json', request);
}

model CreateBusinessOpportunityRequest {
  bizType: string(name='BizType', description='This parameter is required.', example='esp.hightech', position='Query'),
  contactName?: string(name='ContactName', position='Query'),
  mobile: string(name='Mobile', description='This parameter is required.', example='18704330000', position='Query'),
  source: int32(name='Source', description='This parameter is required.', position='Query'),
  vCode?: string(name='VCode', example='345674', position='Query'),
}

model CreateBusinessOpportunityResponseBody = {
  errorCode?: string(name='ErrorCode', example='NoPermission'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='6A603AA0-73BA-52B3-AC7D-0F846ECF7A9D'),
  success?: boolean(name='Success', example='True'),
}

model CreateBusinessOpportunityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateBusinessOpportunityResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateBusinessOpportunity  CreateBusinessOpportunityRequest
  * @return CreateBusinessOpportunityResponse
 */
async function createBusinessOpportunity(request: CreateBusinessOpportunityRequest): CreateBusinessOpportunityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateBusinessOpportunity', 'POST', '/', 'json', false, 'json', request);
}

model CreateProduceForPartnerRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='P20210301102840000001', position='Query'),
  bizType: string(name='BizType', description='This parameter is required.', example='esp.hightech', position='Query'),
  extInfo?: string(name='ExtInfo', position='Query'),
}

model CreateProduceForPartnerResponseBody = {
  bizId?: string(name='BizId', example='P20210208152920000001'),
  errorCode?: string(name='ErrorCode', example='NoPermission'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId', example='2174AA97-56FB-50FA-B243-0460B9E4CE0C'),
  success?: boolean(name='Success', example='True'),
}

model CreateProduceForPartnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateProduceForPartnerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateProduceForPartner  CreateProduceForPartnerRequest
  * @return CreateProduceForPartnerResponse
 */
async function createProduceForPartner(request: CreateProduceForPartnerRequest): CreateProduceForPartnerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateProduceForPartner', 'POST', '/', 'json', false, 'json', request);
}

model DescribePartnerConfigRequest {
  bizType: string(name='BizType', description='This parameter is required.', example='esp.wangwen', position='Query'),
  partnerCode: string(name='PartnerCode', description='This parameter is required.', example='jinsan', position='Query'),
}

model DescribePartnerConfigResponseBody = {
  contact?: string(name='Contact'),
  partnerCode?: string(name='PartnerCode', example='jinsan'),
  partnerName?: string(name='PartnerName'),
  requestId?: string(name='RequestId', example='8179A0B3-A5D3-52F4-8845-F0ABC3CC6783'),
}

model DescribePartnerConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePartnerConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribePartnerConfig  DescribePartnerConfigRequest
  * @return DescribePartnerConfigResponse
 */
async function describePartnerConfig(request: DescribePartnerConfigRequest): DescribePartnerConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePartnerConfig', 'POST', '/', 'json', false, 'json', request);
}

model GenerateUploadFilePolicyRequest {
  bizType?: string(name='BizType', example='esp.isp', position='Query'),
  fileName?: string(name='FileName', position='Query'),
  fileType?: string(name='FileType', example='company_apply_business_license', position='Query'),
}

model GenerateUploadFilePolicyResponseBody = {
  accessId?: string(name='AccessId', description='OSSAccessKeyId', example='hObpgEXoca42qH3V'),
  encodedPolicy?: string(name='EncodedPolicy', example='eyJleHBpcmF0aW9uIjoiMjAyMS0xMi0wNlQwNjoxOTowMi40MjdaIiwiY29uZGl0aW9ucyI6W1siZXEiLCIkYnVja2V0IiwibXNlYS1jYWlzaHVpIl1dfQ=='),
  expireTime?: string(name='ExpireTime', example='1638169824405'),
  fileDir?: string(name='FileDir', example='company_apply_card/company_change_city/1577930895198750/1638170049657'),
  fileUrl?: string(name='FileUrl', example='https://'),
  host?: string(name='Host', description='OSS Endpoint。', example='//companyapply.oss-cn-zhangjiakou.aliyuncs.com/'),
  requestId?: string(name='RequestId', example='EB809CAB-82F7-5843-A42F-356770CD4914'),
  signature?: string(name='Signature', example='jykxhmskIF24sLlxc1GafU/eQMU='),
}

model GenerateUploadFilePolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateUploadFilePolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GenerateUploadFilePolicy  GenerateUploadFilePolicyRequest
  * @return GenerateUploadFilePolicyResponse
 */
async function generateUploadFilePolicy(request: GenerateUploadFilePolicyRequest): GenerateUploadFilePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateUploadFilePolicy', 'POST', '/', 'json', false, 'json', request);
}

model GetAlipayUrlRequest {
  bizType: string(name='BizType', description='This parameter is required.', example='esp.beian_assist', position='Query'),
  orderId: long(name='OrderId', description='This parameter is required.', example='206129201170307', minimum=0, maximum=9223372036854775807, position='Query'),
  returnUrl?: string(name='ReturnUrl', example='https://nfyt.lzsgtghchy.com:502/sigin/', position='Query'),
  type: string(name='Type', description='This parameter is required.', example='web', maxLength=19, position='Query'),
}

model GetAlipayUrlResponseBody = {
  data?: string(name='Data', example='https://'),
  requestId?: string(name='RequestId', example='2174AA97-56FB-50FA-B243-0460B9E4CE0C'),
}

model GetAlipayUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAlipayUrlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAlipayUrl  GetAlipayUrlRequest
  * @return GetAlipayUrlResponse
 */
async function getAlipayUrl(request: GetAlipayUrlRequest): GetAlipayUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAlipayUrl', 'GET', '/', 'json', false, 'json', request);
}

model ListIntentionNoteRequest {
  beginTime?: long(name='BeginTime', example='1640456765459', position='Query'),
  bizType?: string(name='BizType', position='Query'),
  endTime?: long(name='EndTime', example='1631635199999', position='Query'),
  intentionBizId: string(name='IntentionBizId', description='This parameter is required.', example='I20210420142416000001', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
}

model ListIntentionNoteResponseBody = {
  currentPageNum?: int32(name='CurrentPageNum', example='0'),
  data?: [ 
    {
      createTime?: string(name='CreateTime', example='2022-01-25 10:21:38'),
      intentionBizId?: string(name='IntentionBizId', example='I20210420142416000001'),
      note?: string(name='Note'),
      source?: int32(name='Source', example='1'),
      type?: string(name='Type', example='1'),
    }
  ](name='Data'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='6A603AA0-73BA-52B3-AC7D-0F846ECF7A9D'),
  totalItemNum?: int32(name='TotalItemNum', example='3'),
  totalPageNum?: int32(name='TotalPageNum', example='1'),
}

model ListIntentionNoteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIntentionNoteResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListIntentionNote  ListIntentionNoteRequest
  * @return ListIntentionNoteResponse
 */
async function listIntentionNote(request: ListIntentionNoteRequest): ListIntentionNoteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListIntentionNote', 'POST', '/', 'json', false, 'json', request);
}

model ListProduceAuthorizationRequest {
  bizId?: string(name='BizId', example='P20210709190452000001', position='Query'),
  bizType?: string(name='BizType', example='esp.bookkeeping_ai', position='Query'),
  pageNum: int32(name='PageNum', description='This parameter is required.', example='1', minimum=1, maximum=10000, position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='20', minimum=1, maximum=1000, position='Query'),
}

model ListProduceAuthorizationResponseBody = {
  currentPageNum?: int32(name='CurrentPageNum', example='1'),
  data?: [ 
    {
      authorizedUserId?: string(name='AuthorizedUserId', example='12195411612139999'),
      authorizedUserName?: string(name='AuthorizedUserName', example='test@alibaba-inc.com'),
    }
  ](name='Data'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='10AAC56B-C512-5860-9A9E-B949431E7174'),
  success?: boolean(name='Success', example='True'),
  totalItemNum?: int32(name='TotalItemNum', example='292'),
  totalPageNum?: int32(name='TotalPageNum', example='27'),
}

model ListProduceAuthorizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProduceAuthorizationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListProduceAuthorization  ListProduceAuthorizationRequest
  * @return ListProduceAuthorizationResponse
 */
async function listProduceAuthorization(request: ListProduceAuthorizationRequest): ListProduceAuthorizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListProduceAuthorization', 'POST', '/', 'json', false, 'json', request);
}

model ListUserDetailSolutionsRequest {
  bizType?: string(name='BizType', example='esp.wangwen', position='Query'),
  intentionBizId?: string(name='IntentionBizId', example='I20211222161651000001', position='Query'),
  pageNum?: int32(name='PageNum', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
}

model ListUserDetailSolutionsResponseBody = {
  currentPageNum?: int32(name='CurrentPageNum', example='5'),
  data?: [ 
    {
      bizId?: string(name='BizId', example='S20211222161651000001'),
      bizType?: string(name='BizType', example='esp.wangwen'),
      createTime?: long(name='CreateTime', example='15556223433'),
      deliveryOrderBizId?: string(name='DeliveryOrderBizId', example='P20211222161651000001'),
      extInfo?: string(name='ExtInfo', example='{}'),
      intentionAssignBizId?: string(name='IntentionAssignBizId', example='A20211222161651000001'),
      intentionBizId?: string(name='IntentionBizId', example='I20211222161651000001'),
      partnerCode?: string(name='PartnerCode', example='jinsan'),
      reason?: string(name='Reason'),
      status?: int32(name='Status', example='1'),
      updateTime?: long(name='UpdateTime', example='15556223433'),
      userId?: string(name='UserId', example='1219541161213057'),
    }
  ](name='Data'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='2174AA97-56FB-50FA-B243-0460B9E4CE0C'),
  totalItemNum?: int32(name='TotalItemNum', example='1'),
  totalPageNum?: int32(name='TotalPageNum', example='1'),
}

model ListUserDetailSolutionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserDetailSolutionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUserDetailSolutions  ListUserDetailSolutionsRequest
  * @return ListUserDetailSolutionsResponse
 */
async function listUserDetailSolutions(request: ListUserDetailSolutionsRequest): ListUserDetailSolutionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUserDetailSolutions', 'POST', '/', 'json', false, 'json', request);
}

model ListUserIntentionNotesRequest {
  bizType: string(name='BizType', description='This parameter is required.', example='esp.beian_assist', position='Query'),
  intentionBizId: string(name='IntentionBizId', description='This parameter is required.', example='I20210912102942000001', position='Query'),
  pageNum: int32(name='PageNum', description='This parameter is required.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='20', position='Query'),
}

model ListUserIntentionNotesResponseBody = {
  data?: [ 
    {
      createTime?: string(name='CreateTime', example='2022-01-25 10:21:38'),
      note?: string(name='Note'),
    }
  ](name='Data'),
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='5D8BD6E8-28D9-5451-BBA1-3D3DCA6971F6'),
  success?: boolean(name='Success', example='True'),
  totalItemNum?: int32(name='TotalItemNum', example='8'),
  totalPageNum?: int32(name='TotalPageNum', example='1'),
}

model ListUserIntentionNotesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserIntentionNotesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUserIntentionNotes  ListUserIntentionNotesRequest
  * @return ListUserIntentionNotesResponse
 */
async function listUserIntentionNotes(request: ListUserIntentionNotesRequest): ListUserIntentionNotesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUserIntentionNotes', 'POST', '/', 'json', false, 'json', request);
}

model ListUserIntentionsRequest {
  area?: string(name='Area', position='Query'),
  bizType?: string(name='BizType', example='esp.companyreg_cloud', position='Query'),
  bizTypes?: string(name='BizTypes', example='esp.bookkeeping,esp.bookkeeping_cloud', position='Query'),
  intentionBizId?: string(name='IntentionBizId', example='I20210917170147000001', position='Query'),
  pageNum?: int32(name='PageNum', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  sortFiled?: string(name='SortFiled', example='UpdateTime', position='Query'),
  sortOrder?: string(name='SortOrder', example='desc', position='Query'),
  status?: int32(name='Status', example='37', position='Query'),
  withExtInfo?: boolean(name='WithExtInfo', position='Query'),
}

model ListUserIntentionsResponseBody = {
  currentPageNum?: int32(name='CurrentPageNum', example='1'),
  data?: [ 
    {
      area?: string(name='Area'),
      bizId?: string(name='BizId', example='I100000033443'),
      bizType?: string(name='BizType', example='esp.lgo'),
      contactName?: string(name='ContactName'),
      createTime?: long(name='CreateTime', example='2022-01-24 15:43:58'),
      description?: string(name='Description'),
      ext?: string(name='Ext'),
      mobile?: string(name='Mobile', example='18000000000'),
      reason?: string(name='Reason'),
      status?: int32(name='Status', example='1'),
      updateTime?: long(name='UpdateTime', example='2022-01-24 15:43:58'),
      userId?: string(name='UserId', example='1219541161213057'),
    }
  ](name='Data'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='2174AA97-56FB-50FA-B243-0460B9E4CE0C'),
  totalItemNum?: int32(name='TotalItemNum', example='2'),
  totalPageNum?: int32(name='TotalPageNum', example='1'),
}

model ListUserIntentionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserIntentionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUserIntentions  ListUserIntentionsRequest
  * @return ListUserIntentionsResponse
 */
async function listUserIntentions(request: ListUserIntentionsRequest): ListUserIntentionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUserIntentions', 'POST', '/', 'json', false, 'json', request);
}

model ListUserProduceOperateLogsRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='P20210928095324000002', position='Query'),
  bizType: string(name='BizType', description='This parameter is required.', example='esp.wangwen', position='Query'),
  pageNum: int32(name='PageNum', description='This parameter is required.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='20', position='Query'),
}

model ListUserProduceOperateLogsResponseBody = {
  data?: [ 
    {
      bizId?: string(name='BizId', example='P20210928095324000002'),
      bizStatus?: int32(name='BizStatus', example='10'),
      bizType?: string(name='BizType', example='esp.wangwen'),
      note?: string(name='Note'),
      operateName?: string(name='OperateName'),
      operateTime?: long(name='OperateTime', example='1695324000002'),
      operateUserType?: string(name='OperateUserType', example='user'),
      toBizStatus?: int32(name='ToBizStatus', example='35'),
    }
  ](name='Data'),
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='0DCBE2FF-2DFC-56DC-9A15-BDF27B7FFB1B'),
  success?: boolean(name='Success', example='True'),
  totalItemNum?: int32(name='TotalItemNum', example='6'),
  totalPageNum?: int32(name='TotalPageNum', example='23'),
}

model ListUserProduceOperateLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserProduceOperateLogsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUserProduceOperateLogs  ListUserProduceOperateLogsRequest
  * @return ListUserProduceOperateLogsResponse
 */
async function listUserProduceOperateLogs(request: ListUserProduceOperateLogsRequest): ListUserProduceOperateLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUserProduceOperateLogs', 'POST', '/', 'json', false, 'json', request);
}

model ListUserSolutionsRequest {
  bizType?: string(name='BizType', position='Query'),
  existStatus?: [ long ](name='ExistStatus', shrink='json', position='Query'),
  intentionBizId?: string(name='IntentionBizId', example='I20210924151843000001', position='Query'),
  pageNum?: int32(name='PageNum', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
}

model ListUserSolutionsResponseBody = {
  currentPageNum?: int32(name='CurrentPageNum', example='8'),
  data?: [ 
    {
      bizId?: string(name='BizId', example='S20210924151843000001'),
      bizType?: string(name='BizType', example='esp.logo'),
      createTime?: long(name='CreateTime', example='164454443222'),
      deliveryOrderBizId?: string(name='DeliveryOrderBizId', example='P20210924151843000001'),
      intentionAssignBizId?: string(name='IntentionAssignBizId', example='A20210924151843000001'),
      intentionBizId?: string(name='IntentionBizId', example='I20210924151843000001'),
      partnerCode?: string(name='PartnerCode', example='jinsan'),
      reason?: string(name='Reason'),
      status?: int32(name='Status', example='1'),
      updateTime?: long(name='UpdateTime', example='164454443222'),
      userId?: string(name='UserId', example='1219541161213057'),
    }
  ](name='Data'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='2174AA97-56FB-50FA-B243-0460B9E4CE0C'),
  totalItemNum?: int32(name='TotalItemNum', example='344'),
  totalPageNum?: int32(name='TotalPageNum', example='1'),
}

model ListUserSolutionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserSolutionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUserSolutions  ListUserSolutionsRequest
  * @return ListUserSolutionsResponse
 */
async function listUserSolutions(request: ListUserSolutionsRequest): ListUserSolutionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUserSolutions', 'POST', '/', 'json', false, 'json', request);
}

model OperateProduceForPartnerRequest {
  bizId?: string(name='BizId', example='P20210930105636000001', position='Query'),
  bizType?: string(name='BizType', example='esp.beian_assist', position='Query'),
  extInfo?: string(name='ExtInfo', example='{\\"beianServiceNumber\\":\\"9969c666-0935-4c5b-8042-926ff546e39f\\"}', position='Query'),
  operateType?: string(name='OperateType', example='CERT_MATERIAL_SUBMITTED', position='Query'),
}

model OperateProduceForPartnerResponseBody = {
  errorCode?: string(name='ErrorCode', example='NoPermission'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId', example='D170A4BA-4528-5E07-B8D5-6449C42EC23F'),
  success?: boolean(name='Success', example='True'),
}

model OperateProduceForPartnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OperateProduceForPartnerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of OperateProduceForPartner  OperateProduceForPartnerRequest
  * @return OperateProduceForPartnerResponse
 */
async function operateProduceForPartner(request: OperateProduceForPartnerRequest): OperateProduceForPartnerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OperateProduceForPartner', 'POST', '/', 'json', false, 'json', request);
}

model PutMeasureDataRequest {
  bizType: string(name='BizType', description='This parameter is required.', example='esp.sp', position='Body'),
  data: string(name='Data', description='This parameter is required.', example='[]', position='Body'),
  dataType: string(name='DataType', description='This parameter is required.', example='d', position='Body'),
  endTime: string(name='EndTime', description='This parameter is required.', example='1634019240000', position='Body'),
  startTime: string(name='StartTime', description='This parameter is required.', example='1640400574804', position='Body'),
}

model PutMeasureDataResponseBody = {
  data?: boolean(name='Data', example='True'),
  requestId?: string(name='RequestId', example='6A603AA0-73BA-52B3-AC7D-0F846ECF7A9D'),
}

model PutMeasureDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PutMeasureDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PutMeasureData  PutMeasureDataRequest
  * @return PutMeasureDataResponse
 */
async function putMeasureData(request: PutMeasureDataRequest): PutMeasureDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutMeasureData', 'POST', '/', 'json', true, 'form', request);
}

model PutMeasureReadyFlagRequest {
  bizType: string(name='BizType', description='This parameter is required.', example='esp.bookkeeping', position='Query'),
  dataType: string(name='DataType', description='This parameter is required.', example='d', position='Query'),
  endTime: string(name='EndTime', description='This parameter is required.', example='1634784240000', position='Query'),
  readyFlag: string(name='ReadyFlag', description='This parameter is required.', example='1', position='Query'),
  startTime: string(name='StartTime', description='This parameter is required.', example='1634969692175', position='Query'),
}

model PutMeasureReadyFlagResponseBody = {
  data?: boolean(name='Data', example='True'),
  requestId?: string(name='RequestId', example='2174AA97-56FB-50FA-B243-0460B9E4CE0C'),
}

model PutMeasureReadyFlagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PutMeasureReadyFlagResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PutMeasureReadyFlag  PutMeasureReadyFlagRequest
  * @return PutMeasureReadyFlagResponse
 */
async function putMeasureReadyFlag(request: PutMeasureReadyFlagRequest): PutMeasureReadyFlagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutMeasureReadyFlag', 'POST', '/', 'json', false, 'json', request);
}

model QueryAvailableNumbersRequest {
  bizType: string(name='BizType', description='This parameter is required.', example='test', position='Query'),
}

model QueryAvailableNumbersResponseBody = {
  data?: [ string ](name='Data'),
  errorCode?: string(name='ErrorCode', example='PARTNER.CONFIG.NOT.FOUND'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId', example='6A603AA0-73BA-52B3-AC7D-0F846ECF7A9D'),
  success?: boolean(name='Success', example='True'),
}

model QueryAvailableNumbersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAvailableNumbersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryAvailableNumbers  QueryAvailableNumbersRequest
  * @return QueryAvailableNumbersResponse
 */
async function queryAvailableNumbers(request: QueryAvailableNumbersRequest): QueryAvailableNumbersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAvailableNumbers', 'POST', '/', 'json', false, 'json', request);
}

model QueryBagRemainingRequest {
  bizType: string(name='BizType', description='This parameter is required.', example='esp.hightech', position='Query'),
}

model QueryBagRemainingResponseBody = {
  data?: long(name='Data', example='True'),
  requestId?: string(name='RequestId', example='6A603AA0-73BA-52B3-AC7D-0F846ECF7A9D'),
}

model QueryBagRemainingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryBagRemainingResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryBagRemaining  QueryBagRemainingRequest
  * @return QueryBagRemainingResponse
 */
async function queryBagRemaining(request: QueryBagRemainingRequest): QueryBagRemainingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryBagRemaining', 'GET', '/', 'json', false, 'json', request);
}

model QueryCallRecordListRequest {
  bizId: string(name='BizId', description='This parameter is required.', position='Query'),
  bizType: string(name='BizType', description='This parameter is required.', position='Query'),
  skillType: long(name='SkillType', description='This parameter is required.', position='Query'),
}

model QueryCallRecordListResponseBody = {
  data?: [ 
    {
      duration?: int32(name='Duration'),
      signatureUrl?: string(name='SignatureUrl'),
      startTime?: long(name='StartTime'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryCallRecordListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryCallRecordListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryCallRecordList  QueryCallRecordListRequest
  * @return QueryCallRecordListResponse
 */
async function queryCallRecordList(request: QueryCallRecordListRequest): QueryCallRecordListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCallRecordList', 'POST', '/', 'json', false, 'json', request);
}

model QueryInstanceRequest {
  bizType: string(name='BizType', description='This parameter is required.', example='esp.bookkeeping', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='T20210302164856000001', position='Query'),
}

model QueryInstanceResponseBody = {
  data?: string(name='Data', example='{}'),
  requestId?: string(name='RequestId', example='2174AA97-56FB-50FA-B243-0460B9E4CE0C'),
}

model QueryInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryInstance  QueryInstanceRequest
  * @return QueryInstanceResponse
 */
async function queryInstance(request: QueryInstanceRequest): QueryInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryInstance', 'POST', '/', 'json', false, 'json', request);
}

model QueryPartnerIntentionListRequest {
  bizId?: string(name='BizId', example='I20211117092704000001', position='Query'),
  bizType?: string(name='BizType', example='esp.wangwen', position='Query'),
  pageNum?: long(name='PageNum', example='10', position='Query'),
  pageSize?: long(name='PageSize', example='20', position='Query'),
}

model QueryPartnerIntentionListResponseBody = {
  currentPageNum?: long(name='CurrentPageNum', example='2'),
  data?: [ 
    {
      bizId?: string(name='BizId', example='I20211117092704000001'),
      bizType?: string(name='BizType', example='esp.wangwen'),
      mobile?: string(name='Mobile', example='18700000003'),
    }
  ](name='Data'),
  pageSize?: long(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='78E9DC76-7DFD-5975-99B0-4A95E8A92F5D'),
  totalItemNum?: long(name='TotalItemNum', example='319'),
  totalPageNum?: long(name='TotalPageNum', example='13'),
}

model QueryPartnerIntentionListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryPartnerIntentionListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryPartnerIntentionList  QueryPartnerIntentionListRequest
  * @return QueryPartnerIntentionListResponse
 */
async function queryPartnerIntentionList(request: QueryPartnerIntentionListRequest): QueryPartnerIntentionListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPartnerIntentionList', 'POST', '/', 'json', false, 'json', request);
}

model QueryPartnerProduceListRequest {
  bizId?: string(name='BizId', example='P20211216204717000001', position='Query'),
  bizType?: string(name='BizType', example='esp.cdn', position='Query'),
  pageNum?: long(name='PageNum', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='20', position='Query'),
}

model QueryPartnerProduceListResponseBody = {
  currentPageNum?: long(name='CurrentPageNum', example='1'),
  data?: [ 
    {
      bizId?: string(name='BizId', example='P20211216204717000001'),
      bizType?: string(name='BizType', example='esp.cdn'),
      mobile?: string(name='mobile', example='18600000001'),
    }
  ](name='Data'),
  pageSize?: long(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='1A13ABB5-7649-5031-B55C-D2E38F9F189D'),
  totalItemNum?: long(name='TotalItemNum', example='34'),
  totalPageNum?: long(name='TotalPageNum', example='1'),
}

model QueryPartnerProduceListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryPartnerProduceListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryPartnerProduceList  QueryPartnerProduceListRequest
  * @return QueryPartnerProduceListResponse
 */
async function queryPartnerProduceList(request: QueryPartnerProduceListRequest): QueryPartnerProduceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPartnerProduceList', 'GET', '/', 'json', false, 'json', request);
}

model QueryUserNeedAuthRequest {
}

model QueryUserNeedAuthResponseBody = {
  needAuth?: boolean(name='NeedAuth', example='True'),
  requestId?: string(name='RequestId', example='2C859C36-886C-5BE7-A606-01F38A5374D6'),
  success?: boolean(name='Success', example='True'),
}

model QueryUserNeedAuthResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryUserNeedAuthResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryUserNeedAuth  QueryUserNeedAuthRequest
  * @return QueryUserNeedAuthResponse
 */
async function queryUserNeedAuth(request: QueryUserNeedAuthRequest): QueryUserNeedAuthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryUserNeedAuth', 'POST', '/', 'json', false, 'json', request);
}

model RecordPostBackRequest {
  bizId: string(name='bizId', description='This parameter is required.', example='P111111111111', position='Query'),
  bizType: string(name='bizType', description='This parameter is required.', example='esp.zhangsan', position='Query'),
  contactor: string(name='contactor', description='This parameter is required.', position='Query'),
  content: string(name='content', description='This parameter is required.', position='Query'),
  entityKey: string(name='entityKey', description='This parameter is required.', example='esp_produce', position='Query'),
}

model RecordPostBackResponseBody = {
  allowRetry?: boolean(name='AllowRetry', example='false'),
  appName?: string(name='AppName', example='esp-core-aliyun-com'),
  dynamicCode?: string(name='DynamicCode', example='PARAMETER.ILLEGAL'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorArgs?: [ any ](name='ErrorArgs'),
  errorCode?: string(name='ErrorCode', example='PARAMETER.ILLEGAL'),
  errorMsg?: string(name='ErrorMsg'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  module?: boolean(name='Module', example='True'),
  requestId?: string(name='RequestId', example='B8E5CC4C-7563-19BD-B02F-DFFFD4E51D4A'),
  success?: boolean(name='Success', example='True'),
}

model RecordPostBackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RecordPostBackResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RecordPostBack  RecordPostBackRequest
  * @return RecordPostBackResponse
 */
async function recordPostBack(request: RecordPostBackRequest): RecordPostBackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecordPostBack', 'POST', '/', 'json', false, 'json', request);
}

model RejectSolutionRequest {
  bizType?: string(name='BizType', position='Query'),
  note: string(name='Note', description='This parameter is required.', position='Query'),
  solutionBizId: string(name='SolutionBizId', description='This parameter is required.', example='S20200512114050000001', position='Query'),
}

model RejectSolutionResponseBody = {
  errorCode?: string(name='ErrorCode', example='PARTNER.CONFIG.NOT.FOUND'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId', example='2174AA97-56FB-50FA-B243-0460B9E4CE0C'),
  success?: boolean(name='Success', example='True'),
}

model RejectSolutionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RejectSolutionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RejectSolution  RejectSolutionRequest
  * @return RejectSolutionResponse
 */
async function rejectSolution(request: RejectSolutionRequest): RejectSolutionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RejectSolution', 'POST', '/', 'json', false, 'json', request);
}

model RejectUserSolutionRequest {
  bizType: string(name='BizType', description='This parameter is required.', example='esp.companyreg', position='Query'),
  note: string(name='Note', description='This parameter is required.', position='Query'),
  solutionBizId: string(name='SolutionBizId', description='This parameter is required.', example='S20211227151912000001', position='Query'),
}

model RejectUserSolutionResponseBody = {
  errorCode?: string(name='ErrorCode', example='NoPermission'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId', example='717711FB-F887-597B-8121-B77437E89B97'),
  success?: boolean(name='Success', example='True'),
}

model RejectUserSolutionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RejectUserSolutionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RejectUserSolution  RejectUserSolutionRequest
  * @return RejectUserSolutionResponse
 */
async function rejectUserSolution(request: RejectUserSolutionRequest): RejectUserSolutionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RejectUserSolution', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseProduceAuthorizationRequest {
  authorizedUserId?: string(name='AuthorizedUserId', example='1219541161213000', position='Body'),
  bizId: string(name='BizId', description='This parameter is required.', example='P20211117141528000001', position='Body'),
  bizType: string(name='BizType', description='This parameter is required.', example='esp.beian_assist', position='Body'),
}

model ReleaseProduceAuthorizationResponseBody = {
  errorCode?: string(name='ErrorCode', example='200'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId', example='2174AA97-56FB-50FA-B243-0460B9E4CE0C'),
  success?: boolean(name='Success', example='True'),
}

model ReleaseProduceAuthorizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReleaseProduceAuthorizationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ReleaseProduceAuthorization  ReleaseProduceAuthorizationRequest
  * @return ReleaseProduceAuthorizationResponse
 */
async function releaseProduceAuthorization(request: ReleaseProduceAuthorizationRequest): ReleaseProduceAuthorizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseProduceAuthorization', 'POST', '/', 'json', true, 'form', request);
}

model StartBackToBackCallRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='20211203180209000001', position='Query'),
  bizType: string(name='BizType', description='This parameter is required.', example='test', position='Query'),
  callCenterNumber?: string(name='CallCenterNumber', example='02131584184', position='Query'),
  caller: string(name='Caller', description='This parameter is required.', example='13162828888', position='Query'),
  mobileKey?: string(name='MobileKey', example='mobile1', position='Query'),
  skillType: long(name='SkillType', description='This parameter is required.', example='1', position='Query'),
}

model StartBackToBackCallResponseBody = {
  data?: boolean(name='Data', example='True'),
  errorCode?: string(name='ErrorCode', example='NoPermission'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId', example='2174AA97-56FB-50FA-B243-0460B9E4CE0C'),
  success?: boolean(name='Success', example='True'),
}

model StartBackToBackCallResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartBackToBackCallResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartBackToBackCall  StartBackToBackCallRequest
  * @return StartBackToBackCallResponse
 */
async function startBackToBackCall(request: StartBackToBackCallRequest): StartBackToBackCallResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartBackToBackCall', 'POST', '/', 'json', false, 'json', request);
}

model SubmitIntentionForPartnerRequest {
  area?: string(name='Area', position='Query'),
  bizType?: string(name='BizType', example='esp.isp', position='Query'),
  channel?: string(name='Channel', example='lingjun', position='Query'),
  commodityType?: string(name='CommodityType', example='Server', position='Query'),
  contactName?: string(name='ContactName', position='Query'),
  description?: string(name='Description', example='ceshi', position='Query'),
  extInfo?: string(name='ExtInfo', example='{\\"beianServiceNumber\\":\\"9969c666-0935-4c5b-8042-926ff546e39f\\"}', position='Query'),
  grade?: int32(name='Grade', example='country', position='Query'),
  mobile?: string(name='Mobile', example='18704330000', position='Query'),
  userId?: string(name='UserId', example='1212312312312', position='Query'),
}

model SubmitIntentionForPartnerResponseBody = {
  errorMsg?: string(name='ErrorMsg'),
  intentionBizId?: string(name='IntentionBizId', example='I20211223101045000001'),
  requestId?: string(name='RequestId', description='Id of the request', example='6A603AA0-73BA-52B3-AC7D-0F846ECF7A9D'),
  success?: boolean(name='Success', example='True'),
}

model SubmitIntentionForPartnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitIntentionForPartnerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitIntentionForPartner  SubmitIntentionForPartnerRequest
  * @return SubmitIntentionForPartnerResponse
 */
async function submitIntentionForPartner(request: SubmitIntentionForPartnerRequest): SubmitIntentionForPartnerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitIntentionForPartner', 'POST', '/', 'json', false, 'json', request);
}

model SubmitIntentionNoteRequest {
  bizType?: string(name='BizType', position='Query'),
  intentionBizId: string(name='IntentionBizId', description='This parameter is required.', example='I20210927144823000001', position='Query'),
  note: string(name='Note', description='This parameter is required.', position='Query'),
}

model SubmitIntentionNoteResponseBody = {
  errorCode?: string(name='ErrorCode', example='NoPermission'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId', example='668571EF-1E7E-5435-AA65-4ECFFDDA133F'),
  success?: boolean(name='Success', example='True'),
}

model SubmitIntentionNoteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitIntentionNoteResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitIntentionNote  SubmitIntentionNoteRequest
  * @return SubmitIntentionNoteResponse
 */
async function submitIntentionNote(request: SubmitIntentionNoteRequest): SubmitIntentionNoteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitIntentionNote', 'POST', '/', 'json', false, 'json', request);
}

model SubmitSolutionRequest {
  bizType: string(name='BizType', description='This parameter is required.', example='esp.wangwen', position='Query'),
  intentionBizId: string(name='IntentionBizId', description='This parameter is required.', example='I20211223101045000001', position='Query'),
  operateType?: string(name='OperateType', position='Query'),
  solution: string(name='Solution', description='This parameter is required.', position='Query'),
  userId?: string(name='UserId', example='1219541161213057', position='Query'),
}

model SubmitSolutionResponseBody = {
  confirmUrl?: string(name='ConfirmUrl', example='https://companyreg.console.aliyun.com/#/intention-notarize?Type=119&bizid=I20220114181457000001'),
  errorCode?: string(name='ErrorCode', example='NoPermission'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId', example='0A3CFCF5-E0C0-5C0B-A2ED-03827F16D85F'),
  solutionBizId?: string(name='SolutionBizId', example='S20211109140729000001'),
  success?: boolean(name='Success', example='True'),
}

model SubmitSolutionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitSolutionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitSolution  SubmitSolutionRequest
  * @return SubmitSolutionResponse
 */
async function submitSolution(request: SubmitSolutionRequest): SubmitSolutionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitSolution', 'POST', '/', 'json', false, 'json', request);
}

model TransferIntentionOwnerRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='P20210709190452000001', position='Query'),
  bizType: string(name='BizType', description='This parameter is required.', example='esp.wangwen', position='Query'),
  personId: int32(name='PersonId', description='This parameter is required.', example='67842', position='Query'),
  remark?: string(name='Remark', position='Query'),
}

model TransferIntentionOwnerResponseBody = {
  data?: boolean(name='Data', example='True'),
  errorCode?: string(name='ErrorCode', example='NoPermission'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId', example='717711FB-F887-597B-8121-B77437E89B97'),
  success?: boolean(name='Success', example='True'),
}

model TransferIntentionOwnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TransferIntentionOwnerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of TransferIntentionOwner  TransferIntentionOwnerRequest
  * @return TransferIntentionOwnerResponse
 */
async function transferIntentionOwner(request: TransferIntentionOwnerRequest): TransferIntentionOwnerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TransferIntentionOwner', 'POST', '/', 'json', false, 'json', request);
}

model TransferProduceOwnerRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='P20210208152920000001', position='Query'),
  bizType: string(name='BizType', description='This parameter is required.', example='esp.companyreg_cloud', position='Query'),
  personId: int32(name='PersonId', description='This parameter is required.', example='15565', position='Query'),
  remark?: string(name='Remark', position='Query'),
}

model TransferProduceOwnerResponseBody = {
  data?: boolean(name='Data', example='True'),
  errorCode?: string(name='ErrorCode', example='NoPermission'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId', example='DD5639FF-1240-51DE-9BA8-2075670A1EAC'),
  success?: boolean(name='Success', example='True'),
}

model TransferProduceOwnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TransferProduceOwnerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of TransferProduceOwner  TransferProduceOwnerRequest
  * @return TransferProduceOwnerResponse
 */
async function transferProduceOwner(request: TransferProduceOwnerRequest): TransferProduceOwnerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TransferProduceOwner', 'POST', '/', 'json', false, 'json', request);
}

