/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Gwlb';
  @version = '2024-04-15';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddServersToServerGroupRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Body'),
  dryRun?: boolean(name='DryRun', example='false', position='Body'),
  serverGroupId: string(name='ServerGroupId', description='This parameter is required.', example='sgp-atstuj3rtoptyui****', position='Body'),
  servers: [ 
    {
      port?: int32(name='Port', example='6081'),
      serverId: string(name='ServerId', description='This parameter is required.', example='i-bp67acfmxazb4p****'),
      serverIp?: string(name='ServerIp', example='192.168.XX.XX'),
      serverType: string(name='ServerType', description='This parameter is required.', example='Ecs'),
    }
  ](name='Servers', description='This parameter is required.', position='Body'),
}

model AddServersToServerGroupResponseBody = {
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model AddServersToServerGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddServersToServerGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddServersToServerGroup  AddServersToServerGroupRequest
  * @return AddServersToServerGroupResponse
 */
async function addServersToServerGroup(request: AddServersToServerGroupRequest): AddServersToServerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddServersToServerGroup', 'POST', '/', 'json', true, 'form', request);
}

model CreateListenerRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****', position='Body'),
  dryRun?: boolean(name='DryRun', example='false', position='Body'),
  listenerDescription?: string(name='ListenerDescription', example='listener-description', position='Body'),
  loadBalancerId: string(name='LoadBalancerId', description='This parameter is required.', example='gwlb-te609d6696632f7*****', position='Body'),
  serverGroupId: string(name='ServerGroupId', description='This parameter is required.', example='sgp-ckh01px70dszof****', position='Body'),
  tag?: [ 
    {
      key?: string(name='Key', example='testKey'),
      value?: string(name='Value', example='testValue'),
    }
  ](name='Tag', position='Body'),
}

model CreateListenerResponseBody = {
  listenerId?: string(name='ListenerId', example='lsn-wi3c0v30ivysrg****'),
  requestId?: string(name='RequestId', example='A045E652-D298-5E70-A978-7247135336FB'),
}

model CreateListenerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateListenerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateListener  CreateListenerRequest
  * @return CreateListenerResponse
 */
async function createListener(request: CreateListenerRequest): CreateListenerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateListener', 'POST', '/', 'json', true, 'form', request);
}

model CreateLoadBalancerRequest {
  addressIpVersion?: string(name='AddressIpVersion', example='IPv4', position='Body'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Body'),
  dryRun?: boolean(name='DryRun', example='false', position='Body'),
  loadBalancerName?: string(name='LoadBalancerName', example='testGwlbName', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmwbufq6q3****', position='Body'),
  tag?: [ 
    {
      key?: string(name='Key', example='testTagKey'),
      value?: string(name='Value', example='testTagValue'),
    }
  ](name='Tag', position='Body'),
  vpcId: string(name='VpcId', description='This parameter is required.', example='vpc-uf6qcgpv22ttrnnjh****', position='Body'),
  zoneMappings: [ 
    {
      vSwitchId: string(name='VSwitchId', description='This parameter is required.', example='vsw-2f0eb020****'),
      zoneId: string(name='ZoneId', description='This parameter is required.', example='cn-hangzhou-a'),
    }
  ](name='ZoneMappings', description='This parameter is required.', position='Body'),
}

model CreateLoadBalancerResponseBody = {
  loadBalancerId?: string(name='LoadBalancerId', example='gwlb-9njtjmqt7zfcqm****'),
  requestId?: string(name='RequestId', example='00B19438-66BB-58C3-8C2F-DA5B6F95CBDA'),
}

model CreateLoadBalancerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLoadBalancerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateLoadBalancer  CreateLoadBalancerRequest
  * @return CreateLoadBalancerResponse
 */
async function createLoadBalancer(request: CreateLoadBalancerRequest): CreateLoadBalancerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLoadBalancer', 'POST', '/', 'json', true, 'form', request);
}

model CreateServerGroupRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****', position='Body'),
  connectionDrainConfig?: {
    connectionDrainEnabled?: boolean(name='ConnectionDrainEnabled', example='false'),
    connectionDrainTimeout?: int32(name='ConnectionDrainTimeout', example='300'),
  }(name='ConnectionDrainConfig', position='Body'),
  dryRun?: boolean(name='DryRun', example='False', position='Body'),
  healthCheckConfig?: {
    healthCheckConnectPort?: int32(name='HealthCheckConnectPort', example='80'),
    healthCheckConnectTimeout?: int32(name='HealthCheckConnectTimeout', example='5'),
    healthCheckDomain?: string(name='HealthCheckDomain', example='$SERVER_IP'),
    healthCheckEnabled?: boolean(name='HealthCheckEnabled', example='true'),
    healthCheckHttpCode?: [ string ](name='HealthCheckHttpCode'),
    healthCheckInterval?: int32(name='HealthCheckInterval', example='10'),
    healthCheckPath?: string(name='HealthCheckPath', example='/test/index.html'),
    healthCheckProtocol?: string(name='HealthCheckProtocol', example='TCP'),
    healthyThreshold?: int32(name='HealthyThreshold', example='2'),
    unhealthyThreshold?: int32(name='UnhealthyThreshold', example='2'),
  }(name='HealthCheckConfig', position='Body'),
  protocol?: string(name='Protocol', example='GENEVE', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-atstuj3rtop****', position='Body'),
  scheduler?: string(name='Scheduler', example='5TCH', position='Body'),
  serverGroupName?: string(name='ServerGroupName', example='testServerGroupName', position='Body'),
  serverGroupType?: string(name='ServerGroupType', example='Instance', position='Body'),
  tag?: [ 
    {
      key?: string(name='Key', example='testTagKey'),
      value?: string(name='Value', example='testTagValue'),
    }
  ](name='Tag', position='Body'),
  vpcId: string(name='VpcId', description='This parameter is required.', example='vpc-bp15zckdt37pq72zv****', position='Body'),
}

model CreateServerGroupResponseBody = {
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
  serverGroupId?: string(name='ServerGroupId', example='sgp-atstuj3rtoptyui****'),
}

model CreateServerGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateServerGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateServerGroup  CreateServerGroupRequest
  * @return CreateServerGroupResponse
 */
async function createServerGroup(request: CreateServerGroupRequest): CreateServerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateServerGroup', 'POST', '/', 'json', true, 'form', request);
}

model DeleteListenerRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****', position='Body'),
  dryRun?: boolean(name='DryRun', example='false', position='Body'),
  listenerId: string(name='ListenerId', description='This parameter is required.', example='lsn-brx2y3hqdincizg***', position='Body'),
}

model DeleteListenerResponseBody = {
  requestId?: string(name='RequestId', example='5C6E3548-086F-5FF6-A2B3-B1871B3AB488'),
}

model DeleteListenerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteListenerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteListener  DeleteListenerRequest
  * @return DeleteListenerResponse
 */
async function deleteListener(request: DeleteListenerRequest): DeleteListenerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteListener', 'POST', '/', 'json', true, 'form', request);
}

model DeleteLoadBalancerRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Body'),
  dryRun?: boolean(name='DryRun', example='false', position='Body'),
  loadBalancerId: string(name='LoadBalancerId', description='This parameter is required.', example='gwlb-9njtjmqt7zfcqm****', position='Body'),
}

model DeleteLoadBalancerResponseBody = {
  requestId?: string(name='RequestId', example='37907828-01AB-5AC3-9DDE-25D419091D54'),
}

model DeleteLoadBalancerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteLoadBalancerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteLoadBalancer  DeleteLoadBalancerRequest
  * @return DeleteLoadBalancerResponse
 */
async function deleteLoadBalancer(request: DeleteLoadBalancerRequest): DeleteLoadBalancerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLoadBalancer', 'POST', '/', 'json', true, 'form', request);
}

model DeleteServerGroupRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****', position='Body'),
  dryRun?: boolean(name='DryRun', example='false', position='Body'),
  serverGroupId: string(name='ServerGroupId', description='This parameter is required.', example='sgp-atstuj3rtoptyui****', position='Body'),
}

model DeleteServerGroupResponseBody = {
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model DeleteServerGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteServerGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteServerGroup  DeleteServerGroupRequest
  * @return DeleteServerGroupResponse
 */
async function deleteServerGroup(request: DeleteServerGroupRequest): DeleteServerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteServerGroup', 'POST', '/', 'json', true, 'form', request);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh-CN', position='Body'),
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName', example='China (Hangzhou)'),
      regionEndpoint?: string(name='RegionEndpoint', example='gwlb.cn-hangzhou.aliyuncs.com'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId', example='162FCE8D-CEEC-5083-90BF-B45D8C4F81FB'),
}

model DescribeRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRegions  DescribeRegionsRequest
  * @return DescribeRegionsResponse
 */
async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', true, 'form', request);
}

model DescribeZonesRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh-CN', position='Body'),
}

model DescribeZonesResponseBody = {
  requestId?: string(name='RequestId', example='4C605F7E-D0F6-54E2-B004-F9B132F0D8B2'),
  zones?: [ 
    {
      localName?: string(name='LocalName'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-g'),
    }
  ](name='Zones'),
}

model DescribeZonesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeZonesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeZones  DescribeZonesRequest
  * @return DescribeZonesResponse
 */
async function describeZones(request: DescribeZonesRequest): DescribeZonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeZones', 'POST', '/', 'json', true, 'form', request);
}

model GetListenerAttributeRequest {
  listenerId: string(name='ListenerId', description='This parameter is required.', example='lsn-brx2y3hqdinciz****', position='Body'),
}

model GetListenerAttributeResponseBody = {
  listenerDescription?: string(name='ListenerDescription', example='listener_description'),
  listenerId?: string(name='ListenerId', example='lsn-3kbj3587mqhm3p****'),
  listenerStatus?: string(name='ListenerStatus', example='Provisioning'),
  loadBalancerId?: string(name='LoadBalancerId', example='gwlb-te609d6696632f76****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestId?: string(name='RequestId', example='75CC3312-7757-5EE1-90D8-49CEA66608AE'),
  serverGroupId?: string(name='ServerGroupId', example='sgp-sp8d2r6y7t0xtl****'),
  tags?: [ 
    {
      key?: string(name='Key', example='testKey'),
      value?: string(name='Value', example='testValue'),
    }
  ](name='Tags'),
}

model GetListenerAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetListenerAttributeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetListenerAttribute  GetListenerAttributeRequest
  * @return GetListenerAttributeResponse
 */
async function getListenerAttribute(request: GetListenerAttributeRequest): GetListenerAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetListenerAttribute', 'POST', '/', 'json', true, 'form', request);
}

model GetListenerHealthStatusRequest {
  filter?: [ 
    {
      name?: string(name='Name', example='Status'),
      values?: [ string ](name='Values'),
    }
  ](name='Filter', position='Body'),
  listenerId: string(name='ListenerId', description='This parameter is required.', example='lsn-7sixpvm5fc3v0b****', position='Body'),
  maxResults?: int32(name='MaxResults', example='20', minimum=1, maximum=1000, position='Body'),
  nextToken?: string(name='NextToken', example='4f1d7cc9f51e18904e8a063603a6b0c3d03bc69f78734254e0b5e8707e68****', position='Body'),
  skip?: int32(name='Skip', example='10', position='Body'),
}

model GetListenerHealthStatusResponseBody = {
  listenerHealthStatus?: [ 
    {
      listenerId?: string(name='ListenerId', example='lsn-sg8aha6pzjavvo****'),
      serverGroupInfos?: [ 
        {
          healthCheckEnabled?: boolean(name='HealthCheckEnabled', example='true'),
          serverGroupId?: string(name='ServerGroupId', example='sgp-0vdsbyszro3nr6****'),
          servers?: [ 
            {
              port?: int32(name='Port', example='6081'),
              reason?: {
                reasonCode?: string(name='ReasonCode', example='CONNECT_TIMEOUT'),
              }(name='Reason'),
              serverId?: string(name='ServerId', example='i-2ze4rnh8yj9kif3z****'),
              serverIp?: string(name='ServerIp', example='192.168.0.XXX'),
              status?: string(name='Status', example='Healthy'),
            }
          ](name='Servers'),
        }
      ](name='ServerGroupInfos'),
    }
  ](name='ListenerHealthStatus'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='U12WEI6Ro2ol3wA54rBNSwdC5+lYy6q5SjIQEvc1wz5mjZxV+YjsHRdXV8XauY1BpOQIvwX63E0en54H3D****'),
  requestId?: string(name='RequestId', example='0ED4F222-36A0-5470-8A9A-AAB4E96BAC1A'),
  totalCount?: int32(name='TotalCount', example='31'),
}

model GetListenerHealthStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetListenerHealthStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetListenerHealthStatus  GetListenerHealthStatusRequest
  * @return GetListenerHealthStatusResponse
 */
async function getListenerHealthStatus(request: GetListenerHealthStatusRequest): GetListenerHealthStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetListenerHealthStatus', 'POST', '/', 'json', true, 'form', request);
}

model GetLoadBalancerAttributeRequest {
  loadBalancerId: string(name='LoadBalancerId', description='This parameter is required.', example='gwlb-9njtjmqt7zfcqm****', position='Body'),
}

model GetLoadBalancerAttributeResponseBody = {
  addressIpVersion?: string(name='AddressIpVersion', example='IPv4'),
  createTime?: string(name='CreateTime', example='2024-07-08T10:12:58Z'),
  loadBalancerBusinessStatus?: string(name='LoadBalancerBusinessStatus', example='Normal'),
  loadBalancerId?: string(name='LoadBalancerId', example='gwlb-9njtjmqt7zfcqm****'),
  loadBalancerName?: string(name='LoadBalancerName', example='gwlb'),
  loadBalancerStatus?: string(name='LoadBalancerStatus', example='Active'),
  requestId?: string(name='RequestId', example='B6DC5DDC-9560-59BF-80FA-ED1E5CB417DF'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmx7pmxcy****'),
  tags?: [ 
    {
      key?: string(name='Key', example='testTagKey'),
      value?: string(name='Value', example='testTagValue'),
    }
  ](name='Tags'),
  vpcId?: string(name='VpcId', example='vpc-k1aajsbwbaq4todet****'),
  zoneMappings?: [ 
    {
      loadBalancerAddresses?: [ 
        {
          eniId?: string(name='EniId', example='eni-bp1iahwz3rzgvltz****'),
          privateIpv4Address?: string(name='PrivateIpv4Address', example='192.168.XX.XX'),
        }
      ](name='LoadBalancerAddresses'),
      vSwitchId?: string(name='VSwitchId', example='vsw-uf6v8l7d2f1k53xrl****'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-j'),
    }
  ](name='ZoneMappings'),
}

model GetLoadBalancerAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLoadBalancerAttributeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetLoadBalancerAttribute  GetLoadBalancerAttributeRequest
  * @return GetLoadBalancerAttributeResponse
 */
async function getLoadBalancerAttribute(request: GetLoadBalancerAttributeRequest): GetLoadBalancerAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLoadBalancerAttribute', 'POST', '/', 'json', true, 'form', request);
}

model ListListenersRequest {
  listenerIds?: [ string ](name='ListenerIds', position='Body'),
  loadBalancerIds?: [ string ](name='LoadBalancerIds', position='Body'),
  maxResults?: int32(name='MaxResults', example='20', position='Body'),
  nextToken?: string(name='NextToken', example='d209f4e63ec942c967c50c888a13****', position='Body'),
  skip?: long(name='Skip', example='10', position='Body'),
  tag?: [ 
    {
      key?: string(name='Key', example='tagKey'),
      value?: string(name='Value', example='tagValue'),
    }
  ](name='Tag', position='Body'),
}

model ListListenersResponseBody = {
  listeners?: [ 
    {
      listenerDescription?: string(name='ListenerDescription', example='listener-description'),
      listenerId?: string(name='ListenerId', example='lsn-vu7folhh5ntm8u****'),
      listenerStatus?: string(name='ListenerStatus', example='Running'),
      loadBalancerId?: string(name='LoadBalancerId', example='gwlb-uf6hbeh795xlqln7g****'),
      serverGroupId?: string(name='ServerGroupId', example='sgp-5yapcb422i51ru****'),
      tags?: [ 
        {
          key?: string(name='Key', example='testKey'),
          value?: string(name='Value', example='testValue'),
        }
      ](name='Tags'),
    }
  ](name='Listeners'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='5c281c0a0d6bfb6355ed088c2108aca8e0b5e8707e68****'),
  requestId?: string(name='RequestId', example='7DBFC67C-A272-5952-8287-6C3EBE4E04D9'),
  totalCount?: int32(name='TotalCount'),
}

model ListListenersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListListenersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListListeners  ListListenersRequest
  * @return ListListenersResponse
 */
async function listListeners(request: ListListenersRequest): ListListenersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListListeners', 'POST', '/', 'json', true, 'form', request);
}

model ListLoadBalancersRequest {
  addressIpVersion?: string(name='AddressIpVersion', example='IPv4', position='Body'),
  loadBalancerBusinessStatus?: string(name='LoadBalancerBusinessStatus', example='Normal', position='Body'),
  loadBalancerIds?: [ string ](name='LoadBalancerIds', position='Body'),
  loadBalancerNames?: [ string ](name='LoadBalancerNames', position='Body'),
  loadBalancerStatus?: string(name='LoadBalancerStatus', example='Active', position='Body'),
  maxResults?: int32(name='MaxResults', example='20', position='Body'),
  nextToken?: string(name='NextToken', example='WyJyb290IiwibiIsIm4iLDEsMCwxNjg1MDY1NTgyNzYwLCI2NDcwMGY2ZTc2Zjc0MWFiZGEyZjQyNzc4ZDk2MmJkOTk3ZGZmM2Nm****', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-aek2htf5qsyrn****', position='Body'),
  skip?: int32(name='Skip', example='1', position='Body'),
  tag?: [ 
    {
      key?: string(name='Key', example='testTagKey'),
      value?: string(name='Value', example='testTagValue'),
    }
  ](name='Tag', position='Body'),
  vpcIds?: [ string ](name='VpcIds', position='Body'),
  zoneIds?: [ string ](name='ZoneIds', position='Body'),
}

model ListLoadBalancersResponseBody = {
  loadBalancers?: [ 
    {
      addressIpVersion?: string(name='AddressIpVersion', example='IPv4'),
      createTime?: string(name='CreateTime', example='2024-08-05 18:24:07'),
      loadBalancerBusinessStatus?: string(name='LoadBalancerBusinessStatus', example='Normal'),
      loadBalancerId?: string(name='LoadBalancerId', example='gwlb-9njtjmqt7zfcqm****'),
      loadBalancerName?: string(name='LoadBalancerName', example='testGwlbName'),
      loadBalancerStatus?: string(name='LoadBalancerStatus', example='Active'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-aek26jasguy****'),
      tags?: [ 
        {
          key?: string(name='Key', example='testTagKey'),
          value?: string(name='Value', example='testTagValue'),
        }
      ](name='Tags'),
      vpcId?: string(name='VpcId', example='vpc-uf6eg0vndlsa84n7r****'),
      zoneMappings?: [ 
        {
          loadBalancerAddresses?: [ 
            {
              eniId?: string(name='EniId', example='eni-bp17qv9zbzyqy629****'),
              privateIpv4Address?: string(name='PrivateIpv4Address', example='192.168.XX.XX'),
            }
          ](name='LoadBalancerAddresses'),
          vSwitchId?: string(name='VSwitchId', example='vsw-2zemule5dz7okwqfv****'),
          zoneId?: string(name='ZoneId', example='cn-hangzhou-g'),
        }
      ](name='ZoneMappings'),
    }
  ](name='LoadBalancers'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='CAESGgoSChAKDGNvbXBsZXRlVGltZRABCgQiAggAGAAiQAoJAIldD2UAAAAACjMDLgAAADFTNzMyZDMwMzAzMDY5NzQzNDM0NmI3NzM2NjUzNzc4NzM2YTc0NjYzOTYz****'),
  requestId?: string(name='RequestId', example='378A80E9-4262-5D8E-8D62-0969E52D7358'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model ListLoadBalancersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLoadBalancersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListLoadBalancers  ListLoadBalancersRequest
  * @return ListLoadBalancersResponse
 */
async function listLoadBalancers(request: ListLoadBalancersRequest): ListLoadBalancersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLoadBalancers', 'POST', '/', 'json', true, 'form', request);
}

model ListServerGroupServersRequest {
  maxResults?: int32(name='MaxResults', example='20', position='Body'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Body'),
  serverGroupId?: string(name='ServerGroupId', example='sgp-atstuj3rtoptyui****', position='Body'),
  serverIds?: [ string ](name='ServerIds', position='Body'),
  serverIps?: [ string ](name='ServerIps', position='Body'),
  skip?: int32(name='Skip', example='1', position='Body'),
}

model ListServerGroupServersResponseBody = {
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
  servers?: [ 
    {
      port?: int32(name='Port', example='6081'),
      serverGroupId?: string(name='ServerGroupId', example='sgp-atstuj3rtoptyui****'),
      serverId?: string(name='ServerId', example='i-bp67acfmxazb4p****'),
      serverIp?: string(name='ServerIp', example='192.168.xxx.xxx'),
      serverType?: string(name='ServerType', example='Ecs'),
      status?: string(name='Status', example='Available'),
    }
  ](name='Servers'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListServerGroupServersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListServerGroupServersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListServerGroupServers  ListServerGroupServersRequest
  * @return ListServerGroupServersResponse
 */
async function listServerGroupServers(request: ListServerGroupServersRequest): ListServerGroupServersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListServerGroupServers', 'POST', '/', 'json', true, 'form', request);
}

model ListServerGroupsRequest {
  maxResults?: int32(name='MaxResults', example='20', position='Body'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-atstuj3rtop****', position='Body'),
  serverGroupIds?: [ string ](name='ServerGroupIds', position='Body'),
  serverGroupNames?: [ string ](name='ServerGroupNames', position='Body'),
  serverGroupType?: string(name='ServerGroupType', example='Instance', position='Body'),
  skip?: int32(name='Skip', example='1', position='Body'),
  tag?: [ 
    {
      key?: string(name='Key', example='testTagKey'),
      value?: string(name='Value', example='testTagValue'),
    }
  ](name='Tag', position='Body'),
  vpcId?: string(name='VpcId', example='vpc-bp15zckdt37pq72zv****', position='Body'),
}

model ListServerGroupsResponseBody = {
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
  serverGroups?: [ 
    {
      connectionDrainConfig?: {
        connectionDrainEnabled?: boolean(name='ConnectionDrainEnabled', example='false'),
        connectionDrainTimeout?: int32(name='ConnectionDrainTimeout', example='300'),
      }(name='ConnectionDrainConfig'),
      createTime?: string(name='CreateTime', example='2024-08-05T18:24:07Z'),
      healthCheckConfig?: {
        healthCheckConnectPort?: int32(name='HealthCheckConnectPort', example='80'),
        healthCheckConnectTimeout?: int32(name='HealthCheckConnectTimeout', example='5'),
        healthCheckDomain?: string(name='HealthCheckDomain', example='$SERVER_IP'),
        healthCheckEnabled?: boolean(name='HealthCheckEnabled', example='true'),
        healthCheckHttpCode?: [ string ](name='HealthCheckHttpCode'),
        healthCheckInterval?: int32(name='HealthCheckInterval', example='10'),
        healthCheckPath?: string(name='HealthCheckPath', example='/test/index.html'),
        healthCheckProtocol?: string(name='HealthCheckProtocol', example='TCP'),
        healthyThreshold?: int32(name='HealthyThreshold', example='2'),
        unhealthyThreshold?: int32(name='UnhealthyThreshold', example='2'),
      }(name='HealthCheckConfig'),
      protocol?: string(name='Protocol', example='GENEVE'),
      relatedLoadBalancerIds?: [ string ](name='RelatedLoadBalancerIds'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-atstuj3rtop****'),
      scheduler?: string(name='Scheduler', example='5TCH'),
      serverCount?: int32(name='ServerCount', example='2'),
      serverGroupId?: string(name='ServerGroupId', example='sgp-atstuj3rtoptyui****'),
      serverGroupName?: string(name='ServerGroupName', example='testServerGroupName'),
      serverGroupStatus?: string(name='ServerGroupStatus', example='Available'),
      serverGroupType?: string(name='ServerGroupType', example='Instance'),
      tags?: [ 
        {
          key?: string(name='Key', example='testTagKey'),
          value?: string(name='Value', example='testTagValue'),
        }
      ](name='Tags'),
      vpcId?: string(name='VpcId', example='vpc-bp15zckdt37pq72zv****'),
    }
  ](name='ServerGroups'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListServerGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListServerGroupsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListServerGroups  ListServerGroupsRequest
  * @return ListServerGroupsResponse
 */
async function listServerGroups(request: ListServerGroupsRequest): ListServerGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListServerGroups', 'POST', '/', 'json', true, 'form', request);
}

model ListTagResourcesRequest {
  maxResults?: int32(name='MaxResults', example='20', position='Body'),
  nextToken?: string(name='NextToken', example='WyI2NDQ3MWUxM2EzOWNhMmY0Y2M2YTRiNzZhOWQwNmU1Y2RlNTYzMGEzIiwibiIsIm4iLDEsLTEsMTY5ODcxMzI2NjU0MywiNjU0MDRlYjI2MmI3MDhjY2JiMjM0ZmU0ODNkNTVmMGRhZDllOTBi****', position='Body'),
  resourceId?: [ string ](name='ResourceId', position='Body'),
  resourceType: string(name='ResourceType', description='This parameter is required.', example='loadbalancer', position='Body'),
  tag?: [ 
    {
      key?: string(name='Key', example='testKey'),
      value?: string(name='Value', example='testValue'),
    }
  ](name='Tag', position='Body'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', example='d209f4e63ec942c967c50c888a13****'),
  requestId?: string(name='RequestId', example='A95325A2-E421-58A6-88AD-7A26CE610F45'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', example='gwlb-nrnrxwd15en27r****'),
      resourceType?: string(name='ResourceType', example='loadbalancer'),
      tagKey?: string(name='TagKey', example='testKey'),
      tagValue?: string(name='TagValue', example='testValue'),
    }
  ](name='TagResources'),
}

model ListTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTagResources  ListTagResourcesRequest
  * @return ListTagResourcesResponse
 */
async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', true, 'form', request);
}

model MoveResourceGroupRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****', position='Body'),
  dryRun?: boolean(name='DryRun', example='false', position='Body'),
  newResourceGroupId: string(name='NewResourceGroupId', description='This parameter is required.', example='rg-aek253e4oit****', position='Body'),
  resourceId: string(name='ResourceId', description='This parameter is required.', example='gwlb-nrnrxwd15en27r****', position='Body'),
  resourceType: string(name='ResourceType', description='This parameter is required.', example='loadbalancer', position='Body'),
}

model MoveResourceGroupResponseBody = {
  requestId?: string(name='RequestId', example='78828B5C-521E-50F3-84D4-7019691D1382'),
}

model MoveResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MoveResourceGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of MoveResourceGroup  MoveResourceGroupRequest
  * @return MoveResourceGroupResponse
 */
async function moveResourceGroup(request: MoveResourceGroupRequest): MoveResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MoveResourceGroup', 'POST', '/', 'json', true, 'form', request);
}

model RemoveServersFromServerGroupRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****', position='Body'),
  dryRun?: boolean(name='DryRun', example='false', position='Body'),
  serverGroupId: string(name='ServerGroupId', description='This parameter is required.', example='sgp-atstuj3rtoptyui****', position='Body'),
  servers: [ 
    {
      port?: int32(name='Port', example='6081'),
      serverId: string(name='ServerId', description='This parameter is required.', example='i-bp67acfmxazb4p****'),
      serverIp?: string(name='ServerIp', example='192.168.xxx.xxx'),
      serverType: string(name='ServerType', description='This parameter is required.', example='Ecs'),
    }
  ](name='Servers', description='This parameter is required.', position='Body'),
}

model RemoveServersFromServerGroupResponseBody = {
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model RemoveServersFromServerGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveServersFromServerGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemoveServersFromServerGroup  RemoveServersFromServerGroupRequest
  * @return RemoveServersFromServerGroupResponse
 */
async function removeServersFromServerGroup(request: RemoveServersFromServerGroupRequest): RemoveServersFromServerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveServersFromServerGroup', 'POST', '/', 'json', true, 'form', request);
}

model TagResourcesRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****', position='Body'),
  dryRun?: boolean(name='DryRun', example='false', position='Body'),
  resourceId: [ string ](name='ResourceId', description='This parameter is required.', position='Body'),
  resourceType: string(name='ResourceType', description='This parameter is required.', example='loadbalancer', position='Body'),
  tag: [ 
    {
      key: string(name='Key', description='This parameter is required.', example='testKey'),
      value: string(name='Value', description='This parameter is required.', example='testValue'),
    }
  ](name='Tag', description='This parameter is required.', position='Body'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='54F6E60A-1777-5C17-A6A9-BCC1A7FE945B'),
}

model TagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of TagResources  TagResourcesRequest
  * @return TagResourcesResponse
 */
async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', true, 'form', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', example='true', position='Body'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****', position='Body'),
  dryRun?: boolean(name='DryRun', example='false', position='Body'),
  resourceId: [ string ](name='ResourceId', description='This parameter is required.', position='Body'),
  resourceType: string(name='ResourceType', description='This parameter is required.', example='loadbalancer', position='Body'),
  tagKey?: [ string ](name='TagKey', position='Body'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='3DC0064C-C09E-5C99-8FD4-9CDB2DA7FA21'),
}

model UntagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UntagResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UntagResources  UntagResourcesRequest
  * @return UntagResourcesResponse
 */
async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', true, 'form', request);
}

model UpdateListenerAttributeRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****', position='Body'),
  dryRun?: boolean(name='DryRun', example='false', position='Body'),
  listenerDescription?: string(name='ListenerDescription', example='listener_description', position='Body'),
  listenerId: string(name='ListenerId', description='This parameter is required.', example='lsn-lxce8iqbof2vl0****', position='Body'),
  serverGroupId?: string(name='ServerGroupId', example='sgp-sp8d2r6y7t0xtl****', position='Body'),
}

model UpdateListenerAttributeResponseBody = {
  requestId?: string(name='RequestId', example='7DBFC67C-A272-5952-8287-6C3EBE4E04D9'),
}

model UpdateListenerAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateListenerAttributeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateListenerAttribute  UpdateListenerAttributeRequest
  * @return UpdateListenerAttributeResponse
 */
async function updateListenerAttribute(request: UpdateListenerAttributeRequest): UpdateListenerAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateListenerAttribute', 'POST', '/', 'json', true, 'form', request);
}

model UpdateLoadBalancerAttributeRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Body'),
  dryRun?: boolean(name='DryRun', example='false', position='Body'),
  loadBalancerId: string(name='LoadBalancerId', description='This parameter is required.', example='gwlb-9njtjmqt7zfcqm****', position='Body'),
  loadBalancerName?: string(name='LoadBalancerName', example='testGwlbName', position='Body'),
}

model UpdateLoadBalancerAttributeResponseBody = {
  requestId?: string(name='RequestId', example='B956C629-0E8C-5EFF-BAC1-B0E3A8C5CBDD'),
}

model UpdateLoadBalancerAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateLoadBalancerAttributeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateLoadBalancerAttribute  UpdateLoadBalancerAttributeRequest
  * @return UpdateLoadBalancerAttributeResponse
 */
async function updateLoadBalancerAttribute(request: UpdateLoadBalancerAttributeRequest): UpdateLoadBalancerAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLoadBalancerAttribute', 'POST', '/', 'json', true, 'form', request);
}

model UpdateLoadBalancerZonesRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****', position='Body'),
  dryRun?: boolean(name='DryRun', example='false', position='Body'),
  loadBalancerId: string(name='LoadBalancerId', description='This parameter is required.', example='gwlb-9njtjmqt7zfcqm****', position='Body'),
  zoneMappings: [ 
    {
      vSwitchId: string(name='VSwitchId', description='This parameter is required.', example='vsw-bp1n75pbs77v5q6p3****'),
      zoneId: string(name='ZoneId', description='This parameter is required.', example='cn-hangzhou-h'),
    }
  ](name='ZoneMappings', description='This parameter is required.', position='Body'),
}

model UpdateLoadBalancerZonesResponseBody = {
  requestId?: string(name='RequestId', example='ED8905C2-A4F6-5E43-87B7-6A5DC8757146'),
}

model UpdateLoadBalancerZonesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateLoadBalancerZonesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateLoadBalancerZones  UpdateLoadBalancerZonesRequest
  * @return UpdateLoadBalancerZonesResponse
 */
async function updateLoadBalancerZones(request: UpdateLoadBalancerZonesRequest): UpdateLoadBalancerZonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLoadBalancerZones', 'POST', '/', 'json', true, 'form', request);
}

model UpdateServerGroupAttributeRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****', position='Body'),
  connectionDrainConfig?: {
    connectionDrainEnabled?: boolean(name='ConnectionDrainEnabled', example='false'),
    connectionDrainTimeout?: int32(name='ConnectionDrainTimeout', example='300'),
  }(name='ConnectionDrainConfig', position='Body'),
  dryRun?: boolean(name='DryRun', example='false', position='Body'),
  healthCheckConfig?: {
    healthCheckConnectPort?: int32(name='HealthCheckConnectPort', example='80'),
    healthCheckConnectTimeout?: int32(name='HealthCheckConnectTimeout', example='5'),
    healthCheckDomain?: string(name='HealthCheckDomain', example='$SERVER_IP'),
    healthCheckEnabled?: boolean(name='HealthCheckEnabled', example='true'),
    healthCheckHttpCode?: [ string ](name='HealthCheckHttpCode'),
    healthCheckInterval?: int32(name='HealthCheckInterval', example='10'),
    healthCheckPath?: string(name='HealthCheckPath', example='/test/index.html'),
    healthCheckProtocol?: string(name='HealthCheckProtocol', example='TCP'),
    healthyThreshold?: int32(name='HealthyThreshold', example='2'),
    unhealthyThreshold?: int32(name='UnhealthyThreshold', example='2'),
  }(name='HealthCheckConfig', position='Body'),
  scheduler?: string(name='Scheduler', example='5TCH', position='Body'),
  serverGroupId: string(name='ServerGroupId', description='This parameter is required.', example='sgp-atstuj3rtoptyui****', position='Body'),
  serverGroupName?: string(name='ServerGroupName', example='testServerGroupName', position='Body'),
}

model UpdateServerGroupAttributeResponseBody = {
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model UpdateServerGroupAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateServerGroupAttributeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateServerGroupAttribute  UpdateServerGroupAttributeRequest
  * @return UpdateServerGroupAttributeResponse
 */
async function updateServerGroupAttribute(request: UpdateServerGroupAttributeRequest): UpdateServerGroupAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateServerGroupAttribute', 'POST', '/', 'json', true, 'form', request);
}

