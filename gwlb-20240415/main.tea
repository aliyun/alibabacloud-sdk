/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('gwlb', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddServersToServerGroupRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  dryRun?: boolean(name='DryRun', example='false'),
  serverGroupId?: string(name='ServerGroupId', description='This parameter is required.', example='sgp-atstuj3rtoptyui****'),
  servers?: [ 
    {
      port?: int32(name='Port', example='6081'),
      serverId?: string(name='ServerId', description='This parameter is required.', example='i-bp67acfmxazb4p****'),
      serverIp?: string(name='ServerIp', example='192.168.XX.XX'),
      serverType?: string(name='ServerType', description='This parameter is required.', example='Ecs'),
    }
  ](name='Servers', description='This parameter is required.'),
}

model AddServersToServerGroupResponseBody = {
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model AddServersToServerGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddServersToServerGroupResponseBody(name='body'),
}

/**
 * @summary 服务器组中添加后端服务器
 *
 * @param request AddServersToServerGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddServersToServerGroupResponse
 */
async function addServersToServerGroupWithOptions(request: AddServersToServerGroupRequest, runtime: Util.RuntimeOptions): AddServersToServerGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    body['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.serverGroupId)) {
    body['ServerGroupId'] = request.serverGroupId;
  }
  var bodyFlat : map[string]any = {};
  if (!Util.isUnset(request.servers)) {
    bodyFlat['Servers'] = request.servers;
  }
  body = {
    ...body,
    ...OpenApiUtil.query(bodyFlat),
  };

  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddServersToServerGroup',
    version = '2024-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 服务器组中添加后端服务器
 *
 * @param request AddServersToServerGroupRequest
 * @return AddServersToServerGroupResponse
 */
async function addServersToServerGroup(request: AddServersToServerGroupRequest): AddServersToServerGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return addServersToServerGroupWithOptions(request, runtime);
}

model CreateListenerRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****'),
  dryRun?: boolean(name='DryRun', example='false'),
  listenerDescription?: string(name='ListenerDescription', example='listener-description'),
  loadBalancerId?: string(name='LoadBalancerId', description='This parameter is required.', example='gwlb-te609d6696632f7*****'),
  serverGroupId?: string(name='ServerGroupId', description='This parameter is required.', example='sgp-ckh01px70dszof****'),
  tag?: [ 
    {
      key?: string(name='Key', example='testKey'),
      value?: string(name='Value', example='testValue'),
    }
  ](name='Tag'),
}

model CreateListenerResponseBody = {
  listenerId?: string(name='ListenerId', example='lsn-wi3c0v30ivysrg****'),
  requestId?: string(name='RequestId', example='A045E652-D298-5E70-A978-7247135336FB'),
}

model CreateListenerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateListenerResponseBody(name='body'),
}

/**
 * @summary 创建监听
 *
 * @param request CreateListenerRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateListenerResponse
 */
async function createListenerWithOptions(request: CreateListenerRequest, runtime: Util.RuntimeOptions): CreateListenerResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    body['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.listenerDescription)) {
    body['ListenerDescription'] = request.listenerDescription;
  }
  if (!Util.isUnset(request.loadBalancerId)) {
    body['LoadBalancerId'] = request.loadBalancerId;
  }
  if (!Util.isUnset(request.serverGroupId)) {
    body['ServerGroupId'] = request.serverGroupId;
  }
  var bodyFlat : map[string]any = {};
  if (!Util.isUnset(request.tag)) {
    bodyFlat['Tag'] = request.tag;
  }
  body = {
    ...body,
    ...OpenApiUtil.query(bodyFlat),
  };

  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateListener',
    version = '2024-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建监听
 *
 * @param request CreateListenerRequest
 * @return CreateListenerResponse
 */
async function createListener(request: CreateListenerRequest): CreateListenerResponse {
  var runtime = new Util.RuntimeOptions{};
  return createListenerWithOptions(request, runtime);
}

model CreateLoadBalancerRequest {
  addressIpVersion?: string(name='AddressIpVersion', example='IPv4'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  dryRun?: boolean(name='DryRun', example='false'),
  loadBalancerName?: string(name='LoadBalancerName', example='testGwlbName'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmwbufq6q3****'),
  tag?: [ 
    {
      key?: string(name='Key', example='testTagKey'),
      value?: string(name='Value', example='testTagValue'),
    }
  ](name='Tag'),
  vpcId?: string(name='VpcId', description='This parameter is required.', example='vpc-uf6qcgpv22ttrnnjh****'),
  zoneMappings?: [ 
    {
      vSwitchId?: string(name='VSwitchId', description='This parameter is required.', example='vsw-2f0eb020****'),
      zoneId?: string(name='ZoneId', description='This parameter is required.', example='cn-hangzhou-a'),
    }
  ](name='ZoneMappings', description='This parameter is required.'),
}

model CreateLoadBalancerResponseBody = {
  loadBalancerId?: string(name='LoadBalancerId', example='gwlb-9njtjmqt7zfcqm****'),
  requestId?: string(name='RequestId', example='00B19438-66BB-58C3-8C2F-DA5B6F95CBDA'),
}

model CreateLoadBalancerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLoadBalancerResponseBody(name='body'),
}

/**
 * @summary 创建负载均衡实例
 *
 * @param request CreateLoadBalancerRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateLoadBalancerResponse
 */
async function createLoadBalancerWithOptions(request: CreateLoadBalancerRequest, runtime: Util.RuntimeOptions): CreateLoadBalancerResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.addressIpVersion)) {
    body['AddressIpVersion'] = request.addressIpVersion;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    body['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.loadBalancerName)) {
    body['LoadBalancerName'] = request.loadBalancerName;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  var bodyFlat : map[string]any = {};
  if (!Util.isUnset(request.tag)) {
    bodyFlat['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.vpcId)) {
    body['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.zoneMappings)) {
    bodyFlat['ZoneMappings'] = request.zoneMappings;
  }
  body = {
    ...body,
    ...OpenApiUtil.query(bodyFlat),
  };

  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateLoadBalancer',
    version = '2024-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建负载均衡实例
 *
 * @param request CreateLoadBalancerRequest
 * @return CreateLoadBalancerResponse
 */
async function createLoadBalancer(request: CreateLoadBalancerRequest): CreateLoadBalancerResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLoadBalancerWithOptions(request, runtime);
}

model CreateServerGroupRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****'),
  connectionDrainConfig?: {
    connectionDrainEnabled?: boolean(name='ConnectionDrainEnabled', example='false'),
    connectionDrainTimeout?: int32(name='ConnectionDrainTimeout', example='300'),
  }(name='ConnectionDrainConfig'),
  dryRun?: boolean(name='DryRun', example='False'),
  healthCheckConfig?: {
    healthCheckConnectPort?: int32(name='HealthCheckConnectPort', example='80'),
    healthCheckConnectTimeout?: int32(name='HealthCheckConnectTimeout', example='5'),
    healthCheckDomain?: string(name='HealthCheckDomain', example='$SERVER_IP'),
    healthCheckEnabled?: boolean(name='HealthCheckEnabled', example='true'),
    healthCheckHttpCode?: [ string ](name='HealthCheckHttpCode'),
    healthCheckInterval?: int32(name='HealthCheckInterval', example='10'),
    healthCheckPath?: string(name='HealthCheckPath', example='/test/index.html'),
    healthCheckProtocol?: string(name='HealthCheckProtocol', example='TCP'),
    healthyThreshold?: int32(name='HealthyThreshold', example='2'),
    unhealthyThreshold?: int32(name='UnhealthyThreshold', example='2'),
  }(name='HealthCheckConfig'),
  protocol?: string(name='Protocol', example='GENEVE'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-atstuj3rtop****'),
  scheduler?: string(name='Scheduler', example='5TCH'),
  serverGroupName?: string(name='ServerGroupName', example='testServerGroupName'),
  serverGroupType?: string(name='ServerGroupType', example='Instance'),
  tag?: [ 
    {
      key?: string(name='Key', example='testTagKey'),
      value?: string(name='Value', example='testTagValue'),
    }
  ](name='Tag'),
  vpcId?: string(name='VpcId', description='This parameter is required.', example='vpc-bp15zckdt37pq72zv****'),
}

model CreateServerGroupResponseBody = {
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
  serverGroupId?: string(name='ServerGroupId', example='sgp-atstuj3rtoptyui****'),
}

model CreateServerGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateServerGroupResponseBody(name='body'),
}

/**
 * @summary 创建服务器组
 *
 * @param request CreateServerGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateServerGroupResponse
 */
async function createServerGroupWithOptions(request: CreateServerGroupRequest, runtime: Util.RuntimeOptions): CreateServerGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  var bodyFlat : map[string]any = {};
  if (!Util.isUnset(request.connectionDrainConfig)) {
    bodyFlat['ConnectionDrainConfig'] = request.connectionDrainConfig;
  }
  if (!Util.isUnset(request.dryRun)) {
    body['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.healthCheckConfig)) {
    bodyFlat['HealthCheckConfig'] = request.healthCheckConfig;
  }
  if (!Util.isUnset(request.protocol)) {
    body['Protocol'] = request.protocol;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.scheduler)) {
    body['Scheduler'] = request.scheduler;
  }
  if (!Util.isUnset(request.serverGroupName)) {
    body['ServerGroupName'] = request.serverGroupName;
  }
  if (!Util.isUnset(request.serverGroupType)) {
    body['ServerGroupType'] = request.serverGroupType;
  }
  if (!Util.isUnset(request.tag)) {
    bodyFlat['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.vpcId)) {
    body['VpcId'] = request.vpcId;
  }
  body = {
    ...body,
    ...OpenApiUtil.query(bodyFlat),
  };

  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateServerGroup',
    version = '2024-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建服务器组
 *
 * @param request CreateServerGroupRequest
 * @return CreateServerGroupResponse
 */
async function createServerGroup(request: CreateServerGroupRequest): CreateServerGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createServerGroupWithOptions(request, runtime);
}

model DeleteListenerRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****'),
  dryRun?: boolean(name='DryRun', example='false'),
  listenerId?: string(name='ListenerId', description='This parameter is required.', example='lsn-brx2y3hqdincizg***'),
}

model DeleteListenerResponseBody = {
  requestId?: string(name='RequestId', example='5C6E3548-086F-5FF6-A2B3-B1871B3AB488'),
}

model DeleteListenerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteListenerResponseBody(name='body'),
}

/**
 * @summary 删除监听
 *
 * @param request DeleteListenerRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteListenerResponse
 */
async function deleteListenerWithOptions(request: DeleteListenerRequest, runtime: Util.RuntimeOptions): DeleteListenerResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    body['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.listenerId)) {
    body['ListenerId'] = request.listenerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteListener',
    version = '2024-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除监听
 *
 * @param request DeleteListenerRequest
 * @return DeleteListenerResponse
 */
async function deleteListener(request: DeleteListenerRequest): DeleteListenerResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteListenerWithOptions(request, runtime);
}

model DeleteLoadBalancerRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  dryRun?: boolean(name='DryRun', example='false'),
  loadBalancerId?: string(name='LoadBalancerId', description='This parameter is required.', example='gwlb-9njtjmqt7zfcqm****'),
}

model DeleteLoadBalancerResponseBody = {
  requestId?: string(name='RequestId', example='37907828-01AB-5AC3-9DDE-25D419091D54'),
}

model DeleteLoadBalancerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteLoadBalancerResponseBody(name='body'),
}

/**
 * @summary 删除负载均衡实例
 *
 * @param request DeleteLoadBalancerRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteLoadBalancerResponse
 */
async function deleteLoadBalancerWithOptions(request: DeleteLoadBalancerRequest, runtime: Util.RuntimeOptions): DeleteLoadBalancerResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    body['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.loadBalancerId)) {
    body['LoadBalancerId'] = request.loadBalancerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteLoadBalancer',
    version = '2024-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除负载均衡实例
 *
 * @param request DeleteLoadBalancerRequest
 * @return DeleteLoadBalancerResponse
 */
async function deleteLoadBalancer(request: DeleteLoadBalancerRequest): DeleteLoadBalancerResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLoadBalancerWithOptions(request, runtime);
}

model DeleteServerGroupRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****'),
  dryRun?: boolean(name='DryRun', example='false'),
  serverGroupId?: string(name='ServerGroupId', description='This parameter is required.', example='sgp-atstuj3rtoptyui****'),
}

model DeleteServerGroupResponseBody = {
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model DeleteServerGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteServerGroupResponseBody(name='body'),
}

/**
 * @summary 删除服务器组
 *
 * @param request DeleteServerGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteServerGroupResponse
 */
async function deleteServerGroupWithOptions(request: DeleteServerGroupRequest, runtime: Util.RuntimeOptions): DeleteServerGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    body['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.serverGroupId)) {
    body['ServerGroupId'] = request.serverGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteServerGroup',
    version = '2024-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除服务器组
 *
 * @param request DeleteServerGroupRequest
 * @return DeleteServerGroupResponse
 */
async function deleteServerGroup(request: DeleteServerGroupRequest): DeleteServerGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteServerGroupWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh-CN'),
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName', example='China (Hangzhou)'),
      regionEndpoint?: string(name='RegionEndpoint', example='gwlb.cn-hangzhou.aliyuncs.com'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId', example='162FCE8D-CEEC-5083-90BF-B45D8C4F81FB'),
}

model DescribeRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionsResponseBody(name='body'),
}

/**
 * @summary 查询地域
 *
 * @param request DescribeRegionsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeRegionsResponse
 */
async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    body['AcceptLanguage'] = request.acceptLanguage;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2024-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询地域
 *
 * @param request DescribeRegionsRequest
 * @return DescribeRegionsResponse
 */
async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeZonesRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh-CN'),
}

model DescribeZonesResponseBody = {
  requestId?: string(name='RequestId', example='4C605F7E-D0F6-54E2-B004-F9B132F0D8B2'),
  zones?: [ 
    {
      localName?: string(name='LocalName'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-g'),
    }
  ](name='Zones'),
}

model DescribeZonesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeZonesResponseBody(name='body'),
}

/**
 * @summary 查询可用区
 *
 * @param request DescribeZonesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeZonesResponse
 */
async function describeZonesWithOptions(request: DescribeZonesRequest, runtime: Util.RuntimeOptions): DescribeZonesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    body['AcceptLanguage'] = request.acceptLanguage;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeZones',
    version = '2024-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询可用区
 *
 * @param request DescribeZonesRequest
 * @return DescribeZonesResponse
 */
async function describeZones(request: DescribeZonesRequest): DescribeZonesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeZonesWithOptions(request, runtime);
}

model GetListenerAttributeRequest {
  listenerId?: string(name='ListenerId', description='This parameter is required.', example='lsn-brx2y3hqdinciz****'),
}

model GetListenerAttributeResponseBody = {
  listenerDescription?: string(name='ListenerDescription', example='listener_description'),
  listenerId?: string(name='ListenerId', example='lsn-3kbj3587mqhm3p****'),
  listenerStatus?: string(name='ListenerStatus', example='Provisioning'),
  loadBalancerId?: string(name='LoadBalancerId', example='gwlb-te609d6696632f76****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestId?: string(name='RequestId', example='75CC3312-7757-5EE1-90D8-49CEA66608AE'),
  serverGroupId?: string(name='ServerGroupId', example='sgp-sp8d2r6y7t0xtl****'),
  tags?: [ 
    {
      key?: string(name='Key', example='testKey'),
      value?: string(name='Value', example='testValue'),
    }
  ](name='Tags'),
}

model GetListenerAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetListenerAttributeResponseBody(name='body'),
}

/**
 * @summary 查询监听详细信息
 *
 * @param request GetListenerAttributeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetListenerAttributeResponse
 */
async function getListenerAttributeWithOptions(request: GetListenerAttributeRequest, runtime: Util.RuntimeOptions): GetListenerAttributeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.listenerId)) {
    body['ListenerId'] = request.listenerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetListenerAttribute',
    version = '2024-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询监听详细信息
 *
 * @param request GetListenerAttributeRequest
 * @return GetListenerAttributeResponse
 */
async function getListenerAttribute(request: GetListenerAttributeRequest): GetListenerAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getListenerAttributeWithOptions(request, runtime);
}

model GetListenerHealthStatusRequest {
  filter?: [ 
    {
      name?: string(name='Name', example='Status'),
      values?: [ string ](name='Values'),
    }
  ](name='Filter'),
  listenerId?: string(name='ListenerId', description='This parameter is required.', example='lsn-7sixpvm5fc3v0b****'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='4f1d7cc9f51e18904e8a063603a6b0c3d03bc69f78734254e0b5e8707e68****'),
  skip?: int32(name='Skip', example='10'),
}

model GetListenerHealthStatusResponseBody = {
  listenerHealthStatus?: [ 
    {
      listenerId?: string(name='ListenerId', example='lsn-sg8aha6pzjavvo****'),
      serverGroupInfos?: [ 
        {
          healthCheckEnabled?: boolean(name='HealthCheckEnabled', example='true'),
          serverGroupId?: string(name='ServerGroupId', example='sgp-0vdsbyszro3nr6****'),
          servers?: [ 
            {
              port?: int32(name='Port', example='6081'),
              reason?: {
                reasonCode?: string(name='ReasonCode', example='CONNECT_TIMEOUT'),
              }(name='Reason'),
              serverId?: string(name='ServerId', example='i-2ze4rnh8yj9kif3z****'),
              serverIp?: string(name='ServerIp', example='192.168.0.XXX'),
              status?: string(name='Status', example='Healthy'),
            }
          ](name='Servers'),
        }
      ](name='ServerGroupInfos'),
    }
  ](name='ListenerHealthStatus'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='U12WEI6Ro2ol3wA54rBNSwdC5+lYy6q5SjIQEvc1wz5mjZxV+YjsHRdXV8XauY1BpOQIvwX63E0en54H3D****'),
  requestId?: string(name='RequestId', example='0ED4F222-36A0-5470-8A9A-AAB4E96BAC1A'),
  totalCount?: int32(name='TotalCount', example='31'),
}

model GetListenerHealthStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetListenerHealthStatusResponseBody(name='body'),
}

/**
 * @summary 查询监听健康检查状态
 *
 * @param request GetListenerHealthStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetListenerHealthStatusResponse
 */
async function getListenerHealthStatusWithOptions(request: GetListenerHealthStatusRequest, runtime: Util.RuntimeOptions): GetListenerHealthStatusResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  var bodyFlat : map[string]any = {};
  if (!Util.isUnset(request.filter)) {
    bodyFlat['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.listenerId)) {
    body['ListenerId'] = request.listenerId;
  }
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.skip)) {
    body['Skip'] = request.skip;
  }
  body = {
    ...body,
    ...OpenApiUtil.query(bodyFlat),
  };

  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetListenerHealthStatus',
    version = '2024-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询监听健康检查状态
 *
 * @param request GetListenerHealthStatusRequest
 * @return GetListenerHealthStatusResponse
 */
async function getListenerHealthStatus(request: GetListenerHealthStatusRequest): GetListenerHealthStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getListenerHealthStatusWithOptions(request, runtime);
}

model GetLoadBalancerAttributeRequest {
  loadBalancerId?: string(name='LoadBalancerId', description='This parameter is required.', example='gwlb-9njtjmqt7zfcqm****'),
}

model GetLoadBalancerAttributeResponseBody = {
  addressIpVersion?: string(name='AddressIpVersion', example='IPv4'),
  createTime?: string(name='CreateTime', example='2024-07-08T10:12:58Z'),
  loadBalancerBusinessStatus?: string(name='LoadBalancerBusinessStatus', example='Normal'),
  loadBalancerId?: string(name='LoadBalancerId', example='gwlb-9njtjmqt7zfcqm****'),
  loadBalancerName?: string(name='LoadBalancerName', example='gwlb'),
  loadBalancerStatus?: string(name='LoadBalancerStatus', example='Active'),
  requestId?: string(name='RequestId', example='B6DC5DDC-9560-59BF-80FA-ED1E5CB417DF'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmx7pmxcy****'),
  tags?: [ 
    {
      key?: string(name='Key', example='testTagKey'),
      value?: string(name='Value', example='testTagValue'),
    }
  ](name='Tags'),
  vpcId?: string(name='VpcId', example='vpc-k1aajsbwbaq4todet****'),
  zoneMappings?: [ 
    {
      loadBalancerAddresses?: [ 
        {
          eniId?: string(name='EniId', example='eni-bp1iahwz3rzgvltz****'),
          privateIpv4Address?: string(name='PrivateIpv4Address', example='192.168.XX.XX'),
        }
      ](name='LoadBalancerAddresses'),
      vSwitchId?: string(name='VSwitchId', example='vsw-uf6v8l7d2f1k53xrl****'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-j'),
    }
  ](name='ZoneMappings'),
}

model GetLoadBalancerAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLoadBalancerAttributeResponseBody(name='body'),
}

/**
 * @summary 查询负载均衡实例详细信息
 *
 * @param request GetLoadBalancerAttributeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetLoadBalancerAttributeResponse
 */
async function getLoadBalancerAttributeWithOptions(request: GetLoadBalancerAttributeRequest, runtime: Util.RuntimeOptions): GetLoadBalancerAttributeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.loadBalancerId)) {
    body['LoadBalancerId'] = request.loadBalancerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetLoadBalancerAttribute',
    version = '2024-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询负载均衡实例详细信息
 *
 * @param request GetLoadBalancerAttributeRequest
 * @return GetLoadBalancerAttributeResponse
 */
async function getLoadBalancerAttribute(request: GetLoadBalancerAttributeRequest): GetLoadBalancerAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLoadBalancerAttributeWithOptions(request, runtime);
}

model ListListenersRequest {
  listenerIds?: [ string ](name='ListenerIds'),
  loadBalancerIds?: [ string ](name='LoadBalancerIds'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='d209f4e63ec942c967c50c888a13****'),
  skip?: long(name='Skip', example='10'),
  tag?: [ 
    {
      key?: string(name='Key', example='tagKey'),
      value?: string(name='Value', example='tagValue'),
    }
  ](name='Tag'),
}

model ListListenersResponseBody = {
  listeners?: [ 
    {
      listenerDescription?: string(name='ListenerDescription', example='listener-description'),
      listenerId?: string(name='ListenerId', example='lsn-vu7folhh5ntm8u****'),
      listenerStatus?: string(name='ListenerStatus', example='Running'),
      loadBalancerId?: string(name='LoadBalancerId', example='gwlb-uf6hbeh795xlqln7g****'),
      serverGroupId?: string(name='ServerGroupId', example='sgp-5yapcb422i51ru****'),
      tags?: [ 
        {
          key?: string(name='Key', example='testKey'),
          value?: string(name='Value', example='testValue'),
        }
      ](name='Tags'),
    }
  ](name='Listeners'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='5c281c0a0d6bfb6355ed088c2108aca8e0b5e8707e68****'),
  requestId?: string(name='RequestId', example='7DBFC67C-A272-5952-8287-6C3EBE4E04D9'),
  totalCount?: int32(name='TotalCount'),
}

model ListListenersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListListenersResponseBody(name='body'),
}

/**
 * @summary 查询监听列表
 *
 * @param request ListListenersRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListListenersResponse
 */
async function listListenersWithOptions(request: ListListenersRequest, runtime: Util.RuntimeOptions): ListListenersResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  var bodyFlat : map[string]any = {};
  if (!Util.isUnset(request.listenerIds)) {
    bodyFlat['ListenerIds'] = request.listenerIds;
  }
  if (!Util.isUnset(request.loadBalancerIds)) {
    bodyFlat['LoadBalancerIds'] = request.loadBalancerIds;
  }
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.skip)) {
    body['Skip'] = request.skip;
  }
  if (!Util.isUnset(request.tag)) {
    bodyFlat['Tag'] = request.tag;
  }
  body = {
    ...body,
    ...OpenApiUtil.query(bodyFlat),
  };

  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListListeners',
    version = '2024-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询监听列表
 *
 * @param request ListListenersRequest
 * @return ListListenersResponse
 */
async function listListeners(request: ListListenersRequest): ListListenersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listListenersWithOptions(request, runtime);
}

model ListLoadBalancersRequest {
  addressIpVersion?: string(name='AddressIpVersion', example='IPv4'),
  loadBalancerBusinessStatus?: string(name='LoadBalancerBusinessStatus', example='Normal'),
  loadBalancerIds?: [ string ](name='LoadBalancerIds'),
  loadBalancerNames?: [ string ](name='LoadBalancerNames'),
  loadBalancerStatus?: string(name='LoadBalancerStatus', example='Active'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='WyJyb290IiwibiIsIm4iLDEsMCwxNjg1MDY1NTgyNzYwLCI2NDcwMGY2ZTc2Zjc0MWFiZGEyZjQyNzc4ZDk2MmJkOTk3ZGZmM2Nm****'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-aek2htf5qsyrn****'),
  skip?: int32(name='Skip', example='1'),
  tag?: [ 
    {
      key?: string(name='Key', example='testTagKey'),
      value?: string(name='Value', example='testTagValue'),
    }
  ](name='Tag'),
  vpcIds?: [ string ](name='VpcIds'),
  zoneIds?: [ string ](name='ZoneIds'),
}

model ListLoadBalancersResponseBody = {
  loadBalancers?: [ 
    {
      addressIpVersion?: string(name='AddressIpVersion', example='IPv4'),
      createTime?: string(name='CreateTime', example='2024-08-05 18:24:07'),
      loadBalancerBusinessStatus?: string(name='LoadBalancerBusinessStatus', example='Normal'),
      loadBalancerId?: string(name='LoadBalancerId', example='gwlb-9njtjmqt7zfcqm****'),
      loadBalancerName?: string(name='LoadBalancerName', example='testGwlbName'),
      loadBalancerStatus?: string(name='LoadBalancerStatus', example='Active'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-aek26jasguy****'),
      tags?: [ 
        {
          key?: string(name='Key', example='testTagKey'),
          value?: string(name='Value', example='testTagValue'),
        }
      ](name='Tags'),
      vpcId?: string(name='VpcId', example='vpc-uf6eg0vndlsa84n7r****'),
      zoneMappings?: [ 
        {
          loadBalancerAddresses?: [ 
            {
              eniId?: string(name='EniId', example='eni-bp17qv9zbzyqy629****'),
              privateIpv4Address?: string(name='PrivateIpv4Address', example='192.168.XX.XX'),
            }
          ](name='LoadBalancerAddresses'),
          vSwitchId?: string(name='VSwitchId', example='vsw-2zemule5dz7okwqfv****'),
          zoneId?: string(name='ZoneId', example='cn-hangzhou-g'),
        }
      ](name='ZoneMappings'),
    }
  ](name='LoadBalancers'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='CAESGgoSChAKDGNvbXBsZXRlVGltZRABCgQiAggAGAAiQAoJAIldD2UAAAAACjMDLgAAADFTNzMyZDMwMzAzMDY5NzQzNDM0NmI3NzM2NjUzNzc4NzM2YTc0NjYzOTYz****'),
  requestId?: string(name='RequestId', example='378A80E9-4262-5D8E-8D62-0969E52D7358'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model ListLoadBalancersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLoadBalancersResponseBody(name='body'),
}

/**
 * @summary 查询负载均衡实例列表
 *
 * @param request ListLoadBalancersRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListLoadBalancersResponse
 */
async function listLoadBalancersWithOptions(request: ListLoadBalancersRequest, runtime: Util.RuntimeOptions): ListLoadBalancersResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.addressIpVersion)) {
    body['AddressIpVersion'] = request.addressIpVersion;
  }
  if (!Util.isUnset(request.loadBalancerBusinessStatus)) {
    body['LoadBalancerBusinessStatus'] = request.loadBalancerBusinessStatus;
  }
  var bodyFlat : map[string]any = {};
  if (!Util.isUnset(request.loadBalancerIds)) {
    bodyFlat['LoadBalancerIds'] = request.loadBalancerIds;
  }
  if (!Util.isUnset(request.loadBalancerNames)) {
    bodyFlat['LoadBalancerNames'] = request.loadBalancerNames;
  }
  if (!Util.isUnset(request.loadBalancerStatus)) {
    body['LoadBalancerStatus'] = request.loadBalancerStatus;
  }
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.skip)) {
    body['Skip'] = request.skip;
  }
  if (!Util.isUnset(request.tag)) {
    bodyFlat['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.vpcIds)) {
    bodyFlat['VpcIds'] = request.vpcIds;
  }
  if (!Util.isUnset(request.zoneIds)) {
    bodyFlat['ZoneIds'] = request.zoneIds;
  }
  body = {
    ...body,
    ...OpenApiUtil.query(bodyFlat),
  };

  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListLoadBalancers',
    version = '2024-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询负载均衡实例列表
 *
 * @param request ListLoadBalancersRequest
 * @return ListLoadBalancersResponse
 */
async function listLoadBalancers(request: ListLoadBalancersRequest): ListLoadBalancersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLoadBalancersWithOptions(request, runtime);
}

model ListServerGroupServersRequest {
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  serverGroupId?: string(name='ServerGroupId', example='sgp-atstuj3rtoptyui****'),
  serverIds?: [ string ](name='ServerIds'),
  serverIps?: [ string ](name='ServerIps'),
  skip?: int32(name='Skip', example='1'),
}

model ListServerGroupServersResponseBody = {
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
  servers?: [ 
    {
      port?: int32(name='Port', example='6081'),
      serverGroupId?: string(name='ServerGroupId', example='sgp-atstuj3rtoptyui****'),
      serverId?: string(name='ServerId', example='i-bp67acfmxazb4p****'),
      serverIp?: string(name='ServerIp', example='192.168.xxx.xxx'),
      serverType?: string(name='ServerType', example='Ecs'),
      status?: string(name='Status', example='Available'),
    }
  ](name='Servers'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListServerGroupServersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListServerGroupServersResponseBody(name='body'),
}

/**
 * @summary 查询服务器组中的服务器列表
 *
 * @param request ListServerGroupServersRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListServerGroupServersResponse
 */
async function listServerGroupServersWithOptions(request: ListServerGroupServersRequest, runtime: Util.RuntimeOptions): ListServerGroupServersResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.serverGroupId)) {
    body['ServerGroupId'] = request.serverGroupId;
  }
  var bodyFlat : map[string]any = {};
  if (!Util.isUnset(request.serverIds)) {
    bodyFlat['ServerIds'] = request.serverIds;
  }
  if (!Util.isUnset(request.serverIps)) {
    bodyFlat['ServerIps'] = request.serverIps;
  }
  if (!Util.isUnset(request.skip)) {
    body['Skip'] = request.skip;
  }
  body = {
    ...body,
    ...OpenApiUtil.query(bodyFlat),
  };

  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListServerGroupServers',
    version = '2024-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询服务器组中的服务器列表
 *
 * @param request ListServerGroupServersRequest
 * @return ListServerGroupServersResponse
 */
async function listServerGroupServers(request: ListServerGroupServersRequest): ListServerGroupServersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listServerGroupServersWithOptions(request, runtime);
}

model ListServerGroupsRequest {
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-atstuj3rtop****'),
  serverGroupIds?: [ string ](name='ServerGroupIds'),
  serverGroupNames?: [ string ](name='ServerGroupNames'),
  serverGroupType?: string(name='ServerGroupType', example='Instance'),
  skip?: int32(name='Skip', example='1'),
  tag?: [ 
    {
      key?: string(name='Key', example='testTagKey'),
      value?: string(name='Value', example='testTagValue'),
    }
  ](name='Tag'),
  vpcId?: string(name='VpcId', example='vpc-bp15zckdt37pq72zv****'),
}

model ListServerGroupsResponseBody = {
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
  serverGroups?: [ 
    {
      connectionDrainConfig?: {
        connectionDrainEnabled?: boolean(name='ConnectionDrainEnabled', example='false'),
        connectionDrainTimeout?: int32(name='ConnectionDrainTimeout', example='300'),
      }(name='ConnectionDrainConfig'),
      createTime?: string(name='CreateTime', example='2024-08-05T18:24:07Z'),
      healthCheckConfig?: {
        healthCheckConnectPort?: int32(name='HealthCheckConnectPort', example='80'),
        healthCheckConnectTimeout?: int32(name='HealthCheckConnectTimeout', example='5'),
        healthCheckDomain?: string(name='HealthCheckDomain', example='$SERVER_IP'),
        healthCheckEnabled?: boolean(name='HealthCheckEnabled', example='true'),
        healthCheckHttpCode?: [ string ](name='HealthCheckHttpCode'),
        healthCheckInterval?: int32(name='HealthCheckInterval', example='10'),
        healthCheckPath?: string(name='HealthCheckPath', example='/test/index.html'),
        healthCheckProtocol?: string(name='HealthCheckProtocol', example='TCP'),
        healthyThreshold?: int32(name='HealthyThreshold', example='2'),
        unhealthyThreshold?: int32(name='UnhealthyThreshold', example='2'),
      }(name='HealthCheckConfig'),
      protocol?: string(name='Protocol', example='GENEVE'),
      relatedLoadBalancerIds?: [ string ](name='RelatedLoadBalancerIds'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-atstuj3rtop****'),
      scheduler?: string(name='Scheduler', example='5TCH'),
      serverCount?: int32(name='ServerCount', example='2'),
      serverGroupId?: string(name='ServerGroupId', example='sgp-atstuj3rtoptyui****'),
      serverGroupName?: string(name='ServerGroupName', example='testServerGroupName'),
      serverGroupStatus?: string(name='ServerGroupStatus', example='Available'),
      serverGroupType?: string(name='ServerGroupType', example='Instance'),
      tags?: [ 
        {
          key?: string(name='Key', example='testTagKey'),
          value?: string(name='Value', example='testTagValue'),
        }
      ](name='Tags'),
      vpcId?: string(name='VpcId', example='vpc-bp15zckdt37pq72zv****'),
    }
  ](name='ServerGroups'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListServerGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListServerGroupsResponseBody(name='body'),
}

/**
 * @summary 查询服务器组列表
 *
 * @param request ListServerGroupsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListServerGroupsResponse
 */
async function listServerGroupsWithOptions(request: ListServerGroupsRequest, runtime: Util.RuntimeOptions): ListServerGroupsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  var bodyFlat : map[string]any = {};
  if (!Util.isUnset(request.serverGroupIds)) {
    bodyFlat['ServerGroupIds'] = request.serverGroupIds;
  }
  if (!Util.isUnset(request.serverGroupNames)) {
    bodyFlat['ServerGroupNames'] = request.serverGroupNames;
  }
  if (!Util.isUnset(request.serverGroupType)) {
    body['ServerGroupType'] = request.serverGroupType;
  }
  if (!Util.isUnset(request.skip)) {
    body['Skip'] = request.skip;
  }
  if (!Util.isUnset(request.tag)) {
    bodyFlat['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.vpcId)) {
    body['VpcId'] = request.vpcId;
  }
  body = {
    ...body,
    ...OpenApiUtil.query(bodyFlat),
  };

  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListServerGroups',
    version = '2024-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询服务器组列表
 *
 * @param request ListServerGroupsRequest
 * @return ListServerGroupsResponse
 */
async function listServerGroups(request: ListServerGroupsRequest): ListServerGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listServerGroupsWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='WyI2NDQ3MWUxM2EzOWNhMmY0Y2M2YTRiNzZhOWQwNmU1Y2RlNTYzMGEzIiwibiIsIm4iLDEsLTEsMTY5ODcxMzI2NjU0MywiNjU0MDRlYjI2MmI3MDhjY2JiMjM0ZmU0ODNkNTVmMGRhZDllOTBi****'),
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType', description='This parameter is required.', example='loadbalancer'),
  tag?: [ 
    {
      key?: string(name='Key', example='testKey'),
      value?: string(name='Value', example='testValue'),
    }
  ](name='Tag'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', example='d209f4e63ec942c967c50c888a13****'),
  requestId?: string(name='RequestId', example='A95325A2-E421-58A6-88AD-7A26CE610F45'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', example='gwlb-nrnrxwd15en27r****'),
      resourceType?: string(name='ResourceType', example='loadbalancer'),
      tagKey?: string(name='TagKey', example='testKey'),
      tagValue?: string(name='TagValue', example='testValue'),
    }
  ](name='TagResources'),
}

model ListTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagResourcesResponseBody(name='body'),
}

/**
 * @summary 查询资源标签
 *
 * @param request ListTagResourcesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListTagResourcesResponse
 */
async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  var bodyFlat : map[string]any = {};
  if (!Util.isUnset(request.resourceId)) {
    bodyFlat['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    body['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    bodyFlat['Tag'] = request.tag;
  }
  body = {
    ...body,
    ...OpenApiUtil.query(bodyFlat),
  };

  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListTagResources',
    version = '2024-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询资源标签
 *
 * @param request ListTagResourcesRequest
 * @return ListTagResourcesResponse
 */
async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model MoveResourceGroupRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****'),
  dryRun?: boolean(name='DryRun', example='false'),
  newResourceGroupId?: string(name='NewResourceGroupId', description='This parameter is required.', example='rg-aek253e4oit****'),
  resourceId?: string(name='ResourceId', description='This parameter is required.', example='gwlb-nrnrxwd15en27r****'),
  resourceType?: string(name='ResourceType', description='This parameter is required.', example='loadbalancer'),
}

model MoveResourceGroupResponseBody = {
  requestId?: string(name='RequestId', example='78828B5C-521E-50F3-84D4-7019691D1382'),
}

model MoveResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MoveResourceGroupResponseBody(name='body'),
}

/**
 * @summary 迁移资源组
 *
 * @param request MoveResourceGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return MoveResourceGroupResponse
 */
async function moveResourceGroupWithOptions(request: MoveResourceGroupRequest, runtime: Util.RuntimeOptions): MoveResourceGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    body['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.newResourceGroupId)) {
    body['NewResourceGroupId'] = request.newResourceGroupId;
  }
  if (!Util.isUnset(request.resourceId)) {
    body['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    body['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'MoveResourceGroup',
    version = '2024-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 迁移资源组
 *
 * @param request MoveResourceGroupRequest
 * @return MoveResourceGroupResponse
 */
async function moveResourceGroup(request: MoveResourceGroupRequest): MoveResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return moveResourceGroupWithOptions(request, runtime);
}

model RemoveServersFromServerGroupRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****'),
  dryRun?: boolean(name='DryRun', example='false'),
  serverGroupId?: string(name='ServerGroupId', description='This parameter is required.', example='sgp-atstuj3rtoptyui****'),
  servers?: [ 
    {
      port?: int32(name='Port', example='6081'),
      serverId?: string(name='ServerId', description='This parameter is required.', example='i-bp67acfmxazb4p****'),
      serverIp?: string(name='ServerIp', example='192.168.xxx.xxx'),
      serverType?: string(name='ServerType', description='This parameter is required.', example='Ecs'),
    }
  ](name='Servers', description='This parameter is required.'),
}

model RemoveServersFromServerGroupResponseBody = {
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model RemoveServersFromServerGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveServersFromServerGroupResponseBody(name='body'),
}

/**
 * @summary 服务器组中删除后端服务器
 *
 * @param request RemoveServersFromServerGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RemoveServersFromServerGroupResponse
 */
async function removeServersFromServerGroupWithOptions(request: RemoveServersFromServerGroupRequest, runtime: Util.RuntimeOptions): RemoveServersFromServerGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    body['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.serverGroupId)) {
    body['ServerGroupId'] = request.serverGroupId;
  }
  var bodyFlat : map[string]any = {};
  if (!Util.isUnset(request.servers)) {
    bodyFlat['Servers'] = request.servers;
  }
  body = {
    ...body,
    ...OpenApiUtil.query(bodyFlat),
  };

  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RemoveServersFromServerGroup',
    version = '2024-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 服务器组中删除后端服务器
 *
 * @param request RemoveServersFromServerGroupRequest
 * @return RemoveServersFromServerGroupResponse
 */
async function removeServersFromServerGroup(request: RemoveServersFromServerGroupRequest): RemoveServersFromServerGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeServersFromServerGroupWithOptions(request, runtime);
}

model TagResourcesRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****'),
  dryRun?: boolean(name='DryRun', example='false'),
  resourceId?: [ string ](name='ResourceId', description='This parameter is required.'),
  resourceType?: string(name='ResourceType', description='This parameter is required.', example='loadbalancer'),
  tag?: [ 
    {
      key?: string(name='Key', description='This parameter is required.', example='testKey'),
      value?: string(name='Value', description='This parameter is required.', example='testValue'),
    }
  ](name='Tag', description='This parameter is required.'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='54F6E60A-1777-5C17-A6A9-BCC1A7FE945B'),
}

model TagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesResponseBody(name='body'),
}

/**
 * @summary 添加资源标签
 *
 * @param request TagResourcesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return TagResourcesResponse
 */
async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    body['DryRun'] = request.dryRun;
  }
  var bodyFlat : map[string]any = {};
  if (!Util.isUnset(request.resourceId)) {
    bodyFlat['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    body['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    bodyFlat['Tag'] = request.tag;
  }
  body = {
    ...body,
    ...OpenApiUtil.query(bodyFlat),
  };

  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TagResources',
    version = '2024-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 添加资源标签
 *
 * @param request TagResourcesRequest
 * @return TagResourcesResponse
 */
async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UntagResourcesRequest {
  all?: boolean(name='All', example='true'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****'),
  dryRun?: boolean(name='DryRun', example='false'),
  resourceId?: [ string ](name='ResourceId', description='This parameter is required.'),
  resourceType?: string(name='ResourceType', description='This parameter is required.', example='loadbalancer'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='3DC0064C-C09E-5C99-8FD4-9CDB2DA7FA21'),
}

model UntagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UntagResourcesResponseBody(name='body'),
}

/**
 * @summary 删除资源标签
 *
 * @param request UntagResourcesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UntagResourcesResponse
 */
async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.all)) {
    body['All'] = request.all;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    body['DryRun'] = request.dryRun;
  }
  var bodyFlat : map[string]any = {};
  if (!Util.isUnset(request.resourceId)) {
    bodyFlat['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    body['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tagKey)) {
    bodyFlat['TagKey'] = request.tagKey;
  }
  body = {
    ...body,
    ...OpenApiUtil.query(bodyFlat),
  };

  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UntagResources',
    version = '2024-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除资源标签
 *
 * @param request UntagResourcesRequest
 * @return UntagResourcesResponse
 */
async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model UpdateListenerAttributeRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****'),
  dryRun?: boolean(name='DryRun', example='false'),
  listenerDescription?: string(name='ListenerDescription', example='listener_description'),
  listenerId?: string(name='ListenerId', description='This parameter is required.', example='lsn-lxce8iqbof2vl0****'),
  serverGroupId?: string(name='ServerGroupId', example='sgp-sp8d2r6y7t0xtl****'),
}

model UpdateListenerAttributeResponseBody = {
  requestId?: string(name='RequestId', example='7DBFC67C-A272-5952-8287-6C3EBE4E04D9'),
}

model UpdateListenerAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateListenerAttributeResponseBody(name='body'),
}

/**
 * @summary 更新监听属性
 *
 * @param request UpdateListenerAttributeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateListenerAttributeResponse
 */
async function updateListenerAttributeWithOptions(request: UpdateListenerAttributeRequest, runtime: Util.RuntimeOptions): UpdateListenerAttributeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    body['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.listenerDescription)) {
    body['ListenerDescription'] = request.listenerDescription;
  }
  if (!Util.isUnset(request.listenerId)) {
    body['ListenerId'] = request.listenerId;
  }
  if (!Util.isUnset(request.serverGroupId)) {
    body['ServerGroupId'] = request.serverGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateListenerAttribute',
    version = '2024-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新监听属性
 *
 * @param request UpdateListenerAttributeRequest
 * @return UpdateListenerAttributeResponse
 */
async function updateListenerAttribute(request: UpdateListenerAttributeRequest): UpdateListenerAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateListenerAttributeWithOptions(request, runtime);
}

model UpdateLoadBalancerAttributeRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  dryRun?: boolean(name='DryRun', example='false'),
  loadBalancerId?: string(name='LoadBalancerId', description='This parameter is required.', example='gwlb-9njtjmqt7zfcqm****'),
  loadBalancerName?: string(name='LoadBalancerName', example='testGwlbName'),
}

model UpdateLoadBalancerAttributeResponseBody = {
  requestId?: string(name='RequestId', example='B956C629-0E8C-5EFF-BAC1-B0E3A8C5CBDD'),
}

model UpdateLoadBalancerAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateLoadBalancerAttributeResponseBody(name='body'),
}

/**
 * @summary 更新负载均衡实例属性
 *
 * @param request UpdateLoadBalancerAttributeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateLoadBalancerAttributeResponse
 */
async function updateLoadBalancerAttributeWithOptions(request: UpdateLoadBalancerAttributeRequest, runtime: Util.RuntimeOptions): UpdateLoadBalancerAttributeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    body['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.loadBalancerId)) {
    body['LoadBalancerId'] = request.loadBalancerId;
  }
  if (!Util.isUnset(request.loadBalancerName)) {
    body['LoadBalancerName'] = request.loadBalancerName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateLoadBalancerAttribute',
    version = '2024-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新负载均衡实例属性
 *
 * @param request UpdateLoadBalancerAttributeRequest
 * @return UpdateLoadBalancerAttributeResponse
 */
async function updateLoadBalancerAttribute(request: UpdateLoadBalancerAttributeRequest): UpdateLoadBalancerAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateLoadBalancerAttributeWithOptions(request, runtime);
}

model UpdateLoadBalancerZonesRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****'),
  dryRun?: boolean(name='DryRun', example='false'),
  loadBalancerId?: string(name='LoadBalancerId', description='This parameter is required.', example='gwlb-9njtjmqt7zfcqm****'),
  zoneMappings?: [ 
    {
      vSwitchId?: string(name='VSwitchId', description='This parameter is required.', example='vsw-bp1n75pbs77v5q6p3****'),
      zoneId?: string(name='ZoneId', description='This parameter is required.', example='cn-hangzhou-h'),
    }
  ](name='ZoneMappings', description='This parameter is required.'),
}

model UpdateLoadBalancerZonesResponseBody = {
  requestId?: string(name='RequestId', example='ED8905C2-A4F6-5E43-87B7-6A5DC8757146'),
}

model UpdateLoadBalancerZonesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateLoadBalancerZonesResponseBody(name='body'),
}

/**
 * @summary 更新负载均衡实例可用区
 *
 * @param request UpdateLoadBalancerZonesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateLoadBalancerZonesResponse
 */
async function updateLoadBalancerZonesWithOptions(request: UpdateLoadBalancerZonesRequest, runtime: Util.RuntimeOptions): UpdateLoadBalancerZonesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    body['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.loadBalancerId)) {
    body['LoadBalancerId'] = request.loadBalancerId;
  }
  var bodyFlat : map[string]any = {};
  if (!Util.isUnset(request.zoneMappings)) {
    bodyFlat['ZoneMappings'] = request.zoneMappings;
  }
  body = {
    ...body,
    ...OpenApiUtil.query(bodyFlat),
  };

  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateLoadBalancerZones',
    version = '2024-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新负载均衡实例可用区
 *
 * @param request UpdateLoadBalancerZonesRequest
 * @return UpdateLoadBalancerZonesResponse
 */
async function updateLoadBalancerZones(request: UpdateLoadBalancerZonesRequest): UpdateLoadBalancerZonesResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateLoadBalancerZonesWithOptions(request, runtime);
}

model UpdateServerGroupAttributeRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****'),
  connectionDrainConfig?: {
    connectionDrainEnabled?: boolean(name='ConnectionDrainEnabled', example='false'),
    connectionDrainTimeout?: int32(name='ConnectionDrainTimeout', example='300'),
  }(name='ConnectionDrainConfig'),
  dryRun?: boolean(name='DryRun', example='false'),
  healthCheckConfig?: {
    healthCheckConnectPort?: int32(name='HealthCheckConnectPort', example='80'),
    healthCheckConnectTimeout?: int32(name='HealthCheckConnectTimeout', example='5'),
    healthCheckDomain?: string(name='HealthCheckDomain', example='$SERVER_IP'),
    healthCheckEnabled?: boolean(name='HealthCheckEnabled', example='true'),
    healthCheckHttpCode?: [ string ](name='HealthCheckHttpCode'),
    healthCheckInterval?: int32(name='HealthCheckInterval', example='10'),
    healthCheckPath?: string(name='HealthCheckPath', example='/test/index.html'),
    healthCheckProtocol?: string(name='HealthCheckProtocol', example='TCP'),
    healthyThreshold?: int32(name='HealthyThreshold', example='2'),
    unhealthyThreshold?: int32(name='UnhealthyThreshold', example='2'),
  }(name='HealthCheckConfig'),
  scheduler?: string(name='Scheduler', example='5TCH'),
  serverGroupId?: string(name='ServerGroupId', description='This parameter is required.', example='sgp-atstuj3rtoptyui****'),
  serverGroupName?: string(name='ServerGroupName', example='testServerGroupName'),
}

model UpdateServerGroupAttributeResponseBody = {
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model UpdateServerGroupAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateServerGroupAttributeResponseBody(name='body'),
}

/**
 * @summary 更新服务器组属性
 *
 * @param request UpdateServerGroupAttributeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateServerGroupAttributeResponse
 */
async function updateServerGroupAttributeWithOptions(request: UpdateServerGroupAttributeRequest, runtime: Util.RuntimeOptions): UpdateServerGroupAttributeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  var bodyFlat : map[string]any = {};
  if (!Util.isUnset(request.connectionDrainConfig)) {
    bodyFlat['ConnectionDrainConfig'] = request.connectionDrainConfig;
  }
  if (!Util.isUnset(request.dryRun)) {
    body['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.healthCheckConfig)) {
    bodyFlat['HealthCheckConfig'] = request.healthCheckConfig;
  }
  if (!Util.isUnset(request.scheduler)) {
    body['Scheduler'] = request.scheduler;
  }
  if (!Util.isUnset(request.serverGroupId)) {
    body['ServerGroupId'] = request.serverGroupId;
  }
  if (!Util.isUnset(request.serverGroupName)) {
    body['ServerGroupName'] = request.serverGroupName;
  }
  body = {
    ...body,
    ...OpenApiUtil.query(bodyFlat),
  };

  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateServerGroupAttribute',
    version = '2024-04-15',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新服务器组属性
 *
 * @param request UpdateServerGroupAttributeRequest
 * @return UpdateServerGroupAttributeResponse
 */
async function updateServerGroupAttribute(request: UpdateServerGroupAttributeRequest): UpdateServerGroupAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateServerGroupAttributeWithOptions(request, runtime);
}

