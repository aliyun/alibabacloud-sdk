/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'qianzhou';
  @version = '2021-11-11';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AICreateSessionMessageRequest {
  context?: {
    clusterId?: string(name='cluster_id'),
    error?: string(name='error'),
    kind?: string(name='kind'),
    name?: string(name='name'),
    namespace?: string(name='namespace'),
    uuid?: string(name='uuid'),
  }(name='context', position='Body'),
  language?: string(name='language', position='Body'),
  message?: string(name='message', position='Body'),
  sessionId?: string(name='session_id', position='Body'),
  type?: string(name='type', example='QA / K8S_DIAGNOSE', position='Body'),
  employeeId: string(name='employee_id', description='This parameter is required.', position='Query'),
}

model AICreateSessionMessageResponseBody = {
  answer?: string(name='answer'),
  code?: long(name='code'),
  data?: string(name='data'),
  msg?: string(name='msg'),
  requestId?: string(name='requestId'),
  sessionId?: string(name='session_id'),
}

model AICreateSessionMessageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AICreateSessionMessageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AICreateSessionMessage  AICreateSessionMessageRequest
  * @return AICreateSessionMessageResponse
 */
async function aICreateSessionMessage(request: AICreateSessionMessageRequest): AICreateSessionMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AICreateSessionMessage', 'POST', '/popapi/AICreateSessionMessage', 'json', false, 'json', request);
}

function aICreateSessionMessageWithResponseIterable(request: AICreateSessionMessageRequest): iterator[AICreateSessionMessageResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'AICreateSessionMessage', 'POST', '/popapi/AICreateSessionMessage', 'json', false, 'json', request);
}

model CreateDiagnosisRequest {
  body?: string(name='body', position='Body'),
  clusterID?: string(name='clusterID', position='Query'),
  diagnosisType?: string(name='diagnosisType', position='Query'),
}

model CreateDiagnosisResponseBody = {
  code?: long(name='code'),
  data?: any(name='data'),
  requestId?: string(name='requestId'),
}

model CreateDiagnosisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDiagnosisResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDiagnosis  CreateDiagnosisRequest
  * @return CreateDiagnosisResponse
 */
async function createDiagnosis(request: CreateDiagnosisRequest): CreateDiagnosisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDiagnosis', 'POST', '/popapi/createDiagnosis', 'json', false, 'json', request);
}

model GetClusterRequest {
  clusterID?: string(name='clusterID', position='Query'),
}

model GetClusterResponseBody = {
  data?: {
    clusterID?: string(name='clusterID'),
    clusterType?: string(name='clusterType'),
    currentVersion?: string(name='currentVersion'),
    name?: string(name='name'),
    profile?: string(name='profile'),
    regionID?: string(name='regionID'),
    securityGroupId?: string(name='securityGroupId'),
    spec?: string(name='spec'),
    state?: string(name='state'),
    userID?: string(name='userID'),
  }(name='data'),
  requestId?: string(name='requestId'),
}

model GetClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetClusterResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetCluster  GetClusterRequest
  * @return GetClusterResponse
 */
async function getCluster(request: GetClusterRequest): GetClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetCluster', 'GET', '/popapi/getCluster', 'json', false, 'json', request);
}

model GetClusterWarningRequest {
  clusterID?: string(name='clusterID', position='Query'),
}

model GetClusterWarningResponseBody = {
  requestId?: string(name='requestId'),
}

model GetClusterWarningResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetClusterWarningResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetClusterWarning  GetClusterWarningRequest
  * @return GetClusterWarningResponse
 */
async function getClusterWarning(request: GetClusterWarningRequest): GetClusterWarningResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetClusterWarning', 'GET', '/popapi/getKeyClusterWarningList', 'json', false, 'json', request);
}

model GetDiagnosisResultRequest {
  diagnosisId?: string(name='diagnosisId', position='Query'),
  ownerUid?: string(name='ownerUid', position='Query'),
}

model GetDiagnosisResultResponseBody = {
  code?: string(name='code'),
  data?: any(name='data'),
  msg?: string(name='msg'),
  requestId?: string(name='requestId'),
}

model GetDiagnosisResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDiagnosisResultResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDiagnosisResult  GetDiagnosisResultRequest
  * @return GetDiagnosisResultResponse
 */
async function getDiagnosisResult(request: GetDiagnosisResultRequest): GetDiagnosisResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDiagnosisResult', 'GET', '/popapi/GetDiagnosisResult', 'json', false, 'json', request);
}

model GetUserClusterWarningRequest {
  userID?: string(name='userID', position='Query'),
}

model GetUserClusterWarningResponseBody = {
  requestId?: string(name='requestId'),
}

model GetUserClusterWarningResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserClusterWarningResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetUserClusterWarning  GetUserClusterWarningRequest
  * @return GetUserClusterWarningResponse
 */
async function getUserClusterWarning(request: GetUserClusterWarningRequest): GetUserClusterWarningResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetUserClusterWarning', 'GET', '/popapi/listUserKeyClusters', 'json', false, 'json', request);
}

model GetWebshellTokenRequest {
}

model GetWebshellTokenResponseBody = {
  requestId?: string(name='requestId'),
}

model GetWebshellTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWebshellTokenResponseBody(name='body'),
}

/**
  * @deprecated OpenAPI GetWebshellToken is deprecated  * @param request  the request parameters of GetWebshellToken  GetWebshellTokenRequest
  * @return GetWebshellTokenResponse
 */
// Deprecated
async function getWebshellToken(request: GetWebshellTokenRequest): GetWebshellTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetWebshellToken', 'GET', '/popapi/getChorusToken', 'json', false, 'json', request);
}

model HelloRequest {
  user?: string(name='user', example='binzhi', position='Query'),
}

model HelloResponseBody = {
  code?: string(name='code', example='200'),
  data?: {
    date?: string(name='date'),
    name?: string(name='name', example='ack1'),
    success?: boolean(name='success', example='false'),
  }(name='data'),
  msg?: string(name='msg', example='null'),
  requestId?: string(name='requestId'),
}

model HelloResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: HelloResponseBody(name='body'),
}

/**
  * @param request  the request parameters of Hello  HelloRequest
  * @return HelloResponse
 */
async function hello(request: HelloRequest): HelloResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'Hello', 'GET', '/popapi/hello', 'json', false, 'json', request);
}

model ListClusterDeprecatedAPIRequest {
  clusterId?: string(name='cluster_id', position='Query'),
  pageNo?: int32(name='page_no', position='Query'),
  pageSize?: int32(name='page_size', position='Query'),
  targetVersion?: string(name='target_version', position='Query'),
}

model ListClusterDeprecatedAPIResponseBody = {
  code?: int32(name='code'),
  datas?: {
    current?: int32(name='current'),
    data?: [ 
      {
        clusterId?: string(name='cluster_id'),
        content?: string(name='content'),
        count?: int32(name='count'),
        currentVersion?: string(name='current_version'),
        deprecatedK8sVersion?: string(name='deprecated_k8s_version'),
        ds?: string(name='ds'),
        label?: string(name='label'),
        lastTime?: string(name='last_time'),
        requestUri?: string(name='request_uri'),
        sourceIps?: string(name='source_ips'),
        targetVersion?: string(name='target_version'),
        userAgent?: string(name='user_agent'),
      }
    ](name='data'),
    pageSize?: int32(name='pageSize'),
    total?: int32(name='total'),
  }(name='datas'),
  msg?: string(name='msg'),
  requestId?: string(name='requestId'),
}

model ListClusterDeprecatedAPIResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListClusterDeprecatedAPIResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListClusterDeprecatedAPI  ListClusterDeprecatedAPIRequest
  * @return ListClusterDeprecatedAPIResponse
 */
async function listClusterDeprecatedAPI(request: ListClusterDeprecatedAPIRequest): ListClusterDeprecatedAPIResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListClusterDeprecatedAPI', 'POST', '/popapi/listDeprecatedK8sAPI', 'json', false, 'json', request);
}

model ListClusterImagesRequest {
  clusterId?: string(name='cluster_id', position='Query'),
  imageHash?: string(name='image_hash', position='Query'),
  imageName?: string(name='image_name', position='Query'),
  pageNo?: int32(name='page_no', position='Query'),
  pageSize?: int32(name='page_size', position='Query'),
  uid?: string(name='uid', position='Query'),
}

model ListClusterImagesResponseBody = {
  code?: int32(name='code'),
  datas?: {
    current?: int32(name='current'),
    data?: [ 
      {
        clusterId?: string(name='cluster_id'),
        controllerName?: string(name='controller_name'),
        controllerType?: string(name='controller_type'),
        created?: string(name='created'),
        imageHash?: string(name='image_hash'),
        imageName?: string(name='image_name'),
        namespace?: string(name='namespace'),
        uid?: string(name='uid'),
        updated?: string(name='updated'),
      }
    ](name='data'),
    pageSize?: int32(name='pageSize'),
    total?: int32(name='total'),
  }(name='datas'),
  msg?: string(name='msg'),
  requestId?: string(name='requestId'),
}

model ListClusterImagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListClusterImagesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListClusterImages  ListClusterImagesRequest
  * @return ListClusterImagesResponse
 */
async function listClusterImages(request: ListClusterImagesRequest): ListClusterImagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListClusterImages', 'POST', '/popapi/listClusterPodImages', 'json', false, 'json', request);
}

model ListUserClustersRequest {
  current?: string(name='current', position='Query'),
  pageSize?: string(name='pageSize', position='Query'),
  userID?: string(name='userID', position='Query'),
}

model ListUserClustersResponseBody = {
  code?: long(name='code'),
  data?: string(name='data'),
  msg?: string(name='msg'),
  requestId?: string(name='requestId'),
}

model ListUserClustersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserClustersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUserClusters  ListUserClustersRequest
  * @return ListUserClustersResponse
 */
async function listUserClusters(request: ListUserClustersRequest): ListUserClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListUserClusters', 'GET', '/popapi/listUserClusters', 'json', false, 'json', request);
}

model QueryByInstanceInfoRequest {
  instanceId?: [ string ](name='InstanceId', position='Body'),
  regionId?: string(name='RegionId', position='Body'),
}

model QueryByInstanceInfoResponseBody = {
  code?: int32(name='code'),
  data?: [ 
    {
      clusterId?: string(name='clusterId'),
      clusterName?: string(name='clusterName'),
      instanceId?: string(name='instanceId'),
      regionId?: string(name='regionId'),
      uid?: string(name='uid'),
    }
  ](name='data'),
  msg?: string(name='msg'),
  requestId?: string(name='requestId'),
}

model QueryByInstanceInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryByInstanceInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryByInstanceInfo  QueryByInstanceInfoRequest
  * @return QueryByInstanceInfoResponse
 */
async function queryByInstanceInfo(request: QueryByInstanceInfoRequest): QueryByInstanceInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryByInstanceInfo', 'POST', '/popapi/queryByInstanceInfo', 'json', false, 'json', request);
}

model QueryNodeInfoRequest {
  instanceId: string(name='instanceId', description='This parameter is required.', position='Query'),
  regionId?: string(name='regionId', position='Query'),
}

model QueryNodeInfoResponseBody = {
  code?: int32(name='code'),
  data?: [ 
    {
      cluserName?: string(name='cluserName'),
      clusterId?: string(name='clusterId'),
      instanceId?: string(name='instanceId'),
      region?: string(name='region'),
      uid?: string(name='uid'),
    }
  ](name='data'),
  msg?: string(name='msg'),
  requestId?: string(name='requestId'),
}

model QueryNodeInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryNodeInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryNodeInfo  QueryNodeInfoRequest
  * @return QueryNodeInfoResponse
 */
async function queryNodeInfo(request: QueryNodeInfoRequest): QueryNodeInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryNodeInfo', 'GET', '/popapi/queryByInstanceId', 'json', false, 'json', request);
}

