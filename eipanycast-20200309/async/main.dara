/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Eipanycast';
  @version = '2020-03-09';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AllocateAnycastEipAddressRequest {
  bandwidth?: string(name='Bandwidth', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  instanceChargeType?: string(name='InstanceChargeType', position='Query'),
  internetChargeType?: string(name='InternetChargeType', position='Query'),
  name?: string(name='Name', position='Query'),
  serviceLocation: string(name='ServiceLocation', position='Query'),
}

model AllocateAnycastEipAddressResponseBody = {
  anycastId?: string(name='AnycastId'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model AllocateAnycastEipAddressResponse = {
  headers: map[string]string(name='headers'),
  body: AllocateAnycastEipAddressResponseBody(name='body'),
}

async function allocateAnycastEipAddress(request: AllocateAnycastEipAddressRequest): AllocateAnycastEipAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AllocateAnycastEipAddress', 'POST', '/', 'json', false, 'json', request);
}

model AssociateAnycastEipAddressRequest {
  anycastId: string(name='AnycastId', position='Query'),
  associationMode?: string(name='AssociationMode', description='关联模式，默认模式、普通模式Default/Normal', position='Query'),
  bindInstanceId: string(name='BindInstanceId', position='Query'),
  bindInstanceRegionId: string(name='BindInstanceRegionId', position='Query'),
  bindInstanceType: string(name='BindInstanceType', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  popLocations?: [ 
    {
      popLocation?: string(name='PopLocation', description='pop location'),
    }
  ](name='PopLocations', description='绑定时关联的pop location，如果是绑定的第一个实例，该参数会忽略，会下发到全部pop点', position='Query'),
  privateIpAddress?: string(name='PrivateIpAddress', description='私网ip地址', position='Query'),
}

model AssociateAnycastEipAddressResponseBody = {
  requestId?: string(name='RequestId'),
}

model AssociateAnycastEipAddressResponse = {
  headers: map[string]string(name='headers'),
  body: AssociateAnycastEipAddressResponseBody(name='body'),
}

async function associateAnycastEipAddress(request: AssociateAnycastEipAddressRequest): AssociateAnycastEipAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociateAnycastEipAddress', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAnycastEipAddressRequest {
  anycastId?: string(name='AnycastId', position='Query'),
  bindInstanceId?: string(name='BindInstanceId', position='Query'),
  ip?: string(name='Ip', position='Query'),
}

model DescribeAnycastEipAddressResponseBody = {
  aliUid?: long(name='AliUid'),
  anycastEipBindInfoList?: [ 
    {
      associationMode?: string(name='AssociationMode', description='绑定模式 Normal、Default'),
      bindInstanceId?: string(name='BindInstanceId'),
      bindInstanceRegionId?: string(name='BindInstanceRegionId'),
      bindInstanceType?: string(name='BindInstanceType'),
      bindTime?: string(name='BindTime'),
      popLocations?: [ 
        {
          popLocation?: string(name='PopLocation', description='PopLocation'),
        }
      ](name='PopLocations', description='关联的pop点'),
      privateIpAddress?: string(name='PrivateIpAddress', description='ip地址'),
      status?: string(name='Status'),
    }
  ](name='AnycastEipBindInfoList'),
  anycastId?: string(name='AnycastId'),
  bandwidth?: int32(name='Bandwidth'),
  bid?: string(name='Bid'),
  businessStatus?: string(name='BusinessStatus'),
  createTime?: string(name='CreateTime'),
  description?: string(name='Description'),
  instanceChargeType?: string(name='InstanceChargeType'),
  internetChargeType?: string(name='InternetChargeType'),
  ipAddress?: string(name='IpAddress'),
  name?: string(name='Name'),
  requestId?: string(name='RequestId'),
  serviceLocation?: string(name='ServiceLocation'),
  status?: string(name='Status'),
}

model DescribeAnycastEipAddressResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAnycastEipAddressResponseBody(name='body'),
}

async function describeAnycastEipAddress(request: DescribeAnycastEipAddressRequest): DescribeAnycastEipAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAnycastEipAddress', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAnycastPopLocationsRequest {
  serviceLocation?: string(name='ServiceLocation', position='Query'),
}

model DescribeAnycastPopLocationsResponseBody = {
  anycastPopLocationList?: [ 
    {
      regionId?: string(name='RegionId'),
      regionName?: string(name='RegionName'),
    }
  ](name='AnycastPopLocationList'),
  count?: string(name='Count'),
  requestId?: string(name='RequestId'),
}

model DescribeAnycastPopLocationsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAnycastPopLocationsResponseBody(name='body'),
}

async function describeAnycastPopLocations(request: DescribeAnycastPopLocationsRequest): DescribeAnycastPopLocationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAnycastPopLocations', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAnycastServerRegionsRequest {
  serviceLocation: string(name='ServiceLocation', position='Query'),
}

model DescribeAnycastServerRegionsResponseBody = {
  anycastServerRegionList?: [ 
    {
      regionId?: string(name='RegionId'),
      regionName?: string(name='RegionName'),
    }
  ](name='AnycastServerRegionList'),
  count?: string(name='Count'),
  requestId?: string(name='RequestId'),
}

model DescribeAnycastServerRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAnycastServerRegionsResponseBody(name='body'),
}

async function describeAnycastServerRegions(request: DescribeAnycastServerRegionsRequest): DescribeAnycastServerRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAnycastServerRegions', 'POST', '/', 'json', false, 'json', request);
}

model ListAnycastEipAddressesRequest {
  anycastEipAddress?: string(name='AnycastEipAddress', position='Query'),
  anycastId?: string(name='AnycastId', position='Query'),
  bindInstanceIds?: [ string ](name='BindInstanceIds', position='Query'),
  businessStatus?: string(name='BusinessStatus', position='Query'),
  instanceChargeType?: string(name='InstanceChargeType', position='Query'),
  internetChargeType?: string(name='InternetChargeType', position='Query'),
  maxResults?: int32(name='MaxResults', position='Query'),
  name?: string(name='Name', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  serviceLocation?: string(name='ServiceLocation', position='Query'),
  status?: string(name='Status', position='Query'),
}

model ListAnycastEipAddressesResponseBody = {
  anycastList?: [ 
    {
      aliUid?: long(name='AliUid'),
      anycastEipBindInfoList?: [ 
        {
          bindInstanceId?: string(name='BindInstanceId'),
          bindInstanceRegionId?: string(name='BindInstanceRegionId'),
          bindInstanceType?: string(name='BindInstanceType'),
          bindTime?: string(name='BindTime'),
        }
      ](name='AnycastEipBindInfoList'),
      anycastId?: string(name='AnycastId'),
      bandwidth?: int32(name='Bandwidth'),
      bid?: string(name='Bid'),
      businessStatus?: string(name='BusinessStatus'),
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      instanceChargeType?: string(name='InstanceChargeType'),
      internetChargeType?: string(name='InternetChargeType'),
      ipAddress?: string(name='IpAddress'),
      name?: string(name='Name'),
      serviceLocation?: string(name='ServiceLocation'),
      status?: string(name='Status'),
    }
  ](name='AnycastList'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListAnycastEipAddressesResponse = {
  headers: map[string]string(name='headers'),
  body: ListAnycastEipAddressesResponseBody(name='body'),
}

async function listAnycastEipAddresses(request: ListAnycastEipAddressesRequest): ListAnycastEipAddressesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAnycastEipAddresses', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAnycastEipAddressAttributeRequest {
  anycastId: string(name='AnycastId', position='Query'),
  description?: string(name='Description', position='Query'),
  name?: string(name='Name', position='Query'),
}

model ModifyAnycastEipAddressAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAnycastEipAddressAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAnycastEipAddressAttributeResponseBody(name='body'),
}

async function modifyAnycastEipAddressAttribute(request: ModifyAnycastEipAddressAttributeRequest): ModifyAnycastEipAddressAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAnycastEipAddressAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAnycastEipAddressSpecRequest {
  anycastId: string(name='AnycastId', position='Query'),
  bandwidth: string(name='Bandwidth', position='Query'),
}

model ModifyAnycastEipAddressSpecResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAnycastEipAddressSpecResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAnycastEipAddressSpecResponseBody(name='body'),
}

async function modifyAnycastEipAddressSpec(request: ModifyAnycastEipAddressSpecRequest): ModifyAnycastEipAddressSpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAnycastEipAddressSpec', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseAnycastEipAddressRequest {
  anycastId: string(name='AnycastId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
}

model ReleaseAnycastEipAddressResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReleaseAnycastEipAddressResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseAnycastEipAddressResponseBody(name='body'),
}

async function releaseAnycastEipAddress(request: ReleaseAnycastEipAddressRequest): ReleaseAnycastEipAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseAnycastEipAddress', 'POST', '/', 'json', false, 'json', request);
}

model UnassociateAnycastEipAddressRequest {
  anycastId: string(name='AnycastId', position='Query'),
  bindInstanceId: string(name='BindInstanceId', position='Query'),
  bindInstanceRegionId: string(name='BindInstanceRegionId', position='Query'),
  bindInstanceType: string(name='BindInstanceType', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: string(name='DryRun', position='Query'),
  privateIpAddress?: string(name='PrivateIpAddress', position='Query'),
}

model UnassociateAnycastEipAddressResponseBody = {
  requestId?: string(name='RequestId', description='私网IP地址'),
}

model UnassociateAnycastEipAddressResponse = {
  headers: map[string]string(name='headers'),
  body: UnassociateAnycastEipAddressResponseBody(name='body'),
}

async function unassociateAnycastEipAddress(request: UnassociateAnycastEipAddressRequest): UnassociateAnycastEipAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnassociateAnycastEipAddress', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAnycastEipAddressAssociationsRequest {
  anycastId: string(name='AnycastId', position='Query'),
  associationMode?: string(name='AssociationMode', description='关联模式，默认模式、普通模式Default/Normal', position='Query'),
  bindInstanceId: string(name='BindInstanceId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  popLocationAddList?: [ 
    {
      popLocation?: string(name='PopLocation', description='pop location'),
    }
  ](name='PopLocationAddList', description='新增关联的pop location', position='Query'),
  popLocationDeleteList?: [ 
    {
      popLocation?: string(name='PopLocation', description='pop location'),
    }
  ](name='PopLocationDeleteList', description='待删除的关联pop location', position='Query'),
}

model UpdateAnycastEipAddressAssociationsResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateAnycastEipAddressAssociationsResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAnycastEipAddressAssociationsResponseBody(name='body'),
}

async function updateAnycastEipAddressAssociations(request: UpdateAnycastEipAddressAssociationsRequest): UpdateAnycastEipAddressAssociationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAnycastEipAddressAssociations', 'POST', '/', 'json', false, 'json', request);
}

