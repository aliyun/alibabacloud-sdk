/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Eipanycast';
  @version = '2020-03-09';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AllocateAnycastEipAddressRequest {
  bandwidth?: string(name='Bandwidth', description='The maximum bandwidth of the Anycast EIP. Unit: Mbit/s.

Valid values: **200** to **1000**.

Default value: **1000**.

>  The maximum bandwidth value is not a guaranteed value. It indicates the upper limit of bandwidth and is for reference only.', example='200', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that the value is unique among different requests. The client token can contain only ASCII characters and cannot exceed 64 characters in length.

>  If you do not set this parameter, **ClientToken** is set to the value of **ClientToken**. The value of **RequestId** may be different for each API request.', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  description?: string(name='Description', description='The description of the Anycast EIP.

The description must be 0 to 256 characters in length and cannot start with `http://` or `https://`.', example='docdesc', position='Query'),
  instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the Anycast EIP.

Set the value to **PostPaid**, which specifies the pay-as-you-go billing method.', example='PostPaid', position='Query'),
  internetChargeType?: string(name='InternetChargeType', description='The metering method of the Anycast EIP.

Set the value to **PayByTraffic**, which specifies the pay-by-data-transfer metering method.', example='PayByTraffic', position='Query'),
  name?: string(name='Name', description='The name of the Anycast EIP.

The name must be 0 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). It must start with a letter.', example='doctest', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  serviceLocation: string(name='ServiceLocation', description='The access area of the Anycast EIP.

Set the value to **international**, which specifies the regions outside the Chinese mainland.', example='international', position='Query'),
}

model AllocateAnycastEipAddressResponseBody = {
  anycastId?: string(name='AnycastId', description='The ID of the Anycast EIP.', example='aeip-bp1ix34fralt4ykf3****'),
  orderId?: string(name='OrderId', description='The ID of the order.', example='1422000****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='FBDB18D8-E91E-4978-8D6C-6E2E3EE10133'),
}

model AllocateAnycastEipAddressResponse = {
  headers: map[string]string(name='headers'),
  body: AllocateAnycastEipAddressResponseBody(name='body'),
}

async function allocateAnycastEipAddress(request: AllocateAnycastEipAddressRequest): AllocateAnycastEipAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AllocateAnycastEipAddress', 'POST', '/', 'json', false, 'json', request);
}

model AssociateAnycastEipAddressRequest {
  anycastId: string(name='AnycastId', description='The ID of the Anycast EIP.', example='aeip-bp1ix34fralt4ykf3****', position='Query'),
  associationMode?: string(name='AssociationMode', description='The association mode. Valid values:

*   **Default**: the default mode. In this mode, cloud resources to be associated are set as default origin servers.
*   **Normal**: the standard mode. In this mode, cloud resources to be associated are set as standard origin servers.

> You can associate an Anycast EIP with cloud resources in multiple regions. However, you can set only one cloud resource as the default origin server. Other cloud resources are set as standard origin servers. If you do not specify or add an access point, requests are forwarded to the default origin server.

*   If this is your first time to associate an Anycast EIP with a cloud resource, set the value to **Default**.
*   If not, you can also set the value to **Default**, which specifies a new default origin server. In this case, the previous origin server functions as a standard origin server.', example='Default', position='Query'),
  bindInstanceId: string(name='BindInstanceId', description='The ID of the cloud resource with which you want to associate the Anycast EIP.', example='lb-d7oxbixhxv1uupnon****', position='Query'),
  bindInstanceRegionId: string(name='BindInstanceRegionId', description='The ID of the region where the cloud resource is deployed.

You can associate Anycast EIPs only with cloud resources in specific regions. You can call the [DescribeAnycastServerRegions](~~171939~~) operation to query the region IDs.', example='us-west-1', position='Query'),
  bindInstanceType: string(name='BindInstanceType', description='The type of cloud resource with which you want to associate the Anycast EIP. Valid values:

*   **SlbInstance**: an internal-facing Server Load Balancer (SLB) instance that is deployed in a virtual private cloud (VPC)
*   **NetworkInterface**: an elastic network interface (ENI)', example='SlbInstance', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.

>  If you do not set this parameter, the system automatically uses **RequestId** as **ClientToken**. **RequestId** may be different for each API request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to only precheck the request. Valid values:

*   **true**: prechecks the request. After the request passes the precheck, the Anycast EIP is not associated with the instance. The system checks the required parameters, request syntax, and limits. If the request fails to pass the precheck, an error message is returned. If the request passes the precheck, the `DryRunOperation` error code is returned.
*   **false** (default): sends the API request. If the request passes the precheck, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  popLocations?: [ 
    {
      popLocation?: string(name='PopLocation', description='The information about the access points in associated access areas when you associate an Anycast EIP with a cloud resource.

If this is your first time to associate an Anycast EIP with a cloud resource, ignore this parameter. The system automatically associates all access areas.

You can call the [DescribeAnycastPopLocations](~~171938~~) operation to query information about access points in supported access areas.', example='us-west-1-pop'),
    }
  ](name='PopLocations', description='The information about the access points in associated access areas when you associate an Anycast EIP with a cloud resource.

If this is your first time to associate an Anycast EIP with a cloud resource, ignore this parameter. The system automatically associates all access areas.

You can call the [DescribeAnycastPopLocations](~~171938~~) operation to query information about access points in supported access areas.', position='Query'),
  privateIpAddress?: string(name='PrivateIpAddress', description='The secondary private IP address of the ENI with which you want to associate the Anycast EIP.

This parameter is valid only when you set **BindInstanceType** to **NetworkInterface**. If you do not set this parameter, the primary private IP address of the ENI is used.', example='192.168.XX.XX', position='Query'),
}

model AssociateAnycastEipAddressResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='FBDB18D8-E91E-4978-8D6C-6E2E3EE10133'),
}

model AssociateAnycastEipAddressResponse = {
  headers: map[string]string(name='headers'),
  body: AssociateAnycastEipAddressResponseBody(name='body'),
}

async function associateAnycastEipAddress(request: AssociateAnycastEipAddressRequest): AssociateAnycastEipAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociateAnycastEipAddress', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAnycastEipAddressRequest {
  anycastId?: string(name='AnycastId', description='The ID of the Anycast EIP.

>  You must specify at least one of **Ip** and **AnycastId**.', example='aeip-bp1ix34fralt4ykf3****', position='Query'),
  bindInstanceId?: string(name='BindInstanceId', description='The ID of the cloud resource with which the Anycast EIP is associated.', example='lb-2zebb08phyczzawe****', position='Query'),
  ip?: string(name='Ip', description='The IP address of the Anycast EIP.

>  You must specify at least one of **Ip** and **AnycastId**.', example='139.95.XX.XX', position='Query'),
}

model DescribeAnycastEipAddressResponseBody = {
  aliUid?: long(name='AliUid', description='The ID of the account to which the Anycast EIP belongs.', example='25346073170691****'),
  anycastEipBindInfoList?: [ 
    {
      associationMode?: string(name='AssociationMode', description='The association mode. Valid values:

*   **Default**: the default mode. In this mode, associated cloud resources are set as default origin servers.
*   **Normal**: the standard mode. In this mode, associated cloud resources are set as standard origin servers.', example='Default'),
      bindInstanceId?: string(name='BindInstanceId', description='The ID of the cloud resource with which the Anycast EIP is associated.', example='lb-2zebb08phyczzawe****'),
      bindInstanceRegionId?: string(name='BindInstanceRegionId', description='The ID of the region in which the cloud resource is deployed.', example='us-west-1'),
      bindInstanceType?: string(name='BindInstanceType', description='The type of cloud resource with which the Anycast EIP is associated. Valid values:

*   **SlbInstance**: an internal-facing Server Load Balancer (SLB) instance that is deployed in a virtual private cloud (VPC)
*   **NetworkInterface**: an elastic network interface (ENI)', example='SlbInstance'),
      bindTime?: string(name='BindTime', description='The time when the Anycast EIP was associated.

The time follows the ISO8601 standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time is displayed in UTC.', example='2021-04-23T02:37:38Z'),
      popLocations?: [ 
        {
          popLocation?: string(name='PopLocation', description='The information about the access points in associated access areas when you associate an Anycast EIP with a cloud resource.

If this is your first time associating an Anycast EIP with a cloud resource, the system returns information about access points in all access areas.', example='us-west-1-pop'),
        }
      ](name='PopLocations', description='The information about the access points in associated access areas when you associate an Anycast EIP with a cloud resource.

If this is your first time associating an Anycast EIP with a cloud resource, the system returns information about access points in all access areas.'),
      privateIpAddress?: string(name='PrivateIpAddress', description='The secondary private IP address of the associated ENI.

This parameter is valid only when **BindInstanceType** is set to **NetworkInterface**.', example='192.168.XX.XX'),
      status?: string(name='Status', description='The status of the cloud resource. Valid values:

*   **BINDING**
*   **BINDED**
*   **UNBINDING**
*   **DELETED**
*   **MODIFYING**', example='BINDING'),
    }
  ](name='AnycastEipBindInfoList', description='The information about the cloud resource with which the Anycast EIP is associated.'),
  anycastId?: string(name='AnycastId', description='The ID of the Anycast EIP.', example='aeip-bp1ix34fralt4ykf3****'),
  bandwidth?: int32(name='Bandwidth', description='The maximum bandwidth of the Anycast EIP. Unit: Mbit/s.', example='200'),
  bid?: string(name='Bid', description='The BID of the account to which the Anycast EIP belongs.', example='26842'),
  businessStatus?: string(name='BusinessStatus', description='The service status of the Anycast EIP. Valid values:

*   **Normal**
*   **FinancialLocked**', example='Normal'),
  createTime?: string(name='CreateTime', description='The time when the Anycast EIP was created.

The time follows the ISO8601 standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time is displayed in UTC.', example='2021-04-23T01:37:38Z'),
  description?: string(name='Description', description='The description of the Anycast EIP.', example='doctest'),
  instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the Anycast EIP.

Only **PostPaid** may be returned, which indicates the pay-as-you-go billing method.', example='PostPaid'),
  internetChargeType?: string(name='InternetChargeType', description='The metering method of the Anycast EIP.

Only **PayByTraffic** may be returned, which indicates the pay-by-data-transfer metering method.', example='PayByTraffic'),
  ipAddress?: string(name='IpAddress', description='The IP address of the Anycast EIP.', example='139.95.XX.XX'),
  name?: string(name='Name', description='The name of the Anycast EIP.', example='docname'),
  requestId?: string(name='RequestId', description='The request ID.', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  resourceGroupId?: string(name='ResourceGroupId'),
  serviceLocation?: string(name='ServiceLocation', description='The area from which you can use the Anycast EIP to access the backend server over the Internet.

Only **international** may be returned, which indicates the areas outside the Chinese mainland.', example='international'),
  status?: string(name='Status', description='The status of the Anycast EIP. Valid values:

*   **Associating**
*   **Unassociating**
*   **Allocated**
*   **Associated**
*   **Modifying**
*   **Releasing**
*   **Released**', example='Associated'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='1'),
      value?: string(name='Value', description='The tag value.', example='1'),
    }
  ](name='Tags', description='The tag information.'),
}

model DescribeAnycastEipAddressResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAnycastEipAddressResponseBody(name='body'),
}

async function describeAnycastEipAddress(request: DescribeAnycastEipAddressRequest): DescribeAnycastEipAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAnycastEipAddress', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAnycastPopLocationsRequest {
  serviceLocation?: string(name='ServiceLocation', description='The access area of the Anycast elastic IP address (EIP).

Set the value to **international**, which specifies the regions outside the Chinese mainland.', example='international', position='Query'),
}

model DescribeAnycastPopLocationsResponseBody = {
  anycastPopLocationList?: [ 
    {
      regionId?: string(name='RegionId', description='The ID of the region where the access point is deployed.', example='us-west-1-pop'),
      regionName?: string(name='RegionName', description='The name of the region where the access point is deployed.', example='us-west-1-pop'),
    }
  ](name='AnycastPopLocationList', description='The list of access points in the specified access area.'),
  count?: string(name='Count', description='The number of access points.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model DescribeAnycastPopLocationsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAnycastPopLocationsResponseBody(name='body'),
}

async function describeAnycastPopLocations(request: DescribeAnycastPopLocationsRequest): DescribeAnycastPopLocationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAnycastPopLocations', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAnycastServerRegionsRequest {
  serviceLocation: string(name='ServiceLocation', description='The access area from which you use the Anycast EIP to communicate with the Internet.

Set the value to **international**, which specifies the regions outside the Chinese mainland.', example='international', position='Query'),
}

model DescribeAnycastServerRegionsResponseBody = {
  anycastServerRegionList?: [ 
    {
      regionId?: string(name='RegionId', description='The ID of the region.', example='eu-west-1'),
      regionName?: string(name='RegionName', description='The name of the region.', example='eu-west-1-gb33-a01'),
    }
  ](name='AnycastServerRegionList', description='The list of regions where you can associate Anycast EIPs with backend servers.'),
  count?: string(name='Count', description='The total number of entries returned.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model DescribeAnycastServerRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAnycastServerRegionsResponseBody(name='body'),
}

async function describeAnycastServerRegions(request: DescribeAnycastServerRegionsRequest): DescribeAnycastServerRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAnycastServerRegions', 'POST', '/', 'json', false, 'json', request);
}

model ListAnycastEipAddressesRequest {
  anycastEipAddress?: string(name='AnycastEipAddress', description='The IP address that is allocated to the Anycast EIP.', example='139.95.XX.XX', position='Query'),
  anycastId?: string(name='AnycastId', description='The ID of the Anycast EIP.

>  To ensure the accuracy of the query result, we do not recommend that you specify **AnycastIds** and **AnycastId** at the same time.', example='aeip-2zeerraiwb7ujsxdc****', position='Query'),
  anycastIds?: [ string ](name='AnycastIds', description='The IDs of Anycast EIPs.

You can enter at most 50 Anycast EIP IDs.

>  To ensure the accuracy of the query result, we do not recommend that you specify **AnycastIds** and **AnycastId** at the same time.', position='Query'),
  bindInstanceIds?: [ string ](name='BindInstanceIds', description='The IDs of the cloud resources with which the Anycast EIPs are associated.

You can enter at most 100 cloud resource IDs.', example='lb-2zebb08phyczzawe****', position='Query'),
  businessStatus?: string(name='BusinessStatus', description='The service status of the Anycast EIP. Valid values:

*   **Normal**
*   **FinancialLocked**', example='Normal', position='Query'),
  instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the Anycast EIP.

Set the value to **PostPaid**, which specifies the pay-as-you-go billing method.', example='PostPaid', position='Query'),
  internetChargeType?: string(name='InternetChargeType', description='The metering method of the Anycast EIP.

Set the value to **PayByTraffic**, which specifies the pay-by-data-transfer metering method.', example='PayByTraffic', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page. Valid values: **20 to 100**. Default value: **50**.', example='50', position='Query'),
  name?: string(name='Name', description='The name of the Anycast EIP.

The name must be 0 to 128 characters in length, and can contain digits, hyphens (-), and underscores (\\_). The name must start with a letter.', example='doctest', position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   You do not need to specify this parameter for the first request.
*   You must specify the token that is obtained from the previous query as the value of NextToken.', example='caeba0bbb2be03f84eb48b699f0a****', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  serviceLocation?: string(name='ServiceLocation', description='The access area of the Anycast EIP.

Set the value to **international**, which specifies the regions outside the Chinese mainland.', example='international', position='Query'),
  status?: string(name='Status', description='The status of the Anycast EIP. Valid values:

*   **Associating**
*   **Unassociating**
*   **Allocated**
*   **Associated**
*   **Modifying**
*   **Releasing**
*   **Released**', example='Associated', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key of the resource. You can specify up to 20 tag keys. You cannot specify empty strings as tag keys.

The key can be up to 64 characters in length and can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). The key must start with a letter but cannot start with `aliyun` or `acs:`. The key cannot contain `http://` or `https://`.

>  You must specify at least one of **Tag.N** (**Tag.N.Key** and **Tag.N.Value**).', example='1'),
      value?: string(name='Value', description='The tag value of the resource. You can specify up to 20 tag values. It can be an empty string.

The value cannot exceed 128 characters in length and can contain digits, periods (.), underscores (\\_), and hyphens (-). The value must start with a letter but cannot start with `aliyun` or `acs:`. The value cannot contain `http://` or `https://`.

>  You must specify at least one of **Tag.N** (**Tag.N.Key** and **Tag.N.Value**).', example='tag1'),
    }
  ](name='Tags', description='The tags.', position='Query'),
}

model ListAnycastEipAddressesResponseBody = {
  anycastList?: [ 
    {
      aliUid?: long(name='AliUid', description='The ID of the account to which the Anycast EIP belongs.', example='123440159596****'),
      anycastEipBindInfoList?: [ 
        {
          bindInstanceId?: string(name='BindInstanceId', description='The ID of the cloud resource with which the Anycast EIP is associated.', example='lb-2zebb08phyczzawe****'),
          bindInstanceRegionId?: string(name='BindInstanceRegionId', description='The ID of the region where the cloud resource is deployed.', example='us-west-1'),
          bindInstanceType?: string(name='BindInstanceType', description='The type of cloud resource with which the Anycast EIP is associated.

*   **SlbInstance**: an internal-facing Classic Load Balancer (CLB) instance deployed in a virtual private cloud (VPC). CLB is formerly known as Server Load Balancer (SLB).
*   **NetworkInterface**: an elastic network interface (ENI).', example='SlbInstance'),
          bindTime?: string(name='BindTime', description='The time when the Anycast EIP was associated.', example='2022-04-23T01:37:38Z'),
        }
      ](name='AnycastEipBindInfoList', description='The list of cloud resources with which the Anycast EIPs are associated.'),
      anycastId?: string(name='AnycastId', description='The ID of the Anycast EIP.', example='aeip-2zeerraiwb7ujsxdc****'),
      bandwidth?: int32(name='Bandwidth', description='The maximum bandwidth of the Anycast EIP. Unit: Mbit/s.', example='200'),
      businessStatus?: string(name='BusinessStatus', description='The service status of the Anycast EIP. Valid values:

*   **Normal**
*   **FinancialLocked**', example='Normal'),
      createTime?: string(name='CreateTime', description='The time when the Anycast EIP was created.', example='2022-04-22T01:37:38Z'),
      description?: string(name='Description', description='The description of the Anycast EIP.', example='docdesc'),
      instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the Anycast EIP.

**PostPaid**: pay-as-you-go', example='PostPaid'),
      internetChargeType?: string(name='InternetChargeType', description='The metering method of the Anycast EIP.

**PayByTraffic**: pay-by-data-transfer', example='PayByTraffic'),
      ipAddress?: string(name='IpAddress', description='The IP address of the Anycast EIP.', example='139.95.XX.XX'),
      name?: string(name='Name', description='The name of the Anycast EIP.', example='docname'),
      resourceGroupId?: string(name='ResourceGroupId'),
      serviceLocation?: string(name='ServiceLocation', description='The access area of the Anycast EIP.

**international**: regions outside the Chinese mainland', example='international'),
      serviceManaged?: int32(name='ServiceManaged', description='Indicates whether the resource is created by the service account.

*   **0**: no
*   **1**: yes', example='0'),
      status?: string(name='Status', description='The status of the Anycast EIP.

*   **Associating**
*   **Unassociating**
*   **Allocated**
*   **Associated**
*   **Modifying**
*   **Releasing**
*   **Released**', example='Associating'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key.'),
          value?: string(name='Value', description='The tag value.'),
        }
      ](name='Tags', description='The information about the tags.'),
    }
  ](name='AnycastList', description='The list of Anycast EIPs.'),
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results. Valid values:

*   If **NextToken** is empty, no next page exists.
*   If **NextToken** is not empty, the value of NextToken can be used in the next request to retrieve a new page of results.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The request ID.', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  totalCount?: int32(name='TotalCount', description='The number of entries returned.', example='100'),
}

model ListAnycastEipAddressesResponse = {
  headers: map[string]string(name='headers'),
  body: ListAnycastEipAddressesResponseBody(name='body'),
}

async function listAnycastEipAddresses(request: ListAnycastEipAddressesRequest): ListAnycastEipAddressesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAnycastEipAddresses', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  maxResults?: string(name='MaxResults', description='The number of entries to return on each page. Valid values:**1** to **50**. Default value: **50**.', example='50', position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   If this is your first query or no subsequent query is to be sent, ignore this parameter.
*   If a next query is to be sent, set the value to the value of **NextToken** that is returned in the last call.', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  resourceId?: [ string ](name='ResourceId', description='The ID of the resource.', position='Query'),
  resourceType: string(name='ResourceType', description='The resource type. Set the value to **ANYCASTEIPADDRESS**.', example='ANYCASTEIPADDRESS', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the resource. You can specify up to 20 tag keys. It cannot be an empty string.

The key can be up to 64 characters in length and can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). The key must start with a letter but cannot start with `aliyun` or `acs:`. The key cannot contain `http://` or `https://`.

>  Specify at least one of **ResourceId.N** or **Tag.N** (**Tag.N.Key** and **Tag.N.Value**).', example='FinanceDept'),
      value?: string(name='Value', description='The value of tag N to add to the resource. You can specify up to 20 tag values. It can be an empty string.

The value can be up to 128 characters in length and can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). The value must start with a letter but cannot start with `aliyun` or `acs:`. The value cannot contain `http://` or `https://`.

>  Specify at least one of **ResourceId.N** or **Tag.N** (**Tag.N.Key** and **Tag.N.Value**).', example='FinanceJoshua'),
    }
  ](name='Tag', description='The tags', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', description='The returned value of NextToken is a pagination token, which can be used in the next request to retrieve a new page of results. Valid values:

*   If the **NextToken** parameter is empty, no next page exists.
*   If the return value of **NextToken** is not empty, the value indicates the token that is used for the next query.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The request ID.', example='DE65F6B7-7566-4802-9007-96F2494AC512'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', description='The resource ID.', example='aeip-2zeerraiwb7ujsxdc****'),
      resourceType?: string(name='ResourceType', description='The resource type. Set the value to **ANYCASTEIPADDRESS**.', example='ANYCASTEIPADDRESS'),
      tagKey?: string(name='TagKey', description='The tag key.', example='FinanceDept'),
      tagValue?: string(name='TagValue', description='The tag value.', example='FinanceJoshua'),
    }
  ](name='TagResources', description='The resources to which the tags are added.'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAnycastEipAddressAttributeRequest {
  anycastId: string(name='AnycastId', description='The ID of the Anycast EIP.', example='aeip-bp1ix34fralt4ykf3****', position='Query'),
  description?: string(name='Description', description='The description of the Anycast EIP.

The description must be 0 to 256 characters in length and cannot start with `http://` or `https://`.', example='docdesc', position='Query'),
  name?: string(name='Name', description='The name of the Anycast EIP.

The name must be 0 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). It must start with a letter.', example='docname', position='Query'),
}

model ModifyAnycastEipAddressAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='FBDB18D8-E91E-4978-8D6C-6E2E3EE10133'),
}

model ModifyAnycastEipAddressAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAnycastEipAddressAttributeResponseBody(name='body'),
}

async function modifyAnycastEipAddressAttribute(request: ModifyAnycastEipAddressAttributeRequest): ModifyAnycastEipAddressAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAnycastEipAddressAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAnycastEipAddressSpecRequest {
  anycastId: string(name='AnycastId', description='The ID of the Anycast EIP.', example='aeip-bp1ix34fralt4ykf3****', position='Query'),
  bandwidth: string(name='Bandwidth', description='The maximum bandwidth of the Anycast EIP. Unit: Mbit/s.

Valid values: **200** to **1000**.', example='200', position='Query'),
}

model ModifyAnycastEipAddressSpecResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='FBDB18D8-E91E-4978-8D6C-6E2E3EE10133'),
}

model ModifyAnycastEipAddressSpecResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAnycastEipAddressSpecResponseBody(name='body'),
}

async function modifyAnycastEipAddressSpec(request: ModifyAnycastEipAddressSpecRequest): ModifyAnycastEipAddressSpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAnycastEipAddressSpec', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseAnycastEipAddressRequest {
  anycastId: string(name='AnycastId', description='The ID of the Anycast EIP to be released.', example='aeip-bp1ix34fralt4ykf3****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value. Make sure that the value is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
}

model ReleaseAnycastEipAddressResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='FBDB18D8-E91E-4978-8D6C-6E2E3EE10133'),
}

model ReleaseAnycastEipAddressResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseAnycastEipAddressResponseBody(name='body'),
}

async function releaseAnycastEipAddress(request: ReleaseAnycastEipAddressRequest): ReleaseAnycastEipAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseAnycastEipAddress', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  resourceId: [ string ](name='ResourceId', description='The list of resource IDs.', position='Query'),
  resourceType: string(name='ResourceType', description='The resource type. Set the value to **ANYCASTEIPADDRESS**.', example='ANYCASTEIPADDRESS', position='Query'),
  tag: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the resource. You must enter at least one tag key and at most 20 tag keys. The tag key cannot be an empty string.

The key cannot exceed 64 characters in length, and can contain digits, periods (.), underscores (\\_), and hyphens (-). The key must start with a letter but cannot start with `aliyun` or `acs:`. The key cannot contain `http://` or `https://`.

>  When you call this operation, you must specify **Tag.N.Key**.', example='FinanceDept'),
      value?: string(name='Value', description='The value of tag N to add to the resource. You must enter at least one tag value and at most 20 tag values. The tag value can be an empty string.

The tag value cannot exceed 128 characters in length, and can contain digits, periods (.), underscores (\\_), and hyphens (-). It must start with a letter but cannot start with `aliyun` or `acs:`. It cannot contain `http://` or `https://`.

>  When you call this operation, you must specify **Tag.N.Value**.', example='FinanceJoshua'),
    }
  ](name='Tag', description='The tags.', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='C46FF5A8-C5F0-4024-8262-B16B639225A0'),
  success?: boolean(name='Success', description='Indicates whether the operation is successful. Valid values:

**true**

**false**', example='true'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UnassociateAnycastEipAddressRequest {
  anycastId: string(name='AnycastId', description='The ID of the Anycast EIP.', example='aeip-2zeerraiwb7ujsxdc****', position='Query'),
  bindInstanceId: string(name='BindInstanceId', description='The ID of the cloud resource from which you want to disassociate the Anycast EIP.', example='lb-2zebb08phyczzawe****', position='Query'),
  bindInstanceRegionId: string(name='BindInstanceRegionId', description='The region where the cloud resource is deployed.', example='us-west-1', position='Query'),
  bindInstanceType: string(name='BindInstanceType', description='The type of cloud resource from which you want to disassociate the Anycast EIP. Valid values:

*   **SlbInstance**: an internal-facing Server Load Balancer (SLB) instance that is deployed in a virtual private cloud (VPC)
*   **NetworkInterface**: an elastic network interface (ENI)', example='SlbInstance', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.

>  If you do not set this parameter, the system automatically uses **RequestId** as **ClientToken**. **RequestId** may be different for each API request.', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  dryRun?: string(name='DryRun', description='Specifies whether to only precheck the request. Valid values:

*   **true**: prechecks the request without disassociating the Anycast EIP. The system checks the required parameters, request syntax, and limits. If the request fails to pass the precheck, an error message is returned. If the request passes the precheck, the `DryRunOperation` error code is returned.
*   **false** (default): sends the API request. If the request passes the precheck, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  privateIpAddress?: string(name='PrivateIpAddress', description='The secondary private IP address of the ENI from which you want to disassociate the Anycast EIP.

This parameter is valid only when you set **BindInstanceType** to **NetworkInterface**. If you do not set this parameter, the primary private IP address of the ENI is returned.', example='192.168.XX.XX', position='Query'),
}

model UnassociateAnycastEipAddressResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='FBDB18D8-E91E-4978-8D6C-6E2E3EE10133'),
}

model UnassociateAnycastEipAddressResponse = {
  headers: map[string]string(name='headers'),
  body: UnassociateAnycastEipAddressResponseBody(name='body'),
}

async function unassociateAnycastEipAddress(request: UnassociateAnycastEipAddressRequest): UnassociateAnycastEipAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnassociateAnycastEipAddress', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  resourceId: [ string ](name='ResourceId', description='The ID of the resource.', position='Query'),
  resourceType: string(name='ResourceType', description='The resource type. Set the value to **ANYCASTEIPADDRESS**.', example='ANYCASTEIPADDRESS', position='Query'),
  tagKey?: [ string ](name='TagKey', description='The tag keys of the resource.', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='C46FF5A8-C5F0-4024-8262-B16B639225A0'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

**true**

**false**', example='true'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAnycastEipAddressAssociationsRequest {
  anycastId: string(name='AnycastId', description='The ID of the Anycast EIP.', example='aeip-bp1ix34fralt4ykf3****', position='Query'),
  associationMode?: string(name='AssociationMode', description='The association mode. Valid values:

*   **Default**: the default mode. In this mode, cloud resources to be associated are set as default origin servers.
*   **Normal**: the standard mode. In this mode, cloud resources to be associated are set as standard origin servers.', example='Default', position='Query'),
  bindInstanceId: string(name='BindInstanceId', description='The ID of the cloud resource with which you want to associate the Anycast EIP.', example='lb-d7oxbixhxv1uupnon****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.

>  If you do not set this parameter, the system automatically uses **RequestId** as **ClientToken**. **RequestId** may be different for each API request.', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to only precheck the request. Valid values:

*   **true**: prechecks the request without updating the association information. The system checks the required parameters, request syntax, and limits. If the request fails to pass the precheck, an error message is returned. If the request passes the precheck, the `DryRunOperation` error code is returned.
*   **false** (default): sends the API request. If the request passes the precheck, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  popLocationAddList?: [ 
    {
      popLocation?: string(name='PopLocation', description='The access points in the access areas to be added.

You can call the [DescribeAnycastPopLocations](~~171938~~) operation to query the access points in supported access areas.', example='us-west-1-pop'),
    }
  ](name='PopLocationAddList', description='The access areas and access points to be added.', position='Query'),
  popLocationDeleteList?: [ 
    {
      popLocation?: string(name='PopLocation', description='The access points in the access areas to be deleted.

>  If the access point in the access area is associated with a default origin server, you cannot delete the access point in the access area.', example='ap-south-1-pop'),
    }
  ](name='PopLocationDeleteList', description='The access areas and access points to be deleted.', position='Query'),
}

model UpdateAnycastEipAddressAssociationsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model UpdateAnycastEipAddressAssociationsResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAnycastEipAddressAssociationsResponseBody(name='body'),
}

async function updateAnycastEipAddressAssociations(request: UpdateAnycastEipAddressAssociationsRequest): UpdateAnycastEipAddressAssociationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAnycastEipAddressAssociations', 'POST', '/', 'json', false, 'json', request);
}

