/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('eipanycast', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AllocateAnycastEipAddressRequest {
  bandwidth?: string(name='Bandwidth', example='200'),
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-001****'),
  description?: string(name='Description', example='docdesc'),
  instanceChargeType?: string(name='InstanceChargeType', example='PostPaid'),
  internetChargeType?: string(name='InternetChargeType', example='PayByTraffic'),
  name?: string(name='Name', example='doctest'),
  serviceLocation?: string(name='ServiceLocation', example='international'),
}

model AllocateAnycastEipAddressResponseBody = {
  anycastId?: string(name='AnycastId', example='aeip-bp1ix34fralt4ykf3****'),
  orderId?: string(name='OrderId', example='1422000****'),
  requestId?: string(name='RequestId', example='FBDB18D8-E91E-4978-8D6C-6E2E3EE10133'),
}

model AllocateAnycastEipAddressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AllocateAnycastEipAddressResponseBody(name='body'),
}

async function allocateAnycastEipAddressWithOptions(request: AllocateAnycastEipAddressRequest, runtime: Util.RuntimeOptions): AllocateAnycastEipAddressResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.instanceChargeType)) {
    query['InstanceChargeType'] = request.instanceChargeType;
  }
  if (!Util.isUnset(request.internetChargeType)) {
    query['InternetChargeType'] = request.internetChargeType;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.serviceLocation)) {
    query['ServiceLocation'] = request.serviceLocation;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AllocateAnycastEipAddress',
    version = '2020-03-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function allocateAnycastEipAddress(request: AllocateAnycastEipAddressRequest): AllocateAnycastEipAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocateAnycastEipAddressWithOptions(request, runtime);
}

model AssociateAnycastEipAddressRequest {
  anycastId?: string(name='AnycastId', example='aeip-bp1ix34fralt4ykf3****'),
  associationMode?: string(name='AssociationMode', example='Default'),
  bindInstanceId?: string(name='BindInstanceId', example='lb-d7oxbixhxv1uupnon****'),
  bindInstanceRegionId?: string(name='BindInstanceRegionId', example='us-west-1'),
  bindInstanceType?: string(name='BindInstanceType', example='SlbInstance'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000'),
  dryRun?: boolean(name='DryRun', example='false'),
  popLocations?: [ 
    {
      popLocation?: string(name='PopLocation', example='us-west-1-pop'),
    }
  ](name='PopLocations'),
  privateIpAddress?: string(name='PrivateIpAddress', example='192.168.XX.XX'),
}

model AssociateAnycastEipAddressResponseBody = {
  requestId?: string(name='RequestId', example='FBDB18D8-E91E-4978-8D6C-6E2E3EE10133'),
}

model AssociateAnycastEipAddressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AssociateAnycastEipAddressResponseBody(name='body'),
}

async function associateAnycastEipAddressWithOptions(request: AssociateAnycastEipAddressRequest, runtime: Util.RuntimeOptions): AssociateAnycastEipAddressResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.anycastId)) {
    query['AnycastId'] = request.anycastId;
  }
  if (!Util.isUnset(request.associationMode)) {
    query['AssociationMode'] = request.associationMode;
  }
  if (!Util.isUnset(request.bindInstanceId)) {
    query['BindInstanceId'] = request.bindInstanceId;
  }
  if (!Util.isUnset(request.bindInstanceRegionId)) {
    query['BindInstanceRegionId'] = request.bindInstanceRegionId;
  }
  if (!Util.isUnset(request.bindInstanceType)) {
    query['BindInstanceType'] = request.bindInstanceType;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.popLocations)) {
    query['PopLocations'] = request.popLocations;
  }
  if (!Util.isUnset(request.privateIpAddress)) {
    query['PrivateIpAddress'] = request.privateIpAddress;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AssociateAnycastEipAddress',
    version = '2020-03-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function associateAnycastEipAddress(request: AssociateAnycastEipAddressRequest): AssociateAnycastEipAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateAnycastEipAddressWithOptions(request, runtime);
}

model DescribeAnycastEipAddressRequest {
  anycastId?: string(name='AnycastId', example='aeip-bp1ix34fralt4ykf3****'),
  bindInstanceId?: string(name='BindInstanceId', example='lb-2zebb08phyczzawe****'),
  ip?: string(name='Ip', example='139.95.XX.XX'),
}

model DescribeAnycastEipAddressResponseBody = {
  aliUid?: long(name='AliUid', example='25346073170691****'),
  anycastEipBindInfoList?: [ 
    {
      associationMode?: string(name='AssociationMode', example='Default'),
      bindInstanceId?: string(name='BindInstanceId', example='lb-2zebb08phyczzawe****'),
      bindInstanceRegionId?: string(name='BindInstanceRegionId', example='us-west-1'),
      bindInstanceType?: string(name='BindInstanceType', example='SlbInstance'),
      bindTime?: string(name='BindTime', example='2021-04-23T02:37:38Z'),
      popLocations?: [ 
        {
          popLocation?: string(name='PopLocation', example='us-west-1-pop'),
        }
      ](name='PopLocations'),
      privateIpAddress?: string(name='PrivateIpAddress', example='192.168.XX.XX'),
      status?: string(name='Status', example='BINDING'),
    }
  ](name='AnycastEipBindInfoList'),
  anycastId?: string(name='AnycastId', example='aeip-bp1ix34fralt4ykf3****'),
  bandwidth?: int32(name='Bandwidth', example='200'),
  bid?: string(name='Bid', example='26842'),
  businessStatus?: string(name='BusinessStatus', example='Normal'),
  createTime?: string(name='CreateTime', example='2021-04-23T01:37:38Z'),
  description?: string(name='Description', example='doctest'),
  instanceChargeType?: string(name='InstanceChargeType', example='PostPaid'),
  internetChargeType?: string(name='InternetChargeType', example='PayByTraffic'),
  ipAddress?: string(name='IpAddress', example='139.95.XX.XX'),
  name?: string(name='Name', example='docname'),
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  serviceLocation?: string(name='ServiceLocation', example='international'),
  status?: string(name='Status', example='Associated'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags'),
}

model DescribeAnycastEipAddressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAnycastEipAddressResponseBody(name='body'),
}

async function describeAnycastEipAddressWithOptions(request: DescribeAnycastEipAddressRequest, runtime: Util.RuntimeOptions): DescribeAnycastEipAddressResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.anycastId)) {
    query['AnycastId'] = request.anycastId;
  }
  if (!Util.isUnset(request.bindInstanceId)) {
    query['BindInstanceId'] = request.bindInstanceId;
  }
  if (!Util.isUnset(request.ip)) {
    query['Ip'] = request.ip;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAnycastEipAddress',
    version = '2020-03-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAnycastEipAddress(request: DescribeAnycastEipAddressRequest): DescribeAnycastEipAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAnycastEipAddressWithOptions(request, runtime);
}

model DescribeAnycastPopLocationsRequest {
  serviceLocation?: string(name='ServiceLocation', example='international'),
}

model DescribeAnycastPopLocationsResponseBody = {
  anycastPopLocationList?: [ 
    {
      regionId?: string(name='RegionId', example='us-west-1-pop'),
      regionName?: string(name='RegionName', example='us-west-1-pop'),
    }
  ](name='AnycastPopLocationList'),
  count?: string(name='Count', example='1'),
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model DescribeAnycastPopLocationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAnycastPopLocationsResponseBody(name='body'),
}

async function describeAnycastPopLocationsWithOptions(request: DescribeAnycastPopLocationsRequest, runtime: Util.RuntimeOptions): DescribeAnycastPopLocationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.serviceLocation)) {
    query['ServiceLocation'] = request.serviceLocation;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAnycastPopLocations',
    version = '2020-03-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAnycastPopLocations(request: DescribeAnycastPopLocationsRequest): DescribeAnycastPopLocationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAnycastPopLocationsWithOptions(request, runtime);
}

model DescribeAnycastServerRegionsRequest {
  serviceLocation?: string(name='ServiceLocation', example='international'),
}

model DescribeAnycastServerRegionsResponseBody = {
  anycastServerRegionList?: [ 
    {
      regionId?: string(name='RegionId', example='eu-west-1'),
      regionName?: string(name='RegionName', example='eu-west-1-gb33-a01'),
    }
  ](name='AnycastServerRegionList'),
  count?: string(name='Count', example='1'),
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model DescribeAnycastServerRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAnycastServerRegionsResponseBody(name='body'),
}

async function describeAnycastServerRegionsWithOptions(request: DescribeAnycastServerRegionsRequest, runtime: Util.RuntimeOptions): DescribeAnycastServerRegionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.serviceLocation)) {
    query['ServiceLocation'] = request.serviceLocation;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAnycastServerRegions',
    version = '2020-03-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAnycastServerRegions(request: DescribeAnycastServerRegionsRequest): DescribeAnycastServerRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAnycastServerRegionsWithOptions(request, runtime);
}

model ListAnycastEipAddressesRequest {
  anycastEipAddress?: string(name='AnycastEipAddress', example='139.95.XX.XX'),
  anycastId?: string(name='AnycastId', example='aeip-2zeerraiwb7ujsxdc****'),
  anycastIds?: [ string ](name='AnycastIds'),
  bindInstanceIds?: [ string ](name='BindInstanceIds', example='lb-2zebb08phyczzawe****'),
  businessStatus?: string(name='BusinessStatus', example='Normal'),
  instanceChargeType?: string(name='InstanceChargeType', example='PostPaid'),
  internetChargeType?: string(name='InternetChargeType', example='PayByTraffic'),
  maxResults?: int32(name='MaxResults', example='50'),
  name?: string(name='Name', example='doctest'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a****'),
  serviceLocation?: string(name='ServiceLocation', example='international'),
  status?: string(name='Status', example='Associated'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags'),
}

model ListAnycastEipAddressesResponseBody = {
  anycastList?: [ 
    {
      aliUid?: long(name='AliUid', example='123440159596****'),
      anycastEipBindInfoList?: [ 
        {
          bindInstanceId?: string(name='BindInstanceId', example='lb-2zebb08phyczzawe****'),
          bindInstanceRegionId?: string(name='BindInstanceRegionId', example='us-west-1'),
          bindInstanceType?: string(name='BindInstanceType', example='SlbInstance'),
          bindTime?: string(name='BindTime', example='2022-04-23T01:37:38Z'),
        }
      ](name='AnycastEipBindInfoList'),
      anycastId?: string(name='AnycastId', example='aeip-2zeerraiwb7ujsxdc****'),
      bandwidth?: int32(name='Bandwidth', example='200'),
      businessStatus?: string(name='BusinessStatus', example='Normal'),
      createTime?: string(name='CreateTime', example='2022-04-22T01:37:38Z'),
      description?: string(name='Description', example='docdesc'),
      instanceChargeType?: string(name='InstanceChargeType', example='PostPaid'),
      internetChargeType?: string(name='InternetChargeType', example='PayByTraffic'),
      ipAddress?: string(name='IpAddress', example='139.95.XX.XX'),
      name?: string(name='Name', example='docname'),
      serviceLocation?: string(name='ServiceLocation', example='international'),
      serviceManaged?: int32(name='ServiceManaged', example='0'),
      status?: string(name='Status', example='Associating'),
      tags?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tags'),
    }
  ](name='AnycastList'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model ListAnycastEipAddressesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAnycastEipAddressesResponseBody(name='body'),
}

async function listAnycastEipAddressesWithOptions(request: ListAnycastEipAddressesRequest, runtime: Util.RuntimeOptions): ListAnycastEipAddressesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.anycastEipAddress)) {
    query['AnycastEipAddress'] = request.anycastEipAddress;
  }
  if (!Util.isUnset(request.anycastId)) {
    query['AnycastId'] = request.anycastId;
  }
  if (!Util.isUnset(request.anycastIds)) {
    query['AnycastIds'] = request.anycastIds;
  }
  if (!Util.isUnset(request.bindInstanceIds)) {
    query['BindInstanceIds'] = request.bindInstanceIds;
  }
  if (!Util.isUnset(request.businessStatus)) {
    query['BusinessStatus'] = request.businessStatus;
  }
  if (!Util.isUnset(request.instanceChargeType)) {
    query['InstanceChargeType'] = request.instanceChargeType;
  }
  if (!Util.isUnset(request.internetChargeType)) {
    query['InternetChargeType'] = request.internetChargeType;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.serviceLocation)) {
    query['ServiceLocation'] = request.serviceLocation;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAnycastEipAddresses',
    version = '2020-03-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAnycastEipAddresses(request: ListAnycastEipAddressesRequest): ListAnycastEipAddressesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAnycastEipAddressesWithOptions(request, runtime);
}

model ModifyAnycastEipAddressAttributeRequest {
  anycastId?: string(name='AnycastId', example='aeip-bp1ix34fralt4ykf3****'),
  description?: string(name='Description', example='docdesc'),
  name?: string(name='Name', example='docname'),
}

model ModifyAnycastEipAddressAttributeResponseBody = {
  requestId?: string(name='RequestId', example='FBDB18D8-E91E-4978-8D6C-6E2E3EE10133'),
}

model ModifyAnycastEipAddressAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAnycastEipAddressAttributeResponseBody(name='body'),
}

async function modifyAnycastEipAddressAttributeWithOptions(request: ModifyAnycastEipAddressAttributeRequest, runtime: Util.RuntimeOptions): ModifyAnycastEipAddressAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.anycastId)) {
    query['AnycastId'] = request.anycastId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAnycastEipAddressAttribute',
    version = '2020-03-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyAnycastEipAddressAttribute(request: ModifyAnycastEipAddressAttributeRequest): ModifyAnycastEipAddressAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAnycastEipAddressAttributeWithOptions(request, runtime);
}

model ModifyAnycastEipAddressSpecRequest {
  anycastId?: string(name='AnycastId', example='aeip-bp1ix34fralt4ykf3****'),
  bandwidth?: string(name='Bandwidth', example='200'),
}

model ModifyAnycastEipAddressSpecResponseBody = {
  requestId?: string(name='RequestId', example='FBDB18D8-E91E-4978-8D6C-6E2E3EE10133'),
}

model ModifyAnycastEipAddressSpecResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAnycastEipAddressSpecResponseBody(name='body'),
}

async function modifyAnycastEipAddressSpecWithOptions(request: ModifyAnycastEipAddressSpecRequest, runtime: Util.RuntimeOptions): ModifyAnycastEipAddressSpecResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.anycastId)) {
    query['AnycastId'] = request.anycastId;
  }
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAnycastEipAddressSpec',
    version = '2020-03-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyAnycastEipAddressSpec(request: ModifyAnycastEipAddressSpecRequest): ModifyAnycastEipAddressSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAnycastEipAddressSpecWithOptions(request, runtime);
}

model ReleaseAnycastEipAddressRequest {
  anycastId?: string(name='AnycastId', example='aeip-bp1ix34fralt4ykf3****'),
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-001****'),
}

model ReleaseAnycastEipAddressResponseBody = {
  requestId?: string(name='RequestId', example='FBDB18D8-E91E-4978-8D6C-6E2E3EE10133'),
}

model ReleaseAnycastEipAddressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleaseAnycastEipAddressResponseBody(name='body'),
}

async function releaseAnycastEipAddressWithOptions(request: ReleaseAnycastEipAddressRequest, runtime: Util.RuntimeOptions): ReleaseAnycastEipAddressResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.anycastId)) {
    query['AnycastId'] = request.anycastId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReleaseAnycastEipAddress',
    version = '2020-03-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function releaseAnycastEipAddress(request: ReleaseAnycastEipAddressRequest): ReleaseAnycastEipAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseAnycastEipAddressWithOptions(request, runtime);
}

model UnassociateAnycastEipAddressRequest {
  anycastId?: string(name='AnycastId', example='aeip-2zeerraiwb7ujsxdc****'),
  bindInstanceId?: string(name='BindInstanceId', example='lb-2zebb08phyczzawe****'),
  bindInstanceRegionId?: string(name='BindInstanceRegionId', example='us-west-1'),
  bindInstanceType?: string(name='BindInstanceType', example='SlbInstance'),
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-001****'),
  dryRun?: string(name='DryRun', example='false'),
  privateIpAddress?: string(name='PrivateIpAddress', example='192.168.XX.XX'),
}

model UnassociateAnycastEipAddressResponseBody = {
  requestId?: string(name='RequestId', example='FBDB18D8-E91E-4978-8D6C-6E2E3EE10133'),
}

model UnassociateAnycastEipAddressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnassociateAnycastEipAddressResponseBody(name='body'),
}

async function unassociateAnycastEipAddressWithOptions(request: UnassociateAnycastEipAddressRequest, runtime: Util.RuntimeOptions): UnassociateAnycastEipAddressResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.anycastId)) {
    query['AnycastId'] = request.anycastId;
  }
  if (!Util.isUnset(request.bindInstanceId)) {
    query['BindInstanceId'] = request.bindInstanceId;
  }
  if (!Util.isUnset(request.bindInstanceRegionId)) {
    query['BindInstanceRegionId'] = request.bindInstanceRegionId;
  }
  if (!Util.isUnset(request.bindInstanceType)) {
    query['BindInstanceType'] = request.bindInstanceType;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.privateIpAddress)) {
    query['PrivateIpAddress'] = request.privateIpAddress;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnassociateAnycastEipAddress',
    version = '2020-03-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unassociateAnycastEipAddress(request: UnassociateAnycastEipAddressRequest): UnassociateAnycastEipAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return unassociateAnycastEipAddressWithOptions(request, runtime);
}

model UpdateAnycastEipAddressAssociationsRequest {
  anycastId?: string(name='AnycastId', example='aeip-bp1ix34fralt4ykf3****'),
  associationMode?: string(name='AssociationMode', example='Default'),
  bindInstanceId?: string(name='BindInstanceId', example='lb-d7oxbixhxv1uupnon****'),
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-001****'),
  dryRun?: boolean(name='DryRun', example='false'),
  popLocationAddList?: [ 
    {
      popLocation?: string(name='PopLocation', example='us-west-1-pop'),
    }
  ](name='PopLocationAddList'),
  popLocationDeleteList?: [ 
    {
      popLocation?: string(name='PopLocation', example='ap-south-1-pop'),
    }
  ](name='PopLocationDeleteList'),
}

model UpdateAnycastEipAddressAssociationsResponseBody = {
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model UpdateAnycastEipAddressAssociationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAnycastEipAddressAssociationsResponseBody(name='body'),
}

async function updateAnycastEipAddressAssociationsWithOptions(request: UpdateAnycastEipAddressAssociationsRequest, runtime: Util.RuntimeOptions): UpdateAnycastEipAddressAssociationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.anycastId)) {
    query['AnycastId'] = request.anycastId;
  }
  if (!Util.isUnset(request.associationMode)) {
    query['AssociationMode'] = request.associationMode;
  }
  if (!Util.isUnset(request.bindInstanceId)) {
    query['BindInstanceId'] = request.bindInstanceId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.popLocationAddList)) {
    query['PopLocationAddList'] = request.popLocationAddList;
  }
  if (!Util.isUnset(request.popLocationDeleteList)) {
    query['PopLocationDeleteList'] = request.popLocationDeleteList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAnycastEipAddressAssociations',
    version = '2020-03-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateAnycastEipAddressAssociations(request: UpdateAnycastEipAddressAssociationsRequest): UpdateAnycastEipAddressAssociationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAnycastEipAddressAssociationsWithOptions(request, runtime);
}

