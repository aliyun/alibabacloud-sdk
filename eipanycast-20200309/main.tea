/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  

  checkConfig(config);
  @endpoint = getEndpoint('eipanycast', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AllocateAnycastEipAddressRequest {
  bandwidth?: string(name='Bandwidth'),
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  instanceChargeType?: string(name='InstanceChargeType'),
  internetChargeType?: string(name='InternetChargeType'),
  name?: string(name='Name'),
  serviceLocation?: string(name='ServiceLocation'),
}

model AllocateAnycastEipAddressResponseBody = {
  anycastId?: string(name='AnycastId'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model AllocateAnycastEipAddressResponse = {
  headers: map[string]string(name='headers'),
  body: AllocateAnycastEipAddressResponseBody(name='body'),
}

async function allocateAnycastEipAddressWithOptions(request: AllocateAnycastEipAddressRequest, runtime: Util.RuntimeOptions): AllocateAnycastEipAddressResponse {
  Util.validateModel(request);
  var query = {};
  query["Bandwidth"] = request.bandwidth;
  query["ClientToken"] = request.clientToken;
  query["Description"] = request.description;
  query["InstanceChargeType"] = request.instanceChargeType;
  query["InternetChargeType"] = request.internetChargeType;
  query["Name"] = request.name;
  query["ServiceLocation"] = request.serviceLocation;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'AllocateAnycastEipAddress',
    version = '2020-03-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function allocateAnycastEipAddress(request: AllocateAnycastEipAddressRequest): AllocateAnycastEipAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocateAnycastEipAddressWithOptions(request, runtime);
}

model AssociateAnycastEipAddressRequest {
  anycastId?: string(name='AnycastId'),
  associationMode?: string(name='AssociationMode', description='关联模式，默认模式、普通模式Default/Normal'),
  bindInstanceId?: string(name='BindInstanceId'),
  bindInstanceRegionId?: string(name='BindInstanceRegionId'),
  bindInstanceType?: string(name='BindInstanceType'),
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  popLocations?: [ 
    {
      popLocation?: string(name='PopLocation', description='pop location'),
    }
  ](name='PopLocations', description='绑定时关联的pop location，如果是绑定的第一个实例，该参数会忽略，会下发到全部pop点'),
  privateIpAddress?: string(name='PrivateIpAddress', description='私网ip地址'),
}

model AssociateAnycastEipAddressResponseBody = {
  requestId?: string(name='RequestId'),
}

model AssociateAnycastEipAddressResponse = {
  headers: map[string]string(name='headers'),
  body: AssociateAnycastEipAddressResponseBody(name='body'),
}

async function associateAnycastEipAddressWithOptions(request: AssociateAnycastEipAddressRequest, runtime: Util.RuntimeOptions): AssociateAnycastEipAddressResponse {
  Util.validateModel(request);
  var query = {};
  query["AnycastId"] = request.anycastId;
  query["AssociationMode"] = request.associationMode;
  query["BindInstanceId"] = request.bindInstanceId;
  query["BindInstanceRegionId"] = request.bindInstanceRegionId;
  query["BindInstanceType"] = request.bindInstanceType;
  query["ClientToken"] = request.clientToken;
  query["DryRun"] = request.dryRun;
  query["PopLocations"] = request.popLocations;
  query["PrivateIpAddress"] = request.privateIpAddress;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'AssociateAnycastEipAddress',
    version = '2020-03-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function associateAnycastEipAddress(request: AssociateAnycastEipAddressRequest): AssociateAnycastEipAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateAnycastEipAddressWithOptions(request, runtime);
}

model DescribeAnycastEipAddressRequest {
  anycastId?: string(name='AnycastId'),
  bindInstanceId?: string(name='BindInstanceId'),
}

model DescribeAnycastEipAddressResponseBody = {
  aliUid?: long(name='AliUid'),
  anycastEipBindInfoList?: [ 
    {
      associationMode?: string(name='AssociationMode', description='绑定模式 Normal、Default'),
      bindInstanceId?: string(name='BindInstanceId'),
      bindInstanceRegionId?: string(name='BindInstanceRegionId'),
      bindInstanceType?: string(name='BindInstanceType'),
      bindTime?: string(name='BindTime'),
      popLocations?: [ 
        {
          popLocation?: string(name='PopLocation', description='PopLocation'),
        }
      ](name='PopLocations', description='关联的pop点'),
      privateIpAddress?: string(name='PrivateIpAddress', description='ip地址'),
      status?: string(name='Status'),
    }
  ](name='AnycastEipBindInfoList'),
  anycastId?: string(name='AnycastId'),
  bandwidth?: int32(name='Bandwidth'),
  bid?: string(name='Bid'),
  businessStatus?: string(name='BusinessStatus'),
  createTime?: string(name='CreateTime'),
  description?: string(name='Description'),
  instanceChargeType?: string(name='InstanceChargeType'),
  internetChargeType?: string(name='InternetChargeType'),
  ipAddress?: string(name='IpAddress'),
  name?: string(name='Name'),
  requestId?: string(name='RequestId'),
  serviceLocation?: string(name='ServiceLocation'),
  status?: string(name='Status'),
}

model DescribeAnycastEipAddressResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAnycastEipAddressResponseBody(name='body'),
}

async function describeAnycastEipAddressWithOptions(request: DescribeAnycastEipAddressRequest, runtime: Util.RuntimeOptions): DescribeAnycastEipAddressResponse {
  Util.validateModel(request);
  var query = {};
  query["AnycastId"] = request.anycastId;
  query["BindInstanceId"] = request.bindInstanceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAnycastEipAddress',
    version = '2020-03-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAnycastEipAddress(request: DescribeAnycastEipAddressRequest): DescribeAnycastEipAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAnycastEipAddressWithOptions(request, runtime);
}

model DescribeAnycastPopLocationsRequest {
  serviceLocation?: string(name='ServiceLocation'),
}

model DescribeAnycastPopLocationsResponseBody = {
  anycastPopLocationList?: [ 
    {
      regionId?: string(name='RegionId'),
      regionName?: string(name='RegionName'),
    }
  ](name='AnycastPopLocationList'),
  count?: string(name='Count'),
  requestId?: string(name='RequestId'),
}

model DescribeAnycastPopLocationsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAnycastPopLocationsResponseBody(name='body'),
}

async function describeAnycastPopLocationsWithOptions(request: DescribeAnycastPopLocationsRequest, runtime: Util.RuntimeOptions): DescribeAnycastPopLocationsResponse {
  Util.validateModel(request);
  var query = {};
  query["ServiceLocation"] = request.serviceLocation;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAnycastPopLocations',
    version = '2020-03-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAnycastPopLocations(request: DescribeAnycastPopLocationsRequest): DescribeAnycastPopLocationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAnycastPopLocationsWithOptions(request, runtime);
}

model DescribeAnycastServerRegionsRequest {
  serviceLocation?: string(name='ServiceLocation'),
}

model DescribeAnycastServerRegionsResponseBody = {
  anycastServerRegionList?: [ 
    {
      regionId?: string(name='RegionId'),
      regionName?: string(name='RegionName'),
    }
  ](name='AnycastServerRegionList'),
  count?: string(name='Count'),
  requestId?: string(name='RequestId'),
}

model DescribeAnycastServerRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAnycastServerRegionsResponseBody(name='body'),
}

async function describeAnycastServerRegionsWithOptions(request: DescribeAnycastServerRegionsRequest, runtime: Util.RuntimeOptions): DescribeAnycastServerRegionsResponse {
  Util.validateModel(request);
  var query = {};
  query["ServiceLocation"] = request.serviceLocation;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAnycastServerRegions',
    version = '2020-03-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAnycastServerRegions(request: DescribeAnycastServerRegionsRequest): DescribeAnycastServerRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAnycastServerRegionsWithOptions(request, runtime);
}

model ListAnycastEipAddressesRequest {
  anycastEipAddress?: string(name='AnycastEipAddress'),
  anycastId?: string(name='AnycastId'),
  bindInstanceIds?: [ string ](name='BindInstanceIds'),
  businessStatus?: string(name='BusinessStatus'),
  instanceChargeType?: string(name='InstanceChargeType'),
  internetChargeType?: string(name='InternetChargeType'),
  maxResults?: int32(name='MaxResults'),
  name?: string(name='Name'),
  nextToken?: string(name='NextToken'),
  serviceLocation?: string(name='ServiceLocation'),
  status?: string(name='Status'),
}

model ListAnycastEipAddressesResponseBody = {
  anycastList?: [ 
    {
      aliUid?: long(name='AliUid'),
      anycastEipBindInfoList?: [ 
        {
          bindInstanceId?: string(name='BindInstanceId'),
          bindInstanceRegionId?: string(name='BindInstanceRegionId'),
          bindInstanceType?: string(name='BindInstanceType'),
          bindTime?: string(name='BindTime'),
        }
      ](name='AnycastEipBindInfoList'),
      anycastId?: string(name='AnycastId'),
      bandwidth?: int32(name='Bandwidth'),
      bid?: string(name='Bid'),
      businessStatus?: string(name='BusinessStatus'),
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      instanceChargeType?: string(name='InstanceChargeType'),
      internetChargeType?: string(name='InternetChargeType'),
      ipAddress?: string(name='IpAddress'),
      name?: string(name='Name'),
      serviceLocation?: string(name='ServiceLocation'),
      status?: string(name='Status'),
    }
  ](name='AnycastList'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListAnycastEipAddressesResponse = {
  headers: map[string]string(name='headers'),
  body: ListAnycastEipAddressesResponseBody(name='body'),
}

async function listAnycastEipAddressesWithOptions(request: ListAnycastEipAddressesRequest, runtime: Util.RuntimeOptions): ListAnycastEipAddressesResponse {
  Util.validateModel(request);
  var query = {};
  query["AnycastEipAddress"] = request.anycastEipAddress;
  query["AnycastId"] = request.anycastId;
  query["BindInstanceIds"] = request.bindInstanceIds;
  query["BusinessStatus"] = request.businessStatus;
  query["InstanceChargeType"] = request.instanceChargeType;
  query["InternetChargeType"] = request.internetChargeType;
  query["MaxResults"] = request.maxResults;
  query["Name"] = request.name;
  query["NextToken"] = request.nextToken;
  query["ServiceLocation"] = request.serviceLocation;
  query["Status"] = request.status;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListAnycastEipAddresses',
    version = '2020-03-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAnycastEipAddresses(request: ListAnycastEipAddressesRequest): ListAnycastEipAddressesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAnycastEipAddressesWithOptions(request, runtime);
}

model ModifyAnycastEipAddressAttributeRequest {
  anycastId?: string(name='AnycastId'),
  description?: string(name='Description'),
  name?: string(name='Name'),
}

model ModifyAnycastEipAddressAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAnycastEipAddressAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAnycastEipAddressAttributeResponseBody(name='body'),
}

async function modifyAnycastEipAddressAttributeWithOptions(request: ModifyAnycastEipAddressAttributeRequest, runtime: Util.RuntimeOptions): ModifyAnycastEipAddressAttributeResponse {
  Util.validateModel(request);
  var query = {};
  query["AnycastId"] = request.anycastId;
  query["Description"] = request.description;
  query["Name"] = request.name;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAnycastEipAddressAttribute',
    version = '2020-03-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyAnycastEipAddressAttribute(request: ModifyAnycastEipAddressAttributeRequest): ModifyAnycastEipAddressAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAnycastEipAddressAttributeWithOptions(request, runtime);
}

model ModifyAnycastEipAddressSpecRequest {
  anycastId?: string(name='AnycastId'),
  bandwidth?: string(name='Bandwidth'),
}

model ModifyAnycastEipAddressSpecResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAnycastEipAddressSpecResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAnycastEipAddressSpecResponseBody(name='body'),
}

async function modifyAnycastEipAddressSpecWithOptions(request: ModifyAnycastEipAddressSpecRequest, runtime: Util.RuntimeOptions): ModifyAnycastEipAddressSpecResponse {
  Util.validateModel(request);
  var query = {};
  query["AnycastId"] = request.anycastId;
  query["Bandwidth"] = request.bandwidth;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAnycastEipAddressSpec',
    version = '2020-03-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyAnycastEipAddressSpec(request: ModifyAnycastEipAddressSpecRequest): ModifyAnycastEipAddressSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAnycastEipAddressSpecWithOptions(request, runtime);
}

model ReleaseAnycastEipAddressRequest {
  anycastId?: string(name='AnycastId'),
  clientToken?: string(name='ClientToken'),
}

model ReleaseAnycastEipAddressResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReleaseAnycastEipAddressResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseAnycastEipAddressResponseBody(name='body'),
}

async function releaseAnycastEipAddressWithOptions(request: ReleaseAnycastEipAddressRequest, runtime: Util.RuntimeOptions): ReleaseAnycastEipAddressResponse {
  Util.validateModel(request);
  var query = {};
  query["AnycastId"] = request.anycastId;
  query["ClientToken"] = request.clientToken;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ReleaseAnycastEipAddress',
    version = '2020-03-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function releaseAnycastEipAddress(request: ReleaseAnycastEipAddressRequest): ReleaseAnycastEipAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseAnycastEipAddressWithOptions(request, runtime);
}

model UnassociateAnycastEipAddressRequest {
  anycastId?: string(name='AnycastId'),
  bindInstanceId?: string(name='BindInstanceId'),
  bindInstanceRegionId?: string(name='BindInstanceRegionId'),
  bindInstanceType?: string(name='BindInstanceType'),
  clientToken?: string(name='ClientToken'),
  dryRun?: string(name='DryRun'),
  privateIpAddress?: string(name='PrivateIpAddress'),
}

model UnassociateAnycastEipAddressResponseBody = {
  requestId?: string(name='RequestId', description='私网IP地址'),
}

model UnassociateAnycastEipAddressResponse = {
  headers: map[string]string(name='headers'),
  body: UnassociateAnycastEipAddressResponseBody(name='body'),
}

async function unassociateAnycastEipAddressWithOptions(request: UnassociateAnycastEipAddressRequest, runtime: Util.RuntimeOptions): UnassociateAnycastEipAddressResponse {
  Util.validateModel(request);
  var query = {};
  query["AnycastId"] = request.anycastId;
  query["BindInstanceId"] = request.bindInstanceId;
  query["BindInstanceRegionId"] = request.bindInstanceRegionId;
  query["BindInstanceType"] = request.bindInstanceType;
  query["ClientToken"] = request.clientToken;
  query["DryRun"] = request.dryRun;
  query["PrivateIpAddress"] = request.privateIpAddress;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UnassociateAnycastEipAddress',
    version = '2020-03-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unassociateAnycastEipAddress(request: UnassociateAnycastEipAddressRequest): UnassociateAnycastEipAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return unassociateAnycastEipAddressWithOptions(request, runtime);
}

model UpdateAnycastEipAddressAssociationsRequest {
  anycastId?: string(name='AnycastId'),
  associationMode?: string(name='AssociationMode', description='关联模式，默认模式、普通模式Default/Normal'),
  bindInstanceId?: string(name='BindInstanceId'),
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  popLocationAddList?: [ 
    {
      popLocation?: string(name='PopLocation', description='pop location'),
    }
  ](name='PopLocationAddList', description='新增关联的pop location'),
  popLocationDeleteList?: [ 
    {
      popLocation?: string(name='PopLocation', description='pop location'),
    }
  ](name='PopLocationDeleteList', description='待删除的关联pop location'),
}

model UpdateAnycastEipAddressAssociationsResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateAnycastEipAddressAssociationsResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAnycastEipAddressAssociationsResponseBody(name='body'),
}

async function updateAnycastEipAddressAssociationsWithOptions(request: UpdateAnycastEipAddressAssociationsRequest, runtime: Util.RuntimeOptions): UpdateAnycastEipAddressAssociationsResponse {
  Util.validateModel(request);
  var query = {};
  query["AnycastId"] = request.anycastId;
  query["AssociationMode"] = request.associationMode;
  query["BindInstanceId"] = request.bindInstanceId;
  query["ClientToken"] = request.clientToken;
  query["DryRun"] = request.dryRun;
  query["PopLocationAddList"] = request.popLocationAddList;
  query["PopLocationDeleteList"] = request.popLocationDeleteList;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAnycastEipAddressAssociations',
    version = '2020-03-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateAnycastEipAddressAssociations(request: UpdateAnycastEipAddressAssociationsRequest): UpdateAnycastEipAddressAssociationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAnycastEipAddressAssociationsWithOptions(request, runtime);
}

