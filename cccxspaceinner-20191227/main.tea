/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('cccxspaceinner', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model GetTotalGroupCountRequest {
  buId?: long(name='BuId'),
}

model GetTotalGroupCountResponseBody = {
  message?: string(name='Message'),
  data?: int32(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetTotalGroupCountResponse = {
  headers: map[string]string(name='headers'),
  body: GetTotalGroupCountResponseBody(name='body'),
}

async function getTotalGroupCountWithOptions(request: GetTotalGroupCountRequest, runtime: Util.RuntimeOptions): GetTotalGroupCountResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetTotalGroupCount', '2019-12-27', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getTotalGroupCount(request: GetTotalGroupCountRequest): GetTotalGroupCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTotalGroupCountWithOptions(request, runtime);
}

model QueryTicketRequest {
  buId?: long(name='BuId'),
  ticketType?: int32(name='TicketType'),
  ticketStatus?: int32(name='TicketStatus'),
  memberId?: long(name='MemberId'),
  ticketId?: long(name='TicketId'),
  startDate?: long(name='StartDate'),
  endDate?: long(name='EndDate'),
  pageSize?: int32(name='PageSize'),
  pageNo?: int32(name='PageNo'),
}

model QueryTicketResponseBody = {
  message?: string(name='Message'),
  data?: {
    totalResults?: int32(name='TotalResults'),
    currentPage?: int32(name='CurrentPage'),
    list?: [ 
      {
        caseId?: long(name='CaseId'),
        gmtCreate?: long(name='GmtCreate'),
        srType?: string(name='SrType'),
        gmtModified?: long(name='GmtModified'),
        questionInfo?: string(name='QuestionInfo'),
        caseStatus?: string(name='CaseStatus'),
        extAttrs?: string(name='ExtAttrs'),
        id?: long(name='Id'),
      }
    ](name='List'),
    pageSize?: long(name='PageSize'),
  }(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryTicketResponse = {
  headers: map[string]string(name='headers'),
  body: QueryTicketResponseBody(name='body'),
}

async function queryTicketWithOptions(request: QueryTicketRequest, runtime: Util.RuntimeOptions): QueryTicketResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('QueryTicket', '2019-12-27', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function queryTicket(request: QueryTicketRequest): QueryTicketResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTicketWithOptions(request, runtime);
}

model UpdateTicketRequest {
  clientToken?: string(name='ClientToken'),
  tenantId?: long(name='TenantId'),
  ticketId?: long(name='TicketId'),
  operatorId?: long(name='OperatorId'),
  formData?: string(name='FormData'),
}

model UpdateTicketResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model UpdateTicketResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTicketResponseBody(name='body'),
}

async function updateTicketWithOptions(request: UpdateTicketRequest, runtime: Util.RuntimeOptions): UpdateTicketResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateTicket', '2019-12-27', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateTicket(request: UpdateTicketRequest): UpdateTicketResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTicketWithOptions(request, runtime);
}

model ListAgentBySkillGroupIdRequest {
  clientToken?: string(name='ClientToken'),
  tenantId?: long(name='TenantId'),
  skillGroupId?: long(name='SkillGroupId'),
}

model ListAgentBySkillGroupIdResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      status?: int32(name='Status'),
      displayName?: string(name='DisplayName'),
      agentId?: long(name='AgentId'),
      accountName?: string(name='AccountName'),
      tenantId?: long(name='TenantId'),
    }
  ](name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model ListAgentBySkillGroupIdResponse = {
  headers: map[string]string(name='headers'),
  body: ListAgentBySkillGroupIdResponseBody(name='body'),
}

async function listAgentBySkillGroupIdWithOptions(request: ListAgentBySkillGroupIdRequest, runtime: Util.RuntimeOptions): ListAgentBySkillGroupIdResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListAgentBySkillGroupId', '2019-12-27', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listAgentBySkillGroupId(request: ListAgentBySkillGroupIdRequest): ListAgentBySkillGroupIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAgentBySkillGroupIdWithOptions(request, runtime);
}

model QueryManagedAgentGroupRequest {
  agentId?: long(name='AgentId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
}

model QueryManagedAgentGroupResponseBody = {
  message?: string(name='Message'),
  data?: [ 
    {
      status?: int32(name='Status'),
      buId?: long(name='BuId'),
      showName?: string(name='ShowName'),
      groupId?: long(name='GroupId'),
      groupName?: string(name='GroupName'),
      departmentId?: long(name='DepartmentId'),
      isPublic?: boolean(name='IsPublic'),
    }
  ](name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryManagedAgentGroupResponse = {
  headers: map[string]string(name='headers'),
  body: QueryManagedAgentGroupResponseBody(name='body'),
}

async function queryManagedAgentGroupWithOptions(request: QueryManagedAgentGroupRequest, runtime: Util.RuntimeOptions): QueryManagedAgentGroupResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('QueryManagedAgentGroup', '2019-12-27', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function queryManagedAgentGroup(request: QueryManagedAgentGroupRequest): QueryManagedAgentGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryManagedAgentGroupWithOptions(request, runtime);
}

model GenerateTokenRequest {
  clientToken?: string(name='ClientToken'),
  agentId?: long(name='AgentId'),
  scene?: string(name='Scene'),
  appName?: string(name='AppName'),
  passportId?: string(name='PassportId'),
  passportName?: string(name='PassportName'),
  passportType?: int32(name='PassportType'),
}

model GenerateTokenResponseBody = {
  message?: string(name='Message'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GenerateTokenResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateTokenResponseBody(name='body'),
}

async function generateTokenWithOptions(request: GenerateTokenRequest, runtime: Util.RuntimeOptions): GenerateTokenResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GenerateToken', '2019-12-27', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function generateToken(request: GenerateTokenRequest): GenerateTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateTokenWithOptions(request, runtime);
}

model GetTicketRequest {
  ticketId?: long(name='TicketId'),
}

model GetTicketResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    formId?: long(name='FormId'),
    responsible?: long(name='Responsible'),
    gmtModified?: long(name='GmtModified'),
    dataId?: long(name='DataId'),
    questionInfo?: string(name='QuestionInfo'),
    buId?: long(name='BuId'),
    srType?: string(name='SrType'),
    feedback?: string(name='Feedback'),
    createMode?: string(name='CreateMode'),
    touchId?: long(name='TouchId'),
    formCode?: string(name='FormCode'),
    memberName?: string(name='MemberName'),
    bizId?: string(name='BizId'),
    refCaseId?: long(name='RefCaseId'),
    ownerName?: string(name='OwnerName'),
    fromInfo?: string(name='FromInfo'),
    memberType?: int32(name='MemberType'),
    contactId?: long(name='ContactId'),
    departmentId?: long(name='DepartmentId'),
    gmtCreate?: long(name='GmtCreate'),
    sopCateId?: long(name='SopCateId'),
    templateId?: long(name='TemplateId'),
    extAttrs?: string(name='ExtAttrs'),
    caseStatus?: int32(name='CaseStatus'),
    id?: string(name='Id'),
  }(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetTicketResponse = {
  headers: map[string]string(name='headers'),
  body: GetTicketResponseBody(name='body'),
}

async function getTicketWithOptions(request: GetTicketRequest, runtime: Util.RuntimeOptions): GetTicketResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetTicket', '2019-12-27', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getTicket(request: GetTicketRequest): GetTicketResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTicketWithOptions(request, runtime);
}

model CreateMemberRequest {
  buId?: long(name='BuId'),
  outerMemberId?: string(name='OuterMemberId'),
  outerMemberName?: string(name='OuterMemberName'),
  sourceId?: string(name='SourceId'),
}

model CreateMemberResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: long(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateMemberResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMemberResponseBody(name='body'),
}

async function createMemberWithOptions(request: CreateMemberRequest, runtime: Util.RuntimeOptions): CreateMemberResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateMember', '2019-12-27', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createMember(request: CreateMemberRequest): CreateMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMemberWithOptions(request, runtime);
}

model StartOnlineWorkRequest {
  agentId?: long(name='AgentId'),
  stationType?: string(name='StationType'),
  workType?: int32(name='WorkType'),
  userAgent?: string(name='UserAgent'),
}

model StartOnlineWorkResponseBody = {
  message?: string(name='Message'),
  data?: {
    initStatus?: {
      status?: boolean(name='Status'),
    }(name='InitStatus'),
  }(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model StartOnlineWorkResponse = {
  headers: map[string]string(name='headers'),
  body: StartOnlineWorkResponseBody(name='body'),
}

async function startOnlineWorkWithOptions(request: StartOnlineWorkRequest, runtime: Util.RuntimeOptions): StartOnlineWorkResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartOnlineWork', '2019-12-27', 'HTTPS', 'PUT', 'AK', 'json', req, runtime);
}

async function startOnlineWork(request: StartOnlineWorkRequest): StartOnlineWorkResponse {
  var runtime = new Util.RuntimeOptions{};
  return startOnlineWorkWithOptions(request, runtime);
}

model ClearAgentGroupsRequest {
  buId?: long(name='BuId'),
  agentId?: long(name='AgentId'),
}

model ClearAgentGroupsResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model ClearAgentGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ClearAgentGroupsResponseBody(name='body'),
}

async function clearAgentGroupsWithOptions(request: ClearAgentGroupsRequest, runtime: Util.RuntimeOptions): ClearAgentGroupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ClearAgentGroups', '2019-12-27', 'HTTPS', 'PUT', 'AK', 'json', req, runtime);
}

async function clearAgentGroups(request: ClearAgentGroupsRequest): ClearAgentGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return clearAgentGroupsWithOptions(request, runtime);
}

model ListGroupByIdRequest {
  groupIds?: string(name='GroupIds'),
}

model ListGroupByIdResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      status?: int32(name='Status'),
      buId?: long(name='BuId'),
      showName?: string(name='ShowName'),
      supportCase?: boolean(name='SupportCase'),
      description?: string(name='Description'),
      groupName?: string(name='GroupName'),
      groupId?: long(name='GroupId'),
      supportIm?: boolean(name='SupportIm'),
      supportPhone?: boolean(name='SupportPhone'),
    }
  ](name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model ListGroupByIdResponse = {
  headers: map[string]string(name='headers'),
  body: ListGroupByIdResponseBody(name='body'),
}

async function listGroupByIdWithOptions(request: ListGroupByIdRequest, runtime: Util.RuntimeOptions): ListGroupByIdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListGroupById', '2019-12-27', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listGroupById(request: ListGroupByIdRequest): ListGroupByIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return listGroupByIdWithOptions(request, runtime);
}

model UpdateOuterAgentRequest {
  buId?: long(name='BuId'),
  agentId?: long(name='AgentId'),
  showName?: string(name='ShowName'),
  maxServiceNum?: int32(name='MaxServiceNum'),
}

model UpdateOuterAgentResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model UpdateOuterAgentResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateOuterAgentResponseBody(name='body'),
}

async function updateOuterAgentWithOptions(request: UpdateOuterAgentRequest, runtime: Util.RuntimeOptions): UpdateOuterAgentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateOuterAgent', '2019-12-27', 'HTTPS', 'PUT', 'AK', 'json', req, runtime);
}

async function updateOuterAgent(request: UpdateOuterAgentRequest): UpdateOuterAgentResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOuterAgentWithOptions(request, runtime);
}

model KickOutAgentRequest {
  agentId?: long(name='AgentId'),
}

model KickOutAgentResponseBody = {
  message?: string(name='Message'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model KickOutAgentResponse = {
  headers: map[string]string(name='headers'),
  body: KickOutAgentResponseBody(name='body'),
}

async function kickOutAgentWithOptions(request: KickOutAgentRequest, runtime: Util.RuntimeOptions): KickOutAgentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('KickOutAgent', '2019-12-27', 'HTTPS', 'PUT', 'AK', 'json', req, runtime);
}

async function kickOutAgent(request: KickOutAgentRequest): KickOutAgentResponse {
  var runtime = new Util.RuntimeOptions{};
  return kickOutAgentWithOptions(request, runtime);
}

model InsertXspaceGroupRequest {
  groupName?: string(name='GroupName'),
  showName?: string(name='ShowName'),
  supportIm?: boolean(name='SupportIm'),
  supportPhone?: boolean(name='SupportPhone'),
  supportCase?: boolean(name='SupportCase'),
  isSwitchShow?: int32(name='IsSwitchShow'),
  description?: string(name='Description'),
  createAgentId?: long(name='CreateAgentId'),
}

model InsertXspaceGroupResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: long(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model InsertXspaceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: InsertXspaceGroupResponseBody(name='body'),
}

async function insertXspaceGroupWithOptions(request: InsertXspaceGroupRequest, runtime: Util.RuntimeOptions): InsertXspaceGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('InsertXspaceGroup', '2019-12-27', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function insertXspaceGroup(request: InsertXspaceGroupRequest): InsertXspaceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return insertXspaceGroupWithOptions(request, runtime);
}

model SendMessageRequest {
  sid?: string(name='Sid'),
  senderId?: string(name='SenderId'),
  senderType?: int32(name='SenderType'),
  senderName?: string(name='SenderName'),
  head?: string(name='Head'),
  msgType?: string(name='MsgType'),
  content?: string(name='Content'),
  msgKey?: string(name='MsgKey'),
}

model SendMessageResponseBody = {
  message?: string(name='Message'),
  data?: long(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model SendMessageResponse = {
  headers: map[string]string(name='headers'),
  body: SendMessageResponseBody(name='body'),
}

async function sendMessageWithOptions(request: SendMessageRequest, runtime: Util.RuntimeOptions): SendMessageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SendMessage', '2019-12-27', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function sendMessage(request: SendMessageRequest): SendMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendMessageWithOptions(request, runtime);
}

model CreateTicketRequest {
  clientToken?: string(name='ClientToken'),
  tenantId?: long(name='TenantId'),
  templateId?: long(name='TemplateId'),
  categoryId?: long(name='CategoryId'),
  creatorId?: long(name='CreatorId'),
  creatorType?: int32(name='CreatorType'),
  creatorName?: string(name='CreatorName'),
  memberId?: long(name='MemberId'),
  memberName?: string(name='MemberName'),
  fromInfo?: string(name='FromInfo'),
  priority?: int32(name='Priority'),
  carbonCopy?: string(name='CarbonCopy'),
  formData?: string(name='FormData'),
  agentId?: long(name='AgentId'),
}

model CreateTicketResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: long(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateTicketResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTicketResponseBody(name='body'),
}

async function createTicketWithOptions(request: CreateTicketRequest, runtime: Util.RuntimeOptions): CreateTicketResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateTicket', '2019-12-27', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createTicket(request: CreateTicketRequest): CreateTicketResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTicketWithOptions(request, runtime);
}

model CustomActionsOrdersRequest {
  buId?: long(name='BuId'),
  cmsId?: long(name='CmsId'),
  actorName?: string(name='ActorName'),
  caseId?: long(name='CaseId'),
  activityCode?: string(name='ActivityCode'),
  from?: string(name='From'),
  formData?: string(name='FormData'),
}

model CustomActionsOrdersResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CustomActionsOrdersResponse = {
  headers: map[string]string(name='headers'),
  body: CustomActionsOrdersResponseBody(name='body'),
}

async function customActionsOrdersWithOptions(request: CustomActionsOrdersRequest, runtime: Util.RuntimeOptions): CustomActionsOrdersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CustomActionsOrders', '2019-12-27', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function customActionsOrders(request: CustomActionsOrdersRequest): CustomActionsOrdersResponse {
  var runtime = new Util.RuntimeOptions{};
  return customActionsOrdersWithOptions(request, runtime);
}

model DeleteAgentRequest {
  agentId?: long(name='AgentId'),
}

model DeleteAgentResponseBody = {
  message?: string(name='Message'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteAgentResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAgentResponseBody(name='body'),
}

async function deleteAgentWithOptions(request: DeleteAgentRequest, runtime: Util.RuntimeOptions): DeleteAgentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteAgent', '2019-12-27', 'HTTPS', 'DELETE', 'AK', 'json', req, runtime);
}

async function deleteAgent(request: DeleteAgentRequest): DeleteAgentResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAgentWithOptions(request, runtime);
}

model QueryTicketActionRequest {
  ticketId?: string(name='TicketId'),
  actionCodeList?: string(name='ActionCodeList'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
}

model QueryTicketActionResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    totalResults?: int32(name='TotalResults'),
    currentPage?: int32(name='CurrentPage'),
    list?: [ 
      {
        bizTenantId?: long(name='BizTenantId'),
        actionType?: int32(name='ActionType'),
        memo?: string(name='Memo'),
        bizId?: long(name='BizId'),
        acceptorRole?: int32(name='AcceptorRole'),
        hideType?: int32(name='HideType'),
        buyerId?: long(name='BuyerId'),
        bizType?: int32(name='BizType'),
        buId?: int32(name='BuId'),
        actionCode?: int32(name='ActionCode'),
        bizIdStr?: string(name='BizIdStr'),
        operatorRole?: int32(name='OperatorRole'),
        acceptor?: long(name='Acceptor'),
        operator?: long(name='Operator'),
        taskId?: long(name='TaskId'),
      }
    ](name='List'),
    pageSize?: int32(name='PageSize'),
  }(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryTicketActionResponse = {
  headers: map[string]string(name='headers'),
  body: QueryTicketActionResponseBody(name='body'),
}

async function queryTicketActionWithOptions(request: QueryTicketActionRequest, runtime: Util.RuntimeOptions): QueryTicketActionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryTicketAction', '2019-12-27', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryTicketAction(request: QueryTicketActionRequest): QueryTicketActionResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTicketActionWithOptions(request, runtime);
}

model CreateCaseTicketRequest {
  title?: string(name='Title'),
  templateId?: long(name='TemplateId'),
  value?: string(name='Value'),
  memberId?: long(name='MemberId'),
  memberName?: string(name='MemberName'),
  from?: string(name='From'),
}

model CreateCaseTicketResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: long(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateCaseTicketResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCaseTicketResponseBody(name='body'),
}

async function createCaseTicketWithOptions(request: CreateCaseTicketRequest, runtime: Util.RuntimeOptions): CreateCaseTicketResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateCaseTicket', '2019-12-27', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createCaseTicket(request: CreateCaseTicketRequest): CreateCaseTicketResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCaseTicketWithOptions(request, runtime);
}

model GetAgentBusinessUnitByBuIdRequest {
  buId?: long(name='BuId'),
}

model GetAgentBusinessUnitByBuIdResponseBody = {
  message?: string(name='Message'),
  data?: {
    buId?: long(name='BuId'),
    buKey?: string(name='BuKey'),
    extra?: map[string]any(name='Extra'),
  }(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetAgentBusinessUnitByBuIdResponse = {
  headers: map[string]string(name='headers'),
  body: GetAgentBusinessUnitByBuIdResponseBody(name='body'),
}

async function getAgentBusinessUnitByBuIdWithOptions(request: GetAgentBusinessUnitByBuIdRequest, runtime: Util.RuntimeOptions): GetAgentBusinessUnitByBuIdResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetAgentBusinessUnitByBuId', '2019-12-27', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getAgentBusinessUnitByBuId(request: GetAgentBusinessUnitByBuIdRequest): GetAgentBusinessUnitByBuIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAgentBusinessUnitByBuIdWithOptions(request, runtime);
}

model GetPageGroupsByChannelTypeRequest {
  buId?: long(name='BuId'),
  channelType?: int32(name='ChannelType'),
  afterSortKey?: long(name='AfterSortKey'),
  pageSize?: int32(name='PageSize'),
}

model GetPageGroupsByChannelTypeResponseBody = {
  message?: string(name='Message'),
  data?: {
    lastSortKey?: long(name='LastSortKey'),
    list?: [ 
      {
        status?: int32(name='Status'),
        buId?: long(name='BuId'),
        showName?: string(name='ShowName'),
        description?: string(name='Description'),
        groupName?: string(name='GroupName'),
        groupId?: long(name='GroupId'),
        channelType?: int32(name='ChannelType'),
        departmentId?: long(name='DepartmentId'),
        isPublic?: boolean(name='IsPublic'),
      }
    ](name='List'),
    pageSize?: int32(name='PageSize'),
    hasNextPage?: boolean(name='HasNextPage'),
  }(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetPageGroupsByChannelTypeResponse = {
  headers: map[string]string(name='headers'),
  body: GetPageGroupsByChannelTypeResponseBody(name='body'),
}

async function getPageGroupsByChannelTypeWithOptions(request: GetPageGroupsByChannelTypeRequest, runtime: Util.RuntimeOptions): GetPageGroupsByChannelTypeResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetPageGroupsByChannelType', '2019-12-27', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getPageGroupsByChannelType(request: GetPageGroupsByChannelTypeRequest): GetPageGroupsByChannelTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPageGroupsByChannelTypeWithOptions(request, runtime);
}

model TestUpdateAgentGroupRequest {
  agentId?: long(name='AgentId'),
  createAgentId?: long(name='CreateAgentId'),
}

model TestUpdateAgentGroupResponseBody = {
  message?: string(name='Message'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model TestUpdateAgentGroupResponse = {
  headers: map[string]string(name='headers'),
  body: TestUpdateAgentGroupResponseBody(name='body'),
}

async function testUpdateAgentGroupWithOptions(request: TestUpdateAgentGroupRequest, runtime: Util.RuntimeOptions): TestUpdateAgentGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TestUpdateAgentGroup', '2019-12-27', 'HTTPS', 'PUT', 'AK', 'json', req, runtime);
}

async function testUpdateAgentGroup(request: TestUpdateAgentGroupRequest): TestUpdateAgentGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return testUpdateAgentGroupWithOptions(request, runtime);
}

model GetAgentBusinessUnitByOuterInfoRequest {
  outerType?: string(name='OuterType'),
  outerBuId?: string(name='OuterBuId'),
}

model GetAgentBusinessUnitByOuterInfoResponseBody = {
  message?: string(name='Message'),
  data?: {
    buName?: string(name='buName'),
    buId?: long(name='buId'),
    buKey?: string(name='buKey'),
  }(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetAgentBusinessUnitByOuterInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetAgentBusinessUnitByOuterInfoResponseBody(name='body'),
}

async function getAgentBusinessUnitByOuterInfoWithOptions(request: GetAgentBusinessUnitByOuterInfoRequest, runtime: Util.RuntimeOptions): GetAgentBusinessUnitByOuterInfoResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetAgentBusinessUnitByOuterInfo', '2019-12-27', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getAgentBusinessUnitByOuterInfo(request: GetAgentBusinessUnitByOuterInfoRequest): GetAgentBusinessUnitByOuterInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAgentBusinessUnitByOuterInfoWithOptions(request, runtime);
}

model UpdateAgentGroupRequest {
  agentId?: long(name='AgentId'),
  groupIds?: string(name='GroupIds'),
  createAgentId?: long(name='CreateAgentId'),
}

model UpdateAgentGroupResponseBody = {
  message?: string(name='Message'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model UpdateAgentGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAgentGroupResponseBody(name='body'),
}

async function updateAgentGroupWithOptions(request: UpdateAgentGroupRequest, runtime: Util.RuntimeOptions): UpdateAgentGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateAgentGroup', '2019-12-27', 'HTTPS', 'PUT', 'AK', 'json', req, runtime);
}

async function updateAgentGroup(request: UpdateAgentGroupRequest): UpdateAgentGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAgentGroupWithOptions(request, runtime);
}

model CreateOuterAdminAgentRequest {
  outerType?: string(name='OuterType'),
  outerBuId?: string(name='OuterBuId'),
  outerAccountId?: string(name='OuterAccountId'),
  outerAccountName?: string(name='OuterAccountName'),
  showName?: string(name='ShowName'),
}

model CreateOuterAdminAgentResponseBody = {
  message?: string(name='Message'),
  data?: long(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateOuterAdminAgentResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOuterAdminAgentResponseBody(name='body'),
}

async function createOuterAdminAgentWithOptions(request: CreateOuterAdminAgentRequest, runtime: Util.RuntimeOptions): CreateOuterAdminAgentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateOuterAdminAgent', '2019-12-27', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createOuterAdminAgent(request: CreateOuterAdminAgentRequest): CreateOuterAdminAgentResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOuterAdminAgentWithOptions(request, runtime);
}

model GetAgentByAgentIdRequest {
  agentId?: long(name='AgentId'),
}

model GetAgentByAgentIdResponseBody = {
  message?: string(name='Message'),
  data?: {
    status?: int32(name='Status'),
    buId?: long(name='BuId'),
    showName?: string(name='ShowName'),
    agentId?: long(name='AgentId'),
    departmentId?: long(name='DepartmentId'),
    agentName?: string(name='AgentName'),
    agentType?: int32(name='AgentType'),
  }(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetAgentByAgentIdResponse = {
  headers: map[string]string(name='headers'),
  body: GetAgentByAgentIdResponseBody(name='body'),
}

async function getAgentByAgentIdWithOptions(request: GetAgentByAgentIdRequest, runtime: Util.RuntimeOptions): GetAgentByAgentIdResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetAgentByAgentId', '2019-12-27', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getAgentByAgentId(request: GetAgentByAgentIdRequest): GetAgentByAgentIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAgentByAgentIdWithOptions(request, runtime);
}

model GetPageGroupsByBuIdRequest {
  buId?: long(name='BuId'),
  afterSortKey?: long(name='AfterSortKey'),
  pageSize?: int32(name='PageSize'),
}

model GetPageGroupsByBuIdResponseBody = {
  message?: string(name='Message'),
  data?: {
    lastSortKey?: long(name='LastSortKey'),
    list?: [ 
      {
        status?: int32(name='Status'),
        buId?: long(name='BuId'),
        showName?: string(name='ShowName'),
        description?: string(name='Description'),
        groupName?: string(name='GroupName'),
        groupId?: long(name='GroupId'),
        channelType?: int32(name='ChannelType'),
        departmentId?: long(name='DepartmentId'),
        isPublic?: boolean(name='IsPublic'),
      }
    ](name='List'),
    pageSize?: int32(name='PageSize'),
    hasNextPage?: boolean(name='HasNextPage'),
  }(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetPageGroupsByBuIdResponse = {
  headers: map[string]string(name='headers'),
  body: GetPageGroupsByBuIdResponseBody(name='body'),
}

async function getPageGroupsByBuIdWithOptions(request: GetPageGroupsByBuIdRequest, runtime: Util.RuntimeOptions): GetPageGroupsByBuIdResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetPageGroupsByBuId', '2019-12-27', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getPageGroupsByBuId(request: GetPageGroupsByBuIdRequest): GetPageGroupsByBuIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPageGroupsByBuIdWithOptions(request, runtime);
}

model CreateTicketTypeRequest {
  buId?: long(name='BuId'),
  agentId?: long(name='AgentId'),
  templateId?: long(name='TemplateId'),
  name?: string(name='Name'),
  description?: string(name='Description'),
}

model CreateTicketTypeResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateTicketTypeResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTicketTypeResponseBody(name='body'),
}

async function createTicketTypeWithOptions(request: CreateTicketTypeRequest, runtime: Util.RuntimeOptions): CreateTicketTypeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateTicketType', '2019-12-27', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createTicketType(request: CreateTicketTypeRequest): CreateTicketTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTicketTypeWithOptions(request, runtime);
}

model ChangeAgentStatusRequest {
  agentId?: long(name='AgentId'),
  method?: string(name='Method'),
}

model ChangeAgentStatusResponseBody = {
  message?: string(name='Message'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model ChangeAgentStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ChangeAgentStatusResponseBody(name='body'),
}

async function changeAgentStatusWithOptions(request: ChangeAgentStatusRequest, runtime: Util.RuntimeOptions): ChangeAgentStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ChangeAgentStatus', '2019-12-27', 'HTTPS', 'PUT', 'AK', 'json', req, runtime);
}

async function changeAgentStatus(request: ChangeAgentStatusRequest): ChangeAgentStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeAgentStatusWithOptions(request, runtime);
}

model GrantAdminRoleRequest {
  buId?: long(name='BuId'),
  agentId?: long(name='AgentId'),
  adminAgentId?: long(name='AdminAgentId'),
}

model GrantAdminRoleResponseBody = {
  message?: string(name='Message'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GrantAdminRoleResponse = {
  headers: map[string]string(name='headers'),
  body: GrantAdminRoleResponseBody(name='body'),
}

async function grantAdminRoleWithOptions(request: GrantAdminRoleRequest, runtime: Util.RuntimeOptions): GrantAdminRoleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GrantAdminRole', '2019-12-27', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function grantAdminRole(request: GrantAdminRoleRequest): GrantAdminRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return grantAdminRoleWithOptions(request, runtime);
}

model StartEvaluationRateRequest {
  memberId?: long(name='MemberId'),
  ticketId?: long(name='TicketId'),
  sceneId?: long(name='SceneId'),
}

model StartEvaluationRateResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    evaluationInfo?: {
      status?: string(name='Status'),
      purpose?: string(name='Purpose'),
      type?: string(name='Type'),
      senceId?: long(name='SenceId'),
      isEmpty?: boolean(name='IsEmpty'),
      priority?: int32(name='Priority'),
      isAvailable?: boolean(name='IsAvailable'),
      creator?: long(name='Creator'),
      ruleId?: long(name='RuleId'),
      lastModifier?: long(name='LastModifier'),
      extMap?: map[string]any(name='ExtMap'),
      isSimpleEvaluation?: boolean(name='IsSimpleEvaluation'),
      description?: string(name='Description'),
      title?: string(name='Title'),
      extAttrs?: string(name='ExtAttrs'),
      id?: long(name='Id'),
      languageId?: int32(name='LanguageId'),
    }(name='EvaluationInfo'),
    questions?: map[string]any(name='Questions'),
  }(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model StartEvaluationRateResponse = {
  headers: map[string]string(name='headers'),
  body: StartEvaluationRateResponseBody(name='body'),
}

async function startEvaluationRateWithOptions(request: StartEvaluationRateRequest, runtime: Util.RuntimeOptions): StartEvaluationRateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartEvaluationRate', '2019-12-27', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startEvaluationRate(request: StartEvaluationRateRequest): StartEvaluationRateResponse {
  var runtime = new Util.RuntimeOptions{};
  return startEvaluationRateWithOptions(request, runtime);
}

model SendChannelEventRequest {
  messageId?: string(name='MessageId'),
  messageBody?: string(name='MessageBody'),
}

model SendChannelEventResponseBody = {
  message?: string(name='Message'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model SendChannelEventResponse = {
  headers: map[string]string(name='headers'),
  body: SendChannelEventResponseBody(name='body'),
}

async function sendChannelEventWithOptions(request: SendChannelEventRequest, runtime: Util.RuntimeOptions): SendChannelEventResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SendChannelEvent', '2019-12-27', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function sendChannelEvent(request: SendChannelEventRequest): SendChannelEventResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendChannelEventWithOptions(request, runtime);
}

model UpdateChatDispatchRuleRequest {
  ruleName?: string(name='RuleName'),
  timeout?: int32(name='Timeout'),
  heartTimeout?: int32(name='HeartTimeout'),
  offlineNotice?: string(name='OfflineNotice'),
  noAgentNotice?: string(name='NoAgentNotice'),
  level?: int32(name='Level'),
  skillGroupList?: string(name='SkillGroupList'),
  enableWorkTime?: string(name='EnableWorkTime'),
  workTime?: string(name='WorkTime'),
  memberEnqueueNotice?: string(name='MemberEnqueueNotice'),
  memberDispatchNotice?: string(name='MemberDispatchNotice'),
  enableMemberDispatchNotice?: boolean(name='EnableMemberDispatchNotice'),
  memberSessionRemoveNotice?: string(name='MemberSessionRemoveNotice'),
  leaveNoticeMessage?: string(name='LeaveNoticeMessage'),
  memberLongSessionBeginTime?: string(name='MemberLongSessionBeginTime'),
  memberQueueHeartTimeout?: int32(name='MemberQueueHeartTimeout'),
  agentCloseSessionNotice?: string(name='AgentCloseSessionNotice'),
  memberCloseSessionNotice?: string(name='MemberCloseSessionNotice'),
  agentSwitchQueueNotice?: string(name='AgentSwitchQueueNotice'),
  agentOfflineSwitchQueueNotice?: string(name='AgentOfflineSwitchQueueNotice'),
  operatorId?: long(name='OperatorId'),
}

model UpdateChatDispatchRuleResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model UpdateChatDispatchRuleResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateChatDispatchRuleResponseBody(name='body'),
}

async function updateChatDispatchRuleWithOptions(request: UpdateChatDispatchRuleRequest, runtime: Util.RuntimeOptions): UpdateChatDispatchRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateChatDispatchRule', '2019-12-27', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateChatDispatchRule(request: UpdateChatDispatchRuleRequest): UpdateChatDispatchRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateChatDispatchRuleWithOptions(request, runtime);
}

model CreateEvaluationRequest {
  memberId?: long(name='MemberId'),
  ticketId?: long(name='TicketId'),
  bizid?: string(name='Bizid'),
  from?: string(name='From'),
  portalName?: string(name='PortalName'),
  operation?: string(name='Operation'),
}

model CreateEvaluationResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateEvaluationResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEvaluationResponseBody(name='body'),
}

async function createEvaluationWithOptions(request: CreateEvaluationRequest, runtime: Util.RuntimeOptions): CreateEvaluationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateEvaluation', '2019-12-27', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createEvaluation(request: CreateEvaluationRequest): CreateEvaluationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEvaluationWithOptions(request, runtime);
}

model UpdateTicketTemplateRequest {
  buId?: long(name='BuId'),
  agentId?: long(name='AgentId'),
  templateId?: long(name='TemplateId'),
  templateName?: string(name='TemplateName'),
  categoryId?: string(name='CategoryId'),
  schema?: string(name='Schema'),
  caseType?: int32(name='CaseType'),
  status?: int32(name='Status'),
}

model UpdateTicketTemplateResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model UpdateTicketTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTicketTemplateResponseBody(name='body'),
}

async function updateTicketTemplateWithOptions(request: UpdateTicketTemplateRequest, runtime: Util.RuntimeOptions): UpdateTicketTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateTicketTemplate', '2019-12-27', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateTicketTemplate(request: UpdateTicketTemplateRequest): UpdateTicketTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTicketTemplateWithOptions(request, runtime);
}

model CloseTicketRequest {
  clientToken?: string(name='ClientToken'),
  tenantId?: long(name='TenantId'),
  ticketId?: long(name='TicketId'),
  actionItems?: string(name='ActionItems'),
  operatorId?: long(name='OperatorId'),
}

model CloseTicketResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CloseTicketResponse = {
  headers: map[string]string(name='headers'),
  body: CloseTicketResponseBody(name='body'),
}

async function closeTicketWithOptions(request: CloseTicketRequest, runtime: Util.RuntimeOptions): CloseTicketResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CloseTicket', '2019-12-27', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function closeTicket(request: CloseTicketRequest): CloseTicketResponse {
  var runtime = new Util.RuntimeOptions{};
  return closeTicketWithOptions(request, runtime);
}

model QueryAutoTaskInfoRequest {
  taskId?: long(name='TaskId'),
  agentId?: long(name='AgentId'),
}

model QueryAutoTaskInfoResponseBody = {
  message?: string(name='Message'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryAutoTaskInfoResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAutoTaskInfoResponseBody(name='body'),
}

async function queryAutoTaskInfoWithOptions(request: QueryAutoTaskInfoRequest, runtime: Util.RuntimeOptions): QueryAutoTaskInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryAutoTaskInfo', '2019-12-27', 'HTTPS', 'PUT', 'AK', 'json', req, runtime);
}

async function queryAutoTaskInfo(request: QueryAutoTaskInfoRequest): QueryAutoTaskInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAutoTaskInfoWithOptions(request, runtime);
}

model CreateTicketTemplateRequest {
  buId?: long(name='BuId'),
  agentId?: long(name='AgentId'),
  categoryId?: string(name='CategoryId'),
  ticketType?: int32(name='TicketType'),
  templateName?: string(name='TemplateName'),
  operatorType?: string(name='OperatorType'),
  schema?: string(name='Schema'),
}

model CreateTicketTemplateResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: long(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateTicketTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTicketTemplateResponseBody(name='body'),
}

async function createTicketTemplateWithOptions(request: CreateTicketTemplateRequest, runtime: Util.RuntimeOptions): CreateTicketTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateTicketTemplate', '2019-12-27', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createTicketTemplate(request: CreateTicketTemplateRequest): CreateTicketTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTicketTemplateWithOptions(request, runtime);
}

model RevokeRoleRequest {
  buId?: long(name='BuId'),
  agentId?: long(name='AgentId'),
  roleId?: long(name='RoleId'),
  adminAgentId?: long(name='AdminAgentId'),
}

model RevokeRoleResponseBody = {
  message?: string(name='Message'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model RevokeRoleResponse = {
  headers: map[string]string(name='headers'),
  body: RevokeRoleResponseBody(name='body'),
}

async function revokeRoleWithOptions(request: RevokeRoleRequest, runtime: Util.RuntimeOptions): RevokeRoleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RevokeRole', '2019-12-27', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function revokeRole(request: RevokeRoleRequest): RevokeRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return revokeRoleWithOptions(request, runtime);
}

model QueryServicerByPageRequest {
  keyword?: string(name='Keyword', description='关键字'),
  userStatusList?: [ int32 ](name='UserStatusList', description='状态列表'),
  realName?: string(name='RealName', description='真实名字'),
  groupId?: long(name='GroupId', description='技能组id'),
  pageSize?: long(name='PageSize', description='页面大小'),
  pageNo?: long(name='PageNo', description='页码'),
  buId?: long(name='BuId', description='租户id'),
  adminId?: long(name='AdminId', description='查询人id'),
  servicerIds?: [ long ](name='ServicerIds', description='客服id列表'),
}

model QueryServicerByPageShrinkRequest {
  keyword?: string(name='Keyword', description='关键字'),
  userStatusListShrink?: string(name='UserStatusList', description='状态列表'),
  realName?: string(name='RealName', description='真实名字'),
  groupId?: long(name='GroupId', description='技能组id'),
  pageSize?: long(name='PageSize', description='页面大小'),
  pageNo?: long(name='PageNo', description='页码'),
  buId?: long(name='BuId', description='租户id'),
  adminId?: long(name='AdminId', description='查询人id'),
  servicerIdsShrink?: string(name='ServicerIds', description='客服id列表'),
}

model QueryServicerByPageResponseBody = {
  message?: string(name='Message', description='message'),
  requestId?: string(name='RequestId', description='requestId'),
  httpStatusCode?: int32(name='HttpStatusCode', description='httpStatusCode'),
  data?: {
    total?: int32(name='Total', description='数据总量'),
    count?: int32(name='Count', description='页面大小'),
    pageNum?: int32(name='PageNum', description='总页数'),
    results?: [ 
      {
        servicerId?: long(name='ServicerId', description='servicerId'),
        servicerType?: int32(name='ServicerType', description='servicerType'),
        userStatus?: int32(name='UserStatus', description='userStatus'),
        userType?: int32(name='UserType', description='userType'),
        departmentId?: long(name='DepartmentId', description='部门id'),
        buId?: long(name='BuId', description='租户id'),
        realName?: string(name='RealName', description='真实姓名'),
        showName?: string(name='ShowName', description='对外展示名'),
        groups?: [ 
          {
            groupId?: long(name='GroupId', description='groupId'),
            skillType?: int32(name='SkillType', description='skillType'),
            departmentId?: long(name='DepartmentId', description='departmentId'),
            description?: string(name='Description', description='description'),
            showName?: string(name='ShowName', description='showName'),
            groupName?: string(name='GroupName', description='groupName'),
            status?: int32(name='Status', description='status'),
            supportCase?: boolean(name='SupportCase', description='是否支持工单'),
            supportPhone?: boolean(name='SupportPhone', description='是否支持热线'),
            supportIm?: boolean(name='SupportIm', description='是否支持在线'),
          }
        ](name='Groups', description='技能组信息'),
      }
    ](name='Results', description='数据'),
    page?: long(name='Page', description='页码'),
  }(name='Data', description='data'),
  code?: string(name='Code', description='code'),
  success?: boolean(name='Success', description='success'),
}

model QueryServicerByPageResponse = {
  headers: map[string]string(name='headers'),
  body: QueryServicerByPageResponseBody(name='body'),
}

async function queryServicerByPageWithOptions(tmpReq: QueryServicerByPageRequest, runtime: Util.RuntimeOptions): QueryServicerByPageResponse {
  Util.validateModel(tmpReq);
  var request = new QueryServicerByPageShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.userStatusList)) {
    request.userStatusListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userStatusList, 'UserStatusList', 'json');
  }
  if (!Util.isUnset(tmpReq.servicerIds)) {
    request.servicerIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.servicerIds, 'ServicerIds', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryServicerByPage', '2019-12-27', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryServicerByPage(request: QueryServicerByPageRequest): QueryServicerByPageResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryServicerByPageWithOptions(request, runtime);
}

model CreateOrUpdateRoleRequest {
  roleId?: long(name='RoleId'),
  roleName?: string(name='RoleName'),
  permissions?: string(name='Permissions'),
  securityLevel?: string(name='SecurityLevel'),
  status?: string(name='Status'),
  operatorId?: long(name='OperatorId'),
}

model CreateOrUpdateRoleResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateOrUpdateRoleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOrUpdateRoleResponseBody(name='body'),
}

async function createOrUpdateRoleWithOptions(request: CreateOrUpdateRoleRequest, runtime: Util.RuntimeOptions): CreateOrUpdateRoleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateOrUpdateRole', '2019-12-27', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createOrUpdateRole(request: CreateOrUpdateRoleRequest): CreateOrUpdateRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOrUpdateRoleWithOptions(request, runtime);
}

model GetTicketTemplateSchemaRequest {
  templateId?: string(name='TemplateId'),
}

model GetTicketTemplateSchemaResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetTicketTemplateSchemaResponse = {
  headers: map[string]string(name='headers'),
  body: GetTicketTemplateSchemaResponseBody(name='body'),
}

async function getTicketTemplateSchemaWithOptions(request: GetTicketTemplateSchemaRequest, runtime: Util.RuntimeOptions): GetTicketTemplateSchemaResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetTicketTemplateSchema', '2019-12-27', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getTicketTemplateSchema(request: GetTicketTemplateSchemaRequest): GetTicketTemplateSchemaResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTicketTemplateSchemaWithOptions(request, runtime);
}

model GetRolesRequest {
  agentId?: string(name='AgentId'),
}

model GetRolesResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      buId?: long(name='BuId'),
      roleCode?: string(name='RoleCode'),
      roleName?: string(name='RoleName'),
      roleId?: long(name='RoleId'),
    }
  ](name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetRolesResponse = {
  headers: map[string]string(name='headers'),
  body: GetRolesResponseBody(name='body'),
}

async function getRolesWithOptions(request: GetRolesRequest, runtime: Util.RuntimeOptions): GetRolesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetRoles', '2019-12-27', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getRoles(request: GetRolesRequest): GetRolesResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRolesWithOptions(request, runtime);
}

model DeleteXspaceGroupRequest {
  groupId?: long(name='GroupId'),
}

model DeleteXspaceGroupResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: long(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteXspaceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteXspaceGroupResponseBody(name='body'),
}

async function deleteXspaceGroupWithOptions(request: DeleteXspaceGroupRequest, runtime: Util.RuntimeOptions): DeleteXspaceGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteXspaceGroup', '2019-12-27', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteXspaceGroup(request: DeleteXspaceGroupRequest): DeleteXspaceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteXspaceGroupWithOptions(request, runtime);
}

model FindActivityRequest {
  buId?: long(name='BuId'),
  caseType?: int32(name='CaseType'),
  activityCode?: string(name='ActivityCode'),
}

model FindActivityResponseBody = {
  message?: string(name='Message'),
  data?: map[string]any(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model FindActivityResponse = {
  headers: map[string]string(name='headers'),
  body: FindActivityResponseBody(name='body'),
}

async function findActivityWithOptions(request: FindActivityRequest, runtime: Util.RuntimeOptions): FindActivityResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('FindActivity', '2019-12-27', 'HTTPS', 'PUT', 'AK', 'json', req, runtime);
}

async function findActivity(request: FindActivityRequest): FindActivityResponse {
  var runtime = new Util.RuntimeOptions{};
  return findActivityWithOptions(request, runtime);
}

model CreateOuterAgentRequest {
  outerType?: string(name='OuterType'),
  outerBuId?: string(name='OuterBuId'),
  outerAccountId?: string(name='OuterAccountId'),
  outerAccountName?: string(name='OuterAccountName'),
  showName?: string(name='ShowName'),
  maxServiceNum?: int32(name='MaxServiceNum'),
}

model CreateOuterAgentResponseBody = {
  message?: string(name='Message'),
  data?: long(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateOuterAgentResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOuterAgentResponseBody(name='body'),
}

async function createOuterAgentWithOptions(request: CreateOuterAgentRequest, runtime: Util.RuntimeOptions): CreateOuterAgentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateOuterAgent', '2019-12-27', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createOuterAgent(request: CreateOuterAgentRequest): CreateOuterAgentResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOuterAgentWithOptions(request, runtime);
}

model ChangeRuleGroupValidStatusRequest {
  ruleGroupId?: long(name='RuleGroupId'),
  status?: boolean(name='Status'),
  servicerId?: long(name='ServicerId'),
}

model ChangeRuleGroupValidStatusResponseBody = {
  message?: string(name='Message'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model ChangeRuleGroupValidStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ChangeRuleGroupValidStatusResponseBody(name='body'),
}

async function changeRuleGroupValidStatusWithOptions(request: ChangeRuleGroupValidStatusRequest, runtime: Util.RuntimeOptions): ChangeRuleGroupValidStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ChangeRuleGroupValidStatus', '2019-12-27', 'HTTPS', 'PUT', 'AK', 'json', req, runtime);
}

async function changeRuleGroupValidStatus(request: ChangeRuleGroupValidStatusRequest): ChangeRuleGroupValidStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeRuleGroupValidStatusWithOptions(request, runtime);
}

model GrantRolesRequest {
  agentId?: string(name='AgentId'),
  roleIds?: string(name='RoleIds'),
  adminId?: long(name='AdminId'),
  adminName?: string(name='AdminName'),
}

model GrantRolesResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: int32(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GrantRolesResponse = {
  headers: map[string]string(name='headers'),
  body: GrantRolesResponseBody(name='body'),
}

async function grantRolesWithOptions(request: GrantRolesRequest, runtime: Util.RuntimeOptions): GrantRolesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GrantRoles', '2019-12-27', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function grantRoles(request: GrantRolesRequest): GrantRolesResponse {
  var runtime = new Util.RuntimeOptions{};
  return grantRolesWithOptions(request, runtime);
}

model EchoRequest {
  data?: string(name='Data'),
}

model EchoResponseBody = {
  message?: string(name='Message'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model EchoResponse = {
  headers: map[string]string(name='headers'),
  body: EchoResponseBody(name='body'),
}

async function echoWithOptions(request: EchoRequest, runtime: Util.RuntimeOptions): EchoResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('Echo', '2019-12-27', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function echo(request: EchoRequest): EchoResponse {
  var runtime = new Util.RuntimeOptions{};
  return echoWithOptions(request, runtime);
}

model EditXspaceGroupRequest {
  groupId?: long(name='GroupId'),
  groupName?: string(name='GroupName'),
  showName?: string(name='ShowName'),
  supportIm?: boolean(name='SupportIm'),
  supportPhone?: boolean(name='SupportPhone'),
  supportCase?: boolean(name='SupportCase'),
  isSwitchShow?: int32(name='IsSwitchShow'),
  description?: string(name='Description'),
  createAgentId?: long(name='CreateAgentId'),
}

model EditXspaceGroupResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: long(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model EditXspaceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: EditXspaceGroupResponseBody(name='body'),
}

async function editXspaceGroupWithOptions(request: EditXspaceGroupRequest, runtime: Util.RuntimeOptions): EditXspaceGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('EditXspaceGroup', '2019-12-27', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function editXspaceGroup(request: EditXspaceGroupRequest): EditXspaceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return editXspaceGroupWithOptions(request, runtime);
}

model QueryAgentGroupByBuIdRequest {
  buId?: long(name='BuId'),
}

model QueryAgentGroupByBuIdResponseBody = {
  message?: string(name='Message'),
  data?: [ 
    {
      status?: int32(name='Status'),
      buId?: long(name='BuId'),
      showName?: string(name='ShowName'),
      description?: string(name='Description'),
      groupId?: long(name='GroupId'),
      groupName?: string(name='GroupName'),
      departmentId?: long(name='DepartmentId'),
      isPublic?: boolean(name='IsPublic'),
    }
  ](name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryAgentGroupByBuIdResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAgentGroupByBuIdResponseBody(name='body'),
}

async function queryAgentGroupByBuIdWithOptions(request: QueryAgentGroupByBuIdRequest, runtime: Util.RuntimeOptions): QueryAgentGroupByBuIdResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('QueryAgentGroupByBuId', '2019-12-27', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function queryAgentGroupByBuId(request: QueryAgentGroupByBuIdRequest): QueryAgentGroupByBuIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAgentGroupByBuIdWithOptions(request, runtime);
}

model DeleteChatDispatchRuleRequest {
  ruleId?: int32(name='RuleId'),
}

model DeleteChatDispatchRuleResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: long(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteChatDispatchRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteChatDispatchRuleResponseBody(name='body'),
}

async function deleteChatDispatchRuleWithOptions(request: DeleteChatDispatchRuleRequest, runtime: Util.RuntimeOptions): DeleteChatDispatchRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteChatDispatchRule', '2019-12-27', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteChatDispatchRule(request: DeleteChatDispatchRuleRequest): DeleteChatDispatchRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteChatDispatchRuleWithOptions(request, runtime);
}

model GetAgentByOuterInfoRequest {
  outerType?: string(name='OuterType'),
  outerBuId?: string(name='OuterBuId'),
  outerAccountId?: string(name='OuterAccountId'),
}

model GetAgentByOuterInfoResponseBody = {
  message?: string(name='Message'),
  data?: {
    status?: int32(name='Status'),
    buId?: long(name='BuId'),
    showName?: string(name='ShowName'),
    agentId?: long(name='AgentId'),
    departmentId?: long(name='DepartmentId'),
    agentName?: string(name='AgentName'),
    agentType?: int32(name='AgentType'),
  }(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetAgentByOuterInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetAgentByOuterInfoResponseBody(name='body'),
}

async function getAgentByOuterInfoWithOptions(request: GetAgentByOuterInfoRequest, runtime: Util.RuntimeOptions): GetAgentByOuterInfoResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetAgentByOuterInfo', '2019-12-27', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getAgentByOuterInfo(request: GetAgentByOuterInfoRequest): GetAgentByOuterInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAgentByOuterInfoWithOptions(request, runtime);
}

model PageQueryTicketsRequest {
  buId?: long(name='BuId', description='buid'),
  ticketType?: int32(name='TicketType', description='ticketType'),
  ticketId?: long(name='TicketId', description='ticketId'),
  memberId?: long(name='MemberId', description='memberId'),
  pageNo?: int32(name='PageNo', description='pageNo'),
  pageSize?: int32(name='PageSize', description='pageSize'),
}

model PageQueryTicketsResponseBody = {
  message?: string(name='Message', description='message'),
  data?: string(name='Data', description='data'),
  code?: string(name='Code', description='code'),
  success?: boolean(name='Success', description='success'),
}

model PageQueryTicketsResponse = {
  headers: map[string]string(name='headers'),
  body: PageQueryTicketsResponseBody(name='body'),
}

async function pageQueryTicketsWithOptions(request: PageQueryTicketsRequest, runtime: Util.RuntimeOptions): PageQueryTicketsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('PageQueryTickets', '2019-12-27', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function pageQueryTickets(request: PageQueryTicketsRequest): PageQueryTicketsResponse {
  var runtime = new Util.RuntimeOptions{};
  return pageQueryTicketsWithOptions(request, runtime);
}

model GetTotalGroupCountByChannelTypeRequest {
  buId?: long(name='BuId'),
  channelType?: int32(name='ChannelType'),
}

model GetTotalGroupCountByChannelTypeResponseBody = {
  message?: string(name='Message'),
  data?: int32(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetTotalGroupCountByChannelTypeResponse = {
  headers: map[string]string(name='headers'),
  body: GetTotalGroupCountByChannelTypeResponseBody(name='body'),
}

async function getTotalGroupCountByChannelTypeWithOptions(request: GetTotalGroupCountByChannelTypeRequest, runtime: Util.RuntimeOptions): GetTotalGroupCountByChannelTypeResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetTotalGroupCountByChannelType', '2019-12-27', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getTotalGroupCountByChannelType(request: GetTotalGroupCountByChannelTypeRequest): GetTotalGroupCountByChannelTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTotalGroupCountByChannelTypeWithOptions(request, runtime);
}

model QueryAgentGroupRequest {
  agentId?: long(name='AgentId'),
}

model QueryAgentGroupResponseBody = {
  message?: string(name='Message'),
  data?: [ 
    {
      buId?: long(name='BuId'),
      groupId?: long(name='GroupId'),
      departmentId?: long(name='DepartmentId'),
    }
  ](name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryAgentGroupResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAgentGroupResponseBody(name='body'),
}

async function queryAgentGroupWithOptions(request: QueryAgentGroupRequest, runtime: Util.RuntimeOptions): QueryAgentGroupResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('QueryAgentGroup', '2019-12-27', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function queryAgentGroup(request: QueryAgentGroupRequest): QueryAgentGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAgentGroupWithOptions(request, runtime);
}

model CreateChatDispatchRuleRequest {
  ruleName?: string(name='RuleName'),
  timeout?: int32(name='Timeout'),
  heartTimeout?: int32(name='HeartTimeout'),
  offlineNotice?: string(name='OfflineNotice'),
  noAgentNotice?: string(name='NoAgentNotice'),
  level?: int32(name='Level'),
  skillGroupList?: string(name='SkillGroupList'),
  enableWorkTime?: string(name='EnableWorkTime'),
  workTime?: string(name='WorkTime'),
  memberEnqueueNotice?: string(name='MemberEnqueueNotice'),
  memberDispatchNotice?: string(name='MemberDispatchNotice'),
  enableMemberDispatchNotice?: boolean(name='EnableMemberDispatchNotice'),
  memberSessionRemoveNotice?: string(name='MemberSessionRemoveNotice'),
  leaveNoticeMessage?: string(name='LeaveNoticeMessage'),
  memberLongSessionBeginTime?: string(name='MemberLongSessionBeginTime'),
  memberQueueHeartTimeout?: int32(name='MemberQueueHeartTimeout'),
  agentCloseSessionNotice?: string(name='AgentCloseSessionNotice'),
  memberCloseSessionNotice?: string(name='MemberCloseSessionNotice'),
  agentSwitchQueueNotice?: string(name='AgentSwitchQueueNotice'),
  agentOfflineSwitchQueueNotice?: string(name='AgentOfflineSwitchQueueNotice'),
  memberDispatchNoticeSwitch?: string(name='MemberDispatchNoticeSwitch'),
  operatorId?: long(name='OperatorId'),
}

model CreateChatDispatchRuleResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateChatDispatchRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateChatDispatchRuleResponseBody(name='body'),
}

async function createChatDispatchRuleWithOptions(request: CreateChatDispatchRuleRequest, runtime: Util.RuntimeOptions): CreateChatDispatchRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateChatDispatchRule', '2019-12-27', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createChatDispatchRule(request: CreateChatDispatchRuleRequest): CreateChatDispatchRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createChatDispatchRuleWithOptions(request, runtime);
}

model QueryRolesByBuIdRequest {
  buId?: long(name='BuId'),
}

model QueryRolesByBuIdResponseBody = {
  message?: string(name='Message'),
  data?: [ 
    {
      buId?: long(name='BuId'),
      roleCode?: string(name='RoleCode'),
      roleName?: string(name='RoleName'),
      roleId?: long(name='RoleId'),
    }
  ](name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryRolesByBuIdResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRolesByBuIdResponseBody(name='body'),
}

async function queryRolesByBuIdWithOptions(request: QueryRolesByBuIdRequest, runtime: Util.RuntimeOptions): QueryRolesByBuIdResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('QueryRolesByBuId', '2019-12-27', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function queryRolesByBuId(request: QueryRolesByBuIdRequest): QueryRolesByBuIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRolesByBuIdWithOptions(request, runtime);
}

model CreateAgentBusinessUnitRequest {
  outerType?: string(name='OuterType'),
  outerBuId?: string(name='OuterBuId'),
  buName?: string(name='BuName'),
  outerAdminAccountId?: string(name='OuterAdminAccountId'),
  outerAdminAccountName?: string(name='OuterAdminAccountName'),
}

model CreateAgentBusinessUnitResponseBody = {
  message?: string(name='Message'),
  data?: {
    buId?: long(name='BuId'),
    departmentId?: long(name='DepartmentId'),
    buName?: string(name='BuName'),
    adminAgentId?: long(name='AdminAgentId'),
    buKey?: string(name='BuKey'),
  }(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateAgentBusinessUnitResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAgentBusinessUnitResponseBody(name='body'),
}

async function createAgentBusinessUnitWithOptions(request: CreateAgentBusinessUnitRequest, runtime: Util.RuntimeOptions): CreateAgentBusinessUnitResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateAgentBusinessUnit', '2019-12-27', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createAgentBusinessUnit(request: CreateAgentBusinessUnitRequest): CreateAgentBusinessUnitResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAgentBusinessUnitWithOptions(request, runtime);
}

model CreateOrUpdateAutoTaskRequest {
  taskRuleGroupData?: string(name='TaskRuleGroupData'),
  agentId?: long(name='AgentId'),
}

model CreateOrUpdateAutoTaskResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateOrUpdateAutoTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOrUpdateAutoTaskResponseBody(name='body'),
}

async function createOrUpdateAutoTaskWithOptions(request: CreateOrUpdateAutoTaskRequest, runtime: Util.RuntimeOptions): CreateOrUpdateAutoTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateOrUpdateAutoTask', '2019-12-27', 'HTTPS', 'PUT', 'AK', 'json', req, runtime);
}

async function createOrUpdateAutoTask(request: CreateOrUpdateAutoTaskRequest): CreateOrUpdateAutoTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOrUpdateAutoTaskWithOptions(request, runtime);
}

model QueryAllCategoryRequest {
  buId?: long(name='BuId'),
  realTime?: boolean(name='RealTime'),
}

model QueryAllCategoryResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model QueryAllCategoryResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAllCategoryResponseBody(name='body'),
}

async function queryAllCategoryWithOptions(request: QueryAllCategoryRequest, runtime: Util.RuntimeOptions): QueryAllCategoryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryAllCategory', '2019-12-27', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryAllCategory(request: QueryAllCategoryRequest): QueryAllCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAllCategoryWithOptions(request, runtime);
}

model PageQueryTicketRequest {
  buId?: long(name='BuId', description='buId'),
  endDate?: long(name='EndDate', description='endDate'),
  pageNo?: int32(name='PageNo', description='pageNo'),
  ticketStatus?: int32(name='TicketStatus', description='ticketStatus'),
  pageSize?: int32(name='PageSize', description='pageSize'),
  ticketType?: int32(name='TicketType', description='ticketType'),
  ticketId?: long(name='TicketId', description='ticketId'),
  startDate?: long(name='StartDate', description='startDate'),
  memberId?: long(name='MemberId', description='memberId'),
}

model PageQueryTicketResponseBody = {
  message?: string(name='Message', description='message'),
  data?: {
    totalResults?: int32(name='TotalResults', description='totalResults'),
    currentPage?: int32(name='CurrentPage', description='currentPage'),
    list?: [ 
      {
        caseId?: long(name='CaseId', description='caseId'),
        gmtCreate?: long(name='GmtCreate', description='gmtCreate'),
        srType?: string(name='SrType', description='srType'),
        gmtModified?: long(name='GmtModified', description='gmtModified'),
        questionInfo?: string(name='QuestionInfo', description='questionInfo'),
        caseStatus?: string(name='CaseStatus', description='caseStatus'),
        extAttrs?: string(name='ExtAttrs', description='extAttrs'),
        id?: long(name='Id', description='id'),
      }
    ](name='List', description='list'),
    pageSize?: long(name='PageSize', description='pageSize'),
  }(name='Data', description='data'),
  code?: string(name='Code', description='code'),
  success?: boolean(name='Success', description='success'),
}

model PageQueryTicketResponse = {
  headers: map[string]string(name='headers'),
  body: PageQueryTicketResponseBody(name='body'),
}

async function pageQueryTicketWithOptions(request: PageQueryTicketRequest, runtime: Util.RuntimeOptions): PageQueryTicketResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('PageQueryTicket', '2019-12-27', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function pageQueryTicket(request: PageQueryTicketRequest): PageQueryTicketResponse {
  var runtime = new Util.RuntimeOptions{};
  return pageQueryTicketWithOptions(request, runtime);
}

