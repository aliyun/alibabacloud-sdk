/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('aiearth-engine', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateAIJobRequest {
  app?: string(name='App', description='算法名称，对应枚举：building_extraction, "建筑物提取"
greenhouse_extraction, "大棚提取"
land_cover_classification, "地物分类"
pv_plant, "光伏电厂识别"
barrage, "拦河坝识别"
construction_change, "通用变化检测"
multiclass, "变化多分类"
farmland_extraction_remote_sensing, "地块提取"
sar_water, "sar水体提取"
building_change, "建筑物变化检测"
farmland_change, "农田变化检测"
remove_cloud_haze, "去云雾处理"'),
  areaThreshold?: double(name='AreaThreshold', description='过滤阈值，选择图斑过滤面积，小于此面积不提取'),
  confidence?: double(name='Confidence', description='置信度，选择识别目标的置信度，0-100'),
  inputs?: [ 
    {
      des?: {
        dataId?: string(name='DataId', description='数据的DataId'),
      }(name='Des'),
      idx?: int32(name='Idx', description='输入序号'),
      src?: {
        dataId?: string(name='DataId', description='数据的DataId'),
      }(name='Src', description='第一张图片'),
    }
  ](name='Inputs', description='待分析数据列表'),
  jobName?: string(name='JobName', description='任务名称'),
  projectId?: long(name='ProjectId', description='项目Id'),
  shapeDataId?: string(name='ShapeDataId', description='区域选择，对应区域shapeId'),
  shapeWkt?: string(name='ShapeWkt', description='区域选择，wkt格式'),
}

model CreateAIJobShrinkRequest {
  app?: string(name='App', description='算法名称，对应枚举：building_extraction, "建筑物提取"
greenhouse_extraction, "大棚提取"
land_cover_classification, "地物分类"
pv_plant, "光伏电厂识别"
barrage, "拦河坝识别"
construction_change, "通用变化检测"
multiclass, "变化多分类"
farmland_extraction_remote_sensing, "地块提取"
sar_water, "sar水体提取"
building_change, "建筑物变化检测"
farmland_change, "农田变化检测"
remove_cloud_haze, "去云雾处理"'),
  areaThreshold?: double(name='AreaThreshold', description='过滤阈值，选择图斑过滤面积，小于此面积不提取'),
  confidence?: double(name='Confidence', description='置信度，选择识别目标的置信度，0-100'),
  inputsShrink?: string(name='Inputs', description='待分析数据列表'),
  jobName?: string(name='JobName', description='任务名称'),
  projectId?: long(name='ProjectId', description='项目Id'),
  shapeDataId?: string(name='ShapeDataId', description='区域选择，对应区域shapeId'),
  shapeWkt?: string(name='ShapeWkt', description='区域选择，wkt格式'),
}

model CreateAIJobResponseBody = {
  app?: string(name='App'),
  jobs?: [ 
    {
      jobId?: long(name='JobId'),
      name?: string(name='Name'),
      success?: boolean(name='Success'),
    }
  ](name='Jobs'),
  projectId?: long(name='ProjectId'),
  requestId?: string(name='RequestId'),
}

model CreateAIJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAIJobResponseBody(name='body'),
}

async function createAIJobWithOptions(tmpReq: CreateAIJobRequest, runtime: Util.RuntimeOptions): CreateAIJobResponse {
  Util.validateModel(tmpReq);
  var request = new CreateAIJobShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.inputs)) {
    request.inputsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.inputs, 'Inputs', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.app)) {
    body['App'] = request.app;
  }
  if (!Util.isUnset(request.areaThreshold)) {
    body['AreaThreshold'] = request.areaThreshold;
  }
  if (!Util.isUnset(request.confidence)) {
    body['Confidence'] = request.confidence;
  }
  if (!Util.isUnset(request.inputsShrink)) {
    body['Inputs'] = request.inputsShrink;
  }
  if (!Util.isUnset(request.jobName)) {
    body['JobName'] = request.jobName;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.shapeDataId)) {
    body['ShapeDataId'] = request.shapeDataId;
  }
  if (!Util.isUnset(request.shapeWkt)) {
    body['ShapeWkt'] = request.shapeWkt;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateAIJob',
    version = '2022-06-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAIJob(request: CreateAIJobRequest): CreateAIJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAIJobWithOptions(request, runtime);
}

model DeleteJobsRequest {
  jobIds?: [ long ](name='JobIds', description='任务Id'),
}

model DeleteJobsShrinkRequest {
  jobIdsShrink?: string(name='JobIds', description='任务Id'),
}

model DeleteJobsResponseBody = {
  num?: int32(name='Num'),
  requestId?: string(name='RequestId'),
}

model DeleteJobsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteJobsResponseBody(name='body'),
}

async function deleteJobsWithOptions(tmpReq: DeleteJobsRequest, runtime: Util.RuntimeOptions): DeleteJobsResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteJobsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.jobIds)) {
    request.jobIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.jobIds, 'JobIds', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.jobIdsShrink)) {
    body['JobIds'] = request.jobIdsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteJobs',
    version = '2022-06-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteJobs(request: DeleteJobsRequest): DeleteJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteJobsWithOptions(request, runtime);
}

model DownloadDataRequest {
  bandNo?: string(name='BandNo'),
  dataId?: string(name='DataId', description='需要下载数据的DataId'),
}

model DownloadDataResponseBody = {
  dataId?: string(name='DataId'),
  downloadUrl?: string(name='DownloadUrl'),
  finished?: boolean(name='Finished'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DownloadDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DownloadDataResponseBody(name='body'),
}

async function downloadDataWithOptions(request: DownloadDataRequest, runtime: Util.RuntimeOptions): DownloadDataResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.bandNo)) {
    body['BandNo'] = request.bandNo;
  }
  if (!Util.isUnset(request.dataId)) {
    body['DataId'] = request.dataId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DownloadData',
    version = '2022-06-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function downloadData(request: DownloadDataRequest): DownloadDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return downloadDataWithOptions(request, runtime);
}

model GetJobsRequest {
  jobIds?: [ long ](name='JobIds', description='任务Id'),
}

model GetJobsShrinkRequest {
  jobIdsShrink?: string(name='JobIds', description='任务Id'),
}

model GetJobsResponseBody = {
  list?: [ 
    {
      app?: string(name='App'),
      jobId?: long(name='JobId'),
      jobName?: string(name='JobName'),
      jobType?: int32(name='JobType'),
      outDataId?: long(name='OutDataId'),
      outDateType?: int32(name='OutDateType'),
      progress?: string(name='Progress'),
      requestId?: string(name='RequestId'),
      status?: int32(name='Status'),
      submitDate?: long(name='SubmitDate'),
    }
  ](name='List'),
  requestId?: string(name='RequestId'),
}

model GetJobsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetJobsResponseBody(name='body'),
}

async function getJobsWithOptions(tmpReq: GetJobsRequest, runtime: Util.RuntimeOptions): GetJobsResponse {
  Util.validateModel(tmpReq);
  var request = new GetJobsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.jobIds)) {
    request.jobIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.jobIds, 'JobIds', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.jobIdsShrink)) {
    body['JobIds'] = request.jobIdsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetJobs',
    version = '2022-06-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getJobs(request: GetJobsRequest): GetJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getJobsWithOptions(request, runtime);
}

model ListDatasRequest {
  cloudageMax?: int32(name='CloudageMax', description='云量上限'),
  cloudageMin?: int32(name='CloudageMin', description='云量下限，注意modis数据云量为0'),
  dateEnd?: string(name='DateEnd', description='结束日期，例如"2020-06-01"'),
  dateStart?: string(name='DateStart', description='开始日期，例如"2020-01-01"'),
  pageNumber?: int32(name='PageNumber', description='页码'),
  pageSize?: int32(name='PageSize', description='每页数量'),
  regionWkt?: string(name='RegionWkt', description='区域选择，wkt格式'),
  sourceTypeList?: [ string ](name='SourceTypeList', description='星源，可多选，枚举值如下：LANDSAT_LC08_C02_T1_L2
LANDSAT_LC09_C02_T1_L2
LANDSAT_LE07_E02_T1_L2
LANDSAT_LT05_T02_T1_L2
SENTINEL_GRD
SENTINEL_MSIL2A
MODIS_MCD12Q1_006
MODIS_MCD15A3H_006
MODIS_MOD14A2_006
MODIS_MOD13Q1_006
MODIS_MOD17A2H_006
MODIS_MOD17A3HGF_006
MODIS_MCD64A1_006
MODIS_MOD11A1_006'),
}

model ListDatasShrinkRequest {
  cloudageMax?: int32(name='CloudageMax', description='云量上限'),
  cloudageMin?: int32(name='CloudageMin', description='云量下限，注意modis数据云量为0'),
  dateEnd?: string(name='DateEnd', description='结束日期，例如"2020-06-01"'),
  dateStart?: string(name='DateStart', description='开始日期，例如"2020-01-01"'),
  pageNumber?: int32(name='PageNumber', description='页码'),
  pageSize?: int32(name='PageSize', description='每页数量'),
  regionWkt?: string(name='RegionWkt', description='区域选择，wkt格式'),
  sourceTypeListShrink?: string(name='SourceTypeList', description='星源，可多选，枚举值如下：LANDSAT_LC08_C02_T1_L2
LANDSAT_LC09_C02_T1_L2
LANDSAT_LE07_E02_T1_L2
LANDSAT_LT05_T02_T1_L2
SENTINEL_GRD
SENTINEL_MSIL2A
MODIS_MCD12Q1_006
MODIS_MCD15A3H_006
MODIS_MOD14A2_006
MODIS_MOD13Q1_006
MODIS_MOD17A2H_006
MODIS_MOD17A3HGF_006
MODIS_MCD64A1_006
MODIS_MOD11A1_006'),
}

model ListDatasResponseBody = {
  list?: [ 
    {
      dataId?: string(name='DataId'),
      raster?: {
        acquisitionDateEnd?: string(name='AcquisitionDateEnd'),
        acquisitionDateStart?: string(name='AcquisitionDateStart'),
        bands?: [ 
          {
            bandNo?: string(name='BandNo'),
            height?: int32(name='Height'),
            resolution?: double(name='Resolution'),
            width?: int32(name='Width'),
          }
        ](name='Bands'),
        bbox?: [ double ](name='Bbox'),
        cloudCoverage?: int32(name='CloudCoverage'),
        name?: string(name='Name'),
        sourceType?: string(name='SourceType'),
        stacId?: string(name='StacId'),
      }(name='Raster'),
    }
  ](name='List'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListDatasResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDatasResponseBody(name='body'),
}

async function listDatasWithOptions(tmpReq: ListDatasRequest, runtime: Util.RuntimeOptions): ListDatasResponse {
  Util.validateModel(tmpReq);
  var request = new ListDatasShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.sourceTypeList)) {
    request.sourceTypeListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sourceTypeList, 'SourceTypeList', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.cloudageMax)) {
    body['CloudageMax'] = request.cloudageMax;
  }
  if (!Util.isUnset(request.cloudageMin)) {
    body['CloudageMin'] = request.cloudageMin;
  }
  if (!Util.isUnset(request.dateEnd)) {
    body['DateEnd'] = request.dateEnd;
  }
  if (!Util.isUnset(request.dateStart)) {
    body['DateStart'] = request.dateStart;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionWkt)) {
    body['RegionWkt'] = request.regionWkt;
  }
  if (!Util.isUnset(request.sourceTypeListShrink)) {
    body['SourceTypeList'] = request.sourceTypeListShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDatas',
    version = '2022-06-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDatas(request: ListDatasRequest): ListDatasResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDatasWithOptions(request, runtime);
}

model ListUserRasterDatasRequest {
  acquisitionDate?: string(name='AcquisitionDate', description='采集日期'),
  fromType?: string(name='FromType', description='来源类型，个人上传：personal，任务结果：result'),
  name?: string(name='Name', description='名称'),
  pageNumber?: int32(name='PageNumber', description='页码'),
  pageSize?: int32(name='PageSize', description='每页数量'),
  resolution?: double(name='Resolution', description='分辨率'),
  uploadDate?: string(name='UploadDate', description='上传日期'),
}

model ListUserRasterDatasResponseBody = {
  list?: [ 
    {
      dataId?: string(name='DataId'),
      raster?: {
        acquisitionDateEnd?: string(name='AcquisitionDateEnd'),
        acquisitionDateStart?: string(name='AcquisitionDateStart'),
        bands?: [ 
          {
            bandNo?: string(name='BandNo'),
            height?: int32(name='Height'),
            resolution?: double(name='Resolution'),
            width?: int32(name='Width'),
          }
        ](name='Bands'),
        bbox?: [ double ](name='Bbox'),
        cloudCoverage?: int32(name='CloudCoverage'),
        name?: string(name='Name'),
        sourceType?: string(name='SourceType'),
        stacId?: string(name='StacId'),
      }(name='Raster'),
    }
  ](name='List'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListUserRasterDatasResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUserRasterDatasResponseBody(name='body'),
}

async function listUserRasterDatasWithOptions(request: ListUserRasterDatasRequest, runtime: Util.RuntimeOptions): ListUserRasterDatasResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.acquisitionDate)) {
    body['AcquisitionDate'] = request.acquisitionDate;
  }
  if (!Util.isUnset(request.fromType)) {
    body['FromType'] = request.fromType;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resolution)) {
    body['Resolution'] = request.resolution;
  }
  if (!Util.isUnset(request.uploadDate)) {
    body['UploadDate'] = request.uploadDate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListUserRasterDatas',
    version = '2022-06-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listUserRasterDatas(request: ListUserRasterDatasRequest): ListUserRasterDatasResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUserRasterDatasWithOptions(request, runtime);
}

model ListUserVectorDatasRequest {
  fromType?: string(name='FromType', description='来源类型，个人上传：personal，任务结果：result'),
  name?: string(name='Name', description='名称'),
  pageNumber?: int32(name='PageNumber', description='页码'),
  pageSize?: int32(name='PageSize', description='每页数量'),
  uploadDate?: string(name='UploadDate', description='上传日期'),
}

model ListUserVectorDatasResponseBody = {
  list?: [ 
    {
      dataId?: string(name='DataId'),
      vector?: {
        bbox?: [ double ](name='Bbox'),
        name?: string(name='Name'),
        stacId?: string(name='StacId'),
      }(name='Vector'),
    }
  ](name='List'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListUserVectorDatasResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUserVectorDatasResponseBody(name='body'),
}

async function listUserVectorDatasWithOptions(request: ListUserVectorDatasRequest, runtime: Util.RuntimeOptions): ListUserVectorDatasResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.fromType)) {
    body['FromType'] = request.fromType;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.uploadDate)) {
    body['UploadDate'] = request.uploadDate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListUserVectorDatas',
    version = '2022-06-09',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listUserVectorDatas(request: ListUserVectorDatasRequest): ListUserVectorDatasResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUserVectorDatasWithOptions(request, runtime);
}

