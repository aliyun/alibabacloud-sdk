/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @signatureAlgorithm = 'v2';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-2-pop = 'cs.aliyuncs.com',
    cn-beijing-finance-pop = 'cs.aliyuncs.com',
    cn-beijing-gov-1 = 'cs.aliyuncs.com',
    cn-beijing-nu16-b01 = 'cs.aliyuncs.com',
    cn-edge-1 = 'cs.aliyuncs.com',
    cn-fujian = 'cs.aliyuncs.com',
    cn-haidian-cm12-c01 = 'cs.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'cs.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'cs.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'cs.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'cs.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'cs.aliyuncs.com',
    cn-hangzhou-test-306 = 'cs.aliyuncs.com',
    cn-hongkong-finance-pop = 'cs.aliyuncs.com',
    cn-qingdao-nebula = 'cs.aliyuncs.com',
    cn-shanghai-et15-b01 = 'cs.aliyuncs.com',
    cn-shanghai-et2-b01 = 'cs.aliyuncs.com',
    cn-shanghai-inner = 'cs.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'cs.aliyuncs.com',
    cn-shenzhen-inner = 'cs.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'cs.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'cs.aliyuncs.com',
    cn-wuhan = 'cs.aliyuncs.com',
    cn-yushanfang = 'cs.aliyuncs.com',
    cn-zhangbei = 'cs.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'cs.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'cs.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'cs.aliyuncs.com',
    eu-west-1-oxs = 'cs.aliyuncs.com',
    rus-west-1-pop = 'cs.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('cs', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model Addon {
  config?: string(name='config', example='{\\"IngressSlbNetworkType\\":\\"internet\\"}'),
  disabled?: boolean(name='disabled', example='false'),
  name?: string(name='name', example='nginx-ingress-controller'),
}

model DataDisk {
  autoSnapshotPolicyId?: string(name='auto_snapshot_policy_id', example='sp-2zej1nogjvovnz4z****'),
  category?: string(name='category', example='cloud_ssd'),
  encrypted?: string(name='encrypted', example='true'),
  performanceLevel?: string(name='performance_level', example='PL1'),
  size?: long(name='size', example='40'),
}

model MaintenanceWindow {
  duration?: string(name='duration', example='3h'),
  enable?: boolean(name='enable', example='false'),
  maintenanceTime?: string(name='maintenance_time', example='03:00:00Z'),
  weeklyPeriod?: string(name='weekly_period', example='Monday,Thursday'),
}

model Runtime {
  name?: string(name='name', example='docker'),
  version?: string(name='version', example='19.03.5'),
}

model Tag {
  key?: string(name='key', example='env'),
  value?: string(name='value', example='prod'),
}

model Taint {
  effect?: string(name='effect', example='NoSchedule'),
  key?: string(name='key', example='key'),
  value?: string(name='value', example='value'),
}

model StandardComponentsValue = {
  name?: string(name='name', example='ack-arena'),
  version?: string(name='version', example='0.5.0'),
  description?: string(name='description', example='***'),
  required?: string(name='required', example='false'),
  disabled?: boolean(name='disabled', example='false'),
}

model AttachInstancesRequest {
  cpuPolicy?: string(name='cpu_policy', example='none'),
  formatDisk?: boolean(name='format_disk', example='false'),
  imageId?: string(name='image_id', example='aliyun_2_1903_x64_20G_alibase_20200529.vhd'),
  instances?: [ string ](name='instances'),
  isEdgeWorker?: boolean(name='is_edge_worker', example='false'),
  keepInstanceName?: boolean(name='keep_instance_name', example='true'),
  keyPair?: string(name='key_pair', example='secrity-key'),
  nodepoolId?: string(name='nodepool_id', example='np615c0e0966124216a0412e10afe0****'),
  password?: string(name='password', example='Hello1234'),
  rdsInstances?: [ string ](name='rds_instances'),
  runtime?: Runtime(name='runtime'),
  tags?: [
    Tag
  ](name='tags'),
  userData?: string(name='user_data', example='IyEvdXNyL2Jpbi9iYXNoCmVjaG8gIkhlbGxvIEFDSyEi'),
}

model AttachInstancesResponseBody = {
  list?: [ 
    {
      code?: string(name='code', example='200'),
      instanceId?: string(name='instanceId', example='i-2ze0lgm3y6iylcbt****'),
      message?: string(name='message', example='successful'),
    }
  ](name='list'),
  taskId?: string(name='task_id', example='T-5a544aff80282e39ea000039'),
}

model AttachInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AttachInstancesResponseBody(name='body'),
}

async function attachInstancesWithOptions(ClusterId: string, request: AttachInstancesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AttachInstancesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.cpuPolicy)) {
    body['cpu_policy'] = request.cpuPolicy;
  }
  if (!Util.isUnset(request.formatDisk)) {
    body['format_disk'] = request.formatDisk;
  }
  if (!Util.isUnset(request.imageId)) {
    body['image_id'] = request.imageId;
  }
  if (!Util.isUnset(request.instances)) {
    body['instances'] = request.instances;
  }
  if (!Util.isUnset(request.isEdgeWorker)) {
    body['is_edge_worker'] = request.isEdgeWorker;
  }
  if (!Util.isUnset(request.keepInstanceName)) {
    body['keep_instance_name'] = request.keepInstanceName;
  }
  if (!Util.isUnset(request.keyPair)) {
    body['key_pair'] = request.keyPair;
  }
  if (!Util.isUnset(request.nodepoolId)) {
    body['nodepool_id'] = request.nodepoolId;
  }
  if (!Util.isUnset(request.password)) {
    body['password'] = request.password;
  }
  if (!Util.isUnset(request.rdsInstances)) {
    body['rds_instances'] = request.rdsInstances;
  }
  if (!Util.isUnset(request.runtime)) {
    body['runtime'] = request.runtime;
  }
  if (!Util.isUnset(request.tags)) {
    body['tags'] = request.tags;
  }
  if (!Util.isUnset(request.userData)) {
    body['user_data'] = request.userData;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AttachInstances',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/attach`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function attachInstances(ClusterId: string, request: AttachInstancesRequest): AttachInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return attachInstancesWithOptions(ClusterId, request, headers, runtime);
}

model CancelClusterUpgradeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function cancelClusterUpgradeWithOptions(ClusterId: string, headers: map[string]string, runtime: Util.RuntimeOptions): CancelClusterUpgradeResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'CancelClusterUpgrade',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/api/v2/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/upgrade/cancel`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function cancelClusterUpgrade(ClusterId: string): CancelClusterUpgradeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return cancelClusterUpgradeWithOptions(ClusterId, headers, runtime);
}

model CancelComponentUpgradeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function cancelComponentUpgradeWithOptions(clusterId: string, componentId: string, headers: map[string]string, runtime: Util.RuntimeOptions): CancelComponentUpgradeResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'CancelComponentUpgrade',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(clusterId)}/components/${OpenApiUtil.getEncodeParam(componentId)}/cancel`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function cancelComponentUpgrade(clusterId: string, componentId: string): CancelComponentUpgradeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return cancelComponentUpgradeWithOptions(clusterId, componentId, headers, runtime);
}

model CancelTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function cancelTaskWithOptions(taskId: string, headers: map[string]string, runtime: Util.RuntimeOptions): CancelTaskResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'CancelTask',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/tasks/${OpenApiUtil.getEncodeParam(taskId)}/cancel`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function cancelTask(taskId: string): CancelTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return cancelTaskWithOptions(taskId, headers, runtime);
}

model CancelWorkflowRequest {
  action?: string(name='action', example='cancel'),
}

model CancelWorkflowResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function cancelWorkflowWithOptions(workflowName: string, request: CancelWorkflowRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CancelWorkflowResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.action)) {
    body['action'] = request.action;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CancelWorkflow',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/gs/workflow/${OpenApiUtil.getEncodeParam(workflowName)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function cancelWorkflow(workflowName: string, request: CancelWorkflowRequest): CancelWorkflowResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return cancelWorkflowWithOptions(workflowName, request, headers, runtime);
}

model CreateAutoscalingConfigRequest {
  coolDownDuration?: string(name='cool_down_duration', example='10'),
  expander?: string(name='expander', example='least-waste'),
  gpuUtilizationThreshold?: string(name='gpu_utilization_threshold', example='0.5'),
  scaleDownEnabled?: boolean(name='scale_down_enabled', example='true'),
  scanInterval?: string(name='scan_interval', example='30'),
  unneededDuration?: string(name='unneeded_duration', example='10'),
  utilizationThreshold?: string(name='utilization_threshold', example='0.5'),
}

model CreateAutoscalingConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function createAutoscalingConfigWithOptions(ClusterId: string, request: CreateAutoscalingConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAutoscalingConfigResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.coolDownDuration)) {
    body['cool_down_duration'] = request.coolDownDuration;
  }
  if (!Util.isUnset(request.expander)) {
    body['expander'] = request.expander;
  }
  if (!Util.isUnset(request.gpuUtilizationThreshold)) {
    body['gpu_utilization_threshold'] = request.gpuUtilizationThreshold;
  }
  if (!Util.isUnset(request.scaleDownEnabled)) {
    body['scale_down_enabled'] = request.scaleDownEnabled;
  }
  if (!Util.isUnset(request.scanInterval)) {
    body['scan_interval'] = request.scanInterval;
  }
  if (!Util.isUnset(request.unneededDuration)) {
    body['unneeded_duration'] = request.unneededDuration;
  }
  if (!Util.isUnset(request.utilizationThreshold)) {
    body['utilization_threshold'] = request.utilizationThreshold;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateAutoscalingConfig',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/cluster/${OpenApiUtil.getEncodeParam(ClusterId)}/autoscale/config/`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function createAutoscalingConfig(ClusterId: string, request: CreateAutoscalingConfigRequest): CreateAutoscalingConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createAutoscalingConfigWithOptions(ClusterId, request, headers, runtime);
}

model CreateClusterRequest {
  addons?: [
    Addon
  ](name='addons'),
  apiAudiences?: string(name='api_audiences', example='kubernetes.default.svc'),
  chargeType?: string(name='charge_type'),
  cisEnabled?: boolean(name='cis_enabled', example='false'),
  cloudMonitorFlags?: boolean(name='cloud_monitor_flags', example='true'),
  clusterDomain?: string(name='cluster_domain', example='cluster.local'),
  clusterSpec?: string(name='cluster_spec', example='ack.pro.small'),
  clusterType?: string(name='cluster_type', example='Kubernetes'),
  containerCidr?: string(name='container_cidr', example='172.20.0.0/16'),
  controlplaneLogComponents?: [ string ](name='controlplane_log_components'),
  controlplaneLogProject?: string(name='controlplane_log_project', example='k8s-log-xxx'),
  controlplaneLogTtl?: string(name='controlplane_log_ttl', example='30'),
  cpuPolicy?: string(name='cpu_policy', example='none'),
  customSan?: string(name='custom_san', example='cs.aliyun.com'),
  deletionProtection?: boolean(name='deletion_protection', example='true'),
  disableRollback?: boolean(name='disable_rollback', example='true'),
  enableRrsa?: boolean(name='enable_rrsa', example='true'),
  encryptionProviderKey?: string(name='encryption_provider_key', example='0fe64791-55eb-4fc7-84c5-c6c7cdca****'),
  endpointPublicAccess?: boolean(name='endpoint_public_access', example='true'),
  formatDisk?: boolean(name='format_disk', example='false'),
  imageId?: string(name='image_id', example='m-bp16z7xko3vvv8gt****'),
  imageType?: string(name='image_type', example='AliyunLinux'),
  instances?: [ string ](name='instances'),
  ipStack?: string(name='ip_stack', example='可选值：ipv4(单栈)/dual(双栈) ，默认值为IPv4。'),
  isEnterpriseSecurityGroup?: boolean(name='is_enterprise_security_group', example='true'),
  keepInstanceName?: boolean(name='keep_instance_name', example='true'),
  keyPair?: string(name='key_pair', example='secrity-key'),
  kubernetesVersion?: string(name='kubernetes_version', example='1.16.9-aliyun.1'),
  loadBalancerSpec?: string(name='load_balancer_spec', example='slb.s2.small'),
  loggingType?: string(name='logging_type', example='SLS'),
  loginPassword?: string(name='login_password', example='Hello@1234'),
  masterAutoRenew?: boolean(name='master_auto_renew', example='true'),
  masterAutoRenewPeriod?: long(name='master_auto_renew_period', example='1'),
  masterCount?: long(name='master_count', example='3'),
  masterInstanceChargeType?: string(name='master_instance_charge_type', example='PrePaid'),
  masterInstanceTypes?: [ string ](name='master_instance_types'),
  masterPeriod?: long(name='master_period', example='1'),
  masterPeriodUnit?: string(name='master_period_unit', example='Month'),
  masterSystemDiskCategory?: string(name='master_system_disk_category', example='cloud_ssd'),
  masterSystemDiskPerformanceLevel?: string(name='master_system_disk_performance_level', example='PL1'),
  masterSystemDiskSize?: long(name='master_system_disk_size', example='120'),
  masterSystemDiskSnapshotPolicyId?: string(name='master_system_disk_snapshot_policy_id', example='sp-2zej1nogjvovnz4z****'),
  masterVswitchIds?: [ string ](name='master_vswitch_ids'),
  name?: string(name='name', example='cluster-demo'),
  natGateway?: boolean(name='nat_gateway', example='true'),
  nodeCidrMask?: string(name='node_cidr_mask', example='25'),
  nodeNameMode?: string(name='node_name_mode', example='aliyun.com00055test'),
  nodePortRange?: string(name='node_port_range', example='30000~32767'),
  numOfNodes?: long(name='num_of_nodes', example='3'),
  osType?: string(name='os_type', example='Linux'),
  period?: long(name='period'),
  periodUnit?: string(name='period_unit'),
  platform?: string(name='platform', example='CentOS'),
  podVswitchIds?: [ string ](name='pod_vswitch_ids'),
  profile?: string(name='profile', example='Default'),
  proxyMode?: string(name='proxy_mode', example='ipvs'),
  rdsInstances?: [ string ](name='rds_instances'),
  regionId?: string(name='region_id', example='cn-beijing'),
  resourceGroupId?: string(name='resource_group_id', example='rg-acfm3mkrure****'),
  runtime?: Runtime(name='runtime'),
  securityGroupId?: string(name='security_group_id', example='sg-bp1bdue0qc1g7k****'),
  serviceAccountIssuer?: string(name='service_account_issuer', example='kubernetes.default.svc'),
  serviceCidr?: string(name='service_cidr', example='172.21.0.0/20'),
  serviceDiscoveryTypes?: [ string ](name='service_discovery_types'),
  snatEntry?: boolean(name='snat_entry', example='true'),
  socEnabled?: boolean(name='soc_enabled', example='false'),
  sshFlags?: boolean(name='ssh_flags', example='true'),
  tags?: [
    Tag
  ](name='tags'),
  taints?: [
    Taint
  ](name='taints'),
  timeoutMins?: long(name='timeout_mins', example='60'),
  timezone?: string(name='timezone', example='Asia/Shanghai'),
  userCa?: string(name='user_ca', example='-----BEGIN CERTIFICATE-----****'),
  userData?: string(name='user_data', example='IyEvdXNyL2Jpbi9iYXNoCmVjaG8gIkhlbGxvIEFD****'),
  vpcid?: string(name='vpcid', example='vpc-2zeik9h3ahvv2zz95****'),
  vswitchIds?: [ string ](name='vswitch_ids'),
  workerAutoRenew?: boolean(name='worker_auto_renew', example='true'),
  workerAutoRenewPeriod?: long(name='worker_auto_renew_period', example='1'),
  workerDataDisks?: [ 
    {
      category?: string(name='category', example='cloud_essd'),
      encrypted?: string(name='encrypted', example='true'),
      performanceLevel?: string(name='performance_level', example='PL1'),
      size?: string(name='size', example='120'),
    }
  ](name='worker_data_disks'),
  workerInstanceChargeType?: string(name='worker_instance_charge_type', example='PrePaid'),
  workerInstanceTypes?: [ string ](name='worker_instance_types'),
  workerPeriod?: long(name='worker_period', example='1'),
  workerPeriodUnit?: string(name='worker_period_unit', example='Month'),
  workerSystemDiskCategory?: string(name='worker_system_disk_category', example='cloud_efficiency'),
  workerSystemDiskPerformanceLevel?: string(name='worker_system_disk_performance_level', example='PL1'),
  workerSystemDiskSize?: long(name='worker_system_disk_size', example='120'),
  workerSystemDiskSnapshotPolicyId?: string(name='worker_system_disk_snapshot_policy_id', example='sp-2zej1nogjvovnz4z****'),
  workerVswitchIds?: [ string ](name='worker_vswitch_ids'),
  zoneId?: string(name='zone_id', example='cn-beiji****'),
}

model CreateClusterResponseBody = {
  clusterId?: string(name='cluster_id', example='cb95aa626a47740afbf6aa099b650****'),
  requestId?: string(name='request_id', example='687C5BAA-D103-4993-884B-C35E4314A1E1'),
  taskId?: string(name='task_id', example='T-5a54309c80282e39ea00002f'),
}

model CreateClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateClusterResponseBody(name='body'),
}

async function createClusterWithOptions(request: CreateClusterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateClusterResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.addons)) {
    body['addons'] = request.addons;
  }
  if (!Util.isUnset(request.apiAudiences)) {
    body['api_audiences'] = request.apiAudiences;
  }
  if (!Util.isUnset(request.chargeType)) {
    body['charge_type'] = request.chargeType;
  }
  if (!Util.isUnset(request.cisEnabled)) {
    body['cis_enabled'] = request.cisEnabled;
  }
  if (!Util.isUnset(request.cloudMonitorFlags)) {
    body['cloud_monitor_flags'] = request.cloudMonitorFlags;
  }
  if (!Util.isUnset(request.clusterDomain)) {
    body['cluster_domain'] = request.clusterDomain;
  }
  if (!Util.isUnset(request.clusterSpec)) {
    body['cluster_spec'] = request.clusterSpec;
  }
  if (!Util.isUnset(request.clusterType)) {
    body['cluster_type'] = request.clusterType;
  }
  if (!Util.isUnset(request.containerCidr)) {
    body['container_cidr'] = request.containerCidr;
  }
  if (!Util.isUnset(request.controlplaneLogComponents)) {
    body['controlplane_log_components'] = request.controlplaneLogComponents;
  }
  if (!Util.isUnset(request.controlplaneLogProject)) {
    body['controlplane_log_project'] = request.controlplaneLogProject;
  }
  if (!Util.isUnset(request.controlplaneLogTtl)) {
    body['controlplane_log_ttl'] = request.controlplaneLogTtl;
  }
  if (!Util.isUnset(request.cpuPolicy)) {
    body['cpu_policy'] = request.cpuPolicy;
  }
  if (!Util.isUnset(request.customSan)) {
    body['custom_san'] = request.customSan;
  }
  if (!Util.isUnset(request.deletionProtection)) {
    body['deletion_protection'] = request.deletionProtection;
  }
  if (!Util.isUnset(request.disableRollback)) {
    body['disable_rollback'] = request.disableRollback;
  }
  if (!Util.isUnset(request.enableRrsa)) {
    body['enable_rrsa'] = request.enableRrsa;
  }
  if (!Util.isUnset(request.encryptionProviderKey)) {
    body['encryption_provider_key'] = request.encryptionProviderKey;
  }
  if (!Util.isUnset(request.endpointPublicAccess)) {
    body['endpoint_public_access'] = request.endpointPublicAccess;
  }
  if (!Util.isUnset(request.formatDisk)) {
    body['format_disk'] = request.formatDisk;
  }
  if (!Util.isUnset(request.imageId)) {
    body['image_id'] = request.imageId;
  }
  if (!Util.isUnset(request.imageType)) {
    body['image_type'] = request.imageType;
  }
  if (!Util.isUnset(request.instances)) {
    body['instances'] = request.instances;
  }
  if (!Util.isUnset(request.ipStack)) {
    body['ip_stack'] = request.ipStack;
  }
  if (!Util.isUnset(request.isEnterpriseSecurityGroup)) {
    body['is_enterprise_security_group'] = request.isEnterpriseSecurityGroup;
  }
  if (!Util.isUnset(request.keepInstanceName)) {
    body['keep_instance_name'] = request.keepInstanceName;
  }
  if (!Util.isUnset(request.keyPair)) {
    body['key_pair'] = request.keyPair;
  }
  if (!Util.isUnset(request.kubernetesVersion)) {
    body['kubernetes_version'] = request.kubernetesVersion;
  }
  if (!Util.isUnset(request.loadBalancerSpec)) {
    body['load_balancer_spec'] = request.loadBalancerSpec;
  }
  if (!Util.isUnset(request.loggingType)) {
    body['logging_type'] = request.loggingType;
  }
  if (!Util.isUnset(request.loginPassword)) {
    body['login_password'] = request.loginPassword;
  }
  if (!Util.isUnset(request.masterAutoRenew)) {
    body['master_auto_renew'] = request.masterAutoRenew;
  }
  if (!Util.isUnset(request.masterAutoRenewPeriod)) {
    body['master_auto_renew_period'] = request.masterAutoRenewPeriod;
  }
  if (!Util.isUnset(request.masterCount)) {
    body['master_count'] = request.masterCount;
  }
  if (!Util.isUnset(request.masterInstanceChargeType)) {
    body['master_instance_charge_type'] = request.masterInstanceChargeType;
  }
  if (!Util.isUnset(request.masterInstanceTypes)) {
    body['master_instance_types'] = request.masterInstanceTypes;
  }
  if (!Util.isUnset(request.masterPeriod)) {
    body['master_period'] = request.masterPeriod;
  }
  if (!Util.isUnset(request.masterPeriodUnit)) {
    body['master_period_unit'] = request.masterPeriodUnit;
  }
  if (!Util.isUnset(request.masterSystemDiskCategory)) {
    body['master_system_disk_category'] = request.masterSystemDiskCategory;
  }
  if (!Util.isUnset(request.masterSystemDiskPerformanceLevel)) {
    body['master_system_disk_performance_level'] = request.masterSystemDiskPerformanceLevel;
  }
  if (!Util.isUnset(request.masterSystemDiskSize)) {
    body['master_system_disk_size'] = request.masterSystemDiskSize;
  }
  if (!Util.isUnset(request.masterSystemDiskSnapshotPolicyId)) {
    body['master_system_disk_snapshot_policy_id'] = request.masterSystemDiskSnapshotPolicyId;
  }
  if (!Util.isUnset(request.masterVswitchIds)) {
    body['master_vswitch_ids'] = request.masterVswitchIds;
  }
  if (!Util.isUnset(request.name)) {
    body['name'] = request.name;
  }
  if (!Util.isUnset(request.natGateway)) {
    body['nat_gateway'] = request.natGateway;
  }
  if (!Util.isUnset(request.nodeCidrMask)) {
    body['node_cidr_mask'] = request.nodeCidrMask;
  }
  if (!Util.isUnset(request.nodeNameMode)) {
    body['node_name_mode'] = request.nodeNameMode;
  }
  if (!Util.isUnset(request.nodePortRange)) {
    body['node_port_range'] = request.nodePortRange;
  }
  if (!Util.isUnset(request.numOfNodes)) {
    body['num_of_nodes'] = request.numOfNodes;
  }
  if (!Util.isUnset(request.osType)) {
    body['os_type'] = request.osType;
  }
  if (!Util.isUnset(request.period)) {
    body['period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    body['period_unit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.platform)) {
    body['platform'] = request.platform;
  }
  if (!Util.isUnset(request.podVswitchIds)) {
    body['pod_vswitch_ids'] = request.podVswitchIds;
  }
  if (!Util.isUnset(request.profile)) {
    body['profile'] = request.profile;
  }
  if (!Util.isUnset(request.proxyMode)) {
    body['proxy_mode'] = request.proxyMode;
  }
  if (!Util.isUnset(request.rdsInstances)) {
    body['rds_instances'] = request.rdsInstances;
  }
  if (!Util.isUnset(request.regionId)) {
    body['region_id'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['resource_group_id'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.runtime)) {
    body['runtime'] = request.runtime;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    body['security_group_id'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.serviceAccountIssuer)) {
    body['service_account_issuer'] = request.serviceAccountIssuer;
  }
  if (!Util.isUnset(request.serviceCidr)) {
    body['service_cidr'] = request.serviceCidr;
  }
  if (!Util.isUnset(request.serviceDiscoveryTypes)) {
    body['service_discovery_types'] = request.serviceDiscoveryTypes;
  }
  if (!Util.isUnset(request.snatEntry)) {
    body['snat_entry'] = request.snatEntry;
  }
  if (!Util.isUnset(request.socEnabled)) {
    body['soc_enabled'] = request.socEnabled;
  }
  if (!Util.isUnset(request.sshFlags)) {
    body['ssh_flags'] = request.sshFlags;
  }
  if (!Util.isUnset(request.tags)) {
    body['tags'] = request.tags;
  }
  if (!Util.isUnset(request.taints)) {
    body['taints'] = request.taints;
  }
  if (!Util.isUnset(request.timeoutMins)) {
    body['timeout_mins'] = request.timeoutMins;
  }
  if (!Util.isUnset(request.timezone)) {
    body['timezone'] = request.timezone;
  }
  if (!Util.isUnset(request.userCa)) {
    body['user_ca'] = request.userCa;
  }
  if (!Util.isUnset(request.userData)) {
    body['user_data'] = request.userData;
  }
  if (!Util.isUnset(request.vpcid)) {
    body['vpcid'] = request.vpcid;
  }
  if (!Util.isUnset(request.vswitchIds)) {
    body['vswitch_ids'] = request.vswitchIds;
  }
  if (!Util.isUnset(request.workerAutoRenew)) {
    body['worker_auto_renew'] = request.workerAutoRenew;
  }
  if (!Util.isUnset(request.workerAutoRenewPeriod)) {
    body['worker_auto_renew_period'] = request.workerAutoRenewPeriod;
  }
  if (!Util.isUnset(request.workerDataDisks)) {
    body['worker_data_disks'] = request.workerDataDisks;
  }
  if (!Util.isUnset(request.workerInstanceChargeType)) {
    body['worker_instance_charge_type'] = request.workerInstanceChargeType;
  }
  if (!Util.isUnset(request.workerInstanceTypes)) {
    body['worker_instance_types'] = request.workerInstanceTypes;
  }
  if (!Util.isUnset(request.workerPeriod)) {
    body['worker_period'] = request.workerPeriod;
  }
  if (!Util.isUnset(request.workerPeriodUnit)) {
    body['worker_period_unit'] = request.workerPeriodUnit;
  }
  if (!Util.isUnset(request.workerSystemDiskCategory)) {
    body['worker_system_disk_category'] = request.workerSystemDiskCategory;
  }
  if (!Util.isUnset(request.workerSystemDiskPerformanceLevel)) {
    body['worker_system_disk_performance_level'] = request.workerSystemDiskPerformanceLevel;
  }
  if (!Util.isUnset(request.workerSystemDiskSize)) {
    body['worker_system_disk_size'] = request.workerSystemDiskSize;
  }
  if (!Util.isUnset(request.workerSystemDiskSnapshotPolicyId)) {
    body['worker_system_disk_snapshot_policy_id'] = request.workerSystemDiskSnapshotPolicyId;
  }
  if (!Util.isUnset(request.workerVswitchIds)) {
    body['worker_vswitch_ids'] = request.workerVswitchIds;
  }
  if (!Util.isUnset(request.zoneId)) {
    body['zone_id'] = request.zoneId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateCluster',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCluster(request: CreateClusterRequest): CreateClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createClusterWithOptions(request, headers, runtime);
}

model CreateClusterNodePoolRequest {
  autoScaling?: {
    eipBandwidth?: long(name='eip_bandwidth', example='5'),
    eipInternetChargeType?: string(name='eip_internet_charge_type', example='PayByBandwidth'),
    enable?: boolean(name='enable', example='true'),
    isBondEip?: boolean(name='is_bond_eip', example='true'),
    maxInstances?: long(name='max_instances', example='10'),
    minInstances?: long(name='min_instances', example='1'),
    type?: string(name='type', example='cpu'),
  }(name='auto_scaling'),
  count?: long(name='count', example='1'),
  interconnectConfig?: {
    bandwidth?: long(name='bandwidth', example='10'),
    ccnId?: string(name='ccn_id', example='ccn-qm5i0i0q9yi*******'),
    ccnRegionId?: string(name='ccn_region_id', example='cn-shanghai'),
    cenId?: string(name='cen_id', example='cen-ey9k9nfhz0f*******'),
    improvedPeriod?: string(name='improved_period', example='1'),
  }(name='interconnect_config'),
  interconnectMode?: string(name='interconnect_mode', example='basic'),
  kubernetesConfig?: {
    cmsEnabled?: boolean(name='cms_enabled', example='true'),
    cpuPolicy?: string(name='cpu_policy', example='none'),
    labels?: [
      Tag
    ](name='labels'),
    nodeNameMode?: string(name='node_name_mode', example='aliyun.com00055test'),
    runtime?: string(name='runtime', example='docker'),
    runtimeVersion?: string(name='runtime_version', example='19.03.5'),
    taints?: [
      Taint
    ](name='taints'),
    userData?: string(name='user_data', example='dGhpcyBpcyBhIGV4YW1wbGU='),
  }(name='kubernetes_config'),
  management?: {
    autoRepair?: boolean(name='auto_repair', example='false'),
    enable?: boolean(name='enable', example='false'),
    upgradeConfig?: {
      autoUpgrade?: boolean(name='auto_upgrade', example='false'),
      maxUnavailable?: long(name='max_unavailable', example='1'),
      surge?: long(name='surge', example='0'),
      surgePercentage?: long(name='surge_percentage', example='0'),
    }(name='upgrade_config'),
  }(name='management'),
  maxNodes?: long(name='max_nodes', example='10'),
  nodepoolInfo?: {
    name?: string(name='name', example='cluster-demo'),
    resourceGroupId?: string(name='resource_group_id', example='rg-acfmyvw3wjmb****'),
    type?: string(name='type', example='ess'),
  }(name='nodepool_info'),
  scalingGroup?: {
    autoRenew?: boolean(name='auto_renew', example='true'),
    autoRenewPeriod?: long(name='auto_renew_period', example='1'),
    compensateWithOnDemand?: boolean(name='compensate_with_on_demand', example='true'),
    dataDisks?: [
      DataDisk
    ](name='data_disks'),
    deploymentsetId?: string(name='deploymentset_id', example='ds-bp1d19mmbsv3jf6xxxxx'),
    desiredSize?: long(name='desired_size', example='0'),
    imageId?: string(name='image_id', example='aliyun_2_1903_x64_20G_alibase_20200529.vhd'),
    imageType?: string(name='image_type', example='AliyunLinux'),
    instanceChargeType?: string(name='instance_charge_type', example='PrePaid'),
    instanceTypes?: [ string ](name='instance_types'),
    internetChargeType?: string(name='internet_charge_type', example='PayByTraffic'),
    internetMaxBandwidthOut?: long(name='internet_max_bandwidth_out', example='5'),
    keyPair?: string(name='key_pair', example='np-key-name'),
    loginPassword?: string(name='login_password', example='Hello1234'),
    multiAzPolicy?: string(name='multi_az_policy', example='COST_OPTIMIZED'),
    onDemandBaseCapacity?: long(name='on_demand_base_capacity', example='0'),
    onDemandPercentageAboveBaseCapacity?: long(name='on_demand_percentage_above_base_capacity', example='20'),
    period?: long(name='period', example='1'),
    periodUnit?: string(name='period_unit', example='Month'),
    platform?: string(name='platform', example='Linux'),
    rdsInstances?: [ string ](name='rds_instances'),
    scalingPolicy?: string(name='scaling_policy', example='release'),
    securityGroupId?: string(name='security_group_id', example='sg-wz9a8g2mt6x5llu0****'),
    securityGroupIds?: [ string ](name='security_group_ids'),
    spotInstancePools?: long(name='spot_instance_pools', example='5'),
    spotInstanceRemedy?: boolean(name='spot_instance_remedy', example='false'),
    spotPriceLimit?: [ 
      {
        instanceType?: string(name='instance_type', example='ecs.c6.large'),
        priceLimit?: string(name='price_limit', example='0.39'),
      }
    ](name='spot_price_limit'),
    spotStrategy?: string(name='spot_strategy', example='NoSpot'),
    systemDiskCategory?: string(name='system_disk_category', example='cloud_efficiency'),
    systemDiskPerformanceLevel?: string(name='system_disk_performance_level', example='PL1'),
    systemDiskSize?: long(name='system_disk_size', example='120'),
    tags?: [ 
      {
        key?: string(name='key', example='node-k-1'),
        value?: string(name='value', example='node-v-1'),
      }
    ](name='tags'),
    vswitchIds?: [ string ](name='vswitch_ids'),
  }(name='scaling_group'),
  teeConfig?: {
    teeEnable?: boolean(name='tee_enable', example='true'),
  }(name='tee_config'),
}

model CreateClusterNodePoolResponseBody = {
  nodepoolId?: string(name='nodepool_id', example='np31da1b38983f4511b490fc62108a****'),
}

model CreateClusterNodePoolResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateClusterNodePoolResponseBody(name='body'),
}

async function createClusterNodePoolWithOptions(ClusterId: string, request: CreateClusterNodePoolRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateClusterNodePoolResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.autoScaling)) {
    body['auto_scaling'] = request.autoScaling;
  }
  if (!Util.isUnset(request.count)) {
    body['count'] = request.count;
  }
  if (!Util.isUnset(request.interconnectConfig)) {
    body['interconnect_config'] = request.interconnectConfig;
  }
  if (!Util.isUnset(request.interconnectMode)) {
    body['interconnect_mode'] = request.interconnectMode;
  }
  if (!Util.isUnset(request.kubernetesConfig)) {
    body['kubernetes_config'] = request.kubernetesConfig;
  }
  if (!Util.isUnset(request.management)) {
    body['management'] = request.management;
  }
  if (!Util.isUnset(request.maxNodes)) {
    body['max_nodes'] = request.maxNodes;
  }
  if (!Util.isUnset(request.nodepoolInfo)) {
    body['nodepool_info'] = request.nodepoolInfo;
  }
  if (!Util.isUnset(request.scalingGroup)) {
    body['scaling_group'] = request.scalingGroup;
  }
  if (!Util.isUnset(request.teeConfig)) {
    body['tee_config'] = request.teeConfig;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateClusterNodePool',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/nodepools`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createClusterNodePool(ClusterId: string, request: CreateClusterNodePoolRequest): CreateClusterNodePoolResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createClusterNodePoolWithOptions(ClusterId, request, headers, runtime);
}

model CreateEdgeMachineRequest {
  hostname?: string(name='hostname', example='ACK-B-B010-****'),
  model?: string(name='model', example='ACK-V-B010'),
  sn?: string(name='sn', example='Q2CB5XZAFBFG****'),
}

model CreateEdgeMachineResponseBody = {
  edgeMachineId?: string(name='edge_machine_id', example='cc0725ddf688744979cd98445f67e****'),
  requestId?: string(name='request_id', example='"request_id": "6e7b377a-c5ed-4388-8026-689e1b34****",'),
}

model CreateEdgeMachineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateEdgeMachineResponseBody(name='body'),
}

async function createEdgeMachineWithOptions(request: CreateEdgeMachineRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateEdgeMachineResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.hostname)) {
    body['hostname'] = request.hostname;
  }
  if (!Util.isUnset(request.model)) {
    body['model'] = request.model;
  }
  if (!Util.isUnset(request.sn)) {
    body['sn'] = request.sn;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateEdgeMachine',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/edge_machines`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createEdgeMachine(request: CreateEdgeMachineRequest): CreateEdgeMachineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createEdgeMachineWithOptions(request, headers, runtime);
}

model CreateKubernetesTriggerRequest {
  action?: string(name='action', example='redeploy'),
  clusterId?: string(name='cluster_id', example='c5cdf7e3938bc4f8eb0e44b21a80f****'),
  projectId?: string(name='project_id', example='default/test-app'),
  type?: string(name='type', example='deployment'),
}

model CreateKubernetesTriggerResponseBody = {
  action?: string(name='action', example='redeploy'),
  clusterId?: string(name='cluster_id', example='c5cdf7e3938bc4f8eb0e44b21a80f****'),
  id?: string(name='id', example='111'),
  projectId?: string(name='project_id', example='default/test-app'),
  type?: string(name='type', example='deployment'),
}

model CreateKubernetesTriggerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateKubernetesTriggerResponseBody(name='body'),
}

async function createKubernetesTriggerWithOptions(request: CreateKubernetesTriggerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateKubernetesTriggerResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.action)) {
    body['action'] = request.action;
  }
  if (!Util.isUnset(request.clusterId)) {
    body['cluster_id'] = request.clusterId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['project_id'] = request.projectId;
  }
  if (!Util.isUnset(request.type)) {
    body['type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateKubernetesTrigger',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/triggers`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createKubernetesTrigger(request: CreateKubernetesTriggerRequest): CreateKubernetesTriggerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createKubernetesTriggerWithOptions(request, headers, runtime);
}

model CreateTemplateRequest {
  description?: string(name='description', example='this is test'),
  name?: string(name='name', example='service-account-template'),
  tags?: string(name='tags', example='test'),
  template?: string(name='template', example='apiVersion: v1\\nkind: ServiceAccount\\nmetadata:\\n  name: test-sa'),
  templateType?: string(name='template_type', example='kubernetes'),
}

model CreateTemplateResponseBody = {
  templateId?: string(name='template_id', example='ba1fe77b-b01e-4640-b77e-8f1b80e3e3cf'),
}

model CreateTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTemplateResponseBody(name='body'),
}

async function createTemplateWithOptions(request: CreateTemplateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateTemplateResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    body['name'] = request.name;
  }
  if (!Util.isUnset(request.tags)) {
    body['tags'] = request.tags;
  }
  if (!Util.isUnset(request.template)) {
    body['template'] = request.template;
  }
  if (!Util.isUnset(request.templateType)) {
    body['template_type'] = request.templateType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateTemplate',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/templates`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTemplate(request: CreateTemplateRequest): CreateTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createTemplateWithOptions(request, headers, runtime);
}

model CreateTriggerRequest {
  action?: string(name='action', example='redeploy'),
  clusterId?: string(name='cluster_id', example='c5cdf7e3938bc4f8eb0e44b21a80f****'),
  projectId?: string(name='project_id', example='default/test-app'),
  type?: string(name='type', example='deployment'),
}

model CreateTriggerResponseBody = {
  action?: string(name='action', example='redeploy'),
  clusterId?: string(name='cluster_id', example='c93095129fc41463aa455d89444fd****'),
  id?: string(name='id', example='102536'),
  projectId?: string(name='project_id', example='default/test-app'),
  type?: string(name='type', example='deployment'),
}

model CreateTriggerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTriggerResponseBody(name='body'),
}

async function createTriggerWithOptions(clusterId: string, request: CreateTriggerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateTriggerResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.action)) {
    body['action'] = request.action;
  }
  if (!Util.isUnset(request.clusterId)) {
    body['cluster_id'] = request.clusterId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['project_id'] = request.projectId;
  }
  if (!Util.isUnset(request.type)) {
    body['type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateTrigger',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(clusterId)}/triggers`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTrigger(clusterId: string, request: CreateTriggerRequest): CreateTriggerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createTriggerWithOptions(clusterId, request, headers, runtime);
}

model DeleteAlertContactResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteAlertContactWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): DeleteAlertContactResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteAlertContact',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/alert/contacts`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function deleteAlertContact(): DeleteAlertContactResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteAlertContactWithOptions(headers, runtime);
}

model DeleteAlertContactGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteAlertContactGroupWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): DeleteAlertContactGroupResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteAlertContactGroup',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/alert/contact_groups`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function deleteAlertContactGroup(): DeleteAlertContactGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteAlertContactGroupWithOptions(headers, runtime);
}

model DeleteClusterRequest {
  keepSlb?: boolean(name='keep_slb', example='false'),
  retainAllResources?: boolean(name='retain_all_resources', example='false'),
  retainResources?: [ string ](name='retain_resources'),
}

model DeleteClusterShrinkRequest {
  keepSlb?: boolean(name='keep_slb', example='false'),
  retainAllResources?: boolean(name='retain_all_resources', example='false'),
  retainResourcesShrink?: string(name='retain_resources'),
}

model DeleteClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteClusterWithOptions(ClusterId: string, tmpReq: DeleteClusterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteClusterResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteClusterShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.retainResources)) {
    request.retainResourcesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.retainResources, 'retain_resources', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.keepSlb)) {
    query['keep_slb'] = request.keepSlb;
  }
  if (!Util.isUnset(request.retainAllResources)) {
    query['retain_all_resources'] = request.retainAllResources;
  }
  if (!Util.isUnset(request.retainResourcesShrink)) {
    query['retain_resources'] = request.retainResourcesShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCluster',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function deleteCluster(ClusterId: string, request: DeleteClusterRequest): DeleteClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteClusterWithOptions(ClusterId, request, headers, runtime);
}

model DeleteClusterNodepoolRequest {
  force?: boolean(name='force', example='false'),
}

model DeleteClusterNodepoolResponseBody = {
  requestId?: string(name='request_id', example='7263C978-3DBD-4E06-B319-793B38A2F388'),
}

model DeleteClusterNodepoolResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteClusterNodepoolResponseBody(name='body'),
}

async function deleteClusterNodepoolWithOptions(ClusterId: string, NodepoolId: string, request: DeleteClusterNodepoolRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteClusterNodepoolResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.force)) {
    query['force'] = request.force;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteClusterNodepool',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/nodepools/${OpenApiUtil.getEncodeParam(NodepoolId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteClusterNodepool(ClusterId: string, NodepoolId: string, request: DeleteClusterNodepoolRequest): DeleteClusterNodepoolResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteClusterNodepoolWithOptions(ClusterId, NodepoolId, request, headers, runtime);
}

model DeleteClusterNodesRequest {
  drainNode?: boolean(name='drain_node', example='true'),
  nodes?: [ string ](name='nodes'),
  releaseNode?: boolean(name='release_node', example='true'),
}

model DeleteClusterNodesResponseBody = {
  clusterId?: string(name='cluster_id', example='c104d5d5f301c4e2a8ee578c37bc****'),
  requestId?: string(name='request_id', example='A9891419-D125-4D89-AFCA-68846675E2F7'),
  taskId?: string(name='task_id', example='T-60fea8ad2e277f0879000ae9'),
}

model DeleteClusterNodesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteClusterNodesResponseBody(name='body'),
}

async function deleteClusterNodesWithOptions(ClusterId: string, request: DeleteClusterNodesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteClusterNodesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.drainNode)) {
    body['drain_node'] = request.drainNode;
  }
  if (!Util.isUnset(request.nodes)) {
    body['nodes'] = request.nodes;
  }
  if (!Util.isUnset(request.releaseNode)) {
    body['release_node'] = request.releaseNode;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteClusterNodes',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/nodes`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteClusterNodes(ClusterId: string, request: DeleteClusterNodesRequest): DeleteClusterNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteClusterNodesWithOptions(ClusterId, request, headers, runtime);
}

model DeleteEdgeMachineRequest {
  force?: string(name='force', example='True/False'),
}

model DeleteEdgeMachineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteEdgeMachineWithOptions(edgeMachineid: string, request: DeleteEdgeMachineRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteEdgeMachineResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.force)) {
    query['force'] = request.force;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEdgeMachine',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/edge_machines/%5Bedge_machineid%5D`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function deleteEdgeMachine(edgeMachineid: string, request: DeleteEdgeMachineRequest): DeleteEdgeMachineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteEdgeMachineWithOptions(edgeMachineid, request, headers, runtime);
}

model DeleteKubernetesTriggerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteKubernetesTriggerWithOptions(Id: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteKubernetesTriggerResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteKubernetesTrigger',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/triggers/revoke/${OpenApiUtil.getEncodeParam(Id)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function deleteKubernetesTrigger(Id: string): DeleteKubernetesTriggerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteKubernetesTriggerWithOptions(Id, headers, runtime);
}

model DeletePolicyInstanceRequest {
  instanceName?: string(name='instance_name', example='allowed-repos-mqdsf'),
}

model DeletePolicyInstanceResponseBody = {
  instances?: [ string ](name='instances'),
}

model DeletePolicyInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeletePolicyInstanceResponseBody(name='body'),
}

async function deletePolicyInstanceWithOptions(clusterId: string, policyName: string, request: DeletePolicyInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeletePolicyInstanceResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.instanceName)) {
    query['instance_name'] = request.instanceName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeletePolicyInstance',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(clusterId)}/policies/${OpenApiUtil.getEncodeParam(policyName)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deletePolicyInstance(clusterId: string, policyName: string, request: DeletePolicyInstanceRequest): DeletePolicyInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deletePolicyInstanceWithOptions(clusterId, policyName, request, headers, runtime);
}

model DeleteTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteTemplateWithOptions(TemplateId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteTemplateResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteTemplate',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/templates/${OpenApiUtil.getEncodeParam(TemplateId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function deleteTemplate(TemplateId: string): DeleteTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteTemplateWithOptions(TemplateId, headers, runtime);
}

model DeleteTriggerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteTriggerWithOptions(clusterId: string, Id: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteTriggerResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteTrigger',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/%5Bcluster_id%5D/triggers/%5BId%5D`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function deleteTrigger(clusterId: string, Id: string): DeleteTriggerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteTriggerWithOptions(clusterId, Id, headers, runtime);
}

model DeployPolicyInstanceRequest {
  action?: string(name='action', example='deny'),
  namespaces?: [ string ](name='namespaces'),
  parameters?: map[string]any(name='parameters', example='{"restrictedNamespaces": [ "test" ]}'),
}

model DeployPolicyInstanceResponseBody = {
  instances?: [ string ](name='instances'),
}

model DeployPolicyInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeployPolicyInstanceResponseBody(name='body'),
}

async function deployPolicyInstanceWithOptions(clusterId: string, policyName: string, request: DeployPolicyInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeployPolicyInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.action)) {
    body['action'] = request.action;
  }
  if (!Util.isUnset(request.namespaces)) {
    body['namespaces'] = request.namespaces;
  }
  if (!Util.isUnset(request.parameters)) {
    body['parameters'] = request.parameters;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeployPolicyInstance',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(clusterId)}/policies/${OpenApiUtil.getEncodeParam(policyName)}`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deployPolicyInstance(clusterId: string, policyName: string, request: DeployPolicyInstanceRequest): DeployPolicyInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deployPolicyInstanceWithOptions(clusterId, policyName, request, headers, runtime);
}

model DescirbeWorkflowResponseBody = {
  createTime?: string(name='create_time', example='2020-01-15 16:30:25 +0800 CST'),
  duration?: string(name='duration', example='1h15m33.529968361s'),
  finishTime?: string(name='finish_time', example='0001-01-01 00:00:00 +0000 UTC'),
  inputDataSize?: string(name='input_data_size', example='0'),
  jobName?: string(name='job_name', example='wgs-gpu-97xfn'),
  jobNamespace?: string(name='job_namespace', example='1171330362041663'),
  outputDataSize?: string(name='output_data_size', example='0'),
  status?: string(name='status', example='Running'),
  totalBases?: string(name='total_bases', example='0'),
  totalReads?: string(name='total_reads', example='0'),
  userInputData?: string(name='user_input_data', example='{\\"wgs_oss_region\\":\\"cn-shenzhen\\",\\"wgs_fastq_first_name\\":\\"fastq/huada/MGISEQ-200019SZ0002402\\",\\"wgs_fastq_second_name\\":\\"fastq/huada/MGISEQ-200019SZ0002402\\",\\"wgs_bucket_name\\":\\"gene-shenzhen\\",\\"wgs_vcf_file_name\\":\\"output/vcf/huada.vcf\\",\\"wgs_bam_file_name\\":\\"output/bam/huada.bam\\",\\"wgs_reference_file\\":\\"hg19\\",\\"wgs_service\\":\\"g\\"}'),
}

model DescirbeWorkflowResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescirbeWorkflowResponseBody(name='body'),
}

async function descirbeWorkflowWithOptions(workflowName: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescirbeWorkflowResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescirbeWorkflow',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/gs/workflow/${OpenApiUtil.getEncodeParam(workflowName)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function descirbeWorkflow(workflowName: string): DescirbeWorkflowResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return descirbeWorkflowWithOptions(workflowName, headers, runtime);
}

model DescribeAddonsRequest {
  clusterProfile?: string(name='cluster_profile'),
  clusterSpec?: string(name='cluster_spec'),
  clusterType?: string(name='cluster_type', example='kubernetes'),
  clusterVersion?: string(name='cluster_version'),
  region?: string(name='region', example='cn-beijing'),
}

model DescribeAddonsResponseBody = {
  componentGroups?: [ 
    {
      groupName?: string(name='group_name', example='storage'),
      items?: [ 
        {
          name?: string(name='name', example='flexvolume'),
        }
      ](name='items'),
    }
  ](name='ComponentGroups'),
  standardComponents?: map[string]StandardComponentsValue(name='StandardComponents'),
}

model DescribeAddonsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAddonsResponseBody(name='body'),
}

async function describeAddonsWithOptions(request: DescribeAddonsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeAddonsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.clusterProfile)) {
    query['cluster_profile'] = request.clusterProfile;
  }
  if (!Util.isUnset(request.clusterSpec)) {
    query['cluster_spec'] = request.clusterSpec;
  }
  if (!Util.isUnset(request.clusterType)) {
    query['cluster_type'] = request.clusterType;
  }
  if (!Util.isUnset(request.clusterVersion)) {
    query['cluster_version'] = request.clusterVersion;
  }
  if (!Util.isUnset(request.region)) {
    query['region'] = request.region;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAddons',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/components/metadata`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAddons(request: DescribeAddonsRequest): DescribeAddonsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeAddonsWithOptions(request, headers, runtime);
}

model DescribeClusterAddonMetadataResponseBody = {
  configSchema?: string(name='config_schema', example='{\\n  \\"$schema\\": \\"https://json-schema.org/draft-07/schema#\\",\\n  \\"properties\\": {\\n    \\"controller\\": {\\n      \\"description\\": \\"\\",\\n      \\"properties\\": {\\n        \\"resources\\": {\\n          \\"properties\\": {\\n            \\"armsPrometheusOperator\\": {\\n              \\"properties\\": {\\n                \\"resources\\": {\\n                  \\"properties\\": {\\n                    \\"limits\\": {\\n                      \\"properties\\": {\\n                        \\"memory\\": {\\n                          \\"description\\": \\"memory limit of arms prometheus operator\\",\\n                          \\"type\\": \\"string\\",\\n                          \\"pattern\\": \\"^[1-9][0-9]*(\\\\\\\\.\\\\\\\\d+)?(K|Ki|M|Mi|G|Gi|T|Ti)?$\\",\\n                          \\"default\\": \\"500m\\",\\n                          \\"x-ui-description\\": \\"<mds-key>\\",\\n                          \\"x-ui-prompt-message\\": \\"<mds-key>\\",\\n                          \\"x-ui-validation-message\\": \\"<mds-key>\\",\\n                          \\"x-ui-additional-tips\\": \\"<mds-key>\\"\\n                        },\\n                        \\"cpu\\": {\\n                          \\"description\\": \\"cpu limit of arms prometheus operator\\",\\n                          \\"type\\": \\"string\\",\\n                          \\"pattern\\": \\"^[1-9][0-9]*(m|\\\\\\\\.\\\\\\\\d+)?$\\",\\n                          \\"default\\": \\"1.0\\",\\n                          \\"x-ui-description\\": \\"<mds-key>\\",\\n                          \\"x-ui-validation-message\\": \\"<mds-key>\\"\\n                        }\\n                      },\\n                      \\"type\\": \\"object\\",\\n                      \\"additionalProperties\\": false\\n                    },\\n                    \\"requests\\": {\\n                      \\"properties\\": {\\n                        \\"memory\\": {\\n                          \\"description\\": \\"memory request of arms prometheus operator\\",\\n                          \\"type\\": \\"string\\",\\n                          \\"pattern\\": \\"^[1-9][0-9]*(\\\\\\\\.\\\\\\\\d+)?(K|Ki|M|Mi|G|Gi|T|Ti)?$\\",\\n                          \\"default\\": \\"500m\\",\\n                          \\"x-ui-description\\": \\"<mds-key>\\",\\n                          \\"x-ui-validation-message\\": \\"<mds-key>\\"\\n                        },\\n                        \\"cpu\\": {\\n                          \\"description\\": \\"cpu request of arms prometheus operator\\",\\n                          \\"type\\": \\"string\\",\\n                          \\"pattern\\": \\"^[1-9][0-9]*(m|\\\\\\\\.\\\\\\\\d+)?$\\",\\n                          \\"default\\": \\"1.0\\",\\n                          \\"x-ui-description\\": \\"<mds-key>\\",\\n                          \\"x-ui-validation-message\\": \\"<mds-key>\\"\\n                        }\\n                      },\\n                      \\"type\\": \\"object\\",\\n                      \\"additionalProperties\\": false\\n                    }\\n                  },\\n                  \\"type\\": \\"object\\",\\n                  \\"additionalProperties\\": false\\n                }\\n              },\\n              \\"type\\": \\"object\\",\\n              \\"additionalProperties\\": false\\n            }\\n          },\\n          \\"type\\": \\"object\\",\\n          \\"additionalProperties\\": false\\n        }\\n      },\\n      \\"type\\": \\"object\\",\\n      \\"additionalProperties\\": false\\n    }\\n  },\\n  \\"title\\": \\"Values\\",\\n  \\"type\\": \\"object\\",\\n  \\"additionalProperties\\": false\\n}'),
  name?: string(name='name', example='coredns'),
  version?: string(name='version', example='1.8.4.1'),
}

model DescribeClusterAddonMetadataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClusterAddonMetadataResponseBody(name='body'),
}

async function describeClusterAddonMetadataWithOptions(clusterId: string, componentId: string, version: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeClusterAddonMetadataResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusterAddonMetadata',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(clusterId)}/components/${OpenApiUtil.getEncodeParam(componentId)}/metadata`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClusterAddonMetadata(clusterId: string, componentId: string, version: string): DescribeClusterAddonMetadataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeClusterAddonMetadataWithOptions(clusterId, componentId, version, headers, runtime);
}

model DescribeClusterAddonUpgradeStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: object(name='body'),
}

/**
  * @deprecated
  *
  * @param headers map
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeClusterAddonUpgradeStatusResponse
 */
// Deprecated
async function describeClusterAddonUpgradeStatusWithOptions(ClusterId: string, ComponentId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeClusterAddonUpgradeStatusResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusterAddonUpgradeStatus',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/components/${OpenApiUtil.getEncodeParam(ComponentId)}/upgradestatus`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @return DescribeClusterAddonUpgradeStatusResponse
 */
// Deprecated
async function describeClusterAddonUpgradeStatus(ClusterId: string, ComponentId: string): DescribeClusterAddonUpgradeStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeClusterAddonUpgradeStatusWithOptions(ClusterId, ComponentId, headers, runtime);
}

model DescribeClusterAddonsUpgradeStatusRequest {
  componentIds?: [ string ](name='componentIds'),
}

model DescribeClusterAddonsUpgradeStatusShrinkRequest {
  componentIdsShrink?: string(name='componentIds'),
}

model DescribeClusterAddonsUpgradeStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: object(name='body'),
}

async function describeClusterAddonsUpgradeStatusWithOptions(ClusterId: string, tmpReq: DescribeClusterAddonsUpgradeStatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeClusterAddonsUpgradeStatusResponse {
  Util.validateModel(tmpReq);
  var request = new DescribeClusterAddonsUpgradeStatusShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.componentIds)) {
    request.componentIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.componentIds, 'componentIds', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.componentIdsShrink)) {
    query['componentIds'] = request.componentIdsShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusterAddonsUpgradeStatus',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/components/upgradestatus`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClusterAddonsUpgradeStatus(ClusterId: string, request: DescribeClusterAddonsUpgradeStatusRequest): DescribeClusterAddonsUpgradeStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeClusterAddonsUpgradeStatusWithOptions(ClusterId, request, headers, runtime);
}

model DescribeClusterAddonsVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: object(name='body'),
}

async function describeClusterAddonsVersionWithOptions(ClusterId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeClusterAddonsVersionResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusterAddonsVersion',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/components/version`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClusterAddonsVersion(ClusterId: string): DescribeClusterAddonsVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeClusterAddonsVersionWithOptions(ClusterId, headers, runtime);
}

model DescribeClusterAttachScriptsRequest {
  arch?: string(name='arch', example='amd64'),
  formatDisk?: boolean(name='format_disk', example='false'),
  keepInstanceName?: boolean(name='keep_instance_name', example='true'),
  nodepoolId?: string(name='nodepool_id', example='np1c9229d9be2d432c93f77a88fca0****'),
  options?: string(name='options', example='{\\"enableIptables\\": true,\\"manageRuntime\\": true,\\"quiet\\": true,\\"allowedClusterAddons\\": [\\"kube-proxy\\",\\"flannel\\",\\"coredns\\"]}'),
  rdsInstances?: [ string ](name='rds_instances'),
}

model DescribeClusterAttachScriptsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: string(name='body'),
}

async function describeClusterAttachScriptsWithOptions(ClusterId: string, request: DescribeClusterAttachScriptsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeClusterAttachScriptsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.arch)) {
    body['arch'] = request.arch;
  }
  if (!Util.isUnset(request.formatDisk)) {
    body['format_disk'] = request.formatDisk;
  }
  if (!Util.isUnset(request.keepInstanceName)) {
    body['keep_instance_name'] = request.keepInstanceName;
  }
  if (!Util.isUnset(request.nodepoolId)) {
    body['nodepool_id'] = request.nodepoolId;
  }
  if (!Util.isUnset(request.options)) {
    body['options'] = request.options;
  }
  if (!Util.isUnset(request.rdsInstances)) {
    body['rds_instances'] = request.rdsInstances;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusterAttachScripts',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/attachscript`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'string',
  };
  return callApi(params, req, runtime);
}

async function describeClusterAttachScripts(ClusterId: string, request: DescribeClusterAttachScriptsRequest): DescribeClusterAttachScriptsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeClusterAttachScriptsWithOptions(ClusterId, request, headers, runtime);
}

model DescribeClusterDetailResponseBody = {
  clusterId?: string(name='cluster_id', example='c82e6987e2961451182edacd74faf****'),
  clusterSpec?: string(name='cluster_spec', example='ack.pro.small'),
  clusterType?: string(name='cluster_type', example='Kubernetes'),
  created?: string(name='created', example='2019-11-25T15:50:20+08:00'),
  currentVersion?: string(name='current_version', example='1.16.6-aliyun.1'),
  deletionProtection?: boolean(name='deletion_protection', example='true'),
  dockerVersion?: string(name='docker_version', example='19.03.5'),
  externalLoadbalancerId?: string(name='external_loadbalancer_id', example='lb-2ze3buguz3gx9920z****'),
  initVersion?: string(name='init_version', example='1.16.6-aliyun.1'),
  maintenanceWindow?: MaintenanceWindow(name='maintenance_window'),
  masterUrl?: string(name='master_url', example='{\\"intranet_api_server_endpoint\\":\\"https://192.168.0.251:6443\\"***}'),
  metaData?: string(name='meta_data', example='\\"Addons\\":***'),
  name?: string(name='name', example='cluster-demo'),
  networkMode?: string(name='network_mode', example='vpc'),
  nextVersion?: string(name='next_version', example='1.18.8-aliyun.1'),
  privateZone?: boolean(name='private_zone', example='false'),
  profile?: string(name='profile', example='Default'),
  regionId?: string(name='region_id', example='cn-beijing'),
  resourceGroupId?: string(name='resource_group_id', example='rg-acfmyvw3wjm****'),
  securityGroupId?: string(name='security_group_id', example='sg-25yq****'),
  size?: long(name='size', example='5'),
  state?: string(name='state', example='running'),
  subnetCidr?: string(name='subnet_cidr', example='172.20.0.0/16'),
  tags?: [
    Tag
  ](name='tags'),
  updated?: string(name='updated', example='2020-01-13T23:01:03+08:00'),
  vpcId?: string(name='vpc_id', example='vpc-2zecuu62b9zw7a7qn****'),
  vswitchId?: string(name='vswitch_id', example='vsw-2zete8s4qocqg0mf6****,vsw-2zete8s4qocqg0mf6****'),
  workerRamRoleName?: string(name='worker_ram_role_name', example='KubernetesWorkerRole-ec87d15b-edca-4302-933f-c8a16bf0****'),
  zoneId?: string(name='zone_id', example='cn-beijing-a'),
}

model DescribeClusterDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClusterDetailResponseBody(name='body'),
}

async function describeClusterDetailWithOptions(ClusterId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeClusterDetailResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusterDetail',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClusterDetail(ClusterId: string): DescribeClusterDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeClusterDetailWithOptions(ClusterId, headers, runtime);
}

model DescribeClusterEventsRequest {
  pageNumber?: long(name='page_number', example='1'),
  pageSize?: long(name='page_size', example='50'),
  taskId?: long(name='task_id', example='T-xascadasd*****'),
}

model DescribeClusterEventsResponseBody = {
  events?: [ 
    {
      clusterId?: string(name='cluster_id', example='c82e6987e2961451182edacd74faf****'),
      data?: {
        level?: string(name='level', example='info'),
        message?: string(name='message', example='Start to upgrade NodePool nodePool/npdd89dc2b76c04f14b06774883b******'),
        reason?: string(name='reason', example='Started'),
      }(name='data'),
      eventId?: string(name='event_id', example='e-9ad04f72-8ee7-46bf-a02c-e4a06b39****'),
      source?: string(name='source', example='cluster'),
      subject?: string(name='subject', example='npdd89dc2b76c04f14b06774883b******'),
      time?: string(name='time', example='2020-12-01T17:31:00Z'),
      type?: string(name='type', example='nodepool_update'),
    }
  ](name='events'),
  pageInfo?: {
    pageNumber?: long(name='page_number', example='1'),
    pageSize?: long(name='page_size', example='50'),
    totalCount?: long(name='total_count', example='3'),
  }(name='page_info'),
}

model DescribeClusterEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClusterEventsResponseBody(name='body'),
}

async function describeClusterEventsWithOptions(ClusterId: string, request: DescribeClusterEventsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeClusterEventsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['page_number'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.taskId)) {
    query['task_id'] = request.taskId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusterEvents',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/events`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClusterEvents(ClusterId: string, request: DescribeClusterEventsRequest): DescribeClusterEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeClusterEventsWithOptions(ClusterId, request, headers, runtime);
}

model DescribeClusterLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: [ 
    {
      ID?: long(name='ID', example='590749245'),
      clusterId?: string(name='cluster_id', example='c23421cfa74454bc8b37163fd19af***'),
      clusterLog?: string(name='cluster_log', example='start to update cluster status to CREATE_COMPLETE'),
      created?: string(name='created', example='2020-09-11T10:11:51+08:00'),
      updated?: string(name='updated', example='2020-09-11T10:11:51+08:00'),
    }
  ](name='body'),
}

async function describeClusterLogsWithOptions(ClusterId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeClusterLogsResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusterLogs',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/logs`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'array',
  };
  return callApi(params, req, runtime);
}

async function describeClusterLogs(ClusterId: string): DescribeClusterLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeClusterLogsWithOptions(ClusterId, headers, runtime);
}

model DescribeClusterNodePoolDetailResponseBody = {
  autoScaling?: {
    eipBandwidth?: long(name='eip_bandwidth', example='5'),
    eipInternetChargeType?: string(name='eip_internet_charge_type', example='PayByBandwidth'),
    enable?: boolean(name='enable', example='true'),
    isBondEip?: boolean(name='is_bond_eip', example='true'),
    maxInstances?: long(name='max_instances', example='10'),
    minInstances?: long(name='min_instances', example='1'),
    type?: string(name='type', example='cpu'),
  }(name='auto_scaling'),
  interconnectConfig?: {
    bandwidth?: long(name='bandwidth', example='10'),
    ccnId?: string(name='ccn_id', example='ccn-qm5i0i0q9yi*******'),
    ccnRegionId?: string(name='ccn_region_id', example='cn-shanghai'),
    cenId?: string(name='cen_id', example='cen-ey9k9nfhz0f*******'),
    improvedPeriod?: string(name='improved_period', example='1'),
  }(name='interconnect_config'),
  interconnectMode?: string(name='interconnect_mode', example='improved'),
  kubernetesConfig?: {
    cmsEnabled?: boolean(name='cms_enabled', example='true'),
    cpuPolicy?: string(name='cpu_policy', example='none'),
    labels?: [
      Tag
    ](name='labels'),
    nodeNameMode?: string(name='node_name_mode', example='customized,test.,5,.com'),
    runtime?: string(name='runtime', example='docker'),
    runtimeVersion?: string(name='runtime_version', example='19.03.5'),
    taints?: [
      Taint
    ](name='taints'),
    userData?: string(name='user_data', example='IyEvYmluL3NoCmVjaG8gIkhlbGxvIEFDSyEi'),
  }(name='kubernetes_config'),
  management?: {
    autoRepair?: boolean(name='auto_repair', example='true'),
    enable?: boolean(name='enable', example='true'),
    upgradeConfig?: {
      autoUpgrade?: boolean(name='auto_upgrade', example='true'),
      maxUnavailable?: long(name='max_unavailable', example='1'),
      surge?: long(name='surge', example='5'),
      surgePercentage?: long(name='surge_percentage', example='50'),
    }(name='upgrade_config'),
  }(name='management'),
  maxNodes?: long(name='max_nodes', example='10'),
  nodepoolInfo?: {
    created?: string(name='created', example='2020-09-27T19:14:09.156823496+08:00'),
    isDefault?: boolean(name='is_default', example='true'),
    name?: string(name='name', example='default-nodepool'),
    nodepoolId?: string(name='nodepool_id', example='np615c0e0966124216a0412e10afe0****'),
    regionId?: string(name='region_id', example='cn-beijing'),
    resourceGroupId?: string(name='resource_group_id', example='rg-acfmyvw3wjmb****'),
    type?: string(name='type', example='ess'),
    updated?: string(name='updated', example='2020-09-27T20:37:46+08:00'),
  }(name='nodepool_info'),
  scalingGroup?: {
    autoRenew?: boolean(name='auto_renew', example='false'),
    autoRenewPeriod?: long(name='auto_renew_period', example='1'),
    compensateWithOnDemand?: boolean(name='compensate_with_on_demand', example='true'),
    dataDisks?: [
      DataDisk
    ](name='data_disks'),
    deploymentsetId?: string(name='deploymentset_id', example='ds-bp1d19mmbsv3jf6xxxxx'),
    desiredSize?: long(name='desired_size', example='2'),
    imageId?: string(name='image_id', example='aliyun_2_1903_x64_20G_alibase_20200529.vhd'),
    instanceChargeType?: string(name='instance_charge_type', example='PostPaid'),
    instanceTypes?: [ string ](name='instance_types'),
    internetChargeType?: string(name='internet_charge_type', example='PayByBandwidth'),
    internetMaxBandwidthOut?: long(name='internet_max_bandwidth_out', example='10'),
    keyPair?: string(name='key_pair', example='pro-nodepool'),
    loginPassword?: string(name='login_password', example='********'),
    multiAzPolicy?: string(name='multi_az_policy', example='BALANCE'),
    onDemandBaseCapacity?: long(name='on_demand_base_capacity', example='0'),
    onDemandPercentageAboveBaseCapacity?: long(name='on_demand_percentage_above_base_capacity', example='20'),
    period?: long(name='period', example='0'),
    periodUnit?: string(name='period_unit', example='Month'),
    platform?: string(name='platform', example='AliyunLinux'),
    ramPolicy?: string(name='ram_policy', example='KubernetesWorkerRole-021dc54f-929b-437a-8ae0-34c24d3e****'),
    rdsInstances?: [ string ](name='rds_instances'),
    scalingGroupId?: string(name='scaling_group_id', example='asg-2zeieod8giqmov7z****'),
    scalingPolicy?: string(name='scaling_policy', example='release'),
    securityGroupId?: string(name='security_group_id', example='sg-2ze60ockeekspl3d****'),
    securityGroupIds?: [ string ](name='security_group_ids'),
    spotInstancePools?: long(name='spot_instance_pools', example='5'),
    spotInstanceRemedy?: boolean(name='spot_instance_remedy', example='false'),
    spotPriceLimit?: [ 
      {
        instanceType?: string(name='instance_type', example='ecs.c6.large'),
        priceLimit?: string(name='price_limit', example='0.39'),
      }
    ](name='spot_price_limit'),
    spotStrategy?: string(name='spot_strategy', example='NoSpot'),
    systemDiskCategory?: string(name='system_disk_category', example='cloud_efficiency'),
    systemDiskPerformanceLevel?: string(name='system_disk_performance_level', example='PL1'),
    systemDiskSize?: long(name='system_disk_size', example='120'),
    tags?: [
      Tag
    ](name='tags'),
    vswitchIds?: [ string ](name='vswitch_ids'),
  }(name='scaling_group'),
  status?: {
    failedNodes?: long(name='failed_nodes', example='0'),
    healthyNodes?: long(name='healthy_nodes', example='3'),
    initialNodes?: long(name='initial_nodes', example='0'),
    offlineNodes?: long(name='offline_nodes', example='0'),
    removingNodes?: long(name='removing_nodes', example='0'),
    servingNodes?: long(name='serving_nodes', example='3'),
    state?: string(name='state', example='active'),
    totalNodes?: long(name='total_nodes', example='3'),
  }(name='status'),
  teeConfig?: {
    teeEnable?: boolean(name='tee_enable', example='false'),
  }(name='tee_config'),
}

model DescribeClusterNodePoolDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClusterNodePoolDetailResponseBody(name='body'),
}

async function describeClusterNodePoolDetailWithOptions(ClusterId: string, NodepoolId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeClusterNodePoolDetailResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusterNodePoolDetail',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/nodepools/${OpenApiUtil.getEncodeParam(NodepoolId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClusterNodePoolDetail(ClusterId: string, NodepoolId: string): DescribeClusterNodePoolDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeClusterNodePoolDetailWithOptions(ClusterId, NodepoolId, headers, runtime);
}

model DescribeClusterNodePoolsResponseBody = {
  nodepools?: [ 
    {
      autoScaling?: {
        eipBandwidth?: long(name='eip_bandwidth', example='5'),
        eipInternetChargeType?: string(name='eip_internet_charge_type', example='PayByBandwidth'),
        enable?: boolean(name='enable', example='true'),
        isBondEip?: boolean(name='is_bond_eip', example='true'),
        maxInstances?: long(name='max_instances', example='10'),
        minInstances?: long(name='min_instances', example='2'),
        type?: string(name='type', example='cpu'),
      }(name='auto_scaling'),
      interconnectConfig?: {
        bandwidth?: long(name='bandwidth', example='10'),
        ccnId?: string(name='ccn_id', example='ccn-qm5i0i0q9yi*******'),
        ccnRegionId?: string(name='ccn_region_id', example='cn-shanghai'),
        cenId?: string(name='cen_id', example='cen-ey9k9nfhz0f*******'),
        improvedPeriod?: string(name='improved_period', example='1'),
      }(name='interconnect_config'),
      interconnectMode?: string(name='interconnect_mode', example='improved'),
      kubernetesConfig?: {
        cmsEnabled?: boolean(name='cms_enabled', example='true'),
        cpuPolicy?: string(name='cpu_policy', example='none'),
        labels?: [
          Tag
        ](name='labels'),
        nodeNameMode?: string(name='node_name_mode', example='customized,test.,5,.com'),
        runtime?: string(name='runtime', example='docker'),
        runtimeVersion?: string(name='runtime_version', example='19.03.5'),
        taints?: [
          Taint
        ](name='taints'),
        userData?: string(name='user_data', example='IyEvYmluL3NoCmVjaG8gIkhlbGxvIEFD****'),
      }(name='kubernetes_config'),
      management?: {
        autoRepair?: boolean(name='auto_repair', example='true'),
        enable?: boolean(name='enable', example='true'),
        upgradeConfig?: {
          autoUpgrade?: boolean(name='auto_upgrade', example='true'),
          maxUnavailable?: long(name='max_unavailable', example='1'),
          surge?: long(name='surge', example='5'),
          surgePercentage?: long(name='surge_percentage', example='50'),
        }(name='upgrade_config'),
      }(name='management'),
      maxNodes?: long(name='max_nodes', example='10'),
      nodepoolInfo?: {
        created?: string(name='created', example='2020-09-27T19:14:09.156823496+08:00'),
        isDefault?: boolean(name='is_default', example='true'),
        name?: string(name='name', example='default-nodepool'),
        nodepoolId?: string(name='nodepool_id', example='np615c0e0966124216a0412e10afe0****'),
        regionId?: string(name='region_id', example='cn-beijing'),
        resourceGroupId?: string(name='resource_group_id', example='rg-acfmyvw3wjm****'),
        type?: string(name='type', example='ess'),
        updated?: string(name='updated', example='2020-09-27T20:37:46+08:00'),
      }(name='nodepool_info'),
      scalingGroup?: {
        autoRenew?: boolean(name='auto_renew', example='false'),
        autoRenewPeriod?: long(name='auto_renew_period', example='0'),
        compensateWithOnDemand?: boolean(name='compensate_with_on_demand', example='true'),
        dataDisks?: [
          DataDisk
        ](name='data_disks'),
        deploymentsetId?: string(name='deploymentset_id', example='ds-bp1d19mmbsv3jf6xxxxx'),
        desiredSize?: long(name='desired_size', example='2'),
        imageId?: string(name='image_id', example='aliyun_2_1903_x64_20G_alibase_20200529.vhd'),
        instanceChargeType?: string(name='instance_charge_type', example='PostPaid'),
        instanceTypes?: [ string ](name='instance_types', example='ecs.n4.large'),
        internetChargeType?: string(name='internet_charge_type', example='PayByBandwidth'),
        internetMaxBandwidthOut?: long(name='internet_max_bandwidth_out', example='10'),
        keyPair?: string(name='key_pair', example='pro-nodepool'),
        loginPassword?: string(name='login_password', example='******'),
        multiAzPolicy?: string(name='multi_az_policy', example='COST_OPTIMIZED'),
        onDemandBaseCapacity?: long(name='on_demand_base_capacity', example='0'),
        onDemandPercentageAboveBaseCapacity?: long(name='on_demand_percentage_above_base_capacity', example='20'),
        period?: long(name='period', example='1'),
        periodUnit?: string(name='period_unit', example='Month'),
        platform?: string(name='platform', example='AliyunLinux'),
        ramPolicy?: string(name='ram_policy', example='KubernetesWorkerRole-021dc54f-929b-437a-8ae0-34c24d3e****'),
        rdsInstances?: [ string ](name='rds_instances'),
        scalingGroupId?: string(name='scaling_group_id', example='asg-2ze8n5qw4atggut8****'),
        scalingPolicy?: string(name='scaling_policy', example='release'),
        securityGroupId?: string(name='security_group_id', example='sg-2ze1iuk12m2sb4c4****'),
        securityGroupIds?: [ string ](name='security_group_ids'),
        spotInstancePools?: long(name='spot_instance_pools', example='5'),
        spotInstanceRemedy?: boolean(name='spot_instance_remedy', example='false'),
        spotPriceLimit?: [ 
          {
            instanceType?: string(name='instance_type', example='ecs.c6.large'),
            priceLimit?: string(name='price_limit', example='0.39'),
          }
        ](name='spot_price_limit'),
        spotStrategy?: string(name='spot_strategy', example='NoSpot'),
        systemDiskCategory?: string(name='system_disk_category', example='cloud_efficiency'),
        systemDiskPerformanceLevel?: string(name='system_disk_performance_level', example='PL1'),
        systemDiskSize?: long(name='system_disk_size', example='120'),
        tags?: [
          Tag
        ](name='tags'),
        vswitchIds?: [ string ](name='vswitch_ids'),
      }(name='scaling_group'),
      status?: {
        failedNodes?: long(name='failed_nodes', example='0'),
        healthyNodes?: long(name='healthy_nodes', example='3'),
        initialNodes?: long(name='initial_nodes', example='0'),
        offlineNodes?: long(name='offline_nodes', example='0'),
        removingNodes?: long(name='removing_nodes', example='0'),
        servingNodes?: long(name='serving_nodes', example='3'),
        state?: string(name='state', example='active'),
        totalNodes?: long(name='total_nodes', example='3'),
      }(name='status'),
      teeConfig?: {
        teeEnable?: boolean(name='tee_enable', example='false'),
      }(name='tee_config'),
    }
  ](name='nodepools'),
}

model DescribeClusterNodePoolsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClusterNodePoolsResponseBody(name='body'),
}

async function describeClusterNodePoolsWithOptions(ClusterId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeClusterNodePoolsResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusterNodePools',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/nodepools`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClusterNodePools(ClusterId: string): DescribeClusterNodePoolsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeClusterNodePoolsWithOptions(ClusterId, headers, runtime);
}

model DescribeClusterNodesRequest {
  instanceIds?: string(name='instanceIds', example='"i-bp11xjhwkj8k966u****,i-bp1dmhc2bu5igkyq****"'),
  nodepoolId?: string(name='nodepool_id', example='np****'),
  pageNumber?: string(name='pageNumber', example='1'),
  pageSize?: string(name='pageSize', example='10'),
  state?: string(name='state', example='running'),
}

model DescribeClusterNodesResponseBody = {
  nodes?: [ 
    {
      creationTime?: string(name='creation_time', example='2020-08-25T11:25:35+08:00'),
      errorMessage?: string(name='error_message', example='error***'),
      expiredTime?: string(name='expired_time', example='2099-12-31T23:59:00+08:00'),
      hostName?: string(name='host_name', example='iZ2vcckdmxp7u0urj2k****'),
      imageId?: string(name='image_id', example='aliyun_2_1903_x64_20G_alibase_20200529.vhd'),
      instanceChargeType?: string(name='instance_charge_type', example='PostPaid'),
      instanceId?: string(name='instance_id', example='i-2vcckdmxp7u0urj2****'),
      instanceName?: string(name='instance_name', example='worker-k8s-for-cs-c5cdf7e3938bc4f8eb0e44b21a80f****'),
      instanceRole?: string(name='instance_role', example='Worker'),
      instanceStatus?: string(name='instance_status', example='Running'),
      instanceType?: string(name='instance_type', example='ecs.c5.xlarge'),
      instanceTypeFamily?: string(name='instance_type_family', example='ecs.c5'),
      ipAddress?: [ string ](name='ip_address'),
      isAliyunNode?: boolean(name='is_aliyun_node', example='true'),
      nodeName?: string(name='node_name', example='cn-chengdu.192.168.0.36'),
      nodeStatus?: string(name='node_status', example='Ready'),
      nodepoolId?: string(name='nodepool_id', example='np0794239424a84eb7a95327369d56****'),
      source?: string(name='source', example='ess_attach'),
      spotStrategy?: string(name='spot_strategy', example='NoSpot'),
      state?: string(name='state', example='running'),
    }
  ](name='nodes'),
  page?: {
    pageNumber?: int32(name='page_number', example='1'),
    pageSize?: int32(name='page_size', example='10'),
    totalCount?: int32(name='total_count', example='5'),
  }(name='page'),
}

model DescribeClusterNodesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClusterNodesResponseBody(name='body'),
}

async function describeClusterNodesWithOptions(ClusterId: string, request: DescribeClusterNodesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeClusterNodesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.instanceIds)) {
    query['instanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.nodepoolId)) {
    query['nodepool_id'] = request.nodepoolId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.state)) {
    query['state'] = request.state;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusterNodes',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/nodes`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClusterNodes(ClusterId: string, request: DescribeClusterNodesRequest): DescribeClusterNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeClusterNodesWithOptions(ClusterId, request, headers, runtime);
}

model DescribeClusterResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: [ 
    {
      clusterId?: string(name='cluster_id', example='cb95aa626a47740afbf6aa099b65****'),
      created?: string(name='created', example='2020-09-11T10:11:54+08:00'),
      instanceId?: string(name='instance_id', example='lb-wz9poz4r0ymh8u0uf****'),
      resourceInfo?: string(name='resource_info', example='{\\"Id\\":\\"k8s_master_slb\\",\\"Name\\":\\"k8s_master_slb\\",\\"Type\\":\\"ALIYUN::SLB::LoadBalancer\\",\\"Status\\":\\"CREATE_COMPLETE\\",\\"StatusReason\\":\\"state changed\\",\\"Updated\\":\\"2020-05-21T13:25:02\\",\\"PhysicalId\\":\\"lb-wz9poz4r0ymh8u0uf****\\"}'),
      resourceType?: string(name='resource_type', example='ALIYUN::SLB::LoadBalancer'),
      state?: string(name='state', example='CREATE_COMPLETE'),
      autoCreate?: long(name='auto_create', example='1'),
    }
  ](name='body'),
}

async function describeClusterResourcesWithOptions(ClusterId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeClusterResourcesResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusterResources',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/resources`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'array',
  };
  return callApi(params, req, runtime);
}

async function describeClusterResources(ClusterId: string): DescribeClusterResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeClusterResourcesWithOptions(ClusterId, headers, runtime);
}

model DescribeClusterTasksResponseBody = {
  pageInfo?: {
    pageNumber?: long(name='page_number', example='1'),
    pageSize?: long(name='page_size', example='10'),
    totalCount?: long(name='total_count', example='10'),
  }(name='page_info'),
  requestId?: string(name='requestId', example='0527ac9a-c899-4341-a21a-xxxxxxxxx'),
  tasks?: [ 
    {
      created?: string(name='created', example='2022-08-03T10:11:33+08:00'),
      error?: {
        code?: string(name='code', example='BadRequest'),
        message?: string(name='message', example='Addon status not match'),
      }(name='error'),
      state?: string(name='state', example='success'),
      taskId?: string(name='task_id', example='install-addons-c3xxxxxx'),
      taskType?: string(name='task_type', example='cluster_addon_install'),
      updated?: string(name='updated', example='2022-08-03T10:12:03.482+08:00'),
    }
  ](name='tasks'),
}

model DescribeClusterTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClusterTasksResponseBody(name='body'),
}

async function describeClusterTasksWithOptions(clusterId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeClusterTasksResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusterTasks',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(clusterId)}/tasks`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClusterTasks(clusterId: string): DescribeClusterTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeClusterTasksWithOptions(clusterId, headers, runtime);
}

model DescribeClusterUserKubeconfigRequest {
  privateIpAddress?: boolean(name='PrivateIpAddress', example='true'),
  temporaryDurationMinutes?: long(name='TemporaryDurationMinutes', example='15'),
}

model DescribeClusterUserKubeconfigResponseBody = {
  config?: string(name='config', example='apiVersion: v1****'),
  expiration?: string(name='expiration', example='2024-03-10T09:56:17Z'),
}

model DescribeClusterUserKubeconfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClusterUserKubeconfigResponseBody(name='body'),
}

async function describeClusterUserKubeconfigWithOptions(ClusterId: string, request: DescribeClusterUserKubeconfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeClusterUserKubeconfigResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.privateIpAddress)) {
    query['PrivateIpAddress'] = request.privateIpAddress;
  }
  if (!Util.isUnset(request.temporaryDurationMinutes)) {
    query['TemporaryDurationMinutes'] = request.temporaryDurationMinutes;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusterUserKubeconfig',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/k8s/${OpenApiUtil.getEncodeParam(ClusterId)}/user_config`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClusterUserKubeconfig(ClusterId: string, request: DescribeClusterUserKubeconfigRequest): DescribeClusterUserKubeconfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeClusterUserKubeconfigWithOptions(ClusterId, request, headers, runtime);
}

model DescribeClusterV2UserKubeconfigRequest {
  privateIpAddress?: boolean(name='PrivateIpAddress'),
}

model DescribeClusterV2UserKubeconfigResponseBody = {
  config?: string(name='config'),
}

model DescribeClusterV2UserKubeconfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClusterV2UserKubeconfigResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request DescribeClusterV2UserKubeconfigRequest
  * @param headers map
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeClusterV2UserKubeconfigResponse
 */
// Deprecated
async function describeClusterV2UserKubeconfigWithOptions(ClusterId: string, request: DescribeClusterV2UserKubeconfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeClusterV2UserKubeconfigResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.privateIpAddress)) {
    query['PrivateIpAddress'] = request.privateIpAddress;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusterV2UserKubeconfig',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/api/v2/k8s/${OpenApiUtil.getEncodeParam(ClusterId)}/user_config`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request DescribeClusterV2UserKubeconfigRequest
  * @return DescribeClusterV2UserKubeconfigResponse
 */
// Deprecated
async function describeClusterV2UserKubeconfig(ClusterId: string, request: DescribeClusterV2UserKubeconfigRequest): DescribeClusterV2UserKubeconfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeClusterV2UserKubeconfigWithOptions(ClusterId, request, headers, runtime);
}

model DescribeClustersRequest {
  clusterType?: string(name='clusterType', example='ManagedKubernetes'),
  name?: string(name='name', example='test'),
}

model DescribeClustersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: [ 
    {
      clusterId?: string(name='cluster_id'),
      clusterType?: string(name='cluster_type'),
      created?: string(name='created'),
      currentVersion?: string(name='current_version'),
      dataDiskCategory?: string(name='data_disk_category'),
      dataDiskSize?: long(name='data_disk_size'),
      deletionProtection?: boolean(name='deletion_protection'),
      dockerVersion?: string(name='docker_version'),
      externalLoadbalancerId?: string(name='external_loadbalancer_id'),
      initVersion?: string(name='init_version'),
      masterUrl?: string(name='master_url'),
      metaData?: string(name='meta_data'),
      name?: string(name='name'),
      networkMode?: string(name='network_mode'),
      privateZone?: boolean(name='private_zone'),
      profile?: string(name='profile'),
      regionId?: string(name='region_id'),
      resourceGroupId?: string(name='resource_group_id'),
      securityGroupId?: string(name='security_group_id'),
      size?: long(name='size'),
      state?: string(name='state'),
      subnetCidr?: string(name='subnet_cidr'),
      tags?: [ 
        {
          key?: string(name='key'),
          value?: string(name='value'),
        }
      ](name='tags'),
      updated?: string(name='updated'),
      vpcId?: string(name='vpc_id'),
      vswitchCidr?: string(name='vswitch_cidr'),
      vswitchId?: string(name='vswitch_id'),
      workerRamRoleName?: string(name='worker_ram_role_name'),
      zoneId?: string(name='zone_id'),
    }
  ](name='body'),
}

/**
  * @deprecated
  *
  * @param request DescribeClustersRequest
  * @param headers map
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeClustersResponse
 */
// Deprecated
async function describeClustersWithOptions(request: DescribeClustersRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeClustersResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.clusterType)) {
    query['clusterType'] = request.clusterType;
  }
  if (!Util.isUnset(request.name)) {
    query['name'] = request.name;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusters',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'array',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request DescribeClustersRequest
  * @return DescribeClustersResponse
 */
// Deprecated
async function describeClusters(request: DescribeClustersRequest): DescribeClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeClustersWithOptions(request, headers, runtime);
}

model DescribeClustersV1Request {
  clusterSpec?: string(name='cluster_spec', example='ack.pro.small'),
  clusterType?: string(name='cluster_type', example='Kubernetes'),
  name?: string(name='name', example='cluster-demo'),
  pageNumber?: long(name='page_number', example='3'),
  pageSize?: long(name='page_size', example='10'),
  profile?: string(name='profile', example='Default'),
  regionId?: string(name='region_id', example='cn-hangzhou'),
}

model DescribeClustersV1ResponseBody = {
  clusters?: [ 
    {
      clusterId?: string(name='cluster_id', example='c3fb96524f9274b4495df0f12a6b5****'),
      clusterSpec?: string(name='cluster_spec', example='ack.standard'),
      clusterType?: string(name='cluster_type', example='Kubernetes'),
      created?: string(name='created', example='2020-08-20T10:51:29+08:00'),
      currentVersion?: string(name='current_version', example='1.16.9-aliyun.1'),
      deletionProtection?: boolean(name='deletion_protection', example='true'),
      dockerVersion?: string(name='docker_version', example='19.03.5'),
      externalLoadbalancerId?: string(name='external_loadbalancer_id', example='lb-2vcrbmlevo6kjpgch****'),
      initVersion?: string(name='init_version', example='1.16.9-aliyun.1'),
      maintenanceWindow?: MaintenanceWindow(name='maintenance_window'),
      masterUrl?: string(name='master_url', example='{\\"api_server_endpoint\\":\\"\\",\\"intranet_api_server_endpoint\\":\\"https://192.168.0.251:6443\\"}'),
      metaData?: string(name='meta_data', example='{\\"Addons\\":[{\\"config\\":***}'),
      name?: string(name='name', example='cluster-demo'),
      networkMode?: string(name='network_mode', example='vpc'),
      nextVersion?: string(name='next_version', example='1.18.8-aliyun.1'),
      privateZone?: boolean(name='private_zone', example='false'),
      profile?: string(name='profile', example='Default'),
      regionId?: string(name='region_id', example='cn-beijing'),
      resourceGroupId?: string(name='resource_group_id', example='rg-acfmyvw3wjm****'),
      securityGroupId?: string(name='security_group_id', example='sg-2vcgwsrwgt5mp0yi****'),
      size?: long(name='size', example='5'),
      state?: string(name='state', example='running'),
      subnetCidr?: string(name='subnet_cidr', example='172.21.0.0/16'),
      tags?: [
        Tag
      ](name='tags'),
      updated?: string(name='updated', example='2020-09-16T11:09:55+08:00'),
      vpcId?: string(name='vpc_id', example='vpc-2vcg932hsxsxuqbgl****'),
      vswitchId?: string(name='vswitch_id', example='vsw-2vc41xuumx5z2rdma****,vsw-2vc41xuumx5z2rdma****'),
      workerRamRoleName?: string(name='worker_ram_role_name', example='KubernetesWorkerRole-ec87d15b-edca-4302-933f-c8a16bf0****'),
      zoneId?: string(name='zone_id', example='cn-beijing-b'),
    }
  ](name='clusters'),
  pageInfo?: {
    pageNumber?: int32(name='page_number', example='3'),
    pageSize?: int32(name='page_size', example='20'),
    totalCount?: int32(name='total_count', example='50'),
  }(name='page_info'),
}

model DescribeClustersV1Response = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClustersV1ResponseBody(name='body'),
}

async function describeClustersV1WithOptions(request: DescribeClustersV1Request, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeClustersV1Response {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.clusterSpec)) {
    query['cluster_spec'] = request.clusterSpec;
  }
  if (!Util.isUnset(request.clusterType)) {
    query['cluster_type'] = request.clusterType;
  }
  if (!Util.isUnset(request.name)) {
    query['name'] = request.name;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['page_number'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.profile)) {
    query['profile'] = request.profile;
  }
  if (!Util.isUnset(request.regionId)) {
    query['region_id'] = request.regionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClustersV1',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/api/v1/clusters`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClustersV1(request: DescribeClustersV1Request): DescribeClustersV1Response {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeClustersV1WithOptions(request, headers, runtime);
}

model DescribeEdgeMachineActiveProcessResponseBody = {
  logs?: string(name='logs', example='[{\\"content\\":\\"步骤 \\"颁发激活凭证\\" 执行开始\\",\\"id\\":0,\\"level\\":3,\\"timestamp\\":1625994913000},{\\"content\\":\\"步骤 \\"颁发激活凭证\\" 执行成功\\",\\"id\\":1,\\"level\\":3,\\"timestamp\\":1625994914000},{\\"content\\":\\"步骤 \\"初始化主机配置\\" 执行开始\\",\\"id\\":2,\\"level\\":3,\\"timestamp\\":1625994975000},{\\"content\\":\\"步骤 \\"初始化主机配置\\" 执行成功\\",\\"id\\":3,\\"level\\":3,\\"timestamp\\":1625994975000}]'),
  progress?: long(name='progress', example='100'),
  requestId?: string(name='request_id', example='b62796a8-c5a6-4d3f-beb2-7650e4309cb1'),
  state?: string(name='state', example='ACTIVATED'),
  step?: string(name='step', example='步骤 \\"初始化主机配置\\" 执行成功'),
}

model DescribeEdgeMachineActiveProcessResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEdgeMachineActiveProcessResponseBody(name='body'),
}

async function describeEdgeMachineActiveProcessWithOptions(edgeMachineid: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeEdgeMachineActiveProcessResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeEdgeMachineActiveProcess',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/edge_machines/%5Bedge_machineid%5D/activeprocess`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEdgeMachineActiveProcess(edgeMachineid: string): DescribeEdgeMachineActiveProcessResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeEdgeMachineActiveProcessWithOptions(edgeMachineid, headers, runtime);
}

model DescribeEdgeMachineModelsResponseBody = {
  models?: [ 
    {
      cpu?: int32(name='cpu', example='6'),
      cpuArch?: string(name='cpu_arch', example='x86_64/arm64'),
      created?: string(name='created', example='2021-07-07T20:44:00+08:00'),
      description?: string(name='description', example='B010'),
      manageRuntime?: int32(name='manage_runtime', example='0/1'),
      memory?: int32(name='memory', example='8'),
      model?: string(name='model', example='ACK-V-B010'),
      modelId?: string(name='model_id', example='c34cc753-8908-4739-bd10-ebd922a4****'),
    }
  ](name='models'),
}

model DescribeEdgeMachineModelsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEdgeMachineModelsResponseBody(name='body'),
}

async function describeEdgeMachineModelsWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): DescribeEdgeMachineModelsResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeEdgeMachineModels',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/edge_machines/models`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEdgeMachineModels(): DescribeEdgeMachineModelsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeEdgeMachineModelsWithOptions(headers, runtime);
}

model DescribeEdgeMachineTunnelConfigDetailResponseBody = {
  deviceName?: string(name='device_name', example='TEST0621N0FF****'),
  model?: string(name='model', example='ACK-A-S001'),
  productKey?: string(name='product_key', description='Product Key', example='a11rXul****'),
  requestId?: string(name='request_id', description='Request ID', example='bfd12953-31cb-42f1-8a36-7b80ec345094'),
  sn?: string(name='sn', example='Q2CB5XZAFBFG****'),
  token?: string(name='token', description='Token', example='abcd****'),
  tunnelEndpoint?: string(name='tunnel_endpoint', example='wss://frontend-iotx-r-debug.aliyun-inc.test'),
}

model DescribeEdgeMachineTunnelConfigDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEdgeMachineTunnelConfigDetailResponseBody(name='body'),
}

async function describeEdgeMachineTunnelConfigDetailWithOptions(edgeMachineid: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeEdgeMachineTunnelConfigDetailResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeEdgeMachineTunnelConfigDetail',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/edge_machines/%5Bedge_machineid%5D/tunnelconfig`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEdgeMachineTunnelConfigDetail(edgeMachineid: string): DescribeEdgeMachineTunnelConfigDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeEdgeMachineTunnelConfigDetailWithOptions(edgeMachineid, headers, runtime);
}

model DescribeEdgeMachinesRequest {
  hostname?: string(name='hostname', example='ack-v-b010-ssdfw****'),
  lifeState?: string(name='life_state', example='activated/waitOnline/deleting'),
  model?: string(name='model', example='ACK-V-B010'),
  onlineState?: string(name='online_state', example='offline/online'),
  pageNumber?: long(name='page_number', example='1'),
  pageSize?: long(name='page_size', example='10'),
}

model DescribeEdgeMachinesResponseBody = {
  edgeMachines?: [ 
    {
      activeTime?: string(name='active_time', example='2021-07-19T16:07:48+08:00'),
      created?: string(name='created', example='2021-07-07T20:44:00+08:00'),
      edgeMachineId?: string(name='edge_machine_id', example='c61083909b13f4a95b8554bda9577****'),
      hostname?: string(name='hostname', example='ack-v-b010-ssdfw****'),
      lifeState?: string(name='life_state', example='activated'),
      model?: string(name='model', example='ACK-V-B010'),
      name?: string(name='name', example='ack-v-b010-ssdfw****'),
      onlineState?: string(name='online_state', example='online'),
      sn?: string(name='sn', example='ACK9GBL31SXX****'),
      updated?: string(name='updated', example='2021-07-07T20:44:00+08:00'),
    }
  ](name='edge_machines'),
  pageInfo?: {
    pageNumber?: int32(name='page_number', example='1'),
    pageSize?: int32(name='page_size', example='10'),
    totalCount?: int32(name='total_count', example='1'),
  }(name='page_info'),
}

model DescribeEdgeMachinesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEdgeMachinesResponseBody(name='body'),
}

async function describeEdgeMachinesWithOptions(request: DescribeEdgeMachinesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeEdgeMachinesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.hostname)) {
    query['hostname'] = request.hostname;
  }
  if (!Util.isUnset(request.lifeState)) {
    query['life_state'] = request.lifeState;
  }
  if (!Util.isUnset(request.model)) {
    query['model'] = request.model;
  }
  if (!Util.isUnset(request.onlineState)) {
    query['online_state'] = request.onlineState;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['page_number'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEdgeMachines',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/edge_machines`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEdgeMachines(request: DescribeEdgeMachinesRequest): DescribeEdgeMachinesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeEdgeMachinesWithOptions(request, headers, runtime);
}

model DescribeEventsRequest {
  clusterId?: string(name='cluster_id', example='cf62854ac2130470897be7a27ed1f****'),
  pageNumber?: long(name='page_number', example='1'),
  pageSize?: long(name='page_size', example='50'),
  type?: string(name='type', example='nodePool_upgrade'),
}

model DescribeEventsResponseBody = {
  events?: [ 
    {
      clusterId?: string(name='cluster_id', example='cluster-id'),
      data?: {
        level?: string(name='level', example='info'),
        message?: string(name='message', example='Start to upgrade NodePool nodePool/nodePool-A'),
        reason?: string(name='reason', example='Started'),
      }(name='data'),
      eventId?: string(name='event_id', example='A234-1234-1234'),
      source?: string(name='source', example='/clusters/cf62854ac2130470897be7a27ed1f****/nodepools'),
      subject?: string(name='subject', example='nodePool-id'),
      time?: string(name='time', example='2020-12-01T17:31:00Z'),
      type?: string(name='type', example='nodePool_upgrade'),
    }
  ](name='events'),
  pageInfo?: {
    pageNumber?: long(name='page_number', example='1'),
    pageSize?: long(name='page_size', example='50'),
    totalCount?: long(name='total_count', example='3'),
  }(name='page_info'),
}

model DescribeEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEventsResponseBody(name='body'),
}

async function describeEventsWithOptions(request: DescribeEventsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeEventsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.clusterId)) {
    query['cluster_id'] = request.clusterId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['page_number'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.type)) {
    query['type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEvents',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/events`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEvents(request: DescribeEventsRequest): DescribeEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeEventsWithOptions(request, headers, runtime);
}

model DescribeExternalAgentRequest {
  privateIpAddress?: string(name='PrivateIpAddress', example='true'),
}

model DescribeExternalAgentResponseBody = {
  config?: string(name='config', example='apiVersion: v1****'),
}

model DescribeExternalAgentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeExternalAgentResponseBody(name='body'),
}

async function describeExternalAgentWithOptions(ClusterId: string, request: DescribeExternalAgentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeExternalAgentResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.privateIpAddress)) {
    query['PrivateIpAddress'] = request.privateIpAddress;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeExternalAgent',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/k8s/${OpenApiUtil.getEncodeParam(ClusterId)}/external/agent/deployment`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeExternalAgent(ClusterId: string, request: DescribeExternalAgentRequest): DescribeExternalAgentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeExternalAgentWithOptions(ClusterId, request, headers, runtime);
}

model DescribeKubernetesVersionMetadataRequest {
  clusterType?: string(name='ClusterType', example='Kubernetes'),
  kubernetesVersion?: string(name='KubernetesVersion', example='1.16.9-aliyun.1'),
  profile?: string(name='Profile', example='Default'),
  region?: string(name='Region', example='cn-beijing'),
  runtime?: string(name='runtime', example='docker'),
}

model DescribeKubernetesVersionMetadataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: [ 
    {
      capabilities?: map[string]any(name='capabilities'),
      images?: [ 
        {
          imageId?: string(name='image_id', example='centos_7_7_x64_20G_alibase_20200426.vhd'),
          imageName?: string(name='image_name', example='CentOS 7.7'),
          platform?: string(name='platform', example='CentOS'),
          osVersion?: string(name='os_version', example='7.7'),
          imageType?: string(name='image_type', example='centos_7_7_20'),
          osType?: string(name='os_type', example='Linux'),
          imageCategory?: string(name='image_category', example='system'),
          architecture?: string(name='architecture', example='x86_64'),
        }
      ](name='images'),
      metaData?: map[string]any(name='meta_data'),
      runtimes?: [
        Runtime
      ](name='runtimes'),
      version?: string(name='version', example='1.16.9-aliyun.1'),
      multiAz?: string(name='multi_az', example='false'),
    }
  ](name='body'),
}

async function describeKubernetesVersionMetadataWithOptions(request: DescribeKubernetesVersionMetadataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeKubernetesVersionMetadataResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.clusterType)) {
    query['ClusterType'] = request.clusterType;
  }
  if (!Util.isUnset(request.kubernetesVersion)) {
    query['KubernetesVersion'] = request.kubernetesVersion;
  }
  if (!Util.isUnset(request.profile)) {
    query['Profile'] = request.profile;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.runtime)) {
    query['runtime'] = request.runtime;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeKubernetesVersionMetadata',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/api/v1/metadata/versions`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'array',
  };
  return callApi(params, req, runtime);
}

async function describeKubernetesVersionMetadata(request: DescribeKubernetesVersionMetadataRequest): DescribeKubernetesVersionMetadataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeKubernetesVersionMetadataWithOptions(request, headers, runtime);
}

model DescribeNodePoolVulsResponseBody = {
  vulRecords?: [ 
    {
      instanceId?: string(name='instance_id', example='i-t4n2qolb0wtzt0pz****'),
      vulList?: [ 
        {
          aliasName?: string(name='alias_name', example='RHSA-2019:3197-Important: sudo security update'),
          cveList?: [ string ](name='cve_list'),
          name?: string(name='name', example='oval:com.redhat.rhsa:def:20193197'),
          necessity?: string(name='necessity', example='asap'),
        }
      ](name='vul_list'),
    }
  ](name='vul_records'),
  vulsFixServicePurchased?: boolean(name='vuls_fix_service_purchased'),
}

model DescribeNodePoolVulsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeNodePoolVulsResponseBody(name='body'),
}

async function describeNodePoolVulsWithOptions(clusterId: string, nodepoolId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeNodePoolVulsResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeNodePoolVuls',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(clusterId)}/nodepools/${OpenApiUtil.getEncodeParam(nodepoolId)}/vuls`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeNodePoolVuls(clusterId: string, nodepoolId: string): DescribeNodePoolVulsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeNodePoolVulsWithOptions(clusterId, nodepoolId, headers, runtime);
}

model DescribePoliciesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: object(name='body'),
}

async function describePoliciesWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): DescribePoliciesResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribePolicies',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/policies`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePolicies(): DescribePoliciesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describePoliciesWithOptions(headers, runtime);
}

model DescribePolicyDetailsResponseBody = {
  action?: string(name='action', example='enforce'),
  category?: string(name='category', example='k8s-general'),
  description?: string(name='description', example='Requires container images to begin with a repo string from a specified list'),
  isDeleted?: int32(name='is_deleted', example='0'),
  name?: string(name='name', example='ACKAllowedRepos'),
  noConfig?: int32(name='no_config', example='0'),
  severity?: string(name='severity', example='high'),
  template?: string(name='template'),
}

model DescribePolicyDetailsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePolicyDetailsResponseBody(name='body'),
}

async function describePolicyDetailsWithOptions(policyName: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribePolicyDetailsResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribePolicyDetails',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/policies/${OpenApiUtil.getEncodeParam(policyName)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePolicyDetails(policyName: string): DescribePolicyDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describePolicyDetailsWithOptions(policyName, headers, runtime);
}

model DescribePolicyGovernanceInClusterResponseBody = {
  admitLog?: {
    count?: long(name='count', example='100'),
    log?: {
      clusterId?: string(name='cluster_id', example='c8155823d057948c69a****'),
      constraintKind?: string(name='constraint_kind', example='ACKAllowedRepos'),
      msg?: string(name='msg', example='d4hdhs*****'),
      resourceKind?: string(name='resource_kind', example='Pod'),
      resourceName?: string(name='resource_name', example='nginx-deployment-basic2-84ccb74bfc-df22p'),
      resourceNamespace?: string(name='resource_namespace', example='default'),
    }(name='log'),
    progress?: string(name='progress', example='Complete'),
  }(name='admit_log'),
  onState?: [ 
    {
      enabledCount?: int32(name='enabled_count', example='3'),
      severity?: string(name='severity', example='high'),
      total?: int32(name='total', example='8'),
    }
  ](name='on_state'),
  totalViolations?: {
    deny?: {
      severity?: string(name='severity', example='high'),
      violations?: long(name='violations', example='0'),
    }(name='deny'),
    warn?: {
      severity?: string(name='severity', example='low'),
      violations?: long(name='violations', example='5'),
    }(name='warn'),
  }(name='totalViolations'),
  violations?: {
    deny?: {
      policyDescription?: string(name='policyDescription', example='Requires container images to begin with a repo string from a specified list.'),
      policyName?: string(name='policyName', example='policy-gatekeeper-ackallowedrepos'),
      severity?: string(name='severity', example='high'),
      violations?: long(name='violations', example='11'),
    }(name='deny'),
    warn?: {
      policyDescription?: string(name='policyDescription', example='Controls Linux capabilities.'),
      policyName?: string(name='policyName', example='policy-gatekeeper-ackpspcapabilities'),
      severity?: string(name='severity', example='high'),
      violations?: long(name='violations', example='81'),
    }(name='warn'),
  }(name='violations'),
}

model DescribePolicyGovernanceInClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePolicyGovernanceInClusterResponseBody(name='body'),
}

async function describePolicyGovernanceInClusterWithOptions(clusterId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribePolicyGovernanceInClusterResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribePolicyGovernanceInCluster',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(clusterId)}/policygovernance`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePolicyGovernanceInCluster(clusterId: string): DescribePolicyGovernanceInClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describePolicyGovernanceInClusterWithOptions(clusterId, headers, runtime);
}

model DescribePolicyInstancesRequest {
  instanceName?: string(name='instance_name', example='allowed-repos-cz4s2'),
  policyName?: string(name='policy_name', example='ACKPSPCapabilities'),
}

model DescribePolicyInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: [ 
    {
      aliUid?: string(name='ali_uid', example='16298168****'),
      clusterId?: string(name='cluster_id', example='c8155823d057948c69a****'),
      instanceName?: string(name='instance_name', example='no-env-var-secrets-****'),
      policyName?: string(name='policy_name', example='ACKPSPCapabilities'),
      policyCategory?: string(name='policy_category', example='k8s-general'),
      policyDescription?: string(name='policy_description', example='Restricts secrets used in pod envs'),
      policyParameters?: string(name='policy_parameters', example='"restrictedNamespaces": [ "test" ]'),
      policySeverity?: string(name='policy_severity', example='low'),
      policyScope?: string(name='policy_scope', example='*'),
      policyAction?: string(name='policy_action', example='deny'),
    }
  ](name='body'),
}

async function describePolicyInstancesWithOptions(clusterId: string, request: DescribePolicyInstancesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribePolicyInstancesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.instanceName)) {
    query['instance_name'] = request.instanceName;
  }
  if (!Util.isUnset(request.policyName)) {
    query['policy_name'] = request.policyName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePolicyInstances',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(clusterId)}/policies`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'array',
  };
  return callApi(params, req, runtime);
}

async function describePolicyInstances(clusterId: string, request: DescribePolicyInstancesRequest): DescribePolicyInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describePolicyInstancesWithOptions(clusterId, request, headers, runtime);
}

model DescribePolicyInstancesStatusResponseBody = {
  instancesSeverityCount?: map[string]any(name='instances_severity_count', example='{ "high": 11,     "medium": 1  }'),
  policyInstances?: [ 
    {
      policyCategory?: string(name='policy_category', example='cis-k8s'),
      policyDescription?: string(name='policy_description', example='Restricts use of the cluster-admin role.'),
      policyInstancesCount?: long(name='policy_instances_count', example='1'),
      policyName?: string(name='policy_name', example='ACKRestrictRoleBindings'),
      policySeverity?: string(name='policy_severity', example='medium'),
    }
  ](name='policy_instances'),
}

model DescribePolicyInstancesStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePolicyInstancesStatusResponseBody(name='body'),
}

async function describePolicyInstancesStatusWithOptions(clusterId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribePolicyInstancesStatusResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribePolicyInstancesStatus',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(clusterId)}/policies/status`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePolicyInstancesStatus(clusterId: string): DescribePolicyInstancesStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describePolicyInstancesStatusWithOptions(clusterId, headers, runtime);
}

model DescribeTaskInfoResponseBody = {
  clusterId?: string(name='cluster_id', example='c78592bfe92244365b3c3ad47f1de****'),
  created?: string(name='created', example='2020-11-10T16:02:04+08:00'),
  currentStage?: string(name='current_stage'),
  error?: {
    code?: string(name='code'),
    message?: string(name='message'),
  }(name='error'),
  events?: [ 
    {
      action?: string(name='action'),
      level?: string(name='level'),
      message?: string(name='message'),
      reason?: string(name='reason'),
      source?: string(name='source'),
      timestamp?: string(name='timestamp'),
    }
  ](name='events'),
  parameters?: map[string]any(name='parameters'),
  stages?: [ 
    {
      endTime?: string(name='end_time'),
      message?: string(name='message'),
      outputs?: map[string]any(name='outputs'),
      startTime?: string(name='start_time'),
      state?: string(name='state'),
    }
  ](name='stages'),
  state?: string(name='state', example='running'),
  target?: {
    id?: string(name='id'),
    type?: string(name='type'),
  }(name='target'),
  taskId?: string(name='task_id', example='T-5faa48fb31b6b8078d000006'),
  taskResult?: [ 
    {
      data?: string(name='data', example='i-xxx'),
      status?: string(name='status', example='success'),
    }
  ](name='task_result'),
  taskType?: string(name='task_type', example='cluster_scaleout'),
  updated?: string(name='updated', example='2020-11-10T16:03:06+08:00'),
}

model DescribeTaskInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTaskInfoResponseBody(name='body'),
}

async function describeTaskInfoWithOptions(taskId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeTaskInfoResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeTaskInfo',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/tasks/${OpenApiUtil.getEncodeParam(taskId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTaskInfo(taskId: string): DescribeTaskInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeTaskInfoWithOptions(taskId, headers, runtime);
}

model DescribeTemplateAttributeRequest {
  templateType?: string(name='template_type', example='kubernetes'),
}

model DescribeTemplateAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: [ 
    {
      id?: string(name='id', example='72d20cf8-a533-4ea9-a10d-e7630d3d****'),
      acl?: string(name='acl', example='private'),
      name?: string(name='name', example='web'),
      template?: string(name='template', example='apiVersion: V1\\n***'),
      templateType?: string(name='template_type', example='kubernetes'),
      description?: string(name='description', example='test template'),
      tags?: string(name='tags', example='sa'),
      templateWithHistId?: string(name='template_with_hist_id', example='874ec485-e7e6-4373-8a3b-47bde8ae****'),
      created?: string(name='created', example='2020-09-16T19:21:29+08:00'),
      updated?: string(name='updated', example='2020-09-16T19:21:29+08:00'),
    }
  ](name='body'),
}

async function describeTemplateAttributeWithOptions(TemplateId: string, request: DescribeTemplateAttributeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeTemplateAttributeResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.templateType)) {
    query['template_type'] = request.templateType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTemplateAttribute',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/templates/${OpenApiUtil.getEncodeParam(TemplateId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'array',
  };
  return callApi(params, req, runtime);
}

async function describeTemplateAttribute(TemplateId: string, request: DescribeTemplateAttributeRequest): DescribeTemplateAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeTemplateAttributeWithOptions(TemplateId, request, headers, runtime);
}

model DescribeTemplatesRequest {
  pageNum?: long(name='page_num', example='1'),
  pageSize?: long(name='page_size', example='10'),
  templateType?: string(name='template_type', example='kubernetes'),
}

model DescribeTemplatesResponseBody = {
  pageInfo?: {
    pageNumber?: long(name='page_number', example='20'),
    pageSize?: long(name='page_size', example='3'),
    totalCount?: long(name='total_count', example='50'),
  }(name='page_info'),
  templates?: [ 
    {
      acl?: string(name='acl', example='private'),
      created?: string(name='created', example='2020-06-10T16:30:16+08:00'),
      description?: string(name='description', example='a web server'),
      id?: string(name='id', example='874ec485-e7e6-4373-8a3b-47bde8ae789f'),
      name?: string(name='name', example='webserver'),
      tags?: string(name='tags', example='kubernetes'),
      template?: string(name='template', example='apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: nginx-deployment-basic\\n  labels:\\n    app: nginx\\nspec:\\n  replicas: 2\\n  selector:\\n    matchLabels:\\n      app: nginx\\n  template:\\n    metadata:\\n      labels:\\n        app: nginx\\n    spec:\\n      containers:\\n      - name: nginx\\n        image: busybox:latest\\n        ports:\\n        - containerPort: 80'),
      templateType?: string(name='template_type', example='kubernetes'),
      templateWithHistId?: string(name='template_with_hist_id', example='ad81d115-7c8b-47e7-a222-9c28d7f6e588'),
      updated?: string(name='updated', example='2020-06-10T16:30:16+08:00'),
    }
  ](name='templates'),
}

model DescribeTemplatesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTemplatesResponseBody(name='body'),
}

async function describeTemplatesWithOptions(request: DescribeTemplatesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeTemplatesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.pageNum)) {
    query['page_num'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.templateType)) {
    query['template_type'] = request.templateType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTemplates',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/templates`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTemplates(request: DescribeTemplatesRequest): DescribeTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeTemplatesWithOptions(request, headers, runtime);
}

model DescribeTriggerRequest {
  name?: string(name='Name', example='web-server'),
  namespace?: string(name='Namespace', example='default'),
  type?: string(name='Type', example='deployment'),
  action?: string(name='action', example='redeploy'),
}

model DescribeTriggerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: [ 
    {
      id?: string(name='id', example='1234'),
      name?: string(name='name', example='test'),
      clusterId?: string(name='cluster_id', example='c259f563386444ebb8d7****'),
      projectId?: string(name='project_id', example='default/test-app'),
      type?: string(name='type', example='deployment'),
      action?: string(name='action', example='redeploy'),
      token?: string(name='token', example='eyJhbGci***'),
    }
  ](name='body'),
}

async function describeTriggerWithOptions(clusterId: string, request: DescribeTriggerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeTriggerResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.action)) {
    query['action'] = request.action;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTrigger',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/%5Bcluster_id%5D/triggers`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'array',
  };
  return callApi(params, req, runtime);
}

async function describeTrigger(clusterId: string, request: DescribeTriggerRequest): DescribeTriggerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeTriggerWithOptions(clusterId, request, headers, runtime);
}

model DescribeUserPermissionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: [ 
    {
      resourceId?: string(name='resource_id', example='c1b542****'),
      resourceType?: string(name='resource_type', example='cluster'),
      roleName?: string(name='role_name', example='view'),
      roleType?: string(name='role_type', example='admin'),
      isOwner?: long(name='is_owner', example='1'),
      isRamRole?: long(name='is_ram_role', example='1'),
    }
  ](name='body'),
}

async function describeUserPermissionWithOptions(uid: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeUserPermissionResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserPermission',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/permissions/users/${OpenApiUtil.getEncodeParam(uid)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'array',
  };
  return callApi(params, req, runtime);
}

async function describeUserPermission(uid: string): DescribeUserPermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeUserPermissionWithOptions(uid, headers, runtime);
}

model DescribeUserQuotaResponseBody = {
  amkClusterQuota?: long(name='amk_cluster_quota', example='20'),
  askClusterQuota?: long(name='ask_cluster_quota', example='3'),
  clusterNodepoolQuota?: long(name='cluster_nodepool_quota', example='10'),
  clusterQuota?: long(name='cluster_quota', example='50'),
  edgeImprovedNodepoolQuota?: {
    bandwidth?: int32(name='bandwidth'),
    count?: int32(name='count'),
    period?: int32(name='period'),
  }(name='edge_improved_nodepool_quota'),
  nodeQuota?: long(name='node_quota', example='100'),
}

model DescribeUserQuotaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserQuotaResponseBody(name='body'),
}

async function describeUserQuotaWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): DescribeUserQuotaResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserQuota',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/quota`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUserQuota(): DescribeUserQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeUserQuotaWithOptions(headers, runtime);
}

model DescribeWorkflowsResponseBody = {
  jobs?: [ 
    {
      clusterId?: string(name='cluster_id', example='cb1a7214cfc0b41d9bb086affc2d8f51c'),
      createTime?: string(name='create_time', example='2020-01-15T13:18:52Z'),
      jobName?: string(name='job_name', example='wgs-gpu-qb4dk'),
    }
  ](name='jobs'),
}

model DescribeWorkflowsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWorkflowsResponseBody(name='body'),
}

async function describeWorkflowsWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): DescribeWorkflowsResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeWorkflows',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/gs/workflows`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWorkflows(): DescribeWorkflowsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeWorkflowsWithOptions(headers, runtime);
}

model EdgeClusterAddEdgeMachineRequest {
  expired?: long(name='expired', example='1024'),
  nodepoolId?: string(name='nodepool_id', example='c26607f52179f4472a0d9723e7595****'),
  options?: string(name='options', example='"{\\"enableIptables\\":true,\\"quiet\\":true,\\"manageRuntime\\":true,\\"allowedClusterAddons\\":[\\"kube-proxy\\",\\"flannel\\",\\"coredns\\"]}"'),
}

model EdgeClusterAddEdgeMachineResponseBody = {
  edgeMachineId?: string(name='edge_machine_id', example='0f4bf70a-caff-4b26-a679-fb0188a1****'),
  requestId?: string(name='request_id', example='0adf3a23-6841-41e8-9f55-7b290216c980'),
}

model EdgeClusterAddEdgeMachineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EdgeClusterAddEdgeMachineResponseBody(name='body'),
}

async function edgeClusterAddEdgeMachineWithOptions(clusterid: string, edgeMachineid: string, request: EdgeClusterAddEdgeMachineRequest, headers: map[string]string, runtime: Util.RuntimeOptions): EdgeClusterAddEdgeMachineResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.expired)) {
    body['expired'] = request.expired;
  }
  if (!Util.isUnset(request.nodepoolId)) {
    body['nodepool_id'] = request.nodepoolId;
  }
  if (!Util.isUnset(request.options)) {
    body['options'] = request.options;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'EdgeClusterAddEdgeMachine',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/%5Bclusterid%5D/attachedgemachine/%5Bedge_machineid%5D`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function edgeClusterAddEdgeMachine(clusterid: string, edgeMachineid: string, request: EdgeClusterAddEdgeMachineRequest): EdgeClusterAddEdgeMachineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return edgeClusterAddEdgeMachineWithOptions(clusterid, edgeMachineid, request, headers, runtime);
}

model FixNodePoolVulsRequest {
  nodes?: [ string ](name='nodes'),
  rolloutPolicy?: {
    maxParallelism?: long(name='max_parallelism', example='1'),
  }(name='rollout_policy'),
  vulList?: [ string ](name='vul_list'),
}

model FixNodePoolVulsResponseBody = {
  taskId?: string(name='task_id', example='T-60fea8ad2e277f087900****'),
}

model FixNodePoolVulsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FixNodePoolVulsResponseBody(name='body'),
}

async function fixNodePoolVulsWithOptions(clusterId: string, nodepoolId: string, request: FixNodePoolVulsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): FixNodePoolVulsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.nodes)) {
    body['nodes'] = request.nodes;
  }
  if (!Util.isUnset(request.rolloutPolicy)) {
    body['rollout_policy'] = request.rolloutPolicy;
  }
  if (!Util.isUnset(request.vulList)) {
    body['vul_list'] = request.vulList;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'FixNodePoolVuls',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(clusterId)}/nodepools/${OpenApiUtil.getEncodeParam(nodepoolId)}/vuls/fix`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function fixNodePoolVuls(clusterId: string, nodepoolId: string, request: FixNodePoolVulsRequest): FixNodePoolVulsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return fixNodePoolVulsWithOptions(clusterId, nodepoolId, request, headers, runtime);
}

model GetKubernetesTriggerRequest {
  name?: string(name='Name', example='web-server'),
  namespace?: string(name='Namespace', example='default'),
  type?: string(name='Type', example='deployment'),
  action?: string(name='action', example='redeploy'),
}

model GetKubernetesTriggerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: [ 
    {
      id?: string(name='id', example='1234'),
      name?: string(name='name', example='test'),
      clusterId?: string(name='cluster_id', example='c259f563386444ebb8d7**'),
      projectId?: string(name='project_id', example='default/test-app'),
      type?: string(name='type', example='deployment'),
      action?: string(name='action', example='redeploy'),
      token?: string(name='token', description='Token', example='eyJhbGci***'),
    }
  ](name='body'),
}

async function getKubernetesTriggerWithOptions(ClusterId: string, request: GetKubernetesTriggerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetKubernetesTriggerResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.action)) {
    query['action'] = request.action;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetKubernetesTrigger',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/triggers/${OpenApiUtil.getEncodeParam(ClusterId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'array',
  };
  return callApi(params, req, runtime);
}

async function getKubernetesTrigger(ClusterId: string, request: GetKubernetesTriggerRequest): GetKubernetesTriggerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getKubernetesTriggerWithOptions(ClusterId, request, headers, runtime);
}

model GetUpgradeStatusResponseBody = {
  errorMessage?: string(name='error_message', example='subject to actual return'),
  precheckReportId?: string(name='precheck_report_id', example='be4c8eb72de94d459ea7ace7c811d119'),
  status?: string(name='status', example='running'),
  upgradeStep?: string(name='upgrade_step', example='prechecking'),
  upgradeTask?: {
    message?: string(name='message', example='subject to actual return'),
    status?: string(name='status', example='running'),
  }(name='upgrade_task'),
}

model GetUpgradeStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetUpgradeStatusResponseBody(name='body'),
}

async function getUpgradeStatusWithOptions(ClusterId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetUpgradeStatusResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetUpgradeStatus',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/api/v2/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/upgrade/status`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getUpgradeStatus(ClusterId: string): GetUpgradeStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getUpgradeStatusWithOptions(ClusterId, headers, runtime);
}

model GrantPermissionsRequest {
  body?: [ 
    {
      cluster?: string(name='cluster', example='c796c60***'),
      isCustom?: boolean(name='is_custom', example='false'),
      isRamRole?: boolean(name='is_ram_role', example='false'),
      namespace?: string(name='namespace', example='test'),
      roleName?: string(name='role_name', example='ops'),
      roleType?: string(name='role_type', example='cluster'),
    }
  ](name='body'),
}

model GrantPermissionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function grantPermissionsWithOptions(uid: string, request: GrantPermissionsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GrantPermissionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = Util.toArray(request.body),
  };
  var params = new OpenApi.Params{
    action = 'GrantPermissions',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/permissions/users/${OpenApiUtil.getEncodeParam(uid)}`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function grantPermissions(uid: string, request: GrantPermissionsRequest): GrantPermissionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return grantPermissionsWithOptions(uid, request, headers, runtime);
}

model InstallClusterAddonsRequest {
  body?: [ 
    {
      config?: string(name='config', example='{\\"IngressDashboardEnabled\\":\\"true\\",\\"sls_project_name\\":\\"your_sls_project_name\\"}"}'),
      name?: string(name='name', example='ags-metrics-collector'),
      version?: string(name='version', example='v1.0.0.2-cc3b2d6-aliyun'),
    }
  ](name='body', example='ags-metrics-collector'),
}

model InstallClusterAddonsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function installClusterAddonsWithOptions(ClusterId: string, request: InstallClusterAddonsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InstallClusterAddonsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = Util.toArray(request.body),
  };
  var params = new OpenApi.Params{
    action = 'InstallClusterAddons',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/components/install`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function installClusterAddons(ClusterId: string, request: InstallClusterAddonsRequest): InstallClusterAddonsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return installClusterAddonsWithOptions(ClusterId, request, headers, runtime);
}

model ListTagResourcesRequest {
  nextToken?: string(name='next_token', example='***'),
  regionId?: string(name='region_id', example='cn-beijing'),
  resourceIds?: [ string ](name='resource_ids', example='["xxxxx","xxxxxx"]'),
  resourceType?: string(name='resource_type', example='CLUSTER'),
  tags?: [
    Tag
  ](name='tags', example='[{\\"key\\":\\"env\\",\\"value\\",\\"dev\\"},{\\"key\\":\\"dev\\", \\"value\\":\\"IT\\"}]'),
}

model ListTagResourcesShrinkRequest {
  nextToken?: string(name='next_token', example='***'),
  regionId?: string(name='region_id', example='cn-beijing'),
  resourceIdsShrink?: string(name='resource_ids', example='["xxxxx","xxxxxx"]'),
  resourceType?: string(name='resource_type', example='CLUSTER'),
  tagsShrink?: string(name='tags', example='[{\\"key\\":\\"env\\",\\"value\\",\\"dev\\"},{\\"key\\":\\"dev\\", \\"value\\":\\"IT\\"}]'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='next_token', example='c374bf4864448****'),
  requestId?: string(name='request_id', example='E368C761-F8F6-4A36-9B58-BD53D5CD0CEB'),
  tagResources?: {
    tagResource?: [ 
      {
        resourceId?: string(name='resource_id', example='i-xxx'),
        resourceType?: string(name='resource_type', example='CLUSTER'),
        tagKey?: string(name='tag_key', example='ack.aliyun.com'),
        tagValue?: string(name='tag_value', example='c71cf3d796c374bf48644482cb0c3****'),
      }
    ](name='tag_resource'),
  }(name='tag_resources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(tmpReq: ListTagResourcesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(tmpReq);
  var request = new ListTagResourcesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.resourceIds)) {
    request.resourceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resourceIds, 'resource_ids', 'json');
  }
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'tags', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.nextToken)) {
    query['next_token'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['region_id'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceIdsShrink)) {
    query['resource_ids'] = request.resourceIdsShrink;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['resource_type'] = request.resourceType;
  }
  if (!Util.isUnset(request.tagsShrink)) {
    query['tags'] = request.tagsShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagResources',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/tags`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listTagResourcesWithOptions(request, headers, runtime);
}

model MigrateClusterRequest {
  ossBucketEndpoint?: string(name='oss_bucket_endpoint'),
  ossBucketName?: string(name='oss_bucket_name'),
}

model MigrateClusterResponseBody = {
  clusterId?: string(name='cluster_id'),
  requestId?: string(name='request_id'),
  taskId?: string(name='task_id'),
}

model MigrateClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: MigrateClusterResponseBody(name='body'),
}

async function migrateClusterWithOptions(clusterId: string, request: MigrateClusterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): MigrateClusterResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.ossBucketEndpoint)) {
    body['oss_bucket_endpoint'] = request.ossBucketEndpoint;
  }
  if (!Util.isUnset(request.ossBucketName)) {
    body['oss_bucket_name'] = request.ossBucketName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'MigrateCluster',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(clusterId)}/migrate`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function migrateCluster(clusterId: string, request: MigrateClusterRequest): MigrateClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return migrateClusterWithOptions(clusterId, request, headers, runtime);
}

model ModifyClusterRequest {
  apiServerEip?: boolean(name='api_server_eip', example='true'),
  apiServerEipId?: string(name='api_server_eip_id', example='eip-wz9fnasl6dsfhmvci****'),
  deletionProtection?: boolean(name='deletion_protection', example='true'),
  enableRrsa?: boolean(name='enable_rrsa', example='true'),
  ingressDomainRebinding?: string(name='ingress_domain_rebinding', example='true'),
  ingressLoadbalancerId?: string(name='ingress_loadbalancer_id', example='lb-wz97kes8tnndkpodw****'),
  instanceDeletionProtection?: boolean(name='instance_deletion_protection', example='true'),
  maintenanceWindow?: MaintenanceWindow(name='maintenance_window'),
  resourceGroupId?: string(name='resource_group_id', example='rg-acfmyvw3wjm****'),
}

model ModifyClusterResponseBody = {
  clusterId?: string(name='cluster_id', example='cb95aa626a47740afbf6aa09****'),
  requestId?: string(name='request_id', example='687C5BAA-D103-4993-884B-C35E4314****'),
  taskId?: string(name='task_id', example='T-5a54309c80282e39ea00****'),
}

model ModifyClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyClusterResponseBody(name='body'),
}

async function modifyClusterWithOptions(ClusterId: string, request: ModifyClusterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyClusterResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiServerEip)) {
    body['api_server_eip'] = request.apiServerEip;
  }
  if (!Util.isUnset(request.apiServerEipId)) {
    body['api_server_eip_id'] = request.apiServerEipId;
  }
  if (!Util.isUnset(request.deletionProtection)) {
    body['deletion_protection'] = request.deletionProtection;
  }
  if (!Util.isUnset(request.enableRrsa)) {
    body['enable_rrsa'] = request.enableRrsa;
  }
  if (!Util.isUnset(request.ingressDomainRebinding)) {
    body['ingress_domain_rebinding'] = request.ingressDomainRebinding;
  }
  if (!Util.isUnset(request.ingressLoadbalancerId)) {
    body['ingress_loadbalancer_id'] = request.ingressLoadbalancerId;
  }
  if (!Util.isUnset(request.instanceDeletionProtection)) {
    body['instance_deletion_protection'] = request.instanceDeletionProtection;
  }
  if (!Util.isUnset(request.maintenanceWindow)) {
    body['maintenance_window'] = request.maintenanceWindow;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['resource_group_id'] = request.resourceGroupId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyCluster',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/api/v2/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyCluster(ClusterId: string, request: ModifyClusterRequest): ModifyClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyClusterWithOptions(ClusterId, request, headers, runtime);
}

model ModifyClusterAddonRequest {
  config?: string(name='config', example='{"CpuRequest":"800m"}'),
}

model ModifyClusterAddonResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function modifyClusterAddonWithOptions(clusterId: string, componentId: string, request: ModifyClusterAddonRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyClusterAddonResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.config)) {
    body['config'] = request.config;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyClusterAddon',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(clusterId)}/components/${OpenApiUtil.getEncodeParam(componentId)}/config`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function modifyClusterAddon(clusterId: string, componentId: string, request: ModifyClusterAddonRequest): ModifyClusterAddonResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyClusterAddonWithOptions(clusterId, componentId, request, headers, runtime);
}

model ModifyClusterConfigurationRequest {
  customizeConfig?: [ 
    {
      configs?: [ 
        {
          key?: string(name='key', example='MaxRequestsInflight'),
          value?: string(name='value', example='100'),
        }
      ](name='configs'),
      name?: string(name='name', example='kube-apiserver'),
    }
  ](name='customize_config'),
}

model ModifyClusterConfigurationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function modifyClusterConfigurationWithOptions(ClusterId: string, request: ModifyClusterConfigurationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyClusterConfigurationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.customizeConfig)) {
    body['customize_config'] = request.customizeConfig;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyClusterConfiguration',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/configuration`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function modifyClusterConfiguration(ClusterId: string, request: ModifyClusterConfigurationRequest): ModifyClusterConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyClusterConfigurationWithOptions(ClusterId, request, headers, runtime);
}

model ModifyClusterNodePoolRequest {
  autoScaling?: {
    eipBandwidth?: long(name='eip_bandwidth', example='5'),
    eipInternetChargeType?: string(name='eip_internet_charge_type', example='PayByBandwidth'),
    enable?: boolean(name='enable', example='true'),
    isBondEip?: boolean(name='is_bond_eip', example='true'),
    maxInstances?: long(name='max_instances', example='10'),
    minInstances?: long(name='min_instances', example='2'),
    type?: string(name='type', example='cpu'),
  }(name='auto_scaling'),
  kubernetesConfig?: {
    cmsEnabled?: boolean(name='cms_enabled', example='true'),
    cpuPolicy?: string(name='cpu_policy', example='none'),
    labels?: [
      Tag
    ](name='labels'),
    runtime?: string(name='runtime', example='docker'),
    runtimeVersion?: string(name='runtime_version', example='19.03.5'),
    taints?: [
      Taint
    ](name='taints'),
    userData?: string(name='user_data', example='IyEvdXNyL2Jpbi9iYXNoCmVjaG8gIkhlbGxvIEFDSyEi'),
  }(name='kubernetes_config'),
  management?: {
    autoRepair?: boolean(name='auto_repair', example='true'),
    enable?: boolean(name='enable', example='true'),
    upgradeConfig?: {
      autoUpgrade?: boolean(name='auto_upgrade', example='true'),
      maxUnavailable?: long(name='max_unavailable', example='1'),
      surge?: long(name='surge', example='5'),
      surgePercentage?: long(name='surge_percentage', example='0'),
    }(name='upgrade_config'),
  }(name='management'),
  nodepoolInfo?: {
    name?: string(name='name', example='default-nodepool'),
    resourceGroupId?: string(name='resource_group_id', example='rg-acfmyvw3wjm****'),
  }(name='nodepool_info'),
  scalingGroup?: {
    autoRenew?: boolean(name='auto_renew', example='true'),
    autoRenewPeriod?: long(name='auto_renew_period', example='1'),
    compensateWithOnDemand?: boolean(name='compensate_with_on_demand', example='true'),
    dataDisks?: [
      DataDisk
    ](name='data_disks'),
    desiredSize?: long(name='desired_size', example='2'),
    imageId?: string(name='image_id', example='aliyun_2_1903_x64_20G_alibase_20200904.vhd'),
    instanceChargeType?: string(name='instance_charge_type', example='PostPaid'),
    instanceTypes?: [ string ](name='instance_types'),
    internetChargeType?: string(name='internet_charge_type', example='PayByBandwidth'),
    internetMaxBandwidthOut?: long(name='internet_max_bandwidth_out', example='5'),
    keyPair?: string(name='key_pair', example='pro-nodepool'),
    loginPassword?: string(name='login_password', example='Hello1234'),
    multiAzPolicy?: string(name='multi_az_policy', example='BALANCE'),
    onDemandBaseCapacity?: long(name='on_demand_base_capacity', example='0'),
    onDemandPercentageAboveBaseCapacity?: long(name='on_demand_percentage_above_base_capacity', example='20'),
    period?: long(name='period', example='1'),
    periodUnit?: string(name='period_unit', example='Month'),
    platform?: string(name='platform', example='AliyunLinux'),
    rdsInstances?: [ string ](name='rds_instances'),
    scalingPolicy?: string(name='scaling_policy', example='release'),
    spotInstancePools?: long(name='spot_instance_pools', example='5'),
    spotInstanceRemedy?: boolean(name='spot_instance_remedy', example='false'),
    spotPriceLimit?: [ 
      {
        instanceType?: string(name='instance_type', example='ecs.c6.large'),
        priceLimit?: string(name='price_limit', example='0.39'),
      }
    ](name='spot_price_limit'),
    spotStrategy?: string(name='spot_strategy', example='SpotWithPriceLimit'),
    systemDiskCategory?: string(name='system_disk_category', example='cloud_efficiency'),
    systemDiskPerformanceLevel?: string(name='system_disk_performance_level', example='PL1'),
    systemDiskSize?: long(name='system_disk_size', example='120'),
    tags?: [
      Tag
    ](name='tags'),
    vswitchIds?: [ string ](name='vswitch_ids'),
  }(name='scaling_group'),
  teeConfig?: {
    teeEnable?: boolean(name='tee_enable', example='false'),
  }(name='tee_config'),
  updateNodes?: boolean(name='update_nodes', example='true'),
}

model ModifyClusterNodePoolResponseBody = {
  nodepoolId?: string(name='nodepool_id', example='np737c3ac1ac684703b9e10673aa2c****'),
  taskId?: string(name='task_id', example='T-5fd211e924e1d00787000293'),
}

model ModifyClusterNodePoolResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyClusterNodePoolResponseBody(name='body'),
}

async function modifyClusterNodePoolWithOptions(ClusterId: string, NodepoolId: string, request: ModifyClusterNodePoolRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyClusterNodePoolResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.autoScaling)) {
    body['auto_scaling'] = request.autoScaling;
  }
  if (!Util.isUnset(request.kubernetesConfig)) {
    body['kubernetes_config'] = request.kubernetesConfig;
  }
  if (!Util.isUnset(request.management)) {
    body['management'] = request.management;
  }
  if (!Util.isUnset(request.nodepoolInfo)) {
    body['nodepool_info'] = request.nodepoolInfo;
  }
  if (!Util.isUnset(request.scalingGroup)) {
    body['scaling_group'] = request.scalingGroup;
  }
  if (!Util.isUnset(request.teeConfig)) {
    body['tee_config'] = request.teeConfig;
  }
  if (!Util.isUnset(request.updateNodes)) {
    body['update_nodes'] = request.updateNodes;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyClusterNodePool',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/nodepools/${OpenApiUtil.getEncodeParam(NodepoolId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyClusterNodePool(ClusterId: string, NodepoolId: string, request: ModifyClusterNodePoolRequest): ModifyClusterNodePoolResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyClusterNodePoolWithOptions(ClusterId, NodepoolId, request, headers, runtime);
}

model ModifyClusterTagsRequest {
  body?: [
    Tag
  ](name='body'),
}

model ModifyClusterTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function modifyClusterTagsWithOptions(ClusterId: string, request: ModifyClusterTagsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyClusterTagsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = Util.toArray(request.body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyClusterTags',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/tags`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function modifyClusterTags(ClusterId: string, request: ModifyClusterTagsRequest): ModifyClusterTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyClusterTagsWithOptions(ClusterId, request, headers, runtime);
}

model ModifyNodePoolNodeConfigRequest {
  kubeletConfig?: {
    cpuManagerPolicy?: string(name='cpuManagerPolicy', example='none'),
    eventBurst?: long(name='eventBurst', example='10'),
    eventRecordQPS?: long(name='eventRecordQPS', example='5'),
    evictionHard?: map[string]any(name='evictionHard'),
    evictionSoft?: map[string]any(name='evictionSoft'),
    evictionSoftGracePeriod?: map[string]any(name='evictionSoftGracePeriod'),
    kubeAPIBurst?: long(name='kubeAPIBurst', example='10'),
    kubeAPIQPS?: long(name='kubeAPIQPS', example='5'),
    kubeReserved?: map[string]any(name='kubeReserved'),
    registryBurst?: long(name='registryBurst', example='10'),
    registryPullQPS?: long(name='registryPullQPS', example='5'),
    serializeImagePulls?: boolean(name='serializeImagePulls', example='true'),
    systemReserved?: map[string]any(name='systemReserved'),
  }(name='kubelet_config'),
  rollingPolicy?: {
    maxParallelism?: long(name='max_parallelism', example='3'),
  }(name='rolling_policy'),
}

model ModifyNodePoolNodeConfigResponseBody = {
  nodepoolId?: string(name='nodepool_id', example='np737c3ac1ac684703b9e10673aa2c****'),
  requestId?: string(name='request_id', example='D7631D83-6E98-1949-B665-766A62xxxxxx'),
  taskId?: string(name='task_id', example='T-5fd211e924e1d00787xxxxxx'),
}

model ModifyNodePoolNodeConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyNodePoolNodeConfigResponseBody(name='body'),
}

async function modifyNodePoolNodeConfigWithOptions(ClusterId: string, NodepoolId: string, request: ModifyNodePoolNodeConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyNodePoolNodeConfigResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.kubeletConfig)) {
    body['kubelet_config'] = request.kubeletConfig;
  }
  if (!Util.isUnset(request.rollingPolicy)) {
    body['rolling_policy'] = request.rollingPolicy;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyNodePoolNodeConfig',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/nodepools/${OpenApiUtil.getEncodeParam(NodepoolId)}/node_config`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyNodePoolNodeConfig(ClusterId: string, NodepoolId: string, request: ModifyNodePoolNodeConfigRequest): ModifyNodePoolNodeConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyNodePoolNodeConfigWithOptions(ClusterId, NodepoolId, request, headers, runtime);
}

model ModifyPolicyInstanceRequest {
  action?: string(name='action', example='deny'),
  instanceName?: string(name='instance_name', example='allowed-repos-cbhhb'),
  namespaces?: [ string ](name='namespaces'),
  parameters?: map[string]any(name='parameters', example='"restrictedNamespaces": [ "test" ]'),
}

model ModifyPolicyInstanceResponseBody = {
  instances?: [ string ](name='instances'),
}

model ModifyPolicyInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyPolicyInstanceResponseBody(name='body'),
}

async function modifyPolicyInstanceWithOptions(clusterId: string, policyName: string, request: ModifyPolicyInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyPolicyInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.action)) {
    body['action'] = request.action;
  }
  if (!Util.isUnset(request.instanceName)) {
    body['instance_name'] = request.instanceName;
  }
  if (!Util.isUnset(request.namespaces)) {
    body['namespaces'] = request.namespaces;
  }
  if (!Util.isUnset(request.parameters)) {
    body['parameters'] = request.parameters;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyPolicyInstance',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(clusterId)}/policies/${OpenApiUtil.getEncodeParam(policyName)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyPolicyInstance(clusterId: string, policyName: string, request: ModifyPolicyInstanceRequest): ModifyPolicyInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyPolicyInstanceWithOptions(clusterId, policyName, request, headers, runtime);
}

model OpenAckServiceRequest {
  type?: string(name='type', example='propayasgo'),
}

model OpenAckServiceResponseBody = {
  orderId?: string(name='order_id', example='2067*******0374'),
  requestId?: string(name='request_id', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model OpenAckServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OpenAckServiceResponseBody(name='body'),
}

async function openAckServiceWithOptions(request: OpenAckServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OpenAckServiceResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.type)) {
    query['type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OpenAckService',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/service/open`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function openAckService(request: OpenAckServiceRequest): OpenAckServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return openAckServiceWithOptions(request, headers, runtime);
}

model PauseClusterUpgradeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function pauseClusterUpgradeWithOptions(ClusterId: string, headers: map[string]string, runtime: Util.RuntimeOptions): PauseClusterUpgradeResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'PauseClusterUpgrade',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/api/v2/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/upgrade/pause`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function pauseClusterUpgrade(ClusterId: string): PauseClusterUpgradeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return pauseClusterUpgradeWithOptions(ClusterId, headers, runtime);
}

model PauseComponentUpgradeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function pauseComponentUpgradeWithOptions(clusterid: string, componentid: string, headers: map[string]string, runtime: Util.RuntimeOptions): PauseComponentUpgradeResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'PauseComponentUpgrade',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(clusterid)}/components/${OpenApiUtil.getEncodeParam(componentid)}/pause`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function pauseComponentUpgrade(clusterid: string, componentid: string): PauseComponentUpgradeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return pauseComponentUpgradeWithOptions(clusterid, componentid, headers, runtime);
}

model PauseTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function pauseTaskWithOptions(taskId: string, headers: map[string]string, runtime: Util.RuntimeOptions): PauseTaskResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'PauseTask',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/tasks/${OpenApiUtil.getEncodeParam(taskId)}/pause`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function pauseTask(taskId: string): PauseTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return pauseTaskWithOptions(taskId, headers, runtime);
}

model RemoveClusterNodesRequest {
  drainNode?: boolean(name='drain_node'),
  nodes?: [ string ](name='nodes'),
  releaseNode?: boolean(name='release_node'),
}

model RemoveClusterNodesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

/**
  * @deprecated
  *
  * @param request RemoveClusterNodesRequest
  * @param headers map
  * @param runtime runtime options for this request RuntimeOptions
  * @return RemoveClusterNodesResponse
 */
// Deprecated
async function removeClusterNodesWithOptions(ClusterId: string, request: RemoveClusterNodesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveClusterNodesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.drainNode)) {
    body['drain_node'] = request.drainNode;
  }
  if (!Util.isUnset(request.nodes)) {
    body['nodes'] = request.nodes;
  }
  if (!Util.isUnset(request.releaseNode)) {
    body['release_node'] = request.releaseNode;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RemoveClusterNodes',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/api/v2/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/nodes/remove`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request RemoveClusterNodesRequest
  * @return RemoveClusterNodesResponse
 */
// Deprecated
async function removeClusterNodes(ClusterId: string, request: RemoveClusterNodesRequest): RemoveClusterNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return removeClusterNodesWithOptions(ClusterId, request, headers, runtime);
}

model RemoveNodePoolNodesRequest {
  drainNode?: boolean(name='drain_node', example='true'),
  nodes?: [ string ](name='nodes'),
  releaseNode?: boolean(name='release_node', example='true'),
}

model RemoveNodePoolNodesShrinkRequest {
  drainNode?: boolean(name='drain_node', example='true'),
  nodesShrink?: string(name='nodes'),
  releaseNode?: boolean(name='release_node', example='true'),
}

model RemoveNodePoolNodesResponseBody = {
  requestId?: string(name='request_id'),
  taskId?: string(name='task_id'),
}

model RemoveNodePoolNodesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveNodePoolNodesResponseBody(name='body'),
}

async function removeNodePoolNodesWithOptions(ClusterId: string, NodepoolId: string, tmpReq: RemoveNodePoolNodesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveNodePoolNodesResponse {
  Util.validateModel(tmpReq);
  var request = new RemoveNodePoolNodesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.nodes)) {
    request.nodesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.nodes, 'nodes', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.drainNode)) {
    query['drain_node'] = request.drainNode;
  }
  if (!Util.isUnset(request.nodesShrink)) {
    query['nodes'] = request.nodesShrink;
  }
  if (!Util.isUnset(request.releaseNode)) {
    query['release_node'] = request.releaseNode;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveNodePoolNodes',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/nodepools/${OpenApiUtil.getEncodeParam(NodepoolId)}/nodes`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeNodePoolNodes(ClusterId: string, NodepoolId: string, request: RemoveNodePoolNodesRequest): RemoveNodePoolNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return removeNodePoolNodesWithOptions(ClusterId, NodepoolId, request, headers, runtime);
}

model RemoveWorkflowResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function removeWorkflowWithOptions(workflowName: string, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveWorkflowResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'RemoveWorkflow',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/gs/workflow/${OpenApiUtil.getEncodeParam(workflowName)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function removeWorkflow(workflowName: string): RemoveWorkflowResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return removeWorkflowWithOptions(workflowName, headers, runtime);
}

model RepairClusterNodePoolRequest {
  nodes?: [ string ](name='nodes'),
}

model RepairClusterNodePoolResponseBody = {
  requestId?: string(name='request_id', example='db82195b-75a8-40e5-9be4-16f1829dc624'),
  taskId?: string(name='task_id', example='T-613b19bbd160ad4928000001'),
}

model RepairClusterNodePoolResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RepairClusterNodePoolResponseBody(name='body'),
}

async function repairClusterNodePoolWithOptions(clusterId: string, nodepoolId: string, request: RepairClusterNodePoolRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RepairClusterNodePoolResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.nodes)) {
    body['nodes'] = request.nodes;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RepairClusterNodePool',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(clusterId)}/nodepools/${OpenApiUtil.getEncodeParam(nodepoolId)}/repair`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function repairClusterNodePool(clusterId: string, nodepoolId: string, request: RepairClusterNodePoolRequest): RepairClusterNodePoolResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return repairClusterNodePoolWithOptions(clusterId, nodepoolId, request, headers, runtime);
}

model ResumeComponentUpgradeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function resumeComponentUpgradeWithOptions(clusterid: string, componentid: string, headers: map[string]string, runtime: Util.RuntimeOptions): ResumeComponentUpgradeResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ResumeComponentUpgrade',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(clusterid)}/components/${OpenApiUtil.getEncodeParam(componentid)}/resume`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function resumeComponentUpgrade(clusterid: string, componentid: string): ResumeComponentUpgradeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return resumeComponentUpgradeWithOptions(clusterid, componentid, headers, runtime);
}

model ResumeTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function resumeTaskWithOptions(taskId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ResumeTaskResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ResumeTask',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/tasks/${OpenApiUtil.getEncodeParam(taskId)}/resume`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function resumeTask(taskId: string): ResumeTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return resumeTaskWithOptions(taskId, headers, runtime);
}

model ResumeUpgradeClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function resumeUpgradeClusterWithOptions(ClusterId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ResumeUpgradeClusterResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ResumeUpgradeCluster',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/api/v2/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/upgrade/resume`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function resumeUpgradeCluster(ClusterId: string): ResumeUpgradeClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return resumeUpgradeClusterWithOptions(ClusterId, headers, runtime);
}

model ScaleClusterRequest {
  cloudMonitorFlags?: boolean(name='cloud_monitor_flags'),
  count?: long(name='count'),
  cpuPolicy?: string(name='cpu_policy'),
  disableRollback?: boolean(name='disable_rollback'),
  keyPair?: string(name='key_pair'),
  loginPassword?: string(name='login_password'),
  tags?: [ 
    {
      key?: string(name='key'),
    }
  ](name='tags'),
  taints?: [ 
    {
      effect?: string(name='effect'),
      key?: string(name='key'),
      value?: string(name='value'),
    }
  ](name='taints'),
  vswitchIds?: [ string ](name='vswitch_ids'),
  workerAutoRenew?: boolean(name='worker_auto_renew'),
  workerAutoRenewPeriod?: long(name='worker_auto_renew_period'),
  workerDataDisk?: boolean(name='worker_data_disk'),
  workerDataDisks?: [ 
    {
      category?: string(name='category'),
      encrypted?: string(name='encrypted'),
      size?: string(name='size'),
    }
  ](name='worker_data_disks'),
  workerInstanceChargeType?: string(name='worker_instance_charge_type'),
  workerInstanceTypes?: [ string ](name='worker_instance_types'),
  workerPeriod?: long(name='worker_period'),
  workerPeriodUnit?: string(name='worker_period_unit'),
  workerSystemDiskCategory?: string(name='worker_system_disk_category'),
  workerSystemDiskSize?: long(name='worker_system_disk_size'),
}

model ScaleClusterResponseBody = {
  clusterId?: string(name='cluster_id'),
  requestId?: string(name='request_id'),
  taskId?: string(name='task_id'),
}

model ScaleClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ScaleClusterResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request ScaleClusterRequest
  * @param headers map
  * @param runtime runtime options for this request RuntimeOptions
  * @return ScaleClusterResponse
 */
// Deprecated
async function scaleClusterWithOptions(ClusterId: string, request: ScaleClusterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ScaleClusterResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.cloudMonitorFlags)) {
    body['cloud_monitor_flags'] = request.cloudMonitorFlags;
  }
  if (!Util.isUnset(request.count)) {
    body['count'] = request.count;
  }
  if (!Util.isUnset(request.cpuPolicy)) {
    body['cpu_policy'] = request.cpuPolicy;
  }
  if (!Util.isUnset(request.disableRollback)) {
    body['disable_rollback'] = request.disableRollback;
  }
  if (!Util.isUnset(request.keyPair)) {
    body['key_pair'] = request.keyPair;
  }
  if (!Util.isUnset(request.loginPassword)) {
    body['login_password'] = request.loginPassword;
  }
  if (!Util.isUnset(request.tags)) {
    body['tags'] = request.tags;
  }
  if (!Util.isUnset(request.taints)) {
    body['taints'] = request.taints;
  }
  if (!Util.isUnset(request.vswitchIds)) {
    body['vswitch_ids'] = request.vswitchIds;
  }
  if (!Util.isUnset(request.workerAutoRenew)) {
    body['worker_auto_renew'] = request.workerAutoRenew;
  }
  if (!Util.isUnset(request.workerAutoRenewPeriod)) {
    body['worker_auto_renew_period'] = request.workerAutoRenewPeriod;
  }
  if (!Util.isUnset(request.workerDataDisk)) {
    body['worker_data_disk'] = request.workerDataDisk;
  }
  if (!Util.isUnset(request.workerDataDisks)) {
    body['worker_data_disks'] = request.workerDataDisks;
  }
  if (!Util.isUnset(request.workerInstanceChargeType)) {
    body['worker_instance_charge_type'] = request.workerInstanceChargeType;
  }
  if (!Util.isUnset(request.workerInstanceTypes)) {
    body['worker_instance_types'] = request.workerInstanceTypes;
  }
  if (!Util.isUnset(request.workerPeriod)) {
    body['worker_period'] = request.workerPeriod;
  }
  if (!Util.isUnset(request.workerPeriodUnit)) {
    body['worker_period_unit'] = request.workerPeriodUnit;
  }
  if (!Util.isUnset(request.workerSystemDiskCategory)) {
    body['worker_system_disk_category'] = request.workerSystemDiskCategory;
  }
  if (!Util.isUnset(request.workerSystemDiskSize)) {
    body['worker_system_disk_size'] = request.workerSystemDiskSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ScaleCluster',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request ScaleClusterRequest
  * @return ScaleClusterResponse
 */
// Deprecated
async function scaleCluster(ClusterId: string, request: ScaleClusterRequest): ScaleClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return scaleClusterWithOptions(ClusterId, request, headers, runtime);
}

model ScaleClusterNodePoolRequest {
  count?: long(name='count', example='1'),
}

model ScaleClusterNodePoolResponseBody = {
  taskId?: string(name='task_id', example='T-5faa48fb31b6b8078d00****'),
}

model ScaleClusterNodePoolResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ScaleClusterNodePoolResponseBody(name='body'),
}

async function scaleClusterNodePoolWithOptions(ClusterId: string, NodepoolId: string, request: ScaleClusterNodePoolRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ScaleClusterNodePoolResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.count)) {
    body['count'] = request.count;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ScaleClusterNodePool',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/nodepools/${OpenApiUtil.getEncodeParam(NodepoolId)}`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function scaleClusterNodePool(ClusterId: string, NodepoolId: string, request: ScaleClusterNodePoolRequest): ScaleClusterNodePoolResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return scaleClusterNodePoolWithOptions(ClusterId, NodepoolId, request, headers, runtime);
}

model ScaleOutClusterRequest {
  cloudMonitorFlags?: boolean(name='cloud_monitor_flags', example='true'),
  count?: long(name='count', example='3'),
  cpuPolicy?: string(name='cpu_policy', example='none'),
  imageId?: string(name='image_id', example='m-bp16z7xko3vvv8gt****'),
  keyPair?: string(name='key_pair', example='secrity-key'),
  loginPassword?: string(name='login_password', example='Hello@1234'),
  rdsInstances?: [ string ](name='rds_instances'),
  runtime?: Runtime(name='runtime'),
  tags?: [
    Tag
  ](name='tags'),
  taints?: [
    Taint
  ](name='taints'),
  userData?: string(name='user_data', example='IyEvdXNyL2Jpbi9iYXNoCmVjaG8gIkhlbGxvIEFD****'),
  vswitchIds?: [ string ](name='vswitch_ids'),
  workerAutoRenew?: boolean(name='worker_auto_renew', example='true'),
  workerAutoRenewPeriod?: long(name='worker_auto_renew_period', example='6'),
  workerDataDisks?: [ 
    {
      autoSnapshotPolicyId?: string(name='auto_snapshot_policy_id', example='sp-bp14yziiuvu3s6jn****'),
      category?: string(name='category', example='cloud_essd'),
      encrypted?: string(name='encrypted', example='true'),
      size?: string(name='size', example='120'),
    }
  ](name='worker_data_disks'),
  workerInstanceChargeType?: string(name='worker_instance_charge_type', example='PrePaid'),
  workerInstanceTypes?: [ string ](name='worker_instance_types'),
  workerPeriod?: long(name='worker_period', example='1'),
  workerPeriodUnit?: string(name='worker_period_unit', example='Month'),
  workerSystemDiskCategory?: string(name='worker_system_disk_category', example='cloud_efficiency'),
  workerSystemDiskSize?: long(name='worker_system_disk_size', example='120'),
}

model ScaleOutClusterResponseBody = {
  clusterId?: string(name='cluster_id', example='c82e6987e2961451182edacd74faf****'),
  requestId?: string(name='request_id', example='687C5BAA-D103-4993-884B-C35E4314A1E1'),
  taskId?: string(name='task_id', example='T-5a54309c80282e39ea00002f'),
}

model ScaleOutClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ScaleOutClusterResponseBody(name='body'),
}

async function scaleOutClusterWithOptions(ClusterId: string, request: ScaleOutClusterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ScaleOutClusterResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.cloudMonitorFlags)) {
    body['cloud_monitor_flags'] = request.cloudMonitorFlags;
  }
  if (!Util.isUnset(request.count)) {
    body['count'] = request.count;
  }
  if (!Util.isUnset(request.cpuPolicy)) {
    body['cpu_policy'] = request.cpuPolicy;
  }
  if (!Util.isUnset(request.imageId)) {
    body['image_id'] = request.imageId;
  }
  if (!Util.isUnset(request.keyPair)) {
    body['key_pair'] = request.keyPair;
  }
  if (!Util.isUnset(request.loginPassword)) {
    body['login_password'] = request.loginPassword;
  }
  if (!Util.isUnset(request.rdsInstances)) {
    body['rds_instances'] = request.rdsInstances;
  }
  if (!Util.isUnset(request.runtime)) {
    body['runtime'] = request.runtime;
  }
  if (!Util.isUnset(request.tags)) {
    body['tags'] = request.tags;
  }
  if (!Util.isUnset(request.taints)) {
    body['taints'] = request.taints;
  }
  if (!Util.isUnset(request.userData)) {
    body['user_data'] = request.userData;
  }
  if (!Util.isUnset(request.vswitchIds)) {
    body['vswitch_ids'] = request.vswitchIds;
  }
  if (!Util.isUnset(request.workerAutoRenew)) {
    body['worker_auto_renew'] = request.workerAutoRenew;
  }
  if (!Util.isUnset(request.workerAutoRenewPeriod)) {
    body['worker_auto_renew_period'] = request.workerAutoRenewPeriod;
  }
  if (!Util.isUnset(request.workerDataDisks)) {
    body['worker_data_disks'] = request.workerDataDisks;
  }
  if (!Util.isUnset(request.workerInstanceChargeType)) {
    body['worker_instance_charge_type'] = request.workerInstanceChargeType;
  }
  if (!Util.isUnset(request.workerInstanceTypes)) {
    body['worker_instance_types'] = request.workerInstanceTypes;
  }
  if (!Util.isUnset(request.workerPeriod)) {
    body['worker_period'] = request.workerPeriod;
  }
  if (!Util.isUnset(request.workerPeriodUnit)) {
    body['worker_period_unit'] = request.workerPeriodUnit;
  }
  if (!Util.isUnset(request.workerSystemDiskCategory)) {
    body['worker_system_disk_category'] = request.workerSystemDiskCategory;
  }
  if (!Util.isUnset(request.workerSystemDiskSize)) {
    body['worker_system_disk_size'] = request.workerSystemDiskSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ScaleOutCluster',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/api/v2/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function scaleOutCluster(ClusterId: string, request: ScaleOutClusterRequest): ScaleOutClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return scaleOutClusterWithOptions(ClusterId, request, headers, runtime);
}

model StartAlertResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function startAlertWithOptions(ClusterId: string, headers: map[string]string, runtime: Util.RuntimeOptions): StartAlertResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'StartAlert',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/alert/${OpenApiUtil.getEncodeParam(ClusterId)}/alert_rule/start`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function startAlert(ClusterId: string): StartAlertResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return startAlertWithOptions(ClusterId, headers, runtime);
}

model StartWorkflowRequest {
  mappingBamOutFilename?: string(name='mapping_bam_out_filename', example='abc.bam'),
  mappingBamOutPath?: string(name='mapping_bam_out_path', example='output/bamDirName'),
  mappingBucketName?: string(name='mapping_bucket_name', example='gene-shenzhen'),
  mappingFastqFirstFilename?: string(name='mapping_fastq_first_filename', example='MGISEQ2000_PCR-free_NA12878_1_V100003043_L01_1.fq.gz'),
  mappingFastqPath?: string(name='mapping_fastq_path', example='fastq/MGISEQ2000'),
  mappingFastqSecondFilename?: string(name='mapping_fastq_second_filename', example='MGISEQ2000_PCR-free_NA12878_1_V100003043_L01_2.fq.gz'),
  mappingIsMarkDup?: string(name='mapping_is_mark_dup', example='true'),
  mappingOssRegion?: string(name='mapping_oss_region', example='cn-hangzhou'),
  mappingReferencePath?: string(name='mapping_reference_path', example='reference/hg19'),
  service?: string(name='service', example='s'),
  wgsBucketName?: string(name='wgs_bucket_name', example='gene-shenzhen'),
  wgsFastqFirstFilename?: string(name='wgs_fastq_first_filename', example='MGISEQ2000_PCR-free_NA12878_1_V100003043_L01_1.fq.gz'),
  wgsFastqPath?: string(name='wgs_fastq_path', example='fastq/MGISEQ2000'),
  wgsFastqSecondFilename?: string(name='wgs_fastq_second_filename', example='MGISEQ2000_PCR-free_NA12878_1_V100003043_L01_2.fq.gz'),
  wgsOssRegion?: string(name='wgs_oss_region', example='cn-shenzhen'),
  wgsReferencePath?: string(name='wgs_reference_path', example='reference/hg19'),
  wgsVcfOutFilename?: string(name='wgs_vcf_out_filename', example='abc.vcf'),
  wgsVcfOutPath?: string(name='wgs_vcf_out_path', example='output/vcf'),
  workflowType?: string(name='workflow_type', example='mapping'),
}

model StartWorkflowResponseBody = {
  jobName?: string(name='JobName', example='mapping-gpu-66xv7'),
}

model StartWorkflowResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartWorkflowResponseBody(name='body'),
}

async function startWorkflowWithOptions(request: StartWorkflowRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartWorkflowResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.mappingBamOutFilename)) {
    body['mapping_bam_out_filename'] = request.mappingBamOutFilename;
  }
  if (!Util.isUnset(request.mappingBamOutPath)) {
    body['mapping_bam_out_path'] = request.mappingBamOutPath;
  }
  if (!Util.isUnset(request.mappingBucketName)) {
    body['mapping_bucket_name'] = request.mappingBucketName;
  }
  if (!Util.isUnset(request.mappingFastqFirstFilename)) {
    body['mapping_fastq_first_filename'] = request.mappingFastqFirstFilename;
  }
  if (!Util.isUnset(request.mappingFastqPath)) {
    body['mapping_fastq_path'] = request.mappingFastqPath;
  }
  if (!Util.isUnset(request.mappingFastqSecondFilename)) {
    body['mapping_fastq_second_filename'] = request.mappingFastqSecondFilename;
  }
  if (!Util.isUnset(request.mappingIsMarkDup)) {
    body['mapping_is_mark_dup'] = request.mappingIsMarkDup;
  }
  if (!Util.isUnset(request.mappingOssRegion)) {
    body['mapping_oss_region'] = request.mappingOssRegion;
  }
  if (!Util.isUnset(request.mappingReferencePath)) {
    body['mapping_reference_path'] = request.mappingReferencePath;
  }
  if (!Util.isUnset(request.service)) {
    body['service'] = request.service;
  }
  if (!Util.isUnset(request.wgsBucketName)) {
    body['wgs_bucket_name'] = request.wgsBucketName;
  }
  if (!Util.isUnset(request.wgsFastqFirstFilename)) {
    body['wgs_fastq_first_filename'] = request.wgsFastqFirstFilename;
  }
  if (!Util.isUnset(request.wgsFastqPath)) {
    body['wgs_fastq_path'] = request.wgsFastqPath;
  }
  if (!Util.isUnset(request.wgsFastqSecondFilename)) {
    body['wgs_fastq_second_filename'] = request.wgsFastqSecondFilename;
  }
  if (!Util.isUnset(request.wgsOssRegion)) {
    body['wgs_oss_region'] = request.wgsOssRegion;
  }
  if (!Util.isUnset(request.wgsReferencePath)) {
    body['wgs_reference_path'] = request.wgsReferencePath;
  }
  if (!Util.isUnset(request.wgsVcfOutFilename)) {
    body['wgs_vcf_out_filename'] = request.wgsVcfOutFilename;
  }
  if (!Util.isUnset(request.wgsVcfOutPath)) {
    body['wgs_vcf_out_path'] = request.wgsVcfOutPath;
  }
  if (!Util.isUnset(request.workflowType)) {
    body['workflow_type'] = request.workflowType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StartWorkflow',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/gs/workflow`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startWorkflow(request: StartWorkflowRequest): StartWorkflowResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return startWorkflowWithOptions(request, headers, runtime);
}

model StopAlertResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function stopAlertWithOptions(ClusterId: string, headers: map[string]string, runtime: Util.RuntimeOptions): StopAlertResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'StopAlert',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/alert/${OpenApiUtil.getEncodeParam(ClusterId)}/alert_rule/stop`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function stopAlert(ClusterId: string): StopAlertResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return stopAlertWithOptions(ClusterId, headers, runtime);
}

model TagResourcesRequest {
  regionId?: string(name='region_id', example='cn-hangzhou'),
  resourceIds?: [ string ](name='resource_ids'),
  resourceType?: string(name='resource_type', example='CLUSTER'),
  tags?: [
    Tag
  ](name='tags'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='2D69A58F-345C-4FDE-88E4-BF51894XXXXX'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['region_id'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceIds)) {
    body['resource_ids'] = request.resourceIds;
  }
  if (!Util.isUnset(request.resourceType)) {
    body['resource_type'] = request.resourceType;
  }
  if (!Util.isUnset(request.tags)) {
    body['tags'] = request.tags;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TagResources',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/tags`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return tagResourcesWithOptions(request, headers, runtime);
}

model UnInstallClusterAddonsRequest {
  addons?: [ 
    {
      name?: string(name='name', example='ack-node-problem-detector'),
    }
  ](name='addons'),
}

model UnInstallClusterAddonsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function unInstallClusterAddonsWithOptions(ClusterId: string, request: UnInstallClusterAddonsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UnInstallClusterAddonsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = Util.toArray(request.addons),
  };
  var params = new OpenApi.Params{
    action = 'UnInstallClusterAddons',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/components/uninstall`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function unInstallClusterAddons(ClusterId: string, request: UnInstallClusterAddonsRequest): UnInstallClusterAddonsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return unInstallClusterAddonsWithOptions(ClusterId, request, headers, runtime);
}

model UntagResourcesRequest {
  all?: boolean(name='all', example='true'),
  regionId?: string(name='region_id', example='cn-hangzhou'),
  resourceIds?: [ string ](name='resource_ids'),
  resourceType?: string(name='resource_type', example='CLUSTER'),
  tagKeys?: [ string ](name='tag_keys'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='2D69A58F-345C-4FDE-88E4-BF51894XXXXX'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.all)) {
    query['all'] = request.all;
  }
  if (!Util.isUnset(request.regionId)) {
    query['region_id'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceIds)) {
    query['resource_ids'] = request.resourceIds;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['resource_type'] = request.resourceType;
  }
  if (!Util.isUnset(request.tagKeys)) {
    query['tag_keys'] = request.tagKeys;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UntagResources',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/tags`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return untagResourcesWithOptions(request, headers, runtime);
}

model UpdateContactGroupForAlertResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function updateContactGroupForAlertWithOptions(ClusterId: string, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateContactGroupForAlertResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'UpdateContactGroupForAlert',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/alert/${OpenApiUtil.getEncodeParam(ClusterId)}/alert_rule/contact_groups`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function updateContactGroupForAlert(ClusterId: string): UpdateContactGroupForAlertResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateContactGroupForAlertWithOptions(ClusterId, headers, runtime);
}

model UpdateK8sClusterUserConfigExpireRequest {
  expireHour?: long(name='expire_hour', example='720'),
  user?: string(name='user'),
}

model UpdateK8sClusterUserConfigExpireResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function updateK8sClusterUserConfigExpireWithOptions(ClusterId: string, request: UpdateK8sClusterUserConfigExpireRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateK8sClusterUserConfigExpireResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.expireHour)) {
    body['expire_hour'] = request.expireHour;
  }
  if (!Util.isUnset(request.user)) {
    body['user'] = request.user;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateK8sClusterUserConfigExpire',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/k8s/${OpenApiUtil.getEncodeParam(ClusterId)}/user_config/expire`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function updateK8sClusterUserConfigExpire(ClusterId: string, request: UpdateK8sClusterUserConfigExpireRequest): UpdateK8sClusterUserConfigExpireResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateK8sClusterUserConfigExpireWithOptions(ClusterId, request, headers, runtime);
}

model UpdateTemplateRequest {
  description?: string(name='description', example='web server cluster'),
  name?: string(name='name', example='webserver01'),
  tags?: string(name='tags', example='web'),
  template?: string(name='template', example='apiVersion: apps/v1\\\\nkind: Deployment\\\\nmetadata:\\\\n  name: nginx-deployment-basic\\\\n  labels:\\\\n    app: nginx\\\\nspec:\\\\n  replicas: 2\\\\n  selector:\\\\n    matchLabels:\\\\n      app: nginx\\\\n  template:\\\\n    metadata:\\\\n      labels:\\\\n        app: nginx\\\\n    spec:\\\\n      containers:\\\\n      - name: nginx\\\\n        image: busybox:latest\\\\n        ports:\\\\n        - containerPort: 8080'),
  templateType?: string(name='template_type', example='kubernetes'),
}

model UpdateTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function updateTemplateWithOptions(TemplateId: string, request: UpdateTemplateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateTemplateResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    body['name'] = request.name;
  }
  if (!Util.isUnset(request.tags)) {
    body['tags'] = request.tags;
  }
  if (!Util.isUnset(request.template)) {
    body['template'] = request.template;
  }
  if (!Util.isUnset(request.templateType)) {
    body['template_type'] = request.templateType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTemplate',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/templates/${OpenApiUtil.getEncodeParam(TemplateId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function updateTemplate(TemplateId: string, request: UpdateTemplateRequest): UpdateTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateTemplateWithOptions(TemplateId, request, headers, runtime);
}

model UpgradeClusterRequest {
  componentName?: string(name='component_name', example='k8s'),
  nextVersion?: string(name='next_version', example='1.16.9-aliyun.1'),
  version?: string(name='version', example='1.14.8-aliyun.1'),
}

model UpgradeClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function upgradeClusterWithOptions(ClusterId: string, request: UpgradeClusterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpgradeClusterResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.componentName)) {
    body['component_name'] = request.componentName;
  }
  if (!Util.isUnset(request.nextVersion)) {
    body['next_version'] = request.nextVersion;
  }
  if (!Util.isUnset(request.version)) {
    body['version'] = request.version;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpgradeCluster',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/api/v2/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/upgrade`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function upgradeCluster(ClusterId: string, request: UpgradeClusterRequest): UpgradeClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return upgradeClusterWithOptions(ClusterId, request, headers, runtime);
}

model UpgradeClusterAddonsRequest {
  body?: [ 
    {
      componentName?: string(name='component_name', example='coredns'),
      config?: string(name='config', example='{\\"CpuRequest\\":\\"800m\\"}'),
      nextVersion?: string(name='next_version', example='1.6.7'),
      version?: string(name='version', example='v1.6.2'),
    }
  ](name='body'),
}

model UpgradeClusterAddonsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function upgradeClusterAddonsWithOptions(ClusterId: string, request: UpgradeClusterAddonsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpgradeClusterAddonsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = Util.toArray(request.body),
  };
  var params = new OpenApi.Params{
    action = 'UpgradeClusterAddons',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/components/upgrade`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function upgradeClusterAddons(ClusterId: string, request: UpgradeClusterAddonsRequest): UpgradeClusterAddonsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return upgradeClusterAddonsWithOptions(ClusterId, request, headers, runtime);
}

model UpgradeClusterNodepoolRequest {
  imageId?: string(name='image_id', example='aliyun_2_1903_x64_20G_alibase_20200529.vhd'),
  kubernetesVersion?: string(name='kubernetes_version', example='1.22.15-aliyun.1'),
  runtimeVersion?: string(name='runtime_version', example='1.5.10'),
}

model UpgradeClusterNodepoolResponseBody = {
  requestId?: string(name='RequestId', example='2D69A58F-345C-4FDE-88E4-BF518944****'),
}

model UpgradeClusterNodepoolResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpgradeClusterNodepoolResponseBody(name='body'),
}

async function upgradeClusterNodepoolWithOptions(ClusterId: string, NodepoolId: string, request: UpgradeClusterNodepoolRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpgradeClusterNodepoolResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.imageId)) {
    body['image_id'] = request.imageId;
  }
  if (!Util.isUnset(request.kubernetesVersion)) {
    body['kubernetes_version'] = request.kubernetesVersion;
  }
  if (!Util.isUnset(request.runtimeVersion)) {
    body['runtime_version'] = request.runtimeVersion;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpgradeClusterNodepool',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/nodepools/${OpenApiUtil.getEncodeParam(NodepoolId)}/upgrade`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function upgradeClusterNodepool(ClusterId: string, NodepoolId: string, request: UpgradeClusterNodepoolRequest): UpgradeClusterNodepoolResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return upgradeClusterNodepoolWithOptions(ClusterId, NodepoolId, request, headers, runtime);
}

