/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @signatureAlgorithm = 'v2';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-2-pop = 'cs.aliyuncs.com',
    cn-beijing-finance-pop = 'cs.aliyuncs.com',
    cn-beijing-gov-1 = 'cs.aliyuncs.com',
    cn-beijing-nu16-b01 = 'cs.aliyuncs.com',
    cn-edge-1 = 'cs.aliyuncs.com',
    cn-fujian = 'cs.aliyuncs.com',
    cn-haidian-cm12-c01 = 'cs.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'cs.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'cs.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'cs.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'cs.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'cs.aliyuncs.com',
    cn-hangzhou-test-306 = 'cs.aliyuncs.com',
    cn-hongkong-finance-pop = 'cs.aliyuncs.com',
    cn-qingdao-nebula = 'cs.aliyuncs.com',
    cn-shanghai-et15-b01 = 'cs.aliyuncs.com',
    cn-shanghai-et2-b01 = 'cs.aliyuncs.com',
    cn-shanghai-inner = 'cs.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'cs.aliyuncs.com',
    cn-shenzhen-inner = 'cs.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'cs.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'cs.aliyuncs.com',
    cn-wuhan = 'cs.aliyuncs.com',
    cn-yushanfang = 'cs.aliyuncs.com',
    cn-zhangbei = 'cs.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'cs.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'cs.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'cs.aliyuncs.com',
    eu-west-1-oxs = 'cs.aliyuncs.com',
    rus-west-1-pop = 'cs.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('cs', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model Addon {
  config?: string(name='config', example='{\\"IngressSlbNetworkType\\":\\"internet\\"}'),
  disabled?: boolean(name='disabled', example='false'),
  name?: string(name='name', example='nginx-ingress-controller'),
  version?: string(name='version', example='v1.9.3-aliyun.1'),
}

model DataDisk {
  autoFormat?: boolean(name='auto_format', example='true'),
  autoSnapshotPolicyId?: string(name='auto_snapshot_policy_id', example='sp-2zej1nogjvovnz4z****'),
  burstingEnabled?: boolean(name='bursting_enabled', example='true'),
  category?: string(name='category', example='cloud_ssd'),
  encrypted?: string(name='encrypted', example='true'),
  fileSystem?: string(name='file_system', example='ext4'),
  mountTarget?: string(name='mount_target', example='/mnt/path1'),
  performanceLevel?: string(name='performance_level', example='PL1'),
  provisionedIops?: long(name='provisioned_iops', example='1000'),
  size?: long(name='size', example='40'),
}

model KubeletConfig {
  allowedUnsafeSysctls?: [ string ](name='allowedUnsafeSysctls'),
  containerLogMaxFiles?: long(name='containerLogMaxFiles', example='5'),
  containerLogMaxSize?: string(name='containerLogMaxSize', example='10Mi'),
  cpuManagerPolicy?: string(name='cpuManagerPolicy', example='none'),
  eventBurst?: long(name='eventBurst', example='10'),
  eventRecordQPS?: long(name='eventRecordQPS', example='5'),
  evictionHard?: map[string]any(name='evictionHard'),
  evictionSoft?: map[string]any(name='evictionSoft'),
  evictionSoftGracePeriod?: map[string]any(name='evictionSoftGracePeriod'),
  featureGates?: map[string]any(name='featureGates'),
  kubeAPIBurst?: long(name='kubeAPIBurst', example='10'),
  kubeAPIQPS?: long(name='kubeAPIQPS', example='5'),
  kubeReserved?: map[string]any(name='kubeReserved'),
  maxPods?: long(name='maxPods', example='110'),
  readOnlyPort?: long(name='readOnlyPort', example='0'),
  registryBurst?: long(name='registryBurst', example='10'),
  registryPullQPS?: long(name='registryPullQPS', example='5'),
  serializeImagePulls?: boolean(name='serializeImagePulls', example='true'),
  systemReserved?: map[string]any(name='systemReserved'),
}

model MaintenanceWindow {
  duration?: string(name='duration', example='3h'),
  enable?: boolean(name='enable', example='false'),
  maintenanceTime?: string(name='maintenance_time', example='03:00:00Z'),
  weeklyPeriod?: string(name='weekly_period', example='Monday,Thursday'),
}

model Nodepool {
  autoScaling?: {
    eipBandwidth?: long(name='eip_bandwidth', example='5', deprecated='true'),
    eipInternetChargeType?: string(name='eip_internet_charge_type', example='PayByBandwidth', deprecated='true'),
    enable?: boolean(name='enable', example='true'),
    isBondEip?: boolean(name='is_bond_eip', example='true', deprecated='true'),
    maxInstances?: long(name='max_instances', example='10'),
    minInstances?: long(name='min_instances', example='0'),
    type?: string(name='type', example='cpu'),
  }(name='auto_scaling'),
  count?: long(name='count', example='1', deprecated='true'),
  interconnectConfig?: {
    bandwidth?: long(name='bandwidth', example='10', deprecated='true'),
    ccnId?: string(name='ccn_id', example='ccn-qm5i0i0q9yi*******', deprecated='true'),
    ccnRegionId?: string(name='ccn_region_id', example='cn-shanghai', deprecated='true'),
    cenId?: string(name='cen_id', example='cen-ey9k9nfhz0f*******', deprecated='true'),
    improvedPeriod?: string(name='improved_period', example='1', deprecated='true'),
  }(name='interconnect_config', deprecated='true'),
  interconnectMode?: string(name='interconnect_mode', example='basic'),
  kubernetesConfig?: {
    cmsEnabled?: boolean(name='cms_enabled', example='true'),
    cpuPolicy?: string(name='cpu_policy', example='none'),
    labels?: [
      Tag
    ](name='labels'),
    nodeNameMode?: string(name='node_name_mode', example='customized,test.,5,.com'),
    runtime?: string(name='runtime', example='docker'),
    runtimeVersion?: string(name='runtime_version', example='19.03.5'),
    taints?: [
      Taint
    ](name='taints'),
    userData?: string(name='user_data', example='MXM='),
  }(name='kubernetes_config'),
  management?: {
    autoRepair?: boolean(name='auto_repair', example='false'),
    enable?: boolean(name='enable', example='false'),
    upgradeConfig?: {
      autoUpgrade?: boolean(name='auto_upgrade', example='false'),
      maxUnavailable?: long(name='max_unavailable', example='0'),
      surge?: long(name='surge', example='0'),
      surgePercentage?: long(name='surge_percentage', example='0'),
    }(name='upgrade_config'),
  }(name='management'),
  maxNodes?: long(name='max_nodes', example='10'),
  nodepoolInfo?: {
    name?: string(name='name', example='np-test'),
    resourceGroupId?: string(name='resource_group_id', example='rg-acfmyvw3wjm****'),
    type?: string(name='type', example='ess'),
  }(name='nodepool_info'),
  scalingGroup?: {
    autoRenew?: boolean(name='auto_renew', example='false'),
    autoRenewPeriod?: long(name='auto_renew_period', example='0'),
    compensateWithOnDemand?: boolean(name='compensate_with_on_demand', example='true'),
    dataDisks?: [
      DataDisk
    ](name='data_disks'),
    deploymentsetId?: string(name='deploymentset_id', example='ds-bp1d19mmbsv3jf6xxxxx'),
    desiredSize?: long(name='desired_size', example='2'),
    imageId?: string(name='image_id', example='aliyun_2_1903_x64_20G_alibase_20200904.vhd'),
    imageType?: string(name='image_type', example='AliyunLinux'),
    instanceChargeType?: string(name='instance_charge_type', example='PostPaid'),
    instanceTypes?: [ string ](name='instance_types'),
    internetChargeType?: string(name='internet_charge_type', example='PayByBandwidth'),
    internetMaxBandwidthOut?: long(name='internet_max_bandwidth_out', example='10'),
    keyPair?: string(name='key_pair', example='np-key'),
    loginPassword?: string(name='login_password', example='Hello1234,,'),
    multiAzPolicy?: string(name='multi_az_policy', example='COST_OPTIMIZED'),
    onDemandBaseCapacity?: long(name='on_demand_base_capacity', example='0'),
    onDemandPercentageAboveBaseCapacity?: long(name='on_demand_percentage_above_base_capacity', example='20'),
    period?: long(name='period', example='0'),
    periodUnit?: string(name='period_unit', example='Month'),
    platform?: string(name='platform', example='AliyunLinux'),
    privatePoolOptions?: {
      id?: string(name='id'),
      matchCriteria?: string(name='match_criteria'),
    }(name='private_pool_options'),
    rdsInstances?: [ string ](name='rds_instances'),
    scalingPolicy?: string(name='scaling_policy', example='release'),
    securityGroupId?: string(name='security_group_id', example='sg-2zeihch86ooz9io4****'),
    securityGroupIds?: [ string ](name='security_group_ids'),
    spotInstancePools?: long(name='spot_instance_pools', example='5'),
    spotInstanceRemedy?: boolean(name='spot_instance_remedy', example='false'),
    spotPriceLimit?: [ 
      {
        instanceType?: string(name='instance_type', example='ecs.c6.large'),
        priceLimit?: string(name='price_limit', example='0.39'),
      }
    ](name='spot_price_limit'),
    spotStrategy?: string(name='spot_strategy', example='NoSpot'),
    systemDiskBurstingEnabled?: boolean(name='system_disk_bursting_enabled', example='true'),
    systemDiskCategory?: string(name='system_disk_category', example='cloud_efficiency'),
    systemDiskPerformanceLevel?: string(name='system_disk_performance_level', example='PL1'),
    systemDiskProvisionedIops?: long(name='system_disk_provisioned_iops', example='1000'),
    systemDiskSize?: long(name='system_disk_size', example='120'),
    tags?: [ 
      {
        key?: string(name='key', example='key'),
        value?: string(name='value', example='value'),
      }
    ](name='tags'),
    vswitchIds?: [ string ](name='vswitch_ids'),
  }(name='scaling_group'),
  teeConfig?: {
    teeEnable?: boolean(name='tee_enable', example='false'),
  }(name='tee_config'),
}

model Runtime {
  name?: string(name='name', example='docker'),
  version?: string(name='version', example='19.03.5'),
}

model Tag {
  key?: string(name='key', example='env'),
  value?: string(name='value', example='prod'),
}

model Taint {
  effect?: string(name='effect', example='NoSchedule'),
  key?: string(name='key', example='key'),
  value?: string(name='value', example='value'),
}

model StandardComponentsValue = {
  name?: string(name='name', description='The name of the component.', example='ack-arena'),
  version?: string(name='version', description='The version of the component.', example='0.5.0'),
  description?: string(name='description', description='The description of the component.', example='***'),
  required?: string(name='required', description='Indicates whether the component is a required component. Valid values:

*   `true`: The component is required and must be installed when a cluster is created.
*   `false`: The component is optional. After a cluster is created, you can go to the `Add-ons` page to install the component.', example='false'),
  disabled?: boolean(name='disabled', description='Indicates whether the automatic installation of the component is disabled. By default, some optional components, such as components for logging and Ingresses, are installed when a cluster is created. You can set this parameter to disable automatic component installation. Valid values:

*   `true`: disables automatic component installation.
*   `false`: enables automatic component installation.', example='false'),
}

model QuotasValue = {
  quota?: string(name='quota', description='The value of the quota. If the quota limit is reached, submit an application in the [Quota Center console](https://quotas.console.aliyun.com/products/csk/quotas) to increase the quota.', example='1'),
  operationCode?: string(name='operation_code', description='The quota code.', example='q_Kubernetes_Cluster'),
  adjustable?: boolean(name='adjustable', description='Indicates whether the quota is adjustable.', example='true'),
  unit?: string(name='unit', description='The unit.', example='Cluster'),
}

model AttachInstancesRequest {
  cpuPolicy?: string(name='cpu_policy', description='The CPU management policy. The following policies are supported if the Kubernetes version of the cluster is 1.12.6 or later.

*   `static`: This policy allows pods with specific resource characteristics on the node to be configured with enhanced CPU affinity and exclusivity.
*   `none`: The default CPU affinity is used.

Default value: `none`.

>  This parameter is not supported if you specify the `nodepool_id` parameter.', example='none'),
  formatDisk?: boolean(name='format_disk', description='Specifies whether to store container data and images on data disks. Valid values:

*   `true`: stores container data and images on data disks.
*   `false`: does not store container data or images on data disks.

Default value: `false`.

How a data disk is mounted:

*   If the ECS instances are already mounted with data disks and the file system of the last data disk is not initialized, the system automatically formats this data disk to ext4 and mounts it to /var/lib/docker and /var/lib/kubelet.
*   If no data disk is attached to the ECS instances, the system does not purchase a new data disk.

>  If you choose to store container data and images on data disks and a data disk is already mounted to the ECS instance, the original data on this data disk will be cleared. You can back up the disk to avoid data loss.', example='false'),
  imageId?: string(name='image_id', description='The ID of the custom image. If you do not set this parameter, the default system image is used.

> 

*   If you specify a custom image, the custom image is used to deploy the operating systems on the system disks of the nodes.

*   This parameter is not supported after you specify `nodepool_id`.', example='aliyun_2_1903_x64_20G_alibase_20200529.vhd'),
  instances?: [ string ](name='instances', description='The ECS instances to be added.'),
  isEdgeWorker?: boolean(name='is_edge_worker', description='Specifies whether the nodes that you want to add are Edge Node Service (ENS) nodes. Valid values:

*   `true`: The nodes that you want to add are ENS nodes.
*   `false`: The nodes that you want to add are not ENS nodes.

Default value: `false`.

>  If the nodes that you want to add are ENS nodes, you must set this parameter to `true`. This allows you to identify these nodes.', example='false'),
  keepInstanceName?: boolean(name='keep_instance_name', description='Specifies whether to retain the instance name. Valid values:

*   `true`: retains the instance name.
*   `false`: does not retain the instance name.

Default value: `true`', example='true'),
  keyPair?: string(name='key_pair', description='The name of the key pair that is used to log on to the ECS instances. You must set key_pair or `login_password`.

>  This parameter is not supported if you specify the `nodepool_id` parameter.', example='secrity-key'),
  nodepoolId?: string(name='nodepool_id', description='The node pool ID. If you do not set this parameter, the nodes are added to the default node pool.', example='np615c0e0966124216a0412e10afe0****'),
  password?: string(name='password', description='The SSH logon password that is used to log on to the ECS instances. You must set login_password or `key_pair`. The password must be 8 to 30 characters in length, and must contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters. It cannot contain backslashes (\\\\) or double quotation marks (").

For security considerations, the password is encrypted during data transfer.', example='Hello1234'),
  rdsInstances?: [ string ](name='rds_instances', description='A list of ApsaraDB RDS instances.'),
  runtime?: Runtime(name='runtime', description='The container runtime.

>  This parameter is not supported if you specify the `nodepool_id` parameter.'),
  tags?: [
    Tag
  ](name='tags', description='The labels that you want to add to nodes. You must add labels based on the following rules:

*   Each label is a case-sensitive key-value pair. You can add up to 20 labels.
*   A key must be unique and cannot exceed 64 characters in length. A value can be empty and cannot exceed 128 characters in length. Keys and values cannot start with `aliyun`, `acs:`, `https://`, or `http://`. For more information, see [Labels and Selectors](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#syntax-and-character-set).

>  This parameter is not supported if you specify the `nodepool_id` parameter.'),
  userData?: string(name='user_data', description='User-defined data. For more information, see [Generate user data](~~49121~~).

>  This parameter is not supported if you specify the `nodepool_id` parameter.', example='IyEvdXNyL2Jpbi9iYXNoCmVjaG8gIkhlbGxvIEFDSyEi'),
}

model AttachInstancesResponseBody = {
  list?: [ 
    {
      code?: string(name='code', description='The code that indicates the task result.', example='200'),
      instanceId?: string(name='instanceId', description='The ID of the ECS instance.', example='i-2ze0lgm3y6iylcbt****'),
      message?: string(name='message', description='Indicates whether the ECS instance is successfully added to the ACK cluster.', example='successful'),
    }
  ](name='list', description='The details of the added nodes.'),
  taskId?: string(name='task_id', description='The task ID.', example='T-5a544aff80282e39ea000039'),
}

model AttachInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AttachInstancesResponseBody(name='body'),
}

async function attachInstancesWithOptions(ClusterId: string, request: AttachInstancesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AttachInstancesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.cpuPolicy)) {
    body['cpu_policy'] = request.cpuPolicy;
  }
  if (!Util.isUnset(request.formatDisk)) {
    body['format_disk'] = request.formatDisk;
  }
  if (!Util.isUnset(request.imageId)) {
    body['image_id'] = request.imageId;
  }
  if (!Util.isUnset(request.instances)) {
    body['instances'] = request.instances;
  }
  if (!Util.isUnset(request.isEdgeWorker)) {
    body['is_edge_worker'] = request.isEdgeWorker;
  }
  if (!Util.isUnset(request.keepInstanceName)) {
    body['keep_instance_name'] = request.keepInstanceName;
  }
  if (!Util.isUnset(request.keyPair)) {
    body['key_pair'] = request.keyPair;
  }
  if (!Util.isUnset(request.nodepoolId)) {
    body['nodepool_id'] = request.nodepoolId;
  }
  if (!Util.isUnset(request.password)) {
    body['password'] = request.password;
  }
  if (!Util.isUnset(request.rdsInstances)) {
    body['rds_instances'] = request.rdsInstances;
  }
  if (!Util.isUnset(request.runtime)) {
    body['runtime'] = request.runtime;
  }
  if (!Util.isUnset(request.tags)) {
    body['tags'] = request.tags;
  }
  if (!Util.isUnset(request.userData)) {
    body['user_data'] = request.userData;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AttachInstances',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/attach`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function attachInstances(ClusterId: string, request: AttachInstancesRequest): AttachInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return attachInstancesWithOptions(ClusterId, request, headers, runtime);
}

model AttachInstancesToNodePoolRequest {
  formatDisk?: boolean(name='format_disk', description='Specifies whether to store container data and images on data disks. Valid values:

*   `true`: stores container data and images on data disks.
*   `false`: does not store container data or images on data disks.

Default value: `false`.

How to mount a data disk:

*   If the ECS instances are already mounted with data disks and the file system of the last data disk is not initialized, the system automatically formats this data disk to ext4 and mounts it to /var/lib/docker and /var/lib/kubelet.
*   If no data disk is attached to the ECS instances, the system does not purchase a new data disk.

> If you choose to store container data and images on a data disk and the data disk is already mounted to the ECS instance, the existing data on the data disk will be cleared. You can back up the disk to avoid data loss.', example='false'),
  instances?: [ string ](name='instances', description='The IDs of the instances to be added.'),
  keepInstanceName?: boolean(name='keep_instance_name', description='Specifies whether to retain the instance name. Valid values:

*   `true`: retains the instance name.
*   `false`: does not retain the instance name.

Default value: `true`.', example='true'),
  password?: string(name='password', description='The SSH password that is used to log on to the instance.', example='Hello1234'),
}

model AttachInstancesToNodePoolResponseBody = {
  requestId?: string(name='request_id', description='The request ID.', example='D7631D83-6E98-1949-B665-766A62xxxxxx'),
  taskId?: string(name='task_id', description='The task ID.', example='T-5a54309c80282e39ea00002f'),
}

model AttachInstancesToNodePoolResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AttachInstancesToNodePoolResponseBody(name='body'),
}

async function attachInstancesToNodePoolWithOptions(ClusterId: string, NodepoolId: string, request: AttachInstancesToNodePoolRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AttachInstancesToNodePoolResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.formatDisk)) {
    body['format_disk'] = request.formatDisk;
  }
  if (!Util.isUnset(request.instances)) {
    body['instances'] = request.instances;
  }
  if (!Util.isUnset(request.keepInstanceName)) {
    body['keep_instance_name'] = request.keepInstanceName;
  }
  if (!Util.isUnset(request.password)) {
    body['password'] = request.password;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AttachInstancesToNodePool',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/nodepools/${OpenApiUtil.getEncodeParam(NodepoolId)}/attach`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function attachInstancesToNodePool(ClusterId: string, NodepoolId: string, request: AttachInstancesToNodePoolRequest): AttachInstancesToNodePoolResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return attachInstancesToNodePoolWithOptions(ClusterId, NodepoolId, request, headers, runtime);
}

model CancelClusterUpgradeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function cancelClusterUpgradeWithOptions(ClusterId: string, headers: map[string]string, runtime: Util.RuntimeOptions): CancelClusterUpgradeResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'CancelClusterUpgrade',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/api/v2/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/upgrade/cancel`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function cancelClusterUpgrade(ClusterId: string): CancelClusterUpgradeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return cancelClusterUpgradeWithOptions(ClusterId, headers, runtime);
}

model CancelComponentUpgradeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function cancelComponentUpgradeWithOptions(clusterId: string, componentId: string, headers: map[string]string, runtime: Util.RuntimeOptions): CancelComponentUpgradeResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'CancelComponentUpgrade',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(clusterId)}/components/${OpenApiUtil.getEncodeParam(componentId)}/cancel`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function cancelComponentUpgrade(clusterId: string, componentId: string): CancelComponentUpgradeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return cancelComponentUpgradeWithOptions(clusterId, componentId, headers, runtime);
}

model CancelTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function cancelTaskWithOptions(taskId: string, headers: map[string]string, runtime: Util.RuntimeOptions): CancelTaskResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'CancelTask',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/tasks/${OpenApiUtil.getEncodeParam(taskId)}/cancel`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function cancelTask(taskId: string): CancelTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return cancelTaskWithOptions(taskId, headers, runtime);
}

model CancelWorkflowRequest {
  action?: string(name='action', description='The operation that you want to perform. Set the value to cancel.', example='cancel'),
}

model CancelWorkflowResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function cancelWorkflowWithOptions(workflowName: string, request: CancelWorkflowRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CancelWorkflowResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.action)) {
    body['action'] = request.action;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CancelWorkflow',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/gs/workflow/${OpenApiUtil.getEncodeParam(workflowName)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function cancelWorkflow(workflowName: string, request: CancelWorkflowRequest): CancelWorkflowResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return cancelWorkflowWithOptions(workflowName, request, headers, runtime);
}

model CheckControlPlaneLogEnableResponseBody = {
  aliuid?: string(name='aliuid', description='The ID of the Alibaba Cloud account to which the resource belongs.', example='162981*****'),
  components?: [ string ](name='components', description='The control plane components for which log collection is enabled.'),
  logProject?: string(name='log_project', description='The name of the Simple Log Service project that you want to use to store the logs of control plane components.

Default value: k8s-log-$Cluster ID.', example='k8s-log-c5b5e80b0b64a4bf6939d2d8fbbc5****'),
  logTtl?: string(name='log_ttl', description='The retention period of the log data stored in the Logstore. Valid values: 1 to 3000. Unit: days.

Default value: 30.', example='30'),
}

model CheckControlPlaneLogEnableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckControlPlaneLogEnableResponseBody(name='body'),
}

async function checkControlPlaneLogEnableWithOptions(ClusterId: string, headers: map[string]string, runtime: Util.RuntimeOptions): CheckControlPlaneLogEnableResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'CheckControlPlaneLogEnable',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/controlplanelog`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkControlPlaneLogEnable(ClusterId: string): CheckControlPlaneLogEnableResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return checkControlPlaneLogEnableWithOptions(ClusterId, headers, runtime);
}

model CreateAutoscalingConfigRequest {
  coolDownDuration?: string(name='cool_down_duration', description='The cooldown period. Newly added nodes can be removed in scale-in activities only after the cooldown period ends. Unit: minutes.', example='10 m'),
  daemonsetEvictionForNodes?: boolean(name='daemonset_eviction_for_nodes', description='Specifies whether to evict DaemonSet pods during scale-in activities. Valid values:

*   `true`: evicts DaemonSet pods.
*   `false`: does not evict DaemonSet pods.', example='false'),
  expander?: string(name='expander', description='The node pool scale-out policy. Valid values:

*   `least-waste`: the default policy. If multiple node pools meet the requirement, this policy selects the node pool that will have the least idle resources after the scale-out activity is completed.
*   `random`: the random policy. If multiple node pools meet the requirement, this policy selects a random node pool for the scale-out activity.
*   `priority`: the priority-based policy If multiple node pools meet the requirement, this policy selects the node pool with the highest priority for the scale-out activity. The priority setting is stored in the ConfigMap named `cluster-autoscaler-priority-expander` in the kube-system namespace. When a scale-out activity is triggered, the policy obtains the node pool priorities from the ConfigMap based on the node pool IDs and then selects the node pool with the highest priority for the scale-out activity.', example='least-waste'),
  gpuUtilizationThreshold?: string(name='gpu_utilization_threshold', description='The scale-in threshold of GPU utilization. This threshold specifies the ratio of the GPU resources that are requested by pods to the total GPU resources on the node.', example='0.5'),
  maxGracefulTerminationSec?: int32(name='max_graceful_termination_sec', description='The maximum amount of time that the cluster autoscaler waits for pods on the nodes to terminate during scale-in activities. Unit: seconds.', example='14400s'),
  minReplicaCount?: int32(name='min_replica_count', description='The minimum number of pods that must be guaranteed during scale-in activities.', example='0'),
  recycleNodeDeletionEnabled?: boolean(name='recycle_node_deletion_enabled', description='Specifies whether to delete the corresponding Kubernetes node objects after nodes are removed in swift mode.', example='false'),
  scaleDownEnabled?: boolean(name='scale_down_enabled', description='Specifies whether to allow node scale-in activities. Valid values:

*   `true`: allows node scale-in activities.
*   `false`: does not allow node scale-in activities.', example='true'),
  scaleUpFromZero?: boolean(name='scale_up_from_zero', description='Specifies whether the cluster autoscaler performs scale-out activities when the number of ready nodes in the cluster is zero.', example='true'),
  scanInterval?: string(name='scan_interval', description='The interval at which the cluster is scanned and evaluated for scaling. Unit: seconds.', example='30s'),
  skipNodesWithLocalStorage?: boolean(name='skip_nodes_with_local_storage', description='Specifies whether to allow the cluster autoscaler to scale in nodes that host pods mounted with local storage (such as EmptyDir volumes or HostPath volumes). Valid values:

*   `true`: does not allow the cluster autoscaler to scale in these nodes.
*   `false`: allows the cluster autoscaler to scale in these nodes.', example='false'),
  skipNodesWithSystemPods?: boolean(name='skip_nodes_with_system_pods', description='Specifies whether to allow the cluster autoscaler to scale in nodes that host pods in the kube-system namespace, excluding DaemonSet pods and mirror pods. Valid values:

*   `true`: does not allow the cluster autoscaler to scale in these nodes.
*   `false`: allows the cluster autoscaler to scale in these nodes.', example='true'),
  unneededDuration?: string(name='unneeded_duration', description='The waiting time before the auto scaling feature performs a scale-in activity. Only if the resource usage on a node remains below the scale-in threshold within the waiting time, the node is removed after the waiting time ends. Unit: minutes.', example='10 m'),
  utilizationThreshold?: string(name='utilization_threshold', description='The scale-in threshold. This threshold specifies the ratio of the resources that are requested by pods to the total resources on the node.', example='0.5'),
}

model CreateAutoscalingConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function createAutoscalingConfigWithOptions(ClusterId: string, request: CreateAutoscalingConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAutoscalingConfigResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.coolDownDuration)) {
    body['cool_down_duration'] = request.coolDownDuration;
  }
  if (!Util.isUnset(request.daemonsetEvictionForNodes)) {
    body['daemonset_eviction_for_nodes'] = request.daemonsetEvictionForNodes;
  }
  if (!Util.isUnset(request.expander)) {
    body['expander'] = request.expander;
  }
  if (!Util.isUnset(request.gpuUtilizationThreshold)) {
    body['gpu_utilization_threshold'] = request.gpuUtilizationThreshold;
  }
  if (!Util.isUnset(request.maxGracefulTerminationSec)) {
    body['max_graceful_termination_sec'] = request.maxGracefulTerminationSec;
  }
  if (!Util.isUnset(request.minReplicaCount)) {
    body['min_replica_count'] = request.minReplicaCount;
  }
  if (!Util.isUnset(request.recycleNodeDeletionEnabled)) {
    body['recycle_node_deletion_enabled'] = request.recycleNodeDeletionEnabled;
  }
  if (!Util.isUnset(request.scaleDownEnabled)) {
    body['scale_down_enabled'] = request.scaleDownEnabled;
  }
  if (!Util.isUnset(request.scaleUpFromZero)) {
    body['scale_up_from_zero'] = request.scaleUpFromZero;
  }
  if (!Util.isUnset(request.scanInterval)) {
    body['scan_interval'] = request.scanInterval;
  }
  if (!Util.isUnset(request.skipNodesWithLocalStorage)) {
    body['skip_nodes_with_local_storage'] = request.skipNodesWithLocalStorage;
  }
  if (!Util.isUnset(request.skipNodesWithSystemPods)) {
    body['skip_nodes_with_system_pods'] = request.skipNodesWithSystemPods;
  }
  if (!Util.isUnset(request.unneededDuration)) {
    body['unneeded_duration'] = request.unneededDuration;
  }
  if (!Util.isUnset(request.utilizationThreshold)) {
    body['utilization_threshold'] = request.utilizationThreshold;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateAutoscalingConfig',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/cluster/${OpenApiUtil.getEncodeParam(ClusterId)}/autoscale/config/`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function createAutoscalingConfig(ClusterId: string, request: CreateAutoscalingConfigRequest): CreateAutoscalingConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createAutoscalingConfigWithOptions(ClusterId, request, headers, runtime);
}

model CreateClusterRequest {
  accessControlList?: [ string ](name='access_control_list', description='注册集群 API Server SLB 访问控制列表。'),
  addons?: [
    Addon
  ](name='addons', description='The components that you want to install in the cluster. When you create a cluster, you can set the `addons` parameter to install specific components.

**Network plug-in**: required. The Flannel and Terway plug-ins are supported. Select one of the plug-ins for the cluster.

*   Specify the Flannel plug-in in the following format: \\[{"name":"flannel","config":""}].
*   Specify the Terway plug-in in the following format: \\[{"name": "terway-eniip","config": ""}].

**Volume plug-in**: required. The `csi` and `flexvolume` volume plug-ins are supported.

*   Specify the `CSI` plug-in in the following format: \\[{"name":"csi-plugin","config": ""},{"name": "csi-provisioner","config": ""}].
*   Specify the `FlexVolume plug-in` in the following format: \\[{"name": "flexvolume","config": ""}].

**Simple Log Service component**: optional. We recommend that you enable Simple Log Service. If Log Service is disabled, you cannot use the cluster auditing feature.

*   Use an existing `Simple Log Service project`: \\[{"name": "logtail-ds","config": "{"IngressDashboardEnabled":"true","sls_project_name":"your_sls_project_name"}"}].
*   To create a `Simple Log Service project`, specify the component in the following format: \\[{"name": "logtail-ds","config": "{"IngressDashboardEnabled":"true"}"}].

**Ingress controller**`: optional. By default, the nginx-ingress-controller component is installed in ACK dedicated clusters.`

*   To install nginx-ingress-controller and enable Internet access, specify the Ingress controller in the following format: \\[{"name":"nginx-ingress-controller","config":"{"IngressSlbNetworkType":"internet"}"}].
*   If you do not want to install nginx-ingress-controller, specify the component in the following format: \\[{"name": "nginx-ingress-controller","config": "","disabled": true}].

**Event center**: Optional. By default, the event center feature is enabled.

You can use Kubernetes event centers to store and query events, and configure alert rules. You can use the Logstores that are associated with Kubernetes event centers for free within 90 days. For more information, see [Create and use a Kubernetes event center](https://help.aliyun.com/document_detail/150476.html#task-2389213).

Enable the ack-node-problem-detector component in the following format: \\[{"name":"ack-node-problem-detector","config":"{"sls_project_name":"your_sls_project_name"}"}].'),
  apiAudiences?: string(name='api_audiences', description='Service accounts provide identities for pods when pods communicate with the `API server` of the cluster. `api-audiences` are used by the `API server` to check whether the `tokens` of requests are legitimate.`` Separate multiple `audiences` with commas (,).

For more information about `ServiceAccount`, see [Enable service account token volume projection](~~160384~~).', example='kubernetes.default.svc'),
  chargeType?: string(name='charge_type', description='The billing method of the cluster.', example='1'),
  cisEnabled?: boolean(name='cis_enabled', description='Specifies whether to enable Center for Internet Security (CIS) reinforcement. For more information, see [CIS reinforcement](~~223744~~).

Valid values:

*   `true`: enables CIS reinforcement.
*   `false`: disables CIS reinforcement.

Default value: `false`.', example='false'),
  cloudMonitorFlags?: boolean(name='cloud_monitor_flags', description='Specifies whether to install the CloudMonitor agent. Valid values:

*   `true`: installs the CloudMonitor agent.
*   `false`: does not install the CloudMonitor agent.

Default value: `false`.', example='true'),
  clusterDomain?: string(name='cluster_domain', description='The domain name of the cluster.

The domain name can contain one or more parts that are separated by periods (.). Each part cannot exceed 63 characters in length, and can contain lowercase letters, digits, and hyphens (-). Each part must start and end with a lowercase letter or digit.', example='cluster.local'),
  clusterSpec?: string(name='cluster_spec', description='The type of ACK managed cluster. Valid values:

*   `ack.pro.small`: ACK Pro clusters
*   `ack.standard`: ACK Basic clusters

Default value: `ack.standard`. If you leave this property empty, an ACK Basic cluster is created.

For more information, see [Introduction to ACK managed clusters](https://help.aliyun.com/document_detail/173290.html).', example='ack.pro.small'),
  clusterType?: string(name='cluster_type', description='The type of the cluster. Valid values:

*   `Kubernetes`: ACK dedicated clusters
*   `ManagedKubernetes`: ACK managed clusters or ACK Edge clusters
*   `Ask`: ACK Serverless Basic clusters
*   `ExternalKubernetes`: external clusters that are registered to ACK', example='Kubernetes'),
  containerCidr?: string(name='container_cidr', description='The CIDR block of pods. You can specify 10.0.0.0/8, 172.16-31.0.0/12-16, 192.168.0.0/16, or their subnets as the CIDR block of pods. The CIDR block of pods cannot overlap with the CIDR block of the VPC in which the cluster is deployed and the CIDR blocks of existing clusters in the VPC. You cannot modify the pod CIDR block after the cluster is created.

For more information about subnetting for ACK clusters, see [Plan CIDR blocks for an ACK cluster that is deployed in a VPC](~~86500~~).

> If the cluster uses Flannel, this parameter is required.', example='172.20.0.0/16'),
  controlplaneLogComponents?: [ string ](name='controlplane_log_components', description='The list of control plane components for which you want to enable log collection.

By default, the logs of kube-apiserver, kube-controller-manager, and kube-scheduler are collected.'),
  controlplaneLogProject?: string(name='controlplane_log_project', description='The Simple Log Service project that is used to store the log of control plane components. You can use an existing project or create one. If you choose to create a Simple Log Service project, the created project is named in the `k8s-log-{ClusterID}` format.', example='k8s-log-xxx'),
  controlplaneLogTtl?: string(name='controlplane_log_ttl', description='The retention period of control plane logs in days.', example='30'),
  cpuPolicy?: string(name='cpu_policy', description='The CPU management policy. The following policies are supported if the Kubernetes version of the cluster is 1.12.6 or later.

*   `static`: allows pods with specific resource characteristics on the node to be granted enhanced CPU affinity and exclusivity.
*   `none`: specifies that the default CPU affinity is used.

Default value: `none`.', example='none'),
  customSan?: string(name='custom_san', description='Specifies custom subject alternative names (SANs) for the API server certificate to accept requests from specified IP addresses or domain names. Multiple IP addresses and domain names are separated by commas (,).', example='cs.aliyun.com'),
  deletionProtection?: boolean(name='deletion_protection', description='Specifies whether to enable deletion protection for the cluster. If deletion protection is enabled, the cluster cannot be deleted in the ACK console or by calling API operations. Valid values:

*   `true`: enables deletion protection for the cluster. This way, the cluster cannot be deleted in the ACK console or by calling API operations.
*   `false`: disables deletion protection for the cluster. This way, the cluster can be deleted in the ACK console or by calling API operations.

Default value: `false`.', example='true'),
  disableRollback?: boolean(name='disable_rollback', description='Specifies whether to perform a rollback if the cluster fails to be created. Valid values:

*   `true`: performs a rollback if the system fails to create the cluster
*   `false`: does not perform a rollback if the system fails to create the cluster

Default value: `true`.', example='true'),
  enableRrsa?: boolean(name='enable_rrsa', description='Specifies whether to enable the RAM Roles for Service Accounts (RRSA) feature.', example='true'),
  encryptionProviderKey?: string(name='encryption_provider_key', description='The ID of a key that is managed by Key Management Service (KMS). The key is used to encrypt data disks. For more information, see [KMS](~~28935~~).

> This feature supports only ACK Pro clusters.', example='0fe64791-55eb-4fc7-84c5-c6c7cdca****'),
  endpointPublicAccess?: boolean(name='endpoint_public_access', description='Specifies whether to enable Internet access for the cluster. You can use an elastic IP address (EIP) to expose the API server. This way, you can access the cluster over the Internet.

*   `true`: enables Internet access.
*   `false`: disables Internet access. If you set this parameter to false, the API server cannot be accessed over the Internet.

Default value: `false`.', example='true'),
  formatDisk?: boolean(name='format_disk', description='Specifies whether to mount a data disk to a node that is created based on an existing ECS instance. Valid values:

*   `true`: stores the data of containers and images on a data disk. Back up the existing data on the data disk first.
*   `false`: does not store the data of containers and images on a data disk.

Default value: `false`.

How to mount a data disk:

*   If an ECS instance has data disks mounted and the file system of the last data disk is not initialized, the system automatically formats the data disk to ext4. Then, the system mounts the data disk to /var/lib/docker and /var/lib/kubelet.
*   If no data disk is attached to the ECS instances, the system does not purchase a new data disk.', example='false'),
  imageId?: string(name='image_id', description='Specifies a custom image for nodes. By default, the image provided by ACK is used. You can select a custom image to replace the default image. For more information, see [Custom images](~~146647~~).', example='m-bp16z7xko3vvv8gt****'),
  imageType?: string(name='image_type', description='The type of OS distribution that you want to use. To specify the node OS, we recommend that you use this parameter. Valid values:

*   CentOS
*   AliyunLinux
*   AliyunLinux Qboot
*   AliyunLinuxUEFI
*   AliyunLinux3
*   Windows
*   WindowsCore
*   AliyunLinux3Arm64
*   ContainerOS

Default value: `CentOS`.', example='AliyunLinux'),
  instances?: [ string ](name='instances', description='The list of existing Elastic Compute Service (ECS) instances that are specified as worker nodes for the cluster.

> This parameter is required when you create worker nodes on existing ECS instances.'),
  ipStack?: string(name='ip_stack', description='The cluster IP stack.', example='可选值：ipv4(单栈)/dual(双栈) ，默认值为IPv4。'),
  isEnterpriseSecurityGroup?: boolean(name='is_enterprise_security_group', description='Specifies whether to create an advanced security group. This parameter takes effect only if `security_group_id` is left empty.

> To use a basic security group, make sure that the sum of the number of cluster nodes and the number of pods that use Terway does not exceed 2,000. Therefore, if the cluster uses Terway, we recommend that you use an advanced security group.

*   `true`: creates an advanced security group.
*   `false`: does not create an advanced security group.

Default value: `true`.', example='true'),
  keepInstanceName?: boolean(name='keep_instance_name', description='Specifies whether to retain the names of existing ECS instances that are used in the cluster. Valid values:

*   `true`: retains the names.
*   `false`: does not retain the names. The new names are assigned by the system.

Default value: `true`.', example='true'),
  keyPair?: string(name='key_pair', description='The name of the key pair. You must set this parameter or the `login_password` parameter.', example='secrity-key'),
  kubernetesVersion?: string(name='kubernetes_version', description='The Kubernetes version of the cluster. The Kubernetes versions supported by ACK are the same as the Kubernetes versions supported by open source Kubernetes. We recommend that you specify the latest Kubernetes version. If you do not set this parameter, the latest Kubernetes version is used.

You can create clusters of the latest two Kubernetes versions in the ACK console. You can create clusters of earlier Kubernetes versions by calling API operations. For more information about the Kubernetes versions supported by ACK, see [Release notes on Kubernetes versions](~~185269~~).', example='1.16.9-aliyun.1'),
  loadBalancerSpec?: string(name='load_balancer_spec', description='The specification of the Server Load Balancer (SLB) instance. Valid values:

*   slb.s1.small
*   slb.s2.small
*   slb.s2.medium
*   slb.s3.small
*   slb.s3.medium
*   slb.s3.large

Default value: `slb.s2.small`.', example='slb.s2.small'),
  loggingType?: string(name='logging_type', description='Specifies whether to enable Simple Log Service for the cluster. Set the value to `SLS`. This parameter takes effect only for ACK Serverless clusters.', example='SLS'),
  loginPassword?: string(name='login_password', description='The password for SSH logon. You must set this parameter or the `key_pair` parameter. The password must be 8 to 30 characters in length, and must contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters.', example='Hello@1234'),
  masterAutoRenew?: boolean(name='master_auto_renew', description='Specifies whether to enable auto-renewal for master nodes. This parameter takes effect and is required only if `master_instance_charge_type` is set to `PrePaid`.

*   `true`: enables auto-renewal.
*   `false`: disables auto-renewal.

Default value: `true`.', example='true'),
  masterAutoRenewPeriod?: long(name='master_auto_renew_period', description='The auto-renewal period for master nodes after the subscriptions of master nodes expire. This parameter takes effect and is required only if the subscription billing method is selected for master nodes.

Valid values: 1, 2, 3, 6, and 12.

Default value: 1.', example='1'),
  masterCount?: long(name='master_count', description='The number of master nodes. Valid values: `3` and `5`.

Default value: `3`.', example='3'),
  masterInstanceChargeType?: string(name='master_instance_charge_type', description='The billing method of master nodes. Valid values:

*   `PrePaid`: subscription.
*   `PostPaid`: pay-as-you-go.

Default value: `PostPaid`.', example='PrePaid'),
  masterInstanceTypes?: [ string ](name='master_instance_types', description='The Elastic Compute Service (ECS) instance types of master nodes. For more information, see [Overview of instance families](~~25378~~).'),
  masterPeriod?: long(name='master_period', description='The subscription duration of master nodes. This parameter takes effect and is required only if `master_instance_charge_type` is set to `PrePaid`.

Valid values: 1, 2, 3, 6, 12, 24, 36, 48, and 60.

Default value: 1.', example='1'),
  masterPeriodUnit?: string(name='master_period_unit', description='The billing cycle of master nodes. This parameter is required if master_instance_charge_type is set to `PrePaid`.

Set the value to `Month`. Resources are billed only on a monthly basis.', example='Month'),
  masterSystemDiskCategory?: string(name='master_system_disk_category', description='The type of system disk that you want to use for master nodes. Valid values:

*   `cloud_efficiency`: ultra disk.
*   `cloud_ssd`: standard SSD.
*   `cloud_essd`: enhanced SSD (ESSD).

Default value: `cloud_ssd`. The default value may vary in different zones.', example='cloud_ssd'),
  masterSystemDiskPerformanceLevel?: string(name='master_system_disk_performance_level', description='The performance level (PL) of the system disk that you want to use for master nodes. This parameter takes effect only for ESSDs. For more information about the relationship between disk PLs and disk sizes, see [ESSDs](~~122389~~).', example='PL1'),
  masterSystemDiskSize?: long(name='master_system_disk_size', description='The size of the system disk that you want to use for master nodes. Valid values: 40 to 500. Unit: GiB.

Default value: `120`.', example='120'),
  masterSystemDiskSnapshotPolicyId?: string(name='master_system_disk_snapshot_policy_id', description='The ID of the automatic snapshot policy that you want to use for the system disks of master nodes.', example='sp-2zej1nogjvovnz4z****'),
  masterVswitchIds?: [ string ](name='master_vswitch_ids', description='The IDs of the vSwitches that are specified for master nodes. You can specify up to three vSwitches. We recommend that you specify three vSwitches in different zones to ensure high availability.

The number of vSwitches must be the same as that specified in `master_count` and the same as those specified in `master_vswitch_ids`.'),
  name?: string(name='name', description='The name of the cluster.

The name must be 1 to 63 characters in length and can contain digits, letters, and hyphens (-). The name cannot start with a hyphen (-).', example='cluster-demo'),
  natGateway?: boolean(name='nat_gateway', description='Specifies whether to create a NAT gateway and configure Source Network Address Translation (SNAT) rules when the system creates the ACK Serverless cluster. Valid values:

*   `true`: automatically creates a NAT gateway and configures SNAT rules. This enables Internet access for the VPC in which the cluster is deployed.
*   `false`: does not create a NAT gateway or configure SNAT rules. In this case, the cluster in the VPC cannot access the Internet.

Default value: `false`.', example='true'),
  nodeCidrMask?: string(name='node_cidr_mask', description='The maximum number of IP addresses that can be assigned to nodes. This number is determined by the node CIDR block. This parameter takes effect only if the cluster uses Flannel.

Default value: `26`.', example='25'),
  nodeNameMode?: string(name='node_name_mode', description='The name of the custom node.

A custom node name consists of a prefix, an IP substring, and a suffix.

*   The prefix and suffix can contain multiple parts that are separated by periods (.). Each part can contain lowercase letters, digits, and hyphens (-), and must start and end with a lowercase letter or digit.
*   The IP substring length specifies the number of digits to be truncated from the end of the node IP address. The IP substring length ranges from 5 to 12.

For example, if the node IP address is 192.168.0.55, the prefix is aliyun.com, the length of the IP address substring is 5, and the suffix is test, the node name will be aliyun.com00055test.', example='aliyun.com00055test'),
  nodePortRange?: string(name='node_port_range', description='The node port range. Valid values: 30000 to 65535.

Default value: `30000-32767`.', example='30000~32767'),
  nodepools?: [
    Nodepool
  ](name='nodepools', description='节点池列表。'),
  numOfNodes?: long(name='num_of_nodes', description='The number of worker nodes. Valid values: 0 to 100.', example='3', deprecated='true'),
  osType?: string(name='os_type', description='The type of OS. Valid values:

*   Windows
*   Linux

Default value: `Linux`.', example='Linux'),
  period?: long(name='period', description='The subscription duration.', example='FY2023'),
  periodUnit?: string(name='period_unit', description='The unit of the subscription duration.', example='Month'),
  platform?: string(name='platform', description='The release version of the operating system. Valid values:

*   CentOS
*   AliyunLinux
*   QbootAliyunLinux
*   Qboot
*   Windows
*   WindowsCore

Default value: `CentOS`.', example='CentOS'),
  podVswitchIds?: [ string ](name='pod_vswitch_ids', description='The list of pod vSwiches. You need to specify at least one pod vSwitch for each node vSwitch and the pod vSwitches must not be the same as the node vSwitches (`vswitch`). We recommend that you specify pod vSwitches whose mask lengths are no greater than 19.

> When the cluster uses Terway, the `pod_vswitch_ids` parameter is required.'),
  profile?: string(name='profile', description='The identifier that indicates whether the cluster is an ACK Edge cluster. To create an ACK Edge cluster, you must set this parameter to `Edge`.

*   `Default`: The cluster is not an ACK Edge cluster.
*   `Edge`: The cluster is an ACK Edge cluster.', example='Default'),
  proxyMode?: string(name='proxy_mode', description='The kube-proxy mode. Valid values:

*   `iptables`: iptables is a kube-proxy mode. It uses iptables rules to conduct Service discovery and load balancing. The performance of this mode is limited by the size of the cluster. This mode is suitable for clusters that run a small number of Services.
*   `ipvs`: a high-performance kube-proxy mode. It uses Linux IP Virtual Server (IPVS) to conduct Service discovery and load balancing. This mode is suitable for clusters that run a large number of Services. We recommend that you use this mode in scenarios where high-performance load balancing is required.

Default value: `ipvs`.', example='ipvs'),
  rdsInstances?: [ string ](name='rds_instances', description='The list of ApsaraDB RDS instances. Select the ApsaraDB RDS instances that you want to add to the whitelist. We recommend that you add the CIDR block of pods and CIDR block of nodes to the ApsaraDB RDS instances in the ApsaraDB RDS console. When you set the ApsaraDB RDS instances, you cannot scale out the number of nodes because the instances are not in the Running state.'),
  regionId?: string(name='region_id', description='The region ID of the cluster.', example='cn-beijing'),
  resourceGroupId?: string(name='resource_group_id', description='The ID of the resource group to which the cluster belongs. You can use this parameter to isolate different clusters.', example='rg-acfm3mkrure****'),
  runtime?: Runtime(name='runtime', description='The container runtime. The default container runtime is Docker. containerd and Sandboxed-Container are also supported.

For more information about how to select a proper container runtime, see [How to select between Docker and Sandboxed-Container](https://help.aliyun.com/document_detail/160313.html).'),
  securityGroupId?: string(name='security_group_id', description='The ID of an existing security group. You need to choose between this parameter and the `is_enterprise_security_group` parameter. Cluster nodes are automatically added to the security group.', example='sg-bp1bdue0qc1g7k****'),
  serviceAccountIssuer?: string(name='service_account_issuer', description='Service accounts provide identities for pods when pods communicate with the `API server` of the cluster. `service-account-issuer` is the issuer of the `serviceaccount token`, which corresponds to the `iss` field in the `token payload`.

For more information about `ServiceAccount`, see [Enable service account token volume projection](~~160384~~).', example='kubernetes.default.svc'),
  serviceCidr?: string(name='service_cidr', description='The CIDR block of Services. Valid values: 10.0.0.0/16-24, 172.16-31.0.0/16-24, and 192.168.0.0/16-24. The CIDR block of Services cannot overlap with the CIDR block of the VPC (10.1.0.0/21) or the CIDR blocks of existing clusters in the VPC. You cannot modify the CIDR block of Services after the cluster is created.

By default, the CIDR block of Services is set to 172.19.0.0/20.', example='172.21.0.0/20'),
  serviceDiscoveryTypes?: [ string ](name='service_discovery_types', description='The type of service discovery that is implemented in the `ACK Serverless` cluster.

*   `CoreDNS`:a standard service discovery plug-in provided by open source Kubernetes. To use the Domain Name System (DNS) resolution, you must provision pods. By default, two elastic container instances are used. The specification of each instance is 0.25 CPU cores and 512 MiB of memory.
*   `PrivateZone`: a DNS resolution service provided by Alibaba Cloud. You must activate Alibaba Cloud DNS PrivateZone before you can use it for service discovery.

By default, this parameter is not specified.'),
  snatEntry?: boolean(name='snat_entry', description='Specifies whether to configure SNAT rules for the VPC where your cluster is deployed. Valid values:

*   `true`: automatically creates a NAT gateway and configures SNAT rules. Set this parameter to `true` if nodes and applications in the cluster need to access the Internet.
*   `false`: does not create a NAT gateway or configure SNAT rules. In this case, nodes and applications in the cluster cannot access the Internet.

> If this feature is disabled when you create the cluster, you can manually enable this feature after you create the cluster. For more information, see [Manually create a NAT gateway and configure SNAT rules](~~178480~~).

Default value: `true`.', example='true'),
  socEnabled?: boolean(name='soc_enabled', description='Reinforcement based on Multi-Level Protection Scheme (MLPS). For more information, see [ACK reinforcement based on MLPS](~~196148~~).

Valid values:

*   `true`: enables reinforcement based on MLPS.
*   `false`: disables reinforcement based on MLPS.

Default value: `false`.', example='false'),
  sshFlags?: boolean(name='ssh_flags', description='Specifies whether to enable SSH logon over the Internet. If this parameter is set to true, you can log on to master nodes in an ACK dedicated cluster over the Internet. This parameter does not take effect in ACK managed clusters.

*   `true`: enables SSH logon over the Internet.
*   `false`: disables SSH logon over the Internet.

Default value: `false`.', example='true'),
  tags?: [
    Tag
  ](name='tags', description='The labels that you want to add to nodes. You must add labels based on the following rules:

*   Each label is a case-sensitive key-value pair. You can add up to 20 labels.
*   A key must be unique and cannot exceed 64 characters in length. A value can be empty and cannot exceed 128 characters in length. Keys and values cannot start with aliyun, acs:, https://, or http://. For more information, see [Labels and Selectors](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#syntax-and-character-set).'),
  taints?: [
    Taint
  ](name='taints', description='The taints that you want to add to nodes. Taints are added to nodes to prevent pods from being scheduled to inappropriate nodes. However, tolerations allow pods to be scheduled to nodes with matching taints. For more information, see [taint-and-toleration](https://kubernetes.io/zh/docs/concepts/scheduling-eviction/taint-and-toleration/).'),
  timeoutMins?: long(name='timeout_mins', description='Specifies the timeout period of cluster creation. Unit: minutes.

Default value: `60`.', example='60'),
  timezone?: string(name='timezone', description='The time zone of the cluster.', example='Asia/Shanghai'),
  userCa?: string(name='user_ca', description='The custom certificate authority (CA) certificate used by the cluster.', example='-----BEGIN CERTIFICATE-----****'),
  userData?: string(name='user_data', description='The user data of nodes.', example='IyEvdXNyL2Jpbi9iYXNoCmVjaG8gIkhlbGxvIEFD****'),
  vpcid?: string(name='vpcid', description='The virtual private cloud (VPC) in which you want to deploy the cluster. You must specify a VPC when you create the cluster.', example='vpc-2zeik9h3ahvv2zz95****'),
  vswitchIds?: [ string ](name='vswitch_ids', description='The vSwitches that are specified for nodes in the cluster. This parameter is required when you create a managed Kubernetes cluster that does not contain nodes.'),
  workerAutoRenew?: boolean(name='worker_auto_renew', description='Specifies whether to enable auto-renewal for worker nodes. This parameter takes effect only if `worker_instance_charge_type` is set to `PrePaid`. Valid values:

*   `true`: enables auto-renewal.
*   `false`: disables auto-renewal.

Default value: `true`.', example='true', deprecated='true'),
  workerAutoRenewPeriod?: long(name='worker_auto_renew_period', description='The auto-renewal period for worker nodes after the subscriptions of worker nodes expire. This parameter takes effect and is required only if the subscription billing method is selected for worker nodes.

Valid values: 1, 2, 3, 6, and 12.', example='1', deprecated='true'),
  workerDataDisks?: [ 
    {
      category?: string(name='category', description='The data disk type.', example='cloud_essd'),
      encrypted?: string(name='encrypted', description='Specifies whether to encrypt the data disks. Valid values:

*   `true`: encrypts a data disk.
*   `false`: does not encrypt a data disk.

Default value: `false`.', example='true'),
      performanceLevel?: string(name='performance_level', description='The PL of a data disk. This parameter takes effect only for ESSDs. You can specify a higher PL if you increase the size of a data disk. For more information, see [ESSDs](~~122389~~).', example='PL1'),
      size?: string(name='size', description='The size of the data disk. Valid values: 40 to 32767.', example='120'),
    }
  ](name='worker_data_disks', description='The configuration of the data disk that is mounted to worker nodes. The configuration includes disk type and disk size.', deprecated='true'),
  workerInstanceChargeType?: string(name='worker_instance_charge_type', description='The billing method of worker nodes. Valid values:

*   `PrePaid`: subscription.
*   `PostPaid`: pay-as-you-go.

Default value: PostPaid.', example='PrePaid', deprecated='true'),
  workerInstanceTypes?: [ string ](name='worker_instance_types', description='The instance configurations of worker nodes.', deprecated='true'),
  workerPeriod?: long(name='worker_period', description='The subscription duration of worker nodes. This parameter takes effect and is required only if `worker_instance_charge_type` is set to `PrePaid`.

Valid values: 1, 2, 3, 6, 12, 24, 36, 48, and 60.

Default value: 1.', example='1', deprecated='true'),
  workerPeriodUnit?: string(name='worker_period_unit', description='The billing cycle of worker nodes. This parameter is required if worker_instance_charge_type is set to `PrePaid`.

Set the value to `Month`. Worker nodes are billed only on a monthly basis.', example='Month', deprecated='true'),
  workerSystemDiskCategory?: string(name='worker_system_disk_category', description='The category of the system disk that you attach to the worker node. For more information, see [Elastic Block Storage overview](~~63136~~).

Valid values:

*   `cloud_efficiency`: ultra disk.
*   `cloud_ssd`: standard SSD.

Default value: `cloud_ssd`.', example='cloud_efficiency', deprecated='true'),
  workerSystemDiskPerformanceLevel?: string(name='worker_system_disk_performance_level', description='If the system disk is an ESSD, you can set the PL of the ESSD. For more information, see [ESSDs](~~122389~~).

Valid values:

*   PL0
*   PL1
*   PL2
*   PL3', example='PL1', deprecated='true'),
  workerSystemDiskSize?: long(name='worker_system_disk_size', description='The size of the system disk that you want to use for worker nodes. Unit: GiB.

Valid values: 40 to 500

The value of this parameter must be at least 40 and no less than the image size.

Default value: `120`.', example='120', deprecated='true'),
  workerSystemDiskSnapshotPolicyId?: string(name='worker_system_disk_snapshot_policy_id', description='The ID of the automatic snapshot policy that you want to use for the system disks of worker nodes.', example='sp-2zej1nogjvovnz4z****', deprecated='true'),
  workerVswitchIds?: [ string ](name='worker_vswitch_ids', description='The list of vSwitches that are specified for nodes. Each node is allocated a vSwitch.

The ` worker_vswitch_ids  `parameter is optional but the `vswitch_ids` parameter is required when you create an ACK managed cluster that does not contain nodes.', deprecated='true'),
  zoneId?: string(name='zone_id', description='The ID of the zone in which the cluster is deployed. This parameter takes effect in only ACK Serverless clusters.

When you create an ACK Serverless cluster, you must configure `zone_id` if `vpc_id` and `vswitch_ids` are not configured. This way, the system automatically creates a VPC in the specified zone.', example='cn-beiji****'),
}

model CreateClusterResponseBody = {
  clusterId?: string(name='cluster_id', description='The ID of the cluster.', example='cb95aa626a47740afbf6aa099b650****'),
  requestId?: string(name='request_id', description='The request ID.', example='687C5BAA-D103-4993-884B-C35E4314A1E1'),
  taskId?: string(name='task_id', description='The task ID.', example='T-5a54309c80282e39ea00002f'),
}

model CreateClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateClusterResponseBody(name='body'),
}

async function createClusterWithOptions(request: CreateClusterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateClusterResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.accessControlList)) {
    body['access_control_list'] = request.accessControlList;
  }
  if (!Util.isUnset(request.addons)) {
    body['addons'] = request.addons;
  }
  if (!Util.isUnset(request.apiAudiences)) {
    body['api_audiences'] = request.apiAudiences;
  }
  if (!Util.isUnset(request.chargeType)) {
    body['charge_type'] = request.chargeType;
  }
  if (!Util.isUnset(request.cisEnabled)) {
    body['cis_enabled'] = request.cisEnabled;
  }
  if (!Util.isUnset(request.cloudMonitorFlags)) {
    body['cloud_monitor_flags'] = request.cloudMonitorFlags;
  }
  if (!Util.isUnset(request.clusterDomain)) {
    body['cluster_domain'] = request.clusterDomain;
  }
  if (!Util.isUnset(request.clusterSpec)) {
    body['cluster_spec'] = request.clusterSpec;
  }
  if (!Util.isUnset(request.clusterType)) {
    body['cluster_type'] = request.clusterType;
  }
  if (!Util.isUnset(request.containerCidr)) {
    body['container_cidr'] = request.containerCidr;
  }
  if (!Util.isUnset(request.controlplaneLogComponents)) {
    body['controlplane_log_components'] = request.controlplaneLogComponents;
  }
  if (!Util.isUnset(request.controlplaneLogProject)) {
    body['controlplane_log_project'] = request.controlplaneLogProject;
  }
  if (!Util.isUnset(request.controlplaneLogTtl)) {
    body['controlplane_log_ttl'] = request.controlplaneLogTtl;
  }
  if (!Util.isUnset(request.cpuPolicy)) {
    body['cpu_policy'] = request.cpuPolicy;
  }
  if (!Util.isUnset(request.customSan)) {
    body['custom_san'] = request.customSan;
  }
  if (!Util.isUnset(request.deletionProtection)) {
    body['deletion_protection'] = request.deletionProtection;
  }
  if (!Util.isUnset(request.disableRollback)) {
    body['disable_rollback'] = request.disableRollback;
  }
  if (!Util.isUnset(request.enableRrsa)) {
    body['enable_rrsa'] = request.enableRrsa;
  }
  if (!Util.isUnset(request.encryptionProviderKey)) {
    body['encryption_provider_key'] = request.encryptionProviderKey;
  }
  if (!Util.isUnset(request.endpointPublicAccess)) {
    body['endpoint_public_access'] = request.endpointPublicAccess;
  }
  if (!Util.isUnset(request.formatDisk)) {
    body['format_disk'] = request.formatDisk;
  }
  if (!Util.isUnset(request.imageId)) {
    body['image_id'] = request.imageId;
  }
  if (!Util.isUnset(request.imageType)) {
    body['image_type'] = request.imageType;
  }
  if (!Util.isUnset(request.instances)) {
    body['instances'] = request.instances;
  }
  if (!Util.isUnset(request.ipStack)) {
    body['ip_stack'] = request.ipStack;
  }
  if (!Util.isUnset(request.isEnterpriseSecurityGroup)) {
    body['is_enterprise_security_group'] = request.isEnterpriseSecurityGroup;
  }
  if (!Util.isUnset(request.keepInstanceName)) {
    body['keep_instance_name'] = request.keepInstanceName;
  }
  if (!Util.isUnset(request.keyPair)) {
    body['key_pair'] = request.keyPair;
  }
  if (!Util.isUnset(request.kubernetesVersion)) {
    body['kubernetes_version'] = request.kubernetesVersion;
  }
  if (!Util.isUnset(request.loadBalancerSpec)) {
    body['load_balancer_spec'] = request.loadBalancerSpec;
  }
  if (!Util.isUnset(request.loggingType)) {
    body['logging_type'] = request.loggingType;
  }
  if (!Util.isUnset(request.loginPassword)) {
    body['login_password'] = request.loginPassword;
  }
  if (!Util.isUnset(request.masterAutoRenew)) {
    body['master_auto_renew'] = request.masterAutoRenew;
  }
  if (!Util.isUnset(request.masterAutoRenewPeriod)) {
    body['master_auto_renew_period'] = request.masterAutoRenewPeriod;
  }
  if (!Util.isUnset(request.masterCount)) {
    body['master_count'] = request.masterCount;
  }
  if (!Util.isUnset(request.masterInstanceChargeType)) {
    body['master_instance_charge_type'] = request.masterInstanceChargeType;
  }
  if (!Util.isUnset(request.masterInstanceTypes)) {
    body['master_instance_types'] = request.masterInstanceTypes;
  }
  if (!Util.isUnset(request.masterPeriod)) {
    body['master_period'] = request.masterPeriod;
  }
  if (!Util.isUnset(request.masterPeriodUnit)) {
    body['master_period_unit'] = request.masterPeriodUnit;
  }
  if (!Util.isUnset(request.masterSystemDiskCategory)) {
    body['master_system_disk_category'] = request.masterSystemDiskCategory;
  }
  if (!Util.isUnset(request.masterSystemDiskPerformanceLevel)) {
    body['master_system_disk_performance_level'] = request.masterSystemDiskPerformanceLevel;
  }
  if (!Util.isUnset(request.masterSystemDiskSize)) {
    body['master_system_disk_size'] = request.masterSystemDiskSize;
  }
  if (!Util.isUnset(request.masterSystemDiskSnapshotPolicyId)) {
    body['master_system_disk_snapshot_policy_id'] = request.masterSystemDiskSnapshotPolicyId;
  }
  if (!Util.isUnset(request.masterVswitchIds)) {
    body['master_vswitch_ids'] = request.masterVswitchIds;
  }
  if (!Util.isUnset(request.name)) {
    body['name'] = request.name;
  }
  if (!Util.isUnset(request.natGateway)) {
    body['nat_gateway'] = request.natGateway;
  }
  if (!Util.isUnset(request.nodeCidrMask)) {
    body['node_cidr_mask'] = request.nodeCidrMask;
  }
  if (!Util.isUnset(request.nodeNameMode)) {
    body['node_name_mode'] = request.nodeNameMode;
  }
  if (!Util.isUnset(request.nodePortRange)) {
    body['node_port_range'] = request.nodePortRange;
  }
  if (!Util.isUnset(request.nodepools)) {
    body['nodepools'] = request.nodepools;
  }
  if (!Util.isUnset(request.numOfNodes)) {
    body['num_of_nodes'] = request.numOfNodes;
  }
  if (!Util.isUnset(request.osType)) {
    body['os_type'] = request.osType;
  }
  if (!Util.isUnset(request.period)) {
    body['period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    body['period_unit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.platform)) {
    body['platform'] = request.platform;
  }
  if (!Util.isUnset(request.podVswitchIds)) {
    body['pod_vswitch_ids'] = request.podVswitchIds;
  }
  if (!Util.isUnset(request.profile)) {
    body['profile'] = request.profile;
  }
  if (!Util.isUnset(request.proxyMode)) {
    body['proxy_mode'] = request.proxyMode;
  }
  if (!Util.isUnset(request.rdsInstances)) {
    body['rds_instances'] = request.rdsInstances;
  }
  if (!Util.isUnset(request.regionId)) {
    body['region_id'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['resource_group_id'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.runtime)) {
    body['runtime'] = request.runtime;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    body['security_group_id'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.serviceAccountIssuer)) {
    body['service_account_issuer'] = request.serviceAccountIssuer;
  }
  if (!Util.isUnset(request.serviceCidr)) {
    body['service_cidr'] = request.serviceCidr;
  }
  if (!Util.isUnset(request.serviceDiscoveryTypes)) {
    body['service_discovery_types'] = request.serviceDiscoveryTypes;
  }
  if (!Util.isUnset(request.snatEntry)) {
    body['snat_entry'] = request.snatEntry;
  }
  if (!Util.isUnset(request.socEnabled)) {
    body['soc_enabled'] = request.socEnabled;
  }
  if (!Util.isUnset(request.sshFlags)) {
    body['ssh_flags'] = request.sshFlags;
  }
  if (!Util.isUnset(request.tags)) {
    body['tags'] = request.tags;
  }
  if (!Util.isUnset(request.taints)) {
    body['taints'] = request.taints;
  }
  if (!Util.isUnset(request.timeoutMins)) {
    body['timeout_mins'] = request.timeoutMins;
  }
  if (!Util.isUnset(request.timezone)) {
    body['timezone'] = request.timezone;
  }
  if (!Util.isUnset(request.userCa)) {
    body['user_ca'] = request.userCa;
  }
  if (!Util.isUnset(request.userData)) {
    body['user_data'] = request.userData;
  }
  if (!Util.isUnset(request.vpcid)) {
    body['vpcid'] = request.vpcid;
  }
  if (!Util.isUnset(request.vswitchIds)) {
    body['vswitch_ids'] = request.vswitchIds;
  }
  if (!Util.isUnset(request.workerAutoRenew)) {
    body['worker_auto_renew'] = request.workerAutoRenew;
  }
  if (!Util.isUnset(request.workerAutoRenewPeriod)) {
    body['worker_auto_renew_period'] = request.workerAutoRenewPeriod;
  }
  if (!Util.isUnset(request.workerDataDisks)) {
    body['worker_data_disks'] = request.workerDataDisks;
  }
  if (!Util.isUnset(request.workerInstanceChargeType)) {
    body['worker_instance_charge_type'] = request.workerInstanceChargeType;
  }
  if (!Util.isUnset(request.workerInstanceTypes)) {
    body['worker_instance_types'] = request.workerInstanceTypes;
  }
  if (!Util.isUnset(request.workerPeriod)) {
    body['worker_period'] = request.workerPeriod;
  }
  if (!Util.isUnset(request.workerPeriodUnit)) {
    body['worker_period_unit'] = request.workerPeriodUnit;
  }
  if (!Util.isUnset(request.workerSystemDiskCategory)) {
    body['worker_system_disk_category'] = request.workerSystemDiskCategory;
  }
  if (!Util.isUnset(request.workerSystemDiskPerformanceLevel)) {
    body['worker_system_disk_performance_level'] = request.workerSystemDiskPerformanceLevel;
  }
  if (!Util.isUnset(request.workerSystemDiskSize)) {
    body['worker_system_disk_size'] = request.workerSystemDiskSize;
  }
  if (!Util.isUnset(request.workerSystemDiskSnapshotPolicyId)) {
    body['worker_system_disk_snapshot_policy_id'] = request.workerSystemDiskSnapshotPolicyId;
  }
  if (!Util.isUnset(request.workerVswitchIds)) {
    body['worker_vswitch_ids'] = request.workerVswitchIds;
  }
  if (!Util.isUnset(request.zoneId)) {
    body['zone_id'] = request.zoneId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateCluster',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCluster(request: CreateClusterRequest): CreateClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createClusterWithOptions(request, headers, runtime);
}

model CreateClusterNodePoolRequest {
  autoScaling?: {
    eipBandwidth?: long(name='eip_bandwidth', description='This parameter is deprecated.

The maximum bandwidth of the EIP. Unit: Mbit/s.', example='5'),
    eipInternetChargeType?: string(name='eip_internet_charge_type', description='This parameter is deprecated.

The metering method of the EIP. Valid values:

*   `PayByBandwidth`: pay-by-bandwidth.
*   `PayByTraffic`: pay-by-data-transfer.

Default value: `PayByBandwidth`.', example='PayByBandwidth'),
    enable?: boolean(name='enable', description='Specifies whether to enable auto scaling. Valid values:

*   `true`: enables auto scaling.
*   `false`: disables auto scaling. If you set this parameter to false, other parameters in the `auto_scaling` section do not take effect.

Default value: `false`.', example='true'),
    isBondEip?: boolean(name='is_bond_eip', description='This parameter is deprecated.

Specifies whether to associate an elastic IP address (EIP) with the node pool. Valid values:

*   `true`: associates an EIP with the node pool.
*   `false`: does not associate an EIP with the node pool.

Default value: `false`.', example='true'),
    maxInstances?: long(name='max_instances', description='The maximum number of Elastic Compute Service (ECS) instances that can be created in a node pool.', example='10'),
    minInstances?: long(name='min_instances', description='The minimum number of ECS instances that must be kept in a node pool.', example='1'),
    type?: string(name='type', description='The instance types that can be used for the auto scaling of the node pool. Valid values:

*   `cpu`: regular instance.
*   `gpu`: GPU-accelerated instance.
*   `gpushare`: shared GPU-accelerated instance.
*   `spot`: preemptible instance.

Default value: `cpu`.', example='cpu'),
  }(name='auto_scaling', description='The configuration about auto scaling.'),
  count?: long(name='count', description='This parameter is deprecated. Use the desired_size parameter instead.

The number of nodes in the node pool.', example='1'),
  interconnectConfig?: {
    bandwidth?: long(name='bandwidth', description='This parameter is deprecated.

The bandwidth of the enhanced edge node pool. Unit: Mbit/s.', example='10'),
    ccnId?: string(name='ccn_id', description='This parameter is deprecated.

The ID of the Cloud Connect Network (CCN) instance that is associated with the enhanced edge node pool.', example='ccn-qm5i0i0q9yi*******'),
    ccnRegionId?: string(name='ccn_region_id', description='This parameter is deprecated.

The region to which the CCN instance that is associated with the enhanced edge node pool belongs.', example='cn-shanghai'),
    cenId?: string(name='cen_id', description='This parameter is deprecated.

The ID of the Cloud Enterprise Network (CEN) instance that is associated with the enhanced edge node pool.', example='cen-ey9k9nfhz0f*******'),
    improvedPeriod?: string(name='improved_period', description='This parameter is deprecated.

The subscription duration of the enhanced edge node pool. The duration is measured in months.', example='1'),
  }(name='interconnect_config', description='This parameter is deprecated.

The configurations of the edge node pool.'),
  interconnectMode?: string(name='interconnect_mode', description='The network type of the edge node pool. This parameter takes effect only when you set the `type` parameter of the node pool to `edge`. Valid values:

*   `basic`: basic
*   `improved`: enhanced
*   `private`: dedicated Only Kubernetes 1.22 and later support this parameter.', example='basic'),
  kubernetesConfig?: {
    cmsEnabled?: boolean(name='cms_enabled', description='Specifies whether to install the CloudMonitor agent on ECS nodes. After the CloudMonitor agent is installed on ECS nodes, you can view monitoring information about the instances in the CloudMonitor console. We recommend that you install the CloudMonitor agent. Valid values:

*   `true`: installs the CloudMonitor agent on ECS nodes.
*   `false`: does not install the CloudMonitor agent on ECS nodes.

Default value: `false`.', example='true'),
    cpuPolicy?: string(name='cpu_policy', description='The CPU management policy. The following policies are supported if the Kubernetes version of the cluster is 1.12.6 or later.

*   `static`: allows pods with specific resource characteristics on the node to be granted enhanced CPU affinity and exclusivity.
*   `none`: specifies that the default CPU affinity is used.

Default value: `none`.', example='none'),
    labels?: [
      Tag
    ](name='labels', description='The labels that you want to add to the nodes in the cluster.'),
    nodeNameMode?: string(name='node_name_mode', description='A custom node name consists of a prefix, a node IP address, and a suffix.

*   The prefix and suffix can contain multiple parts that are separated by periods (.). Each part can contain lowercase letters, digits, and hyphens (-). A custom node name must start and end with a digit or lowercase letter.
*   The node IP address in a custom node name is the private IP address of the node.

Set the value in the customized,aliyun,ip,com format. The value consists of four parts that are separated by commas (,). customized and ip are fixed content. aliyun is the prefix and com is the suffix. Example: aliyun.192.168.xxx.xxx.com.', example='customized,aliyun,ip,com'),
    runtime?: string(name='runtime', description='The container runtime.', example='docker'),
    runtimeVersion?: string(name='runtime_version', description='The version of the container runtime.', example='19.03.5'),
    taints?: [
      Taint
    ](name='taints', description='The configurations of the taints.'),
    userData?: string(name='user_data', description='The user data on the node.', example='dGhpcyBpcyBhIGV4YW1wbGU='),
  }(name='kubernetes_config', description='The configurations about the cluster.'),
  management?: {
    autoRepair?: boolean(name='auto_repair', description='Specifies whether to enable auto repair. This parameter takes effect only when you specify `enable=true`.

*   `true`: enables auto repair.
*   `false`: disables auto repair.', example='false'),
    autoRepairPolicy?: {
      restartNode?: boolean(name='restart_node', example='true'),
    }(name='auto_repair_policy'),
    autoUpgrade?: boolean(name='auto_upgrade', example='true'),
    autoUpgradePolicy?: {
      autoUpgradeKubelet?: boolean(name='auto_upgrade_kubelet', example='true'),
    }(name='auto_upgrade_policy'),
    autoVulFix?: boolean(name='auto_vul_fix', example='true'),
    autoVulFixPolicy?: {
      restartNode?: boolean(name='restart_node', example='true'),
      vulLevel?: string(name='vul_level', example='asap,nntf'),
    }(name='auto_vul_fix_policy'),
    enable?: boolean(name='enable', description='Specifies whether to enable the managed node pool feature. Valid values:

*   `true`: enables the managed node pool feature.
*   `false`: disables the managed node pool feature. Other parameters in this section take effect only when you specify enable=true.', example='false'),
    upgradeConfig?: {
      autoUpgrade?: boolean(name='auto_upgrade', description='Specifies whether to enable auto upgrade. Valid values:

*   `true`: enables auto update.
*   `false`: disables auto update.', example='false'),
      maxUnavailable?: long(name='max_unavailable', description='The maximum number of nodes that can be in the Unschedulable state. Valid values: 1 to 1000.

Default value: 1.', example='1'),
      surge?: long(name='surge', description='The number of additional nodes.', example='0'),
      surgePercentage?: long(name='surge_percentage', description='The percentage of additional nodes to the nodes in the node pool. You must set this parameter or `surge`.', example='0'),
    }(name='upgrade_config', description='The configurations about auto update. The configurations take effect only when you specify `enable=true`.'),
  }(name='management', description='The configurations about the managed node pool feature.'),
  maxNodes?: long(name='max_nodes', description='The maximum number of nodes that can be created in the edge node pool. You must specify a value that is equal to or larger than 0. A value of 0 indicates that the number of nodes in the node pool is limited only by the quota of nodes in the cluster. In most cases, this parameter is set to a value larger than 0 for edge node pools. This parameter is set to 0 for node pools of the ess type or default edge node pools.', example='10'),
  nodepoolInfo?: {
    name?: string(name='name', description='The name of the node pool.', example='cluster-demo'),
    resourceGroupId?: string(name='resource_group_id', description='The ID of the resource group to which the node pool belongs.', example='rg-acfmyvw3wjmb****'),
    type?: string(name='type', description='The type of node pool. Valid values:

*   `ess`: node pool
*   `edge`: edge node pool', example='ess'),
  }(name='nodepool_info', description='The configurations of the node pool.'),
  scalingGroup?: {
    autoRenew?: boolean(name='auto_renew', description='Specifies whether to enable auto-renewal for nodes in the node pool. This parameter takes effect only when you set `instance_charge_type` to `PrePaid`. Valid values:

*   `true`: enables auto-renewal.
*   `false`: disables auto-renewal.

Default value: `true`.', example='true'),
    autoRenewPeriod?: long(name='auto_renew_period', description='The duration of the auto-renewal. This property takes effect and is required only when you set instance_charge_type to PrePaid and auto_renew to true. If `PeriodUnit=Month` is configured, the valid values are 1, 2, 3, 6, and 12.

Default value: 1.', example='1'),
    compensateWithOnDemand?: boolean(name='compensate_with_on_demand', description='Specifies whether to automatically create pay-as-you-go instances to meet the required number of ECS instances if preemptible instances cannot be created due to reasons such as the cost or insufficient inventory. This parameter takes effect when you set `multi_az_policy` to `COST_OPTIMIZED`. Valid values:

*   `true`: automatically creates pay-as-you-go instances to meet the required number of ECS instances if preemptible instances cannot be created.
*   `false`: does not create pay-as-you-go instances to meet the required number of ECS instances if preemptible instances cannot be created.', example='true'),
    dataDisks?: [
      DataDisk
    ](name='data_disks', description='The configurations of the data disks that are mounted to the nodes in the node pool.'),
    deploymentsetId?: string(name='deploymentset_id', description='The ID of the deployment set.', example='ds-bp1d19mmbsv3jf6xxxxx'),
    desiredSize?: long(name='desired_size', description='The expected number of nodes in the node pool.', example='0'),
    imageId?: string(name='image_id', description='The ID of a custom image. By default, the image provided by ACK is used.', example='aliyun_2_1903_x64_20G_alibase_20200529.vhd'),
    imageType?: string(name='image_type', description='The type of OS image. You must set this parameter or `platform`. Valid values:

*   `AliyunLinux`: Alinux2
*   `AliyunLinux3`: Alinux3
*   `AliyunLinux3Arm64`: Alinux3 ARM
*   `AliyunLinuxUEFI`: Alinux2 UEFI
*   `CentOS`: CentOS
*   `Windows`: Windows
*   `WindowsCore`: Windows Core
*   `ContainerOS`: ContainerOS', example='AliyunLinux'),
    instanceChargeType?: string(name='instance_charge_type', description='The billing method of the nodes in the node pool. Valid values:

*   `PrePaid`: the subscription billing method.
*   `PostPaid`: the pay-as-you-go billing method.

Default value: `PostPaid`.', example='PrePaid'),
    instanceTypes?: [ string ](name='instance_types', description='The instance type of the nodes in the node pool.'),
    internetChargeType?: string(name='internet_charge_type', description='The metering method of the public IP address. Valid values:

*   PayByBandwidth: pay-by-bandwidth
*   PayByTraffic: pay-by-data-transfer', example='PayByTraffic'),
    internetMaxBandwidthOut?: long(name='internet_max_bandwidth_out', description='The maximum outbound bandwidth of the public IP address of the node. Unit: Mbit/s. Valid values: 1 to 100.', example='5'),
    keyPair?: string(name='key_pair', description='The name of the key pair. You must set this parameter or the `login_password` parameter.

>  If you create a managed node pool, only `key_pair` is supported.', example='np-key-name'),
    loginPassword?: string(name='login_password', description='The password for SSH logon. You must set this parameter or the `key_pair` parameter. The password must be 8 to 30 characters in length, and must contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters.', example='Hello1234'),
    multiAzPolicy?: string(name='multi_az_policy', description='The ECS instance scaling policy for a multi-zone scaling group. Valid values:

*   `PRIORITY`: the scaling group is scaled based on the VSwitchIds.N parameter. If an ECS instance cannot be created in the zone where the vSwitch that has the highest priority resides, Auto Scaling creates the ECS instance in the zone where the vSwitch that has the next highest priority resides.

*   `COST_OPTIMIZED`: ECS instances are created based on the vCPU unit price in ascending order. Preemptible instances are preferably created when preemptible instance types are specified in the scaling configuration. You can set the `CompensateWithOnDemand` parameter to specify whether to automatically create pay-as-you-go instances when preemptible instances cannot be created due to insufficient resources.

    **

    **Note**The `COST_OPTIMIZED` setting takes effect only when multiple instance types are specified or at least one instance type is specified for preemptible instances.

*   `BALANCE`: ECS instances are evenly distributed across multiple zones specified by the scaling group. If ECS instances become imbalanced among multiple zones due to insufficient inventory, you can call [RebalanceInstances](~~71516~~) of Auto Scaling to balance the instance distribution among zones.

Default value: `PRIORITY`.', example='COST_OPTIMIZED'),
    onDemandBaseCapacity?: long(name='on_demand_base_capacity', description='The minimum number of pay-as-you-go instances that must be kept in the scaling group. Valid values: 0 to 1000. If the number of pay-as-you-go instances is less than the value of this parameter, Auto Scaling preferably creates pay-as-you-go instances.', example='0'),
    onDemandPercentageAboveBaseCapacity?: long(name='on_demand_percentage_above_base_capacity', description='The percentage of pay-as-you-go instances among the extra instances that exceed the number specified by `on_demand_base_capacity`. Valid values: 0 to 100.', example='20'),
    period?: long(name='period', description='The subscription duration of the nodes in the node pool. This parameter takes effect and is required only when you set `instance_charge_type` to `PrePaid`. If you set `period_unit` to Month, the valid values of `period` are 1, 2, 3, 6, and 12.

Default value: 1.', example='1'),
    periodUnit?: string(name='period_unit', description='The billing cycle of the nodes in the node pool. This parameter is required if you set instance_charge_type to `PrePaid`. A value of Month indicates that the billing cycle is measured in months.', example='Month'),
    platform?: string(name='platform', description='The release version of the operating system. Valid values:

*   `CentOS`
*   `AliyunLinux`
*   `Windows`
*   `WindowsCore`

Default value: `AliyunLinux`.', example='AliyunLinux'),
    privatePoolOptions?: {
      id?: string(name='id', description='The ID of the private node pool.', example='eap-bp67acfmxazb4****'),
      matchCriteria?: string(name='match_criteria', description='The type of private node pool. This parameter specifies the type of private pool that you want to use to create instances. A private pool is generated when an elasticity assurance or a capacity reservation takes effect. The system selects a private pool to start instances. Valid values:

*   `Open`: specifies an open private pool. The system selects an open private pool to start instances. If no matching open private pools are available, the resources in the public pool are used.
*   `Target`: specifies a private node pool. The system uses the resources of the specified private pool to start instances. If the specified private pool is unavailable, instances cannot be started.
*   `None`: does not use private pools. The resources of private pools are not used to start instances.', example='Open'),
    }(name='private_pool_options', description='The configurations of the private node pool.'),
    rdsInstances?: [ string ](name='rds_instances', description='A list of ApsaraDB RDS instances.'),
    scalingPolicy?: string(name='scaling_policy', description='The scaling mode of the scaling group. Valid values:

*   `release`: the standard mode. ECS instances are created and released based on resource usage.
*   `recycle`: the swift mode. ECS instances are created, stopped, or started during scaling events. This reduces the time required for the next scale-out event. When the instance is stopped, you are charged only for the storage service. This does not apply to ECS instances attached with local disks.

Default value: `release`.', example='release'),
    securityGroupId?: string(name='security_group_id', description='Specifies the ID of the security group to which you want to add the node pool. You must set this parameter or `security_group_ids`. We recommend that you set `security_group_ids`.', example='sg-wz9a8g2mt6x5llu0****'),
    securityGroupIds?: [ string ](name='security_group_ids', description='The IDs of security groups to which you want to add the node pool. You must set this parameter or `security_group_id`. We recommend that you set `security_group_ids`. If you set both `security_group_id` and `security_group_ids`, `security_group_ids` is used.'),
    spotInstancePools?: long(name='spot_instance_pools', description='The number of instance types that are available for creating preemptible instances. Auto Scaling creates preemptible instances of multiple instance types that are available at the lowest cost. Valid values: 1 to 10.', example='5'),
    spotInstanceRemedy?: boolean(name='spot_instance_remedy', description='Specifies whether to supplement preemptible instances. If this parameter is set to true, when the scaling group receives a system message that a preemptible instance is to be reclaimed, the scaling group attempts to create a new instance to replace this instance. Valid values: Valid values:

*   `true`: enables the supplementation of preemptible instances.
*   `false`: disables the supplementation of preemptible instances.', example='false'),
    spotPriceLimit?: [ 
      {
        instanceType?: string(name='instance_type', description='The instance type of the preemptible instances.', example='ecs.c6.large'),
        priceLimit?: string(name='price_limit', description='The maximum bid price of a preemptible instance.

Unit: USD/hour.', example='0.39'),
      }
    ](name='spot_price_limit', description='The instance type for preemptible instances and the price limit of the instance type.'),
    spotStrategy?: string(name='spot_strategy', description='The bidding policy for the instance. Valid values:

*   `NoSpot`: non-preemptible instance.
*   `SpotWithPriceLimit`: specifies the highest bid for the preemptible instance.
*   `SpotAsPriceGo`: automatically submits bids based on the up-to-date market price.

For more information, see [Preemptible instances](~~165053~~).', example='NoSpot'),
    systemDiskBurstingEnabled?: boolean(name='system_disk_bursting_enabled', description='节点系统盘是否开启Burst（性能突发）。 取值：
- true：是。
- false：否。

当`SystemDiskCategory`取值为`cloud_auto`时才支持设置该参数。更多信息，请参见[ESSD AutoPL云盘](~~368372~~)。', example='true'),
    systemDiskCategory?: string(name='system_disk_category', description='The type of system disk. Valid values:

*   `cloud_efficiency`: ultra disk.
*   `cloud_ssd`: standard SSD.
*   `cloud_essd`: enhanced SSD.

Default value: `cloud_efficiency`.', example='cloud_efficiency'),
    systemDiskPerformanceLevel?: string(name='system_disk_performance_level', description='The performance level (PL) of the system disk that you want to use for the node. This parameter takes effect only for ESSDs.

*   PL0: moderate maximum concurrent I/O performance and low I/O latency
*   PL1: moderate maximum concurrent I/O performance and low I/O latency
*   PL2: high maximum concurrent I/O performance and low I/O latency
*   PL3: ultra-high maximum concurrent I/O performance and ultra-low I/O latency', example='PL1'),
    systemDiskProvisionedIops?: long(name='system_disk_provisioned_iops', description='节点系统盘预配置的读写IOPS。可能值：0~min{50,000, 1000\\*容量-基准性能}。 基准性能=min{1,800+50\\*容量, 50000}。

当`SystemDiskCategory`取值为`cloud_auto`时才支持设置该参数。更多信息，请参见[ESSD AutoPL云盘](~~368372~~)。', example='1000'),
    systemDiskSize?: long(name='system_disk_size', description='The system disk size of a node. Unit: GiB.

Valid values: 40 to 500.', example='120'),
    tags?: [ 
      {
        key?: string(name='key', description='The key of the label.', example='node-k-1'),
        value?: string(name='value', description='The value of the label.', example='node-v-1'),
      }
    ](name='tags', description='The labels that you want to add to the ECS instances.

Each key must be unique and cannot exceed 128 characters in length. Neither keys nor values can start with aliyun or acs:. Neither keys nor values can contain https:// or http://.'),
    vswitchIds?: [ string ](name='vswitch_ids', description='The IDs of vSwitches. You can specify 1 to 20 vSwitches.

>  To ensure high availability, we recommend that you select VSwitches in different zones.'),
  }(name='scaling_group', description='The configuration of the scaling group that is used by the node pool.'),
  teeConfig?: {
    teeEnable?: boolean(name='tee_enable', description='Specifies whether to enable confidential computing for the cluster.', example='true'),
  }(name='tee_config', description='The configurations about confidential computing for the cluster.'),
}

model CreateClusterNodePoolResponseBody = {
  nodepoolId?: string(name='nodepool_id', description='The node pool ID.', example='np31da1b38983f4511b490fc62108a****'),
  taskId?: string(name='task_id', description='任务ID', example='T-613b19bbd160ad492800****'),
}

model CreateClusterNodePoolResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateClusterNodePoolResponseBody(name='body'),
}

async function createClusterNodePoolWithOptions(ClusterId: string, request: CreateClusterNodePoolRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateClusterNodePoolResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.autoScaling)) {
    body['auto_scaling'] = request.autoScaling;
  }
  if (!Util.isUnset(request.count)) {
    body['count'] = request.count;
  }
  if (!Util.isUnset(request.interconnectConfig)) {
    body['interconnect_config'] = request.interconnectConfig;
  }
  if (!Util.isUnset(request.interconnectMode)) {
    body['interconnect_mode'] = request.interconnectMode;
  }
  if (!Util.isUnset(request.kubernetesConfig)) {
    body['kubernetes_config'] = request.kubernetesConfig;
  }
  if (!Util.isUnset(request.management)) {
    body['management'] = request.management;
  }
  if (!Util.isUnset(request.maxNodes)) {
    body['max_nodes'] = request.maxNodes;
  }
  if (!Util.isUnset(request.nodepoolInfo)) {
    body['nodepool_info'] = request.nodepoolInfo;
  }
  if (!Util.isUnset(request.scalingGroup)) {
    body['scaling_group'] = request.scalingGroup;
  }
  if (!Util.isUnset(request.teeConfig)) {
    body['tee_config'] = request.teeConfig;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateClusterNodePool',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/nodepools`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createClusterNodePool(ClusterId: string, request: CreateClusterNodePoolRequest): CreateClusterNodePoolResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createClusterNodePoolWithOptions(ClusterId, request, headers, runtime);
}

model CreateEdgeMachineRequest {
  hostname?: string(name='hostname', description='The `hostname` of the cloud-native box.

>  After the cloud-native box is activated, the `hostname` is automatically modified. The `hostname` is prefixed with the model and the prefix is followed by a random string.', example='ACK-B-B010-****'),
  model?: string(name='model', description='The model of the cloud-native box.', example='ACK-V-B010'),
  sn?: string(name='sn', description='The serial number of the cloud-native box.', example='Q2CB5XZAFBFG****'),
}

model CreateEdgeMachineResponseBody = {
  edgeMachineId?: string(name='edge_machine_id', description='The ID of the cloud-native box.', example='cc0725ddf688744979cd98445f67e****'),
  requestId?: string(name='request_id', description='The request ID.', example='"request_id": "6e7b377a-c5ed-4388-8026-689e1b34****",'),
}

model CreateEdgeMachineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateEdgeMachineResponseBody(name='body'),
}

async function createEdgeMachineWithOptions(request: CreateEdgeMachineRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateEdgeMachineResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.hostname)) {
    body['hostname'] = request.hostname;
  }
  if (!Util.isUnset(request.model)) {
    body['model'] = request.model;
  }
  if (!Util.isUnset(request.sn)) {
    body['sn'] = request.sn;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateEdgeMachine',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/edge_machines`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createEdgeMachine(request: CreateEdgeMachineRequest): CreateEdgeMachineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createEdgeMachineWithOptions(request, headers, runtime);
}

model CreateKubernetesTriggerRequest {
  action?: string(name='action', description='The action that the trigger performs. Set the value to redeploy.

`redeploy`: redeploys the resources specified by `project_id`.', example='redeploy'),
  clusterId?: string(name='cluster_id', description='The cluster ID.', example='c5cdf7e3938bc4f8eb0e44b21a80f****'),
  projectId?: string(name='project_id', description='The name of the trigger project.

The name consists of the namespace where the application is deployed and the name of the application. The format is `${namespace}/${name}`.

Example: `default/test-app`.', example='default/test-app'),
  type?: string(name='type', description='The type of trigger. Valid values:

*   `deployment`: performs actions on Deployments.
*   `application`: performs actions on applications that are deployed in Application Center.

Default value: `deployment`.', example='deployment'),
}

model CreateKubernetesTriggerResponseBody = {
  action?: string(name='action', description='The action that the trigger performs. For example, a value of `redeploy` indicates that the trigger redeploys the application.', example='redeploy'),
  clusterId?: string(name='cluster_id', description='The ID of the cluster.', example='c5cdf7e3938bc4f8eb0e44b21a80f****'),
  id?: string(name='id', description='The ID of the trigger.', example='111'),
  projectId?: string(name='project_id', description='The name of the trigger project.', example='default/test-app'),
  type?: string(name='type', description='The type of trigger.

Valid values:

*   `deployment`: performs actions on Deployments.
*   `application`: performs actions on applications that are deployed in Application Center.', example='deployment'),
}

model CreateKubernetesTriggerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateKubernetesTriggerResponseBody(name='body'),
}

async function createKubernetesTriggerWithOptions(request: CreateKubernetesTriggerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateKubernetesTriggerResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.action)) {
    body['action'] = request.action;
  }
  if (!Util.isUnset(request.clusterId)) {
    body['cluster_id'] = request.clusterId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['project_id'] = request.projectId;
  }
  if (!Util.isUnset(request.type)) {
    body['type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateKubernetesTrigger',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/triggers`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createKubernetesTrigger(request: CreateKubernetesTriggerRequest): CreateKubernetesTriggerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createKubernetesTriggerWithOptions(request, headers, runtime);
}

model CreateTemplateRequest {
  description?: string(name='description', description='The description of the template.', example='this is test'),
  name?: string(name='name', description='The name of the orchestration template.

The name must be 1 to 63 characters in length, and can contain digits, letters, and hyphens (-). It cannot start with a hyphen (-).', example='service-account-template'),
  tags?: string(name='tags', description='The label of the template.', example='test'),
  template?: string(name='template', description='The template content in the YAML format.', example='apiVersion: v1\\nkind: ServiceAccount\\nmetadata:\\n  name: test-sa'),
  templateType?: string(name='template_type', description='The type of template. You can set the parameter to a custom value.

*   If the parameter is set to `kubernetes`, the template is displayed on the Templates page in the console.
*   If you set the parameter to `compose`, the template is not displayed in the console.

We recommend that you set the parameter to `kubernetes`.

Default value: `compose`.', example='kubernetes'),
}

model CreateTemplateResponseBody = {
  templateId?: string(name='template_id', description='The ID of the orchestration template.', example='ba1fe77b-b01e-4640-b77e-8f1b80e3e3cf'),
}

model CreateTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTemplateResponseBody(name='body'),
}

async function createTemplateWithOptions(request: CreateTemplateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateTemplateResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    body['name'] = request.name;
  }
  if (!Util.isUnset(request.tags)) {
    body['tags'] = request.tags;
  }
  if (!Util.isUnset(request.template)) {
    body['template'] = request.template;
  }
  if (!Util.isUnset(request.templateType)) {
    body['template_type'] = request.templateType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateTemplate',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/templates`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTemplate(request: CreateTemplateRequest): CreateTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createTemplateWithOptions(request, headers, runtime);
}

model CreateTriggerRequest {
  action?: string(name='action', description='The action that the trigger performs. Set the value to redeploy.

`redeploy`: redeploys the resources specified by `project_id`.', example='redeploy'),
  clusterId?: string(name='cluster_id', description='The cluster ID.', example='c5cdf7e3938bc4f8eb0e44b21a80f****'),
  projectId?: string(name='project_id', description='The name of the trigger project.

The name consists of the namespace where the application is deployed and the name of the application. The format is `${namespace}/${name}`.

Example: `default/test-app`.', example='default/test-app'),
  type?: string(name='type', description='The type of trigger. Valid values:

*   `deployment`: performs actions on Deployments.
*   `application`: performs actions on applications that are deployed in Application Center.

Default value: `deployment`.', example='deployment'),
}

model CreateTriggerResponseBody = {
  action?: string(name='action', description='The action that the trigger performs. For example, a value of `redeploy` indicates that the trigger redeploys the application.', example='redeploy'),
  clusterId?: string(name='cluster_id', description='The ID of the cluster.', example='c93095129fc41463aa455d89444fd****'),
  id?: string(name='id', description='The ID of the trigger.', example='102536'),
  projectId?: string(name='project_id', description='The name of the trigger project.', example='default/test-app'),
  type?: string(name='type', description='The type of trigger. Default value: deployment.', example='deployment'),
}

model CreateTriggerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTriggerResponseBody(name='body'),
}

async function createTriggerWithOptions(clusterId: string, request: CreateTriggerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateTriggerResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.action)) {
    body['action'] = request.action;
  }
  if (!Util.isUnset(request.clusterId)) {
    body['cluster_id'] = request.clusterId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['project_id'] = request.projectId;
  }
  if (!Util.isUnset(request.type)) {
    body['type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateTrigger',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(clusterId)}/triggers`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTrigger(clusterId: string, request: CreateTriggerRequest): CreateTriggerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createTriggerWithOptions(clusterId, request, headers, runtime);
}

model DeleteAlertContactResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteAlertContactWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): DeleteAlertContactResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteAlertContact',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/alert/contacts`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function deleteAlertContact(): DeleteAlertContactResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteAlertContactWithOptions(headers, runtime);
}

model DeleteAlertContactGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteAlertContactGroupWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): DeleteAlertContactGroupResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteAlertContactGroup',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/alert/contact_groups`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function deleteAlertContactGroup(): DeleteAlertContactGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteAlertContactGroupWithOptions(headers, runtime);
}

model DeleteClusterRequest {
  keepSlb?: boolean(name='keep_slb', description='Specifies whether to retain the Server Load Balancer (SLB) resources that are created by the cluster.

*   `true`: retains the SLB resources that are created by the cluster.
*   `false`: does not retain the SLB resources that are created by the cluster.

Default value: `false`.', example='false'),
  retainAllResources?: boolean(name='retain_all_resources', description='Specifies whether to retain all resources. If you set the parameter to `true`, the `retain_resources` parameter is ignored.

*   `true`: retains all resources.
*   `false`: does not retain all resources.

Default value: `false`.', example='false'),
  retainResources?: [ string ](name='retain_resources', description='The list of resources. To retain resources when you delete a cluster, you need to specify the IDs of the resources to be retained.'),
}

model DeleteClusterShrinkRequest {
  keepSlb?: boolean(name='keep_slb', description='Specifies whether to retain the Server Load Balancer (SLB) resources that are created by the cluster.

*   `true`: retains the SLB resources that are created by the cluster.
*   `false`: does not retain the SLB resources that are created by the cluster.

Default value: `false`.', example='false'),
  retainAllResources?: boolean(name='retain_all_resources', description='Specifies whether to retain all resources. If you set the parameter to `true`, the `retain_resources` parameter is ignored.

*   `true`: retains all resources.
*   `false`: does not retain all resources.

Default value: `false`.', example='false'),
  retainResourcesShrink?: string(name='retain_resources', description='The list of resources. To retain resources when you delete a cluster, you need to specify the IDs of the resources to be retained.'),
}

model DeleteClusterResponseBody = {
  taskId?: string(name='task_id', description='The task ID.', example='T-5a54309c80282e39ea****'),
}

model DeleteClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteClusterResponseBody(name='body'),
}

async function deleteClusterWithOptions(ClusterId: string, tmpReq: DeleteClusterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteClusterResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteClusterShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.retainResources)) {
    request.retainResourcesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.retainResources, 'retain_resources', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.keepSlb)) {
    query['keep_slb'] = request.keepSlb;
  }
  if (!Util.isUnset(request.retainAllResources)) {
    query['retain_all_resources'] = request.retainAllResources;
  }
  if (!Util.isUnset(request.retainResourcesShrink)) {
    query['retain_resources'] = request.retainResourcesShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCluster',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteCluster(ClusterId: string, request: DeleteClusterRequest): DeleteClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteClusterWithOptions(ClusterId, request, headers, runtime);
}

model DeleteClusterNodepoolRequest {
  force?: boolean(name='force', description='Specifies whether to forcefully delete the node pool.', example='false'),
}

model DeleteClusterNodepoolResponseBody = {
  requestId?: string(name='request_id', description='The request ID.', example='7263C978-3DBD-4E06-B319-793B38A2F388'),
}

model DeleteClusterNodepoolResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteClusterNodepoolResponseBody(name='body'),
}

async function deleteClusterNodepoolWithOptions(ClusterId: string, NodepoolId: string, request: DeleteClusterNodepoolRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteClusterNodepoolResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.force)) {
    query['force'] = request.force;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteClusterNodepool',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/nodepools/${OpenApiUtil.getEncodeParam(NodepoolId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteClusterNodepool(ClusterId: string, NodepoolId: string, request: DeleteClusterNodepoolRequest): DeleteClusterNodepoolResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteClusterNodepoolWithOptions(ClusterId, NodepoolId, request, headers, runtime);
}

model DeleteClusterNodesRequest {
  drainNode?: boolean(name='drain_node', description='Specifies whether to remove all pods from the nodes that you want to remove. Valid values:

*   `true`: removes all pods from the nodes that you want to remove.
*   `false`: does not remove pods from the nodes that you want to remove.

Default value: `false`.', example='true'),
  nodes?: [ string ](name='nodes', description='The list of nodes to be removed. You need to specify the name of the nodes used in the cluster, for example, `cn-hangzhou.192.168.0.70`.'),
  releaseNode?: boolean(name='release_node', description='Specifies whether to release the Elastic Compute Service (ECS) instances. Valid values:

*   `true`: releases the ECS instances.
*   `false`: does not release the ECS instances.

Default value: `false`.

>  You cannot release subscription ECS instances.', example='true'),
}

model DeleteClusterNodesResponseBody = {
  clusterId?: string(name='cluster_id', description='The cluster ID.', example='c104d5d5f301c4e2a8ee578c37bc****'),
  requestId?: string(name='request_id', description='The request ID.', example='A9891419-D125-4D89-AFCA-68846675E2F7'),
  taskId?: string(name='task_id', description='The task ID.', example='T-60fea8ad2e277f0879000ae9'),
}

model DeleteClusterNodesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteClusterNodesResponseBody(name='body'),
}

/**
  * > 
  * *   When you remove a node, the pods that run on the node are migrated to other nodes. This may cause service interruptions. We recommend that you remove nodes during off-peak hours. - The operation may have unexpected risks. Back up the data before you perform this operation. - When the system removes a node, it sets the status of the node to Unschedulable. - The system removes only worker nodes. It does not remove master nodes.
  *
  * @param request DeleteClusterNodesRequest
  * @param headers map
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteClusterNodesResponse
 */
async function deleteClusterNodesWithOptions(ClusterId: string, request: DeleteClusterNodesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteClusterNodesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.drainNode)) {
    body['drain_node'] = request.drainNode;
  }
  if (!Util.isUnset(request.nodes)) {
    body['nodes'] = request.nodes;
  }
  if (!Util.isUnset(request.releaseNode)) {
    body['release_node'] = request.releaseNode;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteClusterNodes',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/nodes`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > 
  * *   When you remove a node, the pods that run on the node are migrated to other nodes. This may cause service interruptions. We recommend that you remove nodes during off-peak hours. - The operation may have unexpected risks. Back up the data before you perform this operation. - When the system removes a node, it sets the status of the node to Unschedulable. - The system removes only worker nodes. It does not remove master nodes.
  *
  * @param request DeleteClusterNodesRequest
  * @return DeleteClusterNodesResponse
 */
async function deleteClusterNodes(ClusterId: string, request: DeleteClusterNodesRequest): DeleteClusterNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteClusterNodesWithOptions(ClusterId, request, headers, runtime);
}

model DeleteEdgeMachineRequest {
  force?: string(name='force', description='Specifies whether to forcefully delete the cloud-native box. Valid values:

*   `true`: forcefully deletes the cloud-native box.
*   `false`: does not forcefully delete the cloud-native box.

Default value: `false`.', example='true/false'),
}

model DeleteEdgeMachineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteEdgeMachineWithOptions(edgeMachineid: string, request: DeleteEdgeMachineRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteEdgeMachineResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.force)) {
    query['force'] = request.force;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEdgeMachine',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/edge_machines/%5Bedge_machineid%5D`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function deleteEdgeMachine(edgeMachineid: string, request: DeleteEdgeMachineRequest): DeleteEdgeMachineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteEdgeMachineWithOptions(edgeMachineid, request, headers, runtime);
}

model DeleteKubernetesTriggerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteKubernetesTriggerWithOptions(Id: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteKubernetesTriggerResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteKubernetesTrigger',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/triggers/revoke/${OpenApiUtil.getEncodeParam(Id)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function deleteKubernetesTrigger(Id: string): DeleteKubernetesTriggerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteKubernetesTriggerWithOptions(Id, headers, runtime);
}

model DeletePolicyInstanceRequest {
  instanceName?: string(name='instance_name', description='The ID of the policy instance.', example='allowed-repos-mqdsf'),
}

model DeletePolicyInstanceResponseBody = {
  instances?: [ string ](name='instances', description='A list of policy instances.'),
}

model DeletePolicyInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeletePolicyInstanceResponseBody(name='body'),
}

async function deletePolicyInstanceWithOptions(clusterId: string, policyName: string, request: DeletePolicyInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeletePolicyInstanceResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.instanceName)) {
    query['instance_name'] = request.instanceName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeletePolicyInstance',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(clusterId)}/policies/${OpenApiUtil.getEncodeParam(policyName)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deletePolicyInstance(clusterId: string, policyName: string, request: DeletePolicyInstanceRequest): DeletePolicyInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deletePolicyInstanceWithOptions(clusterId, policyName, request, headers, runtime);
}

model DeleteTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteTemplateWithOptions(TemplateId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteTemplateResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteTemplate',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/templates/${OpenApiUtil.getEncodeParam(TemplateId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function deleteTemplate(TemplateId: string): DeleteTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteTemplateWithOptions(TemplateId, headers, runtime);
}

model DeleteTriggerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteTriggerWithOptions(clusterId: string, Id: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteTriggerResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteTrigger',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/%5Bcluster_id%5D/triggers/%5BId%5D`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function deleteTrigger(clusterId: string, Id: string): DeleteTriggerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteTriggerWithOptions(clusterId, Id, headers, runtime);
}

model DeployPolicyInstanceRequest {
  action?: string(name='action', description='The action of the policy. Valid values:

*   `deny`: Deployments that match the policy are denied.
*   `warn`: Alerts are generated for Deployments that match the policy.', example='deny'),
  namespaces?: [ string ](name='namespaces', description='The applicable scope of the policy instance. If you leave this parameter empty, the policy instance is applicable to all namespaces.'),
  parameters?: map[string]any(name='parameters', description='The parameters of the policy instance.', example='{"restrictedNamespaces": [ "test" ]}'),
}

model DeployPolicyInstanceResponseBody = {
  instances?: [ string ](name='instances', description='A list of policy instances.'),
}

model DeployPolicyInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeployPolicyInstanceResponseBody(name='body'),
}

async function deployPolicyInstanceWithOptions(clusterId: string, policyName: string, request: DeployPolicyInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeployPolicyInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.action)) {
    body['action'] = request.action;
  }
  if (!Util.isUnset(request.namespaces)) {
    body['namespaces'] = request.namespaces;
  }
  if (!Util.isUnset(request.parameters)) {
    body['parameters'] = request.parameters;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeployPolicyInstance',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(clusterId)}/policies/${OpenApiUtil.getEncodeParam(policyName)}`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deployPolicyInstance(clusterId: string, policyName: string, request: DeployPolicyInstanceRequest): DeployPolicyInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deployPolicyInstanceWithOptions(clusterId, policyName, request, headers, runtime);
}

model DescirbeWorkflowResponseBody = {
  createTime?: string(name='create_time', description='The time when the workflow was created.', example='2020-01-15 16:30:25 +0800 CST'),
  duration?: string(name='duration', description='The duration of the workflow.', example='1h15m33.529968361s'),
  finishTime?: string(name='finish_time', description='The end time of the task.', example='0001-01-01 00:00:00 +0000 UTC'),
  inputDataSize?: string(name='input_data_size', description='The size of the input data.', example='0'),
  jobName?: string(name='job_name', description='The name of the workflow.', example='wgs-gpu-97xfn'),
  jobNamespace?: string(name='job_namespace', description='The namespace to which the workflow belongs.', example='1171330362041663'),
  outputDataSize?: string(name='output_data_size', description='The size of the output data.', example='0'),
  status?: string(name='status', description='The current state of the workflow.', example='Running'),
  totalBases?: string(name='total_bases', description='The number of base pairs.', example='0'),
  totalReads?: string(name='total_reads', description='The number of reads.', example='0'),
  userInputData?: string(name='user_input_data', description='The user input parameters.', example='{\\"wgs_oss_region\\":\\"cn-shenzhen\\",\\"wgs_fastq_first_name\\":\\"fastq/huada/MGISEQ-200019SZ0002402\\",\\"wgs_fastq_second_name\\":\\"fastq/huada/MGISEQ-200019SZ0002402\\",\\"wgs_bucket_name\\":\\"gene-shenzhen\\",\\"wgs_vcf_file_name\\":\\"output/vcf/huada.vcf\\",\\"wgs_bam_file_name\\":\\"output/bam/huada.bam\\",\\"wgs_reference_file\\":\\"hg19\\",\\"wgs_service\\":\\"g\\"}'),
}

model DescirbeWorkflowResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescirbeWorkflowResponseBody(name='body'),
}

async function descirbeWorkflowWithOptions(workflowName: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescirbeWorkflowResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescirbeWorkflow',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/gs/workflow/${OpenApiUtil.getEncodeParam(workflowName)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function descirbeWorkflow(workflowName: string): DescirbeWorkflowResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return descirbeWorkflowWithOptions(workflowName, headers, runtime);
}

model DescribeAddonsRequest {
  clusterProfile?: string(name='cluster_profile', description='The type of cluster. Valid values:

*   `Default`: ACK managed cluster
*   `Serverless`: ACK Serverless cluster
*   `Edge`: ACK Edge cluster', example='Default'),
  clusterSpec?: string(name='cluster_spec', description='The edition of the cluster. If you set the cluster type to `ManagedKubernetes`, the following editions are supported:

*   `ack.pro.small`: ACK Pro cluster
*   `ack.standard`: ACK Basic cluster

By default, this parameter is left empty. If you leave this parameter empty, clusters are not filtered by edition.', example='ack.pro.small'),
  clusterType?: string(name='cluster_type', description='The type of cluster. Valid values:

*   `Kubernetes`: ACK dedicated cluster
*   `ManagedKubernetes`: ACK managed cluster
*   `Ask`: ACK Serverless cluster
*   `ExternalKubernetes`: registered cluster', example='kubernetes'),
  clusterVersion?: string(name='cluster_version', description='The cluster version.', example='1.24.6-aliyun.1'),
  region?: string(name='region', description='The region ID of the cluster.', example='cn-beijing'),
}

model DescribeAddonsResponseBody = {
  componentGroups?: [ 
    {
      groupName?: string(name='group_name', description='The name of the component group.', example='storage'),
      items?: [ 
        {
          name?: string(name='name', description='The name of the component.', example='flexvolume'),
        }
      ](name='items', description='The names of the components in the component group.'),
    }
  ](name='ComponentGroups', description='The list of the returned components.'),
  standardComponents?: map[string]StandardComponentsValue(name='StandardComponents', description='Standard components.'),
}

model DescribeAddonsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAddonsResponseBody(name='body'),
}

async function describeAddonsWithOptions(request: DescribeAddonsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeAddonsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.clusterProfile)) {
    query['cluster_profile'] = request.clusterProfile;
  }
  if (!Util.isUnset(request.clusterSpec)) {
    query['cluster_spec'] = request.clusterSpec;
  }
  if (!Util.isUnset(request.clusterType)) {
    query['cluster_type'] = request.clusterType;
  }
  if (!Util.isUnset(request.clusterVersion)) {
    query['cluster_version'] = request.clusterVersion;
  }
  if (!Util.isUnset(request.region)) {
    query['region'] = request.region;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAddons',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/components/metadata`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAddons(request: DescribeAddonsRequest): DescribeAddonsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeAddonsWithOptions(request, headers, runtime);
}

model DescribeClusterAddonInstanceResponseBody = {
  config?: string(name='config', description='The configuration of the component.', example='{"NetworkPolicy":"true"}'),
  name?: string(name='name', description='The name of the component.', example='terway-eniip'),
  state?: string(name='state', description='The status of the component. Valid values:

*   initial: The component is being installed.
*   active: The component is installed.
*   unhealthy: The component is in an abnormal state.
*   upgrading: The component is being updated.
*   updating: The component is being modified.
*   deleting: The component is being uninstalled.
*   deleted: The component is deleted.', example='active'),
  version?: string(name='version', description='The version of the component.', example='v1.4.3'),
}

model DescribeClusterAddonInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClusterAddonInstanceResponseBody(name='body'),
}

async function describeClusterAddonInstanceWithOptions(ClusterID: string, AddonName: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeClusterAddonInstanceResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusterAddonInstance',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterID)}/components/${OpenApiUtil.getEncodeParam(AddonName)}/instance`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClusterAddonInstance(ClusterID: string, AddonName: string): DescribeClusterAddonInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeClusterAddonInstanceWithOptions(ClusterID, AddonName, headers, runtime);
}

model DescribeClusterAddonMetadataResponseBody = {
  configSchema?: string(name='config_schema', description='The component schema parameters.', example='{\\n  \\"$schema\\": \\"https://json-schema.org/draft-07/schema#\\",\\n  \\"properties\\": {\\n    \\"controller\\": {\\n      \\"description\\": \\"\\",\\n      \\"properties\\": {\\n        \\"resources\\": {\\n          \\"properties\\": {\\n            \\"armsPrometheusOperator\\": {\\n              \\"properties\\": {\\n                \\"resources\\": {\\n                  \\"properties\\": {\\n                    \\"limits\\": {\\n                      \\"properties\\": {\\n                        \\"memory\\": {\\n                          \\"description\\": \\"memory limit of arms prometheus operator\\",\\n                          \\"type\\": \\"string\\",\\n                          \\"pattern\\": \\"^[1-9][0-9]*(\\\\\\\\.\\\\\\\\d+)?(K|Ki|M|Mi|G|Gi|T|Ti)?$\\",\\n                          \\"default\\": \\"500m\\",\\n                          \\"x-ui-description\\": \\"<mds-key>\\",\\n                          \\"x-ui-prompt-message\\": \\"<mds-key>\\",\\n                          \\"x-ui-validation-message\\": \\"<mds-key>\\",\\n                          \\"x-ui-additional-tips\\": \\"<mds-key>\\"\\n                        },\\n                        \\"cpu\\": {\\n                          \\"description\\": \\"cpu limit of arms prometheus operator\\",\\n                          \\"type\\": \\"string\\",\\n                          \\"pattern\\": \\"^[1-9][0-9]*(m|\\\\\\\\.\\\\\\\\d+)?$\\",\\n                          \\"default\\": \\"1.0\\",\\n                          \\"x-ui-description\\": \\"<mds-key>\\",\\n                          \\"x-ui-validation-message\\": \\"<mds-key>\\"\\n                        }\\n                      },\\n                      \\"type\\": \\"object\\",\\n                      \\"additionalProperties\\": false\\n                    },\\n                    \\"requests\\": {\\n                      \\"properties\\": {\\n                        \\"memory\\": {\\n                          \\"description\\": \\"memory request of arms prometheus operator\\",\\n                          \\"type\\": \\"string\\",\\n                          \\"pattern\\": \\"^[1-9][0-9]*(\\\\\\\\.\\\\\\\\d+)?(K|Ki|M|Mi|G|Gi|T|Ti)?$\\",\\n                          \\"default\\": \\"500m\\",\\n                          \\"x-ui-description\\": \\"<mds-key>\\",\\n                          \\"x-ui-validation-message\\": \\"<mds-key>\\"\\n                        },\\n                        \\"cpu\\": {\\n                          \\"description\\": \\"cpu request of arms prometheus operator\\",\\n                          \\"type\\": \\"string\\",\\n                          \\"pattern\\": \\"^[1-9][0-9]*(m|\\\\\\\\.\\\\\\\\d+)?$\\",\\n                          \\"default\\": \\"1.0\\",\\n                          \\"x-ui-description\\": \\"<mds-key>\\",\\n                          \\"x-ui-validation-message\\": \\"<mds-key>\\"\\n                        }\\n                      },\\n                      \\"type\\": \\"object\\",\\n                      \\"additionalProperties\\": false\\n                    }\\n                  },\\n                  \\"type\\": \\"object\\",\\n                  \\"additionalProperties\\": false\\n                }\\n              },\\n              \\"type\\": \\"object\\",\\n              \\"additionalProperties\\": false\\n            }\\n          },\\n          \\"type\\": \\"object\\",\\n          \\"additionalProperties\\": false\\n        }\\n      },\\n      \\"type\\": \\"object\\",\\n      \\"additionalProperties\\": false\\n    }\\n  },\\n  \\"title\\": \\"Values\\",\\n  \\"type\\": \\"object\\",\\n  \\"additionalProperties\\": false\\n}'),
  name?: string(name='name', description='The component name.', example='coredns'),
  version?: string(name='version', description='The component version.', example='1.8.4.1'),
}

model DescribeClusterAddonMetadataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClusterAddonMetadataResponseBody(name='body'),
}

async function describeClusterAddonMetadataWithOptions(clusterId: string, componentId: string, version: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeClusterAddonMetadataResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusterAddonMetadata',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(clusterId)}/components/${OpenApiUtil.getEncodeParam(componentId)}/metadata`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClusterAddonMetadata(clusterId: string, componentId: string, version: string): DescribeClusterAddonMetadataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeClusterAddonMetadataWithOptions(clusterId, componentId, version, headers, runtime);
}

model DescribeClusterAddonUpgradeStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: object(name='body'),
}

/**
  * @deprecated
  *
  * @param headers map
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeClusterAddonUpgradeStatusResponse
 */
// Deprecated
async function describeClusterAddonUpgradeStatusWithOptions(ClusterId: string, ComponentId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeClusterAddonUpgradeStatusResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusterAddonUpgradeStatus',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/components/${OpenApiUtil.getEncodeParam(ComponentId)}/upgradestatus`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @return DescribeClusterAddonUpgradeStatusResponse
 */
// Deprecated
async function describeClusterAddonUpgradeStatus(ClusterId: string, ComponentId: string): DescribeClusterAddonUpgradeStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeClusterAddonUpgradeStatusWithOptions(ClusterId, ComponentId, headers, runtime);
}

model DescribeClusterAddonsUpgradeStatusRequest {
  componentIds?: [ string ](name='componentIds', description='The list of component names.'),
}

model DescribeClusterAddonsUpgradeStatusShrinkRequest {
  componentIdsShrink?: string(name='componentIds', description='The list of component names.'),
}

model DescribeClusterAddonsUpgradeStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: object(name='body'),
}

async function describeClusterAddonsUpgradeStatusWithOptions(ClusterId: string, tmpReq: DescribeClusterAddonsUpgradeStatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeClusterAddonsUpgradeStatusResponse {
  Util.validateModel(tmpReq);
  var request = new DescribeClusterAddonsUpgradeStatusShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.componentIds)) {
    request.componentIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.componentIds, 'componentIds', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.componentIdsShrink)) {
    query['componentIds'] = request.componentIdsShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusterAddonsUpgradeStatus',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/components/upgradestatus`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClusterAddonsUpgradeStatus(ClusterId: string, request: DescribeClusterAddonsUpgradeStatusRequest): DescribeClusterAddonsUpgradeStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeClusterAddonsUpgradeStatusWithOptions(ClusterId, request, headers, runtime);
}

model DescribeClusterAddonsVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: object(name='body'),
}

async function describeClusterAddonsVersionWithOptions(ClusterId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeClusterAddonsVersionResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusterAddonsVersion',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/components/version`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClusterAddonsVersion(ClusterId: string): DescribeClusterAddonsVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeClusterAddonsVersionWithOptions(ClusterId, headers, runtime);
}

model DescribeClusterAttachScriptsRequest {
  arch?: string(name='arch', description='The CPU architecture of the node. Valid values: `amd64`, `arm`, and `arm64`.

Default value: `amd64`.

>  This parameter is required if you want to add the existing node to a Container Service for Kubernetes (ACK) Edge cluster.', example='amd64'),
  formatDisk?: boolean(name='format_disk', description='Specifies whether to mount data disks to an existing instance when you add the instance to the cluster. You can add data disks to store container data and images. Valid values:

*   `true`: mounts data disks to the existing instance that you want to add. After a data disk is mounted, the original data on the disk is erased. Back up data before you mount a data disk.
*   `false`: does not mount data disks to the existing instance.

Default value: `false`.

How a data disk is mounted:

*   If the Elastic Compute Service (ECS) instances are already mounted with data disks and the file system of the last data disk is not initialized, the system automatically formats this data disk to ext4 and mounts it to /var/lib/docker and /var/lib/kubelet.
*   If no data disk is mounted to the ECS instance, the system does not purchase a new data disk.', example='false'),
  keepInstanceName?: boolean(name='keep_instance_name', description='Specifies whether to retain the name of the existing instance when it is added to the cluster. If you do not retain the instance name, the instance is named in the `worker-k8s-for-cs-<clusterid>` format. Valid values:

*   `true`: retains the instance name.
*   `false`: does not retain the instance name.

Default value: `true`', example='true'),
  nodepoolId?: string(name='nodepool_id', description='The ID of the node pool to which you want to add an existing node. This parameter allows you to add an existing node to a specified node pool.

>  If you do not specify a node pool ID, the node is added to the default node pool.', example='np1c9229d9be2d432c93f77a88fca0****'),
  options?: string(name='options', description='The node configurations for the existing instance that you want to add as a node.

>  This parameter is required if you want to add the existing node to an ACK Edge cluster.', example='{\\"enableIptables\\": true,\\"manageRuntime\\": true,\\"quiet\\": true,\\"allowedClusterAddons\\": [\\"kube-proxy\\",\\"flannel\\",\\"coredns\\"]}'),
  rdsInstances?: [ string ](name='rds_instances', description='After you specify the list of RDS instances, the ECS instances in the cluster are automatically added to the whitelist of the RDS instances.'),
}

model DescribeClusterAttachScriptsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: string(name='body'),
}

async function describeClusterAttachScriptsWithOptions(ClusterId: string, request: DescribeClusterAttachScriptsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeClusterAttachScriptsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.arch)) {
    body['arch'] = request.arch;
  }
  if (!Util.isUnset(request.formatDisk)) {
    body['format_disk'] = request.formatDisk;
  }
  if (!Util.isUnset(request.keepInstanceName)) {
    body['keep_instance_name'] = request.keepInstanceName;
  }
  if (!Util.isUnset(request.nodepoolId)) {
    body['nodepool_id'] = request.nodepoolId;
  }
  if (!Util.isUnset(request.options)) {
    body['options'] = request.options;
  }
  if (!Util.isUnset(request.rdsInstances)) {
    body['rds_instances'] = request.rdsInstances;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusterAttachScripts',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/attachscript`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'string',
  };
  return callApi(params, req, runtime);
}

async function describeClusterAttachScripts(ClusterId: string, request: DescribeClusterAttachScriptsRequest): DescribeClusterAttachScriptsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeClusterAttachScriptsWithOptions(ClusterId, request, headers, runtime);
}

model DescribeClusterDetailResponseBody = {
  clusterId?: string(name='cluster_id', description='The cluster ID.', example='c82e6987e2961451182edacd74faf****'),
  clusterSpec?: string(name='cluster_spec', description='The edition of the cluster if the cluster is an ACK managed cluster. Valid values:

*   `ack.pro.small`: ACK Pro
*   `ack.standard`: ACK Basic', example='ack.pro.small'),
  clusterType?: string(name='cluster_type', description='The type of cluster. Valid values:

*   `Kubernetes`: ACK dedicated cluster
*   `ManagedKubernetes`: ACK managed cluster
*   `Ask`: ACK Serverless cluster
*   `ExternalKubernetes`: registered cluster', example='Kubernetes'),
  created?: string(name='created', description='The time when the cluster was created.', example='2019-11-25T15:50:20+08:00'),
  currentVersion?: string(name='current_version', description='The current Kubernetes version of the cluster. For more information about the Kubernetes versions supported by ACK, see [Release notes for Kubernetes versions](~~185269~~).', example='1.16.6-aliyun.1'),
  deletionProtection?: boolean(name='deletion_protection', description='Indicates whether deletion protection is enabled for the cluster. If deletion protection is enabled, the cluster cannot be deleted in the Container Service console or by calling API operations. Valid values:

*   `true`: deletion protection is enabled for the cluster. This way, the cluster cannot be deleted in the Container Service console or by calling API operations.
*   `false`: deletion protection is disabled for the cluster. This way, the cluster can be deleted in the Container Service console or by calling API operations.', example='true'),
  dockerVersion?: string(name='docker_version', description='The Docker version that is used by the cluster.', example='19.03.5'),
  externalLoadbalancerId?: string(name='external_loadbalancer_id', example='lb-2zehc05z3b8dwiifh****'),
  initVersion?: string(name='init_version', description='The initial Kubernetes version of the cluster.', example='1.16.6-aliyun.1'),
  maintenanceWindow?: MaintenanceWindow(name='maintenance_window', description='The maintenance window of the cluster. This feature is available only in ACK Pro clusters.'),
  masterUrl?: string(name='master_url', description='The endpoints of the cluster, including an internal endpoint and a public endpoint.', example='{\\"intranet_api_server_endpoint\\":\\"https://192.168.0.251:6443\\"***}'),
  metaData?: string(name='meta_data', description='The metadata of the cluster.', example='\\"Addons\\":***'),
  name?: string(name='name', description='The name of the cluster.

The name must be 1 to 63 characters in length, and can contain digits, letters, and hyphens (-). The name cannot start with a hyphen (-).', example='cluster-demo'),
  networkMode?: string(name='network_mode', example='vpc'),
  nextVersion?: string(name='next_version', example='1.18.8-aliyun.1'),
  parameters?: map[string]string(name='parameters', description='The ROS parameters of the cluster.'),
  privateZone?: boolean(name='private_zone', example='false'),
  profile?: string(name='profile', description='Indicates the scenario in which the cluster is used. Valid values:

*   `Default`: non-edge computing scenarios
*   `Edge`: edge computing scenarios', example='Default'),
  regionId?: string(name='region_id', description='The region ID of the cluster.', example='cn-beijing'),
  resourceGroupId?: string(name='resource_group_id', description='The ID of the resource group to which the cluster belongs.', example='rg-acfmyvw3wjm****'),
  securityGroupId?: string(name='security_group_id', description='The ID of the security group to which the cluster belongs.', example='sg-25yq****'),
  size?: long(name='size', description='The number of nodes in the cluster. Master nodes and worker nodes are included.', example='5'),
  state?: string(name='state', description='The status of the cluster. Valid values:

*   `initial`: The cluster is being created.
*   `failed`: The cluster failed to be created.
*   `running`: The cluster is running.
*   `updating`: The cluster is being updated.
*   `updating_failed`: The cluster failed to be updated.
*   `scaling`: The cluster is being scaled.
*   `waiting`: The cluster is waiting for connection requests.
*   `disconnected`: The cluster is disconnected.
*   `stopped`: The cluster is stopped.
*   `deleting`: The cluster is being deleted.
*   `deleted`: The cluster is deleted.
*   `delete_failed`: The cluster failed to be deleted.', example='running'),
  subnetCidr?: string(name='subnet_cidr', description='The pod CIDR block. It must be a valid and private CIDR block, and must be one of the following CIDR blocks or their subnets:

*   10.0.0.0/8
*   172.16-31.0.0/12-16
*   192.168.0.0/16

The pod CIDR block cannot overlap with the CIDR block of the VPC or the CIDR blocks of the clusters in the VPC.

For more information, see [Plan CIDR blocks for an ACK cluster](~~186964~~).', example='172.20.0.0/16'),
  tags?: [
    Tag
  ](name='tags', description='The resource labels of the cluster.'),
  updated?: string(name='updated', description='The time when the cluster was updated.', example='2020-01-13T23:01:03+08:00'),
  vpcId?: string(name='vpc_id', description='The ID of the VPC where the cluster is deployed. This parameter is required when you create a cluster.', example='vpc-2zecuu62b9zw7a7qn****'),
  vswitchId?: string(name='vswitch_id', description='The IDs of the vSwitches. You can select one to three vSwitches when you create a cluster. We recommend that you select vSwitches in different zones to ensure high availability.', example='vsw-2zete8s4qocqg0mf6****,vsw-2zete8s4qocqg0mf6****'),
  workerRamRoleName?: string(name='worker_ram_role_name', description='The name of the worker Resource Access Management (RAM) role. The RAM role is assigned to the worker nodes of the cluster to allow the worker nodes to manage Elastic Compute Service (ECS) instances.', example='KubernetesWorkerRole-ec87d15b-edca-4302-933f-c8a16bf0****'),
  zoneId?: string(name='zone_id', example='cn-beijing-a'),
}

model DescribeClusterDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClusterDetailResponseBody(name='body'),
}

async function describeClusterDetailWithOptions(ClusterId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeClusterDetailResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusterDetail',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClusterDetail(ClusterId: string): DescribeClusterDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeClusterDetailWithOptions(ClusterId, headers, runtime);
}

model DescribeClusterEventsRequest {
  pageNumber?: long(name='page_number', description='The number of the page to return.', example='1'),
  pageSize?: long(name='page_size', description='The number of entries per page. Valid values: 1 to 50. Default value: 50.', example='50'),
  taskId?: string(name='task_id', description='The ID of the query task.', example='T-xascadasd*****'),
}

model DescribeClusterEventsResponseBody = {
  events?: [ 
    {
      clusterId?: string(name='cluster_id', description='The ID of the cluster.', example='c82e6987e2961451182edacd74faf****'),
      data?: {
        level?: string(name='level', description='The severity level of the event.

Valid values:

*   warning

    <!-- -->

    <!-- -->

    <!-- -->

*   error

    <!-- -->

    <!-- -->

    <!-- -->

*   info

    <!-- -->

    <!-- -->

    <!-- -->', example='info'),
        message?: string(name='message', description='The details of the event.', example='Start to upgrade NodePool nodePool/npdd89dc2b76c04f14b06774883b******'),
        reason?: string(name='reason', description='The status of the event.', example='Started'),
      }(name='data', description='The description of the event.'),
      eventId?: string(name='event_id', description='The event ID.', example='e-9ad04f72-8ee7-46bf-a02c-e4a06b39****'),
      source?: string(name='source', description='The event source.', example='cluster'),
      subject?: string(name='subject', description='The subject related to the event.', example='npdd89dc2b76c04f14b06774883b******'),
      time?: string(name='time', description='The time when the event started.', example='2020-12-01T17:31:00Z'),
      type?: string(name='type', description='The type of event. Valid values:', example='nodepool_update'),
    }
  ](name='events', description='The list of events.'),
  pageInfo?: {
    pageNumber?: long(name='page_number', description='The number of the page to return.', example='1'),
    pageSize?: long(name='page_size', description='The number of entries per page. Valid values: 1 to 50. Default value: 50.', example='50'),
    totalCount?: long(name='total_count', description='The total number of entries returned.', example='3'),
  }(name='page_info', description='The pagination information.'),
}

model DescribeClusterEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClusterEventsResponseBody(name='body'),
}

async function describeClusterEventsWithOptions(ClusterId: string, request: DescribeClusterEventsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeClusterEventsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['page_number'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.taskId)) {
    query['task_id'] = request.taskId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusterEvents',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/events`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClusterEvents(ClusterId: string, request: DescribeClusterEventsRequest): DescribeClusterEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeClusterEventsWithOptions(ClusterId, request, headers, runtime);
}

model DescribeClusterLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: [ 
    {
      ID?: long(name='ID', description='The ID of the log entry.', example='590749245'),
      clusterId?: string(name='cluster_id', description='The cluster ID.', example='c23421cfa74454bc8b37163fd19af***'),
      clusterLog?: string(name='cluster_log', description='The log content.', example='start to update cluster status to CREATE_COMPLETE'),
      created?: string(name='created', description='The time when the log entry was generated.', example='2020-09-11T10:11:51+08:00'),
      updated?: string(name='updated', description='The time when the log entry was updated.', example='2020-09-11T10:11:51+08:00'),
    }
  ](name='body'),
}

async function describeClusterLogsWithOptions(ClusterId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeClusterLogsResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusterLogs',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/logs`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'array',
  };
  return callApi(params, req, runtime);
}

async function describeClusterLogs(ClusterId: string): DescribeClusterLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeClusterLogsWithOptions(ClusterId, headers, runtime);
}

model DescribeClusterNodePoolDetailResponseBody = {
  autoScaling?: {
    eipBandwidth?: long(name='eip_bandwidth', description='The maximum bandwidth of the elastic IP address (EIP).', example='5'),
    eipInternetChargeType?: string(name='eip_internet_charge_type', description='The metering method of the EIP. Valid values:

*   `PayByBandwidth`: pay-by-bandwidth.
*   `PayByTraffic`: pay-by-data-transfer.', example='PayByBandwidth'),
    enable?: boolean(name='enable', description='Indicates whether auto scaling is enabled. Valid values:

*   `true`: auto scaling is enabled.
*   `false`: auto scaling is disabled. If this parameter is set to false, other parameters in the `auto_scaling` section do not take effect.', example='true'),
    isBondEip?: boolean(name='is_bond_eip', description='Indicates whether an EIP is associated with the node pool. Valid values:

*   `true`: An EIP is associated with the node pool.
*   `false`: No EIP is associated with the node pool.', example='true'),
    maxInstances?: long(name='max_instances', description='The maximum number of Elastic Compute Service (ECS) instances that can be created in the node pool.', example='10'),
    minInstances?: long(name='min_instances', description='The minimum number of ECS instances that must be kept in the node pool.', example='1'),
    type?: string(name='type', description='The instance types that can be used for the auto scaling of the node pool. Valid values:

*   `cpu`: regular instance.
*   `gpu`: GPU-accelerated instance.
*   `gpushare`: shared GPU-accelerated instance.
*   `spot`: preemptible instance.', example='cpu'),
  }(name='auto_scaling', description='The auto scaling configuration of the node pool.'),
  interconnectConfig?: {
    bandwidth?: long(name='bandwidth', description='The bandwidth of the enhanced edge node pool. Unit: Mbit/s.', example='10'),
    ccnId?: string(name='ccn_id', description='The ID of the Cloud Connect Network (CCN) instance that is associated with the enhanced edge node pool.', example='ccn-qm5i0i0q9yi*******'),
    ccnRegionId?: string(name='ccn_region_id', description='The region to which the CCN instance that is associated with the enhanced edge node pool belongs.', example='cn-shanghai'),
    cenId?: string(name='cen_id', description='The ID of the Cloud Enterprise Network (CEN) instance that is associated with the enhanced edge node pool.', example='cen-ey9k9nfhz0f*******'),
    improvedPeriod?: string(name='improved_period', description='The subscription duration of the enhanced edge node pool. The duration is measured in months.', example='1'),
  }(name='interconnect_config', description='The network configuration of the edge node pool. This parameter takes effect only for edge node pools.'),
  interconnectMode?: string(name='interconnect_mode', description='The network type of the edge node pool. Valid values: basic and enhanced. This parameter takes effect only for edge node pools.', example='improved'),
  kubernetesConfig?: {
    cmsEnabled?: boolean(name='cms_enabled', description='Indicates whether the CloudMonitor agent is installed on ECS nodes in the cluster. After the CloudMonitor agent is installed, you can view monitoring information about the ECS instances in the CloudMonitor console. Installation is recommended. Valid values:

*   `true`: The CloudMonitor agent is installed on ECS nodes.
*   `false`: The CloudMonitor agent is not installed on ECS nodes.', example='true'),
    cpuPolicy?: string(name='cpu_policy', description='The CPU management policy of the nodes in the node pool. The following policies are supported if the Kubernetes version of the cluster is 1.12.6 or later.

*   `static`: allows pods with specific resource characteristics on the node to be granted enhanced CPU affinity and exclusivity.
*   `none`: indicates that the default CPU affinity is used.', example='none'),
    labels?: [
      Tag
    ](name='labels', description='The labels of the nodes in the node pool. You can add labels to the nodes in the cluster. You must add labels based on the following rules:

*   Each label is a case-sensitive key-value pair. You can add up to 20 labels.
*   A key must be unique and cannot exceed 64 characters in length. A value can be empty and cannot exceed 128 characters in length. Keys and values cannot start with `aliyun`, `acs:`, `https://`, or `http://`. For more information, see [Labels and Selectors](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#syntax-and-character-set).'),
    nodeNameMode?: string(name='node_name_mode', description='A custom node name consists of a prefix, an IP substring, and a suffix.

*   The prefix and suffix can contain multiple parts that are separated by periods (.). Each part can contain lowercase letters, digits, and hyphens (-). A custom node name must start and end with a digit or lowercase letter.
*   The IP substring length specifies the number of digits to be truncated from the end of the node IP address. The IP substring length ranges from 5 to 12.

For example, if the node IP address is 192.168.0.55, the prefix is aliyun.com, the IP substring length is 5, and the suffix is test, the node name will be aliyun.com00055test.', example='customized,test.,5,.com'),
    runtime?: string(name='runtime', description='The name of the container runtime.', example='docker'),
    runtimeVersion?: string(name='runtime_version', description='The version of the container runtime.', example='19.03.5'),
    taints?: [
      Taint
    ](name='taints', description='The taints of the nodes in the node pool. Taints are added to nodes to prevent pods from being scheduled to inappropriate nodes. However, tolerations allow pods to be scheduled to nodes with matching taints. For more information, see [taint-and-toleration](https://kubernetes.io/zh/docs/concepts/scheduling-eviction/taint-and-toleration/).'),
    userData?: string(name='user_data', description='The user data of the node pool. For more information, see [Generate user data](~~49121~~).', example='IyEvYmluL3NoCmVjaG8gIkhlbGxvIEFDSyEi'),
  }(name='kubernetes_config', description='The configuration of the cluster where the node pool is deployed.'),
  management?: {
    autoRepair?: boolean(name='auto_repair', description='Indicates whether auto repair is enabled. This parameter takes effect only when `enable=true` is specified. Valid values:

*   `true`: Auto repair is enabled.
*   `false`: Auto repair is disabled.', example='true'),
    autoRepairPolicy?: {
      restartNode?: boolean(name='restart_node', description='是否允许重启节点。', example='true'),
    }(name='auto_repair_policy', description='自动修复节点策略。'),
    autoUpgrade?: boolean(name='auto_upgrade', description='是否自动升级。', example='true'),
    autoUpgradePolicy?: {
      autoUpgradeKubelet?: boolean(name='auto_upgrade_kubelet', description='是否允许自动升级kubelet。', example='true'),
    }(name='auto_upgrade_policy', description='自动升级策略。'),
    autoVulFix?: boolean(name='auto_vul_fix', description='是否自动修复CVE。', example='true'),
    autoVulFixPolicy?: {
      restartNode?: boolean(name='restart_node', description='是否允许重启节点。', example='true'),
      vulLevel?: string(name='vul_level', description='允许自动修复的漏洞级别，以逗号分隔。', example='asap,nntf'),
    }(name='auto_vul_fix_policy', description='自动修复CVE策略。'),
    enable?: boolean(name='enable', description='Indicates whether the managed node pool feature is enabled. Valid values:

*   `true`: The managed node pool feature is enabled.
*   `false`: The managed node pool feature is disabled. Other parameters in this section take effect only when `enable=true` is specified.', example='true'),
    upgradeConfig?: {
      autoUpgrade?: boolean(name='auto_upgrade', description='Indicates whether auto update is enabled. Valid values:

*   `true`: Auto update is enabled.
*   `false`: Auto update is disabled.', example='true'),
      maxUnavailable?: long(name='max_unavailable', description='The maximum number of nodes that can be in the Unavailable state. Valid values: 1 to 1000.

Default value: 1.', example='1'),
      surge?: long(name='surge', description='The number of additional nodes.', example='5'),
      surgePercentage?: long(name='surge_percentage', description='The percentage of additional nodes to the nodes in the node pool. You must set this parameter or `surge`.', example='50'),
    }(name='upgrade_config', description='The configuration of auto update. The configuration takes effect only when `enable=true` is specified.'),
  }(name='management', description='The configuration of the managed node pool feature.'),
  maxNodes?: long(name='max_nodes', description='The maximum number of nodes that are supported by the edge node pool. The value of this parameter must be equal to or greater than 0. A value of 0 indicates that the number of nodes in the node pool is limited only by the quota of nodes in the cluster. In most cases, this parameter is set to a value larger than 0 for edge node pools. This parameter is set to 0 for node pools whose types are ess or default edge node pools.', example='10'),
  nodeConfig?: {
    kubeletConfiguration?: KubeletConfig(name='kubelet_configuration', description='Kubelet参数配置。'),
  }(name='node_config', description='节点配置'),
  nodepoolInfo?: {
    created?: string(name='created', description='The time when the node pool was created.', example='2020-09-27T19:14:09.156823496+08:00'),
    isDefault?: boolean(name='is_default', description='Indicates whether the node pool is a default node pool. A Container Service for Kubernetes (ACK) cluster usually has only one default node pool. Valid values: `true`: The node pool is a default node pool. `false`: The node pool is not a default node pool.', example='true'),
    name?: string(name='name', description='The name of the node pool.

The name must be 1 to 63 characters in length, and can contain digits, letters, and hyphens (-). It cannot start with a hyphen (-).', example='default-nodepool'),
    nodepoolId?: string(name='nodepool_id', description='The node pool ID.', example='np615c0e0966124216a0412e10afe0****'),
    regionId?: string(name='region_id', description='The region ID.', example='cn-beijing'),
    resourceGroupId?: string(name='resource_group_id', description='The ID of the resource group.', example='rg-acfmyvw3wjmb****'),
    type?: string(name='type', description='The type of node pool.', example='ess'),
    updated?: string(name='updated', description='The time when the node pool was last updated.', example='2020-09-27T20:37:46+08:00'),
  }(name='nodepool_info', description='The configuration of the node pool.'),
  scalingGroup?: {
    autoRenew?: boolean(name='auto_renew', description='Indicates whether auto-renewal is enabled for the nodes in the node pool. This parameter takes effect only when `instance_charge_type` is set to `PrePaid`. Valid values:

*   `true`: Auto-renewal is enabled.
*   `false`: Auto-renewal is disabled.', example='false'),
    autoRenewPeriod?: long(name='auto_renew_period', description='The duration of the auto-renewal. This parameter takes effect and is required only when `instance_charge_type` is set to `PrePaid`.

If you specify `PeriodUnit=Month`, the valid values are 1, 2, 3, 6, and 12.', example='1'),
    compensateWithOnDemand?: boolean(name='compensate_with_on_demand', description='Indicates whether pay-as-you-go instances are automatically created to meet the required number of ECS instances if preemptible instances cannot be created due to reasons such as cost or insufficient inventory. This parameter takes effect when `multi_az_policy` is set to `COST_OPTIMIZED`. Valid values:

*   `true`: Pay-as-you-go instances are automatically created to meet the required number of ECS instances if preemptible instances cannot be created.
*   `false`: Pay-as-you-go instances are not automatically created to meet the required number of ECS instances if preemptible instances cannot be created.', example='true'),
    dataDisks?: [
      DataDisk
    ](name='data_disks', description='The configurations of the data disks that are attached to the nodes in the node pool. The configurations include the disk type and disk size.'),
    deploymentsetId?: string(name='deploymentset_id', description='The ID of the deployment set to which the ECS instances in the node pool belong.', example='ds-bp1d19mmbsv3jf6xxxxx'),
    desiredSize?: long(name='desired_size', description='The expected number of nodes in the node pool.', example='2'),
    imageId?: string(name='image_id', description='The ID of the custom image. You can call the `DescribeKubernetesVersionMetadata` operation to query the images supported by ACK.', example='aliyun_2_1903_x64_20G_alibase_20200529.vhd'),
    instanceChargeType?: string(name='instance_charge_type', description='The billing method of the nodes in the node pool. Valid values:

*   `PrePaid`: the subscription billing method.
*   `PostPaid`: the pay-as-you-go billing method.', example='PostPaid'),
    instanceTypes?: [ string ](name='instance_types', description='A list of instance types. You can select multiple instance types. When the system needs to create a node, it starts from the first instance type until the node is created. The instance type that is used to create the node varies based on the actual instance stock.'),
    internetChargeType?: string(name='internet_charge_type', description='The billing method of the public IP address of the node.', example='PayByBandwidth'),
    internetMaxBandwidthOut?: long(name='internet_max_bandwidth_out', description='The maximum outbound bandwidth of the public IP address of the node. Unit: Mbit/s. Valid values: 1 to 100.', example='10'),
    keyPair?: string(name='key_pair', description='The name of the key pair. You must set this parameter or the `login_password` parameter. You must set `key_pair` if the node pool is a managed node pool.', example='pro-nodepool'),
    loginPassword?: string(name='login_password', description='The password for SSH logon. You must set this parameter or the `key_pair` parameter. The password must be 8 to 30 characters in length, and must contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters.

For security purposes, the returned password is encrypted.', example='********'),
    multiAzPolicy?: string(name='multi_az_policy', description='The ECS instance scaling policy for a multi-zone scaling group. Valid values:

*   `PRIORITY`: the scaling group is scaled based on the VSwitchIds.N parameter. If an ECS instance cannot be created in the zone where the vSwitch that has the highest priority resides, Auto Scaling creates the ECS instance in the zone where the vSwitch that has the next highest priority resides.

*   `COST_OPTIMIZED`: ECS instances are created based on the vCPU unit price in ascending order. Preemptible instances are preferably created when preemptible instance types are specified in the scaling configuration. You can set the `CompensateWithOnDemand` parameter to specify whether to automatically create pay-as-you-go instances when preemptible instances cannot be created due to insufficient resources.

    **

    **Note**The `COST_OPTIMIZED` setting takes effect only when multiple instance types are specified or at least one instance type is specified for preemptible instances.

*   `BALANCE`: ECS instances are evenly distributed across multiple zones specified by the scaling group. If ECS instances become imbalanced among multiple zones due to insufficient inventory, you can call the RebalanceInstances operation of Auto Scaling to balance the instance distribution among zones. For more information, see [RebalanceInstances](~~71516~~).

Default value: `PRIORITY`.', example='BALANCE'),
    onDemandBaseCapacity?: long(name='on_demand_base_capacity', description='The minimum number of pay-as-you-go instances that must be kept in the scaling group. Valid values: 0 to 1000. If the number of pay-as-you-go instances is less than the value of this parameter, Auto Scaling preferably creates pay-as-you-go instances.', example='0'),
    onDemandPercentageAboveBaseCapacity?: long(name='on_demand_percentage_above_base_capacity', description='The percentage of pay-as-you-go instances among the extra instances that exceed the number specified by `on_demand_base_capacity`. Valid values: 0 to 100.', example='20'),
    period?: long(name='period', description='The subscription duration of worker nodes. This parameter takes effect and is required only when `instance_charge_type` is set to `PrePaid`.

If `PeriodUnit=Month` is specified, the valid values are 1, 2, 3, 6, 12, 24, 36, 48, and 60.', example='0'),
    periodUnit?: string(name='period_unit', description='The billing cycle of the nodes. This parameter is required if `instance_charge_type` is set to `PrePaid`.

Valid value: `Month`.', example='Month'),
    platform?: string(name='platform', description='The release version of the operating system. Valid values:

*   `CentOS`
*   `AliyunLinux`
*   `Windows`
*   `WindowsCore`', example='AliyunLinux'),
    privatePoolOptions?: {
      id?: string(name='id', description='The ID of the private node pool.', example='eap-bp67acfmxazb4****'),
      matchCriteria?: string(name='match_criteria', description='The type of private node pool. This parameter specifies the type of private node pool that you want to use to create instances. A private node pool is generated when an elasticity assurance or a capacity reservation service takes effect. The system selects a private node pool to launch instances. Valid values:

*   `Open`: open private pool. The system selects an open private node pool to launch instances. If no matching open private node pool is available, the resources in the public node pool are used.
*   `Target`: specific private pool. The system uses the resources of the specified private node pool to launch instances. If the specified private node pool is unavailable, instances cannot be launched.
*   `None`: no private node pool is used. The resources of private node pools are not used to launch the instances.', example='Open'),
    }(name='private_pool_options', description='The configuration of the private node pool.'),
    ramPolicy?: string(name='ram_policy', description='The name of the worker Resource Access Management (RAM) role. The RAM role is assigned to the worker nodes of the cluster to allow the worker nodes to manage ECS instances.', example='KubernetesWorkerRole-021dc54f-929b-437a-8ae0-34c24d3e****'),
    rdsInstances?: [ string ](name='rds_instances', description='After you specify the list of RDS instances, the ECS instances in the cluster are automatically added to the whitelist of the RDS instances.'),
    scalingGroupId?: string(name='scaling_group_id', description='The ID of the scaling group.', example='asg-2zeieod8giqmov7z****'),
    scalingPolicy?: string(name='scaling_policy', description='The scaling mode of the scaling group. Valid values:

*   `release`: the standard mode. ECS instances are created and released based on resource usage.
*   `recycle`: the swift mode. ECS instances are created, stopped, or started during scaling events. This reduces the time required for the next scale-out event. When the instance is stopped, you are charged only for the storage service. This does not apply to ECS instances that are attached with local disks.', example='release'),
    securityGroupId?: string(name='security_group_id', description='The ID of the security group to which the node pool is added. If the node pool is added to multiple security groups, the first ID in the value of `security_group_ids` is returned.', example='sg-2ze60ockeekspl3d****'),
    securityGroupIds?: [ string ](name='security_group_ids', description='The IDs of the security groups to which the node pool is added.'),
    spotInstancePools?: long(name='spot_instance_pools', description='The number of instance types that are available for creating preemptible instances. Auto Scaling creates preemptible instances of multiple instance types that are available at the lowest cost. Valid values: 1 to 10.', example='5'),
    spotInstanceRemedy?: boolean(name='spot_instance_remedy', description='Indicates whether preemptible instances are supplemented when the number of preemptible instances drops below the specified minimum number. If this parameter is set to true, when the scaling group receives a system message that a preemptible instance is to be reclaimed, the scaling group attempts to create a new instance to replace this instance. Valid values: Valid values:

*   `true`: Supplementation of preemptible instances is enabled.
*   `false`: Supplementation of preemptible instances is disabled.', example='false'),
    spotPriceLimit?: [ 
      {
        instanceType?: string(name='instance_type', description='The instance type of preemptible instances.', example='ecs.c6.large'),
        priceLimit?: string(name='price_limit', description='The price limit of a preemptible instance.

Unit: USD/hour.', example='0.39'),
      }
    ](name='spot_price_limit', description='The bid configurations of preemptible instances.'),
    spotStrategy?: string(name='spot_strategy', description='The type of preemptible instance. Valid values:

*   NoSpot: a non-preemptible instance.
*   SpotWithPriceLimit: a preemptible instance that is configured with the highest bid price.
*   SpotAsPriceGo: a preemptible instance for which the system automatically bids based on the current market price.

For more information, see [Preemptible instances](~~157759~~).', example='NoSpot'),
    systemDiskCategory?: string(name='system_disk_category', description='The type of system disk. Valid values:

*   `cloud_efficiency`: ultra disk.
*   `cloud_ssd`: standard SSD.', example='cloud_efficiency'),
    systemDiskPerformanceLevel?: string(name='system_disk_performance_level', description='The performance level (PL) of the system disk that you want to use for the node. This parameter takes effect only for enhanced SSDs (ESSDs).', example='PL1'),
    systemDiskSize?: long(name='system_disk_size', description='The system disk size of a node. Unit: GiB.

Valid values: 20 to 500.', example='120'),
    tags?: [
      Tag
    ](name='tags', description='The labels that you want to add to the ECS instances.

A key must be unique and cannot exceed 128 characters in length. Neither keys nor values can start with aliyun or acs:. Neither keys nor values can contain https:// or http://.'),
    vswitchIds?: [ string ](name='vswitch_ids', description='The IDs of vSwitches. You can specify 1 to 20 vSwitches.

> We recommend that you select vSwitches in different zones to ensure high availability.'),
  }(name='scaling_group', description='The configuration of the scaling group.'),
  status?: {
    failedNodes?: long(name='failed_nodes', description='The number of failed nodes.', example='0'),
    healthyNodes?: long(name='healthy_nodes', description='The number of healthy nodes.', example='3'),
    initialNodes?: long(name='initial_nodes', description='The number of nodes that are being created.', example='0'),
    offlineNodes?: long(name='offline_nodes', description='The number of offline nodes.', example='0'),
    removingNodes?: long(name='removing_nodes', description='The number of nodes that are being removed.', example='0'),
    servingNodes?: long(name='serving_nodes', description='The number of running nodes.', example='3'),
    state?: string(name='state', description='The status of the node pool. Valid values:

*   `active`: The node pool is active.
*   `scaling`: The node pool is being scaled.
*   `removing`: Nodes are being removed from the node pool.
*   `deleting`: The node pool is being deleted.
*   `updating`: The node pool is being updated.', example='active'),
    totalNodes?: long(name='total_nodes', description='The total number of nodes in the node pool.', example='3'),
  }(name='status', description='The status details about the node pool.'),
  teeConfig?: {
    teeEnable?: boolean(name='tee_enable', description='Indicates whether confidential computing is enabled. Valid values:

*   `true`: Confidential computing is enabled.
*   `false`: Confidential computing is disabled.', example='false'),
  }(name='tee_config', description='The configuration of confidential computing.'),
}

model DescribeClusterNodePoolDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClusterNodePoolDetailResponseBody(name='body'),
}

async function describeClusterNodePoolDetailWithOptions(ClusterId: string, NodepoolId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeClusterNodePoolDetailResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusterNodePoolDetail',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/nodepools/${OpenApiUtil.getEncodeParam(NodepoolId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClusterNodePoolDetail(ClusterId: string, NodepoolId: string): DescribeClusterNodePoolDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeClusterNodePoolDetailWithOptions(ClusterId, NodepoolId, headers, runtime);
}

model DescribeClusterNodePoolsResponseBody = {
  nodepools?: [ 
    {
      autoScaling?: {
        eipBandwidth?: long(name='eip_bandwidth', description='The maximum bandwidth of the elastic IP address (EIP).', example='5'),
        eipInternetChargeType?: string(name='eip_internet_charge_type', description='The metering method of the EIP. Valid values:

*   `PayByBandwidth`: pay-by-bandwidth.
*   `PayByTraffic`: pay-by-data-transfer.', example='PayByBandwidth'),
        enable?: boolean(name='enable', description='Indicates whether auto scaling is enabled.

*   `true`: Auto scaling is enabled for the node pool.
*   `false`: Auto scaling is disabled for the node pool. If you set this parameter to `false`, other parameters in the `auto_scaling` section does not take effect.', example='true'),
        isBondEip?: boolean(name='is_bond_eip', description='Indicates whether an EIP is associated with the node pool. Valid values:

*   `true`: An EIP is associated with the node pool.
*   `false`: No EIP is associated with the node pool.', example='true'),
        maxInstances?: long(name='max_instances', description='The maximum number of Elastic Compute Service (ECS) instances that can be created in the node pool.', example='10'),
        minInstances?: long(name='min_instances', description='The minimum number of ECS instances that must be kept in the node pool.', example='2'),
        type?: string(name='type', description='The instance types that can be used for the auto scaling of the node pool. Valid values:

*   `cpu`: regular instance.
*   `gpu`: GPU-accelerated instance.
*   `gpushare`: shared GPU-accelerated instance.
*   `spot`: preemptible instance.', example='cpu'),
      }(name='auto_scaling', description='The configurations about auto scaling.'),
      interconnectConfig?: {
        bandwidth?: long(name='bandwidth', description='The bandwidth of the enhanced edge node pool. Unit: M.', example='10'),
        ccnId?: string(name='ccn_id', description='The ID of the Cloud Connect Network (CCN) instance that is associated with the enhanced edge node pool.', example='ccn-qm5i0i0q9yi*******'),
        ccnRegionId?: string(name='ccn_region_id', description='The region to which the CCN instance that is associated with the enhanced edge node pool belongs.', example='cn-shanghai'),
        cenId?: string(name='cen_id', description='The ID of the Cloud Enterprise Network (CEN) instance that is associated with the enhanced edge node pool.', example='cen-ey9k9nfhz0f*******'),
        improvedPeriod?: string(name='improved_period', description='The subscription duration of the enhanced edge node pool. The duration is measured in months.', example='1'),
      }(name='interconnect_config', description='The network configuration of the edge node pool. This parameter takes effect only for edge node pools.'),
      interconnectMode?: string(name='interconnect_mode', description='The network type of the edge node pool. Valid values: basic and enhanced. This parameter takes effect only for edge node pools.', example='improved'),
      kubernetesConfig?: {
        cmsEnabled?: boolean(name='cms_enabled', description='Indicates whether the CloudMonitor agent is installed on ECS nodes in the cluster. After the CloudMonitor agent is installed, you can view monitoring information about the ECS instances in the CloudMonitor console. Installation is recommended. Valid values:

*   `true`: The CloudMonitor agent is installed on ECS nodes.
*   `false`: The CloudMonitor agent is not installed on ECS nodes.', example='true'),
        cpuPolicy?: string(name='cpu_policy', description='The CPU management policy of the nodes in the node pool. The following policies are supported if the Kubernetes version of the cluster is 1.12.6 or later.

*   `static`: allows pods with specific resource characteristics on the node to be granted enhanced CPU affinity and exclusivity.
*   `none`: indicates that the default CPU affinity is used.', example='none'),
        labels?: [
          Tag
        ](name='labels', description='The labels of the nodes in the node pool. You can add labels to the nodes in the cluster. You must add labels based on the following rules:

*   Each label is a case-sensitive key-value pair. You can add up to 20 labels.
*   A key must be unique and cannot exceed 64 characters in length. A value can be empty and cannot exceed 128 characters in length. Keys and values cannot start with `aliyun`, `acs:`, `https://`, or `http://`. For more information, see [Labels and Selectors](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#syntax-and-character-set).'),
        nodeNameMode?: string(name='node_name_mode', description='A custom node name consists of a prefix, an IP substring, and a suffix.

*   The prefix and suffix can contain multiple parts that are separated by periods (.). Each part can contain lowercase letters, digits, and hyphens (-). A custom node name must start and end with a digit or lowercase letter.
*   The IP substring length specifies the number of digits to be truncated from the end of the node IP address. The IP substring length ranges from 5 to 12.

For example, if the node IP address is 192.168.0.55, the prefix is aliyun.com, the IP substring length is 5, and the suffix is test, the node name will be aliyun.com00055test.', example='customized,test.,5,.com'),
        runtime?: string(name='runtime', description='The name of the container runtime.', example='docker'),
        runtimeVersion?: string(name='runtime_version', description='The version of the container runtime.', example='19.03.5'),
        taints?: [
          Taint
        ](name='taints', description='The taints of the nodes in the node pool. Taints are added to nodes to prevent pods from being scheduled to inappropriate nodes. However, tolerations allow pods to be scheduled to nodes with matching taints. For more information, see [taint-and-toleration](https://kubernetes.io/zh/docs/concepts/scheduling-eviction/taint-and-toleration/).'),
        userData?: string(name='user_data', description='The user data of the node pool. For more information, see [Generate user data](~~49121~~).', example='IyEvYmluL3NoCmVjaG8gIkhlbGxvIEFD****'),
      }(name='kubernetes_config', description='The configuration of the cluster where the node pool is deployed.'),
      management?: {
        autoRepair?: boolean(name='auto_repair', description='Indicates whether auto repair is enabled. This parameter takes effect only when `enable=true` is specified. Valid values:

*   `true`: Auto repair is enabled.
*   `false`: Auto repair is disabled.', example='true'),
        autoRepairPolicy?: {
          restartNode?: boolean(name='restart_node', description='是否允许重启节点。', example='true'),
        }(name='auto_repair_policy', description='自动修复节点策略。'),
        autoUpgrade?: boolean(name='auto_upgrade', description='是否自动升级。', example='true'),
        autoUpgradePolicy?: {
          autoUpgradeKubelet?: boolean(name='auto_upgrade_kubelet', description='是否允许自动升级kubelet。', example='true'),
        }(name='auto_upgrade_policy', description='自动升级策略。'),
        autoVulFix?: boolean(name='auto_vul_fix', description='是否自动修复CVE。', example='true'),
        autoVulFixPolicy?: {
          restartNode?: boolean(name='restart_node', description='是否允许重启节点。', example='true'),
          vulLevel?: string(name='vul_level', description='允许自动修复的漏洞级别，以逗号分隔。', example='asap,nntf'),
        }(name='auto_vul_fix_policy', description='自动修复CVE策略。'),
        enable?: boolean(name='enable', description='Indicates whether the managed node pool feature is enabled. Valid values:

*   `true`: The managed node pool feature is enabled.
*   `false`: The managed node pool feature is disabled. Other parameters in this section take effect only when `enable=true` is specified.', example='true'),
        upgradeConfig?: {
          autoUpgrade?: boolean(name='auto_upgrade', description='Indicates whether auto update is enabled. Valid values:

*   `true`: Auto update is enabled.
*   `false`: Auto update is disabled.', example='true'),
          maxUnavailable?: long(name='max_unavailable', description='The maximum number of nodes that can be in the Unavailable state. Valid values: 1 to 1000.

Default value: 1.', example='1'),
          surge?: long(name='surge', description='The number of additional nodes.', example='5'),
          surgePercentage?: long(name='surge_percentage', description='The percentage of additional nodes to the nodes in the node pool. You must set this parameter or `surge`.

The number of additional nodes = The percentage of additional nodes × The number of nodes in the node pool. For example, the percentage of additional nodes is set to 50% and the number of nodes in the node pool is six. The number of additional nodes will be three.', example='50'),
        }(name='upgrade_config', description='The configuration of auto update. The configuration takes effect only when `enable=true` is specified.'),
      }(name='management', description='The configuration of the managed node pool feature. The configuration takes effect only for ACK Pro managed clusters.'),
      maxNodes?: long(name='max_nodes', description='The maximum number of nodes that are supported by the edge node pool. The value of this parameter must be equal to or greater than 0. A value of 0 indicates that the number of nodes in the node pool is limited only by the quota of nodes in the cluster. In most cases, this parameter is set to a value larger than 0 for edge node pools. This parameter is set to 0 for node pools whose types are ess or default edge node pools.', example='10'),
      nodeConfig?: {
        kubeletConfiguration?: KubeletConfig(name='kubelet_configuration', description='Kubelet参数配置。'),
      }(name='node_config', description='节点配置。'),
      nodepoolInfo?: {
        created?: string(name='created', description='The time when the node pool was created.', example='2020-09-27T19:14:09.156823496+08:00'),
        isDefault?: boolean(name='is_default', description='Indicates whether the node pool is a default node pool. An ACK cluster usually has only one default node pool. Valid values:

*   `true`: The node pool is a default node pool.
*   `false`: The node pool is not a default node pool.', example='true'),
        name?: string(name='name', description='The name of the node pool.

The name must be 1 to 63 characters in length, and can contain digits, letters, and hyphens (-). It cannot start with a hyphen (-).', example='default-nodepool'),
        nodepoolId?: string(name='nodepool_id', description='The node pool ID.', example='np615c0e0966124216a0412e10afe0****'),
        regionId?: string(name='region_id', description='The region ID.', example='cn-beijing'),
        resourceGroupId?: string(name='resource_group_id', description='The ID of the resource group.', example='rg-acfmyvw3wjm****'),
        type?: string(name='type', description='The type of node pool. Valid values:

*   `edge`: edge node pool.
*   `ess`: node pool in the cloud.', example='ess'),
        updated?: string(name='updated', description='The time when the node pool was last updated.', example='2020-09-27T20:37:46+08:00'),
      }(name='nodepool_info', description='The information about the node pool.'),
      scalingGroup?: {
        autoRenew?: boolean(name='auto_renew', description='Indicates whether auto-renewal is enabled for the nodes in the node pool. This parameter takes effect only when `instance_charge_type` is set to `PrePaid`. Valid values:

*   `true`: Auto-renewal is enabled.
*   `false`: Auto-renewal is disabled.', example='false'),
        autoRenewPeriod?: long(name='auto_renew_period', description='The duration of the auto-renewal. This parameter takes effect and is required only when `instance_charge_type` is set to `PrePaid`.

If you specify `PeriodUnit=Month`, the valid values are 1, 2, 3, 6, and 12.', example='0'),
        compensateWithOnDemand?: boolean(name='compensate_with_on_demand', description='Indicates whether pay-as-you-go instances are automatically created to meet the required number of ECS instances if preemptible instances cannot be created due to reasons such as cost or insufficient inventory. This parameter takes effect when `multi_az_policy` is set to `COST_OPTIMIZED`. Valid values:

*   `true`: Pay-as-you-go instances are automatically created to meet the required number of ECS instances if preemptible instances cannot be created.
*   `false`: Pay-as-you-go instances are not automatically created to meet the required number of ECS instances if preemptible instances cannot be created.', example='true'),
        dataDisks?: [
          DataDisk
        ](name='data_disks', description='The configurations of the data disks that are attached to the nodes in the node pool. The configurations include the disk type and disk size.'),
        deploymentsetId?: string(name='deploymentset_id', description='The ID of the deployment set to which the ECS instances in the node pool belong.', example='ds-bp1d19mmbsv3jf6xxxxx'),
        desiredSize?: long(name='desired_size', description='The expected number of nodes in the node pool.', example='2'),
        imageId?: string(name='image_id', description='The ID of the custom image. You can call the `DescribeKubernetesVersionMetadata` operation to query the images supported by ACK.', example='aliyun_2_1903_x64_20G_alibase_20200529.vhd'),
        instanceChargeType?: string(name='instance_charge_type', description='The billing method of the nodes in the node pool. Valid values:

*   `PrePaid`: the subscription billing method.
*   `PostPaid`: the pay-as-you-go billing method.', example='PostPaid'),
        instanceTypes?: [ string ](name='instance_types', description='A list of instance types. You can select multiple instance types. When the system needs to create a node, it starts from the first instance type until the node is created. The instance type that is used to create the node varies based on the actual instance stock.', example='ecs.n4.large'),
        internetChargeType?: string(name='internet_charge_type', description='The billing method of the public IP address of the node.', example='PayByBandwidth'),
        internetMaxBandwidthOut?: long(name='internet_max_bandwidth_out', description='The maximum outbound bandwidth of the public IP address of the node. Unit: Mbit/s. Valid values: 1 to 100.', example='10'),
        keyPair?: string(name='key_pair', description='The name of the key pair. You must set this parameter or the `login_password` parameter.

You must set `key_pair` if the node pool is a managed node pool.', example='pro-nodepool'),
        loginPassword?: string(name='login_password', description='The password for SSH logon. You must set this parameter or the `key_pair` parameter. The password must be 8 to 30 characters in length, and must contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters.

For security purposes, the returned password is encrypted.', example='******'),
        multiAzPolicy?: string(name='multi_az_policy', description='The ECS instance scaling policy for a multi-zone scaling group. Valid values:

*   `PRIORITY`: the scaling group is scaled based on the VSwitchIds.N parameter. If an ECS instance cannot be created in the zone where the vSwitch that has the highest priority resides, Auto Scaling creates the ECS instance in the zone where the vSwitch that has the next highest priority resides.

*   `COST_OPTIMIZED`: ECS instances are created based on the vCPU unit price in ascending order. Preemptible instances are preferably created when preemptible instance types are specified in the scaling configuration. You can set the `CompensateWithOnDemand` parameter to specify whether to automatically create pay-as-you-go instances when preemptible instances cannot be created due to insufficient resources.

    **

    **Note**The `COST_OPTIMIZED` setting takes effect only when multiple instance types are specified or at least one instance type is specified for preemptible instances.

*   `BALANCE`: ECS instances are evenly distributed across multiple zones specified by the scaling group. If ECS instances become imbalanced among multiple zones due to insufficient inventory, you can call the `RebalanceInstances` operation of Auto Scaling to balance the instance distribution among zones. For more information, see [RebalanceInstances](~~71516~~).', example='COST_OPTIMIZED'),
        onDemandBaseCapacity?: long(name='on_demand_base_capacity', description='The minimum number of pay-as-you-go instances that must be kept in the scaling group. Valid values: 0 to 1000. If the number of pay-as-you-go instances is less than the value of this parameter, Auto Scaling preferably creates pay-as-you-go instances.', example='0'),
        onDemandPercentageAboveBaseCapacity?: long(name='on_demand_percentage_above_base_capacity', description='The percentage of pay-as-you-go instances among the extra instances that exceed the number specified by `on_demand_base_capacity`. Valid values: 0 to 100.', example='20'),
        period?: long(name='period', description='The subscription duration of worker nodes. This parameter takes effect and is required only when `instance_charge_type` is set to `PrePaid`.

If `PeriodUnit=Month` is specified, the valid values are 1, 2, 3, 6, 12, 24, 36, 48, and 60.', example='1'),
        periodUnit?: string(name='period_unit', description='The billing cycle of the nodes. This parameter takes effect only when `instance_charge_type` is set to `PrePaid`.

Valid value: `Month`.', example='Month'),
        platform?: string(name='platform', description='The release version of the operating system. Valid values:

*   `CentOS`
*   `AliyunLinux`
*   `Windows`
*   `WindowsCore`', example='AliyunLinux'),
        privatePoolOptions?: {
          id?: string(name='id', description='The ID of the private node pool. The ID of a private node pool is the same as the ID of the elasticity assurance or capacity reservation for which the private node pool is generated.', example='eap-bp67acfmxazb4****'),
          matchCriteria?: string(name='match_criteria', description='The type of private node pool. This parameter specifies the type of private node pool that you want to use to create instances. A private node pool is generated when an elasticity assurance or a capacity reservation service takes effect. The system selects a private node pool to launch instances. Valid values:

*   `Open`: open private pool. The system selects an open private node pool to launch instances. If no matching open private node pool is available, the resources in the public node pool are used.
*   `Target`: specific private pool. The system uses the resources of the specified private node pool to launch instances. If the specified private node pool is unavailable, instances cannot be launched.
*   `None`: no private node pool is used. The resources of private node pools are not used to launch the instances.', example='Open'),
        }(name='private_pool_options', description='The private node pool options.'),
        ramPolicy?: string(name='ram_policy', description='The name of the worker Resource Access Management (RAM) role. The RAM role is assigned to the worker nodes of the cluster to allow the worker nodes to manage ECS instances.', example='KubernetesWorkerRole-021dc54f-929b-437a-8ae0-34c24d3e****'),
        rdsInstances?: [ string ](name='rds_instances', description='After you specify the list of RDS instances, the ECS instances in the cluster are automatically added to the whitelist of the RDS instances.'),
        scalingGroupId?: string(name='scaling_group_id', description='The ID of the scaling group.', example='asg-2ze8n5qw4atggut8****'),
        scalingPolicy?: string(name='scaling_policy', description='The scaling mode of the scaling group. Valid values:

*   `release`: the standard mode. ECS instances are created and released based on resource usage.
*   `recycle`: the swift mode. ECS instances are created, stopped, or started during scaling events. This reduces the time required for the next scale-out event. When the instance is stopped, you are charged only for the storage service. This does not apply to ECS instances that are attached with local disks.', example='release'),
        securityGroupId?: string(name='security_group_id', description='The ID of the security group to which the node pool is added. If the node pool is added to multiple security groups, the first ID in the value of `security_group_ids` is returned.', example='sg-2ze1iuk12m2sb4c4****'),
        securityGroupIds?: [ string ](name='security_group_ids', description='The IDs of the security groups to which the node pool is added.'),
        spotInstancePools?: long(name='spot_instance_pools', description='The number of instance types that are available for creating preemptible instances. Auto Scaling creates preemptible instances of multiple instance types that are available at the lowest cost. Valid values: 1 to 10.', example='5'),
        spotInstanceRemedy?: boolean(name='spot_instance_remedy', description='Indicates whether preemptible instances are supplemented when the number of preemptible instances drops below the specified minimum number. If this parameter is set to true, when the scaling group receives a system message that a preemptible instance is to be reclaimed, the scaling group attempts to create a new instance to replace this instance. Valid values: Valid values:

*   `true`: Supplementation of preemptible instances is enabled.
*   `false`: Supplementation of preemptible instances is disabled.', example='false'),
        spotPriceLimit?: [ 
          {
            instanceType?: string(name='instance_type', description='The instance type of preemptible instances.', example='ecs.c6.large'),
            priceLimit?: string(name='price_limit', description='The price limit of a single preemptible instance.

Unit: USD/hour.', example='0.39'),
          }
        ](name='spot_price_limit', description='The bid configurations of preemptible instances.'),
        spotStrategy?: string(name='spot_strategy', description='The type of preemptible instance. Valid values:

*   NoSpot: a non-preemptible instance.
*   SpotWithPriceLimit: a preemptible instance that is configured with the highest bid price.
*   SpotAsPriceGo: a preemptible instance for which the system automatically bids based on the current market price.

For more information, see [Preemptible instances](~~157759~~).', example='NoSpot'),
        systemDiskCategory?: string(name='system_disk_category', description='The type of system disk. Valid values:

*   `cloud_efficiency`: ultra disk.
*   `cloud_ssd`: standard SSD.', example='cloud_efficiency'),
        systemDiskPerformanceLevel?: string(name='system_disk_performance_level', description='The performance level (PL) of the system disk that you want to use for the node. This parameter takes effect only for enhanced SSDs (ESSDs).', example='PL1'),
        systemDiskSize?: long(name='system_disk_size', description='The system disk size of a node. Unit: GiB.

Valid values: 20 to 500.', example='120'),
        tags?: [
          Tag
        ](name='tags', description='The labels that you want to add to the ECS instances.

A key must be unique and cannot exceed 128 characters in length. Neither keys nor values can start with aliyun or acs:. Neither keys nor values can contain https:// or http://.'),
        vswitchIds?: [ string ](name='vswitch_ids', description='The IDs of vSwitches. You can specify 1 to 20 vSwitches.

> We recommend that you select vSwitches in different zones to ensure high availability.'),
      }(name='scaling_group', description='The configuration of the scaling group.'),
      status?: {
        failedNodes?: long(name='failed_nodes', description='The number of failed nodes.', example='0'),
        healthyNodes?: long(name='healthy_nodes', description='The number of healthy nodes.', example='3'),
        initialNodes?: long(name='initial_nodes', description='The number of nodes that are being created.', example='0'),
        offlineNodes?: long(name='offline_nodes', description='The number of offline nodes.', example='0'),
        removingNodes?: long(name='removing_nodes', description='The number of nodes that are being removed.', example='0'),
        servingNodes?: long(name='serving_nodes', description='The number of running nodes.', example='3'),
        state?: string(name='state', description='The status of the node pool. Valid values:

*   `active`: The node pool is active.
*   `scaling`: The node pool is being scaled.
*   `removing`: Nodes are being removed from the node pool.
*   `deleting`: The node pool is being deleted.
*   `updating`: The node pool is being updated.', example='active'),
        totalNodes?: long(name='total_nodes', description='The total number of nodes in the node pool.', example='3'),
      }(name='status', description='The status details about the node pool.'),
      teeConfig?: {
        teeEnable?: boolean(name='tee_enable', description='Indicates whether confidential computing is enabled. Valid values:

*   `true`: Confidential computing is enabled.
*   `false`: Confidential computing is disabled.', example='false'),
      }(name='tee_config', description='The configuration of confidential computing.'),
    }
  ](name='nodepools', description='The list of the returned node pools.'),
}

model DescribeClusterNodePoolsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClusterNodePoolsResponseBody(name='body'),
}

async function describeClusterNodePoolsWithOptions(ClusterId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeClusterNodePoolsResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusterNodePools',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/nodepools`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClusterNodePools(ClusterId: string): DescribeClusterNodePoolsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeClusterNodePoolsWithOptions(ClusterId, headers, runtime);
}

model DescribeClusterNodesRequest {
  instanceIds?: string(name='instanceIds', description='The IDs of the nodes that you want to query. Separate multiple node IDs with commas (,).', example='"i-bp11xjhwkj8k966u****,i-bp1dmhc2bu5igkyq****"'),
  nodepoolId?: string(name='nodepool_id', description='The node pool ID.', example='np****'),
  pageNumber?: string(name='pageNumber', description='The page number.

Default value: 1.', example='1'),
  pageSize?: string(name='pageSize', description='The number of entries per page. Valid values: 1 to 100.

Default value: 10.', example='10'),
  state?: string(name='state', description='The node state that you want to use to filter nodes. Valid values:

*   `all`: query nodes in the following four states.
*   `running`: query nodes in the running state.
*   `removing`: query nodes that are being removed.
*   `initial`: query nodes that are being initialized.
*   `failed`: query nodes that fail to be created.

Default value: `all`.', example='running'),
}

model DescribeClusterNodesResponseBody = {
  nodes?: [ 
    {
      creationTime?: string(name='creation_time', description='The time when the node was created.', example='2020-08-25T11:25:35+08:00'),
      errorMessage?: string(name='error_message', description='The error message generated when the node was created.', example='error***'),
      expiredTime?: string(name='expired_time', description='The expiration date of the node.', example='2099-12-31T23:59:00+08:00'),
      hostName?: string(name='host_name', description='The name of the host.', example='iZ2vcckdmxp7u0urj2k****'),
      imageId?: string(name='image_id', description='The ID of the system image that is used by the node.', example='aliyun_2_1903_x64_20G_alibase_20200529.vhd'),
      instanceChargeType?: string(name='instance_charge_type', description='The billing method of the node. Valid values:

*   `PrePaid`: the subscription billing method. If the value is PrePaid, make sure that you have a sufficient balance or credit in your account. Otherwise, an `InvalidPayMethod` error is returned.
*   `PostPaid`: the pay-as-you-go billing method.', example='PostPaid'),
      instanceId?: string(name='instance_id', description='The ID of the instance.', example='i-2vcckdmxp7u0urj2****'),
      instanceName?: string(name='instance_name', description='The name of the instance on which the node is deployed.', example='worker-k8s-for-cs-c5cdf7e3938bc4f8eb0e44b21a80f****'),
      instanceRole?: string(name='instance_role', description='The role of the node. Valid values:

*   Master: master node
*   Worker: worker node', example='Worker'),
      instanceStatus?: string(name='instance_status', description='The status of the node.', example='Running'),
      instanceType?: string(name='instance_type', description='The type of the node.', example='ecs.c5.xlarge'),
      instanceTypeFamily?: string(name='instance_type_family', description='The ECS instance family of the node.', example='ecs.c5'),
      ipAddress?: [ string ](name='ip_address', description='The IP address of the node.'),
      isAliyunNode?: boolean(name='is_aliyun_node', description='Indicates whether the instance on which the node is deployed is provided by Alibaba Cloud. Valid values:

*   `true`: The instance is provided by Alibaba Cloud.
*   `false`: The instance is not provided by Alibaba Cloud.', example='true'),
      nodeName?: string(name='node_name', description='The name of the node. This name is the identifier of the node in the cluster.', example='cn-chengdu.192.168.0.36'),
      nodeStatus?: string(name='node_status', description='Indicates whether the node is ready. Valid values:

*   `Ready`: The node is ready.
*   `NotReady`: The node is not ready.
*   `Unknown`: The status of the node is unknown.
*   `Offline`: The node is offline.', example='Ready'),
      nodepoolId?: string(name='nodepool_id', description='The node pool ID.', example='np0794239424a84eb7a95327369d56****'),
      source?: string(name='source', description='Indicates how the node is initialized. A node can be manually created or created by using Resource Orchestration Service (ROS).', example='ess_attach'),
      spotStrategy?: string(name='spot_strategy', description='The type of preemptible instance. Valid values:

*   NoSpot: a non-preemptible instance.
*   SpotWithPriceLimit: a preemptible instance that is configured with the highest bid price.
*   SpotAsPriceGo: a preemptible instance for which the system automatically bids based on the current market price.', example='NoSpot'),
      state?: string(name='state', description='The status of the node. Valid values:

*   `pending`: The node is being created.
*   `running`: The node is running.
*   `starting`: The node is being started.
*   `stopping`: The node is being stopped.
*   `stopped`: The node is stopped.', example='running'),
    }
  ](name='nodes', description='The details of the nodes in the cluster.'),
  page?: {
    pageNumber?: int32(name='page_number', description='The page number.', example='1'),
    pageSize?: int32(name='page_size', description='The number of entries per page.', example='10'),
    totalCount?: int32(name='total_count', description='The total number of entries returned.', example='5'),
  }(name='page', description='The pagination information.'),
}

model DescribeClusterNodesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClusterNodesResponseBody(name='body'),
}

async function describeClusterNodesWithOptions(ClusterId: string, request: DescribeClusterNodesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeClusterNodesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.instanceIds)) {
    query['instanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.nodepoolId)) {
    query['nodepool_id'] = request.nodepoolId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.state)) {
    query['state'] = request.state;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusterNodes',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/nodes`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClusterNodes(ClusterId: string, request: DescribeClusterNodesRequest): DescribeClusterNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeClusterNodesWithOptions(ClusterId, request, headers, runtime);
}

model DescribeClusterResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: [ 
    {
      clusterId?: string(name='cluster_id', description='The ID of the cluster.', example='cb95aa626a47740afbf6aa099b65****'),
      created?: string(name='created', description='The time when the resource was created.', example='2020-09-11T10:11:54+08:00'),
      instanceId?: string(name='instance_id', description='The ID of the resource.', example='lb-wz9poz4r0ymh8u0uf****'),
      resourceInfo?: string(name='resource_info', description='The information about the resource. For more information about how to query the source information about a resource, see [ListStackResources](~~133836~~).', example='{\\"Id\\":\\"k8s_master_slb\\",\\"Name\\":\\"k8s_master_slb\\",\\"Type\\":\\"ALIYUN::SLB::LoadBalancer\\",\\"Status\\":\\"CREATE_COMPLETE\\",\\"StatusReason\\":\\"state changed\\",\\"Updated\\":\\"2020-05-21T13:25:02\\",\\"PhysicalId\\":\\"lb-wz9poz4r0ymh8u0uf****\\"}'),
      resourceType?: string(name='resource_type', description='The type of resource.', example='ALIYUN::SLB::LoadBalancer'),
      state?: string(name='state', description='The status of the resource. Valid values:

*   `CREATE_COMPLETE`: The resource is created.
*   `CREATE_FAILED`: The resource failed to be created.
*   `CREATE_IN_PROGRESS`: The resource is being created.
*   `DELETE_FAILED`: The resource failed to be deleted.
*   `DELETE_IN_PROGRESS`: The resource is being deleted.
*   `ROLLBACK_COMPLETE`: The resource is rolled back.
*   `ROLLBACK_FAILED`: The resource failed to be rolled back.
*   `ROLLBACK_IN_PROGRESS`: The resource is being rolled back.', example='CREATE_COMPLETE'),
      autoCreate?: long(name='auto_create', description='Indicates whether the resource is created by Container Service for Kubernetes (ACK). Valid values:

*   1: The resource is created by ACK.
*   0: The resource is an existing resource.', example='1'),
      dependencies?: [ 
        {
          clusterId?: string(name='cluster_id'),
          resourceType?: string(name='resource_type'),
          instanceId?: string(name='instance_id'),
        }
      ](name='dependencies'),
    }
  ](name='body'),
}

async function describeClusterResourcesWithOptions(ClusterId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeClusterResourcesResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusterResources',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/resources`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'array',
  };
  return callApi(params, req, runtime);
}

async function describeClusterResources(ClusterId: string): DescribeClusterResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeClusterResourcesWithOptions(ClusterId, headers, runtime);
}

model DescribeClusterTasksRequest {
  pageNumber?: int32(name='page_number'),
  pageSize?: int32(name='page_size'),
}

model DescribeClusterTasksResponseBody = {
  pageInfo?: {
    pageNumber?: long(name='page_number', description='The number of the page returned.', example='1'),
    pageSize?: long(name='page_size', description='The number of entries per page.', example='10'),
    totalCount?: long(name='total_count', description='The total number of entries returned.', example='10'),
  }(name='page_info', description='The pagination information.'),
  requestId?: string(name='requestId', description='The request ID.', example='0527ac9a-c899-4341-a21a-xxxxxxxxx'),
  tasks?: [ 
    {
      created?: string(name='created', description='The time when the task was created.', example='2022-08-03T10:11:33+08:00'),
      error?: {
        code?: string(name='code', description='The error code returned.', example='BadRequest'),
        message?: string(name='message', description='The error message returned.', example='Addon status not match'),
      }(name='error', description='The error returned for the task.'),
      state?: string(name='state', description='The status of the task.', example='success'),
      taskId?: string(name='task_id', description='The task ID.', example='install-addons-c3xxxxxx'),
      taskType?: string(name='task_type', description='The type of task.', example='cluster_addon_install'),
      updated?: string(name='updated', description='The time when the task was updated.', example='2022-08-03T10:12:03.482+08:00'),
    }
  ](name='tasks', description='The information about the tasks.'),
}

model DescribeClusterTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClusterTasksResponseBody(name='body'),
}

async function describeClusterTasksWithOptions(clusterId: string, request: DescribeClusterTasksRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeClusterTasksResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['page_number'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusterTasks',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(clusterId)}/tasks`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClusterTasks(clusterId: string, request: DescribeClusterTasksRequest): DescribeClusterTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeClusterTasksWithOptions(clusterId, request, headers, runtime);
}

model DescribeClusterUserKubeconfigRequest {
  privateIpAddress?: boolean(name='PrivateIpAddress', description='Specifies whether to obtain the kubeconfig file that is used to connect to the cluster over the internal network. Valid values:

*   `true`: obtains the kubeconfig file that is used to connect to the master instance over the internal network.
*   `false`: obtains the kubeconfig file that is used to connect to the master instance over the Internet.

Default value: `false`.', example='true'),
  temporaryDurationMinutes?: long(name='TemporaryDurationMinutes', description='The validity period of a temporary kubeconfig file. Unit: minutes. Valid values: 15 to 4320 (3 days).

>  If you do not specify this parameter, the system specifies a longer validity period. The validity period is returned in the `expiration` parameter.', example='15'),
}

model DescribeClusterUserKubeconfigResponseBody = {
  config?: string(name='config', description='The kubeconfig file of the cluster. For more information about the content of the kubeconfig file, see [Configure cluster credentials](~~86494~~).', example='apiVersion: v1****'),
  expiration?: string(name='expiration', description='The validity period of the kubeconfig file. The value is the UTC time displayed in RFC3339 format.', example='2024-03-10T09:56:17Z'),
}

model DescribeClusterUserKubeconfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClusterUserKubeconfigResponseBody(name='body'),
}

async function describeClusterUserKubeconfigWithOptions(ClusterId: string, request: DescribeClusterUserKubeconfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeClusterUserKubeconfigResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.privateIpAddress)) {
    query['PrivateIpAddress'] = request.privateIpAddress;
  }
  if (!Util.isUnset(request.temporaryDurationMinutes)) {
    query['TemporaryDurationMinutes'] = request.temporaryDurationMinutes;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusterUserKubeconfig',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/k8s/${OpenApiUtil.getEncodeParam(ClusterId)}/user_config`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClusterUserKubeconfig(ClusterId: string, request: DescribeClusterUserKubeconfigRequest): DescribeClusterUserKubeconfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeClusterUserKubeconfigWithOptions(ClusterId, request, headers, runtime);
}

model DescribeClusterV2UserKubeconfigRequest {
  privateIpAddress?: boolean(name='PrivateIpAddress'),
}

model DescribeClusterV2UserKubeconfigResponseBody = {
  config?: string(name='config'),
}

model DescribeClusterV2UserKubeconfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClusterV2UserKubeconfigResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request DescribeClusterV2UserKubeconfigRequest
  * @param headers map
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeClusterV2UserKubeconfigResponse
 */
// Deprecated
async function describeClusterV2UserKubeconfigWithOptions(ClusterId: string, request: DescribeClusterV2UserKubeconfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeClusterV2UserKubeconfigResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.privateIpAddress)) {
    query['PrivateIpAddress'] = request.privateIpAddress;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusterV2UserKubeconfig',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/api/v2/k8s/${OpenApiUtil.getEncodeParam(ClusterId)}/user_config`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request DescribeClusterV2UserKubeconfigRequest
  * @return DescribeClusterV2UserKubeconfigResponse
 */
// Deprecated
async function describeClusterV2UserKubeconfig(ClusterId: string, request: DescribeClusterV2UserKubeconfigRequest): DescribeClusterV2UserKubeconfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeClusterV2UserKubeconfigWithOptions(ClusterId, request, headers, runtime);
}

model DescribeClusterVulsResponseBody = {
  vulRecords?: [ 
    {
      cveList?: [ string ](name='cve_list', description='The CVE list.'),
      necessity?: string(name='necessity', description='The severity level of the vulnerability.

Valid values:

*   nntf

    <!-- -->

    :

    <!-- -->

    low

    <!-- -->

*   later

    <!-- -->

    :

    <!-- -->

    medium

    <!-- -->

*   asap

    <!-- -->

    :

    <!-- -->

    high

    <!-- -->', example='asap'),
      nodeCount?: int32(name='node_count', description='The number of nodes that have the vulnerability.', example='1'),
      nodepoolId?: string(name='nodepool_id', description='The node pool ID.', example='np0156da1082b54fa987e32618dd45f5d3'),
      nodepoolName?: string(name='nodepool_name', description='The name of the node pool.', example='test'),
      vulAliasName?: string(name='vul_alias_name', description='The alias of the vulnerability.', example='CVE-2022-xxxx:rsync Security vulnerabilities'),
      vulName?: string(name='vul_name', description='The name of the vulnerability.', example='oval:com.redhat.rhsa:def:xxxxxxx'),
      vulType?: string(name='vul_type', description='The type of vulnerability.

Valid values:

*   app

    <!-- -->

    :

    <!-- -->

    application vulnerabilities

    <!-- -->

*   sca

    <!-- -->

    :

    <!-- -->

    application vulnerabilities (software component analysis)

    <!-- -->

*   cve

    <!-- -->

    :

    <!-- -->

    Linux vulnerabilities

    <!-- -->

*   cms

    <!-- -->

    :

    <!-- -->

    Web-CMS vulnerabilities

    <!-- -->

*   sys

    <!-- -->

    :

    <!-- -->

    Windows vulnerabilities

    <!-- -->

*   emg

    <!-- -->

    :

    <!-- -->

    emergency vulnerabilities

    <!-- -->', example='cve'),
    }
  ](name='vul_records', description='An array of vulnerabilities.'),
}

model DescribeClusterVulsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClusterVulsResponseBody(name='body'),
}

async function describeClusterVulsWithOptions(clusterId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeClusterVulsResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusterVuls',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(clusterId)}/vuls`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClusterVuls(clusterId: string): DescribeClusterVulsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeClusterVulsWithOptions(clusterId, headers, runtime);
}

model DescribeClustersRequest {
  clusterType?: string(name='clusterType', description='The cluster type.', example='ManagedKubernetes'),
  name?: string(name='name', description='The cluster name based on which the system performs fuzzy searches among the clusters that belong to the current Alibaba Cloud account.', example='test'),
}

model DescribeClustersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: [ 
    {
      clusterId?: string(name='cluster_id'),
      clusterType?: string(name='cluster_type'),
      created?: string(name='created'),
      currentVersion?: string(name='current_version'),
      dataDiskCategory?: string(name='data_disk_category'),
      dataDiskSize?: long(name='data_disk_size'),
      deletionProtection?: boolean(name='deletion_protection'),
      dockerVersion?: string(name='docker_version'),
      externalLoadbalancerId?: string(name='external_loadbalancer_id'),
      initVersion?: string(name='init_version'),
      masterUrl?: string(name='master_url'),
      metaData?: string(name='meta_data'),
      name?: string(name='name'),
      networkMode?: string(name='network_mode'),
      privateZone?: boolean(name='private_zone'),
      profile?: string(name='profile'),
      regionId?: string(name='region_id'),
      resourceGroupId?: string(name='resource_group_id'),
      securityGroupId?: string(name='security_group_id'),
      size?: long(name='size'),
      state?: string(name='state'),
      subnetCidr?: string(name='subnet_cidr'),
      tags?: [ 
        {
          key?: string(name='key'),
          value?: string(name='value'),
        }
      ](name='tags'),
      updated?: string(name='updated'),
      vpcId?: string(name='vpc_id'),
      vswitchCidr?: string(name='vswitch_cidr'),
      vswitchId?: string(name='vswitch_id'),
      workerRamRoleName?: string(name='worker_ram_role_name'),
      zoneId?: string(name='zone_id'),
    }
  ](name='body'),
}

/**
  * @deprecated
  *
  * @param request DescribeClustersRequest
  * @param headers map
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeClustersResponse
 */
// Deprecated
async function describeClustersWithOptions(request: DescribeClustersRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeClustersResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.clusterType)) {
    query['clusterType'] = request.clusterType;
  }
  if (!Util.isUnset(request.name)) {
    query['name'] = request.name;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusters',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'array',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request DescribeClustersRequest
  * @return DescribeClustersResponse
 */
// Deprecated
async function describeClusters(request: DescribeClustersRequest): DescribeClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeClustersWithOptions(request, headers, runtime);
}

model DescribeClustersV1Request {
  clusterId?: string(name='cluster_id'),
  clusterSpec?: string(name='cluster_spec', description='The cluster type, which is available only when the cluster type is set to `ManagedKubernetes`. Valid values:

*   `ack.pro.small`: ACK Pro cluster
*   `ack.standard`: ACK Basic cluster

By default, this parameter is left empty, which means that ACK clusters are not filtered by this parameter.', example='ack.pro.small'),
  clusterType?: string(name='cluster_type', description='The type of cluster. Valid values:

*   `Kubernetes`: ACK dedicated cluster
*   `ManagedKubernetes`: ACK managed cluster, ACK Serverless cluster, or ACK Edge cluster
*   `Ask`: ACK Serverless cluster
*   `ExternalKubernetes`: registered cluster

If you want to query ACK Serverless clusters, specify ManagedKubernetes or Ask based on the value that you specified when you created the ACK Serverless clusters.', example='Kubernetes'),
  name?: string(name='name', description='The cluster name.

The name must be 1 to 63 characters in length, and can contain digits, letters, and hyphens (-). The name cannot start with a hyphen (-).', example='cluster-demo'),
  pageNumber?: long(name='page_number', description='The page number.', example='3'),
  pageSize?: long(name='page_size', description='The number of entries per page.', example='10'),
  profile?: string(name='profile', description='The cluster identifier, which is available only when the cluster type is set to `ManagedKubernetes`. Valid values:

*   `Default`: ACK managed cluster
*   `Serverless`: ACK Serverless cluster
*   `Edge`: ACK Edge cluster

By default, this parameter is left empty, which means that ACK clusters are not filtered by this parameter.', example='Default'),
  regionId?: string(name='region_id', description='The region ID of the clusters. You can use this parameter to query all clusters in the specified region.', example='cn-hangzhou'),
}

model DescribeClustersV1ResponseBody = {
  clusters?: [ 
    {
      clusterId?: string(name='cluster_id', description='The cluster ID.', example='c3fb96524f9274b4495df0f12a6b5****'),
      clusterSpec?: string(name='cluster_spec', description='The type of ACK managed cluster. This parameter is available only for ACK managed clusters. Valid values:

*   `ack.pro.small`: ACK Pro cluster
*   `ack.standard`: ACK Basic cluster', example='ack.standard'),
      clusterType?: string(name='cluster_type', description='The cluster type. Valid values:

*   `Kubernetes`: ACK dedicated cluster
*   `ManagedKubernetes`: ACK managed cluster
*   `Ask`: ACK Serverless cluster
*   `ExternalKubernetes`: registered cluster', example='Kubernetes'),
      created?: string(name='created', description='The time when the cluster was created.', example='2020-08-20T10:51:29+08:00'),
      currentVersion?: string(name='current_version', description='The Kubernetes version of the cluster.', example='1.16.9-aliyun.1'),
      deletionProtection?: boolean(name='deletion_protection', description='Indicates whether deletion protection is enabled for the cluster. If deletion protection is enabled, the cluster cannot be deleted in the ACK console or by calling API operations. Valid values:

*   `true`: Deletion protection is enabled for the cluster. The cluster cannot be deleted in the ACK console or by calling API operations.
*   `false`: Deletion protection is disabled for the cluster. The cluster can be deleted in the ACK console or by calling API operations.', example='true'),
      dockerVersion?: string(name='docker_version', description='The Docker version that is used by the cluster.', example='19.03.5'),
      externalLoadbalancerId?: string(name='external_loadbalancer_id', description='The ID of the Server Load Balancer (SLB) instance that is used for the Ingress of the cluster.

The default SLB specification is slb.s1.small, which belongs to the high-performance instance type.', example='lb-2vcrbmlevo6kjpgch****'),
      initVersion?: string(name='init_version', description='The Kubernetes version of the cluster. The Kubernetes versions supported by ACK are the same as the versions of open source Kubernetes. We recommend that you specify the latest Kubernetes version. If you do not specify this parameter, the latest Kubernetes version is used.

You can create clusters of the latest two Kubernetes versions in the ACK console. You can call a specific ACK API operation to create clusters of other Kubernetes versions. For more information about the Kubernetes versions supported by ACK, see [Release notes for Kubernetes versions](~~185269~~).', example='1.16.9-aliyun.1'),
      maintenanceWindow?: MaintenanceWindow(name='maintenance_window', description='The maintenance window of the cluster. This feature is available only for ACK Pro clusters.'),
      masterUrl?: string(name='master_url', description='The endpoint of the cluster API server, including an internal endpoint and a public endpoint.', example='{\\"api_server_endpoint\\":\\"\\",\\"intranet_api_server_endpoint\\":\\"https://192.168.0.251:6443\\"}'),
      metaData?: string(name='meta_data', description='The metadata of the cluster.', example='{\\"Addons\\":[{\\"config\\":***}'),
      name?: string(name='name', description='The name of the cluster.

The name must be 1 to 63 characters in length, and can contain digits, letters, and hyphens (-). The name cannot start with a hyphen (-).', example='cluster-demo'),
      networkMode?: string(name='network_mode', description='The network mode of the cluster. Valid values:

*   `classic`: classic network
*   `vpc`: virtual private cloud (VPC)
*   `overlay`: overlay network
*   `calico`: network powered by Calico', example='vpc'),
      nextVersion?: string(name='next_version', description='The Kubernetes version to which the cluster can be updated.', example='1.18.8-aliyun.1'),
      privateZone?: boolean(name='private_zone', description='Indicates whether Alibaba Cloud DNS PrivateZone is enabled. Valid values:

*   `true`: Alibaba Cloud DNS PrivateZone is enabled.
*   `false`: Alibaba Cloud DNS PrivateZone is disabled.', example='false'),
      profile?: string(name='profile', description='The cluster identifier. Valid values:

*   `Edge`: ACK Edge cluster
*   `Default`: non-ACK Edge cluster', example='Default'),
      regionId?: string(name='region_id', description='The region ID of the associated cluster.', example='cn-beijing'),
      resourceGroupId?: string(name='resource_group_id', description='The ID of the resource group to which the cluster belongs.', example='rg-acfmyvw3wjm****'),
      securityGroupId?: string(name='security_group_id', description='The ID of the security group to which the cluster belongs.', example='sg-2vcgwsrwgt5mp0yi****'),
      size?: long(name='size', description='The number of nodes in the cluster, including master nodes and worker nodes.', example='5'),
      state?: string(name='state', description='The status of the cluster. Valid values:

*   `initial`: The cluster is being created.
*   `failed`: The cluster failed to be created.
*   `running`: The cluster is running.
*   `updating`: The cluster is being updated.
*   `updating_failed`: The cluster failed to be updated.
*   `scaling`: The cluster is being scaled.
*   `stopped`: The cluster is stopped.
*   `deleting`: The cluster is being deleted.
*   `deleted`: The cluster is deleted.
*   `delete_failed`: The cluster failed to be deleted.', example='running'),
      subnetCidr?: string(name='subnet_cidr', description='The pod CIDR block. It must be a valid and private CIDR block, and must be one of the following CIDR blocks or their subnets:

*   10.0.0.0/8
*   172.16-31.0.0/12-16
*   192.168.0.0/16

The CIDR block of pods cannot overlap with the CIDR block of the VPC in which the cluster is deployed and the CIDR blocks of existing clusters in the VPC. You cannot modify the pod CIDR block after the cluster is created.

For more information, see [Plan CIDR blocks for an ACK cluster](~~86500~~).', example='172.21.0.0/16'),
      tags?: [
        Tag
      ](name='tags', description='The labels of the cluster.'),
      updated?: string(name='updated', description='The time when the cluster was updated.', example='2020-09-16T11:09:55+08:00'),
      vpcId?: string(name='vpc_id', description='The ID of the VPC where the cluster is deployed. This parameter is required when you create a cluster.', example='vpc-2vcg932hsxsxuqbgl****'),
      vswitchId?: string(name='vswitch_id', description='The IDs of the vSwitches. You can select one to three vSwitches when you create a cluster. We recommend that you select vSwitches in different zones to ensure high availability.', example='vsw-2vc41xuumx5z2rdma****,vsw-2vc41xuumx5z2rdma****'),
      workerRamRoleName?: string(name='worker_ram_role_name', description='The name of the worker Resource Access Management (RAM) role. The RAM role is assigned to the worker nodes of the cluster to allow the worker nodes to manage ECS instances.', example='KubernetesWorkerRole-ec87d15b-edca-4302-933f-c8a16bf0****'),
      zoneId?: string(name='zone_id', description='The zone ID.', example='cn-beijing-b'),
    }
  ](name='clusters', description='The details of the clusters.'),
  pageInfo?: {
    pageNumber?: int32(name='page_number', description='The page number.', example='3'),
    pageSize?: int32(name='page_size', description='The number of entries per page.', example='20'),
    totalCount?: int32(name='total_count', description='The total number of entries returned.', example='50'),
  }(name='page_info', description='The pagination information.'),
}

model DescribeClustersV1Response = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClustersV1ResponseBody(name='body'),
}

async function describeClustersV1WithOptions(request: DescribeClustersV1Request, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeClustersV1Response {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.clusterId)) {
    query['cluster_id'] = request.clusterId;
  }
  if (!Util.isUnset(request.clusterSpec)) {
    query['cluster_spec'] = request.clusterSpec;
  }
  if (!Util.isUnset(request.clusterType)) {
    query['cluster_type'] = request.clusterType;
  }
  if (!Util.isUnset(request.name)) {
    query['name'] = request.name;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['page_number'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.profile)) {
    query['profile'] = request.profile;
  }
  if (!Util.isUnset(request.regionId)) {
    query['region_id'] = request.regionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClustersV1',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/api/v1/clusters`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClustersV1(request: DescribeClustersV1Request): DescribeClustersV1Response {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeClustersV1WithOptions(request, headers, runtime);
}

model DescribeEdgeMachineActiveProcessResponseBody = {
  logs?: string(name='logs', description='The activation progress list.', example='[{\\"content\\":\\"步骤 \\"颁发激活凭证\\" 执行开始\\",\\"id\\":0,\\"level\\":3,\\"timestamp\\":1625994913000},{\\"content\\":\\"步骤 \\"颁发激活凭证\\" 执行成功\\",\\"id\\":1,\\"level\\":3,\\"timestamp\\":1625994914000},{\\"content\\":\\"步骤 \\"初始化主机配置\\" 执行开始\\",\\"id\\":2,\\"level\\":3,\\"timestamp\\":1625994975000},{\\"content\\":\\"步骤 \\"初始化主机配置\\" 执行成功\\",\\"id\\":3,\\"level\\":3,\\"timestamp\\":1625994975000}]'),
  progress?: long(name='progress', description='The activation progress.', example='100'),
  requestId?: string(name='request_id', description='The request ID.', example='b62796a8-c5a6-4d3f-beb2-7650e4309cb1'),
  state?: string(name='state', description='The activation status.', example='ACTIVATED'),
  step?: string(name='step', description='The activation step.', example='步骤 \\"初始化主机配置\\" 执行成功'),
}

model DescribeEdgeMachineActiveProcessResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEdgeMachineActiveProcessResponseBody(name='body'),
}

async function describeEdgeMachineActiveProcessWithOptions(edgeMachineid: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeEdgeMachineActiveProcessResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeEdgeMachineActiveProcess',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/edge_machines/%5Bedge_machineid%5D/activeprocess`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEdgeMachineActiveProcess(edgeMachineid: string): DescribeEdgeMachineActiveProcessResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeEdgeMachineActiveProcessWithOptions(edgeMachineid, headers, runtime);
}

model DescribeEdgeMachineModelsResponseBody = {
  models?: [ 
    {
      cpu?: int32(name='cpu', description='The number of vCores.', example='6'),
      cpuArch?: string(name='cpu_arch', description='The CPU architecture.', example='x86_64/arm64'),
      created?: string(name='created', description='The time when the cloud-native box was created.', example='2021-07-07T20:44:00+08:00'),
      description?: string(name='description', description='The description of the cloud-native box.', example='B010'),
      manageRuntime?: int32(name='manage_runtime', description='Indicates whether the cloud-native box model manages the Docker runtime.', example='0/1'),
      memory?: int32(name='memory', description='The memory. Unit: GB.', example='8'),
      model?: string(name='model', description='The model of the cloud-native box.', example='ACK-V-B010'),
      modelId?: string(name='model_id', description='The ID of the cloud-native box.', example='c34cc753-8908-4739-bd10-ebd922a4****'),
    }
  ](name='models', description='The cloud-native box models.'),
}

model DescribeEdgeMachineModelsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEdgeMachineModelsResponseBody(name='body'),
}

async function describeEdgeMachineModelsWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): DescribeEdgeMachineModelsResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeEdgeMachineModels',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/edge_machines/models`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEdgeMachineModels(): DescribeEdgeMachineModelsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeEdgeMachineModelsWithOptions(headers, runtime);
}

model DescribeEdgeMachineTunnelConfigDetailResponseBody = {
  deviceName?: string(name='device_name', description='The device name.', example='TEST0621N0FF****'),
  model?: string(name='model', description='The model of the cloud-native box.', example='ACK-A-S001'),
  productKey?: string(name='product_key', description='Product Key', example='a11rXul****'),
  requestId?: string(name='request_id', description='Request ID', example='bfd12953-31cb-42f1-8a36-7b80ec345094'),
  sn?: string(name='sn', description='The serial number of the cloud-native box.', example='Q2CB5XZAFBFG****'),
  token?: string(name='token', description='Token', example='abcd****'),
  tunnelEndpoint?: string(name='tunnel_endpoint', description='The tunnel endpoint.', example='wss://frontend-iotx-r-debug.aliyun-inc.test'),
}

model DescribeEdgeMachineTunnelConfigDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEdgeMachineTunnelConfigDetailResponseBody(name='body'),
}

async function describeEdgeMachineTunnelConfigDetailWithOptions(edgeMachineid: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeEdgeMachineTunnelConfigDetailResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeEdgeMachineTunnelConfigDetail',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/edge_machines/%5Bedge_machineid%5D/tunnelconfig`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEdgeMachineTunnelConfigDetail(edgeMachineid: string): DescribeEdgeMachineTunnelConfigDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeEdgeMachineTunnelConfigDetailWithOptions(edgeMachineid, headers, runtime);
}

model DescribeEdgeMachinesRequest {
  hostname?: string(name='hostname', description='The `hostname` of the cloud-native box.', example='ack-v-b010-ssdfw****'),
  lifeState?: string(name='life_state', description='The lifecycle status.', example='activated/waitOnline/deleting'),
  model?: string(name='model', description='The type of cloud-native box.', example='ACK-V-B010'),
  onlineState?: string(name='online_state', description='The status of the cloud-native box. Valid values:

*   `offline`
*   `online`', example='offline/online'),
  pageNumber?: long(name='page_number', description='The page number.', example='1'),
  pageSize?: long(name='page_size', description='The number of entries per page.', example='10'),
}

model DescribeEdgeMachinesResponseBody = {
  edgeMachines?: [ 
    {
      activeTime?: string(name='active_time', description='The time when the cloud-native box was activated.', example='2021-07-19T16:07:48+08:00'),
      created?: string(name='created', description='The time when the cloud-native box was created.', example='2021-07-07T20:44:00+08:00'),
      edgeMachineId?: string(name='edge_machine_id', description='The device ID.', example='c61083909b13f4a95b8554bda9577****'),
      hostname?: string(name='hostname', description='The `hostname` of the cloud-native box.', example='ack-v-b010-ssdfw****'),
      lifeState?: string(name='life_state', description='The lifecycle of the cloud-native box.', example='activated'),
      model?: string(name='model', description='The model of the cloud-native box.', example='ACK-V-B010'),
      name?: string(name='name', description='The machine name.', example='ack-v-b010-ssdfw****'),
      onlineState?: string(name='online_state', description='The status of the cloud-native box.', example='online'),
      sn?: string(name='sn', description='The serial number.', example='ACK9GBL31SXX****'),
      updated?: string(name='updated', description='The time when the cloud-native box was last updated.', example='2021-07-07T20:44:00+08:00'),
    }
  ](name='edge_machines', description='The list of cloud-native boxes.'),
  pageInfo?: {
    pageNumber?: int32(name='page_number', description='The page number.

Default value: 1.', example='1'),
    pageSize?: int32(name='page_size', description='The number of entries per page.

Default value: 10.', example='10'),
    totalCount?: int32(name='total_count', description='The total number of pages returned.', example='1'),
  }(name='page_info', description='The paging information.'),
}

model DescribeEdgeMachinesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEdgeMachinesResponseBody(name='body'),
}

async function describeEdgeMachinesWithOptions(request: DescribeEdgeMachinesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeEdgeMachinesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.hostname)) {
    query['hostname'] = request.hostname;
  }
  if (!Util.isUnset(request.lifeState)) {
    query['life_state'] = request.lifeState;
  }
  if (!Util.isUnset(request.model)) {
    query['model'] = request.model;
  }
  if (!Util.isUnset(request.onlineState)) {
    query['online_state'] = request.onlineState;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['page_number'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEdgeMachines',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/edge_machines`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEdgeMachines(request: DescribeEdgeMachinesRequest): DescribeEdgeMachinesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeEdgeMachinesWithOptions(request, headers, runtime);
}

model DescribeEventsRequest {
  clusterId?: string(name='cluster_id', description='The cluster ID.', example='cf62854ac2130470897be7a27ed1f****'),
  pageNumber?: long(name='page_number', description='The page number.', example='1'),
  pageSize?: long(name='page_size', description='The number of entries per page.', example='50'),
  type?: string(name='type', description='The event type. Valid values:

*   `cluster_create`: cluster creation.
*   `cluster_scaleout`: cluster scale-out.
*   `cluster_attach`: node addition.
*   `cluster_delete`: cluster deletion.
*   `cluster_upgrade`: cluster upgrades.
*   `cluster_migrate`: cluster migration.
*   `cluster_node_delete`: node removal.
*   `cluster_node_drain`: node draining.
*   `cluster_modify`: cluster modifications.
*   `cluster_configuration_modify`: modifications of control plane configurations.
*   `cluster_addon_install`: component installation.
*   `cluster_addon_upgrade`: component updates.
*   `cluster_addon_uninstall`: component uninstallation.
*   `runtime_upgrade`: runtime updates.
*   `nodepool_upgrade`: node pool upgrades.
*   `nodepool_update`: node pool updates.', example='nodepool_upgrade'),
}

model DescribeEventsResponseBody = {
  events?: [ 
    {
      clusterId?: string(name='cluster_id', description='The ID of the cluster.', example='cluster-id'),
      data?: {
        level?: string(name='level', description='The severity level of the event.', example='info'),
        message?: string(name='message', description='The details of the event.', example='Start to upgrade NodePool nodePool/nodePool-A'),
        reason?: string(name='reason', description='The status of the event.', example='Started'),
      }(name='data', description='The description of the event.'),
      eventId?: string(name='event_id', description='The event ID.', example='A234-1234-1234'),
      source?: string(name='source', description='The source of the event.', example='/clusters/cf62854ac2130470897be7a27ed1f****/nodepools'),
      subject?: string(name='subject', description='The subject of the event.', example='nodePool-id'),
      time?: string(name='time', description='The time when the event started.', example='2022-11-23T20:48:01+08:00'),
      type?: string(name='type', description='The event type. Valid values:

*   `cluster_create`: cluster creation.
*   `cluster_scaleout`: cluster scale-out.
*   `cluster_attach`: node addition.
*   `cluster_delete`: cluster deletion.
*   `cluster_upgrade`: cluster upgrades.
*   `cluster_migrate`: cluster migration.
*   `cluster_node_delete`: node removal.
*   `cluster_node_drain`: node draining.
*   `cluster_modify`: cluster modifications.
*   `cluster_configuration_modify`: modifications of control plane configurations.
*   `cluster_addon_install`: component installation.
*   `cluster_addon_upgrade`: component updates.
*   `cluster_addon_uninstall`: component uninstallation.
*   `runtime_upgrade`: runtime updates.
*   `nodepool_upgrade`: node pool upgrades.
*   `nodepool_update`: node pool updates.', example='nodepool_upgrade'),
    }
  ](name='events', description='The details of the event.'),
  pageInfo?: {
    pageNumber?: long(name='page_number', description='The page number.', example='1'),
    pageSize?: long(name='page_size', description='The number of entries per page.', example='50'),
    totalCount?: long(name='total_count', description='The total number of entries returned.', example='3'),
  }(name='page_info', description='The pagination information.'),
}

model DescribeEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEventsResponseBody(name='body'),
}

async function describeEventsWithOptions(request: DescribeEventsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeEventsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.clusterId)) {
    query['cluster_id'] = request.clusterId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['page_number'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.type)) {
    query['type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEvents',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/events`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEvents(request: DescribeEventsRequest): DescribeEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeEventsWithOptions(request, headers, runtime);
}

model DescribeExternalAgentRequest {
  agentMode?: string(name='AgentMode', description='The agent mode.', example='admin'),
  privateIpAddress?: string(name='PrivateIpAddress', description='Specifies whether to obtain the credentials that are used to access the cluster over the internal network.

*   `true`: obtains the credentials that are used to access the cluster over the internal network.
*   `false`: obtains the credentials that are used to access the cluster over the Internet.

Default value: `false`.', example='true'),
}

model DescribeExternalAgentResponseBody = {
  config?: string(name='config', description='The agent configurations in the YAML format.', example='apiVersion: v1****'),
}

model DescribeExternalAgentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeExternalAgentResponseBody(name='body'),
}

/**
  * For more information, see [Register an external Kubernetes cluster](~~121053~~).
  *
  * @param request DescribeExternalAgentRequest
  * @param headers map
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeExternalAgentResponse
 */
async function describeExternalAgentWithOptions(ClusterId: string, request: DescribeExternalAgentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeExternalAgentResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.agentMode)) {
    query['AgentMode'] = request.agentMode;
  }
  if (!Util.isUnset(request.privateIpAddress)) {
    query['PrivateIpAddress'] = request.privateIpAddress;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeExternalAgent',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/k8s/${OpenApiUtil.getEncodeParam(ClusterId)}/external/agent/deployment`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * For more information, see [Register an external Kubernetes cluster](~~121053~~).
  *
  * @param request DescribeExternalAgentRequest
  * @return DescribeExternalAgentResponse
 */
async function describeExternalAgent(ClusterId: string, request: DescribeExternalAgentRequest): DescribeExternalAgentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeExternalAgentWithOptions(ClusterId, request, headers, runtime);
}

model DescribeKubernetesVersionMetadataRequest {
  clusterType?: string(name='ClusterType', description='The cluster type that you want to use. Valid values:

*   `Kubernetes`: ACK dedicated cluster
*   `ManagedKubernetes`: ACK managed cluster
*   `ExternalKubernetes`: registered cluster', example='Kubernetes'),
  kubernetesVersion?: string(name='KubernetesVersion', description='The Kubernetes version of the cluster. The Kubernetes versions supported by ACK are the same as the Kubernetes versions supported by open source Kubernetes. We recommend that you specify the latest Kubernetes version. If you do not set this parameter, the latest Kubernetes version is used.

You can create ACK clusters of the latest two Kubernetes versions in the ACK console. You can call the specific ACK API operation to create clusters of other Kubernetes versions. For more information about the Kubernetes versions supported by ACK, see [Release notes for Kubernetes versions](~~185269~~).', example='1.16.9-aliyun.1'),
  mode?: string(name='Mode', description='The query mode. Valid values:

*   `supported`: queries all supported versions.
*   `creatable`: queries only versions that allow you to create clusters.

If you specify `KubernetesVersion`, this parameter does not take effect.

Default value: creatable.', example='supported'),
  profile?: string(name='Profile', description='The scenario where clusters are used. Valid values:

*   `Default`: non-edge computing scenarios
*   `Edge`: edge computing scenarios
*   `Serverless`: serverless scenarios.

Default value: `Default`.', example='Default'),
  region?: string(name='Region', description='The region ID of the cluster.', example='cn-beijing'),
  runtime?: string(name='runtime', description='The container runtime type that you want to use. You can specify a runtime type to query only OS images that support the runtime type. Valid values:

*   `docker`: Docker
*   `containerd`: containerd
*   `Sandboxed-Container.runv`: Sandboxed-Container

If you specify a runtime type, only the OS images that support the specified runtime type are returned.

Otherwise, all OS images are returned.', example='docker'),
}

model DescribeKubernetesVersionMetadataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: [ 
    {
      capabilities?: map[string]any(name='capabilities', description='Features of the queried Kubernetes version.'),
      images?: [ 
        {
          imageId?: string(name='image_id', description='The image ID.', example='centos_7_7_x64_20G_alibase_20200426.vhd'),
          imageName?: string(name='image_name', description='The image name.', example='CentOS 7.7'),
          platform?: string(name='platform', description='The OS platform. Valid values:

*   `AliyunLinux`
*   `CentOS`
*   `Windows`
*   `WindowsCore`', example='CentOS'),
          osVersion?: string(name='os_version', description='The version of the image.', example='7.7'),
          imageType?: string(name='image_type', description='The type of OS distribution that you want to use. To specify the node OS, we recommend that you use this parameter. Valid values:

*   `CentOS`
*   `AliyunLinux`
*   `AliyunLinux Qboot`
*   `AliyunLinuxUEFI`
*   `AliyunLinux3`
*   `Windows`
*   `WindowsCore`
*   `AliyunLinux3Arm64`
*   `ContainerOS`', example='centos_7_7_20'),
          osType?: string(name='os_type', description='The type of operating system. Examples:

*   `Windows`
*   `Linux`', example='Linux'),
          imageCategory?: string(name='image_category', description='The type of image. Valid values:

*   `system`: public image
*   `self`: custom image
*   `others`: shared image from other Alibaba Cloud accounts
*   `marketplace`: image from the marketplace', example='system'),
          architecture?: string(name='architecture', description='The architecture of the image.', example='x86_64'),
        }
      ](name='images', description='The OS images that are returned.'),
      metaData?: map[string]any(name='meta_data', description='The metadata of the Kubernetes version.'),
      runtimes?: [
        Runtime
      ](name='runtimes', description='Details of the supported container runtimes.'),
      version?: string(name='version', description='The Kubernetes version that is supported by ACK. For more information, see [Release notes for Kubernetes versions](~~185269~~).', example='1.16.9-aliyun.1'),
      releaseDate?: string(name='release_date', description='The release date of the Kubernetes version.', example='2023-04-30T00:00:00Z'),
      expirationDate?: string(name='expiration_date', description='The expiration date of the Kubernetes version.', example='2025-04-30T00:00:00Z'),
      creatable?: boolean(name='creatable', description='Indicates whether you can create clusters that run the Kubernetes version.', example='true'),
    }
  ](name='body'),
}

async function describeKubernetesVersionMetadataWithOptions(request: DescribeKubernetesVersionMetadataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeKubernetesVersionMetadataResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.clusterType)) {
    query['ClusterType'] = request.clusterType;
  }
  if (!Util.isUnset(request.kubernetesVersion)) {
    query['KubernetesVersion'] = request.kubernetesVersion;
  }
  if (!Util.isUnset(request.mode)) {
    query['Mode'] = request.mode;
  }
  if (!Util.isUnset(request.profile)) {
    query['Profile'] = request.profile;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.runtime)) {
    query['runtime'] = request.runtime;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeKubernetesVersionMetadata',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/api/v1/metadata/versions`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'array',
  };
  return callApi(params, req, runtime);
}

async function describeKubernetesVersionMetadata(request: DescribeKubernetesVersionMetadataRequest): DescribeKubernetesVersionMetadataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeKubernetesVersionMetadataWithOptions(request, headers, runtime);
}

model DescribeNodePoolVulsRequest {
  necessity?: string(name='necessity'),
}

model DescribeNodePoolVulsResponseBody = {
  vulRecords?: [ 
    {
      instanceId?: string(name='instance_id', example='i-t4n2qolb0wtzt0pz****'),
      nodeName?: string(name='node_name'),
      vulList?: [ 
        {
          aliasName?: string(name='alias_name', example='RHSA-2019:3197-Important: sudo security update'),
          cveList?: [ string ](name='cve_list'),
          name?: string(name='name', example='oval:com.redhat.rhsa:def:20193197'),
          necessity?: string(name='necessity', example='asap'),
        }
      ](name='vul_list'),
    }
  ](name='vul_records'),
  vulsFixServicePurchased?: boolean(name='vuls_fix_service_purchased', example='false'),
}

model DescribeNodePoolVulsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeNodePoolVulsResponseBody(name='body'),
}

async function describeNodePoolVulsWithOptions(clusterId: string, nodepoolId: string, request: DescribeNodePoolVulsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeNodePoolVulsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.necessity)) {
    query['necessity'] = request.necessity;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeNodePoolVuls',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(clusterId)}/nodepools/${OpenApiUtil.getEncodeParam(nodepoolId)}/vuls`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeNodePoolVuls(clusterId: string, nodepoolId: string, request: DescribeNodePoolVulsRequest): DescribeNodePoolVulsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeNodePoolVulsWithOptions(clusterId, nodepoolId, request, headers, runtime);
}

model DescribePoliciesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: object(name='body'),
}

async function describePoliciesWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): DescribePoliciesResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribePolicies',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/policies`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePolicies(): DescribePoliciesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describePoliciesWithOptions(headers, runtime);
}

model DescribePolicyDetailsResponseBody = {
  action?: string(name='action', description='The action of the policy. Valid values:

*   `enforce`: blocks deployments that match the policy.
*   `inform`: generates alerts for deployments that match the policy.', example='enforce'),
  category?: string(name='category', description='The type of the policy.', example='k8s-general'),
  description?: string(name='description', description='The description of the policy.', example='Requires container images to begin with a repo string from a specified list'),
  isDeleted?: int32(name='is_deleted', description='Indicates whether the policy is deleted. Valid values:

*   0: The policy is not deleted.
*   1: The policy is deleted.', example='0'),
  name?: string(name='name', description='The name of the policy.', example='ACKAllowedRepos'),
  noConfig?: int32(name='no_config', description='Indicates whether parameters are required. Valid values:

*   0: Parameters are required.
*   1: Parameters are optional.', example='0'),
  severity?: string(name='severity', description='The severity level of the policy.', example='high'),
  template?: string(name='template', description='The content of the policy.', example='For more information, see sample requests.'),
}

model DescribePolicyDetailsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePolicyDetailsResponseBody(name='body'),
}

async function describePolicyDetailsWithOptions(policyName: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribePolicyDetailsResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribePolicyDetails',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/policies/${OpenApiUtil.getEncodeParam(policyName)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePolicyDetails(policyName: string): DescribePolicyDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describePolicyDetailsWithOptions(policyName, headers, runtime);
}

model DescribePolicyGovernanceInClusterResponseBody = {
  admitLog?: {
    count?: long(name='count', description='The number of audit log entries.', example='100'),
    log?: {
      clusterId?: string(name='cluster_id', description='The cluster ID.', example='c8155823d057948c69a****'),
      constraintKind?: string(name='constraint_kind', description='The policy type.', example='ACKAllowedRepos'),
      msg?: string(name='msg', description='The message that appears when an event is generated by a policy.', example='d4hdhs*****'),
      resourceKind?: string(name='resource_kind', description='The resource type.', example='Pod'),
      resourceName?: string(name='resource_name', description='The resource name.', example='nginx-deployment-basic2-84ccb74bfc-df22p'),
      resourceNamespace?: string(name='resource_namespace', description='The namespace to which the resource belongs.', example='default'),
    }(name='log', description='The audit log content.'),
    progress?: string(name='progress', description='The status of the query. Valid values:

*   `Complete`: The query succeeded and the complete query result is returned.
*   `Incomplete`: The query succeeded but the query result is incomplete. To obtain the complete query result, you must repeat the request.', example='Complete'),
  }(name='admit_log', description='The audit logs of the policies in the cluster.'),
  onState?: [ 
    {
      enabledCount?: int32(name='enabled_count', description='The number of policies that are enabled.', example='3'),
      severity?: string(name='severity', description='The severity level of the policy.', example='high'),
      total?: int32(name='total', description='The total number of policies of the severity level.', example='8'),
    }
  ](name='on_state', description='Details about the policies of different severity levels that are enabled for the cluster.'),
  totalViolations?: {
    deny?: {
      severity?: string(name='severity', description='The severity level of the policy.', example='high'),
      violations?: long(name='violations', description='The number of blocking events that are triggered.', example='0'),
    }(name='deny', description='Details about the blocking events that are triggered by the policies of each severity level.'),
    warn?: {
      severity?: string(name='severity', description='The severity level of the policy.', example='low'),
      violations?: long(name='violations', description='The number of alerting events that are triggered.', example='5'),
    }(name='warn', description='Details about the alerting events that are triggered by the policies of each severity level.'),
  }(name='totalViolations', description='Details about the blocking and alerting events that are triggered by policies of different severity levels.'),
  violations?: {
    deny?: {
      policyDescription?: string(name='policyDescription', description='The policy description.', example='Requires container images to begin with a repo string from a specified list.'),
      policyName?: string(name='policyName', description='The policy name.', example='policy-gatekeeper-ackallowedrepos'),
      severity?: string(name='severity', description='The severity level of the policy.', example='high'),
      violations?: long(name='violations', description='The total number of blocking events that are triggered by the policy.', example='11'),
    }(name='deny', description='Details about the blocking events that are triggered by each policy.'),
    warn?: {
      policyDescription?: string(name='policyDescription', description='The policy description.', example='Controls Linux capabilities.'),
      policyName?: string(name='policyName', description='The policy name.', example='policy-gatekeeper-ackpspcapabilities'),
      severity?: string(name='severity', description='The severity level of the policy.', example='high'),
      violations?: long(name='violations', description='The total number of alerting events that are triggered by the policy.', example='81'),
    }(name='warn', description='Details about the alerting events that are triggered by the policies of each severity level.'),
  }(name='violations', description='Details about the blocking and alerting events that are triggered by different policies.'),
}

model DescribePolicyGovernanceInClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePolicyGovernanceInClusterResponseBody(name='body'),
}

async function describePolicyGovernanceInClusterWithOptions(clusterId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribePolicyGovernanceInClusterResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribePolicyGovernanceInCluster',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(clusterId)}/policygovernance`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePolicyGovernanceInCluster(clusterId: string): DescribePolicyGovernanceInClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describePolicyGovernanceInClusterWithOptions(clusterId, headers, runtime);
}

model DescribePolicyInstancesRequest {
  instanceName?: string(name='instance_name', description='The name of the policy instance that you want to query.', example='allowed-repos-cz4s2'),
  policyName?: string(name='policy_name', description='The name of the policy that you want to query.', example='ACKPSPCapabilities'),
}

model DescribePolicyInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: [ 
    {
      aliUid?: string(name='ali_uid', description='The UID of the Alibaba Cloud account that is used to deploy the policy instance.', example='16298168****'),
      clusterId?: string(name='cluster_id', description='The ID of the cluster.', example='c8155823d057948c69a****'),
      instanceName?: string(name='instance_name', description='The name of the policy instance.', example='no-env-var-secrets-****'),
      policyName?: string(name='policy_name', description='The name of the policy.', example='ACKPSPCapabilities'),
      policyCategory?: string(name='policy_category', description='The type of policy.', example='k8s-general'),
      policyDescription?: string(name='policy_description', description='The description of the policy template.', example='Restricts secrets used in pod envs'),
      policyParameters?: string(name='policy_parameters', description='The parameters of the policy instance.', example='"restrictedNamespaces": [ "test" ]'),
      policySeverity?: string(name='policy_severity', description='The severity level of the policy instance.', example='low'),
      policyScope?: string(name='policy_scope', description='The applicable scope of the policy instance.

A value of \\* indicates all namespaces in the cluster. This is the default value.

Multiple namespaces are separated by commas (,).', example='*'),
      policyAction?: string(name='policy_action', description='The action of the policy. Valid values:

*   `deny`: Deployments that match the policy are denied.
*   `warn`: Alerts are generated for deployments that match the policy.', example='deny'),
    }
  ](name='body'),
}

async function describePolicyInstancesWithOptions(clusterId: string, request: DescribePolicyInstancesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribePolicyInstancesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.instanceName)) {
    query['instance_name'] = request.instanceName;
  }
  if (!Util.isUnset(request.policyName)) {
    query['policy_name'] = request.policyName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePolicyInstances',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(clusterId)}/policies`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'array',
  };
  return callApi(params, req, runtime);
}

async function describePolicyInstances(clusterId: string, request: DescribePolicyInstancesRequest): DescribePolicyInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describePolicyInstancesWithOptions(clusterId, request, headers, runtime);
}

model DescribePolicyInstancesStatusResponseBody = {
  instancesSeverityCount?: map[string]any(name='instances_severity_count', description='Information about the number of policy instances of each severity level.', example='{ "high": 11,     "medium": 1  }'),
  policyInstances?: [ 
    {
      policyCategory?: string(name='policy_category', description='The policy type.', example='cis-k8s'),
      policyDescription?: string(name='policy_description', description='The description of the policy.', example='Restricts use of the cluster-admin role.'),
      policyInstancesCount?: long(name='policy_instances_count', description='The number of policy instances that are deployed. If this parameter is empty, no policy instance is deployed.', example='1'),
      policyName?: string(name='policy_name', description='The name of the policy.', example='ACKRestrictRoleBindings'),
      policySeverity?: string(name='policy_severity', description='The severity level of the policy.', example='medium'),
    }
  ](name='policy_instances', description='Details about policy instances of different types.'),
}

model DescribePolicyInstancesStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePolicyInstancesStatusResponseBody(name='body'),
}

async function describePolicyInstancesStatusWithOptions(clusterId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribePolicyInstancesStatusResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribePolicyInstancesStatus',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(clusterId)}/policies/status`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePolicyInstancesStatus(clusterId: string): DescribePolicyInstancesStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describePolicyInstancesStatusWithOptions(clusterId, headers, runtime);
}

model DescribeSubaccountK8sClusterUserConfigRequest {
  privateIpAddress?: boolean(name='PrivateIpAddress', description='Specifies whether to obtain the kubeconfig file used to connect to the cluster over the internal network. Valid values:

*   `true`: Obtain the kubeconfig file used to connect to the cluster over the internal network.
*   `false`: Obtain the kubeconfig file used to connect to the cluster over the Internet.

Default value: `false`.', example='true'),
  temporaryDurationMinutes?: long(name='TemporaryDurationMinutes', description='The validity period of the temporary kubeconfig file. Unit: minutes.

Valid values: 15 to 4320 (three days).

> If you leave this parameter empty, the system sets a longer validity period and returns the value in the expiration parameter of the response.', example='15'),
}

model DescribeSubaccountK8sClusterUserConfigResponseBody = {
  config?: string(name='config', description='The cluster kubeconfig file. For more information about the content of the kubeconfig file, see [Configure cluster credentials](~~86494~~).', example='apiVersion: v1****'),
  expiration?: string(name='expiration', description='The expiration date of the kubeconfig file. The value is the UTC time displayed in RFC3339 format.', example='2024-03-10T09:56:17Z'),
}

model DescribeSubaccountK8sClusterUserConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSubaccountK8sClusterUserConfigResponseBody(name='body'),
}

/**
  * **
  * ****Only Alibaba Cloud accounts can call this API operation.
  *
  * @param request DescribeSubaccountK8sClusterUserConfigRequest
  * @param headers map
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeSubaccountK8sClusterUserConfigResponse
 */
async function describeSubaccountK8sClusterUserConfigWithOptions(ClusterId: string, Uid: string, request: DescribeSubaccountK8sClusterUserConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeSubaccountK8sClusterUserConfigResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.privateIpAddress)) {
    query['PrivateIpAddress'] = request.privateIpAddress;
  }
  if (!Util.isUnset(request.temporaryDurationMinutes)) {
    query['TemporaryDurationMinutes'] = request.temporaryDurationMinutes;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSubaccountK8sClusterUserConfig',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/k8s/${OpenApiUtil.getEncodeParam(ClusterId)}/users/${OpenApiUtil.getEncodeParam(Uid)}/user_config`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * **
  * ****Only Alibaba Cloud accounts can call this API operation.
  *
  * @param request DescribeSubaccountK8sClusterUserConfigRequest
  * @return DescribeSubaccountK8sClusterUserConfigResponse
 */
async function describeSubaccountK8sClusterUserConfig(ClusterId: string, Uid: string, request: DescribeSubaccountK8sClusterUserConfigRequest): DescribeSubaccountK8sClusterUserConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeSubaccountK8sClusterUserConfigWithOptions(ClusterId, Uid, request, headers, runtime);
}

model DescribeTaskInfoResponseBody = {
  clusterId?: string(name='cluster_id', description='The cluster ID.', example='c78592bfe92244365b3c3ad47f1de****'),
  created?: string(name='created', description='The time when the task was created.', example='2020-11-10T16:02:04+08:00'),
  currentStage?: string(name='current_stage', description='The current stage of the task.', example='DrainNodes'),
  error?: {
    code?: string(name='code', description='The error code returned.', example='400'),
    message?: string(name='message', description='The error message returned.', example='failed to xxx'),
  }(name='error', description='The error returned for the task.'),
  events?: [ 
    {
      action?: string(name='action', description='The action of the event.', example='start'),
      level?: string(name='level', description='The severity level of the event.', example='Normal'),
      message?: string(name='message', description='The message about the event.', example='start to xxx'),
      reason?: string(name='reason', description='The cause of the event.', example='NodePoolUpgradeStart'),
      source?: string(name='source', description='The source of the event.', example='ACK'),
      timestamp?: string(name='timestamp', description='The timestamp when the event was generated.', example='1669706229286'),
    }
  ](name='events', description='The event generated by the task.'),
  parameters?: map[string]any(name='parameters', description='The task parameters.'),
  stages?: [ 
    {
      endTime?: string(name='end_time', description='The end time of the stage.', example='2022-12-15 23:00:00'),
      message?: string(name='message', description='The message about the stage.', example='success to xxxxx'),
      outputs?: map[string]any(name='outputs', description='The output generated at the stage.'),
      startTime?: string(name='start_time', description='The start time of the stage.', example='2022-12-15 23:00:00'),
      state?: string(name='state', description='The status of the stage.', example='running'),
    }
  ](name='stages', description='Detailed information about the stage of the task.'),
  state?: string(name='state', description='The status of the task. Valid values:

*   `running`: The task is running.
*   `failed`: The task failed.
*   `success`: The task is complete.', example='running'),
  target?: {
    id?: string(name='id', description='The ID of the object.', example='c78592bfe92244365b3c3ad47f1de****'),
    type?: string(name='type', description='The type of the object.', example='cluster'),
  }(name='target', description='The object of the task.'),
  taskId?: string(name='task_id', description='The task ID.', example='T-5faa48fb31b6b8078d000006'),
  taskResult?: [ 
    {
      data?: string(name='data', description='The resources that are managed by the task. For a scale-out task, the value of this parameter is the ID of the instance that is added by the task.', example='i-xxx'),
      status?: string(name='status', description='The status of the scale-out task. Valid values:

*   `success`: The scale-out task is successful.
*   `success`: The scale-out task failed.
*   `initial`: The scale-out task is being initialized.', example='success'),
    }
  ](name='task_result', description='The execution details of the task.'),
  taskType?: string(name='task_type', description='The task type. A value of `cluster_scaleout` indicates a scale-out task.', example='cluster_scaleout'),
  updated?: string(name='updated', description='The time when the task was updated.', example='2020-11-10T16:03:06+08:00'),
}

model DescribeTaskInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTaskInfoResponseBody(name='body'),
}

async function describeTaskInfoWithOptions(taskId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeTaskInfoResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeTaskInfo',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/tasks/${OpenApiUtil.getEncodeParam(taskId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTaskInfo(taskId: string): DescribeTaskInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeTaskInfoWithOptions(taskId, headers, runtime);
}

model DescribeTemplateAttributeRequest {
  templateType?: string(name='template_type', description='The type of template. The value can be a custom value.

*   If the parameter is set to `kubernetes`, the template is displayed on the Templates page in the console.
*   If the parameter is set to `compose`, the template is displayed on the Container Service - Swarm page in the console. Container Service for Swarm is deprecated.
*   If the value of the parameter is not `kubernetes`, the template is not displayed on the Templates page in the console. We recommend that you set the parameter to `kubernetes`.

Default value: `kubernetes`.', example='kubernetes'),
}

model DescribeTemplateAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: [ 
    {
      id?: string(name='id', description='The ID of the template. When you update a template, a new template ID is generated.', example='72d20cf8-a533-4ea9-a10d-e7630d3d****'),
      acl?: string(name='acl', description='The access control policy of the template.', example='private'),
      name?: string(name='name', description='The name of the template.', example='web'),
      template?: string(name='template', description='The template content in the YAML format.', example='apiVersion: V1\\n***'),
      templateType?: string(name='template_type', description='The type of template. The value can be a custom value.

*   If the parameter is set to `kubernetes`, the template is displayed on the Templates page in the console.
*   If the parameter is set to `compose`, the template is displayed on the Container Service - Swarm page in the console. Container Service for Swarm is deprecated.
*   If the value of the parameter is not `kubernetes`, the template is not displayed on the Templates page in the console. We recommend that you set the parameter to `kubernetes`.

Default value: `kubernetes`.', example='kubernetes'),
      description?: string(name='description', description='The description of the template.', example='test template'),
      tags?: string(name='tags', description='The label of the template.', example='sa'),
      templateWithHistId?: string(name='template_with_hist_id', description='The unique ID of the template. The value remains unchanged after the template is updated.', example='874ec485-e7e6-4373-8a3b-47bde8ae****'),
      created?: string(name='created', description='The time when the template was created.', example='2020-09-16T19:21:29+08:00'),
      updated?: string(name='updated', description='The time when the template was updated.', example='2020-09-16T19:21:29+08:00'),
    }
  ](name='body'),
}

async function describeTemplateAttributeWithOptions(TemplateId: string, request: DescribeTemplateAttributeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeTemplateAttributeResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.templateType)) {
    query['template_type'] = request.templateType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTemplateAttribute',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/templates/${OpenApiUtil.getEncodeParam(TemplateId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'array',
  };
  return callApi(params, req, runtime);
}

async function describeTemplateAttribute(TemplateId: string, request: DescribeTemplateAttributeRequest): DescribeTemplateAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeTemplateAttributeWithOptions(TemplateId, request, headers, runtime);
}

model DescribeTemplatesRequest {
  pageNum?: long(name='page_num', description='The page number.

Default value: 1.', example='1'),
  pageSize?: long(name='page_size', description='The number of entries per page.

Default value: 10.', example='10'),
  templateType?: string(name='template_type', description='The type of template. This parameter can be set to a custom value.

*   If the parameter is set to `kubernetes`, the template is displayed on the Templates page in the console.
*   If you set the parameter to `compose`, the template is not displayed on the Templates page in the console.

Default value: `kubernetes`.', example='kubernetes'),
}

model DescribeTemplatesResponseBody = {
  pageInfo?: {
    pageNumber?: long(name='page_number', description='The page number.', example='20'),
    pageSize?: long(name='page_size', description='The number of entries per page.', example='3'),
    totalCount?: long(name='total_count', description='The total number of entries returned.', example='50'),
  }(name='page_info', description='The pagination information.'),
  templates?: [ 
    {
      acl?: string(name='acl', description='The access control policy of the template. Valid values:

*   `private`: The template is private.
*   `public`: The template is public.
*   `shared`: The template can be shared.

Default value: `private`.', example='private'),
      created?: string(name='created', description='The time when the template was created.', example='2020-06-10T16:30:16+08:00'),
      description?: string(name='description', description='The description of the template.', example='a web server'),
      id?: string(name='id', description='The ID of the template.', example='874ec485-e7e6-4373-8a3b-47bde8ae789f'),
      name?: string(name='name', description='The name of the template.', example='webserver'),
      tags?: string(name='tags', description='The label of the template. By default, the value is the name of the template.', example='kubernetes'),
      template?: string(name='template', description='The template content in the YAML format.', example='apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: nginx-deployment-basic\\n  labels:\\n    app: nginx\\nspec:\\n  replicas: 2\\n  selector:\\n    matchLabels:\\n      app: nginx\\n  template:\\n    metadata:\\n      labels:\\n        app: nginx\\n    spec:\\n      containers:\\n      - name: nginx\\n        image: busybox:latest\\n        ports:\\n        - containerPort: 80'),
      templateType?: string(name='template_type', description='The type of template. This parameter can be set to a custom value.

*   If the parameter is set to `kubernetes`, the template is displayed on the Templates page in the console.
*   If the parameter is set to `compose`, the template is displayed on the Container Service - Swarm page in the console. However, Container Service for Swarm is deprecated.', example='kubernetes'),
      templateWithHistId?: string(name='template_with_hist_id', description='The ID of the parent template. The value of `template_with_hist_id` is the same for each template version. This allows you to manage different template versions.', example='ad81d115-7c8b-47e7-a222-9c28d7f6e588'),
      updated?: string(name='updated', description='The time when the template was updated.', example='2020-06-10T16:30:16+08:00'),
    }
  ](name='templates', description='The list of returned templates.'),
}

model DescribeTemplatesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTemplatesResponseBody(name='body'),
}

async function describeTemplatesWithOptions(request: DescribeTemplatesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeTemplatesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.pageNum)) {
    query['page_num'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['page_size'] = request.pageSize;
  }
  if (!Util.isUnset(request.templateType)) {
    query['template_type'] = request.templateType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTemplates',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/templates`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTemplates(request: DescribeTemplatesRequest): DescribeTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeTemplatesWithOptions(request, headers, runtime);
}

model DescribeTriggerRequest {
  name?: string(name='Name', description='The application name.', example='web-server'),
  namespace?: string(name='Namespace', description='The namespace to which the application belongs.', example='default'),
  type?: string(name='Type', description='The type of trigger. Valid values:

*   `deployment`: performs actions on Deployments.
*   `application`: performs actions on applications that are deployed in Application Center.

Default value: `deployment`.

If you do not set this parameter, triggers are not filtered by type.', example='deployment'),
  action?: string(name='action', description='The action that the trigger performs. Set the value to redeploy.

`redeploy`: redeploys the resources specified by `project_id`.

If you do not specify this parameter, triggers are not filtered by action.', example='redeploy'),
}

model DescribeTriggerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: [ 
    {
      id?: string(name='id', description='The ID of the trigger.', example='1234'),
      name?: string(name='name', description='The name of the trigger.', example='test'),
      clusterId?: string(name='cluster_id', description='The ID of the associated cluster.', example='c259f563386444ebb8d7****'),
      projectId?: string(name='project_id', description='The name of the project.

The name consists of the namespace where the application is deployed and the name of the application. The format is `${namespace}/${name}`. Example: default/test-app.', example='default/test-app'),
      type?: string(name='type', description='The type of trigger.

Valid values:

*   `deployment`: performs actions on Deployments.
*   `application`: performs actions on applications that are deployed in Application Center.

Default value: `deployment`.', example='deployment'),
      action?: string(name='action', description='The action that the trigger performs. The value is set to redeploy.

`redeploy`: redeploys the resource specified by project_id.', example='redeploy'),
      token?: string(name='token', description='The token information.', example='eyJhbGci***'),
    }
  ](name='body'),
}

async function describeTriggerWithOptions(clusterId: string, request: DescribeTriggerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeTriggerResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.action)) {
    query['action'] = request.action;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTrigger',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(clusterId)}/triggers`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'array',
  };
  return callApi(params, req, runtime);
}

async function describeTrigger(clusterId: string, request: DescribeTriggerRequest): DescribeTriggerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeTriggerWithOptions(clusterId, request, headers, runtime);
}

model DescribeUserClusterNamespacesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: [ string ](name='body'),
}

async function describeUserClusterNamespacesWithOptions(ClusterId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeUserClusterNamespacesResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserClusterNamespaces',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/api/v2/k8s/${OpenApiUtil.getEncodeParam(ClusterId)}/namespaces`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'array',
  };
  return callApi(params, req, runtime);
}

async function describeUserClusterNamespaces(ClusterId: string): DescribeUserClusterNamespacesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeUserClusterNamespacesWithOptions(ClusterId, headers, runtime);
}

model DescribeUserPermissionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: [ 
    {
      resourceId?: string(name='resource_id', description='The authorization setting. Valid values:

*   `{cluster_id}` is returned if the permissions are scoped to a cluster.
*   `{cluster_id}/{namespace}` is returned if the permissions are scoped to a namespace of a cluster.
*   `all-clusters` is returned if the permissions are scoped to all clusters.', example='c1b542****'),
      resourceType?: string(name='resource_type', description='The authorization type. Valid values:

*   `cluster`: indicates that the permissions are scoped to a cluster.
*   `namespace`: indicates that the permissions are scoped to a namespace of a cluster.
*   `console`: indicates that the permissions are scoped to all clusters. This value was displayed only in the console.', example='cluster'),
      roleName?: string(name='role_name', description='The name of the custom role. If a custom role is assigned, the value is the name of the assigned custom role.', example='view'),
      roleType?: string(name='role_type', description='The type of predefined role. Valid values:

*   `admin`: administrator
*   `ops`: O\\&M engineer
*   `dev`: developer
*   `restricted`: restricted user
*   `custom`: custom role', example='admin'),
      isOwner?: long(name='is_owner', description='Indicates whether the permissions are granted to the cluster owner.

*   `0`: indicates that the permissions are not granted to the cluster owner.
*   `1`: indicates that the permissions are granted to the cluster owner. The cluster owner is the administrator.', example='1'),
      isRamRole?: long(name='is_ram_role', description='Indicates whether the permissions are granted to the RAM role. Valid values:

*   `0`: indicates that the permissions are not granted to the RAM role.
*   `1`: indicates that the permissions are granted to the RAM role.', example='1'),
    }
  ](name='body'),
}

async function describeUserPermissionWithOptions(uid: string, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeUserPermissionResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserPermission',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/permissions/users/${OpenApiUtil.getEncodeParam(uid)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'array',
  };
  return callApi(params, req, runtime);
}

async function describeUserPermission(uid: string): DescribeUserPermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeUserPermissionWithOptions(uid, headers, runtime);
}

model DescribeUserQuotaResponseBody = {
  amkClusterQuota?: long(name='amk_cluster_quota', description='The quota of Container Service for Kubernetes (ACK) managed clusters. Default value: 20. If the default quota limit is reached, submit an application in the [Quota Center console](https://quotas.console.aliyun.com/products/csk/quotas) to increase the quota.', example='20'),
  askClusterQuota?: long(name='ask_cluster_quota', description='The quota of ACK Serverless clusters. Default value: 20. If the default quota limit is reached, submit an application in the [Quota Center console](https://quotas.console.aliyun.com/products/csk/quotas) to increase the quota.', example='3'),
  clusterNodepoolQuota?: long(name='cluster_nodepool_quota', description='The quota of node pools in an ACK cluster. Default value: 20. If the default quota limit is reached, submit an application in the [Quota Center console](https://quotas.console.aliyun.com/products/csk/quotas) to increase the quota.', example='10'),
  clusterQuota?: long(name='cluster_quota', description='The quota of clusters that belong to an Alibaba Cloud account. Default value: 50. If the default quota limit is reached, submit an application in the [Quota Center console](https://quotas.console.aliyun.com/products/csk/quotas) to increase the quota.', example='50'),
  edgeImprovedNodepoolQuota?: {
    bandwidth?: int32(name='bandwidth', description='The maximum bandwidth of each enhanced node pool. Unit: Mbit/s.', example='10'),
    count?: int32(name='count', description='The quota of enhanced edge node pools that belong to an Alibaba Cloud account.', example='3'),
    period?: int32(name='period', description='The maximum subscription duration of an enhanced edge node pool. Unit: months.

> You can ignore this parameter because enhanced edge node pools are pay-as-you-go resources.', example='3'),
  }(name='edge_improved_nodepool_quota', description='The quota of enhanced edge node pools.'),
  nodeQuota?: long(name='node_quota', description='The quota of nodes in an ACK cluster. Default value: 100. If the default quota limit is reached, submit an application in the [Quota Center console](https://quotas.console.aliyun.com/products/csk/quotas) to increase the quota.', example='100'),
  quotas?: map[string]QuotasValue(name='quotas', description='Information about the new quota.'),
}

model DescribeUserQuotaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserQuotaResponseBody(name='body'),
}

async function describeUserQuotaWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): DescribeUserQuotaResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserQuota',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/quota`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUserQuota(): DescribeUserQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeUserQuotaWithOptions(headers, runtime);
}

model DescribeWorkflowsResponseBody = {
  jobs?: [ 
    {
      clusterId?: string(name='cluster_id', description='The cluster ID.', example='cb1a7214cfc0b41d9bb086affc2d8f51c'),
      createTime?: string(name='create_time', description='The time when the workflow was created.', example='2020-01-15T13:18:52Z'),
      jobName?: string(name='job_name', description='The name of the workflow.', example='wgs-gpu-qb4dk'),
    }
  ](name='jobs', description='The list of jobs.'),
}

model DescribeWorkflowsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWorkflowsResponseBody(name='body'),
}

async function describeWorkflowsWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): DescribeWorkflowsResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DescribeWorkflows',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/gs/workflows`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWorkflows(): DescribeWorkflowsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeWorkflowsWithOptions(headers, runtime);
}

model EdgeClusterAddEdgeMachineRequest {
  expired?: long(name='expired', description='The timeout period of sessions. Unit: seconds.', example='1024'),
  nodepoolId?: string(name='nodepool_id', description='The node pool ID.', example='c26607f52179f4472a0d9723e7595****'),
  options?: string(name='options', description='The options that you want to configure.', example='"{\\"enableIptables\\":true,\\"quiet\\":true,\\"manageRuntime\\":true,\\"allowedClusterAddons\\":[\\"kube-proxy\\",\\"flannel\\",\\"coredns\\"]}"'),
}

model EdgeClusterAddEdgeMachineResponseBody = {
  edgeMachineId?: string(name='edge_machine_id', description='The ID of the cloud-native box.', example='0f4bf70a-caff-4b26-a679-fb0188a1****'),
  requestId?: string(name='request_id', description='The request ID.', example='0adf3a23-6841-41e8-9f55-7b290216c980'),
}

model EdgeClusterAddEdgeMachineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EdgeClusterAddEdgeMachineResponseBody(name='body'),
}

async function edgeClusterAddEdgeMachineWithOptions(clusterid: string, edgeMachineid: string, request: EdgeClusterAddEdgeMachineRequest, headers: map[string]string, runtime: Util.RuntimeOptions): EdgeClusterAddEdgeMachineResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.expired)) {
    body['expired'] = request.expired;
  }
  if (!Util.isUnset(request.nodepoolId)) {
    body['nodepool_id'] = request.nodepoolId;
  }
  if (!Util.isUnset(request.options)) {
    body['options'] = request.options;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'EdgeClusterAddEdgeMachine',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/%5Bclusterid%5D/attachedgemachine/%5Bedge_machineid%5D`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function edgeClusterAddEdgeMachine(clusterid: string, edgeMachineid: string, request: EdgeClusterAddEdgeMachineRequest): EdgeClusterAddEdgeMachineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return edgeClusterAddEdgeMachineWithOptions(clusterid, edgeMachineid, request, headers, runtime);
}

model FixNodePoolVulsRequest {
  autoRestart?: boolean(name='auto_restart'),
  nodes?: [ string ](name='nodes', description='The names of the nodes to be patched.'),
  rolloutPolicy?: {
    maxParallelism?: long(name='max_parallelism', description='The maximum number of nodes that can be patched in parallel. The minimum value is 1. The maximum value equals the number of nodes in the node pool.', example='1'),
  }(name='rollout_policy', description='The batch patching policy.'),
  vuls?: [ string ](name='vuls', description='The list of vulnerabilities.'),
}

model FixNodePoolVulsResponseBody = {
  taskId?: string(name='task_id', description='The ID of the CVE patching task.', example='T-60fea8ad2e277f087900****'),
}

model FixNodePoolVulsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FixNodePoolVulsResponseBody(name='body'),
}

/**
  * 1.  The Common Vulnerabilities and Exposures (CVE) patching feature is developed based on Security Center. To use this feature, you must purchase the Security Center Ultimate Edition that supports Container Service for Kubernetes (ACK).
  * 2.  ACK may need to restart nodes to patch certain vulnerabilities. ACK drains a node before the node restarts. Make sure that the ACK cluster has sufficient idle nodes to host the pods evicted from the trained nodes. For example, you can scale out a node pool before you patch vulnerabilities for the nodes in the node pool.
  * 3.  Security Center ensures the compatibility of CVE patches. We recommend that you check the compatibility of a CVE patch with your application before you install the patch. You can pause or cancel a CVE patching task anytime.
  * 4.  CVE patching is a progressive task that consists of multiple batches. After you pause or cancel a CVE patching task, ACK continues to process the dispatched batches. Only the batches that have not been dispatched are paused or canceled.
  *
  * @param request FixNodePoolVulsRequest
  * @param headers map
  * @param runtime runtime options for this request RuntimeOptions
  * @return FixNodePoolVulsResponse
 */
async function fixNodePoolVulsWithOptions(clusterId: string, nodepoolId: string, request: FixNodePoolVulsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): FixNodePoolVulsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.autoRestart)) {
    body['auto_restart'] = request.autoRestart;
  }
  if (!Util.isUnset(request.nodes)) {
    body['nodes'] = request.nodes;
  }
  if (!Util.isUnset(request.rolloutPolicy)) {
    body['rollout_policy'] = request.rolloutPolicy;
  }
  if (!Util.isUnset(request.vuls)) {
    body['vuls'] = request.vuls;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'FixNodePoolVuls',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(clusterId)}/nodepools/${OpenApiUtil.getEncodeParam(nodepoolId)}/vuls/fix`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * 1.  The Common Vulnerabilities and Exposures (CVE) patching feature is developed based on Security Center. To use this feature, you must purchase the Security Center Ultimate Edition that supports Container Service for Kubernetes (ACK).
  * 2.  ACK may need to restart nodes to patch certain vulnerabilities. ACK drains a node before the node restarts. Make sure that the ACK cluster has sufficient idle nodes to host the pods evicted from the trained nodes. For example, you can scale out a node pool before you patch vulnerabilities for the nodes in the node pool.
  * 3.  Security Center ensures the compatibility of CVE patches. We recommend that you check the compatibility of a CVE patch with your application before you install the patch. You can pause or cancel a CVE patching task anytime.
  * 4.  CVE patching is a progressive task that consists of multiple batches. After you pause or cancel a CVE patching task, ACK continues to process the dispatched batches. Only the batches that have not been dispatched are paused or canceled.
  *
  * @param request FixNodePoolVulsRequest
  * @return FixNodePoolVulsResponse
 */
async function fixNodePoolVuls(clusterId: string, nodepoolId: string, request: FixNodePoolVulsRequest): FixNodePoolVulsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return fixNodePoolVulsWithOptions(clusterId, nodepoolId, request, headers, runtime);
}

model GetClusterCheckResponseBody = {
  checkId?: string(name='check_id', description='Id of the request', example='1697100584236600453-ce0da5a1d627e4e9e9f96cae8ad07****-clustercheck-lboto'),
  checkItems?: map[string][  map[string]any ](name='check_items'),
  createdAt?: string(name='created_at', example='2023-10-16T08:31:20.292030178Z'),
  finishedAt?: string(name='finished_at', example='2023-10-16T08:35:20.292030178Z'),
  message?: string(name='message', example='task succeed'),
  status?: string(name='status', example='Succeeded'),
  type?: string(name='type', example='ClusterUpgrade'),
}

model GetClusterCheckResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetClusterCheckResponseBody(name='body'),
}

async function getClusterCheckWithOptions(clusterId: string, checkId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetClusterCheckResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetClusterCheck',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(clusterId)}/checks/${OpenApiUtil.getEncodeParam(checkId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getClusterCheck(clusterId: string, checkId: string): GetClusterCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getClusterCheckWithOptions(clusterId, checkId, headers, runtime);
}

model GetKubernetesTriggerRequest {
  name?: string(name='Name', description='The application name.', example='web-server'),
  namespace?: string(name='Namespace', description='The namespace name.', example='default'),
  type?: string(name='Type', description='The type of trigger. Valid values:

*   `deployment`: performs actions on Deployments.
*   `application`: performs actions on applications that are deployed in Application Center.

Default value: `deployment`.

If you do not set this parameter, triggers are not filtered by type.', example='deployment'),
  action?: string(name='action', description='The action that the trigger performs. Set the value to redeploy.

`redeploy`: redeploys the resources specified by `project_id`.

If you do not specify this parameter, triggers are not filtered by action.', example='redeploy'),
}

model GetKubernetesTriggerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: [ 
    {
      id?: string(name='id', description='The ID of the trigger.', example='1234'),
      name?: string(name='name', description='The name of the trigger.', example='test'),
      clusterId?: string(name='cluster_id', description='The ID of the associated cluster.', example='c259f563386444ebb8d7**'),
      projectId?: string(name='project_id', description='The name of the project.

The name consists of the namespace where the application is deployed and the name of the application. The format is `${namespace}/${name}`. Example: default/test-app.', example='default/test-app'),
      type?: string(name='type', description='The type of trigger.

Valid values:

*   `deployment`: performs actions on Deployments.
*   `application`: performs actions on applications that are deployed in Application Center.

Default value: `deployment`.', example='deployment'),
      action?: string(name='action', description='The action that the trigger performs. The value is set to redeploy.

`redeploy`: redeploys the resource specified by project_id.', example='redeploy'),
      token?: string(name='token', description='Token', example='eyJhbGci***'),
    }
  ](name='body'),
}

async function getKubernetesTriggerWithOptions(ClusterId: string, request: GetKubernetesTriggerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetKubernetesTriggerResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.action)) {
    query['action'] = request.action;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetKubernetesTrigger',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/triggers/${OpenApiUtil.getEncodeParam(ClusterId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'array',
  };
  return callApi(params, req, runtime);
}

async function getKubernetesTrigger(ClusterId: string, request: GetKubernetesTriggerRequest): GetKubernetesTriggerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getKubernetesTriggerWithOptions(ClusterId, request, headers, runtime);
}

model GetUpgradeStatusResponseBody = {
  errorMessage?: string(name='error_message', description='The error message returned during the update.', example='subject to actual return'),
  precheckReportId?: string(name='precheck_report_id', description='The ID of the precheck report.', example='be4c8eb72de94d459ea7ace7c811d119'),
  status?: string(name='status', description='The status of the update. Valid values:

*   `success`: The update is successful.
*   `fail`: The update failed.
*   `pause`: The update is paused.
*   `running`: The update is in progress.', example='running'),
  upgradeStep?: string(name='upgrade_step', description='The current phase of the update. Valid values:

*   `not_start`: The update is not started.
*   `prechecking`: The precheck is in progress.
*   `upgrading`: The cluster is being updated.
*   `pause`: The update is paused.
*   `success`: The update is successful.', example='prechecking'),
  upgradeTask?: {
    message?: string(name='message', description='The description of the update task.', example='subject to actual return'),
    status?: string(name='status', description='The status of the update task. Valid values:

*   `running`: The update task is being executed.
*   `Success`: The update task is successfully executed.
*   `Failed`: The update task failed.', example='running'),
  }(name='upgrade_task', description='The details of the update task.'),
}

model GetUpgradeStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetUpgradeStatusResponseBody(name='body'),
}

async function getUpgradeStatusWithOptions(ClusterId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetUpgradeStatusResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetUpgradeStatus',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/api/v2/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/upgrade/status`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getUpgradeStatus(ClusterId: string): GetUpgradeStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getUpgradeStatusWithOptions(ClusterId, headers, runtime);
}

model GrantPermissionsRequest {
  body?: [ 
    {
      cluster?: string(name='cluster', description='The ID of the cluster that you want to manage.

*   When the `role_type` parameter is set to `all-clusters`, this parameter is set to an empty string.', example='c796c60***'),
      isCustom?: boolean(name='is_custom', description='Specifies whether to perform a custom authorization. To perform a custom authorization, set `role_name` to a custom cluster role.', example='false'),
      isRamRole?: boolean(name='is_ram_role', description='Specifies whether the permissions are granted to a RAM role.', example='false'),
      namespace?: string(name='namespace', description='The namespace to which the permissions are scoped. This parameter is required only if you set role_type to namespace.', example='test'),
      roleName?: string(name='role_name', description='The predefined role name. Valid values:

*   `admin`: administrator
*   `ops`: O\\&M engineer
*   `dev`: developer
*   `restricted`: restricted user
*   The custom cluster role.', example='ops'),
      roleType?: string(name='role_type', description='The authorization type. Valid values:

*   `cluster`: indicates that the permissions are scoped to a cluster.
*   `namespace`: specifies that the permissions are scoped to a namespace of a cluster.
*   `all-clusters`: specifies that the permissions are scoped to all clusters.', example='cluster'),
    }
  ](name='body', description='The request body.'),
}

model GrantPermissionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

/**
  * ****
  * *   Make sure that you have granted the RAM user at least read-only permissions on the desired ACK clusters in the RAM console. Otherwise, the `ErrorRamPolicyConfig` error code is returned. For more information about how to authorize a RAM user by attaching RAM policies, see [Create a custom RAM policy](~~86485~~).
  * *   If you use a RAM user to call this API operation, make sure that the RAM user is authorized to modify the permissions of other RAM users on the desired ACK clusters. Otherwise, the `StatusForbidden` or `ForbiddenGrantPermissions` error code is returned. For more information, see [Use a RAM user to grant RBAC permissions to other RAM users](~~119035~~).
  * *   This operation overwrites the permissions that have been granted to the specified RAM user. When you call this operation, make sure that the required permissions are included.
  *
  * @param request GrantPermissionsRequest
  * @param headers map
  * @param runtime runtime options for this request RuntimeOptions
  * @return GrantPermissionsResponse
 */
async function grantPermissionsWithOptions(uid: string, request: GrantPermissionsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GrantPermissionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = Util.toArray(request.body),
  };
  var params = new OpenApi.Params{
    action = 'GrantPermissions',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/permissions/users/${OpenApiUtil.getEncodeParam(uid)}`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

/**
  * ****
  * *   Make sure that you have granted the RAM user at least read-only permissions on the desired ACK clusters in the RAM console. Otherwise, the `ErrorRamPolicyConfig` error code is returned. For more information about how to authorize a RAM user by attaching RAM policies, see [Create a custom RAM policy](~~86485~~).
  * *   If you use a RAM user to call this API operation, make sure that the RAM user is authorized to modify the permissions of other RAM users on the desired ACK clusters. Otherwise, the `StatusForbidden` or `ForbiddenGrantPermissions` error code is returned. For more information, see [Use a RAM user to grant RBAC permissions to other RAM users](~~119035~~).
  * *   This operation overwrites the permissions that have been granted to the specified RAM user. When you call this operation, make sure that the required permissions are included.
  *
  * @param request GrantPermissionsRequest
  * @return GrantPermissionsResponse
 */
async function grantPermissions(uid: string, request: GrantPermissionsRequest): GrantPermissionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return grantPermissionsWithOptions(uid, request, headers, runtime);
}

model InstallClusterAddonsRequest {
  body?: [ 
    {
      config?: string(name='config', description='The custom component settings that you want to use. The value is a JSON string.', example='{\\"IngressDashboardEnabled\\":\\"true\\",\\"sls_project_name\\":\\"your_sls_project_name\\"}"}'),
      name?: string(name='name', description='The component name.', example='ags-metrics-collector'),
      version?: string(name='version', description='The component version.

>  You can call the [DescribeClusterAddonsVersion](~~197434~~) operation to query the version of a component.', example='v1.0.0.2-cc3b2d6-aliyun'),
    }
  ](name='body', description='The request body.', example='ags-metrics-collector'),
}

model InstallClusterAddonsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function installClusterAddonsWithOptions(ClusterId: string, request: InstallClusterAddonsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InstallClusterAddonsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = Util.toArray(request.body),
  };
  var params = new OpenApi.Params{
    action = 'InstallClusterAddons',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/components/install`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function installClusterAddons(ClusterId: string, request: InstallClusterAddonsRequest): InstallClusterAddonsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return installClusterAddonsWithOptions(ClusterId, request, headers, runtime);
}

model ListClusterChecksRequest {
  type?: string(name='type', example='ClusterUpgrade'),
}

model ListClusterChecksResponseBody = {
  checks?: [ 
    {
      checkId?: string(name='check_id', example='1697100584236600453-ce0da5a1d627e4e9e9f96cae8ad07****-clustercheck-lboto'),
      createdAt?: string(name='created_at', example='2023-10-16T08:31:20.292030178Z'),
      finishedAt?: string(name='finished_at', example='2023-10-16T08:35:20.292030178Z'),
      message?: string(name='message', example='task succeed'),
      status?: string(name='status', example='Succeeded'),
      type?: string(name='type', example='ClusterUpgrade'),
    }
  ](name='checks'),
}

model ListClusterChecksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListClusterChecksResponseBody(name='body'),
}

async function listClusterChecksWithOptions(clusterId: string, request: ListClusterChecksRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListClusterChecksResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.type)) {
    query['type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListClusterChecks',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(clusterId)}/checks`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listClusterChecks(clusterId: string, request: ListClusterChecksRequest): ListClusterChecksResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listClusterChecksWithOptions(clusterId, request, headers, runtime);
}

model ListTagResourcesRequest {
  nextToken?: string(name='next_token', description='The pagination token that is used in the next request to retrieve a new page of results.', example='***'),
  regionId?: string(name='region_id', description='The region ID.', example='cn-beijing'),
  resourceIds?: [ string ](name='resource_ids', description='The list of cluster IDs.', example='["xxxxx","xxxxxx"]'),
  resourceType?: string(name='resource_type', description='The resource type. Set the value to `CLUSTER`.', example='CLUSTER'),
  tags?: [
    Tag
  ](name='tags', description='The list of labels that you want to query. You can specify at most 20 labels.', example='[{\\"key\\":\\"env\\",\\"value\\",\\"dev\\"},{\\"key\\":\\"dev\\", \\"value\\":\\"IT\\"}]'),
}

model ListTagResourcesShrinkRequest {
  nextToken?: string(name='next_token', description='The pagination token that is used in the next request to retrieve a new page of results.', example='***'),
  regionId?: string(name='region_id', description='The region ID.', example='cn-beijing'),
  resourceIdsShrink?: string(name='resource_ids', description='The list of cluster IDs.', example='["xxxxx","xxxxxx"]'),
  resourceType?: string(name='resource_type', description='The resource type. Set the value to `CLUSTER`.', example='CLUSTER'),
  tagsShrink?: string(name='tags', description='The list of labels that you want to query. You can specify at most 20 labels.', example='[{\\"key\\":\\"env\\",\\"value\\",\\"dev\\"},{\\"key\\":\\"dev\\", \\"value\\":\\"IT\\"}]'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='next_token', description='The pagination token that is used in the next request to retrieve a new page of results.', example='c374bf4864448****'),
  requestId?: string(name='request_id', description='The request ID.', example='E368C761-F8F6-4A36-9B58-BD53D5CD0CEB'),
  tagResources?: {
    tagResource?: [ 
      {
        resourceId?: string(name='resource_id', description='The ID of the resource.', example='i-xxx'),
        resourceType?: string(name='resource_type', description='The type of the resource. For more information, see [Labels](~~110425~~).', example='CLUSTER'),
        tagKey?: string(name='tag_key', description='The key of the label.', example='ack.aliyun.com'),
        tagValue?: string(name='tag_value', description='The value of the label.', example='c71cf3d796c374bf48644482cb0c3****'),
      }
    ](name='tag_resource', description='The resource and label.'),
  }(name='tag_resources', description='The details of the queried labels and resources.'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(tmpReq: ListTagResourcesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(tmpReq);
  var request = new ListTagResourcesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.resourceIds)) {
    request.resourceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resourceIds, 'resource_ids', 'json');
  }
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'tags', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.nextToken)) {
    query['next_token'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['region_id'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceIdsShrink)) {
    query['resource_ids'] = request.resourceIdsShrink;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['resource_type'] = request.resourceType;
  }
  if (!Util.isUnset(request.tagsShrink)) {
    query['tags'] = request.tagsShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagResources',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/tags`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listTagResourcesWithOptions(request, headers, runtime);
}

model MigrateClusterRequest {
  ossBucketEndpoint?: string(name='oss_bucket_endpoint', description='The endpoint of the OSS bucket.', example='*******.oss-cn-hangzhou.aliyuncs.com'),
  ossBucketName?: string(name='oss_bucket_name', description='The name of the Object Storage Service (OSS) bucket.', example='bucket-****'),
}

model MigrateClusterResponseBody = {
  clusterId?: string(name='cluster_id', description='The cluster ID.', example='c8155823d057948c69a****'),
  requestId?: string(name='request_id', description='The request ID.', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
  taskId?: string(name='task_id', description='The task ID.', example='T-62ccd14aacb8db06ca00****'),
}

model MigrateClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: MigrateClusterResponseBody(name='body'),
}

async function migrateClusterWithOptions(clusterId: string, request: MigrateClusterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): MigrateClusterResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.ossBucketEndpoint)) {
    body['oss_bucket_endpoint'] = request.ossBucketEndpoint;
  }
  if (!Util.isUnset(request.ossBucketName)) {
    body['oss_bucket_name'] = request.ossBucketName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'MigrateCluster',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(clusterId)}/migrate`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function migrateCluster(clusterId: string, request: MigrateClusterRequest): MigrateClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return migrateClusterWithOptions(clusterId, request, headers, runtime);
}

model ModifyClusterRequest {
  accessControlList?: [ string ](name='access_control_list', description='注册集群 API Server SLB 访问控制列表。'),
  apiServerEip?: boolean(name='api_server_eip', description='Specifies whether to associate an elastic IP address (EIP) with the cluster API server. This enables Internet access for the cluster. Valid values:

*   `true`: associates an EIP with the cluster API server.
*   `false`: does not associate an EIP with the cluster API server.', example='true'),
  apiServerEipId?: string(name='api_server_eip_id', description='The ID of the EIP that you want to associate with the cluster API server. The parameter takes effect only if `api_server_eip` is set to `true`.', example='eip-wz9fnasl6dsfhmvci****'),
  clusterName?: string(name='cluster_name'),
  deletionProtection?: boolean(name='deletion_protection', description='Specifies whether to enable deletion protection for the cluster. If deletion protection is enabled, the cluster cannot be deleted in the ACK console or by calling API operations. Valid values:

*   `true`: enables deletion protection for the cluster. This way, the cluster cannot be deleted in the ACK console or by calling API operations.
*   `false`: disables deletion protection for the cluster. This way, the cluster can be deleted in the ACK console or by calling API operations.

Default value: `false`.', example='true'),
  enableRrsa?: boolean(name='enable_rrsa', description='Specifies whether to enable the RAM Roles for Service Accounts (RRSA) feature. Valid values:

*   `true`: enables the RRSA feature.
*   `false`: disables the RRSA feature.', example='true'),
  ingressDomainRebinding?: boolean(name='ingress_domain_rebinding', description='Specifies whether to remap the test domain name of the cluster. Valid values:

*   `true`: remaps the test domain name of the cluster.
*   `false`: does not remap the test domain name of the cluster.

Default value: `false`.', example='true'),
  ingressLoadbalancerId?: string(name='ingress_loadbalancer_id', description='The ID of the Server Load Balancer (SLB) instance that is associated with the cluster.', example='lb-wz97kes8tnndkpodw****'),
  instanceDeletionProtection?: boolean(name='instance_deletion_protection', description='Specifies whether to enable deletion protection for the instances in the cluster. If deletion protection is enabled, the instances in the cluster cannot be deleted in the console or by calling the API. Valid values:

*   `true`: enables deletion protection for the instances in the cluster. You cannot delete the instances in the cluster in the console or by calling the API.
*   `false`: disables deletion protection for the instances in the cluster. You can delete the instances in the cluster in the console or by calling the API.

Default value: `false`.', example='true'),
  maintenanceWindow?: MaintenanceWindow(name='maintenance_window', description='The maintenance window of the cluster. This parameter takes effect only in ACK Pro clusters.'),
  resourceGroupId?: string(name='resource_group_id', description='The ID of the resource group to which the cluster belongs.', example='rg-acfmyvw3wjm****'),
  systemEventsLogging?: {
    enabled?: boolean(name='enabled'),
    loggingProject?: string(name='logging_project'),
  }(name='system_events_logging'),
}

model ModifyClusterResponseBody = {
  clusterId?: string(name='cluster_id', description='The cluster ID.', example='cb95aa626a47740afbf6aa09****'),
  requestId?: string(name='request_id', description='The request ID.', example='687C5BAA-D103-4993-884B-C35E4314****'),
  taskId?: string(name='task_id', description='The task ID.', example='T-5a54309c80282e39ea00****'),
}

model ModifyClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyClusterResponseBody(name='body'),
}

async function modifyClusterWithOptions(ClusterId: string, request: ModifyClusterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyClusterResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.accessControlList)) {
    body['access_control_list'] = request.accessControlList;
  }
  if (!Util.isUnset(request.apiServerEip)) {
    body['api_server_eip'] = request.apiServerEip;
  }
  if (!Util.isUnset(request.apiServerEipId)) {
    body['api_server_eip_id'] = request.apiServerEipId;
  }
  if (!Util.isUnset(request.clusterName)) {
    body['cluster_name'] = request.clusterName;
  }
  if (!Util.isUnset(request.deletionProtection)) {
    body['deletion_protection'] = request.deletionProtection;
  }
  if (!Util.isUnset(request.enableRrsa)) {
    body['enable_rrsa'] = request.enableRrsa;
  }
  if (!Util.isUnset(request.ingressDomainRebinding)) {
    body['ingress_domain_rebinding'] = request.ingressDomainRebinding;
  }
  if (!Util.isUnset(request.ingressLoadbalancerId)) {
    body['ingress_loadbalancer_id'] = request.ingressLoadbalancerId;
  }
  if (!Util.isUnset(request.instanceDeletionProtection)) {
    body['instance_deletion_protection'] = request.instanceDeletionProtection;
  }
  if (!Util.isUnset(request.maintenanceWindow)) {
    body['maintenance_window'] = request.maintenanceWindow;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['resource_group_id'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.systemEventsLogging)) {
    body['system_events_logging'] = request.systemEventsLogging;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyCluster',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/api/v2/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyCluster(ClusterId: string, request: ModifyClusterRequest): ModifyClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyClusterWithOptions(ClusterId, request, headers, runtime);
}

model ModifyClusterAddonRequest {
  config?: string(name='config', description='The custom parameter settings that you want to use.', example='{"CpuRequest":"800m"}'),
}

model ModifyClusterAddonResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

/**
  * You can use this API operation to modify the components in a Container Service for Kubernetes (ACK) cluster or the control plane components in an ACK Pro cluster.
  * *   To query the customizable parameters of a component, call the `DescribeClusterAddonMetadata` API operation. For more information, see [Query the metadata of a specified component version](https://www.alibabacloud.com/help/zh/container-service-for-kubernetes/latest/query).
  * *   For more information about the customizable parameters of control plane components in ACK Pro clusters, see [Customize the parameters of control plane components in ACK Pro clusters](https://www.alibabacloud.com/help/zh/container-service-for-kubernetes/latest/customize-control-plane-parameters-for-a-professional-kubernetes-cluster).
  * After you call this operation, the component may be redeployed and restarted. We recommend that you assess the impact before you call this operation.
  *
  * @param request ModifyClusterAddonRequest
  * @param headers map
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyClusterAddonResponse
 */
async function modifyClusterAddonWithOptions(clusterId: string, componentId: string, request: ModifyClusterAddonRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyClusterAddonResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.config)) {
    body['config'] = request.config;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyClusterAddon',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(clusterId)}/components/${OpenApiUtil.getEncodeParam(componentId)}/config`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

/**
  * You can use this API operation to modify the components in a Container Service for Kubernetes (ACK) cluster or the control plane components in an ACK Pro cluster.
  * *   To query the customizable parameters of a component, call the `DescribeClusterAddonMetadata` API operation. For more information, see [Query the metadata of a specified component version](https://www.alibabacloud.com/help/zh/container-service-for-kubernetes/latest/query).
  * *   For more information about the customizable parameters of control plane components in ACK Pro clusters, see [Customize the parameters of control plane components in ACK Pro clusters](https://www.alibabacloud.com/help/zh/container-service-for-kubernetes/latest/customize-control-plane-parameters-for-a-professional-kubernetes-cluster).
  * After you call this operation, the component may be redeployed and restarted. We recommend that you assess the impact before you call this operation.
  *
  * @param request ModifyClusterAddonRequest
  * @return ModifyClusterAddonResponse
 */
async function modifyClusterAddon(clusterId: string, componentId: string, request: ModifyClusterAddonRequest): ModifyClusterAddonResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyClusterAddonWithOptions(clusterId, componentId, request, headers, runtime);
}

model ModifyClusterConfigurationRequest {
  customizeConfig?: [ 
    {
      configs?: [ 
        {
          key?: string(name='key', description='The name of the configuration item.', example='MaxRequestsInflight'),
          value?: string(name='value', description='The value of the configuration item.', example='100'),
        }
      ](name='configs', description='The custom configuration.'),
      name?: string(name='name', description='The name of the component.', example='kube-apiserver'),
    }
  ](name='customize_config', description='The custom configuration.'),
}

model ModifyClusterConfigurationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function modifyClusterConfigurationWithOptions(ClusterId: string, request: ModifyClusterConfigurationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyClusterConfigurationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.customizeConfig)) {
    body['customize_config'] = request.customizeConfig;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyClusterConfiguration',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/configuration`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function modifyClusterConfiguration(ClusterId: string, request: ModifyClusterConfigurationRequest): ModifyClusterConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyClusterConfigurationWithOptions(ClusterId, request, headers, runtime);
}

model ModifyClusterNodePoolRequest {
  autoScaling?: {
    eipBandwidth?: long(name='eip_bandwidth', description='The peak bandwidth of the EIP.', example='5'),
    eipInternetChargeType?: string(name='eip_internet_charge_type', description='The metering method of the EIP. Valid values:

*   `PayByBandwidth`: pay-by-bandwidth.
*   `PayByTraffic`: pay-by-data-transfer.

Default value: `PayByBandwidth`.', example='PayByBandwidth'),
    enable?: boolean(name='enable', description='Specifies whether to enable auto scaling. Valid values:

*   `true`: enables auto scaling for the node pool.
*   `false`: disables auto scaling for the node pool. If you set this parameter to false, other parameters in the `auto_scaling` section do not take effect.

Default value: `false`.', example='true'),
    isBondEip?: boolean(name='is_bond_eip', description='Specifies whether to associate an EIP with the node pool. Valid values:

*   `true`: associates an EIP with the node pool.
*   `false`: does not associate an EIP with the node pool.

Default value: `false`.', example='true'),
    maxInstances?: long(name='max_instances', description='The maximum number of Elastic Compute Service (ECS) instances that can be created in the node pool.', example='10'),
    minInstances?: long(name='min_instances', description='The minimum number of ECS instances that must be kept in the node pool.', example='2'),
    type?: string(name='type', description='The instance types that can be used for the auto scaling of the node pool. Valid values:

*   `cpu`: regular instance.
*   `gpu`: GPU-accelerated instance.
*   `gpushare`: shared GPU-accelerated instance.
*   `spot`: preemptible instance.

Default value: `cpu`.', example='cpu'),
  }(name='auto_scaling', description='The configurations about auto scaling.'),
  kubernetesConfig?: {
    cmsEnabled?: boolean(name='cms_enabled', description='Specifies whether to install the CloudMonitor agent on ECS nodes. After the CloudMonitor agent is installed on ECS nodes, you can view monitoring information about the instances in the CloudMonitor console. We recommend that you install the CloudMonitor agent. Valid values:

*   `true`: installs the CloudMonitor agent on ECS nodes.
*   `false`: does not install the CloudMonitor agent on ECS nodes.

Default value: `false`.', example='true'),
    cpuPolicy?: string(name='cpu_policy', description='The CPU management policy. The following policies are supported if the Kubernetes version of the cluster is 1.12.6 or later.

*   `static`: allows pods with specific resource characteristics on the node to be granted enhanced CPU affinity and exclusivity.
*   `none`: specifies that the default CPU affinity is used.

Default value: `none`.', example='none'),
    labels?: [
      Tag
    ](name='labels', description='The labels that you want to add to the nodes in the cluster. You must add labels based on the following rules:

*   Each label is a case-sensitive key-value pair. You can add up to 20 labels.
*   A key must be unique and cannot exceed 64 characters in length. A value can be empty and cannot exceed 128 characters in length. Keys and values cannot start with `aliyun`, `acs:`, `https://`, or `http://`. For more information, see [Labels and Selectors](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#syntax-and-character-set).'),
    runtime?: string(name='runtime', description='The name of the container runtime.', example='docker'),
    runtimeVersion?: string(name='runtime_version', description='The version of the container runtime.', example='19.03.5'),
    taints?: [
      Taint
    ](name='taints', description='The configurations of node taints.'),
    userData?: string(name='user_data', description='The user-defined data of the node pool. For more information, see [Prepare user data](~~49121~~).', example='IyEvdXNyL2Jpbi9iYXNoCmVjaG8gIkhlbGxvIEFDSyEi'),
  }(name='kubernetes_config', description='The configurations about the cluster.'),
  management?: {
    autoRepair?: boolean(name='auto_repair', description='Specifies whether to enable auto repair. This parameter takes effect only when you specify `enable=true`. Valid values:

*   `true`: enables auto repair.
*   `false`: disables auto repair.

Default value: `true`.', example='true'),
    autoRepairPolicy?: {
      restartNode?: boolean(name='restart_node', example='true'),
    }(name='auto_repair_policy'),
    autoUpgrade?: boolean(name='auto_upgrade', example='true'),
    autoUpgradePolicy?: {
      autoUpgradeKubelet?: boolean(name='auto_upgrade_kubelet', example='true'),
    }(name='auto_upgrade_policy'),
    autoVulFix?: boolean(name='auto_vul_fix', example='true'),
    autoVulFixPolicy?: {
      restartNode?: boolean(name='restart_node', example='true'),
      vulLevel?: string(name='vul_level', example='asap,nntf'),
    }(name='auto_vul_fix_policy'),
    enable?: boolean(name='enable', description='Specifies whether to enable the managed node pool feature. Valid values:

*   `true`: enables the managed node pool feature.
*   `false`: disables the managed node pool feature. Other parameters in this section take effect only when `enable=true` is specified.

Default value: `false`.', example='true'),
    upgradeConfig?: {
      autoUpgrade?: boolean(name='auto_upgrade', description='Specifies whether to enable auto update.

*   true: enables auto update.
*   false: disables auto update.

Default value: `true`.', example='true'),
      maxUnavailable?: long(name='max_unavailable', description='The maximum number of nodes that can be in the Unavailable state.

Valid values: 1 to 1000.

Default value: 1.', example='1'),
      surge?: long(name='surge', description='The number of additional nodes. Additional nodes are used to host the workloads of nodes that are being updated.

> We recommend that you set the number of additional nodes to a value that is no greater than the current number of nodes.', example='5'),
      surgePercentage?: long(name='surge_percentage', description='The percentage of additional nodes to the nodes in the node pool. You must set this parameter or `surge`.', example='0'),
    }(name='upgrade_config', description='The configurations about auto update. The configurations take effect only when you specify `enable=true`.'),
  }(name='management', description='The configurations about the managed node pool feature.'),
  nodepoolInfo?: {
    name?: string(name='name', description='The name of the node pool.

The name must be 1 to 63 characters in length, and can contain digits, letters, and hyphens (-). It cannot start with a hyphen (-).', example='default-nodepool'),
    resourceGroupId?: string(name='resource_group_id', description='The ID of the resource group.', example='rg-acfmyvw3wjm****'),
  }(name='nodepool_info', description='The configurations of the node pool.'),
  scalingGroup?: {
    autoRenew?: boolean(name='auto_renew', description='Specifies whether to enable auto-renewal for the nodes in the node pool. This parameter takes effect only when you set `instance_charge_type` to `PrePaid`. Valid values:

*   `true`: enables auto-renewal.
*   `false`: disables auto-renewal.

Default value: `true`.', example='true'),
    autoRenewPeriod?: long(name='auto_renew_period', description='The duration of the auto-renewal. This parameter takes effect and is required only when you set `instance_charge_type` to `PrePaid`.

If you specify `PeriodUnit=Month`, the valid values are 1, 2, 3, 6, and 12.', example='1'),
    compensateWithOnDemand?: boolean(name='compensate_with_on_demand', description='Specifies whether to automatically create pay-as-you-go instances to meet the required number of ECS instances if preemptible instances cannot be created due to reasons such as the cost or insufficient inventory. This parameter takes effect when you set `multi_az_policy` to `COST_OPTIMIZED`. Valid values:

*   `true`: automatically creates pay-as-you-go instances to meet the required number of ECS instances if preemptible instances cannot be created.
*   `false`: does not create pay-as-you-go instances to meet the required number of ECS instances if preemptible instances cannot be created.', example='true'),
    dataDisks?: [
      DataDisk
    ](name='data_disks', description='The configurations of the data disks that are mounted to the nodes in the node pool. You can mount 0 to 10 data disks. You can mount at most 10 data disks to the nodes in the node pool.'),
    desiredSize?: long(name='desired_size', description='The expected number of nodes in the node pool.', example='2'),
    imageId?: string(name='image_id', description='The ID of the custom image. You can call the `DescribeKubernetesVersionMetadata` operation to query the supported images. By default, the latest image is used.', example='aliyun_2_1903_x64_20G_alibase_20200904.vhd'),
    instanceChargeType?: string(name='instance_charge_type', description='The billing method of the nodes in the node pool. Valid values:

*   `PrePaid`: subscription.
*   `PostPaid`: pay-as-you-go.

Default value: `PostPaid`.', example='PostPaid'),
    instanceTypes?: [ string ](name='instance_types', description='A list of instance types. You can select multiple instance types. When the system needs to create a node, it starts from the first instance type until the node is created. The instance type that is used to create the node varies based on the actual instance stock.'),
    internetChargeType?: string(name='internet_charge_type', description='The metering method of the public IP address. Valid values:

*   `PayByBandwidth`: pay-by-bandwidth.
*   `PayByTraffic`: pay-by-data-transfer.', example='PayByBandwidth'),
    internetMaxBandwidthOut?: long(name='internet_max_bandwidth_out', description='The maximum outbound bandwidth of the public IP address of the node. Unit: Mbit/s. Valid values: 1 to 100.', example='5'),
    keyPair?: string(name='key_pair', description='The name of the key pair. You must set this parameter or the `login_password` parameter. You must set `key_pair` if the node pool is a managed node pool.', example='pro-nodepool'),
    loginPassword?: string(name='login_password', description='The password for SSH logon. You must set this parameter or the `key_pair` parameter. The password must be 8 to 30 characters in length, and must contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters.', example='Hello1234'),
    multiAzPolicy?: string(name='multi_az_policy', description='The ECS instance scaling policy for a multi-zone scaling group. Valid values:

*   `PRIORITY`: The scaling group is scaled based on the VSwitchIds.N parameter. If an ECS instance cannot be created in the zone where the vSwitch that has the highest priority resides, Auto Scaling creates the ECS instance in the zone where the vSwitch that has the next highest priority resides.

*   `COST_OPTIMIZED`: ECS instances are created based on the vCPU unit price in ascending order. Preemptible instances are preferably created when preemptible instance types are specified in the scaling configuration. You can set the `CompensateWithOnDemand` parameter to specify whether to automatically create pay-as-you-go instances when preemptible instances cannot be created due to insufficient resources.

    **

    **Note**The `COST_OPTIMIZED` setting takes effect only when multiple instance types are specified or at least one instance type is specified for preemptible instances.

*   `BALANCE`: ECS instances are evenly distributed across multiple zones specified by the scaling group. If ECS instances become imbalanced among multiple zones due to insufficient inventory, you can call the `RebalanceInstances` operation of Auto Scaling to balance the instance distribution among zones. For more information, see [RebalanceInstances](~~71516~~).

Default value: `PRIORITY`.', example='BALANCE'),
    onDemandBaseCapacity?: long(name='on_demand_base_capacity', description='The minimum number of pay-as-you-go instances that must be kept in the scaling group. Valid values: 0 to 1000. If the number of pay-as-you-go instances is less than the value of this parameter, Auto Scaling preferably creates pay-as-you-go instances.', example='0'),
    onDemandPercentageAboveBaseCapacity?: long(name='on_demand_percentage_above_base_capacity', description='The percentage of pay-as-you-go instances among the extra instances that exceed the number specified by `on_demand_base_capacity`. Valid values: 0 to 100.', example='20'),
    period?: long(name='period', description='The subscription duration of worker nodes. This parameter takes effect and is required only when `instance_charge_type` is set to `PrePaid`.

If `PeriodUnit=Month` is specified, the valid values are 1, 2, 3, 6, 12, 24, 36, 48, and 60.', example='1'),
    periodUnit?: string(name='period_unit', description='The billing cycle of the nodes in the node pool. This parameter is required if you set `instance_charge_type` to `PrePaid`.

The billing cycle is measured only in months.

Default value: `Month`.', example='Month'),
    platform?: string(name='platform', description='The OS platform. Valid values:

*   `AliyunLinux`
*   `CentOS`
*   `Windows`
*   `WindowsCore`', example='AliyunLinux'),
    privatePoolOptions?: {
      id?: string(name='id', description='The ID of the private node pool.', example='eap-bp67acfmxazb4****'),
      matchCriteria?: string(name='match_criteria', description='The type of private node pool. This parameter specifies the type of private pool that you want to use to create instances. A private pool is generated when an elasticity assurance or a capacity reservation takes effect. The system selects a private pool to start instances. Valid values:

*   `Open`: open private pool. The system selects an open private pool to start instances. If no matching open private pools are available, the resources in the public pool are used.
*   `Target`: specific private pool. The system uses the resources of the specified private pool to start instances. If the specified private pool is unavailable, instances cannot be started.
*   `None`: no private pool is used. The resources of private pools are not used to start instances.', example='Open'),
    }(name='private_pool_options', description='The configurations of the private node pool.'),
    rdsInstances?: [ string ](name='rds_instances', description='A list of ApsaraDB RDS instances.'),
    scalingPolicy?: string(name='scaling_policy', description='The scaling mode of the scaling group. Valid values:

*   `release`: the standard mode. ECS instances are created and released based on resource usage.
*   `recycle`: the swift mode. ECS instances are created, stopped, or started during scaling events. This reduces the time required for the next scale-out event. When the instance is stopped, you are charged only for the storage service. This does not apply to ECS instances that are attached with local disks.', example='release'),
    spotInstancePools?: long(name='spot_instance_pools', description='The number of instance types that are available for creating preemptible instances. Auto Scaling creates preemptible instances of multiple instance types that are available at the lowest cost. Valid values: 1 to 10.', example='5'),
    spotInstanceRemedy?: boolean(name='spot_instance_remedy', description='Specifies whether to supplement preemptible instances. If this parameter is set to true, when the scaling group receives a system message that a preemptible instance is to be reclaimed, the scaling group attempts to create a new instance to replace this instance. Valid values:

*   `true`: enables the supplementation of preemptible instances.
*   `false`: disables the supplementation of preemptible instances.', example='false'),
    spotPriceLimit?: [ 
      {
        instanceType?: string(name='instance_type', description='The instance type of the preemptible instances.', example='ecs.c6.large'),
        priceLimit?: string(name='price_limit', description='The maximum bid price of a preemptible instance.

Unit: USD/hour.', example='0.39'),
      }
    ](name='spot_price_limit', description='The bid configurations of preemptible instances.'),
    spotStrategy?: string(name='spot_strategy', description='The bidding policy of preemptible instances. Valid values:

*   `NoSpot`: non-preemptible instance.
*   `SpotWithPriceLimit`: specifies the highest bid for the preemptible instance.
*   `SpotAsPriceGo`: automatically submits bids based on the up-to-date market price.

For more information, see [Preemptible instances](~~157759~~).', example='SpotWithPriceLimit'),
    systemDiskCategory?: string(name='system_disk_category', description='The type of system disk. Valid values:

*   `cloud_efficiency`: ultra disk.
*   `cloud_ssd`: standard SSD.

Default value: `cloud_ssd`.', example='cloud_efficiency'),
    systemDiskPerformanceLevel?: string(name='system_disk_performance_level', description='The performance level (PL) of the system disk that you want to use for the node. This parameter takes effect only for enhanced SSDs. You can specify a higher PL if you increase the size of the system disk. For more information, see [ESSDs](~~122389~~).', example='PL1'),
    systemDiskSize?: long(name='system_disk_size', description='The system disk size of a node. Unit: GiB.

Valid values: 20 to 500.

The value of this parameter must be at least 20 and greater than or equal to the size of the specified image.

The default value is the greater one between 40 and the image size.', example='120'),
    tags?: [
      Tag
    ](name='tags', description='The labels that you want to add to the ECS instances.

A key must be unique and cannot exceed 128 characters in length. Neither keys nor values can start with aliyun or acs:. Neither keys nor values can contain https:// or http://.'),
    vswitchIds?: [ string ](name='vswitch_ids', description='The IDs of vSwitches. You can specify 1 to 20 vSwitches.

> We recommend that you select vSwitches in different zones to ensure high availability.'),
  }(name='scaling_group', description='The configurations of the scaling group.'),
  teeConfig?: {
    teeEnable?: boolean(name='tee_enable', description='Specifies whether to enable confidential computing for the cluster. Valid values:

*   `true`: enables confidential computing for the cluster.
*   `false`: disables confidential computing for the cluster.

Default value: `false`.', example='false'),
  }(name='tee_config', description='The configurations about confidential computing for the cluster.'),
  updateNodes?: boolean(name='update_nodes', description='Specifies whether to update node information, such as labels and taints.', example='true'),
}

model ModifyClusterNodePoolResponseBody = {
  nodepoolId?: string(name='nodepool_id', description='The node pool ID.', example='np737c3ac1ac684703b9e10673aa2c****'),
  taskId?: string(name='task_id', description='The task ID.', example='T-5fd211e924e1d00787000293'),
}

model ModifyClusterNodePoolResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyClusterNodePoolResponseBody(name='body'),
}

async function modifyClusterNodePoolWithOptions(ClusterId: string, NodepoolId: string, request: ModifyClusterNodePoolRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyClusterNodePoolResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.autoScaling)) {
    body['auto_scaling'] = request.autoScaling;
  }
  if (!Util.isUnset(request.kubernetesConfig)) {
    body['kubernetes_config'] = request.kubernetesConfig;
  }
  if (!Util.isUnset(request.management)) {
    body['management'] = request.management;
  }
  if (!Util.isUnset(request.nodepoolInfo)) {
    body['nodepool_info'] = request.nodepoolInfo;
  }
  if (!Util.isUnset(request.scalingGroup)) {
    body['scaling_group'] = request.scalingGroup;
  }
  if (!Util.isUnset(request.teeConfig)) {
    body['tee_config'] = request.teeConfig;
  }
  if (!Util.isUnset(request.updateNodes)) {
    body['update_nodes'] = request.updateNodes;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyClusterNodePool',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/nodepools/${OpenApiUtil.getEncodeParam(NodepoolId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyClusterNodePool(ClusterId: string, NodepoolId: string, request: ModifyClusterNodePoolRequest): ModifyClusterNodePoolResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyClusterNodePoolWithOptions(ClusterId, NodepoolId, request, headers, runtime);
}

model ModifyClusterTagsRequest {
  body?: [
    Tag
  ](name='body', description='The data of the labels that you want to modify.'),
}

model ModifyClusterTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function modifyClusterTagsWithOptions(ClusterId: string, request: ModifyClusterTagsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyClusterTagsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = Util.toArray(request.body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyClusterTags',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/tags`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function modifyClusterTags(ClusterId: string, request: ModifyClusterTagsRequest): ModifyClusterTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyClusterTagsWithOptions(ClusterId, request, headers, runtime);
}

model ModifyNodePoolNodeConfigRequest {
  kubeletConfig?: KubeletConfig(name='kubelet_config', description='The kubelet configuration.'),
  rollingPolicy?: {
    maxParallelism?: long(name='max_parallelism', description='The maximum number of nodes in the Unschedulable state.', example='3'),
  }(name='rolling_policy', description='The rotation configuration.'),
}

model ModifyNodePoolNodeConfigResponseBody = {
  nodepoolId?: string(name='nodepool_id', description='The node pool ID.', example='np737c3ac1ac684703b9e10673aa2c****'),
  requestId?: string(name='request_id', description='The request ID.', example='D7631D83-6E98-1949-B665-766A62xxxxxx'),
  taskId?: string(name='task_id', description='The task ID.', example='T-5fd211e924e1d00787xxxxxx'),
}

model ModifyNodePoolNodeConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyNodePoolNodeConfigResponseBody(name='body'),
}

/**
  * This operation progressively modifies the kubelet configuration of the nodes in a node pool and restarts the kubelet process, which may affect your businesses.
  *
  * @param request ModifyNodePoolNodeConfigRequest
  * @param headers map
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyNodePoolNodeConfigResponse
 */
async function modifyNodePoolNodeConfigWithOptions(ClusterId: string, NodepoolId: string, request: ModifyNodePoolNodeConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyNodePoolNodeConfigResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.kubeletConfig)) {
    body['kubelet_config'] = request.kubeletConfig;
  }
  if (!Util.isUnset(request.rollingPolicy)) {
    body['rolling_policy'] = request.rollingPolicy;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyNodePoolNodeConfig',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/nodepools/${OpenApiUtil.getEncodeParam(NodepoolId)}/node_config`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This operation progressively modifies the kubelet configuration of the nodes in a node pool and restarts the kubelet process, which may affect your businesses.
  *
  * @param request ModifyNodePoolNodeConfigRequest
  * @return ModifyNodePoolNodeConfigResponse
 */
async function modifyNodePoolNodeConfig(ClusterId: string, NodepoolId: string, request: ModifyNodePoolNodeConfigRequest): ModifyNodePoolNodeConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyNodePoolNodeConfigWithOptions(ClusterId, NodepoolId, request, headers, runtime);
}

model ModifyPolicyInstanceRequest {
  action?: string(name='action', description='The action of the policy. Valid values:

*   `deny`: Deployments that match the policy are denied.
*   `warn`: Alerts are generated for deployments that match the policy.', example='deny'),
  instanceName?: string(name='instance_name', description='The ID of the policy instance.', example='allowed-repos-cbhhb'),
  namespaces?: [ string ](name='namespaces', description='The namespaces to which the policy is applied. The policy is applied to all namespaces if this parameter is left empty.'),
  parameters?: map[string]any(name='parameters', description='The parameters of the policy instance. For more information, see [Predefined security policies of ACK](~~359819~~).', example='"restrictedNamespaces": [ "test" ]'),
}

model ModifyPolicyInstanceResponseBody = {
  instances?: [ string ](name='instances', description='The list of policy instances that are updated.'),
}

model ModifyPolicyInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyPolicyInstanceResponseBody(name='body'),
}

async function modifyPolicyInstanceWithOptions(clusterId: string, policyName: string, request: ModifyPolicyInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyPolicyInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.action)) {
    body['action'] = request.action;
  }
  if (!Util.isUnset(request.instanceName)) {
    body['instance_name'] = request.instanceName;
  }
  if (!Util.isUnset(request.namespaces)) {
    body['namespaces'] = request.namespaces;
  }
  if (!Util.isUnset(request.parameters)) {
    body['parameters'] = request.parameters;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyPolicyInstance',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(clusterId)}/policies/${OpenApiUtil.getEncodeParam(policyName)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyPolicyInstance(clusterId: string, policyName: string, request: ModifyPolicyInstanceRequest): ModifyPolicyInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyPolicyInstanceWithOptions(clusterId, policyName, request, headers, runtime);
}

model OpenAckServiceRequest {
  type?: string(name='type', description='The type of ACK service that you want to activate. Valid values:

*   `propayasgo`: ACK Pro
*   `edgepayasgo`: ACK Edge
*   `gspayasgo`: ACK for Alibaba Cloud Genomics Service (AGS)', example='propayasgo'),
}

model OpenAckServiceResponseBody = {
  orderId?: string(name='order_id', description='The ID of the order.', example='2067*******0374'),
  requestId?: string(name='request_id', description='The request ID.', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model OpenAckServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OpenAckServiceResponseBody(name='body'),
}

/**
  * *   You can activate ACK by using Alibaba Cloud accounts.
  * *   To activate ACK by using RAM users, you need to grant the AdministratorAccess permission to the RAM users.
  *
  * @param request OpenAckServiceRequest
  * @param headers map
  * @param runtime runtime options for this request RuntimeOptions
  * @return OpenAckServiceResponse
 */
async function openAckServiceWithOptions(request: OpenAckServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): OpenAckServiceResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.type)) {
    query['type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OpenAckService',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/service/open`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   You can activate ACK by using Alibaba Cloud accounts.
  * *   To activate ACK by using RAM users, you need to grant the AdministratorAccess permission to the RAM users.
  *
  * @param request OpenAckServiceRequest
  * @return OpenAckServiceResponse
 */
async function openAckService(request: OpenAckServiceRequest): OpenAckServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return openAckServiceWithOptions(request, headers, runtime);
}

model PauseClusterUpgradeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function pauseClusterUpgradeWithOptions(ClusterId: string, headers: map[string]string, runtime: Util.RuntimeOptions): PauseClusterUpgradeResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'PauseClusterUpgrade',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/api/v2/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/upgrade/pause`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function pauseClusterUpgrade(ClusterId: string): PauseClusterUpgradeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return pauseClusterUpgradeWithOptions(ClusterId, headers, runtime);
}

model PauseComponentUpgradeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function pauseComponentUpgradeWithOptions(clusterid: string, componentid: string, headers: map[string]string, runtime: Util.RuntimeOptions): PauseComponentUpgradeResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'PauseComponentUpgrade',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(clusterid)}/components/${OpenApiUtil.getEncodeParam(componentid)}/pause`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function pauseComponentUpgrade(clusterid: string, componentid: string): PauseComponentUpgradeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return pauseComponentUpgradeWithOptions(clusterid, componentid, headers, runtime);
}

model PauseTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function pauseTaskWithOptions(taskId: string, headers: map[string]string, runtime: Util.RuntimeOptions): PauseTaskResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'PauseTask',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/tasks/${OpenApiUtil.getEncodeParam(taskId)}/pause`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function pauseTask(taskId: string): PauseTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return pauseTaskWithOptions(taskId, headers, runtime);
}

model RemoveClusterNodesRequest {
  drainNode?: boolean(name='drain_node', description='Specifies whether to evict all pods from the nodes that you want to remove.'),
  nodes?: [ string ](name='nodes', description='The list of nodes to be removed.'),
  releaseNode?: boolean(name='release_node', description='Specifies whether to release the Elastic Compute Service (ECS) instances when they are removed from the cluster.'),
}

model RemoveClusterNodesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

/**
  * @deprecated
  * ****
  * *   When you remove a node, the pods that run on the node are migrated to other nodes. This may cause service interruptions. We recommend that you remove nodes during off-peak hours.
  * *   Unknown errors may occur when you remove nodes. Before you remove nodes, back up the data on the nodes.
  * *   Nodes remain in the Unschedulable state when they are being removed.
  * *   You can remove only worker nodes. You cannot remove master nodes.
  *
  * @param request RemoveClusterNodesRequest
  * @param headers map
  * @param runtime runtime options for this request RuntimeOptions
  * @return RemoveClusterNodesResponse
 */
// Deprecated
async function removeClusterNodesWithOptions(ClusterId: string, request: RemoveClusterNodesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveClusterNodesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.drainNode)) {
    body['drain_node'] = request.drainNode;
  }
  if (!Util.isUnset(request.nodes)) {
    body['nodes'] = request.nodes;
  }
  if (!Util.isUnset(request.releaseNode)) {
    body['release_node'] = request.releaseNode;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RemoveClusterNodes',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/api/v2/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/nodes/remove`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  * ****
  * *   When you remove a node, the pods that run on the node are migrated to other nodes. This may cause service interruptions. We recommend that you remove nodes during off-peak hours.
  * *   Unknown errors may occur when you remove nodes. Before you remove nodes, back up the data on the nodes.
  * *   Nodes remain in the Unschedulable state when they are being removed.
  * *   You can remove only worker nodes. You cannot remove master nodes.
  *
  * @param request RemoveClusterNodesRequest
  * @return RemoveClusterNodesResponse
 */
// Deprecated
async function removeClusterNodes(ClusterId: string, request: RemoveClusterNodesRequest): RemoveClusterNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return removeClusterNodesWithOptions(ClusterId, request, headers, runtime);
}

model RemoveNodePoolNodesRequest {
  drainNode?: boolean(name='drain_node', description='Specifies whether to drain the nodes that you want to remove. Valid values:

*   true: drain the nodes that you want to remove.
*   false: do not drain the nodes that you want to remove.', example='true'),
  instanceIds?: [ string ](name='instance_ids', description='A list of instances that you want to remove.'),
  nodes?: [ string ](name='nodes', description='A list of nodes that you want to remove.'),
  releaseNode?: boolean(name='release_node', description='Specifies whether to release the nodes after they are removed. Valid values:

*   true: release the nodes after they are removed.
*   false: do not release the nodes after they are removed.', example='true'),
}

model RemoveNodePoolNodesShrinkRequest {
  drainNode?: boolean(name='drain_node', description='Specifies whether to drain the nodes that you want to remove. Valid values:

*   true: drain the nodes that you want to remove.
*   false: do not drain the nodes that you want to remove.', example='true'),
  instanceIdsShrink?: string(name='instance_ids', description='A list of instances that you want to remove.'),
  nodesShrink?: string(name='nodes', description='A list of nodes that you want to remove.'),
  releaseNode?: boolean(name='release_node', description='Specifies whether to release the nodes after they are removed. Valid values:

*   true: release the nodes after they are removed.
*   false: do not release the nodes after they are removed.', example='true'),
}

model RemoveNodePoolNodesResponseBody = {
  requestId?: string(name='request_id', description='The request ID.', example='A9891419-D125-4D89-AFCA-68846675E2F7'),
  taskId?: string(name='task_id', description='The task ID.', example='T-62a944794ee141074400****'),
}

model RemoveNodePoolNodesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveNodePoolNodesResponseBody(name='body'),
}

/**
  * **
  * ****
  * *   When you remove a node, the pods that run on the node are migrated to other nodes. This may cause service interruptions. We recommend that you remove nodes during off-peak hours. - The operation may have unexpected risks. Back up the data before you perform this operation. - When the system removes a node, it sets the status of the node to Unschedulable. - The system removes only worker nodes. It does not remove master nodes.
  *
  * @param tmpReq RemoveNodePoolNodesRequest
  * @param headers map
  * @param runtime runtime options for this request RuntimeOptions
  * @return RemoveNodePoolNodesResponse
 */
async function removeNodePoolNodesWithOptions(ClusterId: string, NodepoolId: string, tmpReq: RemoveNodePoolNodesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveNodePoolNodesResponse {
  Util.validateModel(tmpReq);
  var request = new RemoveNodePoolNodesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.instanceIds)) {
    request.instanceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instanceIds, 'instance_ids', 'json');
  }
  if (!Util.isUnset(tmpReq.nodes)) {
    request.nodesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.nodes, 'nodes', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.drainNode)) {
    query['drain_node'] = request.drainNode;
  }
  if (!Util.isUnset(request.instanceIdsShrink)) {
    query['instance_ids'] = request.instanceIdsShrink;
  }
  if (!Util.isUnset(request.nodesShrink)) {
    query['nodes'] = request.nodesShrink;
  }
  if (!Util.isUnset(request.releaseNode)) {
    query['release_node'] = request.releaseNode;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveNodePoolNodes',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/nodepools/${OpenApiUtil.getEncodeParam(NodepoolId)}/nodes`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * **
  * ****
  * *   When you remove a node, the pods that run on the node are migrated to other nodes. This may cause service interruptions. We recommend that you remove nodes during off-peak hours. - The operation may have unexpected risks. Back up the data before you perform this operation. - When the system removes a node, it sets the status of the node to Unschedulable. - The system removes only worker nodes. It does not remove master nodes.
  *
  * @param request RemoveNodePoolNodesRequest
  * @return RemoveNodePoolNodesResponse
 */
async function removeNodePoolNodes(ClusterId: string, NodepoolId: string, request: RemoveNodePoolNodesRequest): RemoveNodePoolNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return removeNodePoolNodesWithOptions(ClusterId, NodepoolId, request, headers, runtime);
}

model RemoveWorkflowResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function removeWorkflowWithOptions(workflowName: string, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveWorkflowResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'RemoveWorkflow',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/gs/workflow/${OpenApiUtil.getEncodeParam(workflowName)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function removeWorkflow(workflowName: string): RemoveWorkflowResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return removeWorkflowWithOptions(workflowName, headers, runtime);
}

model RepairClusterNodePoolRequest {
  autoRestart?: boolean(name='auto_restart', example='true'),
  nodes?: [ string ](name='nodes', description='The list of nodes. If you do not specify nodes, all nodes in the node pool are selected.'),
}

model RepairClusterNodePoolResponseBody = {
  requestId?: string(name='request_id', description='The request ID.', example='db82195b-75a8-40e5-9be4-16f1829dc624'),
  taskId?: string(name='task_id', description='The ID of the task.', example='T-613b19bbd160ad4928000001'),
}

model RepairClusterNodePoolResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RepairClusterNodePoolResponseBody(name='body'),
}

async function repairClusterNodePoolWithOptions(clusterId: string, nodepoolId: string, request: RepairClusterNodePoolRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RepairClusterNodePoolResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.autoRestart)) {
    body['auto_restart'] = request.autoRestart;
  }
  if (!Util.isUnset(request.nodes)) {
    body['nodes'] = request.nodes;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RepairClusterNodePool',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(clusterId)}/nodepools/${OpenApiUtil.getEncodeParam(nodepoolId)}/repair`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function repairClusterNodePool(clusterId: string, nodepoolId: string, request: RepairClusterNodePoolRequest): RepairClusterNodePoolResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return repairClusterNodePoolWithOptions(clusterId, nodepoolId, request, headers, runtime);
}

model ResumeComponentUpgradeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function resumeComponentUpgradeWithOptions(clusterid: string, componentid: string, headers: map[string]string, runtime: Util.RuntimeOptions): ResumeComponentUpgradeResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ResumeComponentUpgrade',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(clusterid)}/components/${OpenApiUtil.getEncodeParam(componentid)}/resume`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function resumeComponentUpgrade(clusterid: string, componentid: string): ResumeComponentUpgradeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return resumeComponentUpgradeWithOptions(clusterid, componentid, headers, runtime);
}

model ResumeTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function resumeTaskWithOptions(taskId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ResumeTaskResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ResumeTask',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/tasks/${OpenApiUtil.getEncodeParam(taskId)}/resume`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function resumeTask(taskId: string): ResumeTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return resumeTaskWithOptions(taskId, headers, runtime);
}

model ResumeUpgradeClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function resumeUpgradeClusterWithOptions(ClusterId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ResumeUpgradeClusterResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ResumeUpgradeCluster',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/api/v2/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/upgrade/resume`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function resumeUpgradeCluster(ClusterId: string): ResumeUpgradeClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return resumeUpgradeClusterWithOptions(ClusterId, headers, runtime);
}

model RunClusterCheckRequest {
  options?: map[string]string(name='options'),
  type?: string(name='type', example='ClusterUpgrade'),
}

model RunClusterCheckResponseBody = {
  checkId?: string(name='check_id', example='1697100584236600453-ce0da5a1d627e4e9e9f96cae8ad07****-clustercheck-lboto'),
  requestId?: string(name='request_id', description='Id of the request', example='F04DF81D-5C12-1524-B36A-86E02526****'),
}

model RunClusterCheckResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RunClusterCheckResponseBody(name='body'),
}

async function runClusterCheckWithOptions(clusterId: string, request: RunClusterCheckRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RunClusterCheckResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.options)) {
    body['options'] = request.options;
  }
  if (!Util.isUnset(request.type)) {
    body['type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RunClusterCheck',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(clusterId)}/checks`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function runClusterCheck(clusterId: string, request: RunClusterCheckRequest): RunClusterCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return runClusterCheckWithOptions(clusterId, request, headers, runtime);
}

model ScaleClusterRequest {
  cloudMonitorFlags?: boolean(name='cloud_monitor_flags'),
  count?: long(name='count'),
  cpuPolicy?: string(name='cpu_policy'),
  disableRollback?: boolean(name='disable_rollback'),
  keyPair?: string(name='key_pair'),
  loginPassword?: string(name='login_password'),
  tags?: [ 
    {
      key?: string(name='key'),
    }
  ](name='tags'),
  taints?: [ 
    {
      effect?: string(name='effect'),
      key?: string(name='key'),
      value?: string(name='value'),
    }
  ](name='taints'),
  vswitchIds?: [ string ](name='vswitch_ids'),
  workerAutoRenew?: boolean(name='worker_auto_renew'),
  workerAutoRenewPeriod?: long(name='worker_auto_renew_period'),
  workerDataDisk?: boolean(name='worker_data_disk'),
  workerDataDisks?: [ 
    {
      category?: string(name='category'),
      encrypted?: string(name='encrypted'),
      size?: string(name='size'),
    }
  ](name='worker_data_disks'),
  workerInstanceChargeType?: string(name='worker_instance_charge_type'),
  workerInstanceTypes?: [ string ](name='worker_instance_types'),
  workerPeriod?: long(name='worker_period'),
  workerPeriodUnit?: string(name='worker_period_unit'),
  workerSystemDiskCategory?: string(name='worker_system_disk_category'),
  workerSystemDiskSize?: long(name='worker_system_disk_size'),
}

model ScaleClusterResponseBody = {
  clusterId?: string(name='cluster_id'),
  requestId?: string(name='request_id'),
  taskId?: string(name='task_id'),
}

model ScaleClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ScaleClusterResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request ScaleClusterRequest
  * @param headers map
  * @param runtime runtime options for this request RuntimeOptions
  * @return ScaleClusterResponse
 */
// Deprecated
async function scaleClusterWithOptions(ClusterId: string, request: ScaleClusterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ScaleClusterResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.cloudMonitorFlags)) {
    body['cloud_monitor_flags'] = request.cloudMonitorFlags;
  }
  if (!Util.isUnset(request.count)) {
    body['count'] = request.count;
  }
  if (!Util.isUnset(request.cpuPolicy)) {
    body['cpu_policy'] = request.cpuPolicy;
  }
  if (!Util.isUnset(request.disableRollback)) {
    body['disable_rollback'] = request.disableRollback;
  }
  if (!Util.isUnset(request.keyPair)) {
    body['key_pair'] = request.keyPair;
  }
  if (!Util.isUnset(request.loginPassword)) {
    body['login_password'] = request.loginPassword;
  }
  if (!Util.isUnset(request.tags)) {
    body['tags'] = request.tags;
  }
  if (!Util.isUnset(request.taints)) {
    body['taints'] = request.taints;
  }
  if (!Util.isUnset(request.vswitchIds)) {
    body['vswitch_ids'] = request.vswitchIds;
  }
  if (!Util.isUnset(request.workerAutoRenew)) {
    body['worker_auto_renew'] = request.workerAutoRenew;
  }
  if (!Util.isUnset(request.workerAutoRenewPeriod)) {
    body['worker_auto_renew_period'] = request.workerAutoRenewPeriod;
  }
  if (!Util.isUnset(request.workerDataDisk)) {
    body['worker_data_disk'] = request.workerDataDisk;
  }
  if (!Util.isUnset(request.workerDataDisks)) {
    body['worker_data_disks'] = request.workerDataDisks;
  }
  if (!Util.isUnset(request.workerInstanceChargeType)) {
    body['worker_instance_charge_type'] = request.workerInstanceChargeType;
  }
  if (!Util.isUnset(request.workerInstanceTypes)) {
    body['worker_instance_types'] = request.workerInstanceTypes;
  }
  if (!Util.isUnset(request.workerPeriod)) {
    body['worker_period'] = request.workerPeriod;
  }
  if (!Util.isUnset(request.workerPeriodUnit)) {
    body['worker_period_unit'] = request.workerPeriodUnit;
  }
  if (!Util.isUnset(request.workerSystemDiskCategory)) {
    body['worker_system_disk_category'] = request.workerSystemDiskCategory;
  }
  if (!Util.isUnset(request.workerSystemDiskSize)) {
    body['worker_system_disk_size'] = request.workerSystemDiskSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ScaleCluster',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request ScaleClusterRequest
  * @return ScaleClusterResponse
 */
// Deprecated
async function scaleCluster(ClusterId: string, request: ScaleClusterRequest): ScaleClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return scaleClusterWithOptions(ClusterId, request, headers, runtime);
}

model ScaleClusterNodePoolRequest {
  count?: long(name='count', description='The number of worker nodes that you want to add. You can add at most 500 nodes in one API call. The maximum number of nodes that can be added is limited by the quota of nodes in the cluster.', example='1'),
}

model ScaleClusterNodePoolResponseBody = {
  taskId?: string(name='task_id', description='The task ID.', example='T-5faa48fb31b6b8078d00****'),
}

model ScaleClusterNodePoolResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ScaleClusterNodePoolResponseBody(name='body'),
}

async function scaleClusterNodePoolWithOptions(ClusterId: string, NodepoolId: string, request: ScaleClusterNodePoolRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ScaleClusterNodePoolResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.count)) {
    body['count'] = request.count;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ScaleClusterNodePool',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/nodepools/${OpenApiUtil.getEncodeParam(NodepoolId)}`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function scaleClusterNodePool(ClusterId: string, NodepoolId: string, request: ScaleClusterNodePoolRequest): ScaleClusterNodePoolResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return scaleClusterNodePoolWithOptions(ClusterId, NodepoolId, request, headers, runtime);
}

model ScaleOutClusterRequest {
  cloudMonitorFlags?: boolean(name='cloud_monitor_flags', description='Specifies whether to install the CloudMonitor agent. Valid values:

*   `true`: installs the CloudMonitor agent.
*   `false`: does not install the CloudMonitor agent.

Default value: `false`.', example='true'),
  count?: long(name='count', description='The number of worker nodes that you want to add.', example='3'),
  cpuPolicy?: string(name='cpu_policy', description='The CPU management policy. The following policies are supported if the Kubernetes version of the cluster is 1.12.6 or later.

*   `static`: This policy allows pods with specific resource characteristics on the node to be granted with enhanced CPU affinity and exclusivity.
*   `none`: specifies that the default CPU affinity is used.

Default value: `none`.', example='none'),
  imageId?: string(name='image_id', description='Specifies a custom image for nodes. By default, the image provided by ACK is used. You can select a custom image to replace the default image. For more information, see [Custom images](~~146647~~).', example='m-bp16z7xko3vvv8gt****'),
  keyPair?: string(name='key_pair', description='The name of the key pair. You must set this parameter or the `login_password` parameter.', example='secrity-key'),
  loginPassword?: string(name='login_password', description='The password for SSH logon. You must set this parameter or the `key_pair` parameter. The password must be 8 to 30 characters in length, and must contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters.', example='Hello@1234'),
  rdsInstances?: [ string ](name='rds_instances', description='After you specify the list of RDS instances, the ECS instances in the cluster are automatically added to the whitelist of the RDS instances.'),
  runtime?: Runtime(name='runtime', description='The container runtime.'),
  tags?: [
    Tag
  ](name='tags', description='The labels that you want to add to nodes. You must add labels based on the following rules:

*   Each label is a case-sensitive key-value pair. You can add up to 20 labels.
*   A key must be unique and cannot exceed 64 characters in length. A value can be empty and cannot exceed 128 characters in length. Keys and values cannot start with aliyun, acs:, https://, or http://. For more information, see [Labels and Selectors](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#syntax-and-character-set).'),
  taints?: [
    Taint
  ](name='taints', description='The taints that you want to add to nodes. Taints are added to nodes to prevent pods from being scheduled to inappropriate nodes. However, tolerations allow pods to be scheduled to nodes with matching taints. For more information, see [taint-and-toleration](https://kubernetes.io/zh/docs/concepts/scheduling-eviction/taint-and-toleration/).'),
  userData?: string(name='user_data', description='The user data of the node pool. For more information, see [Generate user-defined data](~~49121~~).', example='IyEvdXNyL2Jpbi9iYXNoCmVjaG8gIkhlbGxvIEFD****'),
  vswitchIds?: [ string ](name='vswitch_ids', description='The IDs of the vSwitches. You can select one to three vSwitches when you create a cluster. We recommend that you select vSwitches in different zones to ensure high availability.'),
  workerAutoRenew?: boolean(name='worker_auto_renew', description='Specifies whether to enable auto-renewal for worker nodes. This parameter takes effect only if `worker_instance_charge_type` is set to `PrePaid`. Valid values:

*   `true`: enables auto-renewal.
*   `false`: disables auto-renewal.

Default value: `true`.', example='true'),
  workerAutoRenewPeriod?: long(name='worker_auto_renew_period', description='The auto-renewal period for worker nodes after the subscriptions of worker nodes expire. This parameter takes effect and is required only if the subscription billing method is selected for worker nodes.

Valid values: 1, 2, 3, 6, and 12.

Default value: `1`.', example='6'),
  workerDataDisks?: [ 
    {
      autoSnapshotPolicyId?: string(name='auto_snapshot_policy_id', description='The ID of an automatic snapshot policy. Automatic backup is performed for a disk based on the specified automatic snapshot policy.

By default, this parameter is empty. This indicates that automatic backup is disabled.', example='sp-bp14yziiuvu3s6jn****'),
      category?: string(name='category', description='The data disk type.', example='cloud_essd'),
      encrypted?: string(name='encrypted', description='Specifies whether to encrypt the data disks. Valid values:

*   `true`: encrypts data disks.
*   `false`: does not encrypt data disks.

Default value: `false`.', example='true'),
      size?: string(name='size', description='The size of the data disk. Valid values: 40 to 32767.', example='120'),
    }
  ](name='worker_data_disks', description='The configuration of the data disk that is mounted to worker nodes. The configuration includes the disk type and disk size.'),
  workerInstanceChargeType?: string(name='worker_instance_charge_type', description='The billing method of worker nodes. Valid values:

*   `PrePaid`: subscription.
*   `PostPaid`: pay-as-you-go

Default value: `PostPaid`', example='PrePaid'),
  workerInstanceTypes?: [ string ](name='worker_instance_types', description='The instance configurations of worker nodes.'),
  workerPeriod?: long(name='worker_period', description='The subscription duration of worker nodes. This parameter takes effect and is required only if `worker_instance_charge_type` is set to `PrePaid`.

Valid values: 1, 2, 3, 6, 12, 24, 36, 48, and 60.

Default value: 1.', example='1'),
  workerPeriodUnit?: string(name='worker_period_unit', description='The billing cycle of worker nodes. This parameter is required if worker_instance_charge_type is set to `PrePaid`.

Set the value to `Month`. Worker nodes are billed only on a monthly basis.', example='Month'),
  workerSystemDiskCategory?: string(name='worker_system_disk_category', description='The type of system disk that you want to use for worker nodes. Valid values:

*   `cloud_efficiency`: ultra disk.
*   `cloud_ssd`: standard SSD.
*   `cloud_essd`: enhanced SSD (ESSD).

Default value: `cloud_ssd`.', example='cloud_efficiency'),
  workerSystemDiskSize?: long(name='worker_system_disk_size', description='The size of the system disk that you want to use for worker nodes. Unit: GiB.

Valid values: 40 to 500.

Default value: `120`.', example='120'),
}

model ScaleOutClusterResponseBody = {
  clusterId?: string(name='cluster_id', description='The cluster ID.', example='c82e6987e2961451182edacd74faf****'),
  requestId?: string(name='request_id', description='The request ID.', example='687C5BAA-D103-4993-884B-C35E4314A1E1'),
  taskId?: string(name='task_id', description='The task ID.', example='T-5a54309c80282e39ea00002f'),
}

model ScaleOutClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ScaleOutClusterResponseBody(name='body'),
}

/**
  * **
  * ****The ScaleOutCluster API operation is phased out. You must call the node pool-related API operations to manage nodes. If you want to add worker nodes to a Container Service for Kubernetes (ACK) cluster, call the ScaleClusterNodePool API operation. For more information, see [ScaleClusterNodePool](~~184928~~).
  *
  * @param request ScaleOutClusterRequest
  * @param headers map
  * @param runtime runtime options for this request RuntimeOptions
  * @return ScaleOutClusterResponse
 */
async function scaleOutClusterWithOptions(ClusterId: string, request: ScaleOutClusterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ScaleOutClusterResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.cloudMonitorFlags)) {
    body['cloud_monitor_flags'] = request.cloudMonitorFlags;
  }
  if (!Util.isUnset(request.count)) {
    body['count'] = request.count;
  }
  if (!Util.isUnset(request.cpuPolicy)) {
    body['cpu_policy'] = request.cpuPolicy;
  }
  if (!Util.isUnset(request.imageId)) {
    body['image_id'] = request.imageId;
  }
  if (!Util.isUnset(request.keyPair)) {
    body['key_pair'] = request.keyPair;
  }
  if (!Util.isUnset(request.loginPassword)) {
    body['login_password'] = request.loginPassword;
  }
  if (!Util.isUnset(request.rdsInstances)) {
    body['rds_instances'] = request.rdsInstances;
  }
  if (!Util.isUnset(request.runtime)) {
    body['runtime'] = request.runtime;
  }
  if (!Util.isUnset(request.tags)) {
    body['tags'] = request.tags;
  }
  if (!Util.isUnset(request.taints)) {
    body['taints'] = request.taints;
  }
  if (!Util.isUnset(request.userData)) {
    body['user_data'] = request.userData;
  }
  if (!Util.isUnset(request.vswitchIds)) {
    body['vswitch_ids'] = request.vswitchIds;
  }
  if (!Util.isUnset(request.workerAutoRenew)) {
    body['worker_auto_renew'] = request.workerAutoRenew;
  }
  if (!Util.isUnset(request.workerAutoRenewPeriod)) {
    body['worker_auto_renew_period'] = request.workerAutoRenewPeriod;
  }
  if (!Util.isUnset(request.workerDataDisks)) {
    body['worker_data_disks'] = request.workerDataDisks;
  }
  if (!Util.isUnset(request.workerInstanceChargeType)) {
    body['worker_instance_charge_type'] = request.workerInstanceChargeType;
  }
  if (!Util.isUnset(request.workerInstanceTypes)) {
    body['worker_instance_types'] = request.workerInstanceTypes;
  }
  if (!Util.isUnset(request.workerPeriod)) {
    body['worker_period'] = request.workerPeriod;
  }
  if (!Util.isUnset(request.workerPeriodUnit)) {
    body['worker_period_unit'] = request.workerPeriodUnit;
  }
  if (!Util.isUnset(request.workerSystemDiskCategory)) {
    body['worker_system_disk_category'] = request.workerSystemDiskCategory;
  }
  if (!Util.isUnset(request.workerSystemDiskSize)) {
    body['worker_system_disk_size'] = request.workerSystemDiskSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ScaleOutCluster',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/api/v2/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * **
  * ****The ScaleOutCluster API operation is phased out. You must call the node pool-related API operations to manage nodes. If you want to add worker nodes to a Container Service for Kubernetes (ACK) cluster, call the ScaleClusterNodePool API operation. For more information, see [ScaleClusterNodePool](~~184928~~).
  *
  * @param request ScaleOutClusterRequest
  * @return ScaleOutClusterResponse
 */
async function scaleOutCluster(ClusterId: string, request: ScaleOutClusterRequest): ScaleOutClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return scaleOutClusterWithOptions(ClusterId, request, headers, runtime);
}

model ScanClusterVulsResponseBody = {
  requestId?: string(name='request_id', description='The request ID.', example='687C5BAA-D103-4993-884B-C35E4314A1E1'),
  taskId?: string(name='task_id', description='The task ID.', example='T-xascadasd*****'),
}

model ScanClusterVulsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ScanClusterVulsResponseBody(name='body'),
}

async function scanClusterVulsWithOptions(clusterId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ScanClusterVulsResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ScanClusterVuls',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(clusterId)}/vuls/scan`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function scanClusterVuls(clusterId: string): ScanClusterVulsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return scanClusterVulsWithOptions(clusterId, headers, runtime);
}

model StartAlertResponseBody = {
  msg?: string(name='msg', description='The message returned.', example='success'),
  status?: boolean(name='status', description='The status.', example='true'),
}

model StartAlertResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartAlertResponseBody(name='body'),
}

async function startAlertWithOptions(ClusterId: string, headers: map[string]string, runtime: Util.RuntimeOptions): StartAlertResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'StartAlert',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/alert/${OpenApiUtil.getEncodeParam(ClusterId)}/alert_rule/start`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startAlert(ClusterId: string): StartAlertResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return startAlertWithOptions(ClusterId, headers, runtime);
}

model StartWorkflowRequest {
  mappingBamOutFilename?: string(name='mapping_bam_out_filename', description='The name of the output BAM file.', example='abc.bam'),
  mappingBamOutPath?: string(name='mapping_bam_out_path', description='The output path of the Binary Alignment Map (BAM) file.', example='output/bamDirName'),
  mappingBucketName?: string(name='mapping_bucket_name', description='The name of the OSS bucket that stores the data of the mapping workflow.', example='gene-shenzhen'),
  mappingFastqFirstFilename?: string(name='mapping_fastq_first_filename', description='The name of the first FASTQ file of the mapping workflow.', example='MGISEQ2000_PCR-free_NA12878_1_V100003043_L01_1.fq.gz'),
  mappingFastqPath?: string(name='mapping_fastq_path', description='The path of the FASTQ files of the mapping workflow.', example='fastq/MGISEQ2000'),
  mappingFastqSecondFilename?: string(name='mapping_fastq_second_filename', description='The name of the second FASTQ file of the mapping workflow.', example='MGISEQ2000_PCR-free_NA12878_1_V100003043_L01_2.fq.gz'),
  mappingIsMarkDup?: string(name='mapping_is_mark_dup', description='Specifies whether to mark duplicate values.', example='true'),
  mappingOssRegion?: string(name='mapping_oss_region', description='The region where the Object Storage Service (OSS) bucket that stores the data of the mapping workflow is deployed.', example='cn-hangzhou'),
  mappingReferencePath?: string(name='mapping_reference_path', description='The path of the reference files of the mapping workflow.', example='reference/hg19'),
  service?: string(name='service', description='The type of service-level agreement (SLA). Valid values:

*   s: the silver level (S-level). It requires 1 extra minute to process every 1.5 billion base pairs beyond the limit of 90 billion base pairs.
*   g: the gold level (G-level). It requires 1 extra minute to process every 2 billion base pairs beyond the limit of 90 billion base pairs.
*   p: the platinum level (P-level). It requires 1 extra minute to process every 3 billion base pairs beyond the limit of 90 billion base pairs.', example='s'),
  wgsBucketName?: string(name='wgs_bucket_name', description='The name of the OSS bucket that stores the data of the WGS workflow.', example='gene-shenzhen'),
  wgsFastqFirstFilename?: string(name='wgs_fastq_first_filename', description='The name of the first FASTQ file of the WGS workflow.', example='MGISEQ2000_PCR-free_NA12878_1_V100003043_L01_1.fq.gz'),
  wgsFastqPath?: string(name='wgs_fastq_path', description='The path of the FASTQ files of the WGS workflow.', example='fastq/MGISEQ2000'),
  wgsFastqSecondFilename?: string(name='wgs_fastq_second_filename', description='The name of the second FASTQ file of the WGS workflow.', example='MGISEQ2000_PCR-free_NA12878_1_V100003043_L01_2.fq.gz'),
  wgsOssRegion?: string(name='wgs_oss_region', description='The region where the OSS bucket that stores the data of the whole genome sequencing (WGS) workflow is deployed.', example='cn-shenzhen'),
  wgsReferencePath?: string(name='wgs_reference_path', description='The path of the reference files of the WGS workflow.', example='reference/hg19'),
  wgsVcfOutFilename?: string(name='wgs_vcf_out_filename', description='The name of the output VCF file.', example='abc.vcf'),
  wgsVcfOutPath?: string(name='wgs_vcf_out_path', description='The output path of the Variant Call Format (VCF) file.', example='output/vcf'),
  workflowType?: string(name='workflow_type', description='The type of workflow. Valid values: wgs and mapping.', example='mapping'),
}

model StartWorkflowResponseBody = {
  jobName?: string(name='JobName', description='The name of the workflow.', example='mapping-gpu-66xv7'),
}

model StartWorkflowResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartWorkflowResponseBody(name='body'),
}

async function startWorkflowWithOptions(request: StartWorkflowRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartWorkflowResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.mappingBamOutFilename)) {
    body['mapping_bam_out_filename'] = request.mappingBamOutFilename;
  }
  if (!Util.isUnset(request.mappingBamOutPath)) {
    body['mapping_bam_out_path'] = request.mappingBamOutPath;
  }
  if (!Util.isUnset(request.mappingBucketName)) {
    body['mapping_bucket_name'] = request.mappingBucketName;
  }
  if (!Util.isUnset(request.mappingFastqFirstFilename)) {
    body['mapping_fastq_first_filename'] = request.mappingFastqFirstFilename;
  }
  if (!Util.isUnset(request.mappingFastqPath)) {
    body['mapping_fastq_path'] = request.mappingFastqPath;
  }
  if (!Util.isUnset(request.mappingFastqSecondFilename)) {
    body['mapping_fastq_second_filename'] = request.mappingFastqSecondFilename;
  }
  if (!Util.isUnset(request.mappingIsMarkDup)) {
    body['mapping_is_mark_dup'] = request.mappingIsMarkDup;
  }
  if (!Util.isUnset(request.mappingOssRegion)) {
    body['mapping_oss_region'] = request.mappingOssRegion;
  }
  if (!Util.isUnset(request.mappingReferencePath)) {
    body['mapping_reference_path'] = request.mappingReferencePath;
  }
  if (!Util.isUnset(request.service)) {
    body['service'] = request.service;
  }
  if (!Util.isUnset(request.wgsBucketName)) {
    body['wgs_bucket_name'] = request.wgsBucketName;
  }
  if (!Util.isUnset(request.wgsFastqFirstFilename)) {
    body['wgs_fastq_first_filename'] = request.wgsFastqFirstFilename;
  }
  if (!Util.isUnset(request.wgsFastqPath)) {
    body['wgs_fastq_path'] = request.wgsFastqPath;
  }
  if (!Util.isUnset(request.wgsFastqSecondFilename)) {
    body['wgs_fastq_second_filename'] = request.wgsFastqSecondFilename;
  }
  if (!Util.isUnset(request.wgsOssRegion)) {
    body['wgs_oss_region'] = request.wgsOssRegion;
  }
  if (!Util.isUnset(request.wgsReferencePath)) {
    body['wgs_reference_path'] = request.wgsReferencePath;
  }
  if (!Util.isUnset(request.wgsVcfOutFilename)) {
    body['wgs_vcf_out_filename'] = request.wgsVcfOutFilename;
  }
  if (!Util.isUnset(request.wgsVcfOutPath)) {
    body['wgs_vcf_out_path'] = request.wgsVcfOutPath;
  }
  if (!Util.isUnset(request.workflowType)) {
    body['workflow_type'] = request.workflowType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StartWorkflow',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/gs/workflow`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startWorkflow(request: StartWorkflowRequest): StartWorkflowResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return startWorkflowWithOptions(request, headers, runtime);
}

model StopAlertResponseBody = {
  msg?: string(name='msg', description='The error message returned if the call fails.', example='Success'),
  status?: boolean(name='status', description='The operation result. Valid values:

*   True: The operation is successful.
*   False: The operation failed.', example='True'),
}

model StopAlertResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopAlertResponseBody(name='body'),
}

async function stopAlertWithOptions(ClusterId: string, headers: map[string]string, runtime: Util.RuntimeOptions): StopAlertResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'StopAlert',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/alert/${OpenApiUtil.getEncodeParam(ClusterId)}/alert_rule/stop`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopAlert(ClusterId: string): StopAlertResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return stopAlertWithOptions(ClusterId, headers, runtime);
}

model SyncClusterNodePoolResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='2D69A58F-345C-4FDE-88E4-BF51894XXXXX'),
}

model SyncClusterNodePoolResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SyncClusterNodePoolResponseBody(name='body'),
}

async function syncClusterNodePoolWithOptions(ClusterId: string, headers: map[string]string, runtime: Util.RuntimeOptions): SyncClusterNodePoolResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'SyncClusterNodePool',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/sync_nodepools`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function syncClusterNodePool(ClusterId: string): SyncClusterNodePoolResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return syncClusterNodePoolWithOptions(ClusterId, headers, runtime);
}

model TagResourcesRequest {
  regionId?: string(name='region_id', description='The region ID of the resource.', example='cn-hangzhou'),
  resourceIds?: [ string ](name='resource_ids', description='The IDs of the resources that you want to label.'),
  resourceType?: string(name='resource_type', description='The type of resource that you want to label. Set the value to `CLUSTER`.', example='CLUSTER'),
  tags?: [
    Tag
  ](name='tags', description='The labels that you want to add to the resources in key-value pairs. You can add up to 20 labels. Note:

*   A value cannot be empty and can contain up to 128 characters.
*   A key or value must not start with `aliyun` or `acs:`.
*   A key or value must not contain `http://` or `https://`.'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='2D69A58F-345C-4FDE-88E4-BF51894XXXXX'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    body['region_id'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceIds)) {
    body['resource_ids'] = request.resourceIds;
  }
  if (!Util.isUnset(request.resourceType)) {
    body['resource_type'] = request.resourceType;
  }
  if (!Util.isUnset(request.tags)) {
    body['tags'] = request.tags;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TagResources',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/tags`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return tagResourcesWithOptions(request, headers, runtime);
}

model UnInstallClusterAddonsRequest {
  addons?: [ 
    {
      cleanupCloudResources?: boolean(name='cleanup_cloud_resources', description='Whether to clean up cloud resources.', example='true'),
      name?: string(name='name', description='The component name.', example='ack-node-problem-detector'),
    }
  ](name='addons', description='The list of components that you want to uninstall. The list is an array.'),
}

model UnInstallClusterAddonsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function unInstallClusterAddonsWithOptions(ClusterId: string, request: UnInstallClusterAddonsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UnInstallClusterAddonsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = Util.toArray(request.addons),
  };
  var params = new OpenApi.Params{
    action = 'UnInstallClusterAddons',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/components/uninstall`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function unInstallClusterAddons(ClusterId: string, request: UnInstallClusterAddonsRequest): UnInstallClusterAddonsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return unInstallClusterAddonsWithOptions(ClusterId, request, headers, runtime);
}

model UntagResourcesRequest {
  all?: boolean(name='all', description='Specifies whether to remove all custom labels. This parameter takes effect only when `tag_keys` is left empty. Valid values:

*   `true`: Remove all custom labels.
*   `false`: Do not remove all custom labels.', example='true'),
  regionId?: string(name='region_id', description='The region ID of the resources.', example='cn-hangzhou'),
  resourceIds?: [ string ](name='resource_ids', description='The list of resource IDs.'),
  resourceType?: string(name='resource_type', description='The type of resource. Set the value to `CLUSTER`.', example='CLUSTER'),
  tagKeys?: [ string ](name='tag_keys', description='The list of keys of the labels that you want to remove.'),
}

model UntagResourcesShrinkRequest {
  all?: boolean(name='all', description='Specifies whether to remove all custom labels. This parameter takes effect only when `tag_keys` is left empty. Valid values:

*   `true`: Remove all custom labels.
*   `false`: Do not remove all custom labels.', example='true'),
  regionId?: string(name='region_id', description='The region ID of the resources.', example='cn-hangzhou'),
  resourceIdsShrink?: string(name='resource_ids', description='The list of resource IDs.'),
  resourceType?: string(name='resource_type', description='The type of resource. Set the value to `CLUSTER`.', example='CLUSTER'),
  tagKeysShrink?: string(name='tag_keys', description='The list of keys of the labels that you want to remove.'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='2D69A58F-345C-4FDE-88E4-BF51894XXXXX'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(tmpReq: UntagResourcesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(tmpReq);
  var request = new UntagResourcesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.resourceIds)) {
    request.resourceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resourceIds, 'resource_ids', 'json');
  }
  if (!Util.isUnset(tmpReq.tagKeys)) {
    request.tagKeysShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tagKeys, 'tag_keys', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.all)) {
    query['all'] = request.all;
  }
  if (!Util.isUnset(request.regionId)) {
    query['region_id'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceIdsShrink)) {
    query['resource_ids'] = request.resourceIdsShrink;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['resource_type'] = request.resourceType;
  }
  if (!Util.isUnset(request.tagKeysShrink)) {
    query['tag_keys'] = request.tagKeysShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UntagResources',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/tags`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return untagResourcesWithOptions(request, headers, runtime);
}

model UpdateContactGroupForAlertResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function updateContactGroupForAlertWithOptions(ClusterId: string, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateContactGroupForAlertResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'UpdateContactGroupForAlert',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/alert/${OpenApiUtil.getEncodeParam(ClusterId)}/alert_rule/contact_groups`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function updateContactGroupForAlert(ClusterId: string): UpdateContactGroupForAlertResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateContactGroupForAlertWithOptions(ClusterId, headers, runtime);
}

model UpdateControlPlaneLogRequest {
  aliuid?: string(name='aliuid', description='The ID of the Alibaba Cloud account.', example='162981*****'),
  components?: [ string ](name='components', description='The control plane components for which you want to enable log collection.'),
  logProject?: string(name='log_project', description='The name of the Simple Log Service project that you want to use to store the logs of control plane components.

Default value: k8s-log-$Cluster ID.', example='k8s-log-c5b5e80b0b64a4bf6939d2d8fbbc5****'),
  logTtl?: string(name='log_ttl', description='The retention period of the log data stored in the Logstore. Valid values: 1 to 3000. Unit: days.

Default value: 30.', example='30'),
}

model UpdateControlPlaneLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function updateControlPlaneLogWithOptions(ClusterId: string, request: UpdateControlPlaneLogRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateControlPlaneLogResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.aliuid)) {
    body['aliuid'] = request.aliuid;
  }
  if (!Util.isUnset(request.components)) {
    body['components'] = request.components;
  }
  if (!Util.isUnset(request.logProject)) {
    body['log_project'] = request.logProject;
  }
  if (!Util.isUnset(request.logTtl)) {
    body['log_ttl'] = request.logTtl;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateControlPlaneLog',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/controlplanelog`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function updateControlPlaneLog(ClusterId: string, request: UpdateControlPlaneLogRequest): UpdateControlPlaneLogResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateControlPlaneLogWithOptions(ClusterId, request, headers, runtime);
}

model UpdateK8sClusterUserConfigExpireRequest {
  expireHour?: long(name='expire_hour', description='The validity period of the kubeconfig file. Unit: hours.

> The value of expire_hour must be greater than 0 and equal to or smaller than 876000 (100 years).', example='720'),
  user?: string(name='user', description='The user ID.', example='The ID of the Resource Access Management (RAM) user that you use.'),
}

model UpdateK8sClusterUserConfigExpireResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

/**
  * **
  * ****
  * *   You can call this operation only with an Alibaba Cloud account. - If the kubeconfig file used by your cluster is revoked, the custom validity period of the kubeconfig file is reset. In this case, you need to call this API operation to reconfigure the validity period of the kubeconfig file.
  *
  * @param request UpdateK8sClusterUserConfigExpireRequest
  * @param headers map
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateK8sClusterUserConfigExpireResponse
 */
async function updateK8sClusterUserConfigExpireWithOptions(ClusterId: string, request: UpdateK8sClusterUserConfigExpireRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateK8sClusterUserConfigExpireResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.expireHour)) {
    body['expire_hour'] = request.expireHour;
  }
  if (!Util.isUnset(request.user)) {
    body['user'] = request.user;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateK8sClusterUserConfigExpire',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/k8s/${OpenApiUtil.getEncodeParam(ClusterId)}/user_config/expire`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

/**
  * **
  * ****
  * *   You can call this operation only with an Alibaba Cloud account. - If the kubeconfig file used by your cluster is revoked, the custom validity period of the kubeconfig file is reset. In this case, you need to call this API operation to reconfigure the validity period of the kubeconfig file.
  *
  * @param request UpdateK8sClusterUserConfigExpireRequest
  * @return UpdateK8sClusterUserConfigExpireResponse
 */
async function updateK8sClusterUserConfigExpire(ClusterId: string, request: UpdateK8sClusterUserConfigExpireRequest): UpdateK8sClusterUserConfigExpireResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateK8sClusterUserConfigExpireWithOptions(ClusterId, request, headers, runtime);
}

model UpdateTemplateRequest {
  description?: string(name='description', description='The description of the template.', example='web server cluster'),
  name?: string(name='name', description='The name of the template.', example='webserver01'),
  tags?: string(name='tags', description='The label of the template.', example='web'),
  template?: string(name='template', description='The YAML content of the template.', example='apiVersion: apps/v1\\\\nkind: Deployment\\\\nmetadata:\\\\n  name: nginx-deployment-basic\\\\n  labels:\\\\n    app: nginx\\\\nspec:\\\\n  replicas: 2\\\\n  selector:\\\\n    matchLabels:\\\\n      app: nginx\\\\n  template:\\\\n    metadata:\\\\n      labels:\\\\n        app: nginx\\\\n    spec:\\\\n      containers:\\\\n      - name: nginx\\\\n        image: busybox:latest\\\\n        ports:\\\\n        - containerPort: 8080'),
  templateType?: string(name='template_type', description='The type of template. This parameter can be set to a custom value.

*   If the parameter is set to `kubernetes`, the template is displayed on the Templates page in the console.
*   If the parameter is set to `compose`, the template is displayed on the Container Service - Swarm page in the console. Container Service for Swarm is deprecated.', example='kubernetes'),
}

model UpdateTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function updateTemplateWithOptions(TemplateId: string, request: UpdateTemplateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateTemplateResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    body['name'] = request.name;
  }
  if (!Util.isUnset(request.tags)) {
    body['tags'] = request.tags;
  }
  if (!Util.isUnset(request.template)) {
    body['template'] = request.template;
  }
  if (!Util.isUnset(request.templateType)) {
    body['template_type'] = request.templateType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTemplate',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/templates/${OpenApiUtil.getEncodeParam(TemplateId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function updateTemplate(TemplateId: string, request: UpdateTemplateRequest): UpdateTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateTemplateWithOptions(TemplateId, request, headers, runtime);
}

model UpgradeClusterRequest {
  componentName?: string(name='component_name', description='The name of the component. Set the value to `k8s`.', example='k8s', deprecated='true'),
  masterOnly?: boolean(name='master_only', description='Specifies whether to update only master nodes. Valid values:

*   true: update only master nodes.
*   false: update master and worker nodes.', example='true'),
  nextVersion?: string(name='next_version', description='The Kubernetes version to which the cluster can be updated.', example='1.16.9-aliyun.1'),
  version?: string(name='version', description='The current Kubernetes version of the cluster. For more information, see [Kubernetes versions](~~185269~~).', example='1.14.8-aliyun.1', deprecated='true'),
}

model UpgradeClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function upgradeClusterWithOptions(ClusterId: string, request: UpgradeClusterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpgradeClusterResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.componentName)) {
    body['component_name'] = request.componentName;
  }
  if (!Util.isUnset(request.masterOnly)) {
    body['master_only'] = request.masterOnly;
  }
  if (!Util.isUnset(request.nextVersion)) {
    body['next_version'] = request.nextVersion;
  }
  if (!Util.isUnset(request.version)) {
    body['version'] = request.version;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpgradeCluster',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/api/v2/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/upgrade`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function upgradeCluster(ClusterId: string, request: UpgradeClusterRequest): UpgradeClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return upgradeClusterWithOptions(ClusterId, request, headers, runtime);
}

model UpgradeClusterAddonsRequest {
  body?: [ 
    {
      componentName?: string(name='component_name', description='The name of the component.', example='coredns'),
      config?: string(name='config', description='The custom component settings that you want to use. The value is a JSON string.', example='{\\"CpuRequest\\":\\"800m\\"}'),
      nextVersion?: string(name='next_version', description='The version to which the component can be updated. You can call the `DescribeClusterAddonsVersion` operation to query the version to which the component can be updated.', example='1.6.7'),
      policy?: string(name='policy', description='The update policy. Valid values:

*   overwrite
*   canary', example='canary'),
      version?: string(name='version', description='The current version of the component.', example='v1.6.2'),
    }
  ](name='body', description='The request parameters.'),
}

model UpgradeClusterAddonsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function upgradeClusterAddonsWithOptions(ClusterId: string, request: UpgradeClusterAddonsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpgradeClusterAddonsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = Util.toArray(request.body),
  };
  var params = new OpenApi.Params{
    action = 'UpgradeClusterAddons',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/components/upgrade`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function upgradeClusterAddons(ClusterId: string, request: UpgradeClusterAddonsRequest): UpgradeClusterAddonsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return upgradeClusterAddonsWithOptions(ClusterId, request, headers, runtime);
}

model UpgradeClusterNodepoolRequest {
  imageId?: string(name='image_id', description='The ID of the OS image that is used by the nodes.', example='aliyun_2_1903_x64_20G_alibase_20200529.vhd'),
  kubernetesVersion?: string(name='kubernetes_version', description='The Kubernetes version that is used by the nodes.', example='1.22.15-aliyun.1'),
  runtimeType?: string(name='runtime_type', description='The runtime type. Valid values: containerd and docker.', example='containerd'),
  runtimeVersion?: string(name='runtime_version', description='The version of the container runtime that is used by the nodes.', example='1.5.10'),
}

model UpgradeClusterNodepoolResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='2D69A58F-345C-4FDE-88E4-BF518944****'),
  taskId?: string(name='task_id', description='The task ID.', example='T-5fd211e924e1d0078700xxxx'),
}

model UpgradeClusterNodepoolResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpgradeClusterNodepoolResponseBody(name='body'),
}

/**
  * This operation allows you to update the Kubernetes version, OS version, or container runtime version of the nodes in a node pool.
  *
  * @param request UpgradeClusterNodepoolRequest
  * @param headers map
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpgradeClusterNodepoolResponse
 */
async function upgradeClusterNodepoolWithOptions(ClusterId: string, NodepoolId: string, request: UpgradeClusterNodepoolRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpgradeClusterNodepoolResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.imageId)) {
    body['image_id'] = request.imageId;
  }
  if (!Util.isUnset(request.kubernetesVersion)) {
    body['kubernetes_version'] = request.kubernetesVersion;
  }
  if (!Util.isUnset(request.runtimeType)) {
    body['runtime_type'] = request.runtimeType;
  }
  if (!Util.isUnset(request.runtimeVersion)) {
    body['runtime_version'] = request.runtimeVersion;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpgradeClusterNodepool',
    version = '2015-12-15',
    protocol = 'HTTPS',
    pathname = `/clusters/${OpenApiUtil.getEncodeParam(ClusterId)}/nodepools/${OpenApiUtil.getEncodeParam(NodepoolId)}/upgrade`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This operation allows you to update the Kubernetes version, OS version, or container runtime version of the nodes in a node pool.
  *
  * @param request UpgradeClusterNodepoolRequest
  * @return UpgradeClusterNodepoolResponse
 */
async function upgradeClusterNodepool(ClusterId: string, NodepoolId: string, request: UpgradeClusterNodepoolRequest): UpgradeClusterNodepoolResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return upgradeClusterNodepoolWithOptions(ClusterId, NodepoolId, request, headers, runtime);
}

