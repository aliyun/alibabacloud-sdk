/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'CS';
  @version = '2015-12-15';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-2-pop = 'cs.aliyuncs.com',
    cn-beijing-finance-pop = 'cs.aliyuncs.com',
    cn-beijing-gov-1 = 'cs.aliyuncs.com',
    cn-beijing-nu16-b01 = 'cs.aliyuncs.com',
    cn-edge-1 = 'cs.aliyuncs.com',
    cn-fujian = 'cs.aliyuncs.com',
    cn-haidian-cm12-c01 = 'cs.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'cs.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'cs.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'cs.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'cs.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'cs.aliyuncs.com',
    cn-hangzhou-test-306 = 'cs.aliyuncs.com',
    cn-hongkong-finance-pop = 'cs.aliyuncs.com',
    cn-qingdao-nebula = 'cs.aliyuncs.com',
    cn-shanghai-et15-b01 = 'cs.aliyuncs.com',
    cn-shanghai-et2-b01 = 'cs.aliyuncs.com',
    cn-shanghai-inner = 'cs.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'cs.aliyuncs.com',
    cn-shenzhen-inner = 'cs.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'cs.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'cs.aliyuncs.com',
    cn-wuhan = 'cs.aliyuncs.com',
    cn-yushanfang = 'cs.aliyuncs.com',
    cn-zhangbei = 'cs.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'cs.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'cs.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'cs.aliyuncs.com',
    eu-west-1-oxs = 'cs.aliyuncs.com',
    rus-west-1-pop = 'cs.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model Addon {
  config?: string(name='config', example='{\\"IngressSlbNetworkType\\":\\"internet\\"}'),
  disabled?: boolean(name='disabled', example='false'),
  name?: string(name='name', example='nginx-ingress-controller'),
}

model DataDisk {
  autoSnapshotPolicyId?: string(name='auto_snapshot_policy_id', example='sp-2zej1nogjvovnz4z****'),
  burstingEnabled?: boolean(name='bursting_enabled', example='true'),
  category?: string(name='category', example='cloud_ssd'),
  encrypted?: string(name='encrypted', example='true'),
  performanceLevel?: string(name='performance_level', example='PL1'),
  provisionedIops?: long(name='provisioned_iops', example='1000'),
  size?: long(name='size', example='40'),
}

model MaintenanceWindow {
  duration?: string(name='duration', example='3h'),
  enable?: boolean(name='enable', example='false'),
  maintenanceTime?: string(name='maintenance_time', example='03:00:00Z'),
  weeklyPeriod?: string(name='weekly_period', example='Monday,Thursday'),
}

model Nodepool {
  autoScaling?: {
    eipBandwidth?: long(name='eip_bandwidth', example='5', deprecated='true'),
    eipInternetChargeType?: string(name='eip_internet_charge_type', example='PayByBandwidth', deprecated='true'),
    enable: boolean(name='enable', example='true'),
    isBondEip?: boolean(name='is_bond_eip', example='true', deprecated='true'),
    maxInstances: long(name='max_instances', example='10'),
    minInstances: long(name='min_instances', example='0'),
    type?: string(name='type', example='cpu'),
  }(name='auto_scaling'),
  count?: long(name='count', example='1', deprecated='true'),
  interconnectConfig?: {
    bandwidth?: long(name='bandwidth', example='10', deprecated='true'),
    ccnId?: string(name='ccn_id', example='ccn-qm5i0i0q9yi*******', deprecated='true'),
    ccnRegionId?: string(name='ccn_region_id', example='cn-shanghai', deprecated='true'),
    cenId?: string(name='cen_id', example='cen-ey9k9nfhz0f*******', deprecated='true'),
    improvedPeriod?: string(name='improved_period', example='1', deprecated='true'),
  }(name='interconnect_config', deprecated='true'),
  interconnectMode?: string(name='interconnect_mode', example='basic'),
  kubernetesConfig?: {
    cmsEnabled?: boolean(name='cms_enabled', example='true'),
    cpuPolicy?: string(name='cpu_policy', example='none'),
    labels?: [
      Tag
    ](name='labels'),
    nodeNameMode?: string(name='node_name_mode', example='customized,test.,5,.com'),
    runtime: string(name='runtime', example='docker'),
    runtimeVersion: string(name='runtime_version', example='19.03.5'),
    taints?: [
      Taint
    ](name='taints'),
    userData?: string(name='user_data', example='MXM='),
  }(name='kubernetes_config'),
  management?: {
    autoRepair?: boolean(name='auto_repair', example='false'),
    enable: boolean(name='enable', example='false'),
    upgradeConfig?: {
      autoUpgrade?: boolean(name='auto_upgrade', example='false'),
      maxUnavailable: long(name='max_unavailable', example='0'),
      surge?: long(name='surge', example='0'),
      surgePercentage?: long(name='surge_percentage', example='0'),
    }(name='upgrade_config'),
  }(name='management'),
  maxNodes?: long(name='max_nodes', example='10'),
  nodepoolInfo?: {
    name: string(name='name', example='np-test'),
    resourceGroupId?: string(name='resource_group_id', example='rg-acfmyvw3wjm****'),
    type?: string(name='type', example='ess'),
  }(name='nodepool_info'),
  scalingGroup?: {
    autoRenew?: boolean(name='auto_renew', example='false'),
    autoRenewPeriod?: long(name='auto_renew_period', example='0'),
    compensateWithOnDemand?: boolean(name='compensate_with_on_demand', example='true'),
    dataDisks?: [
      DataDisk
    ](name='data_disks'),
    deploymentsetId?: string(name='deploymentset_id', example='ds-bp1d19mmbsv3jf6xxxxx'),
    desiredSize?: long(name='desired_size', example='2'),
    imageId?: string(name='image_id', example='aliyun_2_1903_x64_20G_alibase_20200904.vhd'),
    imageType?: string(name='image_type', example='AliyunLinux'),
    instanceChargeType: string(name='instance_charge_type', example='PostPaid'),
    instanceTypes: [ string ](name='instance_types'),
    internetChargeType?: string(name='internet_charge_type', example='PayByBandwidth'),
    internetMaxBandwidthOut?: long(name='internet_max_bandwidth_out', example='10'),
    keyPair?: string(name='key_pair', example='np-key'),
    loginPassword?: string(name='login_password', example='Hello1234,,'),
    multiAzPolicy?: string(name='multi_az_policy', example='COST_OPTIMIZED'),
    onDemandBaseCapacity?: long(name='on_demand_base_capacity', example='0'),
    onDemandPercentageAboveBaseCapacity?: long(name='on_demand_percentage_above_base_capacity', example='20'),
    period?: long(name='period', example='0'),
    periodUnit?: string(name='period_unit', example='Month'),
    platform?: string(name='platform', example='AliyunLinux'),
    privatePoolOptions?: {
      id?: string(name='id'),
      matchCriteria?: string(name='match_criteria'),
    }(name='private_pool_options'),
    rdsInstances?: [ string ](name='rds_instances'),
    scalingPolicy?: string(name='scaling_policy', example='release'),
    securityGroupId?: string(name='security_group_id', example='sg-2zeihch86ooz9io4****'),
    securityGroupIds?: [ string ](name='security_group_ids'),
    spotInstancePools?: long(name='spot_instance_pools', example='5'),
    spotInstanceRemedy?: boolean(name='spot_instance_remedy', example='false'),
    spotPriceLimit?: [ 
      {
        instanceType?: string(name='instance_type', example='ecs.c6.large'),
        priceLimit?: string(name='price_limit', example='0.39'),
      }
    ](name='spot_price_limit'),
    spotStrategy?: string(name='spot_strategy', example='NoSpot'),
    systemDiskBurstingEnabled?: boolean(name='system_disk_bursting_enabled', example='true'),
    systemDiskCategory: string(name='system_disk_category', example='cloud_efficiency'),
    systemDiskPerformanceLevel?: string(name='system_disk_performance_level', example='PL1'),
    systemDiskProvisionedIops?: long(name='system_disk_provisioned_iops', example='1000'),
    systemDiskSize: long(name='system_disk_size', example='120'),
    tags?: [ 
      {
        key?: string(name='key', example='key'),
        value?: string(name='value', example='value'),
      }
    ](name='tags'),
    vswitchIds: [ string ](name='vswitch_ids'),
  }(name='scaling_group'),
  teeConfig?: {
    teeEnable: boolean(name='tee_enable', example='false'),
  }(name='tee_config'),
}

model Runtime {
  name?: string(name='name', example='docker'),
  version?: string(name='version', example='19.03.5'),
}

model Tag {
  key?: string(name='key', example='env'),
  value?: string(name='value', example='prod'),
}

model Taint {
  effect?: string(name='effect', example='NoSchedule'),
  key?: string(name='key', example='key'),
  value?: string(name='value', example='value'),
}

model AttachInstancesRequest {
  clusterId: string(name='ClusterId', example='c106f377e16f34eb1808d6b9362c9****', position='Path'),
  cpuPolicy?: string(name='cpu_policy', example='none', position='Body'),
  formatDisk?: boolean(name='format_disk', example='false', position='Body'),
  imageId?: string(name='image_id', example='aliyun_2_1903_x64_20G_alibase_20200529.vhd', position='Body'),
  instances: [ string ](name='instances', position='Body'),
  isEdgeWorker?: boolean(name='is_edge_worker', example='false', position='Body'),
  keepInstanceName?: boolean(name='keep_instance_name', example='true', position='Body'),
  keyPair?: string(name='key_pair', example='secrity-key', position='Body'),
  nodepoolId?: string(name='nodepool_id', example='np615c0e0966124216a0412e10afe0****', position='Body'),
  password?: string(name='password', example='Hello1234', position='Body'),
  rdsInstances?: [ string ](name='rds_instances', position='Body'),
  runtime?: Runtime(name='runtime', position='Body'),
  tags?: [
    Tag
  ](name='tags', position='Body'),
  userData?: string(name='user_data', example='IyEvdXNyL2Jpbi9iYXNoCmVjaG8gIkhlbGxvIEFDSyEi', position='Body'),
}

model AttachInstancesResponseBody = {
  list?: [ 
    {
      code?: string(name='code', description='The code that indicates the task result.', example='200'),
      instanceId?: string(name='instanceId', description='The ID of the instance.', example='i-2ze0lgm3y6iylcbt****'),
      message?: string(name='message', description='Indicates whether the ECS instances are successfully added to the ACK cluster.', example='successful'),
    }
  ](name='list', description='The details of the added nodes.'),
  taskId?: string(name='task_id', description='The ID of the task.', example='T-5a544aff80282e39ea000039'),
}

model AttachInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: AttachInstancesResponseBody(name='body'),
}

async function attachInstances(request: AttachInstancesRequest): AttachInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AttachInstances', 'POST', '/clusters/{ClusterId}/attach', 'json', false, 'json', request);
}

model AttachInstancesToNodePoolRequest {
  clusterId: string(name='ClusterId', example='c82e6987e2961451182edacd74faf****', position='Path'),
  nodepoolId: string(name='NodepoolId', example='np31da1b38983f4511b490fc62108a****', position='Path'),
  formatDisk?: boolean(name='format_disk', example='false', position='Body'),
  instances?: [ string ](name='instances', position='Body'),
  keepInstanceName?: boolean(name='keep_instance_name', example='true', position='Body'),
  password?: string(name='password', example='Hello1234', position='Body'),
}

model AttachInstancesToNodePoolResponseBody = {
  requestId?: string(name='request_id', example='D7631D83-6E98-1949-B665-766A62xxxxxx'),
  taskId?: string(name='task_id', example='T-5a54309c80282e39ea00002f'),
}

model AttachInstancesToNodePoolResponse = {
  headers: map[string]string(name='headers'),
  body: AttachInstancesToNodePoolResponseBody(name='body'),
}

async function attachInstancesToNodePool(request: AttachInstancesToNodePoolRequest): AttachInstancesToNodePoolResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AttachInstancesToNodePool', 'POST', '/clusters/{ClusterId}/nodepools/{NodepoolId}/attach', 'json', false, 'json', request);
}

model CancelClusterUpgradeRequest {
  clusterId: string(name='ClusterId', example='c106f377e16f34eb1808d6b9362c9****', position='Path'),
}

model CancelClusterUpgradeResponse = {
  headers: map[string]string(name='headers'),
}

async function cancelClusterUpgrade(request: CancelClusterUpgradeRequest): CancelClusterUpgradeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CancelClusterUpgrade', 'POST', '/api/v2/clusters/{ClusterId}/upgrade/cancel', 'none', false, 'json', request);
}

model CancelComponentUpgradeRequest {
  clusterId: string(name='clusterId', example='c82e6987e2961451182edacd74faf****', position='Path'),
  componentId: string(name='componentId', example='metric-server', position='Path'),
}

model CancelComponentUpgradeResponse = {
  headers: map[string]string(name='headers'),
}

async function cancelComponentUpgrade(request: CancelComponentUpgradeRequest): CancelComponentUpgradeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CancelComponentUpgrade', 'POST', '/clusters/{clusterId}/components/{componentId}/cancel', 'none', false, 'json', request);
}

model CancelTaskRequest {
  taskId: string(name='task_id', example='T-62ccd14aacb8db06ca00****', position='Path'),
}

model CancelTaskResponse = {
  headers: map[string]string(name='headers'),
}

async function cancelTask(request: CancelTaskRequest): CancelTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CancelTask', 'POST', '/tasks/{task_id}/cancel', 'none', false, 'json', request);
}

model CancelWorkflowRequest {
  workflowName: string(name='workflowName', example='mapping-gpu-mhhgh', position='Path'),
  action: string(name='action', example='cancel', position='Body'),
}

model CancelWorkflowResponse = {
  headers: map[string]string(name='headers'),
}

async function cancelWorkflow(request: CancelWorkflowRequest): CancelWorkflowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CancelWorkflow', 'PUT', '/gs/workflow/{workflowName}', 'none', false, 'json', request);
}

model CheckControlPlaneLogEnableRequest {
  clusterId: string(name='ClusterId', example='c5b5e80b0b64a4bf6939d2d8fbbc5****', position='Path'),
}

model CheckControlPlaneLogEnableResponseBody = {
  aliuid?: string(name='aliuid', example='162981*****'),
  components: [ string ](name='components'),
  logProject?: string(name='log_project', example='k8s-log-c5b5e80b0b64a4bf6939d2d8fbbc5****'),
  logTtl?: string(name='log_ttl', example='30'),
}

model CheckControlPlaneLogEnableResponse = {
  headers: map[string]string(name='headers'),
  body: CheckControlPlaneLogEnableResponseBody(name='body'),
}

async function checkControlPlaneLogEnable(request: CheckControlPlaneLogEnableRequest): CheckControlPlaneLogEnableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CheckControlPlaneLogEnable', 'GET', '/clusters/{ClusterId}/controlplanelog', 'json', false, 'json', request);
}

model CreateAutoscalingConfigRequest {
  clusterId: string(name='ClusterId', description='c0XXXXXXX10', example='c0XXXXXXX10', position='Path'),
  coolDownDuration?: string(name='cool_down_duration', example='10', position='Body'),
  daemonsetEvictionForNodes?: boolean(name='daemonset_eviction_for_nodes', example='false', position='Body'),
  expander?: string(name='expander', example='least-waste', position='Body'),
  gpuUtilizationThreshold?: string(name='gpu_utilization_threshold', example='0.5', position='Body'),
  maxGracefulTerminationSec?: int32(name='max_graceful_termination_sec', example='14400', position='Body'),
  minReplicaCount?: int32(name='min_replica_count', example='0', position='Body'),
  recycleNodeDeletionEnabled?: boolean(name='recycle_node_deletion_enabled', example='false', position='Body'),
  scaleDownEnabled?: boolean(name='scale_down_enabled', example='true', position='Body'),
  scaleUpFromZero?: boolean(name='scale_up_from_zero', example='true', position='Body'),
  scanInterval?: string(name='scan_interval', example='30', position='Body'),
  skipNodesWithLocalStorage?: boolean(name='skip_nodes_with_local_storage', example='false', position='Body'),
  skipNodesWithSystemPods?: boolean(name='skip_nodes_with_system_pods', example='true', position='Body'),
  unneededDuration?: string(name='unneeded_duration', example='10', position='Body'),
  utilizationThreshold?: string(name='utilization_threshold', example='0.5', position='Body'),
}

model CreateAutoscalingConfigResponse = {
  headers: map[string]string(name='headers'),
}

async function createAutoscalingConfig(request: CreateAutoscalingConfigRequest): CreateAutoscalingConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateAutoscalingConfig', 'POST', '/cluster/{ClusterId}/autoscale/config/', 'none', false, 'json', request);
}

model CreateClusterRequest {
  addons?: [
    Addon
  ](name='addons', position='Body'),
  apiAudiences?: string(name='api_audiences', example='kubernetes.default.svc', position='Body'),
  chargeType?: string(name='charge_type', example='1', position='Body'),
  cisEnabled?: boolean(name='cis_enabled', example='false', position='Body'),
  cloudMonitorFlags?: boolean(name='cloud_monitor_flags', example='true', position='Body'),
  clusterDomain?: string(name='cluster_domain', example='cluster.local', position='Body'),
  clusterSpec?: string(name='cluster_spec', example='ack.pro.small', position='Body'),
  clusterType: string(name='cluster_type', example='Kubernetes', position='Body'),
  containerCidr?: string(name='container_cidr', example='172.20.0.0/16', position='Body'),
  controlplaneLogComponents?: [ string ](name='controlplane_log_components', position='Body'),
  controlplaneLogProject?: string(name='controlplane_log_project', example='k8s-log-xxx', position='Body'),
  controlplaneLogTtl?: string(name='controlplane_log_ttl', example='30', position='Body'),
  cpuPolicy?: string(name='cpu_policy', example='none', position='Body'),
  customSan?: string(name='custom_san', example='cs.aliyun.com', position='Body'),
  deletionProtection?: boolean(name='deletion_protection', example='true', position='Body'),
  disableRollback?: boolean(name='disable_rollback', example='true', position='Body'),
  enableRrsa?: boolean(name='enable_rrsa', example='true', position='Body'),
  encryptionProviderKey?: string(name='encryption_provider_key', example='0fe64791-55eb-4fc7-84c5-c6c7cdca****', position='Body'),
  endpointPublicAccess?: boolean(name='endpoint_public_access', example='true', position='Body'),
  formatDisk?: boolean(name='format_disk', example='false', position='Body'),
  imageId?: string(name='image_id', example='m-bp16z7xko3vvv8gt****', position='Body'),
  imageType?: string(name='image_type', example='AliyunLinux', position='Body'),
  instances?: [ string ](name='instances', position='Body'),
  ipStack?: string(name='ip_stack', example='可选值：ipv4(单栈)/dual(双栈) ，默认值为IPv4。', position='Body'),
  isEnterpriseSecurityGroup?: boolean(name='is_enterprise_security_group', example='true', position='Body'),
  keepInstanceName?: boolean(name='keep_instance_name', example='true', position='Body'),
  keyPair?: string(name='key_pair', example='secrity-key', position='Body'),
  kubernetesVersion?: string(name='kubernetes_version', example='1.16.9-aliyun.1', position='Body'),
  loadBalancerSpec?: string(name='load_balancer_spec', example='slb.s2.small', position='Body'),
  loggingType?: string(name='logging_type', example='SLS', position='Body'),
  loginPassword?: string(name='login_password', example='Hello@1234', position='Body'),
  masterAutoRenew?: boolean(name='master_auto_renew', example='true', position='Body'),
  masterAutoRenewPeriod?: long(name='master_auto_renew_period', example='1', position='Body'),
  masterCount?: long(name='master_count', example='3', position='Body'),
  masterInstanceChargeType?: string(name='master_instance_charge_type', example='PrePaid', position='Body'),
  masterInstanceTypes?: [ string ](name='master_instance_types', position='Body'),
  masterPeriod?: long(name='master_period', example='1', position='Body'),
  masterPeriodUnit?: string(name='master_period_unit', example='Month', position='Body'),
  masterSystemDiskCategory?: string(name='master_system_disk_category', example='cloud_ssd', position='Body'),
  masterSystemDiskPerformanceLevel?: string(name='master_system_disk_performance_level', example='PL1', position='Body'),
  masterSystemDiskSize?: long(name='master_system_disk_size', example='120', position='Body'),
  masterSystemDiskSnapshotPolicyId?: string(name='master_system_disk_snapshot_policy_id', example='sp-2zej1nogjvovnz4z****', position='Body'),
  masterVswitchIds?: [ string ](name='master_vswitch_ids', position='Body'),
  name: string(name='name', example='cluster-demo', position='Body'),
  natGateway?: boolean(name='nat_gateway', example='true', position='Body'),
  nodeCidrMask?: string(name='node_cidr_mask', example='25', position='Body'),
  nodeNameMode?: string(name='node_name_mode', example='aliyun.com00055test', position='Body'),
  nodePortRange?: string(name='node_port_range', example='30000~32767', position='Body'),
  nodepools?: [
    Nodepool
  ](name='nodepools', position='Body'),
  numOfNodes?: long(name='num_of_nodes', example='3', deprecated='true', position='Body'),
  osType?: string(name='os_type', example='Linux', position='Body'),
  period?: long(name='period', example='FY2023', position='Body'),
  periodUnit?: string(name='period_unit', example='Month', position='Body'),
  platform?: string(name='platform', example='CentOS', position='Body'),
  podVswitchIds?: [ string ](name='pod_vswitch_ids', position='Body'),
  profile?: string(name='profile', example='Default', position='Body'),
  proxyMode?: string(name='proxy_mode', example='ipvs', position='Body'),
  rdsInstances?: [ string ](name='rds_instances', position='Body'),
  regionId: string(name='region_id', example='cn-beijing', position='Body'),
  resourceGroupId?: string(name='resource_group_id', example='rg-acfm3mkrure****', position='Body'),
  runtime?: Runtime(name='runtime', position='Body'),
  securityGroupId?: string(name='security_group_id', example='sg-bp1bdue0qc1g7k****', position='Body'),
  serviceAccountIssuer?: string(name='service_account_issuer', example='kubernetes.default.svc', position='Body'),
  serviceCidr: string(name='service_cidr', example='172.21.0.0/20', position='Body'),
  serviceDiscoveryTypes?: [ string ](name='service_discovery_types', position='Body'),
  snatEntry?: boolean(name='snat_entry', example='true', position='Body'),
  socEnabled?: boolean(name='soc_enabled', example='false', position='Body'),
  sshFlags?: boolean(name='ssh_flags', example='true', position='Body'),
  tags?: [
    Tag
  ](name='tags', position='Body'),
  taints?: [
    Taint
  ](name='taints', position='Body'),
  timeoutMins?: long(name='timeout_mins', example='60', position='Body'),
  timezone?: string(name='timezone', example='Asia/Shanghai', position='Body'),
  userCa?: string(name='user_ca', example='-----BEGIN CERTIFICATE-----****', position='Body'),
  userData?: string(name='user_data', example='IyEvdXNyL2Jpbi9iYXNoCmVjaG8gIkhlbGxvIEFD****', position='Body'),
  vpcid: string(name='vpcid', example='vpc-2zeik9h3ahvv2zz95****', position='Body'),
  vswitchIds: [ string ](name='vswitch_ids', position='Body'),
  workerAutoRenew?: boolean(name='worker_auto_renew', example='true', deprecated='true', position='Body'),
  workerAutoRenewPeriod?: long(name='worker_auto_renew_period', example='1', deprecated='true', position='Body'),
  workerDataDisks?: [ 
    {
      category: string(name='category', example='cloud_essd'),
      encrypted?: string(name='encrypted', example='true'),
      performanceLevel?: string(name='performance_level', example='PL1'),
      size: string(name='size', example='120'),
    }
  ](name='worker_data_disks', deprecated='true', position='Body'),
  workerInstanceChargeType?: string(name='worker_instance_charge_type', example='PrePaid', deprecated='true', position='Body'),
  workerInstanceTypes?: [ string ](name='worker_instance_types', deprecated='true', position='Body'),
  workerPeriod?: long(name='worker_period', example='1', deprecated='true', position='Body'),
  workerPeriodUnit?: string(name='worker_period_unit', example='Month', deprecated='true', position='Body'),
  workerSystemDiskCategory?: string(name='worker_system_disk_category', example='cloud_efficiency', deprecated='true', position='Body'),
  workerSystemDiskPerformanceLevel?: string(name='worker_system_disk_performance_level', example='PL1', deprecated='true', position='Body'),
  workerSystemDiskSize?: long(name='worker_system_disk_size', example='120', deprecated='true', position='Body'),
  workerSystemDiskSnapshotPolicyId?: string(name='worker_system_disk_snapshot_policy_id', example='sp-2zej1nogjvovnz4z****', deprecated='true', position='Body'),
  workerVswitchIds?: [ string ](name='worker_vswitch_ids', deprecated='true', position='Body'),
  zoneId?: string(name='zone_id', example='cn-beiji****', position='Body'),
}

model CreateClusterResponseBody = {
  clusterId?: string(name='cluster_id', description='The ID of the cluster.', example='cb95aa626a47740afbf6aa099b650****'),
  requestId?: string(name='request_id', description='The ID of the request.', example='687C5BAA-D103-4993-884B-C35E4314A1E1'),
  taskId?: string(name='task_id', description='The ID of the task.', example='T-5a54309c80282e39ea00002f'),
}

model CreateClusterResponse = {
  headers: map[string]string(name='headers'),
  body: CreateClusterResponseBody(name='body'),
}

async function createCluster(request: CreateClusterRequest): CreateClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateCluster', 'POST', '/clusters', 'json', false, 'json', request);
}

model CreateClusterNodePoolRequest {
  clusterId: string(name='ClusterId', example='c61da77e8bfbc4c4c999af2b51b65****', position='Path'),
  autoScaling?: {
    eipBandwidth?: long(name='eip_bandwidth', example='5'),
    eipInternetChargeType?: string(name='eip_internet_charge_type', example='PayByBandwidth'),
    enable: boolean(name='enable', example='true'),
    isBondEip?: boolean(name='is_bond_eip', example='true'),
    maxInstances: long(name='max_instances', example='10'),
    minInstances: long(name='min_instances', example='1'),
    type?: string(name='type', example='cpu'),
  }(name='auto_scaling', position='Body'),
  count?: long(name='count', example='1', position='Body'),
  interconnectConfig?: {
    bandwidth?: long(name='bandwidth', example='10'),
    ccnId?: string(name='ccn_id', example='ccn-qm5i0i0q9yi*******'),
    ccnRegionId?: string(name='ccn_region_id', example='cn-shanghai'),
    cenId?: string(name='cen_id', example='cen-ey9k9nfhz0f*******'),
    improvedPeriod?: string(name='improved_period', example='1'),
  }(name='interconnect_config', position='Body'),
  interconnectMode?: string(name='interconnect_mode', example='basic', position='Body'),
  kubernetesConfig?: {
    cmsEnabled?: boolean(name='cms_enabled', example='true'),
    cpuPolicy?: string(name='cpu_policy', example='none'),
    labels?: [
      Tag
    ](name='labels'),
    nodeNameMode?: string(name='node_name_mode', example='customized,aliyun,ip,com'),
    runtime: string(name='runtime', example='docker'),
    runtimeVersion: string(name='runtime_version', example='19.03.5'),
    taints?: [
      Taint
    ](name='taints'),
    userData?: string(name='user_data', example='dGhpcyBpcyBhIGV4YW1wbGU='),
  }(name='kubernetes_config', position='Body'),
  management?: {
    autoRepair?: boolean(name='auto_repair', example='false'),
    enable: boolean(name='enable', example='false'),
    upgradeConfig?: {
      autoUpgrade?: boolean(name='auto_upgrade', example='false'),
      maxUnavailable: long(name='max_unavailable', example='1'),
      surge?: long(name='surge', example='0'),
      surgePercentage?: long(name='surge_percentage', example='0'),
    }(name='upgrade_config'),
  }(name='management', position='Body'),
  maxNodes?: long(name='max_nodes', example='10', position='Body'),
  nodepoolInfo?: {
    name: string(name='name', example='cluster-demo'),
    resourceGroupId?: string(name='resource_group_id', example='rg-acfmyvw3wjmb****'),
    type?: string(name='type', example='ess'),
  }(name='nodepool_info', position='Body'),
  scalingGroup?: {
    autoRenew?: boolean(name='auto_renew', example='true'),
    autoRenewPeriod?: long(name='auto_renew_period', example='1'),
    compensateWithOnDemand?: boolean(name='compensate_with_on_demand', example='true'),
    dataDisks?: [
      DataDisk
    ](name='data_disks'),
    deploymentsetId?: string(name='deploymentset_id', example='ds-bp1d19mmbsv3jf6xxxxx'),
    desiredSize?: long(name='desired_size', example='0'),
    imageId?: string(name='image_id', example='aliyun_2_1903_x64_20G_alibase_20200529.vhd'),
    imageType?: string(name='image_type', example='AliyunLinux'),
    instanceChargeType: string(name='instance_charge_type', example='PrePaid'),
    instanceTypes: [ string ](name='instance_types'),
    internetChargeType?: string(name='internet_charge_type', example='PayByTraffic'),
    internetMaxBandwidthOut?: long(name='internet_max_bandwidth_out', example='5'),
    keyPair?: string(name='key_pair', example='np-key-name'),
    loginPassword?: string(name='login_password', example='Hello1234'),
    multiAzPolicy?: string(name='multi_az_policy', example='COST_OPTIMIZED'),
    onDemandBaseCapacity?: long(name='on_demand_base_capacity', example='0'),
    onDemandPercentageAboveBaseCapacity?: long(name='on_demand_percentage_above_base_capacity', example='20'),
    period?: long(name='period', example='1'),
    periodUnit?: string(name='period_unit', example='Month'),
    platform?: string(name='platform', example='AliyunLinux'),
    privatePoolOptions?: {
      id?: string(name='id', example='eap-bp67acfmxazb4****'),
      matchCriteria?: string(name='match_criteria', example='Open'),
    }(name='private_pool_options'),
    rdsInstances?: [ string ](name='rds_instances'),
    scalingPolicy?: string(name='scaling_policy', example='release'),
    securityGroupId?: string(name='security_group_id', example='sg-wz9a8g2mt6x5llu0****'),
    securityGroupIds?: [ string ](name='security_group_ids'),
    spotInstancePools?: long(name='spot_instance_pools', example='5'),
    spotInstanceRemedy?: boolean(name='spot_instance_remedy', example='false'),
    spotPriceLimit?: [ 
      {
        instanceType?: string(name='instance_type', example='ecs.c6.large'),
        priceLimit?: string(name='price_limit', example='0.39'),
      }
    ](name='spot_price_limit'),
    spotStrategy?: string(name='spot_strategy', example='NoSpot'),
    systemDiskBurstingEnabled?: boolean(name='system_disk_bursting_enabled', example='true'),
    systemDiskCategory: string(name='system_disk_category', example='cloud_efficiency'),
    systemDiskPerformanceLevel?: string(name='system_disk_performance_level', example='PL1'),
    systemDiskProvisionedIops?: long(name='system_disk_provisioned_iops', example='1000'),
    systemDiskSize: long(name='system_disk_size', example='120'),
    tags?: [ 
      {
        key?: string(name='key', example='node-k-1'),
        value?: string(name='value', example='node-v-1'),
      }
    ](name='tags'),
    vswitchIds: [ string ](name='vswitch_ids'),
  }(name='scaling_group', position='Body'),
  teeConfig?: {
    teeEnable: boolean(name='tee_enable', example='true'),
  }(name='tee_config', position='Body'),
}

model CreateClusterNodePoolResponseBody = {
  nodepoolId?: string(name='nodepool_id', description='The ID of the node pool that is created.', example='np31da1b38983f4511b490fc62108a****'),
}

model CreateClusterNodePoolResponse = {
  headers: map[string]string(name='headers'),
  body: CreateClusterNodePoolResponseBody(name='body'),
}

async function createClusterNodePool(request: CreateClusterNodePoolRequest): CreateClusterNodePoolResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateClusterNodePool', 'POST', '/clusters/{ClusterId}/nodepools', 'json', false, 'json', request);
}

model CreateEdgeMachineRequest {
  hostname: string(name='hostname', example='ACK-B-B010-****', position='Body'),
  model: string(name='model', example='ACK-V-B010', position='Body'),
  sn: string(name='sn', example='Q2CB5XZAFBFG****', position='Body'),
}

model CreateEdgeMachineResponseBody = {
  edgeMachineId?: string(name='edge_machine_id', description='The ID of the cloud-native box.', example='cc0725ddf688744979cd98445f67e****'),
  requestId?: string(name='request_id', description='The ID of the request.', example='"request_id": "6e7b377a-c5ed-4388-8026-689e1b34****",'),
}

model CreateEdgeMachineResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEdgeMachineResponseBody(name='body'),
}

async function createEdgeMachine(request: CreateEdgeMachineRequest): CreateEdgeMachineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateEdgeMachine', 'POST', '/edge_machines', 'json', false, 'json', request);
}

model CreateKubernetesTriggerRequest {
  action: string(name='action', example='redeploy', position='Body'),
  clusterId: string(name='cluster_id', example='c5cdf7e3938bc4f8eb0e44b21a80f****', position='Body'),
  projectId: string(name='project_id', example='default/test-app', position='Body'),
  type?: string(name='type', example='deployment', position='Body'),
}

model CreateKubernetesTriggerResponseBody = {
  action?: string(name='action', description='The action that the trigger performs. For example, a value of `redeploy` indicates that the trigger redeploys the application.', example='redeploy'),
  clusterId?: string(name='cluster_id', description='The ID of the ACK cluster.', example='c5cdf7e3938bc4f8eb0e44b21a80f****'),
  id?: string(name='id', description='The ID of the trigger.', example='111'),
  projectId?: string(name='project_id', description='The name of the project.', example='default/test-app'),
  type?: string(name='type', description='The type of trigger.

Valid values:

*   `deployment`: performs actions on Deployments.
*   `application`: performs actions on applications that are deployed in Application Center.', example='deployment'),
}

model CreateKubernetesTriggerResponse = {
  headers: map[string]string(name='headers'),
  body: CreateKubernetesTriggerResponseBody(name='body'),
}

async function createKubernetesTrigger(request: CreateKubernetesTriggerRequest): CreateKubernetesTriggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateKubernetesTrigger', 'POST', '/triggers', 'json', false, 'json', request);
}

model CreateTemplateRequest {
  description?: string(name='description', example='this is test', position='Body'),
  name: string(name='name', example='service-account-template', position='Body'),
  tags?: string(name='tags', example='test', position='Body'),
  template: string(name='template', example='apiVersion: v1\\nkind: ServiceAccount\\nmetadata:\\n  name: test-sa', position='Body'),
  templateType?: string(name='template_type', example='kubernetes', position='Body'),
}

model CreateTemplateResponseBody = {
  templateId?: string(name='template_id', description='The ID of the template.', example='ba1fe77b-b01e-4640-b77e-8f1b80e3e3cf'),
}

model CreateTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTemplateResponseBody(name='body'),
}

async function createTemplate(request: CreateTemplateRequest): CreateTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateTemplate', 'POST', '/templates', 'json', false, 'json', request);
}

model CreateTriggerRequest {
  clusterId: string(name='cluster_id', example='c68deb844dc6d480eb775be611fdf****', position='Path,Body'),
  action: string(name='action', example='redeploy', position='Body'),
  projectId: string(name='project_id', example='default/test-app', position='Body'),
  type?: string(name='type', example='deployment', position='Body'),
}

model CreateTriggerResponseBody = {
  action?: string(name='action', description='The action that the trigger performs. For example, a value of `redeploy` indicates that the trigger redeploys the application.', example='redeploy'),
  clusterId?: string(name='cluster_id', description='The ID of the cluster.', example='c93095129fc41463aa455d89444fd****'),
  id?: string(name='id', description='The ID of the trigger.', example='102536'),
  projectId?: string(name='project_id', description='The name of the project.', example='default/test-app'),
  type?: string(name='type', description='The type of trigger. Default value: deployment.', example='deployment'),
}

model CreateTriggerResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTriggerResponseBody(name='body'),
}

async function createTrigger(request: CreateTriggerRequest): CreateTriggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateTrigger', 'POST', '/clusters/{cluster_id}/triggers', 'json', false, 'json', request);
}

model DeleteAlertContactRequest {
}

model DeleteAlertContactResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteAlertContact(request: DeleteAlertContactRequest): DeleteAlertContactResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteAlertContact', 'DELETE', '/alert/contacts', 'none', false, 'json', request);
}

model DeleteAlertContactGroupRequest {
}

model DeleteAlertContactGroupResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteAlertContactGroup(request: DeleteAlertContactGroupRequest): DeleteAlertContactGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteAlertContactGroup', 'DELETE', '/alert/contact_groups', 'none', false, 'json', request);
}

model DeleteClusterRequest {
  clusterId: string(name='ClusterId', example='c905d1364c2dd4b6284a3f41790c4****', position='Path'),
  keepSlb?: boolean(name='keep_slb', example='false', position='Query'),
  retainAllResources?: boolean(name='retain_all_resources', example='false', position='Query'),
  retainResources?: [ string ](name='retain_resources', shrink='json', position='Query'),
}

model DeleteClusterResponseBody = {
  taskId?: string(name='task_id', description='任务ID。', example='T-5a54309c80282e39eaxxxxxx'),
}

model DeleteClusterResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteClusterResponseBody(name='body'),
}

async function deleteCluster(request: DeleteClusterRequest): DeleteClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteCluster', 'DELETE', '/clusters/{ClusterId}', 'json', false, 'json', request);
}

model DeleteClusterNodepoolRequest {
  clusterId: string(name='ClusterId', description='c61da77e8bfbc4c4c999af2b51b65\\*\\*\\*\\*', example='c61da77e8bfbc4c4c999af2b51b65****', position='Path'),
  nodepoolId: string(name='NodepoolId', description='np30db56bcac7843dca90b999c8928\\*\\*\\*\\*', example='np30db56bcac7843dca90b999c8928****', position='Path'),
  force?: boolean(name='force', description='false', example='false', position='Query'),
}

model DeleteClusterNodepoolResponseBody = {
  requestId?: string(name='request_id', description='The ID of the request.', example='7263C978-3DBD-4E06-B319-793B38A2F388'),
}

model DeleteClusterNodepoolResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteClusterNodepoolResponseBody(name='body'),
}

async function deleteClusterNodepool(request: DeleteClusterNodepoolRequest): DeleteClusterNodepoolResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteClusterNodepool', 'DELETE', '/clusters/{ClusterId}/nodepools/{NodepoolId}', 'json', false, 'json', request);
}

model DeleteClusterNodesRequest {
  clusterId: string(name='ClusterId', example='c850429a2287b4d968e27e87a4921****', position='Path'),
  drainNode?: boolean(name='drain_node', example='true', position='Body'),
  nodes: [ string ](name='nodes', position='Body'),
  releaseNode?: boolean(name='release_node', example='true', position='Body'),
}

model DeleteClusterNodesResponseBody = {
  clusterId?: string(name='cluster_id', description='The ID of the ACK cluster.', example='c104d5d5f301c4e2a8ee578c37bc****'),
  requestId?: string(name='request_id', description='The ID of the request.', example='A9891419-D125-4D89-AFCA-68846675E2F7'),
  taskId?: string(name='task_id', description='The ID of the task.', example='T-60fea8ad2e277f0879000ae9'),
}

model DeleteClusterNodesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteClusterNodesResponseBody(name='body'),
}

/**
  * > 
  * *   When you remove a node, the pods that run on the node are migrated to other nodes. This may cause service interruptions. We recommend that you remove nodes during off-peak hours.
  * *   Unknown errors may occur when you remove nodes. Before you remove nodes, back up the data on the nodes.
  * *   Nodes remain in the unschedulable state when they are being removed.
  * *   You can remove only worker nodes by calling this operation.
  *
 */
async function deleteClusterNodes(request: DeleteClusterNodesRequest): DeleteClusterNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteClusterNodes', 'POST', '/clusters/{ClusterId}/nodes', 'json', false, 'json', request);
}

model DeleteEdgeMachineRequest {
  edgeMachineid: string(name='edge_machineid', example='cc0725ddf688744979cd98445f67e****', position='Path'),
  force?: string(name='force', example='True/False', position='Query'),
}

model DeleteEdgeMachineResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteEdgeMachine(request: DeleteEdgeMachineRequest): DeleteEdgeMachineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteEdgeMachine', 'DELETE', '/edge_machines/[edge_machineid]', 'none', false, 'json', request);
}

model DeleteKubernetesTriggerRequest {
  id: string(name='Id', example='c5cdf7e3938bc4f8eb0e44b21a80f****', position='Path'),
}

model DeleteKubernetesTriggerResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteKubernetesTrigger(request: DeleteKubernetesTriggerRequest): DeleteKubernetesTriggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteKubernetesTrigger', 'DELETE', '/triggers/revoke/{Id}', 'none', false, 'json', request);
}

model DeletePolicyInstanceRequest {
  clusterId: string(name='cluster_id', example='c8155823d057948c69a****', position='Path'),
  policyName: string(name='policy_name', example='ACKAllowedRepos', position='Path'),
  instanceName?: string(name='instance_name', example='allowed-repos-mqdsf', position='Query'),
}

model DeletePolicyInstanceResponseBody = {
  instances?: [ string ](name='instances', description='The policy instances that are deleted.'),
}

model DeletePolicyInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePolicyInstanceResponseBody(name='body'),
}

async function deletePolicyInstance(request: DeletePolicyInstanceRequest): DeletePolicyInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeletePolicyInstance', 'DELETE', '/clusters/{cluster_id}/policies/{policy_name}', 'json', false, 'json', request);
}

model DeleteTemplateRequest {
  templateId: string(name='TemplateId', example='20663627-81ee-4cfe-9b69-c96fcb84a674', position='Path'),
}

model DeleteTemplateResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteTemplate(request: DeleteTemplateRequest): DeleteTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteTemplate', 'DELETE', '/templates/{TemplateId}', 'none', false, 'json', request);
}

model DeleteTriggerRequest {
  clusterId: string(name='cluster_id', example='c68deb844dc6d480eb775be611fdf****', position='Path'),
  id: string(name='Id', example='123407', position='Path'),
}

model DeleteTriggerResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteTrigger(request: DeleteTriggerRequest): DeleteTriggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteTrigger', 'DELETE', '/clusters/[cluster_id]/triggers/[Id]', 'none', false, 'json', request);
}

model DeployPolicyInstanceRequest {
  clusterId: string(name='cluster_id', description='c8155823d057948c69a\\*\\*\\*\\*', example='c8155823d057948c69a****', position='Path'),
  policyName: string(name='policy_name', description='ACKAllowedRepos', example='ACKNoEnvVarSecrets', position='Path'),
  action?: string(name='action', example='deny', position='Body'),
  namespaces?: [ string ](name='namespaces', position='Body'),
  parameters?: map[string]any(name='parameters', example='{"restrictedNamespaces": [ "test" ]}', position='Body'),
}

model DeployPolicyInstanceResponseBody = {
  instances?: [ string ](name='instances', description='The policy instances that are deployed.'),
}

model DeployPolicyInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeployPolicyInstanceResponseBody(name='body'),
}

async function deployPolicyInstance(request: DeployPolicyInstanceRequest): DeployPolicyInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeployPolicyInstance', 'POST', '/clusters/{cluster_id}/policies/{policy_name}', 'json', false, 'json', request);
}

model DescirbeWorkflowRequest {
  workflowName: string(name='workflowName', example='mapping-gpu-mhhgh', position='Path'),
}

model DescirbeWorkflowResponseBody = {
  createTime?: string(name='create_time', description='The time when the workflow was created.', example='2020-01-15 16:30:25 +0800 CST'),
  duration?: string(name='duration', description='The duration of the workflow.', example='1h15m33.529968361s'),
  finishTime?: string(name='finish_time', description='The time when the workflow ended.', example='0001-01-01 00:00:00 +0000 UTC'),
  inputDataSize?: string(name='input_data_size', description='The size of the input data.', example='0'),
  jobName?: string(name='job_name', description='The name of the workflow.', example='wgs-gpu-97xfn'),
  jobNamespace?: string(name='job_namespace', description='The namespace to which the workflow belongs.', example='1171330362041663'),
  outputDataSize?: string(name='output_data_size', description='The size of the output data.', example='0'),
  status?: string(name='status', description='The current state of the workflow.', example='Running'),
  totalBases?: string(name='total_bases', description='The number of base pairs.', example='0'),
  totalReads?: string(name='total_reads', description='The number of reads.', example='0'),
  userInputData?: string(name='user_input_data', description='The user input parameters.', example='{\\"wgs_oss_region\\":\\"cn-shenzhen\\",\\"wgs_fastq_first_name\\":\\"fastq/huada/MGISEQ-200019SZ0002402\\",\\"wgs_fastq_second_name\\":\\"fastq/huada/MGISEQ-200019SZ0002402\\",\\"wgs_bucket_name\\":\\"gene-shenzhen\\",\\"wgs_vcf_file_name\\":\\"output/vcf/huada.vcf\\",\\"wgs_bam_file_name\\":\\"output/bam/huada.bam\\",\\"wgs_reference_file\\":\\"hg19\\",\\"wgs_service\\":\\"g\\"}'),
}

model DescirbeWorkflowResponse = {
  headers: map[string]string(name='headers'),
  body: DescirbeWorkflowResponseBody(name='body'),
}

async function descirbeWorkflow(request: DescirbeWorkflowRequest): DescirbeWorkflowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescirbeWorkflow', 'GET', '/gs/workflow/{workflowName}', 'json', false, 'json', request);
}

model DescribeAddonsRequest {
  clusterProfile?: string(name='cluster_profile', example='Default', position='Query'),
  clusterSpec?: string(name='cluster_spec', example='ack.pro.small', position='Query'),
  clusterType?: string(name='cluster_type', example='kubernetes', position='Query'),
  clusterVersion?: string(name='cluster_version', example='1.24.6-aliyun.1', position='Query'),
  region: string(name='region', example='cn-beijing', position='Query'),
}

model DescribeAddonsResponseBody = {
  componentGroups?: [ 
    {
      groupName?: string(name='group_name', description='The name of the component group.', example='storage'),
      items?: [ 
        {
          name?: string(name='name', description='The name of the component.', example='flexvolume'),
        }
      ](name='items', description='The names of the components in the component group.'),
    }
  ](name='ComponentGroups', description='The details of the returned components.'),
  standardComponents?: map[string]StandardComponentsValue(name='StandardComponents'),
}

model DescribeAddonsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAddonsResponseBody(name='body'),
}

async function describeAddons(request: DescribeAddonsRequest): DescribeAddonsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeAddons', 'GET', '/clusters/components/metadata', 'json', false, 'json', request);
}

model DescribeClusterAddonInstanceRequest {
  clusterID?: string(name='ClusterID', example='cd06bbf8a86764a31bcac76136691****', position='Path'),
  addonName?: string(name='AddonName', example='terway-eniip', position='Path'),
}

model DescribeClusterAddonInstanceResponseBody = {
  config?: string(name='config', example='{"NetworkPolicy":"true"}'),
  name?: string(name='name', example='terway-eniip'),
  state?: string(name='state', example='active'),
  version?: string(name='version', example='v1.4.3'),
}

model DescribeClusterAddonInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterAddonInstanceResponseBody(name='body'),
}

async function describeClusterAddonInstance(request: DescribeClusterAddonInstanceRequest): DescribeClusterAddonInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeClusterAddonInstance', 'GET', '/clusters/{ClusterID}/components/{AddonName}/instance', 'json', false, 'json', request);
}

model DescribeClusterAddonMetadataRequest {
  clusterId: string(name='cluster_id', example='c71d616e629ff40d5b42d7bb87770****', position='Path'),
  componentId: string(name='component_id', example='coredns', position='Path'),
  version?: string(name='version', example='1.8.4.1', position='Path'),
}

model DescribeClusterAddonMetadataResponseBody = {
  configSchema?: string(name='config_schema', description='The schema of component parameters.', example='{\\n  \\"$schema\\": \\"https://json-schema.org/draft-07/schema#\\",\\n  \\"properties\\": {\\n    \\"controller\\": {\\n      \\"description\\": \\"\\",\\n      \\"properties\\": {\\n        \\"resources\\": {\\n          \\"properties\\": {\\n            \\"armsPrometheusOperator\\": {\\n              \\"properties\\": {\\n                \\"resources\\": {\\n                  \\"properties\\": {\\n                    \\"limits\\": {\\n                      \\"properties\\": {\\n                        \\"memory\\": {\\n                          \\"description\\": \\"memory limit of arms prometheus operator\\",\\n                          \\"type\\": \\"string\\",\\n                          \\"pattern\\": \\"^[1-9][0-9]*(\\\\\\\\.\\\\\\\\d+)?(K|Ki|M|Mi|G|Gi|T|Ti)?$\\",\\n                          \\"default\\": \\"500m\\",\\n                          \\"x-ui-description\\": \\"<mds-key>\\",\\n                          \\"x-ui-prompt-message\\": \\"<mds-key>\\",\\n                          \\"x-ui-validation-message\\": \\"<mds-key>\\",\\n                          \\"x-ui-additional-tips\\": \\"<mds-key>\\"\\n                        },\\n                        \\"cpu\\": {\\n                          \\"description\\": \\"cpu limit of arms prometheus operator\\",\\n                          \\"type\\": \\"string\\",\\n                          \\"pattern\\": \\"^[1-9][0-9]*(m|\\\\\\\\.\\\\\\\\d+)?$\\",\\n                          \\"default\\": \\"1.0\\",\\n                          \\"x-ui-description\\": \\"<mds-key>\\",\\n                          \\"x-ui-validation-message\\": \\"<mds-key>\\"\\n                        }\\n                      },\\n                      \\"type\\": \\"object\\",\\n                      \\"additionalProperties\\": false\\n                    },\\n                    \\"requests\\": {\\n                      \\"properties\\": {\\n                        \\"memory\\": {\\n                          \\"description\\": \\"memory request of arms prometheus operator\\",\\n                          \\"type\\": \\"string\\",\\n                          \\"pattern\\": \\"^[1-9][0-9]*(\\\\\\\\.\\\\\\\\d+)?(K|Ki|M|Mi|G|Gi|T|Ti)?$\\",\\n                          \\"default\\": \\"500m\\",\\n                          \\"x-ui-description\\": \\"<mds-key>\\",\\n                          \\"x-ui-validation-message\\": \\"<mds-key>\\"\\n                        },\\n                        \\"cpu\\": {\\n                          \\"description\\": \\"cpu request of arms prometheus operator\\",\\n                          \\"type\\": \\"string\\",\\n                          \\"pattern\\": \\"^[1-9][0-9]*(m|\\\\\\\\.\\\\\\\\d+)?$\\",\\n                          \\"default\\": \\"1.0\\",\\n                          \\"x-ui-description\\": \\"<mds-key>\\",\\n                          \\"x-ui-validation-message\\": \\"<mds-key>\\"\\n                        }\\n                      },\\n                      \\"type\\": \\"object\\",\\n                      \\"additionalProperties\\": false\\n                    }\\n                  },\\n                  \\"type\\": \\"object\\",\\n                  \\"additionalProperties\\": false\\n                }\\n              },\\n              \\"type\\": \\"object\\",\\n              \\"additionalProperties\\": false\\n            }\\n          },\\n          \\"type\\": \\"object\\",\\n          \\"additionalProperties\\": false\\n        }\\n      },\\n      \\"type\\": \\"object\\",\\n      \\"additionalProperties\\": false\\n    }\\n  },\\n  \\"title\\": \\"Values\\",\\n  \\"type\\": \\"object\\",\\n  \\"additionalProperties\\": false\\n}'),
  name?: string(name='name', description='The name of the component.', example='coredns'),
  version?: string(name='version', description='The version of the component.', example='1.8.4.1'),
}

model DescribeClusterAddonMetadataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterAddonMetadataResponseBody(name='body'),
}

async function describeClusterAddonMetadata(request: DescribeClusterAddonMetadataRequest): DescribeClusterAddonMetadataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeClusterAddonMetadata', 'GET', '/clusters/{cluster_id}/components/{component_id}/metadata', 'json', false, 'json', request);
}

model DescribeClusterAddonUpgradeStatusRequest {
  clusterId: string(name='ClusterId', description='The ID of the cluster.', example='c106f377e16f34eb1808d6b9362c9****', position='Path'),
  componentId: string(name='ComponentId', description='The ID of the add-on. For example, nginx-ingress-controller, flexvolume, and metrics-server.', example='cloud-controller-manager', position='Path'),
}

model DescribeClusterAddonUpgradeStatusResponse = {
  headers: map[string]string(name='headers'),
  body: map[string]any(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function describeClusterAddonUpgradeStatus(request: DescribeClusterAddonUpgradeStatusRequest): DescribeClusterAddonUpgradeStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeClusterAddonUpgradeStatus', 'GET', '/clusters/{ClusterId}/components/{ComponentId}/upgradestatus', 'json', false, 'json', request);
}

model DescribeClusterAddonsUpgradeStatusRequest {
  clusterId: string(name='ClusterId', example='c23421cfa74454bc8b37163fd19af****', position='Path'),
  componentIds: [ string ](name='componentIds', shrink='json', position='Query'),
}

model DescribeClusterAddonsUpgradeStatusResponse = {
  headers: map[string]string(name='headers'),
  body: map[string]any(name='body'),
}

async function describeClusterAddonsUpgradeStatus(request: DescribeClusterAddonsUpgradeStatusRequest): DescribeClusterAddonsUpgradeStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeClusterAddonsUpgradeStatus', 'GET', '/clusters/{ClusterId}/components/upgradestatus', 'json', false, 'json', request);
}

model DescribeClusterAddonsVersionRequest {
  clusterId: string(name='ClusterId', example='c82e6987e2961451182edacd74faf****', position='Path'),
}

model DescribeClusterAddonsVersionResponse = {
  headers: map[string]string(name='headers'),
  body: map[string]any(name='body'),
}

async function describeClusterAddonsVersion(request: DescribeClusterAddonsVersionRequest): DescribeClusterAddonsVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeClusterAddonsVersion', 'GET', '/clusters/{ClusterId}/components/version', 'json', false, 'json', request);
}

model DescribeClusterAttachScriptsRequest {
  clusterId: string(name='ClusterId', example='ca375a93a30474552ad2a0ebe183e****', position='Path'),
  arch?: string(name='arch', example='amd64', position='Body'),
  formatDisk?: boolean(name='format_disk', example='false', position='Body'),
  keepInstanceName?: boolean(name='keep_instance_name', example='true', position='Body'),
  nodepoolId?: string(name='nodepool_id', example='np1c9229d9be2d432c93f77a88fca0****', position='Body'),
  options?: string(name='options', example='{\\"enableIptables\\": true,\\"manageRuntime\\": true,\\"quiet\\": true,\\"allowedClusterAddons\\": [\\"kube-proxy\\",\\"flannel\\",\\"coredns\\"]}', position='Body'),
  rdsInstances?: [ string ](name='rds_instances', position='Body'),
}

model DescribeClusterAttachScriptsResponse = {
  headers: map[string]string(name='headers'),
  body: string(name='body'),
}

async function describeClusterAttachScripts(request: DescribeClusterAttachScriptsRequest): DescribeClusterAttachScriptsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeClusterAttachScripts', 'POST', '/clusters/{ClusterId}/attachscript', 'string', false, 'json', request);
}

model DescribeClusterDetailRequest {
  clusterId: string(name='ClusterId', example='cdde1f21ae22e483ebcb068a6eb7f****', position='Path'),
}

model DescribeClusterDetailResponseBody = {
  clusterId?: string(name='cluster_id', description='The ID of the queried ACK cluster.', example='c82e6987e2961451182edacd74faf****'),
  clusterSpec?: string(name='cluster_spec', description='The type of the managed Kubernetes cluster. This parameter is returned for a managed Kubernetes cluster. Valid values:

*   `ack.pro.small`: professional managed Kubernetes cluster.
*   `ack.standard`: standard managed Kubernetes cluster.', example='ack.pro.small'),
  clusterType?: string(name='cluster_type', description='The type of the cluster. Valid values:

*   `Kubernetes`: dedicated Kubernetes cluster
*   `ManagedKubernetes`: managed Kubernetes cluster
*   `Ask`: ASK cluster
*   `ExternalKubernetes`: registered external Kubernetes cluster', example='Kubernetes'),
  created?: string(name='created', description='The time when the cluster was created.', example='2019-11-25T15:50:20+08:00'),
  currentVersion?: string(name='current_version', description='The current Kubernetes version of the cluster. For more information about the Kubernetes versions supported by ACK, see [Release notes for Kubernetes versions](~~185269~~).', example='1.16.6-aliyun.1'),
  deletionProtection?: boolean(name='deletion_protection', description='Indicates whether deletion protection is enabled. If deletion protection is enabled, the cluster cannot be deleted in the ACK console or by calling the API. Valid values:

*   `true`: Deletion protection is enabled. You cannot delete the cluster in the ACK console or by calling the API.
*   `false`: Deletion protection is not enabled. You can delete the cluster in the ACK console or by calling the API.', example='true'),
  dockerVersion?: string(name='docker_version', description='The Docker version that is used by the cluster.', example='19.03.5'),
  externalLoadbalancerId?: string(name='external_loadbalancer_id', description='The ID of the Server Load Balancer (SLB) instance that is used for the Ingress of the cluster.', example='lb-2ze3buguz3gx9920z****'),
  initVersion?: string(name='init_version', description='The Kubernetes version that is initially used by the cluster.', example='1.16.6-aliyun.1'),
  maintenanceWindow?: MaintenanceWindow(name='maintenance_window', description='The maintenance window of the cluster. This feature is available in only professional managed Kubernetes clusters.'),
  masterUrl?: string(name='master_url', description='The address of the cluster. It includes an internal endpoint and a public endpoint.', example='{\\"intranet_api_server_endpoint\\":\\"https://192.168.0.251:6443\\"***}'),
  metaData?: string(name='meta_data', description='The metadata of the cluster.', example='\\"Addons\\":***'),
  name?: string(name='name', description='The name of the cluster.

The name must be 1 to 63 characters in length, and can contain digits, letters, and hyphens (-). It cannot start with a hyphen (-).', example='cluster-demo'),
  networkMode?: string(name='network_mode', description='The network mode of the cluster. Valid values:

*   `classic`: the classic network
*   `vpc`: virtual private cloud (VPC)
*   `overlay`: overlay network
*   `calico`: network powered by Calico

Default value`: vpc`.', example='vpc'),
  nextVersion?: string(name='next_version', description='The Kubernetes version to which the cluster can be upgraded.', example='1.18.8-aliyun.1'),
  parameters?: map[string]string(name='parameters'),
  privateZone?: boolean(name='private_zone', description='Indicates whether Alibaba Cloud DNS PrivateZone is enabled.

*   `true`: indicates that Alibaba Cloud DNS PrivateZone is enabled.
*   `false`: indicates that Alibaba Cloud DNS PrivateZone is not enabled.', example='false'),
  profile?: string(name='profile', description='Indicates the scenario in which the cluster is used. Valid values:

*   `Default`: indicates that the cluster is used in non-edge computing scenarios.
*   `Edge`: indicates that the ACK cluster is used in edge computing scenarios.', example='Default'),
  regionId?: string(name='region_id', description='The ID of the region where the cluster is deployed.', example='cn-beijing'),
  resourceGroupId?: string(name='resource_group_id', description='The ID of the resource group to which the cluster belongs.', example='rg-acfmyvw3wjm****'),
  securityGroupId?: string(name='security_group_id', description='The ID of the security group to which the instances of the cluster belong.', example='sg-25yq****'),
  size?: long(name='size', description='The number of nodes in the cluster. Master nodes and worker nodes are included.', example='5'),
  state?: string(name='state', description='The state of the cluster. Valid values:

*   `initial`: The cluster is being created.
*   `failed`: The cluster failed to be created.
*   `running`: The cluster is running.
*   `updating`: The cluster is being upgraded.
*   `updating_failed`: The cluster failed to be upgraded.
*   `scaling`: The cluster is being scaled.
*   `waiting`: The registered cluster is waiting for connecting.
*   `disconnected`: The registeredcluster is disconnected.
*   `stopped`: The cluster is stopped.
*   `deleting`: The cluster is being deleted.
*   `deleted`: The cluster is deleted.
*   `delete_failed`: The cluster failed to be deleted.', example='running'),
  subnetCidr?: string(name='subnet_cidr', description='The pod CIDR block. It must be a valid and private CIDR block, and must be one of the following CIDR blocks or their subnets:

*   10.0.0.0/8
*   172.16-31.0.0/12-16
*   192.168.0.0/16

The pod CIDR block cannot overlap with that of the VPC or those of the ACK clusters that are deployed in the VPC.

For more information about the network segmentation of ACK clusters, see [Plan CIDR blocks for ACK clusters in a VPC](~~186964~~).', example='172.20.0.0/16'),
  tags?: [
    Tag
  ](name='tags', description='The labels of the cluster.'),
  updated?: string(name='updated', description='The time when the cluster was updated.', example='2020-01-13T23:01:03+08:00'),
  vpcId?: string(name='vpc_id', description='The ID of the VPC where the cluster is deployed. This parameter is required when you create an ACK cluster.', example='vpc-2zecuu62b9zw7a7qn****'),
  vswitchId?: string(name='vswitch_id', description='The IDs of the vSwitches. You can select one to three vSwitches when you create an ACK cluster. vSwitches in different zones are recommended to ensure high availability.', example='vsw-2zete8s4qocqg0mf6****,vsw-2zete8s4qocqg0mf6****'),
  workerRamRoleName?: string(name='worker_ram_role_name', description='The name of the worker RAM role. The RAM role is assigned to the worker nodes of the cluster and allows the worker nodes to manage Elastic Compute Service (ECS) instances.', example='KubernetesWorkerRole-ec87d15b-edca-4302-933f-c8a16bf0****'),
  zoneId?: string(name='zone_id', description='The ID of the zone where the cluster is deployed.', example='cn-beijing-a'),
}

model DescribeClusterDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterDetailResponseBody(name='body'),
}

async function describeClusterDetail(request: DescribeClusterDetailRequest): DescribeClusterDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeClusterDetail', 'GET', '/clusters/{ClusterId}', 'json', false, 'json', request);
}

model DescribeClusterEventsRequest {
  clusterId: string(name='ClusterId', example='c82e6987e2961451182edacd74faf****', position='Path'),
  pageNumber?: long(name='page_number', example='1', position='Query'),
  pageSize?: long(name='page_size', example='50', position='Query'),
  taskId?: string(name='task_id', example='T-xascadasd*****', position='Query'),
}

model DescribeClusterEventsResponseBody = {
  events?: [ 
    {
      clusterId?: string(name='cluster_id', example='c82e6987e2961451182edacd74faf****'),
      data?: {
        level?: string(name='level', example='info'),
        message?: string(name='message', example='Start to upgrade NodePool nodePool/npdd89dc2b76c04f14b06774883b******'),
        reason?: string(name='reason', example='Started'),
      }(name='data'),
      eventId?: string(name='event_id', example='e-9ad04f72-8ee7-46bf-a02c-e4a06b39****'),
      source?: string(name='source', example='cluster'),
      subject?: string(name='subject', example='npdd89dc2b76c04f14b06774883b******'),
      time?: string(name='time', example='2020-12-01T17:31:00Z'),
      type?: string(name='type', example='nodepool_update'),
    }
  ](name='events'),
  pageInfo?: {
    pageNumber?: long(name='page_number', example='1'),
    pageSize?: long(name='page_size', example='50'),
    totalCount?: long(name='total_count', example='3'),
  }(name='page_info'),
}

model DescribeClusterEventsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterEventsResponseBody(name='body'),
}

async function describeClusterEvents(request: DescribeClusterEventsRequest): DescribeClusterEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeClusterEvents', 'GET', '/clusters/{ClusterId}/events', 'json', false, 'json', request);
}

model DescribeClusterLogsRequest {
  clusterId: string(name='ClusterId', example='c106f377e16f34eb1808d6b9362c9****', position='Path'),
}

model DescribeClusterLogsResponse = {
  headers: map[string]string(name='headers'),
  body: [ 
    {
      id?: long(name='ID', example='590749245'),
      clusterId?: string(name='cluster_id', example='c23421cfa74454bc8b37163fd19af***'),
      clusterLog?: string(name='cluster_log', example='start to update cluster status to CREATE_COMPLETE'),
      created?: string(name='created', example='2020-09-11T10:11:51+08:00'),
      updated?: string(name='updated', example='2020-09-11T10:11:51+08:00'),
    }
  ](name='body'),
}

async function describeClusterLogs(request: DescribeClusterLogsRequest): DescribeClusterLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeClusterLogs', 'GET', '/clusters/{ClusterId}/logs', 'array', false, 'json', request);
}

model DescribeClusterNodePoolDetailRequest {
  clusterId: string(name='ClusterId', example='c23421cfa74454bc8b37163fd19af****', position='Path'),
  nodepoolId: string(name='NodepoolId', example='np31da1b38983f4511b490fc62108a****', position='Path'),
}

model DescribeClusterNodePoolDetailResponseBody = {
  autoScaling?: {
    eipBandwidth?: long(name='eip_bandwidth', description='The peak bandwidth of the elastic IP address (EIP) that is associated with the node pool.', example='5'),
    eipInternetChargeType?: string(name='eip_internet_charge_type', description='The billing method of the EIP. Valid values:

*   `PayByBandwidth`: pay-by-bandwidth
*   `PayByTraffic`: pay-by-data-transfer', example='PayByBandwidth'),
    enable?: boolean(name='enable', description='Indicates whether auto scaling is enabled. Valid values:

*   `true`: Auto scaling is enabled.
*   `false`: Auto scaling is disabled. If this parameter is set to false, other parameters in the `auto_scaling` section do not take effect.', example='true'),
    isBondEip?: boolean(name='is_bond_eip', description='Indicates whether an EIP is associated with the node pool. Valid values:

*   `true`: An EIP is associated with the node pool.
*   `false`: No EIP is associated with the node pool.', example='true'),
    maxInstances?: long(name='max_instances', description='The maximum number of Elastic Compute Service (ECS) instances supported by the node pool.', example='10'),
    minInstances?: long(name='min_instances', description='The minimum number of ECS instances that must be kept in the node pool.', example='1'),
    type?: string(name='type', description='The instance types that can be used for the auto scaling of the node pool. Valid values:

*   `cpu`: regular instance
*   `gpu`: GPU-accelerated instance
*   `gpushare`: shared GPU-accelerated instance
*   `spot`: preemptible instance', example='cpu'),
  }(name='auto_scaling', description='The auto scaling configurations of the queried node pool.'),
  interconnectConfig?: {
    bandwidth?: long(name='bandwidth', example='10'),
    ccnId?: string(name='ccn_id', example='ccn-qm5i0i0q9yi*******'),
    ccnRegionId?: string(name='ccn_region_id', example='cn-shanghai'),
    cenId?: string(name='cen_id', example='cen-ey9k9nfhz0f*******'),
    improvedPeriod?: string(name='improved_period', example='1'),
  }(name='interconnect_config'),
  interconnectMode?: string(name='interconnect_mode', description='The network type of the edge node pool. Valid values: basic and enhanced. This parameter takes effect only for edge node pools.', example='improved'),
  kubernetesConfig?: {
    cmsEnabled?: boolean(name='cms_enabled', description='Indicates whether the CloudMonitor agent is installed on ECS nodes in the cluster. After the CloudMonitor agent is installed, you can view monitoring information about the ECS instances in the CloudMonitor console. Installation is recommended. Valid values:

*   `true`: The CloudMonitor agent is installed on ECS nodes.
*   `false`: The CloudMonitor agent is not installed on ECS nodes.', example='true'),
    cpuPolicy?: string(name='cpu_policy', description='The CPU management policy of the nodes in the node pool. The following policies are supported if the Kubernetes version of the cluster is 1.12.6 or later.

*   `static`: allows pods with specific resource characteristics on the node to be granted enhanced CPU affinity and exclusivity.
*   `none`: indicates that the default CPU affinity is used.', example='none'),
    labels?: [
      Tag
    ](name='labels', description='The labels of the nodes in the node pool. You can add labels to the nodes in the cluster. You must add labels based on the following rules:

*   Each label is a case-sensitive key-value pair. You can add up to 20 labels.
*   A key must be unique and cannot exceed 64 characters in length. A value can be empty and cannot exceed 128 characters in length. Keys and values cannot start with `aliyun`, `acs:`, `https://`, or `http://`. For more information, see [Labels and Selectors](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#syntax-and-character-set).'),
    nodeNameMode?: string(name='node_name_mode', description='A custom node name consists of a prefix, an IP substring, and a suffix.

*   The prefix and suffix can contain multiple parts that are separated by periods (.). Each part can contain lowercase letters, digits, and hyphens (-). A custom node name must start and end with a digit or lowercase letter.
*   The IP substring length specifies the number of digits to be truncated from the end of the node IP address. The IP substring length ranges from 5 to 12.

For example, if the node IP address is 192.168.0.55, the prefix is aliyun.com, the IP substring length is 5, and the suffix is test, the node name will be aliyun.com00055test.', example='customized,test.,5,.com'),
    runtime?: string(name='runtime', description='The name of the container runtime.', example='docker'),
    runtimeVersion?: string(name='runtime_version', description='The version of the container runtime.', example='19.03.5'),
    taints?: [
      Taint
    ](name='taints', description='The taints of the nodes. Taints are added to nodes to prevent pods from being scheduled to inappropriate nodes. However, toleration rules allow pods to be scheduled to nodes with matching taints. For more information, see [taint-and-toleration](https://kubernetes.io/zh/docs/concepts/scheduling-eviction/taint-and-toleration/).'),
    userData?: string(name='user_data', description='The user-defined data of the node pool. For more information, see [Generate user-defined data](~~49121~~).', example='IyEvYmluL3NoCmVjaG8gIkhlbGxvIEFDSyEi'),
  }(name='kubernetes_config', description='The configurations of the cluster where the node pool is deployed.'),
  management?: {
    autoRepair?: boolean(name='auto_repair', description='Indicates whether enable auto repair is enabled. This parameter takes effect only when `enable=true` is specified.

*   `true`: Auto repair is enabled.
*   `false`: Auto repair is disabled.', example='true'),
    enable?: boolean(name='enable', description='Indicates whether to enable the managed node pool feature is enabled. Valid values:

*   `true`: The managed node pool feature is enabled.
*   `false`: The managed node pool feature is disabled. Other parameters in this section take effect only when `enable=true` is specified.', example='true'),
    upgradeConfig?: {
      autoUpgrade?: boolean(name='auto_upgrade', description='Indicates whether auto upgrade is enabled. Valid values:

*   `true`: Auto upgrade is enabled.
*   `false`: Auto upgrade is disabled.', example='true'),
      maxUnavailable?: long(name='max_unavailable', description='The maximum number of nodes that can be in the Unavailable state. Valid values: 1 to 1000.

Default value: 1', example='1'),
      surge?: long(name='surge', description='The number of nodes that are temporarily added to the node pool during an auto upgrade.', example='5'),
      surgePercentage?: long(name='surge_percentage', description='The percentage of temporary nodes to the nodes in the node pool. You must set this parameter or `surge`.', example='50'),
    }(name='upgrade_config', description='The configurations of auto upgrade. The configurations take effect only when `enable=true` is specified.'),
  }(name='management', description='The configurations about the managed node pool feature.'),
  maxNodes?: long(name='max_nodes', description='The maximum number of nodes that are supported by the edge node pool. The value of this parameter must be equal to or greater than 0. A value of 0 indicates that the number of nodes in the node pool is limited only by the quota of nodes in the cluster. In most cases, this parameter is set to a value larger than 0 for edge node pools. This parameter is set to 0 for node pools of the ess type or default edge node pools.', example='10'),
  nodepoolInfo?: {
    created?: string(name='created', description='The time when the node pool was created.', example='2020-09-27T19:14:09.156823496+08:00'),
    isDefault?: boolean(name='is_default', description='Indicates whether the node pool is a default node pool. A Container Service for Kubernetes (ACK) cluster usually has only one default node pool. Valid values:

`true`: The node pool is a default node pool.

`false`: The node pool is not a default node pool.', example='true'),
    name?: string(name='name', description='The name of the node pool.

The name must be 1 to 63 characters in length, and can contain digits, letters, and hyphens (-). It cannot start with a hyphen (-).', example='default-nodepool'),
    nodepoolId?: string(name='nodepool_id', description='The ID of the node pool.', example='np615c0e0966124216a0412e10afe0****'),
    regionId?: string(name='region_id', description='The ID of the region where the node pool is deployed.', example='cn-beijing'),
    resourceGroupId?: string(name='resource_group_id', description='The ID of the resource group to which the node pool belongs.', example='rg-acfmyvw3wjmb****'),
    type?: string(name='type', description='The type of the node pool.', example='ess'),
    updated?: string(name='updated', description='The time when the node pool was last updated.', example='2020-09-27T20:37:46+08:00'),
  }(name='nodepool_info', description='The configurations of the node pool.'),
  scalingGroup?: {
    autoRenew?: boolean(name='auto_renew', description='Indicates whether auto-renewal is enabled for the nodes in the node pool. This parameter takes effect only when `instance_charge_type` is set to `PrePaid`. Valid values:

*   `true`: Auto-renewal is enabled.
*   `false`: Auto-renewal is disabled.', example='false'),
    autoRenewPeriod?: long(name='auto_renew_period', description='The duration of the auto-renewal. This parameter takes effect and is required only when `instance_charge_type` is set to `PrePaid`.

If you specify `PeriodUnit=Month`, the valid values are 1, 2, 3, 6, and 12.', example='1'),
    compensateWithOnDemand?: boolean(name='compensate_with_on_demand', description='Indicates whether pay-as-you-go instances are automatically created to meet the required number of ECS instances if preemptible instances cannot be created due to reasons such as cost or insufficient inventory. This parameter takes effect when `multi_az_policy` is set to `COST_OPTIMIZED`. Valid values:

*   `true`: Pay-as-you-go instances are automatically created to meet the required number of ECS instances if preemptible instances cannot be created.
*   `false`: Pay-as-you-go instances are not automatically created to meet the required number of ECS instances if preemptible instances cannot be created.', example='true'),
    dataDisks?: [
      DataDisk
    ](name='data_disks', description='The configurations of the data disks that are attached to the nodes in the node pool. The configurations include the disk type and disk size.'),
    deploymentsetId?: string(name='deploymentset_id', description='The ID of the deployment set to which the ECS instances in the node pool belong.', example='ds-bp1d19mmbsv3jf6xxxxx'),
    desiredSize?: long(name='desired_size', description='The expected number of nodes in the node pool.', example='2'),
    imageId?: string(name='image_id', description='The ID of the custom image. You can call the `DescribeKubernetesVersionMetadata` operation to query the images supported by ACK.', example='aliyun_2_1903_x64_20G_alibase_20200529.vhd'),
    instanceChargeType?: string(name='instance_charge_type', description='The billing method of the nodes in the node pool. Valid values:

*   `PrePaid`: subscription
*   `PostPaid`: pay-as-you-go', example='PostPaid'),
    instanceTypes?: [ string ](name='instance_types', description='The instance types of the nodes in the node pool.'),
    internetChargeType?: string(name='internet_charge_type', description='The billing method of the public IP address of the node.', example='PayByBandwidth'),
    internetMaxBandwidthOut?: long(name='internet_max_bandwidth_out', description='The maximum outbound bandwidth of the public IP address of the node. Unit: Mbit/s. Valid values: 1 to 100.', example='10'),
    keyPair?: string(name='key_pair', description='The name of the key pair. You must set this parameter or the `login_password` parameter. You must set `key_pair` if the node pool is a managed node pool.', example='pro-nodepool'),
    loginPassword?: string(name='login_password', description='The password for SSH logon. You must set this parameter or the `key_pair` parameter. The password must be 8 to 30 characters in length, and must contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters.

For security purposes, the returned password is encrypted.', example='********'),
    multiAzPolicy?: string(name='multi_az_policy', description='The ECS instance scaling policy for a multi-zone scaling group. Valid values:

*   `PRIORITY`: the scaling group is scaled based on the VSwitchIds.N parameter. If an ECS instance cannot be created in the zone where the vSwitch that has the highest priority resides, Auto Scaling creates the ECS instance in the zone where the vSwitch that has the next highest priority resides.

*   `COST_OPTIMIZED`: ECS instances are created based on the vCPU unit price in ascending order. Preemptible instances are preferably created when preemptible instance types are specified in the scaling configuration. You can set the `CompensateWithOnDemand` parameter to specify whether to automatically create pay-as-you-go instances when preemptible instances cannot be created due to insufficient resources.

    **

    **Note** `COST_OPTIMIZED` is valid only when multiple instance types are specified or at least one preemptible instance type is specified.

*   `BALANCE`: ECS instances are evenly distributed across multiple zones specified by the scaling group. If ECS instances become imbalanced among multiple zones due to insufficient inventory, you can call the RebalanceInstances operation of Auto Scaling to balance the instance distribution among zones. For more information, see [RebalanceInstances](~~71516~~)

Default value: `PRIORITY`', example='BALANCE'),
    onDemandBaseCapacity?: long(name='on_demand_base_capacity', description='The minimum number of pay-as-you-go instances that must be kept in the scaling group. Valid values: 0 to 1000. If the number of pay-as-you-go instances is less than the value of this parameter, Auto Scaling preferably creates pay-as-you-go instances.', example='0'),
    onDemandPercentageAboveBaseCapacity?: long(name='on_demand_percentage_above_base_capacity', description='The percentage of pay-as-you-go instances among the extra instances that exceed the number specified by `on_demand_base_capacity`. Valid values: 0 to 100.', example='20'),
    period?: long(name='period', description='The subscription duration of worker nodes. This parameter takes effect and is required only when `instance_charge_type` is set to `PrePaid`.

If `PeriodUnit=Month` is specified, the valid values are 1, 2, 3, 6, 12, 24, 36, 48, and 60.', example='0'),
    periodUnit?: string(name='period_unit', description='The billing cycle of the nodes. This parameter is required if `instance_charge_type` is set to `PrePaid`.

Valid value: `Month`', example='Month'),
    platform?: string(name='platform', description='The release version of the operating system. Valid values:

*   `CentOS`
*   `AliyunLinux`
*   `Windows`
*   `WindowsCore`', example='AliyunLinux'),
    privatePoolOptions?: {
      id?: string(name='id', description='The ID of the private node pool.', example='eap-bp67acfmxazb4****'),
      matchCriteria?: string(name='match_criteria', description='The type of private node pool. This parameter specifies the type of the private pool that you want to use to create instances. A private pool is generated when an elasticity assurance or a capacity reservation takes effect. You can select a private pool to start instances. Valid values:

*   `Open`: open private pool. The system selects an open private pool to start instances. If no matching open private pools are available, the resources in the public pool are used.
*   `Target`: specific private pool. The system uses the resources of the specified private pool to start instances. If the specified private pool is unavailable, instances cannot be started.
*   `None`: no private pool is used. The resources of private pools are not used to start instances.', example='Open'),
    }(name='private_pool_options', description='The configurations of the private node pool.'),
    ramPolicy?: string(name='ram_policy', description='The name of the worker Resource Access Management (RAM) role. The RAM role is assigned to the worker nodes of the cluster to allow the worker nodes to manage ECS instances.', example='KubernetesWorkerRole-021dc54f-929b-437a-8ae0-34c24d3e****'),
    rdsInstances?: [ string ](name='rds_instances', description='The IDs of the ApsaraDB RDS instances.'),
    scalingGroupId?: string(name='scaling_group_id', description='The ID of the scaling group.', example='asg-2zeieod8giqmov7z****'),
    scalingPolicy?: string(name='scaling_policy', description='The scaling mode of the scaling group. Valid values:

*   `release`: the standard mode. ECS instances are created and released based on the resource usage.
*   `recycle`: the swift mode. ECS instances are created, stopped, or started during scaling events. This reduces the time required for the next scale-out event. When the instance is stopped, you are charged only for the storage service. This does not apply to ECS instances attached with local disks.', example='release'),
    securityGroupId?: string(name='security_group_id', description='The ID of the security group to which the node pool is added. If the node pool is added to multiple security groups, the first ID in the value of `security_group_ids` is returned.', example='sg-2ze60ockeekspl3d****'),
    securityGroupIds?: [ string ](name='security_group_ids', description='The IDs of the security groups to which the node pool is added.'),
    spotInstancePools?: long(name='spot_instance_pools', description='The number of instance types that are available for creating preemptible instances. Auto Scaling creates preemptible instances of multiple instance types that are available at the lowest cost. Valid values: 1 to 10.', example='5'),
    spotInstanceRemedy?: boolean(name='spot_instance_remedy', description='Indicates whether preemptible instances are supplemented when the number of preemptible instances drops below the specified minimum number. If this parameter is set to true, when the scaling group receives a system message that a preemptible instance is to be reclaimed, the scaling group attempts to create a new instance to replace this instance. Valid values: Valid values:

*   `true`: Supplementation of preemptible instances is enabled.
*   `false`: Supplementation of preemptible instances is disabled.', example='false'),
    spotPriceLimit?: [ 
      {
        instanceType?: string(name='instance_type', description='The instance type of preemptible instances.', example='ecs.c6.large'),
        priceLimit?: string(name='price_limit', description='The price limit of a preemptible instance.

Unit: USD/hour.', example='0.39'),
      }
    ](name='spot_price_limit', description='The bid configurations of preemptible instances.'),
    spotStrategy?: string(name='spot_strategy', description='The bidding policy of preemptible instances. Valid values:

*   NoSpot: a non-preemptible instance.
*   SpotWithPriceLimit: a preemptible instance that is configured with the highest bid price.
*   SpotAsPriceGo: a preemptible instance for which the system automatically bids based on the current market price.

For more information, see [Preemptible instances](~~157759~~).', example='NoSpot'),
    systemDiskCategory?: string(name='system_disk_category', description='The type of system disk. Valid values:

*   `cloud_efficiency`: ultra disk
*   `cloud_ssd`: standard SSD', example='cloud_efficiency'),
    systemDiskPerformanceLevel?: string(name='system_disk_performance_level', description='The performance level (PL) of the system disk that you want to use for the node. This parameter takes effect only for enhanced SSDs (ESSDs).', example='PL1'),
    systemDiskSize?: long(name='system_disk_size', description='The system disk size of a node. Unit: GiB.

Valid values: 20 to 500', example='120'),
    tags?: [
      Tag
    ](name='tags', description='The labels that you want to add to the ECS instances.

A key must be unique and cannot exceed 128 characters in length. Neither keys nor values can start with aliyun or acs:. Neither keys nor values can contain https:// or http://.'),
    vswitchIds?: [ string ](name='vswitch_ids', description='The IDs of vSwitches.'),
  }(name='scaling_group', description='The configurations of the scaling group.'),
  status?: {
    failedNodes?: long(name='failed_nodes', example='0'),
    healthyNodes?: long(name='healthy_nodes', example='3'),
    initialNodes?: long(name='initial_nodes', example='0'),
    offlineNodes?: long(name='offline_nodes', example='0'),
    removingNodes?: long(name='removing_nodes', example='0'),
    servingNodes?: long(name='serving_nodes', example='3'),
    state?: string(name='state', example='active'),
    totalNodes?: long(name='total_nodes', example='3'),
  }(name='status'),
  teeConfig?: {
    teeEnable?: boolean(name='tee_enable', description='Indicates whether confidential computing is enabled. Valid values:

*   `true`: Confidential computing is enabled.
*   `false`: Confidential computing is disabled.', example='false'),
  }(name='tee_config', description='The configurations of confidential computing.'),
}

model DescribeClusterNodePoolDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterNodePoolDetailResponseBody(name='body'),
}

async function describeClusterNodePoolDetail(request: DescribeClusterNodePoolDetailRequest): DescribeClusterNodePoolDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeClusterNodePoolDetail', 'GET', '/clusters/{ClusterId}/nodepools/{NodepoolId}', 'json', false, 'json', request);
}

model DescribeClusterNodePoolsRequest {
  clusterId: string(name='ClusterId', example='cc0f87de0b8fb403f86e10e204f83****', position='Path'),
}

model DescribeClusterNodePoolsResponseBody = {
  nodepools?: [ 
    {
      autoScaling?: {
        eipBandwidth?: long(name='eip_bandwidth', description='The peak bandwidth of the elastic IP address (EIP).', example='5'),
        eipInternetChargeType?: string(name='eip_internet_charge_type', description='The billing method of the EIP. Valid values:

*   `PayByBandwidth`: pay-by-bandwidth
*   `PayByTraffic`: pay-by-data-transfer', example='PayByBandwidth'),
        enable?: boolean(name='enable', description='Indicates whether auto scaling is enabled.

*   `true`: Auto scaling is enabled for the node pool.
*   `false`: Auto scaling is disabled for the node pool. If you set this parameter to `false`, other parameters in the `auto_scaling` section does not take effect.', example='true'),
        isBondEip?: boolean(name='is_bond_eip', description='Indicates whether an EIP is associated with the node pool. Valid values:

*   `true`: An EIP is associated with the node pool.
*   `false`: No EIP is associated with the node pool.', example='true'),
        maxInstances?: long(name='max_instances', description='The maximum number of Elastic Compute Service (ECS) instances supported by the node pool.', example='10'),
        minInstances?: long(name='min_instances', description='The minimum number of ECS instances.', example='2'),
        type?: string(name='type', description='The minimum number of ECS instances that must be kept in the node pool. Valid values:

*   `cpu`: regular instance
*   `gpu`: GPU-accelerated instance
*   `gpushare`: shared GPU-accelerated instance
*   `spot`: preemptible instance', example='cpu'),
      }(name='auto_scaling', description='The configurations of auto scaling.'),
      interconnectConfig?: {
        bandwidth?: long(name='bandwidth', example='10'),
        ccnId?: string(name='ccn_id', example='ccn-qm5i0i0q9yi*******'),
        ccnRegionId?: string(name='ccn_region_id', example='cn-shanghai'),
        cenId?: string(name='cen_id', example='cen-ey9k9nfhz0f*******'),
        improvedPeriod?: string(name='improved_period', example='1'),
      }(name='interconnect_config'),
      interconnectMode?: string(name='interconnect_mode', example='improved'),
      kubernetesConfig?: {
        cmsEnabled?: boolean(name='cms_enabled', description='Indicates where the CloudMonitor agent is installed on ECS nodes of the cluster. After the CloudMonitor agent is installed, you can view monitoring information about the ECS instances in the CloudMonitor console. Installation is recommended. Valid values:

*   `true` The CloudMonitor agent is installed on ECS nodes.
*   `false`: The CloudMonitor agent is not installed on ECS nodes.', example='true'),
        cpuPolicy?: string(name='cpu_policy', description='The CPU management policy. The following policies are supported if the Kubernetes version of the cluster is 1.12.6 or later.

*   `static`: This policy allows pods with specific resource characteristics on the node to be granted with enhanced CPU affinity and exclusivity.
*   `none`: indicates that the default CPU affinity is used.', example='none'),
        labels?: [
          Tag
        ](name='labels', description='The labels of the nodes. You can add labels to the nodes in the cluster. You must add labels based on the following rules:

*   Each label is a case-sensitive key-value pair. You can add up to 20 labels.
*   A key must be unique and cannot exceed 64 characters in length. A value can be empty and cannot exceed 128 characters in length. Keys and values cannot start with `aliyun`, `acs:`, `https://`, or `http://`. For more information, see [Labels and Selectors](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#syntax-and-character-set).'),
        nodeNameMode?: string(name='node_name_mode', example='customized,test.,5,.com'),
        runtime?: string(name='runtime', description='The name of the container runtime.', example='docker'),
        runtimeVersion?: string(name='runtime_version', description='The version of the container runtime.', example='19.03.5'),
        taints?: [
          Taint
        ](name='taints', description='The taints that are added to nodes. Taints are added to nodes to prevent pods from being scheduled to inappropriate nodes. However, toleration rules allow pods to be scheduled to nodes with matching taints. For more information, see [taint-and-toleration](https://kubernetes.io/zh/docs/concepts/scheduling-eviction/taint-and-toleration/).'),
        userData?: string(name='user_data', description='The user-defined data of the node pool. For more information, see [Generate user-defined data](~~49121~~).', example='IyEvYmluL3NoCmVjaG8gIkhlbGxvIEFD****'),
      }(name='kubernetes_config', description='The configurations of the cluster.'),
      management?: {
        autoRepair?: boolean(name='auto_repair', description='Indicates whether auto repair is enabled. Auto repair is enabled only when `enable=true` is specified.

*   `true`: Auto repair is enabled.
*   `false`: Auto repair is disabled.', example='true'),
        enable?: boolean(name='enable', description='Indicates whether managed node pools are enabled. Valid values:

*   `true`: Managed node pools are enabled.
*   `false`: Managed node pools are disabled. Other parameters in this section take effect only when `enable=true` is specified.', example='true'),
        upgradeConfig?: {
          autoUpgrade?: boolean(name='auto_upgrade', description='Indicates whether auto upgrade is enabled. Valid values:

*   `true`: Auto upgrade is enabled.
*   `true`: Auto upgrade is disabled.', example='true'),
          maxUnavailable?: long(name='max_unavailable', description='The maximum number of nodes that can be in the unschedulable state. Valid values: 1 to 1000.

Default value: 1', example='1'),
          surge?: long(name='surge', description='The number of nodes that are temporarily added to the node pool during an auto upgrade.', example='5'),
          surgePercentage?: long(name='surge_percentage', description='The percentage of temporary nodes to the nodes in the node pool. You must set this parameter or `surge`.

The number of extra nodes = The percentage of extra nodes × The number of nodes in the node pool. For example, the percentage of extra nodes is set to 50% and the number of nodes in the node pool is six. The number of extra nodes will be three.', example='50'),
        }(name='upgrade_config', description='The configurations of auto upgrade. The configurations take effect only when `enable=true` is specified.'),
      }(name='management', description='The configurations of managed node pools. Managed node pools are available only in professional managed Kubernetes clusters.'),
      maxNodes?: long(name='max_nodes', example='10'),
      nodepoolInfo?: {
        created?: string(name='created', description='The time when the node pool was created.', example='2020-09-27T19:14:09.156823496+08:00'),
        isDefault?: boolean(name='is_default', description='Indicates whether the node pool is a default node pool. An ACK cluster usually has only one default node pool. Valid values:

*   `true`: The node pool is a default node pool.
*   `false`: The node pool is not a default node pool.', example='true'),
        name?: string(name='name', description='The name of the node pool.

The name must be 1 to 63 characters in length, and can contain digits, letters, and hyphens (-). It cannot start with a hyphen (-).', example='default-nodepool'),
        nodepoolId?: string(name='nodepool_id', description='The ID of the node pool.', example='np615c0e0966124216a0412e10afe0****'),
        regionId?: string(name='region_id', description='The ID of the region where the node pool is deployed.', example='cn-beijing'),
        resourceGroupId?: string(name='resource_group_id', description='The ID of the resource group to which the node pool belongs.', example='rg-acfmyvw3wjm****'),
        type?: string(name='type', description='The type of the node pool. Valid values:

*   `edge`: edge node pools.
*   `ess`: cloud node pools.', example='ess'),
        updated?: string(name='updated', description='The time when the node pool was last updated.', example='2020-09-27T20:37:46+08:00'),
      }(name='nodepool_info', description='The information about the node pool.'),
      scalingGroup?: {
        autoRenew?: boolean(name='auto_renew', description='Indicates whether auto-renewal is enabled for the nodes in the node pool. This parameter takes effect only when `instance_charge_type` is set to `PrePaid`. Valid values:

*   `true`: Auto-renewal is enabled.
*   `false`: Auto-renewal is disabled.', example='false'),
        autoRenewPeriod?: long(name='auto_renew_period', description='The duration of the auto-renewal. This parameter takes effect and is required only when `instance_charge_type` is set to `PrePaid`.

If `PeriodUnit=Month` is specified, the valid values are 1, 2, 3, 6, and 12.', example='0'),
        compensateWithOnDemand?: boolean(name='compensate_with_on_demand', description='Indicates whether pay-as-you-go instances are automatically created to meet the required number of ECS instances when the preemptible instances cannot be created due to reasons such as the cost or inventory availability. This parameter takes effect when `multi_az_policy` is set to `COST_OPTIMIZED`. Valid values:

*   `true`: Pay-as-you-go instances are automatically created to meet the required number of ECS instances if preemptible instances cannot be created.
*   `false`: Pay-as-you-go instances are not created to meet the required number of ECS instances if preemptible instances cannot be created.', example='true'),
        dataDisks?: [
          DataDisk
        ](name='data_disks', description='The configurations of the data disks attached to the nodes in the node pool. The configurations include the disk type and disk size.'),
        deploymentsetId?: string(name='deploymentset_id', example='ds-bp1d19mmbsv3jf6xxxxx'),
        desiredSize?: long(name='desired_size', example='2'),
        imageId?: string(name='image_id', description='The ID of the custom image. You can call `DescribeKubernetesVersionMetadata` to query the images supported by ACK.', example='aliyun_2_1903_x64_20G_alibase_20200529.vhd'),
        instanceChargeType?: string(name='instance_charge_type', description='The billing method of the nodes in the node pool. Valid values:

*   `PrePaid`: subscription
*   `PostPaid`: pay-as-you-go', example='PostPaid'),
        instanceTypes?: [ string ](name='instance_types', description='The instance types of the nodes in the node pool.', example='ecs.n4.large'),
        internetChargeType?: string(name='internet_charge_type', description='The billing method of the public IP address of the node.', example='PayByBandwidth'),
        internetMaxBandwidthOut?: long(name='internet_max_bandwidth_out', description='The maximum outbound bandwidth of the public IP address of the node. Unit: Mbit/s. Valid values: 1 to 100.', example='10'),
        keyPair?: string(name='key_pair', description='The name of the key pair. You must set this parameter or the `login_password` parameter.

You must set `key_pair` if the node pool is a managed node pool.', example='pro-nodepool'),
        loginPassword?: string(name='login_password', description='The password for SSH logon. You must set this parameter or the `key_pair` parameter. The password must be 8 to 30 characters in length, and must contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters.

For security purposes, the returned password is encrypted.', example='******'),
        multiAzPolicy?: string(name='multi_az_policy', description='The ECS instance scaling policy for a multi-zone scaling group. Valid values:

*   `PRIORITY`: the scaling group is scaled based on the VSwitchIds.N parameter. When an ECS instance cannot be created in the zone where the vSwitch with the highest priority resides, the system uses the vSwitch with the next highest priority to create the ECS instance.

*   `COST_OPTIMIZED`: ECS instances are created based on the vCPU unit price in ascending order. Preemptible instances are preferentially created when multiple instance types are specified in the scaling configurations. You can set the `CompensateWithOnDemand` parameter to specify whether to automatically create pay-as-you-go instances when preemptible instances cannot be created due to insufficient resources.

    **

    **Note** `COST_OPTIMIZED` is valid only when multiple instance types are specified or at least one preemptible instance type is specified.

*   `BALANCE`: ECS instances are evenly distributed across multiple zones specified by the scaling group. If ECS instances become imbalanced among multiple zones due to insufficient inventory, you can call `RebalanceInstances` of Auto Scaling (ESS) to balance the instance distribution among zones. For more information, see [RebalanceInstances](~~71516~~).', example='COST_OPTIMIZED'),
        onDemandBaseCapacity?: long(name='on_demand_base_capacity', description='The minimum number of pay-as-you-go instances that must be kept in the scaling group. Valid values: 0 to 1000. When the number of pay-as-you-go instances is lower than this value, pay-as-you-go instances are preferentially created to meet the required number.', example='0'),
        onDemandPercentageAboveBaseCapacity?: long(name='on_demand_percentage_above_base_capacity', description='The percentage of pay-as-you-go instances among the extra instances that exceed the number specified by `on_demand_base_capacity`. Valid values: 0 to 100.', example='20'),
        period?: long(name='period', description='The subscription duration of worker nodes. This parameter takes effect and is required only when `instance_charge_type` is set to `PrePaid`.

If `PeriodUnit=Month` is specified, the valid values are 1, 2, 3, 6, 12, 24, 36, 48, and 60.', example='1'),
        periodUnit?: string(name='period_unit', description='The billing cycle of the nodes. This parameter takes effect only when `instance_charge_type` is set to `PrePaid`.

Valid value: `Month`', example='Month'),
        platform?: string(name='platform', description='The release version of the operating system. Valid values:

*   `CentOS`
*   `AliyunLinux`
*   `Windows`
*   `WindowsCore`', example='AliyunLinux'),
        privatePoolOptions?: {
          id?: string(name='id'),
          matchCriteria?: string(name='match_criteria'),
        }(name='private_pool_options'),
        ramPolicy?: string(name='ram_policy', description='The name of the worker Resource Access Management (RAM) role. The RAM role is assigned to the worker nodes of the cluster to allow the worker nodes to manage ECS instances.', example='KubernetesWorkerRole-021dc54f-929b-437a-8ae0-34c24d3e****'),
        rdsInstances?: [ string ](name='rds_instances', description='The IDs of the ApsaraDB RDS instances.'),
        scalingGroupId?: string(name='scaling_group_id', description='The ID of the scaling group.', example='asg-2ze8n5qw4atggut8****'),
        scalingPolicy?: string(name='scaling_policy', description='The scaling mode of the scaling group. Valid values:

*   `release`: the standard mode. ECS instances are created and released based on the resource usage.
*   `recycle`: the swift mode. ECS instances are created, stopped, or started during scaling events. This reduces the time required for the next scale-out event. When the instance is stopped, you are charged only for the storage service. This does not apply to ECS instances attached with local disks.', example='release'),
        securityGroupId?: string(name='security_group_id', description='The ID of the security group to which the node pool is added. If the node pool is added to multiple security groups, the first ID in the value of `security_group_ids` is returned.', example='sg-2ze1iuk12m2sb4c4****'),
        securityGroupIds?: [ string ](name='security_group_ids', description='The IDs of the security groups to which the node pool is added.'),
        spotInstancePools?: long(name='spot_instance_pools', description='The number of available instance types. The scaling group creates preemptible instances of multiple instance types at the lowest cost. Valid values: 1 to 10.', example='5'),
        spotInstanceRemedy?: boolean(name='spot_instance_remedy', description='Indicates whether preemptible instances are supplemented when the number of preemptible instances drops below the specified minimum number. If this parameter is set to true, when the scaling group receives a system message that a preemptible instance is to be reclaimed, the scaling group attempts to create a new instance to replace this instance. Valid values:

*   `true`: Supplement to preemptible instances is enabled.
*   `false`: Supplement to preemptible instances is disabled.', example='false'),
        spotPriceLimit?: [ 
          {
            instanceType?: string(name='instance_type', description='The instance type for preemptible instances.', example='ecs.c6.large'),
            priceLimit?: string(name='price_limit', description='The price limit of a preemptible instance. Unit: USD/hour.', example='0.39'),
          }
        ](name='spot_price_limit', description='The bid configurations of preemptible instances.'),
        spotStrategy?: string(name='spot_strategy', description='The bidding policy of preemptible instances. Valid values:

*   NoSpot: non-preemptible instance.
*   SpotWithPriceLimit: specifies the highest bid for the preemptible instance.
*   SpotAsPriceGo: automatically submits bids based on the up-to-date market price.

For more information, see [Preemptible instances](~~157759~~).', example='NoSpot'),
        systemDiskCategory?: string(name='system_disk_category', description='The type of system disk. Valid values:

*   `cloud_efficiency`: ultra disk
*   `cloud_ssd`: standard SSD', example='cloud_efficiency'),
        systemDiskPerformanceLevel?: string(name='system_disk_performance_level', example='PL1'),
        systemDiskSize?: long(name='system_disk_size', description='The system disk size of a worker node. Unit: GiB.

Valid values: 20 to 500', example='120'),
        tags?: [
          Tag
        ](name='tags', description='The labels that are added only to ECS instances.

A key must be unique and cannot exceed 128 characters in length. Neither keys nor values can start with aliyun or acs:. Neither keys nor values can contain https:// or http://.'),
        vswitchIds?: [ string ](name='vswitch_ids', description='The IDs of vSwitches.'),
      }(name='scaling_group', description='The configurations of the scaling group.'),
      status?: {
        failedNodes?: long(name='failed_nodes', description='The number of failed nodes.', example='0'),
        healthyNodes?: long(name='healthy_nodes', description='The number of healthy nodes.', example='3'),
        initialNodes?: long(name='initial_nodes', description='The number of nodes that are being created.', example='0'),
        offlineNodes?: long(name='offline_nodes', description='The number of offline nodes.', example='0'),
        removingNodes?: long(name='removing_nodes', description='The number of nodes that are being removed.', example='0'),
        servingNodes?: long(name='serving_nodes', description='The number of running nodes.', example='3'),
        state?: string(name='state', description='The status of the node pool. Valid values:

*   `active`: The node pool is active.
*   `scaling`: The node pool is being scaled.
*   `removing`: Nodes are being removed from the node pool.
*   `deleting`: The node pool is being deleted.
*   `updating`: The node pool is being updated.', example='active'),
        totalNodes?: long(name='total_nodes', description='The total number of nodes in the node pool.', example='3'),
      }(name='status', description='The status details about the node pool.'),
      teeConfig?: {
        teeEnable?: boolean(name='tee_enable', description='Indicates whether confidential computing is enabled. Valid values:

*   `true`: confidential computing is enabled.
*   `false`: confidential computing is disabled.', example='false'),
      }(name='tee_config', description='The configurations of confidential computing.'),
    }
  ](name='nodepools', description='The list of the returned node pools.'),
}

model DescribeClusterNodePoolsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterNodePoolsResponseBody(name='body'),
}

async function describeClusterNodePools(request: DescribeClusterNodePoolsRequest): DescribeClusterNodePoolsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeClusterNodePools', 'GET', '/clusters/{ClusterId}/nodepools', 'json', false, 'json', request);
}

model DescribeClusterNodesRequest {
  clusterId: string(name='ClusterId', example='c82e6987e2961451182edacd74faf****', position='Path'),
  instanceIds?: string(name='instanceIds', example='"i-bp11xjhwkj8k966u****,i-bp1dmhc2bu5igkyq****"', position='Query'),
  nodepoolId?: string(name='nodepool_id', example='np****', position='Query'),
  pageNumber?: string(name='pageNumber', example='1', position='Query'),
  pageSize?: string(name='pageSize', example='10', position='Query'),
  state?: string(name='state', example='running', position='Query'),
}

model DescribeClusterNodesResponseBody = {
  nodes?: [ 
    {
      creationTime?: string(name='creation_time', description='The time when the node was created.', example='2020-08-25T11:25:35+08:00'),
      errorMessage?: string(name='error_message', description='The error message that was generated when the node was created.', example='error***'),
      expiredTime?: string(name='expired_time', description='The expiration time of the node.', example='2099-12-31T23:59:00+08:00'),
      hostName?: string(name='host_name', description='The name of the host.', example='iZ2vcckdmxp7u0urj2k****'),
      imageId?: string(name='image_id', description='The ID of the system image that is used by the node.', example='aliyun_2_1903_x64_20G_alibase_20200529.vhd'),
      instanceChargeType?: string(name='instance_charge_type', description='The billing method of the instance on which the node is deployed. Valid values:

*   `PrePaid`: the subscription billing method. If the value is PrePaid, make sure that you have a sufficient balance or credit in your account. Otherwise, an `InvalidPayMethod` error is returned.
*   `PostPaid`: the pay-as-you-go billing method.', example='PostPaid'),
      instanceId?: string(name='instance_id', description='The ID of the instance on which the node is deployed.', example='i-2vcckdmxp7u0urj2****'),
      instanceName?: string(name='instance_name', description='The name of the instance on which the node is deployed.', example='worker-k8s-for-cs-c5cdf7e3938bc4f8eb0e44b21a80f****'),
      instanceRole?: string(name='instance_role', description='The role of the node. Valid values:

*   Master: master node
*   Worker: worker node', example='Worker'),
      instanceStatus?: string(name='instance_status', description='The status of the node.', example='Running'),
      instanceType?: string(name='instance_type', description='The instance type of the node.', example='ecs.c5.xlarge'),
      instanceTypeFamily?: string(name='instance_type_family', description='The Elastic Compute Service (ECS) instance family of the node.', example='ecs.c5'),
      ipAddress?: [ string ](name='ip_address', description='The IP address of the node.'),
      isAliyunNode?: boolean(name='is_aliyun_node', description='Indicates whether the instance on which the node is deployed is provided by Alibaba Cloud. Valid values:

*   `true`: The instance is provided by Alibaba Cloud.
*   `false`: The instance is not provided by Alibaba Cloud.', example='true'),
      nodeName?: string(name='node_name', description='The name of the node. This name is the identifier of the node in the cluster.', example='cn-chengdu.192.168.0.36'),
      nodeStatus?: string(name='node_status', description='Indicates whether the node is ready. Valid values:

*   `Ready`: The node is ready.
*   `NotReady`: The node is not ready.
*   `Unknown`: The status of the node is unknown.
*   `Offline`: The node is offline.', example='Ready'),
      nodepoolId?: string(name='nodepool_id', description='The ID of the node pool.', example='np0794239424a84eb7a95327369d56****'),
      source?: string(name='source', description='Indicates how the node is initialized. A node can be manually created or created by using Resource Orchestration Service (ROS).', example='ess_attach'),
      spotStrategy?: string(name='spot_strategy', description='The type of the preemptible instance. Valid values:

*   NoSpot: a non-preemptible instance.
*   SpotWithPriceLimit: a preemptible instance that is configured with the highest bid price.
*   SpotAsPriceGo: a preemptible instance for which the system automatically bids based on the current market price.', example='NoSpot'),
      state?: string(name='state', description='The status of the node. Valid values:

*   `pending`: The node is being created.
*   `running`: The node is running.
*   `starting`: The node is being started.
*   `stopping`: The node is being stopped.
*   `stopped`: The node is stopped.', example='running'),
    }
  ](name='nodes', description='The details of the nodes that are returned.'),
  page?: {
    pageNumber?: int32(name='page_number', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='page_size', description='The number of entries returned per page.', example='10'),
    totalCount?: int32(name='total_count', description='The total number of entries returned.', example='5'),
  }(name='page', description='The pagination details.'),
}

model DescribeClusterNodesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterNodesResponseBody(name='body'),
}

async function describeClusterNodes(request: DescribeClusterNodesRequest): DescribeClusterNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeClusterNodes', 'GET', '/clusters/{ClusterId}/nodes', 'json', false, 'json', request);
}

model DescribeClusterResourcesRequest {
  clusterId: string(name='ClusterId', example='cb95aa626a47740afbf6aa099b65****', position='Path'),
}

model DescribeClusterResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: [ 
    {
      clusterId?: string(name='cluster_id', example='cb95aa626a47740afbf6aa099b65****'),
      created?: string(name='created', example='2020-09-11T10:11:54+08:00'),
      instanceId?: string(name='instance_id', example='lb-wz9poz4r0ymh8u0uf****'),
      resourceInfo?: string(name='resource_info', example='{\\"Id\\":\\"k8s_master_slb\\",\\"Name\\":\\"k8s_master_slb\\",\\"Type\\":\\"ALIYUN::SLB::LoadBalancer\\",\\"Status\\":\\"CREATE_COMPLETE\\",\\"StatusReason\\":\\"state changed\\",\\"Updated\\":\\"2020-05-21T13:25:02\\",\\"PhysicalId\\":\\"lb-wz9poz4r0ymh8u0uf****\\"}'),
      resourceType?: string(name='resource_type', example='ALIYUN::SLB::LoadBalancer'),
      state?: string(name='state', example='CREATE_COMPLETE'),
      autoCreate?: long(name='auto_create', example='1'),
    }
  ](name='body'),
}

async function describeClusterResources(request: DescribeClusterResourcesRequest): DescribeClusterResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeClusterResources', 'GET', '/clusters/{ClusterId}/resources', 'array', false, 'json', request);
}

model DescribeClusterTasksRequest {
  clusterId?: string(name='cluster_id', example='c23421cfa74454bc8b37163fd19af****', position='Path'),
}

model DescribeClusterTasksResponseBody = {
  pageInfo?: {
    pageNumber?: long(name='page_number', example='1'),
    pageSize?: long(name='page_size', example='10'),
    totalCount?: long(name='total_count', example='10'),
  }(name='page_info'),
  requestId?: string(name='requestId', example='0527ac9a-c899-4341-a21a-xxxxxxxxx'),
  tasks?: [ 
    {
      created?: string(name='created', example='2022-08-03T10:11:33+08:00'),
      error?: {
        code?: string(name='code', example='BadRequest'),
        message?: string(name='message', example='Addon status not match'),
      }(name='error'),
      state?: string(name='state', example='success'),
      taskId?: string(name='task_id', example='install-addons-c3xxxxxx'),
      taskType?: string(name='task_type', example='cluster_addon_install'),
      updated?: string(name='updated', example='2022-08-03T10:12:03.482+08:00'),
    }
  ](name='tasks'),
}

model DescribeClusterTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterTasksResponseBody(name='body'),
}

async function describeClusterTasks(request: DescribeClusterTasksRequest): DescribeClusterTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeClusterTasks', 'GET', '/clusters/{cluster_id}/tasks', 'json', false, 'json', request);
}

model DescribeClusterUserKubeconfigRequest {
  clusterId: string(name='ClusterId', example='c5b5e80b0b64a4bf6939d2d8fbbc5****', position='Path'),
  privateIpAddress?: boolean(name='PrivateIpAddress', example='true', position='Query'),
  temporaryDurationMinutes?: long(name='TemporaryDurationMinutes', example='15', position='Query'),
}

model DescribeClusterUserKubeconfigResponseBody = {
  config?: string(name='config', description='The content of the kubeconfig file. For more information about the content of the kubeconfig file, see [Configure cluster credentials](~~86494~~).', example='apiVersion: v1****'),
  expiration?: string(name='expiration', description='The expiration time of the kubeconfig file. The value is the UTC time displayed in RFC3339 format.', example='2024-03-10T09:56:17Z'),
}

model DescribeClusterUserKubeconfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterUserKubeconfigResponseBody(name='body'),
}

async function describeClusterUserKubeconfig(request: DescribeClusterUserKubeconfigRequest): DescribeClusterUserKubeconfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeClusterUserKubeconfig', 'GET', '/k8s/{ClusterId}/user_config', 'json', false, 'json', request);
}

model DescribeClusterV2UserKubeconfigRequest {
  clusterId: string(name='ClusterId', position='Path'),
  privateIpAddress?: boolean(name='PrivateIpAddress', position='Query'),
}

model DescribeClusterV2UserKubeconfigResponseBody = {
  config?: string(name='config'),
}

model DescribeClusterV2UserKubeconfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterV2UserKubeconfigResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function describeClusterV2UserKubeconfig(request: DescribeClusterV2UserKubeconfigRequest): DescribeClusterV2UserKubeconfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeClusterV2UserKubeconfig', 'GET', '/api/v2/k8s/{ClusterId}/user_config', 'json', false, 'json', request);
}

model DescribeClusterVulsRequest {
  clusterId?: string(name='cluster_id', example='c5cdf7e3938bc4f8eb0e44b21a80f****', position='Path'),
}

model DescribeClusterVulsResponseBody = {
  vulRecords?: [ 
    {
      cveList?: [ string ](name='cve_list'),
      necessity?: string(name='necessity', example='asap'),
      nodeCount?: int32(name='node_count', example='1'),
      nodepoolId?: string(name='nodepool_id', example='np0156da1082b54fa987e32618dd45f5d3'),
      nodepoolName?: string(name='nodepool_name', example='test'),
      vulAliasName?: string(name='vul_alias_name'),
      vulName?: string(name='vul_name', example='oval:com.redhat.rhsa:def:xxxxxxx'),
      vulType?: string(name='vul_type', example='cve'),
    }
  ](name='vul_records'),
}

model DescribeClusterVulsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterVulsResponseBody(name='body'),
}

async function describeClusterVuls(request: DescribeClusterVulsRequest): DescribeClusterVulsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeClusterVuls', 'GET', '/clusters/{cluster_id}/vuls', 'json', false, 'json', request);
}

model DescribeClustersRequest {
  clusterType?: string(name='clusterType', description='The cluster type.', example='ManagedKubernetes', position='Query'),
  name?: string(name='name', description='The cluster name based on which the system performs fuzzy searches among the clusters that belong to the current Alibaba Cloud account.', example='test', position='Query'),
}

model DescribeClustersResponse = {
  headers: map[string]string(name='headers'),
  body: [ 
    {
      clusterId?: string(name='cluster_id'),
      clusterType?: string(name='cluster_type'),
      created?: string(name='created'),
      currentVersion?: string(name='current_version'),
      dataDiskCategory?: string(name='data_disk_category'),
      dataDiskSize?: long(name='data_disk_size'),
      deletionProtection?: boolean(name='deletion_protection'),
      dockerVersion?: string(name='docker_version'),
      externalLoadbalancerId?: string(name='external_loadbalancer_id'),
      initVersion?: string(name='init_version'),
      masterUrl?: string(name='master_url'),
      metaData?: string(name='meta_data'),
      name?: string(name='name'),
      networkMode?: string(name='network_mode'),
      privateZone?: boolean(name='private_zone'),
      profile?: string(name='profile'),
      regionId?: string(name='region_id'),
      resourceGroupId?: string(name='resource_group_id'),
      securityGroupId?: string(name='security_group_id'),
      size?: long(name='size'),
      state?: string(name='state'),
      subnetCidr?: string(name='subnet_cidr'),
      tags?: [ 
        {
          key?: string(name='key'),
          value?: string(name='value'),
        }
      ](name='tags'),
      updated?: string(name='updated'),
      vpcId?: string(name='vpc_id'),
      vswitchCidr?: string(name='vswitch_cidr'),
      vswitchId?: string(name='vswitch_id'),
      workerRamRoleName?: string(name='worker_ram_role_name'),
      zoneId?: string(name='zone_id'),
    }
  ](name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function describeClusters(request: DescribeClustersRequest): DescribeClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeClusters', 'GET', '/clusters', 'array', false, 'json', request);
}

model DescribeClustersV1Request {
  clusterSpec?: string(name='cluster_spec', example='ack.pro.small', position='Query'),
  clusterType?: string(name='cluster_type', example='Kubernetes', position='Query'),
  name?: string(name='name', example='cluster-demo', position='Query'),
  pageNumber?: long(name='page_number', example='3', position='Query'),
  pageSize?: long(name='page_size', example='10', position='Query'),
  profile?: string(name='profile', example='Default', position='Query'),
  regionId?: string(name='region_id', example='cn-hangzhou', position='Query'),
}

model DescribeClustersV1ResponseBody = {
  clusters?: [ 
    {
      clusterId?: string(name='cluster_id', description='The ID of the queried cluster.', example='c3fb96524f9274b4495df0f12a6b5****'),
      clusterSpec?: string(name='cluster_spec', description='The type of the managed Kubernetes cluster. This parameter is returned for a managed Kubernetes cluster. Valid values:

*   `ack.pro.small`: professional managed Kubernetes cluster
*   `ack.standard`: standard managed Kubernetes cluster', example='ack.standard'),
      clusterType?: string(name='cluster_type', description='The type of the cluster. Valid values:

*   `Kubernetes`: dedicated Kubernetes cluster
*   `ManagedKubernetes`: managed Kubernetes cluster
*   `Ask`: ASK cluster
*   `ExternalKubernetes`: registered external cluster', example='Kubernetes'),
      created?: string(name='created', description='The time when the cluster was created.', example='2020-08-20T10:51:29+08:00'),
      currentVersion?: string(name='current_version', description='The Kubernetes version of the cluster.', example='1.16.9-aliyun.1'),
      deletionProtection?: boolean(name='deletion_protection', description='Indicates whether deletion protection is enabled for the cluster. After deletion protection is enabled, the cluster cannot be deleted in the console or by calling API operations. Valid values:

*   `true`: deletion protection is enabled for the cluster. The cluster cannot be deleted in the ACK console or by calling API operations.
*   `false`: deletion protection is disabled for the cluster. The cluster can be deleted in the ACK console or by calling API operations.', example='true'),
      dockerVersion?: string(name='docker_version', description='The Docker version that is used by the cluster.', example='19.03.5'),
      externalLoadbalancerId?: string(name='external_loadbalancer_id', description='The ID of the Server Load Balancer (SLB) instance that is used for the Ingress of the cluster.

The default SLB specification is slb.s1.small, which belongs to the high-performance instance type.', example='lb-2vcrbmlevo6kjpgch****'),
      initVersion?: string(name='init_version', description='The Kubernetes version of the cluster. The Kubernetes versions provided by ACK are consistent with the open source Kubernetes versions. We recommend that you select the latest Kubernetes version. If you do not specify a Kubernetes version, the latest Kubernetes version is used by default.

You can create clusters of the latest two Kubernetes versions in the ACK console. You can create ACK clusters of earlier Kubernetes versions by calling API operations. For more information about the Kubernetes versions supported by ACK, see [Release notes for Kubernetes versions](~~185269~~).', example='1.16.9-aliyun.1'),
      maintenanceWindow?: MaintenanceWindow(name='maintenance_window', description='The maintenance window of the cluster. This feature is available only in professional managed Kubernetes clusters.'),
      masterUrl?: string(name='master_url', description='The address of the cluster API server. It includes an internal endpoint and a public endpoint.', example='{\\"api_server_endpoint\\":\\"\\",\\"intranet_api_server_endpoint\\":\\"https://192.168.0.251:6443\\"}'),
      metaData?: string(name='meta_data', description='The metadata of the cluster.', example='{\\"Addons\\":[{\\"config\\":***}'),
      name?: string(name='name', description='The name of the cluster.

The name must be 1 to 63 characters in length, and can contain digits, letters, and hyphens (-). It cannot start with a hyphen (-).', example='cluster-demo'),
      networkMode?: string(name='network_mode', description='The network mode of the cluster. Valid values:

*   `classic`: classic network
*   `vpc`: virtual private cloud (VPC)
*   `overlay`: overlay network
*   `calico`: network powered by Calico', example='vpc'),
      nextVersion?: string(name='next_version', description='The Kubernetes version to which the cluster can be upgraded.', example='1.18.8-aliyun.1'),
      privateZone?: boolean(name='private_zone', description='Indicates whether Alibaba Cloud DNS PrivateZone is enabled. Valid values:

*   `true`: Alibaba Cloud DNS PrivateZone is enabled.
*   `false`: Alibaba Cloud DNS PrivateZone is disabled.', example='false'),
      profile?: string(name='profile', description='The identifier of the cluster. Valid values:

*   `Edge`: The cluster is a managed edge Kubernetes cluster.
*   `Default`: The cluster is not a managed edge Kubernetes cluster.', example='Default'),
      regionId?: string(name='region_id', description='The ID of the region where the cluster is deployed.', example='cn-beijing'),
      resourceGroupId?: string(name='resource_group_id', description='The ID of the resource group to which the cluster belongs.', example='rg-acfmyvw3wjm****'),
      securityGroupId?: string(name='security_group_id', description='The ID of the security group to which the instances of the cluster belong.', example='sg-2vcgwsrwgt5mp0yi****'),
      size?: long(name='size', description='The number of nodes in the cluster. Master nodes and worker nodes are included.', example='5'),
      state?: string(name='state', description='The status of the cluster. Valid values:

*   `initial`: The cluster is being created.
*   `failed`: The cluster failed to be created.
*   `running`: The cluster is running.
*   `updating`: The cluster is being upgraded.
*   `updating_failed`: The cluster failed to be upgraded.
*   `scaling`: The cluster is being scaled.
*   `stopped`: The cluster is stopped.
*   `deleting`: The cluster is being deleted.
*   `deleted`: The cluster is deleted.
*   `delete_failed`: The cluster failed to be deleted.', example='running'),
      subnetCidr?: string(name='subnet_cidr', description='The pod CIDR block. It must be a valid and private CIDR block, and must be one of the following CIDR blocks or their subnets:

*   10.0.0.0/8
*   172.16-31.0.0/12-16
*   192.168.0.0/16

The CIDR block of pods cannot overlap with the CIDR block of the VPC in which the cluster is deployed and the CIDR blocks of existing clusters in the VPC. You cannot modify the pod CIDR block after the cluster is created.

For more information about subnetting for ACK clusters, see [Plan CIDR blocks for ACK clusters in a VPC](~~86500~~).', example='172.21.0.0/16'),
      tags?: [
        Tag
      ](name='tags', description='The labels of the cluster.'),
      updated?: string(name='updated', description='The time when the cluster was updated.', example='2020-09-16T11:09:55+08:00'),
      vpcId?: string(name='vpc_id', description='The ID of the VPC where the cluster is deployed. You must specify a VPC when you create a cluster.', example='vpc-2vcg932hsxsxuqbgl****'),
      vswitchId?: string(name='vswitch_id', description='The IDs of the vSwitches. You can select one to three vSwitches when you create a cluster. We recommend that you select vSwitches in different zones to ensure high availability.', example='vsw-2vc41xuumx5z2rdma****,vsw-2vc41xuumx5z2rdma****'),
      workerRamRoleName?: string(name='worker_ram_role_name', description='The name of the worker Resource Access Management (RAM) role. The RAM role is assigned to the worker nodes that are created on Elastic Compute Service (ECS) instances.', example='KubernetesWorkerRole-ec87d15b-edca-4302-933f-c8a16bf0****'),
      zoneId?: string(name='zone_id', description='The ID of the zone where the cluster is deployed.', example='cn-beijing-b'),
    }
  ](name='clusters', description='The list of the details of the queried cluster.'),
  pageInfo?: {
    pageNumber?: int32(name='page_number', description='The number of the returned page.', example='3'),
    pageSize?: int32(name='page_size', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='total_count', description='The total number of entries returned.', example='50'),
  }(name='page_info', description='The pagination details.'),
}

model DescribeClustersV1Response = {
  headers: map[string]string(name='headers'),
  body: DescribeClustersV1ResponseBody(name='body'),
}

async function describeClustersV1(request: DescribeClustersV1Request): DescribeClustersV1Response {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeClustersV1', 'GET', '/api/v1/clusters', 'json', false, 'json', request);
}

model DescribeEdgeMachineActiveProcessRequest {
  edgeMachineid: string(name='edge_machineid', example='cc0725ddf688744979cd98445f67e****', position='Path'),
}

model DescribeEdgeMachineActiveProcessResponseBody = {
  logs?: string(name='logs', description='The list of details about the activation progress.', example='[{\\"content\\":\\"步骤 \\"颁发激活凭证\\" 执行开始\\",\\"id\\":0,\\"level\\":3,\\"timestamp\\":1625994913000},{\\"content\\":\\"步骤 \\"颁发激活凭证\\" 执行成功\\",\\"id\\":1,\\"level\\":3,\\"timestamp\\":1625994914000},{\\"content\\":\\"步骤 \\"初始化主机配置\\" 执行开始\\",\\"id\\":2,\\"level\\":3,\\"timestamp\\":1625994975000},{\\"content\\":\\"步骤 \\"初始化主机配置\\" 执行成功\\",\\"id\\":3,\\"level\\":3,\\"timestamp\\":1625994975000}]'),
  progress?: long(name='progress', description='The activation progress.', example='100'),
  requestId?: string(name='request_id', description='The ID of the request.', example='b62796a8-c5a6-4d3f-beb2-7650e4309cb1'),
  state?: string(name='state', description='The status of the cloud-native box.', example='ACTIVATED'),
  step?: string(name='step', description='The current step of the activation process.', example='步骤 \\"初始化主机配置\\" 执行成功'),
}

model DescribeEdgeMachineActiveProcessResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEdgeMachineActiveProcessResponseBody(name='body'),
}

async function describeEdgeMachineActiveProcess(request: DescribeEdgeMachineActiveProcessRequest): DescribeEdgeMachineActiveProcessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeEdgeMachineActiveProcess', 'GET', '/edge_machines/[edge_machineid]/activeprocess', 'json', false, 'json', request);
}

model DescribeEdgeMachineModelsRequest {
}

model DescribeEdgeMachineModelsResponseBody = {
  models?: [ 
    {
      cpu?: int32(name='cpu', description='The number of CPU cores.', example='6'),
      cpuArch?: string(name='cpu_arch', description='The CPU architecture.', example='x86_64/arm64'),
      created?: string(name='created', description='The time when the cloud-native box was created.', example='2021-07-07T20:44:00+08:00'),
      description?: string(name='description', description='The description.', example='B010'),
      manageRuntime?: int32(name='manage_runtime', description='Indicates whether the Docker runtime is managed.', example='0/1'),
      memory?: int32(name='memory', description='The memory size. Unit: GB.', example='8'),
      model?: string(name='model', description='The model of the cloud-native box.', example='ACK-V-B010'),
      modelId?: string(name='model_id', description='The ID of the cloud-native box.', example='c34cc753-8908-4739-bd10-ebd922a4****'),
    }
  ](name='models', description='The list of details about the models of cloud-native boxes.'),
}

model DescribeEdgeMachineModelsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEdgeMachineModelsResponseBody(name='body'),
}

async function describeEdgeMachineModels(request: DescribeEdgeMachineModelsRequest): DescribeEdgeMachineModelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeEdgeMachineModels', 'GET', '/edge_machines/models', 'json', false, 'json', request);
}

model DescribeEdgeMachineTunnelConfigDetailRequest {
  edgeMachineid: string(name='edge_machineid', example='cc0725ddf688744979cd98445f67e****', position='Path'),
}

model DescribeEdgeMachineTunnelConfigDetailResponseBody = {
  deviceName?: string(name='device_name', description='The name of the cloud-native box.', example='TEST0621N0FF****'),
  model?: string(name='model', description='The model of the cloud-native box.', example='ACK-A-S001'),
  productKey?: string(name='product_key', description='The product key.', example='a11rXul****'),
  requestId?: string(name='request_id', description='The ID of the request.', example='bfd12953-31cb-42f1-8a36-7b80ec345094'),
  sn?: string(name='sn', description='The serial number of the cloud-native box.', example='Q2CB5XZAFBFG****'),
  token?: string(name='token', description='The token.', example='abcd****'),
  tunnelEndpoint?: string(name='tunnel_endpoint', description='The backend endpoint of the tunnel.', example='wss://frontend-iotx-r-debug.aliyun-inc.test'),
}

model DescribeEdgeMachineTunnelConfigDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEdgeMachineTunnelConfigDetailResponseBody(name='body'),
}

async function describeEdgeMachineTunnelConfigDetail(request: DescribeEdgeMachineTunnelConfigDetailRequest): DescribeEdgeMachineTunnelConfigDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeEdgeMachineTunnelConfigDetail', 'POST', '/edge_machines/[edge_machineid]/tunnelconfig', 'json', false, 'json', request);
}

model DescribeEdgeMachinesRequest {
  hostname?: string(name='hostname', example='ack-v-b010-ssdfw****', position='Query'),
  lifeState?: string(name='life_state', example='activated/waitOnline/deleting', position='Query'),
  model?: string(name='model', example='ACK-V-B010', position='Query'),
  onlineState?: string(name='online_state', example='offline/online', position='Query'),
  pageNumber?: long(name='page_number', example='1', position='Query'),
  pageSize?: long(name='page_size', example='10', position='Query'),
}

model DescribeEdgeMachinesResponseBody = {
  edgeMachines?: [ 
    {
      activeTime?: string(name='active_time', description='The time when the cloud-native box was activated.', example='2021-07-19T16:07:48+08:00'),
      created?: string(name='created', description='The time when the cloud-native box was created.', example='2021-07-07T20:44:00+08:00'),
      edgeMachineId?: string(name='edge_machine_id', description='The ID of the cloud-native box.', example='c61083909b13f4a95b8554bda9577****'),
      hostname?: string(name='hostname', description='The `hostname` of the cloud-native box.', example='ack-v-b010-ssdfw****'),
      lifeState?: string(name='life_state', description='The lifecycle status of the cloud-native box.', example='activated'),
      model?: string(name='model', description='The model of the cloud-native box.', example='ACK-V-B010'),
      name?: string(name='name', description='The name of the cloud-native box.', example='ack-v-b010-ssdfw****'),
      onlineState?: string(name='online_state', description='The online status of the cloud-native box.', example='online'),
      sn?: string(name='sn', description='The serial number of the cloud-native box.', example='ACK9GBL31SXX****'),
      updated?: string(name='updated', description='The time when the cloud-native box was last updated.', example='2021-07-07T20:44:00+08:00'),
    }
  ](name='edge_machines', description='The list of details about cloud-native boxes.'),
  pageInfo?: {
    pageNumber?: int32(name='page_number', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='page_size', description='The number of entries returned per page.', example='10'),
    totalCount?: int32(name='total_count', description='The total number of entries returned.', example='1'),
  }(name='page_info', description='The pagination details.'),
}

model DescribeEdgeMachinesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEdgeMachinesResponseBody(name='body'),
}

async function describeEdgeMachines(request: DescribeEdgeMachinesRequest): DescribeEdgeMachinesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeEdgeMachines', 'GET', '/edge_machines', 'json', false, 'json', request);
}

model DescribeEventsRequest {
  clusterId?: string(name='cluster_id', example='cf62854ac2130470897be7a27ed1f****', position='Query'),
  pageNumber?: long(name='page_number', example='1', position='Query'),
  pageSize?: long(name='page_size', example='50', position='Query'),
  type?: string(name='type', example='nodepool_upgrade', position='Query'),
}

model DescribeEventsResponseBody = {
  events?: [ 
    {
      clusterId?: string(name='cluster_id', description='The ID of the cluster.', example='cluster-id'),
      data?: {
        level?: string(name='level', description='The level of the event.', example='info'),
        message?: string(name='message', description='The details of the event.', example='Start to upgrade NodePool nodePool/nodePool-A'),
        reason?: string(name='reason', description='The state of the event.', example='Started'),
      }(name='data', description='The description of the event.'),
      eventId?: string(name='event_id', description='The ID of the event.', example='A234-1234-1234'),
      source?: string(name='source', description='The source of the event.', example='/clusters/cf62854ac2130470897be7a27ed1f****/nodepools'),
      subject?: string(name='subject', description='The subject of the event.', example='nodePool-id'),
      time?: string(name='time', description='The time when the event started.', example='2022-11-23T20:48:01+08:00'),
      type?: string(name='type', description='The type of the event. Valid values:

*   `cluster_create`: cluster creation.
*   `cluster_scaleout`: cluster scale-out.
*   `cluster_attach`: adding existing nodes.
*   `cluster_delete`: cluster deletion.
*   `cluster_upgrade`: cluster upgrades.
*   `cluster_migrate`: cluster migration.
*   `cluster_node_delete`: node removal.
*   `cluster_node_drain`: node draining.
*   `cluster_modify`: cluster modifications.
*   `cluster_configuration_modify`: modifications to cluster control configurations.
*   `cluster_addon_install`: component installation.
*   `cluster_addon_upgrade`: component upgrades.
*   `cluster_addon_uninstall`: component uninstallation.
*   `runtime_upgrade`: runtime upgrades.
*   `nodepool_upgrade`: node pool upgrades.
*   `nodepool_update`: node pool updates.', example='nodepool_upgrade'),
    }
  ](name='events', description='The details of the event.'),
  pageInfo?: {
    pageNumber?: long(name='page_number', example='1'),
    pageSize?: long(name='page_size', example='50'),
    totalCount?: long(name='total_count', example='3'),
  }(name='page_info'),
}

model DescribeEventsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEventsResponseBody(name='body'),
}

async function describeEvents(request: DescribeEventsRequest): DescribeEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeEvents', 'GET', '/events', 'json', false, 'json', request);
}

model DescribeExternalAgentRequest {
  clusterId: string(name='ClusterId', example='c106f377e16f34eb1808d6b9362c9****', position='Path'),
  privateIpAddress?: string(name='PrivateIpAddress', example='true', position='Query'),
}

model DescribeExternalAgentResponseBody = {
  config?: string(name='config', description='The agent configurations in YAML format.', example='apiVersion: v1****'),
}

model DescribeExternalAgentResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeExternalAgentResponseBody(name='body'),
}

/**
  * For more information, see [Register an external Kubernetes cluster](~~121053~~).
  *
 */
async function describeExternalAgent(request: DescribeExternalAgentRequest): DescribeExternalAgentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeExternalAgent', 'GET', '/k8s/{ClusterId}/external/agent/deployment', 'json', false, 'json', request);
}

model DescribeKubernetesVersionMetadataRequest {
  clusterType: string(name='ClusterType', example='Kubernetes', position='Query'),
  kubernetesVersion?: string(name='KubernetesVersion', example='1.16.9-aliyun.1', position='Query'),
  mode?: string(name='Mode', example='supported', position='Query'),
  profile?: string(name='Profile', example='Default', position='Query'),
  region: string(name='Region', example='cn-beijing', position='Query'),
  runtime?: string(name='runtime', example='docker', position='Query'),
}

model DescribeKubernetesVersionMetadataResponse = {
  headers: map[string]string(name='headers'),
  body: [ 
    {
      capabilities?: map[string]any(name='capabilities'),
      images?: [ 
        {
          imageId?: string(name='image_id', example='centos_7_7_x64_20G_alibase_20200426.vhd'),
          imageName?: string(name='image_name', example='CentOS 7.7'),
          platform?: string(name='platform', example='CentOS'),
          osVersion?: string(name='os_version', example='7.7'),
          imageType?: string(name='image_type', example='centos_7_7_20'),
          osType?: string(name='os_type', example='Linux'),
          imageCategory?: string(name='image_category', example='system'),
          architecture?: string(name='architecture', example='x86_64'),
        }
      ](name='images'),
      metaData?: map[string]any(name='meta_data'),
      runtimes?: [
        Runtime
      ](name='runtimes'),
      version?: string(name='version', example='1.16.9-aliyun.1'),
      releaseDate?: string(name='release_date', example='2023-04-30T00:00:00Z'),
      expirationDate?: string(name='expiration_date', example='2025-04-30T00:00:00Z'),
      creatable?: boolean(name='creatable'),
    }
  ](name='body'),
}

async function describeKubernetesVersionMetadata(request: DescribeKubernetesVersionMetadataRequest): DescribeKubernetesVersionMetadataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeKubernetesVersionMetadata', 'GET', '/api/v1/metadata/versions', 'array', false, 'json', request);
}

model DescribeNodePoolVulsRequest {
  clusterId: string(name='cluster_id', example='c17e742cee942410486f237293d66****', position='Path'),
  nodepoolId: string(name='nodepool_id', example='np38f32fdbc60e4a1e957ffde77846****', position='Path'),
  necessity?: string(name='necessity', position='Query'),
}

model DescribeNodePoolVulsResponseBody = {
  vulRecords?: [ 
    {
      instanceId?: string(name='instance_id', example='i-t4n2qolb0wtzt0pz****'),
      nodeName?: string(name='node_name'),
      vulList?: [ 
        {
          aliasName?: string(name='alias_name', example='RHSA-2019:3197-Important: sudo security update'),
          cveList?: [ string ](name='cve_list'),
          name?: string(name='name', example='oval:com.redhat.rhsa:def:20193197'),
          necessity?: string(name='necessity', example='asap'),
        }
      ](name='vul_list'),
    }
  ](name='vul_records'),
  vulsFixServicePurchased?: boolean(name='vuls_fix_service_purchased', example='false'),
}

model DescribeNodePoolVulsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNodePoolVulsResponseBody(name='body'),
}

async function describeNodePoolVuls(request: DescribeNodePoolVulsRequest): DescribeNodePoolVulsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeNodePoolVuls', 'GET', '/clusters/{cluster_id}/nodepools/{nodepool_id}/vuls', 'json', false, 'json', request);
}

model DescribePoliciesRequest {
}

model DescribePoliciesResponse = {
  headers: map[string]string(name='headers'),
  body: map[string]any(name='body'),
}

async function describePolicies(request: DescribePoliciesRequest): DescribePoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribePolicies', 'GET', '/policies', 'json', false, 'json', request);
}

model DescribePolicyDetailsRequest {
  policyName: string(name='policy_name', example='ACKAllowedRepos', position='Path'),
}

model DescribePolicyDetailsResponseBody = {
  action?: string(name='action', description='The action of the policy. Valid values:

*   `enforce`: blocks deployments that match the policy.
*   `inform`: generates alerts for deployments that match the policy.', example='enforce'),
  category?: string(name='category', description='The type of the policy.', example='k8s-general'),
  description?: string(name='description', description='The description of the policy.', example='Requires container images to begin with a repo string from a specified list'),
  isDeleted?: int32(name='is_deleted', description='Indicates whether the policy is deleted. Valid values:

*   0: The policy is not deleted.
*   1: The policy is deleted.', example='0'),
  name?: string(name='name', description='The name of the policy that is returned.', example='ACKAllowedRepos'),
  noConfig?: int32(name='no_config', description='Indicates whether parameters are required. Valid values:

*   0: Parameters are required.
*   1: Parameters are optional.', example='0'),
  severity?: string(name='severity', description='The severity level of the policy. Valid values:

*   `high`
*   `medium`
*   `low`', example='high'),
  template?: string(name='template', description='The content of the policy.'),
}

model DescribePolicyDetailsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePolicyDetailsResponseBody(name='body'),
}

async function describePolicyDetails(request: DescribePolicyDetailsRequest): DescribePolicyDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribePolicyDetails', 'GET', '/policies/{policy_name}', 'json', false, 'json', request);
}

model DescribePolicyGovernanceInClusterRequest {
  clusterId: string(name='cluster_id', example='c8155823d057948c69a****', position='Path'),
}

model DescribePolicyGovernanceInClusterResponseBody = {
  admitLog?: {
    count?: long(name='count', description='The number of audit log entries.', example='100'),
    log?: {
      clusterId?: string(name='cluster_id', description='The ID of the cluster that you want to query.', example='c8155823d057948c69a****'),
      constraintKind?: string(name='constraint_kind', description='The type of the policy.', example='ACKAllowedRepos'),
      msg?: string(name='msg', description='The message that appears when an event is generated by a policy.', example='d4hdhs*****'),
      resourceKind?: string(name='resource_kind', description='The type of the resource.', example='Pod'),
      resourceName?: string(name='resource_name', description='The name of the resource.', example='nginx-deployment-basic2-84ccb74bfc-df22p'),
      resourceNamespace?: string(name='resource_namespace', description='The namespace to which the resource belongs.', example='default'),
    }(name='log', description='The audit log content.'),
    progress?: string(name='progress', description='The status of the query. Valid values:

*   `Complete`: The query succeeded and the complete query result is returned.
*   `Incomplete`: The query succeeded but the query result is incomplete. To obtain the complete query result, you must repeat the request.', example='Complete'),
  }(name='admit_log', description='The audit logs of policies in the cluster.'),
  onState?: [ 
    {
      enabledCount?: int32(name='enabled_count', description='The number of policies that are enabled.', example='3'),
      severity?: string(name='severity', description='The severity level of the policy.', example='high'),
      total?: int32(name='total', description='The total number of policies of the severity level.', example='8'),
    }
  ](name='on_state', description='Details about the policies of different severity levels that are enabled for the cluster.'),
  totalViolations?: {
    deny?: {
      severity?: string(name='severity', example='high'),
      violations?: long(name='violations', example='0'),
    }(name='deny'),
    warn?: {
      severity?: string(name='severity', example='low'),
      violations?: long(name='violations', example='5'),
    }(name='warn'),
  }(name='totalViolations'),
  violations?: {
    deny?: {
      policyDescription?: string(name='policyDescription', example='Requires container images to begin with a repo string from a specified list.'),
      policyName?: string(name='policyName', example='policy-gatekeeper-ackallowedrepos'),
      severity?: string(name='severity', example='high'),
      violations?: long(name='violations', example='11'),
    }(name='deny'),
    warn?: {
      policyDescription?: string(name='policyDescription', example='Controls Linux capabilities.'),
      policyName?: string(name='policyName', example='policy-gatekeeper-ackpspcapabilities'),
      severity?: string(name='severity', example='high'),
      violations?: long(name='violations', example='81'),
    }(name='warn'),
  }(name='violations'),
}

model DescribePolicyGovernanceInClusterResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePolicyGovernanceInClusterResponseBody(name='body'),
}

async function describePolicyGovernanceInCluster(request: DescribePolicyGovernanceInClusterRequest): DescribePolicyGovernanceInClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribePolicyGovernanceInCluster', 'GET', '/clusters/{cluster_id}/policygovernance', 'json', false, 'json', request);
}

model DescribePolicyInstancesRequest {
  clusterId: string(name='cluster_id', example='c8155823d057948c69a****', position='Path'),
  instanceName?: string(name='instance_name', example='allowed-repos-cz4s2', position='Query'),
  policyName?: string(name='policy_name', example='ACKPSPCapabilities', position='Query'),
}

model DescribePolicyInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: [ 
    {
      aliUid?: string(name='ali_uid', example='16298168****'),
      clusterId?: string(name='cluster_id', example='c8155823d057948c69a****'),
      instanceName?: string(name='instance_name', example='no-env-var-secrets-****'),
      policyName?: string(name='policy_name', example='ACKPSPCapabilities'),
      policyCategory?: string(name='policy_category', example='k8s-general'),
      policyDescription?: string(name='policy_description', example='Restricts secrets used in pod envs'),
      policyParameters?: string(name='policy_parameters', example='"restrictedNamespaces": [ "test" ]'),
      policySeverity?: string(name='policy_severity', example='low'),
      policyScope?: string(name='policy_scope', example='*'),
      policyAction?: string(name='policy_action', example='deny'),
    }
  ](name='body'),
}

async function describePolicyInstances(request: DescribePolicyInstancesRequest): DescribePolicyInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribePolicyInstances', 'GET', '/clusters/{cluster_id}/policies', 'array', false, 'json', request);
}

model DescribePolicyInstancesStatusRequest {
  clusterId: string(name='cluster_id', example='c8155823d057948c69a****', position='Path'),
}

model DescribePolicyInstancesStatusResponseBody = {
  instancesSeverityCount?: map[string]any(name='instances_severity_count', description='Information about the number of policy instances of each severity level.', example='{ "high": 11,     "medium": 1  }'),
  policyInstances?: [ 
    {
      policyCategory?: string(name='policy_category', description='The type of the policy. For more information about different types of policies and their descriptions, see [Predefined security policies of ACK](https://www.alibabacloud.com/help/doc-detail/359819.html).', example='cis-k8s'),
      policyDescription?: string(name='policy_description', description='The description of the policy.', example='Restricts use of the cluster-admin role.'),
      policyInstancesCount?: long(name='policy_instances_count', description='The number of policy instances that are deployed. If this parameter is empty, it indicates that no policy instance is deployed from the policy.', example='1'),
      policyName?: string(name='policy_name', description='The name of the policy.', example='ACKRestrictRoleBindings'),
      policySeverity?: string(name='policy_severity', description='The severity level of the policy.', example='medium'),
    }
  ](name='policy_instances', description='Details about policy instances of different types.'),
}

model DescribePolicyInstancesStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePolicyInstancesStatusResponseBody(name='body'),
}

async function describePolicyInstancesStatus(request: DescribePolicyInstancesStatusRequest): DescribePolicyInstancesStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribePolicyInstancesStatus', 'GET', '/clusters/{cluster_id}/policies/status', 'json', false, 'json', request);
}

model DescribeSubaccountK8sClusterUserConfigRequest {
  clusterId: string(name='ClusterId', example='c5b5e80b0b64a4bf6939d2d8f****', position='Path'),
  uid: string(name='Uid', example='26562443851650****', position='Path'),
  privateIpAddress?: boolean(name='PrivateIpAddress', example='true', position='Query'),
  temporaryDurationMinutes?: long(name='TemporaryDurationMinutes', example='15', position='Query'),
}

model DescribeSubaccountK8sClusterUserConfigResponseBody = {
  config: string(name='config', description='The content of the KubeConfig file. For more information about the content of the KubeConfig file, see [Configure cluster credentials](~~86494~~).', example='apiVersion: v1****'),
  expiration?: string(name='expiration', description='The expiration time of the KubeConfig file. The value is the UTC time displayed in RFC3339 format.', example='2024-03-10T09:56:17Z'),
}

model DescribeSubaccountK8sClusterUserConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSubaccountK8sClusterUserConfigResponseBody(name='body'),
}

/**
  * >  You can call this operation only with an Alibaba Cloud account.
  *
 */
async function describeSubaccountK8sClusterUserConfig(request: DescribeSubaccountK8sClusterUserConfigRequest): DescribeSubaccountK8sClusterUserConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeSubaccountK8sClusterUserConfig', 'GET', '/k8s/{ClusterId}/users/{Uid}/user_config', 'json', false, 'json', request);
}

model DescribeTaskInfoRequest {
  taskId: string(name='task_id', example='T-5faa48fb31b6b8078d00****', position='Path'),
}

model DescribeTaskInfoResponseBody = {
  clusterId?: string(name='cluster_id', description='The ID of the ACK cluster.', example='c78592bfe92244365b3c3ad47f1de****'),
  created?: string(name='created', description='The time when the task was created.', example='2020-11-10T16:02:04+08:00'),
  currentStage?: string(name='current_stage', example='DrainNodes'),
  error?: {
    code?: string(name='code', example='400'),
    message?: string(name='message', example='failed to xxx'),
  }(name='error'),
  events?: [ 
    {
      action?: string(name='action', example='start'),
      level?: string(name='level', example='Normal'),
      message?: string(name='message', example='start to xxx'),
      reason?: string(name='reason', example='NodePoolUpgradeStart'),
      source?: string(name='source', example='ACK'),
      timestamp?: string(name='timestamp', example='1669706229286'),
    }
  ](name='events'),
  parameters?: map[string]any(name='parameters'),
  stages?: [ 
    {
      endTime?: string(name='end_time', example='2022-12-15 23:00:00'),
      message?: string(name='message', example='success to xxxxx'),
      outputs?: map[string]any(name='outputs'),
      startTime?: string(name='start_time', example='2022-12-15 23:00:00'),
      state?: string(name='state', example='running'),
    }
  ](name='stages'),
  state?: string(name='state', description='The state of the task. Valid values:

*   `running`: The task is running.
*   `fail`: The task failed.
*   `success`: The task is complete.', example='running'),
  target?: {
    id?: string(name='id', example='c78592bfe92244365b3c3ad47f1de****'),
    type?: string(name='type', example='cluster'),
  }(name='target'),
  taskId?: string(name='task_id', description='The ID of the task.', example='T-5faa48fb31b6b8078d000006'),
  taskResult?: [ 
    {
      data?: string(name='data', description='The resources that are managed by the task. For a scale-out task, the value of this parameter the ID of the instance that is added by the task.', example='i-xxx'),
      status?: string(name='status', description='The state of the scaling of the resource. Valid values:

*   `success`: The scale-out task is successful.
*   `failed`: The scale-out task failed.
*   `initail`: The scale-out task is initializing.', example='success'),
    }
  ](name='task_result', description='The execution result of the task.'),
  taskType?: string(name='task_type', description='The task type. A value of `cluster_scaleout` indicates a scale-out task.', example='cluster_scaleout'),
  updated?: string(name='updated', description='The time when the task was updated.', example='2020-11-10T16:03:06+08:00'),
}

model DescribeTaskInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTaskInfoResponseBody(name='body'),
}

async function describeTaskInfo(request: DescribeTaskInfoRequest): DescribeTaskInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeTaskInfo', 'GET', '/tasks/{task_id}', 'json', false, 'json', request);
}

model DescribeTemplateAttributeRequest {
  templateId: string(name='TemplateId', example='874ec485-e7e6-4373-8a3b-47bde8a****', position='Path'),
  templateType?: string(name='template_type', example='kubernetes', position='Query'),
}

model DescribeTemplateAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: [ 
    {
      id?: string(name='id', example='72d20cf8-a533-4ea9-a10d-e7630d3d****'),
      acl?: string(name='acl', example='private'),
      name?: string(name='name', example='web'),
      template?: string(name='template', example='apiVersion: V1\\n***'),
      templateType?: string(name='template_type', example='kubernetes'),
      description?: string(name='description', example='test template'),
      tags?: string(name='tags', example='sa'),
      templateWithHistId?: string(name='template_with_hist_id', example='874ec485-e7e6-4373-8a3b-47bde8ae****'),
      created?: string(name='created', example='2020-09-16T19:21:29+08:00'),
      updated?: string(name='updated', example='2020-09-16T19:21:29+08:00'),
    }
  ](name='body'),
}

async function describeTemplateAttribute(request: DescribeTemplateAttributeRequest): DescribeTemplateAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeTemplateAttribute', 'GET', '/templates/{TemplateId}', 'array', false, 'json', request);
}

model DescribeTemplatesRequest {
  pageNum?: long(name='page_num', example='1', position='Query'),
  pageSize?: long(name='page_size', example='10', position='Query'),
  templateType?: string(name='template_type', example='kubernetes', position='Query'),
}

model DescribeTemplatesResponseBody = {
  pageInfo?: {
    pageNumber?: long(name='page_number', description='The page number of the returned page.', example='20'),
    pageSize?: long(name='page_size', description='The maximum number of entries returned per page.', example='3'),
    totalCount?: long(name='total_count', description='The total number of entries returned.', example='50'),
  }(name='page_info', description='The pagination details.'),
  templates?: [ 
    {
      acl?: string(name='acl', description='The access control policy of the template. Valid values:

*   `private`: The template is private.
*   `public`: The template is public.
*   `shared`: The template can be shared.

Default value: `private`.', example='private'),
      created?: string(name='created', description='The time when the template was created.', example='2020-06-10T16:30:16+08:00'),
      description?: string(name='description', description='The description of the template.', example='a web server'),
      id?: string(name='id', description='The ID of the template.', example='874ec485-e7e6-4373-8a3b-47bde8ae789f'),
      name?: string(name='name', description='The name of the template.', example='webserver'),
      tags?: string(name='tags', description='The tag of the template. By default, the value is the name of the template.', example='kubernetes'),
      template?: string(name='template', description='The template content in YAML format.', example='apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: nginx-deployment-basic\\n  labels:\\n    app: nginx\\nspec:\\n  replicas: 2\\n  selector:\\n    matchLabels:\\n      app: nginx\\n  template:\\n    metadata:\\n      labels:\\n        app: nginx\\n    spec:\\n      containers:\\n      - name: nginx\\n        image: busybox:latest\\n        ports:\\n        - containerPort: 80'),
      templateType?: string(name='template_type', description='The type of the template. The value can be a custom value.

*   If the value is `kubernetes`, it indicates that the template is displayed on the Templates page in the ACK console.
*   If the value is `compose`, it indicates that the template is displayed on the Container Service - Swarm page in the console. However, Container Service for Swarm is deprecated.', example='kubernetes'),
      templateWithHistId?: string(name='template_with_hist_id', description='The ID of the parent template. The value of `template_with_hist_id` is the same for each template version. This allows you to manage different template versions.', example='ad81d115-7c8b-47e7-a222-9c28d7f6e588'),
      updated?: string(name='updated', description='The time when the template was updated.', example='2020-06-10T16:30:16+08:00'),
    }
  ](name='templates', description='The list of the templates returned .'),
}

model DescribeTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTemplatesResponseBody(name='body'),
}

async function describeTemplates(request: DescribeTemplatesRequest): DescribeTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeTemplates', 'GET', '/templates', 'json', false, 'json', request);
}

model DescribeTriggerRequest {
  clusterId: string(name='cluster_id', example='c5cdf7e3938bc4f8eb0e44b21a80f****', position='Path'),
  name: string(name='Name', example='web-server', position='Query'),
  namespace: string(name='Namespace', example='default', position='Query'),
  type?: string(name='Type', example='deployment', position='Query'),
  action?: string(name='action', example='redeploy', position='Query'),
}

model DescribeTriggerResponse = {
  headers: map[string]string(name='headers'),
  body: [ 
    {
      id?: string(name='id', example='1234'),
      name?: string(name='name', example='test'),
      clusterId?: string(name='cluster_id', example='c259f563386444ebb8d7****'),
      projectId?: string(name='project_id', example='default/test-app'),
      type?: string(name='type', example='deployment'),
      action?: string(name='action', example='redeploy'),
      token?: string(name='token', example='eyJhbGci***'),
    }
  ](name='body'),
}

async function describeTrigger(request: DescribeTriggerRequest): DescribeTriggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeTrigger', 'GET', '/clusters/{cluster_id}/triggers', 'array', false, 'json', request);
}

model DescribeUserClusterNamespacesRequest {
  clusterId: string(name='ClusterId', example='c5b5e80b0b64a4bf6939d2d8fbbc5****', position='Path'),
}

model DescribeUserClusterNamespacesResponse = {
  headers: map[string]string(name='headers'),
  body: [ string ](name='body'),
}

async function describeUserClusterNamespaces(request: DescribeUserClusterNamespacesRequest): DescribeUserClusterNamespacesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeUserClusterNamespaces', 'GET', '/api/v2/k8s/{ClusterId}/namespaces', 'array', false, 'json', request);
}

model DescribeUserPermissionRequest {
  uid: string(name='uid', example='21175****', position='Path'),
}

model DescribeUserPermissionResponse = {
  headers: map[string]string(name='headers'),
  body: [ 
    {
      resourceId?: string(name='resource_id', example='c1b542****'),
      resourceType?: string(name='resource_type', example='cluster'),
      roleName?: string(name='role_name', example='view'),
      roleType?: string(name='role_type', example='admin'),
      isOwner?: long(name='is_owner', example='1'),
      isRamRole?: long(name='is_ram_role', example='1'),
    }
  ](name='body'),
}

async function describeUserPermission(request: DescribeUserPermissionRequest): DescribeUserPermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeUserPermission', 'GET', '/permissions/users/{uid}', 'array', false, 'json', request);
}

model DescribeUserQuotaRequest {
}

model DescribeUserQuotaResponseBody = {
  amkClusterQuota?: long(name='amk_cluster_quota', description='The quota of Container Service for Kubernetes (ACK) managed clusters. Default value: 20. To increase the quota, [go to the Quota Center page to submit a ticket](https://quotas.console.aliyun.com/products/csk/quotas).', example='20'),
  askClusterQuota?: long(name='ask_cluster_quota', description='The quota of serverless Kubernetes (ASK) clusters. Default value: 20. To increase the quota, [go to the Quota Center page to submit a ticket](https://quotas.console.aliyun.com/products/csk/quotas).', example='3'),
  clusterNodepoolQuota?: long(name='cluster_nodepool_quota', description='The quota of node pools in an ACK cluster. Default value: 20. To increase the quota, [go to the Quota Center page to submit a ticket](https://quotas.console.aliyun.com/products/csk/quotas).', example='10'),
  clusterQuota?: long(name='cluster_quota', description='The quota of clusters within an Alibaba Cloud account. Default value: 50. To increase the quota, [go to the Quota Center page to submit a ticket](https://quotas.console.aliyun.com/products/csk/quotas).', example='50'),
  edgeImprovedNodepoolQuota?: {
    bandwidth?: int32(name='bandwidth', description='The maximum bandwidth of each enhanced node pool. Unit: Mbit/s.', example='10'),
    count?: int32(name='count', description='The quota of enhanced edge node pools within an Alibaba Cloud account.', example='3'),
    period?: int32(name='period', description='The maximum subscription duration of an enhanced edge node pool. Unit: months.

>  Enhanced node pools use the pay-as-you-go billing method. Therefore, this parameter is not required.', example='3'),
  }(name='edge_improved_nodepool_quota', description='The quota of enhanced edge node pools.'),
  nodeQuota?: long(name='node_quota', description='The quota of nodes in an ACK cluster. Default value: 100. To increase the quota, [go to the Quota Center page to submit a ticket](https://quotas.console.aliyun.com/products/csk/quotas).', example='100'),
  quotas?: map[string]QuotasValue(name='quotas'),
}

model DescribeUserQuotaResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserQuotaResponseBody(name='body'),
}

async function describeUserQuota(request: DescribeUserQuotaRequest): DescribeUserQuotaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeUserQuota', 'GET', '/quota', 'json', false, 'json', request);
}

model DescribeWorkflowsRequest {
}

model DescribeWorkflowsResponseBody = {
  jobs?: [ 
    {
      clusterId?: string(name='cluster_id', description='The ID of the ACK cluster.', example='cb1a7214cfc0b41d9bb086affc2d8f51c'),
      createTime?: string(name='create_time', description='The time when the workflow was created.', example='2020-01-15T13:18:52Z'),
      jobName?: string(name='job_name', description='The name of the workflow.', example='wgs-gpu-qb4dk'),
    }
  ](name='jobs', description='The list of the jobs.'),
}

model DescribeWorkflowsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWorkflowsResponseBody(name='body'),
}

async function describeWorkflows(request: DescribeWorkflowsRequest): DescribeWorkflowsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeWorkflows', 'GET', '/gs/workflows', 'json', false, 'json', request);
}

model EdgeClusterAddEdgeMachineRequest {
  clusterid: string(name='clusterid', example='c35607f52179f4472a0d9723e7595****', position='Path'),
  edgeMachineid: string(name='edge_machineid', example='edge_machineid', position='Path'),
  expired?: long(name='expired', example='1024', position='Body'),
  nodepoolId: string(name='nodepool_id', example='c26607f52179f4472a0d9723e7595****', position='Body'),
  options?: string(name='options', example='"{\\"enableIptables\\":true,\\"quiet\\":true,\\"manageRuntime\\":true,\\"allowedClusterAddons\\":[\\"kube-proxy\\",\\"flannel\\",\\"coredns\\"]}"', position='Body'),
}

model EdgeClusterAddEdgeMachineResponseBody = {
  edgeMachineId?: string(name='edge_machine_id', description='The ID of the cloud-native box.', example='0f4bf70a-caff-4b26-a679-fb0188a1****'),
  requestId?: string(name='request_id', description='The ID of the request.', example='0adf3a23-6841-41e8-9f55-7b290216c980'),
}

model EdgeClusterAddEdgeMachineResponse = {
  headers: map[string]string(name='headers'),
  body: EdgeClusterAddEdgeMachineResponseBody(name='body'),
}

async function edgeClusterAddEdgeMachine(request: EdgeClusterAddEdgeMachineRequest): EdgeClusterAddEdgeMachineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'EdgeClusterAddEdgeMachine', 'POST', '/clusters/[clusterid]/attachedgemachine/[edge_machineid]', 'json', false, 'json', request);
}

model FixNodePoolVulsRequest {
  clusterId: string(name='cluster_id', example='cf62854ac2130470897be7a27ed1f****', position='Path'),
  nodepoolId: string(name='nodepool_id', example='np31da1b38983f4511b490fc62108a****', position='Path'),
  nodes?: [ string ](name='nodes', position='Body'),
  rolloutPolicy?: {
    maxParallelism?: long(name='max_parallelism', example='1'),
  }(name='rollout_policy', position='Body'),
  vuls?: [ string ](name='vuls', position='Body'),
}

model FixNodePoolVulsResponseBody = {
  taskId?: string(name='task_id', example='T-60fea8ad2e277f087900****'),
}

model FixNodePoolVulsResponse = {
  headers: map[string]string(name='headers'),
  body: FixNodePoolVulsResponseBody(name='body'),
}

async function fixNodePoolVuls(request: FixNodePoolVulsRequest): FixNodePoolVulsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'FixNodePoolVuls', 'POST', '/clusters/{cluster_id}/nodepools/{nodepool_id}/vuls/fix', 'json', false, 'json', request);
}

model GetKubernetesTriggerRequest {
  clusterId: string(name='ClusterId', example='c5cdf7e3938bc4f8eb0e44b21a80f****', position='Path'),
  name: string(name='Name', example='web-server', position='Query'),
  namespace: string(name='Namespace', example='default', position='Query'),
  type?: string(name='Type', example='deployment', position='Query'),
  action?: string(name='action', example='redeploy', position='Query'),
}

model GetKubernetesTriggerResponse = {
  headers: map[string]string(name='headers'),
  body: [ 
    {
      id?: string(name='id', example='1234'),
      name?: string(name='name', example='test'),
      clusterId?: string(name='cluster_id', example='c259f563386444ebb8d7**'),
      projectId?: string(name='project_id', example='default/test-app'),
      type?: string(name='type', example='deployment'),
      action?: string(name='action', example='redeploy'),
      token?: string(name='token', description='Token', example='eyJhbGci***'),
    }
  ](name='body'),
}

async function getKubernetesTrigger(request: GetKubernetesTriggerRequest): GetKubernetesTriggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetKubernetesTrigger', 'GET', '/triggers/{ClusterId}', 'array', false, 'json', request);
}

model GetUpgradeStatusRequest {
  clusterId: string(name='ClusterId', example='c106f377e16f34eb1808d6b9362c9****', position='Path'),
}

model GetUpgradeStatusResponseBody = {
  errorMessage?: string(name='error_message', description='The error message returned during the update.', example='subject to actual return'),
  precheckReportId?: string(name='precheck_report_id', description='The ID of the precheck report.', example='be4c8eb72de94d459ea7ace7c811d119'),
  status?: string(name='status', description='The status of the update. Valid values:

*   `success`: The update is successful.
*   `fail`: The update failed.
*   `pause`: The update is paused.
*   `running`: The update is in progress.', example='running'),
  upgradeStep?: string(name='upgrade_step', description='The current phase of the update. Valid values:

*   `not_start`: The update is not started.
*   `prechecking`: The precheck is in progress.
*   `upgrading`: The update is in progress.
*   `pause`: The update is paused.
*   `success`: The update is successful.', example='prechecking'),
  upgradeTask?: {
    message?: string(name='message', description='The description of the update task.', example='subject to actual return'),
    status?: string(name='status', description='The status of the update task. Valid values:

*   `running`: The update task is being executed.
*   `Success`: The update task is successfully executed.
*   `Failed`: The update task failed.', example='running'),
  }(name='upgrade_task', description='The details of the update task.'),
}

model GetUpgradeStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetUpgradeStatusResponseBody(name='body'),
}

async function getUpgradeStatus(request: GetUpgradeStatusRequest): GetUpgradeStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetUpgradeStatus', 'GET', '/api/v2/clusters/{ClusterId}/upgrade/status', 'json', false, 'json', request);
}

model GrantPermissionsRequest {
  uid: string(name='uid', example='2367****', position='Path'),
  body?: [ 
    {
      cluster: string(name='cluster', example='c796c60***'),
      isCustom?: boolean(name='is_custom', example='false'),
      isRamRole?: boolean(name='is_ram_role', example='false'),
      namespace?: string(name='namespace', example='test'),
      roleName: string(name='role_name', example='ops'),
      roleType: string(name='role_type', example='cluster'),
    }
  ](name='body', position='Body'),
}

model GrantPermissionsResponse = {
  headers: map[string]string(name='headers'),
}

/**
  * **Precautions**:
  * *   Make sure that you have granted the specified RAM user at least read permissions on the specified cluster by attaching RAM policies. Otherwise, the `ErrorRamPolicyConfig` error will be returned.
  *     For more information about how to authorize a RAM user by attaching RAM policies, see [Create a custom RAM policy](~~86485~~).
  * *   If you call this operation as a RAM user, make sure that this RAM user has the permissions to grant other RAM users the permissions to manage ACK clusters. Otherwise, the `StatusForbidden` or `ForbiddenGrantPermissions` errors will be returned. For more information, see [Use a RAM user to grant RBAC permissions to other RAM users](~~119035~~).
  * *   This operation overwrites the permissions that have been granted to the specified RAM user. When you call this operation, make sure that the required permissions are included.
  *
 */
async function grantPermissions(request: GrantPermissionsRequest): GrantPermissionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GrantPermissions', 'POST', '/permissions/users/{uid}', 'none', false, 'json', request);
}

model InstallClusterAddonsRequest {
  clusterId: string(name='ClusterId', example='c82e6987e2961451182edacd74faf****', position='Path'),
  body?: [ 
    {
      config?: string(name='config', example='{\\"IngressDashboardEnabled\\":\\"true\\",\\"sls_project_name\\":\\"your_sls_project_name\\"}"}'),
      name: string(name='name', example='ags-metrics-collector'),
      version: string(name='version', example='v1.0.0.2-cc3b2d6-aliyun'),
    }
  ](name='body', example='ags-metrics-collector', position='Body'),
}

model InstallClusterAddonsResponse = {
  headers: map[string]string(name='headers'),
}

async function installClusterAddons(request: InstallClusterAddonsRequest): InstallClusterAddonsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'InstallClusterAddons', 'POST', '/clusters/{ClusterId}/components/install', 'none', false, 'json', request);
}

model ListTagResourcesRequest {
  nextToken?: string(name='next_token', example='***', position='Query'),
  regionId: string(name='region_id', example='cn-beijing', position='Query'),
  resourceIds: [ string ](name='resource_ids', example='["xxxxx","xxxxxx"]', shrink='json', position='Query'),
  resourceType: string(name='resource_type', example='CLUSTER', position='Query'),
  tags?: [
    Tag
  ](name='tags', example='[{\\"key\\":\\"env\\",\\"value\\",\\"dev\\"},{\\"key\\":\\"dev\\", \\"value\\":\\"IT\\"}]', shrink='json', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='next_token', description='The token that is used to start the next query.', example='c374bf4864448****'),
  requestId?: string(name='request_id', description='The ID of the request.', example='E368C761-F8F6-4A36-9B58-BD53D5CD0CEB'),
  tagResources?: {
    tagResource?: [ 
      {
        resourceId?: string(name='resource_id', description='The ID of the resource.', example='i-xxx'),
        resourceType?: string(name='resource_type', description='The type of the resource. For more information, see [Labels](~~110425~~).', example='CLUSTER'),
        tagKey?: string(name='tag_key', description='The key of the label.', example='ack.aliyun.com'),
        tagValue?: string(name='tag_value', description='The value of the label.', example='c71cf3d796c374bf48644482cb0c3****'),
      }
    ](name='tag_resource', description='The labels of the resource.'),
  }(name='tag_resources', description='The details of the queried labels and resources.'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTagResources', 'GET', '/tags', 'json', false, 'json', request);
}

model MigrateClusterRequest {
  clusterId: string(name='cluster_id', example='c21e0591548ba4c10bdb535d6572b****', position='Path'),
  ossBucketEndpoint?: string(name='oss_bucket_endpoint', example='*******.oss-cn-hangzhou.aliyuncs.com', position='Body'),
  ossBucketName?: string(name='oss_bucket_name', example='bucket-****', position='Body'),
}

model MigrateClusterResponseBody = {
  clusterId?: string(name='cluster_id', description='The ID of the cluster.', example='c8155823d057948c69a****'),
  requestId?: string(name='request_id', description='The ID of the request.', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
  taskId?: string(name='task_id', description='The ID of the task.', example='T-62ccd14aacb8db06ca00****'),
}

model MigrateClusterResponse = {
  headers: map[string]string(name='headers'),
  body: MigrateClusterResponseBody(name='body'),
}

async function migrateCluster(request: MigrateClusterRequest): MigrateClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'MigrateCluster', 'POST', '/clusters/{cluster_id}/migrate', 'json', false, 'json', request);
}

model ModifyClusterRequest {
  clusterId: string(name='ClusterId', example='cb95aa626a47740afbf6aa099b65****', position='Path'),
  apiServerEip?: boolean(name='api_server_eip', example='true', position='Body'),
  apiServerEipId?: string(name='api_server_eip_id', example='eip-wz9fnasl6dsfhmvci****', position='Body'),
  deletionProtection?: boolean(name='deletion_protection', example='true', position='Body'),
  enableRrsa?: boolean(name='enable_rrsa', example='true', position='Body'),
  ingressDomainRebinding?: string(name='ingress_domain_rebinding', example='true', position='Body'),
  ingressLoadbalancerId?: string(name='ingress_loadbalancer_id', example='lb-wz97kes8tnndkpodw****', position='Body'),
  instanceDeletionProtection?: boolean(name='instance_deletion_protection', example='true', position='Body'),
  maintenanceWindow?: MaintenanceWindow(name='maintenance_window', position='Body'),
  resourceGroupId?: string(name='resource_group_id', example='rg-acfmyvw3wjm****', position='Body'),
}

model ModifyClusterResponseBody = {
  clusterId?: string(name='cluster_id', description='The ID of the cluster.', example='cb95aa626a47740afbf6aa09****'),
  requestId?: string(name='request_id', description='The ID of the request.', example='687C5BAA-D103-4993-884B-C35E4314****'),
  taskId?: string(name='task_id', description='The ID of the task.', example='T-5a54309c80282e39ea00****'),
}

model ModifyClusterResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyClusterResponseBody(name='body'),
}

async function modifyCluster(request: ModifyClusterRequest): ModifyClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyCluster', 'PUT', '/api/v2/clusters/{ClusterId}', 'json', false, 'json', request);
}

model ModifyClusterAddonRequest {
  clusterId: string(name='cluster_id', example='c71d616e629ff40d5b42d7bb87770****', position='Path'),
  componentId: string(name='component_id', example='coredns', position='Path'),
  config?: string(name='config', example='{"CpuRequest":"800m"}', position='Body'),
}

model ModifyClusterAddonResponse = {
  headers: map[string]string(name='headers'),
}

/**
  * You can use this API operation to modify the components in a Container Service for Kubernetes (ACK) cluster or the control plane components in an ACK Pro cluster.
  * *   To query the customizable parameters of a component, call the `DescribeClusterAddonMetadata` API operation. For more information, see [Query the metadata of a specified component version](https://www.alibabacloud.com/help/zh/container-service-for-kubernetes/latest/query).
  * *   For more information about the customizable parameters of control plane components in ACK Pro clusters, see [Customize the parameters of control plane components in ACK Pro clusters](https://www.alibabacloud.com/help/zh/container-service-for-kubernetes/latest/customize-control-plane-parameters-for-a-professional-kubernetes-cluster).
  * After you call this operation, the component may be redeployed and restarted. We recommend that you evaluate the impact before you call this operation.
  *
 */
async function modifyClusterAddon(request: ModifyClusterAddonRequest): ModifyClusterAddonResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyClusterAddon', 'POST', '/clusters/{cluster_id}/components/{component_id}/config', 'none', false, 'json', request);
}

model ModifyClusterConfigurationRequest {
  clusterId: string(name='ClusterId', example='cc0f87de0b8fb403f86e10e204f83****', position='Path'),
  customizeConfig?: [ 
    {
      configs?: [ 
        {
          key?: string(name='key', example='MaxRequestsInflight'),
          value?: string(name='value', example='100'),
        }
      ](name='configs'),
      name?: string(name='name', example='kube-apiserver'),
    }
  ](name='customize_config', position='Body'),
}

model ModifyClusterConfigurationResponse = {
  headers: map[string]string(name='headers'),
}

async function modifyClusterConfiguration(request: ModifyClusterConfigurationRequest): ModifyClusterConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyClusterConfiguration', 'PUT', '/clusters/{ClusterId}/configuration', 'none', false, 'json', request);
}

model ModifyClusterNodePoolRequest {
  clusterId: string(name='ClusterId', example='c23421cfa74454bc8b37163fd19af****', position='Path'),
  nodepoolId: string(name='NodepoolId', example='p31da1b38983f4511b490fc62108a****', position='Path'),
  autoScaling?: {
    eipBandwidth?: long(name='eip_bandwidth', example='5'),
    eipInternetChargeType?: string(name='eip_internet_charge_type', example='PayByBandwidth'),
    enable?: boolean(name='enable', example='true'),
    isBondEip?: boolean(name='is_bond_eip', example='true'),
    maxInstances?: long(name='max_instances', example='10'),
    minInstances?: long(name='min_instances', example='2'),
    type?: string(name='type', example='cpu'),
  }(name='auto_scaling', position='Body'),
  kubernetesConfig?: {
    cmsEnabled?: boolean(name='cms_enabled', example='true'),
    cpuPolicy?: string(name='cpu_policy', example='none'),
    labels?: [
      Tag
    ](name='labels'),
    runtime?: string(name='runtime', example='docker'),
    runtimeVersion?: string(name='runtime_version', example='19.03.5'),
    taints?: [
      Taint
    ](name='taints'),
    userData?: string(name='user_data', example='IyEvdXNyL2Jpbi9iYXNoCmVjaG8gIkhlbGxvIEFDSyEi'),
  }(name='kubernetes_config', position='Body'),
  management?: {
    autoRepair?: boolean(name='auto_repair', example='true'),
    enable?: boolean(name='enable', example='true'),
    upgradeConfig?: {
      autoUpgrade?: boolean(name='auto_upgrade', example='true'),
      maxUnavailable?: long(name='max_unavailable', example='1'),
      surge?: long(name='surge', example='5'),
      surgePercentage?: long(name='surge_percentage', example='0'),
    }(name='upgrade_config'),
  }(name='management', position='Body'),
  nodepoolInfo?: {
    name?: string(name='name', example='default-nodepool'),
    resourceGroupId?: string(name='resource_group_id', example='rg-acfmyvw3wjm****'),
  }(name='nodepool_info', position='Body'),
  scalingGroup?: {
    autoRenew?: boolean(name='auto_renew', example='true'),
    autoRenewPeriod?: long(name='auto_renew_period', example='1'),
    compensateWithOnDemand?: boolean(name='compensate_with_on_demand', example='true'),
    dataDisks?: [
      DataDisk
    ](name='data_disks'),
    desiredSize?: long(name='desired_size', example='2'),
    imageId?: string(name='image_id', example='aliyun_2_1903_x64_20G_alibase_20200904.vhd'),
    instanceChargeType?: string(name='instance_charge_type', example='PostPaid'),
    instanceTypes?: [ string ](name='instance_types'),
    internetChargeType?: string(name='internet_charge_type', example='PayByBandwidth'),
    internetMaxBandwidthOut?: long(name='internet_max_bandwidth_out', example='5'),
    keyPair?: string(name='key_pair', example='pro-nodepool'),
    loginPassword?: string(name='login_password', example='Hello1234'),
    multiAzPolicy?: string(name='multi_az_policy', example='BALANCE'),
    onDemandBaseCapacity?: long(name='on_demand_base_capacity', example='0'),
    onDemandPercentageAboveBaseCapacity?: long(name='on_demand_percentage_above_base_capacity', example='20'),
    period?: long(name='period', example='1'),
    periodUnit?: string(name='period_unit', example='Month'),
    platform?: string(name='platform', example='AliyunLinux'),
    privatePoolOptions?: {
      id?: string(name='id', example='eap-bp67acfmxazb4****'),
      matchCriteria?: string(name='match_criteria', example='Open'),
    }(name='private_pool_options'),
    rdsInstances?: [ string ](name='rds_instances'),
    scalingPolicy?: string(name='scaling_policy', example='release'),
    spotInstancePools?: long(name='spot_instance_pools', example='5'),
    spotInstanceRemedy?: boolean(name='spot_instance_remedy', example='false'),
    spotPriceLimit?: [ 
      {
        instanceType?: string(name='instance_type', example='ecs.c6.large'),
        priceLimit?: string(name='price_limit', example='0.39'),
      }
    ](name='spot_price_limit'),
    spotStrategy?: string(name='spot_strategy', example='SpotWithPriceLimit'),
    systemDiskCategory?: string(name='system_disk_category', example='cloud_efficiency'),
    systemDiskPerformanceLevel?: string(name='system_disk_performance_level', example='PL1'),
    systemDiskSize?: long(name='system_disk_size', example='120'),
    tags?: [
      Tag
    ](name='tags'),
    vswitchIds?: [ string ](name='vswitch_ids'),
  }(name='scaling_group', position='Body'),
  teeConfig?: {
    teeEnable?: boolean(name='tee_enable', example='false'),
  }(name='tee_config', position='Body'),
  updateNodes?: boolean(name='update_nodes', example='true', position='Body'),
}

model ModifyClusterNodePoolResponseBody = {
  nodepoolId?: string(name='nodepool_id', description='The ID of the node pool.', example='np737c3ac1ac684703b9e10673aa2c****'),
  taskId?: string(name='task_id', description='The ID of the task.', example='T-5fd211e924e1d00787000293'),
}

model ModifyClusterNodePoolResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyClusterNodePoolResponseBody(name='body'),
}

async function modifyClusterNodePool(request: ModifyClusterNodePoolRequest): ModifyClusterNodePoolResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyClusterNodePool', 'PUT', '/clusters/{ClusterId}/nodepools/{NodepoolId}', 'json', false, 'json', request);
}

model ModifyClusterTagsRequest {
  clusterId: string(name='ClusterId', example='c106f377e16f34eb1808d6b9362c9****', position='Path'),
  body?: [
    Tag
  ](name='body', position='Body'),
}

model ModifyClusterTagsResponse = {
  headers: map[string]string(name='headers'),
}

async function modifyClusterTags(request: ModifyClusterTagsRequest): ModifyClusterTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyClusterTags', 'POST', '/clusters/{ClusterId}/tags', 'none', false, 'json', request);
}

model ModifyNodePoolNodeConfigRequest {
  clusterId: string(name='ClusterId', example='c23421cfa74454bc8b37163fd19af****', position='Path'),
  nodepoolId: string(name='NodepoolId', example='np8d8c9c2cd0f64e89884f82a5fbcd****', position='Path'),
  kubeletConfig?: {
    cpuManagerPolicy?: string(name='cpuManagerPolicy', example='none'),
    eventBurst?: long(name='eventBurst', example='10'),
    eventRecordQPS?: long(name='eventRecordQPS', example='5'),
    evictionHard?: map[string]any(name='evictionHard'),
    evictionSoft?: map[string]any(name='evictionSoft'),
    evictionSoftGracePeriod?: map[string]any(name='evictionSoftGracePeriod'),
    kubeAPIBurst?: long(name='kubeAPIBurst', example='10'),
    kubeAPIQPS?: long(name='kubeAPIQPS', example='5'),
    kubeReserved?: map[string]any(name='kubeReserved'),
    registryBurst?: long(name='registryBurst', example='10'),
    registryPullQPS?: long(name='registryPullQPS', example='5'),
    serializeImagePulls?: boolean(name='serializeImagePulls', example='true'),
    systemReserved?: map[string]any(name='systemReserved'),
  }(name='kubelet_config', position='Body'),
  rollingPolicy?: {
    maxParallelism?: long(name='max_parallelism', example='3'),
  }(name='rolling_policy', position='Body'),
}

model ModifyNodePoolNodeConfigResponseBody = {
  nodepoolId?: string(name='nodepool_id', example='np737c3ac1ac684703b9e10673aa2c****'),
  requestId?: string(name='request_id', example='D7631D83-6E98-1949-B665-766A62xxxxxx'),
  taskId?: string(name='task_id', example='T-5fd211e924e1d00787xxxxxx'),
}

model ModifyNodePoolNodeConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyNodePoolNodeConfigResponseBody(name='body'),
}

async function modifyNodePoolNodeConfig(request: ModifyNodePoolNodeConfigRequest): ModifyNodePoolNodeConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyNodePoolNodeConfig', 'PUT', '/clusters/{ClusterId}/nodepools/{NodepoolId}/node_config', 'json', false, 'json', request);
}

model ModifyPolicyInstanceRequest {
  clusterId: string(name='cluster_id', example='c8155823d057948c69a****', position='Path'),
  policyName: string(name='policy_name', example='ACKAllowedRepos', position='Path'),
  action?: string(name='action', example='deny', position='Body'),
  instanceName?: string(name='instance_name', example='allowed-repos-cbhhb', position='Body'),
  namespaces?: [ string ](name='namespaces', position='Body'),
  parameters?: map[string]any(name='parameters', example='"restrictedNamespaces": [ "test" ]', position='Body'),
}

model ModifyPolicyInstanceResponseBody = {
  instances?: [ string ](name='instances', description='The policy instance that is updated.'),
}

model ModifyPolicyInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyPolicyInstanceResponseBody(name='body'),
}

async function modifyPolicyInstance(request: ModifyPolicyInstanceRequest): ModifyPolicyInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyPolicyInstance', 'PUT', '/clusters/{cluster_id}/policies/{policy_name}', 'json', false, 'json', request);
}

model OpenAckServiceRequest {
  type?: string(name='type', example='propayasgo', position='Query'),
}

model OpenAckServiceResponseBody = {
  orderId?: string(name='order_id', description='The ID of the order.', example='2067*******0374'),
  requestId?: string(name='request_id', description='The ID of the request.', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
}

model OpenAckServiceResponse = {
  headers: map[string]string(name='headers'),
  body: OpenAckServiceResponseBody(name='body'),
}

/**
  * You can activate ACK with Alibaba Cloud accounts or RAM users that have the authority of AdministratorAccess.
  *
 */
async function openAckService(request: OpenAckServiceRequest): OpenAckServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'OpenAckService', 'POST', '/service/open', 'json', false, 'json', request);
}

model PauseClusterUpgradeRequest {
  clusterId: string(name='ClusterId', example='c82e6987e2961451182edacd74faf****', position='Path'),
}

model PauseClusterUpgradeResponse = {
  headers: map[string]string(name='headers'),
}

async function pauseClusterUpgrade(request: PauseClusterUpgradeRequest): PauseClusterUpgradeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PauseClusterUpgrade', 'POST', '/api/v2/clusters/{ClusterId}/upgrade/pause', 'none', false, 'json', request);
}

model PauseComponentUpgradeRequest {
  clusterid: string(name='clusterid', description='The cluster ID.', example='c82e6987e2961451182edacd74faf****', position='Path'),
  componentid: string(name='componentid', description='The component ID.', example='metric-server', position='Path'),
}

model PauseComponentUpgradeResponse = {
  headers: map[string]string(name='headers'),
}

async function pauseComponentUpgrade(request: PauseComponentUpgradeRequest): PauseComponentUpgradeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PauseComponentUpgrade', 'POST', '/clusters/{clusterid}/components/{componentid}/pause', 'none', false, 'json', request);
}

model PauseTaskRequest {
  taskId: string(name='task_id', example='T-62a944794ee141074400****', position='Path'),
}

model PauseTaskResponse = {
  headers: map[string]string(name='headers'),
}

async function pauseTask(request: PauseTaskRequest): PauseTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PauseTask', 'POST', '/tasks/{task_id}/pause', 'none', false, 'json', request);
}

model RemoveClusterNodesRequest {
  clusterId: string(name='ClusterId', example='c82e6987e2961451182edacd74faf****', position='Path'),
  drainNode?: boolean(name='drain_node', position='Body'),
  nodes: [ string ](name='nodes', position='Body'),
  releaseNode?: boolean(name='release_node', position='Body'),
}

model RemoveClusterNodesResponse = {
  headers: map[string]string(name='headers'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function removeClusterNodes(request: RemoveClusterNodesRequest): RemoveClusterNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RemoveClusterNodes', 'POST', '/api/v2/clusters/{ClusterId}/nodes/remove', 'none', false, 'json', request);
}

model RemoveNodePoolNodesRequest {
  clusterId: string(name='ClusterId', description='c23421cfa74454bc8b37163fd19af\\*\\*\\*\\*', example='c23421cfa74454bc8b37163fd19af****', position='Path'),
  nodepoolId: string(name='NodepoolId', description='np97de2cfb1ba042398dd8f5504c94\\*\\*\\*\\*', example='np97de2cfb1ba042398dd8f5504c94****', position='Path'),
  drainNode?: boolean(name='drain_node', description='true', example='true', position='Query'),
  instanceIds?: [ string ](name='instance_ids', description='i-bp1c70fqbv1nlu9xxxxx', shrink='json', position='Query'),
  nodes?: [ string ](name='nodes', description='cn-hangzhou.172.16.xxx.xxx', shrink='json', position='Query'),
  releaseNode?: boolean(name='release_node', description='true', example='true', position='Query'),
}

model RemoveNodePoolNodesResponseBody = {
  requestId?: string(name='request_id', description='The ID of the request.', example='A9891419-D125-4D89-AFCA-68846675E2F7'),
  taskId?: string(name='task_id', description='The ID of the task.', example='T-62a944794ee141074400****'),
}

model RemoveNodePoolNodesResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveNodePoolNodesResponseBody(name='body'),
}

/**
  * > 
  * *   When you remove a node, the pods that run on the node are migrated to other nodes. This may cause service interruptions. We recommend that you remove nodes during off-peak hours.
  * *   Unknown errors may occur when you remove nodes. Before you remove nodes, back up the data on the nodes.
  * *   Nodes remain in the Unschedulable state when they are being removed.
  * *   You can remove only worker nodes. You cannot remove control planes.
  *
 */
async function removeNodePoolNodes(request: RemoveNodePoolNodesRequest): RemoveNodePoolNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RemoveNodePoolNodes', 'DELETE', '/clusters/{ClusterId}/nodepools/{NodepoolId}/nodes', 'json', false, 'json', request);
}

model RemoveWorkflowRequest {
  workflowName: string(name='workflowName', example='mapping-gpu-98wt4', position='Path'),
}

model RemoveWorkflowResponse = {
  headers: map[string]string(name='headers'),
}

async function removeWorkflow(request: RemoveWorkflowRequest): RemoveWorkflowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RemoveWorkflow', 'DELETE', '/gs/workflow/{workflowName}', 'none', false, 'json', request);
}

model RepairClusterNodePoolRequest {
  clusterId: string(name='cluster_id', example='c2273b7f4a30d4ef6b43e0926cdd8****', position='Path'),
  nodepoolId: string(name='nodepool_id', example='np613940c3593c4bea96faa8600cb9****', position='Path'),
  nodes?: [ string ](name='nodes', position='Body'),
}

model RepairClusterNodePoolResponseBody = {
  requestId?: string(name='request_id', description='The ID of the request.', example='db82195b-75a8-40e5-9be4-16f1829dc624'),
  taskId?: string(name='task_id', description='The ID of the task.', example='T-613b19bbd160ad4928000001'),
}

model RepairClusterNodePoolResponse = {
  headers: map[string]string(name='headers'),
  body: RepairClusterNodePoolResponseBody(name='body'),
}

async function repairClusterNodePool(request: RepairClusterNodePoolRequest): RepairClusterNodePoolResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RepairClusterNodePool', 'POST', '/clusters/{cluster_id}/nodepools/{nodepool_id}/repair', 'json', false, 'json', request);
}

model ResumeComponentUpgradeRequest {
  clusterid: string(name='clusterid', description='The cluster ID.', example='c5b5e80b0b64a4bf6939d2d8fbbc5****', position='Path'),
  componentid: string(name='componentid', description='The component ID.', example='metric-server', position='Path'),
}

model ResumeComponentUpgradeResponse = {
  headers: map[string]string(name='headers'),
}

async function resumeComponentUpgrade(request: ResumeComponentUpgradeRequest): ResumeComponentUpgradeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ResumeComponentUpgrade', 'POST', '/clusters/{clusterid}/components/{componentid}/resume', 'none', false, 'json', request);
}

model ResumeTaskRequest {
  taskId: string(name='task_id', example='T-62a944794ee141074400****', position='Path'),
}

model ResumeTaskResponse = {
  headers: map[string]string(name='headers'),
}

async function resumeTask(request: ResumeTaskRequest): ResumeTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ResumeTask', 'POST', '/tasks/{task_id}/resume', 'none', false, 'json', request);
}

model ResumeUpgradeClusterRequest {
  clusterId: string(name='ClusterId', example='c82e6987e2961451182edacd74faf****', position='Path'),
}

model ResumeUpgradeClusterResponse = {
  headers: map[string]string(name='headers'),
}

async function resumeUpgradeCluster(request: ResumeUpgradeClusterRequest): ResumeUpgradeClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ResumeUpgradeCluster', 'POST', '/api/v2/clusters/{ClusterId}/upgrade/resume', 'none', false, 'json', request);
}

model ScaleClusterRequest {
  clusterId: string(name='ClusterId', position='Path'),
  cloudMonitorFlags?: boolean(name='cloud_monitor_flags', position='Body'),
  count?: long(name='count', position='Body'),
  cpuPolicy?: string(name='cpu_policy', position='Body'),
  disableRollback?: boolean(name='disable_rollback', position='Body'),
  keyPair?: string(name='key_pair', position='Body'),
  loginPassword?: string(name='login_password', position='Body'),
  tags?: [ 
    {
      key?: string(name='key'),
    }
  ](name='tags', position='Body'),
  taints?: [ 
    {
      effect?: string(name='effect'),
      key?: string(name='key'),
      value?: string(name='value'),
    }
  ](name='taints', position='Body'),
  vswitchIds?: [ string ](name='vswitch_ids', position='Body'),
  workerAutoRenew?: boolean(name='worker_auto_renew', position='Body'),
  workerAutoRenewPeriod?: long(name='worker_auto_renew_period', position='Body'),
  workerDataDisk?: boolean(name='worker_data_disk', position='Body'),
  workerDataDisks?: [ 
    {
      category?: string(name='category'),
      encrypted?: string(name='encrypted'),
      size?: string(name='size'),
    }
  ](name='worker_data_disks', position='Body'),
  workerInstanceChargeType?: string(name='worker_instance_charge_type', position='Body'),
  workerInstanceTypes?: [ string ](name='worker_instance_types', position='Body'),
  workerPeriod?: long(name='worker_period', position='Body'),
  workerPeriodUnit?: string(name='worker_period_unit', position='Body'),
  workerSystemDiskCategory?: string(name='worker_system_disk_category', position='Body'),
  workerSystemDiskSize?: long(name='worker_system_disk_size', position='Body'),
}

model ScaleClusterResponseBody = {
  clusterId?: string(name='cluster_id'),
  requestId?: string(name='request_id'),
  taskId?: string(name='task_id'),
}

model ScaleClusterResponse = {
  headers: map[string]string(name='headers'),
  body: ScaleClusterResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function scaleCluster(request: ScaleClusterRequest): ScaleClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ScaleCluster', 'PUT', '/clusters/{ClusterId}', 'json', false, 'json', request);
}

model ScaleClusterNodePoolRequest {
  clusterId: string(name='ClusterId', example='c23421cfa74454bc8b37163fd19af****', position='Path'),
  nodepoolId: string(name='NodepoolId', example='np31da1b38983f4511b490fc62108a****', position='Path'),
  count?: long(name='count', example='1', position='Body'),
}

model ScaleClusterNodePoolResponseBody = {
  taskId?: string(name='task_id', description='The ID of the scaling task.', example='T-5faa48fb31b6b8078d00****'),
}

model ScaleClusterNodePoolResponse = {
  headers: map[string]string(name='headers'),
  body: ScaleClusterNodePoolResponseBody(name='body'),
}

async function scaleClusterNodePool(request: ScaleClusterNodePoolRequest): ScaleClusterNodePoolResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ScaleClusterNodePool', 'POST', '/clusters/{ClusterId}/nodepools/{NodepoolId}', 'json', false, 'json', request);
}

model ScaleOutClusterRequest {
  clusterId: string(name='ClusterId', example='c82e6987e2961451182edacd74faf****', position='Path'),
  cloudMonitorFlags?: boolean(name='cloud_monitor_flags', example='true', position='Body'),
  count: long(name='count', example='3', position='Body'),
  cpuPolicy?: string(name='cpu_policy', example='none', position='Body'),
  imageId?: string(name='image_id', example='m-bp16z7xko3vvv8gt****', position='Body'),
  keyPair: string(name='key_pair', example='secrity-key', position='Body'),
  loginPassword: string(name='login_password', example='Hello@1234', position='Body'),
  rdsInstances?: [ string ](name='rds_instances', position='Body'),
  runtime?: Runtime(name='runtime', position='Body'),
  tags?: [
    Tag
  ](name='tags', position='Body'),
  taints?: [
    Taint
  ](name='taints', position='Body'),
  userData?: string(name='user_data', example='IyEvdXNyL2Jpbi9iYXNoCmVjaG8gIkhlbGxvIEFD****', position='Body'),
  vswitchIds: [ string ](name='vswitch_ids', position='Body'),
  workerAutoRenew?: boolean(name='worker_auto_renew', example='true', position='Body'),
  workerAutoRenewPeriod?: long(name='worker_auto_renew_period', example='6', position='Body'),
  workerDataDisks?: [ 
    {
      autoSnapshotPolicyId?: string(name='auto_snapshot_policy_id', example='sp-bp14yziiuvu3s6jn****'),
      category?: string(name='category', example='cloud_essd'),
      encrypted?: string(name='encrypted', example='true'),
      size?: string(name='size', example='120'),
    }
  ](name='worker_data_disks', position='Body'),
  workerInstanceChargeType?: string(name='worker_instance_charge_type', example='PrePaid', position='Body'),
  workerInstanceTypes: [ string ](name='worker_instance_types', position='Body'),
  workerPeriod?: long(name='worker_period', example='1', position='Body'),
  workerPeriodUnit?: string(name='worker_period_unit', example='Month', position='Body'),
  workerSystemDiskCategory: string(name='worker_system_disk_category', example='cloud_efficiency', position='Body'),
  workerSystemDiskSize: long(name='worker_system_disk_size', example='120', position='Body'),
}

model ScaleOutClusterResponseBody = {
  clusterId?: string(name='cluster_id', description='The ID of the cluster.', example='c82e6987e2961451182edacd74faf****'),
  requestId?: string(name='request_id', description='The ID of the request.', example='687C5BAA-D103-4993-884B-C35E4314A1E1'),
  taskId?: string(name='task_id', description='The ID of the task.', example='T-5a54309c80282e39ea00002f'),
}

model ScaleOutClusterResponse = {
  headers: map[string]string(name='headers'),
  body: ScaleOutClusterResponseBody(name='body'),
}

/**
  * >  The ScaleOutCluster API operation is phased out. You must call the node pool-related API operations to manage nodes. If you want to add worker nodes to an ACK cluster, call the ScaleClusterNodePool API operation. For more information, see [ScaleClusterNodePool](~~184928~~).
  *
 */
async function scaleOutCluster(request: ScaleOutClusterRequest): ScaleOutClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ScaleOutCluster', 'POST', '/api/v2/clusters/{ClusterId}', 'json', false, 'json', request);
}

model ScanClusterVulsRequest {
  clusterId?: string(name='cluster_id', example='c259f563386444ebb8d7****', position='Path'),
}

model ScanClusterVulsResponseBody = {
  requestId?: string(name='request_id', example='687C5BAA-D103-4993-884B-C35E4314A1E1'),
  taskId?: string(name='task_id', example='T-xascadasd*****'),
}

model ScanClusterVulsResponse = {
  headers: map[string]string(name='headers'),
  body: ScanClusterVulsResponseBody(name='body'),
}

async function scanClusterVuls(request: ScanClusterVulsRequest): ScanClusterVulsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ScanClusterVuls', 'POST', '/clusters/{cluster_id}/vuls/scan', 'json', false, 'json', request);
}

model StartAlertRequest {
  clusterId: string(name='ClusterId', description='The cluster ID. You can call the ListClusters operation to query the cluster ID.', example='c245ff43c717f494489f42f5f1575e98d', position='Path'),
}

model StartAlertResponseBody = {
  msg?: string(name='msg', description='The message returned.', example='success'),
  status?: boolean(name='status', description='The status.', example='true'),
}

model StartAlertResponse = {
  headers: map[string]string(name='headers'),
  body: StartAlertResponseBody(name='body'),
}

async function startAlert(request: StartAlertRequest): StartAlertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartAlert', 'POST', '/alert/{ClusterId}/alert_rule/start', 'json', false, 'json', request);
}

model StartWorkflowRequest {
  mappingBamOutFilename?: string(name='mapping_bam_out_filename', example='abc.bam', position='Body'),
  mappingBamOutPath?: string(name='mapping_bam_out_path', example='output/bamDirName', position='Body'),
  mappingBucketName?: string(name='mapping_bucket_name', example='gene-shenzhen', position='Body'),
  mappingFastqFirstFilename?: string(name='mapping_fastq_first_filename', example='MGISEQ2000_PCR-free_NA12878_1_V100003043_L01_1.fq.gz', position='Body'),
  mappingFastqPath?: string(name='mapping_fastq_path', example='fastq/MGISEQ2000', position='Body'),
  mappingFastqSecondFilename?: string(name='mapping_fastq_second_filename', example='MGISEQ2000_PCR-free_NA12878_1_V100003043_L01_2.fq.gz', position='Body'),
  mappingIsMarkDup?: string(name='mapping_is_mark_dup', example='true', position='Body'),
  mappingOssRegion?: string(name='mapping_oss_region', example='cn-hangzhou', position='Body'),
  mappingReferencePath?: string(name='mapping_reference_path', example='reference/hg19', position='Body'),
  service?: string(name='service', example='s', position='Body'),
  wgsBucketName?: string(name='wgs_bucket_name', example='gene-shenzhen', position='Body'),
  wgsFastqFirstFilename?: string(name='wgs_fastq_first_filename', example='MGISEQ2000_PCR-free_NA12878_1_V100003043_L01_1.fq.gz', position='Body'),
  wgsFastqPath?: string(name='wgs_fastq_path', example='fastq/MGISEQ2000', position='Body'),
  wgsFastqSecondFilename?: string(name='wgs_fastq_second_filename', example='MGISEQ2000_PCR-free_NA12878_1_V100003043_L01_2.fq.gz', position='Body'),
  wgsOssRegion?: string(name='wgs_oss_region', example='cn-shenzhen', position='Body'),
  wgsReferencePath?: string(name='wgs_reference_path', example='reference/hg19', position='Body'),
  wgsVcfOutFilename?: string(name='wgs_vcf_out_filename', example='abc.vcf', position='Body'),
  wgsVcfOutPath?: string(name='wgs_vcf_out_path', example='output/vcf', position='Body'),
  workflowType: string(name='workflow_type', example='mapping', position='Body'),
}

model StartWorkflowResponseBody = {
  jobName?: string(name='JobName', description='The name of the workflow that is created.', example='mapping-gpu-66xv7'),
}

model StartWorkflowResponse = {
  headers: map[string]string(name='headers'),
  body: StartWorkflowResponseBody(name='body'),
}

async function startWorkflow(request: StartWorkflowRequest): StartWorkflowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartWorkflow', 'POST', '/gs/workflow', 'json', false, 'json', request);
}

model StopAlertRequest {
  clusterId: string(name='ClusterId', description='The ID of the cluster that you want to manage.

You can call the [ListClusters](~~87116~~) operation to obtain the cluster ID.', example='c7f9c85baee73452883b3299a0107****', position='Path'),
}

model StopAlertResponseBody = {
  msg?: string(name='msg', description='The error message returned if the call fails.', example='Success'),
  status?: boolean(name='status', description='A value of True indicates that the call succeeds. A value of False indicates that the call failed.', example='True'),
}

model StopAlertResponse = {
  headers: map[string]string(name='headers'),
  body: StopAlertResponseBody(name='body'),
}

async function stopAlert(request: StopAlertRequest): StopAlertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopAlert', 'POST', '/alert/{ClusterId}/alert_rule/stop', 'json', false, 'json', request);
}

model SyncClusterNodePoolRequest {
  clusterId: string(name='ClusterId', example='c905d1364c2dd4b6284a3f41790c4****', position='Path'),
}

model SyncClusterNodePoolResponseBody = {
  requestId?: string(name='RequestId', example='2D69A58F-345C-4FDE-88E4-BF51894XXXXX'),
}

model SyncClusterNodePoolResponse = {
  headers: map[string]string(name='headers'),
  body: SyncClusterNodePoolResponseBody(name='body'),
}

async function syncClusterNodePool(request: SyncClusterNodePoolRequest): SyncClusterNodePoolResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SyncClusterNodePool', 'POST', '/clusters/{ClusterId}/sync_nodepools', 'json', false, 'json', request);
}

model TagResourcesRequest {
  regionId: string(name='region_id', example='cn-hangzhou', position='Body'),
  resourceIds: [ string ](name='resource_ids', position='Body'),
  resourceType: string(name='resource_type', example='CLUSTER', position='Body'),
  tags: [
    Tag
  ](name='tags', position='Body'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='2D69A58F-345C-4FDE-88E4-BF51894XXXXX'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'TagResources', 'PUT', '/tags', 'json', false, 'json', request);
}

model UnInstallClusterAddonsRequest {
  clusterId: string(name='ClusterId', example='c5b5e80b0b64a4bf6939d2d8fbbc5****', position='Path'),
  addons?: [ 
    {
      name?: string(name='name', example='ack-node-problem-detector'),
    }
  ](name='addons', position='Body'),
}

model UnInstallClusterAddonsResponse = {
  headers: map[string]string(name='headers'),
}

async function unInstallClusterAddons(request: UnInstallClusterAddonsRequest): UnInstallClusterAddonsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UnInstallClusterAddons', 'POST', '/clusters/{ClusterId}/components/uninstall', 'none', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='all', example='true', position='Query'),
  regionId: string(name='region_id', example='cn-hangzhou', position='Query'),
  resourceIds: [ string ](name='resource_ids', shrink='json', position='Query'),
  resourceType: string(name='resource_type', example='CLUSTER', position='Query'),
  tagKeys: [ string ](name='tag_keys', shrink='json', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='2D69A58F-345C-4FDE-88E4-BF51894XXXXX'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UntagResources', 'DELETE', '/tags', 'json', false, 'json', request);
}

model UpdateContactGroupForAlertRequest {
  clusterId?: string(name='ClusterId', description='The cluster ID. You can call the ListCluster operation to query the cluster ID.', example='ce7d08276f8a6422282c46272a84bxxxx', position='Path'),
}

model UpdateContactGroupForAlertResponse = {
  headers: map[string]string(name='headers'),
}

async function updateContactGroupForAlert(request: UpdateContactGroupForAlertRequest): UpdateContactGroupForAlertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateContactGroupForAlert', 'POST', '/alert/{ClusterId}/alert_rule/contact_groups', 'none', false, 'json', request);
}

model UpdateControlPlaneLogRequest {
  clusterId: string(name='ClusterId', example='c5b5e80b0b64a4bf6939d2d8fbbc5****', position='Path'),
  aliuid?: string(name='aliuid', example='162981*****', position='Body'),
  components?: [ string ](name='components', position='Body'),
  logProject?: string(name='log_project', example='k8s-log-c5b5e80b0b64a4bf6939d2d8fbbc5****', position='Body'),
  logTtl?: string(name='log_ttl', example='30', position='Body'),
}

model UpdateControlPlaneLogResponse = {
  headers: map[string]string(name='headers'),
}

async function updateControlPlaneLog(request: UpdateControlPlaneLogRequest): UpdateControlPlaneLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateControlPlaneLog', 'PUT', '/clusters/{ClusterId}/controlplanelog', 'none', false, 'json', request);
}

model UpdateK8sClusterUserConfigExpireRequest {
  clusterId: string(name='ClusterId', description='The ID of the cluster that you want to manage.', example='c5b5e80b0b64a4bf6939d2d8fbbc5****', position='Path'),
  expireHour: long(name='expire_hour', example='720', minimum=0, maximum=876000, position='Body'),
  user: string(name='user', position='Body'),
}

model UpdateK8sClusterUserConfigExpireResponse = {
  headers: map[string]string(name='headers'),
}

/**
  * > 
  * *   You can call this operation only with an Alibaba Cloud account.
  * *   After you revoke the kubeconfig file of a cluster, the validity period of the kubeconfig file that you specified becomes invalid. You can call this API operation to specify the validity period again.
  *
 */
async function updateK8sClusterUserConfigExpire(request: UpdateK8sClusterUserConfigExpireRequest): UpdateK8sClusterUserConfigExpireResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateK8sClusterUserConfigExpire', 'POST', '/k8s/{ClusterId}/user_config/expire', 'none', false, 'json', request);
}

model UpdateTemplateRequest {
  templateId: string(name='TemplateId', example='72d20cf8-a533-4ea9-a10d-e7630d3d2708', position='Path'),
  description?: string(name='description', example='web server cluster', position='Body'),
  name?: string(name='name', example='webserver01', position='Body'),
  tags?: string(name='tags', example='web', position='Body'),
  template?: string(name='template', example='apiVersion: apps/v1\\\\nkind: Deployment\\\\nmetadata:\\\\n  name: nginx-deployment-basic\\\\n  labels:\\\\n    app: nginx\\\\nspec:\\\\n  replicas: 2\\\\n  selector:\\\\n    matchLabels:\\\\n      app: nginx\\\\n  template:\\\\n    metadata:\\\\n      labels:\\\\n        app: nginx\\\\n    spec:\\\\n      containers:\\\\n      - name: nginx\\\\n        image: busybox:latest\\\\n        ports:\\\\n        - containerPort: 8080', position='Body'),
  templateType?: string(name='template_type', example='kubernetes', position='Body'),
}

model UpdateTemplateResponse = {
  headers: map[string]string(name='headers'),
}

async function updateTemplate(request: UpdateTemplateRequest): UpdateTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateTemplate', 'PUT', '/templates/{TemplateId}', 'none', false, 'json', request);
}

model UpgradeClusterRequest {
  clusterId: string(name='ClusterId', example='c82e6987e2961451182edacd74faf****', position='Path'),
  componentName?: string(name='component_name', example='k8s', deprecated='true', position='Body'),
  masterOnly?: boolean(name='master_only', position='Body'),
  nextVersion?: string(name='next_version', example='1.16.9-aliyun.1', position='Body'),
  version?: string(name='version', example='1.14.8-aliyun.1', deprecated='true', position='Body'),
}

model UpgradeClusterResponse = {
  headers: map[string]string(name='headers'),
}

async function upgradeCluster(request: UpgradeClusterRequest): UpgradeClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpgradeCluster', 'POST', '/api/v2/clusters/{ClusterId}/upgrade', 'none', false, 'json', request);
}

model UpgradeClusterAddonsRequest {
  clusterId: string(name='ClusterId', description='cf4299b79b3e34226abfdc80a4bda\\*\\*\\*\\*', example='cf4299b79b3e34226abfdc80a4bda****', position='Path'),
  body?: [ 
    {
      componentName: string(name='component_name', example='coredns'),
      config?: string(name='config', example='{\\"CpuRequest\\":\\"800m\\"}'),
      nextVersion: string(name='next_version', example='1.6.7'),
      policy?: string(name='policy'),
      version?: string(name='version', example='v1.6.2'),
    }
  ](name='body', position='Body'),
}

model UpgradeClusterAddonsResponse = {
  headers: map[string]string(name='headers'),
}

async function upgradeClusterAddons(request: UpgradeClusterAddonsRequest): UpgradeClusterAddonsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpgradeClusterAddons', 'POST', '/clusters/{ClusterId}/components/upgrade', 'none', false, 'json', request);
}

model UpgradeClusterNodepoolRequest {
  clusterId: string(name='ClusterId', description='c106f377e16f34eb1808d6b9362c9\\*\\*\\*\\*', example='c106f377e16f34eb1808d6b9362c9****', position='Path'),
  nodepoolId: string(name='NodepoolId', description='np31da1b38983f4511b490fc62108a\\*\\*\\*\\*', example='np31da1b38983f4511b490fc62108a****', position='Path'),
  imageId?: string(name='image_id', example='aliyun_2_1903_x64_20G_alibase_20200529.vhd', position='Body'),
  kubernetesVersion?: string(name='kubernetes_version', example='1.22.15-aliyun.1', position='Body'),
  runtimeType?: string(name='runtime_type', position='Body'),
  runtimeVersion?: string(name='runtime_version', example='1.5.10', position='Body'),
}

model UpgradeClusterNodepoolResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='2D69A58F-345C-4FDE-88E4-BF518944****'),
  taskId?: string(name='task_id', example='T-5fd211e924e1d0078700xxxx'),
}

model UpgradeClusterNodepoolResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeClusterNodepoolResponseBody(name='body'),
}

/**
  * You can call the UpgradeClusterNodepool operation to update the Kubernetes version, OS version, or container runtime version of the nodes in a node pool.
  *
 */
async function upgradeClusterNodepool(request: UpgradeClusterNodepoolRequest): UpgradeClusterNodepoolResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpgradeClusterNodepool', 'POST', '/clusters/{ClusterId}/nodepools/{NodepoolId}/upgrade', 'json', false, 'json', request);
}

model StandardComponentsValue = {
  name?: string(name='name', example='ack-arena'),
  version?: string(name='version', example='0.5.0'),
  description?: string(name='description', example='***'),
  required?: string(name='required', example='false'),
  disabled?: boolean(name='disabled', example='false'),
}

model QuotasValue = {
  quota?: string(name='quota'),
  operationCode?: string(name='operation_code'),
  adjustable?: boolean(name='adjustable'),
  unit?: string(name='unit'),
}

