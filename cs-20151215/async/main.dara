/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'CS';
  @version = '2015-12-15';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-2-pop = 'cs.aliyuncs.com',
    cn-beijing-finance-1 = 'cs.aliyuncs.com',
    cn-beijing-finance-pop = 'cs.aliyuncs.com',
    cn-beijing-gov-1 = 'cs.aliyuncs.com',
    cn-beijing-nu16-b01 = 'cs.aliyuncs.com',
    cn-edge-1 = 'cs.aliyuncs.com',
    cn-fujian = 'cs.aliyuncs.com',
    cn-haidian-cm12-c01 = 'cs.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'cs.aliyuncs.com',
    cn-hangzhou-finance = 'cs-vpc.cn-hangzhou-finance.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'cs.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'cs.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'cs.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'cs.aliyuncs.com',
    cn-hangzhou-test-306 = 'cs.aliyuncs.com',
    cn-hongkong-finance-pop = 'cs.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'cs.aliyuncs.com',
    cn-qingdao-nebula = 'cs.aliyuncs.com',
    cn-shanghai-et15-b01 = 'cs.aliyuncs.com',
    cn-shanghai-et2-b01 = 'cs.aliyuncs.com',
    cn-shanghai-finance-1 = 'cs-vpc.cn-shanghai-finance-1.aliyuncs.com',
    cn-shanghai-inner = 'cs.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'cs.aliyuncs.com',
    cn-shenzhen-finance-1 = 'cs-vpc.cn-shenzhen-finance-1.aliyuncs.com',
    cn-shenzhen-inner = 'cs.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'cs.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'cs.aliyuncs.com',
    cn-wuhan = 'cs.aliyuncs.com',
    cn-yushanfang = 'cs.aliyuncs.com',
    cn-zhangbei = 'cs.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'cs.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'cs.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'cs.aliyuncs.com',
    eu-west-1-oxs = 'cs.aliyuncs.com',
    rus-west-1-pop = 'cs.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model Addon {
  config?: string(name='config', description='插件配置参数。'),
  disabled?: boolean(name='disabled', description='是否禁止默认安装。true | false。'),
  name?: string(name='name', description='插件名称。'),
}

model DataDisk {
  autoSnapshotPolicyId?: string(name='auto_snapshot_policy_id', description='开启云盘备份时的自动备份策略。'),
  category?: string(name='category', description='数据盘类型'),
  encrypted?: string(name='encrypted', description='是否对数据盘加密。'),
  performanceLevel?: string(name='performance_level', description='数据盘磁盘性能，只针对ESSD磁盘生效'),
  size?: long(name='size', description='数据盘大小，取值范围：40～32767'),
}

model MaintenanceWindow {
  duration?: string(name='duration', description='维护时长。取值范围1～24，单位为小时。 默认值：3h。'),
  enable?: boolean(name='enable', description='是否开启维护窗口。默认值false。'),
  maintenanceTime?: string(name='maintenance_time', description='维护起始时间。Golang标准时间格式"15:04:05Z"。'),
  weeklyPeriod?: string(name='weekly_period', description='维护周期。取值范围为:Monday~Sunday，多个值用逗号分隔。 默认值：Thursday。'),
}

model Runtime {
  name?: string(name='name', description='容器运行时名称'),
  version?: string(name='version', description='容器运行时版本'),
}

model Tag {
  key?: string(name='key', description='key值。'),
  value?: string(name='value', description='value值。'),
}

model Taint {
  effect?: string(name='effect', description='污点生效策略。'),
  key?: string(name='key', description='key值。'),
  value?: string(name='value', description='value值。'),
}

model AttachInstancesRequest {
  clusterId: string(name='ClusterId', description='集群ID。', position='Path'),
  cpuPolicy?: string(name='cpu_policy', description='CPU亲和策略。', position='Body'),
  formatDisk?: boolean(name='format_disk', description='是否格式化数据盘。', position='Body'),
  imageId?: string(name='image_id', description='自定义镜像ID。', position='Body'),
  instances: [ string ](name='instances', description='实例列表。', position='Body'),
  isEdgeWorker?: boolean(name='is_edge_worker', description='是否为边缘节点。', position='Body'),
  keepInstanceName?: boolean(name='keep_instance_name', description='是否保留实例名称。', position='Body'),
  keyPair: string(name='key_pair', description='key_pair名称，与login_password二选一', position='Body'),
  nodepoolId?: string(name='nodepool_id', description='节点池ID，欲将节点添加到哪个节点池中。。', position='Body'),
  password: string(name='password', description='password，与key_pair二选一。', position='Body'),
  rdsInstances?: [ string ](name='rds_instances', description='RDS实例列表。', position='Body'),
  runtime?: Runtime(name='runtime', position='Body'),
  tags?: [
    Tag
  ](name='tags', description='节点标签。', position='Body'),
  userData?: string(name='user_data', description='节点自定义数据。', position='Body'),
}

model AttachInstancesResponseBody = {
  list?: [ 
    {
      code?: string(name='code', description='状态码。'),
      instanceId?: string(name='instanceId', description='实例ID。'),
      message?: string(name='message', description='添加结果描述。'),
    }
  ](name='list', description='节点信息列表。'),
  taskId?: string(name='task_id', description='任务ID。'),
}

model AttachInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: AttachInstancesResponseBody(name='body'),
}

async function attachInstances(request: AttachInstancesRequest): AttachInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AttachInstances', 'POST', '/clusters/{ClusterId}/attach', 'json', false, 'json', request);
}

model CancelClusterUpgradeRequest {
  clusterId: string(name='ClusterId', description='集群ID。', position='Path'),
}

model CancelClusterUpgradeResponse = {
  headers: map[string]string(name='headers'),
}

async function cancelClusterUpgrade(request: CancelClusterUpgradeRequest): CancelClusterUpgradeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CancelClusterUpgrade', 'POST', '/api/v2/clusters/{ClusterId}/upgrade/cancel', 'none', false, 'json', request);
}

model CancelComponentUpgradeRequest {
  clusterId: string(name='clusterId', description='集群ID。', position='Path'),
  componentId: string(name='componentId', description='组件ID。', position='Path'),
}

model CancelComponentUpgradeResponse = {
  headers: map[string]string(name='headers'),
}

async function cancelComponentUpgrade(request: CancelComponentUpgradeRequest): CancelComponentUpgradeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CancelComponentUpgrade', 'POST', '/clusters/{clusterId}/components/{componentId}/cancel', 'none', false, 'json', request);
}

model CancelTaskRequest {
  taskId: string(name='task_id', position='Path'),
}

model CancelTaskResponse = {
  headers: map[string]string(name='headers'),
}

async function cancelTask(request: CancelTaskRequest): CancelTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CancelTask', 'POST', '/tasks/{task_id}/cancel', 'none', false, 'json', request);
}

model CancelWorkflowRequest {
  workflowName: string(name='workflowName', description='工作流名称。', position='Path'),
  action: string(name='action', description='执行的操作，目前只支持cancel。', position='Body'),
}

model CancelWorkflowResponse = {
  headers: map[string]string(name='headers'),
}

async function cancelWorkflow(request: CancelWorkflowRequest): CancelWorkflowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CancelWorkflow', 'PUT', '/gs/workflow/{workflowName}', 'none', false, 'json', request);
}

model CreateAutoscalingConfigRequest {
  clusterId: string(name='ClusterId', description='集群ID', position='Path'),
  coolDownDuration?: string(name='cool_down_duration', description='静默时间，扩容出的节点，在静默时间过后，方可进入缩容判断', position='Body'),
  expander?: string(name='expander', description='节点池扩容顺序策略', position='Body'),
  gpuUtilizationThreshold?: string(name='gpu_utilization_threshold', description='GPU缩容阈值，节点上 Request 的资源与总资源量的比值', position='Body'),
  scaleDownEnabled?: boolean(name='scale_down_enabled', description='是否允许缩容', position='Body'),
  scanInterval?: string(name='scan_interval', description='弹性灵敏度，判断伸缩的间隔时间', position='Body'),
  unneededDuration?: string(name='unneeded_duration', description='缩容触发时延，节点缩容时需要连续满足触发时延所设定的时间，方可进行缩容', position='Body'),
  utilizationThreshold?: string(name='utilization_threshold', description='缩容阈值，节点上 Request 的资源与总资源量的比值', position='Body'),
}

model CreateAutoscalingConfigResponse = {
  headers: map[string]string(name='headers'),
}

async function createAutoscalingConfig(request: CreateAutoscalingConfigRequest): CreateAutoscalingConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateAutoscalingConfig', 'POST', '/cluster/{ClusterId}/autoscale/config/', 'none', false, 'json', request);
}

model CreateClusterRequest {
  addons?: [
    Addon
  ](name='addons', description='集群组件配置', position='Body'),
  apiAudiences?: string(name='api_audiences', description='合法的请求token身份，用于apiserver服务端认证请求token是否合法。', position='Body'),
  chargeType?: string(name='charge_type', description='付费类型。', position='Body'),
  cisEnabled?: boolean(name='cis_enabled', description='CIS安全加固', position='Body'),
  cloudMonitorFlags?: boolean(name='cloud_monitor_flags', description='为ECS安装云监控', position='Body'),
  clusterDomain?: string(name='cluster_domain', description='集群本地域名', position='Body'),
  clusterSpec?: string(name='cluster_spec', description='托管版集群类型', position='Body'),
  clusterType: string(name='cluster_type', description='集群类型', position='Body'),
  containerCidr: string(name='container_cidr', description='POD网络网段', position='Body'),
  controlplaneLogComponents?: [ string ](name='controlplane_log_components', description='需要采集日志的组件', position='Body'),
  controlplaneLogProject?: string(name='controlplane_log_project', description='使用已有log project时，需要指定log project', position='Body'),
  controlplaneLogTtl?: string(name='controlplane_log_ttl', description='控制平面日志', position='Body'),
  cpuPolicy?: string(name='cpu_policy', description='CPU策略', position='Body'),
  customSan?: string(name='custom_san', description='自定义证书SAN', position='Body'),
  deletionProtection?: boolean(name='deletion_protection', description='集群删除保护', position='Body'),
  disableRollback?: boolean(name='disable_rollback', description='失败回滚', position='Body'),
  enableRrsa?: boolean(name='enable_rrsa', description='启用 RRSA 功能', position='Body'),
  encryptionProviderKey?: string(name='encryption_provider_key', description='Secret落盘加密', position='Body'),
  endpointPublicAccess?: boolean(name='endpoint_public_access', description='使用EIP暴露apiServer', position='Body'),
  formatDisk?: boolean(name='format_disk', description='使用已有节点创建集群时，是否格式化已有实例的磁盘', position='Body'),
  imageId?: string(name='image_id', description='自定义镜像', position='Body'),
  imageType?: string(name='image_type', description='操作系统镜像类型', position='Body'),
  instances?: [ string ](name='instances', description='使用已有节点创建集群时，已有实例列表', position='Body'),
  isEnterpriseSecurityGroup?: boolean(name='is_enterprise_security_group', description='自动创建企业安全组', position='Body'),
  keepInstanceName?: boolean(name='keep_instance_name', description='使用已有节点创建集群时，是否保留实例名称。', position='Body'),
  keyPair: string(name='key_pair', description='密钥对名称，和login_password二选一。', position='Body'),
  kubernetesVersion?: string(name='kubernetes_version', description='集群版本', position='Body'),
  loadBalancerSpec?: string(name='load_balancer_spec', description='负载均衡规格', position='Body'),
  loggingType?: string(name='logging_type', description='ASK 集群开启日志服务', position='Body'),
  loginPassword: string(name='login_password', description='SSH登录密码。密码规则为8~30 个字符，且至少同时包含三项（大小写字母、数字和特殊符号），和key_pair二选一。', position='Body'),
  masterAutoRenew?: boolean(name='master_auto_renew', description='集群Master节点是否自动续费', position='Body'),
  masterAutoRenewPeriod?: long(name='master_auto_renew_period', description='集群Master节点自动续费时长', position='Body'),
  masterCount?: long(name='master_count', description='集群Master节点数量', position='Body'),
  masterInstanceChargeType?: string(name='master_instance_charge_type', description='集群Master节点付费类型', position='Body'),
  masterInstanceTypes: [ string ](name='master_instance_types', description='集群Master节点类型', position='Body'),
  masterPeriod?: long(name='master_period', description='集群Master节点包年包月时长', position='Body'),
  masterPeriodUnit?: string(name='master_period_unit', description='集群Master节点包年包月周期', position='Body'),
  masterSystemDiskCategory: string(name='master_system_disk_category', description='集群Master节点系统盘类型', position='Body'),
  masterSystemDiskPerformanceLevel?: string(name='master_system_disk_performance_level', description='Master节点系统盘磁盘性能，只针对ESSD磁盘生效', position='Body'),
  masterSystemDiskSize: long(name='master_system_disk_size', description='集群Master节点系统盘大小，至少40', position='Body'),
  masterSystemDiskSnapshotPolicyId?: string(name='master_system_disk_snapshot_policy_id', description='集群Master节点自动快照备份策略', position='Body'),
  masterVswitchIds: [ string ](name='master_vswitch_ids', description='集群Master节点使用的虚拟交换机', position='Body'),
  name: string(name='name', description='集群名称。', position='Body'),
  natGateway?: boolean(name='nat_gateway', description='使用自动创建专有网络创建ASK集群时，是否在vpc中创建Nat网关并配置SNAT规则。', position='Body'),
  nodeCidrMask?: string(name='node_cidr_mask', description='节点IP数量', position='Body'),
  nodeNameMode?: string(name='node_name_mode', description='自定义节点名称', position='Body'),
  nodePortRange?: string(name='node_port_range', description='节点服务端口范围', position='Body'),
  numOfNodes: long(name='num_of_nodes', description='集群Worker节点数量', position='Body'),
  osType?: string(name='os_type', description='操作系统平台类型', position='Body'),
  period?: long(name='period', description='包年包月时间。', position='Body'),
  periodUnit?: string(name='period_unit', description='包年包月时间单位。', position='Body'),
  platform?: string(name='platform', description='操作系统发行版', position='Body'),
  podVswitchIds?: [ string ](name='pod_vswitch_ids', description='创建Terway网络类型的集群时，需要为pod指定单独的虚拟交换机', position='Body'),
  profile?: string(name='profile', description='面向场景时的集群类型。  Default：非边缘场景集群。 Edge：边缘场景集群。', position='Body'),
  proxyMode?: string(name='proxy_mode', description='Proxy代理模式，ipvs|iptables', position='Body'),
  rdsInstances?: [ string ](name='rds_instances', description='RDS白名单', position='Body'),
  regionId: string(name='region_id', description='地域ID', position='Body'),
  resourceGroupId?: string(name='resource_group_id', description='集群所属资源组ID', position='Body'),
  runtime?: Runtime(name='runtime', position='Body'),
  securityGroupId?: string(name='security_group_id', description='安全组ID，和is_enterprise_security_group二选一', position='Body'),
  serviceAccountIssuer?: string(name='service_account_issuer', description='serviceaccount token中的签发身份，即token payload中的iss字段。', position='Body'),
  serviceCidr: string(name='service_cidr', description='服务网络网段', position='Body'),
  serviceDiscoveryTypes?: [ string ](name='service_discovery_types', description='创建ASK集群时，服务发现类型', position='Body'),
  snatEntry?: boolean(name='snat_entry', description='若您集群内的节点、应用等需要访问公网，勾选该项后我们将为您创建 NAT 网关并自动配置 SNAT 规则', position='Body'),
  socEnabled?: boolean(name='soc_enabled', description='等保安全加固', position='Body'),
  sshFlags?: boolean(name='ssh_flags', description='允许公网ssh登录', position='Body'),
  tags?: [
    Tag
  ](name='tags', description='集群标签', position='Body'),
  taints?: [
    Taint
  ](name='taints', description='节点污点信息', position='Body'),
  timeoutMins?: long(name='timeout_mins', description='集群创建超时时间', position='Body'),
  timezone?: string(name='timezone', description='时区', position='Body'),
  userCa?: string(name='user_ca', description='自定义集群CA', position='Body'),
  userData?: string(name='user_data', description='节点自定义数据', position='Body'),
  vpcid: string(name='vpcid', description='集群专有网络ID。', position='Body'),
  vswitchIds: [ string ](name='vswitch_ids', description='集群节点所在虚拟交换机。', position='Body'),
  workerAutoRenew?: boolean(name='worker_auto_renew', description='集群Worker节点到期是否自动续费', position='Body'),
  workerAutoRenewPeriod?: long(name='worker_auto_renew_period', description='集群Worker节点自动续费时长', position='Body'),
  workerDataDisks?: [ 
    {
      category: string(name='category', description='集群Worker节点数据盘类型'),
      encrypted?: string(name='encrypted', description='集群Worker节点数据盘是否加密'),
      performanceLevel?: string(name='performance_level', description='集群Worker节点数据盘磁盘性能等级，仅对ESSD磁盘生效'),
      size: string(name='size', description='集群Worker节点数据盘大小'),
    }
  ](name='worker_data_disks', description='集群Worker节点数据盘配置', position='Body'),
  workerInstanceChargeType?: string(name='worker_instance_charge_type', description='集群Worker节点付费类型', position='Body'),
  workerInstanceTypes: [ string ](name='worker_instance_types', description='集群Worker节点类型', position='Body'),
  workerPeriod?: long(name='worker_period', description='集群Worker节点包年包月时长', position='Body'),
  workerPeriodUnit?: string(name='worker_period_unit', description='集群Worker节点包年包月周期', position='Body'),
  workerSystemDiskCategory: string(name='worker_system_disk_category', description='集群Worker节点系统盘类型', position='Body'),
  workerSystemDiskPerformanceLevel?: string(name='worker_system_disk_performance_level', description='集群Worker节点磁盘性能，只对ESSD类型磁盘生效', position='Body'),
  workerSystemDiskSize: long(name='worker_system_disk_size', description='集群Worker节点系统盘大小', position='Body'),
  workerSystemDiskSnapshotPolicyId?: string(name='worker_system_disk_snapshot_policy_id', description='集群Worker节点系统盘快照备份策略', position='Body'),
  workerVswitchIds: [ string ](name='worker_vswitch_ids', description='集群Worker节点所在虚拟交换机', position='Body'),
  zoneId?: string(name='zone_id', description='使用自动创建专有网络创建ASK集群时，需要指定专有网络的可用区', position='Body'),
}

model CreateClusterResponseBody = {
  clusterId?: string(name='cluster_id', description='集群ID。'),
  requestId?: string(name='request_id', description='请求ID。'),
  taskId?: string(name='task_id', description='任务ID。'),
}

model CreateClusterResponse = {
  headers: map[string]string(name='headers'),
  body: CreateClusterResponseBody(name='body'),
}

async function createCluster(request: CreateClusterRequest): CreateClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateCluster', 'POST', '/clusters', 'json', false, 'json', request);
}

model CreateClusterNodePoolRequest {
  clusterId: string(name='ClusterId', description='集群ID。', position='Path'),
  autoScaling?: {
    eipBandwidth?: long(name='eip_bandwidth', description='带宽峰值。'),
    eipInternetChargeType?: string(name='eip_internet_charge_type', description='EIP实例规格。'),
    enable: boolean(name='enable', description='是否开启自动伸缩。'),
    isBondEip?: boolean(name='is_bond_eip', description='是否绑定EIP。'),
    maxInstances: long(name='max_instances', description='最大实例数。'),
    minInstances: long(name='min_instances', description='最小实例数。'),
    type?: string(name='type', description='扩容节点类型。'),
  }(name='auto_scaling', description='自动伸缩节点池配置。', position='Body'),
  count?: long(name='count', description='节点数量。', position='Body'),
  interconnectConfig?: {
    bandwidth?: long(name='bandwidth', description='边缘增强型节点池的网络带宽，单位M。'),
    ccnId?: string(name='ccn_id', description='边缘增强型节点池绑定的云连接网实例ID(CCNID)'),
    ccnRegionId?: string(name='ccn_region_id', description='边缘增强型节点池绑定的云连接网实例所属的区域'),
    cenId?: string(name='cen_id', description='边缘增强型节点池绑定的云企业网实例ID(CENID)'),
    improvedPeriod?: string(name='improved_period', description='边缘增强型节点池的购买时长，单位月'),
  }(name='interconnect_config', description='边缘节点池网络相关的配置。该值只对edge类型的节点池有意义', position='Body'),
  interconnectMode?: string(name='interconnect_mode', description='边缘节点池的网络类型。basic：基础型；improved：增强型。该值只对edge类型的节点池有意义。', position='Body'),
  kubernetesConfig?: {
    cmsEnabled?: boolean(name='cms_enabled', description='是否开启云监控。'),
    cpuPolicy?: string(name='cpu_policy', description='CPU管理策略。'),
    labels?: [
      Tag
    ](name='labels', description='节点标签。'),
    nodeNameMode?: string(name='node_name_mode', description='自定义节点名称'),
    runtime: string(name='runtime', description='容器运行时。'),
    runtimeVersion: string(name='runtime_version', description='容器运行时版本。'),
    taints?: [
      Taint
    ](name='taints', description='污点信息。'),
    userData?: string(name='user_data', description='节点自定义数据。'),
  }(name='kubernetes_config', description='集群配置', position='Body'),
  management?: {
    autoRepair?: boolean(name='auto_repair', description='是否启用自动修复。'),
    enable: boolean(name='enable', description='是否启用托管节点池。'),
    upgradeConfig?: {
      autoUpgrade?: boolean(name='auto_upgrade', description='是否启用自动升级'),
      maxUnavailable: long(name='max_unavailable', description='最大不可用节点数量。'),
      surge?: long(name='surge', description='额外节点数量。'),
      surgePercentage?: long(name='surge_percentage', description='额外节点比例。和surge二选一。'),
    }(name='upgrade_config', description='自动升级配置。'),
  }(name='management', description='托管节点池配置。', position='Body'),
  maxNodes?: long(name='max_nodes', description='边缘节点池允许容纳的最大节点数量. 节点池内可以容纳的最大节点数量，该参数大于等于0。0表示无额外限制(仅受限于集群整体可以容纳的节点数，节点池本身无额外限制)。边缘节点池该参数值往往大于0；ess类型节点池和默认的edge类型节点池该参数值为0', position='Body'),
  nodepoolInfo?: {
    name: string(name='name', description='节点池名称'),
    resourceGroupId?: string(name='resource_group_id', description='资源组ID。'),
    type?: string(name='type', description='节点池类型，对于边缘节点池来说，类型为"edge"'),
  }(name='nodepool_info', description='节点池配置', position='Body'),
  scalingGroup?: {
    autoRenew?: boolean(name='auto_renew', description='节点是否开启自动续费'),
    autoRenewPeriod?: long(name='auto_renew_period', description='节点自动续费周期'),
    compensateWithOnDemand?: boolean(name='compensate_with_on_demand', description='当MultiAZPolicy取值为COST_OPTIMIZED时，如果因价格、库存等原因无法创建足够的抢占式实例，是否允许自动尝试创建按量实例满足ECS实例数量要求。取值范围：true：允许。false：不允许。默认值：true'),
    dataDisks?: [
      DataDisk
    ](name='data_disks', description='数据盘配置。'),
    deploymentsetId?: string(name='deploymentset_id', description='部署集ID。'),
    desiredSize?: long(name='desired_size', description='姐弟池期望节点数'),
    imageId?: string(name='image_id', description='自定义镜像。'),
    imageType?: string(name='image_type', description='操作系统镜像类型，和platform二选一'),
    instanceChargeType: string(name='instance_charge_type', description='节点付费类型'),
    instanceTypes: [ string ](name='instance_types', description='实例规格。'),
    internetChargeType?: string(name='internet_charge_type', description='节点公网IP网络计费类型'),
    internetMaxBandwidthOut?: long(name='internet_max_bandwidth_out', description='节点公网IP出带宽最大值，单位为Mbps（Mega bit per second），取值范围：1~100'),
    keyPair?: string(name='key_pair', description='密钥对名称，和login_password二选一。'),
    loginPassword?: string(name='login_password', description='SSH登录密码。'),
    multiAzPolicy?: string(name='multi_az_policy', description='多可用区伸缩组ECS实例扩缩容策略'),
    onDemandBaseCapacity?: long(name='on_demand_base_capacity', description='伸缩组所需要按量实例个数的最小值，取值范围：0~1000。当按量实例个数少于该值时，将优先创建按量实例。'),
    onDemandPercentageAboveBaseCapacity?: long(name='on_demand_percentage_above_base_capacity', description='伸缩组满足最小按量实例数（OnDemandBaseCapacity）要求后，超出的实例中按量实例应占的比例，取值范围：0～100。'),
    period?: long(name='period', description='节点包年包月时长。'),
    periodUnit?: string(name='period_unit', description='节点包年包月周期。'),
    platform?: string(name='platform', description='操作系统发行版，和image_type二选一'),
    rdsInstances?: [ string ](name='rds_instances', description='RDS实例列表。'),
    scalingPolicy?: string(name='scaling_policy', description='自动伸缩。'),
    securityGroupId?: string(name='security_group_id', description='安全组ID。'),
    securityGroupIds?: [ string ](name='security_group_ids', description='多安全组ID'),
    spotInstancePools?: long(name='spot_instance_pools', description='指定可用实例规格的个数，伸缩组将按成本最低的多个规格均衡创建抢占式实例。取值范围：1~10。'),
    spotInstanceRemedy?: boolean(name='spot_instance_remedy', description='是否开启补齐抢占式实例。开启后，当收到抢占式实例将被回收的系统消息时，伸缩组将尝试创建新的实例，替换掉将被回收的抢占式实例。'),
    spotPriceLimit?: [ 
      {
        instanceType?: string(name='instance_type', description='抢占实例规格。'),
        priceLimit?: string(name='price_limit', description='抢占实例单价。'),
      }
    ](name='spot_price_limit', description='抢占实例价格上限配置。'),
    spotStrategy?: string(name='spot_strategy', description='抢占式实例类型'),
    systemDiskCategory: string(name='system_disk_category', description='节点系统盘类型。'),
    systemDiskPerformanceLevel?: string(name='system_disk_performance_level', description='节点系统盘磁盘性能，只针对ESSD磁盘生效'),
    systemDiskSize: long(name='system_disk_size', description='节点系统盘大小。'),
    tags?: [ 
      {
        key?: string(name='key', description='key'),
        value?: string(name='value', description='value'),
      }
    ](name='tags', description='ECS标签'),
    vswitchIds: [ string ](name='vswitch_ids', description='虚拟交换机ID。'),
  }(name='scaling_group', description='伸缩组配置', position='Body'),
  teeConfig?: {
    teeEnable: boolean(name='tee_enable', description='是否为加密计算节点池。'),
  }(name='tee_config', description='加密计算节点池配置。', position='Body'),
}

model CreateClusterNodePoolResponseBody = {
  nodepoolId?: string(name='nodepool_id', description='节点池ID'),
}

model CreateClusterNodePoolResponse = {
  headers: map[string]string(name='headers'),
  body: CreateClusterNodePoolResponseBody(name='body'),
}

async function createClusterNodePool(request: CreateClusterNodePoolRequest): CreateClusterNodePoolResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateClusterNodePool', 'POST', '/clusters/{ClusterId}/nodepools', 'json', false, 'json', request);
}

model CreateEdgeMachineRequest {
  hostname: string(name='hostname', description='hostname', position='Body'),
  model: string(name='model', description='model', position='Body'),
  sn: string(name='sn', description='sn', position='Body'),
}

model CreateEdgeMachineResponseBody = {
  edgeMachineId?: string(name='edge_machine_id', description='edge machine id'),
  requestId?: string(name='request_id', description='Id of the request'),
}

model CreateEdgeMachineResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEdgeMachineResponseBody(name='body'),
}

async function createEdgeMachine(request: CreateEdgeMachineRequest): CreateEdgeMachineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateEdgeMachine', 'POST', '/edge_machines', 'json', false, 'json', request);
}

model CreateKubernetesTriggerRequest {
  action: string(name='action', description='触发器行为', position='Body'),
  clusterId: string(name='cluster_id', description='集群ID。', position='Body'),
  projectId: string(name='project_id', description='项目名称。', position='Body'),
  type?: string(name='type', description='触发器类型。默认deployment。', position='Body'),
}

model CreateKubernetesTriggerResponseBody = {
  action?: string(name='action', description='触发器行为。'),
  clusterId?: string(name='cluster_id', description='集群ID。'),
  id?: string(name='id', description='触发器ID。'),
  projectId?: string(name='project_id', description='触发器项目名称。'),
  type?: string(name='type', description='触发器类型。默认值为 deployment 。'),
}

model CreateKubernetesTriggerResponse = {
  headers: map[string]string(name='headers'),
  body: CreateKubernetesTriggerResponseBody(name='body'),
}

async function createKubernetesTrigger(request: CreateKubernetesTriggerRequest): CreateKubernetesTriggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateKubernetesTrigger', 'POST', '/triggers', 'json', false, 'json', request);
}

model CreateTemplateRequest {
  description?: string(name='description', description='模板描述。', position='Body'),
  name: string(name='name', description='模板名称。', position='Body'),
  tags?: string(name='tags', description='模板标签。', position='Body'),
  template: string(name='template', description='YAML格式的模板内容。', position='Body'),
  templateType?: string(name='template_type', description='模板类型。默认值：kubernetes', position='Body'),
}

model CreateTemplateResponseBody = {
  templateId?: string(name='template_id', description='模板ID。'),
}

model CreateTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTemplateResponseBody(name='body'),
}

async function createTemplate(request: CreateTemplateRequest): CreateTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateTemplate', 'POST', '/templates', 'json', false, 'json', request);
}

model CreateTriggerRequest {
  clusterId: string(name='cluster_id', description='集群ID', position='Path,Body'),
  action: string(name='action', description='触发器行为', position='Body'),
  projectId: string(name='project_id', description='项目名称。', position='Body'),
  type?: string(name='type', description='触发器类型。默认deployment。', position='Body'),
}

model CreateTriggerResponseBody = {
  action?: string(name='action', description='触发器行为。'),
  clusterId?: string(name='cluster_id', description='集群ID。'),
  id?: string(name='id', description='触发器ID。'),
  projectId?: string(name='project_id', description='触发器项目名称。'),
  type?: string(name='type', description='触发器类型。默认值为 deployment 。'),
}

model CreateTriggerResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTriggerResponseBody(name='body'),
}

async function createTrigger(request: CreateTriggerRequest): CreateTriggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateTrigger', 'POST', '/clusters/{cluster_id}/triggers', 'json', false, 'json', request);
}

model DeleteAlertContactRequest {
}

model DeleteAlertContactResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteAlertContact(request: DeleteAlertContactRequest): DeleteAlertContactResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteAlertContact', 'DELETE', '/alert/contacts', 'none', false, 'json', request);
}

model DeleteAlertContactGroupRequest {
}

model DeleteAlertContactGroupResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteAlertContactGroup(request: DeleteAlertContactGroupRequest): DeleteAlertContactGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteAlertContactGroup', 'DELETE', '/alert/contact_groups', 'none', false, 'json', request);
}

model DeleteClusterRequest {
  clusterId: string(name='ClusterId', description='集群ID。', position='Path'),
  keepSlb?: boolean(name='keep_slb', description='是否保留SLB。  true：保留 false：不保留 默认值：false。', position='Query'),
  retainAllResources?: boolean(name='retain_all_resources', description='是否保留所有资源,如果设置了该值，将会忽略retain_resources。  true：保留 false：不保留 默认值：fase。', position='Query'),
  retainResources?: [ string ](name='retain_resources', description='要保留的资源列表。', shrink='json', position='Query'),
}

model DeleteClusterResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteCluster(request: DeleteClusterRequest): DeleteClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteCluster', 'DELETE', '/clusters/{ClusterId}', 'none', false, 'json', request);
}

model DeleteClusterNodepoolRequest {
  clusterId: string(name='ClusterId', description='集群ID', position='Path'),
  nodepoolId: string(name='NodepoolId', description='节点池ID。', position='Path'),
  force?: boolean(name='force', description='是否强制删除。', position='Query'),
}

model DeleteClusterNodepoolResponseBody = {
  requestId?: string(name='request_id', description='请求ID'),
}

model DeleteClusterNodepoolResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteClusterNodepoolResponseBody(name='body'),
}

async function deleteClusterNodepool(request: DeleteClusterNodepoolRequest): DeleteClusterNodepoolResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteClusterNodepool', 'DELETE', '/clusters/{ClusterId}/nodepools/{NodepoolId}', 'json', false, 'json', request);
}

model DeleteClusterNodesRequest {
  clusterId: string(name='ClusterId', description='集群ID。', position='Path'),
  drainNode?: boolean(name='drain_node', description='是否自动排空节点上的Pod。', position='Body'),
  nodes?: [ string ](name='nodes', description='移除节点列表。', position='Body'),
  releaseNode?: boolean(name='release_node', description='是否同时释放 ECS', position='Body'),
}

model DeleteClusterNodesResponseBody = {
  clusterId?: string(name='cluster_id', description='集群ID'),
  requestId?: string(name='request_id', description='请求ID'),
  taskId?: string(name='task_id', description='任务ID'),
}

model DeleteClusterNodesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteClusterNodesResponseBody(name='body'),
}

async function deleteClusterNodes(request: DeleteClusterNodesRequest): DeleteClusterNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteClusterNodes', 'POST', '/clusters/{ClusterId}/nodes', 'json', false, 'json', request);
}

model DeleteEdgeMachineRequest {
  edgeMachineid: string(name='edge_machineid', description='edge machine id', position='Path'),
  force?: string(name='force', description='whether force delete', position='Query'),
}

model DeleteEdgeMachineResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteEdgeMachine(request: DeleteEdgeMachineRequest): DeleteEdgeMachineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteEdgeMachine', 'DELETE', '/edge_machines/[edge_machineid]', 'none', false, 'json', request);
}

model DeleteKubernetesTriggerRequest {
  id: string(name='Id', description='触发器ID。', position='Path'),
}

model DeleteKubernetesTriggerResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteKubernetesTrigger(request: DeleteKubernetesTriggerRequest): DeleteKubernetesTriggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteKubernetesTrigger', 'DELETE', '/triggers/revoke/{Id}', 'none', false, 'json', request);
}

model DeletePolicyInstanceRequest {
  clusterId: string(name='cluster_id', description='目标集群id', position='Path'),
  policyName: string(name='policy_name', description='策略治理规则名称', position='Path'),
  instanceName?: string(name='instance_name', description='策略规则实例id', position='Query'),
}

model DeletePolicyInstanceResponseBody = {
  instances?: [ string ](name='instances', description='策略实例列表'),
}

model DeletePolicyInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePolicyInstanceResponseBody(name='body'),
}

async function deletePolicyInstance(request: DeletePolicyInstanceRequest): DeletePolicyInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeletePolicyInstance', 'DELETE', '/clusters/{cluster_id}/policies/{policy_name}', 'json', false, 'json', request);
}

model DeleteTemplateRequest {
  templateId: string(name='TemplateId', description='模板ID。', position='Path'),
}

model DeleteTemplateResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteTemplate(request: DeleteTemplateRequest): DeleteTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteTemplate', 'DELETE', '/templates/{TemplateId}', 'none', false, 'json', request);
}

model DeleteTriggerRequest {
  clusterId?: string(name='cluster_id', description='集群ID。', position='Path'),
  id: string(name='Id', description='触发器ID。', position='Path'),
}

model DeleteTriggerResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteTrigger(request: DeleteTriggerRequest): DeleteTriggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteTrigger', 'DELETE', '/clusters/[cluster_id]/triggers/[Id]', 'none', false, 'json', request);
}

model DeployPolicyInstanceRequest {
  clusterId: string(name='cluster_id', description='目标集群id', position='Path'),
  policyName: string(name='policy_name', description='策略治理规则名称', position='Path'),
  action?: string(name='action', description='规则治理动作', position='Body'),
  namespaces?: [ string ](name='namespaces', description='限制策略实施的命名空间，为空时表示所有命名空间', position='Body'),
  parameters?: map[string]any(name='parameters', description='当前规则实例的配置参数', position='Body'),
}

model DeployPolicyInstanceResponseBody = {
  instances?: [ string ](name='instances', description='策略实例列表'),
}

model DeployPolicyInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeployPolicyInstanceResponseBody(name='body'),
}

async function deployPolicyInstance(request: DeployPolicyInstanceRequest): DeployPolicyInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeployPolicyInstance', 'POST', '/clusters/{cluster_id}/policies/{policy_name}', 'json', false, 'json', request);
}

model DescirbeWorkflowRequest {
  workflowName: string(name='workflowName', description='工作流名称', position='Path'),
}

model DescirbeWorkflowResponseBody = {
  createTime?: string(name='create_time', description='工作流创建时间。'),
  duration?: string(name='duration', description='工作流经过时长。'),
  finishTime?: string(name='finish_time', description='任务结束时间。'),
  inputDataSize?: string(name='input_data_size', description='输入数据大小。'),
  jobName?: string(name='job_name', description='工作流名称。'),
  jobNamespace?: string(name='job_namespace', description='工作流所在命名空间。'),
  outputDataSize?: string(name='output_data_size', description='输出数据大小。'),
  status?: string(name='status', description='工作流当前状态。'),
  totalBases?: string(name='total_bases', description='碱基对个数。'),
  totalReads?: string(name='total_reads', description='Reads个数。'),
  userInputData?: string(name='user_input_data', description='用户输入参数。'),
}

model DescirbeWorkflowResponse = {
  headers: map[string]string(name='headers'),
  body: DescirbeWorkflowResponseBody(name='body'),
}

async function descirbeWorkflow(request: DescirbeWorkflowRequest): DescirbeWorkflowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescirbeWorkflow', 'GET', '/gs/workflow/{workflowName}', 'json', false, 'json', request);
}

model DescribeAddonsRequest {
  clusterType?: string(name='cluster_type', description='集群类型。  - Kubernetes: 专有版集群。 - ManagedKubernetes：托管版集群。 - Ask：Serverless 集群。 - ExternalKubernetes：注册到ACK的外部集群。', position='Query'),
  region: string(name='region', description='地域ID。', position='Query'),
}

model DescribeAddonsResponseBody = {
  componentGroups?: [ 
    {
      groupName?: string(name='group_name', description='组件组名称。'),
      items?: [ 
        {
          name?: string(name='name', description='组件名称。'),
        }
      ](name='items', description='组件列表'),
    }
  ](name='ComponentGroups', description='组件分组信息，例如：存储类组件，网络组件等。'),
  standardComponents?: map[string]StandardComponentsValue(name='StandardComponents', description='标准组件信息，包含各个组件的描述信息。'),
}

model DescribeAddonsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAddonsResponseBody(name='body'),
}

async function describeAddons(request: DescribeAddonsRequest): DescribeAddonsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeAddons', 'GET', '/clusters/components/metadata', 'json', false, 'json', request);
}

model DescribeClusterAddonMetadataRequest {
  clusterId: string(name='cluster_id', description='集群ID', position='Path'),
  componentId: string(name='component_id', description='组件ID', position='Path'),
  version?: string(name='version', description='组件版本', position='Path'),
}

model DescribeClusterAddonMetadataResponseBody = {
  configSchema?: string(name='config_schema', description='组件参数Schema'),
  name?: string(name='name', description='组件名称'),
  version?: string(name='version', description='组件版本'),
}

model DescribeClusterAddonMetadataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterAddonMetadataResponseBody(name='body'),
}

async function describeClusterAddonMetadata(request: DescribeClusterAddonMetadataRequest): DescribeClusterAddonMetadataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeClusterAddonMetadata', 'GET', '/clusters/{cluster_id}/components/{component_id}/metadata', 'json', false, 'json', request);
}

model DescribeClusterAddonUpgradeStatusRequest {
  clusterId: string(name='ClusterId', description='集群ID。', position='Path'),
  componentId: string(name='ComponentId', description='组件ID。', position='Path'),
}

model DescribeClusterAddonUpgradeStatusResponse = {
  headers: map[string]string(name='headers'),
  body: map[string]any(name='body'),
}

async function describeClusterAddonUpgradeStatus(request: DescribeClusterAddonUpgradeStatusRequest): DescribeClusterAddonUpgradeStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeClusterAddonUpgradeStatus', 'GET', '/clusters/{ClusterId}/components/{ComponentId}/upgradestatus', 'json', false, 'json', request);
}

model DescribeClusterAddonsUpgradeStatusRequest {
  clusterId: string(name='ClusterId', description='集群ID。', position='Path'),
  componentIds: [ string ](name='componentIds', description='组件名称列表。', shrink='json', position='Query'),
}

model DescribeClusterAddonsUpgradeStatusResponse = {
  headers: map[string]string(name='headers'),
  body: map[string]any(name='body'),
}

async function describeClusterAddonsUpgradeStatus(request: DescribeClusterAddonsUpgradeStatusRequest): DescribeClusterAddonsUpgradeStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeClusterAddonsUpgradeStatus', 'GET', '/clusters/{ClusterId}/components/upgradestatus', 'json', false, 'json', request);
}

model DescribeClusterAddonsVersionRequest {
  clusterId: string(name='ClusterId', description='集群ID。', position='Path'),
}

model DescribeClusterAddonsVersionResponse = {
  headers: map[string]string(name='headers'),
  body: map[string]any(name='body'),
}

async function describeClusterAddonsVersion(request: DescribeClusterAddonsVersionRequest): DescribeClusterAddonsVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeClusterAddonsVersion', 'GET', '/clusters/{ClusterId}/components/version', 'json', false, 'json', request);
}

model DescribeClusterAttachScriptsRequest {
  clusterId: string(name='ClusterId', description='集群ID。', position='Path'),
  arch?: string(name='arch', description='节点CPU架构,支持amd64、arm、arm64。边缘托管集群专有字段。', position='Body'),
  formatDisk?: boolean(name='format_disk', description='数据盘挂载', position='Body'),
  keepInstanceName?: boolean(name='keep_instance_name', description='保留实例名称', position='Body'),
  nodepoolId?: string(name='nodepool_id', description='节点池ID。将节点加入指定节点池。', position='Body'),
  options?: string(name='options', description='边缘托管版集群节点的接入配置。', position='Body'),
  rdsInstances?: [ string ](name='rds_instances', description='RDS白名单', position='Body'),
}

model DescribeClusterAttachScriptsResponse = {
  headers: map[string]string(name='headers'),
  body: string(name='body'),
}

async function describeClusterAttachScripts(request: DescribeClusterAttachScriptsRequest): DescribeClusterAttachScriptsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeClusterAttachScripts', 'POST', '/clusters/{ClusterId}/attachscript', 'string', false, 'json', request);
}

model DescribeClusterDetailRequest {
  clusterId: string(name='ClusterId', description='集群ID。', position='Path'),
}

model DescribeClusterDetailResponseBody = {
  clusterId?: string(name='cluster_id', description='集群ID。'),
  clusterSpec?: string(name='cluster_spec', description='托管版集群类型，面向托管集群。  ack.pro.small：专业托管集群。 ack.standard ：标准托管集群。'),
  clusterType?: string(name='cluster_type', description='集群类型。'),
  created?: string(name='created', description='集群创建时间。'),
  currentVersion?: string(name='current_version', description='集群当前版本。'),
  deletionProtection?: boolean(name='deletion_protection', description='集群是否开启删除保护。'),
  dockerVersion?: string(name='docker_version', description='集群内Docker版本。'),
  externalLoadbalancerId?: string(name='external_loadbalancer_id', description='集群Ingress LB实例ID。'),
  initVersion?: string(name='init_version', description='集群初始化版本。'),
  maintenanceWindow?: MaintenanceWindow(name='maintenance_window'),
  masterUrl?: string(name='master_url', description='集群访问地址。'),
  metaData?: string(name='meta_data', description='集群元数据。'),
  name?: string(name='name', description='集群名称。'),
  networkMode?: string(name='network_mode', description='集群采用的网络类型，例如：VPC网络。'),
  nextVersion?: string(name='next_version', description='集群可升级版本。'),
  privateZone?: boolean(name='private_zone', description='集群是否启用用PrivateZone。  true：启用 false：不启用 默认值：false。'),
  profile?: string(name='profile', description='面向场景时的集群类型。  Default：非边缘场景集群。 Edge：边缘场景集群。'),
  regionId?: string(name='region_id', description='集群所在地域ID。'),
  resourceGroupId?: string(name='resource_group_id', description='集群资源组ID。'),
  securityGroupId?: string(name='security_group_id', description='集群安全组ID。'),
  size?: long(name='size', description='集群节点数量。'),
  state?: string(name='state', description='集群运行状态。'),
  subnetCidr?: string(name='subnet_cidr', description='Pod网络地址段，必须是有效的私有网段，即以下网段及其子网：10.0.0.0/8，172.16-31.0.0/12-16，192.168.0.0/16。不能与 VPC 及VPC 内已有 Kubernetes 集群使用的网段重复，创建成功后不能修改。  有关集群网络规划，请参见：[VPC下 Kubernetes 的网络地址段规划](https://help.aliyun.com/document_detail/～～86500～～)。'),
  tags?: [
    Tag
  ](name='tags', description='集群标签。'),
  updated?: string(name='updated', description='集群更新时间。'),
  vpcId?: string(name='vpc_id', description='集群使用的VPC ID。'),
  vswitchId?: string(name='vswitch_id', description='集群节点使用的虚拟交换机列表。'),
  workerRamRoleName?: string(name='worker_ram_role_name', description='Worker节点RAM角色名称。'),
  zoneId?: string(name='zone_id', description='集群所在地域内的可用区ID。'),
}

model DescribeClusterDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterDetailResponseBody(name='body'),
}

async function describeClusterDetail(request: DescribeClusterDetailRequest): DescribeClusterDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeClusterDetail', 'GET', '/clusters/{ClusterId}', 'json', false, 'json', request);
}

model DescribeClusterEventsRequest {
  clusterId: string(name='ClusterId', description='集群ID。', position='Path'),
  pageNumber?: long(name='page_number', description='分页页数。', position='Query'),
  pageSize?: long(name='page_size', description='每页大小。', position='Query'),
  taskId?: long(name='task_id', description='查询的任务ID。', position='Query'),
}

model DescribeClusterEventsResponseBody = {
  events?: [ 
    {
      clusterId?: string(name='cluster_id', description='集群ID。'),
      data?: {
        level?: string(name='level', description='事件级别。'),
        message?: string(name='message', description='事件详情。'),
        reason?: string(name='reason', description='事件状态。'),
      }(name='data', description='事件描述。'),
      eventId?: string(name='event_id', description='事件ID。'),
      source?: string(name='source', description='事件源。'),
      subject?: string(name='subject', description='事件子项。'),
      time?: string(name='time', description='事件开始时间。'),
      type?: string(name='type', description='事件类型。'),
    }
  ](name='events', description='事件列表。'),
  pageInfo?: {
    pageNumber?: long(name='page_number', description='分页页数。'),
    pageSize?: long(name='page_size', description='每页大小。'),
    totalCount?: long(name='total_count', description='结果总数。'),
  }(name='page_info', description='分页信息。'),
}

model DescribeClusterEventsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterEventsResponseBody(name='body'),
}

async function describeClusterEvents(request: DescribeClusterEventsRequest): DescribeClusterEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeClusterEvents', 'GET', '/clusters/{ClusterId}/events', 'json', false, 'json', request);
}

model DescribeClusterLogsRequest {
  clusterId: string(name='ClusterId', description='集群ID', position='Path'),
}

model DescribeClusterLogsResponse = {
  headers: map[string]string(name='headers'),
  body: [ 
    {
      id?: long(name='ID', description='日志ID。'),
      clusterId?: string(name='cluster_id', description='集群ID。'),
      clusterLog?: string(name='cluster_log', description='日志内容。'),
      created?: string(name='created', description='日志创建时间。'),
      updated?: string(name='updated', description='日志更新时间。'),
    }
  ](name='body'),
}

async function describeClusterLogs(request: DescribeClusterLogsRequest): DescribeClusterLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeClusterLogs', 'GET', '/clusters/{ClusterId}/logs', 'array', false, 'json', request);
}

model DescribeClusterNodePoolDetailRequest {
  clusterId: string(name='ClusterId', description='集群ID。', position='Path'),
  nodepoolId: string(name='NodepoolId', description='节点池ID。', position='Path'),
}

model DescribeClusterNodePoolDetailResponseBody = {
  autoScaling?: {
    eipBandwidth?: long(name='eip_bandwidth', description='EIP带宽峰值。'),
    eipInternetChargeType?: string(name='eip_internet_charge_type', description='EIP实例付费类型。'),
    enable?: boolean(name='enable', description='是否启用自动伸缩。'),
    isBondEip?: boolean(name='is_bond_eip', description='是否绑定EIP。'),
    maxInstances?: long(name='max_instances', description='最大实例数。'),
    minInstances?: long(name='min_instances', description='最小实例数。'),
    type?: string(name='type', description='扩容组类型'),
  }(name='auto_scaling', description='节点池自动伸缩信息。'),
  interconnectConfig?: {
    bandwidth?: long(name='bandwidth', description='边缘增强型节点池的网络带宽，单位M'),
    ccnId?: string(name='ccn_id', description='边缘增强型节点池绑定的云连接网实例ID(CCNID)'),
    ccnRegionId?: string(name='ccn_region_id', description='边缘增强型节点池绑定的云连接网实例所属的区域'),
    cenId?: string(name='cen_id', description='边缘增强型节点池绑定的云企业网实例ID(CENID)'),
    improvedPeriod?: string(name='improved_period', description='边缘增强型节点池的购买时长，单位月'),
  }(name='interconnect_config', description='边缘节点池网络相关的配置。该值只对edge类型的节点池有意义'),
  interconnectMode?: string(name='interconnect_mode', description='边缘节点池的网络类型。basic：基础型；improved：增强型。该值只对edge类型的节点池有意义'),
  kubernetesConfig?: {
    cmsEnabled?: boolean(name='cms_enabled', description='是否开启云监控'),
    cpuPolicy?: string(name='cpu_policy', description='CPU管理策略'),
    labels?: [
      Tag
    ](name='labels', description='节点标签。'),
    nodeNameMode?: string(name='node_name_mode', description='自定义节点名称'),
    runtime?: string(name='runtime', description='容器运行时'),
    runtimeVersion?: string(name='runtime_version', description='容器运行时版本。'),
    taints?: [
      Taint
    ](name='taints', description='污点配置。'),
    userData?: string(name='user_data', description='节点自定义数据'),
  }(name='kubernetes_config', description='节点池所属集群配置。'),
  management?: {
    autoRepair?: boolean(name='auto_repair', description='自动修复。'),
    enable?: boolean(name='enable', description='是否开启托管版节点池。'),
    upgradeConfig?: {
      autoUpgrade?: boolean(name='auto_upgrade', description='是否启用自动升级，自修复。'),
      maxUnavailable?: long(name='max_unavailable', description='最大不可用节点数量。'),
      surge?: long(name='surge', description='额外节点数量。'),
      surgePercentage?: long(name='surge_percentage', description='额外节点比例， 和surge 二选一。'),
    }(name='upgrade_config', description='自动升级配置。'),
  }(name='management', description='托管版节点池配置。'),
  maxNodes?: long(name='max_nodes', description='边缘节点池允许容纳的最大节点数量. 节点池内可以容纳的最大节点数量，该参数大于等于0。0表示无额外限制(仅受限于集群整体可以容纳的节点数，节点池本身无额外限制)。边缘节点池该参数值往往大于0；ess类型节点池和默认的edge类型节点池该参数值为0'),
  nodepoolInfo?: {
    created?: string(name='created', description='节点池创建时间。'),
    isDefault?: boolean(name='is_default', description='是否为默认节点池。'),
    name?: string(name='name', description='节点池名称。'),
    nodepoolId?: string(name='nodepool_id', description='节点池ID。'),
    regionId?: string(name='region_id', description='节点池所属地域ID。'),
    resourceGroupId?: string(name='resource_group_id', description='节点池所属资源组ID。'),
    type?: string(name='type', description='节点池类型。'),
    updated?: string(name='updated', description='节点池更新时间。'),
  }(name='nodepool_info', description='节点池详情。'),
  scalingGroup?: {
    autoRenew?: boolean(name='auto_renew', description='节点是否开启自动续费。'),
    autoRenewPeriod?: long(name='auto_renew_period', description='节点自动续费周期。'),
    compensateWithOnDemand?: boolean(name='compensate_with_on_demand', description='当MultiAZPolicy取值为COST_OPTIMIZED时，如果因价格、库存等原因无法创建足够的抢占式实例，是否允许自动尝试创建按量实例满足ECS实例数量要求。取值范围：true：允许。false：不允许。默认值：true'),
    dataDisks?: [
      DataDisk
    ](name='data_disks', description='数据盘配置。'),
    deploymentsetId?: string(name='deploymentset_id', description='部署集ID。'),
    desiredSize?: long(name='desired_size', description='节点池期望节点数'),
    imageId?: string(name='image_id', description='自定义镜像ID。'),
    instanceChargeType?: string(name='instance_charge_type', description='节点付费类型。'),
    instanceTypes?: [ string ](name='instance_types', description='节点ECS规格类型。'),
    internetChargeType?: string(name='internet_charge_type', description='节点公网IP网络计费类型'),
    internetMaxBandwidthOut?: long(name='internet_max_bandwidth_out', description='节点公网IP出带宽最大值，单位为Mbps（Mega bit per second），取值范围：1~100'),
    keyPair?: string(name='key_pair', description='密钥对名称'),
    loginPassword?: string(name='login_password', description='登录密码'),
    multiAzPolicy?: string(name='multi_az_policy', description='多可用区伸缩组ECS实例扩缩容策略'),
    onDemandBaseCapacity?: long(name='on_demand_base_capacity', description='伸缩组所需要按量实例个数的最小值，取值范围：0~1000。当按量实例个数少于该值时，将优先创建按量实例。'),
    onDemandPercentageAboveBaseCapacity?: long(name='on_demand_percentage_above_base_capacity', description='伸缩组满足最小按量实例数（OnDemandBaseCapacity）要求后，超出的实例中按量实例应占的比例，取值范围：0～100。'),
    period?: long(name='period', description='节点包年包月时长。'),
    periodUnit?: string(name='period_unit', description='节点付费周期。'),
    platform?: string(name='platform', description='操作系统发行版。取值： CentOS，AliyunLinux，Windows，WindowsCore。'),
    ramPolicy?: string(name='ram_policy', description='节点RAM 角色名称。'),
    rdsInstances?: [ string ](name='rds_instances', description='RDS实例列表。'),
    scalingGroupId?: string(name='scaling_group_id', description='扩容组ID。'),
    scalingPolicy?: string(name='scaling_policy', description='扩容策略。'),
    securityGroupId?: string(name='security_group_id', description='节点所属安全组ID。'),
    securityGroupIds?: [ string ](name='security_group_ids', description='节点池所属安全组ID列表。'),
    spotInstancePools?: long(name='spot_instance_pools', description='指定可用实例规格的个数，伸缩组将按成本最低的多个规格均衡创建抢占式实例。取值范围：1~10。'),
    spotInstanceRemedy?: boolean(name='spot_instance_remedy', description='是否开启补齐抢占式实例。开启后，当收到抢占式实例将被回收的系统消息时，伸缩组将尝试创建新的实例，替换掉将被回收的抢占式实例。'),
    spotPriceLimit?: [ 
      {
        instanceType?: string(name='instance_type', description='抢占式实例规格。'),
        priceLimit?: string(name='price_limit', description='单台实例上限价格，单位：元/小时。'),
      }
    ](name='spot_price_limit', description='抢占式实例价格上限配置。'),
    spotStrategy?: string(name='spot_strategy', description='抢占式实例类型'),
    systemDiskCategory?: string(name='system_disk_category', description='系统盘类型'),
    systemDiskPerformanceLevel?: string(name='system_disk_performance_level', description='节点系统盘磁盘性能，只针对ESSD磁盘生效'),
    systemDiskSize?: long(name='system_disk_size', description='系统盘大小'),
    tags?: [
      Tag
    ](name='tags', description='ECS标签'),
    vswitchIds?: [ string ](name='vswitch_ids', description='虚拟交换机ID。'),
  }(name='scaling_group', description='节点池扩容组信息。'),
  status?: {
    failedNodes?: long(name='failed_nodes', description='失败节点数。'),
    healthyNodes?: long(name='healthy_nodes', description='处于健康状态节点数。'),
    initialNodes?: long(name='initial_nodes', description='正在初始化节点数。'),
    offlineNodes?: long(name='offline_nodes', description='离线节点数量。'),
    removingNodes?: long(name='removing_nodes', description='正在被移除节点数。'),
    servingNodes?: long(name='serving_nodes', description='工作节点数量。'),
    state?: string(name='state', description='节点池状态。'),
    totalNodes?: long(name='total_nodes', description='总节点数。'),
  }(name='status', description='节点池状态。'),
  teeConfig?: {
    teeEnable?: boolean(name='tee_enable', description='是否为加密计算节点池。'),
  }(name='tee_config', description='加密计算节点池信息。'),
}

model DescribeClusterNodePoolDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterNodePoolDetailResponseBody(name='body'),
}

async function describeClusterNodePoolDetail(request: DescribeClusterNodePoolDetailRequest): DescribeClusterNodePoolDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeClusterNodePoolDetail', 'GET', '/clusters/{ClusterId}/nodepools/{NodepoolId}', 'json', false, 'json', request);
}

model DescribeClusterNodePoolsRequest {
  clusterId: string(name='ClusterId', description='集群ID。', position='Path'),
}

model DescribeClusterNodePoolsResponseBody = {
  nodepools?: [ 
    {
      autoScaling?: {
        eipBandwidth?: long(name='eip_bandwidth', description='EIP带宽峰值'),
        eipInternetChargeType?: string(name='eip_internet_charge_type', description='EIP实例计费方式'),
        enable?: boolean(name='enable', description='自动伸缩'),
        isBondEip?: boolean(name='is_bond_eip', description='是否绑定EIP'),
        maxInstances?: long(name='max_instances', description='最大节点数	'),
        minInstances?: long(name='min_instances', description='最小节点数	'),
        type?: string(name='type', description='扩容组类型'),
      }(name='auto_scaling', description='自动伸缩配置详情'),
      interconnectConfig?: {
        bandwidth?: long(name='bandwidth', description='边缘增强型节点池的网络带宽，单位M'),
        ccnId?: string(name='ccn_id', description='边缘增强型节点池绑定的云连接网实例ID(CCNID)'),
        ccnRegionId?: string(name='ccn_region_id', description='边缘增强型节点池绑定的云连接网实例所属的区域'),
        cenId?: string(name='cen_id', description='边缘增强型节点池绑定的云企业网实例ID(CENID)'),
        improvedPeriod?: string(name='improved_period', description='边缘增强型节点池的购买时长，单位月'),
      }(name='interconnect_config', description='边缘节点池网络相关的配置。该值只对edge类型的节点池有意义'),
      interconnectMode?: string(name='interconnect_mode', description='边缘节点池的网络类型。basic：基础型；improved：增强型。该值只对edge类型的节点池有意义'),
      kubernetesConfig?: {
        cmsEnabled?: boolean(name='cms_enabled', description='是否开启云监控	'),
        cpuPolicy?: string(name='cpu_policy', description='CPU管理策略	'),
        labels?: [
          Tag
        ](name='labels', description='ECS标签'),
        nodeNameMode?: string(name='node_name_mode', description='自定义节点名称'),
        runtime?: string(name='runtime', description='容器运行时	'),
        runtimeVersion?: string(name='runtime_version', description='容器运行时版本	'),
        taints?: [
          Taint
        ](name='taints', description='污点配置'),
        userData?: string(name='user_data', description='节点自定义数据'),
      }(name='kubernetes_config', description='集群配置信息'),
      management?: {
        autoRepair?: boolean(name='auto_repair', description='是否启用自动修复'),
        enable?: boolean(name='enable', description='是否开启托管版节点池'),
        upgradeConfig?: {
          autoUpgrade?: boolean(name='auto_upgrade', description='是否启用自动升级，自修复'),
          maxUnavailable?: long(name='max_unavailable', description='最大不可用节点数量'),
          surge?: long(name='surge', description='额外节点数量'),
          surgePercentage?: long(name='surge_percentage', description='额外节点比例， 和surge 二选一'),
        }(name='upgrade_config', description='是否启用自动修复'),
      }(name='management', description='托管节点池配置'),
      maxNodes?: long(name='max_nodes', description='边缘节点池允许容纳的最大节点数量. 节点池内可以容纳的最大节点数量，该参数大于等于0。0表示无额外限制(仅受限于集群整体可以容纳的节点数，节点池本身无额外限制)。边缘节点池该参数值往往大于0；ess类型节点池和默认的edge类型节点池该参数值为0'),
      nodepoolInfo?: {
        created?: string(name='created', description='节点池创建时间'),
        isDefault?: boolean(name='is_default', description='是否为默认节点池'),
        name?: string(name='name', description='节点池名称'),
        nodepoolId?: string(name='nodepool_id', description='节点池ID'),
        regionId?: string(name='region_id', description='节点池所在地域ID'),
        resourceGroupId?: string(name='resource_group_id', description='资源组ID'),
        type?: string(name='type', description='节点池类型'),
        updated?: string(name='updated', description='节点池更新时间'),
      }(name='nodepool_info', description='节点池配置详情'),
      scalingGroup?: {
        autoRenew?: boolean(name='auto_renew', description='自动续费	'),
        autoRenewPeriod?: long(name='auto_renew_period', description='自动付费时长	'),
        compensateWithOnDemand?: boolean(name='compensate_with_on_demand', description='当MultiAZPolicy取值为COST_OPTIMIZED时，如果因价格、库存等原因无法创建足够的抢占式实例，是否允许自动尝试创建按量实例满足ECS实例数量要求。取值范围：true：允许。false：不允许。默认值：true'),
        dataDisks?: [
          DataDisk
        ](name='data_disks', description='数据盘配置	'),
        deploymentsetId?: string(name='deploymentset_id', description='部署集ID。'),
        desiredSize?: long(name='desired_size', description='节点池期望节点数'),
        imageId?: string(name='image_id', description='镜像ID	'),
        instanceChargeType?: string(name='instance_charge_type', description='节点付费类型	'),
        instanceTypes?: [ string ](name='instance_types', description='节点类型	'),
        internetChargeType?: string(name='internet_charge_type', description='节点公网IP网络计费类型'),
        internetMaxBandwidthOut?: long(name='internet_max_bandwidth_out', description='节点公网IP出带宽最大值，单位为Mbps（Mega bit per second），取值范围：1~100'),
        keyPair?: string(name='key_pair', description='密钥对名称，和login_password二选一。'),
        loginPassword?: string(name='login_password', description='登录密码，返回结果是加密的。'),
        multiAzPolicy?: string(name='multi_az_policy', description='多可用区伸缩组ECS实例扩缩容策略'),
        onDemandBaseCapacity?: long(name='on_demand_base_capacity', description='伸缩组所需要按量实例个数的最小值，取值范围：0~1000。当按量实例个数少于该值时，将优先创建按量实例'),
        onDemandPercentageAboveBaseCapacity?: long(name='on_demand_percentage_above_base_capacity', description='伸缩组满足最小按量实例数（OnDemandBaseCapacity）要求后，超出的实例中按量实例应占的比例，取值范围：0～100'),
        period?: long(name='period', description='包年包月时长	'),
        periodUnit?: string(name='period_unit', description='自动付费周期	'),
        platform?: string(name='platform', description='操作系统发行版。取值： CentOS，AliyunLinux，Windows，WindowsCore'),
        ramPolicy?: string(name='ram_policy', description='RAM 角色名称	'),
        rdsInstances?: [ string ](name='rds_instances', description='RDS列表	'),
        scalingGroupId?: string(name='scaling_group_id', description='扩容组ID	'),
        scalingPolicy?: string(name='scaling_policy', description='扩容节点策略	'),
        securityGroupId?: string(name='security_group_id', description='安全组ID。'),
        securityGroupIds?: [ string ](name='security_group_ids', description='安全组ID列表'),
        spotInstancePools?: long(name='spot_instance_pools', description='指定可用实例规格的个数，伸缩组将按成本最低的多个规格均衡创建抢占式实例。取值范围：1~10'),
        spotInstanceRemedy?: boolean(name='spot_instance_remedy', description='是否开启补齐抢占式实例。开启后，当收到抢占式实例将被回收的系统消息时，伸缩组将尝试创建新的实例，替换掉将被回收的抢占式实例'),
        spotPriceLimit?: [ 
          {
            instanceType?: string(name='instance_type', description='抢占式实例规格'),
            priceLimit?: string(name='price_limit', description='单台实例上限价格，单位：元/小时'),
          }
        ](name='spot_price_limit', description='抢占实例价格上限配置'),
        spotStrategy?: string(name='spot_strategy', description='抢占式实例类型'),
        systemDiskCategory?: string(name='system_disk_category', description='系统盘类型。	'),
        systemDiskPerformanceLevel?: string(name='system_disk_performance_level', description='节点系统盘磁盘性能，只针对ESSD磁盘生效'),
        systemDiskSize?: long(name='system_disk_size', description='系统盘大小	'),
        tags?: [
          Tag
        ](name='tags', description='节点标签	'),
        vswitchIds?: [ string ](name='vswitch_ids', description='虚拟交换机ID'),
      }(name='scaling_group', description='扩容组配置详情'),
      status?: {
        failedNodes?: long(name='failed_nodes', description='失败的节点数	'),
        healthyNodes?: long(name='healthy_nodes', description='处于健康状态的节点数	'),
        initialNodes?: long(name='initial_nodes', description='正在创建的节点数	'),
        offlineNodes?: long(name='offline_nodes', description='离线节点数	'),
        removingNodes?: long(name='removing_nodes', description='正在被移除的节点数'),
        servingNodes?: long(name='serving_nodes', description='正在工作节点数	'),
        state?: string(name='state', description='节点池状态	'),
        totalNodes?: long(name='total_nodes', description='节点总数	'),
      }(name='status', description='节点池状态详情'),
      teeConfig?: {
        teeEnable?: boolean(name='tee_enable', description='是否为加密计算节点池	'),
      }(name='tee_config', description='加密计算配置详情'),
    }
  ](name='nodepools', description='节点池列表'),
}

model DescribeClusterNodePoolsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterNodePoolsResponseBody(name='body'),
}

async function describeClusterNodePools(request: DescribeClusterNodePoolsRequest): DescribeClusterNodePoolsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeClusterNodePools', 'GET', '/clusters/{ClusterId}/nodepools', 'json', false, 'json', request);
}

model DescribeClusterNodesRequest {
  clusterId: string(name='ClusterId', description='集群ID。', position='Path'),
  instanceIds?: string(name='instanceIds', description='节点实例ID，按照实例ID进行过滤。  节点池ID不为空时会忽略此字段。多节点用逗号分割', position='Query'),
  nodepoolId?: string(name='nodepool_id', description='节点池ID。', position='Query'),
  pageNumber?: string(name='pageNumber', description='分页数量', position='Query'),
  pageSize?: string(name='pageSize', description='每页大小。', position='Query'),
  state?: string(name='state', description='节点状态。默认值：all。', position='Query'),
}

model DescribeClusterNodesResponseBody = {
  nodes?: [ 
    {
      creationTime?: string(name='creation_time', description='节点创建时间。'),
      errorMessage?: string(name='error_message', description='错误信息说明。'),
      expiredTime?: string(name='expired_time', description='节点过期时间。'),
      hostName?: string(name='host_name', description='节点主机名。'),
      imageId?: string(name='image_id', description='节点使用的镜像ID。'),
      instanceChargeType?: string(name='instance_charge_type', description='节点付费类型。'),
      instanceId?: string(name='instance_id', description='节点实例ID。'),
      instanceName?: string(name='instance_name', description='节点名称。'),
      instanceRole?: string(name='instance_role', description='节点实例角色类型，Master或Worker。'),
      instanceStatus?: string(name='instance_status', description='节点实例状态，'),
      instanceType?: string(name='instance_type', description='节点实例类型。'),
      instanceTypeFamily?: string(name='instance_type_family', description='节点实例所属ECS实例簇名称。'),
      ipAddress?: [ string ](name='ip_address', description='节点IP地址。'),
      isAliyunNode?: boolean(name='is_aliyun_node', description='节点是否为aliyun实例。'),
      nodeName?: string(name='node_name', description='节点名称，该名称是k8s专用名称。'),
      nodeStatus?: string(name='node_status', description='节点状态，是否Ready。'),
      nodepoolId?: string(name='nodepool_id', description='节点池ID。'),
      source?: string(name='source', description='节点通过什么方式创建出来的，例如：ROS。'),
      spotStrategy?: string(name='spot_strategy', description='抢占时实例类型'),
      state?: string(name='state', description='ECS运行状态，例如：Running。'),
    }
  ](name='nodes', description='节点信息列表。'),
  page?: {
    pageNumber?: int32(name='page_number', description='总页数。'),
    pageSize?: int32(name='page_size', description='单页展示结果数量。'),
    totalCount?: int32(name='total_count', description='结果总条数。'),
  }(name='page', description='分页信息。'),
}

model DescribeClusterNodesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterNodesResponseBody(name='body'),
}

async function describeClusterNodes(request: DescribeClusterNodesRequest): DescribeClusterNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeClusterNodes', 'GET', '/clusters/{ClusterId}/nodes', 'json', false, 'json', request);
}

model DescribeClusterResourcesRequest {
  clusterId: string(name='ClusterId', description='集群ID。', position='Path'),
}

model DescribeClusterResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: [ 
    {
      clusterId?: string(name='cluster_id', description='集群ID。'),
      created?: string(name='created', description='资源创建时间。'),
      instanceId?: string(name='instance_id', description='资源实例ID。'),
      resourceInfo?: string(name='resource_info', description='资源元信息。'),
      resourceType?: string(name='resource_type', description='资源类型。'),
      state?: string(name='state', description='资源状态。'),
      autoCreate?: long(name='auto_create', description='是否为自动创建。'),
    }
  ](name='body'),
}

async function describeClusterResources(request: DescribeClusterResourcesRequest): DescribeClusterResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeClusterResources', 'GET', '/clusters/{ClusterId}/resources', 'array', false, 'json', request);
}

model DescribeClusterTasksRequest {
  clusterId?: string(name='cluster_id', description='集群id。', position='Path'),
}

model DescribeClusterTasksResponseBody = {
  pageInfo?: {
    pageNumber?: long(name='page_number', description='页数。'),
    pageSize?: long(name='page_size', description='每页数量。'),
    totalCount?: long(name='total_count', description='结果总数。'),
  }(name='page_info', description='分页信息。'),
  requestId?: string(name='requestId', description='请求ID。'),
  tasks?: [ 
    {
      created?: string(name='created', description='创建时间。'),
      error?: {
        code?: string(name='code', description='错误码。'),
        message?: string(name='message', description='错误信息。'),
      }(name='error'),
      state?: string(name='state', description='任务状态。'),
      taskId?: string(name='task_id', description='任务ID。'),
      taskType?: string(name='task_type', description='任务类型。'),
      updated?: string(name='updated', description='更新时间。'),
    }
  ](name='tasks', description='任务数组。'),
}

model DescribeClusterTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterTasksResponseBody(name='body'),
}

async function describeClusterTasks(request: DescribeClusterTasksRequest): DescribeClusterTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeClusterTasks', 'GET', '/clusters/{cluster_id}/tasks', 'json', false, 'json', request);
}

model DescribeClusterUserKubeconfigRequest {
  clusterId: string(name='ClusterId', description='集群ID。', position='Path'),
  privateIpAddress?: boolean(name='PrivateIpAddress', description='ApiServer是否为内网地址。', position='Query'),
  temporaryDurationMinutes?: long(name='TemporaryDurationMinutes', description='临时kubeconfig有效期，单位：分钟。  最小值：15（15分钟）  最大值：4320（3天）。', position='Query'),
}

model DescribeClusterUserKubeconfigResponseBody = {
  config?: string(name='config', description='kubeconfig内容。'),
  expiration?: string(name='expiration', description='kubeconfig过期时间。格式：RFC3339 格式的 UTC 时间。'),
}

model DescribeClusterUserKubeconfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterUserKubeconfigResponseBody(name='body'),
}

async function describeClusterUserKubeconfig(request: DescribeClusterUserKubeconfigRequest): DescribeClusterUserKubeconfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeClusterUserKubeconfig', 'GET', '/k8s/{ClusterId}/user_config', 'json', false, 'json', request);
}

model DescribeClusterV2UserKubeconfigRequest {
  clusterId: string(name='ClusterId', description='集群ID。', position='Path'),
  privateIpAddress?: boolean(name='PrivateIpAddress', description='是否为内网访问。', position='Query'),
}

model DescribeClusterV2UserKubeconfigResponseBody = {
  config?: string(name='config', description='kubeconfig内容。'),
}

model DescribeClusterV2UserKubeconfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterV2UserKubeconfigResponseBody(name='body'),
}

async function describeClusterV2UserKubeconfig(request: DescribeClusterV2UserKubeconfigRequest): DescribeClusterV2UserKubeconfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeClusterV2UserKubeconfig', 'GET', '/api/v2/k8s/{ClusterId}/user_config', 'json', false, 'json', request);
}

model DescribeClustersRequest {
  clusterType?: string(name='clusterType', description='集群类型。', position='Query'),
  name?: string(name='name', description='集群名称。', position='Query'),
}

model DescribeClustersResponse = {
  headers: map[string]string(name='headers'),
  body: [ 
    {
      clusterId?: string(name='cluster_id', description='集群ID。'),
      clusterType?: string(name='cluster_type', description='集群类型。'),
      created?: string(name='created', description='集群创建时间。'),
      currentVersion?: string(name='current_version', description='集群当前版本。'),
      dataDiskCategory?: string(name='data_disk_category', description='节点系统盘类型。'),
      dataDiskSize?: long(name='data_disk_size', description='节点系统盘大小。'),
      deletionProtection?: boolean(name='deletion_protection', description='集群是否开启删除保护。'),
      dockerVersion?: string(name='docker_version', description='容器运行时版本。'),
      externalLoadbalancerId?: string(name='external_loadbalancer_id', description='集群Ingerss SLB实例的ID。'),
      initVersion?: string(name='init_version', description='集群创建时版本。'),
      masterUrl?: string(name='master_url', description='集群的endpoint地址。'),
      metaData?: string(name='meta_data', description='集群元数据。'),
      name?: string(name='name', description='集群名称。'),
      networkMode?: string(name='network_mode', description='集群使用的网络类型。'),
      privateZone?: boolean(name='private_zone', description='集群是否开启Private Zone，默认false。'),
      profile?: string(name='profile', description='集群标识，区分是否为边缘托管版。'),
      regionId?: string(name='region_id', description='集群所在地域ID。'),
      resourceGroupId?: string(name='resource_group_id', description='集群资源组ID。'),
      securityGroupId?: string(name='security_group_id', description='集群安全组ID。'),
      size?: long(name='size', description='集群内实例数量。'),
      state?: string(name='state', description='集群运行状态。'),
      subnetCidr?: string(name='subnet_cidr', description='POD网络。'),
      tags?: [ 
        {
          key?: string(name='key', description='标签名。'),
          value?: string(name='value', description='标签值。'),
        }
      ](name='tags', description='集群标签。'),
      updated?: string(name='updated', description='集群更新时间。'),
      vpcId?: string(name='vpc_id', description='集群使用的VPC ID。'),
      vswitchCidr?: string(name='vswitch_cidr', description='虚拟交换机网络ID。'),
      vswitchId?: string(name='vswitch_id', description='节点使用的Vswitch ID。'),
      workerRamRoleName?: string(name='worker_ram_role_name', description='集群Worker节点RAM角色名称。'),
      zoneId?: string(name='zone_id', description='集群所在Region内的区域ID。'),
    }
  ](name='body'),
}

async function describeClusters(request: DescribeClustersRequest): DescribeClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeClusters', 'GET', '/clusters', 'array', false, 'json', request);
}

model DescribeClustersV1Request {
  clusterSpec?: string(name='cluster_spec', description='集群规格。', position='Query'),
  clusterType?: string(name='cluster_type', description='集群类型。', position='Query'),
  name?: string(name='name', description='通过集群名称进行模糊查询。', position='Query'),
  pageNumber?: long(name='page_number', description='分页数。', position='Query'),
  pageSize?: long(name='page_size', description='单页大小。', position='Query'),
  profile?: string(name='profile', description='集群标识。', position='Query'),
  regionId?: string(name='region_id', description='地域。', position='Query'),
}

model DescribeClustersV1ResponseBody = {
  clusters?: [ 
    {
      clusterId?: string(name='cluster_id', description='集群ID。'),
      clusterSpec?: string(name='cluster_spec', description='托管版集群类型，面向托管集群。 • ack.pro.small：专业托管集群。 • ack.standard ：标准托管集群。'),
      clusterType?: string(name='cluster_type', description='集群类型。'),
      created?: string(name='created', description='集群初始化时间。'),
      currentVersion?: string(name='current_version', description='集群当前版本。'),
      deletionProtection?: boolean(name='deletion_protection', description='集群是否开启删除保护。'),
      dockerVersion?: string(name='docker_version', description='集群使用的Docker版本。'),
      externalLoadbalancerId?: string(name='external_loadbalancer_id', description='集群负载均衡服务的ID。'),
      initVersion?: string(name='init_version', description='集群初始化版本。'),
      maintenanceWindow?: MaintenanceWindow(name='maintenance_window'),
      masterUrl?: string(name='master_url', description='集群访问地址列表。'),
      metaData?: string(name='meta_data', description='集群元数据信息。'),
      name?: string(name='name', description='集群名称。'),
      networkMode?: string(name='network_mode', description='集群使用的网络类型，例如：VPC网络。'),
      nextVersion?: string(name='next_version', description='集群可升级版本。'),
      privateZone?: boolean(name='private_zone', description='集群是否开启Private Zone。'),
      profile?: string(name='profile', description='边缘集群表示，用于区分边缘托管版集群。'),
      regionId?: string(name='region_id', description='地域ID。'),
      resourceGroupId?: string(name='resource_group_id', description='集群资源组ID。'),
      securityGroupId?: string(name='security_group_id', description='集群安全组ID。'),
      size?: long(name='size', description='集群节点数。'),
      state?: string(name='state', description='集群运行状态。'),
      subnetCidr?: string(name='subnet_cidr', description='POD网段地址。'),
      tags?: [
        Tag
      ](name='tags', description='集群标签。'),
      updated?: string(name='updated', description='集群更新时间。'),
      vpcId?: string(name='vpc_id', description='集群所在的VPC ID。'),
      vswitchId?: string(name='vswitch_id', description='集群使用的虚拟交换ID。'),
      workerRamRoleName?: string(name='worker_ram_role_name', description='集群Worker RAM角色。'),
      zoneId?: string(name='zone_id', description='可用区ID。'),
    }
  ](name='clusters', description='集群详情列表。'),
  pageInfo?: {
    pageNumber?: int32(name='page_number', description='分页数。'),
    pageSize?: int32(name='page_size', description='单页大小。'),
    totalCount?: int32(name='total_count', description='结果总数。'),
  }(name='page_info', description='分页信息。'),
}

model DescribeClustersV1Response = {
  headers: map[string]string(name='headers'),
  body: DescribeClustersV1ResponseBody(name='body'),
}

async function describeClustersV1(request: DescribeClustersV1Request): DescribeClustersV1Response {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeClustersV1', 'GET', '/api/v1/clusters', 'json', false, 'json', request);
}

model DescribeEdgeMachineActiveProcessRequest {
  edgeMachineid: string(name='edge_machineid', description='edge machine id', position='Path'),
}

model DescribeEdgeMachineActiveProcessResponseBody = {
  logs?: string(name='logs', description='logs of activate'),
  progress?: long(name='progress', description='process of activate'),
  requestId?: string(name='request_id', description='Id of the request'),
  state?: string(name='state', description='state of activate'),
  step?: string(name='step', description='step of activate'),
}

model DescribeEdgeMachineActiveProcessResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEdgeMachineActiveProcessResponseBody(name='body'),
}

async function describeEdgeMachineActiveProcess(request: DescribeEdgeMachineActiveProcessRequest): DescribeEdgeMachineActiveProcessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeEdgeMachineActiveProcess', 'GET', '/edge_machines/[edge_machineid]/activeprocess', 'json', false, 'json', request);
}

model DescribeEdgeMachineModelsRequest {
}

model DescribeEdgeMachineModelsResponseBody = {
  models?: [ 
    {
      cpu?: int32(name='cpu', description='cpu'),
      cpuArch?: string(name='cpu_arch', description='cpu arch'),
      created?: string(name='created', description='created'),
      description?: string(name='description', description='description'),
      manageRuntime?: int32(name='manage_runtime', description='manage runtime'),
      memory?: int32(name='memory', description='memory'),
      model?: string(name='model', description='model'),
      modelId?: string(name='model_id', description='model id'),
    }
  ](name='models', description='Id of the request'),
}

model DescribeEdgeMachineModelsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEdgeMachineModelsResponseBody(name='body'),
}

async function describeEdgeMachineModels(request: DescribeEdgeMachineModelsRequest): DescribeEdgeMachineModelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeEdgeMachineModels', 'GET', '/edge_machines/models', 'json', false, 'json', request);
}

model DescribeEdgeMachineTunnelConfigDetailRequest {
  edgeMachineid: string(name='edge_machineid', description='edge machine id', position='Path'),
}

model DescribeEdgeMachineTunnelConfigDetailResponseBody = {
  deviceName?: string(name='device_name', description='device name'),
  model?: string(name='model', description='Id of the request'),
  productKey?: string(name='product_key', description='product key'),
  requestId?: string(name='request_id', description='request id'),
  sn?: string(name='sn', description='sn'),
  token?: string(name='token', description='token'),
  tunnelEndpoint?: string(name='tunnel_endpoint', description='tunnel endpoint'),
}

model DescribeEdgeMachineTunnelConfigDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEdgeMachineTunnelConfigDetailResponseBody(name='body'),
}

async function describeEdgeMachineTunnelConfigDetail(request: DescribeEdgeMachineTunnelConfigDetailRequest): DescribeEdgeMachineTunnelConfigDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeEdgeMachineTunnelConfigDetail', 'POST', '/edge_machines/[edge_machineid]/tunnelconfig', 'json', false, 'json', request);
}

model DescribeEdgeMachinesRequest {
  hostname?: string(name='hostname', description='host name', position='Query'),
  lifeState?: string(name='life_state', description='life state', position='Query'),
  model?: string(name='model', description='model', position='Query'),
  onlineState?: string(name='online_state', description='online state', position='Query'),
  pageNumber?: long(name='page_number', description='page number', position='Query'),
  pageSize?: long(name='page_size', description='page size', position='Query'),
}

model DescribeEdgeMachinesResponseBody = {
  edgeMachines?: [ 
    {
      activeTime?: string(name='active_time', description='actvite time'),
      created?: string(name='created', description='created time'),
      edgeMachineId?: string(name='edge_machine_id', description='edge machine id'),
      hostname?: string(name='hostname', description='hostname'),
      lifeState?: string(name='life_state', description='life state'),
      model?: string(name='model', description='model'),
      name?: string(name='name', description='name of edgemachine'),
      onlineState?: string(name='online_state', description='online state'),
      sn?: string(name='sn', description='sn'),
      updated?: string(name='updated', description='update time'),
    }
  ](name='edge_machines', description='Id of the request'),
  pageInfo?: {
    pageNumber?: int32(name='page_number', description='page number'),
    pageSize?: int32(name='page_size', description='page size'),
    totalCount?: int32(name='total_count', description='total count'),
  }(name='page_info', description='page info'),
}

model DescribeEdgeMachinesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEdgeMachinesResponseBody(name='body'),
}

async function describeEdgeMachines(request: DescribeEdgeMachinesRequest): DescribeEdgeMachinesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeEdgeMachines', 'GET', '/edge_machines', 'json', false, 'json', request);
}

model DescribeEventsRequest {
  clusterId?: string(name='cluster_id', description='集群ID', position='Query'),
  pageNumber?: long(name='page_number', description='没页记录数量', position='Query'),
  pageSize?: long(name='page_size', description='页数', position='Query'),
  type?: string(name='type', description='事件类型', position='Query'),
}

model DescribeEventsResponseBody = {
  events?: [ 
    {
      clusterId?: string(name='cluster_id', description='集群ID'),
      data?: {
        level?: string(name='level', description='事件级别'),
        message?: string(name='message', description='事件详情'),
        reason?: string(name='reason', description='事件状态'),
      }(name='data', description='事件描述'),
      eventId?: string(name='event_id', description='事件ID'),
      source?: string(name='source', description='事件源'),
      subject?: string(name='subject', description='事件'),
      time?: string(name='time', description='事件开始事件'),
      type?: string(name='type', description='事件类型'),
    }
  ](name='events'),
  pageInfo?: {
    pageNumber?: long(name='page_number', description='每页记录数量'),
    pageSize?: long(name='page_size', description='页数'),
    totalCount?: long(name='total_count', description='结果总数'),
  }(name='page_info'),
}

model DescribeEventsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEventsResponseBody(name='body'),
}

async function describeEvents(request: DescribeEventsRequest): DescribeEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeEvents', 'GET', '/events', 'json', false, 'json', request);
}

model DescribeExternalAgentRequest {
  clusterId: string(name='ClusterId', description='集群ID。', position='Path'),
  privateIpAddress?: string(name='PrivateIpAddress', description='是否获取内网访问凭据。  true：获取内网连接凭据 false：获取公网连接凭据 默认值：false。', position='Query'),
}

model DescribeExternalAgentResponseBody = {
  config?: string(name='config', description='代理配置。'),
}

model DescribeExternalAgentResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeExternalAgentResponseBody(name='body'),
}

async function describeExternalAgent(request: DescribeExternalAgentRequest): DescribeExternalAgentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeExternalAgent', 'GET', '/k8s/{ClusterId}/external/agent/deployment', 'json', false, 'json', request);
}

model DescribeKubernetesVersionMetadataRequest {
  clusterType: string(name='ClusterType', description='集群类型。', position='Query'),
  kubernetesVersion?: string(name='KubernetesVersion', description='要查询的版本，如果为空则查所有版本。', position='Query'),
  profile?: string(name='Profile', description='边缘集群标识，用于区分边缘集群，取值：Default或Edge。', position='Query'),
  region: string(name='Region', description='地域ID。', position='Query'),
  runtime?: string(name='runtime', description='运行时。', position='Query'),
}

model DescribeKubernetesVersionMetadataResponse = {
  headers: map[string]string(name='headers'),
  body: [ 
    {
      capabilities?: map[string]any(name='capabilities', description='Kubernetes版本特性。	'),
      images?: [ 
        {
          imageId?: string(name='image_id', description='镜像ID。	'),
          imageName?: string(name='image_name', description='镜像名称。	'),
          platform?: string(name='platform', description='操作系统发行版。取值范围： CentOS,AliyunLinux,Windows,WindowsCore。'),
          osVersion?: string(name='os_version', description='镜像版本。'),
          imageType?: string(name='image_type', description='镜像类型。	'),
          osType?: string(name='os_type', description='操作系统发行版本号。'),
          imageCategory?: string(name='image_category', description='镜像分类'),
        }
      ](name='images', description='ECS系统镜像列表。	'),
      metaData?: map[string]any(name='meta_data', description='Kubernetes版本元数据信息。	'),
      runtimes?: [
        Runtime
      ](name='runtimes', description='容器运行时详情。	'),
      version?: string(name='version', description='Kubernetes版本。	'),
      multiAz?: string(name='multi_az', description='是否为多可用区。'),
    }
  ](name='body'),
}

async function describeKubernetesVersionMetadata(request: DescribeKubernetesVersionMetadataRequest): DescribeKubernetesVersionMetadataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeKubernetesVersionMetadata', 'GET', '/api/v1/metadata/versions', 'array', false, 'json', request);
}

model DescribeNodePoolVulsRequest {
  clusterId: string(name='cluster_id', position='Path'),
  nodepoolId: string(name='nodepool_id', position='Path'),
}

model DescribeNodePoolVulsResponseBody = {
  vulRecords?: [ 
    {
      instanceId?: string(name='instance_id'),
      vulList?: [ 
        {
          aliasName?: string(name='alias_name'),
          cveList?: [ string ](name='cve_list'),
          name?: string(name='name'),
          necessity?: string(name='necessity'),
        }
      ](name='vul_list'),
    }
  ](name='vul_records'),
}

model DescribeNodePoolVulsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNodePoolVulsResponseBody(name='body'),
}

async function describeNodePoolVuls(request: DescribeNodePoolVulsRequest): DescribeNodePoolVulsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeNodePoolVuls', 'GET', '/clusters/{cluster_id}/nodepools/{nodepool_id}/vuls', 'json', false, 'json', request);
}

model DescribePoliciesRequest {
}

model DescribePoliciesResponse = {
  headers: map[string]string(name='headers'),
  body: map[string]any(name='body'),
}

async function describePolicies(request: DescribePoliciesRequest): DescribePoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribePolicies', 'GET', '/policies', 'json', false, 'json', request);
}

model DescribePolicyDetailsRequest {
  policyName: string(name='policy_name', description='策略治理规则名称', position='Path'),
}

model DescribePolicyDetailsResponseBody = {
  action?: string(name='action', description='规则治理动作 ● enforce: 拦截违规部署 ● inform：告警'),
  category?: string(name='category', description='规则模板类型'),
  description?: string(name='description', description='规则模板描述'),
  isDeleted?: int32(name='is_deleted', description='软删除标志：0表示未删除 1表示删除'),
  name?: string(name='name', description='策略治理规则名称'),
  noConfig?: int32(name='no_config', description='是否需要配置策略： 0表示需要参数配置 1表示无需参数配置'),
  severity?: string(name='severity', description='规则治理等级'),
  template?: string(name='template', description='规则模板详情'),
}

model DescribePolicyDetailsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePolicyDetailsResponseBody(name='body'),
}

async function describePolicyDetails(request: DescribePolicyDetailsRequest): DescribePolicyDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribePolicyDetails', 'GET', '/policies/{policy_name}', 'json', false, 'json', request);
}

model DescribePolicyGovernanceInClusterRequest {
  clusterId: string(name='cluster_id', description='目标集群ID', position='Path'),
}

model DescribePolicyGovernanceInClusterResponseBody = {
  admitLog?: {
    count?: long(name='count', description='当前查询到的日志总数'),
    log?: {
      clusterId?: string(name='cluster_id', description='目标集群ID'),
      constraintKind?: string(name='constraint_kind', description='策略类型名称'),
      msg?: string(name='msg', description='策略治理审计日志信息'),
      resourceKind?: string(name='resource_kind', description='目标资源类型'),
      resourceName?: string(name='resource_name', description='目标资源名称'),
      resourceNamespace?: string(name='resource_namespace', description='目标资源命名空间'),
    }(name='log', description='策略治理审计日志内容'),
    progress?: string(name='progress', description='查询结果的状态'),
  }(name='admit_log', description='集群当前策略治理审计日志'),
  onState?: [ 
    {
      enabledCount?: int32(name='enabled_count', description='当前开启的策略种类计数'),
      severity?: string(name='severity', description='策略治理等级'),
      total?: int32(name='total', description='该等级下策略种类总数'),
    }
  ](name='on_state', description='当前集群中开启的不同等级策略计数统计'),
  totalViolations?: {
    deny?: {
      severity?: string(name='severity', description='策略治理等级'),
      violations?: long(name='violations', description='被拦截的事件计数'),
    }(name='deny', description='被拦截的不同治理等级的违规计数统计'),
    warn?: {
      severity?: string(name='severity', description='策略治理等级'),
      violations?: long(name='violations', description='告警的事件计数'),
    }(name='warn', description='告警模式下不同治理等级的违规计数统计'),
  }(name='totalViolations', description='集群中当前被拦截和告警两种处理类型下不同治理等级的违规计数。'),
  violations?: {
    deny?: {
      policyDescription?: string(name='policyDescription', description='策略描述'),
      policyName?: string(name='policyName', description='策略名称'),
      severity?: string(name='severity', description='策略治理等级'),
      violations?: long(name='violations', description='对应规则的事件计数'),
    }(name='deny', description='被拦截的不同策略类型的审计计数'),
    warn?: {
      policyDescription?: string(name='policyDescription', description='策略描述'),
      policyName?: string(name='policyName', description='策略名称'),
      severity?: string(name='severity', description='策略治理等级'),
      violations?: long(name='violations', description='对应规则的事件计数'),
    }(name='warn', description='告警的不同策略类型审计计数'),
  }(name='violations', description='集群中针对不同策略类型的拦截和告警的审计计数统计列表'),
}

model DescribePolicyGovernanceInClusterResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePolicyGovernanceInClusterResponseBody(name='body'),
}

async function describePolicyGovernanceInCluster(request: DescribePolicyGovernanceInClusterRequest): DescribePolicyGovernanceInClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribePolicyGovernanceInCluster', 'GET', '/clusters/{cluster_id}/policygovernance', 'json', false, 'json', request);
}

model DescribePolicyInstancesRequest {
  clusterId: string(name='cluster_id', description='目标集群ID', position='Path'),
  instanceName?: string(name='instance_name', description='策略实例名称', position='Query'),
  policyName?: string(name='policy_name', description='策略类型', position='Query'),
}

model DescribePolicyInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: [ 
    {
      aliUid?: string(name='ali_uid', description='策略实例实施者UID'),
      clusterId?: string(name='cluster_id', description='目标集群ID'),
      instanceName?: string(name='instance_name', description='规则实例名称'),
      policyName?: string(name='policy_name', description='策略治理规则名称'),
      policyCategory?: string(name='policy_category', description='策略类型名称'),
      policyDescription?: string(name='policy_description', description='规则模板描述'),
      policyParameters?: string(name='policy_parameters', description='当前规则实例的配置参数'),
      policySeverity?: string(name='policy_severity', description='规则实例治理等级'),
      policyScope?: string(name='policy_scope', description='策略实例实施范围： 默认"*"代表集群所有ns 否则返回作用namespaces名称，多个namespaces以逗号分隔'),
      policyAction?: string(name='policy_action', description='规则治理动作  deny: 拦截违规部署  warn：告警'),
    }
  ](name='body'),
}

async function describePolicyInstances(request: DescribePolicyInstancesRequest): DescribePolicyInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribePolicyInstances', 'GET', '/clusters/{cluster_id}/policies', 'array', false, 'json', request);
}

model DescribePolicyInstancesStatusRequest {
  clusterId: string(name='cluster_id', description='目标集群ID', position='Path'),
}

model DescribePolicyInstancesStatusResponseBody = {
  instancesSeverityCount?: map[string]any(name='instances_severity_count'),
  policyInstances?: [ 
    {
      policyCategory?: string(name='policy_category'),
      policyDescription?: string(name='policy_description'),
      policyInstancesCount?: long(name='policy_instances_count'),
      policyName?: string(name='policy_name'),
      policySeverity?: string(name='policy_severity'),
    }
  ](name='policy_instances', description='不同策略类型下的策略实例计数列表'),
}

model DescribePolicyInstancesStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePolicyInstancesStatusResponseBody(name='body'),
}

async function describePolicyInstancesStatus(request: DescribePolicyInstancesStatusRequest): DescribePolicyInstancesStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribePolicyInstancesStatus', 'GET', '/clusters/{cluster_id}/policies/status', 'json', false, 'json', request);
}

model DescribeTaskInfoRequest {
  taskId: string(name='task_id', description='任务ID。', position='Path'),
}

model DescribeTaskInfoResponseBody = {
  clusterId?: string(name='cluster_id', description='集群ID。'),
  created?: string(name='created', description='任务创建时间。'),
  currentStage?: string(name='current_stage', description='任务当前运行阶段。'),
  error?: {
    code?: string(name='code', description='错误码。'),
    message?: string(name='message', description='错误消息。'),
  }(name='error', description='任务错误信息。'),
  events?: [ 
    {
      action?: string(name='action', description='事件动作。'),
      level?: string(name='level', description='事件等级。'),
      message?: string(name='message', description='事件消息。'),
      reason?: string(name='reason', description='事件原因。'),
      source?: string(name='source', description='事件来源。'),
      timestamp?: string(name='timestamp', description='事件生成时间。'),
    }
  ](name='events', description='任务产生的事件。'),
  parameters?: map[string]any(name='parameters', description='任务参数。'),
  stages?: [ 
    {
      endTime?: string(name='end_time', description='任务阶段结束时间。'),
      message?: string(name='message', description='任务阶段信息。'),
      outputs?: map[string]any(name='outputs', description='任务阶段输出。'),
      startTime?: string(name='start_time', description='任务阶段开始时间。'),
      state?: string(name='state', description='任务阶段状态。'),
    }
  ](name='stages', description='任务阶段。'),
  state?: string(name='state', description='任务当前状态。'),
  target?: {
    id?: string(name='id', description='任务执行对象ID。'),
    type?: string(name='type', description='任务执行对象类型。'),
  }(name='target', description='任务执行对象。'),
  taskId?: string(name='task_id', description='任务ID。'),
  taskResult?: [ 
    {
      data?: string(name='data', description='操作的资源，例如：实例ID。'),
      status?: string(name='status', description='资源的状态。'),
    }
  ](name='task_result', description='任务执行详情。'),
  taskType?: string(name='task_type', description='当前任务类型。'),
  updated?: string(name='updated', description='任务更新时间。'),
}

model DescribeTaskInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTaskInfoResponseBody(name='body'),
}

async function describeTaskInfo(request: DescribeTaskInfoRequest): DescribeTaskInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeTaskInfo', 'GET', '/tasks/{task_id}', 'json', false, 'json', request);
}

model DescribeTemplateAttributeRequest {
  templateId: string(name='TemplateId', description='模板ID。', position='Path'),
  templateType?: string(name='template_type', description='模板类型，值为创建部署模板时指定的模板类型。', position='Query'),
}

model DescribeTemplateAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: [ 
    {
      id?: string(name='id', description='编排模板ID，模板每次修改，这个ID都会改变。	'),
      acl?: string(name='acl', description='编排模板权限。取值：private，public，shared。'),
      name?: string(name='name', description='编排模板名称。	'),
      template?: string(name='template', description='编排模板内容。	'),
      templateType?: string(name='template_type', description='编排模板类型'),
      description?: string(name='description', description='编排模板描述。'),
      tags?: string(name='tags', description='部署模板的标签。'),
      templateWithHistId?: string(name='template_with_hist_id', description='编排模板ID，该ID唯一不随更新而改变。	'),
      created?: string(name='created', description='编排模板创建时间。'),
      updated?: string(name='updated', description='编排模板修改时间。	'),
    }
  ](name='body'),
}

async function describeTemplateAttribute(request: DescribeTemplateAttributeRequest): DescribeTemplateAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeTemplateAttribute', 'GET', '/templates/{TemplateId}', 'array', false, 'json', request);
}

model DescribeTemplatesRequest {
  pageNum?: long(name='page_num', description='对查询结果进行分页处理，指定返回第几页的数据。  默认值为 1', position='Query'),
  pageSize?: long(name='page_size', description='对查询结果进行分页处理，指定每页包含的数据条数。  默认值为 10', position='Query'),
  templateType: string(name='template_type', description='模板类型，部署模板类型，目前一共有2种类型，取值为：kubernetes或compose。', position='Query'),
}

model DescribeTemplatesResponseBody = {
  pageInfo?: {
    pageNumber?: long(name='page_number', description='当前页数。'),
    pageSize?: long(name='page_size', description='单页最大数据条数。'),
    totalCount?: long(name='total_count', description='结果总数。'),
  }(name='page_info', description='分页信息。'),
  templates?: [ 
    {
      acl?: string(name='acl', description='模板访问权限，取值为：private、pubilc或shared。。'),
      created?: string(name='created', description='模板创建时间。'),
      description?: string(name='description', description='模板描述信息。'),
      id?: string(name='id', description='模板ID。会模板随着更新而变化。'),
      name?: string(name='name', description='模板名称。'),
      tags?: string(name='tags', description='模板标签，如果不显式指定了，默认为模板名称。'),
      template?: string(name='template', description='模板详情。'),
      templateType?: string(name='template_type', description='部署模板类型。'),
      templateWithHistId?: string(name='template_with_hist_id', description='模板唯一ID。'),
      updated?: string(name='updated', description='模板修改时间。'),
    }
  ](name='templates', description='模板列表。'),
}

model DescribeTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTemplatesResponseBody(name='body'),
}

async function describeTemplates(request: DescribeTemplatesRequest): DescribeTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeTemplates', 'GET', '/templates', 'json', false, 'json', request);
}

model DescribeTriggerRequest {
  clusterId: string(name='cluster_id', description='集群ID', position='Path'),
  name: string(name='Name', description='应用名称。', position='Query'),
  namespace: string(name='Namespace', description='应用所属命名空间。', position='Query'),
  type?: string(name='Type', description='应用类型。', position='Query'),
  action?: string(name='action', description='触发器行为。', position='Query'),
}

model DescribeTriggerResponse = {
  headers: map[string]string(name='headers'),
  body: [ 
    {
      id?: string(name='id', description='触发器ID。'),
      name?: string(name='name', description='触发器名称。'),
      clusterId?: string(name='cluster_id', description='集群ID'),
      projectId?: string(name='project_id', description='触发器项目名称'),
      type?: string(name='type', description='触发器类型。'),
      action?: string(name='action', description='触发器行为'),
      token?: string(name='token', description='Token'),
    }
  ](name='body'),
}

async function describeTrigger(request: DescribeTriggerRequest): DescribeTriggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeTrigger', 'GET', '/clusters/[cluster_id]/triggers', 'array', false, 'json', request);
}

model DescribeUserPermissionRequest {
  uid: string(name='uid', description='RAM 用户的 UID', position='Path'),
}

model DescribeUserPermissionResponse = {
  headers: map[string]string(name='headers'),
  body: [ 
    {
      resourceId?: string(name='resource_id', description='集群访问配置'),
      resourceType?: string(name='resource_type', description='授权类型'),
      roleName?: string(name='role_name', description='自定义角色名称'),
      roleType?: string(name='role_type', description='预置的角色类型'),
      isOwner?: long(name='is_owner', description='是否为集群 owner 的授权'),
      isRamRole?: long(name='is_ram_role', description='是否为ram 角色授权'),
    }
  ](name='body'),
}

async function describeUserPermission(request: DescribeUserPermissionRequest): DescribeUserPermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeUserPermission', 'GET', '/permissions/users/{uid}', 'array', false, 'json', request);
}

model DescribeUserQuotaRequest {
}

model DescribeUserQuotaResponseBody = {
  amkClusterQuota?: long(name='amk_cluster_quota', description='托管版集群配额。'),
  askClusterQuota?: long(name='ask_cluster_quota', description='Serverless集群配额。'),
  clusterNodepoolQuota?: long(name='cluster_nodepool_quota', description='集群节点池配额。'),
  clusterQuota?: long(name='cluster_quota', description='专有版集群托管版集群的总配额。'),
  nodeQuota?: long(name='node_quota', description='单集群的节点配额。'),
}

model DescribeUserQuotaResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserQuotaResponseBody(name='body'),
}

async function describeUserQuota(request: DescribeUserQuotaRequest): DescribeUserQuotaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeUserQuota', 'GET', '/quota', 'json', false, 'json', request);
}

model DescribeWorkflowsRequest {
}

model DescribeWorkflowsResponseBody = {
  jobs?: [ 
    {
      clusterId?: string(name='cluster_id', description='集群ID。'),
      createTime?: string(name='create_time', description='工作流创建时间。'),
      jobName?: string(name='job_name', description='工作流名称。'),
    }
  ](name='jobs', description='job信息'),
}

model DescribeWorkflowsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWorkflowsResponseBody(name='body'),
}

async function describeWorkflows(request: DescribeWorkflowsRequest): DescribeWorkflowsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeWorkflows', 'GET', '/gs/workflows', 'json', false, 'json', request);
}

model EdgeClusterAddEdgeMachineRequest {
  clusterid: string(name='clusterid', description='cluster id', position='Path'),
  edgeMachineid: string(name='edge_machineid', description='edge machine id', position='Path'),
  expired?: long(name='expired', description='expired', position='Body'),
  nodepoolId: string(name='nodepool_id', description='nodepool_id', position='Body'),
  options?: string(name='options', description='options', position='Body'),
}

model EdgeClusterAddEdgeMachineResponseBody = {
  edgeMachineId?: string(name='edge_machine_id', description='edge machine id'),
  requestId?: string(name='request_id', description='Id of the request'),
}

model EdgeClusterAddEdgeMachineResponse = {
  headers: map[string]string(name='headers'),
  body: EdgeClusterAddEdgeMachineResponseBody(name='body'),
}

async function edgeClusterAddEdgeMachine(request: EdgeClusterAddEdgeMachineRequest): EdgeClusterAddEdgeMachineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'EdgeClusterAddEdgeMachine', 'POST', '/clusters/[clusterid]/attachedgemachine/[edge_machineid]', 'json', false, 'json', request);
}

model FixNodePoolVulsRequest {
  clusterId: string(name='cluster_id', description='集群ID', position='Path'),
  nodepoolId: string(name='nodepool_id', description='节点池ID', position='Path'),
  nodes?: [ string ](name='nodes', description='待修复的节点名称列表', position='Body'),
  rolloutPolicy?: {
    maxParallelism?: long(name='max_parallelism', description='轮转修复时的最大并行度'),
  }(name='rollout_policy', description='轮转修复策略', position='Body'),
  vulList?: [ string ](name='vul_list', description='待修复的漏洞名称列表', position='Body'),
}

model FixNodePoolVulsResponseBody = {
  taskId?: string(name='task_id', description='修复任务ID'),
}

model FixNodePoolVulsResponse = {
  headers: map[string]string(name='headers'),
  body: FixNodePoolVulsResponseBody(name='body'),
}

async function fixNodePoolVuls(request: FixNodePoolVulsRequest): FixNodePoolVulsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'FixNodePoolVuls', 'POST', '/clusters/{cluster_id}/nodepools/{nodepool_id}/vuls/fix', 'json', false, 'json', request);
}

model GetKubernetesTriggerRequest {
  clusterId: string(name='ClusterId', description='集群ID', position='Path'),
  name: string(name='Name', description='应用名称。', position='Query'),
  namespace: string(name='Namespace', description='应用所属命名空间。', position='Query'),
  type?: string(name='Type', description='应用类型。', position='Query'),
  action?: string(name='action', description='触发器行为。', position='Query'),
}

model GetKubernetesTriggerResponse = {
  headers: map[string]string(name='headers'),
  body: [ 
    {
      id?: string(name='id', description='触发器ID。'),
      name?: string(name='name', description='触发器名称。'),
      clusterId?: string(name='cluster_id', description='集群ID'),
      projectId?: string(name='project_id', description='触发器项目名称'),
      type?: string(name='type', description='触发器类型。'),
      action?: string(name='action', description='触发器行为'),
      token?: string(name='token', description='Token'),
    }
  ](name='body'),
}

async function getKubernetesTrigger(request: GetKubernetesTriggerRequest): GetKubernetesTriggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetKubernetesTrigger', 'GET', '/triggers/{ClusterId}', 'array', false, 'json', request);
}

model GetUpgradeStatusRequest {
  clusterId: string(name='ClusterId', description='集群ID。', position='Path'),
}

model GetUpgradeStatusResponseBody = {
  errorMessage?: string(name='error_message', description='错误信息描述。'),
  precheckReportId?: string(name='precheck_report_id', description='预检查返回ID。'),
  status?: string(name='status', description='升级状态。'),
  upgradeStep?: string(name='upgrade_step', description='升级任务执行到哪一步了。'),
  upgradeTask?: {
    message?: string(name='message', description='任务描述信息。'),
    status?: string(name='status', description='任务状态：  emptry、running、success、failed'),
  }(name='upgrade_task', description='升级任务详情。'),
}

model GetUpgradeStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetUpgradeStatusResponseBody(name='body'),
}

async function getUpgradeStatus(request: GetUpgradeStatusRequest): GetUpgradeStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetUpgradeStatus', 'GET', '/api/v2/clusters/{ClusterId}/upgrade/status', 'json', false, 'json', request);
}

model GrantPermissionsRequest {
  uid: string(name='uid', description='指定 RAM 用户的 UID', position='Path'),
  body?: [ 
    {
      cluster: string(name='cluster', description='授权目标集群id'),
      isCustom?: boolean(name='is_custom', description='该授权是否是自定义授权'),
      isRamRole?: boolean(name='is_ram_role', description='是否是 RAM 角色授权'),
      namespace?: string(name='namespace', description='命名空间名称'),
      roleName: string(name='role_name', description='预置的角色名称'),
      roleType: string(name='role_type', description='授权类型'),
    }
  ](name='body', description='请求体参数', position='Body'),
}

model GrantPermissionsResponse = {
  headers: map[string]string(name='headers'),
}

async function grantPermissions(request: GrantPermissionsRequest): GrantPermissionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GrantPermissions', 'POST', '/permissions/users/{uid}', 'none', false, 'json', request);
}

model InstallClusterAddonsRequest {
  clusterId: string(name='ClusterId', description='集群ID。', position='Path'),
  body?: [ 
    {
      config?: string(name='config', description='组件配置信息。'),
      name: string(name='name', description='组件名称。'),
      version: string(name='version', description='组件版本号。'),
    }
  ](name='body', description='Addon列表。', position='Body'),
}

model InstallClusterAddonsResponse = {
  headers: map[string]string(name='headers'),
}

async function installClusterAddons(request: InstallClusterAddonsRequest): InstallClusterAddonsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'InstallClusterAddons', 'POST', '/clusters/{ClusterId}/components/install', 'none', false, 'json', request);
}

model ListTagResourcesRequest {
  nextToken?: string(name='next_token', description='下一次查询Token。', position='Query'),
  regionId: string(name='region_id', description='地域ID', position='Query'),
  resourceIds: [ string ](name='resource_ids', description='集群ID列表。', shrink='json', position='Query'),
  resourceType: string(name='resource_type', description='资源类型，只支持Cluster', position='Query'),
  tags?: [
    Tag
  ](name='tags', description='按标签查找。', shrink='json', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='next_token', description='下一个查询开始Token，为空说明没有下一个'),
  requestId?: string(name='request_id', description='请求ID。'),
  tagResources?: {
    tagResource?: [ 
      {
        resourceId?: string(name='resource_id', description='资源ID。'),
        resourceType?: string(name='resource_type', description='资源类型。'),
        tagKey?: string(name='tag_key', description='标签key。'),
        tagValue?: string(name='tag_value', description='标签值。'),
      }
    ](name='tag_resource', description='资源标签。'),
  }(name='tag_resources', description='资源标签列表。'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTagResources', 'GET', '/tags', 'json', false, 'json', request);
}

model MigrateClusterRequest {
  clusterId: string(name='cluster_id', description='集群ID', position='Path'),
  ossBucketEndpoint?: string(name='oss_bucket_endpoint', description='bucket访问端点。', position='Body'),
  ossBucketName?: string(name='oss_bucket_name', description='bucket名称。', position='Body'),
}

model MigrateClusterResponseBody = {
  clusterId?: string(name='cluster_id', description='集群ID。'),
  requestId?: string(name='request_id', description='请求ID。'),
  taskId?: string(name='task_id', description='任务ID。'),
}

model MigrateClusterResponse = {
  headers: map[string]string(name='headers'),
  body: MigrateClusterResponseBody(name='body'),
}

async function migrateCluster(request: MigrateClusterRequest): MigrateClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'MigrateCluster', 'POST', '/clusters/{cluster_id}/migrate', 'json', false, 'json', request);
}

model ModifyClusterRequest {
  clusterId: string(name='ClusterId', description='集群ID。', position='Path'),
  apiServerEip?: boolean(name='api_server_eip', description='集群是否绑定EIP，用于公网访问API Server。 true | false', position='Body'),
  apiServerEipId?: string(name='api_server_eip_id', description='集群API Server 公网连接端点。', position='Body'),
  deletionProtection?: boolean(name='deletion_protection', description='集群是否开启删除保护。默认值false。', position='Body'),
  enableRrsa?: boolean(name='enable_rrsa', description='启用或禁用 RRSA 功能。true: 启用，false: 禁用', position='Body'),
  ingressDomainRebinding?: string(name='ingress_domain_rebinding', description='域名是否重新绑定到Ingress的SLB地址。', position='Body'),
  ingressLoadbalancerId?: string(name='ingress_loadbalancer_id', description='集群的Ingress SLB的ID。', position='Body'),
  instanceDeletionProtection?: boolean(name='instance_deletion_protection', description='实例删除保护，防止通过控制台或API误删除释放节点。', position='Body'),
  maintenanceWindow?: MaintenanceWindow(name='maintenance_window', position='Body'),
  resourceGroupId?: string(name='resource_group_id', description='集群资源组ID。', position='Body'),
}

model ModifyClusterResponseBody = {
  clusterId?: string(name='cluster_id', description='集群ID。'),
  requestId?: string(name='request_id', description='请求ID。'),
  taskId?: string(name='task_id', description='任务ID。'),
}

model ModifyClusterResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyClusterResponseBody(name='body'),
}

async function modifyCluster(request: ModifyClusterRequest): ModifyClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyCluster', 'PUT', '/api/v2/clusters/{ClusterId}', 'json', false, 'json', request);
}

model ModifyClusterAddonRequest {
  clusterId?: string(name='cluster_id', description='集群ID', position='Path'),
  componentId?: string(name='component_id', description='组件ID', position='Path'),
  config?: string(name='config', description='自定义参数设置', position='Body'),
}

model ModifyClusterAddonResponse = {
  headers: map[string]string(name='headers'),
}

async function modifyClusterAddon(request: ModifyClusterAddonRequest): ModifyClusterAddonResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyClusterAddon', 'POST', '/clusters/{cluster_id}/components/{component_id}/config', 'none', false, 'json', request);
}

model ModifyClusterConfigurationRequest {
  clusterId: string(name='ClusterId', description='集群ID。', position='Path'),
  customizeConfig?: [ 
    {
      configs?: [ 
        {
          key?: string(name='key', description='key值。'),
          value?: string(name='value', description='value值。'),
        }
      ](name='configs', description='组件配置。'),
      name?: string(name='name', description='组件名称。'),
    }
  ](name='customize_config', description='自定义配置。', position='Body'),
}

model ModifyClusterConfigurationResponse = {
  headers: map[string]string(name='headers'),
}

async function modifyClusterConfiguration(request: ModifyClusterConfigurationRequest): ModifyClusterConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyClusterConfiguration', 'PUT', '/clusters/{ClusterId}/configuration', 'none', false, 'json', request);
}

model ModifyClusterNodePoolRequest {
  clusterId: string(name='ClusterId', description='集群ID。', position='Path'),
  nodepoolId: string(name='NodepoolId', description='节点池ID。', position='Path'),
  autoScaling?: {
    eipBandwidth?: long(name='eip_bandwidth', description='带宽峰值。'),
    eipInternetChargeType?: string(name='eip_internet_charge_type', description='EIP计费类型。'),
    enable?: boolean(name='enable', description='是否开启自动伸缩。'),
    isBondEip?: boolean(name='is_bond_eip', description='是否绑定EIP。'),
    maxInstances?: long(name='max_instances', description='最大实例数。'),
    minInstances?: long(name='min_instances', description='最小实例数。'),
    type?: string(name='type', description='自动伸缩节点类型。'),
  }(name='auto_scaling', description='自动伸缩节点池配置。', position='Body'),
  kubernetesConfig?: {
    cmsEnabled?: boolean(name='cms_enabled', description='是否开启云监控。'),
    cpuPolicy?: string(name='cpu_policy', description='CPU管理策略。'),
    labels?: [
      Tag
    ](name='labels', description='节点标签。'),
    runtime?: string(name='runtime', description='容器运行时。'),
    runtimeVersion?: string(name='runtime_version', description='容器运行时版本。'),
    taints?: [
      Taint
    ](name='taints', description='污点配置。'),
    userData?: string(name='user_data', description='实例自定义数据。'),
  }(name='kubernetes_config', description='集群配置。', position='Body'),
  management?: {
    autoRepair?: boolean(name='auto_repair', description='是否开启自动修复。'),
    enable?: boolean(name='enable', description='是否启用托管节点池。'),
    upgradeConfig?: {
      autoUpgrade?: boolean(name='auto_upgrade', description='是否启用自动升级，自修复。'),
      maxUnavailable?: long(name='max_unavailable', description='最大不可用节点数量。'),
      surge?: long(name='surge', description='额外节点数量。'),
      surgePercentage?: long(name='surge_percentage', description='额外节点比例， 和surge 二选一。'),
    }(name='upgrade_config', description='自动升级配置。'),
  }(name='management', description='托管版节点池配置。', position='Body'),
  nodepoolInfo?: {
    name?: string(name='name', description='节点池名称。'),
    resourceGroupId?: string(name='resource_group_id', description='资源组ID。'),
  }(name='nodepool_info', description='节点池配置。', position='Body'),
  scalingGroup?: {
    autoRenew?: boolean(name='auto_renew', description='节点池节点是启用自动续费'),
    autoRenewPeriod?: long(name='auto_renew_period', description='节点池节点自动续费周期'),
    compensateWithOnDemand?: boolean(name='compensate_with_on_demand', description='当MultiAZPolicy取值为COST_OPTIMIZED时，如果因价格、库存等原因无法创建足够的抢占式实例，是否允许自动尝试创建按量实例满足ECS实例数量要求。取值范围：true：允许。false：不允许。默认值：true'),
    dataDisks?: [
      DataDisk
    ](name='data_disks', description='数据盘配置。'),
    desiredSize?: long(name='desired_size', description='节点池期望节点数'),
    imageId?: string(name='image_id', description='自定义镜像'),
    instanceChargeType?: string(name='instance_charge_type', description='节点付费类型。'),
    instanceTypes?: [ string ](name='instance_types', description='节点实例规格。'),
    internetChargeType?: string(name='internet_charge_type', description='节点公网IP网络计费类型'),
    internetMaxBandwidthOut?: long(name='internet_max_bandwidth_out', description='节点公网IP出带宽最大值，单位为Mbps（Mega bit per second），取值范围：1~100'),
    keyPair?: string(name='key_pair', description='密钥对名称，和login_password二选一。'),
    loginPassword?: string(name='login_password', description='SSH登录密码，和key_pari二选一。'),
    multiAzPolicy?: string(name='multi_az_policy', description='多可用区伸缩组ECS实例扩缩容策略'),
    onDemandBaseCapacity?: long(name='on_demand_base_capacity', description='伸缩组所需要按量实例个数的最小值，取值范围：0~1000。当按量实例个数少于该值时，将优先创建按量实例。'),
    onDemandPercentageAboveBaseCapacity?: long(name='on_demand_percentage_above_base_capacity', description='伸缩组满足最小按量实例数（OnDemandBaseCapacity）要求后，超出的实例中按量实例应占的比例，取值范围：0～100。'),
    period?: long(name='period', description='包年包月时长'),
    periodUnit?: string(name='period_unit', description='付费周期'),
    platform?: string(name='platform', description='操作系统发行版。'),
    rdsInstances?: [ string ](name='rds_instances', description='RDS实例列表。'),
    scalingPolicy?: string(name='scaling_policy', description='扩容策略。'),
    spotInstancePools?: long(name='spot_instance_pools', description='指定可用实例规格的个数，伸缩组将按成本最低的多个规格均衡创建抢占式实例。取值范围：1~10。'),
    spotInstanceRemedy?: boolean(name='spot_instance_remedy', description='是否开启补齐抢占式实例。开启后，当收到抢占式实例将被回收的系统消息时，伸缩组将尝试创建新的实例，替换掉将被回收的抢占式实例。'),
    spotPriceLimit?: [ 
      {
        instanceType?: string(name='instance_type', description='抢占式实例规格'),
        priceLimit?: string(name='price_limit', description='单台实例上限价格，单位：元/小时。'),
      }
    ](name='spot_price_limit', description='抢占实例价格上限配置'),
    spotStrategy?: string(name='spot_strategy', description='抢占式实例类型'),
    systemDiskCategory?: string(name='system_disk_category', description='节点系统盘类型。'),
    systemDiskPerformanceLevel?: string(name='system_disk_performance_level', description='节点系统盘磁盘性能，只针对ESSD磁盘生效'),
    systemDiskSize?: long(name='system_disk_size', description='节点系统盘大小。'),
    tags?: [
      Tag
    ](name='tags', description='ECS标签。'),
    vswitchIds?: [ string ](name='vswitch_ids', description='节点使用的虚拟交换机ID。'),
  }(name='scaling_group', description='扩容组配置。', position='Body'),
  teeConfig?: {
    teeEnable?: boolean(name='tee_enable', description='是否为加密计算节点池。'),
  }(name='tee_config', description='加密计算配置。', position='Body'),
  updateNodes?: boolean(name='update_nodes', description='是否同步更新节点标签及污点。', position='Body'),
}

model ModifyClusterNodePoolResponseBody = {
  nodepoolId?: string(name='nodepool_id', description='节点池ID。'),
  taskId?: string(name='task_id', description='任务ID。'),
}

model ModifyClusterNodePoolResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyClusterNodePoolResponseBody(name='body'),
}

async function modifyClusterNodePool(request: ModifyClusterNodePoolRequest): ModifyClusterNodePoolResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyClusterNodePool', 'PUT', '/clusters/{ClusterId}/nodepools/{NodepoolId}', 'json', false, 'json', request);
}

model ModifyClusterTagsRequest {
  clusterId: string(name='ClusterId', description='汲取ID', position='Path'),
  body?: [
    Tag
  ](name='body', description='集群标签列表。', position='Body'),
}

model ModifyClusterTagsResponse = {
  headers: map[string]string(name='headers'),
}

async function modifyClusterTags(request: ModifyClusterTagsRequest): ModifyClusterTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyClusterTags', 'POST', '/clusters/{ClusterId}/tags', 'none', false, 'json', request);
}

model ModifyNodePoolNodeConfigRequest {
  clusterId: string(name='ClusterId', description='集群ID。', position='Path'),
  nodepoolId: string(name='NodepoolId', description='节点池ID。', position='Path'),
  kubeletConfig?: {
    cpuManagerPolicy?: string(name='cpuManagerPolicy', description='CPU管理器策略。'),
    eventBurst?: long(name='eventBurst', description='事件记录的个数的突发峰值上限。'),
    eventRecordQPS?: long(name='eventRecordQPS', description='每秒可生成的事件数量。'),
    evictionHard?: map[string]any(name='evictionHard', description='触发Pod驱逐操作的一组硬性门限。'),
    evictionSoft?: map[string]any(name='evictionSoft', description='设置一组驱逐阈值。'),
    evictionSoftGracePeriod?: map[string]any(name='evictionSoftGracePeriod', description='设置一组驱逐宽限期。'),
    kubeAPIBurst?: long(name='kubeAPIBurst', description='每秒发送到API Server的突发请求数量上限。'),
    kubeAPIQPS?: long(name='kubeAPIQPS', description='与API Server通信的每秒查询个数。'),
    kubeReserved?: map[string]any(name='kubeReserved', description='kubernetes系统预留的资源配置。'),
    registryBurst?: long(name='registryBurst', description='突发性镜像拉取的个数上限。'),
    registryPullQPS?: long(name='registryPullQPS', description='镜像仓库的QPS上限。'),
    serializeImagePulls?: boolean(name='serializeImagePulls', description='是否逐一拉取镜像。'),
    systemReserved?: map[string]any(name='systemReserved', description='系统预留的资源配置。'),
  }(name='kubelet_config', description='Kubelet参数配置。', position='Body'),
  rollingPolicy?: {
    maxParallelism?: long(name='max_parallelism', description='最大不可用节点数。'),
  }(name='rolling_policy', description='轮转配置。', position='Body'),
}

model ModifyNodePoolNodeConfigResponseBody = {
  nodepoolId?: string(name='nodepool_id', description='节点池ID。'),
  requestId?: string(name='request_id', description='请求ID。'),
  taskId?: string(name='task_id', description='任务ID。'),
}

model ModifyNodePoolNodeConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyNodePoolNodeConfigResponseBody(name='body'),
}

async function modifyNodePoolNodeConfig(request: ModifyNodePoolNodeConfigRequest): ModifyNodePoolNodeConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyNodePoolNodeConfig', 'PUT', '/clusters/{ClusterId}/nodepools/{NodepoolId}/node_config', 'json', false, 'json', request);
}

model ModifyPolicyInstanceRequest {
  clusterId: string(name='cluster_id', description='目标集群id', position='Path'),
  policyName: string(name='policy_name', description='策略治理规则名称', position='Path'),
  action?: string(name='action', description='规则治理动作', position='Body'),
  instanceName?: string(name='instance_name', description='策略规则实例id', position='Body'),
  namespaces?: [ string ](name='namespaces', description='限制策略实施的命名空间，为空时表示所有命名空间', position='Body'),
  parameters?: map[string]any(name='parameters', description='当前规则实例的配置参数', position='Body'),
}

model ModifyPolicyInstanceResponseBody = {
  instances?: [ string ](name='instances'),
}

model ModifyPolicyInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyPolicyInstanceResponseBody(name='body'),
}

async function modifyPolicyInstance(request: ModifyPolicyInstanceRequest): ModifyPolicyInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyPolicyInstance', 'PUT', '/clusters/{cluster_id}/policies/{policy_name}', 'json', false, 'json', request);
}

model OpenAckServiceRequest {
  type?: string(name='type', description='要开通的服务类型', position='Query'),
}

model OpenAckServiceResponseBody = {
  orderId?: string(name='order_id', description='开通服务的订单号。'),
  requestId?: string(name='request_id', description='请求ID'),
}

model OpenAckServiceResponse = {
  headers: map[string]string(name='headers'),
  body: OpenAckServiceResponseBody(name='body'),
}

async function openAckService(request: OpenAckServiceRequest): OpenAckServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'OpenAckService', 'POST', '/service/open', 'json', false, 'json', request);
}

model PauseClusterUpgradeRequest {
  clusterId: string(name='ClusterId', description='集群ID。', position='Path'),
}

model PauseClusterUpgradeResponse = {
  headers: map[string]string(name='headers'),
}

async function pauseClusterUpgrade(request: PauseClusterUpgradeRequest): PauseClusterUpgradeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PauseClusterUpgrade', 'POST', '/api/v2/clusters/{ClusterId}/upgrade/pause', 'none', false, 'json', request);
}

model PauseComponentUpgradeRequest {
  clusterid: string(name='clusterid', description='集群ID。', position='Path'),
  componentid: string(name='componentid', description='组件ID。', position='Path'),
}

model PauseComponentUpgradeResponse = {
  headers: map[string]string(name='headers'),
}

async function pauseComponentUpgrade(request: PauseComponentUpgradeRequest): PauseComponentUpgradeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PauseComponentUpgrade', 'POST', '/clusters/{clusterid}/components/{componentid}/pause', 'none', false, 'json', request);
}

model PauseTaskRequest {
  taskId: string(name='task_id', position='Path'),
}

model PauseTaskResponse = {
  headers: map[string]string(name='headers'),
}

async function pauseTask(request: PauseTaskRequest): PauseTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PauseTask', 'POST', '/tasks/{task_id}/pause', 'none', false, 'json', request);
}

model RemoveClusterNodesRequest {
  clusterId: string(name='ClusterId', description='集群ID。', position='Path'),
  drainNode?: boolean(name='drain_node', description='是否排空节点上的Pod。', position='Body'),
  nodes: [ string ](name='nodes', description='要移除的Node列表。', position='Body'),
  releaseNode?: boolean(name='release_node', description='是否同时释放ECS。', position='Body'),
}

model RemoveClusterNodesResponse = {
  headers: map[string]string(name='headers'),
}

async function removeClusterNodes(request: RemoveClusterNodesRequest): RemoveClusterNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RemoveClusterNodes', 'POST', '/api/v2/clusters/{ClusterId}/nodes/remove', 'none', false, 'json', request);
}

model RemoveWorkflowRequest {
  workflowName: string(name='workflowName', description='工作流名称。', position='Path'),
}

model RemoveWorkflowResponse = {
  headers: map[string]string(name='headers'),
}

async function removeWorkflow(request: RemoveWorkflowRequest): RemoveWorkflowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RemoveWorkflow', 'DELETE', '/gs/workflow/{workflowName}', 'none', false, 'json', request);
}

model RepairClusterNodePoolRequest {
  clusterId: string(name='cluster_id', description='集群ID', position='Path'),
  nodepoolId: string(name='nodepool_id', description='节点池ID', position='Path'),
  nodes?: [ string ](name='nodes', description='节点列表，如果不指定则表示当前节点池内所有节点', position='Body'),
}

model RepairClusterNodePoolResponseBody = {
  requestId?: string(name='request_id', description='请求ID'),
  taskId?: string(name='task_id', description='任务ID'),
}

model RepairClusterNodePoolResponse = {
  headers: map[string]string(name='headers'),
  body: RepairClusterNodePoolResponseBody(name='body'),
}

async function repairClusterNodePool(request: RepairClusterNodePoolRequest): RepairClusterNodePoolResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RepairClusterNodePool', 'POST', '/clusters/{cluster_id}/nodepools/{nodepool_id}/repair', 'json', false, 'json', request);
}

model ResumeComponentUpgradeRequest {
  clusterid: string(name='clusterid', description='集群ID。', position='Path'),
  componentid: string(name='componentid', description='组件ID。', position='Path'),
}

model ResumeComponentUpgradeResponse = {
  headers: map[string]string(name='headers'),
}

async function resumeComponentUpgrade(request: ResumeComponentUpgradeRequest): ResumeComponentUpgradeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ResumeComponentUpgrade', 'POST', '/clusters/{clusterid}/components/{componentid}/resume', 'none', false, 'json', request);
}

model ResumeTaskRequest {
  taskId: string(name='task_id', position='Path'),
}

model ResumeTaskResponse = {
  headers: map[string]string(name='headers'),
}

async function resumeTask(request: ResumeTaskRequest): ResumeTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ResumeTask', 'POST', '/tasks/{task_id}/resume', 'none', false, 'json', request);
}

model ResumeUpgradeClusterRequest {
  clusterId: string(name='ClusterId', description='集群ID。', position='Path'),
}

model ResumeUpgradeClusterResponse = {
  headers: map[string]string(name='headers'),
}

async function resumeUpgradeCluster(request: ResumeUpgradeClusterRequest): ResumeUpgradeClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ResumeUpgradeCluster', 'POST', '/api/v2/clusters/{ClusterId}/upgrade/resume', 'none', false, 'json', request);
}

model ScaleClusterRequest {
  clusterId: string(name='ClusterId', description='集群ID。', position='Path'),
  cloudMonitorFlags?: boolean(name='cloud_monitor_flags', description='节点是否安装云监控插件。', position='Body'),
  count?: long(name='count', description='扩容节点数。', position='Body'),
  cpuPolicy?: string(name='cpu_policy', description='节点CPU策略。', position='Body'),
  disableRollback?: boolean(name='disable_rollback', description='失败是否回滚。', position='Body'),
  keyPair?: string(name='key_pair', description='keypair名称，和login_password二选一。', position='Body'),
  loginPassword?: string(name='login_password', description='SSH登录密码。和keypair二选一。', position='Body'),
  tags?: [ 
    {
      key?: string(name='key', description='标签值。'),
    }
  ](name='tags', description='集群标签。', position='Body'),
  taints?: [ 
    {
      effect?: string(name='effect', description='污点生效策略。'),
      key?: string(name='key', description='污点键。'),
      value?: string(name='value', description='污点值。'),
    }
  ](name='taints', description='节点污点标记。', position='Body'),
  vswitchIds?: [ string ](name='vswitch_ids', description='节点交换机ID列表。', position='Body'),
  workerAutoRenew?: boolean(name='worker_auto_renew', description='节点是否开启Worker节点自动续费。', position='Body'),
  workerAutoRenewPeriod?: long(name='worker_auto_renew_period', description='自动续费周期。', position='Body'),
  workerDataDisk?: boolean(name='worker_data_disk', description='是否挂载数据盘。', position='Body'),
  workerDataDisks?: [ 
    {
      category?: string(name='category', description='数据盘类型。'),
      encrypted?: string(name='encrypted', description='是否对数据盘加密。'),
      size?: string(name='size', description='数据盘大小。'),
    }
  ](name='worker_data_disks', description='Worker数据盘类型、大小等配置的组合。', position='Body'),
  workerInstanceChargeType?: string(name='worker_instance_charge_type', description='节点付费类型。', position='Body'),
  workerInstanceTypes?: [ string ](name='worker_instance_types', description='Worker节点ECS规格类型。', position='Body'),
  workerPeriod?: long(name='worker_period', description='节点包年包月时长。', position='Body'),
  workerPeriodUnit?: string(name='worker_period_unit', description='当指定为PrePaid的时候需要指定周期。', position='Body'),
  workerSystemDiskCategory?: string(name='worker_system_disk_category', description='节点系统盘类型。', position='Body'),
  workerSystemDiskSize?: long(name='worker_system_disk_size', description='节点系统盘大小', position='Body'),
}

model ScaleClusterResponseBody = {
  clusterId?: string(name='cluster_id', description='集群ID。'),
  requestId?: string(name='request_id', description='请求ID。'),
  taskId?: string(name='task_id', description='任务ID。'),
}

model ScaleClusterResponse = {
  headers: map[string]string(name='headers'),
  body: ScaleClusterResponseBody(name='body'),
}

async function scaleCluster(request: ScaleClusterRequest): ScaleClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ScaleCluster', 'PUT', '/clusters/{ClusterId}', 'json', false, 'json', request);
}

model ScaleClusterNodePoolRequest {
  clusterId: string(name='ClusterId', description='集群ID', position='Path'),
  nodepoolId: string(name='NodepoolId', description='节点池ID', position='Path'),
  count?: long(name='count', description='扩容节点数量', position='Body'),
}

model ScaleClusterNodePoolResponseBody = {
  taskId?: string(name='task_id', description='任务ID。'),
}

model ScaleClusterNodePoolResponse = {
  headers: map[string]string(name='headers'),
  body: ScaleClusterNodePoolResponseBody(name='body'),
}

async function scaleClusterNodePool(request: ScaleClusterNodePoolRequest): ScaleClusterNodePoolResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ScaleClusterNodePool', 'POST', '/clusters/{ClusterId}/nodepools/{NodepoolId}', 'json', false, 'json', request);
}

model ScaleOutClusterRequest {
  clusterId: string(name='ClusterId', description='扩容目标集群的集群ID。', position='Path'),
  cloudMonitorFlags?: boolean(name='cloud_monitor_flags', description='在节点上安装云监控', position='Body'),
  count: long(name='count', description='扩容节点数', position='Body'),
  cpuPolicy?: string(name='cpu_policy', description='CPU亲和性策略', position='Body'),
  imageId?: string(name='image_id', description='自定义镜像', position='Body'),
  keyPair: string(name='key_pair', description='keypair名称，和login_password二选一。', position='Body'),
  loginPassword: string(name='login_password', description='SSH登录密码，和key_pair二选一。', position='Body'),
  rdsInstances?: [ string ](name='rds_instances', description='RDS白名单', position='Body'),
  runtime?: Runtime(name='runtime', position='Body'),
  tags?: [
    Tag
  ](name='tags', description='节点标签', position='Body'),
  taints?: [
    Taint
  ](name='taints', description='节点污点信息', position='Body'),
  userData?: string(name='user_data', description='节点自定义数据', position='Body'),
  vswitchIds: [ string ](name='vswitch_ids', description='虚拟交换机', position='Body'),
  workerAutoRenew?: boolean(name='worker_auto_renew', description='Worker节点到期是否自动续费', position='Body'),
  workerAutoRenewPeriod?: long(name='worker_auto_renew_period', description='Worker节点自动续费时长', position='Body'),
  workerDataDisks?: [ 
    {
      autoSnapshotPolicyId?: string(name='auto_snapshot_policy_id', description='自动快照策略ID，云盘会按照快照策略自动备份。'),
      category?: string(name='category', description='数据盘类型,默认值：cloud_efficiency'),
      encrypted?: string(name='encrypted', description='是否对数据盘加密'),
      size?: string(name='size', description='数据盘大小，单位为GiB。  取值范围：[40,32768]'),
    }
  ](name='worker_data_disks', description='Worker节点数据盘配置', position='Body'),
  workerInstanceChargeType?: string(name='worker_instance_charge_type', description='Worker节点付费类型', position='Body'),
  workerInstanceTypes: [ string ](name='worker_instance_types', description='Worker节点实例规格', position='Body'),
  workerPeriod?: long(name='worker_period', description='Worker节点包年包月时长', position='Body'),
  workerPeriodUnit?: string(name='worker_period_unit', description='Worker节点包年包月周期', position='Body'),
  workerSystemDiskCategory: string(name='worker_system_disk_category', description='Worker节点系统盘类型', position='Body'),
  workerSystemDiskSize: long(name='worker_system_disk_size', description='Worker节点系统盘大小', position='Body'),
}

model ScaleOutClusterResponseBody = {
  clusterId?: string(name='cluster_id', description='集群ID。'),
  requestId?: string(name='request_id', description='请求ID。'),
  taskId?: string(name='task_id', description='任务ID。'),
}

model ScaleOutClusterResponse = {
  headers: map[string]string(name='headers'),
  body: ScaleOutClusterResponseBody(name='body'),
}

async function scaleOutCluster(request: ScaleOutClusterRequest): ScaleOutClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ScaleOutCluster', 'POST', '/api/v2/clusters/{ClusterId}', 'json', false, 'json', request);
}

model StartWorkflowRequest {
  mappingBamOutFilename?: string(name='mapping_bam_out_filename', description='bam文件输出名称。', position='Body'),
  mappingBamOutPath?: string(name='mapping_bam_out_path', description='bam文件输出路径。', position='Body'),
  mappingBucketName?: string(name='mapping_bucket_name', description='存放mapping的bucket名称。', position='Body'),
  mappingFastqFirstFilename?: string(name='mapping_fastq_first_filename', description='mapping的第一个fastq文件名。', position='Body'),
  mappingFastqPath?: string(name='mapping_fastq_path', description='mapping的fastq文件路径。', position='Body'),
  mappingFastqSecondFilename?: string(name='mapping_fastq_second_filename', description='mapping的第二个fastq文件名。', position='Body'),
  mappingIsMarkDup?: string(name='mapping_is_mark_dup', description='是否进行dup。', position='Body'),
  mappingOssRegion?: string(name='mapping_oss_region', description='mapping oss数据的存放region。', position='Body'),
  mappingReferencePath?: string(name='mapping_reference_path', description='mapping的reference文件位置。', position='Body'),
  service?: string(name='service', description='SLA类型，可选值：s、g、p。 白银级（s）：超过90 Gbp的部分，按1.5 Gbp/min计算增加的时间。 黄金级（g）：超过90 Gbp的部分，按2 Gbp/min计算增加的时间。 铂金级（p）：超过90 Gbp的部分，按3 Gbp/min计算增加的时间。', position='Body'),
  wgsBucketName?: string(name='wgs_bucket_name', description='存放wgs的bucket名称。', position='Body'),
  wgsFastqFirstFilename?: string(name='wgs_fastq_first_filename', description='wgs的第一个fastq文件名。', position='Body'),
  wgsFastqPath?: string(name='wgs_fastq_path', description='wgs的fastq文件路径。', position='Body'),
  wgsFastqSecondFilename?: string(name='wgs_fastq_second_filename', description='wgs的第二个fastq文件名。', position='Body'),
  wgsOssRegion?: string(name='wgs_oss_region', description='wgs oss数据的存放region。', position='Body'),
  wgsReferencePath?: string(name='wgs_reference_path', description='wgs的reference文件路径。', position='Body'),
  wgsVcfOutFilename?: string(name='wgs_vcf_out_filename', description='wgs的vcf输出文件名称。', position='Body'),
  wgsVcfOutPath?: string(name='wgs_vcf_out_path', description='wgs的vcf输出路径。', position='Body'),
  workflowType: string(name='workflow_type', description='工作流类型，可选值：wgs或mapping。', position='Body'),
}

model StartWorkflowResponseBody = {
  jobName?: string(name='JobName', description='工作流名称'),
}

model StartWorkflowResponse = {
  headers: map[string]string(name='headers'),
  body: StartWorkflowResponseBody(name='body'),
}

async function startWorkflow(request: StartWorkflowRequest): StartWorkflowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartWorkflow', 'POST', '/gs/workflow', 'json', false, 'json', request);
}

model TagResourcesRequest {
  regionId: string(name='region_id', description='资源所属的地域ID', position='Body'),
  resourceIds: [ string ](name='resource_ids', description='资源ID列表', position='Body'),
  resourceType: string(name='resource_type', description='资源类型定义。取值范围：  只支持CLUSTER这一种资源类型', position='Body'),
  tags: [
    Tag
  ](name='tags', description='资源的标签键值对。数组长度范围：1~20。一旦传值，则不允许为空字符串。最多支持128个字符，不能以aliyun和acs:开头，不能包含http://或者https://。', position='Body'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='请求id。'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'TagResources', 'PUT', '/tags', 'json', false, 'json', request);
}

model UnInstallClusterAddonsRequest {
  clusterId: string(name='ClusterId', description='集群ID。', position='Path'),
  addons?: [ 
    {
      name?: string(name='name', description='组件名称。'),
    }
  ](name='addons', description='卸载组件列表。', position='Body'),
}

model UnInstallClusterAddonsResponse = {
  headers: map[string]string(name='headers'),
}

async function unInstallClusterAddons(request: UnInstallClusterAddonsRequest): UnInstallClusterAddonsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UnInstallClusterAddons', 'POST', '/clusters/{ClusterId}/components/uninstall', 'none', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='all', description='是否删除全部自定义标签，仅当tag_keys为空时生效，取值：[true,false]。', position='Query'),
  regionId: string(name='region_id', description='资源所属的地域ID', position='Query'),
  resourceIds: [ string ](name='resource_ids', description='资源ID。数组长度取值范围为：1~50', position='Query'),
  resourceType: string(name='resource_type', description='资源类型定义。取值范围： 只支持CLUSTER这一种资源类型', position='Query'),
  tagKeys: [ string ](name='tag_keys', description='资源的标签键。N的取值范围：1~20', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='请求id。'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UntagResources', 'DELETE', '/tags', 'json', false, 'json', request);
}

model UpdateContactGroupForAlertRequest {
  clusterId?: string(name='ClusterId', position='Path'),
}

model UpdateContactGroupForAlertResponse = {
  headers: map[string]string(name='headers'),
}

async function updateContactGroupForAlert(request: UpdateContactGroupForAlertRequest): UpdateContactGroupForAlertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateContactGroupForAlert', 'POST', '/alert/{ClusterId}/alert_rule/contact_groups', 'none', false, 'json', request);
}

model UpdateK8sClusterUserConfigExpireRequest {
  clusterId: string(name='ClusterId', description='集群id', position='Path'),
  expireHour: long(name='expire_hour', description='kubeconfig过期小时', minimum=0, maximum=87600, position='Body'),
  user: string(name='user', description='指定用户id', position='Body'),
}

model UpdateK8sClusterUserConfigExpireResponse = {
  headers: map[string]string(name='headers'),
}

async function updateK8sClusterUserConfigExpire(request: UpdateK8sClusterUserConfigExpireRequest): UpdateK8sClusterUserConfigExpireResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateK8sClusterUserConfigExpire', 'POST', '/k8s/{ClusterId}/user_config/expire', 'none', false, 'json', request);
}

model UpdateTemplateRequest {
  templateId: string(name='TemplateId', description='部署模板ID。', position='Path'),
  description?: string(name='description', description='部署模板描述信息。', position='Body'),
  name?: string(name='name', description='部署模板名称。', position='Body'),
  tags?: string(name='tags', description='部署模板标签', position='Body'),
  template?: string(name='template', description='部署模板yaml。', position='Body'),
  templateType?: string(name='template_type', description='部署模板类型。', position='Body'),
}

model UpdateTemplateResponse = {
  headers: map[string]string(name='headers'),
}

async function updateTemplate(request: UpdateTemplateRequest): UpdateTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateTemplate', 'PUT', '/templates/{TemplateId}', 'none', false, 'json', request);
}

model UpgradeClusterRequest {
  clusterId: string(name='ClusterId', description='集群ID。', position='Path'),
  componentName?: string(name='component_name', description='组件名称，集群升级时取值"k8s"。', position='Body'),
  nextVersion?: string(name='next_version', description='目标版本。', position='Body'),
  version?: string(name='version', description='当前版本。', position='Body'),
}

model UpgradeClusterResponse = {
  headers: map[string]string(name='headers'),
}

async function upgradeCluster(request: UpgradeClusterRequest): UpgradeClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpgradeCluster', 'POST', '/api/v2/clusters/{ClusterId}/upgrade', 'none', false, 'json', request);
}

model UpgradeClusterAddonsRequest {
  clusterId: string(name='ClusterId', description='集群ID', position='Path'),
  body?: [ 
    {
      componentName: string(name='component_name', description='组件名称'),
      config?: string(name='config', description='组件自定义参数'),
      nextVersion: string(name='next_version', description='可升级版本'),
      version?: string(name='version', description='当前版本'),
    }
  ](name='body', description='Request body，类型是对象数组', position='Body'),
}

model UpgradeClusterAddonsResponse = {
  headers: map[string]string(name='headers'),
}

async function upgradeClusterAddons(request: UpgradeClusterAddonsRequest): UpgradeClusterAddonsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpgradeClusterAddons', 'POST', '/clusters/{ClusterId}/components/upgrade', 'none', false, 'json', request);
}

model StandardComponentsValue = {
  name?: string(name='name', description='组件名称。'),
  version?: string(name='version', description='组件版本。'),
  description?: string(name='description', description='组件描述信息。'),
  required?: string(name='required', description='是否为必需组件。'),
  disabled?: boolean(name='disabled', description='是否禁止默认安装。'),
}

