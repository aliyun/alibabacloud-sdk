/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'modelService';
  @version = '2022-06-14';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model GetMonthAmountRequest {
  sceneType: string(name='SceneType', position='Query'),
}

model GetMonthAmountResponseBody = {
  backgroundAmount?: int32(name='BackgroundAmount'),
  postpayAmount?: int32(name='PostpayAmount'),
  prepayAmount?: int32(name='PrepayAmount'),
  requestId?: string(name='RequestId'),
  totalAmount?: int32(name='TotalAmount'),
}

model GetMonthAmountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMonthAmountResponseBody(name='body'),
}

async function getMonthAmount(request: GetMonthAmountRequest): GetMonthAmountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetMonthAmount', 'GET', '/api/v1/statistics/month/amount', 'json', false, 'json', request);
}

model GetUserRequest {
  sceneType?: string(name='SceneType', example='image_label', position='Query'),
}

model GetUserResponseBody = {
  appId?: string(name='AppId', example='20200425******'),
  code?: string(name='Code', example='OK'),
  host?: string(name='Host', example='ai-service.******.alicontainer.com'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='897658D5-1FB8-5CFA-A030-727CCAE59EB0'),
  token?: string(name='Token', example='Njk0Njk******'),
}

model GetUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserResponseBody(name='body'),
}

async function getUser(request: GetUserRequest): GetUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetUser', 'GET', '/api/v1/user/info', 'json', false, 'json', request);
}

model ListDayAmountRequest {
  endTime?: string(name='EndTime', position='Query'),
  sceneType?: string(name='SceneType', example='sales_pick', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model ListDayAmountResponseBody = {
  dayAmounts?: [ 
    {
      amount?: int32(name='Amount'),
      date?: string(name='Date'),
    }
  ](name='DayAmounts'),
  requestId?: string(name='RequestId'),
}

model ListDayAmountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDayAmountResponseBody(name='body'),
}

async function listDayAmount(request: ListDayAmountRequest): ListDayAmountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDayAmount', 'GET', '/api/v1/statistics/day/amount', 'json', false, 'json', request);
}

model ListRechargeBillsRequest {
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  sceneType?: string(name='SceneType', example='sales_pick', position='Query'),
}

model ListRechargeBillsResponseBody = {
  instanseInfos?: [ 
    {
      currTimes?: int32(name='CurrTimes'),
      gmtEndTime?: string(name='GmtEndTime'),
      initTimes?: int32(name='InitTimes'),
      instanceId?: string(name='InstanceId'),
      source?: string(name='Source'),
    }
  ](name='InstanseInfos'),
  requestId?: string(name='RequestId'),
  residueAmount?: int32(name='ResidueAmount'),
  totalCount?: int32(name='TotalCount'),
}

model ListRechargeBillsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRechargeBillsResponseBody(name='body'),
}

async function listRechargeBills(request: ListRechargeBillsRequest): ListRechargeBillsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRechargeBills', 'GET', '/api/v1/statistics/rechargebills', 'json', false, 'json', request);
}

