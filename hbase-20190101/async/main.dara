/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'HBase';
  @version = '2019-01-01';
  @endpointRule = 'regional';
  @endpointMap = {
    'ap-northeast-2-pop' = 'hbase.aliyuncs.com',
    'ap-south-1' = 'hbase.aliyuncs.com',
    'ap-southeast-2' = 'hbase.aliyuncs.com',
    'cn-beijing-finance-1' = 'hbase.aliyuncs.com',
    'cn-beijing-finance-pop' = 'hbase.aliyuncs.com',
    'cn-beijing-gov-1' = 'hbase.aliyuncs.com',
    'cn-beijing-nu16-b01' = 'hbase.aliyuncs.com',
    'cn-edge-1' = 'hbase.aliyuncs.com',
    'cn-fujian' = 'hbase.aliyuncs.com',
    'cn-haidian-cm12-c01' = 'hbase.aliyuncs.com',
    'cn-hangzhou-bj-b01' = 'hbase.aliyuncs.com',
    'cn-hangzhou-internal-prod-1' = 'hbase.aliyuncs.com',
    'cn-hangzhou-internal-test-1' = 'hbase.aliyuncs.com',
    'cn-hangzhou-internal-test-2' = 'hbase.aliyuncs.com',
    'cn-hangzhou-internal-test-3' = 'hbase.aliyuncs.com',
    'cn-hangzhou-test-306' = 'hbase.aliyuncs.com',
    'cn-hongkong-finance-pop' = 'hbase.aliyuncs.com',
    'cn-qingdao-nebula' = 'hbase.aliyuncs.com',
    'cn-shanghai-et15-b01' = 'hbase.aliyuncs.com',
    'cn-shanghai-et2-b01' = 'hbase.aliyuncs.com',
    'cn-shanghai-inner' = 'hbase.aliyuncs.com',
    'cn-shanghai-internal-test-1' = 'hbase.aliyuncs.com',
    'cn-shenzhen-inner' = 'hbase.aliyuncs.com',
    'cn-shenzhen-st4-d01' = 'hbase.aliyuncs.com',
    'cn-shenzhen-su18-b01' = 'hbase.aliyuncs.com',
    'cn-wuhan' = 'hbase.aliyuncs.com',
    'cn-wulanchabu' = 'hbase.aliyuncs.com',
    'cn-yushanfang' = 'hbase.aliyuncs.com',
    'cn-zhangbei' = 'hbase.aliyuncs.com',
    'cn-zhangbei-na61-b01' = 'hbase.aliyuncs.com',
    'cn-zhangjiakou-na62-a01' = 'hbase.aliyuncs.com',
    'cn-zhengzhou-nebula-1' = 'hbase.aliyuncs.com',
    'eu-west-1-oxs' = 'hbase.aliyuncs.com',
    'rus-west-1-pop' = 'hbase.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AddUserHdfsInfoRequest {
  clientToken?: string(name='ClientToken', example='ETnLKlblzczshOTUbOCz****', position='Query'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='hb-bp16o0pd5****582s', position='Query'),
  extInfo: string(name='ExtInfo', description='This parameter is required.', example='{"dfs.nameservices":"hdfs_test","dfs.ha.namenodes":"nn1,nn2","dfs.namenode.http-address.hdfs_test.nn1":"TEST-xxx1.com:50070","dfs.namenode.http-address.hdfs_test.nn2":"TEST-xxx2.com:50070","dfs.namenode.rpc-address.hdfs_test.nn1":"TEST-xxx1.com:8020","dfs.namenode.rpc-address.hdfs_test.nn2":"TEST-xxx2.com:8020"}', position='Query'),
}

model AddUserHdfsInfoResponseBody = {
  requestId?: string(name='RequestId', example='FB0B7918-198C-46A8-AB9B-FE15403B1F0A'),
}

model AddUserHdfsInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddUserHdfsInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddUserHdfsInfo  AddUserHdfsInfoRequest
  * @return AddUserHdfsInfoResponse
 */
async function addUserHdfsInfo(request: AddUserHdfsInfoRequest): AddUserHdfsInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddUserHdfsInfo', 'POST', '/', 'json', false, 'json', request);
}

model AllocatePublicNetworkAddressRequest {
  clientToken?: string(name='ClientToken', example='83b2b5e117a5b8bce0fae88d90576a84_6452320_82718582', position='Query'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='hb-t4naqsay5gn******', position='Query'),
}

model AllocatePublicNetworkAddressResponseBody = {
  requestId?: string(name='RequestId'),
}

model AllocatePublicNetworkAddressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AllocatePublicNetworkAddressResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AllocatePublicNetworkAddress  AllocatePublicNetworkAddressRequest
  * @return AllocatePublicNetworkAddressResponse
 */
async function allocatePublicNetworkAddress(request: AllocatePublicNetworkAddressRequest): AllocatePublicNetworkAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AllocatePublicNetworkAddress', 'POST', '/', 'json', false, 'json', request);
}

model CancelActiveOperationTasksRequest {
  ids: string(name='Ids', description='This parameter is required.', example='11111,22222', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model CancelActiveOperationTasksResponseBody = {
  ids?: string(name='Ids', example='11111,22222'),
  requestId?: string(name='RequestId', example='AE4F6C34-065F-45AA-F5BN-4B8D816F6305'),
}

model CancelActiveOperationTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelActiveOperationTasksResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CancelActiveOperationTasks  CancelActiveOperationTasksRequest
  * @return CancelActiveOperationTasksResponse
 */
async function cancelActiveOperationTasks(request: CancelActiveOperationTasksRequest): CancelActiveOperationTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelActiveOperationTasks', 'POST', '/', 'json', false, 'json', request);
}

model CheckComponentsVersionRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='hb-t4naqsay5gn****', position='Query'),
  components: string(name='Components', description='This parameter is required.', example='HBASE,HADOOP', position='Query'),
}

model CheckComponentsVersionResponseBody = {
  components?: {
    component?: [ 
    {
      component?: string(name='Component', example='HBASE'),
      isLatestVersion?: string(name='IsLatestVersion', example='true'),
    }
  ](name='Component')
  }(name='Components'),
  requestId?: string(name='RequestId', example='E3537EB4-1100-41CA-A147-C74CCC8BB12C'),
}

model CheckComponentsVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckComponentsVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckComponentsVersion  CheckComponentsVersionRequest
  * @return CheckComponentsVersionResponse
 */
async function checkComponentsVersion(request: CheckComponentsVersionRequest): CheckComponentsVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckComponentsVersion', 'POST', '/', 'json', false, 'json', request);
}

model CloseBackupRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='hb-t4naqsay5gn****', position='Query'),
}

model CloseBackupResponseBody = {
  requestId?: string(name='RequestId', example='F1A11940-0C34-4385-864F-A01E29B55F6A'),
}

model CloseBackupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CloseBackupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CloseBackup  CloseBackupRequest
  * @return CloseBackupResponse
 */
async function closeBackup(request: CloseBackupRequest): CloseBackupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CloseBackup', 'POST', '/', 'json', false, 'json', request);
}

model ConvertInstanceRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='hb-bp16o0pd52e3y****', position='Query'),
  duration?: int32(name='Duration', example='7', position='Query'),
  payType?: string(name='PayType', example='Prepaid', position='Query'),
  pricingCycle?: string(name='PricingCycle', example='month', position='Query'),
}

model ConvertInstanceResponseBody = {
  orderId?: long(name='OrderId', example='54124548879'),
  requestId?: string(name='RequestId', example='50373857-C47B-4B64-9332-D0B5280B59EA'),
}

model ConvertInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConvertInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ConvertInstance  ConvertInstanceRequest
  * @return ConvertInstanceResponse
 */
async function convertInstance(request: ConvertInstanceRequest): ConvertInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConvertInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreateAccountRequest {
  accountName: string(name='AccountName', description='This parameter is required.', example='test01', position='Query'),
  accountPassword: string(name='AccountPassword', description='This parameter is required.', example='**********', position='Query'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='ld-bp150tns0sjxs****', position='Query'),
}

model CreateAccountResponseBody = {
  requestId?: string(name='RequestId', example='50373857-C47B-4B64-9332-D0B5280B59EA'),
}

model CreateAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAccountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateAccount  CreateAccountRequest
  * @return CreateAccountResponse
 */
async function createAccount(request: CreateAccountRequest): CreateAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAccount', 'POST', '/', 'json', false, 'json', request);
}

model CreateBackupPlanRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='ld-wz94lbcqc****4x93', position='Query'),
}

model CreateBackupPlanResponseBody = {
  requestId?: string(name='RequestId', example='50373857-C47B-4B64-9332-D0B5280B59EA'),
}

model CreateBackupPlanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateBackupPlanResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateBackupPlan  CreateBackupPlanRequest
  * @return CreateBackupPlanResponse
 */
async function createBackupPlan(request: CreateBackupPlanRequest): CreateBackupPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateBackupPlan', 'POST', '/', 'json', false, 'json', request);
}

model CreateClusterRequest {
  autoRenewPeriod?: int32(name='AutoRenewPeriod', example='2', position='Query'),
  clientToken?: string(name='ClientToken', example='ETnLKlblzczshOTUbOCz****', position='Query'),
  clusterName?: string(name='ClusterName', example='hbase_test', position='Query'),
  coldStorageSize?: int32(name='ColdStorageSize', example='1024', position='Query'),
  coreInstanceType: string(name='CoreInstanceType', description='This parameter is required.', example='hbase.sn1.medium', position='Query'),
  diskSize?: int32(name='DiskSize', example='400', position='Query'),
  diskType?: string(name='DiskType', example='cloud_ssd', position='Query'),
  encryptionKey?: string(name='EncryptionKey', example='0d2470df-da7b-4786-b981-9a164dae****', position='Query'),
  engine: string(name='Engine', description='This parameter is required.', example='hbase', position='Query'),
  engineVersion: string(name='EngineVersion', description='This parameter is required.', example='2.0', position='Query'),
  masterInstanceType?: string(name='MasterInstanceType', example='hbase.sn1.medium', position='Query'),
  nodeCount: int32(name='NodeCount', description='This parameter is required.', example='2', position='Query'),
  payType: string(name='PayType', description='This parameter is required.', example='Prepaid', position='Query'),
  period?: int32(name='Period', example='6', position='Query'),
  periodUnit?: string(name='PeriodUnit', example='month', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-j4d53glb3****', position='Query'),
  securityIPList?: string(name='SecurityIPList', example='116.62.XX.XX/24', position='Query'),
  vSwitchId?: string(name='VSwitchId', example='vsw-bp191otqj1ssyl****', position='Query'),
  vpcId?: string(name='VpcId', example='vpc-bp120k6ixs4eog****', position='Query'),
  zoneId: string(name='ZoneId', description='This parameter is required.', example='cn-hangzhou-f', position='Query'),
}

model CreateClusterResponseBody = {
  clusterId?: string(name='ClusterId', example='hb-bp1hy2sjf8gd****'),
  orderId?: string(name='OrderId', example='23232069786****'),
  requestId?: string(name='RequestId', example='3E19E345-101D-4014-946C-A205'),
}

model CreateClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateClusterResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateCluster  CreateClusterRequest
  * @return CreateClusterResponse
 */
async function createCluster(request: CreateClusterRequest): CreateClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCluster', 'POST', '/', 'json', false, 'json', request);
}

model CreateGlobalResourceRequest {
  clientToken?: string(name='ClientToken', example='xxxxx-xxxxx-xxxxx', position='Query'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='hb-t4naqsay5gn****', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceName: string(name='ResourceName', description='This parameter is required.', example='PubPhoenixSLBQueryServerVip', position='Query'),
  resourceType: string(name='ResourceType', description='This parameter is required.', example='GLOBAL_VIP', position='Query'),
}

model CreateGlobalResourceResponseBody = {
  requestId?: string(name='RequestId', example='1AB9ABDF-7E1E-44AD-8610-70A005115DD1'),
}

model CreateGlobalResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateGlobalResourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateGlobalResource  CreateGlobalResourceRequest
  * @return CreateGlobalResourceResponse
 */
async function createGlobalResource(request: CreateGlobalResourceRequest): CreateGlobalResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateGlobalResource', 'POST', '/', 'json', false, 'json', request);
}

model CreateHBaseSlbServerRequest {
  clientToken?: string(name='ClientToken', example='xxxxx-xxxxx-xxxxx', position='Query'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='hb-t4naqsay5gn****', position='Query'),
  slbServer: string(name='SlbServer', description='This parameter is required.', example='thrift', position='Query'),
}

model CreateHBaseSlbServerResponseBody = {
  requestId?: string(name='RequestId', example='61FC5B21-87B0-41BC-9686-9DA395EB40B6'),
}

model CreateHBaseSlbServerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateHBaseSlbServerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateHBaseSlbServer  CreateHBaseSlbServerRequest
  * @return CreateHBaseSlbServerResponse
 */
async function createHBaseSlbServer(request: CreateHBaseSlbServerRequest): CreateHBaseSlbServerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateHBaseSlbServer', 'POST', '/', 'json', false, 'json', request);
}

model CreateHbaseHaSlbRequest {
  bdsId: string(name='BdsId', description='This parameter is required.', example='bds-t4n3496whj23****', position='Query'),
  clientToken?: string(name='ClientToken', example='ETnLKlblzczshOTUbOCz****', position='Query'),
  haId: string(name='HaId', description='This parameter is required.', example='ha-v21tmnxjwh2yu****', position='Query'),
  haTypes: string(name='HaTypes', description='This parameter is required.', example='thrift', position='Query'),
  hbaseType: string(name='HbaseType', description='This parameter is required.', example='Active', position='Query'),
}

model CreateHbaseHaSlbResponseBody = {
  requestId?: string(name='RequestId', example='C9D568D9-A59C-4AF2-8FBB-F086A841D58E'),
}

model CreateHbaseHaSlbResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateHbaseHaSlbResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateHbaseHaSlb  CreateHbaseHaSlbRequest
  * @return CreateHbaseHaSlbResponse
 */
async function createHbaseHaSlb(request: CreateHbaseHaSlbRequest): CreateHbaseHaSlbResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateHbaseHaSlb', 'POST', '/', 'json', false, 'json', request);
}

model CreateMultiZoneClusterRequest {
  arbiterVSwitchId: string(name='ArbiterVSwitchId', description='This parameter is required.', example='vsw-hangxzhouxb*****', position='Query'),
  arbiterZoneId: string(name='ArbiterZoneId', description='This parameter is required.', example='cn-hangzhou-b', position='Query'),
  archVersion: string(name='ArchVersion', description='This parameter is required.', example='2.0', position='Query'),
  autoRenewPeriod?: int32(name='AutoRenewPeriod', example='0', position='Query'),
  clientToken?: string(name='ClientToken', example='dfh3sf5gslfksfk****', position='Query'),
  clusterName?: string(name='ClusterName', example='hbaseue_test', position='Query'),
  coreDiskSize: int32(name='CoreDiskSize', description='This parameter is required.', example='400', position='Query'),
  coreDiskType: string(name='CoreDiskType', description='This parameter is required.', example='cloud_ssd', position='Query'),
  coreInstanceType: string(name='CoreInstanceType', description='This parameter is required.', example='hbase.sn1.medium', position='Query'),
  coreNodeCount: int32(name='CoreNodeCount', description='This parameter is required.', example='4', position='Query'),
  engine: string(name='Engine', description='This parameter is required.', example='hbaseue', position='Query'),
  engineVersion: string(name='EngineVersion', description='This parameter is required.', example='2.0', position='Query'),
  logDiskSize: int32(name='LogDiskSize', description='This parameter is required.', example='400', position='Query'),
  logDiskType: string(name='LogDiskType', description='This parameter is required.', example='cloud_ssd', position='Query'),
  logInstanceType: string(name='LogInstanceType', description='This parameter is required.', example='hbase.sn1.medium', position='Query'),
  logNodeCount: int32(name='LogNodeCount', description='This parameter is required.', example='4', position='Query'),
  masterInstanceType: string(name='MasterInstanceType', description='This parameter is required.', example='hbase.sn1.medium', position='Query'),
  multiZoneCombination: string(name='MultiZoneCombination', description='This parameter is required.', example='cn-hangzhou-bef-aliyun-com', position='Query'),
  payType: string(name='PayType', description='This parameter is required.', example='Postpaid', position='Query'),
  period?: int32(name='Period', example='1', position='Query'),
  periodUnit?: string(name='PeriodUnit', example='month', position='Query'),
  primaryVSwitchId: string(name='PrimaryVSwitchId', description='This parameter is required.', example='vsw-hangxzhouxe****', position='Query'),
  primaryZoneId: string(name='PrimaryZoneId', description='This parameter is required.', example='cn-hangzhou-e', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-gg3f4f5d5g5w****', position='Query'),
  securityIPList?: string(name='SecurityIPList', example='127.0.0.1', position='Query'),
  standbyVSwitchId: string(name='StandbyVSwitchId', description='This parameter is required.', example='vsw-hangxzhouxf****', position='Query'),
  standbyZoneId: string(name='StandbyZoneId', description='This parameter is required.', example='cn-hangzhou-f', position='Query'),
  vpcId: string(name='VpcId', description='This parameter is required.', example='vpc-bp120k6ixs4eog****', position='Query'),
}

model CreateMultiZoneClusterResponseBody = {
  clusterId?: string(name='ClusterId', example='ld-t4nn71xa0yn56****'),
  orderId?: string(name='OrderId', example='23232453****'),
  requestId?: string(name='RequestId', example='7F68E8F5-0377-4CF8-8B1D-FFFD6F5804D5'),
}

model CreateMultiZoneClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMultiZoneClusterResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateMultiZoneCluster  CreateMultiZoneClusterRequest
  * @return CreateMultiZoneClusterResponse
 */
async function createMultiZoneCluster(request: CreateMultiZoneClusterRequest): CreateMultiZoneClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMultiZoneCluster', 'POST', '/', 'json', false, 'json', request);
}

model CreateRestorePlanRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='ld-bp150tns0sjxs****', position='Query'),
  restoreAllTable: boolean(name='RestoreAllTable', description='This parameter is required.', example='false', position='Query'),
  restoreByCopy: boolean(name='RestoreByCopy', description='This parameter is required.', example='true', position='Query'),
  restoreToDate: string(name='RestoreToDate', description='This parameter is required.', example='2020-11-05T05:49:42Z', position='Query'),
  tables?: string(name='Tables', example='test_ns:test_table/test_ns:test_table2', position='Query'),
  targetClusterId: string(name='TargetClusterId', description='This parameter is required.', example='ld-bp169l540vc6c****', position='Query'),
}

model CreateRestorePlanResponseBody = {
  requestId?: string(name='RequestId', example='A0598673-EB6E-4F6D-9961-E0F2012090C0'),
}

model CreateRestorePlanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRestorePlanResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateRestorePlan  CreateRestorePlanRequest
  * @return CreateRestorePlanResponse
 */
async function createRestorePlan(request: CreateRestorePlanRequest): CreateRestorePlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRestorePlan', 'POST', '/', 'json', false, 'json', request);
}

model CreateServerlessClusterRequest {
  autoRenewPeriod?: int32(name='AutoRenewPeriod', example='2', minimum=0, maximum=36, position='Query'),
  clientToken?: string(name='ClientToken', example='ETnLKlblzczshOTUbOCz****', position='Query'),
  clientType?: string(name='ClientType', example='xx', position='Query'),
  clusterName?: string(name='ClusterName', example='serverless-name', position='Query'),
  diskType?: string(name='DiskType', example='cloud_ssd', position='Query'),
  engine?: string(name='Engine', example='serverlesshbase', position='Query'),
  engineVersion?: string(name='EngineVersion', example='2.0', position='Query'),
  payType: string(name='PayType', description='This parameter is required.', example='Prepaid', position='Query'),
  period?: int32(name='Period', example='6', minimum=0, maximum=60, position='Query'),
  periodUnit?: string(name='PeriodUnit', example='month', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-j4d53glb3****', position='Query'),
  serverlessCapability?: int32(name='ServerlessCapability', example='1000', minimum=50, maximum=20000, position='Query'),
  serverlessSpec?: string(name='ServerlessSpec', example='serverless.small', position='Query'),
  serverlessStorage?: int32(name='ServerlessStorage', example='100', minimum=10, maximum=20000, position='Query'),
  vSwitchId?: string(name='VSwitchId', example='vsw-bp191ipotqj1ssyl*****', position='Query'),
  vpcId?: string(name='VpcId', example='vpc-bp120k6ixs4eog****', position='Query'),
  zoneId: string(name='ZoneId', description='This parameter is required.', example='cn-hangzhou-f', position='Query'),
}

model CreateServerlessClusterResponseBody = {
  clusterId?: string(name='ClusterId', example='sh-bp1a969y7681****'),
  orderId?: string(name='OrderId', example='23232453233*****'),
  passWord?: string(name='PassWord', example='*********'),
  requestId?: string(name='RequestId', example='3E19E345-101D-4014-946C-************'),
}

model CreateServerlessClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateServerlessClusterResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateServerlessCluster  CreateServerlessClusterRequest
  * @return CreateServerlessClusterResponse
 */
async function createServerlessCluster(request: CreateServerlessClusterRequest): CreateServerlessClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateServerlessCluster', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAccountRequest {
  accountName: string(name='AccountName', description='This parameter is required.', example='test01', position='Query'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='ld-bp150tns0sjxs****', position='Query'),
}

model DeleteAccountResponseBody = {
  requestId?: string(name='RequestId', example='729CB2A7-3065-53A9-B27C-7033CA4881D9'),
}

model DeleteAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAccountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteAccount  DeleteAccountRequest
  * @return DeleteAccountResponse
 */
async function deleteAccount(request: DeleteAccountRequest): DeleteAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAccount', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGlobalResourceRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='hb-t4naqsay5gn******', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceName: string(name='ResourceName', description='This parameter is required.', example='PubPhoenixSLBQueryServerVip', position='Query'),
  resourceType: string(name='ResourceType', description='This parameter is required.', example='GLOBAL_VIP', position='Query'),
}

model DeleteGlobalResourceResponseBody = {
  requestId?: string(name='RequestId', example='BD0B0B9A-79E8-4FDD-9C51-93443490B784'),
}

model DeleteGlobalResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteGlobalResourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteGlobalResource  DeleteGlobalResourceRequest
  * @return DeleteGlobalResourceResponse
 */
async function deleteGlobalResource(request: DeleteGlobalResourceRequest): DeleteGlobalResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGlobalResource', 'POST', '/', 'json', false, 'json', request);
}

model DeleteHBaseHaDBRequest {
  bdsId: string(name='BdsId', description='This parameter is required.', example='bds-bp14112fd7g52s1****', position='Query'),
  haId: string(name='HaId', description='This parameter is required.', example='ha-sw2o0l01s4r76****', position='Query'),
}

model DeleteHBaseHaDBResponseBody = {
  requestId?: string(name='RequestId', example='B409CF51-E01F-4551-BE40-123678FA9026'),
}

model DeleteHBaseHaDBResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteHBaseHaDBResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteHBaseHaDB  DeleteHBaseHaDBRequest
  * @return DeleteHBaseHaDBResponse
 */
async function deleteHBaseHaDB(request: DeleteHBaseHaDBRequest): DeleteHBaseHaDBResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteHBaseHaDB', 'POST', '/', 'json', false, 'json', request);
}

model DeleteHBaseSlbServerRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='hb-t4naqsay5gn****', position='Query'),
  slbServer: string(name='SlbServer', description='This parameter is required.', example='thrift', position='Query'),
}

model DeleteHBaseSlbServerResponseBody = {
  requestId?: string(name='RequestId', example='7242130A-82CF-49BF-AB32-30DCB819EBA6'),
}

model DeleteHBaseSlbServerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteHBaseSlbServerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteHBaseSlbServer  DeleteHBaseSlbServerRequest
  * @return DeleteHBaseSlbServerResponse
 */
async function deleteHBaseSlbServer(request: DeleteHBaseSlbServerRequest): DeleteHBaseSlbServerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteHBaseSlbServer', 'POST', '/', 'json', false, 'json', request);
}

model DeleteHbaseHaSlbRequest {
  bdsId: string(name='BdsId', description='This parameter is required.', example='bds-t4n3496whj23ia4k', position='Query'),
  haId: string(name='HaId', description='This parameter is required.', example='ha-v21tmnxjwh2yuy1il', position='Query'),
  haTypes: string(name='HaTypes', description='This parameter is required.', example='thrift', position='Query'),
}

model DeleteHbaseHaSlbResponseBody = {
  requestId?: string(name='RequestId', example='C9D568D9-A59C-4AF2-8FBB-F086A841D58E'),
}

model DeleteHbaseHaSlbResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteHbaseHaSlbResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteHbaseHaSlb  DeleteHbaseHaSlbRequest
  * @return DeleteHbaseHaSlbResponse
 */
async function deleteHbaseHaSlb(request: DeleteHbaseHaSlbRequest): DeleteHbaseHaSlbResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteHbaseHaSlb', 'POST', '/', 'json', false, 'json', request);
}

model DeleteInstanceRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='hb-bp16o0pd52e3y****', position='Query'),
  immediateDeleteFlag?: boolean(name='ImmediateDeleteFlag', example='false', position='Query'),
}

model DeleteInstanceResponseBody = {
  requestId?: string(name='RequestId', example='50373857-C47B-4B64-9332-D0B5280B59EA'),
}

model DeleteInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteInstance  DeleteInstanceRequest
  * @return DeleteInstanceResponse
 */
async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteInstance', 'POST', '/', 'json', false, 'json', request);
}

model DeleteMultiZoneClusterRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='d-t4nn71xa0yn56****', position='Query'),
  immediateDeleteFlag?: boolean(name='ImmediateDeleteFlag', example='false', position='Query'),
}

model DeleteMultiZoneClusterResponseBody = {
  requestId?: string(name='RequestId', example='169A3910-A39E-4BC2-AA9F-E7AD8D473527'),
}

model DeleteMultiZoneClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMultiZoneClusterResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteMultiZoneCluster  DeleteMultiZoneClusterRequest
  * @return DeleteMultiZoneClusterResponse
 */
async function deleteMultiZoneCluster(request: DeleteMultiZoneClusterRequest): DeleteMultiZoneClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteMultiZoneCluster', 'POST', '/', 'json', false, 'json', request);
}

model DeleteServerlessClusterRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='sh-bp1pj13wh9****', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-shenzhen', position='Query'),
  zoneId: string(name='ZoneId', description='This parameter is required.', example='cn-shenzhen-e', position='Query'),
}

model DeleteServerlessClusterResponseBody = {
  requestId?: string(name='RequestId', example='46950E74-59C4-4E3E-9B38-A33B*********'),
}

model DeleteServerlessClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteServerlessClusterResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteServerlessCluster  DeleteServerlessClusterRequest
  * @return DeleteServerlessClusterResponse
 */
async function deleteServerlessCluster(request: DeleteServerlessClusterRequest): DeleteServerlessClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteServerlessCluster', 'POST', '/', 'json', false, 'json', request);
}

model DeleteUserHdfsInfoRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='hb-bp16o0pd52e3y****', position='Query'),
  nameService: string(name='NameService', description='This parameter is required.', example='hdfs_test', position='Query'),
}

model DeleteUserHdfsInfoResponseBody = {
  requestId?: string(name='RequestId', example='50373857-C47B-4B64-9332-D0B5280B59EA'),
}

model DeleteUserHdfsInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteUserHdfsInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteUserHdfsInfo  DeleteUserHdfsInfoRequest
  * @return DeleteUserHdfsInfoResponse
 */
async function deleteUserHdfsInfo(request: DeleteUserHdfsInfoRequest): DeleteUserHdfsInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUserHdfsInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAccountsRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='ld-bp1uoihlf82e8****', position='Query'),
}

model DescribeAccountsResponseBody = {
  accounts?: {
    account?: [ string ](name='account')
  }(name='Accounts'),
  requestId?: string(name='RequestId', example='F744E939-D08D-5623-82C8-9D1F9F7685D1'),
}

model DescribeAccountsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAccountsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAccounts  DescribeAccountsRequest
  * @return DescribeAccountsResponse
 */
async function describeAccounts(request: DescribeAccountsRequest): DescribeAccountsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAccounts', 'POST', '/', 'json', false, 'json', request);
}

model DescribeActiveOperationTaskTypeRequest {
  regionId?: string(name='RegionId', position='Host'),
  isHistory?: int32(name='IsHistory', example='0', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeActiveOperationTaskTypeResponseBody = {
  requestId?: string(name='RequestId', example='EC7E27FC-58F8-4722-89CF-D1B6B0971956'),
  typeList?: [ 
    {
      count?: int32(name='Count', example='1'),
      taskType?: string(name='TaskType', example='rds_apsaradb_upgrade'),
      taskTypeInfoEn?: string(name='TaskTypeInfoEn', example='rds_apsaradb_upgrade'),
      taskTypeInfoZh?: string(name='TaskTypeInfoZh'),
    }
  ](name='TypeList'),
}

model DescribeActiveOperationTaskTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeActiveOperationTaskTypeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeActiveOperationTaskType  DescribeActiveOperationTaskTypeRequest
  * @return DescribeActiveOperationTaskTypeResponse
 */
async function describeActiveOperationTaskType(request: DescribeActiveOperationTaskTypeRequest): DescribeActiveOperationTaskTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeActiveOperationTaskType', 'POST', '/', 'json', false, 'json', request);
}

model DescribeActiveOperationTasksRequest {
  allowCancel?: int32(name='AllowCancel', example='1', position='Query'),
  allowChange?: int32(name='AllowChange', example='1', position='Query'),
  changeLevel?: string(name='ChangeLevel', example='S1', position='Query'),
  dbType?: string(name='DbType', example='hbaseue', position='Query'),
  insName?: string(name='InsName', example='ld-bp150tns0sjxs****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', example='30', minimum=10, maximum=100, position='Query'),
  productId?: string(name='ProductId', example='hbase', position='Query'),
  region?: string(name='Region', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  status?: int32(name='Status', example='5', position='Query'),
  taskType?: string(name='TaskType', example='rds_apsaradb_upgrade', position='Query'),
}

model DescribeActiveOperationTasksResponseBody = {
  items?: [ 
    {
      allowCancel?: string(name='AllowCancel', example='1'),
      allowChange?: string(name='AllowChange', example='1'),
      changeLevel?: string(name='ChangeLevel', example='all'),
      changeLevelEn?: string(name='ChangeLevelEn', example='Risk repairment'),
      changeLevelZh?: string(name='ChangeLevelZh'),
      createdTime?: string(name='CreatedTime', example='2022-02-15 23:59:59'),
      currentAVZ?: string(name='CurrentAVZ', example='cn-shanghai-et-a'),
      dbType?: string(name='DbType', example='hbaseue'),
      dbVersion?: string(name='DbVersion', example='2.0'),
      deadline?: string(name='Deadline', example='2022-02-19 23:59:59'),
      id?: int32(name='Id', example='111111'),
      impactEn?: string(name='ImpactEn', example='Transient instance disconnection'),
      impactZh?: string(name='ImpactZh'),
      insComment?: string(name='InsComment', example='--'),
      insName?: string(name='InsName', example='ld-bp150tns0sjxs****'),
      modifiedTime?: string(name='ModifiedTime', example='2022-02-19 14:00:00'),
      prepareInterval?: string(name='PrepareInterval', example='14:00:00'),
      region?: string(name='Region', example='cn-hanghzou'),
      resultInfo?: string(name='ResultInfo', example='--'),
      startTime?: string(name='StartTime', example='2022-02-19 10:00:00'),
      status?: int32(name='Status', example='5'),
      subInsNames?: [ string ](name='SubInsNames'),
      switchTime?: string(name='SwitchTime', example='2022-02-19 14:00:00'),
      taskType?: string(name='TaskType', example='rds_apsaradb_upgrade'),
      taskTypeEn?: string(name='TaskTypeEn', example='rds_apsaradb_upgrade'),
      taskTypeZh?: string(name='TaskTypeZh'),
    }
  ](name='Items'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='30'),
  requestId?: string(name='RequestId', example='C634E813-42FA-53D2-A7EB-B881C4B264CC'),
  totalRecordCount?: int32(name='TotalRecordCount', example='1'),
}

model DescribeActiveOperationTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeActiveOperationTasksResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeActiveOperationTasks  DescribeActiveOperationTasksRequest
  * @return DescribeActiveOperationTasksResponse
 */
async function describeActiveOperationTasks(request: DescribeActiveOperationTasksRequest): DescribeActiveOperationTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeActiveOperationTasks', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAvailableResourceRequest {
  chargeType: string(name='ChargeType', description='This parameter is required.', example='Prepaid', position='Query'),
  coreInstanceType?: string(name='CoreInstanceType', example='hbase.sn1.large', position='Query'),
  diskType?: string(name='DiskType', example='cloud_ssd', position='Query'),
  engine?: string(name='Engine', example='hbaseue', position='Query'),
  engineVersion?: string(name='EngineVersion', example='2.0', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-h', position='Query'),
}

model DescribeAvailableResourceResponseBody = {
  availableZones?: {
    availableZone?: [ 
    {
      masterResources?: {
        masterResource?: [ 
        {
          instanceType?: string(name='InstanceType', example='hbase.sn1.medium'),
          instanceTypeDetail?: {
            cpu?: int32(name='Cpu', example='4'),
            mem?: int32(name='Mem', example='8'),
          }(name='InstanceTypeDetail'),
        }
      ](name='MasterResource')
      }(name='MasterResources'),
      regionId?: string(name='RegionId', example='cn-shenzhen'),
      supportedEngines?: {
        supportedEngine?: [ 
        {
          engine?: string(name='Engine', example='hbase'),
          supportedEngineVersions?: {
            supportedEngineVersion?: [ 
            {
              supportedCategories?: {
                supportedCategories?: [ 
                {
                  category?: string(name='Category', example='cluster'),
                  supportedStorageTypes?: {
                    supportedStorageType?: [ 
                    {
                      coreResources?: {
                        coreResource?: [ 
                        {
                          DBInstanceStorageRange?: {
                            maxSize?: int32(name='MaxSize', example='8000'),
                            minSize?: int32(name='MinSize', example='400'),
                            stepSize?: int32(name='StepSize', example='40'),
                          }(name='DBInstanceStorageRange'),
                          instanceType?: string(name='InstanceType', example='hbase.sn1.large'),
                          instanceTypeDetail?: {
                            cpu?: int32(name='Cpu', example='4'),
                            mem?: int32(name='Mem', example='8'),
                          }(name='InstanceTypeDetail'),
                          maxCoreCount?: int32(name='MaxCoreCount', example='16'),
                        }
                      ](name='CoreResource')
                      }(name='CoreResources'),
                      storageType?: string(name='StorageType', example='cloud_ssd'),
                    }
                  ](name='SupportedStorageType')
                  }(name='SupportedStorageTypes'),
                }
              ](name='SupportedCategories')
              }(name='SupportedCategories'),
              version?: string(name='Version', example='2.0'),
            }
          ](name='SupportedEngineVersion')
          }(name='SupportedEngineVersions'),
        }
      ](name='SupportedEngine')
      }(name='SupportedEngines'),
      zoneId?: string(name='ZoneId', example='cn-shenzhen-e'),
    }
  ](name='AvailableZone')
  }(name='AvailableZones'),
  requestId?: string(name='RequestId', example='EA76F208-E334-592A-A0C6-41E15EC87ED0'),
}

model DescribeAvailableResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAvailableResourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAvailableResource  DescribeAvailableResourceRequest
  * @return DescribeAvailableResourceResponse
 */
async function describeAvailableResource(request: DescribeAvailableResourceRequest): DescribeAvailableResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAvailableResource', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupPlanConfigRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='ld-m5eznlga4k5bcxxxx', position='Query'),
}

model DescribeBackupPlanConfigResponseBody = {
  fullBackupCycle?: int32(name='FullBackupCycle', example='7'),
  minHFileBackupCount?: int32(name='MinHFileBackupCount', example='3'),
  nextFullBackupDate?: string(name='NextFullBackupDate', example='2020-11-09T18:00:00Z'),
  requestId?: string(name='RequestId', example='33A23201-6038-4A6A-B76A-61047EA04E6A'),
  tables?: {
    table?: [ string ](name='Table')
  }(name='Tables'),
}

model DescribeBackupPlanConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeBackupPlanConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeBackupPlanConfig  DescribeBackupPlanConfigRequest
  * @return DescribeBackupPlanConfigResponse
 */
async function describeBackupPlanConfig(request: DescribeBackupPlanConfigRequest): DescribeBackupPlanConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackupPlanConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupPolicyRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='hb-t4naqsay5gn******', position='Query'),
}

model DescribeBackupPolicyResponseBody = {
  backupRetentionPeriod?: string(name='BackupRetentionPeriod', example='10'),
  preferredBackupEndTimeUTC?: string(name='PreferredBackupEndTimeUTC', example='18:00Z'),
  preferredBackupPeriod?: string(name='PreferredBackupPeriod', example='Friday'),
  preferredBackupStartTimeUTC?: string(name='PreferredBackupStartTimeUTC', example='17:00Z'),
  preferredBackupTime?: string(name='PreferredBackupTime', example='01:00-02:00'),
  requestId?: string(name='RequestId', example='94AC38B6-7C6D-45B2-BC03-B8750071A482'),
}

model DescribeBackupPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeBackupPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeBackupPolicy  DescribeBackupPolicyRequest
  * @return DescribeBackupPolicyResponse
 */
async function describeBackupPolicy(request: DescribeBackupPolicyRequest): DescribeBackupPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackupPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupStatusRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='ld-m5eznlga4k5bcxxxx', position='Query'),
}

model DescribeBackupStatusResponseBody = {
  backupStatus?: string(name='BackupStatus', example='opened'),
  bdsClusterId?: string(name='BdsClusterId', example='bds-m5e54q06ceyhxxxx'),
  clusterId?: string(name='ClusterId', example='ld-m5eznlga4k5bcxxxx'),
  requestId?: string(name='RequestId', example='F7E71430-A825-470A-B40B-DF3F3AAC9BEE'),
}

model DescribeBackupStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeBackupStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeBackupStatus  DescribeBackupStatusRequest
  * @return DescribeBackupStatusResponse
 */
async function describeBackupStatus(request: DescribeBackupStatusRequest): DescribeBackupStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackupStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupSummaryRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='ld-bp169l540vc6c****', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
}

model DescribeBackupSummaryResponseBody = {
  full?: {
    hasMore?: string(name='HasMore', example='false'),
    nextFullBackupDate?: string(name='NextFullBackupDate', example='2020-11-09T18:00:00Z'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    records?: {
      record?: [ 
      {
        createTime?: string(name='CreateTime', example='2020-11-02T18:00:00Z'),
        dataSize?: string(name='DataSize', example='1.2 kB'),
        finishTime?: string(name='FinishTime', example='2020-11-02T18:02:04Z'),
        process?: string(name='Process', example='1/1'),
        recordId?: string(name='RecordId', example='20201103020000'),
        speed?: string(name='Speed', example='0.00 MB/s'),
        status?: string(name='Status', example='SUCCESS'),
      }
    ](name='Record')
    }(name='Records'),
    total?: int32(name='Total', example='2'),
  }(name='Full'),
  incr?: {
    backupLogSize?: string(name='BackupLogSize', example='266 B'),
    pos?: string(name='Pos', example='2020-11-05T01:20:31Z'),
    queueLogNum?: string(name='QueueLogNum', example='0'),
    runningLogNum?: string(name='RunningLogNum', example='2'),
    speed?: string(name='Speed', example='0.00 MB/s'),
    status?: string(name='Status', example='RUNNING'),
  }(name='Incr'),
  requestId?: string(name='RequestId', example='168793CB-7B31-43E7-ADAB-FE3E8D584D6E'),
}

model DescribeBackupSummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeBackupSummaryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeBackupSummary  DescribeBackupSummaryRequest
  * @return DescribeBackupSummaryResponse
 */
async function describeBackupSummary(request: DescribeBackupSummaryRequest): DescribeBackupSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackupSummary', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupTablesRequest {
  backupRecordId: string(name='BackupRecordId', description='This parameter is required.', example='2020110302xxxx', position='Query'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='ld-m5eznlga4k5bcxxxx', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
}

model DescribeBackupTablesResponseBody = {
  backupRecords?: {
    backupRecord?: [ 
    {
      dataSize?: string(name='DataSize', example='1.2 kB'),
      endTime?: string(name='EndTime', example='2020-11-02T18:00:05Z'),
      message?: string(name='Message', example='null'),
      process?: string(name='Process', example='14/14'),
      speed?: string(name='Speed', example='0.00 MB/s'),
      startTime?: string(name='StartTime', example='2020-11-02T18:00:00Z'),
      state?: string(name='State', example='SUCCEEDED'),
      table?: string(name='Table', example='default:test1'),
    }
  ](name='BackupRecord')
  }(name='BackupRecords'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='01262E9C-B0CC-4663-82FA-D50173649F92'),
  tables?: {
    table?: [ string ](name='Table')
  }(name='Tables'),
  total?: long(name='Total', example='1'),
}

model DescribeBackupTablesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeBackupTablesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeBackupTables  DescribeBackupTablesRequest
  * @return DescribeBackupTablesResponse
 */
async function describeBackupTables(request: DescribeBackupTablesRequest): DescribeBackupTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackupTables', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupsRequest {
  backupId?: string(name='BackupId', example='job-xxxx', position='Query'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='hb-t4naqsay5gn****', position='Query'),
  endTime?: string(name='EndTime', example='2020-12-23 23:59:59', position='Query'),
  endTimeUTC?: string(name='EndTimeUTC', example='2020-12-23T15:59:59Z', position='Query'),
  pageNumber?: string(name='PageNumber', example='1', position='Query'),
  pageSize?: string(name='PageSize', example='10', position='Query'),
  startTime?: string(name='StartTime', example='2020-12-13 00:00:00', position='Query'),
  startTimeUTC?: string(name='StartTimeUTC', example='2020-12-12T16:00:00Z', position='Query'),
}

model DescribeBackupsResponseBody = {
  backups?: {
    backup?: [ 
    {
      backupDBNames?: string(name='BackupDBNames', example='1'),
      backupDownloadURL?: string(name='BackupDownloadURL', example='1'),
      backupEndTime?: string(name='BackupEndTime', example='2020-12-23 17:25:24'),
      backupEndTimeUTC?: string(name='BackupEndTimeUTC', example='2020-12-23T09:25:24Z'),
      backupId?: int32(name='BackupId', example='511876087'),
      backupMethod?: string(name='BackupMethod', example='P'),
      backupMode?: string(name='BackupMode', example='0'),
      backupSize?: string(name='BackupSize', example='0.00'),
      backupStartTime?: string(name='BackupStartTime', example='2020-12-23 17:25:08'),
      backupStartTimeUTC?: string(name='BackupStartTimeUTC', example='2020-12-23T09:25:08Z'),
      backupStatus?: string(name='BackupStatus', example='0'),
      backupType?: string(name='BackupType', example='F'),
    }
  ](name='Backup')
  }(name='Backups'),
  enableStatus?: string(name='EnableStatus', example='enable'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='A93CE373-0FDE-4CCB-9DBA-6700906825ED'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeBackupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeBackupsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeBackups  DescribeBackupsRequest
  * @return DescribeBackupsResponse
 */
async function describeBackups(request: DescribeBackupsRequest): DescribeBackupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeClusterConnectionRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='ld-bp150tns0sjxs****', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DescribeClusterConnectionResponseBody = {
  dbType?: string(name='DbType', example='hbaseue'),
  isMultimod?: string(name='IsMultimod', example='true'),
  netType?: string(name='NetType', example='VPC'),
  requestId?: string(name='RequestId', example='70220050-A465-5DCC-8C0C-C38C6E3DB24D'),
  serviceConnAddrs?: {
    serviceConnAddr?: [ 
    {
      connAddrInfo?: {
        connAddr?: string(name='ConnAddr', example='hb-****-proxy-phoenix.hbase.rds.aliyuncs.com'),
        connAddrPort?: string(name='ConnAddrPort', example='8765'),
        netType?: string(name='NetType', example='2'),
      }(name='ConnAddrInfo'),
      connType?: string(name='ConnType', example='PhoenixConnAddr'),
    }
  ](name='ServiceConnAddr')
  }(name='ServiceConnAddrs'),
  slbConnAddrs?: {
    slbConnAddr?: [ 
    {
      connAddrInfo?: {
        connAddr?: string(name='ConnAddr', example='ld-bp150tns0sjxs****-proxy-hbaseue-pub.hbaseue.rds.aliyuncs.com'),
        connAddrPort?: string(name='ConnAddrPort', example='9190'),
        netType?: string(name='NetType', example='0'),
      }(name='ConnAddrInfo'),
      slbType?: string(name='SlbType', example='hbaseue'),
    }
  ](name='SlbConnAddr')
  }(name='SlbConnAddrs'),
  thriftConn?: {
    connAddr?: string(name='ConnAddr', example='hb-bp1u0639js2h7****-proxy-thrift.hbase.rds.aliyuncs.com'),
    connAddrPort?: string(name='ConnAddrPort', example='9099'),
    netType?: string(name='NetType', example='2'),
  }(name='ThriftConn'),
  uiProxyConnAddrInfo?: {
    connAddr?: string(name='ConnAddr', example='ld-bp150tns0sjxs****-master1-001.hbaseue.rds.aliyuncs.com'),
    connAddrPort?: string(name='ConnAddrPort', example='443'),
    netType?: string(name='NetType', example='PUBLIC'),
  }(name='UiProxyConnAddrInfo'),
  vSwitchId?: string(name='VSwitchId', example='vsw-bp1foll427ze3d4ps****'),
  vpcId?: string(name='VpcId', example='vpc-bp15s22y1a7sff5gj****'),
  zkConnAddrs?: {
    zkConnAddr?: [ 
    {
      connAddr?: string(name='ConnAddr', example='ld-bp150tns0sjxs****-master1-001.hbaseue.rds.aliyuncs.com'),
      connAddrPort?: string(name='ConnAddrPort', example='2181'),
      netType?: string(name='NetType', example='2'),
    }
  ](name='ZkConnAddr')
  }(name='ZkConnAddrs'),
}

model DescribeClusterConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeClusterConnectionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeClusterConnection  DescribeClusterConnectionRequest
  * @return DescribeClusterConnectionResponse
 */
async function describeClusterConnection(request: DescribeClusterConnectionRequest): DescribeClusterConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeClusterConnection', 'POST', '/', 'json', false, 'json', request);
}

model DescribeColdStorageRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='ld-bp1uoihlf82e8****', position='Query'),
}

model DescribeColdStorageResponseBody = {
  clusterId?: string(name='ClusterId', example='ld-bp1uoihlf82e8****'),
  coldStorageSize?: string(name='ColdStorageSize', example='800'),
  coldStorageType?: string(name='ColdStorageType', example='BdsColdStorage'),
  coldStorageUseAmount?: string(name='ColdStorageUseAmount', example='20.00'),
  coldStorageUsePercent?: string(name='ColdStorageUsePercent', example='20.00'),
  openStatus?: string(name='OpenStatus', example='open'),
  payType?: string(name='PayType', example='POSTPAY'),
  requestId?: string(name='RequestId', example='DCB9479E-F05F-4D1C-AFB7-C639B87764B7'),
}

model DescribeColdStorageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeColdStorageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeColdStorage  DescribeColdStorageRequest
  * @return DescribeColdStorageResponse
 */
async function describeColdStorage(request: DescribeColdStorageRequest): DescribeColdStorageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeColdStorage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBInstanceUsageRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='hb-bp1u0639js2h7****', position='Query'),
}

model DescribeDBInstanceUsageResponseBody = {
  requestId?: string(name='RequestId', example='A2D841CE-D066-53E8-B9AC-3731DCC85397'),
  result?: string(name='Result', example='{\\"disk_usage_record\\":{\\"disk_used\\":\\"0.9GB\\",\\"disk_total\\":\\"1156.1GB\\",\\"usage_rate\\":\\"1%\\"}}'),
}

model DescribeDBInstanceUsageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDBInstanceUsageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDBInstanceUsage  DescribeDBInstanceUsageRequest
  * @return DescribeDBInstanceUsageResponse
 */
async function describeDBInstanceUsage(request: DescribeDBInstanceUsageRequest): DescribeDBInstanceUsageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBInstanceUsage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDeletedInstancesRequest {
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DescribeDeletedInstancesResponseBody = {
  instances?: {
    instance?: [ 
    {
      clusterType?: string(name='ClusterType', example='cluster'),
      createdTime?: string(name='CreatedTime', example='2020-11-02T07:16:07Z'),
      deleteTime?: string(name='DeleteTime', example='2020-11-02T07:27:24Z'),
      engine?: string(name='Engine', example='hbase'),
      instanceId?: string(name='InstanceId', example='hb-bp10q7n2zdw12xxxx'),
      instanceName?: string(name='InstanceName', example='e2e-test'),
      majorVersion?: string(name='MajorVersion', example='2.0'),
      moduleStackVersion?: string(name='ModuleStackVersion', example='null'),
      parentId?: string(name='ParentId', example='null'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      status?: string(name='Status', example='DELETED'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-f'),
    }
  ](name='Instance')
  }(name='Instances'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='0CAC5702-C862-44C0-AD54-C9CE70F4B246'),
  totalCount?: long(name='TotalCount', example='1'),
}

model DescribeDeletedInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDeletedInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDeletedInstances  DescribeDeletedInstancesRequest
  * @return DescribeDeletedInstancesResponse
 */
async function describeDeletedInstances(request: DescribeDeletedInstancesRequest): DescribeDeletedInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDeletedInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDiskWarningLineRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='hb-bp1bl7iqzkahmyxxxx', position='Query'),
}

model DescribeDiskWarningLineResponseBody = {
  requestId?: string(name='RequestId', example='08DF8283-D290-4107-931E-7913D6D3480D'),
  warningLine?: string(name='WarningLine', example='80'),
}

model DescribeDiskWarningLineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDiskWarningLineResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDiskWarningLine  DescribeDiskWarningLineRequest
  * @return DescribeDiskWarningLineResponse
 */
async function describeDiskWarningLine(request: DescribeDiskWarningLineRequest): DescribeDiskWarningLineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDiskWarningLine', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEndpointsRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='ld-bp150tns0sjxs****', position='Query'),
}

model DescribeEndpointsResponseBody = {
  connAddrs?: {
    connAddrInfo?: [ 
    {
      connAddr?: string(name='ConnAddr', example='****'),
      connAddrPort?: string(name='ConnAddrPort', example='****'),
      connType?: string(name='ConnType', example='zkConn'),
      netType?: string(name='NetType', example='2'),
    }
  ](name='ConnAddrInfo')
  }(name='ConnAddrs'),
  engine?: string(name='Engine', example='hbaseue'),
  netType?: string(name='NetType', example='VPC'),
  requestId?: string(name='RequestId', example='F072593C-5234-5B56-9F63-3C7A3AD85D66'),
  vSwitchId?: string(name='VSwitchId', example='vsw-bp1foll427ze3d4ps****'),
  vpcId?: string(name='VpcId', example='vpc-bp15s22y1a7sff5gj****'),
}

model DescribeEndpointsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEndpointsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeEndpoints  DescribeEndpointsRequest
  * @return DescribeEndpointsResponse
 */
async function describeEndpoints(request: DescribeEndpointsRequest): DescribeEndpointsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEndpoints', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='ld-bp150tns0sjxs****', position='Query'),
}

model DescribeInstanceResponseBody = {
  autoRenewal?: boolean(name='AutoRenewal', example='false'),
  backupStatus?: string(name='BackupStatus', example='open'),
  clusterId?: string(name='ClusterId', example='ld-bp150tns0sjxs****'),
  clusterName?: string(name='ClusterName', example='testhbase'),
  clusterType?: string(name='ClusterType', example='cluster'),
  coldStorageSize?: int32(name='ColdStorageSize', example='800'),
  coldStorageStatus?: string(name='ColdStorageStatus', example='open'),
  confirmMaintainTime?: string(name='ConfirmMaintainTime', example='true'),
  coreDiskCount?: string(name='CoreDiskCount', example='4'),
  coreDiskSize?: int32(name='CoreDiskSize', example='100'),
  coreDiskType?: string(name='CoreDiskType', example='cloud_ssd'),
  coreInstanceType?: string(name='CoreInstanceType', example='hbase.sn2.2xlarge'),
  coreNodeCount?: int32(name='CoreNodeCount', example='2'),
  createdTime?: string(name='CreatedTime', example='2021-07-19T11:23:22'),
  createdTimeUTC?: string(name='CreatedTimeUTC', example='2021-07-19T03:23:22Z'),
  duration?: int32(name='Duration', example='12'),
  enableHbaseProxy: boolean(name='EnableHbaseProxy', description='This parameter is required.', example='false'),
  encryptionKey?: string(name='EncryptionKey', example='0d2470df-da7b-4786-b981-9a164dae****'),
  encryptionType?: string(name='EncryptionType', example='NoEncryption'),
  engine?: string(name='Engine', example='hbaseue'),
  expireTime?: string(name='ExpireTime', example='2022-02-24T00:00:00'),
  expireTimeUTC?: string(name='ExpireTimeUTC', example='2022-02-23T16:00:00Z'),
  instanceId?: string(name='InstanceId', example='ld-bp150tns0sjxs****'),
  instanceName?: string(name='InstanceName', example='testhbase'),
  isDeletionProtection?: boolean(name='IsDeletionProtection', example='false'),
  isHa?: boolean(name='IsHa', example='true'),
  isLatestVersion?: boolean(name='IsLatestVersion', example='true'),
  isMultiModel?: boolean(name='IsMultiModel', example='true'),
  lproxyMinorVersion?: string(name='LproxyMinorVersion', example='2.3.2'),
  maintainEndTime?: string(name='MaintainEndTime', example='22:00Z'),
  maintainStartTime?: string(name='MaintainStartTime', example='18:00Z'),
  majorVersion?: string(name='MajorVersion', example='2.0'),
  masterDiskSize?: int32(name='MasterDiskSize', example='0'),
  masterDiskType?: string(name='MasterDiskType', example='cloud_efficiency'),
  masterInstanceType?: string(name='MasterInstanceType', example='hbase.sn2.large'),
  masterNodeCount?: int32(name='MasterNodeCount', example='2'),
  minorVersion?: string(name='MinorVersion', example='2.2.9.1'),
  moduleId?: int32(name='ModuleId', example='0'),
  moduleStackVersion?: string(name='ModuleStackVersion', example='phoenxi:4.0'),
  needUpgrade?: boolean(name='NeedUpgrade', example='false'),
  needUpgradeComps?: {
    comps?: [ string ](name='Comps')
  }(name='NeedUpgradeComps'),
  networkType?: string(name='NetworkType', example='VPC'),
  parentId?: string(name='ParentId', example='ld-uf699153o1m2l****'),
  payType?: string(name='PayType', example='Prepaid'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestId?: string(name='RequestId', example='3F429923-B6F6-52C5-9C2A-5B8A8C6BBA66'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmyiu4ekp****'),
  status?: string(name='Status', example='ACTIVATION'),
  tags?: {
    tag?: [ 
    {
      key?: string(name='Key', example='test_key'),
      value?: string(name='Value', example='test_value'),
    }
  ](name='Tag')
  }(name='Tags'),
  taskProgress?: string(name='TaskProgress', example='25.00'),
  taskStatus?: string(name='TaskStatus'),
  vpcId?: string(name='VpcId', example='vpc-bp15s22y1a7sff5gj****'),
  vswitchId?: string(name='VswitchId', example='vsw-bp1foll427ze3d4ps****'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-f'),
}

model DescribeInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeInstance  DescribeInstanceRequest
  * @return DescribeInstanceResponse
 */
async function describeInstance(request: DescribeInstanceRequest): DescribeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceTypeRequest {
  instanceType?: string(name='InstanceType', example='hbase.n2.4xlarge', position='Query'),
}

model DescribeInstanceTypeResponseBody = {
  instanceTypeSpecList?: {
    instanceTypeSpec?: [ 
    {
      cpuSize?: long(name='CpuSize', example='8'),
      instanceType?: string(name='InstanceType', example='hbase.n2.4xlarge'),
      memSize?: long(name='MemSize', example='16'),
    }
  ](name='InstanceTypeSpec')
  }(name='InstanceTypeSpecList'),
  requestId?: string(name='RequestId', example='DD23BBB4-64C2-42A4-B2E2-7E56C7AA815A'),
}

model DescribeInstanceTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstanceTypeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeInstanceType  DescribeInstanceTypeRequest
  * @return DescribeInstanceTypeResponse
 */
async function describeInstanceType(request: DescribeInstanceTypeRequest): DescribeInstanceTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceType', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstancesRequest {
  clusterId?: string(name='ClusterId', example='hb-bp1u0639js2h7****', position='Query'),
  clusterName?: string(name='ClusterName', example='test', position='Query'),
  dbType?: string(name='DbType', example='hbase', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-4f51d54g5****', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', example='key'),
      value?: string(name='Value', example='value'),
    }
  ](name='Tag', position='Query'),
}

model DescribeInstancesResponseBody = {
  instances?: {
    instance?: [ 
    {
      autoRenewal?: boolean(name='AutoRenewal', example='false'),
      backupStatus?: string(name='BackupStatus', example='open'),
      clusterId?: string(name='ClusterId', example='hb-bp1u0639js2h7****'),
      clusterName?: string(name='ClusterName', example='test'),
      clusterType?: string(name='ClusterType', example='cluster'),
      coldStorageStatus?: string(name='ColdStorageStatus', example='open'),
      coreDiskCount?: string(name='CoreDiskCount', example='2'),
      coreDiskSize?: int32(name='CoreDiskSize', example='100'),
      coreDiskType?: string(name='CoreDiskType', example='cloud_efficiency'),
      coreInstanceType?: string(name='CoreInstanceType', example='hbase.sn1.large'),
      coreNodeCount?: int32(name='CoreNodeCount', example='2'),
      createdTime?: string(name='CreatedTime', example='2019-09-12T14:40:46'),
      createdTimeUTC?: string(name='CreatedTimeUTC', example='2019-09-12T14:40:46Z'),
      duration?: int32(name='Duration', example='12'),
      engine?: string(name='Engine', example='hbase'),
      expireTime?: string(name='ExpireTime', example='2019-10-12T14:40:46'),
      expireTimeUTC?: string(name='ExpireTimeUTC', example='2019-10-12T14:40:46Z'),
      instanceId?: string(name='InstanceId', example='hb-bp1u0639js2h7****'),
      instanceName?: string(name='InstanceName', example='test'),
      isDeletionProtection?: boolean(name='IsDeletionProtection', example='true'),
      isHa?: boolean(name='IsHa', example='true'),
      majorVersion?: string(name='MajorVersion', example='2.0'),
      masterDiskSize?: int32(name='MasterDiskSize', example='100'),
      masterDiskType?: string(name='MasterDiskType', example='cloud_efficiency'),
      masterInstanceType?: string(name='MasterInstanceType', example='hbase.sn1.large'),
      masterNodeCount?: int32(name='MasterNodeCount', example='2'),
      moduleId?: int32(name='ModuleId', example='0'),
      moduleStackVersion?: string(name='ModuleStackVersion', example='1.0'),
      networkType?: string(name='NetworkType', example='VPC'),
      parentId?: string(name='ParentId', example='2980****2123'),
      payType?: string(name='PayType', example='Prepaid'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-4f51d54g5****'),
      status?: string(name='Status', example='ACTIVATION'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', example='test-key'),
          value?: string(name='Value', example='test-value'),
        }
      ](name='Tag')
      }(name='Tags'),
      vpcId?: string(name='VpcId', example='vpc-bp120k6ixs4eoghz*****'),
      vswitchId?: string(name='VswitchId', example='vsw-bp191ipotq****dbqf'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-f'),
    }
  ](name='Instance')
  }(name='Instances'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='EBECBF12-2E34-41BE-8DE9-FC3700D4****'),
  totalCount?: long(name='TotalCount', example='18'),
}

model DescribeInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeInstances  DescribeInstancesRequest
  * @return DescribeInstancesResponse
 */
async function describeInstances(request: DescribeInstancesRequest): DescribeInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeIpWhitelistRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='ld-bp150tns0sjxs****', position='Query'),
}

model DescribeIpWhitelistResponseBody = {
  groups?: {
    group?: [ 
    {
      groupName?: string(name='GroupName', example='default'),
      ipList?: {
        ip?: [ string ](name='Ip')
      }(name='IpList'),
      ipVersion?: int32(name='IpVersion', example='4'),
    }
  ](name='Group')
  }(name='Groups'),
  requestId?: string(name='RequestId', example='AFAA617B-3268-5883-982B-DB8EC8CC1F1B'),
}

model DescribeIpWhitelistResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeIpWhitelistResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeIpWhitelist  DescribeIpWhitelistRequest
  * @return DescribeIpWhitelistResponse
 */
async function describeIpWhitelist(request: DescribeIpWhitelistRequest): DescribeIpWhitelistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeIpWhitelist', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMultiZoneAvailableRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh-CN', position='Query'),
}

model DescribeMultiZoneAvailableRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      availableCombines?: {
        availableCombine?: [ 
        {
          id?: string(name='Id', example='cn-shenzhen-****-aliyun'),
          zones?: {
            zone?: [ string ](name='Zone')
          }(name='Zones'),
        }
      ](name='AvailableCombine')
      }(name='AvailableCombines'),
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint', example='hbase.aliyuncs.com'),
      regionId?: string(name='RegionId', example='cn-shenzhen'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId', example='F03BB273-45EE-4B6C-A329-A6E6A8D15856'),
}

model DescribeMultiZoneAvailableRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMultiZoneAvailableRegionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeMultiZoneAvailableRegions  DescribeMultiZoneAvailableRegionsRequest
  * @return DescribeMultiZoneAvailableRegionsResponse
 */
async function describeMultiZoneAvailableRegions(request: DescribeMultiZoneAvailableRegionsRequest): DescribeMultiZoneAvailableRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMultiZoneAvailableRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMultiZoneAvailableResourceRequest {
  chargeType: string(name='ChargeType', description='This parameter is required.', example='Prepaid', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  zoneCombination?: string(name='ZoneCombination', example='cn-hangzhou-bef-aliyun', position='Query'),
}

model DescribeMultiZoneAvailableResourceResponseBody = {
  availableZones?: {
    availableZone?: [ 
    {
      masterResources?: {
        masterResource?: [ 
        {
          instanceType?: string(name='InstanceType', example='hbase.sn2.large'),
          instanceTypeDetail?: {
            cpu?: int32(name='Cpu', example='4'),
            mem?: int32(name='Mem', example='16'),
          }(name='InstanceTypeDetail'),
        }
      ](name='MasterResource')
      }(name='MasterResources'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      supportedEngines?: {
        supportedEngine?: [ 
        {
          engine?: string(name='Engine', example='hbaseue'),
          supportedEngineVersions?: {
            supportedEngineVersion?: [ 
            {
              supportedCategories?: {
                supportedCategories?: [ 
                {
                  category?: string(name='Category', example='cluster'),
                  supportedStorageTypes?: {
                    supportedStorageType?: [ 
                    {
                      coreResources?: {
                        coreResource?: [ 
                        {
                          DBInstanceStorageRange?: {
                            maxSize?: int32(name='MaxSize', example='64000'),
                            minSize?: int32(name='MinSize', example='400'),
                            stepSize?: int32(name='StepSize', example='40'),
                          }(name='DBInstanceStorageRange'),
                          instanceType?: string(name='InstanceType', example='hbase.sn2.2xlarge'),
                          instanceTypeDetail?: {
                            cpu?: int32(name='Cpu', example='32'),
                            mem?: int32(name='Mem', example='8'),
                          }(name='InstanceTypeDetail'),
                          maxCoreCount?: int32(name='MaxCoreCount', example='30'),
                        }
                      ](name='CoreResource')
                      }(name='CoreResources'),
                      storageType?: string(name='StorageType', example='cloud_efficiency'),
                    }
                  ](name='SupportedStorageType')
                  }(name='SupportedStorageTypes'),
                }
              ](name='SupportedCategories')
              }(name='SupportedCategories'),
              version?: string(name='Version', example='2.0'),
            }
          ](name='SupportedEngineVersion')
          }(name='SupportedEngineVersions'),
        }
      ](name='SupportedEngine')
      }(name='SupportedEngines'),
      zoneCombination?: string(name='ZoneCombination', example='cn-hangzhou-bef-aliyun'),
    }
  ](name='AvailableZone')
  }(name='AvailableZones'),
  requestId?: string(name='RequestId', example='B2EEBBA9-C627-4415-81A0-B77BC54F1D52'),
}

model DescribeMultiZoneAvailableResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMultiZoneAvailableResourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeMultiZoneAvailableResource  DescribeMultiZoneAvailableResourceRequest
  * @return DescribeMultiZoneAvailableResourceResponse
 */
async function describeMultiZoneAvailableResource(request: DescribeMultiZoneAvailableResourceRequest): DescribeMultiZoneAvailableResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMultiZoneAvailableResource', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMultiZoneClusterRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='ld-t4nn71xa0yn****', position='Query'),
}

model DescribeMultiZoneClusterResponseBody = {
  arbiterVSwitchIds?: string(name='ArbiterVSwitchIds', example='vsw-t4nax9mp3wk0czn****'),
  arbiterZoneId?: string(name='ArbiterZoneId', example='ap-southeast-1c'),
  autoRenewal?: boolean(name='AutoRenewal', example='false'),
  clusterId?: string(name='ClusterId', example='ld-t4nn71xa0yn****'),
  clusterName?: string(name='ClusterName', example='mz_test'),
  coldStorageSize?: int32(name='ColdStorageSize'),
  coreDiskCount?: string(name='CoreDiskCount', example='4'),
  coreDiskSize?: int32(name='CoreDiskSize', example='100'),
  coreDiskType?: string(name='CoreDiskType', example='cloud_efficiency'),
  coreInstanceType?: string(name='CoreInstanceType', example='hbase.sn1.large'),
  coreNodeCount?: int32(name='CoreNodeCount', example='6'),
  createdTime?: string(name='CreatedTime', example='2020-10-15T18:04:52'),
  createdTimeUTC?: string(name='CreatedTimeUTC', example='2020-10-15T10:04:52Z'),
  duration?: int32(name='Duration', example='1'),
  encryptionKey?: string(name='EncryptionKey', example='2a****'),
  encryptionType?: string(name='EncryptionType', example='CloudDisk'),
  engine?: string(name='Engine', example='hbaseue'),
  expireTime?: string(name='ExpireTime', example='2020-11-16T08:00:00'),
  expireTimeUTC?: string(name='ExpireTimeUTC', example='2020-11-16T00:00:00Z'),
  instanceId?: string(name='InstanceId', example='ld-t4nn71xa0yn****'),
  instanceName?: string(name='InstanceName', example='mz_test'),
  isDeletionProtection?: boolean(name='IsDeletionProtection', example='false'),
  logDiskCount?: string(name='LogDiskCount', example='4'),
  logDiskSize?: int32(name='LogDiskSize', example='100'),
  logDiskType?: string(name='LogDiskType', example='cloud_efficiency'),
  logInstanceType?: string(name='LogInstanceType', example='hbase.sn1.large'),
  logNodeCount?: int32(name='LogNodeCount', example='4'),
  maintainEndTime?: string(name='MaintainEndTime', example='06:00:00'),
  maintainStartTime?: string(name='MaintainStartTime', example='02:00:00'),
  majorVersion?: string(name='MajorVersion', example='2.0'),
  masterDiskSize?: int32(name='MasterDiskSize', example='50'),
  masterDiskType?: string(name='MasterDiskType', example='cloud_efficiency'),
  masterInstanceType?: string(name='MasterInstanceType', example='hbase.sn1.large'),
  masterNodeCount?: int32(name='MasterNodeCount', example='2'),
  moduleId?: int32(name='ModuleId', example='0'),
  moduleStackVersion?: string(name='ModuleStackVersion', example='2.0'),
  multiZoneCombination?: string(name='MultiZoneCombination', example='ap-southeast-1-abc-aliyun'),
  multiZoneInstanceModels?: {
    multiZoneInstanceModel?: [ 
    {
      hdfsMinorVersion?: string(name='HdfsMinorVersion'),
      insName?: string(name='InsName', example='ld-t4nn71xa0yn****-az-a'),
      isHdfsLatestVersion?: string(name='IsHdfsLatestVersion'),
      isLatestVersion?: boolean(name='IsLatestVersion', example='true'),
      latestHdfsMinorVersion?: string(name='LatestHdfsMinorVersion'),
      latestMinorVersion?: string(name='LatestMinorVersion'),
      minorVersion?: string(name='MinorVersion', example='2.1.24'),
      role?: string(name='Role', example='primary'),
      status?: string(name='Status', example='ACTIVATION'),
    }
  ](name='MultiZoneInstanceModel')
  }(name='MultiZoneInstanceModels'),
  networkType?: string(name='NetworkType', example='VPC'),
  parentId?: string(name='ParentId', example='ld-fls1gf31y5s35****'),
  payType?: string(name='PayType', example='Prepaid'),
  primaryVSwitchIds?: string(name='PrimaryVSwitchIds', example='vsw-t4n3s1zd2gtidg****'),
  primaryZoneId?: string(name='PrimaryZoneId', example='ap-southeast-1a'),
  regionId?: string(name='RegionId', example='ap-southeast-1'),
  requestId?: string(name='RequestId', example='A02C0E6D-3A47-4FA0-BA7E-60793CE256DA'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-lk51f5fer315e****'),
  standbyVSwitchIds?: string(name='StandbyVSwitchIds', example='vsw-t4nvvk7xur3rdi****'),
  standbyZoneId?: string(name='StandbyZoneId', example='ap-southeast-1b'),
  status?: string(name='Status', example='ACTIVATION'),
  tags?: {
    tag?: [ 
    {
      key?: string(name='Key', example='test_key'),
      value?: string(name='Value', example='test_value'),
    }
  ](name='Tag')
  }(name='Tags'),
  taskProgress?: string(name='TaskProgress'),
  taskStatus?: string(name='TaskStatus'),
  vpcId?: string(name='VpcId', example='vpc-t4nx81tmlixcq5****'),
}

model DescribeMultiZoneClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMultiZoneClusterResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeMultiZoneCluster  DescribeMultiZoneClusterRequest
  * @return DescribeMultiZoneClusterResponse
 */
async function describeMultiZoneCluster(request: DescribeMultiZoneClusterRequest): DescribeMultiZoneClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMultiZoneCluster', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRecoverableTimeRangeRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='ld-m5eznlga4k5bcxxxx', position='Query'),
}

model DescribeRecoverableTimeRangeResponseBody = {
  requestId?: string(name='RequestId', example='A1A51D18-96DC-465C-9F1B-47180CA22524'),
  timeBegin?: string(name='TimeBegin', example='2020-10-26T18:02:03Z'),
  timeEnd?: string(name='TimeEnd', example='2020-11-05T01:20:31Z'),
}

model DescribeRecoverableTimeRangeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRecoverableTimeRangeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRecoverableTimeRange  DescribeRecoverableTimeRangeRequest
  * @return DescribeRecoverableTimeRangeResponse
 */
async function describeRecoverableTimeRange(request: DescribeRecoverableTimeRangeRequest): DescribeRecoverableTimeRangeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRecoverableTimeRange', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh-CN', position='Query'),
  engine?: string(name='Engine', example='hbase', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint', example='hbase.aliyuncs.com'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      zones?: {
        zone?: [ 
        {
          id?: string(name='Id', example='cn-hangzhou-b'),
        }
      ](name='Zone')
      }(name='Zones'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId', example='14D3924C-4FD8-4EE9-9B34-DA949D104F42'),
}

model DescribeRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRegions  DescribeRegionsRequest
  * @return DescribeRegionsResponse
 */
async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRestoreFullDetailsRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='ld-m5eznlga4k5bcxxxx', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  restoreRecordId: string(name='RestoreRecordId', description='This parameter is required.', example='2020110514xxxx', position='Query'),
}

model DescribeRestoreFullDetailsResponseBody = {
  requestId?: string(name='RequestId', example='CFE525CF-C691-4140-A981-D004DAA7A840'),
  restoreFull?: {
    dataSize?: string(name='DataSize', example='1.2 kB'),
    fail?: int32(name='Fail', example='0'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    restoreFullDetails?: {
      restoreFullDetail?: [ 
      {
        dataSize?: string(name='DataSize', example='1.2 kB'),
        endTime?: string(name='EndTime', example='2020-11-05T06:45:51Z'),
        message?: string(name='Message', example='null'),
        process?: string(name='Process', example='14/14'),
        speed?: string(name='Speed', example='0.00 MB/s'),
        startTime?: string(name='StartTime', example='2020-11-05T06:45:45Z'),
        state?: string(name='State', example='SUCCEEDED'),
        table?: string(name='Table', example='default:test1'),
      }
    ](name='RestoreFullDetail')
    }(name='RestoreFullDetails'),
    speed?: string(name='Speed', example='0.00 MB/s'),
    succeed?: int32(name='Succeed', example='1'),
    total?: long(name='Total', example='1'),
  }(name='RestoreFull'),
}

model DescribeRestoreFullDetailsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRestoreFullDetailsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRestoreFullDetails  DescribeRestoreFullDetailsRequest
  * @return DescribeRestoreFullDetailsResponse
 */
async function describeRestoreFullDetails(request: DescribeRestoreFullDetailsRequest): DescribeRestoreFullDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRestoreFullDetails', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRestoreIncrDetailRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='ld-m5eyf188hw481xxxx', position='Query'),
  restoreRecordId: string(name='RestoreRecordId', description='This parameter is required.', example='2020110514xxxx', position='Query'),
}

model DescribeRestoreIncrDetailResponseBody = {
  requestId?: string(name='RequestId', example='D0FE2717-E194-465A-B27B-7373F96E580B'),
  restoreIncrDetail?: {
    endTime?: string(name='EndTime', example='2020-11-05T06:45:44Z'),
    process?: string(name='Process', example='0/0'),
    restoreDelay?: string(name='RestoreDelay', example='0 ms'),
    restoreStartTs?: string(name='RestoreStartTs', example='2020-11-02T18:00:00Z'),
    restoredTs?: string(name='RestoredTs', example='\\"\\"'),
    startTime?: string(name='StartTime', example='2020-11-05T06:45:44Z'),
    state?: string(name='State', example='SUCCEEDED'),
  }(name='RestoreIncrDetail'),
}

model DescribeRestoreIncrDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRestoreIncrDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRestoreIncrDetail  DescribeRestoreIncrDetailRequest
  * @return DescribeRestoreIncrDetailResponse
 */
async function describeRestoreIncrDetail(request: DescribeRestoreIncrDetailRequest): DescribeRestoreIncrDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRestoreIncrDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRestoreSchemaDetailsRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='ld-m5eznlga4k5bcxxxx', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  restoreRecordId: string(name='RestoreRecordId', description='This parameter is required.', example='2020110514xxxx', position='Query'),
}

model DescribeRestoreSchemaDetailsResponseBody = {
  requestId?: string(name='RequestId', example='BC682A80-7677-4294-975C-CFEA425381DE'),
  restoreSchema?: {
    fail?: int32(name='Fail', example='0'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    restoreSchemaDetails?: {
      restoreSchemaDetail?: [ 
      {
        endTime?: string(name='EndTime', example='2020-11-05T06:45:18Z'),
        message?: string(name='Message', example='null'),
        startTime?: string(name='StartTime', example='2020-11-05T06:45:14Z'),
        state?: string(name='State', example='SUCCEEDED'),
        table?: string(name='Table', example='default:test1'),
      }
    ](name='RestoreSchemaDetail')
    }(name='RestoreSchemaDetails'),
    succeed?: int32(name='Succeed', example='1'),
    total?: long(name='Total', example='1'),
  }(name='RestoreSchema'),
}

model DescribeRestoreSchemaDetailsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRestoreSchemaDetailsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRestoreSchemaDetails  DescribeRestoreSchemaDetailsRequest
  * @return DescribeRestoreSchemaDetailsResponse
 */
async function describeRestoreSchemaDetails(request: DescribeRestoreSchemaDetailsRequest): DescribeRestoreSchemaDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRestoreSchemaDetails', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRestoreSummaryRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='ld-m5eznlga4k5bcxxxx', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
}

model DescribeRestoreSummaryResponseBody = {
  hasMoreRestoreRecord?: int32(name='HasMoreRestoreRecord', example='0'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='AE639ED7-F0F3-4A71-911E-CF8EC088816E'),
  rescords?: {
    rescord?: [ 
    {
      bulkLoadProcess?: string(name='BulkLoadProcess', example='1/1'),
      createTime?: string(name='CreateTime', example='2020-11-05T06:45:14Z'),
      finishTime?: string(name='FinishTime', example='2020-11-05T06:45:51Z'),
      hfileRestoreProcess?: string(name='HfileRestoreProcess', example='1/1'),
      logProcess?: string(name='LogProcess', example='0/0'),
      recordId?: string(name='RecordId', example='20201105144514'),
      schemaProcess?: string(name='SchemaProcess', example='1/1'),
      status?: string(name='Status', example='SUCCEEDED'),
    }
  ](name='Rescord')
  }(name='Rescords'),
  total?: int32(name='Total', example='1'),
}

model DescribeRestoreSummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRestoreSummaryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRestoreSummary  DescribeRestoreSummaryRequest
  * @return DescribeRestoreSummaryResponse
 */
async function describeRestoreSummary(request: DescribeRestoreSummaryRequest): DescribeRestoreSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRestoreSummary', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRestoreTablesRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='ld-m5eznlga4k5bcxxxx', position='Query'),
  restoreRecordId: string(name='RestoreRecordId', description='This parameter is required.', example='2020110514xxxx', position='Query'),
}

model DescribeRestoreTablesResponseBody = {
  requestId?: string(name='RequestId', example='18D9CC47-D913-48BF-AB6B-4FA9B28FBDB1'),
  restoreFull?: {
    dataSize?: string(name='DataSize', example='1.2 kB'),
    fail?: int32(name='Fail', example='0'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    restoreFullDetails?: {
      restoreFullDetail?: [ 
      {
        dataSize?: string(name='DataSize', example='1.2 kB'),
        endTime?: string(name='EndTime', example='2020-11-05T06:45:51Z'),
        message?: string(name='Message', example='“”'),
        process?: string(name='Process', example='14/14'),
        speed?: string(name='Speed', example='0.00 MB/s'),
        startTime?: string(name='StartTime', example='2020-11-05T06:45:45Z'),
        state?: string(name='State', example='SUCCEEDED'),
        table?: string(name='Table', example='default:test1'),
      }
    ](name='RestoreFullDetail')
    }(name='RestoreFullDetails'),
    speed?: string(name='Speed', example='0.00 MB/s'),
    succeed?: int32(name='Succeed', example='1'),
    total?: long(name='Total', example='1'),
  }(name='RestoreFull'),
  restoreIncrDetail?: {
    endTime?: string(name='EndTime', example='2020-11-05T06:45:44Z'),
    process?: string(name='Process', example='0/0'),
    restoreDelay?: string(name='RestoreDelay', example='0 ms'),
    restoreStartTs?: string(name='RestoreStartTs', example='2020-11-02T18:00:00Z'),
    restoredTs?: string(name='RestoredTs', example='“”'),
    startTime?: string(name='StartTime', example='2020-11-05T06:45:44Z'),
    state?: string(name='State', example='SUCCEEDED'),
  }(name='RestoreIncrDetail'),
  restoreSchema?: {
    fail?: int32(name='Fail', example='0'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    restoreSchemaDetails?: {
      restoreSchemaDetail?: [ 
      {
        endTime?: string(name='EndTime', example='2020-11-05T06:45:18Z'),
        message?: string(name='Message', example='null'),
        startTime?: string(name='StartTime', example='2020-11-05T06:45:14Z'),
        state?: string(name='State', example='SUCCEEDED'),
        table?: string(name='Table', example='default:test1'),
      }
    ](name='RestoreSchemaDetail')
    }(name='RestoreSchemaDetails'),
    succeed?: int32(name='Succeed', example='1'),
    total?: long(name='Total', example='1'),
  }(name='RestoreSchema'),
  restoreSummary?: {
    endTime?: string(name='EndTime', example='2020-11-05T06:45:51Z'),
    recordId?: string(name='RecordId', example='20201105144514'),
    restoreToDate?: string(name='RestoreToDate', example='2020-11-04T05:15:00Z'),
    startTime?: string(name='StartTime', example='2020-11-05T06:45:14Z'),
    state?: string(name='State', example='SUCCEEDED'),
    targetCluster?: string(name='TargetCluster', example='ld-m5e2t34kr54wgxxxx'),
  }(name='RestoreSummary'),
  tables?: {
    table?: [ string ](name='Table')
  }(name='Tables'),
}

model DescribeRestoreTablesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRestoreTablesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRestoreTables  DescribeRestoreTablesRequest
  * @return DescribeRestoreTablesResponse
 */
async function describeRestoreTables(request: DescribeRestoreTablesRequest): DescribeRestoreTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRestoreTables', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSecurityGroupsRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='hb-bp161ax8i03c4uq**', position='Query'),
}

model DescribeSecurityGroupsResponseBody = {
  requestId?: string(name='RequestId', example='50373857-C47B-4B64-9332-D0B5280B59EA'),
  securityGroupIds?: {
    securityGroupId?: [ string ](name='SecurityGroupId')
  }(name='SecurityGroupIds'),
}

model DescribeSecurityGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSecurityGroupsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSecurityGroups  DescribeSecurityGroupsRequest
  * @return DescribeSecurityGroupsResponse
 */
async function describeSecurityGroups(request: DescribeSecurityGroupsRequest): DescribeSecurityGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSecurityGroups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeServerlessClusterRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='hb-bp16f1441y6p2****', position='Query'),
  zoneId: string(name='ZoneId', description='This parameter is required.', example='sdh0b7f4k5f****', position='Query'),
}

model DescribeServerlessClusterResponseBody = {
  autoRenew?: string(name='AutoRenew', example='false'),
  clusterType?: string(name='ClusterType', example='single'),
  createTime?: string(name='CreateTime', example='2019-10-12T14:40:46'),
  cuSize?: string(name='CuSize', example='150'),
  diskSize?: string(name='DiskSize', example='200'),
  expireTime?: string(name='ExpireTime', example='2019-10-12T14:40:46'),
  haType?: string(name='HaType', example='false'),
  hasUser?: string(name='HasUser', example='false'),
  innerEndpoint?: string(name='InnerEndpoint', example='https://sh-wz91452kg946i****-lindorm-serverless-in.lindorm.rds.aliyuncs.com:443'),
  instanceId?: string(name='InstanceId', example='hb-bp16f1441y6p2****'),
  instanceName?: string(name='InstanceName', example='test'),
  isDeletionProtection?: string(name='IsDeletionProtection', example='true'),
  lockMode?: string(name='LockMode'),
  mainVersion?: string(name='MainVersion', example='2.0.8'),
  outerEndpoint?: string(name='OuterEndpoint', example='https://sh-wz91452kg946i****-lindorm-serverless.lindorm.rds.aliyuncs.com:443'),
  payType?: string(name='PayType', example='Postpaid'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestId?: string(name='RequestId', example='89F81C30-320B-4550-91DB-C37C81D2358F'),
  reserverMaxQpsNum?: string(name='ReserverMaxQpsNum', example='100'),
  reserverMinQpsNum?: string(name='ReserverMinQpsNum', example='50'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-fjm2d4v7sf****'),
  status?: string(name='Status', example='ACTIVATION'),
  updateStatus?: string(name='UpdateStatus', example='NO'),
  vSwitchId?: string(name='VSwitchId', example='vsw-bp191ipotqf****'),
  vpcId?: string(name='VpcId', example='vpc-bp120k6ixs4eoghz****'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-f'),
}

model DescribeServerlessClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeServerlessClusterResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeServerlessCluster  DescribeServerlessClusterRequest
  * @return DescribeServerlessClusterResponse
 */
async function describeServerlessCluster(request: DescribeServerlessClusterRequest): DescribeServerlessClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeServerlessCluster', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSubDomainRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-f', position='Query'),
}

model DescribeSubDomainResponseBody = {
  requestId?: string(name='RequestId', example='F4208C83-B9BC-4A64-A739-8F88E98DA469'),
  subDomain?: string(name='SubDomain', example='cn-hangzhou-h-aliyun'),
}

model DescribeSubDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSubDomainResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSubDomain  DescribeSubDomainRequest
  * @return DescribeSubDomainResponse
 */
async function describeSubDomain(request: DescribeSubDomainRequest): DescribeSubDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSubDomain', 'POST', '/', 'json', false, 'json', request);
}

model EnableHBaseueBackupRequest {
  clientToken?: string(name='ClientToken', example='xxx', position='Query'),
  coldStorageSize?: int32(name='ColdStorageSize', example='800', position='Query'),
  hbaseueClusterId: string(name='HbaseueClusterId', description='This parameter is required.', example='ld-m5eznlga4k5bcxxxx', position='Query'),
  nodeCount: int32(name='NodeCount', description='This parameter is required.', example='2', position='Query'),
}

model EnableHBaseueBackupResponseBody = {
  clusterId?: string(name='ClusterId', example='bds-m5e54q06ceyhxxxx'),
  orderId?: string(name='OrderId', example='1449xxx'),
  requestId?: string(name='RequestId', example='15272D5D-46E8-4400-9CC8-A7E7B589F575'),
}

model EnableHBaseueBackupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableHBaseueBackupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnableHBaseueBackup  EnableHBaseueBackupRequest
  * @return EnableHBaseueBackupResponse
 */
async function enableHBaseueBackup(request: EnableHBaseueBackupRequest): EnableHBaseueBackupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableHBaseueBackup', 'POST', '/', 'json', false, 'json', request);
}

model EnableHBaseueModuleRequest {
  autoRenewPeriod?: int32(name='AutoRenewPeriod', example='2', position='Query'),
  bdsId?: string(name='BdsId', example='bds-bp174pm3tsk3****', position='Query'),
  clientToken?: string(name='ClientToken', example='ETnLKlblzczshOTUbOCz****', position='Query'),
  coreInstanceType: string(name='CoreInstanceType', description='This parameter is required.', example='hbase.sn1.large', position='Query'),
  diskSize?: int32(name='DiskSize', example='400', position='Query'),
  diskType?: string(name='DiskType', example='cloud_ssd', position='Query'),
  hbaseueClusterId: string(name='HbaseueClusterId', description='This parameter is required.', example='ld-bp150tns0sjxs****', position='Query'),
  masterInstanceType?: string(name='MasterInstanceType', example='hbase.sn1.large', position='Query'),
  moduleClusterName?: string(name='ModuleClusterName', example='cluster-name', position='Query'),
  moduleTypeName: string(name='ModuleTypeName', description='This parameter is required.', example='solr', position='Query'),
  nodeCount: int32(name='NodeCount', description='This parameter is required.', example='2', position='Query'),
  payType: string(name='PayType', description='This parameter is required.', example='Prepaid', position='Query'),
  period?: int32(name='Period', example='6', position='Query'),
  periodUnit?: string(name='PeriodUnit', example='month', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-shenzhen', position='Query'),
  vpcId: string(name='VpcId', description='This parameter is required.', example='vpc-bp120k6ixs4eog*****', position='Query'),
  vswitchId: string(name='VswitchId', description='This parameter is required.', example='vsw-bp191ipotqj1ssyl*****', position='Query'),
  zoneId: string(name='ZoneId', description='This parameter is required.', example='cn-shenzhen-e', position='Query'),
}

model EnableHBaseueModuleResponseBody = {
  clusterId?: string(name='ClusterId', example='ld-bp150tns0sjxs****-m1-ps'),
  orderId?: string(name='OrderId', example='21474915573****'),
  requestId?: string(name='RequestId', example='407075EA-47F5-5A2D-888F-C1F90B8F3FCA'),
}

model EnableHBaseueModuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableHBaseueModuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnableHBaseueModule  EnableHBaseueModuleRequest
  * @return EnableHBaseueModuleResponse
 */
async function enableHBaseueModule(request: EnableHBaseueModuleRequest): EnableHBaseueModuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableHBaseueModule', 'POST', '/', 'json', false, 'json', request);
}

model EvaluateMultiZoneResourceRequest {
  arbiterVSwitchId: string(name='ArbiterVSwitchId', description='This parameter is required.', example='vsw-hangxzhouxb****', position='Query'),
  arbiterZoneId: string(name='ArbiterZoneId', description='This parameter is required.', example='cn-hangzhou-b', position='Query'),
  archVersion: string(name='ArchVersion', description='This parameter is required.', example='2.0', position='Query'),
  autoRenewPeriod?: int32(name='AutoRenewPeriod', example='0', minimum=1, maximum=60, position='Query'),
  clientToken?: string(name='ClientToken', example='f4g8t5rd2gr94****', position='Query'),
  clusterName?: string(name='ClusterName', example='hbaseue_test', position='Query'),
  coreDiskSize: int32(name='CoreDiskSize', description='This parameter is required.', example='400', minimum=400, maximum=64000, position='Query'),
  coreDiskType: string(name='CoreDiskType', description='This parameter is required.', example='cloud_ssd', position='Query'),
  coreInstanceType: string(name='CoreInstanceType', description='This parameter is required.', example='hbase.sn1.medium', position='Query'),
  coreNodeCount: int32(name='CoreNodeCount', description='This parameter is required.', example='4', minimum=4, maximum=2000, position='Query'),
  engine: string(name='Engine', description='This parameter is required.', example='hbaseue', position='Query'),
  engineVersion: string(name='EngineVersion', description='This parameter is required.', example='2.0', position='Query'),
  logDiskSize?: int32(name='LogDiskSize', example='400', minimum=400, maximum=64000, position='Query'),
  logDiskType?: string(name='LogDiskType', example='cloud_ssd', position='Query'),
  logInstanceType?: string(name='LogInstanceType', example='hbase.sn1.medium', position='Query'),
  logNodeCount?: int32(name='LogNodeCount', example='4', minimum=4, maximum=200, position='Query'),
  masterInstanceType: string(name='MasterInstanceType', description='This parameter is required.', example='hbase.sn1.medium', position='Query'),
  multiZoneCombination: string(name='MultiZoneCombination', description='This parameter is required.', example='cn-hangzhou-bef-aliyun-com', position='Query'),
  payType: string(name='PayType', description='This parameter is required.', example='Postpaid', position='Query'),
  period?: int32(name='Period', example='1', minimum=1, maximum=60, position='Query'),
  periodUnit?: string(name='PeriodUnit', example='month', position='Query'),
  primaryVSwitchId: string(name='PrimaryVSwitchId', description='This parameter is required.', example='vsw-hangxzhouxe*****', position='Query'),
  primaryZoneId: string(name='PrimaryZoneId', description='This parameter is required.', example='cn-hangzhou-e', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  securityIPList?: string(name='SecurityIPList', example='127.0.0.1', position='Query'),
  standbyVSwitchId: string(name='StandbyVSwitchId', description='This parameter is required.', example='vsw-hangxzhouxf****', position='Query'),
  standbyZoneId: string(name='StandbyZoneId', description='This parameter is required.', example='cn-hangzhou-f', position='Query'),
  vpcId: string(name='VpcId', description='This parameter is required.', example='vpc-bp120k6ixs4eog*****', position='Query'),
}

model EvaluateMultiZoneResourceResponseBody = {
  requestId?: string(name='RequestId', example='FB703B69-D4D4-4879-B9FE-6A37F67C46FD'),
  success?: boolean(name='Success', example='true'),
}

model EvaluateMultiZoneResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EvaluateMultiZoneResourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EvaluateMultiZoneResource  EvaluateMultiZoneResourceRequest
  * @return EvaluateMultiZoneResourceResponse
 */
async function evaluateMultiZoneResource(request: EvaluateMultiZoneResourceRequest): EvaluateMultiZoneResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EvaluateMultiZoneResource', 'POST', '/', 'json', false, 'json', request);
}

model GetMultimodeCmsUrlRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='hb-t4naqsay5gn******', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
}

model GetMultimodeCmsUrlResponseBody = {
  clusterId?: string(name='ClusterId', example='hb-t4naqsay5gn******'),
  multimodCmsUrl?: string(name='MultimodCmsUrl', example='htpp://***********'),
  requestId?: string(name='RequestId', example='44183B05-852E-4716-B902-52977140190F'),
}

model GetMultimodeCmsUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMultimodeCmsUrlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetMultimodeCmsUrl  GetMultimodeCmsUrlRequest
  * @return GetMultimodeCmsUrlResponse
 */
async function getMultimodeCmsUrl(request: GetMultimodeCmsUrlRequest): GetMultimodeCmsUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMultimodeCmsUrl', 'POST', '/', 'json', false, 'json', request);
}

model GrantRequest {
  accountName: string(name='AccountName', description='This parameter is required.', example='test01', position='Query'),
  aclActions: string(name='AclActions', description='This parameter is required.', example='READ,WRITE', position='Query'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='ld-bp150tns0sjxs****', position='Query'),
  namespace: string(name='Namespace', description='This parameter is required.', example='default', position='Query'),
  tableName: string(name='TableName', description='This parameter is required.', example='table', position='Query'),
}

model GrantResponseBody = {
  requestId?: string(name='RequestId', example='9CBF8DF0-4931-4A54-9B60-4C6E1AB5****'),
}

model GrantResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GrantResponseBody(name='body'),
}

/**
  * @param request  the request parameters of Grant  GrantRequest
  * @return GrantResponse
 */
async function grant(request: GrantRequest): GrantResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Grant', 'POST', '/', 'json', false, 'json', request);
}

model ListHBaseInstancesRequest {
  vpcId: string(name='VpcId', description='This parameter is required.', example='vpc-t4nx81tmlixcq5i****', position='Query'),
}

model ListHBaseInstancesResponseBody = {
  instances?: {
    instance?: [ 
    {
      instanceId?: string(name='InstanceId', example='hb-t4naqsay5gn****'),
      instanceName?: string(name='InstanceName', example='name_test'),
      isDefault?: boolean(name='IsDefault', example='false'),
    }
  ](name='Instance')
  }(name='Instances'),
  requestId?: string(name='RequestId', example='89F81C30-320B-4550-91DB-C37C81D2358F'),
}

model ListHBaseInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHBaseInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListHBaseInstances  ListHBaseInstancesRequest
  * @return ListHBaseInstancesResponse
 */
async function listHBaseInstances(request: ListHBaseInstancesRequest): ListHBaseInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHBaseInstances', 'POST', '/', 'json', false, 'json', request);
}

model ListInstanceServiceConfigHistoriesRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='hb-t4naqsay5gn******', position='Query'),
  pageNumber?: int32(name='PageNumber', example='10', position='Query'),
  pageSize?: int32(name='PageSize', example='1', position='Query'),
}

model ListInstanceServiceConfigHistoriesResponseBody = {
  configureHistoryList?: {
    config?: [ 
    {
      configureName?: string(name='ConfigureName', example='hbase#hbase-site.xml#hbase.client.keyvalue.maxsize'),
      createTime?: string(name='CreateTime', example='1608708923000'),
      effective?: string(name='Effective', example='false'),
      newValue?: string(name='NewValue', example='10485770'),
      oldValue?: string(name='OldValue', example='10485760'),
    }
  ](name='Config')
  }(name='ConfigureHistoryList'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', example='10'),
  requestId?: string(name='RequestId', example='658C1549-2C02-4FD9-9490-EB3B285F9DCA'),
  totalRecordCount?: long(name='TotalRecordCount', example='1'),
}

model ListInstanceServiceConfigHistoriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstanceServiceConfigHistoriesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListInstanceServiceConfigHistories  ListInstanceServiceConfigHistoriesRequest
  * @return ListInstanceServiceConfigHistoriesResponse
 */
async function listInstanceServiceConfigHistories(request: ListInstanceServiceConfigHistoriesRequest): ListInstanceServiceConfigHistoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstanceServiceConfigHistories', 'POST', '/', 'json', false, 'json', request);
}

model ListInstanceServiceConfigurationsRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='hb-t4naqsay5gn****', position='Query'),
  pageNumber?: int32(name='PageNumber', example='10', position='Query'),
  pageSize?: int32(name='PageSize', example='1', position='Query'),
}

model ListInstanceServiceConfigurationsResponseBody = {
  configureList?: {
    config?: [ 
    {
      configureName?: string(name='ConfigureName', example='hbase#hbase-site.xml#hbase.client.keyvalue.maxsize'),
      configureUnit?: string(name='ConfigureUnit', example='INT'),
      defaultValue?: string(name='DefaultValue', example='10485760'),
      description?: string(name='Description', example='hbase client keyvalue maxsize'),
      needRestart?: string(name='NeedRestart', example='true'),
      runningValue?: string(name='RunningValue', example='10485760'),
      valueRange?: string(name='ValueRange', example='R[10485760,52428800]'),
    }
  ](name='Config')
  }(name='ConfigureList'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageRecordCount?: int32(name='PageRecordCount', example='10'),
  requestId?: string(name='RequestId', example='5B381E36-BCA3-4377-8638-B65C236617D5'),
  totalRecordCount?: long(name='TotalRecordCount', example='42'),
}

model ListInstanceServiceConfigurationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstanceServiceConfigurationsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListInstanceServiceConfigurations  ListInstanceServiceConfigurationsRequest
  * @return ListInstanceServiceConfigurationsResponse
 */
async function listInstanceServiceConfigurations(request: ListInstanceServiceConfigurationsRequest): ListInstanceServiceConfigurationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstanceServiceConfigurations', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', example='NextToken', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceId?: [ string ](name='ResourceId', example='bds-bp15e022622f****', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', example='key1'),
      value?: string(name='Value', example='value1'),
    }
  ](name='Tag', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', example='1d2db86sca4384811e0b5e8707e68****'),
  requestId?: string(name='RequestId', example='74F02441-9A8D-48F6-933F-E317AEB28DBF'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId', example='bds-bp15e022622f****'),
      resourceType?: string(name='ResourceType', example='ALIYUN::MULTIMOD::CLUSTER'),
      tagKey?: string(name='TagKey', example='k1'),
      tagValue?: string(name='TagValue', example='v2'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTagResources  ListTagResourcesRequest
  * @return ListTagResourcesResponse
 */
async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ListTagsRequest {
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-shanghai', position='Query'),
}

model ListTagsResponseBody = {
  requestId?: string(name='RequestId', example='36D1BE9B-3C4A-425B-947A-69E3D77999C4'),
  tags?: {
    tag?: [ 
    {
      tagKey?: string(name='TagKey', example='k1'),
      tagValue?: string(name='TagValue', example='v2'),
    }
  ](name='Tag')
  }(name='Tags'),
}

model ListTagsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTags  ListTagsRequest
  * @return ListTagsResponse
 */
async function listTags(request: ListTagsRequest): ListTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTags', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAccountPasswordRequest {
  accountName: string(name='AccountName', description='This parameter is required.', example='test01', position='Query'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='ld-bp150tns0sjxs****', position='Query'),
  newAccountPassword: string(name='NewAccountPassword', description='This parameter is required.', example='**********', position='Query'),
}

model ModifyAccountPasswordResponseBody = {
  requestId?: string(name='RequestId', example='AFAA617B-3268-5883-982B-DB8EC8CC1F1B'),
}

model ModifyAccountPasswordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAccountPasswordResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyAccountPassword  ModifyAccountPasswordRequest
  * @return ModifyAccountPasswordResponse
 */
async function modifyAccountPassword(request: ModifyAccountPasswordRequest): ModifyAccountPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAccountPassword', 'POST', '/', 'json', false, 'json', request);
}

model ModifyActiveOperationTasksRequest {
  ids: string(name='Ids', description='This parameter is required.', example='1111,2222', position='Query'),
  immediateStart?: int32(name='ImmediateStart', example='1', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  switchTime: string(name='SwitchTime', description='This parameter is required.', example='2022-02-17T18:50:00Z', position='Query'),
}

model ModifyActiveOperationTasksResponseBody = {
  ids?: string(name='Ids', example='1111,2222'),
  requestId?: string(name='RequestId', example='8C9CC46A-9532-4752-B59F-580112C5A45B'),
}

model ModifyActiveOperationTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyActiveOperationTasksResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyActiveOperationTasks  ModifyActiveOperationTasksRequest
  * @return ModifyActiveOperationTasksResponse
 */
async function modifyActiveOperationTasks(request: ModifyActiveOperationTasksRequest): ModifyActiveOperationTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyActiveOperationTasks', 'POST', '/', 'json', false, 'json', request);
}

model ModifyBackupPlanConfigRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='ld-m5eznlga4k5bcxxxx', position='Query'),
  fullBackupCycle: string(name='FullBackupCycle', description='This parameter is required.', example='7', position='Query'),
  minHFileBackupCount: string(name='MinHFileBackupCount', description='This parameter is required.', example='3', position='Query'),
  nextFullBackupDate: string(name='NextFullBackupDate', description='This parameter is required.', example='2020-11-09T18:00:00Z', position='Query'),
  tables: string(name='Tables', description='This parameter is required.', example='*', position='Query'),
}

model ModifyBackupPlanConfigResponseBody = {
  requestId?: string(name='RequestId', example='50F4A8C2-076F-4703-9813-2FCD7FBB91C2'),
}

model ModifyBackupPlanConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyBackupPlanConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyBackupPlanConfig  ModifyBackupPlanConfigRequest
  * @return ModifyBackupPlanConfigResponse
 */
async function modifyBackupPlanConfig(request: ModifyBackupPlanConfigRequest): ModifyBackupPlanConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyBackupPlanConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyBackupPolicyRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='hb-t4naqsay5gn****', position='Query'),
  preferredBackupEndTimeUTC?: string(name='PreferredBackupEndTimeUTC', example='18:00Z', position='Query'),
  preferredBackupPeriod: string(name='PreferredBackupPeriod', description='This parameter is required.', example='Thursday', position='Query'),
  preferredBackupStartTimeUTC?: string(name='PreferredBackupStartTimeUTC', example='17:00Z', position='Query'),
  preferredBackupTime: string(name='PreferredBackupTime', description='This parameter is required.', example='01:00-02:00', position='Query'),
}

model ModifyBackupPolicyResponseBody = {
  requestId?: string(name='RequestId', example='17E3AC63-300D-4B69-9108-45EC20E50E85'),
}

model ModifyBackupPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyBackupPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyBackupPolicy  ModifyBackupPolicyRequest
  * @return ModifyBackupPolicyResponse
 */
async function modifyBackupPolicy(request: ModifyBackupPolicyRequest): ModifyBackupPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyBackupPolicy', 'POST', '/', 'json', false, 'json', request);
}

model ModifyClusterDeletionProtectionRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='ld-****************', position='Query'),
  protection: boolean(name='Protection', description='This parameter is required.', example='true', position='Query'),
}

model ModifyClusterDeletionProtectionResponseBody = {
  requestId?: string(name='RequestId', example='24C80BD8-C710-4138-893A-D2AFED4FC13D'),
}

model ModifyClusterDeletionProtectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyClusterDeletionProtectionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyClusterDeletionProtection  ModifyClusterDeletionProtectionRequest
  * @return ModifyClusterDeletionProtectionResponse
 */
async function modifyClusterDeletionProtection(request: ModifyClusterDeletionProtectionRequest): ModifyClusterDeletionProtectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyClusterDeletionProtection', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDiskWarningLineRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='ld-m5eznlga4k5bcxxxx', position='Query'),
  warningLine: int32(name='WarningLine', description='This parameter is required.', example='80', minimum=0, maximum=100, position='Query'),
}

model ModifyDiskWarningLineResponseBody = {
  requestId?: string(name='RequestId', example='FC4A930D-3AEE-4C9D-BC70-C0F2EEEAA174'),
}

model ModifyDiskWarningLineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDiskWarningLineResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyDiskWarningLine  ModifyDiskWarningLineRequest
  * @return ModifyDiskWarningLineResponse
 */
async function modifyDiskWarningLine(request: ModifyDiskWarningLineRequest): ModifyDiskWarningLineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDiskWarningLine', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceMaintainTimeRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='ld-bp1b**6jco89****', position='Query'),
  maintainEndTime: string(name='MaintainEndTime', description='This parameter is required.', example='06:00Z', position='Query'),
  maintainStartTime: string(name='MaintainStartTime', description='This parameter is required.', example='02:00Z', position='Query'),
}

model ModifyInstanceMaintainTimeResponseBody = {
  requestId?: string(name='RequestId', example='C9085433-A56A-4089-B49A-DF5A4E2B7B06'),
}

model ModifyInstanceMaintainTimeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyInstanceMaintainTimeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyInstanceMaintainTime  ModifyInstanceMaintainTimeRequest
  * @return ModifyInstanceMaintainTimeResponse
 */
async function modifyInstanceMaintainTime(request: ModifyInstanceMaintainTimeRequest): ModifyInstanceMaintainTimeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceMaintainTime', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceNameRequest {
  clientToken?: string(name='ClientToken', example='ETnLKlblzczshOTUbOCz****', position='Query'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='ld-bp150tns0sjxs****', position='Query'),
  clusterName: string(name='ClusterName', description='This parameter is required.', example='testhbaseone', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-f', position='Query'),
}

model ModifyInstanceNameResponseBody = {
  requestId?: string(name='RequestId', example='959DA199-54E5-569D-AD46-92BED8515E62'),
}

model ModifyInstanceNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyInstanceNameResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyInstanceName  ModifyInstanceNameRequest
  * @return ModifyInstanceNameResponse
 */
async function modifyInstanceName(request: ModifyInstanceNameRequest): ModifyInstanceNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceName', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceServiceConfigRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='hb-t4naqsay5gn****', position='Query'),
  configureName: string(name='ConfigureName', description='This parameter is required.', example='hbase#hbase-site.xml#hbase.client.keyvalue.maxsize', position='Query'),
  configureValue: string(name='ConfigureValue', description='This parameter is required.', example='10485770', position='Query'),
  parameters?: string(name='Parameters', example='{"key1=value1", "key2=value2"}', position='Query'),
  restart?: boolean(name='Restart', example='false', position='Query'),
}

model ModifyInstanceServiceConfigResponseBody = {
  requestId?: string(name='RequestId', example='F008B7AB-025D-4C20-AE12-047C8F8C3D97'),
}

model ModifyInstanceServiceConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyInstanceServiceConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyInstanceServiceConfig  ModifyInstanceServiceConfigRequest
  * @return ModifyInstanceServiceConfigResponse
 */
async function modifyInstanceServiceConfig(request: ModifyInstanceServiceConfigRequest): ModifyInstanceServiceConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceServiceConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceTypeRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='hb-bp1x940uh********', position='Query'),
  coreInstanceType?: string(name='CoreInstanceType', example='hbase.sn1.8xlarge', position='Query'),
  masterInstanceType?: string(name='MasterInstanceType', example='hbase.sn1.large', position='Query'),
}

model ModifyInstanceTypeResponseBody = {
  orderId?: string(name='OrderId', example='123412341234123'),
  requestId?: string(name='RequestId', example='3E19E345-101D-4014-946C-****'),
}

model ModifyInstanceTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyInstanceTypeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyInstanceType  ModifyInstanceTypeRequest
  * @return ModifyInstanceTypeResponse
 */
async function modifyInstanceType(request: ModifyInstanceTypeRequest): ModifyInstanceTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceType', 'POST', '/', 'json', false, 'json', request);
}

model ModifyIpWhitelistRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='ld-bp1uoihlf82e8****', position='Query'),
  groupName: string(name='GroupName', description='This parameter is required.', example='group_01', position='Query'),
  ipList?: string(name='IpList', example='42.120.XX.XX', position='Query'),
  ipVersion: string(name='IpVersion', description='This parameter is required.', example='4', position='Query'),
}

model ModifyIpWhitelistResponseBody = {
  requestId?: string(name='RequestId', example='101CFA8A-FB88-5014-A10C-3A0DA9AD8B0B'),
}

model ModifyIpWhitelistResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyIpWhitelistResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyIpWhitelist  ModifyIpWhitelistRequest
  * @return ModifyIpWhitelistResponse
 */
async function modifyIpWhitelist(request: ModifyIpWhitelistRequest): ModifyIpWhitelistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyIpWhitelist', 'POST', '/', 'json', false, 'json', request);
}

model ModifyMultiZoneClusterNodeTypeRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='ld-dj45g7d6rbrd****', position='Query'),
  coreInstanceType?: string(name='CoreInstanceType', example='hbase.sn1.large', position='Query'),
  logInstanceType?: string(name='LogInstanceType', example='hbase.sn1.2xlarge', position='Query'),
  masterInstanceType?: string(name='MasterInstanceType', example='hbase.sn1.8xlarge', position='Query'),
}

model ModifyMultiZoneClusterNodeTypeResponseBody = {
  orderId?: string(name='OrderId', example='12341234123****'),
  requestId?: string(name='RequestId', example='06CF7A6F-A81C-431D-BACD-793F24A67C54'),
}

model ModifyMultiZoneClusterNodeTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyMultiZoneClusterNodeTypeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyMultiZoneClusterNodeType  ModifyMultiZoneClusterNodeTypeRequest
  * @return ModifyMultiZoneClusterNodeTypeResponse
 */
async function modifyMultiZoneClusterNodeType(request: ModifyMultiZoneClusterNodeTypeRequest): ModifyMultiZoneClusterNodeTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyMultiZoneClusterNodeType', 'POST', '/', 'json', false, 'json', request);
}

model ModifySecurityGroupsRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='hb-bp16f1441y6p2kv**', position='Query'),
  securityGroupIds: string(name='SecurityGroupIds', description='This parameter is required.', example='sg-t4ng4yyc916o81nu****,sg-x4gg4dyc9d6w********', position='Query'),
}

model ModifySecurityGroupsResponseBody = {
  requestId?: string(name='RequestId', example='F4AD2E65-482B-46B6-942E-765989B1C8A3'),
}

model ModifySecurityGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifySecurityGroupsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifySecurityGroups  ModifySecurityGroupsRequest
  * @return ModifySecurityGroupsResponse
 */
async function modifySecurityGroups(request: ModifySecurityGroupsRequest): ModifySecurityGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySecurityGroups', 'POST', '/', 'json', false, 'json', request);
}

model ModifyUIAccountPasswordRequest {
  accountName: string(name='AccountName', description='This parameter is required.', example='test01', position='Query'),
  accountPassword: string(name='AccountPassword', description='This parameter is required.', example='**********', position='Query'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='ld-bp150tns0sjxs****', position='Query'),
}

model ModifyUIAccountPasswordResponseBody = {
  requestId?: string(name='RequestId', example='BED4ADEB-4EA9-507E-892C-84112D6AC7C1'),
}

model ModifyUIAccountPasswordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyUIAccountPasswordResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyUIAccountPassword  ModifyUIAccountPasswordRequest
  * @return ModifyUIAccountPasswordResponse
 */
async function modifyUIAccountPassword(request: ModifyUIAccountPasswordRequest): ModifyUIAccountPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyUIAccountPassword', 'POST', '/', 'json', false, 'json', request);
}

model MoveResourceGroupRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='ld-bp169l540vc6c****', position='Query'),
  newResourceGroupId: string(name='NewResourceGroupId', description='This parameter is required.', example='rg-aekzrk6zzsy****', position='Query'),
}

model MoveResourceGroupResponseBody = {
  requestId?: string(name='RequestId', example='8CD9BFBC-D575-5FCC-BA7E-956BF0D0****'),
}

model MoveResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MoveResourceGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of MoveResourceGroup  MoveResourceGroupRequest
  * @return MoveResourceGroupResponse
 */
async function moveResourceGroup(request: MoveResourceGroupRequest): MoveResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MoveResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model OpenBackupRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='hb-t4naqsay5gn******', position='Query'),
}

model OpenBackupResponseBody = {
  requestId?: string(name='RequestId', example='C977DF60-7D06-4E34-A27D-8BC696C5112A'),
}

model OpenBackupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OpenBackupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of OpenBackup  OpenBackupRequest
  * @return OpenBackupResponse
 */
async function openBackup(request: OpenBackupRequest): OpenBackupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenBackup', 'POST', '/', 'json', false, 'json', request);
}

model PurgeInstanceRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='hb-m5ek15uzs7613xxxx', position='Query'),
}

model PurgeInstanceResponseBody = {
  requestId?: string(name='RequestId', example='276F899F-E952-496F-81B8-BD46D86854E3'),
}

model PurgeInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PurgeInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PurgeInstance  PurgeInstanceRequest
  * @return PurgeInstanceResponse
 */
async function purgeInstance(request: PurgeInstanceRequest): PurgeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PurgeInstance', 'POST', '/', 'json', false, 'json', request);
}

model QueryHBaseHaDBRequest {
  bdsId: string(name='BdsId', description='This parameter is required.', example='bds-t4n3496whj23ia4k', position='Query'),
}

model QueryHBaseHaDBResponseBody = {
  clusterList?: {
    cluster?: [ 
    {
      activeName?: string(name='ActiveName', example='hb-t4nn7dy1u1etbzmzm'),
      bdsName?: string(name='BdsName', description='bdsId', example='bds-t4n3496whj23ia4k'),
      haName?: string(name='HaName', example='ha-v21tmnxjwh2yuy1il'),
      haSlbConnList?: {
        haSlbConn?: [ 
        {
          hbaseType?: string(name='HbaseType', example='Standby'),
          slbConnAddr?: string(name='SlbConnAddr', example='ha-v21tmnxjwh2yuy1il-phoenix.bds.9b78df04-b.rds.aliyuncs.com:8765'),
          slbType?: string(name='SlbType', example='phoenix'),
        }
      ](name='HaSlbConn')
      }(name='HaSlbConnList'),
      standbyName?: string(name='StandbyName', example='hb-t4n0ye37832tx22vz'),
    }
  ](name='Cluster')
  }(name='ClusterList'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='963355AD-A3B1-4654-AFFC-B5186EB8F889'),
  totalCount?: long(name='TotalCount', example='1'),
}

model QueryHBaseHaDBResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryHBaseHaDBResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryHBaseHaDB  QueryHBaseHaDBRequest
  * @return QueryHBaseHaDBResponse
 */
async function queryHBaseHaDB(request: QueryHBaseHaDBRequest): QueryHBaseHaDBResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryHBaseHaDB', 'POST', '/', 'json', false, 'json', request);
}

model QueryXpackRelateDBRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='ap-bp1qtz9rcbbt3p6ng', position='Query'),
  hasSingleNode?: boolean(name='HasSingleNode', example='false', position='Query'),
  relateDbType: string(name='RelateDbType', description='This parameter is required.', example='hbase', position='Query'),
}

model QueryXpackRelateDBResponseBody = {
  clusterList?: {
    cluster?: [ 
    {
      clusterId?: string(name='ClusterId', example='hb-bp16o0pd52e3y582s'),
      clusterName?: string(name='ClusterName', example='hbase_test'),
      DBType?: string(name='DBType', example='hbase'),
      DBVersion?: string(name='DBVersion', example='2.0'),
      isRelated?: boolean(name='IsRelated', example='false'),
      lockMode?: string(name='LockMode', example='..'),
      status?: string(name='Status', example='ACTIVATION'),
    }
  ](name='Cluster')
  }(name='ClusterList'),
  requestId?: string(name='RequestId', example='288E9010-36DD-499C-B4DA-61E4362DA4CC'),
}

model QueryXpackRelateDBResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryXpackRelateDBResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryXpackRelateDB  QueryXpackRelateDBRequest
  * @return QueryXpackRelateDBResponse
 */
async function queryXpackRelateDB(request: QueryXpackRelateDBRequest): QueryXpackRelateDBResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryXpackRelateDB', 'POST', '/', 'json', false, 'json', request);
}

model RelateDbForHBaseHaRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='bds-t4nj9v2x85******', position='Query'),
  haActive: string(name='HaActive', description='This parameter is required.', example='hb-bp1w6krp539******', position='Query'),
  haActiveClusterKey?: string(name='HaActiveClusterKey', example='hb-t4naqsay5gn******-master1-001.hbase.singapore.rds.aliyuncs.com,hb-t4naqsay5gn******-master3-001.hbase.singapore.rds.aliyuncs.com,hb-t4naqsay5gn******-master2-001.hbase.singapore.rds.aliyuncs.com:2181:/hbase', position='Query'),
  haActiveDBType: string(name='HaActiveDBType', description='This parameter is required.', example='hbase', position='Query'),
  haActiveHbaseFsDir?: string(name='HaActiveHbaseFsDir', example='/hbase', position='Query'),
  haActiveHdfsUri?: string(name='HaActiveHdfsUri', example='hdfs://hb-t4naqsay5gn******-master1-001.hbase.rds.aliyuncs.com:8020,hb-t4naqsay5gn******-master2-001.hbase.rds.aliyuncs.com:8020', position='Query'),
  haActivePassword?: string(name='HaActivePassword', example='root', position='Query'),
  haActiveUser?: string(name='HaActiveUser', example='root', position='Query'),
  haActiveVersion?: string(name='HaActiveVersion', example='HBase2x', position='Query'),
  haMigrateType: string(name='HaMigrateType', description='This parameter is required.', example='CLUSTER', position='Query'),
  haStandby: string(name='HaStandby', description='This parameter is required.', example='hb-bp1bl7iqzka******', position='Query'),
  haStandbyClusterKey?: string(name='HaStandbyClusterKey', example='hb-bp1w6krp539******-master1-001.hbase.singapore.rds.aliyuncs.com,hb-bp1w6krp539******-master3-001.hbase.singapore.rds.aliyuncs.com,hb-t4naqsay5gn******-master2-001.hbase.singapore.rds.aliyuncs.com:2181:/hbase', position='Query'),
  haStandbyDBType: string(name='HaStandbyDBType', description='This parameter is required.', example='hbase', position='Query'),
  haStandbyHbaseFsDir?: string(name='HaStandbyHbaseFsDir', example='/hbase', position='Query'),
  haStandbyHdfsUri?: string(name='HaStandbyHdfsUri', example='hdfs://hb-bp1w6krp539******-master1-001.hbase.rds.aliyuncs.com:8020,hb-bp1w6krp539******-master2-001.hbase.rds.aliyuncs.com:8020', position='Query'),
  haStandbyPassword?: string(name='HaStandbyPassword', example='root', position='Query'),
  haStandbyUser?: string(name='HaStandbyUser', example='root', position='Query'),
  haStandbyVersion?: string(name='HaStandbyVersion', example='HBase2x', position='Query'),
  haTables?: string(name='HaTables', example='test,test1', position='Query'),
  isActiveStandard: boolean(name='IsActiveStandard', description='This parameter is required.', example='true', position='Query'),
  isStandbyStandard: boolean(name='IsStandbyStandard', description='This parameter is required.', example='true', position='Query'),
}

model RelateDbForHBaseHaResponseBody = {
  requestId?: string(name='RequestId', example='DC654531-0799-4502-AFA5-80EE1C16829A'),
}

model RelateDbForHBaseHaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RelateDbForHBaseHaResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RelateDbForHBaseHa  RelateDbForHBaseHaRequest
  * @return RelateDbForHBaseHaResponse
 */
async function relateDbForHBaseHa(request: RelateDbForHBaseHaRequest): RelateDbForHBaseHaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RelateDbForHBaseHa', 'POST', '/', 'json', false, 'json', request);
}

model ReleasePublicNetworkAddressRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='hb-t4naqsay5gn******', position='Query'),
}

model ReleasePublicNetworkAddressResponseBody = {
  requestId?: string(name='RequestId', example='B18D4390-A968-4444-B323-4360B8E5DA3E'),
}

model ReleasePublicNetworkAddressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReleasePublicNetworkAddressResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ReleasePublicNetworkAddress  ReleasePublicNetworkAddressRequest
  * @return ReleasePublicNetworkAddressResponse
 */
async function releasePublicNetworkAddress(request: ReleasePublicNetworkAddressRequest): ReleasePublicNetworkAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleasePublicNetworkAddress', 'POST', '/', 'json', false, 'json', request);
}

model RenewInstanceRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='hb-bp1u0639js2h7****', position='Query'),
  duration: int32(name='Duration', description='This parameter is required.', example='5', position='Query'),
  pricingCycle: string(name='PricingCycle', description='This parameter is required.', example='month', position='Query'),
}

model RenewInstanceResponseBody = {
  orderId?: long(name='OrderId', example='211235614240728'),
  requestId?: string(name='RequestId', example='729CB2A7-3065-53A9-B27C-7033CA4881D9'),
}

model RenewInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenewInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RenewInstance  RenewInstanceRequest
  * @return RenewInstanceResponse
 */
async function renewInstance(request: RenewInstanceRequest): RenewInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenewInstance', 'POST', '/', 'json', false, 'json', request);
}

model ResizeColdStorageSizeRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='ld-bp169l540vc6c****', position='Query'),
  coldStorageSize: int32(name='ColdStorageSize', description='This parameter is required.', example='900', minimum=0, maximum=100000000, position='Query'),
}

model ResizeColdStorageSizeResponseBody = {
  orderId?: string(name='OrderId', example='21711518427****'),
  requestId?: string(name='RequestId', example='5AA6F80E-535C-5611-BD13-3832D96A4D0E'),
}

model ResizeColdStorageSizeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResizeColdStorageSizeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ResizeColdStorageSize  ResizeColdStorageSizeRequest
  * @return ResizeColdStorageSizeResponse
 */
async function resizeColdStorageSize(request: ResizeColdStorageSizeRequest): ResizeColdStorageSizeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResizeColdStorageSize', 'POST', '/', 'json', false, 'json', request);
}

model ResizeDiskSizeRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='hb-bp16o0pd52e3y****', position='Query'),
  nodeDiskSize: int32(name='NodeDiskSize', description='This parameter is required.', example='120', position='Query'),
}

model ResizeDiskSizeResponseBody = {
  orderId?: string(name='OrderId', example='3C22622B-8555-42BF-AD8A-1B960743****'),
  requestId?: string(name='RequestId', example='493A762B-E4A6-44E9-B877-CA6D0CAF8B29'),
}

model ResizeDiskSizeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResizeDiskSizeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ResizeDiskSize  ResizeDiskSizeRequest
  * @return ResizeDiskSizeResponse
 */
async function resizeDiskSize(request: ResizeDiskSizeRequest): ResizeDiskSizeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResizeDiskSize', 'POST', '/', 'json', false, 'json', request);
}

model ResizeMultiZoneClusterDiskSizeRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='ld-f5d6vc2r8d6****', position='Query'),
  coreDiskSize?: int32(name='CoreDiskSize', example='480', minimum=400, maximum=64000, position='Query'),
  logDiskSize?: int32(name='LogDiskSize', example='440', minimum=400, maximum=64000, position='Query'),
}

model ResizeMultiZoneClusterDiskSizeResponseBody = {
  orderId?: string(name='OrderId', example='123412341****'),
  requestId?: string(name='RequestId', example='568339C4-9F71-43D0-994E-E039CD826E56'),
}

model ResizeMultiZoneClusterDiskSizeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResizeMultiZoneClusterDiskSizeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ResizeMultiZoneClusterDiskSize  ResizeMultiZoneClusterDiskSizeRequest
  * @return ResizeMultiZoneClusterDiskSizeResponse
 */
async function resizeMultiZoneClusterDiskSize(request: ResizeMultiZoneClusterDiskSizeRequest): ResizeMultiZoneClusterDiskSizeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResizeMultiZoneClusterDiskSize', 'POST', '/', 'json', false, 'json', request);
}

model ResizeMultiZoneClusterNodeCountRequest {
  arbiterVSwitchId?: string(name='ArbiterVSwitchId', example='vsw-hangxzhouxb*****', position='Query'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='ld-f5d8d6s4s2a1****', position='Query'),
  coreNodeCount?: int32(name='CoreNodeCount', example='6', minimum=2, maximum=1000, position='Query'),
  logNodeCount?: int32(name='LogNodeCount', example='8', minimum=4, maximum=500, position='Query'),
  primaryCoreNodeCount?: int32(name='PrimaryCoreNodeCount', example='6', minimum=1, maximum=750, position='Query'),
  primaryVSwitchId?: string(name='PrimaryVSwitchId', example='vsw-hangxzhouxe*****', position='Query'),
  standbyCoreNodeCount?: int32(name='StandbyCoreNodeCount', example='6', minimum=1, maximum=750, position='Query'),
  standbyVSwitchId?: string(name='StandbyVSwitchId', example='vsw-hangxzhouxf****', position='Query'),
}

model ResizeMultiZoneClusterNodeCountResponseBody = {
  orderId?: string(name='OrderId', example='1234123412****'),
  requestId?: string(name='RequestId', example='E2B7E9DA-1575-4B9D-A0E4-9468BAC'),
}

model ResizeMultiZoneClusterNodeCountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResizeMultiZoneClusterNodeCountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ResizeMultiZoneClusterNodeCount  ResizeMultiZoneClusterNodeCountRequest
  * @return ResizeMultiZoneClusterNodeCountResponse
 */
async function resizeMultiZoneClusterNodeCount(request: ResizeMultiZoneClusterNodeCountRequest): ResizeMultiZoneClusterNodeCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResizeMultiZoneClusterNodeCount', 'POST', '/', 'json', false, 'json', request);
}

model ResizeNodeCountRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='hb-bp16o0pd52e3y****', position='Query'),
  nodeCount: int32(name='NodeCount', description='This parameter is required.', example='5', position='Query'),
  vSwitchId?: string(name='VSwitchId', example='vsw-bp191otqj1ssyl****', position='Query'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-f', position='Query'),
}

model ResizeNodeCountResponseBody = {
  orderId?: string(name='OrderId', example='20470860005****'),
  requestId?: string(name='RequestId', example='B288B41F-6681-42A6-8905-47C3C42B19B0'),
}

model ResizeNodeCountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResizeNodeCountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ResizeNodeCount  ResizeNodeCountRequest
  * @return ResizeNodeCountResponse
 */
async function resizeNodeCount(request: ResizeNodeCountRequest): ResizeNodeCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResizeNodeCount', 'POST', '/', 'json', false, 'json', request);
}

model RestartInstanceRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='ld-bp150tns0sjxs****', position='Query'),
  components?: string(name='Components', example='THRIFT', position='Query'),
}

model RestartInstanceResponseBody = {
  requestId?: string(name='RequestId', example='F744E939-D08D-5623-82C8-9D1F9F7685D1'),
}

model RestartInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RestartInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RestartInstance  RestartInstanceRequest
  * @return RestartInstanceResponse
 */
async function restartInstance(request: RestartInstanceRequest): RestartInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RestartInstance', 'POST', '/', 'json', false, 'json', request);
}

model RevokeRequest {
  accountName: string(name='AccountName', description='This parameter is required.', example='test01', position='Query'),
  aclActions: string(name='AclActions', description='This parameter is required.', example='READ,WRITE', position='Query'),
  clusterId: string(name='ClusterId', description='This parameter is required.', example='ld-bp150tns0sjxs****', position='Query'),
  namespace: string(name='Namespace', description='This parameter is required.', example='default', position='Query'),
  tableName: string(name='TableName', description='This parameter is required.', example='table', position='Query'),
}

model RevokeResponseBody = {
  requestId?: string(name='RequestId', example='C9085433-A56A-4089-B49A-DF5A4E2B7B06'),
}

model RevokeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RevokeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of Revoke  RevokeRequest
  * @return RevokeResponse
 */
async function revoke(request: RevokeRequest): RevokeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Revoke', 'POST', '/', 'json', false, 'json', request);
}

model SwitchHbaseHaSlbRequest {
  bdsId: string(name='BdsId', description='This parameter is required.', example='bds-t4n3496whj23ia4k', position='Query'),
  haId: string(name='HaId', description='This parameter is required.', example='ha-v21tmnxjwh2yuy1il', position='Query'),
  haTypes: string(name='HaTypes', description='This parameter is required.', example='thrift', position='Query'),
  hbaseType: string(name='HbaseType', description='This parameter is required.', example='Active', position='Query'),
}

model SwitchHbaseHaSlbResponseBody = {
  requestId?: string(name='RequestId', example='C9D568D9-A59C-4AF2-8FBB-F086A841D58E'),
}

model SwitchHbaseHaSlbResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SwitchHbaseHaSlbResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SwitchHbaseHaSlb  SwitchHbaseHaSlbRequest
  * @return SwitchHbaseHaSlbResponse
 */
async function switchHbaseHaSlb(request: SwitchHbaseHaSlbRequest): SwitchHbaseHaSlbResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SwitchHbaseHaSlb', 'POST', '/', 'json', false, 'json', request);
}

model SwitchServiceRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='ld-uf6r2hn2zrxxxxxx', position='Query'),
  operate: string(name='Operate', description='This parameter is required.', example='open', position='Query'),
  serviceName: string(name='ServiceName', description='This parameter is required.', example='HBaseProxy', position='Query'),
}

model SwitchServiceResponseBody = {
  requestId?: string(name='RequestId', example='F1005DE4-D981-559F-9E37-5172DXXXXXX'),
}

model SwitchServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SwitchServiceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SwitchService  SwitchServiceRequest
  * @return SwitchServiceResponse
 */
async function switchService(request: SwitchServiceRequest): SwitchServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SwitchService', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', description='This parameter is required.', example='bds-bp15e022622fk0w1', position='Query'),
  tag: [ 
    {
      key?: string(name='Key', example='key1'),
      value?: string(name='Value', example='value1'),
    }
  ](name='Tag', description='This parameter is required.', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='2656FA19-6059-40C8-A157-3FFBEAEC2369'),
}

model TagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of TagResources  TagResourcesRequest
  * @return TagResourcesResponse
 */
async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UnTagResourcesRequest {
  all?: boolean(name='All', example='true', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', description='This parameter is required.', example='bds-bp15e022622fk0w1', position='Query'),
  tagKey?: [ string ](name='TagKey', example='key1', position='Query'),
}

model UnTagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='9CBF8DF0-4931-4A54-9B60-4C6E1AB59286'),
}

model UnTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnTagResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UnTagResources  UnTagResourcesRequest
  * @return UnTagResourcesResponse
 */
async function unTagResources(request: UnTagResourcesRequest): UnTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnTagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeMinorVersionRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='hb-t4naqsay5gn****', position='Query'),
  components?: string(name='Components', example='HADOOP', position='Query'),
}

model UpgradeMinorVersionResponseBody = {
  requestId?: string(name='RequestId', example='7B8EC240-BB13-4DBC-B955-F90170E82609'),
  upgradingComponents?: string(name='UpgradingComponents', example='HADOOP'),
}

model UpgradeMinorVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpgradeMinorVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpgradeMinorVersion  UpgradeMinorVersionRequest
  * @return UpgradeMinorVersionResponse
 */
async function upgradeMinorVersion(request: UpgradeMinorVersionRequest): UpgradeMinorVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeMinorVersion', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeMultiZoneClusterRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='ld-***************', position='Query'),
  components: string(name='Components', description='This parameter is required.', example='LINDORM', position='Query'),
  restartComponents?: string(name='RestartComponents', example='LPROXY', position='Query'),
  runMode?: string(name='RunMode', example='serial', position='Query'),
  upgradeInsName?: string(name='UpgradeInsName', example='ld-t4n40m3171t4******-az-b', position='Query'),
  versions?: string(name='Versions', example='t-apsara-lindorm-2.1.20-20200518175539.alios7.x86_64', position='Query'),
}

model UpgradeMultiZoneClusterResponseBody = {
  requestId?: string(name='RequestId', example='C532A4D4-9451-4460-BB3E-300FEC852D3F'),
  upgradingComponents?: string(name='UpgradingComponents', example='LINDORM'),
}

model UpgradeMultiZoneClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpgradeMultiZoneClusterResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpgradeMultiZoneCluster  UpgradeMultiZoneClusterRequest
  * @return UpgradeMultiZoneClusterResponse
 */
async function upgradeMultiZoneCluster(request: UpgradeMultiZoneClusterRequest): UpgradeMultiZoneClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeMultiZoneCluster', 'POST', '/', 'json', false, 'json', request);
}

model XpackRelateDBRequest {
  clusterId: string(name='ClusterId', description='This parameter is required.', example='ap-bp1qtz9rcbbt3****', position='Query'),
  dbClusterIds: string(name='DbClusterIds', description='This parameter is required.', example='hb-bp16o0pd52e3****', position='Query'),
  relateDbType: string(name='RelateDbType', description='This parameter is required.', example='hbase', position='Query'),
}

model XpackRelateDBResponseBody = {
  requestId?: string(name='RequestId', example='50373857-C47B-4B64-9332-D0B5280B59EA'),
}

model XpackRelateDBResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: XpackRelateDBResponseBody(name='body'),
}

/**
  * @param request  the request parameters of XpackRelateDB  XpackRelateDBRequest
  * @return XpackRelateDBResponse
 */
async function xpackRelateDB(request: XpackRelateDBRequest): XpackRelateDBResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'XpackRelateDB', 'POST', '/', 'json', false, 'json', request);
}

