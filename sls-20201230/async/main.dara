/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Sls';
  @version = '2020-12-30';
  @endpointRule = 'central';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ConsumerGroup {
  name?: string(name='name', example='test-group'),
  order?: boolean(name='order', example='false'),
  timeout?: int32(name='timeout', example='300'),
}

model EncryptConf {
  enable: boolean(name='enable'),
  encryptType?: string(name='encrypt_type', example='default'),
  userCmkInfo?: EncryptUserCmkConf(name='user_cmk_info'),
}

model EncryptUserCmkConf {
  arn: string(name='arn'),
  cmkKeyId: string(name='cmk_key_id'),
  regionId: string(name='region_id'),
}

model Histogram {
  count?: long(name='count'),
  from?: int32(name='from'),
  progress?: string(name='progress'),
  to?: int32(name='to'),
}

model LogContent {
  key: string(name='Key', example='key-test'),
  value: string(name='Value', example='value-test'),
}

model LogGroup {
  logTags: LogTag(name='LogTags'),
  logs: LogItem(name='Logs'),
  source?: string(name='Source', example='192.1.1.1'),
  topic?: string(name='Topic', example='topic-test'),
}

model LogItem {
  contents: [
    LogContent
  ](name='Contents'),
  time: long(name='Time', example='1690254376'),
}

model LogTag {
  key: string(name='Key', example='key-test'),
  value: string(name='Value', example='value-test'),
}

model LogtailConfig {
  configName: string(name='configName', example='test-config'),
  createTime?: long(name='createTime', example='1655176807'),
  inputDetail: map[string]any(name='inputDetail'),
  inputType: string(name='inputType', example='file'),
  lastModifyTime?: long(name='lastModifyTime', example='1655176807'),
  logSample?: string(name='logSample', example='2022-06-14 11:13:29.796 | DEBUG    | __main__:<module>:1 - hello world'),
  outputDetail: {
    endpoint: string(name='endpoint', example='cn-hangzhou-intranet.log.aliyuncs.com'),
    logstoreName: string(name='logstoreName', example='test-logstore'),
    region?: string(name='region', example='cn-hangzhou'),
  }(name='outputDetail'),
  outputType: string(name='outputType', example='LogService'),
}

model LogtailPipelineConfig {
  aggregators?: [  map[string]any ](name='aggregators'),
  configName: string(name='configName', example='test-config'),
  createTime?: long(name='createTime', example='1655176807'),
  flushers: [  map[string]any ](name='flushers'),
  global?: map[string]any(name='global'),
  inputs: [  map[string]any ](name='inputs'),
  lastModifyTime?: long(name='lastModifyTime', example='1655176807'),
  logSample?: string(name='logSample'),
  processors?: [  map[string]any ](name='processors'),
}

model SavedSearch {
  displayName: string(name='displayName'),
  logstore: string(name='logstore'),
  savedsearchName: string(name='savedsearchName'),
  searchQuery: string(name='searchQuery'),
  topic?: string(name='topic'),
}

model Chart {
  action: map[string]any(name='action'),
  display: map[string]any(name='display'),
  search: map[string]any(name='search'),
  title: string(name='title', example='my-chart'),
  type: string(name='type', example='linepro'),
}

model Dashboard {
  attribute?: map[string]string(name='attribute'),
  charts: [
    Chart
  ](name='charts'),
  dashboardName: string(name='dashboardName', example='dashboard-1609294922657-434834'),
  description?: string(name='description', example='这是一个仪表盘。'),
  displayName: string(name='displayName', example='test-alert'),
}

model EtlJob {
  enable: boolean(name='enable', example='true'),
  etlJobName: string(name='etlJobName'),
  functionConfig: {
    accountId?: string(name='accountId'),
    endpoint?: string(name='endpoint'),
    functionName?: string(name='functionName', example='hello-wrold'),
    functionProvider: string(name='functionProvider', example='FunctionCompute'),
    regionName?: string(name='regionName', example='cn-hangzhou'),
    roleArn?: string(name='roleArn'),
    serviceName?: string(name='serviceName', example='my-service'),
  }(name='functionConfig'),
  functionParameter: map[string]any(name='functionParameter'),
  logConfig: {
    endpoint: string(name='endpoint'),
    logstoreName: string(name='logstoreName'),
    projectName: string(name='projectName'),
  }(name='logConfig'),
  sourceConfig: {
    logstoreName: string(name='logstoreName', example='my-logstore'),
  }(name='sourceConfig'),
  triggerConfig: {
    maxRetryTime: int32(name='maxRetryTime'),
    roleArn: string(name='roleArn'),
    startingPosition?: string(name='startingPosition', example='at-unixtime'),
    startingUnixtime?: long(name='startingUnixtime', example='当 strtingPosition 为 at-unixtime 时生效'),
    triggerInterval: int32(name='triggerInterval'),
  }(name='triggerConfig'),
}

model EtlMeta {
  enable: boolean(name='enable'),
  etlMetaKey: string(name='etlMetaKey'),
  etlMetaName: string(name='etlMetaName'),
  etlMetaTag?: string(name='etlMetaTag'),
  etlMetaValue?: string(name='etlMetaValue'),
}

model ExternalStore {
  externalStoreName: string(name='externalStoreName', example='rds_store'),
  parameter: map[string]any(name='parameter'),
  storeType: string(name='storeType', example='rds-vpc'),
}

model Index {
  keys?: map[string]IndexKeysValue(name='keys'),
  lastModifyTime?: long(name='lastModifyTime', example='1622186280'),
  line?: {
    caseSensitive?: boolean(name='caseSensitive', example='true'),
    chn?: boolean(name='chn', example='true'),
    excludeKeys?: [ string ](name='exclude_keys'),
    includeKeys?: [ string ](name='include_keys'),
    token: [ string ](name='token'),
  }(name='line'),
  logReduce?: boolean(name='log_reduce', example='true'),
  logReduceBlackList?: [ string ](name='log_reduce_black_list'),
  logReduceWhiteList?: [ string ](name='log_reduce_white_list'),
  maxTextLen?: int32(name='max_text_len', example='2048'),
  ttl: int32(name='ttl', example='30'),
}

model Logging {
  loggingDetails: [ 
    {
      logstore: string(name='logstore', example='my-logstore'),
      type: string(name='type', example='consumergroup_log'),
    }
  ](name='loggingDetails'),
  loggingProject: string(name='loggingProject', example='my-project'),
}

model Logstore {
  appendMeta?: boolean(name='appendMeta', example='true'),
  autoSplit?: boolean(name='autoSplit', example='true'),
  createTime?: int32(name='createTime'),
  enableTracking?: boolean(name='enable_tracking', example='false'),
  encryptConf?: EncryptConf(name='encrypt_conf'),
  hotTtl?: int32(name='hot_ttl'),
  lastModifyTime?: int32(name='lastModifyTime'),
  logstoreName: string(name='logstoreName', example='my-logstore'),
  maxSplitShard?: int32(name='maxSplitShard', example='2'),
  mode?: string(name='mode', example='standard'),
  productType?: string(name='productType'),
  shardCount: int32(name='shardCount', example='2'),
  telemetryType?: string(name='telemetryType'),
  ttl: int32(name='ttl', example='30'),
}

model Machine {
  ip?: string(name='ip', example='192.168.x.x'),
  lastHeartbeatTime?: long(name='lastHeartbeatTime', example='1657509674'),
  machineUniqueid?: string(name='machine-uniqueid', example='3B70F4F1-80F7-46C4-A6C1-100D66C***47'),
  userdefinedId?: string(name='userdefined-id', example='test'),
}

model MachineGroup {
  groupAttribute?: {
    externalName?: string(name='externalName', example='test-group'),
    groupTopic?: string(name='groupTopic', example='test-topic'),
  }(name='groupAttribute'),
  groupName: string(name='groupName', example='test-group'),
  groupType?: string(name='groupType'),
  machineIdentifyType: string(name='machineIdentifyType', example='ip'),
  machineList: [ string ](name='machineList'),
}

model Project {
  createTime?: string(name='createTime'),
  description: string(name='description'),
  lastModifyTime?: string(name='lastModifyTime'),
  owner?: string(name='owner'),
  projectName: string(name='projectName'),
  region?: string(name='region'),
  resourceGroupId?: string(name='resourceGroupId'),
  status?: string(name='status'),
}

model Shard {
  createTime?: int32(name='createTime', example='1453949705'),
  exclusiveEndKey?: string(name='exclusiveEndKey', example='8000000000000000000000000000000'),
  inclusiveBeginKey?: string(name='inclusiveBeginKey', example='00000000000000000000000000000000'),
  shardID?: int32(name='shardID', example='0'),
  status?: string(name='status', example='readwrite'),
}

model ApplyConfigToMachineGroupRequest {
  project: string(name='project', description='Project名称。', example='ali-test-project', position='Host'),
  machineGroup: string(name='machineGroup', example='sample-group', position='Path'),
  configName: string(name='configName', example='logtail-config-sample', position='Path'),
}

model ApplyConfigToMachineGroupResponse = {
  headers: map[string]string(name='headers'),
}

async function applyConfigToMachineGroup(request: ApplyConfigToMachineGroupRequest): ApplyConfigToMachineGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ApplyConfigToMachineGroup', 'PUT', '/machinegroups/{machineGroup}/configs/{configName}', 'json', false, 'json', request);
}

model ChangeResourceGroupRequest {
  project?: string(name='project', example='ali-test-project', position='Host'),
  resourceGroupId: string(name='resourceGroupId', example='rg-aek2i7nhaxifxey', position='Body'),
  resourceId: string(name='resourceId', example='ali-test-project', position='Body'),
  resourceType?: string(name='resourceType', example='PROJECT', position='Body'),
}

model ChangeResourceGroupResponse = {
  headers: map[string]string(name='headers'),
}

async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ChangeResourceGroup', 'PUT', '/resourcegroup', 'none', false, 'json', request);
}

model ConsumerGroupHeartBeatRequest {
  project: string(name='project', position='Host'),
  logstore: string(name='logstore', example='ali-test-logstore', position='Path'),
  consumerGroup: string(name='consumerGroup', example='consumer_group_test', position='Path'),
  body: [ int32 ](name='body', position='Body'),
  consumer: string(name='consumer', example='consumer_1', position='Query'),
}

model ConsumerGroupHeartBeatResponse = {
  headers: map[string]string(name='headers'),
  body: [ int32 ](name='body'),
}

async function consumerGroupHeartBeat(request: ConsumerGroupHeartBeatRequest): ConsumerGroupHeartBeatResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ConsumerGroupHeartBeat', 'POST', '/logstores/{logstore}/consumergroups/{consumerGroup}?type=heartbeat', 'json', false, 'json', request);
}

model CreateConfigRequest {
  project: string(name='project', position='Host'),
  body?: LogtailConfig(name='body', position='Body'),
}

model CreateConfigResponse = {
  headers: map[string]string(name='headers'),
}

async function createConfig(request: CreateConfigRequest): CreateConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateConfig', 'POST', '/configs', 'none', false, 'json', request);
}

model CreateConsumerGroupRequest {
  logstore: string(name='logstore', example='aliyun-test-logstore', position='Path'),
  project: string(name='project', description='Project名称。', example='aliyun-test-project', position='Host'),
  consumerGroup: string(name='consumerGroup', example='consumerGroupX', position='Body'),
  order: boolean(name='order', example='true', position='Body'),
  timeout: int32(name='timeout', example='300', position='Body'),
}

model CreateConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
}

async function createConsumerGroup(request: CreateConsumerGroupRequest): CreateConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateConsumerGroup', 'POST', '/logstores/{logstore}/consumergroups', 'none', false, 'json', request);
}

model CreateDashboardRequest {
  project: string(name='project', position='Host'),
  body: Dashboard(name='body', position='Body'),
}

model CreateDashboardResponse = {
  headers: map[string]string(name='headers'),
}

async function createDashboard(request: CreateDashboardRequest): CreateDashboardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDashboard', 'POST', '/dashboards', 'none', false, 'json', request);
}

model CreateDomainRequest {
  project: string(name='project', description='Project名称。', example='ali-test-project', position='Host'),
  domainName: string(name='domainName', example='example.com', position='Body'),
}

model CreateDomainResponse = {
  headers: map[string]string(name='headers'),
}

async function createDomain(request: CreateDomainRequest): CreateDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDomain', 'POST', '/domains', 'none', false, 'json', request);
}

model CreateIndexRequest {
  logstore: string(name='logstore', example='ali-logstore-test', position='Path'),
  project: string(name='project', description='Project名称。', example='ali-project-test', position='Host'),
  keys?: map[string]KeysValue(name='keys', position='Body'),
  line?: {
    caseSensitive?: boolean(name='caseSensitive', example='false'),
    chn?: boolean(name='chn', example='false'),
    excludeKeys?: [ string ](name='exclude_keys'),
    includeKeys?: [ string ](name='include_keys'),
    token: [ string ](name='token'),
  }(name='line', position='Body'),
  logReduce?: boolean(name='log_reduce', example='false', position='Body'),
  logReduceBlackList?: [ string ](name='log_reduce_black_list', position='Body'),
  logReduceWhiteList?: [ string ](name='log_reduce_white_list', position='Body'),
  maxTextLen?: int32(name='max_text_len', example='2048', position='Body'),
  ttl?: int32(name='ttl', example='30', position='Body'),
}

model CreateIndexResponse = {
  headers: map[string]string(name='headers'),
}

async function createIndex(request: CreateIndexRequest): CreateIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateIndex', 'POST', '/logstores/{logstore}/index', 'none', false, 'json', request);
}

model CreateLogStoreRequest {
  project: string(name='project', position='Host'),
  appendMeta?: boolean(name='appendMeta', example='false', position='Body'),
  autoSplit?: boolean(name='autoSplit', example='true', position='Body'),
  enableTracking?: boolean(name='enable_tracking', example='false', position='Body'),
  encryptConf?: EncryptConf(name='encrypt_conf', position='Body'),
  hotTtl?: int32(name='hot_ttl', example='60', position='Body'),
  logstoreName: string(name='logstoreName', example='my-logstore', position='Body'),
  maxSplitShard?: int32(name='maxSplitShard', example='64', position='Body'),
  mode?: string(name='mode', example='standard', position='Body'),
  shardCount: int32(name='shardCount', example='2', position='Body'),
  telemetryType?: string(name='telemetryType', example='None', position='Body'),
  ttl: int32(name='ttl', example='1', position='Body'),
}

model CreateLogStoreResponse = {
  headers: map[string]string(name='headers'),
}

async function createLogStore(request: CreateLogStoreRequest): CreateLogStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateLogStore', 'POST', '/logstores', 'none', false, 'json', request);
}

model CreateLoggingRequest {
  project: string(name='project', description='Project名称。', example='ali-test-project', position='Host'),
  loggingDetails: [ 
    {
      logstore: string(name='logstore', example='my-logstore'),
      type: string(name='type', example='consumergroup_log'),
    }
  ](name='loggingDetails', position='Body'),
  loggingProject: string(name='loggingProject', example='my-project', position='Body'),
}

model CreateLoggingResponse = {
  headers: map[string]string(name='headers'),
}

async function createLogging(request: CreateLoggingRequest): CreateLoggingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateLogging', 'POST', '/logging', 'none', false, 'json', request);
}

model CreateMachineGroupRequest {
  project: string(name='project', example='ali-test-project', position='Host'),
  groupAttribute?: {
    externalName?: string(name='externalName', example='testgroup'),
    groupTopic?: string(name='groupTopic', example='testtopic'),
  }(name='groupAttribute', position='Body'),
  groupName: string(name='groupName', example='test-machine-group', position='Body'),
  groupType?: string(name='groupType', example='""', position='Body'),
  machineIdentifyType: string(name='machineIdentifyType', example='ip', position='Body'),
  machineList: [ string ](name='machineList', position='Body'),
}

model CreateMachineGroupResponse = {
  headers: map[string]string(name='headers'),
}

async function createMachineGroup(request: CreateMachineGroupRequest): CreateMachineGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateMachineGroup', 'POST', '/machinegroups', 'none', false, 'json', request);
}

model CreateOdpsShipperRequest {
  project: string(name='project', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', example='test-logstore', position='Path'),
  shipperName: string(name='shipperName', example='test-shipper', position='Body'),
  targetConfiguration: {
    bufferInterval?: int32(name='bufferInterval', example='1800'),
    enable?: boolean(name='enable', example='true'),
    fields: [ string ](name='fields'),
    odpsEndpoint: string(name='odpsEndpoint', example='http://service.cn-hangzhou.maxcompute.aliyun-inc.com/api'),
    odpsProject: string(name='odpsProject', example='ali-odps-project'),
    odpsTable: string(name='odpsTable', example='test-table'),
    partitionColumn: [ string ](name='partitionColumn'),
    partitionTimeFormat: string(name='partitionTimeFormat', example='yyyy_MM_dd_hh_mm'),
  }(name='targetConfiguration', position='Body'),
  targetType: string(name='targetType', example='odps', position='Body'),
}

model CreateOdpsShipperResponse = {
  headers: map[string]string(name='headers'),
}

async function createOdpsShipper(request: CreateOdpsShipperRequest): CreateOdpsShipperResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateOdpsShipper', 'POST', '/logstores/{logstore}/shipper', 'none', false, 'json', request);
}

model CreateOssExternalStoreRequest {
  project: string(name='project', example='my-project', position='Host'),
  externalStoreName: string(name='externalStoreName', example='test_oss_store', position='Body'),
  parameter: {
    accessid: string(name='accessid', example='LTAI5tFsHGGeYry*****1Sz'),
    accesskey: string(name='accesskey', example='GyviCLDVHkHrOztdkxuE6******Rp6'),
    bucket: string(name='bucket', example='my-bucket'),
    columns: [ 
      {
        name: string(name='name', example='auto-test'),
        type: string(name='type', example='sls'),
      }
    ](name='columns'),
    endpoint: string(name='endpoint', example='oss-cn-hangzhou.aliyuncs.com'),
    objects: [ string ](name='objects'),
  }(name='parameter', position='Body'),
  storeType: string(name='storeType', example='oss', position='Body'),
}

model CreateOssExternalStoreResponse = {
  headers: map[string]string(name='headers'),
}

async function createOssExternalStore(request: CreateOssExternalStoreRequest): CreateOssExternalStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateOssExternalStore', 'POST', '/externalstores', 'none', false, 'json', request);
}

model CreateOssShipperRequest {
  project: string(name='project', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', example='test-logstore', position='Path'),
  shipperName: string(name='shipperName', example='test-shipper', position='Body'),
  targetConfiguration: {
    bufferInterval?: int32(name='bufferInterval', example='300'),
    bufferSize?: int32(name='bufferSize', example='256'),
    compressType?: string(name='compressType', example='snappy'),
    enable?: boolean(name='enable', example='true'),
    ossBucket: string(name='ossBucket', example='test-bucket'),
    ossPrefix: string(name='ossPrefix', example='test-prefix/hello-prefix'),
    pathFormat?: string(name='pathFormat', example='2022/01/01/00/59'),
    roleArn: string(name='roleArn', example='acs:ram::16542189**343050:role/aliyunlogdefaultrole'),
    storage: {
      detail: map[string]any(name='detail', example='{ 
"columns": [
   {"name" : "test-col", "type": "text"}
 ]
}'),
      format: string(name='format', example='parquet'),
    }(name='storage'),
    timeZone?: string(name='timeZone', example='+8'),
  }(name='targetConfiguration', position='Body'),
  targetType: string(name='targetType', example='odps', position='Body'),
}

model CreateOssShipperResponse = {
  headers: map[string]string(name='headers'),
}

async function createOssShipper(request: CreateOssShipperRequest): CreateOssShipperResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateOssShipper', 'POST', '/logstores/{logstore}/shipper', 'none', false, 'json', request);
}

model CreateProjectRequest {
  dataRedundancyType?: string(name='dataRedundancyType', example='LRS', position='Body'),
  description: string(name='description', example='this is test', position='Body'),
  projectName: string(name='projectName', example='test-project', position='Body'),
  resourceGroupId?: string(name='resourceGroupId', position='Body'),
}

model CreateProjectResponse = {
  headers: map[string]string(name='headers'),
}

async function createProject(request: CreateProjectRequest): CreateProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateProject', 'POST', '/', 'none', false, 'json', request);
}

model CreateRdsExternalStoreRequest {
  project: string(name='project', example='ali-test-project', position='Host'),
  externalStoreName: string(name='externalStoreName', example='rds_store', position='Body'),
  parameter: {
    db: string(name='db', example='meta'),
    host?: string(name='host', example='192.168.XX.XX'),
    instanceId?: string(name='instance-id', example='i-bp1b6c719dfa08exf****'),
    password: string(name='password', example='sfdsfldsfksfls****'),
    port: string(name='port', example='3306'),
    region: string(name='region', example='cn-qingdao'),
    table: string(name='table', example='join_meta'),
    username: string(name='username', example='root'),
    vpcId?: string(name='vpc-id', example='vpc-bp1aevy8sofi8mh1q****'),
  }(name='parameter', position='Body'),
  storeType: string(name='storeType', example='rds-vpc', position='Body'),
}

model CreateRdsExternalStoreResponse = {
  headers: map[string]string(name='headers'),
}

async function createRdsExternalStore(request: CreateRdsExternalStoreRequest): CreateRdsExternalStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateRdsExternalStore', 'POST', '/externalstores', 'none', false, 'json', request);
}

model CreateSavedSearchRequest {
  project: string(name='project', position='Host'),
  displayName: string(name='displayName', example='displayname', position='Body'),
  logstore: string(name='logstore', example='aliyun-test-logstore', position='Body'),
  savedsearchName: string(name='savedsearchName', example='pv in minutes', position='Body'),
  searchQuery: string(name='searchQuery', example='*|select date_format(__time__-__time__%60, \\"%H:%i:%s\\") as time, COUNT(*) as pv group by time', position='Body'),
  topic?: string(name='topic', example='theme', position='Body'),
}

model CreateSavedSearchResponse = {
  headers: map[string]string(name='headers'),
}

async function createSavedSearch(request: CreateSavedSearchRequest): CreateSavedSearchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateSavedSearch', 'POST', '/savedsearches', 'none', false, 'json', request);
}

model DeleteConfigRequest {
  project: string(name='project', position='Host'),
  configName: string(name='configName', position='Path'),
}

model DeleteConfigResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteConfig(request: DeleteConfigRequest): DeleteConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteConfig', 'DELETE', '/configs/{configName}', 'none', false, 'json', request);
}

model DeleteConsumerGroupRequest {
  project: string(name='project', description='Project名称。', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', example='ali-test-logstore', position='Path'),
  consumerGroup: string(name='consumerGroup', example='consumer-group-1', position='Path'),
}

model DeleteConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteConsumerGroup(request: DeleteConsumerGroupRequest): DeleteConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteConsumerGroup', 'DELETE', '/logstores/{logstore}/consumergroups/{consumerGroup}', 'none', false, 'json', request);
}

model DeleteDashboardRequest {
  project: string(name='project', position='Host'),
  dashboardName: string(name='dashboardName', position='Path'),
}

model DeleteDashboardResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteDashboard(request: DeleteDashboardRequest): DeleteDashboardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteDashboard', 'DELETE', '/dashboards/{dashboardName}', 'none', false, 'json', request);
}

model DeleteDomainRequest {
  project: string(name='project', description='Project名称。', example='ali-test-project', position='Host'),
  domainName: string(name='domainName', example='example.com', position='Path'),
}

model DeleteDomainResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteDomain(request: DeleteDomainRequest): DeleteDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteDomain', 'DELETE', '/domains/{domainName}', 'none', false, 'json', request);
}

model DeleteExternalStoreRequest {
  project: string(name='project', description='Project名称。', example='ali-test-project', position='Host'),
  externalStoreName: string(name='externalStoreName', example='rds_store', position='Path'),
}

model DeleteExternalStoreResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteExternalStore(request: DeleteExternalStoreRequest): DeleteExternalStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteExternalStore', 'DELETE', '/externalstores/{externalStoreName}', 'none', false, 'json', request);
}

model DeleteIndexRequest {
  logstore: string(name='logstore', example='ali-test-logstore', position='Path'),
  project: string(name='project', description='Project名称。', example='ali-test-project', position='Host'),
}

model DeleteIndexResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteIndex(request: DeleteIndexRequest): DeleteIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteIndex', 'DELETE', '/logstores/{logstore}/index', 'none', false, 'json', request);
}

model DeleteLogStoreRequest {
  project: string(name='project', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', example='aliyun-test-logstore', position='Path'),
}

model DeleteLogStoreResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteLogStore(request: DeleteLogStoreRequest): DeleteLogStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteLogStore', 'DELETE', '/logstores/{logstore}', 'none', false, 'json', request);
}

model DeleteLoggingRequest {
  project: string(name='project', description='Project名称。', example='ali-test-project', position='Host'),
}

model DeleteLoggingResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteLogging(request: DeleteLoggingRequest): DeleteLoggingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteLogging', 'DELETE', '/logging', 'none', false, 'json', request);
}

model DeleteMachineGroupRequest {
  project: string(name='project', example='ali-test-project', position='Host'),
  machineGroup: string(name='machineGroup', example='test-machine-group-4', position='Path'),
}

model DeleteMachineGroupResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteMachineGroup(request: DeleteMachineGroupRequest): DeleteMachineGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteMachineGroup', 'DELETE', '/machinegroups/{machineGroup}', 'none', false, 'json', request);
}

model DeleteProjectRequest {
  project: string(name='project', description='Project名称。', example='ali-project-test', position='Host'),
}

model DeleteProjectResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteProject(request: DeleteProjectRequest): DeleteProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteProject', 'DELETE', '/', 'none', false, 'json', request);
}

model DeleteProjectPolicyRequest {
  project?: string(name='project', description='A short description of struct', position='Host'),
}

model DeleteProjectPolicyResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteProjectPolicy(request: DeleteProjectPolicyRequest): DeleteProjectPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteProjectPolicy', 'DELETE', '/policy', 'json', false, 'json', request);
}

model DeleteSavedSearchRequest {
  project: string(name='project', description='Project名称。', example='ali-test-project', position='Host'),
  savedsearchName: string(name='savedsearchName', example='test-savedsearch-name', position='Path'),
}

model DeleteSavedSearchResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteSavedSearch(request: DeleteSavedSearchRequest): DeleteSavedSearchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteSavedSearch', 'DELETE', '/savedsearches/{savedsearchName}', 'none', false, 'json', request);
}

model DeleteShipperRequest {
  project: string(name='project', description='Project名称。', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', example='test-logstore', position='Path'),
  shipperName: string(name='shipperName', example='test-shipper', position='Path'),
}

model DeleteShipperResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteShipper(request: DeleteShipperRequest): DeleteShipperResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteShipper', 'DELETE', '/logstores/{logstore}/shipper/{shipperName}', 'none', false, 'json', request);
}

model GetAppliedConfigsRequest {
  project: string(name='project', description='Project名称。', example='ali-test-project', position='Host'),
  machineGroup: string(name='machineGroup', example='test-machine-group', position='Path'),
}

model GetAppliedConfigsResponseBody = {
  configs?: [ string ](name='configs'),
  count?: int32(name='count', example='2'),
}

model GetAppliedConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: GetAppliedConfigsResponseBody(name='body'),
}

async function getAppliedConfigs(request: GetAppliedConfigsRequest): GetAppliedConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAppliedConfigs', 'GET', '/machinegroups/{machineGroup}/configs', 'json', false, 'json', request);
}

model GetAppliedMachineGroupsRequest {
  project: string(name='project', description='Project名称。', example='ali-test-project', position='Host'),
  configName: string(name='configName', example='logtail-config-sample', position='Path'),
}

model GetAppliedMachineGroupsResponseBody = {
  count?: int32(name='count', example='2'),
  machinegroups?: [ string ](name='machinegroups', example='[ "sample-group1","sample-group2" ]'),
}

model GetAppliedMachineGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: GetAppliedMachineGroupsResponseBody(name='body'),
}

async function getAppliedMachineGroups(request: GetAppliedMachineGroupsRequest): GetAppliedMachineGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAppliedMachineGroups', 'GET', '/configs/{configName}/machinegroups', 'json', false, 'json', request);
}

model GetCheckPointRequest {
  project: string(name='project', description='Project 名称。', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', example='test-logstore', position='Path'),
  consumerGroup: string(name='consumerGroup', example='consumer-group-1', position='Path'),
  shard?: int32(name='shard', example='1', position='Query'),
}

model GetCheckPointResponse = {
  headers: map[string]string(name='headers'),
  body: [ 
    {
      shard?: int32(name='shard', description='Shard ID。', example='0'),
      checkpoint?: string(name='checkpoint', example='MTUyNDE1NTM3OTM3MzkwODQ5Ng=='),
      updateTime?: long(name='updateTime', example='1524224984800922'),
      consumer?: string(name='consumer', example='consumer_1'),
    }
  ](name='body'),
}

async function getCheckPoint(request: GetCheckPointRequest): GetCheckPointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetCheckPoint', 'GET', '/logstores/{logstore}/consumergroups/{consumerGroup}', 'json', false, 'json', request);
}

model GetConfigRequest {
  project: string(name='project', position='Host'),
  configName: string(name='configName', position='Path'),
}

model GetConfigResponse = {
  headers: map[string]string(name='headers'),
  body: LogtailConfig  
}

async function getConfig(request: GetConfigRequest): GetConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetConfig', 'GET', '/configs/{configName}', 'json', false, 'json', request);
}

model GetContextLogsRequest {
  project: string(name='project', description='Project名称。', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', example='test-logstore', position='Path'),
  backLines: long(name='back_lines', example='10', position='Query'),
  forwardLines: long(name='forward_lines', example='10', position='Query'),
  packId: string(name='pack_id', example='85C897C740352DC6-808', position='Query'),
  packMeta: string(name='pack_meta', example='2|MTY1NTcwNTUzODY5MTY0MDk1Mg==|3|0', position='Query'),
  type: string(name='type', example='context_log', position='Query'),
}

model GetContextLogsResponseBody = {
  backLines?: long(name='back_lines', example='100'),
  forwardLines?: long(name='forward_lines', example='100'),
  logs?: [  map[string]any ](name='logs'),
  progress?: string(name='progress', example='Complete'),
  totalLines?: long(name='total_lines', example='201'),
}

model GetContextLogsResponse = {
  headers: map[string]string(name='headers'),
  body: GetContextLogsResponseBody(name='body'),
}

async function getContextLogs(request: GetContextLogsRequest): GetContextLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetContextLogs', 'GET', '/logstores/{logstore}', 'json', false, 'json', request);
}

model GetCursorRequest {
  project: string(name='project', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', example='sls-test-logstore', position='Path'),
  shardId: int32(name='shardId', description='Shard ID。', example='1', position='Path'),
  from: string(name='from', example='begin', position='Query'),
}

model GetCursorResponseBody = {
  cursor?: string(name='cursor', example='MTQ0NzI5OTYwNjg5NjYzMjM1Ng=='),
}

model GetCursorResponse = {
  headers: map[string]string(name='headers'),
  body: GetCursorResponseBody(name='body'),
}

async function getCursor(request: GetCursorRequest): GetCursorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetCursor', 'GET', '/logstores/{logstore}/shards/{shardId}?type=cursor', 'json', false, 'json', request);
}

model GetCursorTimeRequest {
  project: string(name='project', description='project 名称。', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', example='test-logstore', position='Path'),
  shardId: int32(name='shardId', description='shard id。', example='0', position='Path'),
  cursor: string(name='cursor', example='MTU0NzQ3MDY4MjM3NjUxMzQ0Ng==', position='Query'),
}

model GetCursorTimeResponseBody = {
  cursorTime?: string(name='cursor_time', example='1554260243'),
}

model GetCursorTimeResponse = {
  headers: map[string]string(name='headers'),
  body: GetCursorTimeResponseBody(name='body'),
}

async function getCursorTime(request: GetCursorTimeRequest): GetCursorTimeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetCursorTime', 'GET', '/logstores/{logstore}/shards/{shardId}?type=cursor_time', 'json', false, 'json', request);
}

model GetDashboardRequest {
  project: string(name='project', position='Host'),
  dashboardName: string(name='dashboardName', position='Path'),
}

model GetDashboardResponse = {
  headers: map[string]string(name='headers'),
  body: Dashboard  
}

async function getDashboard(request: GetDashboardRequest): GetDashboardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDashboard', 'GET', '/dashboards/{dashboardName}', 'json', false, 'json', request);
}

model GetExternalStoreRequest {
  project: string(name='project', description='Project名称。', example='ali-test-project', position='Host'),
  externalStoreName: string(name='externalStoreName', example='rds_store', position='Path'),
}

model GetExternalStoreResponse = {
  headers: map[string]string(name='headers'),
  body: ExternalStore  
}

async function getExternalStore(request: GetExternalStoreRequest): GetExternalStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetExternalStore', 'GET', '/externalstores/{externalStoreName}', 'json', false, 'json', request);
}

model GetHistogramsRequest {
  project: string(name='project', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', example='test-logstore', position='Path'),
  from: long(name='from', example='1409529600', position='Query'),
  query?: string(name='query', example='error', position='Query'),
  to: long(name='to', example='1409569200', position='Query'),
  topic?: string(name='topic', example='topic', position='Query'),
}

model GetHistogramsResponse = {
  headers: map[string]string(name='headers'),
  body: [ 
    {
      from?: long(name='from', example='1409529600'),
      to?: long(name='to', example='1409569200'),
      count?: long(name='count', example='2'),
      progress?: string(name='progress', example='Complete'),
    }
  ](name='body'),
}

async function getHistograms(request: GetHistogramsRequest): GetHistogramsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetHistograms', 'GET', '/logstores/{logstore}/index?type=histogram', 'json', false, 'json', request);
}

model GetIndexRequest {
  project: string(name='project', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', example='test-logstore', position='Path'),
}

model GetIndexResponseBody = {
  indexMode?: string(name='index_mode', example='v2'),
  keys?: map[string]KeysValue(name='keys'),
  lastModifyTime?: long(name='lastModifyTime', example='1524155379'),
  line?: {
    caseSensitive?: boolean(name='caseSensitive', example='false'),
    chn?: boolean(name='chn', example='false'),
    excludeKeys?: [ string ](name='exclude_keys'),
    includeKeys?: [ string ](name='include_keys'),
    token?: [ string ](name='token'),
  }(name='line'),
  logReduce?: boolean(name='log_reduce', example='false'),
  logReduceBlackList?: [ string ](name='log_reduce_black_list'),
  logReduceWhiteList?: [ string ](name='log_reduce_white_list'),
  maxTextLen?: int32(name='max_text_len', example='2048'),
  storage?: string(name='storage', example='pg'),
  ttl?: int32(name='ttl', example='30'),
}

model GetIndexResponse = {
  headers: map[string]string(name='headers'),
  body: GetIndexResponseBody(name='body'),
}

async function getIndex(request: GetIndexRequest): GetIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetIndex', 'GET', '/logstores/{logstore}/index', 'json', false, 'json', request);
}

model GetLogStoreRequest {
  logstore: string(name='logstore', example='ali-test-logstore', position='Path'),
  project: string(name='project', position='Host'),
}

model GetLogStoreResponse = {
  headers: map[string]string(name='headers'),
  body: Logstore  
}

async function getLogStore(request: GetLogStoreRequest): GetLogStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetLogStore', 'GET', '/logstores/{logstore}', 'json', false, 'json', request);
}

model GetLoggingRequest {
  project: string(name='project', description='Project名称。', example='ali-test-project', position='Host'),
}

model GetLoggingResponse = {
  headers: map[string]string(name='headers'),
  body: Logging  
}

async function getLogging(request: GetLoggingRequest): GetLoggingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetLogging', 'GET', '/logging', 'json', false, 'json', request);
}

model GetLogsRequest {
  project: string(name='project', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', example='example-logstore', position='Path'),
  from: int32(name='from', example='1627268185', position='Query'),
  line?: long(name='line', example='100', minimum=0, maximum=100, position='Query'),
  offset?: long(name='offset', example='0', position='Query'),
  powerSql?: boolean(name='powerSql', example='false', position='Query'),
  query?: string(name='query', example='status: 401 | SELECT remote_addr,COUNT(*) as pv GROUP by remote_addr ORDER by pv desc limit 5', position='Query'),
  reverse?: boolean(name='reverse', example='false', position='Query'),
  to: int32(name='to', example='1627269085', position='Query'),
  topic?: string(name='topic', example='topic', position='Query'),
}

model GetLogsResponse = {
  headers: map[string]string(name='headers'),
  body: [  map[string]any ](name='body'),
}

async function getLogs(request: GetLogsRequest): GetLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetLogs', 'GET', '/logstores/{logstore}?type=log', 'json', false, 'json', request);
}

model GetLogsV2Request {
  project?: string(name='project', example='ali-test-project', position='Host'),
  logstore?: string(name='logstore', example='test-logstore', position='Path'),
  acceptEncoding?: string(name='Accept-Encoding', example='lz4', position='Header'),
  forward?: boolean(name='forward', example='false', position='Body'),
  from: int32(name='from', example='1627268185', position='Body'),
  line?: long(name='line', example='100', minimum=0, maximum=100, position='Body'),
  offset?: long(name='offset', example='0', position='Body'),
  powerSql?: boolean(name='powerSql', example='false', position='Body'),
  query?: string(name='query', example='status: 401 | SELECT remote_addr,COUNT(*) as pv GROUP by remote_addr ORDER by pv desc limit 5', position='Body'),
  reverse?: boolean(name='reverse', example='false', position='Body'),
  session?: string(name='session', position='Body'),
  shard?: int32(name='shard', description='Shard ID。', example='0', position='Body'),
  to: int32(name='to', example='1627268185', position='Body'),
  topic?: string(name='topic', example='""', position='Body'),
}

model GetLogsV2ResponseBody = {
  data?: [ map[string]string ](name='data'),
  meta?: {
    aggQuery?: string(name='aggQuery', example='select *'),
    count?: int32(name='count', example='1'),
    elapsedMillisecond?: long(name='elapsedMillisecond', example='5'),
    hasSQL?: boolean(name='hasSQL', example='false'),
    isAccurate?: boolean(name='isAccurate', example='true'),
    keys?: [ string ](name='keys'),
    processedBytes?: long(name='processedBytes', example='10000'),
    processedRows?: int32(name='processedRows', example='10000'),
    progress?: string(name='progress', example='Complete'),
    telementryType?: string(name='telementryType', example='None'),
    terms?: [  map[string]any ](name='terms'),
    whereQuery?: string(name='whereQuery', example='*'),
  }(name='meta'),
}

model GetLogsV2Response = {
  headers: map[string]string(name='headers'),
  body: GetLogsV2ResponseBody(name='body'),
}

async function getLogsV2(request: GetLogsV2Request): GetLogsV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetLogsV2', 'POST', '/logstores/{logstore}/logs', 'json', false, 'json', request);
}

model GetMachineGroupRequest {
  project: string(name='project', description='Project名称。', example='ali-test-project', position='Host'),
  machineGroup: string(name='machineGroup', example='test-machine-group', position='Path'),
}

model GetMachineGroupResponse = {
  headers: map[string]string(name='headers'),
  body: MachineGroup  
}

async function getMachineGroup(request: GetMachineGroupRequest): GetMachineGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetMachineGroup', 'GET', '/machinegroups/{machineGroup}', 'json', false, 'json', request);
}

model GetProjectRequest {
  project: string(name='project', description='Project名称。', example='ali-project-test', position='Host'),
}

model GetProjectResponse = {
  headers: map[string]string(name='headers'),
  body: Project  
}

async function getProject(request: GetProjectRequest): GetProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetProject', 'GET', '/', 'json', false, 'json', request);
}

model GetProjectLogsRequest {
  project: string(name='project', description='Project名称。', example='ali-test-project', position='Host'),
  powerSql?: boolean(name='powerSql', example='false', position='Query'),
  query: string(name='query', example='SELECT COUNT(*) as pv FROM nginx-moni where __time__ &gt; 1646102500 and __time__ &lt; 1646103400', position='Query'),
}

model GetProjectLogsResponse = {
  headers: map[string]string(name='headers'),
  body: [ map[string]string ](name='body'),
}

async function getProjectLogs(request: GetProjectLogsRequest): GetProjectLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetProjectLogs', 'GET', '/logs', 'json', false, 'json', request);
}

model GetProjectPolicyRequest {
  project?: string(name='project', description='A short description of struct', position='Host'),
}

model GetProjectPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: string(name='body'),
}

async function getProjectPolicy(request: GetProjectPolicyRequest): GetProjectPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetProjectPolicy', 'GET', '/policy', 'json', false, 'json', request);
}

model GetSavedSearchRequest {
  project: string(name='project', description='Project名称。', example='aliyun-test-project', position='Host'),
  savedsearchName: string(name='savedsearchName', example='savedsearch-name', position='Path'),
}

model GetSavedSearchResponse = {
  headers: map[string]string(name='headers'),
  body: SavedSearch  
}

async function getSavedSearch(request: GetSavedSearchRequest): GetSavedSearchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetSavedSearch', 'GET', '/savedsearches/{savedsearchName}', 'json', false, 'json', request);
}

model GetShipperStatusRequest {
  project: string(name='project', description='Project名称。', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', example='ali-test-logstore', position='Path'),
  shipperName: string(name='shipperName', example='test-shipper', position='Path'),
  from: long(name='from', example='1409529600', position='Query'),
  offset?: int32(name='offset', example='0', position='Query'),
  size?: int32(name='size', example='100', position='Query'),
  status?: string(name='status', example='success', position='Query'),
  to: long(name='to', example='1627269085', position='Query'),
}

model GetShipperStatusResponseBody = {
  count?: long(name='count', example='10'),
  statistics?: {
    fail?: long(name='fail', example='0'),
    running?: long(name='running', example='0'),
    success?: long(name='success', example='20'),
  }(name='statistics'),
  tasks?: {
    id?: string(name='id', example='abcdefghijk'),
    taskCode?: string(name='taskCode', example='UnAuthorized'),
    taskCreateTime?: long(name='taskCreateTime', example='1448925013'),
    taskDataLines?: int32(name='taskDataLines', example='0'),
    taskFinishTime?: long(name='taskFinishTime', example='1448926013'),
    taskLastDataReceiveTime?: long(name='taskLastDataReceiveTime', example='1448915013'),
    taskMessage?: string(name='taskMessage', example='AccessDenied: You have no right to access this object because of bucket acl.'),
    taskStatus?: string(name='taskStatus', example='success'),
  }(name='tasks'),
  total?: long(name='total', example='20'),
}

model GetShipperStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetShipperStatusResponseBody(name='body'),
}

async function getShipperStatus(request: GetShipperStatusRequest): GetShipperStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetShipperStatus', 'GET', '/logstores/{logstore}/shipper/{shipperName}/tasks', 'json', false, 'json', request);
}

model ListConfigRequest {
  project: string(name='project', position='Host'),
  configName?: string(name='configName', position='Query'),
  logstoreName: string(name='logstoreName', position='Query'),
  offset: long(name='offset', position='Query'),
  size: long(name='size', position='Query'),
}

model ListConfigResponseBody = {
  configs?: [
    LogtailConfig
  ](name='configs'),
  count?: int32(name='count'),
  total?: int32(name='total'),
}

model ListConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ListConfigResponseBody(name='body'),
}

async function listConfig(request: ListConfigRequest): ListConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListConfig', 'GET', '/configs', 'json', false, 'json', request);
}

model ListConsumerGroupRequest {
  project: string(name='project', description='Project名称。', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', example='ali-test-logstore', position='Path'),
}

model ListConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  body: [
    ConsumerGroup
  ](name='body'),
}

async function listConsumerGroup(request: ListConsumerGroupRequest): ListConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListConsumerGroup', 'GET', '/logstores/{logstore}/consumergroups', 'json', false, 'json', request);
}

model ListDashboardRequest {
  project: string(name='project', position='Host'),
  offset?: int32(name='offset', example='0', position='Query'),
  size?: int32(name='size', example='10', position='Query'),
}

model ListDashboardResponseBody = {
  dashboardItems?: [ 
    {
      dashboardName?: string(name='dashboardName'),
      displayName?: string(name='displayName'),
    }
  ](name='dashboardItems'),
  dashboards?: [ string ](name='dashboards'),
}

model ListDashboardResponse = {
  headers: map[string]string(name='headers'),
  body: ListDashboardResponseBody(name='body'),
}

async function listDashboard(request: ListDashboardRequest): ListDashboardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDashboard', 'GET', '/dashboards', 'json', false, 'json', request);
}

model ListDomainsRequest {
  project: string(name='project', description='Project名称。', example='ali-test-project', position='Host'),
  domainName?: string(name='domainName', example='example.com', position='Query'),
  offset?: int32(name='offset', example='0', position='Query'),
  size?: int32(name='size', example='10', position='Query'),
}

model ListDomainsResponseBody = {
  count?: long(name='count', example='1'),
  domains?: [ string ](name='domains'),
  total?: long(name='total', example='1'),
}

model ListDomainsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDomainsResponseBody(name='body'),
}

async function listDomains(request: ListDomainsRequest): ListDomainsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDomains', 'GET', '/domains', 'json', false, 'json', request);
}

model ListExternalStoreRequest {
  project: string(name='project', description='Project名称。', example='ali-test-project', position='Host'),
  externalStoreName?: string(name='externalStoreName', example='store', position='Query'),
  offset?: int32(name='offset', example='0', position='Query'),
  sizs?: int32(name='sizs', example='10', position='Query'),
}

model ListExternalStoreResponseBody = {
  count?: int32(name='count', example='3'),
  externalstores?: [
    ExternalStore
  ](name='externalstores'),
  total?: int32(name='total', example='3'),
}

model ListExternalStoreResponse = {
  headers: map[string]string(name='headers'),
  body: ListExternalStoreResponseBody(name='body'),
}

async function listExternalStore(request: ListExternalStoreRequest): ListExternalStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListExternalStore', 'GET', '/externalstores', 'json', false, 'json', request);
}

model ListLogStoresRequest {
  project: string(name='project', position='Host'),
  logstoreName?: string(name='logstoreName', example='my-logstore', position='Query'),
  mode?: string(name='mode', example='standard', position='Query'),
  offset?: int32(name='offset', example='0', position='Query'),
  size?: int32(name='size', example='10', position='Query'),
  telemetryType?: string(name='telemetryType', example='None', position='Query'),
}

model ListLogStoresResponseBody = {
  count?: int32(name='count'),
  logstores?: [ string ](name='logstores', example='["test-1","test-2"]'),
  total?: int32(name='total', example='2'),
}

model ListLogStoresResponse = {
  headers: map[string]string(name='headers'),
  body: ListLogStoresResponseBody(name='body'),
}

async function listLogStores(request: ListLogStoresRequest): ListLogStoresResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListLogStores', 'GET', '/logstores', 'json', false, 'json', request);
}

model ListMachineGroupRequest {
  project: string(name='project', description='Project名称。', example='aliyun-test-project', position='Host'),
  groupName?: string(name='groupName', example='test-machine-group', position='Query'),
  offset?: int32(name='offset', example='1', position='Query'),
  size?: int32(name='size', example='10', position='Query'),
}

model ListMachineGroupResponseBody = {
  count?: int32(name='count', example='2'),
  machinegroups?: [ string ](name='machinegroups', example='[ "test-machine-group-1", "test-machine-group-2" ]'),
  total?: int32(name='total', example='2'),
}

model ListMachineGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ListMachineGroupResponseBody(name='body'),
}

async function listMachineGroup(request: ListMachineGroupRequest): ListMachineGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListMachineGroup', 'GET', '/machinegroups', 'json', false, 'json', request);
}

model ListMachinesRequest {
  project: string(name='project', description='Project名称。', example='ali-test-project', position='Host'),
  machineGroup: string(name='machineGroup', example='test-group', position='Path'),
  offset?: int32(name='offset', example='0', position='Query'),
  size?: int32(name='size', example='10', position='Query'),
}

model ListMachinesResponseBody = {
  count?: int32(name='count', example='3'),
  machines?: [
    Machine
  ](name='machines'),
  total?: int32(name='total', example='8'),
}

model ListMachinesResponse = {
  headers: map[string]string(name='headers'),
  body: ListMachinesResponseBody(name='body'),
}

async function listMachines(request: ListMachinesRequest): ListMachinesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListMachines', 'GET', '/machinegroups/{machineGroup}/machines', 'json', false, 'json', request);
}

model ListProjectRequest {
  resourceGroupId?: string(name='resourceGroupId', position='Path'),
  offset?: int32(name='offset', example='0', position='Query'),
  projectName?: string(name='projectName', example='ali-test-project', position='Query'),
  size?: int32(name='size', example='10', position='Query'),
}

model ListProjectResponseBody = {
  count?: long(name='count', example='2'),
  projects?: [
    Project
  ](name='projects'),
  total?: long(name='total', example='11'),
}

model ListProjectResponse = {
  headers: map[string]string(name='headers'),
  body: ListProjectResponseBody(name='body'),
}

async function listProject(request: ListProjectRequest): ListProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProject', 'GET', '/', 'json', false, 'json', request);
}

model ListSavedSearchRequest {
  project: string(name='project', description='Project名称。', example='aliyun-test-project', position='Host'),
  offset?: int32(name='offset', example='0', position='Query'),
  size?: int32(name='size', example='10', position='Query'),
}

model ListSavedSearchResponseBody = {
  count?: int32(name='count', example='4'),
  savedsearchItems?: [
    SavedSearch
  ](name='savedsearchItems', example='[ "test-1", "test-2" ]'),
  total?: int32(name='total', example='4'),
}

model ListSavedSearchResponse = {
  headers: map[string]string(name='headers'),
  body: ListSavedSearchResponseBody(name='body'),
}

async function listSavedSearch(request: ListSavedSearchRequest): ListSavedSearchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSavedSearch', 'GET', '/savedsearches', 'json', false, 'json', request);
}

model ListShardsRequest {
  project: string(name='project', description='project 名称。', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', example='test-logstore', position='Path'),
}

model ListShardsResponse = {
  headers: map[string]string(name='headers'),
  body: [
    Shard
  ](name='body'),
}

async function listShards(request: ListShardsRequest): ListShardsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListShards', 'GET', '/logstores/{logstore}/shards', 'json', false, 'json', request);
}

model ListShipperRequest {
  project: string(name='project', description='Project名称。', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', example='test-logstore', position='Path'),
}

model ListShipperResponseBody = {
  count?: long(name='count', example='3'),
  shipper?: [ string ](name='shipper'),
  total?: long(name='total', example='5'),
}

model ListShipperResponse = {
  headers: map[string]string(name='headers'),
  body: ListShipperResponseBody(name='body'),
}

async function listShipper(request: ListShipperRequest): ListShipperResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListShipper', 'GET', '/logstores/{logstore}/shipper', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  resourceId?: [ string ](name='resourceId', shrink='json', position='Query'),
  resourceType: string(name='resourceType', example='project', position='Query'),
  tags?: [ 
    {
      key: string(name='key', example='key1'),
      value?: string(name='value', example='value1'),
    }
  ](name='tags', shrink='json', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='nextToken', example='caeba0bbb2be03f84eb48b699f0a4883'),
  tagResources?: [ 
    {
      resourceId?: string(name='resourceId', example='ali-test-project'),
      resourceType?: string(name='resourceType', example='project'),
      tagKey?: string(name='tagKey', example='key1'),
      tagValue?: string(name='tagValue', example='value1'),
    }
  ](name='tagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTagResources', 'GET', '/tags', 'json', false, 'json', request);
}

model PullDataRequest {
  project: string(name='project', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', example='ali-test-logstore', position='Path'),
  shard: string(name='shard', description='Shard ID。', example='0', position='Path'),
  count: string(name='count', example='1000', position='Query'),
  cursor: string(name='cursor', example='MTQ0NzMyOTQwMTEwMjEzMDkwNA', position='Query'),
  endCursor?: string(name='endCursor', example='MTU1NzA1NzQwMTEwMjEzMDkwCg', position='Query'),
}

model PullDataResponse = {
  headers: map[string]string(name='headers'),
}

async function pullData(request: PullDataRequest): PullDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PullData', 'GET', '/logstores/{logstore}/shards/{shard}?type=log', 'json', false, 'json', request);
}

model PutProjectPolicyRequest {
  project?: string(name='project', position='Host'),
  body?: string(name='body', example='{ 	"Version": "1", 	"Statement": [{ 		"Action": ["log:PostLogStoreLogs"], 		"Resource": "acs:log:*:*:project/exampleproject/*", 		"Effect": "Deny", 		"Condition": { 			"StringNotLike": { 				"acs:SourceVpc": ["vpc-*"] 			} 		} 	}] }', position='Body'),
}

model PutProjectPolicyResponse = {
  headers: map[string]string(name='headers'),
}

async function putProjectPolicy(request: PutProjectPolicyRequest): PutProjectPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PutProjectPolicy', 'POST', '/policy', 'json', false, 'json', request);
}

model PutWebtrackingRequest {
  project: string(name='project', position='Host'),
  logstoreName: string(name='logstoreName', position='Path'),
  logs: [ map[string]string ](name='__logs__', position='Body'),
  source: string(name='__source__', position='Body'),
  tags?: map[string]string(name='__tags__', position='Body'),
  topic?: string(name='__topic__', position='Body'),
}

model PutWebtrackingResponse = {
  headers: map[string]string(name='headers'),
}

async function putWebtracking(request: PutWebtrackingRequest): PutWebtrackingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PutWebtracking', 'POST', '/logstores/{logstoreName}/track', 'none', false, 'json', request);
}

model RemoveConfigFromMachineGroupRequest {
  project: string(name='project', description='Project名称。', example='ali-test-project', position='Host'),
  machineGroup: string(name='machineGroup', example='test-group', position='Path'),
  configName: string(name='configName', example='test-logtail', position='Path'),
}

model RemoveConfigFromMachineGroupResponse = {
  headers: map[string]string(name='headers'),
}

async function removeConfigFromMachineGroup(request: RemoveConfigFromMachineGroupRequest): RemoveConfigFromMachineGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RemoveConfigFromMachineGroup', 'DELETE', '/machinegroups/{machineGroup}/configs/{configName}', 'none', false, 'json', request);
}

model SplitShardRequest {
  project: string(name='project', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', example='logstorename', position='Path'),
  shard: int32(name='shard', example='0', position='Path'),
  key?: string(name='key', example='ef000000000000000000000000000000', position='Query'),
  shardCount?: int32(name='shardCount', example='2', position='Query'),
}

model SplitShardResponse = {
  headers: map[string]string(name='headers'),
  body: [
    Shard
  ](name='body'),
}

async function splitShard(request: SplitShardRequest): SplitShardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SplitShard', 'POST', '/logstores/{logstore}/shards/{shard}?action=split', 'json', false, 'json', request);
}

model TagResourcesRequest {
  resourceId: [ string ](name='resourceId', position='Body'),
  resourceType: string(name='resourceType', example='project', position='Body'),
  tags: [ 
    {
      key: string(name='key', example='key1'),
      value: string(name='value', example='value1'),
    }
  ](name='tags', position='Body'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'TagResources', 'POST', '/tag', 'none', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='all', example='false', position='Body'),
  resourceId?: string(name='resourceId', example='ali-test-project', position='Body'),
  resourceType?: string(name='resourceType', example='project', position='Body'),
  tags?: [ string ](name='tags', position='Body'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UntagResources', 'POST', '/untag', 'json', false, 'json', request);
}

model UpdateConfigRequest {
  project: string(name='project', position='Host'),
  configName: string(name='configName', position='Path'),
  body?: LogtailConfig(name='body', position='Body'),
}

model UpdateConfigResponse = {
  headers: map[string]string(name='headers'),
}

async function updateConfig(request: UpdateConfigRequest): UpdateConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateConfig', 'PUT', '/configs/{configName}', 'none', false, 'json', request);
}

model UpdateConsumerGroupRequest {
  project: string(name='project', description='Project名称。', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', example='logstore-test', position='Path'),
  consumerGroup: string(name='consumerGroup', example='consumer-group-1', position='Path'),
  order?: boolean(name='order', example='true', position='Body'),
  timeout?: int32(name='timeout', example='300', position='Body'),
}

model UpdateConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
}

async function updateConsumerGroup(request: UpdateConsumerGroupRequest): UpdateConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateConsumerGroup', 'PUT', '/logstores/{logstore}/consumergroups/{consumerGroup}', 'none', false, 'json', request);
}

model UpdateDashboardRequest {
  project: string(name='project', position='Host'),
  dashboardName: string(name='dashboardName', position='Path,Body'),
  attribute?: map[string]string(name='attribute', position='Body'),
  charts: [
    Chart
  ](name='charts', position='Body'),
  description?: string(name='description', position='Body'),
  displayName: string(name='displayName', position='Body'),
}

model UpdateDashboardResponse = {
  headers: map[string]string(name='headers'),
}

async function updateDashboard(request: UpdateDashboardRequest): UpdateDashboardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateDashboard', 'PUT', '/dashboards/{dashboardName}', 'none', false, 'json', request);
}

model UpdateIndexRequest {
  project: string(name='project', description='Project名称。', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', example='test-logstore', position='Path'),
  keys?: map[string]KeysValue(name='keys', position='Body'),
  line?: {
    caseSensitive: boolean(name='caseSensitive', example='true'),
    chn: boolean(name='chn', example='false'),
    excludeKeys?: [ string ](name='exclude_keys'),
    includeKeys?: [ string ](name='include_keys'),
    token: [ string ](name='token'),
  }(name='line', position='Body'),
  logReduce?: boolean(name='log_reduce', example='false', position='Body'),
  logReduceBlackList?: [ string ](name='log_reduce_black_list', position='Body'),
  logReduceWhiteList?: [ string ](name='log_reduce_white_list', position='Body'),
  maxTextLen?: int32(name='max_text_len', example='2048', position='Body'),
  ttl: int32(name='ttl', example='30', position='Body'),
}

model UpdateIndexResponse = {
  headers: map[string]string(name='headers'),
}

async function updateIndex(request: UpdateIndexRequest): UpdateIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateIndex', 'PUT', '/logstores/{logstore}/index', 'none', false, 'json', request);
}

model UpdateLogStoreRequest {
  project: string(name='project', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', example='test-logstore', position='Path'),
  appendMeta?: boolean(name='appendMeta', example='false', position='Body'),
  autoSplit?: boolean(name='autoSplit', example='true', position='Body'),
  enableTracking?: boolean(name='enable_tracking', example='false', position='Body'),
  encryptConf?: EncryptConf(name='encrypt_conf', position='Body'),
  hotTtl?: int32(name='hot_ttl', example='60', position='Body'),
  logstoreName: string(name='logstoreName', example='test-logstore', position='Body'),
  maxSplitShard?: int32(name='maxSplitShard', example='64', position='Body'),
  mode?: string(name='mode', example='standard', position='Body'),
  shardCount: int32(name='shardCount', example='2', position='Body'),
  telemetryType?: string(name='telemetryType', example='None', position='Body'),
  ttl: int32(name='ttl', example='30', position='Body'),
}

model UpdateLogStoreResponse = {
  headers: map[string]string(name='headers'),
}

async function updateLogStore(request: UpdateLogStoreRequest): UpdateLogStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateLogStore', 'PUT', '/logstores/{logstore}', 'none', false, 'json', request);
}

model UpdateLoggingRequest {
  project: string(name='project', description='Project 名称。', example='ali-test-project', position='Host'),
  loggingDetails: [ 
    {
      logstore: string(name='logstore', example='my-logstore'),
      type: string(name='type', example='consumergroup_log'),
    }
  ](name='loggingDetails', position='Body'),
  loggingProject: string(name='loggingProject', example='my-project', position='Body'),
}

model UpdateLoggingResponse = {
  headers: map[string]string(name='headers'),
}

async function updateLogging(request: UpdateLoggingRequest): UpdateLoggingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateLogging', 'PUT', '/logging', 'none', false, 'json', request);
}

model UpdateMachineGroupRequest {
  project: string(name='project', description='Project名称。', example='ali-test-project', position='Host'),
  groupName: string(name='groupName', example='test-group', position='Path,Body'),
  groupAttribute?: {
    externalName?: string(name='externalName', example='testgroup2'),
    groupTopic?: string(name='groupTopic', example='testtopic2'),
  }(name='groupAttribute', position='Body'),
  groupType?: string(name='groupType', example='""', position='Body'),
  machineIdentifyType: string(name='machineIdentifyType', example='userdefined', position='Body'),
  machineList: [ string ](name='machineList', example='[uu_id_1，uu_id_2]', position='Body'),
}

model UpdateMachineGroupResponse = {
  headers: map[string]string(name='headers'),
}

async function updateMachineGroup(request: UpdateMachineGroupRequest): UpdateMachineGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateMachineGroup', 'PUT', '/machinegroups/{groupName}', 'none', false, 'json', request);
}

model UpdateMachineGroupMachineRequest {
  project: string(name='project', description='Project名称。', example='ali-test-project', position='Host'),
  machineGroup: string(name='machineGroup', example='test-group', position='Path'),
  action?: string(name='action', example='add', position='Query'),
  body: [ string ](name='body', position='Body'),
}

model UpdateMachineGroupMachineResponse = {
  headers: map[string]string(name='headers'),
}

async function updateMachineGroupMachine(request: UpdateMachineGroupMachineRequest): UpdateMachineGroupMachineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateMachineGroupMachine', 'PUT', '/machinegroups/{machineGroup}/machines', 'none', false, 'json', request);
}

model UpdateOdpsShipperRequest {
  project: string(name='project', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', example='test-logstore', position='Path'),
  shipperName: string(name='shipperName', example='test-shipper', position='Path,Body'),
  targetConfiguration: {
    bufferInterval?: int32(name='bufferInterval', example='1800'),
    enable?: boolean(name='enable', example='true'),
    fields: [ string ](name='fields'),
    odpsEndpoint: string(name='odpsEndpoint', example='http://service.cn-hangzhou.maxcompute.aliyun-inc.com/api'),
    odpsProject: string(name='odpsProject', example='ali-odps-project'),
    odpsTable: string(name='odpsTable', example='test-table'),
    partitionColumn: [ string ](name='partitionColumn'),
    partitionTimeFormat: string(name='partitionTimeFormat', example='yyyy_MM_dd_hh_mm'),
  }(name='targetConfiguration', position='Body'),
  targetType: string(name='targetType', example='odps', position='Body'),
}

model UpdateOdpsShipperResponse = {
  headers: map[string]string(name='headers'),
}

async function updateOdpsShipper(request: UpdateOdpsShipperRequest): UpdateOdpsShipperResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateOdpsShipper', 'PUT', '/logstores/{logstore}/shipper/{shipperName}', 'none', false, 'json', request);
}

model UpdateOssExternalStoreRequest {
  project: string(name='project', example='ali-test-project', position='Host'),
  externalStoreName: string(name='externalStoreName', example='test-oss-store', position='Path,Body'),
  parameter: {
    accessid: string(name='accessid', example='LTAI5tFsHGGeYry*****1Sz'),
    accesskey: string(name='accesskey', example='GyviCLDVHkHrOztdkxuE6******Rp6'),
    bucket: string(name='bucket', example='my-bucket'),
    columns: [ 
      {
        name: string(name='name', example='test'),
        type: string(name='type'),
      }
    ](name='columns'),
    endpoint: string(name='endpoint', example='oss-cn-hangzhou.aliyuncs.com'),
    objects: [ string ](name='objects'),
  }(name='parameter', position='Body'),
  storeType: string(name='storeType', example='oss', position='Body'),
}

model UpdateOssExternalStoreResponse = {
  headers: map[string]string(name='headers'),
}

async function updateOssExternalStore(request: UpdateOssExternalStoreRequest): UpdateOssExternalStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateOssExternalStore', 'PUT', '/externalstores/{externalStoreName}', 'none', false, 'json', request);
}

model UpdateOssShipperRequest {
  project: string(name='project', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', example='test-logstore', position='Path'),
  shipperName: string(name='shipperName', example='test-shipper', position='Path,Body'),
  targetConfiguration: {
    bufferInterval?: int32(name='bufferInterval', example='300'),
    bufferSize?: int32(name='bufferSize', example='256'),
    compressType?: string(name='compressType', example='snappy'),
    enable?: boolean(name='enable', example='true'),
    ossBucket: string(name='ossBucket', example='test-bucket'),
    ossPrefix: string(name='ossPrefix', example='test-prefix/hello-prefix'),
    pathFormat?: string(name='pathFormat', example='2022/01/01/00/59'),
    roleArn: string(name='roleArn', example='acs:ram::16542189**343050:role/aliyunlogdefaultrole'),
    storage: {
      detail: map[string]any(name='detail', example='{ 
"columns": [
   {"name" : "test-col", "type": "text"}
 ]
}'),
      format: string(name='format', example='parquet'),
    }(name='storage'),
    timeZone?: string(name='timeZone', example='+8'),
  }(name='targetConfiguration', position='Body'),
  targetType: string(name='targetType', example='oss', position='Body'),
}

model UpdateOssShipperResponse = {
  headers: map[string]string(name='headers'),
}

async function updateOssShipper(request: UpdateOssShipperRequest): UpdateOssShipperResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateOssShipper', 'PUT', '/logstores/{logstore}/shipper/{shipperName}', 'none', false, 'json', request);
}

model UpdateProjectRequest {
  project: string(name='project', description='Project名称。', example='ali-project-test', position='Host'),
  description: string(name='description', example='Description of my-project-test', position='Body'),
}

model UpdateProjectResponse = {
  headers: map[string]string(name='headers'),
}

async function updateProject(request: UpdateProjectRequest): UpdateProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateProject', 'PUT', '/', 'none', false, 'json', request);
}

model UpdateRdsExternalStoreRequest {
  project: string(name='project', example='ali-test-project', position='Host'),
  externalStoreName: string(name='externalStoreName', example='test-external-store', position='Path,Body'),
  parameter: {
    db: string(name='db', example='meta'),
    host?: string(name='host', example='192.168.XX.XX'),
    instanceId?: string(name='instance-id', example='i-bp1b6c719dfa08exf****'),
    password: string(name='password', example='sfdsfldsfksfls****'),
    port: string(name='port', example='3306'),
    region: string(name='region', example='cn-qingdao'),
    table: string(name='table', example='join_meta'),
    username: string(name='username', example='root'),
    vpcId?: string(name='vpc-id', example='vpc-bp1aevy8sofi8mh1q****'),
  }(name='parameter', position='Body'),
  storeType: string(name='storeType', example='rds-vpc', position='Body'),
}

model UpdateRdsExternalStoreResponse = {
  headers: map[string]string(name='headers'),
}

async function updateRdsExternalStore(request: UpdateRdsExternalStoreRequest): UpdateRdsExternalStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateRdsExternalStore', 'PUT', '/externalstores/{externalStoreName}', 'none', false, 'json', request);
}

model UpdateSavedSearchRequest {
  project: string(name='project', description='Project 名称。', example='my-project', position='Host'),
  savedsearchName: string(name='savedsearchName', example='savedsearch-name', position='Path,Body'),
  displayName: string(name='displayName', example='displayname', position='Body'),
  logstore: string(name='logstore', example='aliyun-test-logstore', position='Body'),
  searchQuery: string(name='searchQuery', example='*|select date_format(__time__-__time__%60, \\"%H:%i:%s\\") as time, COUNT(*) as pv group by time', position='Body'),
  topic?: string(name='topic', example='theme', position='Body'),
}

model UpdateSavedSearchResponse = {
  headers: map[string]string(name='headers'),
}

async function updateSavedSearch(request: UpdateSavedSearchRequest): UpdateSavedSearchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateSavedSearch', 'PUT', '/savedsearches/{savedsearchName}', 'none', false, 'json', request);
}

model IndexKeysValue = {
  chn?: boolean(name='chn', example='true'),
  caseSensitive?: boolean(name='caseSensitive', example='true'),
  token?: [ string ](name='token'),
  alias?: string(name='alias', example='myAlias'),
  type: string(name='type', example='text'),
  docValue?: boolean(name='doc_value', example='true'),
}

model KeysValue = {
  caseSensitive?: boolean(name='caseSensitive', example='false'),
  chn?: boolean(name='chn', example='false'),
  type: string(name='type', example='text'),
  alias?: string(name='alias', example='myAlias'),
  token?: [ string ](name='token'),
  docValue?: boolean(name='doc_value', example='false'),
}

