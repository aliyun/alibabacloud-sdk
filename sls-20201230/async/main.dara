/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Sls';
  @version = '2020-12-30';
  @endpointRule = 'central';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ConsumerGroup {
  name?: string(name='name', description='消费者名称。', example='test-group'),
  order?: boolean(name='order', description='是否有序消费', example='false'),
  timeout?: int32(name='timeout', description='消费超时时长，单位为秒', example='300'),
}

model EncryptConf {
  enable: boolean(name='enable', description='enable'),
  encryptType?: string(name='encrypt_type', description='加密算法，只支持default和m4。当 enable 为 true 时，此项必选。', example='default'),
  userCmkInfo?: EncryptUserCmkConf(name='user_cmk_info'),
}

model EncryptUserCmkConf {
  arn: string(name='arn', description='arn'),
  cmkKeyId: string(name='cmk_key_id', description='cmk_key_id'),
  regionId: string(name='region_id', description='region_id'),
}

model Histogram {
  count?: long(name='count', description='count'),
  from?: int32(name='from', description='开始'),
  progress?: string(name='progress', description='progress'),
  to?: int32(name='to', description='结束'),
}

model LogtailConfig {
  configName: string(name='configName', description='logtail 配置的名称。', example='test-config'),
  createTime?: long(name='createTime', description='创建时间，unix 时间戳。', example='1655176807'),
  inputDetail: map[string]any(name='inputDetail', description='logtail 输入的详细配置。'),
  inputType: string(name='inputType', description='logtail 读取日志的输入类型。', example='file'),
  lastModifyTime?: long(name='lastModifyTime', description='最后一次修改时间，unix 时间戳。', example='1655176807'),
  logSample?: string(name='logSample', description='日志样例，可以用于自动生成正则捕获字段。', example='2022-06-14 11:13:29.796 | DEBUG    | __main__:<module>:1 - hello world'),
  outputDetail: {
    endpoint: string(name='endpoint', description='日志项目的 endpoint。', example='cn-hangzhou-intranet.log.aliyuncs.com'),
    logstoreName: string(name='logstoreName', description='输出的目标 logstore 名称。', example='test-logstore'),
    region?: string(name='region', description='地域。', example='cn-hangzhou'),
  }(name='outputDetail', description='logtail 输出的详细配置。'),
  outputType: string(name='outputType', description='logtail 输出的目标类型。这里固定选择 LogService。', example='LogService'),
}

model SavedSearch {
  displayName: string(name='displayName', description='displayName'),
  logstore: string(name='logstore', description='logstore'),
  savedsearchName: string(name='savedsearchName', description='savedsearchName'),
  searchQuery: string(name='searchQuery', description='searchQuery'),
  topic?: string(name='topic', description='topic'),
}

model Chart {
  action: map[string]any(name='action', description='action'),
  display: map[string]any(name='display', description='图表的显示配置'),
  search: map[string]any(name='search', description='查询配置'),
  title: string(name='title', description='图表标题。支持大小写英文字母、数字、下划线_、连字符-，连字符与下划线不能作为名称开头与结尾，长度必须在[2,64] 之间。', example='my-chart'),
  type: string(name='type', description='图表的类型。', example='linepro'),
}

model Dashboard {
  attribute?: map[string]string(name='attribute', description='属性值，可用于修改仪表盘的布局等属性，例如 "type": "free" 自由布局， "type":"grid" 网格布局。'),
  charts: [
    Chart
  ](name='charts', description='仪表盘内包含的图表。'),
  dashboardName: string(name='dashboardName', description='仪表盘ID。同一个Project下，仪表盘ID唯一，不可重复。', example='dashboard-1609294922657-434834'),
  description?: string(name='description', description='描述信息。', example='这是一个仪表盘。'),
  displayName: string(name='displayName', description='仪表盘的展示名称。', example='test-alert'),
}

model EtlJob {
  enable: boolean(name='enable', description='是否启用', example='true'),
  etlJobName: string(name='etlJobName', description='任务名称'),
  functionConfig: {
    accountId?: string(name='accountId', description='账户 id'),
    endpoint?: string(name='endpoint', description='endpoint'),
    functionName?: string(name='functionName', description='函数名', example='hello-wrold'),
    functionProvider: string(name='functionProvider', description='函数 provider，可选值为 FunctionCompute 、CloudProdLogDispatch。当值为 FunctionCompute 时，endpoint、accountid 、regionName 、serviceName 、functionName 必选。', example='FunctionCompute'),
    regionName?: string(name='regionName', description='地域', example='cn-hangzhou'),
    roleArn?: string(name='roleArn', description='角色授权'),
    serviceName?: string(name='serviceName', description='服务名', example='my-service'),
  }(name='functionConfig', description='运行函数配置'),
  functionParameter: map[string]any(name='functionParameter', description='参数列表'),
  logConfig: {
    endpoint: string(name='endpoint', description='endpoint'),
    logstoreName: string(name='logstoreName', description='logstore 名称'),
    projectName: string(name='projectName', description='project 名称'),
  }(name='logConfig', description='日志配置'),
  sourceConfig: {
    logstoreName: string(name='logstoreName', description='logstore 名称', example='my-logstore'),
  }(name='sourceConfig', description='配置数据来源'),
  triggerConfig: {
    maxRetryTime: int32(name='maxRetryTime', description='最大重试次数，必须在[0,100] 之间'),
    roleArn: string(name='roleArn', description='角色授权配置'),
    startingPosition?: string(name='startingPosition', description='开始位置，可选 latest、at-unixtime， 默认 latest。', example='at-unixtime'),
    startingUnixtime?: long(name='startingUnixtime', description='开始时间', example='当 strtingPosition 为 at-unixtime 时生效'),
    triggerInterval: int32(name='triggerInterval', description='触发间隔，单位为秒，必须在 [3,600] 之间'),
  }(name='triggerConfig', description='触发器配置'),
}

model EtlMeta {
  enable: boolean(name='enable', description='是否启用'),
  etlMetaKey: string(name='etlMetaKey', description='key'),
  etlMetaName: string(name='etlMetaName', description='名字'),
  etlMetaTag?: string(name='etlMetaTag', description='tag'),
  etlMetaValue?: string(name='etlMetaValue', description='value'),
}

model ExternalStore {
  externalStoreName: string(name='externalStoreName', description='外部存储的名称。', example='rds_store'),
  parameter: map[string]any(name='parameter', description='参数'),
  storeType: string(name='storeType', description='类型。可选 rds-vpc 或者 oss', example='rds-vpc'),
}

model Index {
  keys?: map[string]IndexKeysValue(name='keys', description='字段索引'),
  lastModifyTime?: long(name='lastModifyTime', description='上次修改时间', example='1622186280'),
  line?: {
    caseSensitive?: boolean(name='caseSensitive', description='大小写敏感', example='true'),
    chn?: boolean(name='chn', description='包含中文', example='true'),
    excludeKeys?: [ string ](name='exclude_keys', description='排除的字段列表，不能与include_keys同时指定。'),
    includeKeys?: [ string ](name='include_keys', description='包含的字段列表，不能与exclude_keys同时指定。'),
    token: [ string ](name='token', description='分词符'),
  }(name='line', description='全文索引'),
  logReduce?: boolean(name='log_reduce', description='是否开启日志聚类', example='true'),
  logReduceBlackList?: [ string ](name='log_reduce_black_list', description='日志聚类的聚类字段过滤黑名单，仅当日志聚类开启时有效'),
  logReduceWhiteList?: [ string ](name='log_reduce_white_list', description='日志聚类的聚类字段过滤白名单，仅当日志聚类开启时有效'),
  maxTextLen?: int32(name='max_text_len', description='统计字段最大长度', example='2048'),
  ttl: int32(name='ttl', description='ttl', example='30'),
}

model Logging {
  loggingDetails: [ 
    {
      logstore: string(name='logstore', description='logstore 名称。', example='my-logstore'),
      type: string(name='type', description='logging 类型。', example='consumergroup_log'),
    }
  ](name='loggingDetails', description='logging 配置项'),
  loggingProject: string(name='loggingProject', description='project 名称。', example='my-project'),
}

model Logstore {
  appendMeta?: boolean(name='appendMeta', description='接收日志后，自动添加客户端外网IP和日志到达时间', example='true'),
  autoSplit?: boolean(name='autoSplit', description='是否开启 shard 自动分裂。当写入数据量超过已有分区（Shard）写入服务能力且持续5分钟以上时，开启自动分裂功能可自动根据数据量增加分区数量', example='true'),
  createTime?: int32(name='createTime', description='创建时间。'),
  enableTracking?: boolean(name='enable_tracking', description='WebTracking功能支持快速采集各种浏览器以及iOS/Android/APP访问信息，默认关闭', example='false'),
  encryptConf?: EncryptConf(name='encrypt_conf', description='加密配置'),
  hotTtl?: int32(name='hot_ttl', description='必须在 (30, ttl) 之间'),
  lastModifyTime?: int32(name='lastModifyTime', description='最后修改时间。'),
  logstoreName: string(name='logstoreName', description='logstore 的名称。', example='my-logstore'),
  maxSplitShard?: int32(name='maxSplitShard', description='最大 shard 数量。', example='2'),
  mode?: string(name='mode', description='[ standard | query ]', example='standard'),
  productType?: string(name='productType', description='日志所属产品类型'),
  shardCount: int32(name='shardCount', description='shard 数量。', example='2'),
  telemetryType?: string(name='telemetryType', description='telemetryType'),
  ttl: int32(name='ttl', description='数据保存的天数。', example='30'),
}

model Machine {
  ip?: string(name='ip', description='机器 ip 地址。', example='192.168.x.x'),
  lastHeartbeatTime?: long(name='lastHeartbeatTime', description='最后一次心跳时间。Unix时间戳格式，表示从1970-1-1 00:00:00 UTC计算起的秒数。', example='1657509674'),
  machineUniqueid?: string(name='machine-uniqueid', description='机器的唯一标识。', example='3B70F4F1-80F7-46C4-A6C1-100D66C***47'),
  userdefinedId?: string(name='userdefined-id', description='机器的用户自定义标识。', example='test'),
}

model MachineGroup {
  groupAttribute?: {
    externalName?: string(name='externalName', description='机器组所依赖的外部管理系统标识。', example='test-group'),
    groupTopic?: string(name='groupTopic', description='机器组的日志主题。', example='test-topic'),
  }(name='groupAttribute', description='机器组属性。'),
  groupName: string(name='groupName', description='机器组名称。', example='test-group'),
  groupType?: string(name='groupType', description='机器组种类。目前固定为空字符串。'),
  machineIdentifyType: string(name='machineIdentifyType', description='机器组标识种类，支持 IP 标识或者用户自定义标识，即 ip 、userdefined。', example='ip'),
  machineList: [ string ](name='machineList', description='机器组标识列表。'),
}

model Project {
  createTime?: string(name='createTime', description='创建时间'),
  description: string(name='description', description='描述'),
  lastModifyTime?: string(name='lastModifyTime', description='最后更新时间'),
  owner?: string(name='owner', description='project owner'),
  projectName: string(name='projectName', description='Project名称'),
  region?: string(name='region', description='所在区域'),
  resourceGroupId?: string(name='resourceGroupId', description='资源组Id'),
  status?: string(name='status', description='状态'),
}

model Shard {
  createTime?: int32(name='createTime', description='Shard的创建时间。Unix时间戳格式，表示从1970-1-1 00:00:00 UTC计算起的秒数。', example='1453949705'),
  exclusiveEndKey?: string(name='exclusiveEndKey', description='指定Shard范围的结束值，Shard范围中不包含该值。即 shard 包含MD5值在 [inclusiveBeginKey, exclusiveEndKey) 之间的日志。', example='8000000000000000000000000000000'),
  inclusiveBeginKey?: string(name='inclusiveBeginKey', description='指定Shard范围的起始值，Shard范围中包含该值。即 shard 包含MD5值在 [inclusiveBeginKey, exclusiveEndKey) 之间的日志。', example='00000000000000000000000000000000'),
  shardID?: int32(name='shardID', description='shard id', example='0'),
  status?: string(name='status', description='shard 的读写状态，readwrite 或者 readonly。', example='readwrite'),
}

model ApplyConfigToMachineGroupRequest {
  project: string(name='project', description='project 名称。', example='ali-test-project', position='Host'),
  machineGroup: string(name='machineGroup', description='机器组名称。', example='sample-group', position='Path'),
  configName: string(name='configName', description='logtail 配置名称。', example='logtail-config-sample', position='Path'),
}

model ApplyConfigToMachineGroupResponse = {
  headers: map[string]string(name='headers'),
}

async function applyConfigToMachineGroup(request: ApplyConfigToMachineGroupRequest): ApplyConfigToMachineGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ApplyConfigToMachineGroup', 'PUT', '/machinegroups/{machineGroup}/configs/{configName}', 'none', false, 'json', request);
}

model ChangeResourceGroupRequest {
  resourceGroupId: string(name='resourceGroupId', position='Body'),
  resourceId: string(name='resourceId', position='Body'),
  resourceType?: string(name='resourceType', example='PROJECT', position='Body'),
}

model ChangeResourceGroupResponse = {
  headers: map[string]string(name='headers'),
}

async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ChangeResourceGroup', 'PUT', '/resourcegroup', 'none', false, 'json', request);
}

model ConsumerGroupHeartBeatRequest {
  project: string(name='project', position='Host'),
  logstore: string(name='logstore', example='ali-test-logstore', position='Path'),
  consumerGroup: string(name='consumerGroup', example='consumer_group_test', position='Path'),
  body: [ int32 ](name='body', position='Body'),
  consumer: string(name='consumer', example='consumer_1', position='Query'),
}

model ConsumerGroupHeartBeatResponse = {
  headers: map[string]string(name='headers'),
  body: [ int32 ](name='body'),
}

async function consumerGroupHeartBeat(request: ConsumerGroupHeartBeatRequest): ConsumerGroupHeartBeatResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ConsumerGroupHeartBeat', 'POST', '/logstores/{logstore}/consumergroups/{consumerGroup}?type=heartbeat', 'json', false, 'json', request);
}

model CreateConsumerGroupRequest {
  logstore: string(name='logstore', example='aliyun-test-logstore', position='Path'),
  project: string(name='project', position='Host'),
  consumerGroup: string(name='consumerGroup', example='consumerGroupX', position='Body'),
  order: boolean(name='order', example='true', position='Body'),
  timeout: int32(name='timeout', example='300', position='Body'),
}

model CreateConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
}

async function createConsumerGroup(request: CreateConsumerGroupRequest): CreateConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateConsumerGroup', 'POST', '/logstores/{logstore}/consumergroups', 'none', false, 'json', request);
}

model CreateDomainRequest {
  project: string(name='project', description='A short description of struct', position='Host'),
  domainName: string(name='domainName', example='example.com', position='Body'),
}

model CreateDomainResponse = {
  headers: map[string]string(name='headers'),
}

async function createDomain(request: CreateDomainRequest): CreateDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDomain', 'POST', '/domains', 'none', false, 'json', request);
}

model CreateIndexRequest {
  logstore: string(name='logstore', example='ali-logstore-test', position='Path'),
  project: string(name='project', position='Host'),
  keys?: map[string]KeysValue(name='keys', position='Body'),
  line?: {
    caseSensitive?: boolean(name='caseSensitive', description='大小写敏感', example='false'),
    chn?: boolean(name='chn', description='包含中文', example='false'),
    excludeKeys?: [ string ](name='exclude_keys', description='排除的字段列表，不能与include_keys同时指定。'),
    includeKeys?: [ string ](name='include_keys', description='包含的字段列表，不能与exclude_keys同时指定。'),
    token: [ string ](name='token', description='分词符列表。可以设置一个分词参数，指定这个字段按照哪一种方式分词。'),
  }(name='line', description='配置全文索引', position='Body'),
  logReduce?: boolean(name='log_reduce', description='开启日志聚类，开启后白名单与黑名单至多生效其中一个。', example='false', position='Body'),
  logReduceBlackList?: [ string ](name='log_reduce_black_list', description='日志聚类的聚类字段黑名单', position='Body'),
  logReduceWhiteList?: [ string ](name='log_reduce_white_list', description='日志聚类的聚类字段白名单', position='Body'),
  maxTextLen?: int32(name='max_text_len', description='统计字段的最大长度', example='2048', position='Body'),
  ttl?: int32(name='ttl', description='保存时间，单位为天', example='30', position='Body'),
}

model CreateIndexResponse = {
  headers: map[string]string(name='headers'),
}

async function createIndex(request: CreateIndexRequest): CreateIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateIndex', 'POST', '/logstores/{logstore}/index', 'none', false, 'json', request);
}

model CreateLogStoreRequest {
  project: string(name='project', position='Host'),
  appendMeta?: boolean(name='appendMeta', example='false', position='Body'),
  autoSplit?: boolean(name='autoSplit', example='true', position='Body'),
  enableTracking?: boolean(name='enable_tracking', example='false', position='Body'),
  encryptConf?: EncryptConf(name='encrypt_conf', position='Body'),
  hotTtl?: int32(name='hot_ttl', example='60', position='Body'),
  logstoreName: string(name='logstoreName', example='my-logstore', position='Body'),
  maxSplitShard?: int32(name='maxSplitShard', example='64', position='Body'),
  mode?: string(name='mode', example='standard', position='Body'),
  shardCount: int32(name='shardCount', example='2', position='Body'),
  telemetryType?: string(name='telemetryType', example='None', position='Body'),
  ttl: int32(name='ttl', example='1', position='Body'),
}

model CreateLogStoreResponse = {
  headers: map[string]string(name='headers'),
}

async function createLogStore(request: CreateLogStoreRequest): CreateLogStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateLogStore', 'POST', '/logstores', 'none', false, 'json', request);
}

model CreateLoggingRequest {
  project: string(name='project', description='Project 名称。', example='ali-test-project', position='Host'),
  loggingDetails: [ 
    {
      logstore: string(name='logstore', description='该种类服务日志要保存到的 logstore 名称。', example='my-logstore'),
      type: string(name='type', description='服务日志的种类。可选 "consumergroup_log"、 "logtail_alarm"、"operation_log"、"logtail_profile"、"metering"、"logtail_status"、"scheduled_sql_alert"、 "etl_alert" 等。', example='consumergroup_log'),
    }
  ](name='loggingDetails', description='服务日志配置列表。', position='Body'),
  loggingProject: string(name='loggingProject', description='服务日志要保存到的 project 名称。', example='my-project', position='Body'),
}

model CreateLoggingResponse = {
  headers: map[string]string(name='headers'),
}

async function createLogging(request: CreateLoggingRequest): CreateLoggingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateLogging', 'POST', '/logging', 'none', false, 'json', request);
}

model CreateMachineGroupRequest {
  project: string(name='project', description='project 名称。', example='ali-test-project', position='Host'),
  groupAttribute?: {
    externalName?: string(name='externalName', description='机器组所依赖的外部管理系统标识。', example='testgroup'),
    groupTopic?: string(name='groupTopic', description='机器组的日志主题。', example='testtopic'),
  }(name='groupAttribute', description='机器组属性。', position='Body'),
  groupName: string(name='groupName', description='机器组名称。', example='test-machine-group', position='Body'),
  groupType?: string(name='groupType', description='机器组类型，可选值，默认为空。', example='""', position='Body'),
  machineIdentifyType: string(name='machineIdentifyType', description='机器组标识种类，支持 ip 、userdefined 两种。', example='ip', position='Body'),
  machineList: [ string ](name='machineList', description='机器列表。', position='Body'),
}

model CreateMachineGroupResponse = {
  headers: map[string]string(name='headers'),
}

async function createMachineGroup(request: CreateMachineGroupRequest): CreateMachineGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateMachineGroup', 'POST', '/machinegroups', 'none', false, 'json', request);
}

model CreateOdpsShipperRequest {
  project: string(name='project', description='Project 名称。', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='Logstore 名称。', example='test-logstore', position='Path'),
  shipperName: string(name='shipperName', description='日志投递名称。', example='test-shipper', position='Body'),
  targetConfiguration: {
    bufferInterval?: int32(name='bufferInterval', description='导入时间间隔，秒，只支持 1800 、3600两种。', example='1800'),
    enable?: boolean(name='enable', description='是否启用该配置，默认为 true。', example='true'),
    fields: [ string ](name='fields', description='要投递的普通列，至少要有一个元素。'),
    odpsEndpoint: string(name='odpsEndpoint', description='odpsEndpoint', example='http://service.cn-hangzhou.maxcompute.aliyun-inc.com/api'),
    odpsProject: string(name='odpsProject', description='要投递区域的 odps 项目名称', example='ali-odps-project'),
    odpsTable: string(name='odpsTable', description='odps表名', example='test-table'),
    partitionColumn: [ string ](name='partitionColumn', description='要投递的分区列，至少要有一个元素。'),
    partitionTimeFormat: string(name='partitionTimeFormat', description='时间分区格式', example='yyyy_MM_dd_hh_mm'),
  }(name='targetConfiguration', position='Body'),
  targetType: string(name='targetType', description='投递目标的类型，这里固定为 odps。', example='odps', position='Body'),
}

model CreateOdpsShipperResponse = {
  headers: map[string]string(name='headers'),
}

async function createOdpsShipper(request: CreateOdpsShipperRequest): CreateOdpsShipperResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateOdpsShipper', 'POST', '/logstores/{logstore}/shipper', 'none', false, 'json', request);
}

model CreateOssExternalStoreRequest {
  project: string(name='project', description='A short description of struct', example='my-project', position='Host'),
  externalStoreName: string(name='externalStoreName', description='外部存储的名称。', example='test_oss_store', position='Body'),
  parameter: {
    accessid: string(name='accessid', description='您的AccessKey ID。', example='LTAI5tFsHGGeYry*****1Sz'),
    accesskey: string(name='accesskey', description='您的AccessKey Secret。', example='GyviCLDVHkHrOztdkxuE6******Rp6'),
    bucket: string(name='bucket', description='oss 桶名称。', example='my-bucket'),
    columns: [ 
      {
        name: string(name='name', example='auto-test'),
        type: string(name='type', example='sls'),
      }
    ](name='columns'),
    endpoint: string(name='endpoint', description='oss 的 endpoint 访问网址。', example='oss-cn-hangzhou.aliyuncs.com'),
    objects: [ string ](name='objects'),
  }(name='parameter', description='外部存储的参数。', position='Body'),
  storeType: string(name='storeType', description='外部存储的类型。这里固定为 oss', example='oss', position='Body'),
}

model CreateOssExternalStoreResponse = {
  headers: map[string]string(name='headers'),
}

async function createOssExternalStore(request: CreateOssExternalStoreRequest): CreateOssExternalStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateOssExternalStore', 'POST', '/externalstores', 'none', false, 'json', request);
}

model CreateOssShipperRequest {
  project: string(name='project', description='Project 名称。', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='Logstore 名称。', example='test-logstore', position='Path'),
  shipperName: string(name='shipperName', description='日志投递名称。', example='test-shipper', position='Body'),
  targetConfiguration: {
    bufferInterval?: int32(name='bufferInterval', description='导出间隔，秒，默认值为 300，可取值在 [300,900]之间。', example='300'),
    bufferSize?: int32(name='bufferSize', description='自动控制投递任务创建间隔并设置OSS的一个Object大小（以未压缩计算）上限，单位：MB，默认 128 MB。支持[5,256] 之间的值。', example='256'),
    compressType?: string(name='compressType', description='压缩类型，支持 snappy 与 none，默认值为 none。', example='snappy'),
    enable?: boolean(name='enable', description='默认为 true，是否启用该配置。', example='true'),
    ossBucket: string(name='ossBucket', description='oss 桶名称', example='test-bucket'),
    ossPrefix: string(name='ossPrefix', description='oss 前缀，与 bucket 、pathFormat 一同组成投递的文件路径。示例值: test-prefix、test/prefix。
格式要求：可使用 / 分隔各部分，每个部分都必须满足以下条件：
1. 由大小写字母、数字、下划线_、连字符- 、点号.组成
2. 长度不超过 253 字符
3. 必须以大小写字母或者数字开头', example='test-prefix/hello-prefix'),
    pathFormat?: string(name='pathFormat', description='路径格式，默认为 %Y/%m/%d/%H/%M ，不能以 / 开头。任务投递文件到 oss 时会被使用日期时间格式化，例如%Y/%m/%d/%H/%M会被格式化为 2022/01/01/00/59 ，与bucket、ossPrefix 共同组成投递的目标文件路径。', example='2022/01/01/00/59'),
    roleArn: string(name='roleArn', description='RAM角色', example='acs:ram::16542189**343050:role/aliyunlogdefaultrole'),
    storage: {
      detail: map[string]any(name='detail', description='parquet 格式（必填项columns）：
{ 
"columns": [
   {"name" : "test-col", "type": "text"}
 ]
}

csv 格式（必填项columns）：
{ 
"columns": ["test-col"], 
"delimiter": ",", 
"quote": "",
"escape": "",
"nullIdentifier": "",
"header": false,
"lineFeed": "\\n"
 }

json 格式
{
"enableTag": false
}', example='{ 
"columns": [
   {"name" : "test-col", "type": "text"}
 ]
}'),
      format: string(name='format', description='支持 json、csv、parquet 三种', example='parquet'),
    }(name='storage', description='存储格式配置。'),
    timeZone?: string(name='timeZone', description='时区，默认取值为空字符串。可取值的格式为 +8000 等。', example='+8'),
  }(name='targetConfiguration', position='Body'),
  targetType: string(name='targetType', description='投递目标的类型，这里固定为 oss。', example='odps', position='Body'),
}

model CreateOssShipperResponse = {
  headers: map[string]string(name='headers'),
}

async function createOssShipper(request: CreateOssShipperRequest): CreateOssShipperResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateOssShipper', 'POST', '/logstores/{logstore}/shipper', 'none', false, 'json', request);
}

model CreateProjectRequest {
  description: string(name='description', example='this is test', position='Body'),
  projectName: string(name='projectName', example='test-project', position='Body'),
  resourceGroupId?: string(name='resourceGroupId', position='Body'),
}

model CreateProjectResponse = {
  headers: map[string]string(name='headers'),
}

async function createProject(request: CreateProjectRequest): CreateProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateProject', 'POST', '/', 'none', false, 'json', request);
}

model CreateRdsExternalStoreRequest {
  project: string(name='project', description='A short description of struct', example='ali-test-project', position='Host'),
  externalStoreName: string(name='externalStoreName', description='名称', example='rds_store', position='Body'),
  parameter: {
    db: string(name='db', description='RDS MySQL实例的数据库名称。', example='meta'),
    host?: string(name='host', description='RDS MySQL实例的内网地址或外网地址。', example='192.168.XX.XX'),
    instanceId?: string(name='instance-id', description='RDS MySQL实例ID。', example='i-bp1b6c719dfa08exf****'),
    password: string(name='password', description='RDS MySQL实例中账号对应的密码。', example='sfdsfldsfksfls****'),
    port: string(name='port', description='RDS MySQL实例的内网或者外网端口。', example='3306'),
    region: string(name='region', description='RDS MySQL实例所在地域。', example='cn-qingdao'),
    table: string(name='table', description='RDS MySQL实例的数据库表名称。', example='join_meta'),
    username: string(name='username', description='RDS MySQL实例中的账号名称。', example='root'),
    vpcId?: string(name='vpc-id', description='RDS MySQL实例所属的VPC ID。', example='vpc-bp1aevy8sofi8mh1q****'),
  }(name='parameter', description='参数', position='Body'),
  storeType: string(name='storeType', description='类型，这里固定为 rds-vpc', example='rds-vpc', position='Body'),
}

model CreateRdsExternalStoreResponse = {
  headers: map[string]string(name='headers'),
}

async function createRdsExternalStore(request: CreateRdsExternalStoreRequest): CreateRdsExternalStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateRdsExternalStore', 'POST', '/externalstores', 'none', false, 'json', request);
}

model CreateSavedSearchRequest {
  project: string(name='project', position='Host'),
  displayName: string(name='displayName', example='displayname', position='Body'),
  logstore: string(name='logstore', example='aliyun-test-logstore', position='Body'),
  savedsearchName: string(name='savedsearchName', example='pv in minutes', position='Body'),
  searchQuery: string(name='searchQuery', example='*|select date_format(__time__-__time__%60, \\"%H:%i:%s\\") as time, COUNT(*) as pv group by time', position='Body'),
  topic?: string(name='topic', example='theme', position='Body'),
}

model CreateSavedSearchResponse = {
  headers: map[string]string(name='headers'),
}

async function createSavedSearch(request: CreateSavedSearchRequest): CreateSavedSearchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateSavedSearch', 'POST', '/savedsearches', 'none', false, 'json', request);
}

model DeleteConsumerGroupRequest {
  project: string(name='project', description='Project name', position='Host'),
  logstore: string(name='logstore', description='Logstore name', example='ali-test-logstore', position='Path'),
  consumerGroup: string(name='consumerGroup', description='Consumer group', example='consumer-group-1', position='Path'),
}

model DeleteConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteConsumerGroup(request: DeleteConsumerGroupRequest): DeleteConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteConsumerGroup', 'DELETE', '/logstores/{logstore}/consumergroups/{consumerGroup}', 'none', false, 'json', request);
}

model DeleteDomainRequest {
  project: string(name='project', description='A short description of struct', position='Host'),
  domainName: string(name='domainName', description='要删除的域名', example='example.com', position='Path'),
}

model DeleteDomainResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteDomain(request: DeleteDomainRequest): DeleteDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteDomain', 'DELETE', '/domains/{domainName}', 'none', false, 'json', request);
}

model DeleteExternalStoreRequest {
  project: string(name='project', description='A short description of struct', position='Host'),
  externalStoreName: string(name='externalStoreName', example='rds_store', position='Path'),
}

model DeleteExternalStoreResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteExternalStore(request: DeleteExternalStoreRequest): DeleteExternalStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteExternalStore', 'DELETE', '/externalstores/{externalStoreName}', 'none', false, 'json', request);
}

model DeleteIndexRequest {
  logstore: string(name='logstore', description='A short description of struct', example='ali-test-logstore', position='Path'),
  project: string(name='project', position='Host'),
}

model DeleteIndexResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteIndex(request: DeleteIndexRequest): DeleteIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteIndex', 'DELETE', '/logstores/{logstore}/index', 'none', false, 'json', request);
}

model DeleteLogStoreRequest {
  project: string(name='project', description='project 名称', position='Host'),
  logstore: string(name='logstore', description='logstore 名称', example='aliyun-test-logstore', position='Path'),
}

model DeleteLogStoreResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteLogStore(request: DeleteLogStoreRequest): DeleteLogStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteLogStore', 'DELETE', '/logstores/{logstore}', 'none', false, 'json', request);
}

model DeleteLoggingRequest {
  project: string(name='project', description='Project 名称。', example='ali-test-project', position='Host'),
}

model DeleteLoggingResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteLogging(request: DeleteLoggingRequest): DeleteLoggingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteLogging', 'DELETE', '/logging', 'none', false, 'json', request);
}

model DeleteMachineGroupRequest {
  project: string(name='project', description='project 名称。', example='ali-test-project', position='Host'),
  machineGroup: string(name='machineGroup', description='机器组名称。', example='test-machine-group-4', position='Path'),
}

model DeleteMachineGroupResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteMachineGroup(request: DeleteMachineGroupRequest): DeleteMachineGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteMachineGroup', 'DELETE', '/machinegroups/{machineGroup}', 'none', false, 'json', request);
}

model DeleteProjectRequest {
  project: string(name='project', description='projetc 名称。', example='ali-test-project', position='Host'),
}

model DeleteProjectResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteProject(request: DeleteProjectRequest): DeleteProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteProject', 'DELETE', '/', 'none', false, 'json', request);
}

model DeleteProjectPolicyRequest {
  project?: string(name='project', description='A short description of struct', position='Host'),
}

model DeleteProjectPolicyResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteProjectPolicy(request: DeleteProjectPolicyRequest): DeleteProjectPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteProjectPolicy', 'DELETE', '/policy', 'json', false, 'json', request);
}

model DeleteSavedSearchRequest {
  project: string(name='project', description='A short description of struct', position='Host'),
  savedsearchName: string(name='savedsearchName', example='test-savedsearch-name', position='Path'),
}

model DeleteSavedSearchResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteSavedSearch(request: DeleteSavedSearchRequest): DeleteSavedSearchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteSavedSearch', 'DELETE', '/savedsearches/{savedsearchName}', 'none', false, 'json', request);
}

model DeleteShipperRequest {
  project: string(name='project', description='Project 名称。', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='Logstore 名称。', example='test-logstore', position='Path'),
  shipperName: string(name='shipperName', description='投递任务的名称。', example='test-shipper', position='Path'),
}

model DeleteShipperResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteShipper(request: DeleteShipperRequest): DeleteShipperResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteShipper', 'DELETE', '/logstores/{logstore}/shipper/{shipperName}', 'none', false, 'json', request);
}

model GetAppliedConfigsRequest {
  project: string(name='project', description='project 名称。', example='ali-test-project', position='Host'),
  machineGroup: string(name='machineGroup', description='机器组名称。', example='test-machine-group', position='Path'),
}

model GetAppliedConfigsResponseBody = {
  configs?: [ string ](name='configs', description='Logtail配置名称列表。'),
  count?: int32(name='count', description='Logtail配置数量。', example='2'),
}

model GetAppliedConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: GetAppliedConfigsResponseBody(name='body'),
}

async function getAppliedConfigs(request: GetAppliedConfigsRequest): GetAppliedConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAppliedConfigs', 'GET', '/machinegroups/{machineGroup}/configs', 'json', false, 'json', request);
}

model GetAppliedMachineGroupsRequest {
  project: string(name='project', description='project 名称。', example='ali-test-project', position='Host'),
  configName: string(name='configName', description='logtail 配置名称。', example='logtail-config-sample', position='Path'),
}

model GetAppliedMachineGroupsResponseBody = {
  count?: int32(name='count', description='返回的机器组数量。', example='2'),
  machinegroups?: [ string ](name='machinegroups', description='返回的机器组名称列表。', example='[ "sample-group1","sample-group2" ]'),
}

model GetAppliedMachineGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: GetAppliedMachineGroupsResponseBody(name='body'),
}

async function getAppliedMachineGroups(request: GetAppliedMachineGroupsRequest): GetAppliedMachineGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAppliedMachineGroups', 'GET', '/configs/{configName}/machinegroups', 'json', false, 'json', request);
}

model GetCheckPointRequest {
  project: string(name='project', description='project 名称。', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='logstore 名称。', example='test-logstore', position='Path'),
  consumerGroup: string(name='consumerGroup', description='消费组名称。', example='consumer-group-1', position='Path'),
  shard?: int32(name='shard', description='Shard ID。
如果指定的Shard不存在，则返回空列表。
如果不指定Shard，则返回所有Shard的checkpoint。', example='1', position='Query'),
}

model GetCheckPointResponse = {
  headers: map[string]string(name='headers'),
  body: [ 
    {
      shard?: int32(name='shard', description='Shard ID。', example='0'),
      checkpoint?: string(name='checkpoint', description='checkpoint 值。', example='MTUyNDE1NTM3OTM3MzkwODQ5Ng=='),
      updateTime?: long(name='updateTime', description='checkpoint最后的更新时间。Unix时间戳格式，表示从1970-1-1 00:00:00 UTC计算起的秒数。', example='1524224984800922'),
      consumer?: string(name='consumer', description='消费者。', example='consumer_1'),
    }
  ](name='body'),
}

async function getCheckPoint(request: GetCheckPointRequest): GetCheckPointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetCheckPoint', 'GET', '/logstores/{logstore}/consumergroups/{consumerGroup}', 'json', false, 'json', request);
}

model GetContextLogsRequest {
  project: string(name='project', description='project 名称。', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='logstore 名称。', example='test-logstore', position='Path'),
  backLines: long(name='back_lines', description='指定起始日志往前（上文）的日志条数，取值范围为(0,100]。', example='10', position='Query'),
  forwardLines: long(name='forward_lines', description='指定起始日志往后（下文）的日志条数，取值范围为(0,100]。', example='10', position='Query'),
  packId: string(name='pack_id', description='起始日志所属的LogGroup的唯一身份标识。', example='85C897C740352DC6-808', position='Query'),
  packMeta: string(name='pack_meta', description='起始日志在对应LogGroup内的唯一上下文结构标识。', example='2|MTY1NTcwNTUzODY5MTY0MDk1Mg==|3|0', position='Query'),
  type: string(name='type', description='Logstore中数据的类型。该接口中该参数固定为context_log。', example='context_log', position='Query'),
}

model GetContextLogsResponseBody = {
  backLines?: long(name='back_lines', description='向前查询到的日志条数。', example='100'),
  forwardLines?: long(name='forward_lines', description='向后查询到的日志条数。', example='100'),
  logs?: [  map[string]any ](name='logs', description='获取到的日志，按上下文顺序排列。当根据指定起始日志查询不到上下文日志时，此参数为空。'),
  progress?: string(name='progress', description='查询的结果是否完整。
Complete：查询已经完成，返回结果为完整结果。
Incomplete：查询已经完成，返回结果为不完整结果，需要重复请求以获得完整结果。', example='Complete'),
  totalLines?: long(name='total_lines', description='返回的总日志条数，包含请求参数中所指定的起始日志。', example='201'),
}

model GetContextLogsResponse = {
  headers: map[string]string(name='headers'),
  body: GetContextLogsResponseBody(name='body'),
}

async function getContextLogs(request: GetContextLogsRequest): GetContextLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetContextLogs', 'GET', '/logstores/{logstore}', 'json', false, 'json', request);
}

model GetCursorRequest {
  project: string(name='project', description='project 名称。', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='logstore 名称。', example='sls-test-logstore', position='Path'),
  shardId: int32(name='shardId', description='Shard ID。', example='1', position='Path'),
  from: string(name='from', description='时间点（Unix时间戳）或者字符串begin、end。', example='begin', position='Query'),
}

model GetCursorResponseBody = {
  cursor?: string(name='cursor', description='游标位置。', example='MTQ0NzI5OTYwNjg5NjYzMjM1Ng=='),
}

model GetCursorResponse = {
  headers: map[string]string(name='headers'),
  body: GetCursorResponseBody(name='body'),
}

async function getCursor(request: GetCursorRequest): GetCursorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetCursor', 'GET', '/logstores/{logstore}/shards/{shardId}?type=cursor', 'json', false, 'json', request);
}

model GetCursorTimeRequest {
  project: string(name='project', description='project 名称。', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='logstore 名称。', example='test-logstore', position='Path'),
  shardId: int32(name='shardId', description='shard id。', example='0', position='Path'),
  cursor: string(name='cursor', description='游标。', example='MTU0NzQ3MDY4MjM3NjUxMzQ0Ng==', position='Query'),
}

model GetCursorTimeResponseBody = {
  cursorTime?: string(name='cursor_time', description='Cursor的服务端时间。Unix时间戳格式，表示从1970-1-1 00:00:00 UTC计算起的秒数。', example='1554260243'),
}

model GetCursorTimeResponse = {
  headers: map[string]string(name='headers'),
  body: GetCursorTimeResponseBody(name='body'),
}

async function getCursorTime(request: GetCursorTimeRequest): GetCursorTimeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetCursorTime', 'GET', '/logstores/{logstore}/shards/{shardId}?type=cursor_time', 'json', false, 'json', request);
}

model GetExternalStoreRequest {
  project: string(name='project', position='Host'),
  externalStoreName: string(name='externalStoreName', description='A short description of struct', example='rds_store', position='Path'),
}

model GetExternalStoreResponse = {
  headers: map[string]string(name='headers'),
  body: ExternalStore  
}

async function getExternalStore(request: GetExternalStoreRequest): GetExternalStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetExternalStore', 'GET', '/externalstores/{externalStoreName}', 'json', false, 'json', request);
}

model GetHistogramsRequest {
  project: string(name='project', description='project 名称。', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='logstore 名称。', example='test-logstore', position='Path'),
  from: long(name='from', description='查询开始时间点。UNIX时间戳格式，表示从1970-1-1 00:00:00 UTC计算起的秒数。

时间区间遵循“左闭右开”原则，即该时间区间包括区间开始时间点，但不包括区间结束时间点。如果from和to的值相同，则为无效区间，函数直接返回错误。', example='1409529600', position='Query'),
  query?: string(name='query', description='查询语句。仅支持查询语句，不支持分析语句。关于查询语句的详细语法，请参见查询语法。', example='* | with_pack_meta', position='Query'),
  to: long(name='to', description='查询结束时间点。UNIX时间戳格式，表示从1970-1-1 00:00:00 UTC计算起的秒数。

时间区间遵循“左闭右开”原则，即该时间区间包括区间开始时间点，但不包括区间结束时间点。如果from和to的值相同，则为无效区间，函数直接返回错误。', example='1409569200', position='Query'),
  topic?: string(name='topic', description='日志主题。', example='topic', position='Query'),
}

model GetHistogramsResponse = {
  headers: map[string]string(name='headers'),
  body: [ 
    {
      from?: long(name='from', description='子时间区间的开始时间点。UNIX时间戳格式，表示从1970-1-1 00:00:00 UTC计算起的秒数。

时间区间遵循“左闭右开”原则，即该时间区间包括区间开始时间点，但不包括区间结束时间点。如果from和to的值相同，则为无效区间，函数直接返回错误。', example='1409529600'),
      to?: long(name='to', description='子时间区间的结束时间点。UNIX时间戳格式，表示从1970-1-1 00:00:00 UTC计算起的秒数。

时间区间遵循“左闭右开”原则，即该时间区间包括区间开始时间点，但不包括区间结束时间点。如果from和to的值相同，则为无效区间，函数直接返回错误。', example='1409569200'),
      count?: long(name='count', description='该子时间区间内查询到的日志条数。', example='2'),
      progress?: string(name='progress', description='当前查询结果在该子时间区间内的结果是否完整。

Complete：查询已经完成，返回结果为完整结果。

Incomplete：查询已经完成，返回结果为不完整结果，需要重复请求以获得完整结果。', example='Complete'),
    }
  ](name='body'),
}

async function getHistograms(request: GetHistogramsRequest): GetHistogramsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetHistograms', 'GET', '/logstores/{logstore}/index?type=histogram', 'json', false, 'json', request);
}

model GetIndexRequest {
  project: string(name='project', description='project 名称。', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='logstore 名称。', example='test-logstore', position='Path'),
}

model GetIndexResponseBody = {
  indexMode?: string(name='index_mode', description='索引模式', example='v2'),
  keys?: map[string]KeysValue(name='keys', description='字段索引配置。key为字段名称，value为索引配置。'),
  lastModifyTime?: long(name='lastModifyTime', description='上次修改时间', example='1524155379'),
  line?: {
    caseSensitive?: boolean(name='caseSensitive', description='大小写敏感', example='false'),
    chn?: boolean(name='chn', description='是否包含中文。', example='false'),
    excludeKeys?: [ string ](name='exclude_keys', description='排除的字段列表。'),
    includeKeys?: [ string ](name='include_keys', description='包含的字段列表。'),
    token?: [ string ](name='token', description='分词符列表。'),
  }(name='line', description='配置全文索引。'),
  logReduce?: boolean(name='log_reduce', description='是否开启日志聚类.', example='false'),
  logReduceBlackList?: [ string ](name='log_reduce_black_list', description='日志聚类的聚类字段过滤黑名单，仅当日志聚类开启时有效。'),
  logReduceWhiteList?: [ string ](name='log_reduce_white_list', description='日志聚类的聚类字段过滤白名单，仅当日志聚类开启时有效。'),
  maxTextLen?: int32(name='max_text_len', description='日志服务默认字段值的最大长度为2048字节，即2 KB。如果您需要修改字段值的最大长度，可设置统计字段（text）最大长度，取值范围为64~16384字节。', example='2048'),
  storage?: string(name='storage', description='存储类型，目前固定取值为pg。', example='pg'),
  ttl?: int32(name='ttl', description='索引文件生命周期，支持7天、30天、90天。', example='30'),
}

model GetIndexResponse = {
  headers: map[string]string(name='headers'),
  body: GetIndexResponseBody(name='body'),
}

async function getIndex(request: GetIndexRequest): GetIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetIndex', 'GET', '/logstores/{logstore}/index', 'json', false, 'json', request);
}

model GetLogStoreRequest {
  logstore: string(name='logstore', description='The logstore name.', example='ali-test-logstore', position='Path'),
  project: string(name='project', position='Host'),
}

model GetLogStoreResponse = {
  headers: map[string]string(name='headers'),
  body: Logstore  
}

async function getLogStore(request: GetLogStoreRequest): GetLogStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetLogStore', 'GET', '/logstores/{logstore}', 'json', false, 'json', request);
}

model GetLoggingRequest {
  project: string(name='project', description='Project 名称。', example='ali-test-project', position='Host'),
}

model GetLoggingResponse = {
  headers: map[string]string(name='headers'),
  body: Logging  
}

async function getLogging(request: GetLoggingRequest): GetLoggingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetLogging', 'GET', '/logging', 'json', false, 'json', request);
}

model GetLogsRequest {
  project: string(name='project', description='project 名称。', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='logstore 名称。', example='example-logstore', position='Path'),
  from: int32(name='from', description='查询开始时间点。该时间是指写入日志数据时指定的日志时间。

请求参数from和to定义的时间区间遵循左闭右开原则，即该时间区间包括区间开始时间点，但不包括区间结束时间点。如果from和to的值相同，则为无效区间，函数直接返回错误。
Unix时间戳格式，表示从1970-1-1 00:00:00 UTC计算起的秒数。', example='1627268185', position='Query'),
  line?: long(name='line', description='仅当query参数为查询语句时，该参数有效，表示请求返回的最大日志条数。最小值为0，最大值为100，默认值为100。', example='100', minimum=0, maximum=100, position='Query'),
  offset?: long(name='offset', description='仅当query参数为查询语句时，该参数有效，表示查询开始行。默认值为0。', example='0', position='Query'),
  powerSql?: boolean(name='powerSql', description='用于指定返回结果是否按日志时间戳降序返回日志，精确到分钟级别。

true：按照日志时间戳降序返回日志。
false（默认值）：按照日志时间戳升序返回日志。
注意
当query参数为查询语句时，参数reverse有效，用于指定返回日志排序方式。
当query参数为查询和分析语句时，参数reverse无效，由SQL分析语句中order by语法指定排序方式。如果order by为asc（默认），则为升序；如果order by为desc，则为降序。', example='false', position='Query'),
  query?: string(name='query', description='查询语句或者分析语句。更多信息，请参见查询概述和分析概述。

在query参数的分析语句中加上set session parallel_sql=true;，表示使用SQL独享版。例如* | set session parallel_sql=true; select count(*) as pv 。

说明 当query参数中有分析语句（SQL语句）时，该接口的line参数和offset参数无效，建议设置为0，需通过SQL语句的LIMIT语法实现翻页。更多信息，请参见分页显示查询分析结果。', example='status: 401 | SELECT remote_addr,COUNT(*) as pv GROUP by remote_addr ORDER by pv desc limit 5', position='Query'),
  reverse?: boolean(name='reverse', description='用于指定返回结果是否按日志时间戳降序返回日志，精确到分钟级别。

true：按照日志时间戳降序返回日志。
false（默认值）：按照日志时间戳升序返回日志。
注意
当query参数为查询语句时，参数reverse有效，用于指定返回日志排序方式。
当query参数为查询和分析语句时，参数reverse无效，由SQL分析语句中order by语法指定排序方式。如果order by为asc（默认），则为升序；如果order by为desc，则为降序。', example='false', position='Query'),
  to: int32(name='to', description='查询结束时间点。该时间是指写入日志数据时指定的日志时间。

请求参数from和to定义的时间区间遵循左闭右开原则，即该时间区间包括区间开始时间点，但不包括区间结束时间点。如果from和to的值相同，则为无效区间，函数直接返回错误。
Unix时间戳格式，表示从1970-1-1 00:00:00 UTC计算起的秒数。', example='1627269085', position='Query'),
  topic?: string(name='topic', description='status: 401 | SELECT remote_addr,COUNT(*) as pv GROUP by remote_addr ORDER by pv desc limit 5', example='topic', position='Query'),
}

model GetLogsResponse = {
  headers: map[string]string(name='headers'),
  body: [  map[string]any ](name='body'),
}

async function getLogs(request: GetLogsRequest): GetLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetLogs', 'GET', '/logstores/{logstore}?type=log', 'json', false, 'json', request);
}

model GetMachineGroupRequest {
  project: string(name='project', description='project 名称。', example='ali-test-project', position='Host'),
  machineGroup: string(name='machineGroup', description='机器组名称。', example='test-machine-group', position='Path'),
}

model GetMachineGroupResponse = {
  headers: map[string]string(name='headers'),
  body: MachineGroup  
}

async function getMachineGroup(request: GetMachineGroupRequest): GetMachineGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetMachineGroup', 'GET', '/machinegroups/{machineGroup}', 'json', false, 'json', request);
}

model GetProjectRequest {
  project: string(name='project', example='my-project-test', position='Host'),
}

model GetProjectResponse = {
  headers: map[string]string(name='headers'),
  body: Project  
}

async function getProject(request: GetProjectRequest): GetProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetProject', 'GET', '/', 'json', false, 'json', request);
}

model GetProjectLogsRequest {
  project: string(name='project', description='project 名称。', example='ali-test-project', position='Host'),
  powerSql?: boolean(name='powerSql', description='是否使用SQL独享版。更多信息，请参见开启SQL独享版。

true：使用SQL独享版。
false（默认值）：使用SQL普通版。
除通过powerSql参数配置SQL独享版外，您还可以使用query参数。', example='false', position='Query'),
  query: string(name='query', description='标准SQL语句。例如日志库名称为nginx-moni，查询时间区间在2022-03-01 10:41:40到2022-03-01 10:56:40之间的访问数量。', example='SELECT COUNT(*) as pv FROM nginx-moni where __time__ &gt; 1646102500 and __time__ &lt; 1646103400', position='Query'),
}

model GetProjectLogsResponse = {
  headers: map[string]string(name='headers'),
  body: [ map[string]string ](name='body'),
}

async function getProjectLogs(request: GetProjectLogsRequest): GetProjectLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetProjectLogs', 'GET', '/logs', 'json', false, 'json', request);
}

model GetProjectPolicyRequest {
  project?: string(name='project', description='A short description of struct', position='Host'),
}

model GetProjectPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: string(name='body'),
}

async function getProjectPolicy(request: GetProjectPolicyRequest): GetProjectPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetProjectPolicy', 'GET', '/policy', 'json', false, 'json', request);
}

model GetSavedSearchRequest {
  project: string(name='project', description='A short description of struct', position='Host'),
  savedsearchName: string(name='savedsearchName', example='savedsearch-name', position='Path'),
}

model GetSavedSearchResponse = {
  headers: map[string]string(name='headers'),
  body: SavedSearch  
}

async function getSavedSearch(request: GetSavedSearchRequest): GetSavedSearchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetSavedSearch', 'GET', '/savedsearches/{savedsearchName}', 'json', false, 'json', request);
}

model GetShipperStatusRequest {
  project: string(name='project', description='Project 名称。', example='my-project', position='Host'),
  logstore: string(name='logstore', description='Logstore 名称。', example='ali-test-logstore', position='Path'),
  shipperName: string(name='shipperName', description='日志投递名称。', example='test-shipper', position='Path'),
  from: long(name='from', description='日志投递任务创建开始时间。Unix时间戳格式，表示从1970-1-1 00:00:00 UTC计算起的秒数。', example='1409529600', position='Query'),
  offset?: int32(name='offset', description='查询开始行，默认值为0。', example='0', position='Query'),
  size?: int32(name='size', description='分页查询时，设置的每页行数。默认值为100，最大值为500。', example='100', position='Query'),
  status?: string(name='status', description='默认为空，表示返回所有状态的任务，支持success、fail和running状态。', example='success', position='Query'),
  to: long(name='to', description='日志投递任务创建结束时间。Unix时间戳格式，表示从1970-1-1 00:00:00 UTC计算起的秒数。', example='1627269085', position='Query'),
}

model GetShipperStatusResponseBody = {
  count?: long(name='count', description='当前页返回的任务个数。', example='10'),
  statistics?: {
    fail?: long(name='fail', description='运行失败的任务数量。', example='0'),
    running?: long(name='running', description='正在运行的任务数量。', example='0'),
    success?: long(name='success', description='成功完成的任务数量。', example='20'),
  }(name='statistics', description='任务汇总状态统计。'),
  tasks?: {
    id?: string(name='id', description='任务 id。', example='abcdefghijk'),
    taskCode?: string(name='taskCode', description='任务错误码。', example='UnAuthorized'),
    taskCreateTime?: long(name='taskCreateTime', description='投递任务创建时间。Unix时间戳格式，表示从1970-1-1 00:00:00 UTC计算起的秒数。', example='1448925013'),
    taskDataLines?: int32(name='taskDataLines', example='0'),
    taskFinishTime?: long(name='taskFinishTime', description='投递任务结束时间。Unix时间戳格式，表示从1970-1-1 00:00:00 UTC计算起的秒数。', example='1448926013'),
    taskLastDataReceiveTime?: long(name='taskLastDataReceiveTime', description='投递任务中的最近一条日志到达服务端时间（非日志时间，是服务端接收时间）。Unix时间戳格式，表示从1970-1-1 00:00:00 UTC计算起的秒数。', example='1448915013'),
    taskMessage?: string(name='taskMessage', description='投递任务失败时的具体错误信息。', example='AccessDenied: You have no right to access this object because of bucket acl.'),
    taskStatus?: string(name='taskStatus', description='任务当前状态，可以是 running、success、fail 三种状态之一。', example='success'),
  }(name='tasks'),
  total?: long(name='total', description='任务总数。', example='20'),
}

model GetShipperStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetShipperStatusResponseBody(name='body'),
}

async function getShipperStatus(request: GetShipperStatusRequest): GetShipperStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetShipperStatus', 'GET', '/logstores/{logstore}/shipper/{shipperName}/tasks', 'json', false, 'json', request);
}

model ListConsumerGroupRequest {
  project: string(name='project', description='Project name', position='Host'),
  logstore: string(name='logstore', description='Logstore name', example='ali-test-logstore', position='Path'),
}

model ListConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  body: [
    ConsumerGroup
  ](name='body'),
}

async function listConsumerGroup(request: ListConsumerGroupRequest): ListConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListConsumerGroup', 'GET', '/logstores/{logstore}/consumergroups', 'json', false, 'json', request);
}

model ListDomainsRequest {
  project: string(name='project', description='Project name', position='Host'),
  domainName?: string(name='domainName', description='用于搜索匹配的自定义域名', example='example.com', position='Query'),
  offset?: int32(name='offset', example='0', position='Query'),
  size?: int32(name='size', example='10', position='Query'),
}

model ListDomainsResponseBody = {
  count?: long(name='count', example='1'),
  domains?: [ string ](name='domains'),
  total?: long(name='total', example='1'),
}

model ListDomainsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDomainsResponseBody(name='body'),
}

async function listDomains(request: ListDomainsRequest): ListDomainsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDomains', 'GET', '/domains', 'json', false, 'json', request);
}

model ListExternalStoreRequest {
  project: string(name='project', description='A short description of struct', position='Host'),
  externalStoreName?: string(name='externalStoreName', description='可选使用名字 pattern 匹配', example='store', position='Query'),
  offset?: int32(name='offset', example='0', position='Query'),
  sizs?: int32(name='sizs', description='默认值为 500.', example='10', position='Query'),
}

model ListExternalStoreResponseBody = {
  count?: int32(name='count', example='3'),
  externalstores?: [
    ExternalStore
  ](name='externalstores'),
  total?: int32(name='total', example='3'),
}

model ListExternalStoreResponse = {
  headers: map[string]string(name='headers'),
  body: ListExternalStoreResponseBody(name='body'),
}

async function listExternalStore(request: ListExternalStoreRequest): ListExternalStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListExternalStore', 'GET', '/externalstores', 'json', false, 'json', request);
}

model ListLogStoresRequest {
  project: string(name='project', position='Host'),
  logstoreName?: string(name='logstoreName', example='my-logstore', position='Query'),
  mode?: string(name='mode', example='standard', position='Query'),
  offset?: int32(name='offset', example='0', position='Query'),
  size?: int32(name='size', description='默认值为 500。', example='10', position='Query'),
  telemetryType?: string(name='telemetryType', example='None', position='Query'),
}

model ListLogStoresResponseBody = {
  logstores?: [ string ](name='logstores', example='["test-1","test-2"]'),
  total?: int32(name='total', example='2'),
}

model ListLogStoresResponse = {
  headers: map[string]string(name='headers'),
  body: ListLogStoresResponseBody(name='body'),
}

async function listLogStores(request: ListLogStoresRequest): ListLogStoresResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListLogStores', 'GET', '/logstores', 'json', false, 'json', request);
}

model ListMachineGroupRequest {
  project: string(name='project', description='project 名称。', example='ali-test-project', position='Host'),
  groupName?: string(name='groupName', description='可将 groupName 作为 pattern 匹配名称，只会返回匹配的机器组。例如 test 可以匹配机器组 test-group。', example='test-machine-group', position='Query'),
  offset?: int32(name='offset', description='分页请求的起始位置。默认为0。', example='1', position='Query'),
  size?: int32(name='size', description='分页查询时，设置的每页行数。默认值为2000。', example='10', position='Query'),
}

model ListMachineGroupResponseBody = {
  count?: int32(name='count', description='当前页返回的机器组数量。', example='2'),
  machinegroups?: [ string ](name='machinegroups', description='机器组名称列表。', example='[ "test-machine-group-1", "test-machine-group-2" ]'),
  total?: int32(name='total', description='机器组总数量。', example='2'),
}

model ListMachineGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ListMachineGroupResponseBody(name='body'),
}

async function listMachineGroup(request: ListMachineGroupRequest): ListMachineGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListMachineGroup', 'GET', '/machinegroups', 'json', false, 'json', request);
}

model ListMachinesRequest {
  project: string(name='project', description='project 名称。', example='ali-test-project', position='Host'),
  machineGroup: string(name='machineGroup', description='机器组名称。', example='test-group', position='Path'),
  offset?: int32(name='offset', description='查询开始行。默认值为0。', example='0', position='Query'),
  size?: int32(name='size', description='分页查询时，设置的每页行数。默认值为2000。', example='10', position='Query'),
}

model ListMachinesResponseBody = {
  count?: int32(name='count', description='当前页返回的机器数目。', example='3'),
  machines?: [
    Machine
  ](name='machines', description='返回的机器信息列表。'),
  total?: int32(name='total', description='机器总数。', example='8'),
}

model ListMachinesResponse = {
  headers: map[string]string(name='headers'),
  body: ListMachinesResponseBody(name='body'),
}

async function listMachines(request: ListMachinesRequest): ListMachinesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListMachines', 'GET', '/machinegroups/{machineGroup}/machines', 'json', false, 'json', request);
}

model ListProjectRequest {
  resourceGroupId?: string(name='resourceGroupId', position='Path'),
  offset?: int32(name='offset', example='0', position='Query'),
  projectName?: string(name='projectName', example='ali-test-project', position='Query'),
  size?: int32(name='size', description='默认值为 500。', example='10', position='Query'),
}

model ListProjectResponseBody = {
  count?: long(name='count', example='2'),
  projects?: [
    Project
  ](name='projects'),
  total?: long(name='total', example='11'),
}

model ListProjectResponse = {
  headers: map[string]string(name='headers'),
  body: ListProjectResponseBody(name='body'),
}

async function listProject(request: ListProjectRequest): ListProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProject', 'GET', '/', 'json', false, 'json', request);
}

model ListSavedSearchRequest {
  project: string(name='project', description='A short description of struct', position='Host'),
  offset?: int32(name='offset', example='0', position='Query'),
  size?: int32(name='size', description='默认值为 500。', example='10', position='Query'),
}

model ListSavedSearchResponseBody = {
  count?: int32(name='count', example='4'),
  savedsearchItems?: [
    SavedSearch
  ](name='savedsearchItems', example='[ "test-1", "test-2" ]'),
  total?: int32(name='total', example='4'),
}

model ListSavedSearchResponse = {
  headers: map[string]string(name='headers'),
  body: ListSavedSearchResponseBody(name='body'),
}

async function listSavedSearch(request: ListSavedSearchRequest): ListSavedSearchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSavedSearch', 'GET', '/savedsearches', 'json', false, 'json', request);
}

model ListShardsRequest {
  project: string(name='project', description='A short description of struct', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='logstore 名称。', example='test-logstore', position='Path'),
}

model ListShardsResponse = {
  headers: map[string]string(name='headers'),
  body: [
    Shard
  ](name='body'),
}

async function listShards(request: ListShardsRequest): ListShardsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListShards', 'GET', '/logstores/{logstore}/shards', 'json', false, 'json', request);
}

model ListShipperRequest {
  project: string(name='project', description='Project 名称。', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='Logstore 名称。', example='test-logstore', position='Path'),
}

model ListShipperResponseBody = {
  count?: long(name='count', description='返回的投递任务数量。', example='3'),
  shipper?: [ string ](name='shipper', description='投递任务名称列表。'),
  total?: long(name='total', description='投递任务的总数量。', example='5'),
}

model ListShipperResponse = {
  headers: map[string]string(name='headers'),
  body: ListShipperResponseBody(name='body'),
}

async function listShipper(request: ListShipperRequest): ListShipperResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListShipper', 'GET', '/logstores/{logstore}/shipper', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  resourceId?: [ string ](name='resourceId', description='查询的资源的 id 列表。resource id 与 tags 应至少存在一个。', shrink='json', position='Query'),
  resourceType: string(name='resourceType', description='资源类型。目前取值范围：project。', example='project', position='Query'),
  tags?: [ 
    {
      key: string(name='key', description='精确过滤的标签的键。', example='key1'),
      value?: string(name='value', description='精确过滤的标签的值。', example='value1'),
    }
  ](name='tags', description='精确查找时过滤的标签键值对。resource id 与 tags 应至少存在一个。', shrink='json', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='nextToken', description='下一个查询开始Token。', example='caeba0bbb2be03f84eb48b699f0a4883'),
  tagResources?: [ 
    {
      resourceId?: string(name='resourceId', description='资源 id。', example='ali-test-project'),
      resourceType?: string(name='resourceType', description='资源类型。', example='project'),
      tagKey?: string(name='tagKey', description='标签的键。', example='key1'),
      tagValue?: string(name='tagValue', description='标签的值。', example='value1'),
    }
  ](name='tagResources', description='返回的标签列表。'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTagResources', 'GET', '/tags', 'json', false, 'json', request);
}

model PullDataRequest {
  project: string(name='project', description='A short description of struct', position='Host'),
  logstore: string(name='logstore', example='ali-test-logstore', position='Path'),
  shard: string(name='shard', description='Shard ID。', example='0', position='Path'),
  count: string(name='count', example='1000', position='Query'),
  cursor: string(name='cursor', example='MTQ0NzMyOTQwMTEwMjEzMDkwNA', position='Query'),
  endCursor?: string(name='endCursor', example='MTU1NzA1NzQwMTEwMjEzMDkwCg', position='Query'),
}

model PullDataResponse = {
  headers: map[string]string(name='headers'),
}

async function pullData(request: PullDataRequest): PullDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PullData', 'GET', '/logstores/{logstore}/shards/{shard}?type=log', 'json', false, 'json', request);
}

model PutProjectPolicyRequest {
  project?: string(name='project', position='Host'),
  body?: string(name='body', description='A short description of struct', example='{ 	"Version": "1", 	"Statement": [{ 		"Action": ["log:PostLogStoreLogs"], 		"Resource": "acs:log:*:*:project/exampleproject/*", 		"Effect": "Deny", 		"Condition": { 			"StringNotLike": { 				"acs:SourceVpc": ["vpc-*"] 			} 		} 	}] }', position='Body'),
}

model PutProjectPolicyResponse = {
  headers: map[string]string(name='headers'),
}

async function putProjectPolicy(request: PutProjectPolicyRequest): PutProjectPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PutProjectPolicy', 'POST', '/policy', 'json', false, 'json', request);
}

model PutWebtrackingRequest {
  project: string(name='project', position='Host'),
  logstoreName: string(name='logstoreName', description='A short description of struct', position='Path'),
  logs: [ map[string]string ](name='__logs__', position='Body'),
  source: string(name='__source__', position='Body'),
  tags?: map[string]string(name='__tags__', position='Body'),
  topic?: string(name='__topic__', position='Body'),
}

model PutWebtrackingResponse = {
  headers: map[string]string(name='headers'),
}

async function putWebtracking(request: PutWebtrackingRequest): PutWebtrackingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PutWebtracking', 'POST', '/logstores/{logstoreName}/track', 'none', false, 'json', request);
}

model RemoveConfigFromMachineGroupRequest {
  project: string(name='project', description='project 名称。', example='ali-test-project', position='Host'),
  machineGroup: string(name='machineGroup', description='机器组名称。', example='test-group', position='Path'),
  configName: string(name='configName', description='logtail 配置名称。', example='test-logtail', position='Path'),
}

model RemoveConfigFromMachineGroupResponse = {
  headers: map[string]string(name='headers'),
}

async function removeConfigFromMachineGroup(request: RemoveConfigFromMachineGroupRequest): RemoveConfigFromMachineGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RemoveConfigFromMachineGroup', 'DELETE', '/machinegroups/{machineGroup}/configs/{configName}', 'none', false, 'json', request);
}

model SplitShardRequest {
  project: string(name='project', description='Project 名称。', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='Logstore 名称。', example='logstorename', position='Path'),
  shard: int32(name='shard', description='必须是一个 readwrite 状态的 shard 的 id。', example='0', position='Path'),
  key?: string(name='key', description='分裂的位置。', example='ef000000000000000000000000000000', position='Query'),
  shardCount?: int32(name='shardCount', description='要分裂成的 shard 数量，默认为 2。', example='2', position='Query'),
}

model SplitShardResponse = {
  headers: map[string]string(name='headers'),
  body: [
    Shard
  ](name='body'),
}

async function splitShard(request: SplitShardRequest): SplitShardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SplitShard', 'POST', '/logstores/{logstore}/shards/{shard}?action=split', 'json', false, 'json', request);
}

model TagResourcesRequest {
  resourceId: [ string ](name='resourceId', description='资源的 id 列表，可以一次为多个同类型资源打上相同的标签。', position='Body'),
  resourceType: string(name='resourceType', description='资源的类型。目前取值范围：project。', example='project', position='Body'),
  tags: [ 
    {
      key: string(name='key', description='标签的 key。', example='key1'),
      value: string(name='value', description='标签的 value。', example='value1'),
    }
  ](name='tags', description='标签列表。', position='Body'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'TagResources', 'POST', '/tag', 'none', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='all', example='false', position='Body'),
  resourceId?: string(name='resourceId', example='ali-test-project', position='Body'),
  resourceType?: string(name='resourceType', example='project', position='Body'),
  tags?: [ string ](name='tags', position='Body'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UntagResources', 'POST', '/untag', 'json', false, 'json', request);
}

model UpdateConsumerGroupRequest {
  project: string(name='project', position='Host'),
  logstore: string(name='logstore', example='logstore-test', position='Path'),
  consumerGroup: string(name='consumerGroup', example='consumer-group-1', position='Path'),
  order?: boolean(name='order', example='true', position='Body'),
  timeout?: int32(name='timeout', example='300', position='Body'),
}

model UpdateConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
}

async function updateConsumerGroup(request: UpdateConsumerGroupRequest): UpdateConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateConsumerGroup', 'PUT', '/logstores/{logstore}/consumergroups/{consumerGroup}', 'none', false, 'json', request);
}

model UpdateIndexRequest {
  project: string(name='project', description='project 名称。', example='my-project', position='Host'),
  logstore: string(name='logstore', description='logstore 名称。', example='test-logstore', position='Path'),
  keys?: map[string]KeysValue(name='keys', description='字段索引配置，key为字段名称，value为字段索引配置。', position='Body'),
  line?: {
    caseSensitive: boolean(name='caseSensitive', description='大小写敏感', example='true'),
    chn: boolean(name='chn', description='包含中文', example='false'),
    excludeKeys?: [ string ](name='exclude_keys', description='排除的字段列表，不能与include_keys同时指定。'),
    includeKeys?: [ string ](name='include_keys', description='包含的字段列表，不能与exclude_keys同时指定。'),
    token: [ string ](name='token', description='分词符列表。可以设置一个分词参数，指定这个字段按照哪一种方式分词。'),
  }(name='line', description='配置全文索引。', position='Body'),
  logReduce?: boolean(name='log_reduce', description='开启日志聚类，开启后白名单与黑名单至多生效其中一个。', example='false', position='Body'),
  logReduceBlackList?: [ string ](name='log_reduce_black_list', description='日志聚类的聚类字段黑名单', position='Body'),
  logReduceWhiteList?: [ string ](name='log_reduce_white_list', description='日志聚类的聚类字段白名单', position='Body'),
  maxTextLen?: int32(name='max_text_len', description='统计字段的最大长度', example='2048', position='Body'),
  ttl: int32(name='ttl', description='保存时间，单位为天', example='30', position='Body'),
}

model UpdateIndexResponse = {
  headers: map[string]string(name='headers'),
}

async function updateIndex(request: UpdateIndexRequest): UpdateIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateIndex', 'PUT', '/logstores/{logstore}/index', 'none', false, 'json', request);
}

model UpdateLogStoreRequest {
  project: string(name='project', position='Host'),
  logstore: string(name='logstore', example='test-logstore', position='Path'),
  appendMeta?: boolean(name='appendMeta', example='false', position='Body'),
  autoSplit?: boolean(name='autoSplit', example='true', position='Body'),
  enableTracking?: boolean(name='enable_tracking', example='false', position='Body'),
  encryptConf?: EncryptConf(name='encrypt_conf', position='Body'),
  hotTtl?: int32(name='hot_ttl', example='60', position='Body'),
  logstoreName: string(name='logstoreName', example='test-logstore', position='Body'),
  maxSplitShard?: int32(name='maxSplitShard', example='64', position='Body'),
  mode?: string(name='mode', example='standard', position='Body'),
  shardCount: int32(name='shardCount', example='2', position='Body'),
  telemetryType?: string(name='telemetryType', example='None', position='Body'),
  ttl: int32(name='ttl', example='30', position='Body'),
}

model UpdateLogStoreResponse = {
  headers: map[string]string(name='headers'),
}

async function updateLogStore(request: UpdateLogStoreRequest): UpdateLogStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateLogStore', 'PUT', '/logstores/{logstore}', 'none', false, 'json', request);
}

model UpdateLoggingRequest {
  project: string(name='project', description='Project 名称。', example='ali-test-project', position='Host'),
  loggingDetails: [ 
    {
      logstore: string(name='logstore', description='该种类服务日志要保存到的 logstore 名称。', example='my-logstore'),
      type: string(name='type', description='服务日志的种类。可选 "consumergroup_log"、 "logtail_alarm"、"operation_log"、"logtail_profile"、"metering"、"logtail_status"、"scheduled_sql_alert"、 "etl_alert" 等。', example='consumergroup_log'),
    }
  ](name='loggingDetails', description='服务日志配置列表。', position='Body'),
  loggingProject: string(name='loggingProject', description='服务日志要保存到的 project 名称。', example='my-project', position='Body'),
}

model UpdateLoggingResponse = {
  headers: map[string]string(name='headers'),
}

async function updateLogging(request: UpdateLoggingRequest): UpdateLoggingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateLogging', 'PUT', '/logging', 'none', false, 'json', request);
}

model UpdateMachineGroupRequest {
  project: string(name='project', description='project 名称。', example='ali-test-project', position='Host'),
  groupName: string(name='groupName', description='机器组名称。', example='test-group', position='Path,Body'),
  groupAttribute?: {
    externalName?: string(name='externalName', description='机器组所依赖的外部管理系统标识。', example='testgroup2'),
    groupTopic?: string(name='groupTopic', description='机器组的日志主题。', example='testtopic2'),
  }(name='groupAttribute', description='机器组属性。', position='Body'),
  groupType?: string(name='groupType', description='机器组类型，可选值，默认为空。', example='""', position='Body'),
  machineIdentifyType: string(name='machineIdentifyType', description='机器组标识种类，支持 ip 、userdefined 两种。', example='userdefined', position='Body'),
  machineList: [ string ](name='machineList', description='机器列表。', example='[uu_id_1，uu_id_2]', position='Body'),
}

model UpdateMachineGroupResponse = {
  headers: map[string]string(name='headers'),
}

async function updateMachineGroup(request: UpdateMachineGroupRequest): UpdateMachineGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateMachineGroup', 'PUT', '/machinegroups/{groupName}', 'none', false, 'json', request);
}

model UpdateMachineGroupMachineRequest {
  project: string(name='project', description='project 名称。', example='ali-test-project', position='Host'),
  machineGroup: string(name='machineGroup', description='机器组名称。', example='test-group', position='Path'),
  action: string(name='action', description='add 表示添加机器到机器组中， delete 表示从机器组中删除机器。', example='add', position='Query'),
  body: [ string ](name='body', description='请求结构体。要添加或删除的机器列表。', example='add', position='Body'),
}

model UpdateMachineGroupMachineResponse = {
  headers: map[string]string(name='headers'),
}

async function updateMachineGroupMachine(request: UpdateMachineGroupMachineRequest): UpdateMachineGroupMachineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateMachineGroupMachine', 'PUT', '/machinegroups/{machineGroup}/machines', 'none', false, 'json', request);
}

model UpdateOdpsShipperRequest {
  project: string(name='project', description='Project 名称。', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='Logstore 名称。', example='test-logstore', position='Path'),
  shipperName: string(name='shipperName', description='投递任务名称。', example='test-shipper', position='Path,Body'),
  targetConfiguration: {
    bufferInterval?: int32(name='bufferInterval', description='导入时间间隔，秒，只支持 1800 、3600两种。', example='1800'),
    enable?: boolean(name='enable', description='是否启用该配置，默认为 true。', example='true'),
    fields: [ string ](name='fields', description='要投递的普通列，至少要有一个元素。'),
    odpsEndpoint: string(name='odpsEndpoint', description='odpsEndpoint', example='http://service.cn-hangzhou.maxcompute.aliyun-inc.com/api'),
    odpsProject: string(name='odpsProject', description='要投递区域的 odps 项目名称', example='ali-odps-project'),
    odpsTable: string(name='odpsTable', description='odps表名', example='test-table'),
    partitionColumn: [ string ](name='partitionColumn', description='要投递的分区列，至少要有一个元素。'),
    partitionTimeFormat: string(name='partitionTimeFormat', description='时间分区格式', example='yyyy_MM_dd_hh_mm'),
  }(name='targetConfiguration', position='Body'),
  targetType: string(name='targetType', description='投递目标的类型，这里固定为 odps。', example='odps', position='Body'),
}

model UpdateOdpsShipperResponse = {
  headers: map[string]string(name='headers'),
}

async function updateOdpsShipper(request: UpdateOdpsShipperRequest): UpdateOdpsShipperResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateOdpsShipper', 'PUT', '/logstores/{logstore}/shipper/{shipperName}', 'none', false, 'json', request);
}

model UpdateOssExternalStoreRequest {
  project: string(name='project', description='project 名称。', example='ali-test-project', position='Host'),
  externalStoreName: string(name='externalStoreName', description='外部存储的名称。', example='test-oss-store', position='Path,Body'),
  parameter: {
    accessid: string(name='accessid', description='您的AccessKey ID。', example='LTAI5tFsHGGeYry*****1Sz'),
    accesskey: string(name='accesskey', description='您的AccessKey Secret。', example='GyviCLDVHkHrOztdkxuE6******Rp6'),
    bucket: string(name='bucket', description='oss 桶名称。', example='my-bucket'),
    columns: [ 
      {
        name: string(name='name', example='test'),
        type: string(name='type'),
      }
    ](name='columns'),
    endpoint: string(name='endpoint', description='oss 的 endpoint 访问网址。', example='oss-cn-hangzhou.aliyuncs.com'),
    objects: [ string ](name='objects'),
  }(name='parameter', description='外部存储的参数。', position='Body'),
  storeType: string(name='storeType', description='外部存储的类型。这里固定为 oss', example='oss', position='Body'),
}

model UpdateOssExternalStoreResponse = {
  headers: map[string]string(name='headers'),
}

async function updateOssExternalStore(request: UpdateOssExternalStoreRequest): UpdateOssExternalStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateOssExternalStore', 'PUT', '/externalstores/{externalStoreName}', 'none', false, 'json', request);
}

model UpdateOssShipperRequest {
  project: string(name='project', description='Project 名称。', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='Logstore 名称。', example='test-logstore', position='Path'),
  shipperName: string(name='shipperName', description='投递任务名称。', example='test-shipper', position='Path,Body'),
  targetConfiguration: {
    bufferInterval?: int32(name='bufferInterval', description='导出间隔，秒，默认值为 300，可取值在 [300,900]之间。', example='300'),
    bufferSize?: int32(name='bufferSize', description='自动控制投递任务创建间隔并设置OSS的一个Object大小（以未压缩计算）上限，单位：MB，默认 128 MB。支持[5,256] 之间的值。', example='256'),
    compressType?: string(name='compressType', description='压缩类型，支持 snappy 与 none，默认值为 none。', example='snappy'),
    enable?: boolean(name='enable', description='默认为 true，是否启用该配置。', example='true'),
    ossBucket: string(name='ossBucket', description='oss 桶名称', example='test-bucket'),
    ossPrefix: string(name='ossPrefix', description='oss 前缀，与 bucket 、pathFormat 一同组成投递的文件路径。示例值: test-prefix、test/prefix。
格式要求：可使用 / 分隔各部分，每个部分都必须满足以下条件：
1. 由大小写字母、数字、下划线_、连字符- 、点号.组成
2. 长度不超过 253 字符
3. 必须以大小写字母或者数字开头', example='test-prefix/hello-prefix'),
    pathFormat?: string(name='pathFormat', description='路径格式，默认为 %Y/%m/%d/%H/%M ，不能以 / 开头。任务投递文件到 oss 时会被使用日期时间格式化，例如%Y/%m/%d/%H/%M会被格式化为 2022/01/01/00/59 ，与bucket、ossPrefix 共同组成投递的目标文件路径。', example='2022/01/01/00/59'),
    roleArn: string(name='roleArn', description='RAM角色', example='acs:ram::16542189**343050:role/aliyunlogdefaultrole'),
    storage: {
      detail: map[string]any(name='detail', description='parquet 格式（必填项columns）：
{ 
"columns": [
   {"name" : "test-col", "type": "text"}
 ]
}

csv 格式（必填项columns）：
{ 
"columns": ["test-col"], 
"delimiter": ",", 
"quote": "",
"escape": "",
"nullIdentifier": "",
"header": false,
"lineFeed": "\\n"
 }

json 格式
{
"enableTag": false
}', example='{ 
"columns": [
   {"name" : "test-col", "type": "text"}
 ]
}'),
      format: string(name='format', description='支持 json、csv、parquet 三种', example='parquet'),
    }(name='storage', description='存储格式配置。'),
    timeZone?: string(name='timeZone', description='时区，默认取值为空字符串。可取值的格式为 +8 、-6 等。', example='+8'),
  }(name='targetConfiguration', position='Body'),
  targetType: string(name='targetType', description='投递目标的类型，这里固定为 odps。', example='oss', position='Body'),
}

model UpdateOssShipperResponse = {
  headers: map[string]string(name='headers'),
}

async function updateOssShipper(request: UpdateOssShipperRequest): UpdateOssShipperResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateOssShipper', 'PUT', '/logstores/{logstore}/shipper/{shipperName}', 'none', false, 'json', request);
}

model UpdateProjectRequest {
  project: string(name='project', description='Project name', position='Host'),
  description: string(name='description', description='Project description', example='Description of my-project-test', position='Body'),
}

model UpdateProjectResponse = {
  headers: map[string]string(name='headers'),
}

async function updateProject(request: UpdateProjectRequest): UpdateProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateProject', 'PUT', '/', 'none', false, 'json', request);
}

model UpdateRdsExternalStoreRequest {
  project: string(name='project', description='project 名称。', example='ali-test-project', position='Host'),
  externalStoreName: string(name='externalStoreName', description='外部存储名称。', example='test-external-store', position='Path,Body'),
  parameter: {
    db: string(name='db', description='RDS MySQL实例的数据库名称。', example='meta'),
    host?: string(name='host', description='RDS MySQL实例的内网地址或外网地址。', example='192.168.XX.XX'),
    instanceId?: string(name='instance-id', description='RDS MySQL实例ID。', example='i-bp1b6c719dfa08exf****'),
    password: string(name='password', description='RDS MySQL实例中账号对应的密码。', example='sfdsfldsfksfls****'),
    port: string(name='port', description='RDS MySQL实例的内网或者外网端口。', example='3306'),
    region: string(name='region', description='RDS MySQL实例所在地域，目前仅支持cn-qingdao、cn-beijing、cn-hangzhou。', example='cn-qingdao'),
    table: string(name='table', description='RDS MySQL实例的数据库表名称。', example='join_meta'),
    username: string(name='username', description='RDS MySQL实例中的账号名称。', example='root'),
    vpcId?: string(name='vpc-id', description='RDS MySQL实例所属的VPC ID。', example='vpc-bp1aevy8sofi8mh1q****'),
  }(name='parameter', description='参数', position='Body'),
  storeType: string(name='storeType', description='类型，这里固定为 rds-vpc', example='rds-vpc', position='Body'),
}

model UpdateRdsExternalStoreResponse = {
  headers: map[string]string(name='headers'),
}

async function updateRdsExternalStore(request: UpdateRdsExternalStoreRequest): UpdateRdsExternalStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateRdsExternalStore', 'PUT', '/externalstores/{externalStoreName}', 'none', false, 'json', request);
}

model UpdateSavedSearchRequest {
  project: string(name='project', description='Project 名称。', example='my-project', position='Host'),
  savedsearchName: string(name='savedsearchName', example='savedsearch-name', position='Path,Body'),
  displayName: string(name='displayName', example='displayname', position='Body'),
  logstore: string(name='logstore', example='aliyun-test-logstore', position='Body'),
  searchQuery: string(name='searchQuery', example='*|select date_format(__time__-__time__%60, \\"%H:%i:%s\\") as time, COUNT(*) as pv group by time', position='Body'),
  topic?: string(name='topic', example='theme', position='Body'),
}

model UpdateSavedSearchResponse = {
  headers: map[string]string(name='headers'),
}

async function updateSavedSearch(request: UpdateSavedSearchRequest): UpdateSavedSearchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateSavedSearch', 'PUT', '/savedsearches/{savedsearchName}', 'none', false, 'json', request);
}

model IndexKeysValue = {
  chn?: boolean(name='chn', description='是否包含中文', example='true'),
  caseSensitive?: boolean(name='caseSensitive', description='大小写敏感', example='true'),
  token?: [ string ](name='token', description='分词符'),
  alias?: string(name='alias', description='别名', example='myAlias'),
  type: string(name='type', description='字段类型', example='text'),
  docValue?: boolean(name='doc_value', description='开启统计', example='true'),
}

model KeysValue = {
  caseSensitive?: boolean(name='caseSensitive', description='大小写敏感'),
  chn?: boolean(name='chn', description='包含中文'),
  type: string(name='type', description='字段的索引类型', example='text'),
  alias?: string(name='alias', description='别名'),
  token?: [ string ](name='token', description='分词符列表。仅当type参数取值为text时，必须设置。'),
  docValue?: boolean(name='doc_value', description='开启统计'),
}

