/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Sls';
  @version = '2020-12-30';
  @endpointRule = 'central';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AgentInstanceConfigGrayConfigs {
  condition?: string(name='condition'),
  content?: string(name='content'),
}

model Alert {
  configuration: AlertConfiguration(name='configuration', description='This parameter is required.'),
  createTime?: long(name='createTime'),
  description?: string(name='description', example='Alert Desc'),
  displayName: string(name='displayName', description='This parameter is required.', example='alertNameExample'),
  lastModifiedTime?: long(name='lastModifiedTime'),
  name: string(name='name', description='This parameter is required.', example='alert-123456'),
  schedule: Schedule(name='schedule', description='This parameter is required.'),
  status?: string(name='status', example='ENABLED/DISABLED'),
}

model AlertConfiguration {
  annotations?: [
    AlertTag
  ](name='annotations'),
  autoAnnotation: boolean(name='autoAnnotation', description='This parameter is required.', example='false'),
  conditionConfiguration?: ConditionConfiguration(name='conditionConfiguration'),
  dashboard?: string(name='dashboard', example='dasnboardExample'),
  groupConfiguration: GroupConfiguration(name='groupConfiguration', description='This parameter is required.'),
  joinConfigurations?: [
    JoinConfiguration
  ](name='joinConfigurations'),
  labels?: [
    AlertTag
  ](name='labels'),
  muteUntil?: long(name='muteUntil', example='1698907508'),
  noDataFire: boolean(name='noDataFire', description='This parameter is required.', example='false'),
  noDataSeverity?: int32(name='noDataSeverity', example='6'),
  policyConfiguration?: PolicyConfiguration(name='policyConfiguration'),
  queryList: [
    AlertQuery
  ](name='queryList', description='This parameter is required.'),
  sendResolved: boolean(name='sendResolved', description='This parameter is required.', example='false'),
  severityConfigurations: [
    SeverityConfiguration
  ](name='severityConfigurations', description='This parameter is required.'),
  sinkAlerthub?: SinkAlerthubConfiguration(name='sinkAlerthub'),
  sinkCms?: SinkCmsConfiguration(name='sinkCms'),
  sinkEventStore?: SinkEventStoreConfiguration(name='sinkEventStore'),
  tags?: [ string ](name='tags'),
  templateConfiguration?: TemplateConfiguration(name='templateConfiguration'),
  threshold: int32(name='threshold', description='This parameter is required.', example='1'),
  type?: string(name='type', example='default'),
  version: string(name='version', description='This parameter is required.', example='2.0'),
}

model AlertQuery {
  chartTitle?: string(name='chartTitle', example='chartExmaple'),
  dashboardId?: string(name='dashboardId', example='dashboardExample'),
  end: string(name='end', description='This parameter is required.', example='now'),
  powerSqlMode?: string(name='powerSqlMode', example='auto'),
  project: string(name='project', description='This parameter is required.', example='projectExample'),
  query: string(name='query', description='This parameter is required.', example='* | select *'),
  region: string(name='region', description='This parameter is required.', example='cn-hangzhou'),
  roleArn?: string(name='roleArn'),
  start: string(name='start', description='This parameter is required.', example='-5m'),
  store: string(name='store', description='This parameter is required.', example='store Example'),
  storeType: string(name='storeType', description='This parameter is required.', example='log'),
  timeSpanType: string(name='timeSpanType', description='This parameter is required.', example='Relative'),
  ui?: string(name='ui'),
}

model AlertTag {
  key?: string(name='key', example='title'),
  value?: string(name='value', example='example value'),
}

model ConditionConfiguration {
  condition?: string(name='condition', example='cnt > 100'),
  countCondition?: string(name='countCondition', example='__count__ > 5'),
}

model ConsumeProcessor {
  configuration: ConsumeProcessorConfiguration(name='configuration', description='This parameter is required.'),
  createTime?: long(name='createTime', example='1717171200'),
  description?: string(name='description', example='过滤content字段'),
  displayName: string(name='displayName', description='This parameter is required.', example='字段过滤处理'),
  processorName: string(name='processorName', description='This parameter is required.', example='consume-processor-1'),
  updateTime?: long(name='updateTime', example='1717171200'),
}

model ConsumeProcessorConfiguration {
  spl: string(name='spl', description='This parameter is required.', example='* | project content'),
}

model ConsumerGroup {
  name?: string(name='name', example='test-group'),
  order?: boolean(name='order', example='false'),
  timeout?: int32(name='timeout', example='300'),
}

model CopilotAction {
  action?: string(name='action'),
  description?: string(name='description'),
  name?: string(name='name'),
  parameters?: [ 
    {
      name?: string(name='name'),
      prompt?: string(name='prompt'),
      required?: string(name='required'),
      type?: string(name='type'),
    }
  ](name='parameters'),
  queryMaxLength?: long(name='queryMaxLength'),
  queryTemplate?: string(name='queryTemplate'),
  queryTemplateParameters?: [ 
    {
      name?: string(name='name'),
      prompt?: string(name='prompt'),
      required?: string(name='required'),
      type?: string(name='type'),
    }
  ](name='queryTemplateParameters'),
  scene?: string(name='scene'),
}

model DeleteLogStoreLogsTask {
  errorCode?: int32(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  from?: int32(name='from'),
  progress?: int32(name='progress'),
  query?: string(name='query'),
  taskId?: string(name='taskId'),
  to?: int32(name='to'),
}

model ESIngestion {
  configuration: ESIngestionConfiguration(name='configuration', description='This parameter is required.'),
  createTime?: long(name='createTime', example='1714360481'),
  description?: string(name='description', example='es ingestion'),
  displayName: string(name='displayName', description='This parameter is required.', example='es ingestion'),
  lastModifiedTime?: long(name='lastModifiedTime', example='1714360481'),
  name: string(name='name', description='This parameter is required.', example='ingest-es-123456'),
  schedule: Schedule(name='schedule', description='This parameter is required.'),
  scheduleId?: string(name='scheduleId', example='c7f01719d9feb105fc9d8df92af62010'),
  status?: string(name='status', example='RUNNING'),
}

model ESIngestionConfiguration {
  logstore: string(name='logstore', description='This parameter is required.'),
  source: ESIngestionConfigurationSource(name='source', description='This parameter is required.'),
}

model ESIngestionConfigurationSource {
  bootstrapServers: string(name='BootstrapServers', description='This parameter is required.'),
  index: string(name='Index', description='This parameter is required.'),
  minFragRangeSec: long(name='MinFragRangeSec', description='This parameter is required.'),
  connectorMode: string(name='connectorMode', description='This parameter is required.'),
  endTime?: long(name='endTime'),
  maxDataDelaySec: long(name='maxDataDelaySec', description='This parameter is required.'),
  password?: string(name='password'),
  query: string(name='query', description='This parameter is required.'),
  startTime?: long(name='startTime'),
  timeFieldName?: string(name='timeFieldName'),
  timeFormat?: string(name='timeFormat'),
  timeZone?: string(name='timeZone'),
  username?: string(name='username'),
  vpcId?: string(name='vpcId'),
}

model ETL {
  configuration: ETLConfiguration(name='configuration', description='This parameter is required.'),
  createTime?: long(name='createTime', example='1714274900'),
  description?: string(name='description', example='加工作业'),
  displayName: string(name='displayName', description='This parameter is required.', example='etljob'),
  lastModifiedTime?: long(name='lastModifiedTime', example='1714274900'),
  name: string(name='name', description='This parameter is required.', example='etl-20240426'),
  scheduleId?: string(name='scheduleId', example='f0eb655e501a8780808d1970ef6d04c4'),
  status?: string(name='status', example='RUNNING'),
}

model ETLConfiguration {
  accessKeyId?: string(name='accessKeyId', deprecated='true'),
  accessKeySecret?: string(name='accessKeySecret', deprecated='true'),
  fromTime: long(name='fromTime', description='This parameter is required.', example='1714274900'),
  lang?: string(name='lang', example='SPL'),
  logstore: string(name='logstore', description='This parameter is required.', example='test-logstore'),
  parameters?: map[string]any(name='parameters', example='config.vpc.vpc_id.test1：vpc-uf6mskb0b****n9yj'),
  roleArn: string(name='roleArn', description='This parameter is required.', example='acs:ram::13234:role/logtarget'),
  script: string(name='script', description='This parameter is required.', example='e_set("key","value")'),
  sinks: [
    ETLConfigurationSink
  ](name='sinks', description='This parameter is required.'),
  toTime: long(name='toTime', description='This parameter is required.', example='1714274970'),
}

model ETLConfigurationSink {
  accessKeyId?: string(name='accessKeyId', deprecated='true'),
  accessKeySecret?: string(name='accessKeySecret', deprecated='true'),
  datasets?: [ string ](name='datasets'),
  endpoint?: string(name='endpoint'),
  logstore: string(name='logstore', description='This parameter is required.', example='test-logstore'),
  name: string(name='name', description='This parameter is required.', example='test-etljob'),
  project: string(name='project', description='This parameter is required.', example='test-project'),
  roleArn: string(name='roleArn', description='This parameter is required.', example='acs:ram::13234:role/logtarget'),
}

model EncryptConf {
  enable: boolean(name='enable', description='This parameter is required.'),
  encryptType?: string(name='encrypt_type', example='default'),
  userCmkInfo?: EncryptUserCmkConf(name='user_cmk_info'),
}

model EncryptUserCmkConf {
  arn: string(name='arn', description='This parameter is required.'),
  cmkKeyId: string(name='cmk_key_id', description='This parameter is required.'),
  regionId: string(name='region_id', description='This parameter is required.'),
}

model GroupConfiguration {
  fields?: [ string ](name='fields'),
  type: string(name='type', description='This parameter is required.', example='custom'),
}

model Histogram {
  count?: long(name='count'),
  from?: int32(name='from'),
  progress?: string(name='progress'),
  to?: int32(name='to'),
}

model IndexJsonKey {
  alias?: string(name='alias', example='myAlias'),
  caseSensitive?: boolean(name='caseSensitive', example='true'),
  chn?: boolean(name='chn', example='true'),
  docValue?: boolean(name='doc_value', example='true'),
  token?: [ string ](name='token'),
  type: string(name='type', description='This parameter is required.', example='text'),
}

model IndexKey {
  alias?: string(name='alias', example='myAlias'),
  caseSensitive?: boolean(name='caseSensitive', example='true'),
  chn?: boolean(name='chn', example='true'),
  docValue?: boolean(name='doc_value', example='true'),
  indexAll?: boolean(name='index_all', example='true'),
  jsonKeys?: map[string]IndexJsonKey(name='json_keys'),
  maxDepth?: long(name='max_depth'),
  token?: [ string ](name='token'),
  type: string(name='type', description='This parameter is required.', example='text'),
}

model IngestProcessor {
  configuration: IngestProcessorConfiguration(name='configuration', description='This parameter is required.'),
  createTime?: long(name='createTime', example='1717171200'),
  description?: string(name='description', example='过滤content字段'),
  displayName: string(name='displayName', description='This parameter is required.', example='字段过滤处理'),
  processorName: string(name='processorName', description='This parameter is required.', example='ingest-processor-1'),
  updateTime?: long(name='updateTime', example='1717171200'),
}

model IngestProcessorConfiguration {
  parseFail?: string(name='parseFail', example='keep'),
  spl: string(name='spl', description='This parameter is required.', example='* | project content'),
}

model JoinConfiguration {
  condition?: string(name='condition', example='$0.id == $1.id'),
  type?: string(name='type', example='left_join'),
}

model KafkaIngestion {
  configuration: KafkaIngestionConfiguration(name='configuration', description='This parameter is required.'),
  createTime?: long(name='createTime', example='1714360481'),
  description?: string(name='description', example='kafka ingestion'),
  displayName: string(name='displayName', description='This parameter is required.', example='kafka ingestion'),
  lastModifiedTime?: long(name='lastModifiedTime', example='1714360481'),
  name: string(name='name', description='This parameter is required.', example='ingest-kafka-123456'),
  schedule: Schedule(name='schedule', description='This parameter is required.'),
  scheduleId?: string(name='scheduleId', example='c7f01719d9feb105fc9d8df92af62010'),
  status?: string(name='status', example='RUNNING'),
}

model KafkaIngestionConfiguration {
  logstore: string(name='logstore', description='This parameter is required.', example='logstore'),
  source: KafkaIngestionConfigurationSource(name='source', description='This parameter is required.'),
}

model KafkaIngestionConfigurationSource {
  bootstrapServers: string(name='bootstrapServers', description='This parameter is required.', example='192.168.1.28:9092'),
  communication?: string(name='communication', example='{     "protocol":"SASL_PLAINTEXT",      "sasl":{         "mechanism":"PLAIN",         "username":"用户名",         "password":"密码"     } }'),
  consumerGroup?: string(name='consumerGroup', example='consumer'),
  defaultTimeSource?: string(name='defaultTimeSource', example='system,kafka'),
  enableSlsContext?: boolean(name='enableSlsContext', example='true'),
  encoding: string(name='encoding', description='This parameter is required.', example='UTF-8'),
  fromPosition: string(name='fromPosition', description='This parameter is required.', example='earliest,latest'),
  nameResolutions?: string(name='nameResolutions', example='{"hostname": "192.168.1.28"}'),
  parseArray: boolean(name='parseArray', description='This parameter is required.', example='true'),
  timeField?: string(name='timeField', example='__time__'),
  timeFormat?: string(name='timeFormat', example='epoch'),
  timePattern?: string(name='timePattern', example='\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}'),
  timeZone?: string(name='timeZone', example='+0800'),
  topics: string(name='topics', description='This parameter is required.', example='topic1,topic2'),
  valueType: string(name='valueType', description='This parameter is required.', example='text,json'),
  vpcId?: string(name='vpcId'),
}

model LogContent {
  key: string(name='Key', description='This parameter is required.', example='key-test'),
  value: string(name='Value', description='This parameter is required.', example='value-test'),
}

model LogGroup {
  logItems: [
    LogItem
  ](name='LogItems', description='This parameter is required.'),
  logTags?: [
    LogTag
  ](name='LogTags'),
  source?: string(name='Source', example='192.1.1.1'),
  topic?: string(name='Topic', example='topic-test'),
}

model LogGroupList {
  logGroupList: [
    LogGroup
  ](name='logGroupList', description='This parameter is required.'),
}

model LogItem {
  contents: [
    LogContent
  ](name='Contents', description='This parameter is required.'),
  time: int32(name='Time', description='This parameter is required.', example='1690254376'),
}

model LogTag {
  key: string(name='Key', description='This parameter is required.', example='key-test'),
  value: string(name='Value', description='This parameter is required.', example='value-test'),
}

model LogtailConfig {
  configName: string(name='configName', description='This parameter is required.', example='test-config'),
  createTime?: long(name='createTime', example='1655176807'),
  inputDetail: map[string]any(name='inputDetail', description='This parameter is required.'),
  inputType: string(name='inputType', description='This parameter is required.', example='file'),
  lastModifyTime?: long(name='lastModifyTime', example='1655176807'),
  logSample?: string(name='logSample', example='2022-06-14 11:13:29.796 | DEBUG    | __main__:<module>:1 - hello world'),
  outputDetail: {
    endpoint: string(name='endpoint', description='This parameter is required.', example='cn-hangzhou-intranet.log.aliyuncs.com'),
    logstoreName: string(name='logstoreName', description='This parameter is required.', example='test-logstore'),
    region?: string(name='region', example='cn-hangzhou'),
    telemetryType?: string(name='telemetryType', example='logs'),
  }(name='outputDetail', description='This parameter is required.'),
  outputType: string(name='outputType', description='This parameter is required.', example='LogService'),
}

model LogtailPipelineConfig {
  aggregators?: [  map[string]any ](name='aggregators'),
  configName: string(name='configName', description='This parameter is required.', example='test-config'),
  createTime?: long(name='createTime', example='1655176807'),
  flushers: [  map[string]any ](name='flushers', description='This parameter is required.'),
  global?: map[string]any(name='global'),
  inputs: [  map[string]any ](name='inputs', description='This parameter is required.'),
  lastModifyTime?: long(name='lastModifyTime', example='1655176807'),
  logSample?: string(name='logSample', example='127.0.0.1 - - [10/Jun/2022:12:36:49 +0800] "GET /index.html HTTP/1.1" 200'),
  processors?: [  map[string]any ](name='processors'),
  task?: map[string]any(name='task', example='{"Type": "task_example"}'),
}

model MLDataParam {
  annotationdataId?: string(name='annotationdataId', example='dc74b0f569126bb310e1ba6454c351ac'),
  annotations?: map[string]MLDataParamAnnotationsValue(name='annotations'),
  config?: map[string]string(name='config'),
  createTime?: long(name='createTime', example='1695094335'),
  dataHash?: string(name='dataHash', example='59db060bd89468245d76416a68a510ac'),
  datasetId?: string(name='datasetId', example='a9bd488f6dd42d294495fb780858e83d'),
  lastModifyTime?: long(name='lastModifyTime', example='1695094335'),
  predictions?: map[string]MLDataParamPredictionsValue(name='predictions'),
  value?: string(name='value', example='xxx/xxx/xxx/'),
  valueType?: string(name='valueType', example='oss'),
}

model MLDataSetParam {
  createBy?: string(name='createBy', example='sls-console'),
  createTime?: long(name='createTime', example='1695090077'),
  dataType?: string(name='dataType', example='Metric'),
  datasetId?: string(name='datasetId', example='d9bd488f6dd42d294495fb780858e83d'),
  description?: string(name='description', example='数据集A'),
  labelId?: string(name='labelId', example='a191ae4ca615b0ccb93c211fc8a998af'),
  lastModifyTime?: long(name='lastModifyTime', example='1695090077'),
  name?: string(name='name', example='sls_builtin_dataset_metric.shapeclassification.anomalydetection'),
  settingType?: string(name='settingType', example='Metric.ShapeClassification.AnomalyDetection'),
}

model MLLabelParam {
  createTime?: long(name='createTime', example='1695090077'),
  description?: string(name='description', example='默认表'),
  labelId?: string(name='labelId', example='abbd488f6dd42d294495fb780858e83d'),
  lastModifyTime?: long(name='lastModifyTime', example='1695090077'),
  name?: string(name='name', example='标签表'),
  settings?: [ 
    {
      config?: string(name='config', example='""'),
      mode?: string(name='mode', example='builtin'),
      type?: string(name='type', example='Trace.RCA'),
      version?: string(name='version', example='0.01'),
    }
  ](name='settings'),
  type?: string(name='type', example='xxx'),
}

model MLServiceAnalysisParam {
  input?: [ map[string]string ](name='input'),
  parameter?: map[string]string(name='parameter'),
}

model MLServiceParam {
  description?: string(name='description', example='某某服务'),
  model?: {
    modelResourceId?: string(name='modelResourceId', example='xxxx'),
    modelResourceType?: string(name='modelResourceType', example='xxx_type'),
  }(name='model'),
  name?: string(name='name', example='service_name'),
  resource?: {
    cpuLimit?: int32(name='cpuLimit', example='2'),
    gpu?: int32(name='gpu', example='20'),
    memoryLimit?: int32(name='memoryLimit', example='64'),
    replica?: int32(name='replica', example='2'),
  }(name='resource'),
  serviceType?: string(name='serviceType', example='sls_builtin'),
  status?: string(name='status', example='running'),
  updateTimestamp?: long(name='updateTimestamp', example='1695090077'),
}

model MaxComputeExport {
  configuration: MaxComputeExportConfiguration(name='configuration', description='This parameter is required.'),
  createTime?: long(name='createTime', example='1714284115'),
  description?: string(name='description', example='odpsexport-demo'),
  displayName: string(name='displayName', description='This parameter is required.', example='odpsexport-test'),
  lastModifiedTime?: long(name='lastModifiedTime', example='1714284589'),
  name: string(name='name', description='This parameter is required.', example='export-general-1714033191-584993-hcl'),
  scheduleId?: string(name='scheduleId', example='c7f01719d9feb105fc9d8df92af62010'),
  status?: string(name='status', example='RUNNING'),
}

model MaxComputeExportConfiguration {
  fromTime: long(name='fromTime', description='This parameter is required.', example='1'),
  logstore: string(name='logstore', description='This parameter is required.', example='sls-logstore-demo'),
  roleArn: string(name='roleArn', description='This parameter is required.', example='acs:ram::123456789:role/aliyunlogdefaultrole'),
  sink: MaxComputeExportConfigurationSink(name='sink', description='This parameter is required.'),
  toTime: long(name='toTime', description='This parameter is required.', example='0'),
}

model MaxComputeExportConfigurationSink {
  bufferInterval?: string(name='bufferInterval', example='1800'),
  fields: [ string ](name='fields', description='This parameter is required.'),
  filterInvalid?: boolean(name='filterInvalid', example='true'),
  odpsAccessKeyId?: string(name='odpsAccessKeyId', example='asdfghjk', deprecated='true'),
  odpsAccessSecret?: string(name='odpsAccessSecret', example='esasdfghjkl', deprecated='true'),
  odpsEndpoint: string(name='odpsEndpoint', description='This parameter is required.', example='http://service.cn-hangzhou.maxcompute.aliyun-inc.com/api'),
  odpsProject: string(name='odpsProject', description='This parameter is required.', example='demo_project'),
  odpsRolearn: string(name='odpsRolearn', description='This parameter is required.', example='acs:ram::123456789:role/aliyunlogdefaultrole'),
  odpsTable: string(name='odpsTable', description='This parameter is required.', example='demo_table'),
  odpsTunnelEndpoint?: string(name='odpsTunnelEndpoint', example='http://dt.cn-hangzhou.maxcompute.aliyun-inc.com'),
  partitionColumn: [ string ](name='partitionColumn', description='This parameter is required.'),
  partitionTimeFormat: string(name='partitionTimeFormat', description='This parameter is required.', example='%Y_%m_%d'),
  timeFormatType?: string(name='timeFormatType', example='StrfTimeFormat'),
  timeZone: string(name='timeZone', description='This parameter is required.', example='+0800'),
}

model OSSExport {
  configuration?: OSSExportConfiguration(name='configuration'),
  createTime?: long(name='createTime', example='1714284025'),
  description?: string(name='description', example='job-test'),
  displayName: string(name='displayName', description='This parameter is required.', example='job-demo'),
  lastModifiedTime?: long(name='lastModifiedTime', example='1714284115'),
  name: string(name='name', description='This parameter is required.', example='job-1714109458-123456'),
  scheduleId?: string(name='scheduleId', example='c7f01719d9feb105fc9d8df92af62010'),
  status?: string(name='status', example='RUNNING'),
}

model OSSExportConfiguration {
  fromTime?: long(name='fromTime', example='1714123644'),
  logstore?: string(name='logstore', example='logstore-demo'),
  roleArn?: string(name='roleArn', example='acs:ram::123456789:role/aliyunlogdefaultrole'),
  sink?: {
    bucket: string(name='bucket', description='This parameter is required.', example='test-bucket'),
    bufferInterval?: long(name='bufferInterval', example='300'),
    bufferSize?: long(name='bufferSize', example='256'),
    compressionType?: string(name='compressionType', example='snappy'),
    contentDetail?: map[string]any(name='contentDetail'),
    contentType?: string(name='contentType', example='json'),
    delaySec?: long(name='delaySec', example='900', deprecated='true'),
    delaySeconds?: long(name='delaySeconds', example='900'),
    endpoint: string(name='endpoint', description='This parameter is required.', example='http://oss-cn-hangzhou-internal.aliyuncs.com'),
    pathFormat: string(name='pathFormat', description='This parameter is required.', example='%Y/%m/%d/%H/%M'),
    pathFormatType: string(name='pathFormatType', description='This parameter is required.', example='time'),
    prefix?: string(name='prefix', example='demo/'),
    roleArn: string(name='roleArn', description='This parameter is required.', example='acs:ram::123456789:role/aliyunlogdefaultrole'),
    suffix?: string(name='suffix', example='.json'),
    timeZone?: string(name='timeZone', example='+0800'),
  }(name='sink'),
  toTime?: long(name='toTime', example='1714357112'),
}

model OSSIngestion {
  configuration: OSSIngestionConfiguration(name='configuration', description='This parameter is required.'),
  createTime?: long(name='createTime', example='1714360481'),
  description?: string(name='description', example='oss ingestion'),
  displayName: string(name='displayName', description='This parameter is required.', example='oss ingestion'),
  lastModifiedTime?: long(name='lastModifiedTime', example='1714360481'),
  name: string(name='name', description='This parameter is required.', example='ingest-oss-123456'),
  schedule: Schedule(name='schedule', description='This parameter is required.'),
  scheduleId?: string(name='scheduleId', example='c7f01719d9feb105fc9d8df92af62010'),
  status?: string(name='status', example='RUNNING'),
}

model OSSIngestionConfiguration {
  logstore: string(name='logstore', description='This parameter is required.', example='myLogstore'),
  source: OSSIngestionConfigurationSource(name='source', description='This parameter is required.'),
}

model OSSIngestionConfigurationSource {
  bucket: string(name='bucket', description='This parameter is required.', example='ossbucket'),
  compressionCodec: string(name='compressionCodec', description='This parameter is required.', example='none'),
  encoding: string(name='encoding', description='This parameter is required.', example='UTF-8'),
  endTime?: long(name='endTime', example='1714360481'),
  endpoint: string(name='endpoint', description='This parameter is required.', example='oss-cn-hangzhou.aliyuncs.com'),
  format: map[string]any(name='format', description='This parameter is required.'),
  interval: string(name='interval', description='This parameter is required.', example='never'),
  pattern?: string(name='pattern', example='.*'),
  prefix?: string(name='prefix', example='prefix'),
  restoreObjectEnabled?: boolean(name='restoreObjectEnabled', example='true'),
  roleARN?: string(name='roleARN', example='acs:ram::12345:role/aliyunlogdefaultrole'),
  startTime?: long(name='startTime', example='1714274081'),
  tagPackId?: boolean(name='tagPackId', example='true'),
  timeField?: string(name='timeField', example='__time__'),
  timeFormat?: string(name='timeFormat', example='yyyy-MM-dd HH:mm:ss'),
  timePattern?: string(name='timePattern', example='[0-9]{0,2}\\/[0-9a-zA-Z]+\\/[0-9:,]+'),
  timeZone?: string(name='timeZone', example='GMT+08:00'),
  useMetaIndex: boolean(name='useMetaIndex', description='This parameter is required.', example='false'),
}

model PolicyConfiguration {
  actionPolicyId?: string(name='actionPolicyId', example='example_action_policy'),
  alertPolicyId?: string(name='alertPolicyId', example='sls.builtin.dynamic'),
  repeatInterval?: string(name='repeatInterval', example='10m'),
}

model ProcessorAssociate {
  processorId: string(name='processorId', description='This parameter is required.', example='ingest-processor-1'),
}

model ProjectSummary {
  createTime: long(name='createTime', description='This parameter is required.'),
  description: string(name='description', description='This parameter is required.'),
  projectName: string(name='projectName', description='This parameter is required.'),
  region: string(name='region', description='This parameter is required.'),
  resourceGroupId: string(name='resourceGroupId', description='This parameter is required.'),
  updateTime: long(name='updateTime', description='This parameter is required.'),
}

model S3Ingestion {
  configuration: S3IngestionConfigurationSource(name='configuration', description='This parameter is required.'),
  createTime?: long(name='createTime', example='1714360481'),
  description?: string(name='description', example='s3 ingestion'),
  displayName: string(name='displayName', description='This parameter is required.', example='s3 ingestion'),
  lastModifiedTime?: long(name='lastModifiedTime', example='1714360481'),
  name: string(name='name', description='This parameter is required.', example='ingest-s3-123456'),
  schedule: Schedule(name='schedule', description='This parameter is required.'),
  scheduleId?: string(name='scheduleId', example='c7f01719d9feb105fc9d8df92af62010'),
  status?: string(name='status', example='RUNNING'),
}

model S3IngestionConfiguration {
  logstore?: string(name='logstore', example='myLogstore'),
  source?: S3IngestionConfigurationSource(name='source'),
}

model S3IngestionConfigurationSource {
  awsAccessKey: string(name='awsAccessKey', description='This parameter is required.', example='AKIxxxxxxxxxxYJE'),
  awsAccessKeySecret: string(name='awsAccessKeySecret', description='This parameter is required.', example='123xxxxxxxxxxfjf'),
  awsRegion: string(name='awsRegion', description='This parameter is required.', example='ap-northeast-1'),
  awsSQSQueueUrl?: string(name='awsSQSQueueUrl', example='https://sqs.ap-northeast-1.amazonaws.com/123456788/chifan'),
  awsUseSQS?: boolean(name='awsUseSQS', example='false'),
  bucket: string(name='bucket', description='This parameter is required.', example='s3bucket'),
  compressionCodec: string(name='compressionCodec', description='This parameter is required.', example='none'),
  encoding: string(name='encoding', description='This parameter is required.', example='UTF-8'),
  endTime?: long(name='endTime', example='1714360481'),
  format: map[string]any(name='format', description='This parameter is required.'),
  interval: string(name='interval', description='This parameter is required.', example='30m'),
  pattern?: string(name='pattern', example='.*'),
  prefix?: string(name='prefix', example='prefix'),
  startTime?: long(name='startTime', example='1714274081'),
  tagPackId?: boolean(name='tagPackId', example='false'),
  timeField?: string(name='timeField', example='__time__'),
  timeFormat?: string(name='timeFormat', example='yyyy-MM-dd HH:mm:ss'),
  timePattern?: string(name='timePattern', example='[0-9]{0,2}\\/[0-9a-zA-Z]+\\/[0-9:,]+'),
  timeZone?: string(name='timeZone', example='GMT+08:00'),
  useAwsSQSOnly?: boolean(name='useAwsSQSOnly', example='false'),
}

model SavedSearch {
  displayName: string(name='displayName', description='This parameter is required.'),
  logstore: string(name='logstore', description='This parameter is required.'),
  savedsearchName: string(name='savedsearchName', description='This parameter is required.'),
  searchQuery: string(name='searchQuery', description='This parameter is required.'),
  topic?: string(name='topic'),
}

model Schedule {
  cronExpression?: string(name='cronExpression', example='0/5 * * * *'),
  delay?: int32(name='delay', example='4'),
  interval?: string(name='interval', example='60s'),
  runImmediately?: boolean(name='runImmediately', example='false'),
  timeZone?: string(name='timeZone', example='+0800'),
  type: string(name='type', description='This parameter is required.', example='FixedRate'),
}

model ScheduledSQL {
  configuration: ScheduledSQLConfiguration(name='configuration', description='This parameter is required.'),
  createTime?: long(name='createTime', example='1714123644'),
  description?: string(name='description', example='schedule-sql-test'),
  displayName: string(name='displayName', description='This parameter is required.', example='scheduleSqlTest'),
  lastModifiedTime?: long(name='lastModifiedTime', example='1714123644'),
  name: string(name='name', description='This parameter is required.', example='sql-1714123463-225223'),
  schedule: Schedule(name='schedule', description='This parameter is required.'),
  scheduleId?: string(name='scheduleId', example='e73f43732852064ad5d091914e39342f'),
  status?: string(name='status', example='ENABLED'),
}

model ScheduledSQLConfiguration {
  dataFormat: string(name='dataFormat', description='This parameter is required.', example='log2log'),
  destEndpoint: string(name='destEndpoint', description='This parameter is required.', example='cn-hangzhou-intranet.log.aliyuncs.com'),
  destLogstore: string(name='destLogstore', description='This parameter is required.', example='dest-logstore-demo'),
  destProject: string(name='destProject', description='This parameter is required.', example='project-demo'),
  destRoleArn: string(name='destRoleArn', description='This parameter is required.', example='acs:ram::123456789:role/aliyunlogetlrole'),
  fromTime: long(name='fromTime', description='This parameter is required.', example='1712592000'),
  fromTimeExpr: string(name='fromTimeExpr', description='This parameter is required.', example='@m-1m'),
  maxRetries: long(name='maxRetries', description='This parameter is required.', example='20'),
  maxRunTimeInSeconds: long(name='maxRunTimeInSeconds', description='This parameter is required.', example='600'),
  parameters: map[string]any(name='parameters', description='This parameter is required.'),
  resourcePool: string(name='resourcePool', description='This parameter is required.', example='enhanced'),
  roleArn: string(name='roleArn', description='This parameter is required.', example='acs:ram::123456789:role/aliyunlogetlrole'),
  script: string(name='script', description='This parameter is required.', example='* | select *'),
  sourceLogstore: string(name='sourceLogstore', description='This parameter is required.', example='source-logstore-demo'),
  sqlType: string(name='sqlType', description='This parameter is required.', example='searchQuery'),
  toTime: long(name='toTime', description='This parameter is required.', example='0'),
  toTimeExpr: string(name='toTimeExpr', description='This parameter is required.', example='@m'),
}

model SeverityConfiguration {
  evalCondition?: ConditionConfiguration(name='evalCondition'),
  severity?: int32(name='severity', example='8'),
}

model SinkAlerthubConfiguration {
  enabled?: boolean(name='enabled', example='true'),
}

model SinkCmsConfiguration {
  enabled?: boolean(name='enabled', example='true'),
}

model SinkEventStoreConfiguration {
  enabled?: boolean(name='enabled', example='true'),
  endpoint?: string(name='endpoint', example='cn-shanghai-intranet.log.aliyuncs.com'),
  eventStore?: string(name='eventStore', example='exampleStore'),
  project?: string(name='project', example='exampleProject'),
  roleArn?: string(name='roleArn', example='acs:ram::123456789:role/aliyunlogetlrole'),
}

model StoreViewStore {
  project: string(name='project', description='This parameter is required.'),
  query?: string(name='query'),
  storeName: string(name='storeName', description='This parameter is required.'),
}

model TemplateConfiguration {
  aonotations?: map[string]any(name='aonotations'),
  id: string(name='id', description='This parameter is required.', example='sls.app.ack.ip.not_enough'),
  lang?: string(name='lang', example='cn'),
  tokens?: map[string]any(name='tokens'),
  type: string(name='type', description='This parameter is required.', example='sys'),
  version?: string(name='version', example='1'),
}

model Ticket {
  callerUid?: long(name='callerUid', example='1000000000'),
  createDate?: string(name='createDate', example='2023-09-06 14:57:07'),
  expirationTime?: long(name='expirationTime', example='100'),
  expireDate?: string(name='expireDate', example='2023-09-06 14:58:07'),
  extra?: string(name='extra', example='{"xx":"yy"}'),
  name?: string(name='name', example='测试'),
  number?: int32(name='number', example='1', minimum=0, maximum=2147483647),
  sharingTo?: string(name='sharingTo', example='{"type":"aliyun","ids":[1,2]}'),
  ticket?: string(name='ticket', example='xxxxx'),
  ticketId?: string(name='ticketId', example='xxxxx'),
  usedNumber?: int32(name='usedNumber', example='1'),
  valid?: boolean(name='valid', example='false'),
}

model Chart {
  action: map[string]any(name='action', description='This parameter is required.'),
  display: map[string]any(name='display', description='This parameter is required.'),
  search: map[string]any(name='search', description='This parameter is required.'),
  title: string(name='title', description='This parameter is required.', example='my-chart'),
  type: string(name='type', description='This parameter is required.', example='linepro'),
}

model Dashboard {
  attribute?: map[string]string(name='attribute'),
  charts: [
    Chart
  ](name='charts', description='This parameter is required.'),
  dashboardName: string(name='dashboardName', description='This parameter is required.', example='dashboard-1609294922657-434834'),
  description?: string(name='description', example='这是一个仪表盘。'),
  displayName: string(name='displayName', description='This parameter is required.', example='test-alert'),
}

model ExternalStore {
  externalStoreName: string(name='externalStoreName', description='This parameter is required.', example='rds_store'),
  parameter: map[string]any(name='parameter', description='This parameter is required.'),
  storeType: string(name='storeType', description='This parameter is required.', example='rds-vpc'),
}

model Index {
  keys?: map[string]IndexKey(name='keys'),
  line?: {
    caseSensitive?: boolean(name='caseSensitive', example='true'),
    chn?: boolean(name='chn', example='true'),
    excludeKeys?: [ string ](name='exclude_keys'),
    includeKeys?: [ string ](name='include_keys'),
    token: [ string ](name='token', description='This parameter is required.'),
  }(name='line'),
  logReduce?: boolean(name='log_reduce', example='true'),
  logReduceBlackList?: [ string ](name='log_reduce_black_list'),
  logReduceWhiteList?: [ string ](name='log_reduce_white_list'),
  maxTextLen?: int32(name='max_text_len', example='2048'),
}

model Logging {
  loggingDetails: [ 
    {
      logstore: string(name='logstore', description='This parameter is required.', example='my-logstore'),
      type: string(name='type', description='This parameter is required.', example='consumergroup_log'),
    }
  ](name='loggingDetails', description='This parameter is required.'),
  loggingProject: string(name='loggingProject', description='This parameter is required.', example='my-project'),
}

model Logstore {
  appendMeta?: boolean(name='appendMeta', example='true'),
  autoSplit?: boolean(name='autoSplit', example='true'),
  createTime?: int32(name='createTime'),
  enableTracking?: boolean(name='enable_tracking', example='false'),
  encryptConf?: EncryptConf(name='encrypt_conf'),
  hotTtl?: int32(name='hot_ttl'),
  infrequentAccessTTL?: int32(name='infrequentAccessTTL', example='30'),
  lastModifyTime?: int32(name='lastModifyTime'),
  logstoreName: string(name='logstoreName', description='This parameter is required.', example='my-logstore'),
  maxSplitShard?: int32(name='maxSplitShard', example='2'),
  mode?: string(name='mode', example='standard'),
  processorId?: string(name='processorId'),
  productType?: string(name='productType'),
  shardCount: int32(name='shardCount', description='This parameter is required.', example='2'),
  telemetryType?: string(name='telemetryType'),
  ttl: int32(name='ttl', description='This parameter is required.', example='30'),
}

model Machine {
  hostId?: string(name='host-id', example='test'),
  ip?: string(name='ip', example='192.168.x.x'),
  lastHeartbeatTime?: long(name='lastHeartbeatTime', example='1657509674'),
  machineUniqueid?: string(name='machine-uniqueid', example='3B70F4F1-80F7-46C4-A6C1-100D66C***47'),
  userdefinedId?: string(name='userdefined-id', example='test'),
}

model MachineGroup {
  groupAttribute?: {
    externalName?: string(name='externalName', example='test-group'),
    groupTopic?: string(name='groupTopic', example='test-topic'),
  }(name='groupAttribute'),
  groupName: string(name='groupName', description='This parameter is required.', example='test-group'),
  groupType?: string(name='groupType'),
  machineIdentifyType: string(name='machineIdentifyType', description='This parameter is required.', example='ip'),
  machineList: [ string ](name='machineList', description='This parameter is required.'),
}

model Project {
  createTime?: string(name='createTime'),
  dataRedundancyType?: string(name='dataRedundancyType', example='LRS'),
  description: string(name='description', description='This parameter is required.'),
  lastModifyTime?: string(name='lastModifyTime'),
  location?: string(name='location'),
  owner?: string(name='owner'),
  projectName: string(name='projectName', description='This parameter is required.'),
  quota?: map[string]any(name='quota'),
  recycleBinEnabled?: boolean(name='recycleBinEnabled', example='false'),
  region?: string(name='region'),
  resourceGroupId?: string(name='resourceGroupId'),
  status?: string(name='status'),
}

model ServiceStatus {
  enabled?: boolean(name='enabled', example='false'),
  status?: string(name='status', example='NotExist'),
}

model Shard {
  createTime?: int32(name='createTime', example='1453949705'),
  exclusiveEndKey?: string(name='exclusiveEndKey', example='8000000000000000000000000000000'),
  inclusiveBeginKey?: string(name='inclusiveBeginKey', example='00000000000000000000000000000000'),
  shardID?: int32(name='shardID', example='0'),
  status?: string(name='status', example='readwrite'),
}

model ApplyConfigToMachineGroupRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  machineGroup: string(name='machineGroup', description='The name of the machine group.

This parameter is required.', example='sample-group', position='Path'),
  configName: string(name='configName', description='The name of the Logtail configuration.

This parameter is required.', example='logtail-config-sample', position='Path'),
}

model ApplyConfigToMachineGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * @param request  the request parameters of ApplyConfigToMachineGroup  ApplyConfigToMachineGroupRequest
  * @return ApplyConfigToMachineGroupResponse
 */
async function applyConfigToMachineGroup(request: ApplyConfigToMachineGroupRequest): ApplyConfigToMachineGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ApplyConfigToMachineGroup', 'PUT', '/machinegroups/{machineGroup}/configs/{configName}', 'none', false, 'json', request);
}

model CallAiToolsRequest {
  params?: map[string]string(name='params', position='Body'),
  regionId?: string(name='regionId', position='Body'),
  toolName: string(name='toolName', description='This parameter is required.', position='Body'),
}

model CallAiToolsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: string(name='body'),
}

/**
  * @param request  the request parameters of CallAiTools  CallAiToolsRequest
  * @return CallAiToolsResponse
 */
async function callAiTools(request: CallAiToolsRequest): CallAiToolsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CallAiTools', 'POST', '/ml/tool/call', 'json', false, 'json', request);
}

model ChangeResourceGroupRequest {
  project?: string(name='project', description='The project to which the resource belongs.', example='ali-test-project', position='Host'),
  resourceGroupId: string(name='resourceGroupId', description='The ID of the resource group.

This parameter is required.', example='rg-aek2i7nhaxifxey', position='Body'),
  resourceId: string(name='resourceId', description='The ID of the resource.

This parameter is required.', example='ali-test-project', position='Body'),
  resourceType?: string(name='resourceType', description='The type of the resource. Only PROJECT is supported. Set the value to PROJECT.', example='PROJECT', position='Body'),
}

model ChangeResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of ChangeResourceGroup  ChangeResourceGroupRequest
  * @return ChangeResourceGroupResponse
 */
async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ChangeResourceGroup', 'PUT', '/resourcegroup', 'none', false, 'json', request);
}

model ConsumerGroupHeartBeatRequest {
  project?: string(name='project', description='This parameter is required.', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='The name of the Logstore.

This parameter is required.', example='ali-test-logstore', position='Path'),
  consumerGroup: string(name='consumerGroup', description='The name of the consumer group. The name must be unique in a project.

This parameter is required.', example='consumer_group_test', position='Path'),
  body: [ int32 ](name='body', description='The IDs of shards whose data is being consumed.

This parameter is required.', position='Body'),
  consumer: string(name='consumer', description='The consumer.

This parameter is required.', example='consumer_1', position='Query'),
}

model ConsumerGroupHeartBeatResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: [ int32 ](name='body'),
}

/**
  * @description ### Usage notes
  * * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * * Connections between consumers and Simple Log Service are established by sending heartbeat messages at regular intervals. If Simple Log Service does not receive heartbeat messages from a consumer on schedule, Simple Log Service deletes the consumer.
  * * An AccessKey pair is created and obtained. For more information, see [AccessKey pair](https://help.aliyun.com/document_detail/29009.html).
  * The AccessKey pair of an Alibaba Cloud account has permissions on all API operations. Using these credentials to perform operations in Simple Log Service is a high-risk operation. We recommend that you use a Resource Access Management (RAM) user to call API operations or perform routine O&#x26;M. To create a RAM user, log on to the RAM console. Make sure that the RAM user has the management permissions on Simple Log Service resources. For more information, see [Create a RAM user and authorize the RAM user to access Simple Log Service](https://help.aliyun.com/document_detail/47664.html).
  * * The information that is required to query logs is obtained. The information includes the name of the project to which the logs belong, the region of the project, and the name of the Logstore to which the logs belong. For more information, see [Manage a project](https://help.aliyun.com/document_detail/48984.html) and [Manage a Logstore](https://help.aliyun.com/document_detail/48990.html).
  * * The name of the consumer group is obtained. For more information, see [ListConsumerGroup](https://help.aliyun.com/document_detail/74964.html).
  * ### Authentication resources
  * The following table describes the authorization information that is required for this operation. You can add the information to the Action element of a RAM policy statement to grant a RAM user or a RAM role the permissions to call this operation.
  * |Action|Resource|
  * |:---|:---|
  * |`log:ConsumerGroupHeartBeat`|`acs:log:${regionId}:${accountId}:project/{#ProjectName}/logstore/{#LogstoreName}/consumergroup/{#ConsumerGroupName}`|
  * @param request  the request parameters of ConsumerGroupHeartBeat  ConsumerGroupHeartBeatRequest
  * @return ConsumerGroupHeartBeatResponse
 */
async function consumerGroupHeartBeat(request: ConsumerGroupHeartBeatRequest): ConsumerGroupHeartBeatResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ConsumerGroupHeartBeat', 'POST', '/logstores/{logstore}/consumergroups/{consumerGroup}?type=heartbeat', 'json', false, 'json', request);
}

model ConsumerGroupUpdateCheckPointRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='The name of the Logstore.

This parameter is required.', example='ali-test-logstore', position='Path'),
  consumerGroup: string(name='consumerGroup', description='The name of the consumer group.

This parameter is required.', example='consumer_group_test', position='Path'),
  checkpoint: string(name='checkpoint', description='The value of the checkpoint.

This parameter is required.', example='MTUyNDE1NTM3OTM3MzkwODQ5Ng==', position='Body'),
  shard: int32(name='shard', description='The ID of the shard.

This parameter is required.', example='0', position='Body'),
  consumer: string(name='consumer', description='The consumer.

This parameter is required.', example='consumer_1', position='Query'),
  forceSuccess?: boolean(name='forceSuccess', description='Specifies whether to enable forceful updates. Valid values:

*   true
*   false', example='False', position='Query'),
}

model ConsumerGroupUpdateCheckPointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description *   If you do not specify a consumer, you must set **forceSuccess** to **true**. Otherwise, the checkpoint cannot be updated.
  * *   Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * *   An AccessKey pair is created and obtained. For more information, see [AccessKey pair](https://help.aliyun.com/document_detail/29009.html).
  * The AccessKey pair of an Alibaba Cloud account has permissions on all API operations. Using these credentials to perform operations in Simple Log Service is a high-risk operation. We recommend that you use a Resource Access Management (RAM) user to call API operations or perform routine O\\&M. To create a RAM user, log on to the RAM console. Make sure that the RAM user has the management permissions on Simple Log Service resources. For more information, see [Create a RAM user and authorize the RAM user to access Simple Log Service](https://help.aliyun.com/document_detail/47664.html).
  * *   The information that is required to query logs is obtained. The information includes the name of the project to which the logs belong, the region of the project, and the name of the Logstore to which the logs belong. For more information, see [Manage a project](https://help.aliyun.com/document_detail/48984.html) and [Manage a Logstore](https://help.aliyun.com/document_detail/48990.html).
  * @param request  the request parameters of ConsumerGroupUpdateCheckPoint  ConsumerGroupUpdateCheckPointRequest
  * @return ConsumerGroupUpdateCheckPointResponse
 */
async function consumerGroupUpdateCheckPoint(request: ConsumerGroupUpdateCheckPointRequest): ConsumerGroupUpdateCheckPointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ConsumerGroupUpdateCheckPoint', 'POST', '/logstores/{logstore}/consumergroups/{consumerGroup}?type=checkpoint', 'none', false, 'json', request);
}

model CreateAgentInstanceConfigRequest {
  attributes?: map[string]string(name='attributes', position='Body'),
  config: string(name='config', description='This parameter is required.', position='Body'),
  configType: string(name='configType', description='This parameter is required.', position='Body'),
  grayConfigs?: [
    AgentInstanceConfigGrayConfigs
  ](name='grayConfigs', position='Body'),
}

model CreateAgentInstanceConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of CreateAgentInstanceConfig  CreateAgentInstanceConfigRequest
  * @return CreateAgentInstanceConfigResponse
 */
async function createAgentInstanceConfig(request: CreateAgentInstanceConfigRequest): CreateAgentInstanceConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateAgentInstanceConfig', 'POST', '/agentinstanceconfigs', 'none', false, 'json', request);
}

model CreateAlertRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  configuration: AlertConfiguration(name='configuration', description='The detailed configurations of the alert rule.

This parameter is required.', position='Body'),
  description?: string(name='description', description='The description of the alert rule.', example='An alert rule', position='Body'),
  displayName: string(name='displayName', description='The display name of the alert rule.

This parameter is required.', example='test-alert', position='Body'),
  name: string(name='name', description='The name of the alert rule. Make sure that the name is unique in a project.

This parameter is required.', example='alert-123456', position='Body'),
  schedule: Schedule(name='schedule', description='The scheduling configurations of the alert rule.

This parameter is required.', position='Body'),
}

model CreateAlertResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of CreateAlert  CreateAlertRequest
  * @return CreateAlertResponse
 */
async function createAlert(request: CreateAlertRequest): CreateAlertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateAlert', 'POST', '/alerts', 'none', false, 'json', request);
}

model CreateAnnotationDataSetRequest {
  body?: MLDataSetParam(name='body', description='The data structure of the request.', position='Body'),
  datasetId?: string(name='datasetId', description='The unique identifier of the dataset.', example='cb8cc4eb51a85e823471cdb368fae9be', position='Query'),
}

model CreateAnnotationDataSetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of CreateAnnotationDataSet  CreateAnnotationDataSetRequest
  * @return CreateAnnotationDataSetResponse
 */
async function createAnnotationDataSet(request: CreateAnnotationDataSetRequest): CreateAnnotationDataSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateAnnotationDataSet', 'POST', '/ml/annotationdataset', 'none', false, 'json', request);
}

model CreateAnnotationLabelRequest {
  body?: MLLabelParam(name='body', description='The data structure of the request.', position='Body'),
}

model CreateAnnotationLabelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of CreateAnnotationLabel  CreateAnnotationLabelRequest
  * @return CreateAnnotationLabelResponse
 */
async function createAnnotationLabel(request: CreateAnnotationLabelRequest): CreateAnnotationLabelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateAnnotationLabel', 'POST', '/ml/annotationlabel', 'none', false, 'json', request);
}

model CreateConfigRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  body?: LogtailConfig(name='body', description='The body of the request.', position='Body'),
}

model CreateConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description ### [](#)Usage notes
  * *   Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * *   An AccessKey pair is created and obtained. For more information, see [AccessKey pair](https://help.aliyun.com/document_detail/29009.html).
  * The AccessKey pair of an Alibaba Cloud account has permissions on all API operations. Using these credentials to perform operations in Simple Log Service is a high-risk operation. We recommend that you use a RAM user to call API operations or perform routine O\\&M. To create a RAM user, log on to the RAM console. Make sure that the RAM user has the management permissions on Simple Log Service resources. For more information, see [Create a RAM user and authorize the RAM user to access Log Service](https://help.aliyun.com/document_detail/47664.html).
  * *   The information that is required to query logs is obtained. The information includes the name of the project to which the logs belong, the region of the project, and the name of the Logstore to which the logs belong. For more information, see [Manage a project](https://help.aliyun.com/document_detail/48984.html).
  * *   You can create up to 100 Logtail configurations in a project.
  * *   The Logtail configuration is planned out. For more information, see [Logtail configurations](https://help.aliyun.com/document_detail/29058.html).
  * @param request  the request parameters of CreateConfig  CreateConfigRequest
  * @return CreateConfigResponse
 */
async function createConfig(request: CreateConfigRequest): CreateConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateConfig', 'POST', '/configs', 'none', false, 'json', request);
}

model CreateConsumerGroupRequest {
  logstore: string(name='logstore', description='The name of the Logstore.

This parameter is required.', example='aliyun-test-logstore', position='Path'),
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='aliyun-test-project', position='Host'),
  consumerGroup: string(name='consumerGroup', description='The name of the consumer group. The name must be unique in a project.

This parameter is required.', example='consumerGroupX', position='Body'),
  order: boolean(name='order', description='Specifies whether to consume data in sequence. Valid values:

*   true

    *   In a shard, data is consumed in ascending order based on the value of the \\*\\*__tag__:__receive_time__\\*\\* field.
    *   If a shard is split, data in the original shard is consumed first. Then, data in the new shards is consumed at the same time.
    *   If shards are merged, data in the original shards is consumed first. Then, data in the new shard is consumed.

*   false Data in all shards is consumed at the same time. If a new shard is generated after a shard is split or after shards are merged, data in the new shard is immediately consumed.

This parameter is required.', example='true', position='Body'),
  timeout: int32(name='timeout', description='The timeout period. If the server does not receive heartbeats from a consumer within the timeout period, the server deletes the consumer. Unit: seconds.

This parameter is required.', example='300', position='Body'),
}

model CreateConsumerGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description ### Usage notes
  * * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * * You can create up to 30 consumer groups for a Logstore. The name of a consumer group must be unique in a project.
  * * An AccessKey pair is created and obtained. For more information, see [AccessKey pair](https://help.aliyun.com/document_detail/29009.html).
  * The AccessKey pair of an Alibaba Cloud account has permissions on all API operations. Using these credentials to perform operations in Simple Log Service is a high-risk operation. We recommend that you use a Resource Access Management (RAM) user to call API operations or perform routine O&#x26;M. To create a RAM user, log on to the RAM console. Make sure that the RAM user has the management permissions on Simple Log Service resources. For more information, see [Create a RAM user and authorize the RAM user to access Simple Log Service](https://help.aliyun.com/document_detail/47664.html).
  * * The information that is required to query logs is obtained. The information includes the name of the project to which the logs belong, the region of the project, and the name of the Logstore to which the logs belong. For more information, see [Manage a project](https://help.aliyun.com/document_detail/48984.html) and [Manage a Logstore](https://help.aliyun.com/document_detail/48990.html).
  * * Simple Log Service provides examples of both regular log consumption and consumer group-based log consumption by using Simple Log Service SDK for Java. For more information, see [Consume log data](https://help.aliyun.com/document_detail/120035.html) and [Use consumer groups to consume data](https://help.aliyun.com/document_detail/28998.html).
  * ### Authentication resources
  * The following table describes the authorization information that is required for this operation. You can add the information to the Action element of a RAM policy statement to grant a RAM user or a RAM role the permissions to call this operation.
  * |Action|Resource|
  * |:---|:---|
  * |`log:CreateConsumerGroup`|`acs:log:{#regionId}:{#accountId}:project/{#ProjectName}/logstore/{#logstoreName}/consumergroup/{#ConsumerGroup}`|
  * @param request  the request parameters of CreateConsumerGroup  CreateConsumerGroupRequest
  * @return CreateConsumerGroupResponse
 */
async function createConsumerGroup(request: CreateConsumerGroupRequest): CreateConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateConsumerGroup', 'POST', '/logstores/{logstore}/consumergroups', 'none', false, 'json', request);
}

model CreateDashboardRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  body: Dashboard(name='body', description='The data structure of the dashboard.

This parameter is required.', position='Body'),
}

model CreateDashboardResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description ### [](#)Usage notes
  * *   Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * *   An AccessKey pair is created and obtained. For more information, see [AccessKey pair](https://help.aliyun.com/document_detail/29009.html).
  * The AccessKey pair of an Alibaba Cloud account has permissions on all API operations. Using these credentials to perform operations in Simple Log Service is a high-risk operation. We recommend that you use a RAM user to call API operations or perform routine O\\&M. To create a RAM user, log on to the RAM console. Make sure that the RAM user has the management permissions on Simple Log Service resources. For more information, see [Create a RAM user and authorize the RAM user to access Simple Log Service](https://help.aliyun.com/document_detail/47664.html).
  * *   The information that is required to query logs is obtained. The information includes the name of the project to which the logs belong and the region of the project. For more information, see [Manage a project](https://help.aliyun.com/document_detail/48984.html).
  * @param request  the request parameters of CreateDashboard  CreateDashboardRequest
  * @return CreateDashboardResponse
 */
async function createDashboard(request: CreateDashboardRequest): CreateDashboardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDashboard', 'POST', '/dashboards', 'none', false, 'json', request);
}

model CreateDomainRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  domainName: string(name='domainName', description='The domain name.

This parameter is required.', example='example.com', position='Body'),
}

model CreateDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * @param request  the request parameters of CreateDomain  CreateDomainRequest
  * @return CreateDomainResponse
 */
async function createDomain(request: CreateDomainRequest): CreateDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDomain', 'POST', '/domains', 'none', false, 'json', request);
}

model CreateDownloadJobRequest {
  project?: string(name='project', description='This parameter is required.', example='ali-test-project', position='Host'),
  configuration: {
    allowInComplete: boolean(name='allowInComplete', description='This parameter is required.', example='false'),
    fromTime: long(name='fromTime', description='起点时间戳（精确到秒）

This parameter is required.', example='1722406260'),
    logstore: string(name='logstore', description='源logstore

This parameter is required.', example='test-logstore'),
    powerSql?: boolean(name='powerSql', description='是否启用powerSql', example='true'),
    query: string(name='query', description='查询语句

This parameter is required.', example='* | select *'),
    sink: {
      bucket?: string(name='bucket', description='对象存储桶', example='oss-test-bucket'),
      compressionType: string(name='compressionType', description='压缩格式

This parameter is required.', example='none'),
      contentType: string(name='contentType', description='下载文件格式

This parameter is required.', example='csv'),
      prefix?: string(name='prefix', example='download/'),
      roleArn?: string(name='roleArn', description='下载使用roleArn', example='acs:ram::0123456789:role/aliyunlogdefaultrole'),
      type: string(name='type', description='This parameter is required.', example='AliyunOSS'),
    }(name='sink', description='导出配置

This parameter is required.'),
    toTime: long(name='toTime', description='结束时间戳（精确到秒）

This parameter is required.', example='1722409860'),
  }(name='configuration', description='下载配置

This parameter is required.', position='Body'),
  description?: string(name='description', description='任务描述', position='Body'),
  displayName: string(name='displayName', description='任务显示名称

This parameter is required.', example='download-123456789', position='Body'),
  name: string(name='name', description='代表资源名称的资源属性字段

This parameter is required.', example='download-123', position='Body'),
}

model CreateDownloadJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of CreateDownloadJob  CreateDownloadJobRequest
  * @return CreateDownloadJobResponse
 */
async function createDownloadJob(request: CreateDownloadJobRequest): CreateDownloadJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDownloadJob', 'POST', '/downloadjobs', 'none', false, 'json', request);
}

model CreateETLRequest {
  project?: string(name='project', description='Project name.

This parameter is required.', example='ali-test-project', position='Host'),
  configuration: ETLConfiguration(name='configuration', description='The detailed configuration of the job.

This parameter is required.', position='Body'),
  description?: string(name='description', description='The description of the job.', example='this is ETL', position='Body'),
  displayName: string(name='displayName', description='The display name of the job.

This parameter is required.', example='sls-test-etl', position='Body'),
  name: string(name='name', description='The name of the job (unique within a project).

This parameter is required.', example='etl-123456', position='Body'),
}

model CreateETLResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of CreateETL  CreateETLRequest
  * @return CreateETLResponse
 */
async function createETL(request: CreateETLRequest): CreateETLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateETL', 'POST', '/etls', 'none', false, 'json', request);
}

model CreateIndexRequest {
  logstore: string(name='logstore', description='The name of the Logstore.

This parameter is required.', example='ali-logstore-test', position='Path'),
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-project-test', position='Host'),
  body?: Index(name='body', description='The request body.', position='Body'),
}

model CreateIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * @param request  the request parameters of CreateIndex  CreateIndexRequest
  * @return CreateIndexResponse
 */
async function createIndex(request: CreateIndexRequest): CreateIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateIndex', 'POST', '/logstores/{logstore}/index', 'none', false, 'json', request);
}

model CreateLogStoreRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  appendMeta?: boolean(name='appendMeta', description='Specifies whether to record the **public IP address** and the **log receiving time**. Default value: false. Valid values:

*   true: records the public IP address and the log receiving time. If you set this parameter to true, Simple Log Service automatically adds the public IP address of the device from which the log is collected and the time when Simple Log Service receives the log to the Tag field of the collected log.
*   false: does not record the public IP address or log receiving time.', example='false', position='Body'),
  autoSplit?: boolean(name='autoSplit', description='Specifies whether to enable automatic sharding. Valid values:

*   true
*   false', example='true', position='Body'),
  enableTracking?: boolean(name='enable_tracking', description='Specifies whether to enable the web tracking feature. Default value: false. Valid values:

*   true
*   false', example='false', position='Body'),
  encryptConf?: EncryptConf(name='encrypt_conf', description='The data structure of the encryption configuration. The following parameters are included: `enable`, `encrypt_type`, and `user_cmk_info`. For more information, see [EncryptConf](https://help.aliyun.com/document_detail/409461.html).', position='Body'),
  hotTtl?: int32(name='hot_ttl', description='The data retention period for the hot storage tier. Unit: days. Minimum value: 7. The value of this parameter cannot exceed the value of ttl. If you set this parameter to -1, all data is stored in the hot storage tier.

After the retention period that is specified for the hot storage tier elapses, the data is moved to the Infrequent Access (IA) storage tier. For more information, see [Enable hot and cold-tiered storage for a Logstore](https://help.aliyun.com/document_detail/308645.html).', example='60', position='Body'),
  infrequentAccessTTL?: int32(name='infrequentAccessTTL', description='The data retention period for the IA storage tier. You must set this parameter to at least 30 days. After the data retention period that you specify for the IA storage tier elapses, the data is moved to the Archive storage tier.', example='30', position='Body'),
  logstoreName: string(name='logstoreName', description='The name of the Logstore. The name must meet the following requirements:

*   The name must be unique in a project.
*   The name can contain only lowercase letters, digits, hyphens (-), and underscores (_).
*   The name must start and end with a lowercase letter or digit.
*   The name must be 3 to 63 characters in length.

This parameter is required.', example='my-logstore', position='Body'),
  maxSplitShard?: int32(name='maxSplitShard', description='The maximum number of shards into which existing shards can be automatically split. Valid values: 1 to 256.

>  If you set autoSplit to true, you must specify this parameter.', example='64', position='Body'),
  mode?: string(name='mode', description='The type of the Logstore. Simple Log Service provides two types of Logstores: Standard Logstores and Query Logstores. Valid values:

*   **standard**: Standard Logstore. This type of Logstore supports the log analysis feature and is suitable for scenarios such as real-time monitoring and interactive analysis. You can use this type of Logstore to build a comprehensive observability system.
*   **query**: Query Logstore. This type of Logstore supports high-performance query operations. The index traffic fee of a Query Logstore is approximately half that of a Standard Logstore. Query Logstores do not support SQL analysis. Query Logstores are suitable for scenarios in which the amount of data is large, the data retention period is long, or log analysis is not required. Data retention periods of weeks or months are considered long.', example='standard', position='Body'),
  processorId?: string(name='processorId', description='IngestProcessor ID', position='Body'),
  shardCount: int32(name='shardCount', description='The number of shards.

>  You cannot call the CreateLogStore operation to change the number of shards. You can call the SplitShard or MergeShards operation to change the number of shards.

This parameter is required.', example='2', position='Body'),
  telemetryType?: string(name='telemetryType', description='The type of the observable data. Valid values:

*   **None** (default): log data
*   **Metrics**: metric data', example='None', position='Body'),
  ttl: int32(name='ttl', description='The data retention period. Unit: days. Valid values: 1 to 3650. If you set this parameter to 3650, data is permanently stored.

This parameter is required.', example='1', position='Body'),
}

model CreateLogStoreResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description ### Usage notes
  * * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * * An AccessKey pair is created and obtained. For more information, see [AccessKey pair](https://help.aliyun.com/document_detail/29009.html).
  * The AccessKey pair of an Alibaba Cloud account has permissions on all API operations. Using these credentials to perform operations in Simple Log Service is a high-risk operation. We recommend that you use a Resource Access Management (RAM) user to call API operations or perform routine O&#x26;M. To create a RAM user, log on to the RAM console. Make sure that the RAM user has the management permissions on Simple Log Service resources. For more information, see [Create a RAM user and authorize the RAM user to access Simple Log Service](https://help.aliyun.com/document_detail/47664.html).
  * * The information that is required to query logs is obtained. The information includes the name of the project to which the logs belong and the region of the project. For more information, see [Manage a project](https://help.aliyun.com/document_detail/48984.html).
  * * You can create up to 200 Logstores in each project.
  * * If the retention period of a log reaches the data retention period that you specified for the Logstore, the log is deleted.
  * ### Authentication resources
  * The following table describes the authorization information that is required for this operation. You can add the information to the Action element of a RAM policy statement to grant a RAM user or a RAM role the permissions to call this operation.
  * |Action|Resource|
  * |:---|:---|
  * |`log:CreateLogStore`|`acs:log:{#regionId}:{#accountId}:project/{#ProjectName}/logstore/{#LogstoreName}`|
  * @param request  the request parameters of CreateLogStore  CreateLogStoreRequest
  * @return CreateLogStoreResponse
 */
async function createLogStore(request: CreateLogStoreRequest): CreateLogStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateLogStore', 'POST', '/logstores', 'none', false, 'json', request);
}

model CreateLoggingRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  loggingDetails: [ 
    {
      logstore: string(name='logstore', description='The name of the Logstore to which service logs of the type are stored.

This parameter is required.', example='my-logstore'),
      type: string(name='type', description='The type of service logs. Valid values:

*   consumergroup_log: the consumption delay logs of consumer groups.
*   logtail_alarm: the alert logs of Logtail.
*   operation_log: the operation logs.
*   logtail_profile: the collection logs of Logtail.
*   metering: the metering logs.
*   logtail_status: the status logs of Logtail.
*   scheduledsqlalert: the run logs of Scheduled SQL jobs.
*   etl_alert: the run logs of data transformation jobs.

This parameter is required.', example='consumergroup_log'),
    }
  ](name='loggingDetails', description='The configurations of service logs.

This parameter is required.', position='Body'),
  loggingProject: string(name='loggingProject', description='The name of the project to which service logs are stored.

This parameter is required.', example='my-project', position='Body'),
}

model CreateLoggingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * @param request  the request parameters of CreateLogging  CreateLoggingRequest
  * @return CreateLoggingResponse
 */
async function createLogging(request: CreateLoggingRequest): CreateLoggingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateLogging', 'POST', '/logging', 'none', false, 'json', request);
}

model CreateLogtailPipelineConfigRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='test-project', position='Host'),
  aggregators?: [  map[string]any ](name='aggregators', description='The aggregation plug-ins.

>  This parameter takes effect only when extended plug-ins are used. You can use only one aggregation plug-in.', position='Body'),
  configName: string(name='configName', description='The name of the configuration.

>  The name of the configuration must be unique in the project to which the configuration belongs. After the configuration is created, you cannot change the name of the configuration. The name must meet the following requirements:

*   The name can contain only lowercase letters, digits, hyphens (-), and underscores (_).

*   The name must start and end with a lowercase letter or a digit.

*   The name must be 2 to 128 characters in length.

This parameter is required.', example='test-config', position='Body'),
  flushers: [  map[string]any ](name='flushers', description='The output plug-ins.

>  You can configure only one output plug-in.

This parameter is required.', position='Body'),
  global?: map[string]any(name='global', description='The global settings.', position='Body'),
  inputs: [  map[string]any ](name='inputs', description='The input plug-ins.

>  You can configure only one input plug-in.

This parameter is required.', position='Body'),
  logSample?: string(name='logSample', description='The sample log. You can specify multiple sample logs.', example='2022-06-14 11:13:29.796 | DEBUG    | __main__:<module>:1 - hello world', position='Body'),
  processors?: [  map[string]any ](name='processors', description='The processing plug-ins.

>  Logtail plug-ins for data processing are classified into native plug-ins and extended plug-ins. For more information, see [Overview of Logtail plug-ins for data processing](https://help.aliyun.com/document_detail/64957.html).

> 

*   You can use native plug-ins only to collect text logs.

*   You cannot add native plug-ins and extended plug-ins at a time.

*   When you add native plug-ins, take note of the following items:

    *   You must add one of the following Logtail plug-ins for data processing as the first plug-in: Data Parsing (Regex Mode), Data Parsing (Delimiter Mode), Data Parsing (JSON Mode), Data Parsing (NGINX Mode), Data Parsing (Apache Mode), and Data Parsing (IIS Mode).
    *   After you add the first plug-in, you can add one Time Parsing plug-in, one Data Filtering plug-in, and multiple Data Masking plug-ins.', position='Body'),
  task?: map[string]any(name='task', position='Body'),
}

model CreateLogtailPipelineConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description The UK (London) region is supported. Supported regions are constantly updated.
  * @param request  the request parameters of CreateLogtailPipelineConfig  CreateLogtailPipelineConfigRequest
  * @return CreateLogtailPipelineConfigResponse
 */
async function createLogtailPipelineConfig(request: CreateLogtailPipelineConfigRequest): CreateLogtailPipelineConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateLogtailPipelineConfig', 'POST', '/pipelineconfigs', 'none', false, 'json', request);
}

model CreateMachineGroupRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  groupAttribute?: {
    externalName?: string(name='externalName', description='The identifier of the external management system on which the machine group depends.', example='testgroup'),
    groupTopic?: string(name='groupTopic', description='The log topic of the machine group.', example='testtopic'),
  }(name='groupAttribute', description='The attributes of the machine group.', position='Body'),
  groupName: string(name='groupName', description='The name of the machine group. The name must meet the following requirements:

*   The name of each machine group in a project must be unique.
*   It can contain only lowercase letters, digits, hyphens (-), and underscores (_).
*   It must start and end with a lowercase letter or a digit.
*   It must be 3 to 128 characters in length.

This parameter is required.', example='test-machine-group', position='Body'),
  groupType?: string(name='groupType', description='The type of the machine group. The parameter can be left empty.', example='""', position='Body'),
  machineIdentifyType: string(name='machineIdentifyType', description='The type of the machine group identifier. Valid values:

*   ip: The machine group uses IP addresses as identifiers.
*   userdefined: The machine group uses custom identifiers.

This parameter is required.', example='ip', position='Body'),
  machineList: [ string ](name='machineList', description='The identifiers of machine group.

*   If you set machineIdentifyType to ip, enter the IP address of the machine.
*   If you set machineIdentifyType to userdefined, enter a custom identifier.

This parameter is required.', position='Body'),
}

model CreateMachineGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description ### Usage notes
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * @param request  the request parameters of CreateMachineGroup  CreateMachineGroupRequest
  * @return CreateMachineGroupResponse
 */
async function createMachineGroup(request: CreateMachineGroupRequest): CreateMachineGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateMachineGroup', 'POST', '/machinegroups', 'none', false, 'json', request);
}

model CreateMaxComputeExportRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='my-project', position='Host'),
  configuration: MaxComputeExportConfiguration(name='configuration', description='The setting of the MaxCompute data shipping job.

This parameter is required.', position='Body'),
  description?: string(name='description', description='The description of the MaxCompute data shipping job.', position='Body'),
  displayName: string(name='displayName', description='The display name of the MaxCompute data shipping job.

This parameter is required.', example='my-mc-job', position='Body'),
  name: string(name='name', description='The unique identifier of the MaxCompute data shipping job.

This parameter is required.', example='export-mc-1234567890-123456', position='Body'),
}

model CreateMaxComputeExportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description *   Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * *   An AccessKey pair is created and obtained. For more information, see [AccessKey pair](https://help.aliyun.com/document_detail/29009.html).
  * The AccessKey pair of an Alibaba Cloud account has permissions on all API operations. Using these credentials to perform operations in Simple Log Service is a high-risk operation. We recommend that you use a Resource Access Management (RAM) user to call API operations or perform routine O\\&M. To create a RAM user, log on to the RAM console. Make sure that the RAM user has the management permissions on Simple Log Service resources. For more information, see [Create a RAM user and authorize the RAM user to access Simple Log Service](https://help.aliyun.com/document_detail/47664.html).
  * *   The information that is required to query logs is obtained. The information includes the name of the project to which the logs belong and the region of the project. For more information, see [Manage a project](https://help.aliyun.com/document_detail/48984.html).
  * @param request  the request parameters of CreateMaxComputeExport  CreateMaxComputeExportRequest
  * @return CreateMaxComputeExportResponse
 */
async function createMaxComputeExport(request: CreateMaxComputeExportRequest): CreateMaxComputeExportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateMaxComputeExport', 'POST', '/maxcomputeexports', 'none', false, 'json', request);
}

model CreateMetricStoreRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='my-project', position='Host'),
  autoSplit?: boolean(name='autoSplit', description='Specifies whether to enable automatic sharding.', example='true', position='Body'),
  hotTtl?: int32(name='hot_ttl', position='Body'),
  infrequentAccessTTL?: int32(name='infrequentAccessTTL', position='Body'),
  maxSplitShard?: int32(name='maxSplitShard', description='The maximum number of shards into which existing shards can be automatically split. This parameter is valid only when you set the autoSplit parameter to true.', example='64', position='Body'),
  metricType?: string(name='metricType', description='The type of the metric data. Example: prometheus.', example='prometheus', position='Body'),
  mode?: string(name='mode', description='The type of the Metricstore. For example, you can set the parameter to standard to query Standard Metricstores.', example='standard', position='Body'),
  name: string(name='name', description='The name of the Metricstore.

This parameter is required.', example='my_metric_store', position='Body'),
  shardCount: int32(name='shardCount', description='The number of shards in the Metricstore.

This parameter is required.', example='2', position='Body'),
  ttl: int32(name='ttl', description='The retention period of the metric data in the Metricstore. Unit: days.

This parameter is required.', example='7', position='Body'),
}

model CreateMetricStoreResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description Metricstores are used to store metric data. For more information, see [Metric data](https://help.aliyun.com/document_detail/174965.html).
  * *   Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * *   An AccessKey pair is created and obtained. For more information, see [AccessKey pair](https://help.aliyun.com/document_detail/29009.html).
  * The AccessKey pair of an Alibaba Cloud account has permissions on all API operations. Using these credentials to perform operations in Simple Log Service is a high-risk operation. We recommend that you use a Resource Access Management (RAM) user to call API operations or perform routine O\\&M. To create a RAM user, log on to the RAM console. Make sure that the RAM user has the management permissions on Simple Log Service resources. For more information, see [Create a RAM user and authorize the RAM user to access Simple Log Service](https://help.aliyun.com/document_detail/47664.html).
  * *   The information that is required to query metric data is obtained. The information includes the name of the project to which the metric data belong and the region of the project. For more information, see [Manage a project](https://help.aliyun.com/document_detail/48984.html).
  * *   You can create up to 200 Logstores or Metricstores in a project.
  * *   Metric data is automatically deleted when the retention period of the metric data ends.
  * @param request  the request parameters of CreateMetricStore  CreateMetricStoreRequest
  * @return CreateMetricStoreResponse
 */
async function createMetricStore(request: CreateMetricStoreRequest): CreateMetricStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateMetricStore', 'POST', '/metricstores', 'none', false, 'json', request);
}

model CreateOSSExportRequest {
  project?: string(name='project', description='This parameter is required.', example='ali-test-project', position='Host'),
  configuration: OSSExportConfiguration(name='configuration', description='The configuration details of the job.

This parameter is required.', position='Body'),
  description?: string(name='description', description='The description of the job.', position='Body'),
  displayName: string(name='displayName', description='The display name of the job.

This parameter is required.', example='ali-test-oss-job', position='Body'),
  name: string(name='name', description='The unique identifier of the OSS data shipping job.

This parameter is required.', example='job-123456789-123456', position='Body'),
}

model CreateOSSExportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of CreateOSSExport  CreateOSSExportRequest
  * @return CreateOSSExportResponse
 */
async function createOSSExport(request: CreateOSSExportRequest): CreateOSSExportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateOSSExport', 'POST', '/ossexports', 'none', false, 'json', request);
}

model CreateOSSHDFSExportRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  configuration: OSSExportConfiguration(name='configuration', description='The configuration details of the job.

This parameter is required.', position='Body'),
  description?: string(name='description', description='The description of the job.', position='Body'),
  displayName: string(name='displayName', description='The display name of the job.

This parameter is required.', example='ali-test-oss-hdfs-job', position='Body'),
  name: string(name='name', description='The unique identifier of the OSS data shipping job.

This parameter is required.', example='job-123456789-123456', position='Body'),
}

model CreateOSSHDFSExportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of CreateOSSHDFSExport  CreateOSSHDFSExportRequest
  * @return CreateOSSHDFSExportResponse
 */
async function createOSSHDFSExport(request: CreateOSSHDFSExportRequest): CreateOSSHDFSExportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateOSSHDFSExport', 'POST', '/osshdfsexports', 'none', false, 'json', request);
}

model CreateOSSIngestionRequest {
  project?: string(name='project', description='This parameter is required.', example='ali-test-project', position='Host'),
  configuration: OSSIngestionConfiguration(name='configuration', description='The configuration of the OSS data import job.

This parameter is required.', position='Body'),
  description?: string(name='description', description='The description of the job.', position='Body'),
  displayName: string(name='displayName', description='The display name of the job.

This parameter is required.', position='Body'),
  name: string(name='name', description='The name of the OSS data import job.

This parameter is required.', example='ingest-oss-123456', position='Body'),
  schedule?: Schedule(name='schedule', description='The scheduling type. By default, you do not need to specify this parameter. If you want to import data at regular intervals, such as importing data every Monday at 08: 00., you can specify a cron expression.', position='Body'),
}

model CreateOSSIngestionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of CreateOSSIngestion  CreateOSSIngestionRequest
  * @return CreateOSSIngestionResponse
 */
async function createOSSIngestion(request: CreateOSSIngestionRequest): CreateOSSIngestionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateOSSIngestion', 'POST', '/ossingestions', 'none', false, 'json', request);
}

model CreateProjectRequest {
  dataRedundancyType?: string(name='dataRedundancyType', description='The disaster recovery type. Valid values:

*   LRS: locally redundant storage
*   ZRS: zone-redundant storage', example='LRS', position='Body'),
  description: string(name='description', description='The description of the project.

This parameter is required.', example='this is test', position='Body'),
  projectName: string(name='projectName', description='The project name must be unique in a region. You cannot change the name after you create the project. The name must meet the following requirements:

*   The name must be globally unique.
*   The name can contain only lowercase letters, digits, and hyphens (-).
*   The name must start and end with a lowercase letter or a digit.
*   The name must be 3 to 63 characters in length.

This parameter is required.', example='test-project', position='Body'),
  recycleBinEnabled?: boolean(name='recycleBinEnabled', description='Specifies whether to enable the recycle bin feature.

Valid values:

*   true
*   false', example='true', position='Body'),
  resourceGroupId?: string(name='resourceGroupId', description='The ID of the resource group.', example='rg-aekzf******sxby', position='Body'),
}

model CreateProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of CreateProject  CreateProjectRequest
  * @return CreateProjectResponse
 */
async function createProject(request: CreateProjectRequest): CreateProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateProject', 'POST', '/', 'none', false, 'json', request);
}

model CreateS3IngestionRequest {
  project?: string(name='project', description='This parameter is required.', position='Host'),
  configuration?: S3IngestionConfiguration(name='configuration', position='Body'),
  description?: string(name='description', position='Body'),
  displayName: string(name='displayName', description='This parameter is required.', position='Body'),
  name: string(name='name', description='This parameter is required.', position='Body'),
  schedule?: Schedule(name='schedule', position='Body'),
}

model CreateS3IngestionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of CreateS3Ingestion  CreateS3IngestionRequest
  * @return CreateS3IngestionResponse
 */
async function createS3Ingestion(request: CreateS3IngestionRequest): CreateS3IngestionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateS3Ingestion', 'POST', '/s3ingestions', 'none', false, 'json', request);
}

model CreateSavedSearchRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  displayName: string(name='displayName', description='The display name.

This parameter is required.', example='displayname', position='Body'),
  logstore: string(name='logstore', description='The name of the Logstore to which the saved search belongs.

This parameter is required.', example='aliyun-test-logstore', position='Body'),
  savedsearchName: string(name='savedsearchName', description='The name of the saved search. The name must be 3 to 63 characters in length.

This parameter is required.', example='pv in minutes', position='Body'),
  searchQuery: string(name='searchQuery', description='The query statement of the saved search. A query statement consists of a search statement and an analytic statement in the `Search statement|Analytic statement` format. For more information, see [Log search overview](https://help.aliyun.com/document_detail/43772.html) and [Log analysis overview](https://help.aliyun.com/document_detail/53608.html).

This parameter is required.', example='*|select date_format(__time__-__time__%60, \\"%H:%i:%s\\") as time, COUNT(*) as pv group by time', position='Body'),
  topic: string(name='topic', description='The topic of the logs.

This parameter is required.', example='theme', position='Body'),
}

model CreateSavedSearchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description ### Usage notes
  * * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * * An AccessKey pair is created and obtained. For more information, see [AccessKey pair](https://help.aliyun.com/document_detail/29009.html).
  * The AccessKey pair of an Alibaba Cloud account has permissions on all API operations. Using these credentials to perform operations in Simple Log Service is a high-risk operation. We recommend that you use a Resource Access Management (RAM) user to call API operations or perform routine O&#x26;M. To create a RAM user, log on to the RAM console. Make sure that the RAM user has the management permissions on Simple Log Service resources. For more information, see [Create a RAM user and authorize the RAM user to access Simple Log Service](https://help.aliyun.com/document_detail/47664.html).
  * * The information that is required to query logs is obtained. The information includes the name of the project to which the logs belong, the region of the project, and the name of the Logstore to which the logs belong. For more information, see [Manage a project](https://help.aliyun.com/document_detail/48984.html) and [Manage a Logstore](https://help.aliyun.com/document_detail/48990.html).
  * * Limits are imposed when you use Simple Log Service to query logs. We recommend that you specify query statements and query time ranges based on the limits. For more information, see [Log search overview](https://help.aliyun.com/document_detail/43772.html) and [Log analysis overview](https://help.aliyun.com/document_detail/53608.html).
  * ### Authentication resources
  * The following table describes the authorization information that is required for this operation. You can add the information to the Action element of a RAM policy statement to grant a RAM user or a RAM role the permissions to call this operation.
  * |Action|Resource|
  * |:---|:---|
  * |`log:CreateSavedSearch`|`acs:log:{#regionId}:{#accountId}:project/{#ProjectName}/savedsearch/{#SavedSearchName}`|
  * @param request  the request parameters of CreateSavedSearch  CreateSavedSearchRequest
  * @return CreateSavedSearchResponse
 */
async function createSavedSearch(request: CreateSavedSearchRequest): CreateSavedSearchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateSavedSearch', 'POST', '/savedsearches', 'none', false, 'json', request);
}

model CreateScheduledSQLRequest {
  project?: string(name='project', description='This parameter is required.', example='ali-test-project', position='Host'),
  configuration: ScheduledSQLConfiguration(name='configuration', description='This parameter is required.', position='Body'),
  description?: string(name='description', position='Body'),
  displayName: string(name='displayName', description='This parameter is required.', example='ali-test-scheduled-sql', position='Body'),
  name: string(name='name', description='This parameter is required.', example='sql-123456789-123456', position='Body'),
  schedule: Schedule(name='schedule', description='This parameter is required.', position='Body'),
}

model CreateScheduledSQLResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of CreateScheduledSQL  CreateScheduledSQLRequest
  * @return CreateScheduledSQLResponse
 */
async function createScheduledSQL(request: CreateScheduledSQLRequest): CreateScheduledSQLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateScheduledSQL', 'POST', '/scheduledsqls', 'none', false, 'json', request);
}

model CreateSqlInstanceRequest {
  project?: string(name='project', description='The name of the project for which you want to enable the Dedicated SQL feature.

This parameter is required.', position='Host'),
  cu: int32(name='cu', description='The number of compute units (CUs). When you use the Dedicated SQL feature, CUs are used in parallel.

This parameter is required.', example='2', position='Body'),
  useAsDefault: boolean(name='useAsDefault', description='Specifies whether to enable the Dedicated SQL feature for the project. If you set this parameter to true, the Dedicated SQL feature is enabled for the specified project and takes effect for all query statements that you execute in the project, including the query statements for alerts and dashboards.

This parameter is required.', position='Body'),
}

model CreateSqlInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description **Before you call this operation, make sure that you fully understand the [billing](https://help.aliyun.com/document_detail/223777.html) of Dedicated SQL.
  * @param request  the request parameters of CreateSqlInstance  CreateSqlInstanceRequest
  * @return CreateSqlInstanceResponse
 */
async function createSqlInstance(request: CreateSqlInstanceRequest): CreateSqlInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateSqlInstance', 'POST', '/sqlinstance', 'none', false, 'json', request);
}

model CreateStoreViewRequest {
  project?: string(name='project', description='This parameter is required.', example='example-project', position='Host'),
  name: string(name='name', description='The name of the dataset.

*   The name can contain lowercase letters, digits, and underscores (_).
*   The name must start with a lowercase letter.
*   The name must be 3 to 62 characters in length.

This parameter is required.', example='my_storeview', position='Body'),
  storeType: string(name='storeType', description='The type of the dataset. Valid values: metricstore and logstore.

This parameter is required.', example='logstore', position='Body'),
  stores: [
    StoreViewStore
  ](name='stores', description='The Logstores or Metricstores.

This parameter is required.', position='Body'),
}

model CreateStoreViewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of CreateStoreView  CreateStoreViewRequest
  * @return CreateStoreViewResponse
 */
async function createStoreView(request: CreateStoreViewRequest): CreateStoreViewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateStoreView', 'POST', '/storeviews', 'none', false, 'json', request);
}

model CreateTicketRequest {
  accessTokenExpirationTime?: long(name='accessTokenExpirationTime', description='*   The validity period of the access token. Unit: seconds. Default value: 86400, which specifies one day. Valid values: 0 to 86400.
*   The validity period of the access token is the smaller value between accessTokenExpirationTime and expirationTime.
*   If you use a Security Token Service (STS) token to call this operation, the validity period of the access token is the smallest value among accessTokenExpirationTime, expirationTime, and the validity period of the STS token.', example='600', position='Query'),
  expirationTime?: long(name='expirationTime', description='*   You must use the Simple Log Service endpoint for the China (Shanghai) or Singapore region to call the CreateTicket operation. After you obtain the ticket, you can use the ticket regardless of the region.
*   The validity period for the URL of the console page that you want to embed. Unit: seconds. Default value: 86400 (one day). Valid values: 0 to 2592000 (30 days).', example='86400', position='Query'),
}

model CreateTicketResponseBody = {
  ticket?: string(name='ticket', description='The ticket that is used for logon-free access.', example='eyJ***************.eyJ******************.KUT****************'),
}

model CreateTicketResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTicketResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateTicket  CreateTicketRequest
  * @return CreateTicketResponse
 */
async function createTicket(request: CreateTicketRequest): CreateTicketResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateTicket', 'POST', '/tickets', 'json', false, 'json', request);
}

model DeleteAgentInstanceConfigRequest {
  configType: string(name='configType', description='This parameter is required.', position='Path'),
  attributes?: map[string]string(name='attributes', shrink='json', position='Query'),
}

model DeleteAgentInstanceConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of DeleteAgentInstanceConfig  DeleteAgentInstanceConfigRequest
  * @return DeleteAgentInstanceConfigResponse
 */
async function deleteAgentInstanceConfig(request: DeleteAgentInstanceConfigRequest): DeleteAgentInstanceConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteAgentInstanceConfig', 'DELETE', '/agentinstanceconfigs/{configType}', 'none', false, 'json', request);
}

model DeleteAlertRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  alertName: string(name='alertName', description='The ID of the alert rule.

This parameter is required.', example='alert-0123456789-123456', position='Path'),
}

model DeleteAlertResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of DeleteAlert  DeleteAlertRequest
  * @return DeleteAlertResponse
 */
async function deleteAlert(request: DeleteAlertRequest): DeleteAlertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteAlert', 'DELETE', '/alerts/{alertName}', 'none', false, 'json', request);
}

model DeleteAnnotationDataRequest {
  datasetId?: string(name='datasetId', description='The unique identifier of the dataset.', example='cb8cc4eb51a85e823471cdb368fae9be', position='Path'),
  annotationdataId?: string(name='annotationdataId', description='The unique identifier of the data.', example='2156d560fc7c01420542df92cd6365ds', position='Path'),
}

model DeleteAnnotationDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of DeleteAnnotationData  DeleteAnnotationDataRequest
  * @return DeleteAnnotationDataResponse
 */
async function deleteAnnotationData(request: DeleteAnnotationDataRequest): DeleteAnnotationDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteAnnotationData', 'DELETE', '/ml/annotationdataset/{datasetId}/annotationdata/{annotationdataId}', 'none', false, 'json', request);
}

model DeleteAnnotationDataSetRequest {
  datasetId?: string(name='datasetId', description='The unique identifier of the dataset.', example='cb8cc4eb51a85e823471cdb368fae9be', position='Path'),
}

model DeleteAnnotationDataSetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description You can delete a dataset only if no data exists in the dataset.
  * @param request  the request parameters of DeleteAnnotationDataSet  DeleteAnnotationDataSetRequest
  * @return DeleteAnnotationDataSetResponse
 */
async function deleteAnnotationDataSet(request: DeleteAnnotationDataSetRequest): DeleteAnnotationDataSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteAnnotationDataSet', 'DELETE', '/ml/annotationdataset/{datasetId}', 'none', false, 'json', request);
}

model DeleteAnnotationLabelRequest {
  labelId?: string(name='labelId', description='The tag ID.', example='sls_builtin_4e0aba6d9664073513e9954fb57bd799', position='Path'),
}

model DeleteAnnotationLabelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description Only non-built-in tags can be deleted.
  * @param request  the request parameters of DeleteAnnotationLabel  DeleteAnnotationLabelRequest
  * @return DeleteAnnotationLabelResponse
 */
async function deleteAnnotationLabel(request: DeleteAnnotationLabelRequest): DeleteAnnotationLabelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteAnnotationLabel', 'DELETE', '/ml/annotationlabel/{labelId}', 'none', false, 'json', request);
}

model DeleteCollectionPolicyRequest {
  policyName: string(name='policyName', description='This parameter is required.', example='your_log_policy', minLength=3, maxLength=63, position='Path'),
  dataCode?: string(name='dataCode', example='access_log', position='Query'),
  productCode?: string(name='productCode', example='oss', position='Query'),
}

model DeleteCollectionPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description You must use the Simple Log Service endpoint for the China (Shanghai), Singapore, or Heyuan ACDR Auto region to call the operation.
  * @param request  the request parameters of DeleteCollectionPolicy  DeleteCollectionPolicyRequest
  * @return DeleteCollectionPolicyResponse
 */
async function deleteCollectionPolicy(request: DeleteCollectionPolicyRequest): DeleteCollectionPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteCollectionPolicy', 'DELETE', '/collectionpolicy/{policyName}', 'none', false, 'json', request);
}

model DeleteConfigRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  configName: string(name='configName', description='The name of the Logtail configuration.

This parameter is required.', example='logtail-config-sample', position='Path'),
}

model DeleteConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description ### [](#)Usage notes
  * *   Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * *   If a Logtail configuration is applied to a machine group, you cannot collect data from the machine group after you delete the Logtail configuration.
  * *   An AccessKey pair is created and obtained. For more information, see [AccessKey pair](https://help.aliyun.com/document_detail/29009.html).
  * The AccessKey pair of an Alibaba Cloud account has permissions on all API operations. Using these credentials to perform operations in Simple Log Service is a high-risk operation. We recommend that you use a RAM user to call API operations or perform routine O\\&M. To create a RAM user, log on to the RAM console. Make sure that the RAM user has the management permissions on Simple Log Service resources. For more information, see [Create a RAM user and authorize the RAM user to access Simple Log Service](https://help.aliyun.com/document_detail/47664.html).
  * *   The information that is required to query logs is obtained. The information includes the name of the project to which the logs belong and the region of the project. For more information, see [Manage a project](https://help.aliyun.com/document_detail/48984.html).
  * *   The name of the required Logtail configuration is obtained. For more information, see [ListConfig](https://help.aliyun.com/document_detail/29043.html).
  * @param request  the request parameters of DeleteConfig  DeleteConfigRequest
  * @return DeleteConfigResponse
 */
async function deleteConfig(request: DeleteConfigRequest): DeleteConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteConfig', 'DELETE', '/configs/{configName}', 'none', false, 'json', request);
}

model DeleteConsumeProcessorRequest {
  project?: string(name='project', description='This parameter is required.', position='Host'),
  processorName: string(name='processorName', description='This parameter is required.', example='consume-processor-1', position='Path'),
}

model DeleteConsumeProcessorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of DeleteConsumeProcessor  DeleteConsumeProcessorRequest
  * @return DeleteConsumeProcessorResponse
 */
async function deleteConsumeProcessor(request: DeleteConsumeProcessorRequest): DeleteConsumeProcessorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteConsumeProcessor', 'DELETE', '/consumeprocessors/{processorName}', 'none', false, 'json', request);
}

model DeleteConsumerGroupRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='The name of the Logstore.

This parameter is required.', example='ali-test-logstore', position='Path'),
  consumerGroup: string(name='consumerGroup', description='The name of the consumer group.

This parameter is required.', example='consumer-group-1', position='Path'),
}

model DeleteConsumerGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description ### Usage notes
  * * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * * An AccessKey pair is created and obtained. For more information, see [AccessKey pair](https://help.aliyun.com/document_detail/29009.html).
  * The AccessKey pair of an Alibaba Cloud account has permissions on all API operations. Using these credentials to perform operations in Simple Log Service is a high-risk operation. We recommend that you use a Resource Access Management (RAM) user to call API operations or perform routine O&#x26;M. To create a RAM user, log on to the RAM console. Make sure that the RAM user has the management permissions on Simple Log Service resources. For more information, see [Create a RAM user and authorize the RAM user to access Simple Log Service](https://help.aliyun.com/document_detail/47664.html).
  * * The information that is required to query logs is obtained. The information includes the name of the project to which the logs belong, the region of the project, and the name of the Logstore to which the logs belong. For more information, see [Manage a project](https://help.aliyun.com/document_detail/48984.html) and [Manage a Logstore](https://help.aliyun.com/document_detail/48990.html).
  * * The name of the consumer group is obtained. For more information, see [ListConsumerGroup](https://help.aliyun.com/document_detail/74964.html).
  * ### Authentication resources
  * The following table describes the authorization information that is required for this operation. You can add the information to the Action element of a RAM policy statement to grant a RAM user or a RAM role the permissions to call this operation.
  * |Action|Resource|
  * |:---|:---|
  * |`log:DeleteConsumerGroup`|`acs:log:{#regionId}:{#accountId}:project/{#ProjectName}/logstore/{#logstoreName}/consumergroup/{#ConsumerGroup}`|
  * @param request  the request parameters of DeleteConsumerGroup  DeleteConsumerGroupRequest
  * @return DeleteConsumerGroupResponse
 */
async function deleteConsumerGroup(request: DeleteConsumerGroupRequest): DeleteConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteConsumerGroup', 'DELETE', '/logstores/{logstore}/consumergroups/{consumerGroup}', 'none', false, 'json', request);
}

model DeleteDashboardRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  dashboardName: string(name='dashboardName', description='The name of the dashboard.

This parameter is required.', example='dashboard-1609294922657-434834', position='Path'),
}

model DeleteDashboardResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description ### [](#)Usage notes
  * *   Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * *   An AccessKey pair is created and obtained. For more information, see [AccessKey pair](https://help.aliyun.com/document_detail/29009.html).
  * The AccessKey pair of an Alibaba Cloud account has permissions on all API operations. Using these credentials to perform operations in Simple Log Service is a high-risk operation. We recommend that you use a RAM user to call API operations or perform routine O\\&M. To create a RAM user, log on to the RAM console. Make sure that the RAM user has the management permissions on Simple Log Service resources. For more information, see [Create a RAM user and authorize the RAM user to access Simple Log Service](https://help.aliyun.com/document_detail/47664.html).
  * *   The information that is required to query logs is obtained. The information includes the name of the project to which the logs belong and the region of the project. For more information, see [Manage a project](https://help.aliyun.com/document_detail/48984.html).
  * @param request  the request parameters of DeleteDashboard  DeleteDashboardRequest
  * @return DeleteDashboardResponse
 */
async function deleteDashboard(request: DeleteDashboardRequest): DeleteDashboardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteDashboard', 'DELETE', '/dashboards/{dashboardName}', 'none', false, 'json', request);
}

model DeleteDomainRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  domainName: string(name='domainName', description='The domain name to be deleted.

This parameter is required.', example='example.com', position='Path'),
}

model DeleteDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * @param request  the request parameters of DeleteDomain  DeleteDomainRequest
  * @return DeleteDomainResponse
 */
async function deleteDomain(request: DeleteDomainRequest): DeleteDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteDomain', 'DELETE', '/domains/{domainName}', 'none', false, 'json', request);
}

model DeleteDownloadJobRequest {
  downloadJobName: string(name='downloadJobName', description='代表资源名称的资源属性字段

This parameter is required.', example='download-123', position='Path'),
  project?: string(name='project', description='This parameter is required.', example='ali-test-project', position='Host'),
}

model DeleteDownloadJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of DeleteDownloadJob  DeleteDownloadJobRequest
  * @return DeleteDownloadJobResponse
 */
async function deleteDownloadJob(request: DeleteDownloadJobRequest): DeleteDownloadJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteDownloadJob', 'DELETE', '/downloadjobs/{downloadJobName}', 'none', false, 'json', request);
}

model DeleteETLRequest {
  project?: string(name='project', description='This parameter is required.', example='ali-test-project', position='Host'),
  etlName: string(name='etlName', description='This parameter is required.', example='etl-123456', position='Path'),
}

model DeleteETLResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of DeleteETL  DeleteETLRequest
  * @return DeleteETLResponse
 */
async function deleteETL(request: DeleteETLRequest): DeleteETLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteETL', 'DELETE', '/etls/{etlName}', 'none', false, 'json', request);
}

model DeleteIndexRequest {
  logstore: string(name='logstore', description='The name of the Logstore.

This parameter is required.', example='ali-test-logstore', position='Path'),
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
}

model DeleteIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description ### Usage notes
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * @param request  the request parameters of DeleteIndex  DeleteIndexRequest
  * @return DeleteIndexResponse
 */
async function deleteIndex(request: DeleteIndexRequest): DeleteIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteIndex', 'DELETE', '/logstores/{logstore}/index', 'none', false, 'json', request);
}

model DeleteIngestProcessorRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  processorName: string(name='processorName', description='The identifier of the ingest processor.

This parameter is required.', example='parse-nginx-log', position='Path'),
}

model DeleteIngestProcessorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of DeleteIngestProcessor  DeleteIngestProcessorRequest
  * @return DeleteIngestProcessorResponse
 */
async function deleteIngestProcessor(request: DeleteIngestProcessorRequest): DeleteIngestProcessorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteIngestProcessor', 'DELETE', '/ingestprocessors/{processorName}', 'none', false, 'json', request);
}

model DeleteLogStoreRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='The name of the Logstore.

This parameter is required.', example='aliyun-test-logstore', position='Path'),
}

model DeleteLogStoreResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description ### Usage notes
  * Host consists of a project name and a Log Service endpoint. You must specify a project in Host.
  * @param request  the request parameters of DeleteLogStore  DeleteLogStoreRequest
  * @return DeleteLogStoreResponse
 */
async function deleteLogStore(request: DeleteLogStoreRequest): DeleteLogStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteLogStore', 'DELETE', '/logstores/{logstore}', 'none', false, 'json', request);
}

model DeleteLoggingRequest {
  project?: string(name='project', description='Project名称。

This parameter is required.', example='ali-test-project', position='Host'),
}

model DeleteLoggingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of DeleteLogging  DeleteLoggingRequest
  * @return DeleteLoggingResponse
 */
async function deleteLogging(request: DeleteLoggingRequest): DeleteLoggingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteLogging', 'DELETE', '/logging', 'none', false, 'json', request);
}

model DeleteLogtailPipelineConfigRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='test-project', position='Host'),
  configName: string(name='configName', description='The name of the Logtail pipeline configuration.

This parameter is required.', example='test-config', position='Path'),
}

model DeleteLogtailPipelineConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description The UK (London) region is supported. Supported regions are constantly updated.
  * @param request  the request parameters of DeleteLogtailPipelineConfig  DeleteLogtailPipelineConfigRequest
  * @return DeleteLogtailPipelineConfigResponse
 */
async function deleteLogtailPipelineConfig(request: DeleteLogtailPipelineConfigRequest): DeleteLogtailPipelineConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteLogtailPipelineConfig', 'DELETE', '/pipelineconfigs/{configName}', 'none', false, 'json', request);
}

model DeleteMachineGroupRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  machineGroup: string(name='machineGroup', description='The name of the machine group.

This parameter is required.', example='test-machine-group-4', position='Path'),
}

model DeleteMachineGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description ### Usage notes
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * @param request  the request parameters of DeleteMachineGroup  DeleteMachineGroupRequest
  * @return DeleteMachineGroupResponse
 */
async function deleteMachineGroup(request: DeleteMachineGroupRequest): DeleteMachineGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteMachineGroup', 'DELETE', '/machinegroups/{machineGroup}', 'none', false, 'json', request);
}

model DeleteMaxComputeExportRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='my-project', position='Host'),
  mcExportName: string(name='mcExportName', description='The unique name of the MaxCompute data shipping job. Make sure that the job exists.

This parameter is required.', example='export-mc-1234567890-123456', position='Path'),
}

model DeleteMaxComputeExportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description *   Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * *   An AccessKey pair is created and obtained. For more information, see [AccessKey pair](https://help.aliyun.com/document_detail/29009.html).
  * The AccessKey pair of an Alibaba Cloud account has permissions on all API operations. Using these credentials to perform operations in Simple Log Service is a high-risk operation. We recommend that you use a Resource Access Management (RAM) user to call API operations or perform routine O\\&M. To create a RAM user, log on to the RAM console. Make sure that the RAM user has the management permissions on Simple Log Service resources. For more information, see [Create a RAM user and authorize the RAM user to access Simple Log Service](https://help.aliyun.com/document_detail/47664.html).
  * *   The information that is required to query logs is obtained. The information includes the name of the project to which the logs belong and the region of the project. For more information, see [Manage a project](https://help.aliyun.com/document_detail/48984.html)
  * @param request  the request parameters of DeleteMaxComputeExport  DeleteMaxComputeExportRequest
  * @return DeleteMaxComputeExportResponse
 */
async function deleteMaxComputeExport(request: DeleteMaxComputeExportRequest): DeleteMaxComputeExportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteMaxComputeExport', 'DELETE', '/maxcomputeexports/{mcExportName}', 'none', false, 'json', request);
}

model DeleteMetricStoreRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='my-project', position='Host'),
  name: string(name='name', description='The name of the Metricstore.

This parameter is required.', example='my_metric_store', position='Path'),
}

model DeleteMetricStoreResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description Metricstores are used to store metric data. For more information, see [Metric data](https://help.aliyun.com/document_detail/174965.html).
  * *   You must specify an existing Metricstore.
  * *   Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * *   An AccessKey pair is created and obtained. For more information, see [AccessKey pair](https://help.aliyun.com/document_detail/29009.html).
  * The AccessKey pair of an Alibaba Cloud account has permissions on all API operations. Using these credentials to perform operations in Simple Log Service is a high-risk operation. We recommend that you use a Resource Access Management (RAM) user to call API operations or perform routine O\\&M. To create a RAM user, log on to the RAM console. Make sure that the RAM user has the management permissions on Simple Log Service resources. For more information, see [Create a RAM user and authorize the RAM user to access Simple Log Service](https://help.aliyun.com/document_detail/47664.html).
  * *   The information that is required to query metric data is obtained. The information includes the name of the project to which the metric data belong and the region of the project. For more information, see [Manage a project](https://help.aliyun.com/document_detail/48984.html).
  * *   You can create up to 200 Logstores or Metricstores in a project.
  * *   Metric data is automatically deleted when the retention period of the metric data ends.
  * @param request  the request parameters of DeleteMetricStore  DeleteMetricStoreRequest
  * @return DeleteMetricStoreResponse
 */
async function deleteMetricStore(request: DeleteMetricStoreRequest): DeleteMetricStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteMetricStore', 'DELETE', '/metricstores/{name}', 'none', false, 'none', request);
}

model DeleteOSSExportRequest {
  project?: string(name='project', description='This parameter is required.', example='ali-test-project', position='Host'),
  ossExportName: string(name='ossExportName', description='This parameter is required.', example='job-123456789-123456', position='Path'),
}

model DeleteOSSExportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of DeleteOSSExport  DeleteOSSExportRequest
  * @return DeleteOSSExportResponse
 */
async function deleteOSSExport(request: DeleteOSSExportRequest): DeleteOSSExportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteOSSExport', 'DELETE', '/ossexports/{ossExportName}', 'none', false, 'json', request);
}

model DeleteOSSHDFSExportRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  ossExportName: string(name='ossExportName', description='The unique name of the job.

This parameter is required.', example='job-123456789-123456', position='Path'),
}

model DeleteOSSHDFSExportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of DeleteOSSHDFSExport  DeleteOSSHDFSExportRequest
  * @return DeleteOSSHDFSExportResponse
 */
async function deleteOSSHDFSExport(request: DeleteOSSHDFSExportRequest): DeleteOSSHDFSExportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteOSSHDFSExport', 'DELETE', '/osshdfsexports/{ossExportName}', 'none', false, 'json', request);
}

model DeleteOSSIngestionRequest {
  project?: string(name='project', description='This parameter is required.', example='ali-test-project', position='Host'),
  ossIngestionName: string(name='ossIngestionName', description='This parameter is required.', example='ingest-oss-123456', position='Path'),
}

model DeleteOSSIngestionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of DeleteOSSIngestion  DeleteOSSIngestionRequest
  * @return DeleteOSSIngestionResponse
 */
async function deleteOSSIngestion(request: DeleteOSSIngestionRequest): DeleteOSSIngestionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteOSSIngestion', 'DELETE', '/ossingestions/{ossIngestionName}', 'none', false, 'json', request);
}

model DeleteProjectRequest {
  project?: string(name='project', description='This parameter is required.', example='ali-project-test', position='Host'),
  forceDelete?: boolean(name='forceDelete', position='Query'),
}

model DeleteProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description ### Usage notes
  * * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * * An AccessKey pair is created and obtained. For more information, see [AccessKey pair](https://help.aliyun.com/document_detail/29009.html).
  * The AccessKey pair of an Alibaba Cloud account has permissions on all API operations. Using these credentials to perform operations in Simple Log Service is a high-risk operation. We recommend that you use a Resource Access Management (RAM) user to call API operations or perform routine O&#x26;M. To create a RAM user, log on to the RAM console. Make sure that the RAM user has the management permissions on Simple Log Service resources. For more information, see [Create a RAM user and authorize the RAM user to access Simple Log Service](https://help.aliyun.com/document_detail/47664.html).
  * * After you delete a project, all logs stored in the project and the configurations of the project are deleted and cannot be restored. Proceed with caution.
  * ### Authentication resources
  * The following table describes the authorization information that is required for this operation. You can add the information to the Action element of a RAM policy statement to grant a RAM user or a RAM role the permissions to call this operation.
  * |Action|Resource|
  * |:---|:---|
  * |`log:DeleteProject`|`acs:log:{#regionId}:{#accountId}:project/{#ProjectName}`|
  * @param request  the request parameters of DeleteProject  DeleteProjectRequest
  * @return DeleteProjectResponse
 */
async function deleteProject(request: DeleteProjectRequest): DeleteProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteProject', 'DELETE', '/', 'none', false, 'json', request);
}

model DeleteProjectPolicyRequest {
  project?: string(name='project', description='The name of the project.', example='ali-test-project', position='Host'),
}

model DeleteProjectPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description ### [](#)Usage notes
  * *   Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * *   An AccessKey pair is created and obtained. For more information, see [AccessKey pair](https://help.aliyun.com/document_detail/29009.html).
  * The AccessKey pair of an Alibaba Cloud account has permissions on all API operations. Using these credentials to perform operations in Simple Log Service is a high-risk operation. We recommend that you use a Resource Access Management (RAM) user to call API operations or perform routine O\\&M. To create a RAM user, log on to the RAM console. Make sure that the RAM user has the management permissions on Simple Log Service resources. For more information, see [Create a RAM user and authorize the RAM user to access Simple Log Service](https://help.aliyun.com/document_detail/47664.html).
  * *   The information that is required to query logs is obtained. The information includes the name of the project to which the logs belong and the region of the project. For more information, see [Manage a project](https://help.aliyun.com/document_detail/48984.html)
  * @param request  the request parameters of DeleteProjectPolicy  DeleteProjectPolicyRequest
  * @return DeleteProjectPolicyResponse
 */
async function deleteProjectPolicy(request: DeleteProjectPolicyRequest): DeleteProjectPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteProjectPolicy', 'DELETE', '/policy', 'none', false, 'json', request);
}

model DeleteS3IngestionRequest {
  project?: string(name='project', description='This parameter is required.', position='Host'),
  s3IngestionName: string(name='s3IngestionName', description='This parameter is required.', position='Path'),
}

model DeleteS3IngestionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of DeleteS3Ingestion  DeleteS3IngestionRequest
  * @return DeleteS3IngestionResponse
 */
async function deleteS3Ingestion(request: DeleteS3IngestionRequest): DeleteS3IngestionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteS3Ingestion', 'DELETE', '/s3ingestions/{s3IngestionName}', 'none', false, 'json', request);
}

model DeleteSavedSearchRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  savedsearchName: string(name='savedsearchName', description='The name of the saved search to be deleted.

This parameter is required.', example='test-savedsearch-name', position='Path'),
}

model DeleteSavedSearchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description ### Usage notes
  * * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * * An AccessKey pair is created and obtained. For more information, see [AccessKey pair](https://help.aliyun.com/document_detail/29009.html).
  * The AccessKey pair of an Alibaba Cloud account has permissions on all API operations. Using these credentials to perform operations in Simple Log Service is a high-risk operation. We recommend that you use a Resource Access Management (RAM) user to call API operations or perform routine O&#x26;M. To create a RAM user, log on to the RAM console. Make sure that the RAM user has the management permissions on Simple Log Service resources. For more information, see [Create a RAM user and authorize the RAM user to access Simple Log Service](https://help.aliyun.com/document_detail/47664.html).
  * * The information that is required to query logs is obtained. The information includes the name of the project to which the logs belong, the region of the project, and the name of the Logstore to which the logs belong. For more information, see [Manage a project](https://help.aliyun.com/document_detail/48984.html) and [Manage a Logstore](https://help.aliyun.com/document_detail/48990.html).
  * * After you delete a saved search, it cannot be restored. Proceed with caution.
  * ### Authentication resources
  * The following table describes the authorization information that is required for this operation. You can add the information to the Action element of a RAM policy statement to grant a RAM user or a RAM role the permissions to call this operation.
  * |Action|Resource|
  * |:---|:---|
  * |`log:DeleteSavedSearch`|`acs:log:{#regionId}:{#accountId}:project/{#ProjectName}/savedsearch/{#SavedSearchName}`|
  * @param request  the request parameters of DeleteSavedSearch  DeleteSavedSearchRequest
  * @return DeleteSavedSearchResponse
 */
async function deleteSavedSearch(request: DeleteSavedSearchRequest): DeleteSavedSearchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteSavedSearch', 'DELETE', '/savedsearches/{savedsearchName}', 'none', false, 'json', request);
}

model DeleteScheduledSQLRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  scheduledSQLName: string(name='scheduledSQLName', description='The unique name of the job. Make sure that the job exists.

This parameter is required.', example='sql-123456789-123456', position='Path'),
}

model DeleteScheduledSQLResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of DeleteScheduledSQL  DeleteScheduledSQLRequest
  * @return DeleteScheduledSQLResponse
 */
async function deleteScheduledSQL(request: DeleteScheduledSQLRequest): DeleteScheduledSQLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteScheduledSQL', 'DELETE', '/scheduledsqls/{scheduledSQLName}', 'none', false, 'json', request);
}

model DeleteStoreViewRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='example-project', position='Host'),
  name: string(name='name', description='The name of the dataset.

This parameter is required.', example='my_storeview', position='Path'),
}

model DeleteStoreViewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of DeleteStoreView  DeleteStoreViewRequest
  * @return DeleteStoreViewResponse
 */
async function deleteStoreView(request: DeleteStoreViewRequest): DeleteStoreViewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteStoreView', 'DELETE', '/storeviews/{name}', 'none', false, 'json', request);
}

model DescribeRegionsRequest {
  language?: string(name='language', description='The language of the localName parameter that is returned.

Valid values:

*   ja
*   en
*   zh', example='zh', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      dataRedundancyType?: [ string ](name='dataRedundancyType'),
      internetEndpoint?: string(name='internetEndpoint', description='The public endpoint of Simple Log Service.'),
      intranetEndpoint?: string(name='intranetEndpoint', description='The internal endpoint of Simple Log Service.'),
      localName?: string(name='localName', description='The name of the Simple Log Service region.'),
      region?: string(name='region', description='SLS region'),
    }
  ](name='regions'),
}

model DescribeRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRegions  DescribeRegionsRequest
  * @return DescribeRegionsResponse
 */
async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeRegions', 'GET', '/regions', 'json', false, 'json', request);
}

model DisableAlertRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  alertName: string(name='alertName', description='The ID of the alert rule.

This parameter is required.', example='alert-0123456789-123456', position='Path'),
}

model DisableAlertResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of DisableAlert  DisableAlertRequest
  * @return DisableAlertResponse
 */
async function disableAlert(request: DisableAlertRequest): DisableAlertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DisableAlert', 'PUT', '/alerts/{alertName}?action=disable', 'none', false, 'json', request);
}

model DisableScheduledSQLRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  scheduledSQLName: string(name='scheduledSQLName', description='The unique name of the job. Make sure that the job exists.

This parameter is required.', example='sql-123456789-123456', position='Path'),
}

model DisableScheduledSQLResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of DisableScheduledSQL  DisableScheduledSQLRequest
  * @return DisableScheduledSQLResponse
 */
async function disableScheduledSQL(request: DisableScheduledSQLRequest): DisableScheduledSQLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DisableScheduledSQL', 'PUT', '/scheduledsqls/{scheduledSQLName}?action=disable', 'none', false, 'json', request);
}

model EnableAlertRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  alertName: string(name='alertName', description='The ID of the alert rule.

This parameter is required.', example='alert-0123456789-123456', position='Path'),
}

model EnableAlertResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of EnableAlert  EnableAlertRequest
  * @return EnableAlertResponse
 */
async function enableAlert(request: EnableAlertRequest): EnableAlertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'EnableAlert', 'PUT', '/alerts/{alertName}?action=enable', 'none', false, 'json', request);
}

model EnableScheduledSQLRequest {
  project?: string(name='project', description='A short description of struct

This parameter is required.', example='ali-test-project', position='Host'),
  scheduledSQLName: string(name='scheduledSQLName', description='The unique name of the job. Make sure that the job exists.

This parameter is required.', example='sql-123456789-123456', position='Path'),
}

model EnableScheduledSQLResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of EnableScheduledSQL  EnableScheduledSQLRequest
  * @return EnableScheduledSQLResponse
 */
async function enableScheduledSQL(request: EnableScheduledSQLRequest): EnableScheduledSQLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'EnableScheduledSQL', 'PUT', '/scheduledsqls/{scheduledSQLName}?action=enable', 'none', false, 'json', request);
}

model GetAgentInstanceConfigRequest {
  configType: string(name='configType', description='This parameter is required.', position='Path'),
  attributes?: map[string]string(name='attributes', shrink='json', position='Query'),
}

model GetAgentInstanceConfigResponseBody = {
  attributes?: map[string]string(name='attributes'),
  config?: string(name='config'),
  configType?: string(name='configType'),
  createTime?: long(name='createTime'),
  grayConfigs?: [
    AgentInstanceConfigGrayConfigs
  ](name='grayConfigs'),
  lastModifyTime?: long(name='lastModifyTime'),
}

model GetAgentInstanceConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAgentInstanceConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAgentInstanceConfig  GetAgentInstanceConfigRequest
  * @return GetAgentInstanceConfigResponse
 */
async function getAgentInstanceConfig(request: GetAgentInstanceConfigRequest): GetAgentInstanceConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAgentInstanceConfig', 'GET', '/agentinstanceconfigs/{configType}', 'json', false, 'json', request);
}

model GetAlertRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  alertName: string(name='alertName', description='The ID of the alert rule.

This parameter is required.', example='alert-0123456789-123456', position='Path'),
}

model GetAlertResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Alert  
}

/**
  * @param request  the request parameters of GetAlert  GetAlertRequest
  * @return GetAlertResponse
 */
async function getAlert(request: GetAlertRequest): GetAlertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAlert', 'GET', '/alerts/{alertName}', 'json', false, 'json', request);
}

model GetAnnotationDataRequest {
  datasetId?: string(name='datasetId', description='The unique identifier of the dataset.', example='cb8cc4eb51a85e823471cdb368fae9be', position='Path'),
  annotationdataId?: string(name='annotationdataId', description='The unique identifier of the data.', example='2156d560fc7c01420542df92cd6365ds', position='Path'),
}

model GetAnnotationDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MLDataParam  
}

/**
  * @param request  the request parameters of GetAnnotationData  GetAnnotationDataRequest
  * @return GetAnnotationDataResponse
 */
async function getAnnotationData(request: GetAnnotationDataRequest): GetAnnotationDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAnnotationData', 'GET', '/ml/annotationdataset/{datasetId}/annotationdata/{annotationdataId}', 'json', false, 'json', request);
}

model GetAnnotationDataSetRequest {
  datasetId?: string(name='datasetId', description='The unique identifier of the dataset.', example='cb8cc4eb51a85e823471cdb368fae9be', position='Path'),
}

model GetAnnotationDataSetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MLDataSetParam  
}

/**
  * @param request  the request parameters of GetAnnotationDataSet  GetAnnotationDataSetRequest
  * @return GetAnnotationDataSetResponse
 */
async function getAnnotationDataSet(request: GetAnnotationDataSetRequest): GetAnnotationDataSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAnnotationDataSet', 'GET', '/ml/annotationdataset/{datasetId}', 'json', false, 'json', request);
}

model GetAnnotationLabelRequest {
  labelId?: string(name='labelId', description='The tag ID.', example='sls_builtin_4e0aba6d9664073513e9954fb57bd799', position='Path'),
}

model GetAnnotationLabelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MLLabelParam  
}

/**
  * @param request  the request parameters of GetAnnotationLabel  GetAnnotationLabelRequest
  * @return GetAnnotationLabelResponse
 */
async function getAnnotationLabel(request: GetAnnotationLabelRequest): GetAnnotationLabelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAnnotationLabel', 'GET', '/ml/annotationlabel/{labelId}', 'json', false, 'json', request);
}

model GetAppliedConfigsRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  machineGroup: string(name='machineGroup', description='The name of the machine group.

This parameter is required.', example='test-machine-group', position='Path'),
}

model GetAppliedConfigsResponseBody = {
  configs?: [ string ](name='configs', description='The names of the Logtail configurations.'),
  count?: int32(name='count', description='The number of Logtail configurations.', example='2'),
}

model GetAppliedConfigsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAppliedConfigsResponseBody(name='body'),
}

/**
  * @description Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * @param request  the request parameters of GetAppliedConfigs  GetAppliedConfigsRequest
  * @return GetAppliedConfigsResponse
 */
async function getAppliedConfigs(request: GetAppliedConfigsRequest): GetAppliedConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAppliedConfigs', 'GET', '/machinegroups/{machineGroup}/configs', 'json', false, 'json', request);
}

model GetAppliedMachineGroupsRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  configName: string(name='configName', description='The name of the Logtail configuration.

This parameter is required.', example='logtail-config-sample', position='Path'),
}

model GetAppliedMachineGroupsResponseBody = {
  count?: int32(name='count', description='The number of returned machine groups.', example='2'),
  machinegroups?: [ string ](name='machinegroups', description='The names of the returned machine groups.', example='[ "sample-group1","sample-group2" ]'),
}

model GetAppliedMachineGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAppliedMachineGroupsResponseBody(name='body'),
}

/**
  * @description Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * @param request  the request parameters of GetAppliedMachineGroups  GetAppliedMachineGroupsRequest
  * @return GetAppliedMachineGroupsResponse
 */
async function getAppliedMachineGroups(request: GetAppliedMachineGroupsRequest): GetAppliedMachineGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAppliedMachineGroups', 'GET', '/configs/{configName}/machinegroups', 'json', false, 'json', request);
}

model GetCheckPointRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='The name of the Logstore.

This parameter is required.', example='test-logstore', position='Path'),
  consumerGroup: string(name='consumerGroup', description='The name of the consumer group.

This parameter is required.', example='consumer-group-1', position='Path'),
  shard?: int32(name='shard', description='The shard ID.

*   If the specified shard does not exist, an empty list is returned.
*   If no shard ID is specified, the checkpoints of all shards are returned.', example='1', position='Query'),
}

model GetCheckPointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: [ 
    {
      shard?: int32(name='shard', description='The shard ID.', example='0'),
      checkpoint?: string(name='checkpoint', description='The value of the checkpoint.', example='MTUyNDE1NTM3OTM3MzkwODQ5Ng=='),
      updateTime?: long(name='updateTime', description='The time when the checkpoint was last updated. The value is a UNIX timestamp representing the number of seconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1524224984800922'),
      consumer?: string(name='consumer', description='The consumer at the checkpoint.', example='consumer_1'),
    }
  ](name='body'),
}

/**
  * @description Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * @param request  the request parameters of GetCheckPoint  GetCheckPointRequest
  * @return GetCheckPointResponse
 */
async function getCheckPoint(request: GetCheckPointRequest): GetCheckPointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetCheckPoint', 'GET', '/logstores/{logstore}/consumergroups/{consumerGroup}', 'json', false, 'json', request);
}

model GetCollectionPolicyRequest {
  policyName: string(name='policyName', description='This parameter is required.', example='your_log_policy', minLength=3, maxLength=63, position='Path'),
  dataCode?: string(name='dataCode', example='access_log', position='Query'),
  productCode?: string(name='productCode', example='oss', position='Query'),
}

model GetCollectionPolicyResponseBody = {
  collectionPolicy?: {
    centralizeConfig?: {
      destLogstore?: string(name='destLogstore', example='your-sls-logstore-in-beijing'),
      destProject?: string(name='destProject', example='your-sls-project-in-beijing'),
      destRegion?: string(name='destRegion', example='cn-beijing'),
      destTTL?: int32(name='destTTL', example='your-sls-logstore-ttl'),
    }(name='centralizeConfig'),
    centralizeEnabled?: boolean(name='centralizeEnabled', example='false'),
    dataCode?: string(name='dataCode', example='access_log'),
    dataConfig?: {
      dataProject?: string(name='dataProject', example='""'),
      dataRegion?: string(name='dataRegion', example='cn-beijing'),
    }(name='dataConfig'),
    enabled?: boolean(name='enabled', example='true'),
    internalPolicy?: boolean(name='internalPolicy', example='false'),
    policyConfig?: {
      instanceIds?: [ string ](name='instanceIds'),
      regions?: [ string ](name='regions'),
      resourceMode?: string(name='resourceMode', example='all'),
      resourceTags?: map[string]any(name='resourceTags', example='{"tag1":"value1","tag2":"value2"}'),
    }(name='policyConfig'),
    policyName?: string(name='policyName', example='your_log_policy'),
    policyUid?: string(name='policyUid', example='148***********50'),
    productCode?: string(name='productCode', example='oss'),
    resourceDirectory?: {
      accountGroupType?: string(name='accountGroupType', example='all,custom'),
      members?: [ string ](name='members'),
    }(name='resourceDirectory'),
  }(name='collectionPolicy'),
}

model GetCollectionPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCollectionPolicyResponseBody(name='body'),
}

/**
  * @description You must use the Simple Log Service endpoint for the China (Shanghai), Singapore, or Heyuan ACDR Auto region to call the operation.
  * @param request  the request parameters of GetCollectionPolicy  GetCollectionPolicyRequest
  * @return GetCollectionPolicyResponse
 */
async function getCollectionPolicy(request: GetCollectionPolicyRequest): GetCollectionPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetCollectionPolicy', 'GET', '/collectionpolicy/{policyName}', 'json', false, 'json', request);
}

model GetConfigRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  configName: string(name='configName', description='The name of the Logtail configuration.

This parameter is required.', example='logtail-config-sample', position='Path'),
}

model GetConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: LogtailConfig  
}

/**
  * @description ### [](#)Usage notes
  * *   Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * *   An AccessKey pair is created and obtained. For more information, see [AccessKey pair](https://help.aliyun.com/document_detail/29009.html).
  * The AccessKey pair of an Alibaba Cloud account has permissions on all API operations. Using these credentials to perform operations in Simple Log Service is a high-risk operation. We recommend that you use a RAM user to call API operations or perform routine O\\&M. To create a RAM user, log on to the RAM console. Make sure that the RAM user has the management permissions on Simple Log Service resources. For more information, see [Create a RAM user and authorize the RAM user to access Simple Log Service](https://help.aliyun.com/document_detail/47664.html).
  * *   The information that is required to query logs is obtained. The information includes the name of the project to which the logs belong and the region of the project. For more information, see [Manage a project](https://help.aliyun.com/document_detail/48984.html).
  * *   The name of the required Logtail configuration is obtained. For more information, see [ListConfig](https://help.aliyun.com/document_detail/29043.html).
  * @param request  the request parameters of GetConfig  GetConfigRequest
  * @return GetConfigResponse
 */
async function getConfig(request: GetConfigRequest): GetConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetConfig', 'GET', '/configs/{configName}', 'json', false, 'json', request);
}

model GetConsumeProcessorRequest {
  project?: string(name='project', description='This parameter is required.', position='Host'),
  processorName: string(name='processorName', description='The identifier of the consumer processor.

This parameter is required.', example='consume-processor-1', position='Path'),
}

model GetConsumeProcessorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConsumeProcessor  
}

/**
  * @param request  the request parameters of GetConsumeProcessor  GetConsumeProcessorRequest
  * @return GetConsumeProcessorResponse
 */
async function getConsumeProcessor(request: GetConsumeProcessorRequest): GetConsumeProcessorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetConsumeProcessor', 'GET', '/consumeprocessors/{processorName}', 'json', false, 'json', request);
}

model GetContextLogsRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='The name of the Logstore.

This parameter is required.', example='test-logstore', position='Path'),
  backLines: long(name='back_lines', description='The number of logs that you want to obtain and are generated before the generation time of the start log. Valid values: `(0,100]`.

This parameter is required.', example='10', position='Query'),
  forwardLines: long(name='forward_lines', description='The number of logs that you want to obtain and are generated after the generation time of the start log. Valid values: `(0,100]`.

This parameter is required.', example='10', position='Query'),
  packId: string(name='pack_id', description='The unique identifier of the log group to which the start log belongs.

This parameter is required.', example='85C897C740352DC6-808', position='Query'),
  packMeta: string(name='pack_meta', description='The unique context identifier of the start log in the log group.

This parameter is required.', example='2|MTY1NTcwNTUzODY5MTY0MDk1Mg==|3|0', position='Query'),
}

model GetContextLogsResponseBody = {
  backLines?: long(name='back_lines', description='The number of logs that are generated before the generation time of the start log.', example='100'),
  forwardLines?: long(name='forward_lines', description='The number of logs that are generated after the generation time of the start log.', example='100'),
  logs?: [  map[string]any ](name='logs', description='The logs that are returned.'),
  progress?: string(name='progress', description='Indicates whether the query and analysis results are complete. Valid values:

*   Complete: The query is successful, and the complete query and analysis results are returned.
*   Incomplete: The query is successful, but the query and analysis results are incomplete. To obtain the complete results, you must repeat the request.', example='Complete'),
  totalLines?: long(name='total_lines', description='The total number of logs that are returned. The logs include the start log that is specified in the request.', example='201'),
}

model GetContextLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetContextLogsResponseBody(name='body'),
}

/**
  * @description ### Usage notes
  * * You can specify a log as the start log. The time range of a contextual query is one day before and one day after the generation time of the start log.
  * * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * * An AccessKey pair is created and obtained. For more information, see [AccessKey pair](https://help.aliyun.com/document_detail/29009.html).
  * The AccessKey pair of an Alibaba Cloud account has permissions on all API operations. Using these credentials to perform operations in Simple Log Service is a high-risk operation. We recommend that you use a Resource Access Management (RAM) user to call API operations or perform routine O&#x26;M. To create a RAM user, log on to the RAM console. Make sure that the RAM user has the management permissions on Simple Log Service resources. For more information, see [Create a RAM user and authorize the RAM user to access Simple Log Service](https://help.aliyun.com/document_detail/47664.html).
  * * The information that is required to query logs is obtained. The information includes the name of the project to which the logs belong, the region of the project, and the name of the Logstore to which the logs belong. For more information, see [Manage a project](https://help.aliyun.com/document_detail/48984.html) and [Manage a Logstore](https://help.aliyun.com/document_detail/48990.html).
  * * Indexes are configured before you query logs. For more information, see [Create indexes](https://help.aliyun.com/document_detail/90732.html).
  * * The values of the pack_id and pack_meta fields are obtained before you query logs. The fields are internal fields, and you can obtain the values by using the debugging feature of your browser in the Simple Log Service console.
  * ### Authentication resources
  * The following table describes the authorization information that is required for this operation. You can add the information to the Action element of a RAM policy statement to grant a RAM user or a RAM role the permissions to call this operation.
  * |Action|Resource|
  * |:---|:---|
  * |`log:GetLogStoreContextLogs`|`acs:log:{#regionId}:{#accountId}:project/{#ProjectName}/logstore/{#LogstoreName}`|
  * @param request  the request parameters of GetContextLogs  GetContextLogsRequest
  * @return GetContextLogsResponse
 */
async function getContextLogs(request: GetContextLogsRequest): GetContextLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetContextLogs', 'GET', '/logstores/{logstore}?type=context_log', 'json', false, 'json', request);
}

model GetCursorRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='The name of the Logstore.

This parameter is required.', example='sls-test-logstore', position='Path'),
  shardId: int32(name='shardId', description='The shard ID.

This parameter is required.', example='1', position='Path'),
  from: string(name='from', description='The point in time that you want to use to query a cursor. Set the value to a UNIX timestamp or a string such as `begin` and `end`.

This parameter is required.', example='begin', position='Query'),
}

model GetCursorResponseBody = {
  cursor?: string(name='cursor', description='The value of the cursor.', example='MTQ0NzI5OTYwNjg5NjYzMjM1Ng=='),
}

model GetCursorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCursorResponseBody(name='body'),
}

/**
  * @description ### Usage notes
  * *   Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * *   The following content describes the relationships among a cursor, project, Logstore, and shard:
  *     *   A project can have multiple Logstores.
  *     *   A Logstore can have multiple shards.
  *     *   You can use a cursor to obtain a log in a shard.
  * @param request  the request parameters of GetCursor  GetCursorRequest
  * @return GetCursorResponse
 */
async function getCursor(request: GetCursorRequest): GetCursorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetCursor', 'GET', '/logstores/{logstore}/shards/{shardId}?type=cursor', 'json', false, 'json', request);
}

model GetCursorTimeRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='The name of the Logstore.

This parameter is required.', example='test-logstore', position='Path'),
  shardId: int32(name='shardId', description='The shard ID.

This parameter is required.', example='0', position='Path'),
  cursor: string(name='cursor', description='The cursor.

This parameter is required.', example='MTU0NzQ3MDY4MjM3NjUxMzQ0Ng==', position='Query'),
}

model GetCursorTimeResponseBody = {
  cursorTime?: string(name='cursor_time', description='The server time that is queried based on the cursor. The value is a UNIX timestamp representing the number of seconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1554260243'),
}

model GetCursorTimeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCursorTimeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetCursorTime  GetCursorTimeRequest
  * @return GetCursorTimeResponse
 */
async function getCursorTime(request: GetCursorTimeRequest): GetCursorTimeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetCursorTime', 'GET', '/logstores/{logstore}/shards/{shardId}?type=cursor_time', 'json', false, 'json', request);
}

model GetDashboardRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  dashboardName: string(name='dashboardName', description='The name of the dashboard.

This parameter is required.', example='dashboard-1609294922657-434834', position='Path'),
}

model GetDashboardResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Dashboard  
}

/**
  * @description ### [](#)Usage notes
  * *   Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * *   An AccessKey pair is created and obtained. For more information, see [AccessKey pair](https://help.aliyun.com/document_detail/29009.html).
  * The AccessKey pair of an Alibaba Cloud account has permissions on all API operations. Using these credentials to perform operations in Simple Log Service is a high-risk operation. We recommend that you use a RAM user to call API operations or perform routine O\\&M. To create a RAM user, log on to the RAM console. Make sure that the RAM user has the management permissions on Simple Log Service resources. For more information, see [Create a RAM user and authorize the RAM user to access Simple Log Service](https://help.aliyun.com/document_detail/47664.html).
  * *   The information that is required to query logs is obtained. The information includes the name of the project to which the logs belong and the region of the project. For more information, see [Manage a project](https://help.aliyun.com/document_detail/48984.html).
  * @param request  the request parameters of GetDashboard  GetDashboardRequest
  * @return GetDashboardResponse
 */
async function getDashboard(request: GetDashboardRequest): GetDashboardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDashboard', 'GET', '/dashboards/{dashboardName}', 'json', false, 'json', request);
}

model GetDownloadJobRequest {
  downloadJobName: string(name='downloadJobName', description='代表资源名称的资源属性字段

This parameter is required.', example='download-123', position='Path'),
  project?: string(name='project', description='This parameter is required.', example='ali-test-project', position='Host'),
}

model GetDownloadJobResponseBody = {
  configuration?: {
    allowInComplete?: boolean(name='allowInComplete', example='true'),
    fromTime?: long(name='fromTime', description='起点时间戳（精确到秒）', example='1722409860'),
    logstore?: string(name='logstore', description='源logstore', example='ali-test-logstore'),
    powerSql?: boolean(name='powerSql', description='是否启用powerSql', example='false'),
    query?: string(name='query', description='查询语句', example='* | select *'),
    sink?: {
      bucket?: string(name='bucket', description='对象存储桶', example='ali-test-oss-bucket'),
      compressionType?: string(name='compressionType', description='压缩格式', example='none'),
      contentType?: string(name='contentType', description='下载文件格式', example='csv'),
      prefix?: string(name='prefix', example='download/'),
      roleArn?: string(name='roleArn', description='下载使用roleArn', example='acs:ram::0123456789:role/aliyunlogdefaultrole'),
      type?: string(name='type', example='AliyunOSS'),
    }(name='sink', description='导出配置'),
    toTime?: long(name='toTime', description='结束时间戳（精确到秒）', example='1722411060'),
  }(name='configuration', description='下载配置'),
  createTime?: string(name='createTime', description='代表创建时间的资源属性字段', example='1722411060'),
  description?: string(name='description', description='任务描述', example='a download job'),
  displayName?: string(name='displayName', description='任务显示名称', example='download-123456'),
  executionDetails?: {
    checkSum?: string(name='checkSum', example='EXSFGSDASDASDG123ASD'),
    errorMessage?: string(name='errorMessage', description='下载错误信息', example='timeout'),
    executeTime?: long(name='executeTime', description='下载执行时间', example='123'),
    filePath?: string(name='filePath', description='下载结果链接', example='https://xxx.csv.zst?xxx'),
    fileSize?: long(name='fileSize', description='下载文件大小', example='123456'),
    logCount?: long(name='logCount', description='下载日志条数', example='123'),
    notice?: string(name='notice'),
    progress?: long(name='progress', description='下载进度', example='100'),
  }(name='executionDetails', description='任务执行细节'),
  name?: string(name='name', description='代表资源名称的资源属性字段', example='download-123'),
  status?: string(name='status', description='The status of the log download task.', example='running'),
}

model GetDownloadJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDownloadJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDownloadJob  GetDownloadJobRequest
  * @return GetDownloadJobResponse
 */
async function getDownloadJob(request: GetDownloadJobRequest): GetDownloadJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDownloadJob', 'GET', '/downloadjobs/{downloadJobName}', 'json', false, 'json', request);
}

model GetETLRequest {
  project?: string(name='project', example='ali-test-project', position='Host'),
  etlName?: string(name='etlName', example='etl-123456', position='Path'),
}

model GetETLResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ETL  
}

/**
  * @param request  the request parameters of GetETL  GetETLRequest
  * @return GetETLResponse
 */
async function getETL(request: GetETLRequest): GetETLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetETL', 'GET', '/etls/{etlName}', 'json', false, 'json', request);
}

model GetHistogramsRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='The name of the Logstore.

This parameter is required.', example='test-logstore', position='Path'),
  from: long(name='from', description='The start time of the subinterval. The value is a UNIX timestamp representing the number of seconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.

This parameter is required.', example='1409529600', position='Query'),
  query?: string(name='query', description='The search statement. Only search statements are supported. Analytic statements are not supported. For more information about the syntax of search statements, see [Log search overview](https://help.aliyun.com/document_detail/43772.html).', example='with_pack_meta', position='Query'),
  to: long(name='to', description='The end time of the subinterval. The value is a UNIX timestamp representing the number of seconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.

This parameter is required.', example='1409569200', position='Query'),
  topic?: string(name='topic', description='The topic of the logs.', example='topic', position='Query'),
}

model GetHistogramsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: [ 
    {
      from?: long(name='from', description='The start time of the subinterval. The value is a UNIX timestamp representing the number of seconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.

The time range that is specified in this operation is a left-closed, right-open interval. The interval includes the start time specified by the from parameter, but does not include the end time specified by the to parameter. If you specify the same value for the from and to parameters, the interval is invalid, and an error message is returned.', example='1409529600'),
      to?: long(name='to', description='The end time of the subinterval. The value is a UNIX timestamp representing the number of seconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.

The time range that is specified in this operation is a left-closed, right-open interval. The interval includes the start time specified by the from parameter, but does not include the end time specified by the to parameter. If you specify the same value for the from and to parameters, the interval is invalid, and an error message is returned.', example='1409569200'),
      count?: long(name='count', description='The number of logs that are generated within the subinterval.', example='2'),
      progress?: string(name='progress', description='Indicates whether the query and analysis results in the subinterval is complete. Valid values:

Complete: The query is successful, and the complete query and analysis results are returned.

Incomplete: The query is successful, but the query and analysis results are incomplete. To obtain the complete results, you must repeat the request.', example='Complete'),
    }
  ](name='body'),
}

/**
  * @description ### Usage notes
  * *   Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * *   The time range is evenly divided into subintervals in the responses. If the time range that is specified in the request remains unchanged, the subintervals in the responses also remain unchanged.
  * *   If the number of logs in a Logstore significantly changes, Simple Log Service cannot predict the number of times that you must call this operation to obtain the complete result. In this case, you must check the value of the progress parameter in the response of each request and determine whether to call this operation one more time to obtain the complete result. Each time you call this operation, the same number of charge units (CUs) are consumed.
  * *   After a log is written to a Logstore, you can call the GetHistograms or GetLogs operation to query the log after a short latency. The latency of a query varies based on the type of the log. Simple Log Service classifies logs into the following types based on the log time:
  *     *   Real-time data: The difference between the time record in a log and the current time on Simple Log Service is within the interval (-180 seconds,900 seconds]. For example, if a log was generated at 12:03:00, September 25, 2014 (UTC) and Simple Log Service received the log at 12:05:00, September 25, 2014 (UTC), Simple Log Service processes the log as real-time data. After real-time data is written to a Logstore, the data can be queried with a maximum latency of 3 seconds.
  *     *   Historical data: The difference between the time record in a log and the current time on Simple Log Service is within the interval [-604,800 seconds,-180 seconds). For example, if a log was generated at 12:00:00, September 25, 2014 (UTC) and Simple Log Service received the log at 12:05:00, September 25, 2014 (UTC), Simple Log Service processes the log as historical data. This type of log is usually generated in data backfill scenarios.
  *     After real-time data is written to a Logstore, the data can be queried with a maximum latency of 3 seconds. For 99.9% of queries, the latency is no more than 1 second.
  * > Simple Log Service calculates the difference between the log time that is specified by the __time__ field and the receiving time that is specified by the __tag__:__receive_time__ field for each log. The receiving time indicates the time at which Simple Log Service receives the log. If the difference is within the interval (-180 seconds,900 seconds], Simple Log Service processes the log as real-time data. If the difference is within the interval [-604,800 seconds,-180 seconds), Simple Log Service processes the log as historical data.
  * *   Simple Log Service provides examples on how to call the GetHistograms operation by using Simple Log Service SDK for Java. For more information, see [Use GetHistograms to query the distribution of logs](https://help.aliyun.com/document_detail/462234.html).
  * @param request  the request parameters of GetHistograms  GetHistogramsRequest
  * @return GetHistogramsResponse
 */
async function getHistograms(request: GetHistogramsRequest): GetHistogramsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetHistograms', 'GET', '/logstores/{logstore}/index?type=histogram', 'json', false, 'json', request);
}

model GetIndexRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='The name of the Logstore.

This parameter is required.', example='test-logstore', position='Path'),
}

model GetIndexResponseBody = {
  indexMode?: string(name='index_mode', description='The type of the index.', example='v2'),
  keys?: map[string]IndexKey(name='keys', description='The configurations of field indexes. A field index is in the key-value format in which the key specifies the name of the field and the value specifies the index configuration of the field.'),
  lastModifyTime?: long(name='lastModifyTime', description='The time when the index configurations were last updated. The value is a UNIX timestamp representing the number of seconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1524155379'),
  line?: {
    caseSensitive?: boolean(name='caseSensitive', description='Indicates whether case sensitivity is enabled. Valid values:

*   true
*   false', example='false'),
    chn?: boolean(name='chn', description='Indicates whether Chinese characters are included. Valid values:

*   true
*   false', example='false'),
    excludeKeys?: [ string ](name='exclude_keys', description='The excluded fields.'),
    includeKeys?: [ string ](name='include_keys', description='The included fields.'),
    token: [ string ](name='token', description='The delimiters.

This parameter is required.'),
  }(name='line', description='The configurations of full-text indexes.'),
  logReduce?: boolean(name='log_reduce', description='Indicates whether the log clustering feature is enabled.', example='false'),
  logReduceBlackList?: [ string ](name='log_reduce_black_list', description='The fields in the blacklist that are used to cluster logs. This parameter is valid only if the log clustering feature is enabled.'),
  logReduceWhiteList?: [ string ](name='log_reduce_white_list', description='The fields in the whitelist that are used to cluster logs. This parameter is valid only if the log clustering feature is enabled.'),
  maxTextLen?: int32(name='max_text_len', description='The maximum length of a field value that can be retained. Default value: 2048. Unit: bytes. The default value is equal to 2 KB. You can change the value of the max_text_len parameter. Valid values: 64 to 16384. Unit: bytes.', example='2048'),
  storage?: string(name='storage', description='The storage type. The value is fixed as pg.', example='pg'),
  ttl: int32(name='ttl', description='The lifecycle of the index file. Valid values: 7, 30, and 90. Unit: day.

This parameter is required.', example='30'),
}

model GetIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetIndexResponseBody(name='body'),
}

/**
  * @description ### Usage notes
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * @param request  the request parameters of GetIndex  GetIndexRequest
  * @return GetIndexResponse
 */
async function getIndex(request: GetIndexRequest): GetIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetIndex', 'GET', '/logstores/{logstore}/index', 'json', false, 'json', request);
}

model GetIngestProcessorRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  processorName: string(name='processorName', description='The identifier of the ingest processor.

This parameter is required.', example='parse-nginx-log', position='Path'),
}

model GetIngestProcessorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IngestProcessor  
}

/**
  * @param request  the request parameters of GetIngestProcessor  GetIngestProcessorRequest
  * @return GetIngestProcessorResponse
 */
async function getIngestProcessor(request: GetIngestProcessorRequest): GetIngestProcessorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetIngestProcessor', 'GET', '/ingestprocessors/{processorName}', 'json', false, 'json', request);
}

model GetLogStoreRequest {
  logstore: string(name='logstore', description='The name of the Logstore.

This parameter is required.', example='ali-test-logstore', position='Path'),
  project?: string(name='project', description='This parameter is required.', position='Host'),
}

model GetLogStoreResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Logstore  
}

/**
  * @description ### Usage notes
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * @param request  the request parameters of GetLogStore  GetLogStoreRequest
  * @return GetLogStoreResponse
 */
async function getLogStore(request: GetLogStoreRequest): GetLogStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetLogStore', 'GET', '/logstores/{logstore}', 'json', false, 'json', request);
}

model GetLogStoreMeteringModeRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='projectName', position='Host'),
  logstore: string(name='logstore', description='The name of the Logstore.

This parameter is required.', example='logstoreName', position='Path'),
}

model GetLogStoreMeteringModeResponseBody = {
  meteringMode?: string(name='meteringMode', description='The billing mode. Default value: ChargeByFunction. Valid values: ChargeByFunction and ChargeByDataIngest.', example='ChargeByFunction'),
}

model GetLogStoreMeteringModeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLogStoreMeteringModeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetLogStoreMeteringMode  GetLogStoreMeteringModeRequest
  * @return GetLogStoreMeteringModeResponse
 */
async function getLogStoreMeteringMode(request: GetLogStoreMeteringModeRequest): GetLogStoreMeteringModeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetLogStoreMeteringMode', 'GET', '/logstores/{logstore}/meteringmode', 'json', false, 'json', request);
}

model GetLoggingRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
}

model GetLoggingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Logging  
}

/**
  * @description Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * @param request  the request parameters of GetLogging  GetLoggingRequest
  * @return GetLoggingResponse
 */
async function getLogging(request: GetLoggingRequest): GetLoggingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetLogging', 'GET', '/logging', 'json', false, 'json', request);
}

model GetLogsRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='The Logstore whose logs you want to query.

This parameter is required.', example='example-logstore', position='Path'),
  from: int32(name='from', description='The beginning of the time range to query. The value is the log time that is specified when log data is written.

*   The time range that is specified in this operation is a left-closed, right-open interval. The interval includes the start time specified by the **from** parameter, but does not include the end time specified by the **to** parameter. If you specify the same value for the **from** and **to** parameters, the interval is invalid, and an error message is returned.
*   The value is a UNIX timestamp representing the number of seconds that have elapsed since January 1, 1970, 00:00:00 UTC.

> To ensure that full data can be queried, specify a query time range that is accurate to the minute. If you also specify a time range in an analytic statement, Simple Log Service uses the time range specified in the analytic statement for query and analysis.

If you want to specify a time range that is accurate to the second in your analytic statement, you must use the from_unixtime or to_unixtime function to convert the time format. For more information about the functions, see [from_unixtime function](https://help.aliyun.com/document_detail/63451.html) and [to_unixtime function](https://help.aliyun.com/document_detail/63451.html). Examples:

*   `* | SELECT * FROM log WHERE from_unixtime(__time__) > from_unixtime(1664186624) AND from_unixtime(__time__) < now()`
*   `* | SELECT * FROM log WHERE __time__ > to_unixtime(date_parse(\\"2022-10-19 15:46:05\\", \\"%Y-%m-%d %H:%i:%s\\")) AND __time__ < to_unixtime(now())`

This parameter is required.', example='1627268185', position='Query'),
  line?: long(name='line', description='The maximum number of logs to return for the request. This parameter takes effect only when the query parameter is set to a search statement. Minimum value: 0. Maximum value: 100. Default value: 100. For more information, see [Perform paged queries](https://help.aliyun.com/document_detail/89994.html).', example='100', minimum=0, maximum=100, position='Query'),
  offset?: long(name='offset', description='The line from which the query starts. This parameter takes effect only when the query parameter is set to a search statement. Default value: 0. For more information, see [Perform paged queries](https://help.aliyun.com/document_detail/89994.html).', example='0', position='Query'),
  powerSql?: boolean(name='powerSql', description='Specifies whether to enable the Dedicated SQL feature. For more information, see [Enable Dedicated SQL](https://help.aliyun.com/document_detail/223777.html). Valid values:

*   true: enables the Dedicated SQL feature.
*   false (default): enables the Standard SQL feature.

You can use the powerSql or **query** parameter to configure Dedicated SQL.', example='false', position='Query'),
  query?: string(name='query', description='The search statement or the query statement. For more information, see [Log search overview](https://help.aliyun.com/document_detail/43772.html) and [Log analysis overview](https://help.aliyun.com/document_detail/53608.html). If you add `set session parallel_sql=true;` to the analytic statement in the query parameter, Dedicated SQL is used. For example, you can set the query parameter to `* | set session parallel_sql=true; select count(*) as pv`. For more information about common errors that may occur during log query and analysis, see [How do I resolve common errors that occur when I query and analyze logs?](https://help.aliyun.com/document_detail/61628.html)

> If you specify an analytic statement in the value of the query parameter, the line and offset parameters do not take effect. In this case, we recommend that you set the line and offset parameters to 0 and use the LIMIT clause to limit the number of logs to return on each page. For more information, see [Paged query](https://help.aliyun.com/document_detail/89994.html).', example='status: 401 | SELECT remote_addr,COUNT(*) as pv GROUP by remote_addr ORDER by pv desc limit 5', position='Query'),
  reverse?: boolean(name='reverse', description='Specifies whether to return logs in reverse chronological order of log timestamps. The log timestamps are accurate to the minute. Valid values:

*   true: returns logs in reverse chronological order of log timestamps.
*   false (default): returns logs in chronological order of log timestamps.

> 

*   The reverse parameter takes effect only when the query parameter is set to a search statement. The reverse parameter specifies the method used to sort returned logs.
*   If the query parameter is set to a query statement, the reverse parameter does not take effect. The method used to sort returned logs is specified by the ORDER BY clause in the analytic statement. If you use the keyword asc in the ORDER BY clause, the logs are sorted in chronological order. If you use the keyword desc in the ORDER BY clause, the logs are sorted in reverse chronological order. By default, asc is used in the ORDER BY clause.', example='false', position='Query'),
  to: int32(name='to', description='The end of the time range to query. The value is the log time that is specified when log data is written.

*   The time range that is specified in this operation is a left-closed, right-open interval. The interval includes the start time specified by the **from** parameter, but does not include the end time specified by the **to** parameter. If you specify the same value for the **from** and **to** parameters, the interval is invalid, and an error message is returned.
*   The value is a UNIX timestamp representing the number of seconds that have elapsed since January 1, 1970, 00:00:00 UTC.

> To ensure that full data can be queried, specify a query time range that is accurate to the minute. If you also specify a time range in an analytic statement, Simple Log Service uses the time range specified in the analytic statement for query and analysis.

If you want to specify a time range that is accurate to the second in your analytic statement, you must use the from_unixtime or to_unixtime function to convert the time format. For more information about the functions, see [from_unixtime function](https://help.aliyun.com/document_detail/63451.html) and [to_unixtime function](https://help.aliyun.com/document_detail/63451.html). Examples:

*   `* | SELECT * FROM log WHERE from_unixtime(__time__) > from_unixtime(1664186624) AND from_unixtime(__time__) < now()`
*   `* | SELECT * FROM log WHERE __time__ > to_unixtime(date_parse(\\"2022-10-19 15:46:05\\", \\"%Y-%m-%d %H:%i:%s\\")) AND __time__ < to_unixtime(now())`

This parameter is required.', example='1627269085', position='Query'),
  topic?: string(name='topic', description='The topic of the logs. The default value is an empty string. For more information, see [Topic](https://help.aliyun.com/document_detail/48881.html).', example='topic', position='Query'),
}

model GetLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: [  map[string]any ](name='body'),
}

/**
  * @description ### Usage notes
  * **Note** Simple Log Service allows you to create a Scheduled SQL job. For more information, see [Create a scheduled SQL job](https://help.aliyun.com/document_detail/286457.html).
  * * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * * An AccessKey pair is created and obtained. For more information, see [AccessKey pair](https://help.aliyun.com/document_detail/29009.html).
  * The AccessKey pair of an Alibaba Cloud account has permissions on all API operations. Using these credentials to perform operations in Simple Log Service is a high-risk operation. We recommend that you use a Resource Access Management (RAM) user to call API operations or perform routine O&#x26;M. To create a RAM user, log on to the RAM console. Make sure that the RAM user has the management permissions on Simple Log Service resources. For more information, see [Create a RAM user and authorize the RAM user to access Simple Log Service](https://help.aliyun.com/document_detail/47664.html).
  * * The information that is required to query logs is obtained. The information includes the name of the project to which the logs belong, the region of the project, and the name of the Logstore to which the logs belong. For more information, see [Manage a project](https://help.aliyun.com/document_detail/48984.html) and [Manage a Logstore](https://help.aliyun.com/document_detail/48990.html).
  * * Limits are imposed when you use Simple Log Service to query logs. We recommend that you specify query statements and query time ranges based on the limits. For more information, see [Log search overview](https://help.aliyun.com/document_detail/43772.html) and [Log analysis overview](https://help.aliyun.com/document_detail/53608.html).
  * * Indexes are configured before you query logs. For more information, see [Create indexes](https://help.aliyun.com/document_detail/90732.html).
  * * If the number of logs in a Logstore significantly changes, Simple Log Service cannot predict the number of times that you must call this operation to obtain the complete results. In this case, you must check the value of the x-log-progress parameter in the response of each request and determine whether to call this operation one more time to obtain the complete results. Each time you call this operation, the same number of charge units (CUs) are consumed.
  * * After a log is written to a Logstore, you can call the GetHistograms or the GetLogs operation to query the log. The latency of the query varies based on the type of the log. Simple Log Service classifies logs into the following types based on log timestamps:
  *   * Real-time data: The difference between the time record in a log of this type and the current time on Simple Log Service is within the interval (-180 seconds,900 seconds\\]. For example, if a log was generated at 12:03:00, September 25, 2014 (UTC) and Simple Log Service received the log at 12:05:00, September 25, 2014 (UTC), Simple Log Service processes the log as real-time data. This type of log is usually generated in common scenarios.
  *   * Historical data: The difference between the time record in a log of this type and the current time on Simple Log Service is within the interval [-604,800 seconds,-180 seconds). For example, if a log was generated at 12:00:00, September 25, 2014 (UTC) and Simple Log Service received the log at 12:05:00, September 25, 2014 (UTC), Simple Log Service processes the log as historical data. This type of log is usually generated in data backfill scenarios. After real-time data is written to a Logstore, the data can be queried with an approximate latency of 3 seconds.
  * **Note** Simple Log Service calculates the difference between the log time that is specified by the __time__ field and the receiving time that is specified by the __tag__:**receive_time** field for each log. The receiving time indicates when Simple Log Service receives the log. If the difference is within the interval (-180 seconds,900 seconds\\], Simple Log Service processes the log as real-time data. If the difference is within the interval [-604,800 seconds,-180 seconds), Simple Log Service processes the log as historical data.
  * * Simple Log Service provides examples on how to call the GetLogs operation by using Simple Log Service SDK for Java and Simple Log Service SDK for Python. For more information, see [Examples of calling the GetLogs operation by using Simple Log Service SDK for Java](https://help.aliyun.com/document_detail/407683.html) and [Examples of calling the GetLogs operation by using Simple Log Service SDK for Python](https://help.aliyun.com/document_detail/407684.html).
  * ### Authentication resources
  * The following table describes the authorization information that is required for this operation. You can add the information to the Action element of a RAM policy statement to grant a RAM user or a RAM role the permissions to call this operation.
  * |Action|Resource|
  * |:---|:---|
  * |`log:GetLogStoreLogs`|`acs:log:{#regionId}:{#accountId}:project/{#ProjectName}/logstore/{#LogstoreName}`|
  * @param request  the request parameters of GetLogs  GetLogsRequest
  * @return GetLogsResponse
 */
async function getLogs(request: GetLogsRequest): GetLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetLogs', 'GET', '/logstores/{logstore}?type=log', 'json', false, 'json', request);
}

model GetLogsV2Request {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='The name of the Logstore.

This parameter is required.', example='test-logstore', position='Path'),
  acceptEncoding: string(name='Accept-Encoding', description='The compression format.

*   For Java, Python, and Go, only the lz4 and gzip algorithms are supported for decompression.
*   For PHP, JavaScript, and C#, only the gzip algorithm is supported for decompression.

This parameter is required.', example='lz4', position='Header'),
  forward?: boolean(name='forward', description='Specifies whether to page forward or backward for the scan-based query or phrase search.', example='false', position='Body'),
  from: int32(name='from', description='The beginning of the time range to query. The value is the log time that is specified when log data is written.

The time range that is specified in this operation is a left-closed, right-open interval. The interval includes the start time specified by the from parameter, but does not include the end time specified by the to parameter. If you specify the same value for the from and to parameters, the interval is invalid, and an error message is returned. The value is a timestamp that follows the UNIX time format. It is the number of seconds that have elapsed since January 1, 1970, 00:00:00 UTC.

This parameter is required.', example='1627268185', position='Body'),
  highlight?: boolean(name='highlight', description='Specifies whether to highlight the returned result.', example='false', position='Body'),
  line?: long(name='line', description='The maximum number of logs to return for the request. This parameter takes effect only when the query parameter is set to a search statement. Valid values: 0 to 100. Default value: 100.', example='100', minimum=0, maximum=100, position='Body'),
  offset?: long(name='offset', description='The line from which the query starts. This parameter takes effect only when the query parameter is set to a search statement. Default value: 0.', example='0', position='Body'),
  powerSql?: boolean(name='powerSql', description='Specifies whether to enable the SQL enhancement feature. By default, the feature is disabled.', example='false', position='Body'),
  query?: string(name='query', description='The search statement or query statement. For more information, see the "Log search overview" and "Log analysis overview" topics.

If you add set session parallel_sql=true; to the analytic statement in the query parameter, Dedicated SQL is used. Example: \\* | set session parallel_sql=true; select count(\\*) as pv.

Note: If you specify an analytic statement in the query parameter, the line and offset parameters do not take effect in this operation. In this case, we recommend that you set the line and offset parameters to 0 and use the LIMIT clause to specify the number of logs to return on each page. For more information, see the "Perform paged queries" topic.', example='status: 401 | SELECT remote_addr,COUNT(*) as pv GROUP by remote_addr ORDER by pv desc limit 5', position='Body'),
  reverse?: boolean(name='reverse', description='Specifies whether to return logs in reverse chronological order of log timestamps. The log timestamps are accurate to minutes. Valid values:

true: Logs are returned in reverse chronological order of log timestamps. false (default): Logs are returned in chronological order of log timestamps. Note: The reverse parameter takes effect only when the query parameter is set to a search statement. The reverse parameter specifies the method used to sort returned logs. If the query parameter is set to a query statement, the reverse parameter does not take effect. The method used to sort returned logs is specified by the ORDER BY clause in the analytic statement. If you use the keyword asc in the ORDER BY clause, the logs are sorted in chronological order. If you use the keyword desc in the ORDER BY clause, the logs are sorted in reverse chronological order. By default, asc is used in the ORDER BY clause.', example='false', position='Body'),
  session?: string(name='session', description='The parameter that is used to query data.', example='mode=scan', position='Body'),
  to: int32(name='to', description='The end of the time range to query. The value is the log time that is specified when log data is written.

The time range that is specified in this operation is a left-closed, right-open interval. The interval includes the start time specified by the from parameter, but does not include the end time specified by the to parameter. If you specify the same value for the from and to parameters, the interval is invalid, and an error message is returned. The value is a timestamp that follows the UNIX time format. It is the number of seconds that have elapsed since January 1, 1970, 00:00:00 UTC.

This parameter is required.', example='1627268185', position='Body'),
  topic?: string(name='topic', description='The topic of the logs. Default value: double quotation marks ("").', example='""', position='Body'),
}

model GetLogsV2ResponseBody = {
  data?: [ map[string]string ](name='data', description='The returned result.'),
  meta?: {
    aggQuery?: string(name='aggQuery', description='The SQL statement after | in the query statement.', example='select *'),
    columnTypes?: [ string ](name='columnTypes'),
    count?: int32(name='count', description='The number of rows that are returned.', example='1'),
    cpuCores?: int32(name='cpuCores', example='3'),
    cpuSec?: double(name='cpuSec', example='0.002'),
    elapsedMillisecond?: long(name='elapsedMillisecond', description='The amount of time that is consumed by the request. Unit: milliseconds.', example='5'),
    hasSQL?: boolean(name='hasSQL', description='Indicates whether the query is an SQL query.', example='false'),
    highlights?: [[
      LogContent
    ]    ](name='highlights'),
    isAccurate?: boolean(name='isAccurate', description='Indicates whether the returned result is accurate to seconds.', example='true'),
    keys?: [ string ](name='keys', description='All keys in the query result.'),
    limited?: int32(name='limited', example='100'),
    mode?: int32(name='mode', example='0'),
    phraseQueryInfo?: {
      beginOffset?: long(name='beginOffset', example='0'),
      endOffset?: long(name='endOffset', example='0'),
      endTime?: long(name='endTime', example='1'),
      scanAll?: boolean(name='scanAll', example='true'),
    }(name='phraseQueryInfo'),
    processedBytes?: long(name='processedBytes', description='The number of logs that are processed in the request.', example='10000'),
    processedRows?: long(name='processedRows', description='The number of rows that are processed in the query.', example='10000'),
    progress?: string(name='progress', description='Indicates whether the query result is complete. Valid values:

*   Complete: The query was successful, and the complete result is returned.
*   Incomplete: The query was successful, but the query result is incomplete. To obtain the complete result, you must call the operation again.', example='Complete'),
    scanBytes?: long(name='scanBytes', example='1024'),
    telementryType?: string(name='telementryType', description='The type of observable data.', example='None'),
    terms?: [  map[string]any ](name='terms', description='All terms in the query statement.'),
    whereQuery?: string(name='whereQuery', description='The part before | in the query statement.', example='*'),
  }(name='meta', description='The metadata of the returned data.'),
}

model GetLogsV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLogsV2ResponseBody(name='body'),
}

/**
  * @description * You can call this operation by using Simple Log Service SDK for Go, Java, or Python. You can call this operation by using Alibaba Cloud SDK for all programming languages.
  * * When you call this operation, take note of the compression method that you use. The supported compression algorithms vary based on the programming language. For more information, see the description of the Accept-Encoding parameter in this topic.
  * * For more information, see [GetLogs](https://help.aliyun.com/document_detail/2771313.html).
  * ### Authentication resources
  * The following table describes the authorization information that is required for this operation. You can add the information to the Action element of a Resource Access Management (RAM) policy statement to grant a RAM user or a RAM role the permissions to call this operation.
  * |Action|Resource|
  * |:---|:---|
  * |`log:GetLogStoreLogs`|`acs:log:{#regionId}:{#accountId}:project/{#ProjectName}`|
  * @param request  the request parameters of GetLogsV2  GetLogsV2Request
  * @return GetLogsV2Response
 */
async function getLogsV2(request: GetLogsV2Request): GetLogsV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetLogsV2', 'POST', '/logstores/{logstore}/logs', 'json', false, 'json', request);
}

model GetLogtailPipelineConfigRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='test-project', position='Host'),
  configName: string(name='configName', description='The name of the Logtail pipeline configuration.

This parameter is required.', example='test-config', position='Path'),
}

model GetLogtailPipelineConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: LogtailPipelineConfig  
}

/**
  * @description The UK (London) region is supported. Supported regions are constantly updated.
  * @param request  the request parameters of GetLogtailPipelineConfig  GetLogtailPipelineConfigRequest
  * @return GetLogtailPipelineConfigResponse
 */
async function getLogtailPipelineConfig(request: GetLogtailPipelineConfigRequest): GetLogtailPipelineConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetLogtailPipelineConfig', 'GET', '/pipelineconfigs/{configName}', 'json', false, 'json', request);
}

model GetMLServiceResultsRequest {
  serviceName?: string(name='serviceName', description='The name of the service.

Valid values:

*   sls_builtin_service_trace_rca: service name for high-latency trace analysis.
*   sls_builtin_service_log_struct: service name for NER tasks on logs.
*   sls_builtin_service_metric_anomaly: service name for single-dimension anomaly detection on time series.', example='sls_builtin_service_log_struct', position='Path'),
  allowBuiltin?: boolean(name='allowBuiltin', example='true', position='Query'),
  body?: MLServiceAnalysisParam(name='body', position='Body'),
  version?: string(name='version', description='The version of the algorithm. The algorithm varies based on the version.', example='v1', position='Query'),
}

model GetMLServiceResultsResponseBody = {
  data?: [ map[string]string ](name='data'),
  status?: map[string]string(name='status'),
}

model GetMLServiceResultsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMLServiceResultsResponseBody(name='body'),
}

/**
  * @description You must obtain the following basic permissions before you call this operation:
  *     {
  *         "Version": "1",
  *         "Statement": [
  *             {
  *                 "Action": [
  *                     "log:Get*"
  *                 ],
  *                 "Resource": [
  *                     "acs:log:*:*:mlservice/sls_builtin_*"
  *                 ],
  *                 "Effect": "Allow"
  *             }
  *         ]
  *     }
  * @param request  the request parameters of GetMLServiceResults  GetMLServiceResultsRequest
  * @return GetMLServiceResultsResponse
 */
async function getMLServiceResults(request: GetMLServiceResultsRequest): GetMLServiceResultsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetMLServiceResults', 'POST', '/ml/service/{serviceName}/analysis', 'json', false, 'json', request);
}

model GetMachineGroupRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  machineGroup: string(name='machineGroup', description='The name of the machine group.

This parameter is required.', example='test-machine-group', position='Path'),
}

model GetMachineGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MachineGroup  
}

/**
  * @description Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * @param request  the request parameters of GetMachineGroup  GetMachineGroupRequest
  * @return GetMachineGroupResponse
 */
async function getMachineGroup(request: GetMachineGroupRequest): GetMachineGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetMachineGroup', 'GET', '/machinegroups/{machineGroup}', 'json', false, 'json', request);
}

model GetMaxComputeExportRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='my-project', position='Host'),
  mcExportName: string(name='mcExportName', description='The unique name of the job. Make sure that the job exists.

This parameter is required.', example='export-mc-123456789-123456', position='Path'),
}

model GetMaxComputeExportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MaxComputeExport  
}

/**
  * @description *   Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * *   An AccessKey pair is created and obtained. For more information, see [AccessKey pair](https://help.aliyun.com/document_detail/29009.html).
  * The AccessKey pair of an Alibaba Cloud account has permissions on all API operations. Using these credentials to perform operations in Simple Log Service is a high-risk operation. We recommend that you use a Resource Access Management (RAM) user to call API operations or perform routine O\\&M. To create a RAM user, log on to the RAM console. Make sure that the RAM user has the management permissions on Simple Log Service resources. For more information, see [Create a RAM user and authorize the RAM user to access Simple Log Service](https://help.aliyun.com/document_detail/47664.html).
  * *   The information that is required to query logs is obtained. The information includes the name of the project to which the logs belong and the region of the project. For more information, see [Manage a project](https://help.aliyun.com/document_detail/48984.html)
  * @param request  the request parameters of GetMaxComputeExport  GetMaxComputeExportRequest
  * @return GetMaxComputeExportResponse
 */
async function getMaxComputeExport(request: GetMaxComputeExportRequest): GetMaxComputeExportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetMaxComputeExport', 'GET', '/maxcomputeexports/{mcExportName}', 'json', false, 'json', request);
}

model GetMetricStoreRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='my-project', position='Host'),
  name: string(name='name', description='The name of the Metricstore.

This parameter is required.', example='my_metric_store', position='Path'),
}

model GetMetricStoreResponseBody = {
  autoSplit?: boolean(name='autoSplit', description='Indicates whether the automatic sharding feature is enabled.', example='true'),
  createTime?: long(name='createTime', description='The creation time. The value is a UNIX timestamp.', example='1698933894'),
  hotTtl?: int32(name='hot_ttl'),
  infrequentAccessTTL?: int32(name='infrequentAccessTTL'),
  lastModifyTime?: long(name='lastModifyTime', description='The last update time. The value is a UNIX timestamp.', example='1712023974'),
  maxSplitShard?: int32(name='maxSplitShard', description='The maximum number of shards into which existing shards can be automatically split.', example='64'),
  metricType?: string(name='metricType', description='The metric type of the Metricstore. Example: prometheus.', example='prometheus'),
  mode?: string(name='mode', description='The specification type of the Metricstore. Example: standard.', example='standard'),
  name?: string(name='name', description='The name of the Metricstore.', example='my_metric_store'),
  shardCount?: int32(name='shardCount', description='The number of shards.', example='2'),
  ttl?: int32(name='ttl', description='The retention period. Unit: days.', example='7'),
}

model GetMetricStoreResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMetricStoreResponseBody(name='body'),
}

/**
  * @description Metricstores are used to store metric data. For more information about Metricstores, see [Metricstores](https://help.aliyun.com/document_detail/171723.html). For more information about metric data, see [Metric data](https://help.aliyun.com/document_detail/174965.html). You can call this operation to query the settings of a Metricstore. To query the metric data in a Metricstore, see [Query and analysis](https://help.aliyun.com/document_detail/174968.html) and [GetLogsV2](https://help.aliyun.com/document_detail/2771318.html).
  * *   You must specify an existing Metricstore.
  * *   Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * *   An AccessKey pair is created and obtained. For more information, see [AccessKey pair](https://help.aliyun.com/document_detail/29009.html).
  * The AccessKey pair of an Alibaba Cloud account has permissions on all API operations. Using these credentials to perform operations in Simple Log Service is a high-risk operation. We recommend that you use a Resource Access Management (RAM) user to call API operations or perform routine O\\&M. To create a RAM user, log on to the RAM console. Make sure that the RAM user has the management permissions on Simple Log Service resources. For more information, see [Create a RAM user and authorize the RAM user to access Simple Log Service](https://help.aliyun.com/document_detail/47664.html).
  * *   The information that is required to query metric data is obtained. The information includes the name of the project to which the metric data belong and the region of the project. For more information, see [Manage a project](https://help.aliyun.com/document_detail/48984.html).
  * *   You can create up to 200 Logstores or Metricstores in a project.
  * *   Metric data is automatically deleted when the retention period of the metric data ends.
  * @param request  the request parameters of GetMetricStore  GetMetricStoreRequest
  * @return GetMetricStoreResponse
 */
async function getMetricStore(request: GetMetricStoreRequest): GetMetricStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetMetricStore', 'GET', '/metricstores/{name}', 'json', false, 'none', request);
}

model GetMetricStoreMeteringModeRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='projectName', position='Host'),
  metricStore: string(name='metricStore', description='metricStore

This parameter is required.', example='metricStoreName', position='Path'),
}

model GetMetricStoreMeteringModeResponseBody = {
  meteringMode?: string(name='meteringMode', description='The billing mode. Default value: ChargeByFunction. Valid values: ChargeByFunction and ChargeByDataIngest.', example='ChargeByFunction'),
}

model GetMetricStoreMeteringModeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMetricStoreMeteringModeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetMetricStoreMeteringMode  GetMetricStoreMeteringModeRequest
  * @return GetMetricStoreMeteringModeResponse
 */
async function getMetricStoreMeteringMode(request: GetMetricStoreMeteringModeRequest): GetMetricStoreMeteringModeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetMetricStoreMeteringMode', 'GET', '/metricstores/{metricStore}/meteringmode', 'json', false, 'json', request);
}

model GetOSSExportRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  ossExportName: string(name='ossExportName', description='The unique name of the job. Make sure that the job exists.

This parameter is required.', example='job-123456789-123456', position='Path'),
}

model GetOSSExportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OSSExport  
}

/**
  * @param request  the request parameters of GetOSSExport  GetOSSExportRequest
  * @return GetOSSExportResponse
 */
async function getOSSExport(request: GetOSSExportRequest): GetOSSExportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetOSSExport', 'GET', '/ossexports/{ossExportName}', 'json', false, 'json', request);
}

model GetOSSHDFSExportRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  ossExportName: string(name='ossExportName', description='The unique name of the job. Make sure that the job exists.

This parameter is required.', example='job-123456789-123456', position='Path'),
}

model GetOSSHDFSExportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OSSExport  
}

/**
  * @param request  the request parameters of GetOSSHDFSExport  GetOSSHDFSExportRequest
  * @return GetOSSHDFSExportResponse
 */
async function getOSSHDFSExport(request: GetOSSHDFSExportRequest): GetOSSHDFSExportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetOSSHDFSExport', 'GET', '/osshdfsexports/{ossExportName}', 'json', false, 'json', request);
}

model GetOSSIngestionRequest {
  project?: string(name='project', description='This parameter is required.', example='ali-test-project', position='Host'),
  ossIngestionName: string(name='ossIngestionName', description='This parameter is required.', example='ingest-oss-123456', position='Path'),
}

model GetOSSIngestionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OSSIngestion  
}

/**
  * @param request  the request parameters of GetOSSIngestion  GetOSSIngestionRequest
  * @return GetOSSIngestionResponse
 */
async function getOSSIngestion(request: GetOSSIngestionRequest): GetOSSIngestionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetOSSIngestion', 'GET', '/ossingestions/{ossIngestionName}', 'json', false, 'json', request);
}

model GetProjectRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-project-test', position='Host'),
}

model GetProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Project  
}

/**
  * @description ### Usage notes
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * @param request  the request parameters of GetProject  GetProjectRequest
  * @return GetProjectResponse
 */
async function getProject(request: GetProjectRequest): GetProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetProject', 'GET', '/', 'json', false, 'json', request);
}

model GetProjectLogsRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  powerSql?: boolean(name='powerSql', description='Specifies whether to enable the Dedicated SQL feature. For more information, see [Enable Dedicated SQL](https://help.aliyun.com/document_detail/223777.html). Valid values:

*   true
*   false (default): enables the Standard SQL feature.

You can use the powerSql or **query** parameter to configure Dedicated SQL.', example='false', position='Query'),
  query: string(name='query', description='The standard SQL statement. In this example, the SQL statement queries the number of page views (PVs) from 2022-03-01 10:41:40 to 2022-03-01 10:56:40 in a Logstore whose name is nginx-moni.

This parameter is required.', example='SELECT COUNT(*) as pv FROM nginx-moni where __time__ &gt; 1646102500 and __time__ &lt; 1646103400', position='Query'),
}

model GetProjectLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: [ map[string]string ](name='body'),
}

/**
  * @description ### Usage notes
  * * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * * An AccessKey pair is created and obtained. For more information, see [AccessKey pair](https://help.aliyun.com/document_detail/29009.html).
  * The AccessKey pair of an Alibaba Cloud account has permissions on all API operations. Using these credentials to perform operations in Simple Log Service is a high-risk operation. We recommend that you use a Resource Access Management (RAM) user to call API operations or perform routine O&#x26;M. To create a RAM user, log on to the RAM console. Make sure that the RAM user has the management permissions on Simple Log Service resources. For more information, see [Create a RAM user and authorize the RAM user to access Simple Log Service](https://help.aliyun.com/document_detail/47664.html).
  * * The information that is required to query logs is obtained. The information includes the name of the project to which the logs belong and the region of the project. For more information, see [Manage a project](https://help.aliyun.com/document_detail/48984.html).
  * * Indexes are configured before you query logs. For more information, see [Create indexes](https://help.aliyun.com/document_detail/90732.html).
  * * Limits are imposed when you use Simple Log Service to query logs. We recommend that you specify query statements and query time ranges based on the limits. For more information, see [Log search overview](https://help.aliyun.com/document_detail/43772.html) and [Log analysis overview](https://help.aliyun.com/document_detail/53608.html).
  * * You must set query to a standard SQL statement.
  * * You must specify a Logstore in the FROM clause of an SQL statement. A Logstore can be used as an SQL table.
  * * You must specify a time range in an SQL statement by using the __date__ or __time__ parameter. The value of the __date__ parameter is a timestamp. The value of the __time__ parameter is an integer, and the unit of the value is seconds.
  * ### Authentication resources
  * The following table describes the authorization information that is required for this operation. You can add the information to the Action element of a RAM policy statement to grant a RAM user or a RAM role the permissions to call this operation.
  * |Action|Resource|
  * |:---|:---|
  * |`log:GetProjectLogs`|`acs:log:{#regionId}:{#accountId}:project/{#ProjectName}`|
  * @param request  the request parameters of GetProjectLogs  GetProjectLogsRequest
  * @return GetProjectLogsResponse
 */
async function getProjectLogs(request: GetProjectLogsRequest): GetProjectLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetProjectLogs', 'GET', '/logs', 'json', false, 'json', request);
}

model GetProjectPolicyRequest {
  project?: string(name='project', description='The name of the project.', example='ali-test-project', position='Host'),
}

model GetProjectPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: string(name='body'),
}

/**
  * @description ### [](#)Usage notes
  * *   Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * *   An AccessKey pair is created and obtained. For more information, see [AccessKey pair](https://help.aliyun.com/document_detail/29009.html).
  * The AccessKey pair of an Alibaba Cloud account has permissions on all API operations. Using these credentials to perform operations in Simple Log Service is a high-risk operation. We recommend that you use a Resource Access Management (RAM) user to call API operations or perform routine O\\&M. To create a RAM user, log on to the RAM console. Make sure that the RAM user has the management permissions on Simple Log Service resources. For more information, see [Create a RAM user and authorize the RAM user to access Simple Log Service](https://help.aliyun.com/document_detail/47664.html).
  * *   The information that is required to query logs is obtained. The information includes the name of the project to which the logs belong and the region of the project. For more information, see [Manage a project](https://help.aliyun.com/document_detail/48984.html)
  * @param request  the request parameters of GetProjectPolicy  GetProjectPolicyRequest
  * @return GetProjectPolicyResponse
 */
async function getProjectPolicy(request: GetProjectPolicyRequest): GetProjectPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetProjectPolicy', 'GET', '/policy', 'json', false, 'json', request);
}

model GetS3IngestionRequest {
  project?: string(name='project', description='This parameter is required.', position='Host'),
  s3IngestionName: string(name='s3IngestionName', description='This parameter is required.', position='Path'),
}

model GetS3IngestionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: S3Ingestion  
}

/**
  * @param request  the request parameters of GetS3Ingestion  GetS3IngestionRequest
  * @return GetS3IngestionResponse
 */
async function getS3Ingestion(request: GetS3IngestionRequest): GetS3IngestionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetS3Ingestion', 'GET', '/s3ingestions/{s3IngestionName}', 'json', false, 'json', request);
}

model GetSavedSearchRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='aliyun-test-project', position='Host'),
  savedsearchName: string(name='savedsearchName', description='The name of the saved search.

This parameter is required.', example='savedsearch-name', position='Path'),
}

model GetSavedSearchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SavedSearch  
}

/**
  * @description ### Usage notes
  * * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * * An AccessKey pair is created and obtained. For more information, see [AccessKey pair](https://help.aliyun.com/document_detail/29009.html).
  * The AccessKey pair of an Alibaba Cloud account has permissions on all API operations. Using these credentials to perform operations in Simple Log Service is a high-risk operation. We recommend that you use a Resource Access Management (RAM) user to call API operations or perform routine O&#x26;M. To create a RAM user, log on to the RAM console. Make sure that the RAM user has the management permissions on Simple Log Service resources. For more information, see [Create a RAM user and authorize the RAM user to access Simple Log Service](https://help.aliyun.com/document_detail/47664.html).
  * * The information that is required to query logs is obtained. The information includes the name of the project to which the logs belong, the region of the project, and the name of the Logstore to which the logs belong. For more information, see [Manage a project](https://help.aliyun.com/document_detail/48984.html) and [Manage a Logstore](https://help.aliyun.com/document_detail/48990.html).
  * * You can call the ListSavedSearch operation to query the name of a saved search.
  * ### Authentication resources
  * The following table describes the authorization information that is required for this operation. You can add the information to the Action element of a RAM policy statement to grant a RAM user or a RAM role the permissions to call this operation.
  * |Action|Resource|
  * |:---|:---|
  * |`log:GetSavedSearch`|`acs:log:{#regionId}:{#accountId}:project/{#ProjectName}/savedsearch/{#SavedSearchName}`|
  * @param request  the request parameters of GetSavedSearch  GetSavedSearchRequest
  * @return GetSavedSearchResponse
 */
async function getSavedSearch(request: GetSavedSearchRequest): GetSavedSearchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetSavedSearch', 'GET', '/savedsearches/{savedsearchName}', 'json', false, 'json', request);
}

model GetScheduledSQLRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  scheduledSQLName: string(name='scheduledSQLName', description='The unique name of the job. Make sure that the job exists.

This parameter is required.', example='sql-123456789-123456', position='Path'),
}

model GetScheduledSQLResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ScheduledSQL  
}

/**
  * @param request  the request parameters of GetScheduledSQL  GetScheduledSQLRequest
  * @return GetScheduledSQLResponse
 */
async function getScheduledSQL(request: GetScheduledSQLRequest): GetScheduledSQLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetScheduledSQL', 'GET', '/scheduledsqls/{scheduledSQLName}', 'json', false, 'json', request);
}

model GetSlsServiceRequest {
}

model GetSlsServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ServiceStatus  
}

/**
  * @param request  the request parameters of GetSlsService  GetSlsServiceRequest
  * @return GetSlsServiceResponse
 */
async function getSlsService(request: GetSlsServiceRequest): GetSlsServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetSlsService', 'GET', '/slsservice', 'json', false, 'json', request);
}

model GetSqlInstanceRequest {
  project?: string(name='project', description='This parameter is required.', position='Host'),
}

model GetSqlInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: [ 
    {
      name?: string(name='name', example='project_name'),
      cu?: int32(name='cu', example='2'),
      createTime?: int32(name='createTime', example='1710230272'),
      updateTime?: int32(name='updateTime', example='1710230272'),
      useAsDefault?: boolean(name='useAsDefault', example='true'),
    }
  ](name='body'),
}

/**
  * @param request  the request parameters of GetSqlInstance  GetSqlInstanceRequest
  * @return GetSqlInstanceResponse
 */
async function getSqlInstance(request: GetSqlInstanceRequest): GetSqlInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetSqlInstance', 'GET', '/sqlinstance', 'json', false, 'json', request);
}

model GetStoreViewRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='example-project', position='Host'),
  name: string(name='name', description='The name of the dataset.

This parameter is required.', example='my_storeview', position='Path'),
}

model GetStoreViewResponseBody = {
  storeType?: string(name='storeType', description='The type of the dataset.

Valid values:

*   metricstore

    <!-- -->

    <!-- -->

    <!-- -->

*   logstore

    <!-- -->

    <!-- -->

    <!-- -->', example='logstore'),
  stores?: [
    StoreViewStore
  ](name='stores', description='The Logstores or Metricstores.'),
}

model GetStoreViewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetStoreViewResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetStoreView  GetStoreViewRequest
  * @return GetStoreViewResponse
 */
async function getStoreView(request: GetStoreViewRequest): GetStoreViewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetStoreView', 'GET', '/storeviews/{name}', 'json', false, 'json', request);
}

model GetStoreViewIndexRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='example-project', position='Host'),
  name: string(name='name', description='The name of the dataset.

This parameter is required.', example='my_storeview', position='Path'),
}

model GetStoreViewIndexResponseBody = {
  indexes?: [ 
    {
      index?: Index(name='index', description='The index configurations of the Logstore.'),
      logstore?: string(name='logstore', description='The name of the Logstore.', example='my-logstore'),
      project?: string(name='project', description='The name of the project to which the Logstore belongs.', example='example-project'),
    }
  ](name='indexes', description='The index configurations.'),
}

model GetStoreViewIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetStoreViewIndexResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetStoreViewIndex  GetStoreViewIndexRequest
  * @return GetStoreViewIndexResponse
 */
async function getStoreViewIndex(request: GetStoreViewIndexRequest): GetStoreViewIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetStoreViewIndex', 'GET', '/storeviews/{name}/index', 'json', false, 'json', request);
}

model ListAgentInstanceConfigsRequest {
  configType?: string(name='configType', position='Query'),
  offset?: long(name='offset', position='Query'),
  size?: long(name='size', position='Query'),
}

model ListAgentInstanceConfigsResponseBody = {
  configs?: [ 
    {
      attributes?: map[string]string(name='attributes'),
      configType?: string(name='configType'),
    }
  ](name='configs'),
  size?: long(name='size'),
  total?: long(name='total'),
}

model ListAgentInstanceConfigsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAgentInstanceConfigsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAgentInstanceConfigs  ListAgentInstanceConfigsRequest
  * @return ListAgentInstanceConfigsResponse
 */
async function listAgentInstanceConfigs(request: ListAgentInstanceConfigsRequest): ListAgentInstanceConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListAgentInstanceConfigs', 'GET', '/agentinstanceconfigs', 'json', false, 'json', request);
}

model ListAiToolsRequest {
}

model ListAiToolsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: [ 
    {
      fields?: [ 
        {
          name?: string(name='name'),
          option?: [ string ](name='option'),
          required?: boolean(name='required'),
          type?: string(name='type'),
          example?: string(name='example'),
          description?: string(name='description'),
        }
      ](name='fields'),
      name?: string(name='name'),
      description?: string(name='description'),
    }
  ](name='body'),
}

/**
  * @param request  the request parameters of ListAiTools  ListAiToolsRequest
  * @return ListAiToolsResponse
 */
async function listAiTools(request: ListAiToolsRequest): ListAiToolsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListAiTools', 'GET', '/ml/tool/list', 'json', false, 'json', request);
}

model ListAlertsRequest {
  project?: string(name='project', description='This parameter is required.', example='ali-test-project', position='Host'),
  logstore?: string(name='logstore', example='ali-test-logstore', position='Query'),
  offset?: int32(name='offset', example='0', position='Query'),
  size?: int32(name='size', description='The number of entries per page. Maximum value: 200. Default value: 10.', example='10', position='Query'),
}

model ListAlertsResponseBody = {
  count?: int32(name='count', description='The number of alert rules that are returned.', example='10'),
  results?: [
    Alert
  ](name='results', description='The alert rules.'),
  total?: int32(name='total', description='The total number of alert rules in the project.', example='80'),
}

model ListAlertsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAlertsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAlerts  ListAlertsRequest
  * @return ListAlertsResponse
 */
async function listAlerts(request: ListAlertsRequest): ListAlertsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListAlerts', 'GET', '/alerts', 'json', false, 'json', request);
}

model ListAnnotationDataRequest {
  datasetId?: string(name='datasetId', description='The unique identifier of the dataset.', example='cb8cc4eb51a85e823471cdb368fae9be', position='Path'),
  offset?: int32(name='offset', description='The line from which the query starts.', example='0', position='Query'),
  size?: int32(name='size', description='The number of entries per page.', example='100', position='Query'),
}

model ListAnnotationDataResponseBody = {
  data?: [
    MLDataParam
  ](name='data', description='The data returned.'),
  total?: int32(name='total', description='The total number of entries returned.', example='20'),
}

model ListAnnotationDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAnnotationDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAnnotationData  ListAnnotationDataRequest
  * @return ListAnnotationDataResponse
 */
async function listAnnotationData(request: ListAnnotationDataRequest): ListAnnotationDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListAnnotationData', 'GET', '/ml/annotationdataset/{datasetId}/annotationdata', 'json', false, 'json', request);
}

model ListAnnotationDataSetsRequest {
  offset?: int32(name='offset', description='The line from which the query starts.', example='0', position='Query'),
  size?: int32(name='size', description='The number of entries per page.', example='100', position='Query'),
}

model ListAnnotationDataSetsResponseBody = {
  data?: [
    MLDataSetParam
  ](name='data', description='The data returned.'),
  total?: int32(name='total', description='The total number of entries returned.', example='20'),
}

model ListAnnotationDataSetsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAnnotationDataSetsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAnnotationDataSets  ListAnnotationDataSetsRequest
  * @return ListAnnotationDataSetsResponse
 */
async function listAnnotationDataSets(request: ListAnnotationDataSetsRequest): ListAnnotationDataSetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListAnnotationDataSets', 'GET', '/ml/annotationdataset', 'json', false, 'json', request);
}

model ListAnnotationLabelsRequest {
  offset?: int32(name='offset', description='The line from which the query starts.', example='0', position='Query'),
  size?: int32(name='size', description='The number of entries per page.', example='100', position='Query'),
}

model ListAnnotationLabelsResponseBody = {
  data?: [
    MLLabelParam
  ](name='data', description='The data returned.'),
  total?: int32(name='total', description='The total number of tags that meet the query conditions.', example='20'),
}

model ListAnnotationLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAnnotationLabelsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAnnotationLabels  ListAnnotationLabelsRequest
  * @return ListAnnotationLabelsResponse
 */
async function listAnnotationLabels(request: ListAnnotationLabelsRequest): ListAnnotationLabelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListAnnotationLabels', 'GET', '/ml/annotationlabel', 'json', false, 'json', request);
}

model ListCollectionPoliciesRequest {
  centralProject?: string(name='centralProject', example='your-central-project1', position='Query'),
  dataCode?: string(name='dataCode', example='access_log', position='Query'),
  instanceId?: string(name='instanceId', example='your-test-bucket1', position='Query'),
  offset?: int32(name='offset', example='0', minimum=0, position='Query'),
  policyName?: string(name='policyName', example='your_log_policy', position='Query'),
  productCode?: string(name='productCode', description='The code of the service.', example='oss', position='Query'),
  size?: int32(name='size', example='50', minimum=1, maximum=100, position='Query'),
}

model ListCollectionPoliciesResponseBody = {
  currentCount?: int32(name='currentCount', example='1'),
  data?: [ 
    {
      centralizeConfig?: {
        destLogstore?: string(name='destLogstore', example='your-sls-logstore-in-beijing'),
        destProject?: string(name='destProject', example='your-sls-project-in-beijing'),
        destRegion?: string(name='destRegion', example='cn-beijing'),
        destTTL?: int32(name='destTTL', description='The data retention period for centralized storage. Unit: days.', example='your-sls-logstore-ttl'),
      }(name='centralizeConfig', description='The configuration for centralized storage.'),
      centralizeEnabled?: boolean(name='centralizeEnabled', example='false'),
      dataCode?: string(name='dataCode', example='access_log'),
      dataConfig?: {
        dataProject?: string(name='dataProject', example='""'),
        dataRegion?: string(name='dataRegion', example='cn-hangzhou'),
      }(name='dataConfig'),
      enabled?: boolean(name='enabled', example='true'),
      internalPolicy?: boolean(name='internalPolicy', example='false'),
      policyConfig?: {
        instanceIds?: [ string ](name='instanceIds'),
        regions?: [ string ](name='regions'),
        resourceMode?: string(name='resourceMode', example='all'),
        resourceTags?: map[string]any(name='resourceTags', example='{"tag1":"value1","tag2":"value2"}'),
      }(name='policyConfig'),
      policyName?: string(name='policyName', example='your_log_policy'),
      policyUid?: string(name='policyUid', example='148***********50'),
      productCode?: string(name='productCode', example='oss'),
      resourceDirectory?: {
        accountGroupType?: string(name='accountGroupType', example='all,custom'),
        members?: [ string ](name='members'),
      }(name='resourceDirectory'),
    }
  ](name='data', description='The data of the policies that are matched against the query conditions. The data is returned based on paginated results.'),
  statistics?: [ 
    {
      policySourceList?: [ 
        {
          policyName?: string(name='policyName', example='policy_name1_from148'),
          policyUid?: string(name='policyUid', example='148***********50'),
        }
      ](name='policySourceList'),
      productCode?: string(name='productCode', example='oss'),
    }
  ](name='statistics'),
  totalCount?: int32(name='totalCount', example='1'),
}

model ListCollectionPoliciesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCollectionPoliciesResponseBody(name='body'),
}

/**
  * @description You must use the Simple Log Service endpoint for the China (Shanghai), Singapore, or Heyuan ACDR Auto region to call the operation.
  * @param request  the request parameters of ListCollectionPolicies  ListCollectionPoliciesRequest
  * @return ListCollectionPoliciesResponse
 */
async function listCollectionPolicies(request: ListCollectionPoliciesRequest): ListCollectionPoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListCollectionPolicies', 'GET', '/collectionpolicy', 'json', false, 'json', request);
}

model ListConfigRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  configName?: string(name='configName', description='The name of the Logtail configuration, which is used for fuzzy match.', example='logtail-config-sample', position='Query'),
  logstoreName: string(name='logstoreName', description='The name of the Logstore.

This parameter is required.', example='ali-test-logstore', position='Query'),
  offset: long(name='offset', description='The line from which the query starts. Default value: 0.

This parameter is required.', example='0', position='Query'),
  size: long(name='size', description='The number of entries per page. Maximum value: 500.

This parameter is required.', example='10', position='Query'),
}

model ListConfigResponseBody = {
  configs?: [ string ](name='configs', description='The Logtail configurations that are returned on the current page.'),
  count?: int32(name='count', description='The number of Logtail configurations that are returned on the current page.', example='3'),
  total?: int32(name='total', description='The total number of Logtail configurations that meet the query conditions.', example='2'),
}

model ListConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListConfigResponseBody(name='body'),
}

/**
  * @description ### [](#)Usage notes
  * *   Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * *   An AccessKey pair is created and obtained. For more information, see [AccessKey pair](https://help.aliyun.com/document_detail/29009.html).
  * The AccessKey pair of an Alibaba Cloud account has permissions on all API operations. Using these credentials to perform operations in Simple Log Service is a high-risk operation. We recommend that you use a RAM user to call API operations or perform routine O\\&M. To create a RAM user, log on to the RAM console. Make sure that the RAM user has the management permissions on Simple Log Service resources. For more information, see [Create a RAM user and authorize the RAM user to access Simple Log Service](https://help.aliyun.com/document_detail/47664.html).
  * *   The information that is required to query logs is obtained. The information includes the name of the project to which the logs belong and the region of the project. For more information, see [Manage a project](https://help.aliyun.com/document_detail/48984.html).
  * @param request  the request parameters of ListConfig  ListConfigRequest
  * @return ListConfigResponse
 */
async function listConfig(request: ListConfigRequest): ListConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListConfig', 'GET', '/configs', 'json', false, 'json', request);
}

model ListConsumeProcessorsRequest {
  project?: string(name='project', description='This parameter is required.', position='Host'),
  displayName?: string(name='displayName', description='The display name of the consumption processor.', example='filter-get-request', position='Query'),
  offset?: string(name='offset', description='The offset. Default value: 0.', example='0', position='Query'),
  processorName?: string(name='processorName', description='The identifier of the consumption processor.', example='consume-processor-1', position='Query'),
  size?: string(name='size', description='The number of entries. Default value: 200.', example='100', position='Query'),
}

model ListConsumeProcessorsResponseBody = {
  count?: int32(name='count', description='The number of consumption processors for offset.', example='10'),
  processors?: [
    ConsumeProcessor
  ](name='processors', description='The list of consumption processor information.'),
  total?: int32(name='total', description='The total number of consumption processors that meet the query conditions.', example='20'),
}

model ListConsumeProcessorsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListConsumeProcessorsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListConsumeProcessors  ListConsumeProcessorsRequest
  * @return ListConsumeProcessorsResponse
 */
async function listConsumeProcessors(request: ListConsumeProcessorsRequest): ListConsumeProcessorsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListConsumeProcessors', 'GET', '/consumeprocessors', 'json', false, 'json', request);
}

model ListConsumerGroupRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='The name of the Logstore.

This parameter is required.', example='ali-test-logstore', position='Path'),
}

model ListConsumerGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: [
    ConsumerGroup
  ](name='body'),
}

/**
  * @description ### Usage notes
  * * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * * An AccessKey pair is created and obtained. For more information, see [AccessKey pair](https://help.aliyun.com/document_detail/29009.html).
  * The AccessKey pair of an Alibaba Cloud account has permissions on all API operations. Using these credentials to perform operations in Simple Log Service is a high-risk operation. We recommend that you use a Resource Access Management (RAM) user to call API operations or perform routine O&#x26;M. To create a RAM user, log on to the RAM console. Make sure that the RAM user has the management permissions on Simple Log Service resources. For more information, see [Create a RAM user and authorize the RAM user to access Simple Log Service](https://help.aliyun.com/document_detail/47664.html).
  * * The information that is required to query logs is obtained. The information includes the name of the project to which the logs belong, the region of the project, and the name of the Logstore to which the logs belong. For more information, see [Manage a project](https://help.aliyun.com/document_detail/48984.html) and [Manage a Logstore](https://help.aliyun.com/document_detail/48990.html).
  * ### Authentication resources
  * The following table describes the authorization information that is required for this operation. You can add the information to the Action element of a RAM policy statement to grant a RAM user or a RAM role the permissions to call this operation.
  * |Action|Resource|
  * |:---|:---|
  * |`log:ListConsumerGroup`|`acs:log:{#regionId}:{#accountId}:project/{#ProjectName}/logstore/{#LogstoreName}/consumergroup/*`|
  * @param request  the request parameters of ListConsumerGroup  ListConsumerGroupRequest
  * @return ListConsumerGroupResponse
 */
async function listConsumerGroup(request: ListConsumerGroupRequest): ListConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListConsumerGroup', 'GET', '/logstores/{logstore}/consumergroups', 'json', false, 'json', request);
}

model ListDashboardRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  dashboardName?: string(name='dashboardName', position='Query'),
  displayName?: string(name='displayName', position='Query'),
  offset?: int32(name='offset', description='The line from which the query starts. Default value: 0.', example='0', position='Query'),
  size?: int32(name='size', description='The number of entries per page. Maximum value: 500. Default value: 500.', example='10', position='Query'),
  tags?: [ 
    {
      key?: string(name='key'),
      value?: string(name='value'),
    }
  ](name='tags', shrink='json', position='Query'),
}

model ListDashboardResponseBody = {
  dashboardItems?: [ 
    {
      dashboardName?: string(name='dashboardName', description='The dashboard ID. The ID must be unique in a project. Fuzzy search is supported. For example, if you enter da, all dashboards whose IDs start with da are queried.', example='dashboard-1609294922657-434834'),
      description?: string(name='description'),
      displayName?: string(name='displayName', description='The display name of the dashboard.', example='data-ingest'),
    }
  ](name='dashboardItems', description='The details of the dashboard.'),
  dashboards?: [ string ](name='dashboards', description='The queried dashboards. Each dashboard in the array is specified by dashboardName.'),
}

model ListDashboardResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDashboardResponseBody(name='body'),
}

/**
  * @description ### [](#)Usage notes
  * *   Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * *   An AccessKey pair is created and obtained. For more information, see [AccessKey pair](https://help.aliyun.com/document_detail/29009.html).
  * The AccessKey pair of an Alibaba Cloud account has permissions on all API operations. Using these credentials to perform operations in Simple Log Service is a high-risk operation. We recommend that you use a RAM user to call API operations or perform routine O\\&M. To create a RAM user, log on to the RAM console. Make sure that the RAM user has the management permissions on Simple Log Service resources. For more information, see [Create a RAM user and authorize the RAM user to access Simple Log Service](https://help.aliyun.com/document_detail/47664.html).
  * *   The information that is required to query logs is obtained. The information includes the name of the project to which the logs belong and the region of the project. For more information, see [Manage a project](https://help.aliyun.com/document_detail/48984.html).
  * @param request  the request parameters of ListDashboard  ListDashboardRequest
  * @return ListDashboardResponse
 */
async function listDashboard(request: ListDashboardRequest): ListDashboardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDashboard', 'GET', '/dashboards', 'json', false, 'json', request);
}

model ListDomainsRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  domainName?: string(name='domainName', description='The domain name that is used to match custom domain names. For example, if you set domainName to `example.com`, the matched domain names are `a.example.com` and `b.example.com`.', example='example.com', position='Query'),
  offset?: int32(name='offset', description='The line from which the query starts. Default value: 0.', example='0', position='Query'),
  size?: int32(name='size', description='The number of entries per page. Default value: 500. Maximum value: 500.', example='10', position='Query'),
}

model ListDomainsResponseBody = {
  count?: long(name='count', description='The number of domain names that are returned on the current page.', example='1'),
  domains?: [ string ](name='domains', description='The domain names.'),
  total?: long(name='total', description='The total number of domain names that are returned.', example='1'),
}

model ListDomainsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDomainsResponseBody(name='body'),
}

/**
  * @description *   Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * *   Only one custom domain name can be bound to each project.
  * @param request  the request parameters of ListDomains  ListDomainsRequest
  * @return ListDomainsResponse
 */
async function listDomains(request: ListDomainsRequest): ListDomainsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDomains', 'GET', '/domains', 'json', false, 'json', request);
}

model ListDownloadJobsRequest {
  project?: string(name='project', description='This parameter is required.', example='ali-test-project', position='Host'),
  logstore?: string(name='logstore', example='ali-test-logstore', position='Query'),
  offset?: long(name='offset', example='0', position='Query'),
  size?: long(name='size', example='10', position='Query'),
}

model ListDownloadJobsResponseBody = {
  count?: int32(name='count', example='10'),
  results?: [ 
    {
      configuration?: {
        allowInComplete?: string(name='allowInComplete', example='false'),
        fromTime?: long(name='fromTime', description='起点时间戳（精确到秒）', example='1722409260'),
        logstore?: string(name='logstore', description='源logstore', example='ali-test-logstore'),
        powerSql?: boolean(name='powerSql', description='是否启用powerSql', example='true'),
        query?: string(name='query', description='查询语句', example='* | select *'),
        sink?: {
          bucket?: string(name='bucket', description='对象存储桶', example='ali-test-oss-bucket'),
          compressionType?: string(name='compressionType', description='压缩格式', example='none'),
          contentType?: string(name='contentType', description='下载文件格式', example='csv'),
          prefix?: string(name='prefix', example='download/'),
          roleArn?: string(name='roleArn', description='下载使用roleArn', example='acs:ram::123456:role/aliyunlogimportossrole'),
          type?: string(name='type', example='AliyunOSS'),
        }(name='sink', description='导出配置'),
        toTime?: long(name='toTime', description='结束时间戳（精确到秒）', example='1722411060'),
      }(name='configuration', description='下载配置'),
      createTime?: string(name='createTime', example='1722411060'),
      description?: string(name='description', description='任务描述', example='a download job'),
      displayName?: string(name='displayName', description='任务显示名称', example='download-123'),
      executionDetails?: {
        checkSum?: string(name='checkSum', example='ETASFGASDASQWDasd'),
        errorMessage?: string(name='errorMessage', description='下载错误信息', example='timeout'),
        executeTime?: long(name='executeTime', description='下载执行时间', example='123'),
        filePath?: string(name='filePath', description='下载结果链接', example='https://sls-downloaded-xxxx.csv.gzip?Expiresxxx'),
        fileSize?: long(name='fileSize', description='下载文件大小', example='123456'),
        logCount?: long(name='logCount', description='下载日志条数', example='123'),
        notice?: string(name='notice'),
        progress?: long(name='progress', description='下载进度', example='100'),
      }(name='executionDetails', description='The execution details.'),
      name?: string(name='name', description='代表资源名称的资源属性字段', example='download-123'),
      status?: string(name='status', description='The task status.', example='running'),
    }
  ](name='results', description='Array, to return a list of log download tasks.'),
  total?: int32(name='total', example='10'),
}

model ListDownloadJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDownloadJobsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDownloadJobs  ListDownloadJobsRequest
  * @return ListDownloadJobsResponse
 */
async function listDownloadJobs(request: ListDownloadJobsRequest): ListDownloadJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDownloadJobs', 'GET', '/downloadjobs', 'json', false, 'json', request);
}

model ListETLsRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  logstore?: string(name='logstore', position='Query'),
  offset?: int32(name='offset', example='0', position='Query'),
  size?: int32(name='size', example='10', position='Query'),
}

model ListETLsResponseBody = {
  count?: int32(name='count', description='The number of data transformation jobs that are returned.', example='10'),
  results?: [
    ETL
  ](name='results'),
  total?: int32(name='total', description='The total number of data transformation jobs in the project.', example='80'),
}

model ListETLsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListETLsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListETLs  ListETLsRequest
  * @return ListETLsResponse
 */
async function listETLs(request: ListETLsRequest): ListETLsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListETLs', 'GET', '/etls', 'json', false, 'json', request);
}

model ListIngestProcessorsRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  displayName?: string(name='displayName', description='The display name of the ingest processor.', position='Query'),
  offset?: int32(name='offset', description='The offset. Default value: 0.', example='0', position='Query'),
  processorName?: string(name='processorName', description='The identifier of the ingest processor.', example='parse-nginx-log', position='Query'),
  size?: int32(name='size', description='The number of entries. Default value: 200.', example='200', position='Query'),
}

model ListIngestProcessorsResponseBody = {
  count?: int32(name='count', description='The number of entries returned.', example='5'),
  processors?: [
    IngestProcessor
  ](name='processors', description='The ingest processors that are returned.'),
  total?: int32(name='total', description='The total number of entries returned.', example='10'),
}

model ListIngestProcessorsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIngestProcessorsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListIngestProcessors  ListIngestProcessorsRequest
  * @return ListIngestProcessorsResponse
 */
async function listIngestProcessors(request: ListIngestProcessorsRequest): ListIngestProcessorsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListIngestProcessors', 'GET', '/ingestprocessors', 'json', false, 'json', request);
}

model ListLogStoresRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  logstoreName?: string(name='logstoreName', description='The name of the Logstore. Fuzzy match is supported. For example, if you enter test, Logstores whose name contains test are returned.', example='my-logstore', position='Query'),
  mode?: string(name='mode', description='The type of the Logstore. Valid values: standard and query.

*   **standard**: Standard Logstore. This type of Logstore supports the log analysis feature and is suitable for scenarios such as real-time monitoring and interactive analysis. You can also use this type of Logstore to build a comprehensive observability system.
*   **query**: Query Logstore. This type of Logstore supports high-performance queries. The index traffic fee of a Query Logstore is approximately half that of a Standard Logstore. Query Logstores do not support SQL analysis. Query Logstores are suitable for scenarios in which the volume of data is large, the log retention period is long, or log analysis is not required. Log retention periods of weeks or months are considered long.', example='standard', position='Query'),
  offset?: int32(name='offset', description='The line from which the query starts. Default value: 0.', example='0', position='Query'),
  size?: int32(name='size', description='The number of entries per page. Maximum value: 500. Default value: 200.', example='10', position='Query'),
  telemetryType?: string(name='telemetryType', description='The type of the data that you want to query. Valid values:

*   None: logs
*   Metrics: metrics', example='None', position='Query'),
}

model ListLogStoresResponseBody = {
  count?: int32(name='count', description='The number of entries returned on the current page.', example='2'),
  logstores?: [ string ](name='logstores', description='The Logstores that meet the query conditions.', example='["test-1","test-2"]'),
  total?: int32(name='total', description='The number of the Logstores that meet the query conditions.', example='2'),
}

model ListLogStoresResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLogStoresResponseBody(name='body'),
}

/**
  * @description ### Usage notes
  * * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * * An AccessKey pair is created and obtained. For more information, see [AccessKey pair](https://help.aliyun.com/document_detail/29009.html).
  * The AccessKey pair of an Alibaba Cloud account has permissions on all API operations. Using these credentials to perform operations in Simple Log Service is a high-risk operation. We recommend that you use a RAM user to call API operations or perform routine O&#x26;M. To create a RAM user, log on to the RAM console. Make sure that the RAM user has the management permissions on Simple Log Service resources. For more information, see [Create a RAM user and authorize the RAM user to access Simple Log Service](https://help.aliyun.com/document_detail/47664.html).
  * * The information that is required to query logs is obtained. The information includes the name of the project to which the logs belong and the region of the project. For more information, see [Manage a project](https://help.aliyun.com/document_detail/48984.html).
  * ### Authentication resources
  * The following table describes the authorization information that is required for this operation. You can add the information to the Action element of a RAM policy statement to grant a RAM user or a RAM role the permissions to call this operation.
  * |Action|Resource|
  * |:---|:---|
  * |`log:ListLogStores`|`acs:log:{#regionId}:{#accountId}:project/{#ProjectName}/logstore/*`|
  * @param request  the request parameters of ListLogStores  ListLogStoresRequest
  * @return ListLogStoresResponse
 */
async function listLogStores(request: ListLogStoresRequest): ListLogStoresResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListLogStores', 'GET', '/logstores', 'json', false, 'json', request);
}

model ListLogtailPipelineConfigRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='test-project', position='Host'),
  configName?: string(name='configName', description='The name of the Logtail pipeline configuration.', example='logtail-config-sample', position='Query'),
  configType?: string(name='configType', position='Query'),
  logstoreName?: string(name='logstoreName', description='The name of the Logstore.', example='test-logstore', position='Query'),
  offset?: long(name='offset', description='The line from which the query starts.', example='0', minimum=0, position='Query'),
  size?: long(name='size', description='The number of Logtail pipeline configurations per page.', example='20', minimum=0, maximum=500, position='Query'),
}

model ListLogtailPipelineConfigResponseBody = {
  configs?: [ string ](name='configs', description='The Logtail pipeline configurations that are returned on the current page.'),
  count?: int32(name='count', description='The number of Logtail pipeline configurations that are returned on the current page.', example='10'),
  total?: int32(name='total', description='The total number of Logtail pipeline configurations in the current project.', example='20'),
}

model ListLogtailPipelineConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLogtailPipelineConfigResponseBody(name='body'),
}

/**
  * @description The UK (London) region is supported. Supported regions are constantly updated.
  * @param request  the request parameters of ListLogtailPipelineConfig  ListLogtailPipelineConfigRequest
  * @return ListLogtailPipelineConfigResponse
 */
async function listLogtailPipelineConfig(request: ListLogtailPipelineConfigRequest): ListLogtailPipelineConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListLogtailPipelineConfig', 'GET', '/pipelineconfigs', 'json', false, 'json', request);
}

model ListMachineGroupRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='aliyun-test-project', position='Host'),
  groupName?: string(name='groupName', description='The name of the machine group. This parameter is used to filter machine groups. Partial match is supported.', example='test-machine-group', position='Query'),
  offset?: int32(name='offset', description='The line from which the query starts. Default value: 0.', example='1', position='Query'),
  size?: int32(name='size', description='The number of entries per page. Maximum value: 500.', example='10', position='Query'),
}

model ListMachineGroupResponseBody = {
  count?: int32(name='count', description='The number of machine groups that are returned on the current page.', example='2'),
  machinegroups?: [ string ](name='machinegroups', description='The machine groups that meet the query conditions.', example='[ "test-machine-group-1", "test-machine-group-2" ]'),
  total?: int32(name='total', description='The total number of machine groups that meet the query conditions.', example='2'),
}

model ListMachineGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMachineGroupResponseBody(name='body'),
}

/**
  * @description Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * @param request  the request parameters of ListMachineGroup  ListMachineGroupRequest
  * @return ListMachineGroupResponse
 */
async function listMachineGroup(request: ListMachineGroupRequest): ListMachineGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListMachineGroup', 'GET', '/machinegroups', 'json', false, 'json', request);
}

model ListMachinesRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  machineGroup: string(name='machineGroup', description='The name of the machine group.

This parameter is required.', example='test-group', position='Path'),
  offset?: int32(name='offset', description='The line from which the query starts. Default value: 0.', example='0', position='Query'),
  size?: int32(name='size', description='The number of entries per page. Default value: 100. Maximum value: 500.', example='10', position='Query'),
}

model ListMachinesResponseBody = {
  count?: int32(name='count', description='The number of machines that are returned on the current page.', example='3'),
  machines?: [
    Machine
  ](name='machines', description='The machines that are returned.'),
  total?: int32(name='total', description='The total number of machines.', example='8'),
}

model ListMachinesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMachinesResponseBody(name='body'),
}

/**
  * @description Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * @param request  the request parameters of ListMachines  ListMachinesRequest
  * @return ListMachinesResponse
 */
async function listMachines(request: ListMachinesRequest): ListMachinesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListMachines', 'GET', '/machinegroups/{machineGroup}/machines', 'json', false, 'json', request);
}

model ListMaxComputeExportsRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='my-project', position='Host'),
  logstore?: string(name='logstore', example='my-logstore', position='Query'),
  offset?: int32(name='offset', example='0', position='Query'),
  size?: int32(name='size', description='The number of entries to return. Default value: 10.', example='100', position='Query'),
}

model ListMaxComputeExportsResponseBody = {
  count?: int32(name='count', example='2'),
  results?: [
    MaxComputeExport
  ](name='results'),
  total?: int32(name='total', example='10'),
}

model ListMaxComputeExportsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMaxComputeExportsResponseBody(name='body'),
}

/**
  * @description *   Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * *   An AccessKey pair is created and obtained. For more information, see [AccessKey pair](https://help.aliyun.com/document_detail/29009.html).
  * The AccessKey pair of an Alibaba Cloud account has permissions on all API operations. Using these credentials to perform operations in Simple Log Service is a high-risk operation. We recommend that you use a Resource Access Management (RAM) user to call API operations or perform routine O\\&M. To create a RAM user, log on to the RAM console. Make sure that the RAM user has the management permissions on Simple Log Service resources. For more information, see [Create a RAM user and authorize the RAM user to access Simple Log Service](https://help.aliyun.com/document_detail/47664.html).
  * *   The information that is required to query logs is obtained. The information includes the name of the project to which the logs belong and the region of the project. For more information, see [Manage a project](https://help.aliyun.com/document_detail/48984.html)
  * @param request  the request parameters of ListMaxComputeExports  ListMaxComputeExportsRequest
  * @return ListMaxComputeExportsResponse
 */
async function listMaxComputeExports(request: ListMaxComputeExportsRequest): ListMaxComputeExportsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListMaxComputeExports', 'GET', '/maxcomputeexports', 'json', false, 'json', request);
}

model ListMetricStoresRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='my-project', position='Host'),
  mode?: string(name='mode', description='The type of the Metricstore. For example, you can set the parameter to standard to query Standard Metricstores.', example='standard', position='Query'),
  name?: string(name='name', description='The name of the Metricstore. Fuzzy search is supported. If you do not specify this parameter, all Metricstores are involved.', example='metric_store', position='Query'),
  offset?: int32(name='offset', description='The start position of the query.', example='0', position='Query'),
  size?: int32(name='size', description='The number of entries per page.', example='500', position='Query'),
}

model ListMetricStoresResponseBody = {
  count?: int32(name='count', description='The total number of entries returned.', example='10'),
  metricstores?: [ string ](name='metricstores', description='The names of the Metricstores.'),
  total?: int32(name='total', description='The total number of queried Metricstores.', example='100'),
}

model ListMetricStoresResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMetricStoresResponseBody(name='body'),
}

/**
  * @description *   Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * *   An AccessKey pair is created and obtained. For more information, see [AccessKey pair](https://help.aliyun.com/document_detail/29009.html).
  * The AccessKey pair of an Alibaba Cloud account has permissions on all API operations. Using these credentials to perform operations in Simple Log Service is a high-risk operation. We recommend that you use a Resource Access Management (RAM) user to call API operations or perform routine O\\&M. To create a RAM user, log on to the RAM console. Make sure that the RAM user has the management permissions on Simple Log Service resources. For more information, see [Create a RAM user and authorize the RAM user to access Simple Log Service](https://help.aliyun.com/document_detail/47664.html).
  * *   The information that is required to query metric data is obtained. The information includes the name of the project to which the metric data belong and the region of the project. For more information, see [Manage a project](https://help.aliyun.com/document_detail/48984.html).
  * @param request  the request parameters of ListMetricStores  ListMetricStoresRequest
  * @return ListMetricStoresResponse
 */
async function listMetricStores(request: ListMetricStoresRequest): ListMetricStoresResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListMetricStores', 'GET', '/metricstores', 'json', false, 'none', request);
}

model ListOSSExportsRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  logstore?: string(name='logstore', position='Query'),
  offset?: int32(name='offset', example='0', position='Query'),
  size?: int32(name='size', description='The number of entries to return. Default value: 10.', example='100', position='Query'),
}

model ListOSSExportsResponseBody = {
  count?: int32(name='count', example='2'),
  results?: [
    OSSExport
  ](name='results'),
  total?: int32(name='total', example='10'),
}

model ListOSSExportsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListOSSExportsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListOSSExports  ListOSSExportsRequest
  * @return ListOSSExportsResponse
 */
async function listOSSExports(request: ListOSSExportsRequest): ListOSSExportsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListOSSExports', 'GET', '/ossexports', 'json', false, 'json', request);
}

model ListOSSHDFSExportsRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  logstore?: string(name='logstore', position='Query'),
  offset?: int32(name='offset', example='0', position='Query'),
  size?: int32(name='size', description='The number of entries to return. Default value: 10.', example='100', position='Query'),
}

model ListOSSHDFSExportsResponseBody = {
  count?: int32(name='count', example='2'),
  results?: [
    OSSExport
  ](name='results'),
  total?: int32(name='total', example='10'),
}

model ListOSSHDFSExportsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListOSSHDFSExportsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListOSSHDFSExports  ListOSSHDFSExportsRequest
  * @return ListOSSHDFSExportsResponse
 */
async function listOSSHDFSExports(request: ListOSSHDFSExportsRequest): ListOSSHDFSExportsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListOSSHDFSExports', 'GET', '/osshdfsexports', 'json', false, 'json', request);
}

model ListOSSIngestionsRequest {
  project?: string(name='project', description='This parameter is required.', example='ali-test-project', position='Host'),
  logstore?: string(name='logstore', position='Query'),
  offset?: int32(name='offset', example='0', position='Query'),
  size?: int32(name='size', example='10', position='Query'),
}

model ListOSSIngestionsResponseBody = {
  count?: int32(name='count', description='The number of OSS data import jobs that are returned.', example='10'),
  results?: [
    OSSIngestion
  ](name='results', description='The OSS data import jobs.'),
  total?: int32(name='total', description='The total number of OSS data import jobs in the project.', example='80'),
}

model ListOSSIngestionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListOSSIngestionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListOSSIngestions  ListOSSIngestionsRequest
  * @return ListOSSIngestionsResponse
 */
async function listOSSIngestions(request: ListOSSIngestionsRequest): ListOSSIngestionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListOSSIngestions', 'GET', '/ossingestions', 'json', false, 'json', request);
}

model ListProjectRequest {
  fetchQuota?: boolean(name='fetchQuota', position='Query'),
  offset?: int32(name='offset', description='The line from which the query starts. Default value: 0.', example='0', position='Query'),
  projectName?: string(name='projectName', description='The name of the project.', example='ali-test-project', position='Query'),
  resourceGroupId?: string(name='resourceGroupId', position='Query'),
  size?: int32(name='size', description='The number of entries per page. Default value: 100. This operation can return up to 500 projects.', example='10', position='Query'),
}

model ListProjectResponseBody = {
  count?: long(name='count', description='The number of returned projects on the current page.', example='2'),
  projects?: [
    Project
  ](name='projects', description='The projects that meet the query conditions.'),
  total?: long(name='total', description='The total number of projects that meet the query conditions.', example='11'),
}

model ListProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProjectResponseBody(name='body'),
}

/**
  * @description ### [](#)Usage notes
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * @param request  the request parameters of ListProject  ListProjectRequest
  * @return ListProjectResponse
 */
async function listProject(request: ListProjectRequest): ListProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProject', 'GET', '/', 'json', false, 'json', request);
}

model ListS3IngestionsRequest {
  project?: string(name='project', position='Host'),
  logstore?: string(name='logstore', position='Query'),
  offset?: string(name='offset', position='Query'),
  size?: string(name='size', position='Query'),
}

model ListS3IngestionsResponseBody = {
  count?: int32(name='count'),
  results?: [
    S3Ingestion
  ](name='results'),
  total?: int32(name='total'),
}

model ListS3IngestionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListS3IngestionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListS3Ingestions  ListS3IngestionsRequest
  * @return ListS3IngestionsResponse
 */
async function listS3Ingestions(request: ListS3IngestionsRequest): ListS3IngestionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListS3Ingestions', 'GET', '/s3ingestions', 'json', false, 'json', request);
}

model ListSavedSearchRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='aliyun-test-project', position='Host'),
  offset?: int32(name='offset', description='The line from which the query starts. Default value: 0.', example='0', position='Query'),
  size?: int32(name='size', description='The number of entries per page. Maximum value: 500.', example='10', position='Query'),
}

model ListSavedSearchResponseBody = {
  count?: int32(name='count', description='The number of saved searches returned on the current page.', example='4'),
  savedsearchItems?: [
    SavedSearch
  ](name='savedsearchItems', description='The saved searches.', example='[ "test-1", "test-2" ]'),
  total?: int32(name='total', description='The total number of saved searches that meet the query conditions.', example='4'),
}

model ListSavedSearchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSavedSearchResponseBody(name='body'),
}

/**
  * @description ### Usage notes
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * @param request  the request parameters of ListSavedSearch  ListSavedSearchRequest
  * @return ListSavedSearchResponse
 */
async function listSavedSearch(request: ListSavedSearchRequest): ListSavedSearchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSavedSearch', 'GET', '/savedsearches', 'json', false, 'json', request);
}

model ListScheduledSQLsRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  logstore?: string(name='logstore', description='The name of the Logstore.', example='ali-test-logstore', position='Query'),
  offset?: long(name='offset', example='0', position='Query'),
  size?: long(name='size', description='The number of entries to return. Default value: 10.', example='100', position='Query'),
}

model ListScheduledSQLsResponseBody = {
  count?: int32(name='count', example='10'),
  results?: [
    ScheduledSQL
  ](name='results'),
  total?: int32(name='total', example='80'),
}

model ListScheduledSQLsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListScheduledSQLsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListScheduledSQLs  ListScheduledSQLsRequest
  * @return ListScheduledSQLsResponse
 */
async function listScheduledSQLs(request: ListScheduledSQLsRequest): ListScheduledSQLsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListScheduledSQLs', 'GET', '/scheduledsqls', 'json', false, 'json', request);
}

model ListShardsRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='The name of the Logstore.

This parameter is required.', example='test-logstore', position='Path'),
}

model ListShardsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: [
    Shard
  ](name='body'),
}

/**
  * @param request  the request parameters of ListShards  ListShardsRequest
  * @return ListShardsResponse
 */
async function listShards(request: ListShardsRequest): ListShardsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListShards', 'GET', '/logstores/{logstore}/shards', 'json', false, 'json', request);
}

model ListStoreViewsRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='example-project', position='Host'),
  name?: string(name='name', description='The dataset name that is used for fuzzy match.', example='my_storeview', position='Query'),
  offset?: int32(name='offset', description='The offset of the datasets to return. Default value: 0.', example='0', position='Query'),
  size?: int32(name='size', description='The number of datasets to return. Default value: 100.', example='100', position='Query'),
  storeType?: string(name='storeType', description='The type of the datasets to return. By default, datasets are not filtered by type.

Valid values:

*   metricstore

    <!-- -->

    <!-- -->

    <!-- -->

*   logstore

    <!-- -->

    <!-- -->

    <!-- -->', example='logstore', position='Query'),
}

model ListStoreViewsResponseBody = {
  count?: int32(name='count', description='The number of returned datasets.', example='100'),
  storeviews?: [ string ](name='storeviews', description='The dataset names.'),
  total?: int32(name='total', description='The total number of datasets in the project.', example='100'),
}

model ListStoreViewsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListStoreViewsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListStoreViews  ListStoreViewsRequest
  * @return ListStoreViewsResponse
 */
async function listStoreViews(request: ListStoreViewsRequest): ListStoreViewsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListStoreViews', 'GET', '/storeviews', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  resourceId?: [ string ](name='resourceId', description='The IDs of the resources whose tags you want to query. You must specify at least one of resourceId and tags.', shrink='json', position='Query'),
  resourceType: string(name='resourceType', description='The type of the resource. Valid values:

*   project
*   logstore
*   dashboard
*   machinegroup
*   logtailconfig

This parameter is required.', example='project', position='Query'),
  tags?: [ 
    {
      key: string(name='key', description='The key of the tag that you want to use to filter resources. For example, if you set the key to `"test-key"`, only resources to which the key is added are returned.``

This parameter is required.', example='key1'),
      value?: string(name='value', description='The value of the tag that you want to use to filter resources. If you set the value to null, resources are filtered based only on the key of the tag.', example='value1'),
    }
  ](name='tags', description='The tags that you want to use to filter resources based on exact match. Each tag is a key-value pair. You must specify at least one of resourceId and tags.

You can enter up to 20 tags.', shrink='json', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='nextToken', description='The pagination token that is used in the next request to retrieve a new page of results.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  tagResources?: [ 
    {
      resourceId?: string(name='resourceId', description='The ID of the resource.', example='ali-test-project'),
      resourceType?: string(name='resourceType', description='The type of the resource.', example='project'),
      tagKey?: string(name='tagKey', description='The key of the tag.', example='key1'),
      tagValue?: string(name='tagValue', description='The value of the tag.', example='value1'),
    }
  ](name='tagResources', description='The returned tags.'),
}

model ListTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagResourcesResponseBody(name='body'),
}

/**
  * @description ### Usage notes
  * * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * * An AccessKey pair is created and obtained. For more information, see [AccessKey pair](https://help.aliyun.com/document_detail/29009.html).
  * The AccessKey pair of an Alibaba Cloud account has permissions on all API operations. Using these credentials to perform operations in Simple Log Service is a high-risk operation. We recommend that you use a Resource Access Management (RAM) user to call API operations or perform routine O&#x26;M. To create a RAM user, log on to the RAM console. Make sure that the RAM user has the management permissions on Simple Log Service resources. For more information, see [Create a RAM user and authorize the RAM user to access Simple Log Service](https://help.aliyun.com/document_detail/47664.html).
  * * The information that is required to query logs is obtained. The information includes the name of the project to which the logs belong and the region of the project. For more information, see [Manage a project](https://help.aliyun.com/document_detail/48984.html)
  * * For more information, see [Authorization rules](https://help.aliyun.com/document_detail/29049.html). The following types of resources are supported: project, Logstore, dashboard, machine group, and Logtail configuration.
  * ### Authentication resources
  * The following table describes the authorization information that is required for this operation. You can add the information to the Action element of a RAM policy statement to grant a RAM user or a RAM role the permissions to call this operation.
  * |Action|Resource|
  * |:---|:---|
  * |`log:ListTagResources`|The resource format varies based on the resource type.\\-`acs:log:{#regionId}:{#accountId}:project/{#ProjectName}`\\-`acs:log:${regionName}:${accountId}:project/${projectName}/logstore/${logstoreName}`\\-`acs:log:${regionName}:${accountId}:project/${projectName}/dashboard/${dashboardName}`\\-`acs:log:${regionName}:${accountId}:project/${projectName}/machinegroup/${machineGroupName}`\\-`acs:log:${regionName}:${accountId}:project/${projectName}/logtailconfig/${logtailConfigName}`|
  * @param request  the request parameters of ListTagResources  ListTagResourcesRequest
  * @return ListTagResourcesResponse
 */
async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTagResources', 'GET', '/tags', 'json', false, 'json', request);
}

model MergeShardRequest {
  project?: string(name='project', description='This parameter is required.', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='This parameter is required.', example='ali-test-logstore', position='Path'),
  shard: int32(name='shard', description='Shard ID。

This parameter is required.', example='3', position='Path'),
}

model MergeShardResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: [
    Shard
  ](name='body'),
}

/**
  * @param request  the request parameters of MergeShard  MergeShardRequest
  * @return MergeShardResponse
 */
async function mergeShard(request: MergeShardRequest): MergeShardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'MergeShard', 'POST', '/logstores/{logstore}/shards/{shard}?action=merge', 'json', false, 'json', request);
}

model OpenSlsServiceRequest {
}

model OpenSlsServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of OpenSlsService  OpenSlsServiceRequest
  * @return OpenSlsServiceResponse
 */
async function openSlsService(request: OpenSlsServiceRequest): OpenSlsServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'OpenSlsService', 'POST', '/slsservice', 'none', false, 'json', request);
}

model PullLogsRequest {
  project: string(name='project', description='This parameter is required.', example='ali-test-project', position='Path'),
  logStore: string(name='logStore', description='This parameter is required.', example='ali-test-logstore', position='Path'),
  shardId: int32(name='shardId', description='This parameter is required.', example='1', position='Path'),
  acceptEncoding?: string(name='Accept-Encoding', example='lz4', position='Header'),
  count: int32(name='count', description='This parameter is required.', example='1000', minimum=1, maximum=1000, position='Query'),
  cursor: string(name='cursor', description='This parameter is required.', example='MTQ0NzMyOTQwMTEwMjEzMDkwNA', position='Query'),
  endCursor?: string(name='end_cursor', example='MTU1NzA1NzQwMTEwMjEzMDkwCg', position='Query'),
  query?: string(name='query', description='The SPL statement that is used to filter data. For more information, see [SPL instructions](https://help.aliyun.com/document_detail/2536530.html).', example='* | where userId=\\"123\\"', position='Query'),
}

model PullLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: LogGroupList  
}

/**
  * @description **
  * **Warning** You cannot call this operation in OpenAPI Explorer. You can use Simple Log Service SDK to call this operation. For more information, see SLS SDK Reference.
  * *   You must specify a shard when you query the logs.
  * *   You can query only logs in the Protocol Buffers (protobuf) format. For more information, see [Data encoding](https://help.aliyun.com/document_detail/29055.html).
  * *   Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * @param request  the request parameters of PullLogs  PullLogsRequest
  * @return PullLogsResponse
 */
async function pullLogs(request: PullLogsRequest): PullLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PullLogs', 'GET', '/logstores/{logStore}/shards/{shardId}?type=log', 'none', false, 'none', request);
}

model PutAnnotationDataRequest {
  datasetId?: string(name='datasetId', description='The unique identifier of the dataset.', example='cb8cc4eb51a85e823471cdb368fae9be', position='Path'),
  annotationdataId?: string(name='annotationdataId', description='The unique identifier of the data.', example='2156d560fc7c01420542df92cd6365ds', position='Query'),
  mlDataParam?: MLDataParam(name='mlDataParam', description='The data structure of the request.', position='Body'),
  rawLog?: [ map[string]string ](name='rawLog', description='The raw log data.', position='Body'),
}

model PutAnnotationDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of PutAnnotationData  PutAnnotationDataRequest
  * @return PutAnnotationDataResponse
 */
async function putAnnotationData(request: PutAnnotationDataRequest): PutAnnotationDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PutAnnotationData', 'PUT', '/ml/annotationdataset/{datasetId}/annotationdata', 'none', false, 'json', request);
}

model PutConsumeProcessorRequest {
  project?: string(name='project', description='This parameter is required.', position='Host'),
  processorName: string(name='processorName', description='The identifier of the consumption processor.

This parameter is required.', example='consume-processor-1', position='Path'),
  configuration: ConsumeProcessorConfiguration(name='configuration', description='Consumption processor configuration.

This parameter is required.', position='Body'),
  description?: string(name='description', description='The description.', position='Body'),
  displayName: string(name='displayName', description='The display name.

This parameter is required.', example='filter-get-request', position='Body'),
}

model PutConsumeProcessorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of PutConsumeProcessor  PutConsumeProcessorRequest
  * @return PutConsumeProcessorResponse
 */
async function putConsumeProcessor(request: PutConsumeProcessorRequest): PutConsumeProcessorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PutConsumeProcessor', 'PUT', '/consumeprocessors/{processorName}', 'none', false, 'json', request);
}

model PutIngestProcessorRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  processorName: string(name='processorName', description='The identifier of the ingest processor.

This parameter is required.', example='parse-nginx-log', position='Path'),
  configuration: IngestProcessorConfiguration(name='configuration', description='The configuration of the ingest processor.

This parameter is required.', position='Body'),
  description?: string(name='description', description='The description of the ingest processor.', position='Body'),
  displayName: string(name='displayName', description='The display name of the ingest processor.

This parameter is required.', position='Body'),
}

model PutIngestProcessorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of PutIngestProcessor  PutIngestProcessorRequest
  * @return PutIngestProcessorResponse
 */
async function putIngestProcessor(request: PutIngestProcessorRequest): PutIngestProcessorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PutIngestProcessor', 'PUT', '/ingestprocessors/{processorName}', 'none', false, 'json', request);
}

model PutLogsRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='The name of the Logstore.

This parameter is required.', example='ali-test-logstore', position='Path'),
  body?: LogGroup(name='body', description='The compressed Protobuf data.', position='Body'),
  xLogCompresstype: string(name='x-log-compresstype', description='The compression format. lz4 and gzip are supported.

This parameter is required.', example='lz4', position='Header'),
}

model PutLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description **
  * **Warning** You cannot call this operation in OpenAPI Explorer. You can use Simple Log Service SDK to call this operation. For more information, see SLS SDK Reference.
  * *   When you call the PutLogs operation to write logs to Simple Log Service, Simple Log Servicechecks the format of the logs. If a log does not meet the format requirements, the request fails and no logs are written to Simple Log Service.
  * *   You can write logs only in the Protocol Buffers (Protobuf) format as log groups. For more information, see [Data encoding](https://help.aliyun.com/document_detail/29055.html).
  * *   You can write logs in one of the following modes:
  *     *   LoadBalance mode: In this mode, Log Service automatically writes logs to all writable shards in a Logstore. This mode delivers high availability for write operations and is suitable for data consumption scenarios in which you do not need to preserve the order of logs.
  *     *   KeyHash: In this mode, a key field is added in the URL parameter. Log Service writes logs to a shard based on the key field. The hash key is optional. If you do not configure the hash key, logs are written to shards in LoadBalance mode. For example, you can use the KeyHash mode to write data from a producer, such as an instance, to the shard whose hash value range includes the hash value of the producer name. This ensures that the data that is written to the shard is ordered and the data in the shard is consumed based on the order. This way, when a shard is split or when shards are merged, the data that is associated with the same hash key is stored only in one shard at a point in time. For more information, see [Shard](https://help.aliyun.com/document_detail/28976.html).
  * *   You can call the PutLogs operation to write up to 10 MB of raw logs at a time. We recommend that you keep the total size of the values for each log in a log group to or below 1 MB. Historical versions of SDKs may have different limits. We recommend that you upgrade your SDK to the latest version.
  * *   The references for Log Service SDK for Java and Log Service SDK for Python provide examples on how to call the PutLogs operation. For more information, see [Get started with Simple Log Service SDK for Java](https://help.aliyun.com/document_detail/279525.html) and [Get started with Simple Log Service SDK for Python](https://help.aliyun.com/document_detail/284638.html).
  * @param request  the request parameters of PutLogs  PutLogsRequest
  * @return PutLogsResponse
 */
async function putLogs(request: PutLogsRequest): PutLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PutLogs', 'POST', '/logstores/{logstore}/shards/lb', 'none', false, 'none', request);
}

model PutProjectPolicyRequest {
  project?: string(name='project', example='ali-test-project', position='Host'),
  body?: string(name='body', description='The project policy.', example='{ 	"Version": "1", 	"Statement": [{ 		"Action": ["log:PostLogStoreLogs"], 		"Resource": "acs:log:*:*:project/exampleproject/*", 		"Effect": "Deny", 		"Condition": { 			"StringNotLike": { 				"acs:SourceVpc": ["vpc-*"] 			} 		} 	}] }', position='Body'),
}

model PutProjectPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description ### Usage notes
  * *   Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * *   Alibaba Cloud Simple Log Service allows you to configure a project policy to authorize other users to access the specified Log Service resources.
  *     *   You must configure a project policy based on policy syntax. Before you configure a project policy, you must be familiar with the Action, Resource, and Condition parameters. For more information, see [RAM](https://help.aliyun.com/document_detail/128139.html).
  *     *   If you set the Principal element to an asterisk (\\*) and do not configure the Condition element when you configure a project policy, the policy applies to all users except for the project owner. If you set the Principal element to an asterisk (\\*) and configure the Condition element when you configure a project policy, the policy applies to all users including the project owner.
  *     *   You can configure multiple project policies for a project. The total size of the policies cannot exceed 16 KB.
  * @param request  the request parameters of PutProjectPolicy  PutProjectPolicyRequest
  * @return PutProjectPolicyResponse
 */
async function putProjectPolicy(request: PutProjectPolicyRequest): PutProjectPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PutProjectPolicy', 'POST', '/policy', 'none', false, 'json', request);
}

model PutProjectTransferAccelerationRequest {
  project?: string(name='project', description='This parameter is required.', position='Host'),
  enabled: boolean(name='enabled', description='Whether to enable transfer acceleration.

This parameter is required.', example='true', position='Body'),
}

model PutProjectTransferAccelerationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of PutProjectTransferAcceleration  PutProjectTransferAccelerationRequest
  * @return PutProjectTransferAccelerationResponse
 */
async function putProjectTransferAcceleration(request: PutProjectTransferAccelerationRequest): PutProjectTransferAccelerationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PutProjectTransferAcceleration', 'PUT', '/transferacceleration', 'none', false, 'json', request);
}

model PutWebtrackingRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  logstoreName: string(name='logstoreName', description='The name of the Logstore.

This parameter is required.', example='ali-test-logstore', position='Path'),
  logs: [ map[string]string ](name='__logs__', description='The logs. Each element is a JSON object that indicates a log.

>  **Note**: The time in a log that is collected by using the web tracking feature is the time at which Simple Log Service receives the log. You do not need to configure the __time__ field for each log. If this field exists, it is overwritten by the time at which Simple Log Service receives the log.

This parameter is required.', position='Body'),
  source: string(name='__source__', description='The source of the logs.

This parameter is required.', example='source', position='Body'),
  tags?: map[string]string(name='__tags__', description='The tags of the logs.', position='Body'),
  topic?: string(name='__topic__', description='The topic of the logs.', example='topic', position='Body'),
}

model PutWebtrackingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description ### [](#)Usage notes
  * *   The information that is required to query logs is obtained. The information includes the name of the project to which the logs belong, the region of the project, and the name of the Logstore to which the logs belong. For more information, see [Manage a project](https://help.aliyun.com/document_detail/48984.html) and [Manage a Logstore](https://help.aliyun.com/document_detail/48990.html).
  * *   You can call this operation to collect logs from web pages or clients.
  * *   If you use web tracking to collect logs and you do not call this operation, you can send only one log to Simple Log Service in a request. For more information, see [Use web tracking to collect logs](https://help.aliyun.com/document_detail/31752.html).
  * *   If you want to collect a large amount of log data, you can call this operation to send multiple logs to Simple Log Service in one request.
  * *   Before you can call this operation to send logs to a Logstore, you must enable web tracking for the Logstore. For more information, see [Use web tracking to collect logs](https://help.aliyun.com/document_detail/31752.html).
  * *   You cannot call this operation to send the logs of multiple topics to Simple Log Service at a time.
  * *   If you call this operation, anonymous users from the Internet are granted the write permissions on the Logstore. This may generate dirty data because AccessKey pair-based authentication is not performed.
  * @param request  the request parameters of PutWebtracking  PutWebtrackingRequest
  * @return PutWebtrackingResponse
 */
async function putWebtracking(request: PutWebtrackingRequest): PutWebtrackingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PutWebtracking', 'POST', '/logstores/{logstoreName}/track', 'none', false, 'json', request);
}

model RefreshTokenRequest {
  accessTokenExpirationTime?: long(name='accessTokenExpirationTime', description='*   The validity period of the access token. Unit: seconds. Default value: 86400, which specifies one day. Valid values: 0 to 86400.
*   The validity period of the access token is the smaller value between accessTokenExpirationTime and expirationTime.
*   If you use a Security Token Service (STS) token to call this operation, the validity period of the access token is the smallest value among accessTokenExpirationTime, expirationTime, and the validity period of the STS token.', example='600', position='Query'),
  ticket?: string(name='ticket', description='The ticket that is used for logon-free access.', example='eyJ***************.eyJ******************.KUT****************', position='Query'),
}

model RefreshTokenResponseBody = {
  accessToken?: string(name='accessToken', example='eyJ***************.eyJ******************.KUT****************'),
}

model RefreshTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RefreshTokenResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RefreshToken  RefreshTokenRequest
  * @return RefreshTokenResponse
 */
async function refreshToken(request: RefreshTokenRequest): RefreshTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RefreshToken', 'POST', '/token/refresh', 'json', false, 'json', request);
}

model RemoveConfigFromMachineGroupRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  machineGroup: string(name='machineGroup', description='The name of the machine group.

This parameter is required.', example='test-group', position='Path'),
  configName: string(name='configName', description='The name of the Logtail configuration.

This parameter is required.', example='test-logtail', position='Path'),
}

model RemoveConfigFromMachineGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * @param request  the request parameters of RemoveConfigFromMachineGroup  RemoveConfigFromMachineGroupRequest
  * @return RemoveConfigFromMachineGroupResponse
 */
async function removeConfigFromMachineGroup(request: RemoveConfigFromMachineGroupRequest): RemoveConfigFromMachineGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RemoveConfigFromMachineGroup', 'DELETE', '/machinegroups/{machineGroup}/configs/{configName}', 'none', false, 'json', request);
}

model SplitShardRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='The name of the Logstore.

This parameter is required.', example='logstorename', position='Path'),
  shard: int32(name='shard', description='The ID of the shard.

This parameter is required.', example='0', position='Path'),
  key?: string(name='key', description='The position where the shard is split.', example='ef000000000000000000000000000000', position='Query'),
  shardCount?: int32(name='shardCount', description='The number of new shards that are generated after splitting.', example='2', position='Query'),
}

model SplitShardResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: [
    Shard
  ](name='body'),
}

/**
  * @description ### Usage notes
  * *   Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * *   Each shard has an MD5 hash range, and each range is a left-closed, right-open interval. The interval is in the `[BeginKey,EndKey)` format. A shard can be in the readwrite or readonly state. You can split a shard and merge shards. For more information, see [Shard](https://help.aliyun.com/document_detail/28976.html).
  * @param request  the request parameters of SplitShard  SplitShardRequest
  * @return SplitShardResponse
 */
async function splitShard(request: SplitShardRequest): SplitShardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SplitShard', 'POST', '/logstores/{logstore}/shards/{shard}?action=split', 'json', false, 'json', request);
}

model StartETLRequest {
  project?: string(name='project', example='ali-test-project', position='Host'),
  etlName?: string(name='etlName', example='etl-123456', position='Path'),
}

model StartETLResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of StartETL  StartETLRequest
  * @return StartETLResponse
 */
async function startETL(request: StartETLRequest): StartETLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartETL', 'PUT', '/etls/{etlName}?action=START', 'none', false, 'json', request);
}

model StartMaxComputeExportRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='my-project', position='Host'),
  mcExportName: string(name='mcExportName', description='The unique name of the job. Make sure that the job exists.

This parameter is required.', example='export-mc-1234567890-123456', position='Path'),
}

model StartMaxComputeExportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description *   Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * *   An AccessKey pair is created and obtained. For more information, see [AccessKey pair](https://help.aliyun.com/document_detail/29009.html).
  * The AccessKey pair of an Alibaba Cloud account has permissions on all API operations. Using these credentials to perform operations in Simple Log Service is a high-risk operation. We recommend that you use a Resource Access Management (RAM) user to call API operations or perform routine O\\&M. To create a RAM user, log on to the RAM console. Make sure that the RAM user has the management permissions on Simple Log Service resources. For more information, see [Create a RAM user and authorize the RAM user to access Simple Log Service](https://help.aliyun.com/document_detail/47664.html).
  * *   The information that is required to query logs is obtained. The information includes the name of the project to which the logs belong and the region of the project. For more information, see [Manage a project](https://help.aliyun.com/document_detail/48984.html).
  * @param request  the request parameters of StartMaxComputeExport  StartMaxComputeExportRequest
  * @return StartMaxComputeExportResponse
 */
async function startMaxComputeExport(request: StartMaxComputeExportRequest): StartMaxComputeExportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartMaxComputeExport', 'PUT', '/maxcomputeexports/{mcExportName}?action=START', 'none', false, 'json', request);
}

model StartOSSExportRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  ossExportName: string(name='ossExportName', description='The unique name of the job. Make sure that the job exists.

This parameter is required.', example='job-123456789-123456', position='Path'),
}

model StartOSSExportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of StartOSSExport  StartOSSExportRequest
  * @return StartOSSExportResponse
 */
async function startOSSExport(request: StartOSSExportRequest): StartOSSExportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartOSSExport', 'PUT', '/ossexports/{ossExportName}?action=START', 'none', false, 'json', request);
}

model StartOSSHDFSExportRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  ossExportName: string(name='ossExportName', description='The unique name of the job. Make sure that the job exists.

This parameter is required.', example='job-123456789-123456', position='Path'),
}

model StartOSSHDFSExportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of StartOSSHDFSExport  StartOSSHDFSExportRequest
  * @return StartOSSHDFSExportResponse
 */
async function startOSSHDFSExport(request: StartOSSHDFSExportRequest): StartOSSHDFSExportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartOSSHDFSExport', 'PUT', '/osshdfsexports/{ossExportName}?action=START', 'none', false, 'json', request);
}

model StartOSSIngestionRequest {
  project?: string(name='project', description='This parameter is required.', example='ali-test-project', position='Host'),
  ossIngestionName: string(name='ossIngestionName', description='This parameter is required.', example='ingest-oss-123456', position='Path'),
}

model StartOSSIngestionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of StartOSSIngestion  StartOSSIngestionRequest
  * @return StartOSSIngestionResponse
 */
async function startOSSIngestion(request: StartOSSIngestionRequest): StartOSSIngestionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartOSSIngestion', 'PUT', '/ossingestions/{ossIngestionName}?action=START', 'none', false, 'json', request);
}

model StopETLRequest {
  project?: string(name='project', example='ali-test-project', position='Host'),
  etlName?: string(name='etlName', example='etl-123456', position='Path'),
}

model StopETLResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of StopETL  StopETLRequest
  * @return StopETLResponse
 */
async function stopETL(request: StopETLRequest): StopETLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopETL', 'PUT', '/etls/{etlName}?action=STOP', 'none', false, 'json', request);
}

model StopMaxComputeExportRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='my-project', position='Host'),
  mcExportName: string(name='mcExportName', description='The unique name of the job. Make sure that the job exists.

This parameter is required.', example='export-mc-1234567890-123456', position='Path'),
}

model StopMaxComputeExportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description *   Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * *   An AccessKey pair is created and obtained. For more information, see [AccessKey pair](https://help.aliyun.com/document_detail/29009.html).
  * The AccessKey pair of an Alibaba Cloud account has permissions on all API operations. Using these credentials to perform operations in Simple Log Service is a high-risk operation. We recommend that you use a Resource Access Management (RAM) user to call API operations or perform routine O\\&M. To create a RAM user, log on to the RAM console. Make sure that the RAM user has the management permissions on Simple Log Service resources. For more information, see [Create a RAM user and authorize the RAM user to access Simple Log Service](https://help.aliyun.com/document_detail/47664.html).
  * *   The information that is required to query logs is obtained. The information includes the name of the project to which the logs belong and the region of the project. For more information, see [Manage a project](https://help.aliyun.com/document_detail/48984.html)
  * @param request  the request parameters of StopMaxComputeExport  StopMaxComputeExportRequest
  * @return StopMaxComputeExportResponse
 */
async function stopMaxComputeExport(request: StopMaxComputeExportRequest): StopMaxComputeExportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopMaxComputeExport', 'PUT', '/maxcomputeexports/{mcExportName}?action=STOP', 'none', false, 'json', request);
}

model StopOSSExportRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  ossExportName: string(name='ossExportName', description='The unique name of the job. Make sure that the job exists.

This parameter is required.', example='job-123456789-123456', position='Path'),
}

model StopOSSExportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of StopOSSExport  StopOSSExportRequest
  * @return StopOSSExportResponse
 */
async function stopOSSExport(request: StopOSSExportRequest): StopOSSExportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopOSSExport', 'PUT', '/ossexports/{ossExportName}?action=STOP', 'none', false, 'json', request);
}

model StopOSSHDFSExportRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  ossExportName: string(name='ossExportName', description='The unique name of the job. Make sure that the job exists.

This parameter is required.', example='job-123456789-123456', position='Path'),
}

model StopOSSHDFSExportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of StopOSSHDFSExport  StopOSSHDFSExportRequest
  * @return StopOSSHDFSExportResponse
 */
async function stopOSSHDFSExport(request: StopOSSHDFSExportRequest): StopOSSHDFSExportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopOSSHDFSExport', 'PUT', '/osshdfsexports/{ossExportName}?action=STOP', 'none', false, 'json', request);
}

model StopOSSIngestionRequest {
  project?: string(name='project', description='This parameter is required.', example='ali-test-project', position='Host'),
  ossIngestionName: string(name='ossIngestionName', description='This parameter is required.', example='ingest-oss-123456', position='Path'),
}

model StopOSSIngestionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of StopOSSIngestion  StopOSSIngestionRequest
  * @return StopOSSIngestionResponse
 */
async function stopOSSIngestion(request: StopOSSIngestionRequest): StopOSSIngestionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopOSSIngestion', 'PUT', '/ossingestions/{ossIngestionName}?action=STOP', 'none', false, 'json', request);
}

model TagResourcesRequest {
  resourceId: [ string ](name='resourceId', description='The resource IDs. You can specify only one resource and add tags to the resource.

This parameter is required.', position='Body'),
  resourceType: string(name='resourceType', description='The type of the resource. Valid values:

*   project
*   logstore
*   dashboard
*   machinegroup
*   logtailconfig

This parameter is required.', example='project', position='Body'),
  tags: [ 
    {
      key: string(name='key', description='The key of the tag. The key must meet the following requirements:

*   The key must be `1 to 128` characters in length.
*   The key cannot contain `http://` or `https://`.
*   The key cannot start with `acs:` or `aliyun`.

This parameter is required.', example='key1'),
      value: string(name='value', description='The value of the tag. The value must meet the following requirements:

*   The value must be `1 to 128` characters in length.
*   The value cannot contain `http://` or `https://`.

This parameter is required.', example='value1'),
    }
  ](name='tags', description='The tags that you want to add to the resource. You can specify up to 20 tags in each call. Each tag is a key-value pair.

This parameter is required.', position='Body'),
}

model TagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description ### Usage notes
  * * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * * An AccessKey pair is created and obtained. For more information, see [AccessKey pair](https://help.aliyun.com/document_detail/29009.html).
  * The AccessKey pair of an Alibaba Cloud account has permissions on all API operations. Using these credentials to perform operations in Simple Log Service is a high-risk operation. We recommend that you use a Resource Access Management (RAM) user to call API operations or perform routine O&#x26;M. To create a RAM user, log on to the RAM console. Make sure that the RAM user has the management permissions on Simple Log Service resources. For more information, see [Create a RAM user and authorize the RAM user to access Simple Log Service](https://help.aliyun.com/document_detail/47664.html).
  * * The information that is required to query logs is obtained. The information includes the name of the project to which the logs belong and the region of the project. For more information, see [Manage a project](https://help.aliyun.com/document_detail/48984.html)
  * * For more information, see [Authorization rules](https://help.aliyun.com/document_detail/29049.html). The following types of resources are supported: project, Logstore, dashboard, machine group, and Logtail configuration.
  * ### Authentication resources
  * The following table describes the authorization information that is required for this operation. You can add the information to the Action element of a RAM policy statement to grant a RAM user or a RAM role the permissions to call this operation.
  * |Action|Resource|
  * |:---|:---|
  * |`log:TagResources`|The resource format varies based on the resource type.\\-`acs:log:{#regionId}:{#accountId}:project/{#ProjectName}`\\-`acs:log:${regionName}:${accountId}:project/${projectName}/logstore/${logstoreName}`\\-`acs:log:${regionName}:${accountId}:project/${projectName}/dashboard/${dashboardName}`\\-`acs:log:${regionName}:${accountId}:project/${projectName}/machinegroup/${machineGroupName}`\\-`acs:log:${regionName}:${accountId}:project/${projectName}/logtailconfig/${logtailConfigName}`|
  * @param request  the request parameters of TagResources  TagResourcesRequest
  * @return TagResourcesResponse
 */
async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'TagResources', 'POST', '/tag', 'none', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='all', description='Specifies whether to unbind all tags. Default value: false. Valid values:

*   false: unbinds only the tags that match the value of tags.
*   true: unbinds all tags that are bound to the resource.', example='false', position='Body'),
  resourceId: [ string ](name='resourceId', description='The resource IDs. Each time you call this operation, you can unbind tags only from a single resource. Therefore, you can enter only one resource ID.

This parameter is required.', example='ali-test-project', position='Body'),
  resourceType?: string(name='resourceType', description='The type of the resource. Valid values:

*   project
*   logstore
*   dashboard
*   machinegroup
*   logtailconfig', example='project', position='Body'),
  tags?: [ string ](name='tags', description='The tag keys. If you set all to false, only the tags that match the value of this parameter are unbound.', position='Body'),
}

model UntagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description ### Usage notes
  * * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * * An AccessKey pair is created and obtained. For more information, see [AccessKey pair](https://help.aliyun.com/document_detail/29009.html).
  * The AccessKey pair of an Alibaba Cloud account has permissions on all API operations. Using these credentials to perform operations in Simple Log Service is a high-risk operation. We recommend that you use a Resource Access Management (RAM) user to call API operations or perform routine O&#x26;M. To create a RAM user, log on to the RAM console. Make sure that the RAM user has the management permissions on Simple Log Service resources. For more information, see [Create a RAM user and authorize the RAM user to access Simple Log Service](https://help.aliyun.com/document_detail/47664.html).
  * * The information that is required to query logs is obtained. The information includes the name of the project to which the logs belong and the region of the project. For more information, see [Manage a project](https://help.aliyun.com/document_detail/48984.html) For more information, see [Authorization rules](https://help.aliyun.com/document_detail/29049.html). The following types of resources are supported: project, Logstore, dashboard, machine group, and Logtail configuration.
  * ### Authentication resources
  * The following table describes the authorization information that is required for this operation. You can add the information to the Action element of a RAM policy statement to grant a RAM user or a RAM role the permissions to call this operation.
  * |Action|Resource|
  * |:---|:---|
  * |`log:UntagResources`|The resource format varies based on the resource type.\\-`acs:log:{#regionId}:{#accountId}:project/{#ProjectName}`\\-`acs:log:${regionName}:${accountId}:project/${projectName}/logstore/${logstoreName}`\\-`acs:log:${regionName}:${accountId}:project/${projectName}/dashboard/${dashboardName}`\\-`acs:log:${regionName}:${accountId}:project/${projectName}/machinegroup/${machineGroupName}`\\-`acs:log:${regionName}:${accountId}:project/${projectName}/logtailconfig/${logtailConfigName}`|
  * @param request  the request parameters of UntagResources  UntagResourcesRequest
  * @return UntagResourcesResponse
 */
async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UntagResources', 'POST', '/untag', 'none', false, 'json', request);
}

model UpdateAgentInstanceConfigRequest {
  configType: string(name='configType', description='This parameter is required.', position='Path'),
  attributes?: map[string]string(name='attributes', shrink='json', position='Query'),
  config: string(name='config', description='This parameter is required.', position='Body'),
  grayConfigs?: [
    AgentInstanceConfigGrayConfigs
  ](name='grayConfigs', position='Body'),
}

model UpdateAgentInstanceConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of UpdateAgentInstanceConfig  UpdateAgentInstanceConfigRequest
  * @return UpdateAgentInstanceConfigResponse
 */
async function updateAgentInstanceConfig(request: UpdateAgentInstanceConfigRequest): UpdateAgentInstanceConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateAgentInstanceConfig', 'PUT', '/agentinstanceconfigs/{configType}', 'none', false, 'json', request);
}

model UpdateAlertRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  alertName: string(name='alertName', description='The ID of the alert rule.

This parameter is required.', example='alert-0123456789-123456', position='Path'),
  configuration: AlertConfiguration(name='configuration', description='The detailed configurations of the alert rule.

This parameter is required.', position='Body'),
  description?: string(name='description', description='The description of the alert rule.', example='this is description', position='Body'),
  displayName: string(name='displayName', description='The display name of the alert rule.

This parameter is required.', example='this is alert', position='Body'),
  schedule: Schedule(name='schedule', description='The scheduling settings of the alert rule.

This parameter is required.', position='Body'),
}

model UpdateAlertResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of UpdateAlert  UpdateAlertRequest
  * @return UpdateAlertResponse
 */
async function updateAlert(request: UpdateAlertRequest): UpdateAlertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateAlert', 'PUT', '/alerts/{alertName}', 'none', false, 'json', request);
}

model UpdateAnnotationDataSetRequest {
  datasetId?: string(name='datasetId', description='The unique identifier of the dataset.', example='cb8cc4eb51a85e823471cdb368fae9be', position='Path'),
  body?: MLDataSetParam(name='body', description='The data structure of the request.', position='Body'),
}

model UpdateAnnotationDataSetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of UpdateAnnotationDataSet  UpdateAnnotationDataSetRequest
  * @return UpdateAnnotationDataSetResponse
 */
async function updateAnnotationDataSet(request: UpdateAnnotationDataSetRequest): UpdateAnnotationDataSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateAnnotationDataSet', 'PUT', '/ml/annotationdataset/{datasetId}', 'none', false, 'json', request);
}

model UpdateAnnotationLabelRequest {
  body?: MLLabelParam(name='body', description='The data structure of the request.', position='Body'),
}

model UpdateAnnotationLabelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description You can update only the names of the tags in a tag set.
  * @param request  the request parameters of UpdateAnnotationLabel  UpdateAnnotationLabelRequest
  * @return UpdateAnnotationLabelResponse
 */
async function updateAnnotationLabel(request: UpdateAnnotationLabelRequest): UpdateAnnotationLabelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateAnnotationLabel', 'PUT', '/ml/annotationlabel', 'none', false, 'json', request);
}

model UpdateConfigRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  configName: string(name='configName', description='The name of the Logtail configuration file.

This parameter is required.', example='config-sample', position='Path'),
  body?: LogtailConfig(name='body', description='The body of the request.', position='Body'),
}

model UpdateConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description ### [](#)Usage notes
  * *   Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * *   After you update a Logtail configuration that is applied to a machine group, the new configuration immediately takes effect.
  * *   An AccessKey pair is created and obtained. For more information, see [AccessKey pair](https://help.aliyun.com/document_detail/29009.html).
  * The AccessKey pair of an Alibaba Cloud account has permissions on all API operations. Using these credentials to perform operations in Simple Log Service is a high-risk operation. We recommend that you use a RAM user to call API operations or perform routine O\\&M. To create a RAM user, log on to the RAM console. Make sure that the RAM user has the management permissions on Simple Log Service resources. For more information, see [Create a RAM user and authorize the RAM user to access Simple Log Service](https://help.aliyun.com/document_detail/47664.html).
  * *   The information that is required to query logs is obtained. The information includes the name of the project to which the logs belong and the region of the project. For more information, see [Manage a project](https://help.aliyun.com/document_detail/48984.html).
  * *   The Logtail configuration is planned out. For more information, see [Logtail configurations](https://help.aliyun.com/document_detail/29058.html).
  * @param request  the request parameters of UpdateConfig  UpdateConfigRequest
  * @return UpdateConfigResponse
 */
async function updateConfig(request: UpdateConfigRequest): UpdateConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateConfig', 'PUT', '/configs/{configName}', 'none', false, 'json', request);
}

model UpdateConsumerGroupRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='The name of the Logstore.

This parameter is required.', example='logstore-test', position='Path'),
  consumerGroup: string(name='consumerGroup', description='The name of the consumer group.

This parameter is required.', example='consumer-group-1', position='Path'),
  order?: boolean(name='order', description='Specifies whether to consume data in sequence. Valid values:

*   true: If a shard is split, the data in the original shard is consumed first. Then, the data in the new shards is consumed at the same time. If shards are merged, the data in the original shards is consumed first. Then, the data in the new shard is consumed.
*   false: The data in all shards is consumed at the same time. If a new shard is generated after a shard is split or shards are merged, the data in the new shard is immediately consumed.', example='true', position='Body'),
  timeout?: int32(name='timeout', description='The timeout period. If Simple Log Service does not receive heartbeats from a consumer within the timeout period, Simple Log Service deletes the consumer. Unit: seconds', example='300', position='Body'),
}

model UpdateConsumerGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description ### Usage notes
  * * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * * An AccessKey pair is created and obtained. For more information, see [AccessKey pair](https://help.aliyun.com/document_detail/29009.html).
  * The AccessKey pair of an Alibaba Cloud account has permissions on all API operations. Using these credentials to perform operations in Simple Log Service is a high-risk operation. We recommend that you use a Resource Access Management (RAM) user to call API operations or perform routine O&#x26;M. To create a RAM user, log on to the RAM console. Make sure that the RAM user has the management permissions on Simple Log Service resources. For more information, see [Create a RAM user and authorize the RAM user to access Simple Log Service](https://help.aliyun.com/document_detail/47664.html).
  * * The information that is required to query logs is obtained. The information includes the name of the project to which the logs belong, the region of the project, and the name of the Logstore to which the logs belong. For more information, see [Manage a project](https://help.aliyun.com/document_detail/48984.html) and [Manage a Logstore](https://help.aliyun.com/document_detail/48990.html).
  * ### Authentication resources
  * The following table describes the authorization information that is required for this operation. You can add the information to the Action element of a RAM policy statement to grant a RAM user or a RAM role the permissions to call this operation.
  * |Action|Resource|
  * |:---|:---|
  * |`log:UpdateConsumerGroup`|`acs:log:{#regionId}:{#accountId}:project/{#ProjectName}/logstore/{#logstoreName}/consumergroup/{#ConsumerGroup}`|
  * @param request  the request parameters of UpdateConsumerGroup  UpdateConsumerGroupRequest
  * @return UpdateConsumerGroupResponse
 */
async function updateConsumerGroup(request: UpdateConsumerGroupRequest): UpdateConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateConsumerGroup', 'PUT', '/logstores/{logstore}/consumergroups/{consumerGroup}', 'none', false, 'json', request);
}

model UpdateDashboardRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  dashboardName: string(name='dashboardName', description='The name of the dashboard.

This parameter is required.', example='dashboard-1609294922657-434834', position='Path,Body'),
  attribute?: map[string]string(name='attribute', description='The attribute values of the dashboard.', position='Body'),
  charts: [
    Chart
  ](name='charts', description='The charts on the dashboard.

This parameter is required.', position='Body'),
  description?: string(name='description', description='The description of the dashboard.', example='test dashboard.', position='Body'),
  displayName: string(name='displayName', description='The display name of the dashboard.

This parameter is required.', example='Method pv', position='Body'),
}

model UpdateDashboardResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description ### [](#)Usage notes
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * @param request  the request parameters of UpdateDashboard  UpdateDashboardRequest
  * @return UpdateDashboardResponse
 */
async function updateDashboard(request: UpdateDashboardRequest): UpdateDashboardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateDashboard', 'PUT', '/dashboards/{dashboardName}', 'none', false, 'json', request);
}

model UpdateETLRequest {
  project?: string(name='project', description='This parameter is required.', example='ali-test-project', position='Host'),
  etlName: string(name='etlName', description='This parameter is required.', example='etl-123456', position='Path'),
  configuration: ETLConfiguration(name='configuration', description='This parameter is required.', position='Body'),
  description?: string(name='description', example='this is description', position='Body'),
  displayName: string(name='displayName', description='This parameter is required.', example='this is update', position='Body'),
}

model UpdateETLResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of UpdateETL  UpdateETLRequest
  * @return UpdateETLResponse
 */
async function updateETL(request: UpdateETLRequest): UpdateETLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateETL', 'PUT', '/etls/{etlName}', 'none', false, 'json', request);
}

model UpdateIndexRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='The name of the Logstore.

This parameter is required.', example='test-logstore', position='Path'),
  body?: Index(name='body', description='The request body.', position='Body'),
}

model UpdateIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description ### Usage notes
  * Host consists of a project name and a Log Service endpoint. You must specify a project in Host.
  * @param request  the request parameters of UpdateIndex  UpdateIndexRequest
  * @return UpdateIndexResponse
 */
async function updateIndex(request: UpdateIndexRequest): UpdateIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateIndex', 'PUT', '/logstores/{logstore}/index', 'none', false, 'json', request);
}

model UpdateLogStoreRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='The name of the Logstore.

This parameter is required.', example='test-logstore', position='Path'),
  appendMeta?: boolean(name='appendMeta', description='Specifies whether to record public IP addresses. Default value: false. Valid values:

*   true
*   false', example='false', position='Body'),
  autoSplit?: boolean(name='autoSplit', description='Specifies whether to enable automatic sharding. Valid values:

*   true
*   false', example='true', position='Body'),
  enableTracking?: boolean(name='enable_tracking', description='Specifies whether to enable the web tracking feature. Default value: false. Valid values:

*   true
*   false', example='false', position='Body'),
  encryptConf?: EncryptConf(name='encrypt_conf', description='The data structure of the encryption configuration.', position='Body'),
  hotTtl?: int32(name='hot_ttl', description='The retention period of data in the hot storage tier of the Logstore. Valid values: 7 to 3000. Unit: days. After the retention period that is specified for the hot storage tier elapses, the data is moved to the Infrequent Access (IA) storage tier. For more information, see [Enable hot and cold-tiered storage for a Logstore](https://help.aliyun.com/document_detail/308645.html).', example='60', position='Body'),
  infrequentAccessTTL?: int32(name='infrequentAccessTTL', description='The retention period of data in the IA storage tier of the Logstore. You must set this parameter to at least 30 days. After the data retention period that you specify for the IA storage tier elapses, the data is moved to the Archive storage tier.', example='30', position='Body'),
  logstoreName: string(name='logstoreName', description='The name of the Logstore.

This parameter is required.', example='test-logstore', position='Body'),
  maxSplitShard?: int32(name='maxSplitShard', description='The maximum number of shards into which existing shards can be automatically split. Valid values: 1 to 256.

>  If you set autoSplit to true, you must specify maxSplitShard.', example='64', position='Body'),
  mode?: string(name='mode', description='The type of the Logstore. Simple Log Service provides two types of Logstores: Standard Logstores and Query Logstores. Valid values:

*   **standard**: Standard Logstore. This type of Logstore supports the log analysis feature and is suitable for scenarios such as real-time monitoring and interactive analysis. You can also use this type of Logstore to build a comprehensive observability system.
*   **query**: Query Logstore. This type of Logstore supports high-performance queries. The index traffic fee of a Query Logstore is approximately half that of a Standard Logstore. Query Logstores do not support SQL analysis. Query Logstores are suitable for scenarios in which the amount of data is large, the log retention period is long, or log analysis is not required. If logs are stored for weeks or months, the log retention period is considered long.', example='standard', position='Body'),
  shardCount?: int32(name='shardCount', description='The number of shards.

>  You cannot call the UpdateLogStore operation to change the number of shards. You can call the SplitShard or MergeShards operation to change the number of shards.', example='2', deprecated='true', position='Body'),
  telemetryType?: string(name='telemetryType', description='The type of the observable data. Valid values:

*   None (default): log data.
*   Metrics: metric data.', example='None', deprecated='true', position='Body'),
  ttl: int32(name='ttl', description='The retention period of data. Unit: days. Valid values: 1 to 3650. If you set this parameter to 3650, logs are permanently stored.

This parameter is required.', example='30', position='Body'),
}

model UpdateLogStoreResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description ### Usage notes
  * *   Host consists of a project name and a Log Service endpoint. You must specify a project in Host.
  * *   You can call the UpdateLogStore operation to change only the time-to-live (TTL) attribute.
  * @param request  the request parameters of UpdateLogStore  UpdateLogStoreRequest
  * @return UpdateLogStoreResponse
 */
async function updateLogStore(request: UpdateLogStoreRequest): UpdateLogStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateLogStore', 'PUT', '/logstores/{logstore}', 'none', false, 'json', request);
}

model UpdateLogStoreEncryptionRequest {
  project?: string(name='project', description='The Simple Log Service project.

This parameter is required.', example='test-project', position='Host'),
  logstore: string(name='logstore', description='The Logstore.

This parameter is required.', example='test-logstore', position='Path'),
  enable: boolean(name='enable', description='Specifies whether to enable the encryption feature. After you update the encryption configuration of the Logstore, you can modify only the enable parameter in subsequent update requests. You cannot modify the encryptType or userCmkInfo parameters.

This parameter is required.', example='true', position='Body'),
  encryptType?: string(name='encryptType', description='The encryption algorithm. Valid values: default, m4, sm4_ecb, sm4_cbc, sm4_gcm, aes_ecb, aes_cbc, aes_cfb, aes_ofb, and aes_gcm.', example='default', position='Body'),
  userCmkInfo?: {
    keyId?: string(name='keyId', description='The ID of the CMK to which the BYOK key belongs. You can create a CMK in KMS. The CMK must be in the same region as the endpoint of Simple Log Service.', example='f5136b95-2420-ab31-xxxxxxxxx'),
    regionId?: string(name='regionId', description='The region ID. Example: cn-hangzhou.', example='cn-hangzhou'),
    roleArn?: string(name='roleArn', description='The Alibaba Cloud Resource Name (ARN) of the Resource Access Management (RAM) role.The value is in the acs:ram::12344\\*\\*\\*:role/xxxxx format. To use a BYOK key to encrypt logs, you must create a RAM role and grant the AliyunKMSReadOnlyAccess and AliyunKMSCryptoUserAccess permissions to the RAM role. You must grant the API caller the PassRole permission on the RAM role.', example='acs:ram::12344***:role/xxxxx'),
  }(name='userCmkInfo', description='Optional. If you use a BYOK key to encrypt logs, you must specify this parameter. If you use the service key of Simple Log Service to encrypt logs, you do not need to specify this parameter.', position='Body'),
}

model UpdateLogStoreEncryptionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description ## [](#)Limits
  * If you specify a data encryption method when you configure data encryption settings, you cannot switch to the other method after the configuration. In addition, you cannot change the encryption algorithm or the encryption type. You can only enable or disable the encryption feature by using the enable parameter. If you specify the encryption method by using the service key of Simple Log Service when you configure data encryption settings, you cannot switch to the encryption method by using Bring Your Own Key (BYOK) keys after the configuration.
  * ## [](#)Create encryption configurations
  * ### [](#)Encryption by using service keys
  * Simple Log Service is fully responsible for data encryption and key management. No additional operations are required. When you create encryption configurations for the Logstore, you must specify the enable and encryptType parameters.
  * ### [](#byok)Encryption by using BYOK keys
  * You must create a customer master key (CMK) in Key Management Service (KMS). Then, Simple Log Service encrypts logs by using the CMK. When you create encryption configurations for the Logstore, you must specify the enable, encryptType, and userCmkInfo parameters.
  * ## [](#)Enable or disable the encryption feature
  * After you create encryption configurations for the Logstore, you cannot modify the encryptType or userCmkInfo parameters. However, you can enable and disable the encryption feature by using the enable parameter.
  * @param request  the request parameters of UpdateLogStoreEncryption  UpdateLogStoreEncryptionRequest
  * @return UpdateLogStoreEncryptionResponse
 */
async function updateLogStoreEncryption(request: UpdateLogStoreEncryptionRequest): UpdateLogStoreEncryptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateLogStoreEncryption', 'PUT', '/logstores/{logstore}/encryption', 'none', false, 'json', request);
}

model UpdateLogStoreMeteringModeRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='projectName', position='Host'),
  logstore: string(name='logstore', description='The name of the Logstore.

This parameter is required.', example='logstoreName', position='Path'),
  meteringMode: string(name='meteringMode', description='The billing mode. Valid values: ChargeByFunction and ChargeByDataIngest. Default value: ChargeByFunction. The value ChargeByFunction specifies the pay-by-feature billing mode. The value ChargeByDataIngest specifies the pay-by-ingested-data billing mode.

This parameter is required.', example='ChargeByFunction', position='Body'),
}

model UpdateLogStoreMeteringModeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of UpdateLogStoreMeteringMode  UpdateLogStoreMeteringModeRequest
  * @return UpdateLogStoreMeteringModeResponse
 */
async function updateLogStoreMeteringMode(request: UpdateLogStoreMeteringModeRequest): UpdateLogStoreMeteringModeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateLogStoreMeteringMode', 'PUT', '/logstores/{logstore}/meteringmode', 'none', false, 'json', request);
}

model UpdateLogStoreProcessorRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='The name of the Logstore.

This parameter is required.', example='ali-test-logstore', position='Path'),
  processorName: string(name='processorName', description='The identifier of the ingest processor.

This parameter is required.', example='parse-nginx-log', position='Body'),
}

model UpdateLogStoreProcessorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of UpdateLogStoreProcessor  UpdateLogStoreProcessorRequest
  * @return UpdateLogStoreProcessorResponse
 */
async function updateLogStoreProcessor(request: UpdateLogStoreProcessorRequest): UpdateLogStoreProcessorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateLogStoreProcessor', 'POST', '/logstores/{logstore}/processor', 'none', false, 'json', request);
}

model UpdateLoggingRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  loggingDetails: [ 
    {
      logstore: string(name='logstore', description='The name of the Logstore to which you want to save service logs.

This parameter is required.', example='my-logstore'),
      type: string(name='type', description='The type of service logs. Valid values:

*   consumergroup_log: the consumption delay logs of consumer groups.
*   logtail_alarm: the alert logs of Logtail.
*   operation_log: the operation logs.
*   logtail_profile: the collection logs of Logtail.
*   metering: the metering logs.
*   logtail_status: the status logs of Logtail.
*   scheduledsqlalert: the operational logs of Scheduled SQL jobs.
*   etl_alert: the operational logs of data transformation jobs.

This parameter is required.', example='consumergroup_log'),
    }
  ](name='loggingDetails', description='The configurations of service logs.

This parameter is required.', position='Body'),
  loggingProject: string(name='loggingProject', description='The name of the project to which you want to save service logs.

This parameter is required.', example='my-project', position='Body'),
}

model UpdateLoggingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * @param request  the request parameters of UpdateLogging  UpdateLoggingRequest
  * @return UpdateLoggingResponse
 */
async function updateLogging(request: UpdateLoggingRequest): UpdateLoggingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateLogging', 'PUT', '/logging', 'none', false, 'json', request);
}

model UpdateLogtailPipelineConfigRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='test-project', position='Host'),
  configName: string(name='configName', description='The name of the Logtail pipeline configuration.

This parameter is required.', example='test-config', position='Path,Body'),
  aggregators?: [  map[string]any ](name='aggregators', description='The aggregation plug-ins.

>  This parameter takes effect only when extended plug-ins are used. You can use only one aggregation plug-in.', position='Body'),
  flushers: [  map[string]any ](name='flushers', description='The output plug-ins.

>  You can configure only one output plug-in.

This parameter is required.', position='Body'),
  global?: map[string]any(name='global', description='The global settings.', position='Body'),
  inputs: [  map[string]any ](name='inputs', description='The input plug-ins.

>  You can configure only one input plug-in.

This parameter is required.', position='Body'),
  logSample?: string(name='logSample', description='The sample log. You can specify multiple sample logs.', example='2022-06-14 11:13:29.796 | DEBUG    | __main__:<module>:1 - hello world', position='Body'),
  processors?: [  map[string]any ](name='processors', description='The processing plug-ins.

>  Logtail plug-ins for data processing are classified into native plug-ins and extended plug-ins. For more information, see [Overview of Logtail plug-ins for data processing](https://help.aliyun.com/document_detail/64957.html).

> 

*   You can use native plug-ins only to collect text logs.

*   You cannot add native plug-ins and extended plug-ins at a time.

*   When you add native plug-ins, take note of the following items:

    *   You must add one of the following Logtail plug-ins for data processing as the first plug-in: Data Parsing (Regex Mode), Data Parsing (Delimiter Mode), Data Parsing (JSON Mode), Data Parsing (NGINX Mode), Data Parsing (Apache Mode), and Data Parsing (IIS Mode).
    *   After you add the first plug-in, you can add one Time Parsing plug-in, one Data Filtering plug-in, and multiple Data Masking plug-ins.', position='Body'),
  task?: map[string]any(name='task', position='Body'),
}

model UpdateLogtailPipelineConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description The UK (London) region is supported. Supported regions are constantly updated.
  * @param request  the request parameters of UpdateLogtailPipelineConfig  UpdateLogtailPipelineConfigRequest
  * @return UpdateLogtailPipelineConfigResponse
 */
async function updateLogtailPipelineConfig(request: UpdateLogtailPipelineConfigRequest): UpdateLogtailPipelineConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateLogtailPipelineConfig', 'PUT', '/pipelineconfigs/{configName}', 'none', false, 'json', request);
}

model UpdateMachineGroupRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  groupName: string(name='groupName', description='The name of the machine group.

This parameter is required.', example='test-group', position='Path,Body'),
  groupAttribute?: {
    externalName?: string(name='externalName', description='The identifier of the external management system on which the machine group depends. This parameter is empty by default.', example='testgroup2'),
    groupTopic?: string(name='groupTopic', description='The topic of the machine group. This parameter is empty by default.', example='testtopic2'),
  }(name='groupAttribute', description='The attribute of the machine group. This parameter is empty by default.', position='Body'),
  groupType?: string(name='groupType', description='The type of the machine group. Set the value to an empty string.', example='""', position='Body'),
  machineIdentifyType: string(name='machineIdentifyType', description='The identifier type of the machine group. Valid values:

*   ip: The machine group uses IP addresses as identifiers.
*   userdefined: The machine group uses custom identifiers.

This parameter is required.', example='userdefined', position='Body'),
  machineList: [ string ](name='machineList', description='The identifiers of the machines in the machine group.

*   If you set machineIdentifyType to ip, enter the IP addresses of the machines.
*   If you set machineIdentifyType to userdefined, enter a custom identifier.

This parameter is required.', example='[uu_id_1，uu_id_2]', position='Body'),
}

model UpdateMachineGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description Host consists of a project name and a Log Service endpoint. You must specify a project in Host.
  * @param request  the request parameters of UpdateMachineGroup  UpdateMachineGroupRequest
  * @return UpdateMachineGroupResponse
 */
async function updateMachineGroup(request: UpdateMachineGroupRequest): UpdateMachineGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateMachineGroup', 'PUT', '/machinegroups/{groupName}', 'none', false, 'json', request);
}

model UpdateMachineGroupMachineRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  machineGroup: string(name='machineGroup', description='The name of the machine group.

This parameter is required.', example='test-group', position='Path'),
  action?: string(name='action', description='The operation on the machine. Valid values: add and delete. A value of add specifies to add the machine to the machine group. A value of delete specifies to remove the machine from the machine group.', example='add', position='Query'),
  body: [ string ](name='body', description='The machines to be added or removed.

This parameter is required.', position='Body'),
}

model UpdateMachineGroupMachineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * @param request  the request parameters of UpdateMachineGroupMachine  UpdateMachineGroupMachineRequest
  * @return UpdateMachineGroupMachineResponse
 */
async function updateMachineGroupMachine(request: UpdateMachineGroupMachineRequest): UpdateMachineGroupMachineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateMachineGroupMachine', 'PUT', '/machinegroups/{machineGroup}/machines', 'none', false, 'json', request);
}

model UpdateMaxComputeExportRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='my-project', position='Host'),
  mcExportName: string(name='mcExportName', description='The unique name of the MaxCompute data shipping job. Make sure that the job exists.

This parameter is required.', example='export-mc-1234567890-123456', position='Path'),
  configuration: MaxComputeExportConfiguration(name='configuration', description='The setting of the MaxCompute data shipping job.

This parameter is required.', position='Body'),
  description?: string(name='description', description='The description of the MaxCompute data shipping job.', position='Body'),
  displayName: string(name='displayName', description='The display name of the MaxCompute data shipping job.

This parameter is required.', example='my-mc-job', position='Body'),
}

model UpdateMaxComputeExportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description *   Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * *   An AccessKey pair is created and obtained. For more information, see [AccessKey pair](https://help.aliyun.com/document_detail/29009.html).
  * The AccessKey pair of an Alibaba Cloud account has permissions on all API operations. Using these credentials to perform operations in Simple Log Service is a high-risk operation. We recommend that you use a Resource Access Management (RAM) user to call API operations or perform routine O\\&M. To create a RAM user, log on to the RAM console. Make sure that the RAM user has the management permissions on Simple Log Service resources. For more information, see [Create a RAM user and authorize the RAM user to access Simple Log Service](https://help.aliyun.com/document_detail/47664.html).
  * *   The information that is required to query logs is obtained. The information includes the name of the project to which the logs belong and the region of the project. For more information, see [Manage a project](https://help.aliyun.com/document_detail/48984.html)
  * @param request  the request parameters of UpdateMaxComputeExport  UpdateMaxComputeExportRequest
  * @return UpdateMaxComputeExportResponse
 */
async function updateMaxComputeExport(request: UpdateMaxComputeExportRequest): UpdateMaxComputeExportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateMaxComputeExport', 'PUT', '/maxcomputeexports/{mcExportName}', 'none', false, 'json', request);
}

model UpdateMetricStoreRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='my-project', position='Host'),
  name: string(name='name', description='The name of the Metricstore.

This parameter is required.', example='my_metric_store', position='Path'),
  autoSplit?: boolean(name='autoSplit', description='Specifies whether to enable automatic sharding.', example='true', position='Body'),
  hotTtl?: int32(name='hot_ttl', position='Body'),
  infrequentAccessTTL?: int32(name='infrequentAccessTTL', position='Body'),
  maxSplitShard?: int32(name='maxSplitShard', description='The maximum number of shards into which existing shards can be automatically split. This parameter is valid only when you set the autoSplit parameter to true.', example='64', position='Body'),
  mode?: string(name='mode', description='The type of the Metricstore.', example='standard', position='Body'),
  ttl?: int32(name='ttl', description='The retention period of the metric data. Unit: days.', example='7', position='Body'),
}

model UpdateMetricStoreResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description Metricstores are used to store metric data. For more information, see [Metric data](https://help.aliyun.com/document_detail/174965.html).
  * *   You must specify an existing Metricstore.
  * *   Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * *   An AccessKey pair is created and obtained. For more information, see [AccessKey pair](https://help.aliyun.com/document_detail/29009.html).
  * The AccessKey pair of an Alibaba Cloud account has permissions on all API operations. Using these credentials to perform operations in Simple Log Service is a high-risk operation. We recommend that you use a Resource Access Management (RAM) user to call API operations or perform routine O\\&M. To create a RAM user, log on to the RAM console. Make sure that the RAM user has the management permissions on Simple Log Service resources. For more information, see [Create a RAM user and authorize the RAM user to access Simple Log Service](https://help.aliyun.com/document_detail/47664.html).
  * *   The information that is required to query metric data is obtained. The information includes the name of the project to which the metric data belong and the region of the project. For more information, see [Manage a project](https://help.aliyun.com/document_detail/48984.html).
  * *   You can create up to 200 Logstores or Metricstores in a project.
  * *   Metric data is automatically deleted when the retention period of the metric data ends.
  * @param request  the request parameters of UpdateMetricStore  UpdateMetricStoreRequest
  * @return UpdateMetricStoreResponse
 */
async function updateMetricStore(request: UpdateMetricStoreRequest): UpdateMetricStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateMetricStore', 'PUT', '/metricstores/{name}', 'none', false, 'json', request);
}

model UpdateMetricStoreMeteringModeRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='projectName', position='Host'),
  metricStore: string(name='metricStore', description='This parameter is required.', example='metricStoreName', position='Path'),
  meteringMode: string(name='meteringMode', description='The billing mode. Default value: ChargeByFunction. Valid values: ChargeByFunction and ChargeByDataIngest.

This parameter is required.', example='ChargeByFunction', position='Body'),
}

model UpdateMetricStoreMeteringModeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of UpdateMetricStoreMeteringMode  UpdateMetricStoreMeteringModeRequest
  * @return UpdateMetricStoreMeteringModeResponse
 */
async function updateMetricStoreMeteringMode(request: UpdateMetricStoreMeteringModeRequest): UpdateMetricStoreMeteringModeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateMetricStoreMeteringMode', 'PUT', '/metricstores/{metricStore}/meteringmode', 'none', false, 'json', request);
}

model UpdateMetricStoreProcessorRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  metricstore: string(name='metricstore', description='The name of the Metricstore.

This parameter is required.', example='ali-test-metricstore', position='Path'),
  processorName: string(name='processorName', description='The identifier of the ingest processor.

This parameter is required.', example='filter-metrics', position='Body'),
}

model UpdateMetricStoreProcessorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of UpdateMetricStoreProcessor  UpdateMetricStoreProcessorRequest
  * @return UpdateMetricStoreProcessorResponse
 */
async function updateMetricStoreProcessor(request: UpdateMetricStoreProcessorRequest): UpdateMetricStoreProcessorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateMetricStoreProcessor', 'POST', '/metricstores/{metricstore}/processor', 'none', false, 'json', request);
}

model UpdateOSSExportRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  ossExportName: string(name='ossExportName', description='The unique name of the job. Make sure that the job exists.

This parameter is required.', example='job-123456789-123456', position='Path'),
  configuration?: OSSExportConfiguration(name='configuration', description='The configuration details of the job.', position='Body'),
  description?: string(name='description', description='The description of the job.', position='Body'),
  displayName?: string(name='displayName', description='The display name of the job.', example='ali-test-oss-job', position='Body'),
}

model UpdateOSSExportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of UpdateOSSExport  UpdateOSSExportRequest
  * @return UpdateOSSExportResponse
 */
async function updateOSSExport(request: UpdateOSSExportRequest): UpdateOSSExportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateOSSExport', 'PUT', '/ossexports/{ossExportName}', 'none', false, 'json', request);
}

model UpdateOSSHDFSExportRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-test-project', position='Host'),
  ossExportName: string(name='ossExportName', description='The unique name of the job. Make sure that the job exists.

This parameter is required.', example='job-123456789-123456', position='Path'),
  configuration: OSSExportConfiguration(name='configuration', description='The configuration details of the job.

This parameter is required.', position='Body'),
  description?: string(name='description', description='The description of the job.', position='Body'),
  displayName: string(name='displayName', description='The display name of the job.

This parameter is required.', example='ali-test-oss-hdfs-job', position='Body'),
}

model UpdateOSSHDFSExportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of UpdateOSSHDFSExport  UpdateOSSHDFSExportRequest
  * @return UpdateOSSHDFSExportResponse
 */
async function updateOSSHDFSExport(request: UpdateOSSHDFSExportRequest): UpdateOSSHDFSExportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateOSSHDFSExport', 'PUT', '/osshdfsexports/{ossExportName}', 'none', false, 'json', request);
}

model UpdateOSSIngestionRequest {
  project?: string(name='project', description='This parameter is required.', example='ali-test-project', position='Host'),
  ossIngestionName: string(name='ossIngestionName', description='This parameter is required.', example='ingest-oss-123455', position='Path'),
  configuration: OSSIngestionConfiguration(name='configuration', description='The configuration of the OSS data import job.

This parameter is required.', position='Body'),
  description?: string(name='description', description='The description of the Object Storage Service (OSS) data import job.', position='Body'),
  displayName: string(name='displayName', description='The display name of the OSS data import job.

This parameter is required.', position='Body'),
  schedule?: Schedule(name='schedule', description='The scheduling type. By default, you do not need to specify this parameter. If you want to import data at regular intervals, such as importing data every Monday at 08: 00., you can specify a cron expression.', position='Body'),
}

model UpdateOSSIngestionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of UpdateOSSIngestion  UpdateOSSIngestionRequest
  * @return UpdateOSSIngestionResponse
 */
async function updateOSSIngestion(request: UpdateOSSIngestionRequest): UpdateOSSIngestionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateOSSIngestion', 'PUT', '/ossingestions/{ossIngestionName}', 'none', false, 'json', request);
}

model UpdateProjectRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='ali-project-test', position='Host'),
  description: string(name='description', description='The description of the project. The default value is an empty string.

This parameter is required.', example='Description of my-project-test', position='Body'),
  recycleBinEnabled?: boolean(name='recycleBinEnabled', description='Specifies whether to enable the recycle bin feature.

Valid values:

*   true
*   false', example='true', position='Body'),
}

model UpdateProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description ### Usage notes
  * * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * * An AccessKey pair is created and obtained. For more information, see [AccessKey pair](https://help.aliyun.com/document_detail/29009.html).
  * The AccessKey pair of an Alibaba Cloud account has permissions on all API operations. Using these credentials to perform operations in Simple Log Service is a high-risk operation. We recommend that you use a Resource Access Management (RAM) user to call API operations or perform routine O&#x26;M. To create a RAM user, log on to the RAM console. Make sure that the RAM user has the management permissions on Simple Log Service resources. For more information, see [Create a RAM user and authorize the RAM user to access Simple Log Service](https://help.aliyun.com/document_detail/47664.html).
  * ### Authentication resources
  * The following table describes the authorization information that is required for this operation. You can add the information to the Action element of a RAM policy statement to grant a RAM user or a RAM role the permissions to call this operation.
  * |Action|Resource|
  * |:---|:---|
  * |`log:UpdateProject`|`acs:log:{#regionId}:{#accountId}:project/{#ProjectName}`|
  * @param request  the request parameters of UpdateProject  UpdateProjectRequest
  * @return UpdateProjectResponse
 */
async function updateProject(request: UpdateProjectRequest): UpdateProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateProject', 'PUT', '/', 'none', false, 'json', request);
}

model UpdateSavedSearchRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='my-project', position='Host'),
  savedsearchName: string(name='savedsearchName', description='The name of the saved search that you want to update.

This parameter is required.', example='savedsearch-name', position='Path,Body'),
  displayName: string(name='displayName', description='The display name.

This parameter is required.', example='displayname', position='Body'),
  logstore: string(name='logstore', description='The name of the Logstore to which the saved search belongs.

This parameter is required.', example='aliyun-test-logstore', position='Body'),
  searchQuery: string(name='searchQuery', description='The query statement of the saved search. A query statement consists of a search statement and an analytic statement in the Search statement|Analytic statement format. For more information, see [Log search overview](https://help.aliyun.com/document_detail/43772.html) and [Log analysis overview](https://help.aliyun.com/document_detail/53608.html).

This parameter is required.', example='*|select date_format(__time__-__time__%60, \\"%H:%i:%s\\") as time, COUNT(*) as pv group by time', position='Body'),
  topic?: string(name='topic', description='The topic of the logs.', example='theme', position='Body'),
}

model UpdateSavedSearchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description ### Usage notes
  * * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * * An AccessKey pair is created and obtained. For more information, see [AccessKey pair](https://help.aliyun.com/document_detail/29009.html).
  * The AccessKey pair of an Alibaba Cloud account has permissions on all API operations. Using these credentials to perform operations in Simple Log Service is a high-risk operation. We recommend that you use a Resource Access Management (RAM) user to call API operations or perform routine O&#x26;M. To create a RAM user, log on to the RAM console. Make sure that the RAM user has the management permissions on Simple Log Service resources. For more information, see [Create a RAM user and authorize the RAM user to access Simple Log Service](https://help.aliyun.com/document_detail/47664.html).
  * * The information that is required to query logs is obtained. The information includes the name of the project to which the logs belong, the region of the project, and the name of the Logstore to which the logs belong. For more information, see [Manage a project](https://help.aliyun.com/document_detail/48984.html) and [Manage a Logstore](https://help.aliyun.com/document_detail/48990.html).
  * * Limits are imposed when you use Simple Log Service to query logs. We recommend that you specify query statements and query time ranges based on the limits. For more information, see [Log search overview](https://help.aliyun.com/document_detail/43772.html) and [Log analysis overview](https://help.aliyun.com/document_detail/53608.html).
  * ### Authentication resources
  * The following table describes the authorization information that is required for this operation. You can add the information to the Action element of a RAM policy statement to grant a RAM user or a RAM role the permissions to call this operation.
  * |Action|Resource|
  * |:---|:---|
  * |`log:UpdateSavedSearch`|`acs:log:{#regionId}:{#accountId}:project/{#ProjectName}/savedsearch/{#SavedSearchName}`|
  * @param request  the request parameters of UpdateSavedSearch  UpdateSavedSearchRequest
  * @return UpdateSavedSearchResponse
 */
async function updateSavedSearch(request: UpdateSavedSearchRequest): UpdateSavedSearchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateSavedSearch', 'PUT', '/savedsearches/{savedsearchName}', 'none', false, 'json', request);
}

model UpdateScheduledSQLRequest {
  project?: string(name='project', description='This parameter is required.', example='ali-test-project', position='Host'),
  scheduledSQLName: string(name='scheduledSQLName', description='This parameter is required.', example='sql-123456789-123456', position='Path'),
  configuration: ScheduledSQLConfiguration(name='configuration', description='This parameter is required.', position='Body'),
  description?: string(name='description', position='Body'),
  displayName: string(name='displayName', description='This parameter is required.', example='ali-test-scheduled-sql', position='Body'),
  schedule: Schedule(name='schedule', description='This parameter is required.', position='Body'),
}

model UpdateScheduledSQLResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of UpdateScheduledSQL  UpdateScheduledSQLRequest
  * @return UpdateScheduledSQLResponse
 */
async function updateScheduledSQL(request: UpdateScheduledSQLRequest): UpdateScheduledSQLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateScheduledSQL', 'PUT', '/scheduledsqls/{scheduledSQLName}', 'none', false, 'json', request);
}

model UpdateSqlInstanceRequest {
  project?: string(name='project', description='This parameter is required.', position='Host'),
  cu: int32(name='cu', description='This parameter is required.', example='2', position='Body'),
  useAsDefault: boolean(name='useAsDefault', description='This parameter is required.', position='Body'),
}

model UpdateSqlInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of UpdateSqlInstance  UpdateSqlInstanceRequest
  * @return UpdateSqlInstanceResponse
 */
async function updateSqlInstance(request: UpdateSqlInstanceRequest): UpdateSqlInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateSqlInstance', 'PUT', '/sqlinstance', 'none', false, 'json', request);
}

model UpdateStoreViewRequest {
  project?: string(name='project', description='The name of the project.

This parameter is required.', example='example-project', position='Host'),
  name: string(name='name', description='The name of the dataset.

This parameter is required.', example='my_storeview', position='Path'),
  storeType: string(name='storeType', description='The type of the dataset.

Valid values:

*   metricstore

    <!-- -->

    <!-- -->

    <!-- -->

*   logstore

    <!-- -->

    <!-- -->

    <!-- -->

This parameter is required.', example='logstore', position='Body'),
  stores: [
    StoreViewStore
  ](name='stores', description='The Logstores or Metricstores.

This parameter is required.', position='Body'),
}

model UpdateStoreViewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of UpdateStoreView  UpdateStoreViewRequest
  * @return UpdateStoreViewResponse
 */
async function updateStoreView(request: UpdateStoreViewRequest): UpdateStoreViewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateStoreView', 'PUT', '/storeviews/{name}', 'none', false, 'json', request);
}

model UpsertCollectionPolicyRequest {
  centralizeConfig?: {
    destLogstore?: string(name='destLogstore', description='The destination logstore for centralized storage. Make sure that the region of the destination logstore is consistent with the region specified by destRegion and the destination logstore belongs to the destination project specified by destProject.', example='your-sls-logstore-in-beijing'),
    destProject?: string(name='destProject', description='The destination project for centralized storage. Make sure that the region of the destination project is consistent with the region specified by destRegion.', example='your-sls-project-in-beijing'),
    destRegion?: string(name='destRegion', description='The destination region for centralized storage.', example='cn-beijing'),
    destTTL?: int32(name='destTTL', description='The data retention period for centralized storage. Unit: days. This parameter takes effect only when you use an existing logstore for centralized storage.', example='your-sls-logstore-ttl'),
  }(name='centralizeConfig', description='The configurations of centralized storage.', position='Body'),
  centralizeEnabled?: boolean(name='centralizeEnabled', description='Specifies whether to enable centralized storage. Default value: false.', example='false', position='Body'),
  dataCode: string(name='dataCode', description='The code of the log type.

This parameter is required.', example='access_log', position='Body'),
  dataConfig?: {
    dataRegion?: string(name='dataRegion', description='The region for storing the global logs that are collected for the first time.', example='cn-beijing'),
  }(name='dataConfig', description='The data configurations. The configuration is returned only for global logs. For example, if productCode is set to sls, the configuration is returned.', position='Body'),
  enabled: boolean(name='enabled', description='Specifies whether to enable the policy.

This parameter is required.', example='true', position='Body'),
  policyConfig: {
    instanceIds?: [ string ](name='instanceIds', description='The IDs of the instances. This parameter takes effect only when resourceMode is set to instanceMode. Logs are collected only from instances that use the specified IDs.'),
    regions?: [ string ](name='regions', description='The regions of the instances. This parameter takes effect only when resourceMode is set to attributeMode. Wildcard characters are supported. If you leave this parameter empty, region-based filtering is not performed. The system considers that all instances are matched. If you specify a value for this parameter, logs of instances that reside in the specified regions are collected. Logs are collected from an instance only if the resource tags and region of the instance match the specified conditions.'),
    resourceMode: string(name='resourceMode', description='The resource collection mode. Valid values: all, attributeMode, and instanceMode. The value all specifies that logs of all instances within your account are collected to the default logstore. The value attributeMode specifies that logs are collected based on the regions of instances and resource tags. The value instanceMode specifies that logs are collected based on instance IDs.

This parameter is required.', example='all'),
    resourceTags?: map[string]any(name='resourceTags', description='The resource tags. This parameter takes effect only when resourceMode is set to attributeMode. If you leave this parameter empty, resource tag-based filtering is not performed. The system considers that all instances are matched. If you specify a value for this parameter, logs of instances that use the specified resource tags are collected. Logs are collected from an instance only if the resource tags and region of the instance match the specified conditions.', example='{"tag1":"value1",“tag2":"value2"}'),
  }(name='policyConfig', description='The configurations of the policy.

This parameter is required.', position='Body'),
  policyName: string(name='policyName', description='The name must meet the following requirements:

*   The name can contain only lowercase letters, digits, hyphens (-), and underscores (_).
*   The name must start with a letter.
*   The name must be 3 to 63 characters in length.

This parameter is required.', example='your_log_policy', minLength=3, maxLength=63, position='Body'),
  productCode: string(name='productCode', description='The code of the service.

This parameter is required.', example='oss', position='Body'),
  resourceDirectory?: {
    accountGroupType?: string(name='accountGroupType', description='The mode of the resource directory. Valid values: all and custom.', example='all,custom'),
    members?: [ string ](name='members', description='The members. If accountGroupType is set to custom, the members are returned.'),
  }(name='resourceDirectory', description='The configurations of the resource directory. The account must have activated the resource directory and be a management account or a delegated administrator of the resource directory.', position='Body'),
}

model UpsertCollectionPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @description You must use the Simple Log Service endpoint for the China (Shanghai) or Singapore region to call the operation.
  * @param request  the request parameters of UpsertCollectionPolicy  UpsertCollectionPolicyRequest
  * @return UpsertCollectionPolicyResponse
 */
async function upsertCollectionPolicy(request: UpsertCollectionPolicyRequest): UpsertCollectionPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpsertCollectionPolicy', 'POST', '/collectionpolicy', 'none', false, 'json', request);
}

model MLDataParamAnnotationsValue = {
  annotatedBy?: string(name='annotatedBy', example='xxxx'),
  updateTime?: long(name='updateTime', example='1694761550'),
  results?: [ map[string]string ](name='results'),
}

model MLDataParamPredictionsValue = {
  annotatedBy?: string(name='annotatedBy', example='xxx'),
  updateTime?: long(name='updateTime', example='1694761550'),
  results?: [ map[string]string ](name='results'),
}

