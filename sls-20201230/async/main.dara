/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Sls';
  @version = '2020-12-30';
  @endpointRule = 'central';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ConsumerGroup {
  name?: string(name='name', example='test-group'),
  order?: boolean(name='order', example='false'),
  timeout?: int32(name='timeout', example='300'),
}

model EncryptConf {
  enable: boolean(name='enable'),
  encryptType?: string(name='encrypt_type', example='default'),
  userCmkInfo?: EncryptUserCmkConf(name='user_cmk_info'),
}

model EncryptUserCmkConf {
  arn: string(name='arn'),
  cmkKeyId: string(name='cmk_key_id'),
  regionId: string(name='region_id'),
}

model Histogram {
  count?: long(name='count'),
  from?: int32(name='from'),
  progress?: string(name='progress'),
  to?: int32(name='to'),
}

model LogContent {
  key: string(name='Key', example='key-test'),
  value: string(name='Value', example='value-test'),
}

model LogGroup {
  logTags: [
    LogTag
  ](name='LogTags'),
  logs: [
    LogItem
  ](name='Logs'),
  source?: string(name='Source', example='192.1.1.1'),
  topic: string(name='Topic', example='topic-test'),
}

model LogItem {
  contents: [
    LogContent
  ](name='Contents'),
  time: int32(name='Time', example='1690254376'),
}

model LogTag {
  key: string(name='Key', example='key-test'),
  value: string(name='Value', example='value-test'),
}

model LogtailConfig {
  configName: string(name='configName', example='test-config'),
  createTime?: long(name='createTime', example='1655176807'),
  inputDetail: map[string]any(name='inputDetail'),
  inputType: string(name='inputType', example='file'),
  lastModifyTime?: long(name='lastModifyTime', example='1655176807'),
  logSample?: string(name='logSample', example='2022-06-14 11:13:29.796 | DEBUG    | __main__:<module>:1 - hello world'),
  outputDetail: {
    endpoint: string(name='endpoint', example='cn-hangzhou-intranet.log.aliyuncs.com'),
    logstoreName: string(name='logstoreName', example='test-logstore'),
    region?: string(name='region', example='cn-hangzhou'),
  }(name='outputDetail'),
  outputType: string(name='outputType', example='LogService'),
}

model LogtailPipelineConfig {
  aggregators?: [  map[string]any ](name='aggregators'),
  configName: string(name='configName', example='test-config'),
  createTime?: long(name='createTime', example='1655176807'),
  flushers: [  map[string]any ](name='flushers'),
  global?: map[string]any(name='global'),
  inputs: [  map[string]any ](name='inputs'),
  lastModifyTime?: long(name='lastModifyTime', example='1655176807'),
  logSample?: string(name='logSample'),
  processors?: [  map[string]any ](name='processors'),
}

model MLDataParam {
  annotationdataId?: string(name='annotationdataId'),
  annotations?: map[string]MLDataParamAnnotationsValue(name='annotations'),
  config?: map[string]string(name='config'),
  createTime?: long(name='createTime'),
  dataHash?: string(name='dataHash'),
  datasetId?: string(name='datasetId'),
  lastModifyTime?: long(name='lastModifyTime'),
  predictions?: map[string]MLDataParamPredictionsValue(name='predictions'),
  value?: string(name='value'),
  valueType?: string(name='valueType', example='oss'),
}

model MLDataSetParam {
  createBy?: string(name='createBy'),
  createTime?: long(name='createTime'),
  dataType?: string(name='dataType'),
  datasetId?: string(name='datasetId'),
  description?: string(name='description'),
  labelId?: string(name='labelId'),
  lastModifyTime?: long(name='lastModifyTime'),
  name?: string(name='name'),
  settingType?: string(name='settingType'),
}

model MLLabelParam {
  createTime?: long(name='createTime'),
  description?: string(name='description'),
  labelId?: string(name='labelId'),
  lastModifyTime?: long(name='lastModifyTime'),
  name?: string(name='name'),
  settings?: [ 
    {
      config?: string(name='config'),
      mode?: string(name='mode'),
      type?: string(name='type'),
      version?: string(name='version'),
    }
  ](name='settings'),
  type?: string(name='type'),
}

model MLServiceAnalysisParam {
  input?: [ map[string]string ](name='input'),
  parameter?: map[string]string(name='parameter'),
}

model MLServiceParam {
  description?: string(name='description'),
  model?: {
    modelResourceId?: string(name='modelResourceId'),
    modelResourceType?: string(name='modelResourceType'),
  }(name='model'),
  name?: string(name='name'),
  resource?: {
    cpuLimit?: int32(name='cpuLimit'),
    gpu?: int32(name='gpu'),
    memoryLimit?: int32(name='memoryLimit'),
    replica?: int32(name='replica'),
  }(name='resource'),
  serviceType?: string(name='serviceType'),
  status?: string(name='status'),
  updateTimestamp?: long(name='updateTimestamp'),
}

model SavedSearch {
  displayName: string(name='displayName'),
  logstore: string(name='logstore'),
  savedsearchName: string(name='savedsearchName'),
  searchQuery: string(name='searchQuery'),
  topic?: string(name='topic'),
}

model Ticket {
  callerUid?: long(name='callerUid', example='1000000000'),
  createDate?: string(name='createDate', example='2023-09-06 14:57:07'),
  expirationTime?: long(name='expirationTime', example='100'),
  expireDate?: string(name='expireDate', example='2023-09-06 14:58:07'),
  extra?: string(name='extra', example='{"xx":"yy"}'),
  name?: string(name='name', example='测试'),
  number?: int32(name='number', example='1', minimum=0, maximum=2147483647),
  ticket?: string(name='ticket', example='xxxxx'),
  ticketId?: string(name='ticketId', example='xxxxx'),
  usedNumber?: int32(name='usedNumber', example='1'),
  valid?: boolean(name='valid', example='false'),
}

model Chart {
  action: map[string]any(name='action'),
  display: map[string]any(name='display'),
  search: map[string]any(name='search'),
  title: string(name='title', example='my-chart'),
  type: string(name='type', example='linepro'),
}

model Dashboard {
  attribute?: map[string]string(name='attribute'),
  charts: [
    Chart
  ](name='charts'),
  dashboardName: string(name='dashboardName', example='dashboard-1609294922657-434834'),
  description?: string(name='description', example='这是一个仪表盘。'),
  displayName: string(name='displayName', example='test-alert'),
}

model EtlJob {
  enable: boolean(name='enable', example='true'),
  etlJobName: string(name='etlJobName'),
  functionConfig: {
    accountId?: string(name='accountId'),
    endpoint?: string(name='endpoint'),
    functionName?: string(name='functionName', example='hello-wrold'),
    functionProvider: string(name='functionProvider', example='FunctionCompute'),
    regionName?: string(name='regionName', example='cn-hangzhou'),
    roleArn?: string(name='roleArn'),
    serviceName?: string(name='serviceName', example='my-service'),
  }(name='functionConfig'),
  functionParameter: map[string]any(name='functionParameter'),
  logConfig: {
    endpoint: string(name='endpoint'),
    logstoreName: string(name='logstoreName'),
    projectName: string(name='projectName'),
  }(name='logConfig'),
  sourceConfig: {
    logstoreName: string(name='logstoreName', example='my-logstore'),
  }(name='sourceConfig'),
  triggerConfig: {
    maxRetryTime: int32(name='maxRetryTime'),
    roleArn: string(name='roleArn'),
    startingPosition?: string(name='startingPosition', example='at-unixtime'),
    startingUnixtime?: long(name='startingUnixtime', example='当 strtingPosition 为 at-unixtime 时生效'),
    triggerInterval: int32(name='triggerInterval'),
  }(name='triggerConfig'),
}

model EtlMeta {
  enable: boolean(name='enable'),
  etlMetaKey: string(name='etlMetaKey'),
  etlMetaName: string(name='etlMetaName'),
  etlMetaTag?: string(name='etlMetaTag'),
  etlMetaValue?: string(name='etlMetaValue'),
}

model ExternalStore {
  externalStoreName: string(name='externalStoreName', example='rds_store'),
  parameter: map[string]any(name='parameter'),
  storeType: string(name='storeType', example='rds-vpc'),
}

model Index {
  keys?: map[string]IndexKeysValue(name='keys'),
  lastModifyTime?: long(name='lastModifyTime', example='1622186280'),
  line?: {
    caseSensitive?: boolean(name='caseSensitive', example='true'),
    chn?: boolean(name='chn', example='true'),
    excludeKeys?: [ string ](name='exclude_keys'),
    includeKeys?: [ string ](name='include_keys'),
    token: [ string ](name='token'),
  }(name='line'),
  logReduce?: boolean(name='log_reduce', example='true'),
  logReduceBlackList?: [ string ](name='log_reduce_black_list'),
  logReduceWhiteList?: [ string ](name='log_reduce_white_list'),
  maxTextLen?: int32(name='max_text_len', example='2048'),
  ttl: int32(name='ttl', example='30'),
}

model Logging {
  loggingDetails: [ 
    {
      logstore: string(name='logstore', example='my-logstore'),
      type: string(name='type', example='consumergroup_log'),
    }
  ](name='loggingDetails'),
  loggingProject: string(name='loggingProject', example='my-project'),
}

model Logstore {
  appendMeta?: boolean(name='appendMeta', example='true'),
  autoSplit?: boolean(name='autoSplit', example='true'),
  createTime?: int32(name='createTime'),
  enableTracking?: boolean(name='enable_tracking', example='false'),
  encryptConf?: EncryptConf(name='encrypt_conf'),
  hotTtl?: int32(name='hot_ttl'),
  lastModifyTime?: int32(name='lastModifyTime'),
  logstoreName: string(name='logstoreName', example='my-logstore'),
  maxSplitShard?: int32(name='maxSplitShard', example='2'),
  mode?: string(name='mode', example='standard'),
  productType?: string(name='productType'),
  shardCount: int32(name='shardCount', example='2'),
  telemetryType?: string(name='telemetryType'),
  ttl: int32(name='ttl', example='30'),
}

model Machine {
  ip?: string(name='ip', example='192.168.x.x'),
  lastHeartbeatTime?: long(name='lastHeartbeatTime', example='1657509674'),
  machineUniqueid?: string(name='machine-uniqueid', example='3B70F4F1-80F7-46C4-A6C1-100D66C***47'),
  userdefinedId?: string(name='userdefined-id', example='test'),
}

model MachineGroup {
  groupAttribute?: {
    externalName?: string(name='externalName', example='test-group'),
    groupTopic?: string(name='groupTopic', example='test-topic'),
  }(name='groupAttribute'),
  groupName: string(name='groupName', example='test-group'),
  groupType?: string(name='groupType'),
  machineIdentifyType: string(name='machineIdentifyType', example='ip'),
  machineList: [ string ](name='machineList'),
}

model Project {
  createTime?: string(name='createTime'),
  description: string(name='description'),
  lastModifyTime?: string(name='lastModifyTime'),
  owner?: string(name='owner'),
  projectName: string(name='projectName'),
  region?: string(name='region'),
  resourceGroupId?: string(name='resourceGroupId'),
  status?: string(name='status'),
}

model ServiceStatus {
  enabled?: boolean(name='enabled'),
  status?: string(name='status'),
}

model Shard {
  createTime?: int32(name='createTime', example='1453949705'),
  exclusiveEndKey?: string(name='exclusiveEndKey', example='8000000000000000000000000000000'),
  inclusiveBeginKey?: string(name='inclusiveBeginKey', example='00000000000000000000000000000000'),
  shardID?: int32(name='shardID', example='0'),
  status?: string(name='status', example='readwrite'),
}

model ApplyConfigToMachineGroupRequest {
  project: string(name='project', description='The name of the project.', example='ali-test-project', position='Host'),
  machineGroup: string(name='machineGroup', description='The name of the machine group.', example='sample-group', position='Path'),
  configName: string(name='configName', description='The name of the Logtail configuration.', example='logtail-config-sample', position='Path'),
}

model ApplyConfigToMachineGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

/**
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  *
 */
async function applyConfigToMachineGroup(request: ApplyConfigToMachineGroupRequest): ApplyConfigToMachineGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ApplyConfigToMachineGroup', 'PUT', '/machinegroups/{machineGroup}/configs/{configName}', 'json', false, 'json', request);
}

model ChangeResourceGroupRequest {
  project?: string(name='project', example='ali-test-project', position='Host'),
  resourceGroupId: string(name='resourceGroupId', example='rg-aek2i7nhaxifxey', position='Body'),
  resourceId: string(name='resourceId', example='ali-test-project', position='Body'),
  resourceType?: string(name='resourceType', example='PROJECT', position='Body'),
}

model ChangeResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ChangeResourceGroup', 'PUT', '/resourcegroup', 'none', false, 'json', request);
}

model ConsumerGroupHeartBeatRequest {
  project: string(name='project', position='Host'),
  logstore: string(name='logstore', example='ali-test-logstore', position='Path'),
  consumerGroup: string(name='consumerGroup', example='consumer_group_test', position='Path'),
  body: [ int32 ](name='body', position='Body'),
  consumer: string(name='consumer', example='consumer_1', position='Query'),
}

model ConsumerGroupHeartBeatResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: [ int32 ](name='body'),
}

async function consumerGroupHeartBeat(request: ConsumerGroupHeartBeatRequest): ConsumerGroupHeartBeatResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ConsumerGroupHeartBeat', 'POST', '/logstores/{logstore}/consumergroups/{consumerGroup}?type=heartbeat', 'json', false, 'json', request);
}

model CreateAnnotationDataSetRequest {
  body?: MLDataSetParam(name='body', position='Body'),
  datasetId?: string(name='datasetId', example='cb8cc4eb51a85e823471cdb368fae9be', position='Query'),
}

model CreateAnnotationDataSetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function createAnnotationDataSet(request: CreateAnnotationDataSetRequest): CreateAnnotationDataSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateAnnotationDataSet', 'POST', '/ml/annotationdataset', 'none', false, 'json', request);
}

model CreateAnnotationLabelRequest {
  body?: MLLabelParam(name='body', position='Body'),
}

model CreateAnnotationLabelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function createAnnotationLabel(request: CreateAnnotationLabelRequest): CreateAnnotationLabelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateAnnotationLabel', 'POST', '/ml/annotationlabel', 'none', false, 'json', request);
}

model CreateConfigRequest {
  project: string(name='project', example='ali-test-project', position='Host'),
  body?: LogtailConfig(name='body', position='Body'),
}

model CreateConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function createConfig(request: CreateConfigRequest): CreateConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateConfig', 'POST', '/configs', 'none', false, 'json', request);
}

model CreateConsumerGroupRequest {
  logstore: string(name='logstore', description='The name of the Logstore.', example='aliyun-test-logstore', position='Path'),
  project: string(name='project', description='The name of the project.', example='aliyun-test-project', position='Host'),
  consumerGroup: string(name='consumerGroup', description='The name of the consumer group. The name must be unique in a project.', example='consumerGroupX', position='Body'),
  order: boolean(name='order', description='Specifies whether to consume data in sequence. Valid values:

*   true

    *   In a shard, data is consumed in ascending order based on the value of the \\*\\*\\__tag\\_\\_:\\__receive_time\\_\\_\\*\\* field.
    *   If a shard is split, data in the original shard is consumed first. Then, data in the new shards is consumed at the same time.
    *   If shards are merged, data in the original shards is consumed first. Then, data in the new shard is consumed.

*   false Data in all shards is consumed at the same time. If a new shard is generated after a shard is split or after shards are merged, data in the new shard is immediately consumed.', example='true', position='Body'),
  timeout: int32(name='timeout', description='The timeout period. If the server does not receive heartbeats from a consumer within the timeout period, the server deletes the consumer. Unit: seconds.', example='300', position='Body'),
}

model CreateConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

/**
  * ### Usage notes
  * *   Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * *   You can create up to 30 consumer groups for a Logstore.
  * *   Simple Log Service provides examples of both regular log consumption and consumer group-based log consumption by using Simple Log Service SDKs for Java. For more information, see [Consume log data](~~120035~~) and [Use consumer groups to consume data](~~28998~~).
  *
 */
async function createConsumerGroup(request: CreateConsumerGroupRequest): CreateConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateConsumerGroup', 'POST', '/logstores/{logstore}/consumergroups', 'none', false, 'json', request);
}

model CreateDashboardRequest {
  project: string(name='project', example='ali-test-project', position='Host'),
  body: Dashboard(name='body', position='Body'),
}

model CreateDashboardResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function createDashboard(request: CreateDashboardRequest): CreateDashboardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDashboard', 'POST', '/dashboards', 'none', false, 'json', request);
}

model CreateDomainRequest {
  project: string(name='project', description='The name of the project.', example='ali-test-project', position='Host'),
  domainName: string(name='domainName', description='The domain name.', example='example.com', position='Body'),
}

model CreateDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

/**
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  *
 */
async function createDomain(request: CreateDomainRequest): CreateDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDomain', 'POST', '/domains', 'none', false, 'json', request);
}

model CreateIndexRequest {
  logstore: string(name='logstore', description='The name of the Logstore.', example='ali-logstore-test', position='Path'),
  project: string(name='project', description='The name of the project.', example='ali-project-test', position='Host'),
  keys?: map[string]KeysValue(name='keys', description='The configuration of field indexes. A field index is a key-value pair in which the key specifies the name of the field and the value specifies the index configuration of the field. You must specify this parameter, the line parameter, or both parameters. For more information, see Example.', position='Body'),
  line?: {
    caseSensitive?: boolean(name='caseSensitive', description='Specifies whether to enable case sensitivity. Valid values:

*   true
*   false (default)', example='false'),
    chn?: boolean(name='chn', description='Specifies whether to include Chinese characters. Valid values:

*   true
*   false (default)', example='false'),
    excludeKeys?: [ string ](name='exclude_keys', description='The excluded fields. You cannot specify both include_keys and exclude_keys.'),
    includeKeys?: [ string ](name='include_keys', description='The included fields. You cannot specify both include_keys and exclude_keys.'),
    token: [ string ](name='token', description='The delimiters. You can specify a delimiter to delimit the content of a field value. For more information about delimiters, see Example.'),
  }(name='line', description='The configuration of full-text indexes. You must specify this parameter, the keys parameter, or both parameters. For more information, see Example.', position='Body'),
  logReduce?: boolean(name='log_reduce', description='Specifies whether to turn on LogReduce. After you turn on LogReduce, either the whitelist or blacklist takes effect.', example='false', position='Body'),
  logReduceBlackList?: [ string ](name='log_reduce_black_list', description='The fields in the blacklist that you want to use to cluster logs.', position='Body'),
  logReduceWhiteList?: [ string ](name='log_reduce_white_list', description='The fields in the whitelist that you want to use to cluster logs.', position='Body'),
  maxTextLen?: int32(name='max_text_len', description='The maximum length of a field value that can be retained. Default value: 2048. Unit: bytes. The default value is equal to 2 KB. You can change the value of max_text_len. Valid values: 64 to 16384.', example='2048', position='Body'),
  ttl?: int32(name='ttl', description='The retention period of logs. Unit: days. Valid values: 7, 30, and 90.', example='30', position='Body'),
}

model CreateIndexResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

/**
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  *
 */
async function createIndex(request: CreateIndexRequest): CreateIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateIndex', 'POST', '/logstores/{logstore}/index', 'none', false, 'json', request);
}

model CreateLogStoreRequest {
  project: string(name='project', position='Host'),
  appendMeta?: boolean(name='appendMeta', description='Specifies whether to record public IP addresses. Default value: false. Valid values:

*   true
*   false', example='false', position='Body'),
  autoSplit?: boolean(name='autoSplit', description='Specifies whether to enable automatic sharding. Valid values:

*   true
*   false', example='true', position='Body'),
  enableTracking?: boolean(name='enable_tracking', description='Specifies whether to enable the web tracking feature. Default value: false. Valid values:

*   true
*   false', example='false', position='Body'),
  encryptConf?: EncryptConf(name='encrypt_conf', description='The data structure of the encryption configuration.', position='Body'),
  hotTtl?: int32(name='hot_ttl', description='The retention period of data in the hot storage tier of the Logstore. Unit: days. You can specify a value that ranges from 30 to the value of ttl.

Hot data that is stored for longer than the period specified by hot_ttl is converted to cold data. For more information, see [Enable hot and cold-tiered storage for a Logstore](~~308645~~).', example='60', position='Body'),
  logstoreName: string(name='logstoreName', description='The name of the Logstore. The name must meet the following requirements:

*   The name must be unique in a project.
*   The name can contain only lowercase letters, digits, hyphens (-), and underscores (\\_).
*   The name must start and end with a lowercase letter or a digit.
*   The name must be 3 to 63 characters in length.', example='my-logstore', position='Body'),
  maxSplitShard?: int32(name='maxSplitShard', description='The maximum number of shards into which existing shards can be automatically split. Valid values: 1 to 64.

> If you set autoSplit to true, you must configure this parameter.', example='64', position='Body'),
  mode?: string(name='mode', description='The type of the Logstore. Log Service provides the following types of Logstores: Standard Logstores and Query Logstores. Valid values:

*   **standard**: Standard Logstore. This type of Logstore supports the log analysis feature and is suitable for scenarios such as real-time monitoring and interactive analysis. You can also use this type of Logstore to build a comprehensive observability system.
*   **query**: Query Logstore. This type of Logstore supports high-performance queries. The index traffic fee of a Query Logstore is approximately half that of a Standard Logstore. Query Logstores do not support SQL analysis. Query Logstores are suitable for scenarios in which the amount of data is large, the log retention period is long, or log analysis is not required. Log retention periods of weeks or months are considered long.', example='standard', position='Body'),
  shardCount: int32(name='shardCount', description='The number of shards.

> You cannot call the CreateLogStore operation to change the number of shards. You can call the SplitShard or MergeShards operation to change the number of shards.', example='2', position='Body'),
  telemetryType?: string(name='telemetryType', description='The type of the observable data. Valid values:

*   None: logs
*   Metrics: metrics', example='None', position='Body'),
  ttl: int32(name='ttl', description='The retention period of data. Unit: days. Valid values: 1 to 3000. If you set this parameter to 3650, data is permanently stored.', example='1', position='Body'),
}

model CreateLogStoreResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

/**
  * ### Usage notes
  * Host consists of a project name and a Log Service endpoint. You must specify a project in Host.
  *
 */
async function createLogStore(request: CreateLogStoreRequest): CreateLogStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateLogStore', 'POST', '/logstores', 'none', false, 'json', request);
}

model CreateLoggingRequest {
  project: string(name='project', description='The name of the project.', example='ali-test-project', position='Host'),
  loggingDetails: [ 
    {
      logstore: string(name='logstore', description='The name of the Logstore to which service logs of the type are stored.', example='my-logstore'),
      type: string(name='type', description='The type of service logs. Valid values:

*   consumergroup_log: the consumption delay logs of consumer groups.
*   logtail_alarm: the alert logs of Logtail.
*   operation_log: the operation logs.
*   logtail_profile: the collection logs of Logtail.
*   metering: the metering logs.
*   logtail_status: the status logs of Logtail.
*   scheduledsqlalert: the run logs of Scheduled SQL jobs.
*   etl_alert: the run logs of data transformation jobs.', example='consumergroup_log'),
    }
  ](name='loggingDetails', description='The configurations of service logs.', position='Body'),
  loggingProject: string(name='loggingProject', description='The name of the project to which service logs are stored.', example='my-project', position='Body'),
}

model CreateLoggingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

/**
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  *
 */
async function createLogging(request: CreateLoggingRequest): CreateLoggingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateLogging', 'POST', '/logging', 'none', false, 'json', request);
}

model CreateLogtailPipelineConfigRequest {
  project: string(name='project', example='test-project', position='Host'),
  aggregators?: [  map[string]any ](name='aggregators', position='Body'),
  configName: string(name='configName', example='test-config', position='Body'),
  flushers: [  map[string]any ](name='flushers', position='Body'),
  global?: map[string]any(name='global', position='Body'),
  inputs: [  map[string]any ](name='inputs', position='Body'),
  logSample?: string(name='logSample', position='Body'),
  processors?: [  map[string]any ](name='processors', position='Body'),
}

model CreateLogtailPipelineConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function createLogtailPipelineConfig(request: CreateLogtailPipelineConfigRequest): CreateLogtailPipelineConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateLogtailPipelineConfig', 'POST', '/pipelineconfigs', 'none', false, 'json', request);
}

model CreateMachineGroupRequest {
  project: string(name='project', description='The name of the project.', example='ali-test-project', position='Host'),
  groupAttribute?: {
    externalName?: string(name='externalName', description='The identifier of the external management system on which the machine group depends.', example='testgroup'),
    groupTopic?: string(name='groupTopic', description='The log topic of the machine group.', example='testtopic'),
  }(name='groupAttribute', description='The attributes of the machine group.', position='Body'),
  groupName: string(name='groupName', description='The name of the machine group. The name must meet the following requirements:

*   The name of each machine group in a project must be unique.
*   It can contain only lowercase letters, digits, hyphens (-), and underscores (\\_).
*   It must start and end with a lowercase letter or a digit.
*   It must be 3 to 128 characters in length.', example='test-machine-group', position='Body'),
  groupType?: string(name='groupType', description='The type of the machine group. The parameter can be left empty.', example='""', position='Body'),
  machineIdentifyType: string(name='machineIdentifyType', description='The type of the machine group identifier. Valid values:

*   ip: The machine group uses IP addresses as identifiers.
*   userdefined: The machine group uses custom identifiers.', example='ip', position='Body'),
  machineList: [ string ](name='machineList', description='The identifiers of machine group.

*   If you set machineIdentifyType to ip, enter the IP address of the machine.
*   If you set machineIdentifyType to userdefined, enter a custom identifier.', position='Body'),
}

model CreateMachineGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

/**
  * ### Usage notes
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  *
 */
async function createMachineGroup(request: CreateMachineGroupRequest): CreateMachineGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateMachineGroup', 'POST', '/machinegroups', 'none', false, 'json', request);
}

model CreateOssExternalStoreRequest {
  project: string(name='project', description='The name of the project.', example='my-project', position='Host'),
  externalStoreName: string(name='externalStoreName', description='The name of the external store.', example='test_oss_store', position='Body'),
  parameter: {
    accessid: string(name='accessid', description='The AccessKey ID of your account.', example='LTAI5tFsHGGeYry*****1Sz'),
    accesskey: string(name='accesskey', description='The AccessKey secret of your account.', example='GyviCLDVHkHrOztdkxuE6******Rp6'),
    bucket: string(name='bucket', description='The name of the OSS bucket.', example='my-bucket'),
    columns: [ 
      {
        name: string(name='name', description='The name of the field.', example='auto-test'),
        type: string(name='type', description='The type of the field.', example='sls'),
      }
    ](name='columns', description='The associated fields.'),
    endpoint: string(name='endpoint', description='The OSS endpoint.', example='oss-cn-hangzhou.aliyuncs.com'),
    objects: [ string ](name='objects', description='The associated objects.'),
  }(name='parameter', description='The parameters that are configured for the external store.', position='Body'),
  storeType: string(name='storeType', description='The type of the external store. Set the value to oss.', example='oss', position='Body'),
}

model CreateOssExternalStoreResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

/**
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  *
 */
async function createOssExternalStore(request: CreateOssExternalStoreRequest): CreateOssExternalStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateOssExternalStore', 'POST', '/externalstores', 'none', false, 'json', request);
}

model CreateProjectRequest {
  dataRedundancyType?: string(name='dataRedundancyType', description='Data redundancy type', example='LRS', position='Body'),
  description: string(name='description', description='The description of the project.', example='this is test', position='Body'),
  projectName: string(name='projectName', description='The name of the project. The name must be unique in a region. You cannot change the name after you create the project. The name must meet the following requirements:

*   The name must be unique.
*   It can contain only lowercase letters, digits, and hyphens (-).
*   It must start and end with a lowercase letter or a digit.
*   It must be 3 to 63 characters in length.', example='test-project', position='Body'),
  resourceGroupId?: string(name='resourceGroupId', description='The ID of the resource group.', example='rg-aekzf******sxby', position='Body'),
}

model CreateProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function createProject(request: CreateProjectRequest): CreateProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateProject', 'POST', '/', 'none', false, 'json', request);
}

model CreateRdsExternalStoreRequest {
  project: string(name='project', description='The name of the project.', example='ali-test-project', position='Host'),
  externalStoreName: string(name='externalStoreName', description='The name of the external store. The name must be unique in a project and must be different from Logstore names.', example='rds_store', position='Body'),
  parameter: {
    db: string(name='db', description='The name of the database in the ApsaraDB RDS for MySQL instance.', example='meta'),
    host?: string(name='host', description='The internal or public endpoint of the ApsaraDB RDS for MySQL instance.', example='192.168.XX.XX'),
    instanceId?: string(name='instance-id', description='The ID of the ApsaraDB RDS for MySQL instance.', example='i-bp1b6c719dfa08exf****'),
    password: string(name='password', description='The password that is used to log on to the ApsaraDB RDS for MySQL instance.', example='sfdsfldsfksfls****'),
    port: string(name='port', description='The internal or public port of the ApsaraDB RDS for MySQL instance.', example='3306'),
    region: string(name='region', description='The region where the ApsaraDB RDS for MySQL instance resides. Valid values: cn-qingdao, cn-beijing, and cn-hangzhou.', example='cn-qingdao'),
    table: string(name='table', description='The name of the database table in the ApsaraDB RDS for MySQL instance.', example='join_meta'),
    username: string(name='username', description='The username that is used to log on to the ApsaraDB RDS for MySQL instance.', example='root'),
    vpcId?: string(name='vpc-id', description='The ID of the VPC to which the ApsaraDB RDS for MySQL instance belongs.', example='vpc-bp1aevy8sofi8mh1q****'),
  }(name='parameter', description='The parameter struct.', position='Body'),
  storeType: string(name='storeType', description='The storage type. Set the value to rds-vpc, which indicates an ApsaraDB RDS for MySQL database in a virtual private cloud (VPC).', example='rds-vpc', position='Body'),
}

model CreateRdsExternalStoreResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

/**
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  *
 */
async function createRdsExternalStore(request: CreateRdsExternalStoreRequest): CreateRdsExternalStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateRdsExternalStore', 'POST', '/externalstores', 'none', false, 'json', request);
}

model CreateSavedSearchRequest {
  project: string(name='project', position='Host'),
  displayName: string(name='displayName', description='The display name.', example='displayname', position='Body'),
  logstore: string(name='logstore', description='The name of the Logstore to which the saved search belongs.', example='aliyun-test-logstore', position='Body'),
  savedsearchName: string(name='savedsearchName', description='The name of the saved search. The name must be 3 to 63 characters in length.', example='pv in minutes', position='Body'),
  searchQuery: string(name='searchQuery', description='The query statement of the saved search. A query statement consists of a search statement and an analytic statement in the `Search statement|Analytic statement` format. For more information about search statements and analytic statements, see [Log search overview](~~43772~~) and [Log analysis overview](~~53608~~).', example='*|select date_format(__time__-__time__%60, \\"%H:%i:%s\\") as time, COUNT(*) as pv group by time', position='Body'),
  topic?: string(name='topic', description='The topic of the log.', example='theme', position='Body'),
}

model CreateSavedSearchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

/**
  * ### Usage notes
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  *
 */
async function createSavedSearch(request: CreateSavedSearchRequest): CreateSavedSearchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateSavedSearch', 'POST', '/savedsearches', 'none', false, 'json', request);
}

model DeleteAnnotationDataRequest {
  datasetId?: string(name='datasetId', example='cb8cc4eb51a85e823471cdb368fae9be', position='Path'),
  annotationdataId?: string(name='annotationdataId', example='2156d560fc7c01420542df92cd6365ds', position='Path'),
}

model DeleteAnnotationDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteAnnotationData(request: DeleteAnnotationDataRequest): DeleteAnnotationDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteAnnotationData', 'DELETE', '/ml/annotationdataset/{datasetId}/annotationdata/{annotationdataId}', 'none', false, 'json', request);
}

model DeleteAnnotationDataSetRequest {
  datasetId?: string(name='datasetId', example='cb8cc4eb51a85e823471cdb368fae9be', position='Path'),
}

model DeleteAnnotationDataSetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteAnnotationDataSet(request: DeleteAnnotationDataSetRequest): DeleteAnnotationDataSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteAnnotationDataSet', 'DELETE', '/ml/annotationdataset/{datasetId}', 'none', false, 'json', request);
}

model DeleteAnnotationLabelRequest {
  labelId?: string(name='labelId', example='sls_builtin_4e0aba6d9664073513e9954fb57bd799', position='Path'),
}

model DeleteAnnotationLabelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteAnnotationLabel(request: DeleteAnnotationLabelRequest): DeleteAnnotationLabelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteAnnotationLabel', 'DELETE', '/ml/annotationlabel/{labelId}', 'none', false, 'json', request);
}

model DeleteCollectionPolicyRequest {
  policyName: string(name='policyName', example='your_log_policy', minLength=3, maxLength=63, position='Path'),
  dataCode?: string(name='dataCode', example='access_log', position='Query'),
  productCode?: string(name='productCode', example='oss', position='Query'),
}

model DeleteCollectionPolicyResponseBody = {
  message?: string(name='message', example='successful'),
}

model DeleteCollectionPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCollectionPolicyResponseBody(name='body'),
}

async function deleteCollectionPolicy(request: DeleteCollectionPolicyRequest): DeleteCollectionPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteCollectionPolicy', 'DELETE', '/collectionpolicy/{policyName}', 'json', false, 'json', request);
}

model DeleteConfigRequest {
  project: string(name='project', example='ali-test-project', position='Host'),
  configName: string(name='configName', example='logtail-config-sample', position='Path'),
}

model DeleteConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteConfig(request: DeleteConfigRequest): DeleteConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteConfig', 'DELETE', '/configs/{configName}', 'none', false, 'json', request);
}

model DeleteConsumerGroupRequest {
  project: string(name='project', description='The name of the project.', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='The name of the Logstore.', example='ali-test-logstore', position='Path'),
  consumerGroup: string(name='consumerGroup', description='The name of the consumer group.', example='consumer-group-1', position='Path'),
}

model DeleteConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

/**
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  *
 */
async function deleteConsumerGroup(request: DeleteConsumerGroupRequest): DeleteConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteConsumerGroup', 'DELETE', '/logstores/{logstore}/consumergroups/{consumerGroup}', 'none', false, 'json', request);
}

model DeleteDashboardRequest {
  project: string(name='project', example='ali-test-project', position='Host'),
  dashboardName: string(name='dashboardName', example='dashboard-1609294922657-434834', position='Path'),
}

model DeleteDashboardResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteDashboard(request: DeleteDashboardRequest): DeleteDashboardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteDashboard', 'DELETE', '/dashboards/{dashboardName}', 'none', false, 'json', request);
}

model DeleteDomainRequest {
  project: string(name='project', description='The name of the project.', example='ali-test-project', position='Host'),
  domainName: string(name='domainName', description='The domain name to be deleted.', example='example.com', position='Path'),
}

model DeleteDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

/**
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  *
 */
async function deleteDomain(request: DeleteDomainRequest): DeleteDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteDomain', 'DELETE', '/domains/{domainName}', 'none', false, 'json', request);
}

model DeleteExternalStoreRequest {
  project: string(name='project', description='The name of the project.', example='ali-test-project', position='Host'),
  externalStoreName: string(name='externalStoreName', description='The name of the external store.', example='rds_store', position='Path'),
}

model DeleteExternalStoreResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

/**
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  *
 */
async function deleteExternalStore(request: DeleteExternalStoreRequest): DeleteExternalStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteExternalStore', 'DELETE', '/externalstores/{externalStoreName}', 'none', false, 'json', request);
}

model DeleteIndexRequest {
  logstore: string(name='logstore', description='The name of the Logstore.', example='ali-test-logstore', position='Path'),
  project: string(name='project', description='The name of the project.', example='ali-test-project', position='Host'),
}

model DeleteIndexResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

/**
  * ### Usage notes
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  *
 */
async function deleteIndex(request: DeleteIndexRequest): DeleteIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteIndex', 'DELETE', '/logstores/{logstore}/index', 'none', false, 'json', request);
}

model DeleteLogStoreRequest {
  project: string(name='project', description='The name of the project.', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='The name of the Logstore.', example='aliyun-test-logstore', position='Path'),
}

model DeleteLogStoreResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

/**
  * ### Usage notes
  * Host consists of a project name and a Log Service endpoint. You must specify a project in Host.
  *
 */
async function deleteLogStore(request: DeleteLogStoreRequest): DeleteLogStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteLogStore', 'DELETE', '/logstores/{logstore}', 'none', false, 'json', request);
}

model DeleteLoggingRequest {
  project: string(name='project', description='Project名称。', example='ali-test-project', position='Host'),
}

model DeleteLoggingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteLogging(request: DeleteLoggingRequest): DeleteLoggingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteLogging', 'DELETE', '/logging', 'none', false, 'json', request);
}

model DeleteLogtailPipelineConfigRequest {
  project: string(name='project', example='test-project', position='Host'),
  configName: string(name='configName', example='test-config', position='Path'),
}

model DeleteLogtailPipelineConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteLogtailPipelineConfig(request: DeleteLogtailPipelineConfigRequest): DeleteLogtailPipelineConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteLogtailPipelineConfig', 'DELETE', '/pipelineconfigs/{configName}', 'none', false, 'json', request);
}

model DeleteMachineGroupRequest {
  project: string(name='project', description='The name of the project.', example='ali-test-project', position='Host'),
  machineGroup: string(name='machineGroup', description='The name of the machine group.', example='test-machine-group-4', position='Path'),
}

model DeleteMachineGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

/**
  * ### Usage notes
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  *
 */
async function deleteMachineGroup(request: DeleteMachineGroupRequest): DeleteMachineGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteMachineGroup', 'DELETE', '/machinegroups/{machineGroup}', 'none', false, 'json', request);
}

model DeleteProjectRequest {
  project: string(name='project', description='Project名称。', example='ali-project-test', position='Host'),
}

model DeleteProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteProject(request: DeleteProjectRequest): DeleteProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteProject', 'DELETE', '/', 'none', false, 'json', request);
}

model DeleteProjectPolicyRequest {
  project?: string(name='project', description='The name of the project.', position='Host'),
}

model DeleteProjectPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

/**
  * ### Usage notes
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  *
 */
async function deleteProjectPolicy(request: DeleteProjectPolicyRequest): DeleteProjectPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteProjectPolicy', 'DELETE', '/policy', 'json', false, 'json', request);
}

model DeleteSavedSearchRequest {
  project: string(name='project', description='The name of the project.', example='ali-test-project', position='Host'),
  savedsearchName: string(name='savedsearchName', description='The name of the saved search to be deleted.', example='test-savedsearch-name', position='Path'),
}

model DeleteSavedSearchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

/**
  * ### Usage notes
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  *
 */
async function deleteSavedSearch(request: DeleteSavedSearchRequest): DeleteSavedSearchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteSavedSearch', 'DELETE', '/savedsearches/{savedsearchName}', 'none', false, 'json', request);
}

model DeleteShipperRequest {
  project: string(name='project', description='The name of the project.', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='The name of the Logstore.', example='test-logstore', position='Path'),
  shipperName: string(name='shipperName', description='The name of the log shipping job.', example='test-shipper', position='Path'),
}

model DeleteShipperResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

/**
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  *
 */
async function deleteShipper(request: DeleteShipperRequest): DeleteShipperResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteShipper', 'DELETE', '/logstores/{logstore}/shipper/{shipperName}', 'none', false, 'json', request);
}

model GetAnnotationDataRequest {
  datasetId?: string(name='datasetId', example='cb8cc4eb51a85e823471cdb368fae9be', position='Path'),
  annotationdataId?: string(name='annotationdataId', example='2156d560fc7c01420542df92cd6365ds', position='Path'),
}

model GetAnnotationDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: MLDataParam  
}

async function getAnnotationData(request: GetAnnotationDataRequest): GetAnnotationDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAnnotationData', 'GET', '/ml/annotationdataset/{datasetId}/annotationdata/{annotationdataId}', 'json', false, 'json', request);
}

model GetAnnotationDataSetRequest {
  datasetId?: string(name='datasetId', example='cb8cc4eb51a85e823471cdb368fae9be', position='Path'),
}

model GetAnnotationDataSetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: MLDataSetParam  
}

async function getAnnotationDataSet(request: GetAnnotationDataSetRequest): GetAnnotationDataSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAnnotationDataSet', 'GET', '/ml/annotationdataset/{datasetId}', 'json', false, 'json', request);
}

model GetAnnotationLabelRequest {
  labelId?: string(name='labelId', example='sls_builtin_4e0aba6d9664073513e9954fb57bd799', position='Path'),
}

model GetAnnotationLabelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: MLLabelParam  
}

async function getAnnotationLabel(request: GetAnnotationLabelRequest): GetAnnotationLabelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAnnotationLabel', 'GET', '/ml/annotationlabel/{labelId}', 'json', false, 'json', request);
}

model GetAppliedConfigsRequest {
  project: string(name='project', description='The name of the project.', example='ali-test-project', position='Host'),
  machineGroup: string(name='machineGroup', description='The name of the machine group.', example='test-machine-group', position='Path'),
}

model GetAppliedConfigsResponseBody = {
  configs?: [ string ](name='configs', description='The names of the Logtail configurations.'),
  count?: int32(name='count', description='The number of Logtail configurations.', example='2'),
}

model GetAppliedConfigsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAppliedConfigsResponseBody(name='body'),
}

/**
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  *
 */
async function getAppliedConfigs(request: GetAppliedConfigsRequest): GetAppliedConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAppliedConfigs', 'GET', '/machinegroups/{machineGroup}/configs', 'json', false, 'json', request);
}

model GetAppliedMachineGroupsRequest {
  project: string(name='project', description='The name of the project.', example='ali-test-project', position='Host'),
  configName: string(name='configName', description='The name of the Logtail configuration.', example='logtail-config-sample', position='Path'),
}

model GetAppliedMachineGroupsResponseBody = {
  count?: int32(name='count', description='The number of returned machine groups.', example='2'),
  machinegroups?: [ string ](name='machinegroups', description='The names of the returned machine groups.', example='[ "sample-group1","sample-group2" ]'),
}

model GetAppliedMachineGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAppliedMachineGroupsResponseBody(name='body'),
}

/**
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  *
 */
async function getAppliedMachineGroups(request: GetAppliedMachineGroupsRequest): GetAppliedMachineGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAppliedMachineGroups', 'GET', '/configs/{configName}/machinegroups', 'json', false, 'json', request);
}

model GetCheckPointRequest {
  project: string(name='project', description='The name of the project.', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='The name of the Logstore.', example='test-logstore', position='Path'),
  consumerGroup: string(name='consumerGroup', description='The name of the consumer group.', example='consumer-group-1', position='Path'),
  shard?: int32(name='shard', description='The shard ID.

*   If the specified shard does not exist, an empty list is returned.
*   If no shard ID is specified, the checkpoints of all shards are returned.', example='1', position='Query'),
}

model GetCheckPointResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: [ 
    {
      shard?: int32(name='shard', description='The shard ID.', example='0'),
      checkpoint?: string(name='checkpoint', description='The value of the checkpoint.', example='MTUyNDE1NTM3OTM3MzkwODQ5Ng=='),
      updateTime?: long(name='updateTime', description='The time when the checkpoint was last updated. The value is a UNIX timestamp representing the number of seconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1524224984800922'),
      consumer?: string(name='consumer', description='The consumer at the checkpoint.', example='consumer_1'),
    }
  ](name='body'),
}

/**
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  *
 */
async function getCheckPoint(request: GetCheckPointRequest): GetCheckPointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetCheckPoint', 'GET', '/logstores/{logstore}/consumergroups/{consumerGroup}', 'json', false, 'json', request);
}

model GetCollectionPolicyRequest {
  policyName: string(name='policyName', example='your_log_policy', minLength=3, maxLength=63, position='Path'),
  dataCode?: string(name='dataCode', example='access_log', position='Query'),
  productCode?: string(name='productCode', example='oss', position='Query'),
}

model GetCollectionPolicyResponseBody = {
  collectionPolicy?: {
    attribute?: {
      app?: string(name='app', example='your-app-name'),
      policyGroup?: string(name='policyGroup', example='your-policy-group'),
    }(name='attribute'),
    centralizeConfig?: {
      destLogstore?: string(name='destLogstore', example='your-sls-logstore-in-beijing'),
      destProject?: string(name='destProject', example='your-sls-project-in-beijing'),
      destRegion?: string(name='destRegion', example='cn-beijing'),
      destTTL?: int32(name='destTTL', example='your-sls-logstore-ttl'),
    }(name='centralizeConfig'),
    centralizeEnabled?: boolean(name='centralizeEnabled', example='false'),
    dataCode?: string(name='dataCode', example='access_log'),
    enabled?: string(name='enabled', example='true'),
    policyConfig?: {
      instanceIds?: [ string ](name='instanceIds'),
      regions?: [ string ](name='regions'),
      resourceMode?: string(name='resourceMode', example='all'),
      resourceTags?: map[string]any(name='resourceTags'),
    }(name='policyConfig'),
    policyName?: string(name='policyName', example='your_log_policy'),
    productCode?: string(name='productCode', example='oss'),
  }(name='collectionPolicy'),
}

model GetCollectionPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCollectionPolicyResponseBody(name='body'),
}

async function getCollectionPolicy(request: GetCollectionPolicyRequest): GetCollectionPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetCollectionPolicy', 'GET', '/collectionpolicy/{policyName}', 'json', false, 'json', request);
}

model GetConfigRequest {
  project: string(name='project', example='ali-test-project', position='Host'),
  configName: string(name='configName', example='logtail-config-sample', position='Path'),
}

model GetConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: LogtailConfig  
}

async function getConfig(request: GetConfigRequest): GetConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetConfig', 'GET', '/configs/{configName}', 'json', false, 'json', request);
}

model GetContextLogsRequest {
  project: string(name='project', description='The name of the project.', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='The name of the Logstore.', example='test-logstore', position='Path'),
  backLines: long(name='back_lines', description='The number of logs that you want to obtain and are generated before the generation time of the start log. Valid values: (0,100].', example='10', position='Query'),
  forwardLines: long(name='forward_lines', description='The number of logs that you want to obtain and are generated after the generation time of the start log. Valid values: (0,100].', example='10', position='Query'),
  packId: string(name='pack_id', description='The unique identifier of the log group to which the start log belongs.', example='85C897C740352DC6-808', position='Query'),
  packMeta: string(name='pack_meta', description='The unique context identifier of the start log in the log group.', example='2|MTY1NTcwNTUzODY5MTY0MDk1Mg==|3|0', position='Query'),
  type: string(name='type', description='The type of the data in the Logstore. Set the value to context_log.', example='context_log', position='Query'),
}

model GetContextLogsResponseBody = {
  backLines?: long(name='back_lines', description='The number of logs that are generated before the generation time of the start log.', example='100'),
  forwardLines?: long(name='forward_lines', description='The number of logs that are generated after the generation time of the start log.', example='100'),
  logs?: [  map[string]any ](name='logs', description='The logs that are returned.'),
  progress?: string(name='progress', description='Indicates whether the query and analysis results are complete. Valid values:

*   Complete: The query is successful, and the complete query and analysis results are returned.
*   Incomplete: The query is successful, but the query and analysis results are incomplete. To obtain the complete results, you must repeat the request.', example='Complete'),
  totalLines?: long(name='total_lines', description='The total number of logs that are returned. The logs include the start log that is specified in the request.', example='201'),
}

model GetContextLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetContextLogsResponseBody(name='body'),
}

/**
  * *   You can specify a log as the start log. The time range of a contextual query is one day before and one day after the generation time of the start log.
  * *   Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  *
 */
async function getContextLogs(request: GetContextLogsRequest): GetContextLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetContextLogs', 'GET', '/logstores/{logstore}', 'json', false, 'json', request);
}

model GetCursorRequest {
  project: string(name='project', description='The name of the project.', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='The name of the Logstore.', example='sls-test-logstore', position='Path'),
  shardId: int32(name='shardId', description='The shard ID.', example='1', position='Path'),
  from: string(name='from', description='The point in time that you want to use to query a cursor. Set the value to a UNIX timestamp or a string such as `begin` and `end`.', example='begin', position='Query'),
}

model GetCursorResponseBody = {
  cursor?: string(name='cursor', description='The value of the cursor.', example='MTQ0NzI5OTYwNjg5NjYzMjM1Ng=='),
}

model GetCursorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCursorResponseBody(name='body'),
}

/**
  * ### Usage notes
  * *   Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * *   The following content describes the relationships among a cursor, project, Logstore, and shard:
  *     *   A project can have multiple Logstores.
  *     *   A Logstore can have multiple shards.
  *     *   You can use a cursor to obtain a log in a shard.
  *
 */
async function getCursor(request: GetCursorRequest): GetCursorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetCursor', 'GET', '/logstores/{logstore}/shards/{shardId}?type=cursor', 'json', false, 'json', request);
}

model GetCursorTimeRequest {
  project: string(name='project', description='The name of the project.', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='The name of the Logstore.', example='test-logstore', position='Path'),
  shardId: int32(name='shardId', description='The shard ID.', example='0', position='Path'),
  cursor: string(name='cursor', description='The cursor.', example='MTU0NzQ3MDY4MjM3NjUxMzQ0Ng==', position='Query'),
}

model GetCursorTimeResponseBody = {
  cursorTime?: string(name='cursor_time', description='The server time that is queried based on the cursor. The value is a UNIX timestamp representing the number of seconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1554260243'),
}

model GetCursorTimeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCursorTimeResponseBody(name='body'),
}

async function getCursorTime(request: GetCursorTimeRequest): GetCursorTimeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetCursorTime', 'GET', '/logstores/{logstore}/shards/{shardId}?type=cursor_time', 'json', false, 'json', request);
}

model GetDashboardRequest {
  project: string(name='project', example='ali-test-project', position='Host'),
  dashboardName: string(name='dashboardName', example='dashboard-1609294922657-434834', position='Path'),
}

model GetDashboardResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: Dashboard  
}

async function getDashboard(request: GetDashboardRequest): GetDashboardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDashboard', 'GET', '/dashboards/{dashboardName}', 'json', false, 'json', request);
}

model GetExternalStoreRequest {
  project: string(name='project', description='The name of the project.', example='ali-test-project', position='Host'),
  externalStoreName: string(name='externalStoreName', description='The name of the external store.', example='rds_store', position='Path'),
}

model GetExternalStoreResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExternalStore  
}

/**
  * *   The supported data sources of external stores include Object Storage Service (OSS) buckets and ApsaraDB RDS for MySQL databases in a virtual private cloud (VPC).
  * *   Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  *
 */
async function getExternalStore(request: GetExternalStoreRequest): GetExternalStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetExternalStore', 'GET', '/externalstores/{externalStoreName}', 'json', false, 'json', request);
}

model GetHistogramsRequest {
  project: string(name='project', description='The name of the project.', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='The name of the Logstore.', example='test-logstore', position='Path'),
  from: long(name='from', description='The start time of the subinterval. The value is a UNIX timestamp representing the number of seconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1409529600', position='Query'),
  query?: string(name='query', description='The search statement. Only search statements are supported. Analytic statements are not supported. For more information about the syntax of search statements, see [Log search overview](~~43772~~).', example='with_pack_meta', position='Query'),
  to: long(name='to', description='The end time of the subinterval. The value is a UNIX timestamp representing the number of seconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1409569200', position='Query'),
  topic?: string(name='topic', description='The topic of the logs.', example='topic', position='Query'),
}

model GetHistogramsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: [ 
    {
      from?: long(name='from', description='The start time of the subinterval. The value is a UNIX timestamp representing the number of seconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.

The time range that is specified in this operation is a left-closed, right-open interval. The interval includes the start time specified by the from parameter, but does not include the end time specified by the to parameter. If you specify the same value for the from and to parameters, the interval is invalid, and an error message is returned.', example='1409529600'),
      to?: long(name='to', description='The end time of the subinterval. The value is a UNIX timestamp representing the number of seconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.

The time range that is specified in this operation is a left-closed, right-open interval. The interval includes the start time specified by the from parameter, but does not include the end time specified by the to parameter. If you specify the same value for the from and to parameters, the interval is invalid, and an error message is returned.', example='1409569200'),
      count?: long(name='count', description='The number of logs that are generated within the subinterval.', example='2'),
      progress?: string(name='progress', description='Indicates whether the query and analysis results in the subinterval is complete. Valid values:

Complete: The query is successful, and the complete query and analysis results are returned.

Incomplete: The query is successful, but the query and analysis results are incomplete. To obtain the complete results, you must repeat the request.', example='Complete'),
    }
  ](name='body'),
}

/**
  * ### Usage notes
  * *   Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * *   The time range is evenly divided into subintervals in the responses. If the time range that is specified in the request remains unchanged, the subintervals in the responses also remain unchanged.
  * *   If the number of logs in a Logstore significantly changes, Simple Log Service cannot predict the number of times that you must call this operation to obtain the complete result. In this case, you must check the value of the progress parameter in the response of each request and determine whether to call this operation one more time to obtain the complete result. Each time you call this operation, the same number of charge units (CUs) are consumed.
  * *   After a log is written to a Logstore, you can call the GetHistograms or GetLogs operation to query the log after a short latency. The latency of a query varies based on the type of the log. Simple Log Service classifies logs into the following types based on the log time:
  *     *   Real-time data: The difference between the time record in a log and the current time on Simple Log Service is within the interval (-180 seconds,900 seconds]. For example, if a log was generated at 12:03:00, September 25, 2014 (UTC) and Simple Log Service received the log at 12:05:00, September 25, 2014 (UTC), Simple Log Service processes the log as real-time data. After real-time data is written to a Logstore, the data can be queried with a maximum latency of 3 seconds.
  *     *   Historical data: The difference between the time record in a log and the current time on Simple Log Service is within the interval \\[-604,800 seconds,-180 seconds). For example, if a log was generated at 12:00:00, September 25, 2014 (UTC) and Simple Log Service received the log at 12:05:00, September 25, 2014 (UTC), Simple Log Service processes the log as historical data. This type of log is usually generated in data backfill scenarios.
  *     After real-time data is written to a Logstore, the data can be queried with a maximum latency of 3 seconds. For 99.9% of queries, the latency is no more than 1 second.
  * > Simple Log Service calculates the difference between the log time that is specified by the \\__time\\_\\_ field and the receiving time that is specified by the \\__tag\\_\\_:\\__receive_time\\_\\_ field for each log. The receiving time indicates the time at which Simple Log Service receives the log. If the difference is within the interval (-180 seconds,900 seconds], Simple Log Service processes the log as real-time data. If the difference is within the interval \\[-604,800 seconds,-180 seconds), Simple Log Service processes the log as historical data.
  * *   Simple Log Service provides examples on how to call the GetHistograms operation by using Simple Log Service SDK for Java. For more information, see [Use GetHistograms to query the distribution of logs](~~462234~~).
  *
 */
async function getHistograms(request: GetHistogramsRequest): GetHistogramsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetHistograms', 'GET', '/logstores/{logstore}/index?type=histogram', 'json', false, 'json', request);
}

model GetIndexRequest {
  project: string(name='project', description='The name of the project.', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='The name of the Logstore.', example='test-logstore', position='Path'),
}

model GetIndexResponseBody = {
  indexMode?: string(name='index_mode', description='The type of the index.', example='v2'),
  keys?: map[string]KeysValue(name='keys', description='The configurations of field indexes. A field index is in the key-value format in which the key specifies the name of the field and the value specifies the index configuration of the field.'),
  lastModifyTime?: long(name='lastModifyTime', description='The time when the index configurations were last updated. The value is a UNIX timestamp representing the number of seconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1524155379'),
  line?: {
    caseSensitive?: boolean(name='caseSensitive', description='Indicates whether case sensitivity is enabled. Valid values:

*   true
*   false', example='false'),
    chn?: boolean(name='chn', description='Indicates whether Chinese characters are included. Valid values:

*   true
*   false', example='false'),
    excludeKeys?: [ string ](name='exclude_keys', description='The excluded fields.'),
    includeKeys?: [ string ](name='include_keys', description='The included fields.'),
    token?: [ string ](name='token', description='The delimiters.'),
  }(name='line', description='The configurations of full-text indexes.'),
  logReduce?: boolean(name='log_reduce', description='Indicates whether the log clustering feature is enabled.', example='false'),
  logReduceBlackList?: [ string ](name='log_reduce_black_list', description='The fields in the blacklist that are used to cluster logs. This parameter is valid only if the log clustering feature is enabled.'),
  logReduceWhiteList?: [ string ](name='log_reduce_white_list', description='The fields in the whitelist that are used to cluster logs. This parameter is valid only if the log clustering feature is enabled.'),
  maxTextLen?: int32(name='max_text_len', description='The maximum length of a field value that can be retained. Default value: 2048. Unit: bytes. The default value is equal to 2 KB. You can change the value of the max_text_len parameter. Valid values: 64 to 16384. Unit: bytes.', example='2048'),
  storage?: string(name='storage', description='The storage type. The value is fixed as pg.', example='pg'),
  ttl?: int32(name='ttl', description='The lifecycle of the index file. Valid values: 7, 30, and 90. Unit: day.', example='30'),
}

model GetIndexResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetIndexResponseBody(name='body'),
}

/**
  * ### Usage notes
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  *
 */
async function getIndex(request: GetIndexRequest): GetIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetIndex', 'GET', '/logstores/{logstore}/index', 'json', false, 'json', request);
}

model GetLogStoreRequest {
  logstore: string(name='logstore', description='The name of the Logstore.', example='ali-test-logstore', position='Path'),
  project: string(name='project', position='Host'),
}

model GetLogStoreResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: Logstore  
}

/**
  * ### Usage notes
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  *
 */
async function getLogStore(request: GetLogStoreRequest): GetLogStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetLogStore', 'GET', '/logstores/{logstore}', 'json', false, 'json', request);
}

model GetLogStoreMeteringModeRequest {
  project: string(name='project', example='projectName', position='Host'),
  logstore: string(name='logstore', example='logstoreName', position='Path'),
}

model GetLogStoreMeteringModeResponseBody = {
  meteringMode?: string(name='meteringMode'),
}

model GetLogStoreMeteringModeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetLogStoreMeteringModeResponseBody(name='body'),
}

async function getLogStoreMeteringMode(request: GetLogStoreMeteringModeRequest): GetLogStoreMeteringModeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetLogStoreMeteringMode', 'GET', '/logstores/{logstore}/meteringmode', 'json', false, 'json', request);
}

model GetLoggingRequest {
  project: string(name='project', description='The name of the project.', example='ali-test-project', position='Host'),
}

model GetLoggingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: Logging  
}

/**
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  *
 */
async function getLogging(request: GetLoggingRequest): GetLoggingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetLogging', 'GET', '/logging', 'json', false, 'json', request);
}

model GetLogsRequest {
  project: string(name='project', description='The name of the project.', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='The Logstore whose logs you want to query.', example='example-logstore', position='Path'),
  from: int32(name='from', description='The beginning of the time range to query. The value is the log time that is specified when log data is written.

*   The time range that is specified in this operation is a left-closed, right-open interval. The interval includes the start time specified by the **from** parameter, but does not include the end time specified by the **to** parameter. If you specify the same value for the **from** and **to** parameters, the interval is invalid, and an error message is returned.
*   The value is a UNIX timestamp representing the number of seconds that have elapsed since January 1, 1970, 00:00:00 UTC.

> To ensure that full data can be queried, specify a query time range that is accurate to the minute. If you also specify a time range in an analytic statement, Simple Log Service uses the time range specified in the analytic statement for query and analysis.

If you want to specify a time range that is accurate to the second in your analytic statement, you must use the from_unixtime or to_unixtime function to convert the time format. For more information about the functions, see [from_unixtime function](~~63451~~) and [to_unixtime function](~~63451~~). Examples:

*   `* | SELECT * FROM log WHERE from_unixtime(__time__) > from_unixtime(1664186624) AND from_unixtime(__time__) < now()`
*   `* | SELECT * FROM log WHERE __time__ > to_unixtime(date_parse(\\"2022-10-19 15:46:05\\", \\"%Y-%m-%d %H:%i:%s\\")) AND __time__ < to_unixtime(now())`', example='1627268185', position='Query'),
  line?: long(name='line', description='The maximum number of logs to return for the request. This parameter takes effect only when the query parameter is set to a search statement. Minimum value: 0. Maximum value: 100. Default value: 100.', example='100', minimum=0, maximum=100, position='Query'),
  offset?: long(name='offset', description='The line from which the query starts. This parameter takes effect only when the query parameter is set to a search statement. Default value: 0.', example='0', position='Query'),
  powerSql?: boolean(name='powerSql', description='Specifies whether to enable the Dedicated SQL feature. For more information, see [Enable Dedicated SQL](~~223777~~). Valid values:

*   true: enables the Dedicated SQL feature.
*   false (default): enables the Standard SQL feature.

You can use the powerSql or **query** parameter to configure Dedicated SQL.', example='false', position='Query'),
  query?: string(name='query', description='The search statement or the query statement. For more information, see [Log search overview](~~43772~~) and [Log analysis overview](~~53608~~). If you add `set session parallel_sql=true;` to the analytic statement in the query parameter, Dedicated SQL is used. For example, you can set the query parameter to `* | set session parallel_sql=true; select count(*) as pv`. For more information about common errors that may occur during log query and analysis, see [How do I resolve common errors that occur when I query and analyze logs?](~~61628~~)

> If you specify an analytic statement in the value of the query parameter, the line and offset parameters do not take effect. In this case, we recommend that you set the line and offset parameters to 0 and use the LIMIT clause to limit the number of logs to return on each page. For more information, see [Paged query](~~89994~~).', example='status: 401 | SELECT remote_addr,COUNT(*) as pv GROUP by remote_addr ORDER by pv desc limit 5', position='Query'),
  reverse?: boolean(name='reverse', description='Specifies whether to return logs in reverse chronological order of log timestamps. The log timestamps are accurate to the minute. Valid values:

*   true: returns logs in reverse chronological order of log timestamps.
*   false (default): returns logs in chronological order of log timestamps.

> 

*   The reverse parameter takes effect only when the query parameter is set to a search statement. The reverse parameter specifies the method used to sort returned logs.
*   If the query parameter is set to a query statement, the reverse parameter does not take effect. The method used to sort returned logs is specified by the ORDER BY clause in the analytic statement. If you use the keyword asc in the ORDER BY clause, the logs are sorted in chronological order. If you use the keyword desc in the ORDER BY clause, the logs are sorted in reverse chronological order. By default, asc is used in the ORDER BY clause.', example='false', position='Query'),
  to: int32(name='to', description='The end of the time range to query. The value is the log time that is specified when log data is written.

*   The time range that is specified in this operation is a left-closed, right-open interval. The interval includes the start time specified by the **from** parameter, but does not include the end time specified by the **to** parameter. If you specify the same value for the **from** and **to** parameters, the interval is invalid, and an error message is returned.
*   The value is a UNIX timestamp representing the number of seconds that have elapsed since January 1, 1970, 00:00:00 UTC.

> To ensure that full data can be queried, specify a query time range that is accurate to the minute. If you also specify a time range in an analytic statement, Simple Log Service uses the time range specified in the analytic statement for query and analysis.

If you want to specify a time range that is accurate to the second in your analytic statement, you must use the from_unixtime or to_unixtime function to convert the time format. For more information about the functions, see [from_unixtime function](~~63451~~) and [to_unixtime function](~~63451~~). Examples:

*   `* | SELECT * FROM log WHERE from_unixtime(__time__) > from_unixtime(1664186624) AND from_unixtime(__time__) < now()`
*   `* | SELECT * FROM log WHERE __time__ > to_unixtime(date_parse(\\"2022-10-19 15:46:05\\", \\"%Y-%m-%d %H:%i:%s\\")) AND __time__ < to_unixtime(now())`', example='1627269085', position='Query'),
  topic?: string(name='topic', description='The topic of the logs. The default value is double quotation marks (""). For more information, see [Topic](~~48881~~).', example='topic', position='Query'),
}

model GetLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: [  map[string]any ](name='body'),
}

/**
  * ### Usage notes
  * > Simple Log Service allows you to create a Scheduled SQL job. For more information, see [Create a Scheduled SQL job](~~286457~~).
  * *   Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * *   If the number of logs in a Logstore significantly changes, Simple Log Service cannot forecast the number of times that you must call this operation to obtain the complete result. In this case, you must check the value of the x-log-progress parameter in the response of each request and determine whether to call this operation one more time to obtain the complete result. Each time you call this operation, the same number of charge units (CUs) are consumed.
  * *   After a log is written to a Logstore, you can call the GetHistograms or GetLogs operation to query the log after a short latency. The latency of a query varies based on the type of the log. Simple Log Service classifies logs into the following types based on the log time:
  *         Real-time data: The difference between the time record in a log and the current time on Simple Log Service is within the interval (-180 seconds,900 seconds]. For example, if a log was generated at 12:03:00, September 25, 2014 (UTC) and Simple Log Service received the log at 12:05:00, September 25, 2014 (UTC), Simple Log Service processes the log as real-time data. This type of log is usually generated in common scenarios. 
  *     *   Historical data: The difference between the time record in a log and the current time on Simple Log Service is within the interval \\[-604,800 seconds,-180 seconds). For example, if a log was generated at 12:00:00, September 25, 2014 (UTC) and Simple Log Service received the log at 12:05:00, September 25, 2014 (UTC), Simple Log Service processes the log as historical data. This type of log is usually generated in data backfill scenarios.
  *     After real-time data is written to a Logstore, the data can be queried with a maximum latency of 3 seconds. For 99.9% of queries, the latency is no more than 1 second.
  * > Simple Log Service calculates the difference between the log time that is specified by the \\__time\\_\\_ field and the receiving time that is specified by the \\__tag\\_\\_:**receive_time** field for each log. The receiving time indicates the time at which Simple Log Service receives the log. If the difference is within the interval (-180 seconds,900 seconds], Simple Log Service processes the log as real-time data. If the difference is within the interval \\[-604,800 seconds,-180 seconds), Simple Log Service processes the log as historical data.
  * *   Simple Log Service provides examples on how to call the GetLogs operation by using Simple Log Service SDK for Java and Simple Log Service SDK for Python. For more information, see [Examples of calling the GetLogs operation by using Simple Log Service SDK for Java](~~407683~~) and [Examples of calling the GetLogs operation by using Simple Log Service SDK for Python](~~407684~~).
  *
 */
async function getLogs(request: GetLogsRequest): GetLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetLogs', 'GET', '/logstores/{logstore}?type=log', 'json', false, 'json', request);
}

model GetLogsV2Request {
  project?: string(name='project', description='The name of the project.', example='ali-test-project', position='Host'),
  logstore?: string(name='logstore', description='The name of the Logstore.', example='test-logstore', position='Path'),
  acceptEncoding?: string(name='Accept-Encoding', description='The compression method.', example='lz4', position='Header'),
  forward?: boolean(name='forward', description='Specifies whether to page forward or backward for the scan-based query or the phrase query.', example='false', position='Body'),
  from: int32(name='from', description='The beginning of the time range to query. The value is the log time that is specified when log data is written.

The time range specified by the from and to parameters is a left-closed and right-open interval. Each interval includes the specified start time but does not include the specified end time. If you specify the same value for the from and to parameters, the interval is invalid, and an error message is returned. The value is a UNIX timestamp representing the number of seconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1627268185', position='Body'),
  line?: long(name='line', description='The maximum number of logs to return for the request. This parameter takes effect only when the query parameter is set to a search statement. Valid values: 0 to 100. Default value: 100.', example='100', minimum=0, maximum=100, position='Body'),
  offset?: long(name='offset', description='The row from which the query starts. This parameter takes effect only when the query parameter is set to a search statement. Default value: 0.', example='0', position='Body'),
  powerSql?: boolean(name='powerSql', description='Specifies whether to enable the SQL enhancement feature. By default, the feature is disabled.', example='false', position='Body'),
  query?: string(name='query', description='The search statement or the query statement. For more information, see the "Log search overview" and "Log analysis overview" topics.

If you add set session parallel_sql=true; to the analytic statement in the query parameter, the dedicated SQL feature is enabled. Example: \\* | set session parallel_sql=true; select count(\\*) as pv.

Note: If you specify an analytic statement in the query parameter, the line and offset parameters are invalid for this operation. In this case, we recommend that you set the line and offset parameters to 0 and use a LIMIT clause to limit the number of entries to return on each page. For more information, see the "Perform paged queries" topic.', example='status: 401 | SELECT remote_addr,COUNT(*) as pv GROUP by remote_addr ORDER by pv desc limit 5', position='Body'),
  reverse?: boolean(name='reverse', description='Specifies whether to return logs in reverse chronological order of log timestamps. The log timestamps are accurate to the minute. Valid values:

true: returns logs in reverse chronological order of log timestamps. false (default): returns logs in chronological order of log timestamps. Note The reverse parameter takes effect only when the query parameter is set to a search statement. The reverse parameter specifies the method used to sort the returned logs. If the query parameter is set to a query statement, which consists of a search statement and an analytic statement, the reverse parameter does not take effect. The method used to sort the returned logs is specified by the ORDER BY clause in the analytic statement. If you use the keyword asc in the ORDER BY clause, the logs are sorted in chronological order. If you use the keyword desc in the ORDER BY clause, the logs are sorted in reverse chronological order. By default, asc is used in the ORDER BY clause.', example='false', position='Body'),
  session?: string(name='session', position='Body'),
  shard?: int32(name='shard', description='The ID of the shard.', example='0', position='Body'),
  to: int32(name='to', description='The end of the time range to query. The value is the log time that is specified when log data is written.

The time range specified by the from and to parameters is a left-closed and right-open interval. Each interval includes the specified start time but does not include the specified end time. If you specify the same value for the from and to parameters, the interval is invalid, and an error message is returned. The value is a UNIX timestamp representing the number of seconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1627268185', position='Body'),
  topic?: string(name='topic', description='The topic of the logs. Default value: double quotation marks ("").', example='""', position='Body'),
}

model GetLogsV2ResponseBody = {
  data?: [ map[string]string ](name='data', description='The returned result.'),
  meta?: {
    aggQuery?: string(name='aggQuery', description='The SQL statement after | in the query statement.', example='select *'),
    count?: int32(name='count', description='The number of rows that are returned.', example='1'),
    elapsedMillisecond?: long(name='elapsedMillisecond', description='The amount of time that is consumed by the request. Unit: milliseconds.', example='5'),
    hasSQL?: boolean(name='hasSQL', description='Indicates whether the query is an SQL query.', example='false'),
    isAccurate?: boolean(name='isAccurate', description='Indicates whether the returned result is accurate.', example='true'),
    keys?: [ string ](name='keys', description='All keys in the query result.'),
    processedBytes?: long(name='processedBytes', description='The number of logs that are processed in the request.', example='10000'),
    processedRows?: int32(name='processedRows', description='The number of rows that are processed in the request.', example='10000'),
    progress?: string(name='progress', description='Indicates whether the query result is complete. Valid values:

*   Complete: The query was successful, and the complete result is returned.
*   Incomplete: The query was successful, but the query result is incomplete. To obtain the complete result, you must call the operation again.', example='Complete'),
    telementryType?: string(name='telementryType', description='The type of observable data.', example='None'),
    terms?: [  map[string]any ](name='terms', description='All terms in the query statement.'),
    whereQuery?: string(name='whereQuery', description='The part before | in the query statement.', example='*'),
  }(name='meta', description='The metadata that is returned.'),
}

model GetLogsV2Response = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetLogsV2ResponseBody(name='body'),
}

/**
  * *   Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * *   If the number of logs in a Logstore significantly changes, Simple Log Service cannot predict the number of times you must call this API operation to obtain a complete result. In this case, you must check the value of the progress parameter in the response of each request and determine whether to call this operation again to obtain the complete result. Each time you call this operation, the same number of charge units (CUs) are consumed.
  * *   After a log is written to a Logstore, you can call the GetHistograms or GetLogs operation to query the log. The latency of the query varies based on the type of the log. Simple Log Service classifies logs into the following types based on log timestamps:
  * 1.  1.  Real-time data: The difference between the time record in the log and the current server time is within the interval (-180 seconds,900 seconds]. For example, if a log was generated at 12:03:00, September 25, 2014 (UTC) and the server received the log at 12:05:00, September 25, 2014 (UTC), the server processes the log as real-time data. This type of log is usually generated in common scenarios.
  * 2.  2.  Historical data: The difference between the time record in the log and the current server time is within the interval \\[-604,800 seconds,-180 seconds). For example, if a log was generated at 12:00:00, September 25, 2014 (UTC) and the server received the log at 12:05:00, September 25, 2014 (UTC), the server processes the log as historical data. This type of log is usually generated in data backfill scenarios. After real-time data is written to a Logstore, the data can be queried with a maximum latency of 3 seconds. For 99.9% of queries, the latency is no more than 1 second.
  *
 */
async function getLogsV2(request: GetLogsV2Request): GetLogsV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetLogsV2', 'POST', '/logstores/{logstore}/logs', 'json', false, 'json', request);
}

model GetLogtailPipelineConfigRequest {
  project: string(name='project', example='test-project', position='Host'),
  configName: string(name='configName', example='test-config', position='Path'),
}

model GetLogtailPipelineConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: LogtailPipelineConfig  
}

async function getLogtailPipelineConfig(request: GetLogtailPipelineConfigRequest): GetLogtailPipelineConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetLogtailPipelineConfig', 'GET', '/pipelineconfigs/{configName}', 'json', false, 'json', request);
}

model GetMLServiceResultsRequest {
  serviceName?: string(name='serviceName', position='Path'),
  allowBuiltin?: boolean(name='allowBuiltin', position='Query'),
  body?: MLServiceAnalysisParam(name='body', position='Body'),
}

model GetMLServiceResultsResponseBody = {
  data?: [ map[string]string ](name='data'),
  status?: map[string]string(name='status'),
}

model GetMLServiceResultsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMLServiceResultsResponseBody(name='body'),
}

async function getMLServiceResults(request: GetMLServiceResultsRequest): GetMLServiceResultsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetMLServiceResults', 'POST', '/ml/service/{serviceName}/analysis', 'json', false, 'json', request);
}

model GetMachineGroupRequest {
  project: string(name='project', description='The name of the project.', example='ali-test-project', position='Host'),
  machineGroup: string(name='machineGroup', description='The name of the machine group.', example='test-machine-group', position='Path'),
}

model GetMachineGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: MachineGroup  
}

/**
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  *
 */
async function getMachineGroup(request: GetMachineGroupRequest): GetMachineGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetMachineGroup', 'GET', '/machinegroups/{machineGroup}', 'json', false, 'json', request);
}

model GetProjectRequest {
  project: string(name='project', description='The name of the project.', example='ali-project-test', position='Host'),
}

model GetProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: Project  
}

/**
  * ### Usage notes
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  *
 */
async function getProject(request: GetProjectRequest): GetProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetProject', 'GET', '/', 'json', false, 'json', request);
}

model GetProjectLogsRequest {
  project: string(name='project', description='The name of the project.', example='ali-test-project', position='Host'),
  powerSql?: boolean(name='powerSql', description='Specifies whether to enable the Dedicated SQL feature. For more information, see [Enable Dedicated SQL](~~223777~~). Valid values:

*   true
*   false (default): enables the Standard SQL feature.

You can use the powerSql or **query** parameter to configure Dedicated SQL.', example='false', position='Query'),
  query: string(name='query', description='The standard SQL statement. In this example, the SQL statement queries the number of page views (PVs) from 2022-03-01 10:41:40 to 2022-03-01 10:56:40 in a Logstore whose name is nginx-moni.', example='SELECT COUNT(*) as pv FROM nginx-moni where __time__ &gt; 1646102500 and __time__ &lt; 1646103400', position='Query'),
}

model GetProjectLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: [ map[string]string ](name='body'),
}

/**
  * ### Usage notes
  * *   You can use the query parameter to specify a standard SQL statement.
  * *   You must specify a project in the domain name of the request.
  * *   You must specify a Logstore in the FROM clause of the SQL statement. A Logstore can be used as an SQL table.
  * *   You must specify a time range in the SQL statement by using the \\__date\\_\\_ parameter or \\__time\\_\\_ parameter. The value of the \\__date\\_\\_ parameter is a timestamp, and the value of the \\__time\\_\\_ parameter is an integer. The unit of the \\__time\\_\\_ parameter is seconds.
  * *   Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  *
 */
async function getProjectLogs(request: GetProjectLogsRequest): GetProjectLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetProjectLogs', 'GET', '/logs', 'json', false, 'json', request);
}

model GetProjectPolicyRequest {
  project?: string(name='project', description='A short description of struct', position='Host'),
}

model GetProjectPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: string(name='body'),
}

/**
  * ### Usage notes
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  *
 */
async function getProjectPolicy(request: GetProjectPolicyRequest): GetProjectPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetProjectPolicy', 'GET', '/policy', 'json', false, 'json', request);
}

model GetSavedSearchRequest {
  project: string(name='project', description='The name of the project.', example='aliyun-test-project', position='Host'),
  savedsearchName: string(name='savedsearchName', description='The name of the saved search.', example='savedsearch-name', position='Path'),
}

model GetSavedSearchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SavedSearch  
}

/**
  * ### Usage notes
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  *
 */
async function getSavedSearch(request: GetSavedSearchRequest): GetSavedSearchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetSavedSearch', 'GET', '/savedsearches/{savedsearchName}', 'json', false, 'json', request);
}

model GetShipperStatusRequest {
  project: string(name='project', description='The name of the project.', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='The name of the Logstore.', example='ali-test-logstore', position='Path'),
  shipperName: string(name='shipperName', description='The name of the log shipping job.', example='test-shipper', position='Path'),
  from: long(name='from', description='The start time of the log shipping job. The value is a UNIX timestamp representing the number of seconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1409529600', position='Query'),
  offset?: int32(name='offset', description='The line from which the query starts. Default value: 0.', example='0', position='Query'),
  size?: int32(name='size', description='The number of entries per page. Default value: 100. Maximum value: 500.', example='100', position='Query'),
  status?: string(name='status', description='The status of the log shipping job. This parameter is empty by default, which indicates that log shipping jobs in all states are returned. Valid values: success, fail, and running.', example='success', position='Query'),
  to: long(name='to', description='The end time of the log shipping job. The value is a UNIX timestamp representing the number of seconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1627269085', position='Query'),
}

model GetShipperStatusResponseBody = {
  count?: long(name='count', description='The number of log shipping jobs returned on the current page.', example='10'),
  statistics?: {
    fail?: long(name='fail', description='The number of log shipping jobs that are in the fail state.', example='0'),
    running?: long(name='running', description='The number of log shipping jobs that are in the running state.', example='0'),
    success?: long(name='success', description='The number of log shipping jobs that are in the success state.', example='20'),
  }(name='statistics', description='The statistics about log shipping jobs.'),
  tasks?: {
    id?: string(name='id', description='The ID of the log shipping job.', example='abcdefghijk'),
    taskCode?: string(name='taskCode', description='The error code of the log shipping job.', example='UnAuthorized'),
    taskCreateTime?: long(name='taskCreateTime', description='The start time of the log shipping job. The value is a UNIX timestamp representing the number of seconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1448925013'),
    taskDataLines?: int32(name='taskDataLines', description='The number of logs that are shipped in the log shipping job.', example='0'),
    taskFinishTime?: long(name='taskFinishTime', description='The end time of the log shipping job. The value is a UNIX timestamp representing the number of seconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1448926013'),
    taskLastDataReceiveTime?: long(name='taskLastDataReceiveTime', description='The time when Simple Log Service receives the most recent log of the log shipping job. The value is a UNIX timestamp representing the number of seconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1448915013'),
    taskMessage?: string(name='taskMessage', description='The error message of the log shipping job.', example='Internal server error'),
    taskStatus?: string(name='taskStatus', description='The status of the log shipping job. Valid values: running, success, and fail.', example='success'),
  }(name='tasks', description='The details of log shipping jobs.'),
  total?: long(name='total', description='The total number of log shipping jobs.', example='20'),
}

model GetShipperStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetShipperStatusResponseBody(name='body'),
}

/**
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  *
 */
async function getShipperStatus(request: GetShipperStatusRequest): GetShipperStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetShipperStatus', 'GET', '/logstores/{logstore}/shipper/{shipperName}/tasks', 'json', false, 'json', request);
}

model ListAnnotationDataRequest {
  datasetId?: string(name='datasetId', example='cb8cc4eb51a85e823471cdb368fae9be', position='Path'),
  offset?: int32(name='offset', example='0', position='Query'),
  size?: int32(name='size', example='100', position='Query'),
}

model ListAnnotationDataResponseBody = {
  data?: [
    MLDataParam
  ](name='data'),
  total?: int32(name='total', example='20'),
}

model ListAnnotationDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAnnotationDataResponseBody(name='body'),
}

async function listAnnotationData(request: ListAnnotationDataRequest): ListAnnotationDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListAnnotationData', 'GET', '/ml/annotationdataset/{datasetId}/annotationdata', 'json', false, 'json', request);
}

model ListAnnotationDataSetsRequest {
  offset?: int32(name='offset', example='0', position='Query'),
  size?: int32(name='size', example='100', position='Query'),
}

model ListAnnotationDataSetsResponseBody = {
  data?: [
    MLDataSetParam
  ](name='data'),
  total?: int32(name='total', example='20'),
}

model ListAnnotationDataSetsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAnnotationDataSetsResponseBody(name='body'),
}

async function listAnnotationDataSets(request: ListAnnotationDataSetsRequest): ListAnnotationDataSetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListAnnotationDataSets', 'GET', '/ml/annotationdataset', 'json', false, 'json', request);
}

model ListAnnotationLabelsRequest {
  offset?: int32(name='offset', example='0', position='Query'),
  size?: int32(name='size', example='100', position='Query'),
}

model ListAnnotationLabelsResponseBody = {
  data?: [
    MLLabelParam
  ](name='data'),
  total?: int32(name='total', example='20'),
}

model ListAnnotationLabelsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAnnotationLabelsResponseBody(name='body'),
}

async function listAnnotationLabels(request: ListAnnotationLabelsRequest): ListAnnotationLabelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListAnnotationLabels', 'GET', '/ml/annotationlabel', 'json', false, 'json', request);
}

model ListCollectionPoliciesRequest {
  attribute?: {
    app?: string(name='app', example='your-app-name'),
    policyGroup?: string(name='policyGroup', example='your-policy-group'),
  }(name='attribute', shrink='json', position='Query'),
  dataCode?: string(name='dataCode', example='access_log', position='Query'),
  instanceId?: string(name='instanceId', example='your-test-bucket1', position='Query'),
  pageNum?: int32(name='pageNum', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='pageSize', example='10', minimum=1, maximum=100, position='Query'),
  policyName?: string(name='policyName', example='your_log_policy', position='Query'),
  productCode?: string(name='productCode', example='oss', position='Query'),
}

model ListCollectionPoliciesResponseBody = {
  currentCount?: int32(name='currentCount', example='1'),
  data?: [ 
    {
      attribute?: {
        app?: string(name='app', example='your-app-name'),
        policyGroup?: string(name='policyGroup', example='your-policy-group'),
      }(name='attribute'),
      centralizeConfig?: {
        destLogstore?: string(name='destLogstore', example='your-sls-logstore-in-beijing'),
        destProject?: string(name='destProject', example='your-sls-project-in-beijing'),
        destRegion?: string(name='destRegion', example='cn-beijing'),
        destTTL?: int32(name='destTTL', example='your-sls-logstore-ttl'),
      }(name='centralizeConfig'),
      centralizeEnabled?: boolean(name='centralizeEnabled', example='false'),
      dataCode?: string(name='dataCode', example='access_log'),
      enabled?: boolean(name='enabled', example='true'),
      policyConfig?: {
        instanceIds?: [ string ](name='instanceIds'),
        regions?: [ string ](name='regions'),
        resourceMode?: string(name='resourceMode', example='all'),
        resourceTags?: map[string]any(name='resourceTags'),
      }(name='policyConfig'),
      policyName?: string(name='policyName', example='your_log_policy'),
      productCode?: string(name='productCode', example='oss'),
    }
  ](name='data'),
  totalCount?: int32(name='totalCount', example='1'),
}

model ListCollectionPoliciesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCollectionPoliciesResponseBody(name='body'),
}

async function listCollectionPolicies(request: ListCollectionPoliciesRequest): ListCollectionPoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListCollectionPolicies', 'GET', '/collectionpolicy', 'json', false, 'json', request);
}

model ListConfigRequest {
  project: string(name='project', example='ali-test-project', position='Host'),
  configName?: string(name='configName', example='logtail-config-sample', position='Query'),
  logstoreName: string(name='logstoreName', example='ali-test-logstore', position='Query'),
  offset: long(name='offset', example='0', position='Query'),
  size: long(name='size', example='10', position='Query'),
}

model ListConfigResponseBody = {
  configs?: [ string ](name='configs'),
  count?: int32(name='count', example='3'),
  total?: int32(name='total', example='2'),
}

model ListConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListConfigResponseBody(name='body'),
}

async function listConfig(request: ListConfigRequest): ListConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListConfig', 'GET', '/configs', 'json', false, 'json', request);
}

model ListConsumerGroupRequest {
  project: string(name='project', description='The name of the project.', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='The name of the Logstore.', example='ali-test-logstore', position='Path'),
}

model ListConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: [
    ConsumerGroup
  ](name='body'),
}

/**
  * ### Usage notes
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  *
 */
async function listConsumerGroup(request: ListConsumerGroupRequest): ListConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListConsumerGroup', 'GET', '/logstores/{logstore}/consumergroups', 'json', false, 'json', request);
}

model ListDashboardRequest {
  project: string(name='project', example='ali-test-project', position='Host'),
  offset?: int32(name='offset', example='0', position='Query'),
  size?: int32(name='size', example='10', position='Query'),
}

model ListDashboardResponseBody = {
  dashboardItems?: [ 
    {
      dashboardName?: string(name='dashboardName', example='dashboard-1609294922657-434834'),
      displayName?: string(name='displayName', example='data-ingest'),
    }
  ](name='dashboardItems'),
  dashboards?: [ string ](name='dashboards'),
}

model ListDashboardResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDashboardResponseBody(name='body'),
}

async function listDashboard(request: ListDashboardRequest): ListDashboardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDashboard', 'GET', '/dashboards', 'json', false, 'json', request);
}

model ListDomainsRequest {
  project: string(name='project', description='The name of the project.', example='ali-test-project', position='Host'),
  domainName?: string(name='domainName', description='The domain name that is used to match custom domain names. For example, if you set domainName to `example.com`, the matched domain names are `a.example.com` and `b.example.com`.', example='example.com', position='Query'),
  offset?: int32(name='offset', description='The line from which the query starts. Default value: 0.', example='0', position='Query'),
  size?: int32(name='size', description='The number of entries per page. Default value: 500. Maximum value: 500.', example='10', position='Query'),
}

model ListDomainsResponseBody = {
  count?: long(name='count', description='The number of domain names that are returned on the current page.', example='1'),
  domains?: [ string ](name='domains', description='The domain names.'),
  total?: long(name='total', description='The total number of domain names that are returned.', example='1'),
}

model ListDomainsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDomainsResponseBody(name='body'),
}

/**
  * *   Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * *   Only one custom domain name can be bound to each project.
  *
 */
async function listDomains(request: ListDomainsRequest): ListDomainsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDomains', 'GET', '/domains', 'json', false, 'json', request);
}

model ListExternalStoreRequest {
  project: string(name='project', description='The name of the project.', example='ali-test-project', position='Host'),
  externalStoreName?: string(name='externalStoreName', description='The name of the external store. You can query external stores that contain a specified string.', example='store', position='Query'),
  offset?: int32(name='offset', description='The line from which the query starts. Default value: 0.', example='0', position='Query'),
  sizs?: int32(name='sizs', description='The number of entries per page. Maximum value: 500.', example='10', position='Query'),
}

model ListExternalStoreResponseBody = {
  count?: int32(name='count', description='The number of external stores returned on the current page.', example='3'),
  externalstores?: [
    ExternalStore
  ](name='externalstores', description='The names of the external stores.'),
  total?: int32(name='total', description='The number of external stores that meet the query conditions.', example='3'),
}

model ListExternalStoreResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListExternalStoreResponseBody(name='body'),
}

/**
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  *
 */
async function listExternalStore(request: ListExternalStoreRequest): ListExternalStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListExternalStore', 'GET', '/externalstores', 'json', false, 'json', request);
}

model ListLogStoresRequest {
  project: string(name='project', position='Host'),
  logstoreName?: string(name='logstoreName', description='The name of the Logstore. Fuzzy match is supported. For example, if you enter test, Logstores whose name contains test are returned.', example='my-logstore', position='Query'),
  mode?: string(name='mode', description='The type of the Logstore. Valid values: standard and query.

*   **standard**: Standard Logstore. This type of Logstore supports the log analysis feature and is suitable for scenarios such as real-time monitoring and interactive analysis. You can also use this type of Logstore to build a comprehensive observability system.
*   **query**: Query Logstore. This type of Logstore supports high-performance queries. The index traffic fee of a Query Logstore is approximately half that of a Standard Logstore. Query Logstores do not support SQL analysis. Query Logstores are suitable for scenarios in which the volume of data is large, the log retention period is long, or log analysis is not required. Log retention periods of weeks or months are considered long.', example='standard', position='Query'),
  offset?: int32(name='offset', description='The line from which the query starts. Default value: 0.', example='0', position='Query'),
  size?: int32(name='size', description='The number of entries per page. Maximum value: 500. Default value: 500.', example='10', position='Query'),
  telemetryType?: string(name='telemetryType', description='The type of the data that you want to query. Valid values:

*   None: logs
*   Metrics: metrics', example='None', position='Query'),
}

model ListLogStoresResponseBody = {
  count?: int32(name='count', description='The number of entries that are returned on the current page.'),
  logstores?: [ string ](name='logstores', description='The Logstores that meet the query conditions.', example='["test-1","test-2"]'),
  total?: int32(name='total', description='The number of the Logstores that meet the query conditions.', example='2'),
}

model ListLogStoresResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListLogStoresResponseBody(name='body'),
}

/**
  * ### Usage notes
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  *
 */
async function listLogStores(request: ListLogStoresRequest): ListLogStoresResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListLogStores', 'GET', '/logstores', 'json', false, 'json', request);
}

model ListLogtailPipelineConfigRequest {
  project: string(name='project', example='test-project', position='Host'),
  configName?: string(name='configName', position='Query'),
  logstoreName?: string(name='logstoreName', example='test-logstore', position='Query'),
  offset?: long(name='offset', example='0', minimum=0, position='Query'),
  size?: long(name='size', example='20', minimum=0, maximum=500, position='Query'),
}

model ListLogtailPipelineConfigResponseBody = {
  configs?: [ string ](name='configs'),
  count?: int32(name='count', example='10'),
  total?: int32(name='total', example='20'),
}

model ListLogtailPipelineConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListLogtailPipelineConfigResponseBody(name='body'),
}

async function listLogtailPipelineConfig(request: ListLogtailPipelineConfigRequest): ListLogtailPipelineConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListLogtailPipelineConfig', 'GET', '/pipelineconfigs', 'json', false, 'json', request);
}

model ListMachineGroupRequest {
  project: string(name='project', description='The name of the project.', example='aliyun-test-project', position='Host'),
  groupName?: string(name='groupName', description='The name of the machine group. This parameter is used to filter machine groups. Partial match is supported.', example='test-machine-group', position='Query'),
  offset?: int32(name='offset', description='The line from which the query starts. Default value: 0.', example='1', position='Query'),
  size?: int32(name='size', description='The number of entries per page. Maximum value: 500.', example='10', position='Query'),
}

model ListMachineGroupResponseBody = {
  count?: int32(name='count', description='The number of machine groups that are returned on the current page.', example='2'),
  machinegroups?: [ string ](name='machinegroups', description='The machine groups that meet the query conditions.', example='[ "test-machine-group-1", "test-machine-group-2" ]'),
  total?: int32(name='total', description='The total number of machine groups that meet the query conditions.', example='2'),
}

model ListMachineGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListMachineGroupResponseBody(name='body'),
}

/**
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  *
 */
async function listMachineGroup(request: ListMachineGroupRequest): ListMachineGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListMachineGroup', 'GET', '/machinegroups', 'json', false, 'json', request);
}

model ListMachinesRequest {
  project: string(name='project', description='The name of the project.', example='ali-test-project', position='Host'),
  machineGroup: string(name='machineGroup', description='The name of the machine group.', example='test-group', position='Path'),
  offset?: int32(name='offset', description='The line from which the query starts. Default value: 0.', example='0', position='Query'),
  size?: int32(name='size', description='The number of entries per page. Default value: 100. Maximum value: 500.', example='10', position='Query'),
}

model ListMachinesResponseBody = {
  count?: int32(name='count', description='The number of machines that are returned on the current page.', example='3'),
  machines?: [
    Machine
  ](name='machines', description='The machines that are returned.'),
  total?: int32(name='total', description='The total number of machines.', example='8'),
}

model ListMachinesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListMachinesResponseBody(name='body'),
}

/**
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  *
 */
async function listMachines(request: ListMachinesRequest): ListMachinesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListMachines', 'GET', '/machinegroups/{machineGroup}/machines', 'json', false, 'json', request);
}

model ListProjectRequest {
  offset?: int32(name='offset', description='The line from which the query starts. Default value: 0.', example='0', position='Query'),
  projectName?: string(name='projectName', description='The name of the project.', example='ali-test-project', position='Query'),
  resourceGroupId?: string(name='resourceGroupId', position='Query'),
  size?: int32(name='size', description='The number of entries per page. Default value: 100. This operation can return up to 500 projects.', example='10', position='Query'),
}

model ListProjectResponseBody = {
  count?: long(name='count', description='The number of returned projects on the current page.', example='2'),
  projects?: [
    Project
  ](name='projects', description='The projects that meet the query conditions.'),
  total?: long(name='total', description='The total number of projects that meet the query conditions.', example='11'),
}

model ListProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProjectResponseBody(name='body'),
}

/**
  * ### Usage notes
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  *
 */
async function listProject(request: ListProjectRequest): ListProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProject', 'GET', '/', 'json', false, 'json', request);
}

model ListSavedSearchRequest {
  project: string(name='project', description='The name of the project.', example='aliyun-test-project', position='Host'),
  offset?: int32(name='offset', description='The line from which the query starts. Default value: 0.', example='0', position='Query'),
  size?: int32(name='size', description='The number of entries per page. Maximum value: 500.', example='10', position='Query'),
}

model ListSavedSearchResponseBody = {
  count?: int32(name='count', description='The number of saved searches returned on the current page.', example='4'),
  savedsearchItems?: [
    SavedSearch
  ](name='savedsearchItems', description='The saved searches.', example='[ "test-1", "test-2" ]'),
  total?: int32(name='total', description='The total number of saved searches that meet the query conditions.', example='4'),
}

model ListSavedSearchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSavedSearchResponseBody(name='body'),
}

/**
  * ### Usage notes
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  *
 */
async function listSavedSearch(request: ListSavedSearchRequest): ListSavedSearchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSavedSearch', 'GET', '/savedsearches', 'json', false, 'json', request);
}

model ListShardsRequest {
  project: string(name='project', description='The name of the project.', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='The name of the Logstore.', example='test-logstore', position='Path'),
}

model ListShardsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: [
    Shard
  ](name='body'),
}

async function listShards(request: ListShardsRequest): ListShardsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListShards', 'GET', '/logstores/{logstore}/shards', 'json', false, 'json', request);
}

model ListShipperRequest {
  project: string(name='project', description='The name of the project.', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='The name of the Logstore.', example='test-logstore', position='Path'),
}

model ListShipperResponseBody = {
  count?: long(name='count', description='The number of log shipping jobs returned.', example='3'),
  shipper?: [ string ](name='shipper', description='The names of the log shipping jobs.'),
  total?: long(name='total', description='The total number of log shipping jobs.', example='5'),
}

model ListShipperResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListShipperResponseBody(name='body'),
}

/**
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  *
 */
async function listShipper(request: ListShipperRequest): ListShipperResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListShipper', 'GET', '/logstores/{logstore}/shipper', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  resourceId?: [ string ](name='resourceId', description='The IDs of the resources for which you want to query tags. You must specify at least one of resourceId and tags.', shrink='json', position='Query'),
  resourceType: string(name='resourceType', description='The type of the resource. Set the value to project.', example='project', position='Query'),
  tags?: [ 
    {
      key: string(name='key', description='The key of the tag that you want to use to filter resources. For example, if you set the key to `"test-key"`, only resources to which the key is added are returned.``', example='key1'),
      value?: string(name='value', description='The value of the tag that you want to use to filter resources. If you set the value to null, resources are filtered based only on the key of the tag.', example='value1'),
    }
  ](name='tags', description='The tags that you want to use to filter resources based on exact match. Each tag is a key-value pair. You must specify at least one of resourceId and tags.

You can enter up to 20 tags.', shrink='json', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='nextToken', description='The pagination token that is used in the next request to retrieve a new page of results.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  tagResources?: [ 
    {
      resourceId?: string(name='resourceId', description='The ID of the resource.', example='ali-test-project'),
      resourceType?: string(name='resourceType', description='The type of the resource.', example='project'),
      tagKey?: string(name='tagKey', description='The key of the tag.', example='key1'),
      tagValue?: string(name='tagValue', description='The value of the tag.', example='value1'),
    }
  ](name='tagResources', description='The returned tags.'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagResourcesResponseBody(name='body'),
}

/**
  * ### Usage notes
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  *
 */
async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTagResources', 'GET', '/tags', 'json', false, 'json', request);
}

model PutAnnotationDataRequest {
  datasetId?: string(name='datasetId', example='cb8cc4eb51a85e823471cdb368fae9be', position='Path'),
  annotationdataId?: string(name='annotationdataId', example='2156d560fc7c01420542df92cd6365ds', position='Query'),
  mlDataParam?: MLDataParam(name='mlDataParam', position='Body'),
  rawLog?: [ map[string]string ](name='rawLog', position='Body'),
}

model PutAnnotationDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function putAnnotationData(request: PutAnnotationDataRequest): PutAnnotationDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PutAnnotationData', 'PUT', '/ml/annotationdataset/{datasetId}/annotationdata', 'none', false, 'json', request);
}

model PutProjectPolicyRequest {
  project?: string(name='project', position='Host'),
  body?: string(name='body', description='The project policy.', example='{ 	"Version": "1", 	"Statement": [{ 		"Action": ["log:PostLogStoreLogs"], 		"Resource": "acs:log:*:*:project/exampleproject/*", 		"Effect": "Deny", 		"Condition": { 			"StringNotLike": { 				"acs:SourceVpc": ["vpc-*"] 			} 		} 	}] }', position='Body'),
}

model PutProjectPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

/**
  * ### Usage notes
  * *   Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * *   Alibaba Cloud Simple Log Service allows you to configure a project policy to authorize other users to access the specified Log Service resources.
  *     *   You must configure a project policy based on policy syntax. Before you configure a project policy, you must be familiar with the Action, Resource, and Condition parameters. For more information, see [RAM](~~128139~~).
  *     *   If you set the Principal element to an asterisk (\\*) and do not configure the Condition element when you configure a project policy, the policy applies to all users except for the project owner. If you set the Principal element to an asterisk (\\*) and configure the Condition element when you configure a project policy, the policy applies to all users including the project owner.
  *     *   You can configure multiple project policies for a project. The total size of the policies cannot exceed 16 KB.
  *
 */
async function putProjectPolicy(request: PutProjectPolicyRequest): PutProjectPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PutProjectPolicy', 'POST', '/policy', 'json', false, 'json', request);
}

model PutWebtrackingRequest {
  project: string(name='project', position='Host'),
  logstoreName: string(name='logstoreName', position='Path'),
  logs: [ map[string]string ](name='__logs__', position='Body'),
  source: string(name='__source__', position='Body'),
  tags?: map[string]string(name='__tags__', position='Body'),
  topic?: string(name='__topic__', position='Body'),
}

model PutWebtrackingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function putWebtracking(request: PutWebtrackingRequest): PutWebtrackingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PutWebtracking', 'POST', '/logstores/{logstoreName}/track', 'none', false, 'json', request);
}

model QueryMLServiceResultsRequest {
  serviceName?: string(name='serviceName', position='Path'),
  allowBuiltin?: boolean(name='allowBuiltin', position='Query'),
  body?: MLServiceAnalysisParam(name='body', position='Body'),
}

model QueryMLServiceResultsResponseBody = {
  data?: [ map[string]string ](name='data'),
  status?: map[string]string(name='status'),
}

model QueryMLServiceResultsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryMLServiceResultsResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function queryMLServiceResults(request: QueryMLServiceResultsRequest): QueryMLServiceResultsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryMLServiceResults', 'POST', '/ml/service/{serviceName}/analysis', 'json', false, 'json', request);
}

model RemoveConfigFromMachineGroupRequest {
  project: string(name='project', description='The name of the project.', example='ali-test-project', position='Host'),
  machineGroup: string(name='machineGroup', description='The name of the machine group.', example='test-group', position='Path'),
  configName: string(name='configName', description='The name of the Logtail configuration.', example='test-logtail', position='Path'),
}

model RemoveConfigFromMachineGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

/**
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  *
 */
async function removeConfigFromMachineGroup(request: RemoveConfigFromMachineGroupRequest): RemoveConfigFromMachineGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RemoveConfigFromMachineGroup', 'DELETE', '/machinegroups/{machineGroup}/configs/{configName}', 'none', false, 'json', request);
}

model SplitShardRequest {
  project: string(name='project', description='The name of the project.', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='The name of the Logstore.', example='logstorename', position='Path'),
  shard: int32(name='shard', description='The ID of the shard.', example='0', position='Path'),
  key?: string(name='key', description='The position where the shard is split.', example='ef000000000000000000000000000000', position='Query'),
  shardCount?: int32(name='shardCount', description='The number of new shards that are generated after splitting.', example='2', position='Query'),
}

model SplitShardResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: [
    Shard
  ](name='body'),
}

/**
  * ### Usage notes
  * *   Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  * *   Each shard has an MD5 hash range, and each range is a left-closed, right-open interval. The interval is in the `[BeginKey,EndKey)` format. A shard can be in the readwrite or readonly state. You can split a shard and merge shards. For more information, see [Shard](~~28976~~).
  *
 */
async function splitShard(request: SplitShardRequest): SplitShardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SplitShard', 'POST', '/logstores/{logstore}/shards/{shard}?action=split', 'json', false, 'json', request);
}

model TagResourcesRequest {
  resourceId: [ string ](name='resourceId', description='The resource IDs. You can specify only one resource and add tags to the resource.', position='Body'),
  resourceType: string(name='resourceType', description='The type of the resource. Set the value to project.', example='project', position='Body'),
  tags: [ 
    {
      key: string(name='key', description='The key of the tag. The key must meet the following requirements:

*   The key must be `1 to 128` characters in length.
*   The key cannot contain `"http://"` or `"https://"`.
*   The key cannot start with `"acs:"` or `"aliyun"`.', example='key1'),
      value: string(name='value', description='The value of the tag. The value must meet the following requirements:

*   The value must be `1 to 128` characters in length.
*   The value cannot contain `"http://"` or `"https://"`.', example='value1'),
    }
  ](name='tags', description='The tags that you want to add to the resource. Up to 20 tags are supported at a time. Each tag is a key-value pair.', position='Body'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

/**
  * ### Usage notes
  * Host consists of a project name and a Log Service endpoint. You must specify a project in Host.
  *
 */
async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'TagResources', 'POST', '/tag', 'none', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='all', example='false', position='Body'),
  resourceId: [ string ](name='resourceId', example='ali-test-project', position='Body'),
  resourceType?: string(name='resourceType', example='project', position='Body'),
  tags?: [ string ](name='tags', position='Body'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

/**
  * ### Usage notes
  * Host consists of a project name and a Log Service endpoint. You must specify a project in Host.
  *
 */
async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UntagResources', 'POST', '/untag', 'none', false, 'json', request);
}

model UpdateAnnotationDataSetRequest {
  datasetId?: string(name='datasetId', example='cb8cc4eb51a85e823471cdb368fae9be', position='Path'),
  body?: MLDataSetParam(name='body', position='Body'),
}

model UpdateAnnotationDataSetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function updateAnnotationDataSet(request: UpdateAnnotationDataSetRequest): UpdateAnnotationDataSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateAnnotationDataSet', 'PUT', '/ml/annotationdataset/{datasetId}', 'none', false, 'json', request);
}

model UpdateAnnotationLabelRequest {
  body?: MLLabelParam(name='body', position='Body'),
}

model UpdateAnnotationLabelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function updateAnnotationLabel(request: UpdateAnnotationLabelRequest): UpdateAnnotationLabelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateAnnotationLabel', 'PUT', '/ml/annotationlabel', 'none', false, 'json', request);
}

model UpdateConfigRequest {
  project: string(name='project', example='ali-test-project', position='Host'),
  configName: string(name='configName', example='config-sample', position='Path'),
  body?: LogtailConfig(name='body', position='Body'),
}

model UpdateConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function updateConfig(request: UpdateConfigRequest): UpdateConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateConfig', 'PUT', '/configs/{configName}', 'none', false, 'json', request);
}

model UpdateConsumerGroupRequest {
  project: string(name='project', description='The name of the project.', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='The name of the Logstore.', example='logstore-test', position='Path'),
  consumerGroup: string(name='consumerGroup', description='The name of the consumer group.', example='consumer-group-1', position='Path'),
  order?: boolean(name='order', description='Specifies whether to consume data in sequence. Valid values:

*   true: If a shard is split, the data in the original shard is consumed first. Then, the data in the new shards is consumed at the same time. If shards are merged, the data in the original shards is consumed first. Then, the data in the new shard is consumed.
*   false: The data in all shards is consumed at the same time. If a new shard is generated after a shard is split or shards are merged, the data in the new shard is immediately consumed.', example='true', position='Body'),
  timeout?: int32(name='timeout', description='The timeout period. If Simple Log Service does not receive heartbeats from a consumer within the timeout period, Simple Log Service deletes the consumer. Unit: seconds.', example='300', position='Body'),
}

model UpdateConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

/**
  * ### Usage notes
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  *
 */
async function updateConsumerGroup(request: UpdateConsumerGroupRequest): UpdateConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateConsumerGroup', 'PUT', '/logstores/{logstore}/consumergroups/{consumerGroup}', 'none', false, 'json', request);
}

model UpdateDashboardRequest {
  project: string(name='project', example='ali-test-project', position='Host'),
  dashboardName: string(name='dashboardName', example='dashboard-1609294922657-434834', position='Path,Body'),
  attribute?: map[string]string(name='attribute', position='Body'),
  charts: [
    Chart
  ](name='charts', position='Body'),
  description?: string(name='description', example='test dashboard.', position='Body'),
  displayName: string(name='displayName', example='Method pv', position='Body'),
}

model UpdateDashboardResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function updateDashboard(request: UpdateDashboardRequest): UpdateDashboardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateDashboard', 'PUT', '/dashboards/{dashboardName}', 'none', false, 'json', request);
}

model UpdateIndexRequest {
  project: string(name='project', description='The name of the project.', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='The name of the Logstore.', example='test-logstore', position='Path'),
  keys?: map[string]KeysValue(name='keys', description='The configuration of field indexes. A field index is a key-value pair in which the key specifies the name of the field and the value specifies the index configuration of the field.', position='Body'),
  line?: {
    caseSensitive: boolean(name='caseSensitive', description='Specifies whether to enable case sensitivity. Valid values:

*   true
*   false', example='true'),
    chn: boolean(name='chn', description='Specifies whether to include Chinese characters. Valid values:

*   true
*   false', example='false'),
    excludeKeys?: [ string ](name='exclude_keys', description='The excluded fields. You cannot specify both include_keys and exclude_keys.'),
    includeKeys?: [ string ](name='include_keys', description='The included fields. You cannot specify both include_keys and exclude_keys.'),
    token: [ string ](name='token', description='The delimiters that are used to split text.'),
  }(name='line', description='The configuration of full-text indexes.', position='Body'),
  logReduce?: boolean(name='log_reduce', description='Specifies whether to turn on LogReduce. If you turn on LogReduce, only one of `log_reduce_white_list` and `log_reduce_black_list` takes effect.', example='false', position='Body'),
  logReduceBlackList?: [ string ](name='log_reduce_black_list', description='The fields in the blacklist that you want to use to cluster logs.', position='Body'),
  logReduceWhiteList?: [ string ](name='log_reduce_white_list', description='The fields in the whitelist that you want to use to cluster logs.', position='Body'),
  maxTextLen?: int32(name='max_text_len', description='The maximum length of a field value that can be retained.', example='2048', position='Body'),
  ttl: int32(name='ttl', description='The retention period of data. Unit: days. Valid values: 7, 30, and 90.', example='30', position='Body'),
}

model UpdateIndexResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

/**
  * ### Usage notes
  * Host consists of a project name and a Log Service endpoint. You must specify a project in Host.
  *
 */
async function updateIndex(request: UpdateIndexRequest): UpdateIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateIndex', 'PUT', '/logstores/{logstore}/index', 'none', false, 'json', request);
}

model UpdateLogStoreRequest {
  project: string(name='project', description='The name of the project.', example='ali-test-project', position='Host'),
  logstore: string(name='logstore', description='The name of the Logstore.', example='test-logstore', position='Path'),
  appendMeta?: boolean(name='appendMeta', description='Specifies whether to record public IP addresses. Default value: false. Valid values:

*   true
*   false', example='false', position='Body'),
  autoSplit?: boolean(name='autoSplit', description='Specifies whether to enable automatic sharding. Valid values:

*   true
*   false', example='true', position='Body'),
  enableTracking?: boolean(name='enable_tracking', description='Specifies whether to enable the web tracking feature. Default value: false. Valid values:

*   true
*   false', example='false', position='Body'),
  encryptConf?: EncryptConf(name='encrypt_conf', description='The data structure of the encryption configuration.', position='Body'),
  hotTtl?: int32(name='hot_ttl', description='The retention period of data in the hot storage tier of the Logstore. Minimum value: 30. Unit: day. You can specify a value that ranges from 30 to the value of ttl. Hot data that is stored for longer than the period specified by hot_ttl is converted to cold data. For more information, see [Enable hot and cold-tiered storage for a Logstore](~~308645~~).', example='60', position='Body'),
  logstoreName: string(name='logstoreName', description='The name of the Logstore.', example='test-logstore', position='Body'),
  maxSplitShard?: int32(name='maxSplitShard', description='The maximum number of shards into which existing shards can be automatically split. Valid values: 1 to 64.

> If you set autoSplit to true, you must specify maxSplitShard.', example='64', position='Body'),
  mode?: string(name='mode', description='The type of the Logstore. Simple Log Service provides two types of Logstores: Standard Logstores and Query Logstores.

*   **standard**: Standard Logstore. This type of Logstore supports the log analysis feature and is suitable for scenarios such as real-time monitoring and interactive analysis. You can also use this type of Logstore to build a comprehensive observability system.
*   **query**: Query Logstore. This type of Logstore supports high-performance queries. The index traffic fee of a Query Logstore is approximately half that of a Standard Logstore. Query Logstores do not support SQL analysis. Query Logstores are suitable for scenarios in which the volume of data is large, the log retention period is long, or log analysis is not required. Log retention periods of weeks or months are considered long.', example='standard', position='Body'),
  shardCount: int32(name='shardCount', description='The number of shards.

> You cannot call the UpdateLogstore operation to change the number of shards. You can call the SplitShard or MergeShards operation to change the number of shards.', example='2', position='Body'),
  telemetryType?: string(name='telemetryType', description='The type of the log that you want to query. Valid values:

*   None: all types of logs.
*   Metrics: metrics.', example='None', position='Body'),
  ttl: int32(name='ttl', description='The retention period of data. Unit: day. Valid values: 1 to 3650. If you set ttl to 3650, data is permanently stored.', example='30', position='Body'),
}

model UpdateLogStoreResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

/**
  * ### Usage notes
  * *   Host consists of a project name and a Log Service endpoint. You must specify a project in Host.
  * *   You can call the UpdateLogStore operation to change only the time-to-live (TTL) attribute.
  *
 */
async function updateLogStore(request: UpdateLogStoreRequest): UpdateLogStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateLogStore', 'PUT', '/logstores/{logstore}', 'none', false, 'json', request);
}

model UpdateLogStoreMeteringModeRequest {
  project: string(name='project', example='projectName', position='Host'),
  logstore: string(name='logstore', example='logstoreName', position='Path'),
  meteringMode: string(name='meteringMode', example='ChargeByFunction', position='Body'),
}

model UpdateLogStoreMeteringModeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function updateLogStoreMeteringMode(request: UpdateLogStoreMeteringModeRequest): UpdateLogStoreMeteringModeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateLogStoreMeteringMode', 'PUT', '/logstores/{logstore}/meteringmode', 'none', false, 'json', request);
}

model UpdateLoggingRequest {
  project: string(name='project', description='The name of the project.', example='ali-test-project', position='Host'),
  loggingDetails: [ 
    {
      logstore: string(name='logstore', description='The name of the Logstore to which you want to save service logs.', example='my-logstore'),
      type: string(name='type', description='The type of service logs. Valid values:

*   consumergroup_log: the consumption delay logs of consumer groups.
*   logtail_alarm: the alert logs of Logtail.
*   operation_log: the operation logs.
*   logtail_profile: the collection logs of Logtail.
*   metering: the metering logs.
*   logtail_status: the status logs of Logtail.
*   scheduledsqlalert: the operational logs of Scheduled SQL jobs.
*   etl_alert: the operational logs of data transformation jobs.', example='consumergroup_log'),
    }
  ](name='loggingDetails', description='The configurations of service logs.', position='Body'),
  loggingProject: string(name='loggingProject', description='The name of the project to which you want to save service logs.', example='my-project', position='Body'),
}

model UpdateLoggingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

/**
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  *
 */
async function updateLogging(request: UpdateLoggingRequest): UpdateLoggingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateLogging', 'PUT', '/logging', 'none', false, 'json', request);
}

model UpdateLogtailPipelineConfigRequest {
  project: string(name='project', example='test-project', position='Host'),
  configName: string(name='configName', example='test-config', position='Path,Body'),
  aggregators?: [  map[string]any ](name='aggregators', position='Body'),
  flushers: [  map[string]any ](name='flushers', position='Body'),
  global?: map[string]any(name='global', position='Body'),
  inputs: [  map[string]any ](name='inputs', position='Body'),
  logSample?: string(name='logSample', position='Body'),
  processors?: [  map[string]any ](name='processors', position='Body'),
}

model UpdateLogtailPipelineConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function updateLogtailPipelineConfig(request: UpdateLogtailPipelineConfigRequest): UpdateLogtailPipelineConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateLogtailPipelineConfig', 'PUT', '/pipelineconfigs/{configName}', 'none', false, 'json', request);
}

model UpdateMachineGroupRequest {
  project: string(name='project', description='The name of the project.', example='ali-test-project', position='Host'),
  groupName: string(name='groupName', description='The name of the machine group.', example='test-group', position='Path,Body'),
  groupAttribute?: {
    externalName?: string(name='externalName', description='The identifier of the external management system on which the machine group depends. This parameter is empty by default.', example='testgroup2'),
    groupTopic?: string(name='groupTopic', description='The topic of the machine group. This parameter is empty by default.', example='testtopic2'),
  }(name='groupAttribute', description='The attribute of the machine group. This parameter is empty by default.', position='Body'),
  groupType?: string(name='groupType', description='The type of the machine group. Set the value to an empty string.', example='""', position='Body'),
  machineIdentifyType: string(name='machineIdentifyType', description='The identifier type of the machine group. Valid values:

*   ip: The machine group uses IP addresses as identifiers.
*   userdefined: The machine group uses custom identifiers.', example='userdefined', position='Body'),
  machineList: [ string ](name='machineList', description='The identifiers of the machines in the machine group.

*   If you set machineIdentifyType to ip, enter the IP addresses of the machines.
*   If you set machineIdentifyType to userdefined, enter a custom identifier.', example='[uu_id_1，uu_id_2]', position='Body'),
}

model UpdateMachineGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

/**
  * Host consists of a project name and a Log Service endpoint. You must specify a project in Host.
  *
 */
async function updateMachineGroup(request: UpdateMachineGroupRequest): UpdateMachineGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateMachineGroup', 'PUT', '/machinegroups/{groupName}', 'none', false, 'json', request);
}

model UpdateMachineGroupMachineRequest {
  project: string(name='project', description='The name of the project.', example='ali-test-project', position='Host'),
  machineGroup: string(name='machineGroup', description='The name of the machine group.', example='test-group', position='Path'),
  action?: string(name='action', description='The operation on the machine. Valid values: add and delete. A value of add specifies to add the machine to the machine group. A value of delete specifies to remove the machine from the machine group.', example='add', position='Query'),
  body: [ string ](name='body', description='The machines to be added or removed.', position='Body'),
}

model UpdateMachineGroupMachineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

/**
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  *
 */
async function updateMachineGroupMachine(request: UpdateMachineGroupMachineRequest): UpdateMachineGroupMachineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateMachineGroupMachine', 'PUT', '/machinegroups/{machineGroup}/machines', 'none', false, 'json', request);
}

model UpdateOssExternalStoreRequest {
  project: string(name='project', description='The name of the project.', example='ali-test-project', position='Host'),
  externalStoreName: string(name='externalStoreName', description='The name of the external store.', example='test-oss-store', position='Path,Body'),
  parameter: {
    accessid: string(name='accessid', description='The AccessKey ID of your account.', example='LTAI5tFsHGGeYry*****1Sz'),
    accesskey: string(name='accesskey', description='The AccessKey secret of your account.', example='GyviCLDVHkHrOztdkxuE6******Rp6'),
    bucket: string(name='bucket', description='The name of the OSS bucket.', example='my-bucket'),
    columns: [ 
      {
        name: string(name='name', description='The key of the field.', example='test'),
        type: string(name='type', description='The type of the field.'),
      }
    ](name='columns', description='The associated fields.'),
    endpoint: string(name='endpoint', description='The OSS endpoint.', example='oss-cn-hangzhou.aliyuncs.com'),
    objects: [ string ](name='objects', description='The associated objects.'),
  }(name='parameter', description='The parameters that are configured for the external store.', position='Body'),
  storeType: string(name='storeType', description='The type of the external store. Set the value to oss.', example='oss', position='Body'),
}

model UpdateOssExternalStoreResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

/**
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  *
 */
async function updateOssExternalStore(request: UpdateOssExternalStoreRequest): UpdateOssExternalStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateOssExternalStore', 'PUT', '/externalstores/{externalStoreName}', 'none', false, 'json', request);
}

model UpdateProjectRequest {
  project: string(name='project', description='The name of the project.', example='ali-project-test', position='Host'),
  description: string(name='description', description='The description of the project. The default value is an empty string.', example='Description of my-project-test', position='Body'),
}

model UpdateProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

/**
  * ### Usage notes
  * Host consists of a project name and a Simple Log Service endpoint. You must specify a project in Host.
  *
 */
async function updateProject(request: UpdateProjectRequest): UpdateProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateProject', 'PUT', '/', 'none', false, 'json', request);
}

model UpdateRdsExternalStoreRequest {
  project: string(name='project', description='The name of the project.', example='ali-test-project', position='Host'),
  externalStoreName: string(name='externalStoreName', description='The name of the external store.', example='test-external-store', position='Path,Body'),
  parameter: {
    db: string(name='db', description='The name of the database in the ApsaraDB RDS for MySQL instance.', example='meta'),
    host?: string(name='host', description='The internal or public endpoint of the ApsaraDB RDS for MySQL instance.', example='192.168.XX.XX'),
    instanceId?: string(name='instance-id', description='The ID of the ApsaraDB RDS for MySQL instance.', example='i-bp1b6c719dfa08exf****'),
    password: string(name='password', description='The password that is used to log on to the ApsaraDB RDS for MySQL instance.', example='sfdsfldsfksfls****'),
    port: string(name='port', description='The internal or public port of the ApsaraDB RDS for MySQL instance.', example='3306'),
    region: string(name='region', description='The region where the ApsaraDB RDS for MySQL instance resides. Valid values: cn-qingdao, cn-beijing, and cn-hangzhou.', example='cn-qingdao'),
    table: string(name='table', description='The name of the database table in the ApsaraDB RDS for MySQL instance.', example='join_meta'),
    username: string(name='username', description='The username that is used to log on to the ApsaraDB RDS for MySQL instance.', example='root'),
    vpcId?: string(name='vpc-id', description='The ID of the VPC to which the ApsaraDB RDS for MySQL instance belongs.', example='vpc-bp1aevy8sofi8mh1q****'),
  }(name='parameter', description='The parameter struct.', position='Body'),
  storeType: string(name='storeType', description='The storage type. Set the value to rds-vpc, which indicates an ApsaraDB RDS for MySQL database in a virtual private cloud (VPC).', example='rds-vpc', position='Body'),
}

model UpdateRdsExternalStoreResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

/**
  * Host consists of a project name and a Log Service endpoint. You must specify a project in Host.
  *
 */
async function updateRdsExternalStore(request: UpdateRdsExternalStoreRequest): UpdateRdsExternalStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateRdsExternalStore', 'PUT', '/externalstores/{externalStoreName}', 'none', false, 'json', request);
}

model UpdateSavedSearchRequest {
  project: string(name='project', description='The name of the project.', example='my-project', position='Host'),
  savedsearchName: string(name='savedsearchName', description='The name of the saved search that you want to update.', example='savedsearch-name', position='Path,Body'),
  displayName: string(name='displayName', description='The display name.', example='displayname', position='Body'),
  logstore: string(name='logstore', description='The name of the Logstore to which the saved search belongs.', example='aliyun-test-logstore', position='Body'),
  searchQuery: string(name='searchQuery', description='The search statement or the query statement of the saved search. A query statement consists of a search statement and an analytic statement in the Search statement|Analytic statement format.

For more information, see Log search overview and Log analysis overview.', example='*|select date_format(__time__-__time__%60, \\"%H:%i:%s\\") as time, COUNT(*) as pv group by time', position='Body'),
  topic?: string(name='topic', description='The topic of the logs.', example='theme', position='Body'),
}

model UpdateSavedSearchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function updateSavedSearch(request: UpdateSavedSearchRequest): UpdateSavedSearchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateSavedSearch', 'PUT', '/savedsearches/{savedsearchName}', 'none', false, 'json', request);
}

model UpsertCollectionPolicyRequest {
  attribute?: {
    app?: string(name='app', example='your-app-name'),
    policyGroup?: string(name='policyGroup', example='your-policy-group'),
  }(name='attribute', position='Body'),
  centralizeConfig?: {
    destLogstore?: string(name='destLogstore', example='your-sls-logstore-in-beijing'),
    destProject?: string(name='destProject', example='your-sls-project-in-beijing'),
    destRegion?: string(name='destRegion', example='cn-beijing'),
    destTTL?: int32(name='destTTL', example='your-sls-logstore-ttl'),
  }(name='centralizeConfig', position='Body'),
  centralizeEnabled?: boolean(name='centralizeEnabled', example='false', position='Body'),
  dataCode: string(name='dataCode', example='access_log', position='Body'),
  enabled: boolean(name='enabled', example='true', position='Body'),
  policyConfig: {
    instanceIds?: [ string ](name='instanceIds'),
    regions?: [ string ](name='regions'),
    resourceMode: string(name='resourceMode', example='all'),
    resourceTags?: map[string]any(name='resourceTags'),
  }(name='policyConfig', position='Body'),
  policyName: string(name='policyName', example='your_log_policy', minLength=3, maxLength=63, position='Body'),
  productCode: string(name='productCode', example='oss', position='Body'),
}

model UpsertCollectionPolicyResponseBody = {
  message?: string(name='message', example='successful'),
}

model UpsertCollectionPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpsertCollectionPolicyResponseBody(name='body'),
}

async function upsertCollectionPolicy(request: UpsertCollectionPolicyRequest): UpsertCollectionPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpsertCollectionPolicy', 'POST', '/collectionpolicy', 'json', false, 'json', request);
}

model MLDataParamAnnotationsValue = {
  annotatedBy?: string(name='annotatedBy'),
  updateTime?: long(name='updateTime'),
  results?: [ map[string]string ](name='results'),
}

model MLDataParamPredictionsValue = {
  annotatedBy?: string(name='annotatedBy'),
  updateTime?: long(name='updateTime'),
  results?: [ map[string]string ](name='results'),
}

model IndexKeysValue = {
  chn?: boolean(name='chn', example='true'),
  caseSensitive?: boolean(name='caseSensitive', example='true'),
  token?: [ string ](name='token'),
  alias?: string(name='alias', example='myAlias'),
  type: string(name='type', example='text'),
  docValue?: boolean(name='doc_value', example='true'),
}

model KeysValue = {
  caseSensitive?: boolean(name='caseSensitive', description='Specifies whether to enable case sensitivity. This parameter is required only when **type** is set to **text**. Valid values:

*   true
*   false (default)', example='false'),
  chn?: boolean(name='chn', description='Specifies whether to include Chinese characters. This parameter is required only when **type** is set to **text**. Valid values:

*   true
*   false (default)', example='false'),
  type: string(name='type', description='The data type of the field value. Valid values: text, json, double, and long.', example='text'),
  alias?: string(name='alias', description='The alias of the field.', example='myAlias'),
  token?: [ string ](name='token', description='The delimiters that are used to split text.'),
  docValue?: boolean(name='doc_value', description='Specifies whether to turn on Enable Analytics for the field.', example='false'),
}

