/**
 *
 */
import Util;
import SPI;
import GatewayClient;
import OpenApi;
import OpenApiUtil;

extends OpenApi;

type @client = SPI

init(config: OpenApi.Config){
  super(config);
  @client = new GatewayClient();
  @spi = @client;
  @endpointRule = 'central';
  }

model ConsumerGroup {
  name?: string(name='name', example='test-group'),
  order?: boolean(name='order', example='false'),
  timeout?: int32(name='timeout', example='300'),
}

model EncryptConf {
  enable?: boolean(name='enable'),
  encryptType?: string(name='encrypt_type', example='default'),
  userCmkInfo?: EncryptUserCmkConf(name='user_cmk_info'),
}

model EncryptUserCmkConf {
  arn?: string(name='arn'),
  cmkKeyId?: string(name='cmk_key_id'),
  regionId?: string(name='region_id'),
}

model Histogram {
  count?: long(name='count'),
  from?: int32(name='from'),
  progress?: string(name='progress'),
  to?: int32(name='to'),
}

model LogtailConfig {
  configName?: string(name='configName', example='test-config'),
  createTime?: long(name='createTime', example='1655176807'),
  inputDetail?: map[string]any(name='inputDetail'),
  inputType?: string(name='inputType', example='file'),
  lastModifyTime?: long(name='lastModifyTime', example='1655176807'),
  logSample?: string(name='logSample', example='2022-06-14 11:13:29.796 | DEBUG    | __main__:<module>:1 - hello world'),
  outputDetail?: {
    endpoint?: string(name='endpoint', example='cn-hangzhou-intranet.log.aliyuncs.com'),
    logstoreName?: string(name='logstoreName', example='test-logstore'),
    region?: string(name='region', example='cn-hangzhou'),
  }(name='outputDetail'),
  outputType?: string(name='outputType', example='LogService'),
}

model SavedSearch {
  displayName?: string(name='displayName'),
  logstore?: string(name='logstore'),
  savedsearchName?: string(name='savedsearchName'),
  searchQuery?: string(name='searchQuery'),
  topic?: string(name='topic'),
}

model Chart {
  action?: map[string]any(name='action'),
  display?: map[string]any(name='display'),
  search?: map[string]any(name='search'),
  title?: string(name='title', example='my-chart'),
  type?: string(name='type', example='linepro'),
}

model Dashboard {
  attribute?: map[string]string(name='attribute'),
  charts?: [
    Chart
  ](name='charts'),
  dashboardName?: string(name='dashboardName', example='dashboard-1609294922657-434834'),
  description?: string(name='description', example='这是一个仪表盘。'),
  displayName?: string(name='displayName', example='test-alert'),
}

model EtlJob {
  enable?: boolean(name='enable', example='true'),
  etlJobName?: string(name='etlJobName'),
  functionConfig?: {
    accountId?: string(name='accountId'),
    endpoint?: string(name='endpoint'),
    functionName?: string(name='functionName', example='hello-wrold'),
    functionProvider?: string(name='functionProvider', example='FunctionCompute'),
    regionName?: string(name='regionName', example='cn-hangzhou'),
    roleArn?: string(name='roleArn'),
    serviceName?: string(name='serviceName', example='my-service'),
  }(name='functionConfig'),
  functionParameter?: map[string]any(name='functionParameter'),
  logConfig?: {
    endpoint?: string(name='endpoint'),
    logstoreName?: string(name='logstoreName'),
    projectName?: string(name='projectName'),
  }(name='logConfig'),
  sourceConfig?: {
    logstoreName?: string(name='logstoreName', example='my-logstore'),
  }(name='sourceConfig'),
  triggerConfig?: {
    maxRetryTime?: int32(name='maxRetryTime'),
    roleArn?: string(name='roleArn'),
    startingPosition?: string(name='startingPosition', example='at-unixtime'),
    startingUnixtime?: long(name='startingUnixtime', example='当 strtingPosition 为 at-unixtime 时生效'),
    triggerInterval?: int32(name='triggerInterval'),
  }(name='triggerConfig'),
}

model EtlMeta {
  enable?: boolean(name='enable'),
  etlMetaKey?: string(name='etlMetaKey'),
  etlMetaName?: string(name='etlMetaName'),
  etlMetaTag?: string(name='etlMetaTag'),
  etlMetaValue?: string(name='etlMetaValue'),
}

model ExternalStore {
  externalStoreName?: string(name='externalStoreName', example='rds_store'),
  parameter?: map[string]any(name='parameter'),
  storeType?: string(name='storeType', example='rds-vpc'),
}

model Index {
  keys?: map[string]IndexKeysValue(name='keys'),
  lastModifyTime?: long(name='lastModifyTime', example='1622186280'),
  line?: {
    caseSensitive?: boolean(name='caseSensitive', example='true'),
    chn?: boolean(name='chn', example='true'),
    excludeKeys?: [ string ](name='exclude_keys'),
    includeKeys?: [ string ](name='include_keys'),
    token?: [ string ](name='token'),
  }(name='line'),
  logReduce?: boolean(name='log_reduce', example='true'),
  logReduceBlackList?: [ string ](name='log_reduce_black_list'),
  logReduceWhiteList?: [ string ](name='log_reduce_white_list'),
  maxTextLen?: int32(name='max_text_len', example='2048'),
  ttl?: int32(name='ttl', example='30'),
}

model Logging {
  loggingDetails?: [ 
    {
      logstore?: string(name='logstore', example='my-logstore'),
      type?: string(name='type', example='consumergroup_log'),
    }
  ](name='loggingDetails'),
  loggingProject?: string(name='loggingProject', example='my-project'),
}

model Logstore {
  appendMeta?: boolean(name='appendMeta', example='true'),
  autoSplit?: boolean(name='autoSplit', example='true'),
  createTime?: int32(name='createTime'),
  enableTracking?: boolean(name='enable_tracking', example='false'),
  encryptConf?: EncryptConf(name='encrypt_conf'),
  hotTtl?: int32(name='hot_ttl'),
  lastModifyTime?: int32(name='lastModifyTime'),
  logstoreName?: string(name='logstoreName', example='my-logstore'),
  maxSplitShard?: int32(name='maxSplitShard', example='2'),
  mode?: string(name='mode', example='standard'),
  productType?: string(name='productType'),
  shardCount?: int32(name='shardCount', example='2'),
  telemetryType?: string(name='telemetryType'),
  ttl?: int32(name='ttl', example='30'),
}

model Machine {
  ip?: string(name='ip', example='192.168.x.x'),
  lastHeartbeatTime?: long(name='lastHeartbeatTime', example='1657509674'),
  machineUniqueid?: string(name='machine-uniqueid', example='3B70F4F1-80F7-46C4-A6C1-100D66C***47'),
  userdefinedId?: string(name='userdefined-id', example='test'),
}

model MachineGroup {
  groupAttribute?: {
    externalName?: string(name='externalName', example='test-group'),
    groupTopic?: string(name='groupTopic', example='test-topic'),
  }(name='groupAttribute'),
  groupName?: string(name='groupName', example='test-group'),
  groupType?: string(name='groupType'),
  machineIdentifyType?: string(name='machineIdentifyType', example='ip'),
  machineList?: [ string ](name='machineList'),
}

model Project {
  createTime?: string(name='createTime'),
  lastModifyTime?: string(name='lastModifyTime'),
  projectDesc?: string(name='projectDesc'),
  projectName?: string(name='projectName'),
  projectOwner?: string(name='projectOwner'),
  projectStatus?: string(name='projectStatus'),
  region?: string(name='region'),
  resourceGroupId?: string(name='resourceGroupId'),
}

model Shard {
  createTime?: int32(name='createTime', example='1453949705'),
  exclusiveEndKey?: string(name='exclusiveEndKey', example='8000000000000000000000000000000'),
  inclusiveBeginKey?: string(name='inclusiveBeginKey', example='00000000000000000000000000000000'),
  shardID?: int32(name='shardID', example='0'),
  status?: string(name='status', example='readwrite'),
}

model IndexKeysValue = {
  chn?: boolean(name='chn', example='true'),
  caseSensitive?: boolean(name='caseSensitive', example='true'),
  token?: [ string ](name='token'),
  alias?: string(name='alias', example='myAlias'),
  type?: string(name='type', example='text'),
  docValue?: boolean(name='doc_value', example='true'),
}

model KeysValue = {
  caseSensitive?: boolean(name='caseSensitive'),
  chn?: boolean(name='chn'),
  type?: string(name='type', example='text'),
  alias?: string(name='alias'),
  token?: [ string ](name='token'),
  docValue?: boolean(name='doc_value'),
}

model ApplyConfigToMachineGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function applyConfigToMachineGroupWithOptions(project: string, machineGroup: string, configName: string, headers: map[string]string, runtime: Util.RuntimeOptions): ApplyConfigToMachineGroupResponse {
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ApplyConfigToMachineGroup',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/machinegroups/${machineGroup}/configs/${configName}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return execute(params, req, runtime);
}

async function applyConfigToMachineGroup(project: string, machineGroup: string, configName: string): ApplyConfigToMachineGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return applyConfigToMachineGroupWithOptions(project, machineGroup, configName, headers, runtime);
}

model ChangeResourceGroupRequest {
  resourceGroupId?: string(name='resourceGroupId'),
  resourceId?: string(name='resourceId'),
  resourceType?: string(name='resourceType', example='PROJECT'),
}

model ChangeResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function changeResourceGroupWithOptions(request: ChangeResourceGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ChangeResourceGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.resourceGroupId)) {
    body['resourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceId)) {
    body['resourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    body['resourceType'] = request.resourceType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ChangeResourceGroup',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/resourcegroup`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return execute(params, req, runtime);
}

async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return changeResourceGroupWithOptions(request, headers, runtime);
}

model CreateConsumerGroupRequest {
  consumerGroup?: string(name='consumerGroup', example='consumerGroupX'),
  order?: boolean(name='order', example='true'),
  timeout?: int32(name='timeout', example='300'),
}

model CreateConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function createConsumerGroupWithOptions(project: string, logstore: string, request: CreateConsumerGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateConsumerGroupResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var body : map[string]any = {};
  if (!Util.isUnset(request.consumerGroup)) {
    body['consumerGroup'] = request.consumerGroup;
  }
  if (!Util.isUnset(request.order)) {
    body['order'] = request.order;
  }
  if (!Util.isUnset(request.timeout)) {
    body['timeout'] = request.timeout;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateConsumerGroup',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/logstores/${logstore}/consumergroups`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return execute(params, req, runtime);
}

async function createConsumerGroup(project: string, logstore: string, request: CreateConsumerGroupRequest): CreateConsumerGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createConsumerGroupWithOptions(project, logstore, request, headers, runtime);
}

model CreateDomainRequest {
  domainName?: string(name='domainName', example='example.com'),
}

model CreateDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function createDomainWithOptions(project: string, request: CreateDomainRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDomainResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var body : map[string]any = {};
  if (!Util.isUnset(request.domainName)) {
    body['domainName'] = request.domainName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDomain',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/domains`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return execute(params, req, runtime);
}

async function createDomain(project: string, request: CreateDomainRequest): CreateDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createDomainWithOptions(project, request, headers, runtime);
}

model CreateIndexRequest {
  keys?: map[string]KeysValue(name='keys'),
  line?: {
    caseSensitive?: boolean(name='caseSensitive', example='false'),
    chn?: boolean(name='chn', example='false'),
    excludeKeys?: [ string ](name='exclude_keys'),
    includeKeys?: [ string ](name='include_keys'),
    token?: [ string ](name='token'),
  }(name='line'),
  logReduce?: boolean(name='log_reduce', example='false'),
  logReduceBlackList?: [ string ](name='log_reduce_black_list'),
  logReduceWhiteList?: [ string ](name='log_reduce_white_list'),
  maxTextLen?: int32(name='max_text_len', example='2048'),
  ttl?: int32(name='ttl', example='30'),
}

model CreateIndexResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function createIndexWithOptions(project: string, logstore: string, request: CreateIndexRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateIndexResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var body : map[string]any = {};
  if (!Util.isUnset(request.keys)) {
    body['keys'] = request.keys;
  }
  if (!Util.isUnset(request.line)) {
    body['line'] = request.line;
  }
  if (!Util.isUnset(request.logReduce)) {
    body['log_reduce'] = request.logReduce;
  }
  if (!Util.isUnset(request.logReduceBlackList)) {
    body['log_reduce_black_list'] = request.logReduceBlackList;
  }
  if (!Util.isUnset(request.logReduceWhiteList)) {
    body['log_reduce_white_list'] = request.logReduceWhiteList;
  }
  if (!Util.isUnset(request.maxTextLen)) {
    body['max_text_len'] = request.maxTextLen;
  }
  if (!Util.isUnset(request.ttl)) {
    body['ttl'] = request.ttl;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateIndex',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/logstores/${logstore}/index`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return execute(params, req, runtime);
}

async function createIndex(project: string, logstore: string, request: CreateIndexRequest): CreateIndexResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createIndexWithOptions(project, logstore, request, headers, runtime);
}

model CreateLogStoreRequest {
  appendMeta?: boolean(name='appendMeta', example='false'),
  autoSplit?: boolean(name='autoSplit', example='true'),
  enableTracking?: boolean(name='enable_tracking', example='false'),
  encryptConf?: EncryptConf(name='encrypt_conf'),
  hotTtl?: int32(name='hot_ttl', example='60'),
  logstoreName?: string(name='logstoreName', example='my-logstore'),
  maxSplitShard?: int32(name='maxSplitShard', example='64'),
  mode?: string(name='mode', example='standard'),
  shardCount?: int32(name='shardCount', example='2'),
  telemetryType?: string(name='telemetryType', example='None'),
  ttl?: int32(name='ttl', example='1'),
}

model CreateLogStoreResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function createLogStoreWithOptions(project: string, request: CreateLogStoreRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLogStoreResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var body : map[string]any = {};
  if (!Util.isUnset(request.appendMeta)) {
    body['appendMeta'] = request.appendMeta;
  }
  if (!Util.isUnset(request.autoSplit)) {
    body['autoSplit'] = request.autoSplit;
  }
  if (!Util.isUnset(request.enableTracking)) {
    body['enable_tracking'] = request.enableTracking;
  }
  if (!Util.isUnset(request.encryptConf)) {
    body['encrypt_conf'] = request.encryptConf;
  }
  if (!Util.isUnset(request.hotTtl)) {
    body['hot_ttl'] = request.hotTtl;
  }
  if (!Util.isUnset(request.logstoreName)) {
    body['logstoreName'] = request.logstoreName;
  }
  if (!Util.isUnset(request.maxSplitShard)) {
    body['maxSplitShard'] = request.maxSplitShard;
  }
  if (!Util.isUnset(request.mode)) {
    body['mode'] = request.mode;
  }
  if (!Util.isUnset(request.shardCount)) {
    body['shardCount'] = request.shardCount;
  }
  if (!Util.isUnset(request.telemetryType)) {
    body['telemetryType'] = request.telemetryType;
  }
  if (!Util.isUnset(request.ttl)) {
    body['ttl'] = request.ttl;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateLogStore',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/logstores`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return execute(params, req, runtime);
}

async function createLogStore(project: string, request: CreateLogStoreRequest): CreateLogStoreResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createLogStoreWithOptions(project, request, headers, runtime);
}

model CreateLoggingRequest {
  loggingDetails?: [ 
    {
      logstore?: string(name='logstore', example='my-logstore'),
      type?: string(name='type', example='consumergroup_log'),
    }
  ](name='loggingDetails'),
  loggingProject?: string(name='loggingProject', example='my-project'),
}

model CreateLoggingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function createLoggingWithOptions(project: string, request: CreateLoggingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateLoggingResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var body : map[string]any = {};
  if (!Util.isUnset(request.loggingDetails)) {
    body['loggingDetails'] = request.loggingDetails;
  }
  if (!Util.isUnset(request.loggingProject)) {
    body['loggingProject'] = request.loggingProject;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateLogging',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/logging`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return execute(params, req, runtime);
}

async function createLogging(project: string, request: CreateLoggingRequest): CreateLoggingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createLoggingWithOptions(project, request, headers, runtime);
}

model CreateMachineGroupRequest {
  groupAttribute?: {
    externalName?: string(name='externalName', example='testgroup'),
    groupTopic?: string(name='groupTopic', example='testtopic'),
  }(name='groupAttribute'),
  groupName?: string(name='groupName', example='test-machine-group'),
  groupType?: string(name='groupType', example='""'),
  machineIdentifyType?: string(name='machineIdentifyType', example='ip'),
  machineList?: [ string ](name='machineList'),
}

model CreateMachineGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function createMachineGroupWithOptions(project: string, request: CreateMachineGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateMachineGroupResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var body : map[string]any = {};
  if (!Util.isUnset(request.groupAttribute)) {
    body['groupAttribute'] = request.groupAttribute;
  }
  if (!Util.isUnset(request.groupName)) {
    body['groupName'] = request.groupName;
  }
  if (!Util.isUnset(request.groupType)) {
    body['groupType'] = request.groupType;
  }
  if (!Util.isUnset(request.machineIdentifyType)) {
    body['machineIdentifyType'] = request.machineIdentifyType;
  }
  if (!Util.isUnset(request.machineList)) {
    body['machineList'] = request.machineList;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateMachineGroup',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/machinegroups`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return execute(params, req, runtime);
}

async function createMachineGroup(project: string, request: CreateMachineGroupRequest): CreateMachineGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createMachineGroupWithOptions(project, request, headers, runtime);
}

model CreateOdpsShipperRequest {
  shipperName?: string(name='shipperName', example='test-shipper'),
  targetConfiguration?: {
    bufferInterval?: int32(name='bufferInterval', example='1800'),
    enable?: boolean(name='enable', example='true'),
    fields?: [ string ](name='fields'),
    odpsEndpoint?: string(name='odpsEndpoint', example='http://service.cn-hangzhou.maxcompute.aliyun-inc.com/api'),
    odpsProject?: string(name='odpsProject', example='ali-odps-project'),
    odpsTable?: string(name='odpsTable', example='test-table'),
    partitionColumn?: [ string ](name='partitionColumn'),
    partitionTimeFormat?: string(name='partitionTimeFormat', example='yyyy_MM_dd_hh_mm'),
  }(name='targetConfiguration'),
  targetType?: string(name='targetType', example='odps'),
}

model CreateOdpsShipperResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function createOdpsShipperWithOptions(project: string, logstore: string, request: CreateOdpsShipperRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateOdpsShipperResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var body : map[string]any = {};
  if (!Util.isUnset(request.shipperName)) {
    body['shipperName'] = request.shipperName;
  }
  if (!Util.isUnset(request.targetConfiguration)) {
    body['targetConfiguration'] = request.targetConfiguration;
  }
  if (!Util.isUnset(request.targetType)) {
    body['targetType'] = request.targetType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateOdpsShipper',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/logstores/${logstore}/shipper`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return execute(params, req, runtime);
}

async function createOdpsShipper(project: string, logstore: string, request: CreateOdpsShipperRequest): CreateOdpsShipperResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createOdpsShipperWithOptions(project, logstore, request, headers, runtime);
}

model CreateOssExternalStoreRequest {
  externalStoreName?: string(name='externalStoreName', example='test_oss_store'),
  parameter?: {
    accessid?: string(name='accessid', example='LTAI5tFsHGGeYry*****1Sz'),
    accesskey?: string(name='accesskey', example='GyviCLDVHkHrOztdkxuE6******Rp6'),
    bucket?: string(name='bucket', example='my-bucket'),
    columns?: [ 
      {
        name?: string(name='name', example='auto-test'),
        type?: string(name='type', example='sls'),
      }
    ](name='columns'),
    endpoint?: string(name='endpoint', example='oss-cn-hangzhou.aliyuncs.com'),
    objects?: [ string ](name='objects'),
  }(name='parameter'),
  storeType?: string(name='storeType', example='oss'),
}

model CreateOssExternalStoreResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function createOssExternalStoreWithOptions(project: string, request: CreateOssExternalStoreRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateOssExternalStoreResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var body : map[string]any = {};
  if (!Util.isUnset(request.externalStoreName)) {
    body['externalStoreName'] = request.externalStoreName;
  }
  if (!Util.isUnset(request.parameter)) {
    body['parameter'] = request.parameter;
  }
  if (!Util.isUnset(request.storeType)) {
    body['storeType'] = request.storeType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateOssExternalStore',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/externalstores`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return execute(params, req, runtime);
}

async function createOssExternalStore(project: string, request: CreateOssExternalStoreRequest): CreateOssExternalStoreResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createOssExternalStoreWithOptions(project, request, headers, runtime);
}

model CreateOssShipperRequest {
  shipperName?: string(name='shipperName', example='test-shipper'),
  targetConfiguration?: {
    bufferInterval?: int32(name='bufferInterval', example='300'),
    bufferSize?: int32(name='bufferSize', example='256'),
    compressType?: string(name='compressType', example='snappy'),
    enable?: boolean(name='enable', example='true'),
    ossBucket?: string(name='ossBucket', example='test-bucket'),
    ossPrefix?: string(name='ossPrefix', example='test-prefix/hello-prefix'),
    pathFormat?: string(name='pathFormat', example='2022/01/01/00/59'),
    roleArn?: string(name='roleArn', example='acs:ram::16542189**343050:role/aliyunlogdefaultrole'),
    storage?: {
      detail?: map[string]any(name='detail', example='{ 
"columns": [
   {"name" : "test-col", "type": "text"}
 ]
}'),
      format?: string(name='format', example='parquet'),
    }(name='storage'),
    timeZone?: string(name='timeZone', example='+8'),
  }(name='targetConfiguration'),
  targetType?: string(name='targetType', example='odps'),
}

model CreateOssShipperResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function createOssShipperWithOptions(project: string, logstore: string, request: CreateOssShipperRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateOssShipperResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var body : map[string]any = {};
  if (!Util.isUnset(request.shipperName)) {
    body['shipperName'] = request.shipperName;
  }
  if (!Util.isUnset(request.targetConfiguration)) {
    body['targetConfiguration'] = request.targetConfiguration;
  }
  if (!Util.isUnset(request.targetType)) {
    body['targetType'] = request.targetType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateOssShipper',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/logstores/${logstore}/shipper`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return execute(params, req, runtime);
}

async function createOssShipper(project: string, logstore: string, request: CreateOssShipperRequest): CreateOssShipperResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createOssShipperWithOptions(project, logstore, request, headers, runtime);
}

model CreateProjectRequest {
  description?: string(name='description', example='this is test'),
  projectName?: string(name='projectName', example='test-project'),
  resourceGroupId?: string(name='resourceGroupId'),
}

model CreateProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function createProjectWithOptions(request: CreateProjectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateProjectResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.projectName)) {
    body['projectName'] = request.projectName;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['resourceGroupId'] = request.resourceGroupId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateProject',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return execute(params, req, runtime);
}

async function createProject(request: CreateProjectRequest): CreateProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createProjectWithOptions(request, headers, runtime);
}

model CreateRdsExternalStoreRequest {
  externalStoreName?: string(name='externalStoreName', example='rds_store'),
  parameter?: {
    db?: string(name='db', example='meta'),
    host?: string(name='host', example='192.168.XX.XX'),
    instanceId?: string(name='instance-id', example='i-bp1b6c719dfa08exf****'),
    password?: string(name='password', example='sfdsfldsfksfls****'),
    port?: string(name='port', example='3306'),
    region?: string(name='region', example='cn-qingdao'),
    table?: string(name='table', example='join_meta'),
    username?: string(name='username', example='root'),
    vpcId?: string(name='vpc-id', example='vpc-bp1aevy8sofi8mh1q****'),
  }(name='parameter'),
  storeType?: string(name='storeType', example='rds-vpc'),
}

model CreateRdsExternalStoreResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function createRdsExternalStoreWithOptions(project: string, request: CreateRdsExternalStoreRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateRdsExternalStoreResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var body : map[string]any = {};
  if (!Util.isUnset(request.externalStoreName)) {
    body['externalStoreName'] = request.externalStoreName;
  }
  if (!Util.isUnset(request.parameter)) {
    body['parameter'] = request.parameter;
  }
  if (!Util.isUnset(request.storeType)) {
    body['storeType'] = request.storeType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateRdsExternalStore',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/externalstores`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return execute(params, req, runtime);
}

async function createRdsExternalStore(project: string, request: CreateRdsExternalStoreRequest): CreateRdsExternalStoreResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createRdsExternalStoreWithOptions(project, request, headers, runtime);
}

model CreateSavedSearchRequest {
  displayName?: string(name='displayName', example='displayname'),
  logstore?: string(name='logstore', example='aliyun-test-logstore'),
  savedsearchName?: string(name='savedsearchName', example='pv in minutes'),
  searchQuery?: string(name='searchQuery', example='*|select date_format(__time__-__time__%60, \\"%H:%i:%s\\") as time, COUNT(*) as pv group by time'),
  topic?: string(name='topic', example='theme'),
}

model CreateSavedSearchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function createSavedSearchWithOptions(project: string, request: CreateSavedSearchRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSavedSearchResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var body : map[string]any = {};
  if (!Util.isUnset(request.displayName)) {
    body['displayName'] = request.displayName;
  }
  if (!Util.isUnset(request.logstore)) {
    body['logstore'] = request.logstore;
  }
  if (!Util.isUnset(request.savedsearchName)) {
    body['savedsearchName'] = request.savedsearchName;
  }
  if (!Util.isUnset(request.searchQuery)) {
    body['searchQuery'] = request.searchQuery;
  }
  if (!Util.isUnset(request.topic)) {
    body['topic'] = request.topic;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateSavedSearch',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/savedsearches`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return execute(params, req, runtime);
}

async function createSavedSearch(project: string, request: CreateSavedSearchRequest): CreateSavedSearchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createSavedSearchWithOptions(project, request, headers, runtime);
}

model DeleteConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteConsumerGroupWithOptions(project: string, logstore: string, consumerGroup: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteConsumerGroupResponse {
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteConsumerGroup',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/logstores/${logstore}/consumergroups/${consumerGroup}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return execute(params, req, runtime);
}

async function deleteConsumerGroup(project: string, logstore: string, consumerGroup: string): DeleteConsumerGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteConsumerGroupWithOptions(project, logstore, consumerGroup, headers, runtime);
}

model DeleteDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteDomainWithOptions(project: string, domainName: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteDomainResponse {
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteDomain',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/domains/${domainName}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return execute(params, req, runtime);
}

async function deleteDomain(project: string, domainName: string): DeleteDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteDomainWithOptions(project, domainName, headers, runtime);
}

model DeleteExternalStoreResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteExternalStoreWithOptions(project: string, externalStoreName: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteExternalStoreResponse {
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteExternalStore',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/externalstores/${externalStoreName}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return execute(params, req, runtime);
}

async function deleteExternalStore(project: string, externalStoreName: string): DeleteExternalStoreResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteExternalStoreWithOptions(project, externalStoreName, headers, runtime);
}

model DeleteIndexResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteIndexWithOptions(project: string, logstore: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteIndexResponse {
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteIndex',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/logstores/${logstore}/index`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return execute(params, req, runtime);
}

async function deleteIndex(project: string, logstore: string): DeleteIndexResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteIndexWithOptions(project, logstore, headers, runtime);
}

model DeleteLogStoreResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteLogStoreWithOptions(project: string, logstore: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteLogStoreResponse {
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteLogStore',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/logstores/${logstore}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return execute(params, req, runtime);
}

async function deleteLogStore(project: string, logstore: string): DeleteLogStoreResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteLogStoreWithOptions(project, logstore, headers, runtime);
}

model DeleteLoggingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteLoggingWithOptions(project: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteLoggingResponse {
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteLogging',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/logging`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return execute(params, req, runtime);
}

async function deleteLogging(project: string): DeleteLoggingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteLoggingWithOptions(project, headers, runtime);
}

model DeleteMachineGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteMachineGroupWithOptions(project: string, machineGroup: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteMachineGroupResponse {
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteMachineGroup',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/machinegroups/${machineGroup}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return execute(params, req, runtime);
}

async function deleteMachineGroup(project: string, machineGroup: string): DeleteMachineGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteMachineGroupWithOptions(project, machineGroup, headers, runtime);
}

model DeleteProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteProjectWithOptions(project: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteProjectResponse {
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteProject',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return execute(params, req, runtime);
}

async function deleteProject(project: string): DeleteProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteProjectWithOptions(project, headers, runtime);
}

model DeleteProjectPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteProjectPolicyWithOptions(project: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteProjectPolicyResponse {
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteProjectPolicy',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/policy`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function deleteProjectPolicy(project: string): DeleteProjectPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteProjectPolicyWithOptions(project, headers, runtime);
}

model DeleteSavedSearchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteSavedSearchWithOptions(project: string, savedsearchName: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSavedSearchResponse {
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteSavedSearch',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/savedsearches/${savedsearchName}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return execute(params, req, runtime);
}

async function deleteSavedSearch(project: string, savedsearchName: string): DeleteSavedSearchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteSavedSearchWithOptions(project, savedsearchName, headers, runtime);
}

model DeleteShipperResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteShipperWithOptions(project: string, logstore: string, shipperName: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteShipperResponse {
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteShipper',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/logstores/${logstore}/shipper/${shipperName}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return execute(params, req, runtime);
}

async function deleteShipper(project: string, logstore: string, shipperName: string): DeleteShipperResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteShipperWithOptions(project, logstore, shipperName, headers, runtime);
}

model GetAppliedConfigsResponseBody = {
  configs?: [ string ](name='configs'),
  count?: int32(name='count', example='2'),
}

model GetAppliedConfigsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAppliedConfigsResponseBody(name='body'),
}

async function getAppliedConfigsWithOptions(project: string, machineGroup: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetAppliedConfigsResponse {
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetAppliedConfigs',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/machinegroups/${machineGroup}/configs`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function getAppliedConfigs(project: string, machineGroup: string): GetAppliedConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getAppliedConfigsWithOptions(project, machineGroup, headers, runtime);
}

model GetAppliedMachineGroupsResponseBody = {
  count?: int32(name='count', example='2'),
  machinegroups?: [ string ](name='machinegroups', example='[ "sample-group1","sample-group2" ]'),
}

model GetAppliedMachineGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAppliedMachineGroupsResponseBody(name='body'),
}

async function getAppliedMachineGroupsWithOptions(project: string, configName: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetAppliedMachineGroupsResponse {
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetAppliedMachineGroups',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/configs/${configName}/machinegroups`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function getAppliedMachineGroups(project: string, configName: string): GetAppliedMachineGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getAppliedMachineGroupsWithOptions(project, configName, headers, runtime);
}

model GetCheckPointRequest {
  shard?: int32(name='shard', example='1'),
}

model GetCheckPointResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: [ 
    {
      shard?: int32(name='shard', description='Shard ID。', example='0'),
      checkpoint?: string(name='checkpoint', example='MTUyNDE1NTM3OTM3MzkwODQ5Ng=='),
      updateTime?: long(name='updateTime', example='1524224984800922'),
      consumer?: string(name='consumer', example='consumer_1'),
    }
  ](name='body'),
}

async function getCheckPointWithOptions(project: string, logstore: string, consumerGroup: string, request: GetCheckPointRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetCheckPointResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var query : map[string]any = {};
  if (!Util.isUnset(request.shard)) {
    query['shard'] = request.shard;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCheckPoint',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/logstores/${logstore}/consumergroups/${consumerGroup}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'array',
  };
  return execute(params, req, runtime);
}

async function getCheckPoint(project: string, logstore: string, consumerGroup: string, request: GetCheckPointRequest): GetCheckPointResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getCheckPointWithOptions(project, logstore, consumerGroup, request, headers, runtime);
}

model GetContextLogsRequest {
  backLines?: long(name='back_lines', example='10'),
  forwardLines?: long(name='forward_lines', example='10'),
  packId?: string(name='pack_id', example='85C897C740352DC6-808'),
  packMeta?: string(name='pack_meta', example='2|MTY1NTcwNTUzODY5MTY0MDk1Mg==|3|0'),
  type?: string(name='type', example='context_log'),
}

model GetContextLogsResponseBody = {
  backLines?: long(name='back_lines', example='100'),
  forwardLines?: long(name='forward_lines', example='100'),
  logs?: [  map[string]any ](name='logs'),
  progress?: string(name='progress', example='Complete'),
  totalLines?: long(name='total_lines', example='201'),
}

model GetContextLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetContextLogsResponseBody(name='body'),
}

async function getContextLogsWithOptions(project: string, logstore: string, request: GetContextLogsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetContextLogsResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var query : map[string]any = {};
  if (!Util.isUnset(request.backLines)) {
    query['back_lines'] = request.backLines;
  }
  if (!Util.isUnset(request.forwardLines)) {
    query['forward_lines'] = request.forwardLines;
  }
  if (!Util.isUnset(request.packId)) {
    query['pack_id'] = request.packId;
  }
  if (!Util.isUnset(request.packMeta)) {
    query['pack_meta'] = request.packMeta;
  }
  if (!Util.isUnset(request.type)) {
    query['type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetContextLogs',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/logstores/${logstore}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function getContextLogs(project: string, logstore: string, request: GetContextLogsRequest): GetContextLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getContextLogsWithOptions(project, logstore, request, headers, runtime);
}

model GetCursorRequest {
  from?: string(name='from', example='begin'),
}

model GetCursorResponseBody = {
  cursor?: string(name='cursor', example='MTQ0NzI5OTYwNjg5NjYzMjM1Ng=='),
}

model GetCursorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCursorResponseBody(name='body'),
}

async function getCursorWithOptions(project: string, logstore: string, shardId: string, request: GetCursorRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetCursorResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var query : map[string]any = {};
  if (!Util.isUnset(request.from)) {
    query['from'] = request.from;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCursor',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/logstores/${logstore}/shards/${shardId}?type=cursor`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function getCursor(project: string, logstore: string, shardId: string, request: GetCursorRequest): GetCursorResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getCursorWithOptions(project, logstore, shardId, request, headers, runtime);
}

model GetCursorTimeRequest {
  cursor?: string(name='cursor', example='MTU0NzQ3MDY4MjM3NjUxMzQ0Ng=='),
}

model GetCursorTimeResponseBody = {
  cursorTime?: string(name='cursor_time', example='1554260243'),
}

model GetCursorTimeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCursorTimeResponseBody(name='body'),
}

async function getCursorTimeWithOptions(project: string, logstore: string, shardId: string, request: GetCursorTimeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetCursorTimeResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var query : map[string]any = {};
  if (!Util.isUnset(request.cursor)) {
    query['cursor'] = request.cursor;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCursorTime',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/logstores/${logstore}/shards/${shardId}?type=cursor_time`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function getCursorTime(project: string, logstore: string, shardId: string, request: GetCursorTimeRequest): GetCursorTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getCursorTimeWithOptions(project, logstore, shardId, request, headers, runtime);
}

model GetExternalStoreResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExternalStore  
}

async function getExternalStoreWithOptions(project: string, externalStoreName: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetExternalStoreResponse {
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetExternalStore',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/externalstores/${externalStoreName}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function getExternalStore(project: string, externalStoreName: string): GetExternalStoreResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getExternalStoreWithOptions(project, externalStoreName, headers, runtime);
}

model GetHistogramsRequest {
  from?: long(name='from', example='1409529600'),
  query?: string(name='query', example='* | with_pack_meta'),
  to?: long(name='to', example='1409569200'),
  topic?: string(name='topic', example='topic'),
}

model GetHistogramsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: [ 
    {
      from?: long(name='from', example='1409529600'),
      to?: long(name='to', example='1409569200'),
      count?: long(name='count', example='2'),
      progress?: string(name='progress', example='Complete'),
    }
  ](name='body'),
}

async function getHistogramsWithOptions(project: string, logstore: string, request: GetHistogramsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetHistogramsResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var query : map[string]any = {};
  if (!Util.isUnset(request.from)) {
    query['from'] = request.from;
  }
  if (!Util.isUnset(request.query)) {
    query['query'] = request.query;
  }
  if (!Util.isUnset(request.to)) {
    query['to'] = request.to;
  }
  if (!Util.isUnset(request.topic)) {
    query['topic'] = request.topic;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetHistograms',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/logstores/${logstore}/index?type=histogram`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'array',
  };
  return execute(params, req, runtime);
}

async function getHistograms(project: string, logstore: string, request: GetHistogramsRequest): GetHistogramsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getHistogramsWithOptions(project, logstore, request, headers, runtime);
}

model GetIndexResponseBody = {
  indexMode?: string(name='index_mode', example='v2'),
  keys?: map[string]KeysValue(name='keys'),
  lastModifyTime?: long(name='lastModifyTime', example='1524155379'),
  line?: {
    caseSensitive?: boolean(name='caseSensitive', example='false'),
    chn?: boolean(name='chn', example='false'),
    excludeKeys?: [ string ](name='exclude_keys'),
    includeKeys?: [ string ](name='include_keys'),
    token?: [ string ](name='token'),
  }(name='line'),
  logReduce?: boolean(name='log_reduce', example='false'),
  logReduceBlackList?: [ string ](name='log_reduce_black_list'),
  logReduceWhiteList?: [ string ](name='log_reduce_white_list'),
  maxTextLen?: int32(name='max_text_len', example='2048'),
  storage?: string(name='storage', example='pg'),
  ttl?: int32(name='ttl', example='30'),
}

model GetIndexResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetIndexResponseBody(name='body'),
}

async function getIndexWithOptions(project: string, logstore: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetIndexResponse {
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetIndex',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/logstores/${logstore}/index`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function getIndex(project: string, logstore: string): GetIndexResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getIndexWithOptions(project, logstore, headers, runtime);
}

model GetLogStoreResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: Logstore  
}

async function getLogStoreWithOptions(project: string, logstore: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetLogStoreResponse {
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetLogStore',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/logstores/${logstore}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function getLogStore(project: string, logstore: string): GetLogStoreResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getLogStoreWithOptions(project, logstore, headers, runtime);
}

model GetLoggingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: Logging  
}

async function getLoggingWithOptions(project: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetLoggingResponse {
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetLogging',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/logging`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function getLogging(project: string): GetLoggingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getLoggingWithOptions(project, headers, runtime);
}

model GetLogsRequest {
  from?: int32(name='from', example='1627268185'),
  line?: long(name='line', example='100'),
  offset?: long(name='offset', example='0'),
  powerSql?: boolean(name='powerSql', example='false'),
  query?: string(name='query', example='status: 401 | SELECT remote_addr,COUNT(*) as pv GROUP by remote_addr ORDER by pv desc limit 5'),
  reverse?: boolean(name='reverse', example='false'),
  to?: int32(name='to', example='1627269085'),
  topic?: string(name='topic', example='topic'),
}

model GetLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: [  map[string]any ](name='body'),
}

async function getLogsWithOptions(project: string, logstore: string, request: GetLogsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetLogsResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var query : map[string]any = {};
  if (!Util.isUnset(request.from)) {
    query['from'] = request.from;
  }
  if (!Util.isUnset(request.line)) {
    query['line'] = request.line;
  }
  if (!Util.isUnset(request.offset)) {
    query['offset'] = request.offset;
  }
  if (!Util.isUnset(request.powerSql)) {
    query['powerSql'] = request.powerSql;
  }
  if (!Util.isUnset(request.query)) {
    query['query'] = request.query;
  }
  if (!Util.isUnset(request.reverse)) {
    query['reverse'] = request.reverse;
  }
  if (!Util.isUnset(request.to)) {
    query['to'] = request.to;
  }
  if (!Util.isUnset(request.topic)) {
    query['topic'] = request.topic;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetLogs',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/logstores/${logstore}?type=log`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'array',
  };
  return execute(params, req, runtime);
}

async function getLogs(project: string, logstore: string, request: GetLogsRequest): GetLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getLogsWithOptions(project, logstore, request, headers, runtime);
}

model GetMachineGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: MachineGroup  
}

async function getMachineGroupWithOptions(project: string, machineGroup: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetMachineGroupResponse {
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetMachineGroup',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/machinegroups/${machineGroup}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function getMachineGroup(project: string, machineGroup: string): GetMachineGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getMachineGroupWithOptions(project, machineGroup, headers, runtime);
}

model GetProjectRequest {
  project?: string(name='project', example='my-project-test'),
}

model GetProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: Project  
}

async function getProjectWithOptions(request: GetProjectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetProjectResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.project)) {
    query['project'] = request.project;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetProject',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function getProject(request: GetProjectRequest): GetProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getProjectWithOptions(request, headers, runtime);
}

model GetProjectLogsRequest {
  powerSql?: boolean(name='powerSql', example='false'),
  query?: string(name='query', example='SELECT COUNT(*) as pv FROM nginx-moni where __time__ &gt; 1646102500 and __time__ &lt; 1646103400'),
}

model GetProjectLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: [ map[string]string ](name='body'),
}

async function getProjectLogsWithOptions(project: string, request: GetProjectLogsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetProjectLogsResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var query : map[string]any = {};
  if (!Util.isUnset(request.powerSql)) {
    query['powerSql'] = request.powerSql;
  }
  if (!Util.isUnset(request.query)) {
    query['query'] = request.query;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetProjectLogs',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/logs`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'array',
  };
  return execute(params, req, runtime);
}

async function getProjectLogs(project: string, request: GetProjectLogsRequest): GetProjectLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getProjectLogsWithOptions(project, request, headers, runtime);
}

model GetProjectPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: string(name='body'),
}

async function getProjectPolicyWithOptions(project: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetProjectPolicyResponse {
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetProjectPolicy',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/policy`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'string',
  };
  return execute(params, req, runtime);
}

async function getProjectPolicy(project: string): GetProjectPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getProjectPolicyWithOptions(project, headers, runtime);
}

model GetSavedSearchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SavedSearch  
}

async function getSavedSearchWithOptions(project: string, savedsearchName: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetSavedSearchResponse {
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetSavedSearch',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/savedsearches/${savedsearchName}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function getSavedSearch(project: string, savedsearchName: string): GetSavedSearchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getSavedSearchWithOptions(project, savedsearchName, headers, runtime);
}

model GetShipperStatusRequest {
  from?: long(name='from', example='1409529600'),
  offset?: int32(name='offset', example='0'),
  size?: int32(name='size', example='100'),
  status?: string(name='status', example='success'),
  to?: long(name='to', example='1627269085'),
}

model GetShipperStatusResponseBody = {
  count?: long(name='count', example='10'),
  statistics?: {
    fail?: long(name='fail', example='0'),
    running?: long(name='running', example='0'),
    success?: long(name='success', example='20'),
  }(name='statistics'),
  tasks?: {
    id?: string(name='id', example='abcdefghijk'),
    taskCode?: string(name='taskCode', example='UnAuthorized'),
    taskCreateTime?: long(name='taskCreateTime', example='1448925013'),
    taskDataLines?: int32(name='taskDataLines', example='0'),
    taskFinishTime?: long(name='taskFinishTime', example='1448926013'),
    taskLastDataReceiveTime?: long(name='taskLastDataReceiveTime', example='1448915013'),
    taskMessage?: string(name='taskMessage', example='AccessDenied: You have no right to access this object because of bucket acl.'),
    taskStatus?: string(name='taskStatus', example='success'),
  }(name='tasks'),
  total?: long(name='total', example='20'),
}

model GetShipperStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetShipperStatusResponseBody(name='body'),
}

async function getShipperStatusWithOptions(project: string, logstore: string, shipperName: string, request: GetShipperStatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetShipperStatusResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var query : map[string]any = {};
  if (!Util.isUnset(request.from)) {
    query['from'] = request.from;
  }
  if (!Util.isUnset(request.offset)) {
    query['offset'] = request.offset;
  }
  if (!Util.isUnset(request.size)) {
    query['size'] = request.size;
  }
  if (!Util.isUnset(request.status)) {
    query['status'] = request.status;
  }
  if (!Util.isUnset(request.to)) {
    query['to'] = request.to;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetShipperStatus',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/logstores/${logstore}/shipper/${shipperName}/tasks`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function getShipperStatus(project: string, logstore: string, shipperName: string, request: GetShipperStatusRequest): GetShipperStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getShipperStatusWithOptions(project, logstore, shipperName, request, headers, runtime);
}

model ListConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: [
    ConsumerGroup
  ](name='body'),
}

async function listConsumerGroupWithOptions(project: string, logstore: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListConsumerGroupResponse {
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListConsumerGroup',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/logstores/${logstore}/consumergroups`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'array',
  };
  return execute(params, req, runtime);
}

async function listConsumerGroup(project: string, logstore: string): ListConsumerGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listConsumerGroupWithOptions(project, logstore, headers, runtime);
}

model ListDomainsRequest {
  domainName?: string(name='domainName', example='example.com'),
  offset?: int32(name='offset', example='0'),
  size?: int32(name='size', example='10'),
}

model ListDomainsResponseBody = {
  count?: long(name='count', example='1'),
  domains?: [ string ](name='domains'),
  total?: long(name='total', example='1'),
}

model ListDomainsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDomainsResponseBody(name='body'),
}

async function listDomainsWithOptions(project: string, request: ListDomainsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDomainsResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var query : map[string]any = {};
  if (!Util.isUnset(request.domainName)) {
    query['domainName'] = request.domainName;
  }
  if (!Util.isUnset(request.offset)) {
    query['offset'] = request.offset;
  }
  if (!Util.isUnset(request.size)) {
    query['size'] = request.size;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDomains',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/domains`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function listDomains(project: string, request: ListDomainsRequest): ListDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listDomainsWithOptions(project, request, headers, runtime);
}

model ListExternalStoreRequest {
  externalStoreName?: string(name='externalStoreName', example='store'),
  offset?: int32(name='offset', example='0'),
  sizs?: int32(name='sizs', example='10'),
}

model ListExternalStoreResponseBody = {
  count?: int32(name='count', example='3'),
  externalstores?: [
    ExternalStore
  ](name='externalstores'),
  total?: int32(name='total', example='3'),
}

model ListExternalStoreResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListExternalStoreResponseBody(name='body'),
}

async function listExternalStoreWithOptions(project: string, request: ListExternalStoreRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListExternalStoreResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var query : map[string]any = {};
  if (!Util.isUnset(request.externalStoreName)) {
    query['externalStoreName'] = request.externalStoreName;
  }
  if (!Util.isUnset(request.offset)) {
    query['offset'] = request.offset;
  }
  if (!Util.isUnset(request.sizs)) {
    query['sizs'] = request.sizs;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListExternalStore',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/externalstores`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function listExternalStore(project: string, request: ListExternalStoreRequest): ListExternalStoreResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listExternalStoreWithOptions(project, request, headers, runtime);
}

model ListLogStoresRequest {
  logstoreName?: string(name='logstoreName', example='my-logstore'),
  mode?: string(name='mode', example='standard'),
  offset?: int32(name='offset', example='0'),
  size?: int32(name='size', example='10'),
  telemetryType?: string(name='telemetryType', example='None'),
}

model ListLogStoresResponseBody = {
  logstores?: [ string ](name='logstores', example='["test-1","test-2"]'),
  total?: int32(name='total', example='2'),
}

model ListLogStoresResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListLogStoresResponseBody(name='body'),
}

async function listLogStoresWithOptions(project: string, request: ListLogStoresRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListLogStoresResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var query : map[string]any = {};
  if (!Util.isUnset(request.logstoreName)) {
    query['logstoreName'] = request.logstoreName;
  }
  if (!Util.isUnset(request.mode)) {
    query['mode'] = request.mode;
  }
  if (!Util.isUnset(request.offset)) {
    query['offset'] = request.offset;
  }
  if (!Util.isUnset(request.size)) {
    query['size'] = request.size;
  }
  if (!Util.isUnset(request.telemetryType)) {
    query['telemetryType'] = request.telemetryType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListLogStores',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/logstores`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function listLogStores(project: string, request: ListLogStoresRequest): ListLogStoresResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listLogStoresWithOptions(project, request, headers, runtime);
}

model ListMachineGroupRequest {
  groupName?: string(name='groupName', example='test-machine-group'),
  offset?: int32(name='offset', example='1'),
  size?: int32(name='size', example='10'),
}

model ListMachineGroupResponseBody = {
  count?: int32(name='count', example='2'),
  machinegroups?: [ string ](name='machinegroups', example='[ "test-machine-group-1", "test-machine-group-2" ]'),
  total?: int32(name='total', example='2'),
}

model ListMachineGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListMachineGroupResponseBody(name='body'),
}

async function listMachineGroupWithOptions(project: string, request: ListMachineGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListMachineGroupResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var query : map[string]any = {};
  if (!Util.isUnset(request.groupName)) {
    query['groupName'] = request.groupName;
  }
  if (!Util.isUnset(request.offset)) {
    query['offset'] = request.offset;
  }
  if (!Util.isUnset(request.size)) {
    query['size'] = request.size;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListMachineGroup',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/machinegroups`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function listMachineGroup(project: string, request: ListMachineGroupRequest): ListMachineGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listMachineGroupWithOptions(project, request, headers, runtime);
}

model ListMachinesRequest {
  offset?: int32(name='offset', example='0'),
  size?: int32(name='size', example='10'),
}

model ListMachinesResponseBody = {
  count?: int32(name='count', example='3'),
  machines?: [
    Machine
  ](name='machines'),
  total?: int32(name='total', example='8'),
}

model ListMachinesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListMachinesResponseBody(name='body'),
}

async function listMachinesWithOptions(project: string, machineGroup: string, request: ListMachinesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListMachinesResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var query : map[string]any = {};
  if (!Util.isUnset(request.offset)) {
    query['offset'] = request.offset;
  }
  if (!Util.isUnset(request.size)) {
    query['size'] = request.size;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListMachines',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/machinegroups/${machineGroup}/machines`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function listMachines(project: string, machineGroup: string, request: ListMachinesRequest): ListMachinesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listMachinesWithOptions(project, machineGroup, request, headers, runtime);
}

model ListProjectRequest {
  offset?: int32(name='offset', example='0'),
  projectName?: string(name='projectName', example='ali-test-project'),
  size?: int32(name='size', example='10'),
}

model ListProjectResponseBody = {
  count?: long(name='count', example='2'),
  projects?: [
    Project
  ](name='projects'),
  total?: long(name='total', example='11'),
}

model ListProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProjectResponseBody(name='body'),
}

async function listProjectWithOptions(request: ListProjectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListProjectResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.offset)) {
    query['offset'] = request.offset;
  }
  if (!Util.isUnset(request.projectName)) {
    query['projectName'] = request.projectName;
  }
  if (!Util.isUnset(request.size)) {
    query['size'] = request.size;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProject',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function listProject(request: ListProjectRequest): ListProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listProjectWithOptions(request, headers, runtime);
}

model ListSavedSearchRequest {
  offset?: int32(name='offset', example='0'),
  size?: int32(name='size', example='10'),
}

model ListSavedSearchResponseBody = {
  count?: int32(name='count', example='4'),
  savedsearchItems?: [
    SavedSearch
  ](name='savedsearchItems', example='[ "test-1", "test-2" ]'),
  total?: int32(name='total', example='4'),
}

model ListSavedSearchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSavedSearchResponseBody(name='body'),
}

async function listSavedSearchWithOptions(project: string, request: ListSavedSearchRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSavedSearchResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var query : map[string]any = {};
  if (!Util.isUnset(request.offset)) {
    query['offset'] = request.offset;
  }
  if (!Util.isUnset(request.size)) {
    query['size'] = request.size;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSavedSearch',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/savedsearches`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function listSavedSearch(project: string, request: ListSavedSearchRequest): ListSavedSearchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listSavedSearchWithOptions(project, request, headers, runtime);
}

model ListShardsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: [
    Shard
  ](name='body'),
}

async function listShardsWithOptions(project: string, logstore: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListShardsResponse {
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListShards',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/logstores/${logstore}/shards`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'array',
  };
  return execute(params, req, runtime);
}

async function listShards(project: string, logstore: string): ListShardsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listShardsWithOptions(project, logstore, headers, runtime);
}

model ListShipperResponseBody = {
  count?: long(name='count', example='3'),
  shipper?: [ string ](name='shipper'),
  total?: long(name='total', example='5'),
}

model ListShipperResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListShipperResponseBody(name='body'),
}

async function listShipperWithOptions(project: string, logstore: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListShipperResponse {
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListShipper',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/logstores/${logstore}/shipper`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function listShipper(project: string, logstore: string): ListShipperResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listShipperWithOptions(project, logstore, headers, runtime);
}

model ListTagResourcesRequest {
  resourceId?: [ string ](name='resourceId'),
  resourceType?: string(name='resourceType', example='project'),
  tags?: [ 
    {
      key?: string(name='key', example='key1'),
      value?: string(name='value', example='value1'),
    }
  ](name='tags'),
}

model ListTagResourcesShrinkRequest {
  resourceIdShrink?: string(name='resourceId'),
  resourceType?: string(name='resourceType', example='project'),
  tagsShrink?: string(name='tags'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='nextToken', example='caeba0bbb2be03f84eb48b699f0a4883'),
  tagResources?: [ 
    {
      resourceId?: string(name='resourceId', example='ali-test-project'),
      resourceType?: string(name='resourceType', example='project'),
      tagKey?: string(name='tagKey', example='key1'),
      tagValue?: string(name='tagValue', example='value1'),
    }
  ](name='tagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(tmpReq: ListTagResourcesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(tmpReq);
  var request = new ListTagResourcesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.resourceId)) {
    request.resourceIdShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.resourceId, 'resourceId', 'json');
  }
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'tags', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.resourceIdShrink)) {
    query['resourceId'] = request.resourceIdShrink;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['resourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tagsShrink)) {
    query['tags'] = request.tagsShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagResources',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/tags`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listTagResourcesWithOptions(request, headers, runtime);
}

model PullDataRequest {
  count?: string(name='count', example='1000'),
  cursor?: string(name='cursor', example='MTQ0NzMyOTQwMTEwMjEzMDkwNA'),
  endCursor?: string(name='endCursor', example='MTU1NzA1NzQwMTEwMjEzMDkwCg'),
}

model PullDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function pullDataWithOptions(project: string, logstore: string, shard: string, request: PullDataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PullDataResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var query : map[string]any = {};
  if (!Util.isUnset(request.count)) {
    query['count'] = request.count;
  }
  if (!Util.isUnset(request.cursor)) {
    query['cursor'] = request.cursor;
  }
  if (!Util.isUnset(request.endCursor)) {
    query['endCursor'] = request.endCursor;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PullData',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/logstores/${logstore}/shards/${shard}?type=log`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function pullData(project: string, logstore: string, shard: string, request: PullDataRequest): PullDataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return pullDataWithOptions(project, logstore, shard, request, headers, runtime);
}

model PutProjectPolicyRequest {
  body?: string(name='body', example='{ 	"Version": "1", 	"Statement": [{ 		"Action": ["log:PostLogStoreLogs"], 		"Resource": "acs:log:*:*:project/exampleproject/*", 		"Effect": "Deny", 		"Condition": { 			"StringNotLike": { 				"acs:SourceVpc": ["vpc-*"] 			} 		} 	}] }'),
}

model PutProjectPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function putProjectPolicyWithOptions(project: string, request: PutProjectPolicyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PutProjectPolicyResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    body = request.body,
  };
  var params = new OpenApi.Params{
    action = 'PutProjectPolicy',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/policy`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function putProjectPolicy(project: string, request: PutProjectPolicyRequest): PutProjectPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return putProjectPolicyWithOptions(project, request, headers, runtime);
}

model PutWebtrackingRequest {
  logs?: [ map[string]string ](name='__logs__'),
  source?: string(name='__source__'),
  tags?: map[string]string(name='__tags__'),
  topic?: string(name='__topic__'),
}

model PutWebtrackingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function putWebtrackingWithOptions(project: string, logstoreName: string, request: PutWebtrackingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PutWebtrackingResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var body : map[string]any = {};
  if (!Util.isUnset(request.logs)) {
    body['__logs__'] = request.logs;
  }
  if (!Util.isUnset(request.source)) {
    body['__source__'] = request.source;
  }
  if (!Util.isUnset(request.tags)) {
    body['__tags__'] = request.tags;
  }
  if (!Util.isUnset(request.topic)) {
    body['__topic__'] = request.topic;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PutWebtracking',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/logstores/${logstoreName}/track`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return execute(params, req, runtime);
}

async function putWebtracking(project: string, logstoreName: string, request: PutWebtrackingRequest): PutWebtrackingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return putWebtrackingWithOptions(project, logstoreName, request, headers, runtime);
}

model RemoveConfigFromMachineGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function removeConfigFromMachineGroupWithOptions(project: string, machineGroup: string, configName: string, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveConfigFromMachineGroupResponse {
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'RemoveConfigFromMachineGroup',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/machinegroups/${machineGroup}/configs/${configName}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return execute(params, req, runtime);
}

async function removeConfigFromMachineGroup(project: string, machineGroup: string, configName: string): RemoveConfigFromMachineGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return removeConfigFromMachineGroupWithOptions(project, machineGroup, configName, headers, runtime);
}

model SplitShardRequest {
  key?: string(name='key', example='ef000000000000000000000000000000'),
  shardCount?: int32(name='shardCount', example='2'),
}

model SplitShardResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: [
    Shard
  ](name='body'),
}

async function splitShardWithOptions(project: string, logstore: string, shard: string, request: SplitShardRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SplitShardResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var query : map[string]any = {};
  if (!Util.isUnset(request.key)) {
    query['key'] = request.key;
  }
  if (!Util.isUnset(request.shardCount)) {
    query['shardCount'] = request.shardCount;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SplitShard',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/logstores/${logstore}/shards/${shard}?action=split`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'array',
  };
  return execute(params, req, runtime);
}

async function splitShard(project: string, logstore: string, shard: string, request: SplitShardRequest): SplitShardResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return splitShardWithOptions(project, logstore, shard, request, headers, runtime);
}

model TagResourcesRequest {
  resourceId?: [ string ](name='resourceId'),
  resourceType?: string(name='resourceType', example='project'),
  tags?: [ 
    {
      key?: string(name='key', example='key1'),
      value?: string(name='value', example='value1'),
    }
  ](name='tags'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.resourceId)) {
    body['resourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    body['resourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tags)) {
    body['tags'] = request.tags;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TagResources',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/tag`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return execute(params, req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return tagResourcesWithOptions(request, headers, runtime);
}

model UntagResourcesRequest {
  all?: boolean(name='all', example='false'),
  resourceId?: string(name='resourceId', example='ali-test-project'),
  resourceType?: string(name='resourceType', example='project'),
  tags?: [ string ](name='tags'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.all)) {
    body['all'] = request.all;
  }
  if (!Util.isUnset(request.resourceId)) {
    body['resourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    body['resourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tags)) {
    body['tags'] = request.tags;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UntagResources',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/untag`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return untagResourcesWithOptions(request, headers, runtime);
}

model UpdateConsumerGroupRequest {
  order?: boolean(name='order', example='true'),
  timeout?: int32(name='timeout', example='300'),
}

model UpdateConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function updateConsumerGroupWithOptions(project: string, logstore: string, consumerGroup: string, request: UpdateConsumerGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateConsumerGroupResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var body : map[string]any = {};
  if (!Util.isUnset(request.order)) {
    body['order'] = request.order;
  }
  if (!Util.isUnset(request.timeout)) {
    body['timeout'] = request.timeout;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateConsumerGroup',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/logstores/${logstore}/consumergroups/${consumerGroup}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return execute(params, req, runtime);
}

async function updateConsumerGroup(project: string, logstore: string, consumerGroup: string, request: UpdateConsumerGroupRequest): UpdateConsumerGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateConsumerGroupWithOptions(project, logstore, consumerGroup, request, headers, runtime);
}

model UpdateIndexRequest {
  keys?: map[string]KeysValue(name='keys'),
  line?: {
    caseSensitive?: boolean(name='caseSensitive', example='true'),
    chn?: boolean(name='chn', example='false'),
    excludeKeys?: [ string ](name='exclude_keys'),
    includeKeys?: [ string ](name='include_keys'),
    token?: [ string ](name='token'),
  }(name='line'),
  logReduce?: boolean(name='log_reduce', example='false'),
  logReduceBlackList?: [ string ](name='log_reduce_black_list'),
  logReduceWhiteList?: [ string ](name='log_reduce_white_list'),
  maxTextLen?: int32(name='max_text_len', example='2048'),
  ttl?: int32(name='ttl', example='30'),
}

model UpdateIndexResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function updateIndexWithOptions(project: string, logstore: string, request: UpdateIndexRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateIndexResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var body : map[string]any = {};
  if (!Util.isUnset(request.keys)) {
    body['keys'] = request.keys;
  }
  if (!Util.isUnset(request.line)) {
    body['line'] = request.line;
  }
  if (!Util.isUnset(request.logReduce)) {
    body['log_reduce'] = request.logReduce;
  }
  if (!Util.isUnset(request.logReduceBlackList)) {
    body['log_reduce_black_list'] = request.logReduceBlackList;
  }
  if (!Util.isUnset(request.logReduceWhiteList)) {
    body['log_reduce_white_list'] = request.logReduceWhiteList;
  }
  if (!Util.isUnset(request.maxTextLen)) {
    body['max_text_len'] = request.maxTextLen;
  }
  if (!Util.isUnset(request.ttl)) {
    body['ttl'] = request.ttl;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateIndex',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/logstores/${logstore}/index`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return execute(params, req, runtime);
}

async function updateIndex(project: string, logstore: string, request: UpdateIndexRequest): UpdateIndexResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateIndexWithOptions(project, logstore, request, headers, runtime);
}

model UpdateLogStoreRequest {
  appendMeta?: boolean(name='appendMeta', example='false'),
  autoSplit?: boolean(name='autoSplit', example='true'),
  enableTracking?: boolean(name='enable_tracking', example='false'),
  encryptConf?: EncryptConf(name='encrypt_conf'),
  hotTtl?: int32(name='hot_ttl', example='60'),
  logstoreName?: string(name='logstoreName', example='test-logstore'),
  maxSplitShard?: int32(name='maxSplitShard', example='64'),
  mode?: string(name='mode', example='standard'),
  shardCount?: int32(name='shardCount', example='2'),
  telemetryType?: string(name='telemetryType', example='None'),
  ttl?: int32(name='ttl', example='30'),
}

model UpdateLogStoreResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function updateLogStoreWithOptions(project: string, logstore: string, request: UpdateLogStoreRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateLogStoreResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var body : map[string]any = {};
  if (!Util.isUnset(request.appendMeta)) {
    body['appendMeta'] = request.appendMeta;
  }
  if (!Util.isUnset(request.autoSplit)) {
    body['autoSplit'] = request.autoSplit;
  }
  if (!Util.isUnset(request.enableTracking)) {
    body['enable_tracking'] = request.enableTracking;
  }
  if (!Util.isUnset(request.encryptConf)) {
    body['encrypt_conf'] = request.encryptConf;
  }
  if (!Util.isUnset(request.hotTtl)) {
    body['hot_ttl'] = request.hotTtl;
  }
  if (!Util.isUnset(request.logstoreName)) {
    body['logstoreName'] = request.logstoreName;
  }
  if (!Util.isUnset(request.maxSplitShard)) {
    body['maxSplitShard'] = request.maxSplitShard;
  }
  if (!Util.isUnset(request.mode)) {
    body['mode'] = request.mode;
  }
  if (!Util.isUnset(request.shardCount)) {
    body['shardCount'] = request.shardCount;
  }
  if (!Util.isUnset(request.telemetryType)) {
    body['telemetryType'] = request.telemetryType;
  }
  if (!Util.isUnset(request.ttl)) {
    body['ttl'] = request.ttl;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateLogStore',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/logstores/${logstore}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return execute(params, req, runtime);
}

async function updateLogStore(project: string, logstore: string, request: UpdateLogStoreRequest): UpdateLogStoreResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateLogStoreWithOptions(project, logstore, request, headers, runtime);
}

model UpdateLoggingRequest {
  loggingDetails?: [ 
    {
      logstore?: string(name='logstore', example='my-logstore'),
      type?: string(name='type', example='consumergroup_log'),
    }
  ](name='loggingDetails'),
  loggingProject?: string(name='loggingProject', example='my-project'),
}

model UpdateLoggingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function updateLoggingWithOptions(project: string, request: UpdateLoggingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateLoggingResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var body : map[string]any = {};
  if (!Util.isUnset(request.loggingDetails)) {
    body['loggingDetails'] = request.loggingDetails;
  }
  if (!Util.isUnset(request.loggingProject)) {
    body['loggingProject'] = request.loggingProject;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateLogging',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/logging`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return execute(params, req, runtime);
}

async function updateLogging(project: string, request: UpdateLoggingRequest): UpdateLoggingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateLoggingWithOptions(project, request, headers, runtime);
}

model UpdateMachineGroupRequest {
  groupAttribute?: {
    externalName?: string(name='externalName', example='testgroup2'),
    groupTopic?: string(name='groupTopic', example='testtopic2'),
  }(name='groupAttribute'),
  groupName?: string(name='groupName', example='test-machine-group'),
  groupType?: string(name='groupType', example='""'),
  machineIdentifyType?: string(name='machineIdentifyType', example='userdefined'),
  machineList?: [ string ](name='machineList', example='[uu_id_1，uu_id_2]'),
}

model UpdateMachineGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function updateMachineGroupWithOptions(project: string, groupName: string, request: UpdateMachineGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateMachineGroupResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var body : map[string]any = {};
  if (!Util.isUnset(request.groupAttribute)) {
    body['groupAttribute'] = request.groupAttribute;
  }
  if (!Util.isUnset(request.groupName)) {
    body['groupName'] = request.groupName;
  }
  if (!Util.isUnset(request.groupType)) {
    body['groupType'] = request.groupType;
  }
  if (!Util.isUnset(request.machineIdentifyType)) {
    body['machineIdentifyType'] = request.machineIdentifyType;
  }
  if (!Util.isUnset(request.machineList)) {
    body['machineList'] = request.machineList;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMachineGroup',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/machinegroups/${groupName}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return execute(params, req, runtime);
}

async function updateMachineGroup(project: string, groupName: string, request: UpdateMachineGroupRequest): UpdateMachineGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateMachineGroupWithOptions(project, groupName, request, headers, runtime);
}

model UpdateMachineGroupMachineRequest {
  action?: string(name='action', example='add'),
  body?: [ string ](name='body', example='add'),
}

model UpdateMachineGroupMachineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function updateMachineGroupMachineWithOptions(project: string, machineGroup: string, request: UpdateMachineGroupMachineRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateMachineGroupMachineResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var query : map[string]any = {};
  if (!Util.isUnset(request.action)) {
    query['action'] = request.action;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    query = OpenApiUtil.query(query),
    body = request.body,
  };
  var params = new OpenApi.Params{
    action = 'UpdateMachineGroupMachine',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/machinegroups/${machineGroup}/machines`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return execute(params, req, runtime);
}

async function updateMachineGroupMachine(project: string, machineGroup: string, request: UpdateMachineGroupMachineRequest): UpdateMachineGroupMachineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateMachineGroupMachineWithOptions(project, machineGroup, request, headers, runtime);
}

model UpdateOdpsShipperRequest {
  shipperName?: string(name='shipperName', example='test-shipper'),
  targetConfiguration?: {
    bufferInterval?: int32(name='bufferInterval', example='1800'),
    enable?: boolean(name='enable', example='true'),
    fields?: [ string ](name='fields'),
    odpsEndpoint?: string(name='odpsEndpoint', example='http://service.cn-hangzhou.maxcompute.aliyun-inc.com/api'),
    odpsProject?: string(name='odpsProject', example='ali-odps-project'),
    odpsTable?: string(name='odpsTable', example='test-table'),
    partitionColumn?: [ string ](name='partitionColumn'),
    partitionTimeFormat?: string(name='partitionTimeFormat', example='yyyy_MM_dd_hh_mm'),
  }(name='targetConfiguration'),
  targetType?: string(name='targetType', example='odps'),
}

model UpdateOdpsShipperResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function updateOdpsShipperWithOptions(project: string, logstore: string, shipperName: string, request: UpdateOdpsShipperRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateOdpsShipperResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var body : map[string]any = {};
  if (!Util.isUnset(request.shipperName)) {
    body['shipperName'] = request.shipperName;
  }
  if (!Util.isUnset(request.targetConfiguration)) {
    body['targetConfiguration'] = request.targetConfiguration;
  }
  if (!Util.isUnset(request.targetType)) {
    body['targetType'] = request.targetType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateOdpsShipper',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/logstores/${logstore}/shipper/${shipperName}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return execute(params, req, runtime);
}

async function updateOdpsShipper(project: string, logstore: string, shipperName: string, request: UpdateOdpsShipperRequest): UpdateOdpsShipperResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateOdpsShipperWithOptions(project, logstore, shipperName, request, headers, runtime);
}

model UpdateOssExternalStoreRequest {
  externalStoreName?: string(name='externalStoreName', example='test-oss-store'),
  parameter?: {
    accessid?: string(name='accessid', example='LTAI5tFsHGGeYry*****1Sz'),
    accesskey?: string(name='accesskey', example='GyviCLDVHkHrOztdkxuE6******Rp6'),
    bucket?: string(name='bucket', example='my-bucket'),
    columns?: [ 
      {
        name?: string(name='name', example='test'),
        type?: string(name='type'),
      }
    ](name='columns'),
    endpoint?: string(name='endpoint', example='oss-cn-hangzhou.aliyuncs.com'),
    objects?: [ string ](name='objects'),
  }(name='parameter'),
  storeType?: string(name='storeType', example='oss'),
}

model UpdateOssExternalStoreResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function updateOssExternalStoreWithOptions(project: string, externalStoreName: string, request: UpdateOssExternalStoreRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateOssExternalStoreResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var body : map[string]any = {};
  if (!Util.isUnset(request.externalStoreName)) {
    body['externalStoreName'] = request.externalStoreName;
  }
  if (!Util.isUnset(request.parameter)) {
    body['parameter'] = request.parameter;
  }
  if (!Util.isUnset(request.storeType)) {
    body['storeType'] = request.storeType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateOssExternalStore',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/externalstores/${externalStoreName}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return execute(params, req, runtime);
}

async function updateOssExternalStore(project: string, externalStoreName: string, request: UpdateOssExternalStoreRequest): UpdateOssExternalStoreResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateOssExternalStoreWithOptions(project, externalStoreName, request, headers, runtime);
}

model UpdateOssShipperRequest {
  shipperName?: string(name='shipperName', example='test-shipper'),
  targetConfiguration?: {
    bufferInterval?: int32(name='bufferInterval', example='300'),
    bufferSize?: int32(name='bufferSize', example='256'),
    compressType?: string(name='compressType', example='snappy'),
    enable?: boolean(name='enable', example='true'),
    ossBucket?: string(name='ossBucket', example='test-bucket'),
    ossPrefix?: string(name='ossPrefix', example='test-prefix/hello-prefix'),
    pathFormat?: string(name='pathFormat', example='2022/01/01/00/59'),
    roleArn?: string(name='roleArn', example='acs:ram::16542189**343050:role/aliyunlogdefaultrole'),
    storage?: {
      detail?: map[string]any(name='detail', example='{ 
"columns": [
   {"name" : "test-col", "type": "text"}
 ]
}'),
      format?: string(name='format', example='parquet'),
    }(name='storage'),
    timeZone?: string(name='timeZone', example='+8'),
  }(name='targetConfiguration'),
  targetType?: string(name='targetType', example='oss'),
}

model UpdateOssShipperResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function updateOssShipperWithOptions(project: string, logstore: string, shipperName: string, request: UpdateOssShipperRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateOssShipperResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var body : map[string]any = {};
  if (!Util.isUnset(request.shipperName)) {
    body['shipperName'] = request.shipperName;
  }
  if (!Util.isUnset(request.targetConfiguration)) {
    body['targetConfiguration'] = request.targetConfiguration;
  }
  if (!Util.isUnset(request.targetType)) {
    body['targetType'] = request.targetType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateOssShipper',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/logstores/${logstore}/shipper/${shipperName}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return execute(params, req, runtime);
}

async function updateOssShipper(project: string, logstore: string, shipperName: string, request: UpdateOssShipperRequest): UpdateOssShipperResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateOssShipperWithOptions(project, logstore, shipperName, request, headers, runtime);
}

model UpdateProjectRequest {
  description?: string(name='description', example='Description of my-project-test'),
}

model UpdateProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function updateProjectWithOptions(project: string, request: UpdateProjectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateProjectResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateProject',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return execute(params, req, runtime);
}

async function updateProject(project: string, request: UpdateProjectRequest): UpdateProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateProjectWithOptions(project, request, headers, runtime);
}

model UpdateRdsExternalStoreRequest {
  externalStoreName?: string(name='externalStoreName', example='rds_store'),
  parameter?: {
    db?: string(name='db', example='meta'),
    host?: string(name='host', example='192.168.XX.XX'),
    instanceId?: string(name='instance-id', example='i-bp1b6c719dfa08exf****'),
    password?: string(name='password', example='sfdsfldsfksfls****'),
    port?: string(name='port', example='3306'),
    region?: string(name='region', example='cn-qingdao'),
    table?: string(name='table', example='join_meta'),
    username?: string(name='username', example='root'),
    vpcId?: string(name='vpc-id', example='vpc-bp1aevy8sofi8mh1q****'),
  }(name='parameter'),
  storeType?: string(name='storeType', example='rds-vpc'),
}

model UpdateRdsExternalStoreResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function updateRdsExternalStoreWithOptions(project: string, externalStoreName: string, request: UpdateRdsExternalStoreRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateRdsExternalStoreResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var body : map[string]any = {};
  if (!Util.isUnset(request.externalStoreName)) {
    body['externalStoreName'] = request.externalStoreName;
  }
  if (!Util.isUnset(request.parameter)) {
    body['parameter'] = request.parameter;
  }
  if (!Util.isUnset(request.storeType)) {
    body['storeType'] = request.storeType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateRdsExternalStore',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/externalstores/${externalStoreName}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return execute(params, req, runtime);
}

async function updateRdsExternalStore(project: string, externalStoreName: string, request: UpdateRdsExternalStoreRequest): UpdateRdsExternalStoreResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateRdsExternalStoreWithOptions(project, externalStoreName, request, headers, runtime);
}

model UpdateSavedSearchRequest {
  displayName?: string(name='displayName', example='displayname'),
  logstore?: string(name='logstore', example='aliyun-test-logstore'),
  savedsearchName?: string(name='savedsearchName', example='savedsearch-name'),
  searchQuery?: string(name='searchQuery', example='*|select date_format(__time__-__time__%60, \\"%H:%i:%s\\") as time, COUNT(*) as pv group by time'),
  topic?: string(name='topic', example='theme'),
}

model UpdateSavedSearchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function updateSavedSearchWithOptions(project: string, savedsearchName: string, request: UpdateSavedSearchRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSavedSearchResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['project'] = project;
  var body : map[string]any = {};
  if (!Util.isUnset(request.displayName)) {
    body['displayName'] = request.displayName;
  }
  if (!Util.isUnset(request.logstore)) {
    body['logstore'] = request.logstore;
  }
  if (!Util.isUnset(request.savedsearchName)) {
    body['savedsearchName'] = request.savedsearchName;
  }
  if (!Util.isUnset(request.searchQuery)) {
    body['searchQuery'] = request.searchQuery;
  }
  if (!Util.isUnset(request.topic)) {
    body['topic'] = request.topic;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSavedSearch',
    version = '2020-12-30',
    protocol = 'HTTPS',
    pathname = `/savedsearches/${savedsearchName}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return execute(params, req, runtime);
}

async function updateSavedSearch(project: string, savedsearchName: string, request: UpdateSavedSearchRequest): UpdateSavedSearchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateSavedSearchWithOptions(project, savedsearchName, request, headers, runtime);
}

