/**
 *
 */
import Util;
import OSS;
import RPC;
import OpenPlatform;
import OSSUtil;
import FileForm;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('videorecog', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model DetectVideoShotRequest {
  videoUrl?: string(name='VideoUrl'),
}

model DetectVideoShotAdvanceRequest {
  videoUrlObject: readable(name='VideoUrlObject'),
}

model DetectVideoShotResponseBody = {
  data?: {
    shotFrameIds?: [ int32 ](name='ShotFrameIds'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DetectVideoShotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DetectVideoShotResponseBody(name='body'),
}

async function detectVideoShotWithOptions(request: DetectVideoShotRequest, runtime: Util.RuntimeOptions): DetectVideoShotResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.videoUrl)) {
    body['VideoUrl'] = request.videoUrl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DetectVideoShot',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function detectVideoShot(request: DetectVideoShotRequest): DetectVideoShotResponse {
  var runtime = new Util.RuntimeOptions{};
  return detectVideoShotWithOptions(request, runtime);
}

async function detectVideoShotAdvance(request: DetectVideoShotAdvanceRequest, runtime: Util.RuntimeOptions): DetectVideoShotResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'videorecog',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var detectVideoShotReq = new DetectVideoShotRequest{};
  OpenApiUtil.convert(request, detectVideoShotReq);

  if(!Util.isUnset(request.videoUrlObject)){
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.objectKey,
      content = request.videoUrlObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    detectVideoShotReq.videoUrl =   `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  }
  var detectVideoShotResp = detectVideoShotWithOptions(detectVideoShotReq, runtime);
  return detectVideoShotResp;
}

model GenerateVideoCoverRequest {
  isGif?: boolean(name='IsGif'),
  videoUrl?: string(name='VideoUrl'),
}

model GenerateVideoCoverAdvanceRequest {
  videoUrlObject: readable(name='VideoUrlObject'),
  isGif?: boolean(name='IsGif'),
}

model GenerateVideoCoverResponseBody = {
  data?: {
    outputs?: [ 
      {
        confidence?: float(name='Confidence'),
        imageURL?: string(name='ImageURL'),
      }
    ](name='Outputs'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model GenerateVideoCoverResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GenerateVideoCoverResponseBody(name='body'),
}

async function generateVideoCoverWithOptions(request: GenerateVideoCoverRequest, runtime: Util.RuntimeOptions): GenerateVideoCoverResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.isGif)) {
    body['IsGif'] = request.isGif;
  }
  if (!Util.isUnset(request.videoUrl)) {
    body['VideoUrl'] = request.videoUrl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GenerateVideoCover',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function generateVideoCover(request: GenerateVideoCoverRequest): GenerateVideoCoverResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateVideoCoverWithOptions(request, runtime);
}

async function generateVideoCoverAdvance(request: GenerateVideoCoverAdvanceRequest, runtime: Util.RuntimeOptions): GenerateVideoCoverResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'videorecog',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var generateVideoCoverReq = new GenerateVideoCoverRequest{};
  OpenApiUtil.convert(request, generateVideoCoverReq);

  if(!Util.isUnset(request.videoUrlObject)){
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.objectKey,
      content = request.videoUrlObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    generateVideoCoverReq.videoUrl =   `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  }
  var generateVideoCoverResp = generateVideoCoverWithOptions(generateVideoCoverReq, runtime);
  return generateVideoCoverResp;
}

model GetAsyncJobResultRequest {
  jobId?: string(name='JobId'),
}

model GetAsyncJobResultResponseBody = {
  data?: {
    errorCode?: string(name='ErrorCode'),
    errorMessage?: string(name='ErrorMessage'),
    jobId?: string(name='JobId'),
    result?: string(name='Result'),
    status?: string(name='Status'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetAsyncJobResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAsyncJobResultResponseBody(name='body'),
}

async function getAsyncJobResultWithOptions(request: GetAsyncJobResultRequest, runtime: Util.RuntimeOptions): GetAsyncJobResultResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.jobId)) {
    body['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetAsyncJobResult',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAsyncJobResult(request: GetAsyncJobResultRequest): GetAsyncJobResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAsyncJobResultWithOptions(request, runtime);
}

model RecognizeVideoCastCrewListRequest {
  params?: [ 
    {
      type?: string(name='Type'),
    }
  ](name='Params'),
  registerUrl?: string(name='RegisterUrl'),
  videoUrl?: string(name='VideoUrl'),
}

model RecognizeVideoCastCrewListAdvanceRequest {
  videoUrlObject: readable(name='VideoUrlObject'),
  params?: [ 
    {
      type?: string(name='Type'),
    }
  ](name='Params'),
  registerUrl?: string(name='RegisterUrl'),
}

model RecognizeVideoCastCrewListShrinkRequest {
  paramsShrink?: string(name='Params'),
  registerUrl?: string(name='RegisterUrl'),
  videoUrl?: string(name='VideoUrl'),
}

model RecognizeVideoCastCrewListResponseBody = {
  data?: {
    castResults?: [ 
      {
        detailInfo?: map[string]string(name='DetailInfo'),
        endTime?: float(name='EndTime'),
        startTime?: float(name='StartTime'),
      }
    ](name='CastResults'),
    ocrResults?: [ 
      {
        detailInfo?: [ 
          {
            boxes?: [ int32 ](name='Boxes'),
            charProbs?: [[ float ]            ](name='CharProbs'),
            frameIndex?: long(name='FrameIndex'),
            position?: [ 
              {
                x?: long(name='X'),
                y?: long(name='Y'),
              }
            ](name='Position'),
            score?: float(name='Score'),
            text?: string(name='Text'),
            textProb?: float(name='TextProb'),
            timeStamp?: float(name='TimeStamp'),
            trackId?: long(name='TrackId'),
          }
        ](name='DetailInfo'),
        endTime?: float(name='EndTime'),
        startTime?: float(name='StartTime'),
      }
    ](name='OcrResults'),
    subtitlesResults?: [ 
      {
        subtitlesAllResults?: map[string]string(name='SubtitlesAllResults'),
        subtitlesAllResultsUrl?: string(name='SubtitlesAllResultsUrl'),
        subtitlesChineseResults?: map[string]string(name='SubtitlesChineseResults'),
        subtitlesChineseResultsUrl?: string(name='SubtitlesChineseResultsUrl'),
        subtitlesEnglishResults?: map[string]any(name='SubtitlesEnglishResults'),
        subtitlesEnglishResultsUrl?: string(name='SubtitlesEnglishResultsUrl'),
      }
    ](name='SubtitlesResults'),
    videoOcrResults?: [ 
      {
        detailInfo?: [ 
          {
            boxes?: [ long ](name='Boxes'),
            position?: [ 
              {
                x?: long(name='X'),
                y?: long(name='Y'),
              }
            ](name='Position'),
            score?: float(name='Score'),
            text?: string(name='Text'),
            textType?: long(name='TextType'),
          }
        ](name='DetailInfo'),
        endTime?: float(name='EndTime'),
        startTime?: float(name='StartTime'),
      }
    ](name='VideoOcrResults'),
  }(name='Data'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model RecognizeVideoCastCrewListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeVideoCastCrewListResponseBody(name='body'),
}

async function recognizeVideoCastCrewListWithOptions(tmpReq: RecognizeVideoCastCrewListRequest, runtime: Util.RuntimeOptions): RecognizeVideoCastCrewListResponse {
  Util.validateModel(tmpReq);
  var request = new RecognizeVideoCastCrewListShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.params)) {
    request.paramsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.params, 'Params', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.paramsShrink)) {
    body['Params'] = request.paramsShrink;
  }
  if (!Util.isUnset(request.registerUrl)) {
    body['RegisterUrl'] = request.registerUrl;
  }
  if (!Util.isUnset(request.videoUrl)) {
    body['VideoUrl'] = request.videoUrl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RecognizeVideoCastCrewList',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeVideoCastCrewList(request: RecognizeVideoCastCrewListRequest): RecognizeVideoCastCrewListResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeVideoCastCrewListWithOptions(request, runtime);
}

async function recognizeVideoCastCrewListAdvance(request: RecognizeVideoCastCrewListAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeVideoCastCrewListResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'videorecog',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var recognizeVideoCastCrewListReq = new RecognizeVideoCastCrewListRequest{};
  OpenApiUtil.convert(request, recognizeVideoCastCrewListReq);

  if(!Util.isUnset(request.videoUrlObject)){
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.objectKey,
      content = request.videoUrlObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    recognizeVideoCastCrewListReq.videoUrl =   `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  }
  var recognizeVideoCastCrewListResp = recognizeVideoCastCrewListWithOptions(recognizeVideoCastCrewListReq, runtime);
  return recognizeVideoCastCrewListResp;
}

model SplitVideoPartsRequest {
  videoUrl?: string(name='VideoUrl'),
}

model SplitVideoPartsAdvanceRequest {
  videoUrlObject: readable(name='VideoUrlObject'),
}

model SplitVideoPartsResponseBody = {
  data?: {
    elements?: [ 
      {
        beginTime?: float(name='BeginTime'),
        endTime?: float(name='EndTime'),
        index?: long(name='Index'),
      }
    ](name='Elements'),
  }(name='Data'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model SplitVideoPartsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SplitVideoPartsResponseBody(name='body'),
}

async function splitVideoPartsWithOptions(request: SplitVideoPartsRequest, runtime: Util.RuntimeOptions): SplitVideoPartsResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.videoUrl)) {
    body['VideoUrl'] = request.videoUrl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SplitVideoParts',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function splitVideoParts(request: SplitVideoPartsRequest): SplitVideoPartsResponse {
  var runtime = new Util.RuntimeOptions{};
  return splitVideoPartsWithOptions(request, runtime);
}

async function splitVideoPartsAdvance(request: SplitVideoPartsAdvanceRequest, runtime: Util.RuntimeOptions): SplitVideoPartsResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'videorecog',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var splitVideoPartsReq = new SplitVideoPartsRequest{};
  OpenApiUtil.convert(request, splitVideoPartsReq);

  if(!Util.isUnset(request.videoUrlObject)){
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.objectKey,
      content = request.videoUrlObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    splitVideoPartsReq.videoUrl =   `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  }
  var splitVideoPartsResp = splitVideoPartsWithOptions(splitVideoPartsReq, runtime);
  return splitVideoPartsResp;
}

model UnderstandVideoContentRequest {
  videoURL?: string(name='VideoURL', description='A short description of struct'),
}

model UnderstandVideoContentAdvanceRequest {
  videoURLObject: readable(name='VideoURLObject'),
}

model UnderstandVideoContentResponseBody = {
  data?: {
    tagInfo?: map[string]any(name='TagInfo'),
    videoInfo?: {
      duration?: long(name='Duration'),
      fps?: float(name='Fps'),
      height?: long(name='Height'),
      width?: long(name='Width'),
    }(name='VideoInfo'),
  }(name='Data'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UnderstandVideoContentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnderstandVideoContentResponseBody(name='body'),
}

async function understandVideoContentWithOptions(request: UnderstandVideoContentRequest, runtime: Util.RuntimeOptions): UnderstandVideoContentResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.videoURL)) {
    body['VideoURL'] = request.videoURL;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UnderstandVideoContent',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function understandVideoContent(request: UnderstandVideoContentRequest): UnderstandVideoContentResponse {
  var runtime = new Util.RuntimeOptions{};
  return understandVideoContentWithOptions(request, runtime);
}

async function understandVideoContentAdvance(request: UnderstandVideoContentAdvanceRequest, runtime: Util.RuntimeOptions): UnderstandVideoContentResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var securityToken = @credential.getSecurityToken();
  var credentialType = @credential.getType();
  var openPlatformEndpoint = @openPlatformEndpoint;
  if(Util.isUnset(openPlatformEndpoint)) {
    openPlatformEndpoint ='openplatform.aliyuncs.com';
  }
  if(Util.isUnset(credentialType)) {
    credentialType ='access_key';
  }
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    securityToken = securityToken,
    type = credentialType,
    endpoint = openPlatformEndpoint,
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);
  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'videorecog',
    regionId = @regionId,
  };
  var authResponse = new OpenPlatform.AuthorizeFileUploadResponse{};
  var ossConfig = new OSS.Config{
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient : OSS = null;

  var fileObj = new FileForm.FileField{};
  var ossHeader = new OSS.PostObjectRequest.header{};
  var uploadRequest = new OSS.PostObjectRequest{};
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  OpenApiUtil.convert(runtime, ossRuntime);
  var understandVideoContentReq = new UnderstandVideoContentRequest{};
  OpenApiUtil.convert(request, understandVideoContentReq);

  if(!Util.isUnset(request.videoURLObject)){
    authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
    ossConfig.accessKeyId = authResponse.accessKeyId;
    ossConfig.endpoint = OpenApiUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType);
    ossClient = new OSS(ossConfig);

    fileObj = new FileForm.FileField{
      filename = authResponse.objectKey,
      content = request.videoURLObject,
      contentType = '',
    };
    ossHeader = new OSS.PostObjectRequest.header{
      accessKeyId = authResponse.accessKeyId,
      policy = authResponse.encodedPolicy,
      signature = authResponse.signature,
      key = authResponse.objectKey,
      file = fileObj,
      successActionStatus = '201',
    };
    uploadRequest = new OSS.PostObjectRequest{
      bucketName = authResponse.bucket,
      header = ossHeader,
    };
    ossClient.postObject(uploadRequest, ossRuntime);
    understandVideoContentReq.videoURL =   `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  }
  var understandVideoContentResp = understandVideoContentWithOptions(understandVideoContentReq, runtime);
  return understandVideoContentResp;
}

