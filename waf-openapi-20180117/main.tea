/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  @endpointMap = {
    cn-qingdao = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-beijing = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-chengdu = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-zhangjiakou = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-huhehaote = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-hangzhou = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-shanghai = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-shenzhen = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-heyuan = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-wulanchabu = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-hongkong = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-southeast-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-southeast-3 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-southeast-5 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    eu-west-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    us-west-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    us-east-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    eu-central-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    me-east-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-south-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    cn-shanghai-finance-1 = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-shenzhen-finance-1 = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-north-2-gov-1 = 'wafopenapi.cn-hangzhou.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('waf-openapi', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model CreateAclRuleRequest {
  rules?: string(name='Rules'),
  domain?: string(name='Domain'),
  instanceId?: string(name='InstanceId'),
  region?: string(name='Region'),
}

model CreateAclRuleResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    status?: int32(name='Status'),
    wafTaskId?: string(name='WafTaskId'),
  }(name='Result'),
}

model CreateAclRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAclRuleResponseBody(name='body'),
}

async function createAclRuleWithOptions(request: CreateAclRuleRequest, runtime: Util.RuntimeOptions): CreateAclRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateAclRule', '2018-01-17', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createAclRule(request: CreateAclRuleRequest): CreateAclRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAclRuleWithOptions(request, runtime);
}

model CreateCertAndKeyRequest {
  domain?: string(name='Domain'),
  region?: string(name='Region'),
  instanceId?: string(name='InstanceId'),
  cert?: string(name='Cert'),
  key?: string(name='Key'),
  httpsCertName?: string(name='HttpsCertName'),
}

model CreateCertAndKeyResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    status?: int32(name='Status'),
    wafTaskId?: string(name='WafTaskId'),
  }(name='Result'),
}

model CreateCertAndKeyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCertAndKeyResponseBody(name='body'),
}

async function createCertAndKeyWithOptions(request: CreateCertAndKeyRequest, runtime: Util.RuntimeOptions): CreateCertAndKeyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateCertAndKey', '2018-01-17', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createCertAndKey(request: CreateCertAndKeyRequest): CreateCertAndKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCertAndKeyWithOptions(request, runtime);
}

model CreateDomainConfigRequest {
  domain?: string(name='Domain'),
  sourceIps?: string(name='SourceIps'),
  httpPort?: string(name='HttpPort'),
  httpsPort?: string(name='HttpsPort'),
  instanceId?: string(name='InstanceId'),
  region?: string(name='Region'),
  isAccessProduct?: int32(name='IsAccessProduct'),
  protocols?: string(name='Protocols'),
  loadBalancing?: int32(name='LoadBalancing'),
  httpToUserIp?: int32(name='HttpToUserIp'),
  httpsRedirect?: int32(name='HttpsRedirect'),
  rsType?: int32(name='RsType'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model CreateDomainConfigResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    status?: int32(name='Status'),
    wafTaskId?: string(name='WafTaskId'),
  }(name='Result'),
}

model CreateDomainConfigResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDomainConfigResponseBody(name='body'),
}

async function createDomainConfigWithOptions(request: CreateDomainConfigRequest, runtime: Util.RuntimeOptions): CreateDomainConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDomainConfig', '2018-01-17', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDomainConfig(request: CreateDomainConfigRequest): CreateDomainConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDomainConfigWithOptions(request, runtime);
}

model CreateProtectionModuleRuleRequest {
  domain?: string(name='Domain'),
  defense?: string(name='Defense'),
  rule?: string(name='Rule'),
  instanceId?: string(name='InstanceId'),
  region?: string(name='Region'),
}

model CreateProtectionModuleRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateProtectionModuleRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProtectionModuleRuleResponseBody(name='body'),
}

async function createProtectionModuleRuleWithOptions(request: CreateProtectionModuleRuleRequest, runtime: Util.RuntimeOptions): CreateProtectionModuleRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateProtectionModuleRule', '2018-01-17', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createProtectionModuleRule(request: CreateProtectionModuleRuleRequest): CreateProtectionModuleRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createProtectionModuleRuleWithOptions(request, runtime);
}

model DeleteAclRuleRequest {
  ruleId?: long(name='RuleId'),
  domain?: string(name='Domain'),
  instanceId?: string(name='InstanceId'),
  region?: string(name='Region'),
}

model DeleteAclRuleResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    status?: int32(name='Status'),
    wafTaskId?: string(name='WafTaskId'),
  }(name='Result'),
}

model DeleteAclRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAclRuleResponseBody(name='body'),
}

async function deleteAclRuleWithOptions(request: DeleteAclRuleRequest, runtime: Util.RuntimeOptions): DeleteAclRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteAclRule', '2018-01-17', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteAclRule(request: DeleteAclRuleRequest): DeleteAclRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAclRuleWithOptions(request, runtime);
}

model DeleteDomainConfigRequest {
  domain?: string(name='Domain'),
  instanceId?: string(name='InstanceId'),
  region?: string(name='Region'),
}

model DeleteDomainConfigResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    status?: int32(name='Status'),
    wafTaskId?: string(name='WafTaskId'),
  }(name='Result'),
}

model DeleteDomainConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDomainConfigResponseBody(name='body'),
}

async function deleteDomainConfigWithOptions(request: DeleteDomainConfigRequest, runtime: Util.RuntimeOptions): DeleteDomainConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDomainConfig', '2018-01-17', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDomainConfig(request: DeleteDomainConfigRequest): DeleteDomainConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDomainConfigWithOptions(request, runtime);
}

model DescribeAclRulesRequest {
  region?: string(name='Region'),
  instanceId?: string(name='InstanceId'),
  domain?: string(name='Domain'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
}

model DescribeAclRulesResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    aclRules?: {
      aclRule?: [ 
      {
        action?: int32(name='Action'),
        isDefault?: int32(name='IsDefault'),
        continueWaf?: int32(name='ContinueWaf'),
        order?: int32(name='Order'),
        conditions?: {
          condition?: [ 
          {
            key?: string(name='Key'),
            value?: string(name='Value'),
            contain?: string(name='Contain'),
          }
        ](name='condition')
        }(name='Conditions'),
        continueDataRiskControl?: int32(name='ContinueDataRiskControl'),
        continueSdk?: int32(name='ContinueSdk'),
        continueCc?: int32(name='ContinueCc'),
        continueSA?: int32(name='ContinueSA'),
        continueBlockGeo?: int32(name='ContinueBlockGeo'),
        name?: string(name='Name'),
        id?: long(name='Id'),
      }
    ](name='AclRule')
    }(name='AclRules'),
    total?: int32(name='Total'),
  }(name='Result'),
}

model DescribeAclRulesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAclRulesResponseBody(name='body'),
}

async function describeAclRulesWithOptions(request: DescribeAclRulesRequest, runtime: Util.RuntimeOptions): DescribeAclRulesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAclRules', '2018-01-17', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAclRules(request: DescribeAclRulesRequest): DescribeAclRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAclRulesWithOptions(request, runtime);
}

model DescribeAsyncTaskStatusRequest {
  region?: string(name='Region'),
  instanceId?: string(name='InstanceId'),
  wafRequestId?: string(name='WafRequestId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeAsyncTaskStatusResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    data?: string(name='Data'),
    progress?: int32(name='Progress'),
    errCode?: string(name='ErrCode'),
    errMsg?: string(name='ErrMsg'),
    asyncTaskStatus?: string(name='AsyncTaskStatus'),
  }(name='Result'),
}

model DescribeAsyncTaskStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAsyncTaskStatusResponseBody(name='body'),
}

async function describeAsyncTaskStatusWithOptions(request: DescribeAsyncTaskStatusRequest, runtime: Util.RuntimeOptions): DescribeAsyncTaskStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAsyncTaskStatus', '2018-01-17', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAsyncTaskStatus(request: DescribeAsyncTaskStatusRequest): DescribeAsyncTaskStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAsyncTaskStatusWithOptions(request, runtime);
}

model DescribeDomainConfigRequest {
  region?: string(name='Region'),
  instanceId?: string(name='InstanceId'),
  domain?: string(name='Domain'),
}

model DescribeDomainConfigResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    status?: int32(name='Status'),
    wafTaskId?: string(name='WafTaskId'),
    domainConfig?: {
      cname?: string(name='Cname'),
      protocolType?: int32(name='ProtocolType'),
      sourceIps?: string(name='SourceIps'),
    }(name='DomainConfig'),
  }(name='Result'),
}

model DescribeDomainConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainConfigResponseBody(name='body'),
}

async function describeDomainConfigWithOptions(request: DescribeDomainConfigRequest, runtime: Util.RuntimeOptions): DescribeDomainConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainConfig', '2018-01-17', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainConfig(request: DescribeDomainConfigRequest): DescribeDomainConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainConfigWithOptions(request, runtime);
}

model DescribeDomainConfigStatusRequest {
  region?: string(name='Region'),
  instanceId?: string(name='InstanceId'),
  domain?: string(name='Domain'),
}

model DescribeDomainConfigStatusResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    status?: int32(name='Status'),
    wafTaskId?: string(name='WafTaskId'),
    domainConfig?: {
      configStatus?: string(name='ConfigStatus'),
    }(name='DomainConfig'),
  }(name='Result'),
}

model DescribeDomainConfigStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainConfigStatusResponseBody(name='body'),
}

async function describeDomainConfigStatusWithOptions(request: DescribeDomainConfigStatusRequest, runtime: Util.RuntimeOptions): DescribeDomainConfigStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainConfigStatus', '2018-01-17', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainConfigStatus(request: DescribeDomainConfigStatusRequest): DescribeDomainConfigStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainConfigStatusWithOptions(request, runtime);
}

model DescribeDomainNamesRequest {
  region?: string(name='Region'),
  instanceId?: string(name='InstanceId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeDomainNamesResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    domainNames?: [ string ](name='DomainNames')
  }(name='Result'),
}

model DescribeDomainNamesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainNamesResponseBody(name='body'),
}

async function describeDomainNamesWithOptions(request: DescribeDomainNamesRequest, runtime: Util.RuntimeOptions): DescribeDomainNamesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainNames', '2018-01-17', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainNames(request: DescribeDomainNamesRequest): DescribeDomainNamesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainNamesWithOptions(request, runtime);
}

model DescribePayInfoRequest {
  region?: string(name='Region'),
  instanceSource?: string(name='InstanceSource'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribePayInfoResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    status?: int32(name='Status'),
    endDate?: long(name='EndDate'),
    remainDay?: int32(name='RemainDay'),
    region?: string(name='Region'),
    payType?: int32(name='PayType'),
    inDebt?: int32(name='InDebt'),
    instanceId?: string(name='InstanceId'),
    trial?: int32(name='Trial'),
  }(name='Result'),
}

model DescribePayInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePayInfoResponseBody(name='body'),
}

async function describePayInfoWithOptions(request: DescribePayInfoRequest, runtime: Util.RuntimeOptions): DescribePayInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePayInfo', '2018-01-17', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePayInfo(request: DescribePayInfoRequest): DescribePayInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePayInfoWithOptions(request, runtime);
}

model DescribeProtectionModuleRulesRequest {
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
  domain?: string(name='Domain'),
  defense?: string(name='Defense'),
  instanceId?: string(name='InstanceId'),
  region?: string(name='Region'),
}

model DescribeProtectionModuleRulesResponseBody = {
  moduleRules?: [ 
    {
      time?: long(name='Time'),
      version?: long(name='Version'),
      content?: string(name='Content'),
      id?: long(name='Id'),
    }
  ](name='ModuleRules'),
  requestId?: string(name='RequestId'),
  total?: int32(name='Total'),
  taskStatus?: int32(name='TaskStatus'),
}

model DescribeProtectionModuleRulesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeProtectionModuleRulesResponseBody(name='body'),
}

async function describeProtectionModuleRulesWithOptions(request: DescribeProtectionModuleRulesRequest, runtime: Util.RuntimeOptions): DescribeProtectionModuleRulesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeProtectionModuleRules', '2018-01-17', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeProtectionModuleRules(request: DescribeProtectionModuleRulesRequest): DescribeProtectionModuleRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeProtectionModuleRulesWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeRegionsResponseBody = {
  requestId?: string(name='RequestId'),
  regions?: {
    region?: [ 
    {
      region?: string(name='Region'),
      display?: string(name='Display'),
    }
  ](name='Region')
  }(name='Regions'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRegions', '2018-01-17', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeWafSourceIpSegmentRequest {
  instanceId?: string(name='InstanceId'),
  region?: string(name='Region'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeWafSourceIpSegmentResponseBody = {
  requestId?: string(name='RequestId'),
  ips?: string(name='Ips'),
}

model DescribeWafSourceIpSegmentResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWafSourceIpSegmentResponseBody(name='body'),
}

async function describeWafSourceIpSegmentWithOptions(request: DescribeWafSourceIpSegmentRequest, runtime: Util.RuntimeOptions): DescribeWafSourceIpSegmentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeWafSourceIpSegment', '2018-01-17', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeWafSourceIpSegment(request: DescribeWafSourceIpSegmentRequest): DescribeWafSourceIpSegmentResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWafSourceIpSegmentWithOptions(request, runtime);
}

model ModifyAclRuleRequest {
  domain?: string(name='Domain'),
  rules?: string(name='Rules'),
  instanceId?: string(name='InstanceId'),
  region?: string(name='Region'),
}

model ModifyAclRuleResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    status?: int32(name='Status'),
    wafTaskId?: string(name='WafTaskId'),
  }(name='Result'),
}

model ModifyAclRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAclRuleResponseBody(name='body'),
}

async function modifyAclRuleWithOptions(request: ModifyAclRuleRequest, runtime: Util.RuntimeOptions): ModifyAclRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyAclRule', '2018-01-17', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyAclRule(request: ModifyAclRuleRequest): ModifyAclRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAclRuleWithOptions(request, runtime);
}

model ModifyDomainConfigRequest {
  domain?: string(name='Domain'),
  sourceIps?: string(name='SourceIps'),
  httpPort?: string(name='HttpPort'),
  httpsPort?: string(name='HttpsPort'),
  instanceId?: string(name='InstanceId'),
  region?: string(name='Region'),
  isAccessProduct?: int32(name='IsAccessProduct'),
  protocols?: string(name='Protocols'),
  loadBalancing?: int32(name='LoadBalancing'),
  httpToUserIp?: int32(name='HttpToUserIp'),
  httpsRedirect?: int32(name='HttpsRedirect'),
}

model ModifyDomainConfigResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    status?: int32(name='Status'),
    wafTaskId?: string(name='WafTaskId'),
  }(name='Result'),
}

model ModifyDomainConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDomainConfigResponseBody(name='body'),
}

async function modifyDomainConfigWithOptions(request: ModifyDomainConfigRequest, runtime: Util.RuntimeOptions): ModifyDomainConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDomainConfig', '2018-01-17', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDomainConfig(request: ModifyDomainConfigRequest): ModifyDomainConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDomainConfigWithOptions(request, runtime);
}

model ModifyProtectionRuleCacheStatusRequest {
  domain?: string(name='Domain'),
  id?: long(name='Id'),
  defense?: string(name='Defense'),
  instanceId?: string(name='InstanceId'),
  region?: string(name='Region'),
}

model ModifyProtectionRuleCacheStatusResponseBody = {
  requestId?: string(name='RequestId'),
  taskStatus?: int32(name='TaskStatus'),
  wafTaskId?: int32(name='WafTaskId'),
}

model ModifyProtectionRuleCacheStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyProtectionRuleCacheStatusResponseBody(name='body'),
}

async function modifyProtectionRuleCacheStatusWithOptions(request: ModifyProtectionRuleCacheStatusRequest, runtime: Util.RuntimeOptions): ModifyProtectionRuleCacheStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyProtectionRuleCacheStatus', '2018-01-17', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyProtectionRuleCacheStatus(request: ModifyProtectionRuleCacheStatusRequest): ModifyProtectionRuleCacheStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyProtectionRuleCacheStatusWithOptions(request, runtime);
}

model ModifyProtectionRuleStatusRequest {
  domain?: string(name='Domain'),
  defense?: string(name='Defense'),
  id?: long(name='Id'),
  ruleStatus?: int32(name='RuleStatus'),
  lockVersion?: long(name='LockVersion'),
  instanceId?: string(name='InstanceId'),
  region?: string(name='Region'),
}

model ModifyProtectionRuleStatusResponseBody = {
  requestId?: string(name='RequestId'),
  taskStatus?: int32(name='TaskStatus'),
  wafTaskId?: int32(name='WafTaskId'),
}

model ModifyProtectionRuleStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyProtectionRuleStatusResponseBody(name='body'),
}

async function modifyProtectionRuleStatusWithOptions(request: ModifyProtectionRuleStatusRequest, runtime: Util.RuntimeOptions): ModifyProtectionRuleStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyProtectionRuleStatus', '2018-01-17', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyProtectionRuleStatus(request: ModifyProtectionRuleStatusRequest): ModifyProtectionRuleStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyProtectionRuleStatusWithOptions(request, runtime);
}

model ModifyWafSwitchRequest {
  region?: string(name='Region'),
  domain?: string(name='Domain'),
  instanceId?: string(name='InstanceId'),
  serviceOn?: int32(name='ServiceOn'),
}

model ModifyWafSwitchResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    status?: int32(name='Status'),
    wafTaskId?: string(name='WafTaskId'),
  }(name='Result'),
}

model ModifyWafSwitchResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyWafSwitchResponseBody(name='body'),
}

async function modifyWafSwitchWithOptions(request: ModifyWafSwitchRequest, runtime: Util.RuntimeOptions): ModifyWafSwitchResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyWafSwitch', '2018-01-17', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyWafSwitch(request: ModifyWafSwitchRequest): ModifyWafSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyWafSwitchWithOptions(request, runtime);
}

