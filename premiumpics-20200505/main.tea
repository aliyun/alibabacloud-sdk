/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  
  checkConfig(config);
  @endpoint = getEndpoint('premiumpics', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddUserCollectionRequest {
  bizType?: string(name='BizType'),
  unitId?: string(name='UnitId'),
  unitName?: string(name='UnitName'),
}

model AddUserCollectionResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  status?: boolean(name='Status'),
  success?: boolean(name='Success'),
}

model AddUserCollectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddUserCollectionResponseBody(name='body'),
}

async function addUserCollectionWithOptions(request: AddUserCollectionRequest, runtime: Util.RuntimeOptions): AddUserCollectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!Util.isUnset(request.unitId)) {
    query['UnitId'] = request.unitId;
  }
  if (!Util.isUnset(request.unitName)) {
    query['UnitName'] = request.unitName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddUserCollection',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addUserCollection(request: AddUserCollectionRequest): AddUserCollectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return addUserCollectionWithOptions(request, runtime);
}

model CheckSensitiveRequest {
  content?: string(name='Content'),
}

model CheckSensitiveResponseBody = {
  checkMessage?: string(name='CheckMessage'),
  checkResult?: string(name='CheckResult'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CheckSensitiveResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckSensitiveResponseBody(name='body'),
}

async function checkSensitiveWithOptions(request: CheckSensitiveRequest, runtime: Util.RuntimeOptions): CheckSensitiveResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckSensitive',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkSensitive(request: CheckSensitiveRequest): CheckSensitiveResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkSensitiveWithOptions(request, runtime);
}

model ConfirmConfigurationOrderRequest {
  aliyunKp?: string(name='AliyunKp'),
  aliyunKpLong?: long(name='AliyunKpLong'),
  bid?: string(name='Bid'),
  callerParentId?: long(name='CallerParentId'),
  callerSecurityTransport?: boolean(name='CallerSecurityTransport'),
  callerType?: string(name='CallerType'),
  clientIp?: string(name='ClientIp'),
  configurationId?: long(name='ConfigurationId'),
  lang?: string(name='Lang'),
  mfaPresent?: boolean(name='MfaPresent'),
  originalRequest?: string(name='OriginalRequest'),
  popAction?: string(name='PopAction'),
  proxyCallerIp?: string(name='ProxyCallerIp'),
  proxyCallerSecurityTransport?: boolean(name='ProxyCallerSecurityTransport'),
  proxyTrustTransportInfo?: boolean(name='ProxyTrustTransportInfo'),
  requestId?: string(name='RequestId'),
  securityToken?: string(name='SecurityToken'),
  stsTokenCallerBid?: long(name='StsTokenCallerBid'),
  stsTokenCallerUid?: long(name='StsTokenCallerUid'),
  userBid?: string(name='UserBid'),
  userCallerParentId?: long(name='UserCallerParentId'),
  userCallerSecurityTransport?: boolean(name='UserCallerSecurityTransport'),
  userCallerType?: string(name='UserCallerType'),
  userClientIp?: string(name='UserClientIp'),
  userKp?: string(name='UserKp'),
  userMfaPresent?: boolean(name='UserMfaPresent'),
  userSecurityToken?: string(name='UserSecurityToken'),
}

model ConfirmConfigurationOrderResponseBody = {
  data?: [ long ](name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ConfirmConfigurationOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConfirmConfigurationOrderResponseBody(name='body'),
}

async function confirmConfigurationOrderWithOptions(request: ConfirmConfigurationOrderRequest, runtime: Util.RuntimeOptions): ConfirmConfigurationOrderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliyunKp)) {
    query['AliyunKp'] = request.aliyunKp;
  }
  if (!Util.isUnset(request.aliyunKpLong)) {
    query['AliyunKpLong'] = request.aliyunKpLong;
  }
  if (!Util.isUnset(request.bid)) {
    query['Bid'] = request.bid;
  }
  if (!Util.isUnset(request.callerParentId)) {
    query['CallerParentId'] = request.callerParentId;
  }
  if (!Util.isUnset(request.callerSecurityTransport)) {
    query['CallerSecurityTransport'] = request.callerSecurityTransport;
  }
  if (!Util.isUnset(request.callerType)) {
    query['CallerType'] = request.callerType;
  }
  if (!Util.isUnset(request.clientIp)) {
    query['ClientIp'] = request.clientIp;
  }
  if (!Util.isUnset(request.configurationId)) {
    query['ConfigurationId'] = request.configurationId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.mfaPresent)) {
    query['MfaPresent'] = request.mfaPresent;
  }
  if (!Util.isUnset(request.originalRequest)) {
    query['OriginalRequest'] = request.originalRequest;
  }
  if (!Util.isUnset(request.popAction)) {
    query['PopAction'] = request.popAction;
  }
  if (!Util.isUnset(request.proxyCallerIp)) {
    query['ProxyCallerIp'] = request.proxyCallerIp;
  }
  if (!Util.isUnset(request.proxyCallerSecurityTransport)) {
    query['ProxyCallerSecurityTransport'] = request.proxyCallerSecurityTransport;
  }
  if (!Util.isUnset(request.proxyTrustTransportInfo)) {
    query['ProxyTrustTransportInfo'] = request.proxyTrustTransportInfo;
  }
  if (!Util.isUnset(request.requestId)) {
    query['RequestId'] = request.requestId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stsTokenCallerBid)) {
    query['StsTokenCallerBid'] = request.stsTokenCallerBid;
  }
  if (!Util.isUnset(request.stsTokenCallerUid)) {
    query['StsTokenCallerUid'] = request.stsTokenCallerUid;
  }
  if (!Util.isUnset(request.userBid)) {
    query['UserBid'] = request.userBid;
  }
  if (!Util.isUnset(request.userCallerParentId)) {
    query['UserCallerParentId'] = request.userCallerParentId;
  }
  if (!Util.isUnset(request.userCallerSecurityTransport)) {
    query['UserCallerSecurityTransport'] = request.userCallerSecurityTransport;
  }
  if (!Util.isUnset(request.userCallerType)) {
    query['UserCallerType'] = request.userCallerType;
  }
  if (!Util.isUnset(request.userClientIp)) {
    query['UserClientIp'] = request.userClientIp;
  }
  if (!Util.isUnset(request.userKp)) {
    query['UserKp'] = request.userKp;
  }
  if (!Util.isUnset(request.userMfaPresent)) {
    query['UserMfaPresent'] = request.userMfaPresent;
  }
  if (!Util.isUnset(request.userSecurityToken)) {
    query['UserSecurityToken'] = request.userSecurityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ConfirmConfigurationOrder',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function confirmConfigurationOrder(request: ConfirmConfigurationOrderRequest): ConfirmConfigurationOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return confirmConfigurationOrderWithOptions(request, runtime);
}

model CreateCommodityOrderRequest {
  bizType?: string(name='BizType'),
  chargeType?: string(name='ChargeType'),
  clientToken?: string(name='ClientToken'),
  commodityCode?: string(name='CommodityCode'),
  components?: map[string]any(name='Components'),
  duration?: int32(name='Duration'),
  instanceId?: string(name='InstanceId'),
  orderParams?: map[string]any(name='OrderParams'),
  orderType?: string(name='OrderType'),
  pricingCycle?: string(name='PricingCycle'),
  quantity?: int32(name='Quantity'),
  specCode?: string(name='SpecCode'),
}

model CreateCommodityOrderShrinkRequest {
  bizType?: string(name='BizType'),
  chargeType?: string(name='ChargeType'),
  clientToken?: string(name='ClientToken'),
  commodityCode?: string(name='CommodityCode'),
  componentsShrink?: string(name='Components'),
  duration?: int32(name='Duration'),
  instanceId?: string(name='InstanceId'),
  orderParamsShrink?: string(name='OrderParams'),
  orderType?: string(name='OrderType'),
  pricingCycle?: string(name='PricingCycle'),
  quantity?: int32(name='Quantity'),
  specCode?: string(name='SpecCode'),
}

model CreateCommodityOrderResponseBody = {
  data?: [ string ](name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateCommodityOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCommodityOrderResponseBody(name='body'),
}

async function createCommodityOrderWithOptions(tmpReq: CreateCommodityOrderRequest, runtime: Util.RuntimeOptions): CreateCommodityOrderResponse {
  Util.validateModel(tmpReq);
  var request = new CreateCommodityOrderShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.components)) {
    request.componentsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.components, 'Components', 'json');
  }
  if (!Util.isUnset(tmpReq.orderParams)) {
    request.orderParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.orderParams, 'OrderParams', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.commodityCode)) {
    query['CommodityCode'] = request.commodityCode;
  }
  if (!Util.isUnset(request.componentsShrink)) {
    query['Components'] = request.componentsShrink;
  }
  if (!Util.isUnset(request.duration)) {
    query['Duration'] = request.duration;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.orderParamsShrink)) {
    query['OrderParams'] = request.orderParamsShrink;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.pricingCycle)) {
    query['PricingCycle'] = request.pricingCycle;
  }
  if (!Util.isUnset(request.quantity)) {
    query['Quantity'] = request.quantity;
  }
  if (!Util.isUnset(request.specCode)) {
    query['SpecCode'] = request.specCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCommodityOrder',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCommodityOrder(request: CreateCommodityOrderRequest): CreateCommodityOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCommodityOrderWithOptions(request, runtime);
}

model CreateConfigurationOrderRequest {
  aliyunKp?: string(name='AliyunKp'),
  aliyunKpLong?: long(name='AliyunKpLong'),
  bid?: string(name='Bid'),
  callerParentId?: long(name='CallerParentId'),
  callerSecurityTransport?: boolean(name='CallerSecurityTransport'),
  callerType?: string(name='CallerType'),
  clientIp?: string(name='ClientIp'),
  items?: string(name='Items'),
  lang?: string(name='Lang'),
  mfaPresent?: boolean(name='MfaPresent'),
  originalRequest?: string(name='OriginalRequest'),
  packageId?: long(name='PackageId'),
  popAction?: string(name='PopAction'),
  proxyCallerIp?: string(name='ProxyCallerIp'),
  proxyCallerSecurityTransport?: boolean(name='ProxyCallerSecurityTransport'),
  proxyTrustTransportInfo?: boolean(name='ProxyTrustTransportInfo'),
  requestId?: string(name='RequestId'),
  securityToken?: string(name='SecurityToken'),
  stsTokenCallerBid?: long(name='StsTokenCallerBid'),
  stsTokenCallerUid?: long(name='StsTokenCallerUid'),
  systemCall?: boolean(name='SystemCall'),
  userAccessKeyId?: string(name='UserAccessKeyId'),
  userBid?: string(name='UserBid'),
  userCallerParentId?: long(name='UserCallerParentId'),
  userCallerSecurityTransport?: boolean(name='UserCallerSecurityTransport'),
  userCallerType?: string(name='UserCallerType'),
  userClientIp?: string(name='UserClientIp'),
  userKp?: string(name='UserKp'),
  userMfaPresent?: boolean(name='UserMfaPresent'),
  userSecurityToken?: string(name='UserSecurityToken'),
}

model CreateConfigurationOrderResponseBody = {
  data?: long(name='Data'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateConfigurationOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateConfigurationOrderResponseBody(name='body'),
}

async function createConfigurationOrderWithOptions(request: CreateConfigurationOrderRequest, runtime: Util.RuntimeOptions): CreateConfigurationOrderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliyunKp)) {
    query['AliyunKp'] = request.aliyunKp;
  }
  if (!Util.isUnset(request.aliyunKpLong)) {
    query['AliyunKpLong'] = request.aliyunKpLong;
  }
  if (!Util.isUnset(request.bid)) {
    query['Bid'] = request.bid;
  }
  if (!Util.isUnset(request.callerParentId)) {
    query['CallerParentId'] = request.callerParentId;
  }
  if (!Util.isUnset(request.callerSecurityTransport)) {
    query['CallerSecurityTransport'] = request.callerSecurityTransport;
  }
  if (!Util.isUnset(request.callerType)) {
    query['CallerType'] = request.callerType;
  }
  if (!Util.isUnset(request.clientIp)) {
    query['ClientIp'] = request.clientIp;
  }
  if (!Util.isUnset(request.items)) {
    query['Items'] = request.items;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.mfaPresent)) {
    query['MfaPresent'] = request.mfaPresent;
  }
  if (!Util.isUnset(request.originalRequest)) {
    query['OriginalRequest'] = request.originalRequest;
  }
  if (!Util.isUnset(request.packageId)) {
    query['PackageId'] = request.packageId;
  }
  if (!Util.isUnset(request.popAction)) {
    query['PopAction'] = request.popAction;
  }
  if (!Util.isUnset(request.proxyCallerIp)) {
    query['ProxyCallerIp'] = request.proxyCallerIp;
  }
  if (!Util.isUnset(request.proxyCallerSecurityTransport)) {
    query['ProxyCallerSecurityTransport'] = request.proxyCallerSecurityTransport;
  }
  if (!Util.isUnset(request.proxyTrustTransportInfo)) {
    query['ProxyTrustTransportInfo'] = request.proxyTrustTransportInfo;
  }
  if (!Util.isUnset(request.requestId)) {
    query['RequestId'] = request.requestId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stsTokenCallerBid)) {
    query['StsTokenCallerBid'] = request.stsTokenCallerBid;
  }
  if (!Util.isUnset(request.stsTokenCallerUid)) {
    query['StsTokenCallerUid'] = request.stsTokenCallerUid;
  }
  if (!Util.isUnset(request.systemCall)) {
    query['SystemCall'] = request.systemCall;
  }
  if (!Util.isUnset(request.userAccessKeyId)) {
    query['UserAccessKeyId'] = request.userAccessKeyId;
  }
  if (!Util.isUnset(request.userBid)) {
    query['UserBid'] = request.userBid;
  }
  if (!Util.isUnset(request.userCallerParentId)) {
    query['UserCallerParentId'] = request.userCallerParentId;
  }
  if (!Util.isUnset(request.userCallerSecurityTransport)) {
    query['UserCallerSecurityTransport'] = request.userCallerSecurityTransport;
  }
  if (!Util.isUnset(request.userCallerType)) {
    query['UserCallerType'] = request.userCallerType;
  }
  if (!Util.isUnset(request.userClientIp)) {
    query['UserClientIp'] = request.userClientIp;
  }
  if (!Util.isUnset(request.userKp)) {
    query['UserKp'] = request.userKp;
  }
  if (!Util.isUnset(request.userMfaPresent)) {
    query['UserMfaPresent'] = request.userMfaPresent;
  }
  if (!Util.isUnset(request.userSecurityToken)) {
    query['UserSecurityToken'] = request.userSecurityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateConfigurationOrder',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createConfigurationOrder(request: CreateConfigurationOrderRequest): CreateConfigurationOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createConfigurationOrderWithOptions(request, runtime);
}

model CreateImageOrderRequest {
  autoRenew?: string(name='AutoRenew'),
  buyerType?: string(name='BuyerType'),
  channel?: string(name='Channel'),
  contactName?: string(name='ContactName'),
  contactNumber?: string(name='ContactNumber'),
  goodsId?: string(name='GoodsId'),
  instanceId?: string(name='InstanceId'),
  orderType?: string(name='OrderType'),
  specificationName?: string(name='SpecificationName'),
  token?: string(name='Token'),
  type?: string(name='Type'),
}

model CreateImageOrderResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateImageOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateImageOrderResponseBody(name='body'),
}

async function createImageOrderWithOptions(request: CreateImageOrderRequest, runtime: Util.RuntimeOptions): CreateImageOrderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoRenew)) {
    query['AutoRenew'] = request.autoRenew;
  }
  if (!Util.isUnset(request.buyerType)) {
    query['BuyerType'] = request.buyerType;
  }
  if (!Util.isUnset(request.channel)) {
    query['Channel'] = request.channel;
  }
  if (!Util.isUnset(request.contactName)) {
    query['ContactName'] = request.contactName;
  }
  if (!Util.isUnset(request.contactNumber)) {
    query['ContactNumber'] = request.contactNumber;
  }
  if (!Util.isUnset(request.goodsId)) {
    query['GoodsId'] = request.goodsId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.specificationName)) {
    query['SpecificationName'] = request.specificationName;
  }
  if (!Util.isUnset(request.token)) {
    query['Token'] = request.token;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateImageOrder',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createImageOrder(request: CreateImageOrderRequest): CreateImageOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createImageOrderWithOptions(request, runtime);
}

model CreateInventoryLockRequest {
  goodsId?: string(name='GoodsId'),
  userId?: string(name='UserId'),
}

model CreateInventoryLockResponseBody = {
  requestId?: string(name='RequestId'),
  status?: boolean(name='Status'),
  success?: boolean(name='Success'),
}

model CreateInventoryLockResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateInventoryLockResponseBody(name='body'),
}

async function createInventoryLockWithOptions(request: CreateInventoryLockRequest, runtime: Util.RuntimeOptions): CreateInventoryLockResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.goodsId)) {
    query['GoodsId'] = request.goodsId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateInventoryLock',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createInventoryLock(request: CreateInventoryLockRequest): CreateInventoryLockResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInventoryLockWithOptions(request, runtime);
}

model DeleteUserCollectionRequest {
  bizType?: string(name='BizType'),
  unitId?: string(name='UnitId'),
  userId?: string(name='UserId'),
}

model DeleteUserCollectionResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  status?: boolean(name='Status'),
  success?: boolean(name='Success'),
}

model DeleteUserCollectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteUserCollectionResponseBody(name='body'),
}

async function deleteUserCollectionWithOptions(request: DeleteUserCollectionRequest, runtime: Util.RuntimeOptions): DeleteUserCollectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!Util.isUnset(request.unitId)) {
    query['UnitId'] = request.unitId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteUserCollection',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteUserCollection(request: DeleteUserCollectionRequest): DeleteUserCollectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteUserCollectionWithOptions(request, runtime);
}

model DescribeDownloadImageInfoRequest {
  bizId?: string(name='BizId'),
  downloadType?: string(name='DownloadType'),
  imageId?: string(name='ImageId'),
  imageUserBuyId?: long(name='ImageUserBuyId'),
  specificationName?: string(name='SpecificationName'),
}

model DescribeDownloadImageInfoResponseBody = {
  authorizationUrl?: string(name='AuthorizationUrl'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  imageUrl?: string(name='ImageUrl'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDownloadImageInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDownloadImageInfoResponseBody(name='body'),
}

async function describeDownloadImageInfoWithOptions(request: DescribeDownloadImageInfoRequest, runtime: Util.RuntimeOptions): DescribeDownloadImageInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizId)) {
    query['BizId'] = request.bizId;
  }
  if (!Util.isUnset(request.downloadType)) {
    query['DownloadType'] = request.downloadType;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.imageUserBuyId)) {
    query['ImageUserBuyId'] = request.imageUserBuyId;
  }
  if (!Util.isUnset(request.specificationName)) {
    query['SpecificationName'] = request.specificationName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDownloadImageInfo',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDownloadImageInfo(request: DescribeDownloadImageInfoRequest): DescribeDownloadImageInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDownloadImageInfoWithOptions(request, runtime);
}

model DescribeIndustryListResponseBody = {
  data?: [ 
    {
      description?: string(name='Description'),
      industryId?: string(name='IndustryId'),
      name?: string(name='Name'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeIndustryListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeIndustryListResponseBody(name='body'),
}

async function describeIndustryListWithOptions(runtime: Util.RuntimeOptions): DescribeIndustryListResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeIndustryList',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeIndustryList(): DescribeIndustryListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeIndustryListWithOptions(runtime);
}

model DescribeLogoRequest {
  goodsId?: string(name='GoodsId'),
  userId?: string(name='UserId'),
}

model DescribeLogoResponseBody = {
  brandName?: string(name='BrandName'),
  colorDescription?: string(name='ColorDescription'),
  colorOne?: string(name='ColorOne'),
  colorThree?: string(name='ColorThree'),
  colorTwo?: string(name='ColorTwo'),
  fontDescription?: string(name='FontDescription'),
  images?: [ string ](name='Images'),
  namePath?: string(name='NamePath'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeLogoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLogoResponseBody(name='body'),
}

async function describeLogoWithOptions(request: DescribeLogoRequest, runtime: Util.RuntimeOptions): DescribeLogoResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLogo',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeLogo(request: DescribeLogoRequest): DescribeLogoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLogoWithOptions(request, runtime);
}

model DescribePartnerConfigRequest {
  bizType?: string(name='BizType'),
  partnerCode?: string(name='PartnerCode'),
}

model DescribePartnerConfigResponseBody = {
  contact?: string(name='Contact'),
  partnerCode?: string(name='PartnerCode'),
  partnerName?: string(name='PartnerName'),
  requestId?: string(name='RequestId'),
}

model DescribePartnerConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePartnerConfigResponseBody(name='body'),
}

async function describePartnerConfigWithOptions(request: DescribePartnerConfigRequest, runtime: Util.RuntimeOptions): DescribePartnerConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!Util.isUnset(request.partnerCode)) {
    query['PartnerCode'] = request.partnerCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePartnerConfig',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePartnerConfig(request: DescribePartnerConfigRequest): DescribePartnerConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePartnerConfigWithOptions(request, runtime);
}

model DescribePolicyRequest {
  bizType?: string(name='BizType'),
  fileType?: string(name='FileType'),
}

model DescribePolicyResponseBody = {
  accessId?: string(name='AccessId'),
  encodedPolicy?: string(name='EncodedPolicy'),
  expireTime?: long(name='ExpireTime'),
  fileDir?: string(name='FileDir'),
  host?: string(name='Host'),
  requestId?: string(name='RequestId'),
  signature?: string(name='Signature'),
}

model DescribePolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePolicyResponseBody(name='body'),
}

async function describePolicyWithOptions(request: DescribePolicyRequest, runtime: Util.RuntimeOptions): DescribePolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!Util.isUnset(request.fileType)) {
    query['FileType'] = request.fileType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePolicy',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePolicy(request: DescribePolicyRequest): DescribePolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePolicyWithOptions(request, runtime);
}

model DescribeUserProduceRequest {
  bizId?: string(name='BizId'),
  bizType?: string(name='BizType'),
}

model DescribeUserProduceResponseBody = {
  bizId?: string(name='BizId'),
  bizType?: string(name='BizType'),
  endTime?: string(name='EndTime'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  extInfo?: string(name='ExtInfo'),
  intentionBizId?: string(name='IntentionBizId'),
  orderId?: string(name='OrderId'),
  orderInstanceId?: string(name='OrderInstanceId'),
  orderPrice?: string(name='OrderPrice'),
  partnerCode?: string(name='PartnerCode'),
  requestId?: string(name='RequestId'),
  solutionBizId?: string(name='SolutionBizId'),
  startTime?: string(name='StartTime'),
  status?: int32(name='Status'),
  success?: boolean(name='Success'),
  userId?: string(name='UserId'),
}

model DescribeUserProduceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserProduceResponseBody(name='body'),
}

async function describeUserProduceWithOptions(request: DescribeUserProduceRequest, runtime: Util.RuntimeOptions): DescribeUserProduceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizId)) {
    query['BizId'] = request.bizId;
  }
  if (!Util.isUnset(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserProduce',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUserProduce(request: DescribeUserProduceRequest): DescribeUserProduceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserProduceWithOptions(request, runtime);
}

model GetLogoFontListRequest {
  type?: string(name='Type'),
}

model GetLogoFontListResponseBody = {
  fonts?: [ 
    {
      fontId?: string(name='FontId'),
      image?: string(name='Image'),
      name?: string(name='Name'),
    }
  ](name='Fonts'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetLogoFontListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetLogoFontListResponseBody(name='body'),
}

async function getLogoFontListWithOptions(request: GetLogoFontListRequest, runtime: Util.RuntimeOptions): GetLogoFontListResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetLogoFontList',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getLogoFontList(request: GetLogoFontListRequest): GetLogoFontListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLogoFontListWithOptions(request, runtime);
}

model GetLogoImageRequest {
  goodsId?: string(name='GoodsId'),
}

model GetLogoImageResponseBody = {
  goodsId?: string(name='GoodsId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  url?: string(name='Url'),
}

model GetLogoImageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetLogoImageResponseBody(name='body'),
}

async function getLogoImageWithOptions(request: GetLogoImageRequest, runtime: Util.RuntimeOptions): GetLogoImageResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetLogoImage',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getLogoImage(request: GetLogoImageRequest): GetLogoImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLogoImageWithOptions(request, runtime);
}

model GetProduceInfoRequest {
  goodsId?: string(name='GoodsId'),
}

model GetProduceInfoResponseBody = {
  bizId?: string(name='BizId'),
  goodsId?: string(name='GoodsId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetProduceInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetProduceInfoResponseBody(name='body'),
}

async function getProduceInfoWithOptions(request: GetProduceInfoRequest, runtime: Util.RuntimeOptions): GetProduceInfoResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetProduceInfo',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getProduceInfo(request: GetProduceInfoRequest): GetProduceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getProduceInfoWithOptions(request, runtime);
}

model GetTemplateCategoriesRequest {
  parentId?: long(name='ParentId'),
  recursive?: boolean(name='Recursive'),
  status?: string(name='Status'),
}

model GetTemplateCategoriesResponseBody = {
  allowRetry?: boolean(name='AllowRetry'),
  appName?: string(name='AppName'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  module?: map[string]any(name='Module'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetTemplateCategoriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTemplateCategoriesResponseBody(name='body'),
}

async function getTemplateCategoriesWithOptions(request: GetTemplateCategoriesRequest, runtime: Util.RuntimeOptions): GetTemplateCategoriesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTemplateCategories',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTemplateCategories(request: GetTemplateCategoriesRequest): GetTemplateCategoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTemplateCategoriesWithOptions(request, runtime);
}

model GetTextLogoListRequest {
  brandName?: string(name='BrandName'),
  fontId?: string(name='FontId'),
}

model GetTextLogoListResponseBody = {
  logoVersion?: string(name='LogoVersion'),
  logos?: [ 
    {
      goodsId?: string(name='GoodsId'),
      url?: string(name='Url'),
    }
  ](name='Logos'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetTextLogoListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTextLogoListResponseBody(name='body'),
}

async function getTextLogoListWithOptions(request: GetTextLogoListRequest, runtime: Util.RuntimeOptions): GetTextLogoListResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTextLogoList',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTextLogoList(request: GetTextLogoListRequest): GetTextLogoListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTextLogoListWithOptions(request, runtime);
}

model ListDesignRequest {
  designType?: string(name='DesignType'),
  designVersion?: string(name='DesignVersion'),
  extInfo?: string(name='ExtInfo'),
  pageSize?: int32(name='PageSize'),
}

model ListDesignResponseBody = {
  data?: [ 
    {
      goodsId?: string(name='GoodsId'),
      templates?: [ 
        {
          previewUrl?: string(name='PreviewUrl'),
          templateId?: string(name='TemplateId'),
        }
      ](name='Templates'),
    }
  ](name='Data'),
  designVersion?: string(name='DesignVersion'),
  end?: int32(name='End'),
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  version?: string(name='Version'),
}

model ListDesignResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDesignResponseBody(name='body'),
}

async function listDesignWithOptions(request: ListDesignRequest, runtime: Util.RuntimeOptions): ListDesignResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.designType)) {
    query['DesignType'] = request.designType;
  }
  if (!Util.isUnset(request.designVersion)) {
    query['DesignVersion'] = request.designVersion;
  }
  if (!Util.isUnset(request.extInfo)) {
    query['ExtInfo'] = request.extInfo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDesign',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDesign(request: ListDesignRequest): ListDesignResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDesignWithOptions(request, runtime);
}

model ListLogoSamplesRequest {
  goodsId?: string(name='GoodsId'),
  page?: int32(name='Page'),
  userId?: string(name='UserId'),
}

model ListLogoSamplesResponseBody = {
  images?: [ string ](name='Images'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListLogoSamplesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListLogoSamplesResponseBody(name='body'),
}

async function listLogoSamplesWithOptions(request: ListLogoSamplesRequest, runtime: Util.RuntimeOptions): ListLogoSamplesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListLogoSamples',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listLogoSamples(request: ListLogoSamplesRequest): ListLogoSamplesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLogoSamplesWithOptions(request, runtime);
}

model ListLogosRequest {
  brandName?: string(name='BrandName'),
  description?: string(name='Description'),
  industryId?: string(name='IndustryId'),
  industryName?: string(name='IndustryName'),
  logoVersion?: string(name='LogoVersion'),
  page?: int32(name='Page'),
  slogan?: string(name='Slogan'),
  type?: string(name='Type'),
  userId?: string(name='UserId'),
}

model ListLogosResponseBody = {
  data?: [ 
    {
      collect?: int32(name='Collect'),
      goodsId?: string(name='GoodsId'),
      url?: string(name='Url'),
    }
  ](name='Data'),
  logoVersion?: string(name='LogoVersion'),
  nextPage?: int32(name='NextPage'),
  pageNumber?: int32(name='PageNumber'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  version?: string(name='Version'),
}

model ListLogosResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListLogosResponseBody(name='body'),
}

async function listLogosWithOptions(request: ListLogosRequest, runtime: Util.RuntimeOptions): ListLogosResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListLogos',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listLogos(request: ListLogosRequest): ListLogosResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLogosWithOptions(request, runtime);
}

model ListUserCollectionsRequest {
  bizType?: string(name='BizType'),
  pageNum?: int32(name='PageNum'),
  pageSize?: long(name='PageSize'),
}

model ListUserCollectionsResponseBody = {
  data?: [ 
    {
      image?: string(name='Image'),
      unitId?: string(name='UnitId'),
      unitName?: string(name='UnitName'),
      extend?: string(name='extend'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model ListUserCollectionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUserCollectionsResponseBody(name='body'),
}

async function listUserCollectionsWithOptions(request: ListUserCollectionsRequest, runtime: Util.RuntimeOptions): ListUserCollectionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListUserCollections',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listUserCollections(request: ListUserCollectionsRequest): ListUserCollectionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUserCollectionsWithOptions(request, runtime);
}

model ListUserProduceOperateLogsRequest {
  bizId?: string(name='BizId'),
  bizType?: string(name='BizType'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
}

model ListUserProduceOperateLogsResponseBody = {
  data?: [ 
    {
      bizId?: string(name='BizId'),
      bizType?: string(name='BizType'),
      operateName?: string(name='OperateName'),
      operateTime?: long(name='OperateTime'),
      operateUserType?: string(name='OperateUserType'),
    }
  ](name='Data'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalItemNum?: int32(name='TotalItemNum'),
  totalPageNum?: int32(name='TotalPageNum'),
}

model ListUserProduceOperateLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUserProduceOperateLogsResponseBody(name='body'),
}

async function listUserProduceOperateLogsWithOptions(request: ListUserProduceOperateLogsRequest, runtime: Util.RuntimeOptions): ListUserProduceOperateLogsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizId)) {
    query['BizId'] = request.bizId;
  }
  if (!Util.isUnset(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListUserProduceOperateLogs',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listUserProduceOperateLogs(request: ListUserProduceOperateLogsRequest): ListUserProduceOperateLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUserProduceOperateLogsWithOptions(request, runtime);
}

model ListUserProducesRequest {
  bizId?: string(name='BizId'),
  bizType?: string(name='BizType'),
  extCondition?: string(name='ExtCondition'),
  intentionBizId?: string(name='IntentionBizId'),
  orderId?: string(name='OrderId'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  solutionBizId?: string(name='SolutionBizId'),
  sortParam?: string(name='SortParam'),
  status?: int32(name='Status'),
}

model ListUserProducesResponseBody = {
  data?: [ 
    {
      bizId?: string(name='BizId'),
      bizType?: string(name='BizType'),
      extInfo?: string(name='ExtInfo'),
      intentionBizId?: string(name='IntentionBizId'),
      modifyTime?: string(name='ModifyTime'),
      orderId?: string(name='OrderId'),
      orderInstanceId?: string(name='OrderInstanceId'),
      orderPrice?: string(name='OrderPrice'),
      orderTime?: string(name='OrderTime'),
      partnerCode?: string(name='PartnerCode'),
      solutionBizId?: string(name='SolutionBizId'),
      status?: int32(name='Status'),
      userId?: string(name='UserId'),
    }
  ](name='Data'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalItemNum?: int32(name='TotalItemNum'),
  totalPageNum?: int32(name='TotalPageNum'),
}

model ListUserProducesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUserProducesResponseBody(name='body'),
}

async function listUserProducesWithOptions(request: ListUserProducesRequest, runtime: Util.RuntimeOptions): ListUserProducesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizId)) {
    query['BizId'] = request.bizId;
  }
  if (!Util.isUnset(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!Util.isUnset(request.extCondition)) {
    query['ExtCondition'] = request.extCondition;
  }
  if (!Util.isUnset(request.intentionBizId)) {
    query['IntentionBizId'] = request.intentionBizId;
  }
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.solutionBizId)) {
    query['SolutionBizId'] = request.solutionBizId;
  }
  if (!Util.isUnset(request.sortParam)) {
    query['SortParam'] = request.sortParam;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListUserProduces',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listUserProduces(request: ListUserProducesRequest): ListUserProducesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUserProducesWithOptions(request, runtime);
}

model OperateProduceForPartnerRequest {
  bizId?: string(name='BizId'),
  bizType?: string(name='BizType'),
  extInfo?: string(name='ExtInfo'),
  operateType?: string(name='OperateType'),
}

model OperateProduceForPartnerResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model OperateProduceForPartnerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OperateProduceForPartnerResponseBody(name='body'),
}

async function operateProduceForPartnerWithOptions(request: OperateProduceForPartnerRequest, runtime: Util.RuntimeOptions): OperateProduceForPartnerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizId)) {
    query['BizId'] = request.bizId;
  }
  if (!Util.isUnset(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!Util.isUnset(request.extInfo)) {
    query['ExtInfo'] = request.extInfo;
  }
  if (!Util.isUnset(request.operateType)) {
    query['OperateType'] = request.operateType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OperateProduceForPartner',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function operateProduceForPartner(request: OperateProduceForPartnerRequest): OperateProduceForPartnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return operateProduceForPartnerWithOptions(request, runtime);
}

model OperateProduceForUserRequest {
  bizId?: string(name='BizId'),
  bizType?: string(name='BizType'),
  extInfo?: string(name='ExtInfo'),
  operateType?: string(name='OperateType'),
}

model OperateProduceForUserResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model OperateProduceForUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OperateProduceForUserResponseBody(name='body'),
}

async function operateProduceForUserWithOptions(request: OperateProduceForUserRequest, runtime: Util.RuntimeOptions): OperateProduceForUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizId)) {
    query['BizId'] = request.bizId;
  }
  if (!Util.isUnset(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!Util.isUnset(request.extInfo)) {
    query['ExtInfo'] = request.extInfo;
  }
  if (!Util.isUnset(request.operateType)) {
    query['OperateType'] = request.operateType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OperateProduceForUser',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function operateProduceForUser(request: OperateProduceForUserRequest): OperateProduceForUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return operateProduceForUserWithOptions(request, runtime);
}

model QueryBarrelImageListRequest {
  barrel?: string(name='Barrel'),
  pageSize?: int32(name='PageSize'),
  startId?: long(name='StartId'),
}

model QueryBarrelImageListResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  hasNext?: boolean(name='HasNext'),
  images?: [ 
    {
      bigImage?: string(name='BigImage'),
      buy?: boolean(name='Buy'),
      imageId?: string(name='ImageId'),
      midImage?: string(name='MidImage'),
      smallImage?: string(name='SmallImage'),
      specifications?: [ 
        {
          height?: int32(name='Height'),
          id?: long(name='Id'),
          imageId?: string(name='ImageId'),
          name?: string(name='Name'),
          price?: string(name='Price'),
          suffix?: string(name='Suffix'),
          width?: int32(name='Width'),
        }
      ](name='Specifications'),
      tag?: string(name='Tag'),
      title?: string(name='Title'),
    }
  ](name='Images'),
  nextId?: int32(name='NextId'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryBarrelImageListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryBarrelImageListResponseBody(name='body'),
}

async function queryBarrelImageListWithOptions(request: QueryBarrelImageListRequest, runtime: Util.RuntimeOptions): QueryBarrelImageListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.barrel)) {
    query['Barrel'] = request.barrel;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startId)) {
    query['StartId'] = request.startId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryBarrelImageList',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryBarrelImageList(request: QueryBarrelImageListRequest): QueryBarrelImageListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryBarrelImageListWithOptions(request, runtime);
}

model QueryConfigurationOrderRequest {
  aliyunKp?: string(name='AliyunKp'),
  aliyunKpLong?: long(name='AliyunKpLong'),
  bid?: string(name='Bid'),
  callerParentId?: long(name='CallerParentId'),
  callerSecurityTransport?: boolean(name='CallerSecurityTransport'),
  callerType?: string(name='CallerType'),
  clientIp?: string(name='ClientIp'),
  configurationId?: long(name='ConfigurationId'),
  lang?: string(name='Lang'),
  mfaPresent?: boolean(name='MfaPresent'),
  originalRequest?: string(name='OriginalRequest'),
  popAction?: string(name='PopAction'),
  proxyCallerIp?: string(name='ProxyCallerIp'),
  proxyCallerSecurityTransport?: boolean(name='ProxyCallerSecurityTransport'),
  proxyTrustTransportInfo?: boolean(name='ProxyTrustTransportInfo'),
  requestId?: string(name='RequestId'),
  securityToken?: string(name='SecurityToken'),
  stsTokenCallerBid?: long(name='StsTokenCallerBid'),
  stsTokenCallerUid?: long(name='StsTokenCallerUid'),
  userBid?: string(name='UserBid'),
  userCallerParentId?: long(name='UserCallerParentId'),
  userCallerSecurityTransport?: boolean(name='UserCallerSecurityTransport'),
  userCallerType?: string(name='UserCallerType'),
  userClientIp?: string(name='UserClientIp'),
  userKp?: string(name='UserKp'),
  userMfaPresent?: boolean(name='UserMfaPresent'),
  userSecurityToken?: string(name='UserSecurityToken'),
}

model QueryConfigurationOrderResponseBody = {
  data?: string(name='Data'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryConfigurationOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryConfigurationOrderResponseBody(name='body'),
}

async function queryConfigurationOrderWithOptions(request: QueryConfigurationOrderRequest, runtime: Util.RuntimeOptions): QueryConfigurationOrderResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryConfigurationOrder',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryConfigurationOrder(request: QueryConfigurationOrderRequest): QueryConfigurationOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryConfigurationOrderWithOptions(request, runtime);
}

model SubmitIntentionRequest {
  area?: string(name='Area'),
  bizType?: string(name='BizType'),
  channel?: string(name='Channel'),
  commodityType?: string(name='CommodityType'),
  contactName?: string(name='ContactName'),
  description?: string(name='Description'),
  extInfo?: string(name='ExtInfo'),
  mobile?: string(name='Mobile'),
  token?: string(name='Token'),
  vcode?: string(name='Vcode'),
}

model SubmitIntentionResponseBody = {
  errorMsg?: string(name='ErrorMsg'),
  intentionBizId?: string(name='IntentionBizId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SubmitIntentionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitIntentionResponseBody(name='body'),
}

async function submitIntentionWithOptions(request: SubmitIntentionRequest, runtime: Util.RuntimeOptions): SubmitIntentionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.area)) {
    query['Area'] = request.area;
  }
  if (!Util.isUnset(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!Util.isUnset(request.channel)) {
    query['Channel'] = request.channel;
  }
  if (!Util.isUnset(request.commodityType)) {
    query['CommodityType'] = request.commodityType;
  }
  if (!Util.isUnset(request.contactName)) {
    query['ContactName'] = request.contactName;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.extInfo)) {
    query['ExtInfo'] = request.extInfo;
  }
  if (!Util.isUnset(request.mobile)) {
    query['Mobile'] = request.mobile;
  }
  if (!Util.isUnset(request.token)) {
    query['Token'] = request.token;
  }
  if (!Util.isUnset(request.vcode)) {
    query['Vcode'] = request.vcode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitIntention',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitIntention(request: SubmitIntentionRequest): SubmitIntentionResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitIntentionWithOptions(request, runtime);
}

