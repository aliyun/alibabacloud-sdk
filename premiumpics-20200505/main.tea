/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  
  checkConfig(config);
  @endpoint = getEndpoint('premiumpics', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddUserCollectionRequest {
  bizType?: string(name='BizType', description='BizType', example='esp.logo'),
  unitId?: string(name='UnitId', example='b8db6c243481b5c6661b11c2f9163499'),
  unitName?: string(name='UnitName'),
}

model AddUserCollectionResponseBody = {
  errorCode?: string(name='ErrorCode', example='200'),
  errorMsg?: string(name='ErrorMsg', example='Success. Request Success.'),
  requestId?: string(name='RequestId', example='A5225329-2A0D-52DC-888F-35BAE1C6B421'),
  status?: boolean(name='Status', example='True'),
  success?: boolean(name='Success', example='True'),
}

model AddUserCollectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddUserCollectionResponseBody(name='body'),
}

async function addUserCollectionWithOptions(request: AddUserCollectionRequest, runtime: Util.RuntimeOptions): AddUserCollectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!Util.isUnset(request.unitId)) {
    query['UnitId'] = request.unitId;
  }
  if (!Util.isUnset(request.unitName)) {
    query['UnitName'] = request.unitName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddUserCollection',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addUserCollection(request: AddUserCollectionRequest): AddUserCollectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return addUserCollectionWithOptions(request, runtime);
}

model CheckSensitiveRequest {
  content?: string(name='Content'),
}

model CheckSensitiveResponseBody = {
  checkMessage?: string(name='CheckMessage', example='MnsServiceNotEnabled'),
  checkResult?: string(name='CheckResult', example='True'),
  requestId?: string(name='RequestId', example='4A89FD37-CAAB-5B31-A789-D073A5445578'),
  success?: boolean(name='Success', example='True'),
}

model CheckSensitiveResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckSensitiveResponseBody(name='body'),
}

async function checkSensitiveWithOptions(request: CheckSensitiveRequest, runtime: Util.RuntimeOptions): CheckSensitiveResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckSensitive',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkSensitive(request: CheckSensitiveRequest): CheckSensitiveResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkSensitiveWithOptions(request, runtime);
}

model ConfirmConfigurationOrderRequest {
  aliyunKp?: string(name='AliyunKp', description='aliyunKp', example='123'),
  aliyunKpLong?: long(name='AliyunKpLong', description='aliyunKpLong', example='123'),
  bid?: string(name='Bid', description='bid', example='26842'),
  callerParentId?: long(name='CallerParentId', description='callerParentId', example='1654319633766437'),
  callerSecurityTransport?: boolean(name='CallerSecurityTransport', description='callerSecurityTransport', example='123'),
  callerType?: string(name='CallerType', description='callerType', example='product'),
  clientIp?: string(name='ClientIp', description='clientIp', example='121.69.40.14'),
  configurationId?: long(name='ConfigurationId', description='configurationId', example='f86b33a0b6bbefd9f44db95c30df0cd2'),
  lang?: string(name='Lang', description='lang', example='zh'),
  mfaPresent?: boolean(name='MfaPresent', description='mfaPresent', example='true'),
  originalRequest?: string(name='OriginalRequest', description='originalRequest', example='123'),
  popAction?: string(name='PopAction', description='popAction', example='QuerySmsPackage'),
  proxyCallerIp?: string(name='ProxyCallerIp', description='proxyCallerIp', example='123'),
  proxyCallerSecurityTransport?: boolean(name='ProxyCallerSecurityTransport', description='proxyCallerSecurityTransport', example='123'),
  proxyTrustTransportInfo?: boolean(name='ProxyTrustTransportInfo', description='proxyTrustTransportInfo', example='123'),
  requestId?: string(name='RequestId', description='requestId', example='E5CD23E6-2EF2-563F-B38B-F49AF089B028'),
  securityToken?: string(name='SecurityToken'),
  stsTokenCallerBid?: long(name='StsTokenCallerBid', description='stsTokenCallerBid', example='123'),
  stsTokenCallerUid?: long(name='StsTokenCallerUid', description='stsTokenCallerUid', example='123'),
  userBid?: string(name='UserBid', description='userBid', example='122'),
  userCallerParentId?: long(name='UserCallerParentId', description='userCallerParentId', example='244'),
  userCallerSecurityTransport?: boolean(name='UserCallerSecurityTransport', description='userCallerSecurityTransport', example='234'),
  userCallerType?: string(name='UserCallerType', description='userCallerType', example='345'),
  userClientIp?: string(name='UserClientIp', description='userClientIp', example='345'),
  userKp?: string(name='UserKp', description='userKp', example='123'),
  userMfaPresent?: boolean(name='UserMfaPresent', description='userMfaPresent', example='123'),
  userSecurityToken?: string(name='UserSecurityToken', description='userSecurityToken', example='234'),
}

model ConfirmConfigurationOrderResponseBody = {
  data?: [ long ](name='Data', description='module'),
  errorCode?: string(name='ErrorCode', description='errorCode', example='AppManage.ExecuteFileMissing'),
  errorMsg?: string(name='ErrorMsg', description='errorMsg', example='ok'),
  requestId?: string(name='RequestId', description='requestId', example='4E739D67-5A59-5BC0-93F8-E76F9AC85617'),
  success?: boolean(name='Success', description='success', example='True'),
}

model ConfirmConfigurationOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConfirmConfigurationOrderResponseBody(name='body'),
}

async function confirmConfigurationOrderWithOptions(request: ConfirmConfigurationOrderRequest, runtime: Util.RuntimeOptions): ConfirmConfigurationOrderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliyunKp)) {
    query['AliyunKp'] = request.aliyunKp;
  }
  if (!Util.isUnset(request.aliyunKpLong)) {
    query['AliyunKpLong'] = request.aliyunKpLong;
  }
  if (!Util.isUnset(request.bid)) {
    query['Bid'] = request.bid;
  }
  if (!Util.isUnset(request.callerParentId)) {
    query['CallerParentId'] = request.callerParentId;
  }
  if (!Util.isUnset(request.callerSecurityTransport)) {
    query['CallerSecurityTransport'] = request.callerSecurityTransport;
  }
  if (!Util.isUnset(request.callerType)) {
    query['CallerType'] = request.callerType;
  }
  if (!Util.isUnset(request.clientIp)) {
    query['ClientIp'] = request.clientIp;
  }
  if (!Util.isUnset(request.configurationId)) {
    query['ConfigurationId'] = request.configurationId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.mfaPresent)) {
    query['MfaPresent'] = request.mfaPresent;
  }
  if (!Util.isUnset(request.originalRequest)) {
    query['OriginalRequest'] = request.originalRequest;
  }
  if (!Util.isUnset(request.popAction)) {
    query['PopAction'] = request.popAction;
  }
  if (!Util.isUnset(request.proxyCallerIp)) {
    query['ProxyCallerIp'] = request.proxyCallerIp;
  }
  if (!Util.isUnset(request.proxyCallerSecurityTransport)) {
    query['ProxyCallerSecurityTransport'] = request.proxyCallerSecurityTransport;
  }
  if (!Util.isUnset(request.proxyTrustTransportInfo)) {
    query['ProxyTrustTransportInfo'] = request.proxyTrustTransportInfo;
  }
  if (!Util.isUnset(request.requestId)) {
    query['RequestId'] = request.requestId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stsTokenCallerBid)) {
    query['StsTokenCallerBid'] = request.stsTokenCallerBid;
  }
  if (!Util.isUnset(request.stsTokenCallerUid)) {
    query['StsTokenCallerUid'] = request.stsTokenCallerUid;
  }
  if (!Util.isUnset(request.userBid)) {
    query['UserBid'] = request.userBid;
  }
  if (!Util.isUnset(request.userCallerParentId)) {
    query['UserCallerParentId'] = request.userCallerParentId;
  }
  if (!Util.isUnset(request.userCallerSecurityTransport)) {
    query['UserCallerSecurityTransport'] = request.userCallerSecurityTransport;
  }
  if (!Util.isUnset(request.userCallerType)) {
    query['UserCallerType'] = request.userCallerType;
  }
  if (!Util.isUnset(request.userClientIp)) {
    query['UserClientIp'] = request.userClientIp;
  }
  if (!Util.isUnset(request.userKp)) {
    query['UserKp'] = request.userKp;
  }
  if (!Util.isUnset(request.userMfaPresent)) {
    query['UserMfaPresent'] = request.userMfaPresent;
  }
  if (!Util.isUnset(request.userSecurityToken)) {
    query['UserSecurityToken'] = request.userSecurityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ConfirmConfigurationOrder',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function confirmConfigurationOrder(request: ConfirmConfigurationOrderRequest): ConfirmConfigurationOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return confirmConfigurationOrderWithOptions(request, runtime);
}

model CreateCommodityOrderRequest {
  bizType?: string(name='BizType', description='BizType', example='esp.logo'),
  chargeType?: string(name='ChargeType', example='PrePaid'),
  clientToken?: string(name='ClientToken', example='bvt-UpdateSecurityPolicyAttribute-821f6e26d4c539561b472a32956200'),
  commodityCode?: string(name='CommodityCode', example='dbaudit'),
  components?: map[string]any(name='Components'),
  duration?: int32(name='Duration', example='4420'),
  instanceId?: string(name='InstanceId', example='waf_elasticity-cn-zvp2bvnkq04n'),
  orderParams?: map[string]any(name='OrderParams'),
  orderType?: string(name='OrderType', example='RENEW'),
  pricingCycle?: string(name='PricingCycle', example='Month'),
  quantity?: int32(name='Quantity', example='1'),
  specCode?: string(name='SpecCode', example='103'),
}

model CreateCommodityOrderShrinkRequest {
  bizType?: string(name='BizType', description='BizType', example='esp.logo'),
  chargeType?: string(name='ChargeType', example='PrePaid'),
  clientToken?: string(name='ClientToken', example='bvt-UpdateSecurityPolicyAttribute-821f6e26d4c539561b472a32956200'),
  commodityCode?: string(name='CommodityCode', example='dbaudit'),
  componentsShrink?: string(name='Components'),
  duration?: int32(name='Duration', example='4420'),
  instanceId?: string(name='InstanceId', example='waf_elasticity-cn-zvp2bvnkq04n'),
  orderParamsShrink?: string(name='OrderParams'),
  orderType?: string(name='OrderType', example='RENEW'),
  pricingCycle?: string(name='PricingCycle', example='Month'),
  quantity?: int32(name='Quantity', example='1'),
  specCode?: string(name='SpecCode', example='103'),
}

model CreateCommodityOrderResponseBody = {
  data?: [ string ](name='Data'),
  requestId?: string(name='RequestId', example='D50C9922-4547-58F7-B2BD-040D9798D53D'),
  success?: boolean(name='Success', example='True'),
}

model CreateCommodityOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCommodityOrderResponseBody(name='body'),
}

async function createCommodityOrderWithOptions(tmpReq: CreateCommodityOrderRequest, runtime: Util.RuntimeOptions): CreateCommodityOrderResponse {
  Util.validateModel(tmpReq);
  var request = new CreateCommodityOrderShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.components)) {
    request.componentsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.components, 'Components', 'json');
  }
  if (!Util.isUnset(tmpReq.orderParams)) {
    request.orderParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.orderParams, 'OrderParams', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.commodityCode)) {
    query['CommodityCode'] = request.commodityCode;
  }
  if (!Util.isUnset(request.componentsShrink)) {
    query['Components'] = request.componentsShrink;
  }
  if (!Util.isUnset(request.duration)) {
    query['Duration'] = request.duration;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.orderParamsShrink)) {
    query['OrderParams'] = request.orderParamsShrink;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.pricingCycle)) {
    query['PricingCycle'] = request.pricingCycle;
  }
  if (!Util.isUnset(request.quantity)) {
    query['Quantity'] = request.quantity;
  }
  if (!Util.isUnset(request.specCode)) {
    query['SpecCode'] = request.specCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCommodityOrder',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCommodityOrder(request: CreateCommodityOrderRequest): CreateCommodityOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCommodityOrderWithOptions(request, runtime);
}

model CreateConfigurationOrderRequest {
  aliyunKp?: string(name='AliyunKp', description='aliyunKp', example='123'),
  aliyunKpLong?: long(name='AliyunKpLong', description='aliyunKpLong', example='123'),
  bid?: string(name='Bid', description='bid', example='26888'),
  callerParentId?: long(name='CallerParentId', description='callerParentId', example='1703411985821693'),
  callerSecurityTransport?: boolean(name='CallerSecurityTransport', description='callerSecurityTransport', example='123'),
  callerType?: string(name='CallerType', description='callerType', example='acl'),
  clientIp?: string(name='ClientIp', description='clientIp', example='100.104.16.254:51166'),
  items?: string(name='Items', description='items', example='{\\"Backup\\": []}'),
  lang?: string(name='Lang', description='lang', example='zh'),
  mfaPresent?: boolean(name='MfaPresent', description='mfaPresent', example='false'),
  originalRequest?: string(name='OriginalRequest', description='originalRequest', example='123'),
  packageId?: long(name='PackageId', description='packageId', example='1008349'),
  popAction?: string(name='PopAction', description='popAction', example='QuerySmsBaseScreen'),
  proxyCallerIp?: string(name='ProxyCallerIp', description='proxyCallerIp', example='123'),
  proxyCallerSecurityTransport?: boolean(name='ProxyCallerSecurityTransport', description='proxyCallerSecurityTransport', example='123'),
  proxyTrustTransportInfo?: boolean(name='ProxyTrustTransportInfo', description='proxyTrustTransportInfo', example='123'),
  requestId?: string(name='RequestId', description='requestId', example='22DEBAC0-C46E-52C1-87F8-0378AE238063'),
  securityToken?: string(name='SecurityToken'),
  stsTokenCallerBid?: long(name='StsTokenCallerBid', description='stsTokenCallerBid', example='123'),
  stsTokenCallerUid?: long(name='StsTokenCallerUid', description='stsTokenCallerUid', example='123'),
  systemCall?: boolean(name='SystemCall', description='systemCall', example='true'),
  userAccessKeyId?: string(name='UserAccessKeyId', description='userAccessKeyId', example='123'),
  userBid?: string(name='UserBid', description='userBid', example='123'),
  userCallerParentId?: long(name='UserCallerParentId', description='userCallerParentId', example='123'),
  userCallerSecurityTransport?: boolean(name='UserCallerSecurityTransport', description='userCallerSecurityTransport', example='123'),
  userCallerType?: string(name='UserCallerType', description='userCallerType', example='123'),
  userClientIp?: string(name='UserClientIp', description='userClientIp', example='123'),
  userKp?: string(name='UserKp', description='userKp', example='123'),
  userMfaPresent?: boolean(name='UserMfaPresent', description='userMfaPresent', example='123'),
  userSecurityToken?: string(name='UserSecurityToken', description='userSecurityToken', example='123'),
}

model CreateConfigurationOrderResponseBody = {
  data?: long(name='Data', description='module', example='[]'),
  errorMsg?: string(name='ErrorMsg', description='errorMsg', example='Not Found'),
  requestId?: string(name='RequestId', description='requestId', example='B4736F94-D0E5-5D26-A5C4-1988CA68AFC9'),
  success?: boolean(name='Success', description='success', example='True'),
}

model CreateConfigurationOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateConfigurationOrderResponseBody(name='body'),
}

async function createConfigurationOrderWithOptions(request: CreateConfigurationOrderRequest, runtime: Util.RuntimeOptions): CreateConfigurationOrderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliyunKp)) {
    query['AliyunKp'] = request.aliyunKp;
  }
  if (!Util.isUnset(request.aliyunKpLong)) {
    query['AliyunKpLong'] = request.aliyunKpLong;
  }
  if (!Util.isUnset(request.bid)) {
    query['Bid'] = request.bid;
  }
  if (!Util.isUnset(request.callerParentId)) {
    query['CallerParentId'] = request.callerParentId;
  }
  if (!Util.isUnset(request.callerSecurityTransport)) {
    query['CallerSecurityTransport'] = request.callerSecurityTransport;
  }
  if (!Util.isUnset(request.callerType)) {
    query['CallerType'] = request.callerType;
  }
  if (!Util.isUnset(request.clientIp)) {
    query['ClientIp'] = request.clientIp;
  }
  if (!Util.isUnset(request.items)) {
    query['Items'] = request.items;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.mfaPresent)) {
    query['MfaPresent'] = request.mfaPresent;
  }
  if (!Util.isUnset(request.originalRequest)) {
    query['OriginalRequest'] = request.originalRequest;
  }
  if (!Util.isUnset(request.packageId)) {
    query['PackageId'] = request.packageId;
  }
  if (!Util.isUnset(request.popAction)) {
    query['PopAction'] = request.popAction;
  }
  if (!Util.isUnset(request.proxyCallerIp)) {
    query['ProxyCallerIp'] = request.proxyCallerIp;
  }
  if (!Util.isUnset(request.proxyCallerSecurityTransport)) {
    query['ProxyCallerSecurityTransport'] = request.proxyCallerSecurityTransport;
  }
  if (!Util.isUnset(request.proxyTrustTransportInfo)) {
    query['ProxyTrustTransportInfo'] = request.proxyTrustTransportInfo;
  }
  if (!Util.isUnset(request.requestId)) {
    query['RequestId'] = request.requestId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stsTokenCallerBid)) {
    query['StsTokenCallerBid'] = request.stsTokenCallerBid;
  }
  if (!Util.isUnset(request.stsTokenCallerUid)) {
    query['StsTokenCallerUid'] = request.stsTokenCallerUid;
  }
  if (!Util.isUnset(request.systemCall)) {
    query['SystemCall'] = request.systemCall;
  }
  if (!Util.isUnset(request.userAccessKeyId)) {
    query['UserAccessKeyId'] = request.userAccessKeyId;
  }
  if (!Util.isUnset(request.userBid)) {
    query['UserBid'] = request.userBid;
  }
  if (!Util.isUnset(request.userCallerParentId)) {
    query['UserCallerParentId'] = request.userCallerParentId;
  }
  if (!Util.isUnset(request.userCallerSecurityTransport)) {
    query['UserCallerSecurityTransport'] = request.userCallerSecurityTransport;
  }
  if (!Util.isUnset(request.userCallerType)) {
    query['UserCallerType'] = request.userCallerType;
  }
  if (!Util.isUnset(request.userClientIp)) {
    query['UserClientIp'] = request.userClientIp;
  }
  if (!Util.isUnset(request.userKp)) {
    query['UserKp'] = request.userKp;
  }
  if (!Util.isUnset(request.userMfaPresent)) {
    query['UserMfaPresent'] = request.userMfaPresent;
  }
  if (!Util.isUnset(request.userSecurityToken)) {
    query['UserSecurityToken'] = request.userSecurityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateConfigurationOrder',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createConfigurationOrder(request: CreateConfigurationOrderRequest): CreateConfigurationOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createConfigurationOrderWithOptions(request, runtime);
}

model CreateImageOrderRequest {
  autoRenew?: string(name='AutoRenew', example='true'),
  buyerType?: string(name='BuyerType', example='1'),
  channel?: string(name='Channel', example='6'),
  contactName?: string(name='ContactName'),
  contactNumber?: string(name='ContactNumber', example='17603034177'),
  goodsId?: string(name='GoodsId', example='0da9332a7e46bf3a3648322cc4cefe55'),
  instanceId?: string(name='InstanceId', example='waf-cn-2r427peet48'),
  orderType?: string(name='OrderType', example='SINGLE'),
  specificationName?: string(name='SpecificationName'),
  token?: string(name='Token', example='74aed3df801b1abeea70604eae4c777a'),
  type?: string(name='Type', description='type', example='A'),
}

model CreateImageOrderResponseBody = {
  errorCode?: string(name='ErrorCode', example='0'),
  errorMsg?: string(name='ErrorMsg', description='errorMsg', example='{&quot;ErrMsg&quot;:&quot;Right angle correction failed!&quot;,&quot;ErrCode&quot;:&quot;5002&quot;}'),
  orderId?: string(name='OrderId', example='216992253670473'),
  requestId?: string(name='RequestId', example='FF882F7C-BF8D-5DCC-9F63-93A5BA36FD9F'),
  success?: boolean(name='Success', example='True'),
}

model CreateImageOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateImageOrderResponseBody(name='body'),
}

async function createImageOrderWithOptions(request: CreateImageOrderRequest, runtime: Util.RuntimeOptions): CreateImageOrderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoRenew)) {
    query['AutoRenew'] = request.autoRenew;
  }
  if (!Util.isUnset(request.buyerType)) {
    query['BuyerType'] = request.buyerType;
  }
  if (!Util.isUnset(request.channel)) {
    query['Channel'] = request.channel;
  }
  if (!Util.isUnset(request.contactName)) {
    query['ContactName'] = request.contactName;
  }
  if (!Util.isUnset(request.contactNumber)) {
    query['ContactNumber'] = request.contactNumber;
  }
  if (!Util.isUnset(request.goodsId)) {
    query['GoodsId'] = request.goodsId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.specificationName)) {
    query['SpecificationName'] = request.specificationName;
  }
  if (!Util.isUnset(request.token)) {
    query['Token'] = request.token;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateImageOrder',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createImageOrder(request: CreateImageOrderRequest): CreateImageOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createImageOrderWithOptions(request, runtime);
}

model CreateInventoryLockRequest {
  goodsId?: string(name='GoodsId', example='acf5c3c5fa4358ae158263d6b7cce2e9'),
  userId?: string(name='UserId', description='UserId', example='UserId'),
}

model CreateInventoryLockResponseBody = {
  requestId?: string(name='RequestId', example='4A89FD37-CAAB-5B31-A789-D073A5445578'),
  status?: boolean(name='Status', description='status', example='True'),
  success?: boolean(name='Success', example='True'),
}

model CreateInventoryLockResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateInventoryLockResponseBody(name='body'),
}

async function createInventoryLockWithOptions(request: CreateInventoryLockRequest, runtime: Util.RuntimeOptions): CreateInventoryLockResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.goodsId)) {
    query['GoodsId'] = request.goodsId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateInventoryLock',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createInventoryLock(request: CreateInventoryLockRequest): CreateInventoryLockResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInventoryLockWithOptions(request, runtime);
}

model DeleteUserCollectionRequest {
  bizType?: string(name='BizType', description='BizType', example='esp.logo'),
  unitId?: string(name='UnitId', example='2c5d68e067f84c99b33def98f30d26d4'),
  userId?: string(name='UserId', description='userid', example='userid'),
}

model DeleteUserCollectionResponseBody = {
  errorCode?: string(name='ErrorCode', example='0'),
  errorMsg?: string(name='ErrorMsg', description='errorMsg', example='dabukai dabukaidabukaidabukai'),
  requestId?: string(name='RequestId', example='AEA9CED1-57F2-5E33-A86A-427D46E7EBF7'),
  status?: boolean(name='Status', description='status', example='True'),
  success?: boolean(name='Success', example='True'),
}

model DeleteUserCollectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteUserCollectionResponseBody(name='body'),
}

async function deleteUserCollectionWithOptions(request: DeleteUserCollectionRequest, runtime: Util.RuntimeOptions): DeleteUserCollectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!Util.isUnset(request.unitId)) {
    query['UnitId'] = request.unitId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteUserCollection',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteUserCollection(request: DeleteUserCollectionRequest): DeleteUserCollectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteUserCollectionWithOptions(request, runtime);
}

model DescribeDownloadImageInfoRequest {
  bizId?: string(name='BizId', example='P20220627101248000001'),
  downloadType?: string(name='DownloadType', example='2'),
  imageId?: string(name='ImageId', example='h5568374035170305'),
  imageUserBuyId?: long(name='ImageUserBuyId', description='ImageUserBuyId', example='ImageUserBuyId'),
  specificationName?: string(name='SpecificationName'),
}

model DescribeDownloadImageInfoResponseBody = {
  authorizationUrl?: string(name='AuthorizationUrl', example='http'),
  errorCode?: string(name='ErrorCode', example='sae.errorcode.ServiceDisabled.message'),
  errorMsg?: string(name='ErrorMsg', description='errorMsg', example='Success. Request Success.'),
  imageUrl?: string(name='ImageUrl', example='dsw-registry-vpc.cn-shenzhen.cr.aliyuncs.com/cloud-dsw-user/users:u1135620889978899-8589-20220922110432'),
  requestId?: string(name='RequestId', example='047CE3B4-32EE-5AB9-89C8-BCEC23A5B4F4'),
  success?: boolean(name='Success', example='True'),
}

model DescribeDownloadImageInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDownloadImageInfoResponseBody(name='body'),
}

async function describeDownloadImageInfoWithOptions(request: DescribeDownloadImageInfoRequest, runtime: Util.RuntimeOptions): DescribeDownloadImageInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizId)) {
    query['BizId'] = request.bizId;
  }
  if (!Util.isUnset(request.downloadType)) {
    query['DownloadType'] = request.downloadType;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.imageUserBuyId)) {
    query['ImageUserBuyId'] = request.imageUserBuyId;
  }
  if (!Util.isUnset(request.specificationName)) {
    query['SpecificationName'] = request.specificationName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDownloadImageInfo',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDownloadImageInfo(request: DescribeDownloadImageInfoRequest): DescribeDownloadImageInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDownloadImageInfoWithOptions(request, runtime);
}

model DescribeIndustryListResponseBody = {
  data?: [ 
    {
      description?: string(name='Description'),
      industryId?: string(name='IndustryId', example='21'),
      name?: string(name='Name'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='2653A619-5539-50C3-8120-1594A3B758DD'),
  success?: boolean(name='Success', example='True'),
}

model DescribeIndustryListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeIndustryListResponseBody(name='body'),
}

async function describeIndustryListWithOptions(runtime: Util.RuntimeOptions): DescribeIndustryListResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeIndustryList',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeIndustryList(): DescribeIndustryListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeIndustryListWithOptions(runtime);
}

model DescribeLogoRequest {
  goodsId?: string(name='GoodsId', example='a4dbb263d80f4362bbc8305deacf2499'),
  userId?: string(name='UserId', description='userId', example='userId'),
}

model DescribeLogoResponseBody = {
  brandName?: string(name='BrandName'),
  colorDescription?: string(name='ColorDescription'),
  colorOne?: string(name='ColorOne'),
  colorThree?: string(name='ColorThree', example='red'),
  colorTwo?: string(name='ColorTwo'),
  fontDescription?: string(name='FontDescription', example='FontDescription'),
  images?: [ string ](name='Images'),
  namePath?: string(name='NamePath', example='path'),
  requestId?: string(name='RequestId', example='0FDB7AA6-CEA2-5948-B930-A01F5266D90E'),
  success?: boolean(name='Success', example='True'),
}

model DescribeLogoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLogoResponseBody(name='body'),
}

async function describeLogoWithOptions(request: DescribeLogoRequest, runtime: Util.RuntimeOptions): DescribeLogoResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLogo',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeLogo(request: DescribeLogoRequest): DescribeLogoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLogoWithOptions(request, runtime);
}

model DescribePartnerConfigRequest {
  bizType?: string(name='BizType', description='BizType', example='esp.logo'),
  partnerCode?: string(name='PartnerCode', example='luokeke'),
}

model DescribePartnerConfigResponseBody = {
  contact?: string(name='Contact', example='aaa'),
  partnerCode?: string(name='PartnerCode', example='luokeke'),
  partnerName?: string(name='PartnerName'),
  requestId?: string(name='RequestId', example='3B7E24E8-33C1-5C62-9EDF-1743C060E038'),
}

model DescribePartnerConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePartnerConfigResponseBody(name='body'),
}

async function describePartnerConfigWithOptions(request: DescribePartnerConfigRequest, runtime: Util.RuntimeOptions): DescribePartnerConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!Util.isUnset(request.partnerCode)) {
    query['PartnerCode'] = request.partnerCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePartnerConfig',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePartnerConfig(request: DescribePartnerConfigRequest): DescribePartnerConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePartnerConfigWithOptions(request, runtime);
}

model DescribePolicyRequest {
  bizType?: string(name='BizType', description='BizType', example='esp.logo'),
  fileType?: string(name='FileType', example='design'),
}

model DescribePolicyResponseBody = {
  accessId?: string(name='AccessId', example='LTAIAOUYgRDRcA7g'),
  encodedPolicy?: string(name='EncodedPolicy', example='eyJleHBpcmF0aW9uIjoiMjAyMi0xMS0wMlQxMDoxOTowMS44NjJaIiwiY29uZGl0aW9ucyI6W1siZXEiLCIka2V5IiwiNzc0MF8xNDcyMTUyMjY3OTI2MDYwXzg2ZTdkODZlZDk2MDQ2NWM4YWZiMTVjMWQ3ODExMzc5Il1dfQ=='),
  expireTime?: long(name='ExpireTime', example='1640314850225'),
  fileDir?: string(name='FileDir', example='design/design/1998855314930043/1667528047548'),
  host?: string(name='Host', example='rm-uf6kek7cfqn3095zy.mysql.rds.aliyuncs.com'),
  requestId?: string(name='RequestId', example='F7D17E93-12E9-5DB6-9BE3-821FC8C63EDD'),
  signature?: string(name='Signature', example='TSoPHNjbvr+cYzPAiQFf0K5ZiCU='),
}

model DescribePolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePolicyResponseBody(name='body'),
}

async function describePolicyWithOptions(request: DescribePolicyRequest, runtime: Util.RuntimeOptions): DescribePolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!Util.isUnset(request.fileType)) {
    query['FileType'] = request.fileType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePolicy',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePolicy(request: DescribePolicyRequest): DescribePolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePolicyWithOptions(request, runtime);
}

model DescribeUserProduceRequest {
  bizId?: string(name='BizId', example='P20220731142346000001'),
  bizType?: string(name='BizType', description='BizType', example='esp.logo'),
}

model DescribeUserProduceResponseBody = {
  bizId?: string(name='BizId', example='P20220713180339000001'),
  bizType?: string(name='BizType', description='BizType', example='esp.logo'),
  endTime?: string(name='EndTime', example='2022-08-24 10:53:00'),
  errorCode?: string(name='ErrorCode', example='sae.errorcode.ServiceDisabled.message'),
  errorMsg?: string(name='ErrorMsg', example='111111111111111'),
  extInfo?: string(name='ExtInfo', example='{\\"designFileUrl\\":\\"https:\\\\/\\\\/oss.smalld.cn\\\\/zip\\\\/svg\\\\/20220519\\\\/3e63365c-f7d9-4fa6-9d38-413262fbf4c7.zip\\"}'),
  intentionBizId?: string(name='IntentionBizId', example='I20221129122203000001'),
  orderId?: string(name='OrderId', example='216992253670473'),
  orderInstanceId?: string(name='OrderInstanceId', example='swcopyright_swRegNormal_public_cn-tl32wr9giwy'),
  orderPrice?: string(name='OrderPrice', example='1899.00'),
  partnerCode?: string(name='PartnerCode', example='luokeke'),
  requestId?: string(name='RequestId', example='1B0A9A68-5A1A-5179-8591-0463F4686EEB'),
  solutionBizId?: string(name='SolutionBizId', example='S20220624105026000001'),
  startTime?: string(name='StartTime', example='2022-10-16T06:35:00Z'),
  status?: int32(name='Status', example='40'),
  success?: boolean(name='Success', example='True'),
  userId?: string(name='UserId', description='UserId', example='UserId'),
}

model DescribeUserProduceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserProduceResponseBody(name='body'),
}

async function describeUserProduceWithOptions(request: DescribeUserProduceRequest, runtime: Util.RuntimeOptions): DescribeUserProduceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizId)) {
    query['BizId'] = request.bizId;
  }
  if (!Util.isUnset(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserProduce',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUserProduce(request: DescribeUserProduceRequest): DescribeUserProduceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserProduceWithOptions(request, runtime);
}

model GetLogoFontListRequest {
  type?: string(name='Type', description='type', example='brand'),
}

model GetLogoFontListResponseBody = {
  fonts?: [ 
    {
      fontId?: string(name='FontId', example='dfs'),
      image?: string(name='Image', example='18622562726'),
      name?: string(name='Name', example='MyFamily'),
    }
  ](name='Fonts'),
  requestId?: string(name='RequestId', example='8F007088-FD52-596E-8688-D7AE887D8329'),
  success?: boolean(name='Success', example='True'),
}

model GetLogoFontListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetLogoFontListResponseBody(name='body'),
}

async function getLogoFontListWithOptions(request: GetLogoFontListRequest, runtime: Util.RuntimeOptions): GetLogoFontListResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetLogoFontList',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getLogoFontList(request: GetLogoFontListRequest): GetLogoFontListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLogoFontListWithOptions(request, runtime);
}

model GetLogoImageRequest {
  goodsId?: string(name='GoodsId', example='26d876ab1d765adfc81b7a478e4d4261'),
}

model GetLogoImageResponseBody = {
  goodsId?: string(name='GoodsId', example='c8de36707f47437c86114552f7d9bddd'),
  requestId?: string(name='RequestId', example='934BDF0A-DA15-53AD-BB41-A78F4DD685E9'),
  success?: boolean(name='Success', example='True'),
  url?: string(name='Url', example='http://bird.alibaba-inc.com/'),
}

model GetLogoImageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetLogoImageResponseBody(name='body'),
}

async function getLogoImageWithOptions(request: GetLogoImageRequest, runtime: Util.RuntimeOptions): GetLogoImageResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetLogoImage',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getLogoImage(request: GetLogoImageRequest): GetLogoImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLogoImageWithOptions(request, runtime);
}

model GetProduceInfoRequest {
  goodsId?: string(name='GoodsId', example='94e51c6930d24f0b88f2a4f5066089c7'),
}

model GetProduceInfoResponseBody = {
  bizId?: string(name='BizId', example='P20220531100052000001'),
  goodsId?: string(name='GoodsId', example='6c1ccb5f26794d16bb13330fa84c86c7'),
  requestId?: string(name='RequestId', example='55534AD0-F8E2-5114-BB52-72150A499DEB'),
  success?: boolean(name='Success', example='True'),
}

model GetProduceInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetProduceInfoResponseBody(name='body'),
}

async function getProduceInfoWithOptions(request: GetProduceInfoRequest, runtime: Util.RuntimeOptions): GetProduceInfoResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetProduceInfo',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getProduceInfo(request: GetProduceInfoRequest): GetProduceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getProduceInfoWithOptions(request, runtime);
}

model GetTemplateCategoriesRequest {
  parentId?: long(name='ParentId', example='pc-2ze6x04o5eu444ceg'),
  recursive?: boolean(name='Recursive', example='true'),
  status?: string(name='Status', example='True'),
}

model GetTemplateCategoriesResponseBody = {
  allowRetry?: boolean(name='AllowRetry', description='allowRetry', example='False'),
  appName?: string(name='AppName', description='appName', example='ronghe'),
  errorCode?: string(name='ErrorCode', description='errorCode', example='200'),
  errorMsg?: string(name='ErrorMsg', description='errorMsg', example='{&quot;ErrMsg&quot;:&quot;Right angle correction failed!&quot;,&quot;ErrCode&quot;:&quot;5002&quot;}'),
  module?: map[string]any(name='Module', description='module'),
  requestId?: string(name='RequestId', description='requestId', example='AF0F836D-5E0C-5701-BD55-3DA4C4F29021'),
  success?: boolean(name='Success', description='success', example='True'),
}

model GetTemplateCategoriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTemplateCategoriesResponseBody(name='body'),
}

async function getTemplateCategoriesWithOptions(request: GetTemplateCategoriesRequest, runtime: Util.RuntimeOptions): GetTemplateCategoriesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTemplateCategories',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTemplateCategories(request: GetTemplateCategoriesRequest): GetTemplateCategoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTemplateCategoriesWithOptions(request, runtime);
}

model GetTextLogoListRequest {
  brandName?: string(name='BrandName'),
  fontId?: string(name='FontId', example='dfs'),
}

model GetTextLogoListResponseBody = {
  logoVersion?: string(name='LogoVersion', example='5d6716ceb8cd4370a05e0a0e30f4cb78'),
  logos?: [ 
    {
      goodsId?: string(name='GoodsId', example='812f1855fa8d2b1e31ec2653eebe0702'),
      url?: string(name='Url', example='https://edu.aliyun.com/clouder/gdpr/showResourceAlert?token=fftdXk12sf3dHrp%2BukTT87K%2BDXM%3D'),
    }
  ](name='Logos'),
  requestId?: string(name='RequestId', example='88E0B72B-7EA8-5D8F-BDA5-27A01E0539F4'),
  success?: boolean(name='Success', example='True'),
}

model GetTextLogoListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTextLogoListResponseBody(name='body'),
}

async function getTextLogoListWithOptions(request: GetTextLogoListRequest, runtime: Util.RuntimeOptions): GetTextLogoListResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTextLogoList',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTextLogoList(request: GetTextLogoListRequest): GetTextLogoListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTextLogoListWithOptions(request, runtime);
}

model ListDesignRequest {
  designType?: string(name='DesignType', example='business_card'),
  designVersion?: string(name='DesignVersion', example='47c2f5ff-6c7c-4ef0-b48c-b12e1e996ed6'),
  extInfo?: string(name='ExtInfo', example='{\\"designFileUrl\\":\\"https:\\\\/\\\\/oss.smalld.cn\\\\/zip\\\\/svg\\\\/20220110\\\\/5990f7b0-5cc3-4f9e-8bda-6be44cd82d9c.zip\\"}'),
  pageSize?: int32(name='PageSize', example='10'),
}

model ListDesignResponseBody = {
  data?: [ 
    {
      goodsId?: string(name='GoodsId', example='c87ddbe58afd40ed864d3cab7c8c01b2'),
      templates?: [ 
        {
          previewUrl?: string(name='PreviewUrl', example='https://preview-lyj.aliyuncs.com/preview/36dec4b3530848dc90e128870790fdc4?subSceneIds=219024'),
          templateId?: string(name='TemplateId', example='1320814'),
        }
      ](name='Templates'),
    }
  ](name='Data'),
  designVersion?: string(name='DesignVersion', example='47c2f5ff-6c7c-4ef0-b48c-b12e1e996ed6'),
  end?: int32(name='End', example='True'),
  pageNumber?: int32(name='PageNumber', example='1'),
  requestId?: string(name='RequestId', example='00F97175-FEAA-5E42-B048-952D32E9B881'),
  success?: boolean(name='Success', example='True'),
  version?: string(name='Version', example='2018-12-12'),
}

model ListDesignResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDesignResponseBody(name='body'),
}

async function listDesignWithOptions(request: ListDesignRequest, runtime: Util.RuntimeOptions): ListDesignResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.designType)) {
    query['DesignType'] = request.designType;
  }
  if (!Util.isUnset(request.designVersion)) {
    query['DesignVersion'] = request.designVersion;
  }
  if (!Util.isUnset(request.extInfo)) {
    query['ExtInfo'] = request.extInfo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDesign',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDesign(request: ListDesignRequest): ListDesignResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDesignWithOptions(request, runtime);
}

model ListLogoSamplesRequest {
  goodsId?: string(name='GoodsId', example='e2a520fd3efd46fcb8e2e112b158b246'),
  page?: int32(name='Page', example='1'),
  userId?: string(name='UserId', description='UserId', example='UserId'),
}

model ListLogoSamplesResponseBody = {
  images?: [ string ](name='Images'),
  requestId?: string(name='RequestId', example='526B029B-2A59-5A71-9C22-B01926D80B14'),
  success?: boolean(name='Success', example='True'),
}

model ListLogoSamplesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListLogoSamplesResponseBody(name='body'),
}

async function listLogoSamplesWithOptions(request: ListLogoSamplesRequest, runtime: Util.RuntimeOptions): ListLogoSamplesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListLogoSamples',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listLogoSamples(request: ListLogoSamplesRequest): ListLogoSamplesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLogoSamplesWithOptions(request, runtime);
}

model ListLogosRequest {
  authorityType?: string(name='AuthorityType'),
  brandName?: string(name='BrandName'),
  colorStyle?: string(name='ColorStyle'),
  description?: string(name='Description'),
  fontStyle?: string(name='FontStyle'),
  industryId?: string(name='IndustryId', example='12'),
  industryName?: string(name='IndustryName'),
  logoVersion?: string(name='LogoVersion', example='B2022040710171504189511'),
  page?: int32(name='Page', example='4'),
  slogan?: string(name='Slogan'),
  styleId?: string(name='StyleId'),
  type?: string(name='Type', description='type', example='brand'),
  userId?: string(name='UserId', description='UserId', example='UserId'),
}

model ListLogosResponseBody = {
  data?: [ 
    {
      collect?: int32(name='Collect', example='1'),
      goodsId?: string(name='GoodsId', example='6c1ccb5f26794d16bb13330fa84c86c7'),
      tagId?: int32(name='TagId'),
      url?: string(name='Url', example='https://mcube.mpaas.accelerate.aliyuncs.com/ALIPUBA4BBF1C261233-default/3.0.0.0/ANDROID/app-debug.apk'),
    }
  ](name='Data'),
  logoVersion?: string(name='LogoVersion', example='B2022040710171504189511'),
  nextPage?: int32(name='NextPage', example='2'),
  pageNumber?: int32(name='PageNumber', example='1'),
  requestId?: string(name='RequestId', example='6D61BB02-171C-51D7-8E85-1FC1920F45D4'),
  success?: boolean(name='Success', example='True'),
  version?: string(name='Version', example='2018-05-10'),
}

model ListLogosResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListLogosResponseBody(name='body'),
}

async function listLogosWithOptions(request: ListLogosRequest, runtime: Util.RuntimeOptions): ListLogosResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListLogos',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listLogos(request: ListLogosRequest): ListLogosResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLogosWithOptions(request, runtime);
}

model ListUserCollectionsRequest {
  bizType?: string(name='BizType', example='esp.logo'),
  pageNum?: int32(name='PageNum', example='21'),
  pageSize?: long(name='PageSize', example='1'),
}

model ListUserCollectionsResponseBody = {
  data?: [ 
    {
      image?: string(name='Image', example='https://pre-logo.aliyun.com/logo/image?goodsId=cd6c189cc87842afb5985fa1712dc797&type=png'),
      unitId?: string(name='UnitId', description='id', example='cd6c189cc87842afb5985fa1712dc797'),
      unitName?: string(name='UnitName'),
      extend?: string(name='extend', example='{"cudId":"P20221026203254000001","from":"cud"}'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode', example='123'),
  errorMsg?: string(name='ErrorMsg', example='error'),
  pageNumber?: int32(name='PageNumber', example='3'),
  pageSize?: int32(name='PageSize', example='2'),
  requestId?: string(name='RequestId', description='requestId', example='5AF6352F-7F3E-1325-B717-314BDC5A1311'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', example='20'),
}

model ListUserCollectionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUserCollectionsResponseBody(name='body'),
}

async function listUserCollectionsWithOptions(request: ListUserCollectionsRequest, runtime: Util.RuntimeOptions): ListUserCollectionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListUserCollections',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listUserCollections(request: ListUserCollectionsRequest): ListUserCollectionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUserCollectionsWithOptions(request, runtime);
}

model ListUserProduceOperateLogsRequest {
  bizId?: string(name='BizId', example='P20220428100535000001'),
  bizType?: string(name='BizType', description='BizType', example='esp.logo'),
  pageNum?: int32(name='PageNum', example='3'),
  pageSize?: int32(name='PageSize', example='10'),
}

model ListUserProduceOperateLogsResponseBody = {
  data?: [ 
    {
      bizId?: string(name='BizId', example='P20220722103530000001'),
      bizType?: string(name='BizType', description='BizType', example='esp.logo'),
      operateName?: string(name='OperateName', example='StopOperationScriptInvocation'),
      operateTime?: long(name='OperateTime', example='1662531548'),
      operateUserType?: string(name='OperateUserType', description='OperateUserType', example='OperateUserType'),
    }
  ](name='Data'),
  pageNum?: int32(name='PageNum', example='2'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='DA789D6E-875B-5473-B374-ABA909970BAB'),
  success?: boolean(name='Success', example='True'),
  totalItemNum?: int32(name='TotalItemNum', example='1'),
  totalPageNum?: int32(name='TotalPageNum', example='3'),
}

model ListUserProduceOperateLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUserProduceOperateLogsResponseBody(name='body'),
}

async function listUserProduceOperateLogsWithOptions(request: ListUserProduceOperateLogsRequest, runtime: Util.RuntimeOptions): ListUserProduceOperateLogsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizId)) {
    query['BizId'] = request.bizId;
  }
  if (!Util.isUnset(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListUserProduceOperateLogs',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listUserProduceOperateLogs(request: ListUserProduceOperateLogsRequest): ListUserProduceOperateLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUserProduceOperateLogsWithOptions(request, runtime);
}

model ListUserProducesRequest {
  bizId?: string(name='BizId', example='P20221130182621000001'),
  bizType?: string(name='BizType', description='BizType', example='esp.logo'),
  extCondition?: string(name='ExtCondition', example='{\\"templateName\\":\\"\\"}'),
  intentionBizId?: string(name='IntentionBizId', example='I20221118100626000001'),
  orderId?: string(name='OrderId', example='212011287720705'),
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  solutionBizId?: string(name='SolutionBizId', example='S20220630151319000001'),
  sortParam?: string(name='SortParam', example='{\\"fieldName\\":\\"gmtModified\\",\\"dir\\":\\"DESC\\"}'),
  status?: int32(name='Status', example='40'),
}

model ListUserProducesResponseBody = {
  data?: [ 
    {
      bizId?: string(name='BizId', example='P20220422095728000001'),
      bizType?: string(name='BizType', description='BizType', example='esp.logo'),
      extInfo?: string(name='ExtInfo', example='{\\"designFileUrl\\":\\"https:\\\\/\\\\/oss.smalld.cn\\\\/zip\\\\/svg\\\\/20221115\\\\/105111f9-0ce4-4348-be1b-d88ea19de648.zip\\"}'),
      intentionBizId?: string(name='IntentionBizId', example='I20220927174444000001'),
      modifyTime?: string(name='ModifyTime', example='1639037068811'),
      orderId?: string(name='OrderId', example='1154683179852260'),
      orderInstanceId?: string(name='OrderInstanceId', example='swcopyright_normalReg_public_cn-i7m2mmo710v'),
      orderPrice?: string(name='OrderPrice', example='809.10'),
      orderTime?: string(name='OrderTime', example='2021-12-13 18:03:03'),
      partnerCode?: string(name='PartnerCode', example='luokeke'),
      solutionBizId?: string(name='SolutionBizId', example='S20220928163411000001'),
      status?: int32(name='Status', example='initial'),
      userId?: string(name='UserId', description='UserId', example='UserId'),
    }
  ](name='Data'),
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='30'),
  requestId?: string(name='RequestId', example='03442C19-8708-5E37-B2F2-CB0D2883F453'),
  success?: boolean(name='Success', example='True'),
  totalItemNum?: int32(name='TotalItemNum', example='4'),
  totalPageNum?: int32(name='TotalPageNum', example='3'),
}

model ListUserProducesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUserProducesResponseBody(name='body'),
}

async function listUserProducesWithOptions(request: ListUserProducesRequest, runtime: Util.RuntimeOptions): ListUserProducesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizId)) {
    query['BizId'] = request.bizId;
  }
  if (!Util.isUnset(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!Util.isUnset(request.extCondition)) {
    query['ExtCondition'] = request.extCondition;
  }
  if (!Util.isUnset(request.intentionBizId)) {
    query['IntentionBizId'] = request.intentionBizId;
  }
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.solutionBizId)) {
    query['SolutionBizId'] = request.solutionBizId;
  }
  if (!Util.isUnset(request.sortParam)) {
    query['SortParam'] = request.sortParam;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListUserProduces',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listUserProduces(request: ListUserProducesRequest): ListUserProducesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUserProducesWithOptions(request, runtime);
}

model OperateProduceForPartnerRequest {
  bizId?: string(name='BizId', example='P20220224114917000001'),
  bizType?: string(name='BizType', description='BizType', example='esp.design'),
  extInfo?: string(name='ExtInfo', example='{\\"makingStatus\\":1,\\"expressNumber\\":\\"\\\\u672a\\\\u586b\\\\u5199\\",\\"expressStatus\\":[]}'),
  operateType?: string(name='OperateType', description='OperateType', example='PARTNER_SYNC_STATUS'),
}

model OperateProduceForPartnerResponseBody = {
  errorCode?: string(name='ErrorCode', example='sae.errorcode.ServiceDisabled.message'),
  errorMsg?: string(name='ErrorMsg', example='Not Found'),
  requestId?: string(name='RequestId', example='67F8BCAC-B9C2-57FC-844C-80D5DC34F81D'),
  success?: boolean(name='Success', example='True'),
}

model OperateProduceForPartnerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OperateProduceForPartnerResponseBody(name='body'),
}

async function operateProduceForPartnerWithOptions(request: OperateProduceForPartnerRequest, runtime: Util.RuntimeOptions): OperateProduceForPartnerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizId)) {
    query['BizId'] = request.bizId;
  }
  if (!Util.isUnset(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!Util.isUnset(request.extInfo)) {
    query['ExtInfo'] = request.extInfo;
  }
  if (!Util.isUnset(request.operateType)) {
    query['OperateType'] = request.operateType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OperateProduceForPartner',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function operateProduceForPartner(request: OperateProduceForPartnerRequest): OperateProduceForPartnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return operateProduceForPartnerWithOptions(request, runtime);
}

model OperateProduceForUserRequest {
  bizId?: string(name='BizId', example='P20221110021200000001'),
  bizType?: string(name='BizType', description='BizType', example='esp.logo'),
  extInfo?: string(name='ExtInfo', example='{\\"downloadType\\":\\"normalLogo\\"}'),
  operateType?: string(name='OperateType', example='USER_CONFIRM'),
}

model OperateProduceForUserResponseBody = {
  errorCode?: string(name='ErrorCode', example='0'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId', example='CDCCC923-5BA8-5D38-9B0F-66516448716F'),
  success?: boolean(name='Success', example='True'),
}

model OperateProduceForUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OperateProduceForUserResponseBody(name='body'),
}

async function operateProduceForUserWithOptions(request: OperateProduceForUserRequest, runtime: Util.RuntimeOptions): OperateProduceForUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizId)) {
    query['BizId'] = request.bizId;
  }
  if (!Util.isUnset(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!Util.isUnset(request.extInfo)) {
    query['ExtInfo'] = request.extInfo;
  }
  if (!Util.isUnset(request.operateType)) {
    query['OperateType'] = request.operateType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OperateProduceForUser',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function operateProduceForUser(request: OperateProduceForUserRequest): OperateProduceForUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return operateProduceForUserWithOptions(request, runtime);
}

model QueryBarrelImageListRequest {
  barrel?: string(name='Barrel', description='Barrel', example='caipin'),
  pageSize?: int32(name='PageSize', example='10'),
  startId?: long(name='StartId', example='110941'),
}

model QueryBarrelImageListResponseBody = {
  errorCode?: string(name='ErrorCode', example='0'),
  errorMsg?: string(name='ErrorMsg', example='Success. Request Success.'),
  hasNext?: boolean(name='HasNext', example='False'),
  images?: [ 
    {
      bigImage?: string(name='BigImage'),
      buy?: boolean(name='Buy'),
      imageId?: string(name='ImageId', example='h4548620964041728'),
      midImage?: string(name='MidImage'),
      smallImage?: string(name='SmallImage'),
      specifications?: [ 
        {
          height?: int32(name='Height', example='100'),
          id?: long(name='Id', example='55222'),
          imageId?: string(name='ImageId', description='ID', example='h4604360275725312'),
          name?: string(name='Name', example='authId'),
          price?: string(name='Price', example='300'),
          suffix?: string(name='Suffix', example='jpg'),
          width?: int32(name='Width', example='1'),
        }
      ](name='Specifications'),
      tag?: string(name='Tag', example='v1'),
      title?: string(name='Title'),
    }
  ](name='Images'),
  nextId?: int32(name='NextId', example='51003'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='0FDB7AA6-CEA2-5948-B930-A01F5266D90E'),
  success?: boolean(name='Success', example='True'),
}

model QueryBarrelImageListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryBarrelImageListResponseBody(name='body'),
}

async function queryBarrelImageListWithOptions(request: QueryBarrelImageListRequest, runtime: Util.RuntimeOptions): QueryBarrelImageListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.barrel)) {
    query['Barrel'] = request.barrel;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startId)) {
    query['StartId'] = request.startId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryBarrelImageList',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryBarrelImageList(request: QueryBarrelImageListRequest): QueryBarrelImageListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryBarrelImageListWithOptions(request, runtime);
}

model QueryConfigurationOrderRequest {
  aliyunKp?: string(name='AliyunKp', description='aliyunKp', example='123'),
  aliyunKpLong?: long(name='AliyunKpLong', description='aliyunKpLong', example='123'),
  bid?: string(name='Bid', description='bid', example='26842'),
  callerParentId?: long(name='CallerParentId', description='callerParentId', example='1157703270994901'),
  callerSecurityTransport?: boolean(name='CallerSecurityTransport', description='callerSecurityTransport', example='123'),
  callerType?: string(name='CallerType', description='callerType', example='acl'),
  clientIp?: string(name='ClientIp', description='clientIp', example='1.198.219.249'),
  configurationId?: long(name='ConfigurationId', description='configurationId', example='fbb8b6a3a2f55b816056841e4b85f801'),
  lang?: string(name='Lang', description='lang', example='zh'),
  mfaPresent?: boolean(name='MfaPresent', description='mfaPresent', example='true'),
  originalRequest?: string(name='OriginalRequest', description='originalRequest', example='123'),
  popAction?: string(name='PopAction', description='popAction', example='QuerySmsPackageSummary'),
  proxyCallerIp?: string(name='ProxyCallerIp', description='proxyCallerIp', example='123'),
  proxyCallerSecurityTransport?: boolean(name='ProxyCallerSecurityTransport', description='proxyCallerSecurityTransport', example='123'),
  proxyTrustTransportInfo?: boolean(name='ProxyTrustTransportInfo', description='proxyTrustTransportInfo', example='123'),
  requestId?: string(name='RequestId', description='requestId', example='1991B495-FB2A-5693-A79F-37245D48E293'),
  securityToken?: string(name='SecurityToken'),
  stsTokenCallerBid?: long(name='StsTokenCallerBid', description='stsTokenCallerBid', example='123'),
  stsTokenCallerUid?: long(name='StsTokenCallerUid', description='stsTokenCallerUid', example='123'),
  userBid?: string(name='UserBid', description='userBid', example='123'),
  userCallerParentId?: long(name='UserCallerParentId', description='userCallerParentId', example='123'),
  userCallerSecurityTransport?: boolean(name='UserCallerSecurityTransport', description='userCallerSecurityTransport', example='123'),
  userCallerType?: string(name='UserCallerType', description='userCallerType', example='123'),
  userClientIp?: string(name='UserClientIp', description='userClientIp', example='123'),
  userKp?: string(name='UserKp', description='userKp', example='123'),
  userMfaPresent?: boolean(name='UserMfaPresent', description='userMfaPresent', example='123'),
  userSecurityToken?: string(name='UserSecurityToken', description='userSecurityToken', example='123'),
}

model QueryConfigurationOrderResponseBody = {
  data?: string(name='Data', description='module', example='[]'),
  errorMsg?: string(name='ErrorMsg', description='errorMsg', example='Not Found'),
  requestId?: string(name='RequestId', description='requestId', example='1991B495-FB2A-5693-A79F-37245D48E293'),
  success?: boolean(name='Success', description='success', example='True'),
}

model QueryConfigurationOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryConfigurationOrderResponseBody(name='body'),
}

async function queryConfigurationOrderWithOptions(request: QueryConfigurationOrderRequest, runtime: Util.RuntimeOptions): QueryConfigurationOrderResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryConfigurationOrder',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryConfigurationOrder(request: QueryConfigurationOrderRequest): QueryConfigurationOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryConfigurationOrderWithOptions(request, runtime);
}

model SubmitIntentionRequest {
  area?: string(name='Area', example='DOMESTIC'),
  bizType?: string(name='BizType', description='BizType', example='esp.logo'),
  channel?: string(name='Channel', example='0'),
  commodityType?: string(name='CommodityType', example='yunMarket'),
  contactName?: string(name='ContactName', example='arms-alertwebhook-cloud-mpp-k8s-prod-arms-prom-onboar-d2681f22'),
  description?: string(name='Description'),
  extInfo?: string(name='ExtInfo', example='{\\"downloadType\\":\\"normalLogo\\"}'),
  mobile?: string(name='Mobile', example='19182198505'),
  token?: string(name='Token', example='a5d2d827491a4e3a9b3a5c9009c02e89'),
  vcode?: string(name='Vcode', example='025684'),
}

model SubmitIntentionResponseBody = {
  errorMsg?: string(name='ErrorMsg', example='Not Found'),
  intentionBizId?: string(name='IntentionBizId', example='I20221124101817000001'),
  requestId?: string(name='RequestId', example='F3328A56-916E-59E4-A7C6-EE7AC1FE517D'),
  success?: boolean(name='Success', example='True'),
}

model SubmitIntentionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitIntentionResponseBody(name='body'),
}

async function submitIntentionWithOptions(request: SubmitIntentionRequest, runtime: Util.RuntimeOptions): SubmitIntentionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.area)) {
    query['Area'] = request.area;
  }
  if (!Util.isUnset(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!Util.isUnset(request.channel)) {
    query['Channel'] = request.channel;
  }
  if (!Util.isUnset(request.commodityType)) {
    query['CommodityType'] = request.commodityType;
  }
  if (!Util.isUnset(request.contactName)) {
    query['ContactName'] = request.contactName;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.extInfo)) {
    query['ExtInfo'] = request.extInfo;
  }
  if (!Util.isUnset(request.mobile)) {
    query['Mobile'] = request.mobile;
  }
  if (!Util.isUnset(request.token)) {
    query['Token'] = request.token;
  }
  if (!Util.isUnset(request.vcode)) {
    query['Vcode'] = request.vcode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitIntention',
    version = '2020-05-05',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitIntention(request: SubmitIntentionRequest): SubmitIntentionResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitIntentionWithOptions(request, runtime);
}

