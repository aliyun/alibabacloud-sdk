/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'eas';
  @version = '2021-07-01';
  @endpointRule = 'regional';
  @endpointMap = {
    cn-beijing = 'pai-eas.cn-beijing.aliyuncs.com',
    cn-zhangjiakou = 'pai-eas.cn-zhangjiakou.aliyuncs.com',
    cn-hangzhou = 'pai-eas.cn-hangzhou.aliyuncs.com',
    cn-shanghai = 'pai-eas.cn-shanghai.aliyuncs.com',
    cn-shenzhen = 'pai-eas.cn-shenzhen.aliyuncs.com',
    cn-hongkong = 'pai-eas.cn-hongkong.aliyuncs.com',
    ap-southeast-1 = 'pai-eas.ap-southeast-1.aliyuncs.com',
    ap-southeast-5 = 'pai-eas.ap-southeast-5.aliyuncs.com',
    us-east-1 = 'pai-eas.us-east-1.aliyuncs.com',
    us-west-1 = 'pai-eas.us-west-1.aliyuncs.com',
    eu-central-1 = 'pai-eas.eu-central-1.aliyuncs.com',
    ap-south-1 = 'pai-eas.ap-south-1.aliyuncs.com',
    cn-shanghai-finance-1 = 'pai-eas.cn-shanghai-finance-1.aliyuncs.com',
    cn-north-2-gov-1 = 'pai-eas.cn-north-2-gov-1.aliyuncs.com',
    cn-chengdu = 'pai-eas.cn-chengdu.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model Group {
  accessToken?: string(name='AccessToken', description='服务组流量入口Token'),
  clusterId?: string(name='ClusterId', description='服务组所在集群'),
  createTime?: string(name='CreateTime', description='服务组创建时间'),
  internetEndpoint?: string(name='InternetEndpoint', description='服务组公网地址'),
  intranetEndpoint?: string(name='IntranetEndpoint', description='服务组内网地址'),
  name?: string(name='Name', description='服务组名称'),
  queueService?: string(name='QueueService', description='服务组包含的队列服务'),
  updateTime?: string(name='UpdateTime', description='服务组更新时间'),
}

model Instance {
  hostIP?: string(name='HostIP', description='实例所在的宿主机IP'),
  hostName?: string(name='HostName', description='实例所在的宿主机名字'),
  innerIP?: string(name='InnerIP', description='实例的内网IP'),
  instanceName?: string(name='InstanceName', description='实例的名字'),
  instancePort?: int32(name='InstancePort', description='实例的网络端口'),
  lastState?: [  map[string]any ](name='LastState', description='实例上一次退出的状态'),
  namespace?: string(name='Namespace', description='实例的命名空间'),
  readyProcesses?: int32(name='ReadyProcesses', description='实例已经启动完成的进程数'),
  reason?: string(name='Reason', description='实例当前状态的标识'),
  resourceType?: string(name='ResourceType', description='实例所属的资源组类型，包括PublicResource和PrivateResource', example='PublicResource'),
  restartCount?: int32(name='RestartCount', description='实例重启次数'),
  role?: string(name='Role', description='实例所属的服务角色，包括Queue, DataLoader, Standard等角色', example='Standard'),
  startAt?: string(name='StartAt', description='实例的启动时间'),
  status?: string(name='Status', description='实例状态'),
  tenantHostIP?: string(name='TenantHostIP', description='宿主机所在的vpc分配的地址', example='192.168.0.39'),
  tenantInstanceIP?: string(name='TenantInstanceIP', description='实例所在的VPC分配的IP', example='192.168.0.39'),
  totalProcesses?: int32(name='TotalProcesses', description='实例总的进程数'),
}

model Resource {
  clusterId?: string(name='ClusterId', description='资源组所在的集群'),
  cpuCount?: int32(name='CpuCount', description='资源组CPU数量'),
  createTime?: string(name='CreateTime', description='资源组创建时间'),
  extraData?: map[string]any(name='ExtraData', description='资源组自定义数据'),
  gpuCount?: int32(name='GpuCount', description='资源组GPU个数'),
  instanceCount?: int32(name='InstanceCount', description='资源组实例个数'),
  message?: string(name='Message', description='资源组摘要信息'),
  postPaidInstanceCount?: int32(name='PostPaidInstanceCount', description='资源组按量付费实例个数'),
  prePaidInstanceCount?: int32(name='PrePaidInstanceCount', description='资源组预付费实例个数'),
  resourceId?: string(name='ResourceId', description='资源组ID'),
  resourceName?: string(name='ResourceName', description='资源组名字'),
  status?: string(name='Status', description='资源组的状态'),
  updateTime?: string(name='UpdateTime', description='资源组更新时间'),
}

model ResourceInstance {
  arch?: string(name='Arch', description='实例系统架构'),
  autoRenewal?: boolean(name='AutoRenewal', description='实例是否自动续费'),
  chargeType?: string(name='ChargeType', description='实例的计费类型'),
  createTime?: string(name='CreateTime', description='实例的创建时间'),
  expiredTime?: string(name='ExpiredTime', description='实例过期时间'),
  instanceCpuCount?: int32(name='InstanceCpuCount', description='实例的Cpu个数'),
  instanceGpuCount?: int32(name='InstanceGpuCount', description='实例的Gpu个数'),
  instanceGpuMemory?: string(name='InstanceGpuMemory', description='实例的显存大小'),
  instanceId?: string(name='InstanceId', description='实例ID'),
  instanceIp?: string(name='InstanceIp', description='实例IP'),
  instanceMemory?: string(name='InstanceMemory', description='实例的内存大小'),
  instanceName?: string(name='InstanceName', description='实例名称'),
  instanceStatus?: string(name='InstanceStatus', description='实例状态'),
  instanceTenantIp?: string(name='InstanceTenantIp', description='实例专属网络IP'),
  instanceType?: string(name='InstanceType', description='实例的机型'),
  instanceUsedCpu?: float(name='InstanceUsedCpu', description='实例已使用的CPU数量'),
  instanceUsedGpu?: float(name='InstanceUsedGpu', description='实例已使用的GPU数量'),
  instanceUsedGpuMemory?: string(name='InstanceUsedGpuMemory', description='实例已使用的显存大小'),
  instanceUsedMemory?: string(name='InstanceUsedMemory', description='实例已使用的内存大小'),
  region?: string(name='Region', description='实例所属区域'),
  zone?: string(name='Zone', description='实例所属可用区'),
}

model ResourceInstanceWorker {
  cpuLimit?: int32(name='CpuLimit', description='CpuLimit'),
  cpuRequest?: int32(name='CpuRequest', description='CpuRequest'),
  gpuLimit?: int32(name='GpuLimit', description='GpuLimit'),
  gpuRequest?: int32(name='GpuRequest', description='GpuRequest'),
  memoryLimit?: int32(name='MemoryLimit', description='MemoryLimit'),
  memoryRquest?: int32(name='MemoryRquest', description='MemoryRquest'),
  name?: string(name='Name', description='pod名'),
  ready?: boolean(name='Ready', description='是否ready'),
  restartCount?: int32(name='RestartCount', description='RestartCount'),
  serviceName?: string(name='ServiceName', description='服务名'),
  startTime?: string(name='StartTime', description='StartTime'),
  status?: string(name='Status', description='pod状态'),
}

model Service {
  accessToken?: string(name='AccessToken', description='服务的请求Token'),
  callerUid?: string(name='CallerUid', description='服务创建账号的UID'),
  cpu?: int32(name='Cpu', description='每个实例申请的cpu'),
  createTime?: string(name='CreateTime', description='服务的创建时间'),
  currentVersion?: int32(name='CurrentVersion', description='当前运行的模型版本'),
  extraData?: string(name='ExtraData', description='服务的额外信息'),
  gpu?: int32(name='Gpu', description='每个实例申请的gpu'),
  image?: string(name='Image', description='服务的数据镜像'),
  internetEndpoint?: string(name='InternetEndpoint', description='服务的公网endpoint'),
  intranetEndpoint?: string(name='IntranetEndpoint', description='服务内网endpoint'),
  labels?: [ 
    {
      labelKey?: string(name='LabelKey', description='服务标签键'),
      labelValue?: string(name='LabelValue', description='服务标签值'),
    }
  ](name='Labels', description='服务标签列表'),
  latestVersion?: int32(name='LatestVersion', description='服务最新版本号'),
  memory?: int32(name='Memory', description='每个worker需要的内存大小，单位为M'),
  message?: string(name='Message', description='服务的摘要信息'),
  namespace?: string(name='Namespace', description='服务所在的命名空间'),
  parentUid?: string(name='ParentUid', description='服务创建账号的主账号UID'),
  pendingInstance?: int32(name='PendingInstance', description='被挂起的服务的实例个数'),
  reason?: string(name='Reason', description='服务的状态信息'),
  region?: string(name='Region', description='服务所在的区域'),
  requestId?: string(name='RequestId', description='请求ID'),
  resource?: string(name='Resource', description='服务所在的资源组'),
  resourceAlias?: string(name='ResourceAlias', description='服务所在的资源组别名'),
  role?: string(name='Role', description='服务角色'),
  roleAttrs?: string(name='RoleAttrs', description='服务角色额外属性'),
  runningInstance?: int32(name='RunningInstance', description='正在运行的服务的实例个数'),
  safetyLock?: string(name='SafetyLock', description='服务安全锁'),
  serviceConfig?: string(name='ServiceConfig', description='服务的配置信息'),
  serviceGroup?: string(name='ServiceGroup', description='服务所在分组'),
  serviceId?: string(name='ServiceId', description='服务ID'),
  serviceName?: string(name='ServiceName', description='服务的名字'),
  serviceUid?: string(name='ServiceUid', description='服务ID，同ServiceId'),
  source?: string(name='Source', description='服务的部署来源'),
  status?: string(name='Status', description='服务的状态'),
  totalInstance?: int32(name='TotalInstance', description='服务的所有实例总个数'),
  updateTime?: string(name='UpdateTime', description='服务的更新时间'),
  weight?: int32(name='Weight', description='服务灰度发布的权重值'),
}

model CommitServiceRequest {
  clusterId?: string(name='ClusterId', description='集群Id。', example='cn-beijing', position='Path'),
  serviceName?: string(name='ServiceName', description='服务名。', example='foo', position='Path'),
}

model CommitServiceResponseBody = {
  message?: string(name='Message', description='执行结果。', example='Success'),
  requestId?: string(name='RequestId', description='Id of the request', example='40325405-579C-4D82****'),
}

model CommitServiceResponse = {
  headers: map[string]string(name='headers'),
  body: CommitServiceResponseBody(name='body'),
}

async function commitService(request: CommitServiceRequest): CommitServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CommitService', 'PUT', '/api/v2/services/{ClusterId}/{ServiceName}/commit', 'json', false, 'json', request);
}

model CreateBenchmarkTaskRequest {
  body?: string(name='body', example='{
    "base": {
        "duration": 600
    },
    "service": {
        "serviceName": "test_service",
        "requestToken": "test_token"
    },
    "data": {
        "path": "https://larec-benchmark-cd.oss-cn-chengdu.aliyuncs.com/youbei/sv_dbmtl/data/youbei.warmup.tf.bin",
        "dataType": "binary"
    },
    "optional": {
       "maxRt": 100
    }
}', position='Body'),
}

model CreateBenchmarkTaskResponseBody = {
  message?: string(name='Message', example='Benchmark  task [foo] is Creating'),
  region?: string(name='Region', example='cn-shanghai'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82********'),
  taskName?: string(name='TaskName', example='benchmark-larec-test-1076'),
}

model CreateBenchmarkTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateBenchmarkTaskResponseBody(name='body'),
}

async function createBenchmarkTask(request: CreateBenchmarkTaskRequest): CreateBenchmarkTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateBenchmarkTask', 'POST', '/api/v2/benchmark-tasks', 'json', false, 'json', request);
}

model CreateResourceRequest {
  autoRenewal?: boolean(name='AutoRenewal', description='是否自动续费', example='false', position='Body'),
  chargeType: string(name='ChargeType', description='付费类型，预付费PrePaid，后付费PostPaid', example='PostPaid', position='Body'),
  ecsInstanceCount: int32(name='EcsInstanceCount', description='实例数量', example='5', position='Body'),
  ecsInstanceType: string(name='EcsInstanceType', description='实例机型，对应ecs机型', example='ecs.c6.8xlarge', position='Body'),
}

model CreateResourceResponseBody = {
  clusterId?: string(name='ClusterId', description='资源组所在集群ID', example='cn-shanghai'),
  ownerUid?: string(name='OwnerUid', description='资源组的Owner UID', example='14401087478****'),
  requestId?: string(name='RequestId', description='Id of the request', example='40325405-579C-4D82****'),
  resourceId?: string(name='ResourceId', description='资源组ID', example='eas-r-h7lcw24dyqztwxxxxxx'),
  resourceName?: string(name='ResourceName', description='资源组名称', example='MyResource'),
}

model CreateResourceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateResourceResponseBody(name='body'),
}

async function createResource(request: CreateResourceRequest): CreateResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateResource', 'POST', '/api/v2/resources', 'json', false, 'json', request);
}

model CreateResourceInstancesRequest {
  clusterId: string(name='ClusterId', description='资源组所在的集群ID', example='cn-shanghai', position='Path'),
  resourceId: string(name='ResourceId', description='资源组ID', example='eas-r-asdasdasd', position='Path'),
  autoRenewal?: boolean(name='AutoRenewal', description='是否自动续费', example='false', position='Body'),
  chargeType: string(name='ChargeType', description='付费类型，预付费PrePaid，后付费PostPaid', example='PrePaid', position='Body'),
  ecsInstanceCount: int32(name='EcsInstanceCount', description='新创建的实例个数，(0, 100]', example='5', position='Body'),
  ecsInstanceType: string(name='EcsInstanceType', description='实例机型，对应ecs机型', example='ecs.s6-c1m2.xlarge', position='Body'),
  userData?: string(name='UserData', description='用户自这义数据，小于 16KB', example='x112223333', position='Body'),
}

model CreateResourceInstancesResponseBody = {
  message?: string(name='Message', example='Create 5 new ecs instance(s) in resource [eas-r-asdasdasd] successfully'),
  requestId?: string(name='RequestId', description='Id of the request', example='40325405-579C-4D82****'),
}

model CreateResourceInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: CreateResourceInstancesResponseBody(name='body'),
}

async function createResourceInstances(request: CreateResourceInstancesRequest): CreateResourceInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateResourceInstances', 'POST', '/api/v2/resources/{ClusterId}/{ResourceId}/instances', 'json', false, 'json', request);
}

model CreateResourceLogRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  resourceId: string(name='ResourceId', example='eas-r-asdasdasd', position='Path'),
  logStore?: string(name='LogStore', description='sls日志库', example='access_log', position='Body'),
  projectName?: string(name='ProjectName', description='资源组对应的sls日志管理项目', example='eas-r-asdasdasd-sls', position='Body'),
}

model CreateResourceLogResponseBody = {
  message?: string(name='Message', example='Resource [eas-r-asdasdasd] is deleted.'),
  requestId?: string(name='RequestId', description='Id of the request', example='40325405-579C-4D82****'),
}

model CreateResourceLogResponse = {
  headers: map[string]string(name='headers'),
  body: CreateResourceLogResponseBody(name='body'),
}

async function createResourceLog(request: CreateResourceLogRequest): CreateResourceLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateResourceLog', 'POST', '/api/v2/resources/{ClusterId}/{ResourceId}/log', 'json', false, 'json', request);
}

model CreateServiceRequest {
  develop?: string(name='Develop', description='是否进入开发模式。', position='Query'),
  labels?: map[string]string(name='Labels', shrink='json', position='Query'),
  body?: string(name='body', position='Body'),
}

model CreateServiceResponseBody = {
  internetEndpoint?: string(name='InternetEndpoint', example='http://pai-eas.vpc.cn-shanghai.****'),
  intranetEndpoint?: string(name='IntranetEndpoint', example='http://pai-eas.cn-shanghai.****'),
  region?: string(name='Region', example='cn-shanghai'),
  requestId?: string(name='RequestId', description='Id of the request', example='40325405-579C-4D82****'),
  serviceId?: string(name='ServiceId', example='eas-m-aaxxxddf'),
  serviceName?: string(name='ServiceName', example='yourname'),
  status?: string(name='Status', example='Creating'),
}

model CreateServiceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateServiceResponseBody(name='body'),
}

async function createService(request: CreateServiceRequest): CreateServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateService', 'POST', '/api/v2/services', 'json', false, 'json', request);
}

model CreateServiceAutoScalerRequest {
  clusterId: string(name='ClusterId', description='服务所在区域', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='服务名字', example='foo', position='Path'),
  max: int32(name='max', description='最大 replica 数，需要大于MinReplica', example='8', position='Body'),
  min: int32(name='min', description='最小 replica 数，需要大于0', example='2', position='Body'),
  scaleStrategies: [ 
    {
      metricName: string(name='metricName', example='qps'),
      service?: string(name='service', example='demo_svc'),
      threshold: float(name='threshold', example='10'),
    }
  ](name='scaleStrategies', position='Body'),
}

model CreateServiceAutoScalerResponseBody = {
  message?: string(name='Message', example='Succeed to auto scale service [foo]'),
  requestId?: string(name='RequestId', description='Id of the request', example='40325405-579C-4D82****'),
}

model CreateServiceAutoScalerResponse = {
  headers: map[string]string(name='headers'),
  body: CreateServiceAutoScalerResponseBody(name='body'),
}

async function createServiceAutoScaler(request: CreateServiceAutoScalerRequest): CreateServiceAutoScalerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateServiceAutoScaler', 'POST', '/api/v2/services/{ClusterId}/{ServiceName}/autoscaler', 'json', false, 'json', request);
}

model CreateServiceCronScalerRequest {
  clusterId: string(name='ClusterId', description='服务所在区域', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='服务名字', example='foo', position='Path'),
  excludeDates?: [ string ](name='ExcludeDates', description='需要排除的时间点的cron表达式', position='Body'),
  scaleJobs: [ 
    {
      name?: string(name='Name', example='scale-job-1'),
      schedule: string(name='Schedule', description='要执行伸缩任务的cron表达式', example='0 18 * * * *'),
      targetSize: int32(name='TargetSize', description='执行伸缩任务的目标replica', example='1'),
    }
  ](name='ScaleJobs', description='定时伸缩任务描述', position='Body'),
}

model CreateServiceCronScalerResponseBody = {
  message?: string(name='Message', description='操作成功消息', example='Create cron scaler for service [foo] successfully'),
  requestId?: string(name='RequestId', description='请求ID', example='40325405-579C-4D82****'),
}

model CreateServiceCronScalerResponse = {
  headers: map[string]string(name='headers'),
  body: CreateServiceCronScalerResponseBody(name='body'),
}

async function createServiceCronScaler(request: CreateServiceCronScalerRequest): CreateServiceCronScalerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateServiceCronScaler', 'POST', '/api/v2/services/{ClusterId}/{ServiceName}/cronscaler', 'json', false, 'json', request);
}

model CreateServiceMirrorRequest {
  clusterId: string(name='ClusterId', description='服务所在区域', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='服务名字', example='foo', position='Path'),
  ratio?: int32(name='Ratio', description='比例 [0, 100]', example='30', position='Body'),
  target?: [ string ](name='Target', description='服务实例列表', position='Body'),
}

model CreateServiceMirrorResponseBody = {
  message?: string(name='Message', example='Traffic mirroring is ON for service [foo] in region [cn-shanghia], ratio [70%]'),
  requestId?: string(name='RequestId', description='Id of the request', example='40325405-579C-4D82***'),
}

model CreateServiceMirrorResponse = {
  headers: map[string]string(name='headers'),
  body: CreateServiceMirrorResponseBody(name='body'),
}

async function createServiceMirror(request: CreateServiceMirrorRequest): CreateServiceMirrorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateServiceMirror', 'POST', '/api/v2/services/{ClusterId}/{ServiceName}/mirror', 'json', false, 'json', request);
}

model DeleteBenchmarkTaskRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  taskName: string(name='TaskName', example='benchmark-larec-test-2b11', position='Path'),
}

model DeleteBenchmarkTaskResponseBody = {
  message?: string(name='Message', example='Benchmark task [benchmark-test-service-234c] is Deleting'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82****'),
}

model DeleteBenchmarkTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteBenchmarkTaskResponseBody(name='body'),
}

async function deleteBenchmarkTask(request: DeleteBenchmarkTaskRequest): DeleteBenchmarkTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteBenchmarkTask', 'DELETE', '/api/v2/benchmark-tasks/{ClusterId}/{TaskName}', 'json', false, 'json', request);
}

model DeleteResourceRequest {
  clusterId: string(name='ClusterId', description='资源组所在的集群ID', example='cn-shanghai', position='Path'),
  resourceId: string(name='ResourceId', description='资源组的ID', example='eas-r-asdasdasd', position='Path'),
}

model DeleteResourceResponseBody = {
  message?: string(name='Message', example='Resource [eas-r-asdasdasd] is deleted.'),
  requestId?: string(name='RequestId', description='Id of the request', example='40325405-579C-4D82-9624-EC2B1779848E'),
}

model DeleteResourceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteResourceResponseBody(name='body'),
}

async function deleteResource(request: DeleteResourceRequest): DeleteResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteResource', 'DELETE', '/api/v2/resources/{ClusterId}/{ResourceId}', 'json', false, 'json', request);
}

model DeleteResourceDLinkRequest {
  clusterId: string(name='ClusterId', description='资源组所在的集群ID', example='cn-shanghai', position='Path'),
  resourceId: string(name='ResourceId', description='资源组的ID', example='eas-r-asdasdasd', position='Path'),
}

model DeleteResourceDLinkResponseBody = {
  message?: string(name='Message', example='Network interfaces are deleting'),
  requestId?: string(name='RequestId', description='Id of the request', example='40325405-579C-4D82****'),
}

model DeleteResourceDLinkResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteResourceDLinkResponseBody(name='body'),
}

async function deleteResourceDLink(request: DeleteResourceDLinkRequest): DeleteResourceDLinkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteResourceDLink', 'DELETE', '/api/v2/resources/{ClusterId}/{ResourceId}/dlink', 'json', false, 'json', request);
}

model DeleteResourceInstancesRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  resourceId: string(name='ResourceId', example='eas-r-asdasdasd', position='Path'),
  allFailed?: boolean(name='AllFailed', example='true', position='Query'),
  instanceList?: string(name='InstanceList', example='eas-i-xxxxxxx,eas-i-xxxxxxx', position='Query'),
}

model DeleteResourceInstancesResponseBody = {
  message?: string(name='Message', example='Instances eas-i-011227132046,eas-i-011227132046 are deleting'),
  requestId?: string(name='RequestId', description='Id of the request', example='40325405-579C-4D82****'),
}

model DeleteResourceInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteResourceInstancesResponseBody(name='body'),
}

async function deleteResourceInstances(request: DeleteResourceInstancesRequest): DeleteResourceInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteResourceInstances', 'DELETE', '/api/v2/resources/{ClusterId}/{ResourceId}/instances', 'json', false, 'json', request);
}

model DeleteResourceLogRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  resourceId: string(name='ResourceId', example='eas-r-asdasdasd', position='Path'),
}

model DeleteResourceLogResponseBody = {
  message?: string(name='Message', example='Log service for resource [eas-r-asdasdasd] is deleting'),
  requestId?: string(name='RequestId', description='Id of the request', example='40325405-579C-4D82****'),
}

model DeleteResourceLogResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteResourceLogResponseBody(name='body'),
}

async function deleteResourceLog(request: DeleteResourceLogRequest): DeleteResourceLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteResourceLog', 'DELETE', '/api/v2/resources/{ClusterId}/{ResourceId}/log', 'json', false, 'json', request);
}

model DeleteServiceRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', example='foo', position='Path'),
}

model DeleteServiceResponseBody = {
  message?: string(name='Message', example='Service [foo] in region [cn-shanghai] is terminating'),
  requestId?: string(name='RequestId', description='Id of the request', example='40325405-579C-4D82****'),
}

model DeleteServiceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteServiceResponseBody(name='body'),
}

async function deleteService(request: DeleteServiceRequest): DeleteServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteService', 'DELETE', '/api/v2/services/{ClusterId}/{ServiceName}', 'json', false, 'json', request);
}

model DeleteServiceAutoScalerRequest {
  clusterId: string(name='ClusterId', description='服务所在区域', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='服务名字', example='foo', position='Path'),
}

model DeleteServiceAutoScalerResponseBody = {
  message?: string(name='Message', example='Autoscaler for service [foo] deleted successfully'),
  requestId?: string(name='RequestId', description='Id of the request', example='40325405-579C-4D82****'),
}

model DeleteServiceAutoScalerResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteServiceAutoScalerResponseBody(name='body'),
}

async function deleteServiceAutoScaler(request: DeleteServiceAutoScalerRequest): DeleteServiceAutoScalerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteServiceAutoScaler', 'DELETE', '/api/v2/services/{ClusterId}/{ServiceName}/autoscaler', 'json', false, 'json', request);
}

model DeleteServiceCronScalerRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', example='foo', position='Path'),
}

model DeleteServiceCronScalerResponseBody = {
  message?: string(name='Message', example='Cronscaler for service [foo] deleted successfully'),
  requestId?: string(name='RequestId', description='Id of the request', example='40325405-579C-4D82****'),
}

model DeleteServiceCronScalerResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteServiceCronScalerResponseBody(name='body'),
}

async function deleteServiceCronScaler(request: DeleteServiceCronScalerRequest): DeleteServiceCronScalerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteServiceCronScaler', 'DELETE', '/api/v2/services/{ClusterId}/{ServiceName}/cronscaler', 'json', false, 'json', request);
}

model DeleteServiceInstancesRequest {
  clusterId: string(name='ClusterId', description='服务所在区域', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='服务名字', example='foo', position='Path'),
  instanceList: string(name='InstanceList', description='删除的实例列表，多个实例名字之间逗号隔开', example='foo-rdsbxxxx,foo-rdsaxxxx', position='Query'),
}

model DeleteServiceInstancesResponseBody = {
  message?: string(name='Message', example='Instance(s) [foo-rdsb,foo-rdsa]  for service [foo] in region [cn-shanghai] was deleted successfully'),
  requestId?: string(name='RequestId', description='Id of the request', example='40325405-579C-4D82****'),
}

model DeleteServiceInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteServiceInstancesResponseBody(name='body'),
}

async function deleteServiceInstances(request: DeleteServiceInstancesRequest): DeleteServiceInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteServiceInstances', 'DELETE', '/api/v2/services/{ClusterId}/{ServiceName}/instances', 'json', false, 'json', request);
}

model DeleteServiceLabelRequest {
  clusterId: string(name='ClusterId', description='服务所在区域。', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='服务名字。', example='foo', position='Path'),
  keys: [ string ](name='Keys', description='要删除的服务标签。', shrink='simple', position='Query'),
}

model DeleteServiceLabelResponseBody = {
  message?: string(name='Message', description='返回信息。', example='Success'),
  requestId?: string(name='RequestId', description='请求ID。', example='40325405-579C-4D82****'),
}

model DeleteServiceLabelResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteServiceLabelResponseBody(name='body'),
}

async function deleteServiceLabel(request: DeleteServiceLabelRequest): DeleteServiceLabelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteServiceLabel', 'DELETE', '/api/v2/services/{ClusterId}/{ServiceName}/label', 'json', false, 'json', request);
}

model DeleteServiceMirrorRequest {
  clusterId: string(name='ClusterId', description='服务所在区域', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='服务名字', example='foo', position='Path'),
}

model DeleteServiceMirrorResponseBody = {
  message?: string(name='Message', example='Traffic mirroring is OFF for service [foo] in region [cn-shanghia], ratio [70%]'),
  requestId?: string(name='RequestId', description='Id of the request', example='40325405-579C-4D82***'),
}

model DeleteServiceMirrorResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteServiceMirrorResponseBody(name='body'),
}

async function deleteServiceMirror(request: DeleteServiceMirrorRequest): DeleteServiceMirrorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteServiceMirror', 'DELETE', '/api/v2/services/{ClusterId}/{ServiceName}/mirror', 'json', false, 'json', request);
}

model DescribeBenchmarkTaskRequest {
  clusterId: string(name='ClusterId', description='压测任务所在的区域。', example='cn-shanghai', position='Path'),
  taskName: string(name='TaskName', description='压测任务的名字。', example='benchmark-larec-test-eac4', position='Path'),
}

model DescribeBenchmarkTaskResponseBody = {
  availableAgent?: long(name='AvailableAgent', description='实际可用的压测实例个数。', example='4'),
  callerUid?: string(name='CallerUid', description='调用者的UID。', example='1640133467****'),
  desiredAgent?: long(name='DesiredAgent', description='预期的压测实例个数。', example='4'),
  endpoint?: string(name='Endpoint', description='服务对外公开的访问路径。', example='http://15990xxxx.cn-hangzhou.pai-eas.aliyuncs.com/api/predict/xxx'),
  message?: string(name='Message', description='当前压测任务的运行进度信息。', example='Benchmar task is Running'),
  parentUid?: string(name='ParentUid', description='资源拥有者的UID。', example='1029728669****'),
  reason?: string(name='Reason', description='当前压测任务状态产生的原因。', example='RUNNING'),
  requestId?: string(name='RequestId', description='请求ID。', example='40325405-579C-4D82****'),
  serviceName?: string(name='ServiceName', description='压测的eas服务名。', example='foo'),
  status?: string(name='Status', description='压测任务的状态。', example='Running'),
  taskId?: string(name='TaskId', description='压测任务ID。', example='eas-b-gv4y86u****'),
  taskName?: string(name='TaskName', description='压测任务名字。', example='benchmark-larec-test-ae70'),
  token?: string(name='Token', description='访问eas服务的鉴权token。', example='6062787a-9301****'),
}

model DescribeBenchmarkTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBenchmarkTaskResponseBody(name='body'),
}

async function describeBenchmarkTask(request: DescribeBenchmarkTaskRequest): DescribeBenchmarkTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeBenchmarkTask', 'GET', '/api/v2/benchmark-tasks/{ClusterId}/{TaskName}', 'json', false, 'json', request);
}

model DescribeBenchmarkTaskReportRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  taskName: string(name='TaskName', example='benchmark-larec-test-015d', position='Path'),
  reportType?: string(name='ReportType', example='report', position='Query'),
}

model DescribeBenchmarkTaskReportResponseBody = {
  data?: any(name='Data', example='{
    "TimestampList": ["int64"],
    "QPSList": ["float32"],
    "RTList": [
      {
        "AVG": "float32",
        "TP100": "float32",
        "TP99": "float32",
        "TP90": "float32",
        "TP50": "float32",
        "TP10": "float32"
      }
    ],
    "TrafficList": [
      {
        "Send": "float64",
        "Receive": "float64"
      }
    ],
    "StatusCode": {
      "200": "uint64",
      "450": "uint64",
      "500": "uint64"
    },
    "Count": "uint64",
    "Total": "float64",
    "MinRT": "float32",
    "AvgRT": "float32",
    "MaxRT": "float32",
    "QPS": "float32",
    "TotalSend": "float64",
    "TotalReceive": "float64",
    "RTDistribution": [
      {
        "Latency": "float32",
        "Percentage": "int"
      }
    ],
    "RTHistogram": [
      {
        "Count": "int",
        "Mark": "float32",
        "Frequency": "float32"
      }
    ]
  }'),
  reportUrl?: string(name='ReportUrl', example='http://eas-benchmark.oss-cn-chengdu.aliyuncs.com/summary/benchmark-larec-test-015d-10007.html'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82********'),
}

model DescribeBenchmarkTaskReportResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBenchmarkTaskReportResponseBody(name='body'),
}

async function describeBenchmarkTaskReport(request: DescribeBenchmarkTaskReportRequest): DescribeBenchmarkTaskReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeBenchmarkTaskReport', 'GET', '/api/v2/benchmark-tasks/{ClusterId}/{TaskName}/report', 'json', false, 'json', request);
}

model DescribeGroupRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  groupName: string(name='GroupName', example='foo', position='Path'),
}

model DescribeGroupResponse = {
  headers: map[string]string(name='headers'),
  body: Group  
}

async function describeGroup(request: DescribeGroupRequest): DescribeGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeGroup', 'GET', '/api/v2/groups/{ClusterId}/{GroupName}', 'json', false, 'json', request);
}

model DescribeResourceRequest {
  clusterId: string(name='ClusterId', description='资源组所在的集群ID', example='cn-shanghai', position='Path'),
  resourceId: string(name='ResourceId', description='资源组的ID', example='eas-r-asdasdasd', position='Path'),
}

model DescribeResourceResponseBody = {
  clusterId?: string(name='ClusterId', example='cn-beijing'),
  cpuCount?: int32(name='CpuCount', example='16'),
  createTime?: string(name='CreateTime', example='2020-05-19T14:19:42Z'),
  extraData?: string(name='ExtraData', example='{"vswitch_id":"vsw-bp17uo6xebcusy****","gpu_share":true,"aux_vswitch_id_list":["vsw-bp13b3pvjap3vxn****","vsw-bp1nls8o5hk8mt8*****"],"security_group_id":"sg-bp1j1z7297hcink*****","vpc_id":"vpc-bp1kjr3rfyhx01*****","destination_cidr":"172.16.0.12/28","role_arn":"acs:ram::1157703270*****:role/AliyunServiceRoleForPaiEas","sls_project":"","sls_logstore":"","sls_status":"ResourceReady","sls_message":"","update_time":""}'),
  gpuCount?: int32(name='GpuCount', example='1'),
  instanceCount?: int32(name='InstanceCount', example='4'),
  message?: string(name='Message', example='Resource is ready'),
  ownerUid?: string(name='OwnerUid', example='14401087478****'),
  postPaidInstanceCount?: int32(name='PostPaidInstanceCount', example='3'),
  prePaidInstanceCount?: int32(name='PrePaidInstanceCount', example='1'),
  requestId?: string(name='RequestId', example='902976F2-6FAF-5404-8A4D-6CC223***'),
  resourceId?: string(name='ResourceId', example='eas-r-glkfpsxuw57x1h*****'),
  resourceName?: string(name='ResourceName', example='my-resouce****'),
  status?: string(name='Status', example='ResourceReady'),
  updateTime?: string(name='UpdateTime', example='2021-02-24T11:52:17Z'),
}

model DescribeResourceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeResourceResponseBody(name='body'),
}

async function describeResource(request: DescribeResourceRequest): DescribeResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeResource', 'GET', '/api/v2/resources/{ClusterId}/{ResourceId}', 'json', false, 'json', request);
}

model DescribeResourceDLinkRequest {
  clusterId: string(name='ClusterId', description='资源组所在的集群ID', example='cn-shanghai', position='Path'),
  resourceId: string(name='ResourceId', description='资源组的ID', example='eas-r-adfabas', position='Path'),
}

model DescribeResourceDLinkResponseBody = {
  auxVSwitchList?: [ string ](name='AuxVSwitchList', description='已打通直连的副VSwitch ID'),
  destinationCIDRs?: string(name='DestinationCIDRs', description='要打通的客户端的网段信息，会将该网段加入到服务端的回包路由中，与VSwitchIdList可二选一', example='72.16.0.0/16'),
  requestId?: string(name='RequestId', description='Id of the request', example='40325405-579C-4D82****'),
  securityGroupId?: string(name='SecurityGroupId', description='已打通直连的安全组', example='sg-bp1j1z7297hcink9d****'),
  vSwitchId?: string(name='VSwitchId', description='已打通直连的主VSwitch ID', example='vsw-8vbqn2at0kljjxxxx****'),
  vpcId?: string(name='VpcId', description='已打通直接的Vpc ID', example='vpc-uf66uio7md****'),
}

model DescribeResourceDLinkResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeResourceDLinkResponseBody(name='body'),
}

async function describeResourceDLink(request: DescribeResourceDLinkRequest): DescribeResourceDLinkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeResourceDLink', 'GET', '/api/v2/resources/{ClusterId}/{ResourceId}/dlink', 'json', false, 'json', request);
}

model DescribeResourceLogRequest {
  clusterId: string(name='ClusterId', description='资源组所在的集群ID', example='cn-shanghai', position='Path'),
  resourceId: string(name='ResourceId', description='资源组的ID', example='eas-r-asdasdasd', position='Path'),
}

model DescribeResourceLogResponseBody = {
  logStore?: string(name='LogStore', description='sls日志库', example='access_log'),
  message?: string(name='Message', description='sls日志信息', example='Network interfaces are updating'),
  projectName?: string(name='ProjectName', description='资源组对应的sls日志管理项目', example='eas-r-asdasdasd-sls'),
  requestId?: string(name='RequestId', description='Id of the request', example='40325405-579C-4D82****'),
  status?: string(name='Status', description='资源组状态', example='ResourceReady'),
}

model DescribeResourceLogResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeResourceLogResponseBody(name='body'),
}

async function describeResourceLog(request: DescribeResourceLogRequest): DescribeResourceLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeResourceLog', 'GET', '/api/v2/resources/{ClusterId}/{ResourceId}/log', 'json', false, 'json', request);
}

model DescribeServiceRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', example='foo', position='Path'),
}

model DescribeServiceResponse = {
  headers: map[string]string(name='headers'),
  body: Service  
}

async function describeService(request: DescribeServiceRequest): DescribeServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeService', 'GET', '/api/v2/services/{ClusterId}/{ServiceName}', 'json', false, 'json', request);
}

model DescribeServiceAutoScalerRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', example='echo', position='Path'),
}

model DescribeServiceAutoScalerResponseBody = {
  behavior?: map[string]any(name='Behavior', example='{
  "behavior": {
    "scaleDown": {
      "stabilizationWindowSeconds": 150
    }
  }
}'),
  currentMetrics?: [ 
    {
      metricName?: string(name='metricName', example='qps'),
      service?: string(name='service', example='demo_svc'),
      value?: float(name='value', example='10'),
    }
  ](name='CurrentMetrics'),
  maxReplica?: int32(name='MaxReplica', description='服务最大实例数', example='8'),
  minReplica?: int32(name='MinReplica', description='服务最小实例数', example='3'),
  requestId?: string(name='RequestId', description='Id of the request', example='40325405-579C-4D82****'),
  scaleStrategies?: [ 
    {
      metricName?: string(name='metricName', example='qps'),
      service?: string(name='service', example='demo_svc'),
      threshold?: float(name='threshold', example='10'),
    }
  ](name='ScaleStrategies'),
  serviceName?: string(name='ServiceName', description='服务名字', example='foo'),
}

model DescribeServiceAutoScalerResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeServiceAutoScalerResponseBody(name='body'),
}

async function describeServiceAutoScaler(request: DescribeServiceAutoScalerRequest): DescribeServiceAutoScalerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeServiceAutoScaler', 'GET', '/api/v2/services/{ClusterId}/{ServiceName}/autoscaler', 'json', false, 'json', request);
}

model DescribeServiceCronScalerRequest {
  clusterId?: string(name='ClusterId', example='cn-shanghai', position='Path'),
  serviceName?: string(name='ServiceName', example='foo', position='Path'),
}

model DescribeServiceCronScalerResponseBody = {
  excludeDates?: [ string ](name='ExcludeDates'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82****'),
  scaleJobs?: [ 
    {
      createTime?: string(name='CreateTime', example='2020-06-24T02:11:30Z'),
      lastProbeTime?: string(name='LastProbeTime', example='2022-02-24T06:31:00Z'),
      message?: string(name='Message', example='"cron hpa job scale-jobs-0 executed successfully. current replicas:3, desired replicas:2."'),
      name?: string(name='Name', example='scale-job-1'),
      schedule?: string(name='Schedule', example='0 18 * * * *'),
      state?: string(name='State', example='Succeed'),
      targetSize?: int32(name='TargetSize', example='1'),
    }
  ](name='ScaleJobs'),
  serviceName?: string(name='ServiceName', example='foo'),
}

model DescribeServiceCronScalerResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeServiceCronScalerResponseBody(name='body'),
}

async function describeServiceCronScaler(request: DescribeServiceCronScalerRequest): DescribeServiceCronScalerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeServiceCronScaler', 'GET', '/api/v2/services/{ClusterId}/{ServiceName}/cronscaler', 'json', false, 'json', request);
}

model DescribeServiceEventRequest {
  clusterId: string(name='ClusterId', description='服务对应区域', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='服务对应名称', example='foo', position='Path'),
  endTime?: string(name='EndTime', description='日志查询终止时刻（默认当前时刻）', example='2006-01-02 15:04:05', position='Query'),
  pageNum?: string(name='PageNum', description='请求页码（默认1）', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='每页的大小（默认为100）', example='20', position='Query'),
  startTime?: string(name='StartTime', description='日志查询起始时刻（默认7天前）', example='2006-01-02 15:04:05', position='Query'),
}

model DescribeServiceEventResponseBody = {
  events?: [ 
    {
      message?: string(name='Message', example='{\\"versionId\\":1,\\"message\\":\\"Stage scale complete\\",\\"availableInstance\\":1,\\"unavailableInstance\\":0}'),
      reason?: string(name='Reason', example='Updating'),
      time?: string(name='Time', example='2022-04-09 06:30:00'),
      type?: string(name='Type', example='Normal'),
    }
  ](name='Events'),
  pageNum?: long(name='PageNum', example='1'),
  requestId?: string(name='RequestId', description='Id of the request', example='3D491C94-6239-5318-B4B4-799D859***'),
  totalCount?: long(name='TotalCount', example='29'),
  totalPageNum?: long(name='TotalPageNum', example='12'),
}

model DescribeServiceEventResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeServiceEventResponseBody(name='body'),
}

async function describeServiceEvent(request: DescribeServiceEventRequest): DescribeServiceEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeServiceEvent', 'GET', '/api/v2/services/{ClusterId}/{ServiceName}/events', 'json', false, 'json', request);
}

model DescribeServiceLogRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', example='echo', position='Path'),
  endTime?: string(name='EndTime', description='查询的结束时间', example='2006-01-02 15:04:05', position='Query'),
  ip?: string(name='Ip', description='要查询的机器ip', example='10.0.0.1', position='Query'),
  keyword?: string(name='Keyword', description='查询的关键字', example='key', position='Query'),
  pageNum?: long(name='PageNum', description='请求的页码（默认为1）', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='每页的大小（默认为500）', example='500', position='Query'),
  startTime?: string(name='StartTime', description='查询的开始时间', example='2006-01-02 15:04:05', position='Query'),
}

model DescribeServiceLogResponseBody = {
  logs?: [ string ](name='Logs', description='返回的日志信息'),
  pageNum?: long(name='PageNum', description='当前页码', example='1'),
  requestId?: string(name='RequestId', description='Id of the request', example='40325405-579C-4D82********'),
  totalCount?: long(name='TotalCount', description='总计数量', example='1'),
  totalPageNum?: long(name='TotalPageNum', description='总计页码', example='500'),
}

model DescribeServiceLogResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeServiceLogResponseBody(name='body'),
}

async function describeServiceLog(request: DescribeServiceLogRequest): DescribeServiceLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeServiceLog', 'GET', '/api/v2/services/{ClusterId}/{ServiceName}/logs', 'json', false, 'json', request);
}

model DescribeServiceMirrorRequest {
  clusterId: string(name='ClusterId', description='服务所在区域', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='服务名字', example='foo', position='Path'),
}

model DescribeServiceMirrorResponseBody = {
  ratio?: string(name='Ratio', description='比例[0,100]', example='50'),
  requestId?: string(name='RequestId', description='Id of the request', example='40325405-579C-4D82****'),
  serviceName?: string(name='ServiceName', description='服务名字', example='foo'),
  target?: string(name='Target', description='设置流量镜像对服务列表', example='foo2,foo3'),
}

model DescribeServiceMirrorResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeServiceMirrorResponseBody(name='body'),
}

async function describeServiceMirror(request: DescribeServiceMirrorRequest): DescribeServiceMirrorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeServiceMirror', 'GET', '/api/v2/services/{ClusterId}/{ServiceName}/mirror', 'json', false, 'json', request);
}

model DevelopServiceRequest {
  clusterId: string(name='ClusterId', description='集群Id。', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='服务名', example='echo', position='Path'),
  exit?: string(name='Exit', description='是否退出开发模式', example='true', position='Query'),
}

model DevelopServiceResponseBody = {
  message?: string(name='Message', description='执行结果消息', example='Success'),
  requestId?: string(name='RequestId', description='Id of the request', example='40325405-579C-4D82****'),
}

model DevelopServiceResponse = {
  headers: map[string]string(name='headers'),
  body: DevelopServiceResponseBody(name='body'),
}

async function developService(request: DevelopServiceRequest): DevelopServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DevelopService', 'PUT', '/api/v2/services/{ClusterId}/{ServiceName}/develop', 'json', false, 'json', request);
}

model ListBenchmarkTaskRequest {
  filter?: string(name='Filter', position='Query'),
  pageNumber?: string(name='PageNumber', position='Query'),
  pageSize?: string(name='PageSize', position='Query'),
  serviceName?: string(name='ServiceName', position='Query'),
}

model ListBenchmarkTaskResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82****'),
  tasks?: [ 
    {
      availableAgent?: long(name='AvailableAgent', example='2'),
      createTime?: string(name='CreateTime', example='2020-12-04T02:43:15Z'),
      message?: string(name='Message', example='Benchmark task [benchmark-larec-test-1076] is Running'),
      region?: string(name='Region', example='cn-shanghai'),
      serviceName?: string(name='ServiceName', example='test_quota'),
      status?: string(name='Status', example='Running'),
      taskId?: string(name='TaskId', example='eas-b-gv4y86uvgt****i'),
      taskName?: string(name='TaskName', example='benchmark-larec-test-1076'),
      updateTime?: string(name='UpdateTime', example='2020-06-24T03:11:30Z'),
    }
  ](name='Tasks'),
  totalCount?: int32(name='TotalCount'),
}

model ListBenchmarkTaskResponse = {
  headers: map[string]string(name='headers'),
  body: ListBenchmarkTaskResponseBody(name='body'),
}

async function listBenchmarkTask(request: ListBenchmarkTaskRequest): ListBenchmarkTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListBenchmarkTask', 'GET', '/api/v2/benchmark-tasks', 'json', false, 'json', request);
}

model ListGroupsRequest {
  filter?: string(name='Filter', description='名字过滤', example='foo', position='Query'),
  pageNumber?: string(name='PageNumber', description='页码数，默认1', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='每页大小，默认100', example='20', position='Query'),
}

model ListGroupsResponseBody = {
  groups?: [
    Group
  ](name='Groups'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  requestId?: string(name='RequestId', description='Id of the request', example='40325405-579C-4D82****'),
  totalCount?: long(name='TotalCount', example='5'),
}

model ListGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListGroupsResponseBody(name='body'),
}

async function listGroups(request: ListGroupsRequest): ListGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListGroups', 'GET', '/api/v2/groups', 'json', false, 'json', request);
}

model ListResourceInstanceWorkerRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  resourceId: string(name='ResourceId', example='eas-r-adfabas', position='Path'),
  instanceName: string(name='InstanceName', example='cne10', position='Path'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
}

model ListResourceInstanceWorkerResponseBody = {
  pageNumber?: int32(name='PageNumber', description='当前页码', example='1'),
  pageSize?: int32(name='PageSize', description='每页大小', example='20'),
  pods?: [
    ResourceInstanceWorker
  ](name='Pods', description='pod列表'),
  requestId?: string(name='RequestId', description='Id of the request', example='40325405-579C-4D82****'),
  totalCount?: int32(name='TotalCount', description='pod总数', example='1'),
}

model ListResourceInstanceWorkerResponse = {
  headers: map[string]string(name='headers'),
  body: ListResourceInstanceWorkerResponseBody(name='body'),
}

async function listResourceInstanceWorker(request: ListResourceInstanceWorkerRequest): ListResourceInstanceWorkerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListResourceInstanceWorker', 'GET', '/api/v2/resources/{ClusterId}/{ResourceId}/instance/{InstanceName}/workers', 'json', false, 'json', request);
}

model ListResourceInstancesRequest {
  clusterId: string(name='ClusterId', description='资源组所在的集群ID', example='cn-shanghai', position='Path'),
  resourceId: string(name='ResourceId', description='资源组的ID', example='iot', position='Path'),
  chargeType?: string(name='ChargeType', description='付费类型
PrePaid预付费
PostPaid后付费', example='PrePaid', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  instanceName?: string(name='InstanceName', position='Query'),
  pageNumber?: int32(name='PageNumber', description='请求的页码（默认为1）', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='每页的大小（默认为100）', example='20', position='Query'),
}

model ListResourceInstancesResponseBody = {
  instances?: [
    ResourceInstance
  ](name='Instances'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', description='Id of the request', example='40325405-579C-4D82****'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model ListResourceInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ListResourceInstancesResponseBody(name='body'),
}

async function listResourceInstances(request: ListResourceInstancesRequest): ListResourceInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListResourceInstances', 'GET', '/api/v2/resources/{ClusterId}/{ResourceId}/instances', 'json', false, 'json', request);
}

model ListResourceServicesRequest {
  clusterId: string(name='ClusterId', description='资源组所在的集群ID', example='cn-shanghai', position='Path'),
  resourceId: string(name='ResourceId', description='资源组的ID', example='iot', position='Path'),
  pageNumber?: int32(name='PageNumber', description='请求的页码（默认为1）', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='每页的大小（默认为100）', example='20', position='Query'),
}

model ListResourceServicesResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', description='Id of the request', example='40325405-579C-4D82****'),
  services?: [
    Service
  ](name='Services'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model ListResourceServicesResponse = {
  headers: map[string]string(name='headers'),
  body: ListResourceServicesResponseBody(name='body'),
}

async function listResourceServices(request: ListResourceServicesRequest): ListResourceServicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListResourceServices', 'GET', '/api/v2/resources/{ClusterId}/{ResourceId}/services', 'json', false, 'json', request);
}

model ListResourcesRequest {
  pageNumber?: int32(name='PageNumber', description='请求的页码（默认为1）', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='每页的大小（默认为100）', example='20', position='Query'),
  resourceId?: string(name='ResourceId', position='Query'),
  resourceName?: string(name='ResourceName', position='Query'),
}

model ListResourcesResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', description='Id of the request', example='40325405-579C-4D82****'),
  resources?: [
    Resource
  ](name='Resources'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListResourcesResponseBody(name='body'),
}

async function listResources(request: ListResourcesRequest): ListResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListResources', 'GET', '/api/v2/resources', 'json', false, 'json', request);
}

model ListServiceInstancesRequest {
  clusterId: string(name='ClusterId', description='服务所在区域', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='服务名字', example='foo', position='Path'),
  pageNumber?: int32(name='PageNumber', description='请求的页码（默认为1）', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='每页的大小（默认为100）', example='20', position='Query'),
}

model ListServiceInstancesResponseBody = {
  instances?: [
    Instance
  ](name='Instances'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', description='Id of the request', example='40325405-579C-4D82****'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListServiceInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ListServiceInstancesResponseBody(name='body'),
}

async function listServiceInstances(request: ListServiceInstancesRequest): ListServiceInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListServiceInstances', 'GET', '/api/v2/services/{ClusterId}/{ServiceName}/instances', 'json', false, 'json', request);
}

model ListServiceVersionsRequest {
  clusterId: string(name='ClusterId', description='服务所在区域', example='cn-hangzhou', position='Path'),
  serviceName: string(name='ServiceName', description='服务名字', example='test_oss', position='Path'),
  pageNumber?: int32(name='PageNumber', description='请求的页码（默认为1）', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='每页的大小（默认为100）', example='10', position='Query'),
}

model ListServiceVersionsResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='E089D584-B6F4-50C4-9902-DA2295B7****'),
  totalCount?: long(name='TotalCount', example='166'),
  versions?: [ 
    {
      buildTime?: string(name='BuildTime', example='2022-08-29T22:02:14Z'),
      imageAvailable?: string(name='ImageAvailable', example='true'),
      imageId?: int32(name='ImageId', example='4'),
      message?: string(name='Message', example='Service is Running'),
      serviceRunnable?: string(name='ServiceRunnable', example='true'),
    }
  ](name='Versions'),
}

model ListServiceVersionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListServiceVersionsResponseBody(name='body'),
}

async function listServiceVersions(request: ListServiceVersionsRequest): ListServiceVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListServiceVersions', 'GET', '/api/v2/services/{ClusterId}/{ServiceName}/versions', 'json', false, 'json', request);
}

model ListServicesRequest {
  filter?: string(name='Filter', description='关键字搜索。', example='foo', position='Query'),
  groupName?: string(name='GroupName', description='所属的group。', example='foo', position='Query'),
  label?: map[string]string(name='Label', shrink='json', position='Query'),
  order?: string(name='Order', description='排序顺序，支持升序或将序。', example='asc', position='Query'),
  pageNumber?: int32(name='PageNumber', description='页号。', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='每页大小。', example='100', position='Query'),
  parentServiceUid?: string(name='ParentServiceUid', description='Band类型服务主服务的UID', example='eas-m-baxkc20nsyxxxx', position='Query'),
  serviceType?: string(name='ServiceType', description='服务的类型，例如Async, OfflineTask和Standard等', example='Async', position='Query'),
  sort?: string(name='Sort', description='排序字段。', example='CreateTime', position='Query'),
}

model ListServicesResponseBody = {
  pageNumber?: int32(name='PageNumber', description='页码。', example='1'),
  pageSize?: int32(name='PageSize', description='每页显示的服务数。', example='100'),
  requestId?: string(name='RequestId', description='请求ID。', example='40325405-579C-4D82****'),
  services?: [
    Service
  ](name='Services', description='服务列表。'),
  totalCount?: int32(name='TotalCount', description='服务总数。', example='2'),
}

model ListServicesResponse = {
  headers: map[string]string(name='headers'),
  body: ListServicesResponseBody(name='body'),
}

async function listServices(request: ListServicesRequest): ListServicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListServices', 'GET', '/api/v2/services', 'json', false, 'json', request);
}

model ReleaseServiceRequest {
  clusterId: string(name='ClusterId', description='服务所在区域', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='服务名字', example='foo', position='Path'),
  trafficState?: string(name='TrafficState', example='grouping', position='Body'),
  weight?: int32(name='Weight', description='灰度权重，范围 [0, 100]', example='100', position='Body'),
}

model ReleaseServiceResponseBody = {
  message?: string(name='Message', example='Releasing service [foo] in region [cn-shanghai] with weight [40], service status: [Running]'),
  requestId?: string(name='RequestId', description='Id of the request', example='40325405-579C-4D82****'),
}

model ReleaseServiceResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseServiceResponseBody(name='body'),
}

async function releaseService(request: ReleaseServiceRequest): ReleaseServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ReleaseService', 'PUT', '/api/v2/services/{ClusterId}/{ServiceName}/release', 'json', false, 'json', request);
}

model StartBenchmarkTaskRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  taskName: string(name='TaskName', example='benchmark-larec-test-3bc6', position='Path'),
}

model StartBenchmarkTaskResponseBody = {
  message?: string(name='Message', example='Benchmark task [benchmark-larec-test-1076] is Starting'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82****'),
}

model StartBenchmarkTaskResponse = {
  headers: map[string]string(name='headers'),
  body: StartBenchmarkTaskResponseBody(name='body'),
}

async function startBenchmarkTask(request: StartBenchmarkTaskRequest): StartBenchmarkTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartBenchmarkTask', 'PUT', '/api/v2/benchmark-tasks/{ClusterId}/{TaskName}/start', 'json', false, 'json', request);
}

model StartServiceRequest {
  clusterId: string(name='ClusterId', description='服务所在区域', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='服务名字', example='foo', position='Path'),
}

model StartServiceResponseBody = {
  message?: string(name='Message', example='Service [foo] in region [cn-shanghai] is starting'),
  requestId?: string(name='RequestId', description='Id of the request', example='40325405-579C-4D82****'),
}

model StartServiceResponse = {
  headers: map[string]string(name='headers'),
  body: StartServiceResponseBody(name='body'),
}

async function startService(request: StartServiceRequest): StartServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartService', 'PUT', '/api/v2/services/{ClusterId}/{ServiceName}/start', 'json', false, 'json', request);
}

model StopBenchmarkTaskRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  taskName: string(name='TaskName', example='benchmark-larec-test-dbe5', position='Path'),
}

model StopBenchmarkTaskResponseBody = {
  message?: string(name='Message', example='Benchmark task [benchmark-larec-test-1076] is Stopping'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82****'),
}

model StopBenchmarkTaskResponse = {
  headers: map[string]string(name='headers'),
  body: StopBenchmarkTaskResponseBody(name='body'),
}

async function stopBenchmarkTask(request: StopBenchmarkTaskRequest): StopBenchmarkTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopBenchmarkTask', 'PUT', '/api/v2/benchmark-tasks/{ClusterId}/{TaskName}/stop', 'json', false, 'json', request);
}

model StopServiceRequest {
  clusterId: string(name='ClusterId', description='服务所在区域', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='服务名字', example='foo', position='Path'),
}

model StopServiceResponseBody = {
  message?: string(name='Message', example='Succeed to auto scale service [foo]'),
  requestId?: string(name='RequestId', description='Id of the request', example='40325405-579C-4D82****'),
}

model StopServiceResponse = {
  headers: map[string]string(name='headers'),
  body: StopServiceResponseBody(name='body'),
}

async function stopService(request: StopServiceRequest): StopServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopService', 'PUT', '/api/v2/services/{ClusterId}/{ServiceName}/stop', 'json', false, 'json', request);
}

model UpdateBenchmarkTaskRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  taskName: string(name='TaskName', example='benchmark-larec-test-645c', position='Path'),
  body?: string(name='body', example='{
    "base":  {
         "qps": 200
    }
}', position='Body'),
}

model UpdateBenchmarkTaskResponseBody = {
  message?: string(name='Message', example='Benchmark task [benchmark-larec-test-1076] is Updating'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82***'),
}

model UpdateBenchmarkTaskResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateBenchmarkTaskResponseBody(name='body'),
}

async function updateBenchmarkTask(request: UpdateBenchmarkTaskRequest): UpdateBenchmarkTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateBenchmarkTask', 'PUT', '/api/v2/benchmark-tasks/{ClusterId}/{TaskName}', 'json', false, 'json', request);
}

model UpdateResourceRequest {
  clusterId: string(name='ClusterId', description='资源组所在的集群ID', example='cn-shanghai', position='Path'),
  resourceId: string(name='ResourceId', description='资源组的ID', example='eas-r-asdasdasd', position='Path'),
  resourceName: string(name='ResourceName', description='新的资源组名称', example='iot', position='Body'),
}

model UpdateResourceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='40325405-579C-4D82****'),
  resourceId?: string(name='ResourceId', example='eas-r-asdasdasd'),
  resourceName?: string(name='ResourceName', example='iot'),
}

model UpdateResourceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateResourceResponseBody(name='body'),
}

async function updateResource(request: UpdateResourceRequest): UpdateResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateResource', 'PUT', '/api/v2/resources/{ClusterId}/{ResourceId}', 'json', false, 'json', request);
}

model UpdateResourceDLinkRequest {
  clusterId: string(name='ClusterId', description='资源组所在的集群ID', example='cn-shanghai', position='Path'),
  resourceId: string(name='ResourceId', description='资源组的Id', example='iot', position='Path'),
  destinationCIDRs?: string(name='DestinationCIDRs', description='要打通的客户端的网段信息，会将该网段加入到服务端的回包路由中，与VSwitchIdList可二选一', example='72.16.0.0/16', position='Body'),
  securityGroupId: string(name='SecurityGroupId', description='客户端ECS归属的安全组', example='sg-bp149cedsfx2rfspd2d', position='Body'),
  vSwitchId: string(name='VSwitchId', description='对端的主VSwitchID，会在该vswitch中创建ENI', example='vpc-uf66uio7md****', position='Body'),
  vSwitchIdList?: [ string ](name='VSwitchIdList', description='要打通的客户端的vswitch列表，会将这些vswitch对应的网段加入到服务端的回包路由中', position='Body'),
}

model UpdateResourceDLinkResponseBody = {
  message?: string(name='Message', example='Network interfaces are updating'),
  requestId?: string(name='RequestId', description='Id of the request', example='40325405-579C-4D82****'),
}

model UpdateResourceDLinkResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateResourceDLinkResponseBody(name='body'),
}

async function updateResourceDLink(request: UpdateResourceDLinkRequest): UpdateResourceDLinkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateResourceDLink', 'PUT', '/api/v2/resources/{ClusterId}/{ResourceId}/dlink', 'json', false, 'json', request);
}

model UpdateResourceInstanceRequest {
  clusterId: string(name='ClusterId', description='实例所属集群', example='cn-beijing', position='Path'),
  resourceId: string(name='ResourceId', description='实例所属资源组Id', example='eas-r-asdasdasd', position='Path'),
  instanceId: string(name='InstanceId', description='实例Id', example='eas-i-asdasdasd', position='Path'),
  action: string(name='Action', description='更新服务的行为：Cordon, Uncordon, Drain', example='Cordon', position='Body'),
}

model UpdateResourceInstanceResponseBody = {
  instanceId?: string(name='InstanceId', description='实例名', example='eas-i-asdasdasd'),
  requestId?: string(name='RequestId', description='请求ID', example='40325405-579C-4D82****'),
  resourceId?: string(name='ResourceId', description='资源组ID', example='eas-r-asdasdasd'),
}

model UpdateResourceInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateResourceInstanceResponseBody(name='body'),
}

async function updateResourceInstance(request: UpdateResourceInstanceRequest): UpdateResourceInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateResourceInstance', 'PUT', '/api/v2/resources/{ClusterId}/{ResourceId}/instances/{InstanceId}', 'json', false, 'json', request);
}

model UpdateServiceRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', example='foo', position='Path'),
  body?: string(name='body', example='{   "name": "foo",   "model_path": "http://path/to/model.tar.gz",   "processor": "tensorflow_cpu",   "metadata": {     "instance": 2,     "memory": 7000,     "cpu": 4   } }', position='Body'),
}

model UpdateServiceResponseBody = {
  message?: string(name='Message', description='请求返回消息。', example='Succeed to update service [foo] in region [cn-shanghai]'),
  requestId?: string(name='RequestId', description='请求ID。', example='40325405-579C-4D82****'),
}

model UpdateServiceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateServiceResponseBody(name='body'),
}

async function updateService(request: UpdateServiceRequest): UpdateServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateService', 'PUT', '/api/v2/services/{ClusterId}/{ServiceName}', 'json', false, 'json', request);
}

model UpdateServiceAutoScalerRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', example='foo', position='Path'),
  max: int32(name='max', description='最大 replica 数，需要大于MinReplica', example='8', position='Body'),
  min: int32(name='min', description='最小 replica 数，需要大于0', example='2', position='Body'),
  scaleStrategies: [ 
    {
      metricName: string(name='metricName', example='qps'),
      service?: string(name='service', example='demo_svc'),
      threshold: float(name='threshold', example='100'),
    }
  ](name='scaleStrategies', position='Body'),
}

model UpdateServiceAutoScalerResponseBody = {
  message?: string(name='Message', example='Update auto scale for service [foo] successfully'),
  requestId?: string(name='RequestId', description='Id of the request', example='40325405-579C-4D82****'),
}

model UpdateServiceAutoScalerResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateServiceAutoScalerResponseBody(name='body'),
}

async function updateServiceAutoScaler(request: UpdateServiceAutoScalerRequest): UpdateServiceAutoScalerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateServiceAutoScaler', 'PUT', '/api/v2/services/{ClusterId}/{ServiceName}/autoscaler', 'json', false, 'json', request);
}

model UpdateServiceCronScalerRequest {
  clusterId: string(name='ClusterId', description='服务所在区域', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='服务名字', example='foo', position='Path'),
  excludeDates?: [ string ](name='ExcludeDates', description='需要排除的时间点的cron表达式', position='Body'),
  scaleJobs: [ 
    {
      name?: string(name='Name', example='scale-job-1'),
      schedule: string(name='Schedule', description='要执行伸缩任务的cron表达式', example='0 18 * * * *'),
      targetSize: int32(name='TargetSize', description='执行伸缩任务的目标replica', example='2'),
    }
  ](name='ScaleJobs', description='定时伸缩任务描述', position='Body'),
}

model UpdateServiceCronScalerResponseBody = {
  message?: string(name='Message', example='Update cron scaler for service [foo] successfully'),
  requestId?: string(name='RequestId', description='Id of the request', example='40325405-579C-4D82****'),
}

model UpdateServiceCronScalerResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateServiceCronScalerResponseBody(name='body'),
}

async function updateServiceCronScaler(request: UpdateServiceCronScalerRequest): UpdateServiceCronScalerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateServiceCronScaler', 'PUT', '/api/v2/services/{ClusterId}/{ServiceName}/cronscaler', 'json', false, 'json', request);
}

model UpdateServiceLabelRequest {
  clusterId: string(name='ClusterId', description='服务所在区域', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='服务名字', example='foo', position='Path'),
  labels: map[string]string(name='Labels', description='自定义服务标签', position='Body'),
}

model UpdateServiceLabelResponseBody = {
  message?: string(name='Message', description='返回信息。', example='Success.'),
  requestId?: string(name='RequestId', description='请求Id', example='40325405-579C-4D82****'),
}

model UpdateServiceLabelResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateServiceLabelResponseBody(name='body'),
}

async function updateServiceLabel(request: UpdateServiceLabelRequest): UpdateServiceLabelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateServiceLabel', 'PUT', '/api/v2/services/{ClusterId}/{ServiceName}/label', 'json', false, 'json', request);
}

model UpdateServiceMirrorRequest {
  clusterId: string(name='ClusterId', description='服务所在区域', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='服务名字', example='foo', position='Path'),
  ratio?: int32(name='Ratio', description='比例 [0, 100]', example='30', position='Body'),
  target?: [ string ](name='Target', description='服务实例列表', position='Body'),
}

model UpdateServiceMirrorResponseBody = {
  message?: string(name='Message', example='Traffic mirroring is updating for service [foo] in region [cn-shanghia], ratio [70%]'),
  requestId?: string(name='RequestId', description='Id of the request', example='40325405-579C-4D82***'),
}

model UpdateServiceMirrorResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateServiceMirrorResponseBody(name='body'),
}

async function updateServiceMirror(request: UpdateServiceMirrorRequest): UpdateServiceMirrorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateServiceMirror', 'PUT', '/api/v2/services/{ClusterId}/{ServiceName}/mirror', 'json', false, 'json', request);
}

model UpdateServiceSafetyLockRequest {
  clusterId: string(name='ClusterId', example='cn-beijing', position='Path'),
  serviceName: string(name='ServiceName', example='foo', position='Path'),
  lock: string(name='Lock', example='dangerous', position='Body'),
}

model UpdateServiceSafetyLockResponseBody = {
  message?: string(name='Message', example='service safety lock updated to dangerous'),
  requestId?: string(name='RequestId', example='E089D584-B6F4-50C4-9902-DA2295B7****'),
}

model UpdateServiceSafetyLockResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateServiceSafetyLockResponseBody(name='body'),
}

async function updateServiceSafetyLock(request: UpdateServiceSafetyLockRequest): UpdateServiceSafetyLockResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateServiceSafetyLock', 'PUT', '/api/v2/services/{ClusterId}/{ServiceName}/lock', 'json', false, 'json', request);
}

model UpdateServiceVersionRequest {
  clusterId: string(name='ClusterId', description='服务所在区域', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='服务名字', example='echo', position='Path'),
  version: int32(name='Version', example='1', position='Body'),
}

model UpdateServiceVersionResponseBody = {
  message?: string(name='Message', example='Service [foo] in region [cn-shanghai] is starting'),
  requestId?: string(name='RequestId', description='Id of the request', example='40325405-579C-4D82****'),
}

model UpdateServiceVersionResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateServiceVersionResponseBody(name='body'),
}

async function updateServiceVersion(request: UpdateServiceVersionRequest): UpdateServiceVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateServiceVersion', 'PUT', '/api/v2/services/{ClusterId}/{ServiceName}/version', 'json', false, 'json', request);
}

