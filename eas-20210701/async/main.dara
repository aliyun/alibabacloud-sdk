/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'eas';
  @version = '2021-07-01';
  @endpointRule = 'regional';
  @endpointMap = {
    cn-beijing = 'pai-eas.cn-beijing.aliyuncs.com',
    cn-zhangjiakou = 'pai-eas.cn-zhangjiakou.aliyuncs.com',
    cn-hangzhou = 'pai-eas.cn-hangzhou.aliyuncs.com',
    cn-shanghai = 'pai-eas.cn-shanghai.aliyuncs.com',
    cn-shenzhen = 'pai-eas.cn-shenzhen.aliyuncs.com',
    cn-hongkong = 'pai-eas.cn-hongkong.aliyuncs.com',
    ap-southeast-1 = 'pai-eas.ap-southeast-1.aliyuncs.com',
    ap-southeast-5 = 'pai-eas.ap-southeast-5.aliyuncs.com',
    us-east-1 = 'pai-eas.us-east-1.aliyuncs.com',
    us-west-1 = 'pai-eas.us-west-1.aliyuncs.com',
    eu-central-1 = 'pai-eas.eu-central-1.aliyuncs.com',
    ap-south-1 = 'pai-eas.ap-south-1.aliyuncs.com',
    cn-shanghai-finance-1 = 'pai-eas.cn-shanghai-finance-1.aliyuncs.com',
    cn-north-2-gov-1 = 'pai-eas.cn-north-2-gov-1.aliyuncs.com',
    cn-chengdu = 'pai-eas.cn-chengdu.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model ContainerInfo {
  currentReaon?: string(name='CurrentReaon'),
  currentStatus?: string(name='CurrentStatus'),
  currentTimestamp?: string(name='CurrentTimestamp'),
  image?: string(name='Image'),
  lastReason?: string(name='LastReason'),
  lastStatus?: string(name='LastStatus'),
  lastTimestamp?: string(name='LastTimestamp'),
  name?: string(name='Name'),
  port?: int32(name='Port'),
  ready?: boolean(name='Ready'),
  restartCount?: int32(name='RestartCount'),
}

model Group {
  accessToken?: string(name='AccessToken'),
  clusterId?: string(name='ClusterId'),
  createTime?: string(name='CreateTime'),
  internetEndpoint?: string(name='InternetEndpoint'),
  intranetEndpoint?: string(name='IntranetEndpoint'),
  name?: string(name='Name'),
  queueService?: string(name='QueueService'),
  updateTime?: string(name='UpdateTime'),
}

model Instance {
  currentAmount?: float(name='CurrentAmount', example='0.444'),
  hostIP?: string(name='HostIP'),
  hostName?: string(name='HostName'),
  innerIP?: string(name='InnerIP'),
  instanceName?: string(name='InstanceName'),
  instancePort?: int32(name='InstancePort'),
  isSpot?: boolean(name='IsSpot', example='false'),
  isolated?: boolean(name='Isolated', example='false'),
  lastState?: [  map[string]any ](name='LastState'),
  namespace?: string(name='Namespace'),
  originalAmount?: float(name='OriginalAmount', example='2.2'),
  readyProcesses?: int32(name='ReadyProcesses'),
  reason?: string(name='Reason'),
  resourceType?: string(name='ResourceType', example='PublicResource'),
  restartCount?: int32(name='RestartCount'),
  role?: string(name='Role', example='Standard'),
  startAt?: string(name='StartAt'),
  status?: string(name='Status'),
  tenantHostIP?: string(name='TenantHostIP', example='192.168.0.39'),
  tenantInstanceIP?: string(name='TenantInstanceIP', example='192.168.0.39'),
  totalProcesses?: int32(name='TotalProcesses'),
}

model Resource {
  clusterId?: string(name='ClusterId'),
  cpuCount?: int32(name='CpuCount'),
  createTime?: string(name='CreateTime'),
  extraData?: map[string]any(name='ExtraData'),
  gpuCount?: int32(name='GpuCount'),
  instanceCount?: int32(name='InstanceCount'),
  message?: string(name='Message'),
  postPaidInstanceCount?: int32(name='PostPaidInstanceCount'),
  prePaidInstanceCount?: int32(name='PrePaidInstanceCount'),
  resourceId?: string(name='ResourceId'),
  resourceName?: string(name='ResourceName'),
  resourceType?: string(name='ResourceType'),
  status?: string(name='Status'),
  updateTime?: string(name='UpdateTime'),
}

model ResourceInstance {
  arch?: string(name='Arch'),
  autoRenewal?: boolean(name='AutoRenewal'),
  chargeType?: string(name='ChargeType'),
  createTime?: string(name='CreateTime'),
  expiredTime?: string(name='ExpiredTime'),
  instanceCpuCount?: int32(name='InstanceCpuCount'),
  instanceGpuCount?: int32(name='InstanceGpuCount'),
  instanceGpuMemory?: string(name='InstanceGpuMemory'),
  instanceId?: string(name='InstanceId'),
  instanceIp?: string(name='InstanceIp'),
  instanceMemory?: string(name='InstanceMemory'),
  instanceName?: string(name='InstanceName'),
  instanceStatus?: string(name='InstanceStatus'),
  instanceSystemDiskSize?: int32(name='InstanceSystemDiskSize'),
  instanceTenantIp?: string(name='InstanceTenantIp'),
  instanceType?: string(name='InstanceType'),
  instanceUsedCpu?: float(name='InstanceUsedCpu'),
  instanceUsedGpu?: float(name='InstanceUsedGpu'),
  instanceUsedGpuMemory?: string(name='InstanceUsedGpuMemory'),
  instanceUsedMemory?: string(name='InstanceUsedMemory'),
  region?: string(name='Region'),
  resourceId?: string(name='ResourceId'),
  zone?: string(name='Zone'),
}

model ResourceInstanceWorker {
  cpuLimit?: int32(name='CpuLimit'),
  cpuRequest?: int32(name='CpuRequest'),
  gpuLimit?: int32(name='GpuLimit'),
  gpuRequest?: int32(name='GpuRequest'),
  memoryLimit?: int32(name='MemoryLimit'),
  memoryRquest?: int32(name='MemoryRquest'),
  name?: string(name='Name'),
  ready?: boolean(name='Ready'),
  restartCount?: int32(name='RestartCount'),
  serviceName?: string(name='ServiceName'),
  startTime?: string(name='StartTime'),
  status?: string(name='Status'),
}

model Service {
  accessToken?: string(name='AccessToken'),
  appConfig?: string(name='AppConfig'),
  appSpecName?: string(name='AppSpecName'),
  appType?: string(name='AppType'),
  appVersion?: string(name='AppVersion'),
  callerUid?: string(name='CallerUid'),
  cpu?: int32(name='Cpu'),
  createTime?: string(name='CreateTime'),
  currentVersion?: int32(name='CurrentVersion'),
  extraData?: string(name='ExtraData'),
  gpu?: int32(name='Gpu'),
  image?: string(name='Image'),
  internetEndpoint?: string(name='InternetEndpoint'),
  intranetEndpoint?: string(name='IntranetEndpoint'),
  labels?: [ 
    {
      labelKey?: string(name='LabelKey'),
      labelValue?: string(name='LabelValue'),
    }
  ](name='Labels'),
  latestVersion?: int32(name='LatestVersion'),
  memory?: int32(name='Memory'),
  message?: string(name='Message'),
  namespace?: string(name='Namespace'),
  parentUid?: string(name='ParentUid'),
  pendingInstance?: int32(name='PendingInstance'),
  reason?: string(name='Reason'),
  region?: string(name='Region'),
  requestId?: string(name='RequestId'),
  resource?: string(name='Resource'),
  resourceAlias?: string(name='ResourceAlias'),
  role?: string(name='Role'),
  roleAttrs?: string(name='RoleAttrs'),
  runningInstance?: int32(name='RunningInstance'),
  safetyLock?: string(name='SafetyLock'),
  secondaryInternetEndpoint?: string(name='SecondaryInternetEndpoint'),
  secondaryIntranetEndpoint?: string(name='SecondaryIntranetEndpoint'),
  serviceConfig?: string(name='ServiceConfig'),
  serviceGroup?: string(name='ServiceGroup'),
  serviceId?: string(name='ServiceId'),
  serviceName?: string(name='ServiceName'),
  serviceUid?: string(name='ServiceUid'),
  source?: string(name='Source'),
  status?: string(name='Status'),
  totalInstance?: int32(name='TotalInstance'),
  updateTime?: string(name='UpdateTime'),
  weight?: int32(name='Weight'),
  workspaceId?: string(name='WorkspaceId'),
}

model CommitServiceRequest {
  clusterId?: string(name='ClusterId', example='cn-beijing', position='Path'),
  serviceName?: string(name='ServiceName', example='foo', position='Path'),
}

model CommitServiceResponseBody = {
  message?: string(name='Message', example='Success'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82****'),
}

model CommitServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CommitServiceResponseBody(name='body'),
}

async function commitService(request: CommitServiceRequest): CommitServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CommitService', 'PUT', '/api/v2/services/{ClusterId}/{ServiceName}/commit', 'json', false, 'json', request);
}

model CreateAppServiceRequest {
  quotaId?: string(name='QuotaId', description='The quota ID.', example='abcdef', position='Query'),
  workspaceId?: string(name='WorkspaceId', description='The workspace ID.', example='123456', position='Query'),
  appType: string(name='AppType', description='The application service type.

Valid values:

*   LLM

    <!-- -->

    <!-- -->

    <!-- -->', example='LLM', position='Body'),
  appVersion?: string(name='AppVersion', description='The application version.', example='v1', position='Body'),
  config?: map[string]any(name='Config', description='Additional configurations that are required for the service deployment.', position='Body'),
  replicas: int32(name='Replicas', description='The number of instances.', example='1', position='Body'),
  serviceName: string(name='ServiceName', description='The service name.', example='foo', position='Body'),
  serviceSpec: string(name='ServiceSpec', description='The service specifications.', example='llama_7b_fp16', position='Body'),
}

model CreateAppServiceResponseBody = {
  internetEndpoint?: string(name='InternetEndpoint', description='The public endpoint of the service.', example='http://pai-eas.cn-shanghai.****'),
  intranetEndpoint?: string(name='IntranetEndpoint', description='The internal endpoint of the service.', example='http://pai-eas-vpc.cn-shanghai.****'),
  region?: string(name='Region', description='The region ID of the service.', example='cn-shanghai'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
  serviceId?: string(name='ServiceId', description='The service ID.', example='eas-m-aaxxxddf'),
  serviceName?: string(name='ServiceName', description='The service name.', example='foo'),
  status?: string(name='Status', description='The service state.', example='Creating'),
}

model CreateAppServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAppServiceResponseBody(name='body'),
}

async function createAppService(request: CreateAppServiceRequest): CreateAppServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateAppService', 'POST', '/api/v2/app_services', 'json', false, 'json', request);
}

model CreateBenchmarkTaskRequest {
  body?: string(name='body', description='The request body. The body includes the parameters that are set to create a stress testing task.', example='{
    "base": {
        "duration": 600
    },
    "service": {
        "serviceName": "test_service",
        "requestToken": "test_token"
    },
    "data": {
        "path": "https://larec-benchmark-cd.oss-cn-chengdu.aliyuncs.com/youbei/sv_dbmtl/data/youbei.warmup.tf.bin",
        "dataType": "binary"
    },
    "optional": {
       "maxRt": 100
    }
}', position='Body'),
}

model CreateBenchmarkTaskResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Benchmark  task [foo] is Creating'),
  region?: string(name='Region', description='The ID of the region where the stress testing task is performed.', example='cn-shanghai'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82********'),
  taskName?: string(name='TaskName', description='The name of the stress testing task.', example='benchmark-larec-test-1076'),
}

model CreateBenchmarkTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateBenchmarkTaskResponseBody(name='body'),
}

async function createBenchmarkTask(request: CreateBenchmarkTaskRequest): CreateBenchmarkTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateBenchmarkTask', 'POST', '/api/v2/benchmark-tasks', 'json', false, 'json', request);
}

model CreateGatewayRequest {
  resourceName?: string(name='ResourceName', description='The name of the resource group.', example='eas-r-4gt8twzwllfo******', position='Query'),
  enableInternet?: boolean(name='EnableInternet', description='Specifies whether to enable Internet access. Default value: false.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='false', position='Body'),
  enableIntranet?: boolean(name='EnableIntranet', description='Specifies whether to enable internal network access. Default value: true.', example='true', position='Body'),
  instanceType: string(name='InstanceType', description='The instance type used for the private gateway.', example='ecs.c6.4xlarge', position='Body'),
  name?: string(name='Name', description='The private gateway alias.', example='mygateway1', position='Body'),
}

model CreateGatewayResponseBody = {
  clusterId?: string(name='ClusterId', description='The region ID of the private gateway.', example='cn-hangzhou'),
  gatewayId?: string(name='GatewayId', description='The private gateway ID.', example='gw-1uhcqmsc7x22******'),
  message?: string(name='Message', description='The returned message.', example='Successfully create gateway.'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model CreateGatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateGatewayResponseBody(name='body'),
}

async function createGateway(request: CreateGatewayRequest): CreateGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateGateway', 'POST', '/api/v2/gateways', 'json', false, 'json', request);
}

model CreateGatewayIntranetLinkedVpcRequest {
  clusterId: string(name='ClusterId', description='The region ID of the private gateway.', example='cn-hangzhou', position='Path'),
  gatewayId: string(name='GatewayId', description='The private gateway ID.', example='gw-1uhcqmsc7x22******', position='Path'),
  vSwitchId?: string(name='VSwitchId', description='The vSwitch ID.', example='vsw-8vbqn2at0kljjxxxx****', position='Query'),
  vpcId?: string(name='VpcId', description='The virtual private cloud (VPC) ID.', example='vpc-uf66uio7md****', position='Query'),
}

model CreateGatewayIntranetLinkedVpcResponseBody = {
  gatewayId?: string(name='GatewayId', description='The private gateway ID.', example='gw-1uhcqmsc7x22******'),
  message?: string(name='Message', description='The returned message.', example='Successfully add intranet linked vpc for gateway'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model CreateGatewayIntranetLinkedVpcResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateGatewayIntranetLinkedVpcResponseBody(name='body'),
}

async function createGatewayIntranetLinkedVpc(request: CreateGatewayIntranetLinkedVpcRequest): CreateGatewayIntranetLinkedVpcResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateGatewayIntranetLinkedVpc', 'POST', '/api/v2/gateways/{ClusterId}/{GatewayId}/intranet_endpoint_linked_vpc', 'json', false, 'json', request);
}

model CreateResourceRequest {
  autoRenewal?: boolean(name='AutoRenewal', description='Specifies whether to enable auto-renewal. Valid values: false (default)

*   true', example='false', position='Body'),
  chargeType?: string(name='ChargeType', description='The billing method of the instance. Valid values:

*   PrePaid: the subscription billing method.
*   PostPaid: the pay-as-you-go billing method.', example='PostPaid', position='Body'),
  ecsInstanceCount?: int32(name='EcsInstanceCount', description='The number of ECS instances.', example='5', position='Body'),
  ecsInstanceType?: string(name='EcsInstanceType', description='The type of the Elastic Compute Service (ECS) instance.', example='ecs.c6.8xlarge', position='Body'),
  resourceType?: string(name='ResourceType', example='Dedicated', position='Body'),
  selfManagedResourceOptions?: {
    externalClusterId?: string(name='ExternalClusterId', description='自运维集群Id', example='cf0386f250f2545689ca7fdd1cd******'),
    nodeMatchLabels?: map[string]string(name='NodeMatchLabels', description='节点的标签键值对集合'),
    nodeTolerations?: [ 
      {
        effect?: string(name='effect', description='效果', example='NoSchedule'),
        key?: string(name='key', description='键名', example='key1'),
        operator?: string(name='operator', description='键名和键值的关系', example='Equal'),
        value?: string(name='value', description='键值', example='value1'),
      }
    ](name='NodeTolerations', description='节点污点的容忍度列表'),
    roleName?: string(name='RoleName', description='授予云服务PAI-EAS相关权限的RAM角色名称', example='clusterrole'),
  }(name='SelfManagedResourceOptions', description='自运维资源组配置选项', position='Body'),
  systemDiskSize?: int32(name='SystemDiskSize', description='The size of the system disk. Unit: GiB. Valid values: 200 to 2000. Default value: 200.', example='200', minimum=200, maximum=2000, position='Body'),
  zone?: string(name='Zone', description='The zone to which the instance belongs.', example='cn-shanghai-f', position='Body'),
}

model CreateResourceResponseBody = {
  clusterId?: string(name='ClusterId', example='cn-shanghai'),
  instanceIds?: [ string ](name='InstanceIds'),
  ownerUid?: string(name='OwnerUid', example='14401087478****'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82****'),
  resourceId?: string(name='ResourceId', example='eas-r-h7lcw24dyqztwxxxxxx'),
  resourceName?: string(name='ResourceName', example='MyResource'),
}

model CreateResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateResourceResponseBody(name='body'),
}

async function createResource(request: CreateResourceRequest): CreateResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateResource', 'POST', '/api/v2/resources', 'json', false, 'json', request);
}

model CreateResourceInstancesRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  resourceId: string(name='ResourceId', example='eas-r-asdasdasd', position='Path'),
  autoRenewal?: boolean(name='AutoRenewal', example='false', position='Body'),
  chargeType: string(name='ChargeType', example='PrePaid', position='Body'),
  ecsInstanceCount: int32(name='EcsInstanceCount', example='5', position='Body'),
  ecsInstanceType: string(name='EcsInstanceType', example='ecs.s6-c1m2.xlarge', position='Body'),
  systemDiskSize?: int32(name='SystemDiskSize', example='200', minimum=200, maximum=2000, position='Body'),
  userData?: string(name='UserData', example='x112223333', position='Body'),
  zone?: string(name='Zone', example='cn-shanghai-f', position='Body'),
}

model CreateResourceInstancesResponseBody = {
  instanceIds?: [ string ](name='InstanceIds'),
  message?: string(name='Message', example='Create 5 new ecs instance(s) in resource [eas-r-asdasdasd] successfully'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82****'),
}

model CreateResourceInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateResourceInstancesResponseBody(name='body'),
}

async function createResourceInstances(request: CreateResourceInstancesRequest): CreateResourceInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateResourceInstances', 'POST', '/api/v2/resources/{ClusterId}/{ResourceId}/instances', 'json', false, 'json', request);
}

model CreateResourceLogRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  resourceId: string(name='ResourceId', example='eas-r-asdasdasd', position='Path'),
  logStore?: string(name='LogStore', example='access_log', position='Body'),
  projectName?: string(name='ProjectName', example='eas-r-asdasdasd-sls', position='Body'),
}

model CreateResourceLogResponseBody = {
  message?: string(name='Message', example='Resource [eas-r-asdasdasd] is deleted.'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82****'),
}

model CreateResourceLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateResourceLogResponseBody(name='body'),
}

async function createResourceLog(request: CreateResourceLogRequest): CreateResourceLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateResourceLog', 'POST', '/api/v2/resources/{ClusterId}/{ResourceId}/log', 'json', false, 'json', request);
}

model CreateServiceRequest {
  develop?: string(name='Develop', description='Specifies whether to enter development mode.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true', position='Query'),
  labels?: map[string]string(name='Labels', shrink='json', position='Query'),
  workspaceId?: string(name='WorkspaceId', example='123456', position='Query'),
  body?: string(name='body', example='{
      "name": "foo",
      "model_path": "http://path/to/model.tar.gz",
      "processor": "tensorflow_cpu",
      "metadata": {
            "instance": 2,
            "memory": 7000,
            "cpu": 4
      }
}', position='Body'),
}

model CreateServiceResponseBody = {
  internetEndpoint?: string(name='InternetEndpoint', example='http://pai-eas.vpc.cn-shanghai.****'),
  intranetEndpoint?: string(name='IntranetEndpoint', example='http://pai-eas.cn-shanghai.****'),
  region?: string(name='Region', example='cn-shanghai'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82****'),
  serviceId?: string(name='ServiceId', example='eas-m-aaxxxddf'),
  serviceName?: string(name='ServiceName', example='yourname'),
  status?: string(name='Status', example='Creating'),
}

model CreateServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateServiceResponseBody(name='body'),
}

async function createService(request: CreateServiceRequest): CreateServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateService', 'POST', '/api/v2/services', 'json', false, 'json', request);
}

model CreateServiceAutoScalerRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', example='foo', position='Path'),
  behavior?: {
    onZero?: {
      scaleDownGracePeriodSeconds?: int32(name='scaleDownGracePeriodSeconds', description='The time window that is required before the number of instances is reduced to 0. The number of instances can be reduced to 0 only if no request is available or no traffic exists in the specified time window. Default value: 600.', example='600'),
      scaleUpActivationReplicas?: int32(name='scaleUpActivationReplicas', description='The number of instances that you want to create at a time if the number of instances is scaled out from 0. Default value: 1.', example='1'),
    }(name='onZero', description='The operation that reduces the number of instances to 0.'),
    scaleDown?: {
      stabilizationWindowSeconds?: int32(name='stabilizationWindowSeconds', description='The time window that is required before the scale-in operation is performed. The scale-in operation can be performed only if the specified metric drops below the specified threshold in the specified time window. Default value: 300.', example='300'),
    }(name='scaleDown', description='The scale-in operation.'),
    scaleUp?: {
      stabilizationWindowSeconds?: int32(name='stabilizationWindowSeconds', description='The time window that is required before the scale-out operation is performed. The scale-out operation can be performed only if the specified metric exceeds the specified threshold in the specified time window. Default value: 0.', example='0'),
    }(name='scaleUp', description='The scale-out operation.'),
  }(name='behavior', description='The Autoscaler operation.', position='Body'),
  max: int32(name='max', description='The maximum number of instances. The value must be greater than that of the min parameter.', example='8', position='Body'),
  min: int32(name='min', description='The minimum number of instances. The value must be greater than 0.', example='2', position='Body'),
  scaleStrategies: [ 
    {
      metricName: string(name='metricName', description='The name of the metric for triggering auto scaling. Valid values:

*   QPS: the queries per second (QPS) for an individual instance.
*   CPU: the CPU utilization.', example='QPS'),
      service?: string(name='service', description='The service for which the metric is specified. If you do not set this parameter, the current service is specified by default.', example='demo_svc'),
      threshold: float(name='threshold', description='The threshold of the metric that triggers auto scaling.

*   If you set metricName to QPS, scale-out is triggered when the average QPS for a single instance is greater than this threshold.
*   If you set metricName to CPU, scale-out is triggered when the average CPU utilization for a single instance is greater than this threshold.', example='10'),
    }
  ](name='scaleStrategies', description='The Autoscaler strategies.', position='Body'),
}

model CreateServiceAutoScalerResponseBody = {
  message?: string(name='Message', example='Succeed to auto scale service [foo]'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82****'),
}

model CreateServiceAutoScalerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateServiceAutoScalerResponseBody(name='body'),
}

async function createServiceAutoScaler(request: CreateServiceAutoScalerRequest): CreateServiceAutoScalerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateServiceAutoScaler', 'POST', '/api/v2/services/{ClusterId}/{ServiceName}/autoscaler', 'json', false, 'json', request);
}

model CreateServiceCronScalerRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', example='foo', position='Path'),
  excludeDates?: [ string ](name='ExcludeDates', position='Body'),
  scaleJobs: [ 
    {
      name?: string(name='Name', example='scale-job-1'),
      schedule: string(name='Schedule', example='0 18 * * * *'),
      targetSize: int32(name='TargetSize', example='1'),
    }
  ](name='ScaleJobs', position='Body'),
}

model CreateServiceCronScalerResponseBody = {
  message?: string(name='Message', example='Create cron scaler for service [foo] successfully'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82****'),
}

model CreateServiceCronScalerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateServiceCronScalerResponseBody(name='body'),
}

async function createServiceCronScaler(request: CreateServiceCronScalerRequest): CreateServiceCronScalerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateServiceCronScaler', 'POST', '/api/v2/services/{ClusterId}/{ServiceName}/cronscaler', 'json', false, 'json', request);
}

model CreateServiceMirrorRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', example='foo', position='Path'),
  ratio?: int32(name='Ratio', example='30', position='Body'),
  target?: [ string ](name='Target', position='Body'),
}

model CreateServiceMirrorResponseBody = {
  message?: string(name='Message', example='Traffic mirroring is ON for service [foo] in region [cn-shanghia], ratio [70%]'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82***'),
}

model CreateServiceMirrorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateServiceMirrorResponseBody(name='body'),
}

async function createServiceMirror(request: CreateServiceMirrorRequest): CreateServiceMirrorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateServiceMirror', 'POST', '/api/v2/services/{ClusterId}/{ServiceName}/mirror', 'json', false, 'json', request);
}

model DeleteBenchmarkTaskRequest {
  clusterId: string(name='ClusterId', description='The ID of the region where the stress testing task is performed.', example='cn-shanghai', position='Path'),
  taskName: string(name='TaskName', description='The name of the stress testing task. For more information about how to query the name of a stress testing task, see [ListBenchmarkTask](~~432976~~).', example='benchmark-larec-test-2b11', position='Path'),
}

model DeleteBenchmarkTaskResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Benchmark task [benchmark-test-service-234c] is Deleting'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model DeleteBenchmarkTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteBenchmarkTaskResponseBody(name='body'),
}

async function deleteBenchmarkTask(request: DeleteBenchmarkTaskRequest): DeleteBenchmarkTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteBenchmarkTask', 'DELETE', '/api/v2/benchmark-tasks/{ClusterId}/{TaskName}', 'json', false, 'json', request);
}

model DeleteGatewayRequest {
  clusterId: string(name='ClusterId', description='The region ID of the private gateway.', example='cn-hangzhou', position='Path'),
  gatewayId: string(name='GatewayId', description='The private gateway ID.', example='gw-1uhcqmsc7x22******', position='Path'),
}

model DeleteGatewayResponseBody = {
  gatewayId?: string(name='GatewayId', description='The private gateway ID.', example='gw-1uhcqmsc7x22******'),
  message?: string(name='Message', description='The returned message.', example='Gateway is deleted.'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model DeleteGatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteGatewayResponseBody(name='body'),
}

async function deleteGateway(request: DeleteGatewayRequest): DeleteGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteGateway', 'DELETE', '/api/v2/gateways/{ClusterId}/{GatewayId}', 'json', false, 'json', request);
}

model DeleteGatewayIntranetLinkedVpcRequest {
  clusterId: string(name='ClusterId', description='The region ID of the private gateway.', example='cn-hangzhou', position='Path'),
  gatewayId: string(name='GatewayId', description='The private gateway ID.', example='gw-1uhcqmsc7x22******', position='Path'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-8vbqn2at0kljjxxxx****', position='Query'),
  vpcId?: string(name='VpcId', description='The virtual private cloud (VPC) ID.', example='vpc-uf66uio7md****', position='Query'),
}

model DeleteGatewayIntranetLinkedVpcResponseBody = {
  gatewayId?: string(name='GatewayId', description='The private gateway ID.', example='gw-1uhcqmsc7x22******'),
  message?: string(name='Message', description='The returned message.', example='Successfully delete intranet linked vpc for gateway'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model DeleteGatewayIntranetLinkedVpcResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteGatewayIntranetLinkedVpcResponseBody(name='body'),
}

async function deleteGatewayIntranetLinkedVpc(request: DeleteGatewayIntranetLinkedVpcRequest): DeleteGatewayIntranetLinkedVpcResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteGatewayIntranetLinkedVpc', 'DELETE', '/api/v2/gateways/{ClusterId}/{GatewayId}/intranet_endpoint_linked_vpc', 'json', false, 'json', request);
}

model DeleteResourceRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  resourceId: string(name='ResourceId', example='eas-r-asdasdasd', position='Path'),
}

model DeleteResourceResponseBody = {
  message?: string(name='Message', example='Resource [eas-r-asdasdasd] is deleted.'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82-9624-EC2B1779848E'),
}

model DeleteResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteResourceResponseBody(name='body'),
}

async function deleteResource(request: DeleteResourceRequest): DeleteResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteResource', 'DELETE', '/api/v2/resources/{ClusterId}/{ResourceId}', 'json', false, 'json', request);
}

model DeleteResourceDLinkRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  resourceId: string(name='ResourceId', example='eas-r-asdasdasd', position='Path'),
}

model DeleteResourceDLinkResponseBody = {
  message?: string(name='Message', example='Network interfaces are deleting'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82****'),
}

model DeleteResourceDLinkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteResourceDLinkResponseBody(name='body'),
}

async function deleteResourceDLink(request: DeleteResourceDLinkRequest): DeleteResourceDLinkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteResourceDLink', 'DELETE', '/api/v2/resources/{ClusterId}/{ResourceId}/dlink', 'json', false, 'json', request);
}

model DeleteResourceInstancesRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  resourceId: string(name='ResourceId', example='eas-r-asdasdasd', position='Path'),
  allFailed?: boolean(name='AllFailed', example='true', position='Query'),
  instanceList?: string(name='InstanceList', example='eas-i-xxxxxxx,eas-i-xxxxxxx', position='Query'),
}

model DeleteResourceInstancesResponseBody = {
  message?: string(name='Message', example='Instances eas-i-011227132046,eas-i-011227132046 are deleting'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82****'),
}

model DeleteResourceInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteResourceInstancesResponseBody(name='body'),
}

async function deleteResourceInstances(request: DeleteResourceInstancesRequest): DeleteResourceInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteResourceInstances', 'DELETE', '/api/v2/resources/{ClusterId}/{ResourceId}/instances', 'json', false, 'json', request);
}

model DeleteResourceLogRequest {
  clusterId: string(name='ClusterId', description='The ID of the region to which the resource group belongs.', example='cn-shanghai', position='Path'),
  resourceId: string(name='ResourceId', description='The ID of the resource group. For more information about how to query the ID of a resource group, see [ListResources](~~412133~~).', example='eas-r-asdasdasd', position='Path'),
}

model DeleteResourceLogResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Log service for resource [eas-r-asdasdasd] is deleting'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model DeleteResourceLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteResourceLogResponseBody(name='body'),
}

async function deleteResourceLog(request: DeleteResourceLogRequest): DeleteResourceLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteResourceLog', 'DELETE', '/api/v2/resources/{ClusterId}/{ResourceId}/log', 'json', false, 'json', request);
}

model DeleteServiceRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', example='foo', position='Path'),
}

model DeleteServiceResponseBody = {
  message?: string(name='Message', example='Service [foo] in region [cn-shanghai] is terminating'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82****'),
}

model DeleteServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteServiceResponseBody(name='body'),
}

async function deleteService(request: DeleteServiceRequest): DeleteServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteService', 'DELETE', '/api/v2/services/{ClusterId}/{ServiceName}', 'json', false, 'json', request);
}

model DeleteServiceAutoScalerRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', example='foo', position='Path'),
}

model DeleteServiceAutoScalerResponseBody = {
  message?: string(name='Message', example='Autoscaler for service [foo] deleted successfully'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82****'),
}

model DeleteServiceAutoScalerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteServiceAutoScalerResponseBody(name='body'),
}

async function deleteServiceAutoScaler(request: DeleteServiceAutoScalerRequest): DeleteServiceAutoScalerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteServiceAutoScaler', 'DELETE', '/api/v2/services/{ClusterId}/{ServiceName}/autoscaler', 'json', false, 'json', request);
}

model DeleteServiceCronScalerRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', example='foo', position='Path'),
}

model DeleteServiceCronScalerResponseBody = {
  message?: string(name='Message', example='Cronscaler for service [foo] deleted successfully'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82****'),
}

model DeleteServiceCronScalerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteServiceCronScalerResponseBody(name='body'),
}

async function deleteServiceCronScaler(request: DeleteServiceCronScalerRequest): DeleteServiceCronScalerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteServiceCronScaler', 'DELETE', '/api/v2/services/{ClusterId}/{ServiceName}/cronscaler', 'json', false, 'json', request);
}

model DeleteServiceInstancesRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', example='foo', position='Path'),
  container?: string(name='Container', description='The name of the container whose process needs to be restarted. This parameter takes effect only if the SoftRestart parameter is set to true.', example='worker0', position='Query'),
  instanceList: string(name='InstanceList', example='foo-rdsbxxxx,foo-rdsaxxxx', position='Query'),
  softRestart?: boolean(name='SoftRestart', description='Specifies whether to restart only the container process without recreating the instance. Default value: false. Valid values: true and false.', example='true', position='Query'),
}

model DeleteServiceInstancesResponseBody = {
  message?: string(name='Message', example='Instance(s) [foo-rdsb,foo-rdsa]  for service [foo] in region [cn-shanghai] was deleted successfully'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82****'),
}

model DeleteServiceInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteServiceInstancesResponseBody(name='body'),
}

async function deleteServiceInstances(request: DeleteServiceInstancesRequest): DeleteServiceInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteServiceInstances', 'DELETE', '/api/v2/services/{ClusterId}/{ServiceName}/instances', 'json', false, 'json', request);
}

model DeleteServiceLabelRequest {
  clusterId: string(name='ClusterId', description='The ID of the region where the service is deployed.', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='The service name. For more information about how to query the service name, see [ListServices](~~412109~~).', example='foo', position='Path'),
  keys: [ string ](name='Keys', description='The service tags that you want to delete.', shrink='simple', position='Query'),
}

model DeleteServiceLabelResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Succeed to delete service [service_from_zxxx] labels.'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model DeleteServiceLabelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteServiceLabelResponseBody(name='body'),
}

async function deleteServiceLabel(request: DeleteServiceLabelRequest): DeleteServiceLabelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteServiceLabel', 'DELETE', '/api/v2/services/{ClusterId}/{ServiceName}/label', 'json', false, 'json', request);
}

model DeleteServiceMirrorRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', example='foo', position='Path'),
}

model DeleteServiceMirrorResponseBody = {
  message?: string(name='Message', example='Traffic mirroring is OFF for service [foo] in region [cn-shanghia], ratio [70%]'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82***'),
}

model DeleteServiceMirrorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteServiceMirrorResponseBody(name='body'),
}

async function deleteServiceMirror(request: DeleteServiceMirrorRequest): DeleteServiceMirrorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteServiceMirror', 'DELETE', '/api/v2/services/{ClusterId}/{ServiceName}/mirror', 'json', false, 'json', request);
}

model DescribeBenchmarkTaskRequest {
  clusterId: string(name='ClusterId', description='The ID of the region where the stress testing task is performed.', example='cn-shanghai', position='Path'),
  taskName: string(name='TaskName', description='The name of the stress testing task. For more information about how to query the name of a stress testing task, see [ListBenchmarkTask](~~432976~~).', example='benchmark-larec-test-eac4', position='Path'),
}

model DescribeBenchmarkTaskResponseBody = {
  availableAgent?: long(name='AvailableAgent', description='The number of instances that you can test.', example='4'),
  callerUid?: string(name='CallerUid', description='The ID of the operation caller.', example='1640133467****'),
  desiredAgent?: long(name='DesiredAgent', description='The number of instances that you want to test.', example='4'),
  endpoint?: string(name='Endpoint', description='The endpoint of the service gateway.', example='192342311234.pai-eas.cn-chengdu.aliyuncs.com'),
  message?: string(name='Message', description='The returned message.', example='Benchmar task is Running'),
  parentUid?: string(name='ParentUid', description='The ID of the Alibaba Cloud account that is used to call the operation.', example='1029728669****'),
  reason?: string(name='Reason', description='The event or reason that causes the current state of the stress testing task.', example='RUNNING'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
  serviceName?: string(name='ServiceName', description='The name of the service that you want to test.', example='foo'),
  status?: string(name='Status', description='The state of the stress testing task.

Valid values:

*   Creating

    <!-- -->

    <!-- -->

    <!-- -->

*   Starting

    <!-- -->

    <!-- -->

    <!-- -->

*   DeleteFailed

    <!-- -->

    <!-- -->

    <!-- -->

*   Running

    <!-- -->

    <!-- -->

    <!-- -->

*   Stopping

    <!-- -->

    <!-- -->

    <!-- -->

*   Error

    <!-- -->

    <!-- -->

    <!-- -->

*   Updating

    <!-- -->

    <!-- -->

    <!-- -->

*   Deleting

    <!-- -->

    <!-- -->

    <!-- -->

*   CreateFailed

    <!-- -->

    <!-- -->

    <!-- -->', example='Running'),
  taskId?: string(name='TaskId', description='The ID of the stress testing task.', example='eas-b-gv4y86u****'),
  taskName?: string(name='TaskName', description='The name of the stress testing task.', example='benchmark-larec-test-ae70'),
  token?: string(name='Token', description='The token for authentication when a stress testing task is created.', example='6062787a-9301****'),
}

model DescribeBenchmarkTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBenchmarkTaskResponseBody(name='body'),
}

async function describeBenchmarkTask(request: DescribeBenchmarkTaskRequest): DescribeBenchmarkTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeBenchmarkTask', 'GET', '/api/v2/benchmark-tasks/{ClusterId}/{TaskName}', 'json', false, 'json', request);
}

model DescribeBenchmarkTaskReportRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  taskName: string(name='TaskName', example='benchmark-larec-test-015d', position='Path'),
  reportType?: string(name='ReportType', example='report', position='Query'),
}

model DescribeBenchmarkTaskReportResponseBody = {
  data?: any(name='Data', example='{
    "TimestampList": ["int64"],
    "QPSList": ["float32"],
    "RTList": [
      {
        "AVG": "float32",
        "TP100": "float32",
        "TP99": "float32",
        "TP90": "float32",
        "TP50": "float32",
        "TP10": "float32"
      }
    ],
    "TrafficList": [
      {
        "Send": "float64",
        "Receive": "float64"
      }
    ],
    "StatusCode": {
      "200": "uint64",
      "450": "uint64",
      "500": "uint64"
    },
    "Count": "uint64",
    "Total": "float64",
    "MinRT": "float32",
    "AvgRT": "float32",
    "MaxRT": "float32",
    "QPS": "float32",
    "TotalSend": "float64",
    "TotalReceive": "float64",
    "RTDistribution": [
      {
        "Latency": "float32",
        "Percentage": "int"
      }
    ],
    "RTHistogram": [
      {
        "Count": "int",
        "Mark": "float32",
        "Frequency": "float32"
      }
    ]
  }'),
  reportUrl?: string(name='ReportUrl', example='http://eas-benchmark.oss-cn-chengdu.aliyuncs.com/summary/benchmark-larec-test-015d-10007.html'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82********'),
}

model DescribeBenchmarkTaskReportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBenchmarkTaskReportResponseBody(name='body'),
}

async function describeBenchmarkTaskReport(request: DescribeBenchmarkTaskReportRequest): DescribeBenchmarkTaskReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeBenchmarkTaskReport', 'GET', '/api/v2/benchmark-tasks/{ClusterId}/{TaskName}/report', 'json', false, 'json', request);
}

model DescribeGatewayRequest {
  clusterId: string(name='ClusterId', example='cn-hangzhou', position='Path'),
  gatewayId: string(name='GatewayId', example='gw-1uhcqmsc7x22******', position='Path'),
}

model DescribeGatewayResponseBody = {
  callerUid?: string(name='CallerUid', example='20123*******'),
  createTime?: string(name='CreateTime', description='网关创建时间', example='2020-05-19T14:19:42Z'),
  externalClusterId?: string(name='ExternalClusterId', example='c935eadf284c14c2da57a2a13ad6******'),
  gatewayId?: string(name='GatewayId', description='网关ID', example='gw-1uhcqmsc7x22******'),
  gatewayName?: string(name='GatewayName', example='mygateway1'),
  instanceType?: string(name='InstanceType', description='网关创建的实例种类', example='ecs.c6.4xlarge'),
  internetAclPolicyList?: [ 
    {
      comment?: string(name='Comment', description='The description.', example='test'),
      entry?: string(name='Entry', description='The accessible CIDR block.', example='192.168.1.1/32'),
      status?: string(name='Status', description='The state of the private gateway.

Valid values:

*   Creating

    <!-- -->

    <!-- -->

    <!-- -->

*   Running

    <!-- -->

    <!-- -->

    <!-- -->', example='Running'),
    }
  ](name='InternetAclPolicyList', description='The Internet access control policies.'),
  internetDomain?: string(name='InternetDomain', description='网关内部域名', example='gw-1uhcqmsc7x22******-1801786532******.cn-hangzhou.pai-eas.aliyuncs.com'),
  internetEnabled?: boolean(name='InternetEnabled', example='true'),
  intranetDomain?: string(name='IntranetDomain', description='网关外部域名', example='gw-1uhcqmsc7x22******-1801786532******-vpc.cn-hangzhou.pai-eas.aliyuncs.com'),
  intranetEnabled?: boolean(name='IntranetEnabled', example='true'),
  intranetLinkedVpcList?: [ 
    {
      ip?: string(name='Ip', description='The IP address.', example='192.168.10.11'),
      securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group.', example='sg-2ze4pgstgszvgq******'),
      status?: string(name='Status', description='The state of the private gateway.

Valid values:

*   Creating

    <!-- -->

    <!-- -->

    <!-- -->

*   Running

    <!-- -->

    <!-- -->

    <!-- -->', example='Running'),
      vSwitchId?: string(name='VSwitchId', description='The vSwitch ID.', example='vsw-bp1txzxsdck43pp******'),
      vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC).', example='vpc-bp1g11zvka6zr3i******'),
    }
  ](name='IntranetLinkedVpcList'),
  parentUid?: string(name='ParentUid', description='创建网关的用户ID', example='11234*******'),
  region: string(name='Region', description='网关所在地域', example='cn-hangzhou'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82****'),
  status?: string(name='Status', description='网关现在的状态', example='PrivateGatewayRunning'),
  updateTime?: string(name='UpdateTime', description='网关最后一次的更新时间', example='2021-02-24T11:52:17Z'),
}

model DescribeGatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeGatewayResponseBody(name='body'),
}

async function describeGateway(request: DescribeGatewayRequest): DescribeGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeGateway', 'GET', '/api/v2/gateways/{ClusterId}/{GatewayId}', 'json', false, 'json', request);
}

model DescribeGroupRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  groupName: string(name='GroupName', example='foo', position='Path'),
}

model DescribeGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: Group  
}

async function describeGroup(request: DescribeGroupRequest): DescribeGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeGroup', 'GET', '/api/v2/groups/{ClusterId}/{GroupName}', 'json', false, 'json', request);
}

model DescribeResourceRequest {
  clusterId: string(name='ClusterId', description='The ID of the cluster to which the resource group belongs.', example='cn-shanghai', position='Path'),
  resourceId: string(name='ResourceId', description='The ID of the resource group. For more information about how to query the ID of a resource group, see [ListResources](~~412133~~).', example='eas-r-asdasdasd', position='Path'),
}

model DescribeResourceResponseBody = {
  clusterId?: string(name='ClusterId', description='The ID of the cluster to which the resource group belongs.', example='cn-beijing'),
  cpuCount?: int32(name='CpuCount', description='The total number of CPU cores.', example='16'),
  createTime?: string(name='CreateTime', description='The time when the resource group was created.', example='2020-05-19T14:19:42Z'),
  extraData?: string(name='ExtraData', description='The additional information, such as the connection status of a virtual private cloud (VPC) and the log status of Log Service.', example='{"vswitch_id":"vsw-bp17uo6xebcusy****","gpu_share":true,"aux_vswitch_id_list":["vsw-bp13b3pvjap3vxn****","vsw-bp1nls8o5hk8mt8*****"],"security_group_id":"sg-bp1j1z7297hcink*****","vpc_id":"vpc-bp1kjr3rfyhx01*****","destination_cidr":"172.16.0.12/28","role_arn":"acs:ram::1157703270*****:role/AliyunServiceRoleForPaiEas","sls_project":"","sls_logstore":"","sls_status":"ResourceReady","sls_message":"","update_time":""}'),
  gpuCount?: int32(name='GpuCount', description='The total number of GPUs.', example='1'),
  instanceCount?: int32(name='InstanceCount', description='The total number of instances in the resource group.', example='4'),
  message?: string(name='Message', description='The returned message.', example='Resource is ready'),
  ownerUid?: string(name='OwnerUid', description='The ID of the resource group owner.', example='14401087478****'),
  postPaidInstanceCount?: int32(name='PostPaidInstanceCount', description='The total number of pay-as-you-go instances in the resource group.', example='3'),
  prePaidInstanceCount?: int32(name='PrePaidInstanceCount', description='The total number of subscription instances in the resource group.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='902976F2-6FAF-5404-8A4D-6CC223***'),
  resourceId?: string(name='ResourceId', description='The ID of the Elastic Algorithm Service (EAS) resource.', example='eas-r-glkfpsxuw57x1h*****'),
  resourceName?: string(name='ResourceName', description='The name of the EAS resource.', example='my-resouce****'),
  resourceType?: string(name='ResourceType', description='The type of the resource. Valid values:

- Dedicated
- SelfManaged', example='Dedicated'),
  status?: string(name='Status', description='The state of the resource group.', example='ResourceReady'),
  updateTime?: string(name='UpdateTime', description='The time when the resource group was last updated.', example='2021-02-24T11:52:17Z'),
}

model DescribeResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeResourceResponseBody(name='body'),
}

async function describeResource(request: DescribeResourceRequest): DescribeResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeResource', 'GET', '/api/v2/resources/{ClusterId}/{ResourceId}', 'json', false, 'json', request);
}

model DescribeResourceDLinkRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  resourceId: string(name='ResourceId', example='eas-r-adfabas', position='Path'),
}

model DescribeResourceDLinkResponseBody = {
  auxVSwitchList?: [ string ](name='AuxVSwitchList'),
  destinationCIDRs?: string(name='DestinationCIDRs', description='The CIDR blocks of the clients that you want to connect to. The CIDR blocks are added to the back-to-origin route of the server.', example='72.16.0.0/16'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82****'),
  securityGroupId?: string(name='SecurityGroupId', example='sg-bp1j1z7297hcink9d****'),
  vSwitchId?: string(name='VSwitchId', example='vsw-8vbqn2at0kljjxxxx****'),
  vpcId?: string(name='VpcId', example='vpc-uf66uio7md****'),
}

model DescribeResourceDLinkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeResourceDLinkResponseBody(name='body'),
}

async function describeResourceDLink(request: DescribeResourceDLinkRequest): DescribeResourceDLinkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeResourceDLink', 'GET', '/api/v2/resources/{ClusterId}/{ResourceId}/dlink', 'json', false, 'json', request);
}

model DescribeResourceLogRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  resourceId: string(name='ResourceId', example='eas-r-asdasdasd', position='Path'),
}

model DescribeResourceLogResponseBody = {
  logStore?: string(name='LogStore', example='access_log'),
  message?: string(name='Message', example='Network interfaces are updating'),
  projectName?: string(name='ProjectName', example='eas-r-asdasdasd-sls'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82****'),
  status?: string(name='Status', example='ResourceReady'),
}

model DescribeResourceLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeResourceLogResponseBody(name='body'),
}

async function describeResourceLog(request: DescribeResourceLogRequest): DescribeResourceLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeResourceLog', 'GET', '/api/v2/resources/{ClusterId}/{ResourceId}/log', 'json', false, 'json', request);
}

model DescribeServiceRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', example='foo', position='Path'),
}

model DescribeServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: Service  
}

async function describeService(request: DescribeServiceRequest): DescribeServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeService', 'GET', '/api/v2/services/{ClusterId}/{ServiceName}', 'json', false, 'json', request);
}

model DescribeServiceAutoScalerRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', example='echo', position='Path'),
}

model DescribeServiceAutoScalerResponseBody = {
  behavior?: map[string]any(name='Behavior', example='{
  "behavior": {
    "scaleDown": {
      "stabilizationWindowSeconds": 150
    }
  }
}'),
  currentMetrics?: [ 
    {
      metricName?: string(name='metricName', example='qps'),
      service?: string(name='service', example='demo_svc'),
      value?: float(name='value', example='10'),
    }
  ](name='CurrentMetrics'),
  maxReplica?: int32(name='MaxReplica', example='8'),
  minReplica?: int32(name='MinReplica', example='3'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82****'),
  scaleStrategies?: [ 
    {
      metricName?: string(name='metricName', example='QPS'),
      service?: string(name='service', example='demo_svc'),
      threshold?: float(name='threshold', example='10'),
    }
  ](name='ScaleStrategies'),
  serviceName?: string(name='ServiceName', example='foo'),
}

model DescribeServiceAutoScalerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeServiceAutoScalerResponseBody(name='body'),
}

async function describeServiceAutoScaler(request: DescribeServiceAutoScalerRequest): DescribeServiceAutoScalerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeServiceAutoScaler', 'GET', '/api/v2/services/{ClusterId}/{ServiceName}/autoscaler', 'json', false, 'json', request);
}

model DescribeServiceCronScalerRequest {
  clusterId?: string(name='ClusterId', example='cn-shanghai', position='Path'),
  serviceName?: string(name='ServiceName', example='foo', position='Path'),
}

model DescribeServiceCronScalerResponseBody = {
  excludeDates?: [ string ](name='ExcludeDates'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82****'),
  scaleJobs?: [ 
    {
      createTime?: string(name='CreateTime', example='2020-06-24T02:11:30Z'),
      lastProbeTime?: string(name='LastProbeTime', example='2022-02-24T06:31:00Z'),
      message?: string(name='Message', example='"cron hpa job scale-jobs-0 executed successfully. current replicas:3, desired replicas:2."'),
      name?: string(name='Name', example='scale-job-1'),
      schedule?: string(name='Schedule', example='0 18 * * * *'),
      state?: string(name='State', example='Succeed'),
      targetSize?: int32(name='TargetSize', example='1'),
    }
  ](name='ScaleJobs'),
  serviceName?: string(name='ServiceName', example='foo'),
}

model DescribeServiceCronScalerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeServiceCronScalerResponseBody(name='body'),
}

async function describeServiceCronScaler(request: DescribeServiceCronScalerRequest): DescribeServiceCronScalerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeServiceCronScaler', 'GET', '/api/v2/services/{ClusterId}/{ServiceName}/cronscaler', 'json', false, 'json', request);
}

model DescribeServiceDiagnosisRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', example='foo', position='Path'),
}

model DescribeServiceDiagnosisResponseBody = {
  diagnosisList?: [ 
    {
      advices?: [ string ](name='Advices'),
      causes?: [ string ](name='Causes'),
      error?: string(name='Error', example='Container worker0 failed to pull image.'),
    }
  ](name='DiagnosisList'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82****'),
}

model DescribeServiceDiagnosisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeServiceDiagnosisResponseBody(name='body'),
}

async function describeServiceDiagnosis(request: DescribeServiceDiagnosisRequest): DescribeServiceDiagnosisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeServiceDiagnosis', 'GET', '/api/v2/services/{ClusterId}/{ServiceName}/diagnosis', 'json', false, 'json', request);
}

model DescribeServiceEventRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', example='foo', position='Path'),
  endTime?: string(name='EndTime', example='2006-01-02 15:04:05', position='Query'),
  eventType?: string(name='EventType', example='Normal', position='Query'),
  instanceName?: string(name='InstanceName', example='echo-test-784xxxx85d-hhnd8', position='Query'),
  pageNum?: string(name='PageNum', example='1', position='Query'),
  pageSize?: string(name='PageSize', example='20', position='Query'),
  startTime?: string(name='StartTime', example='2006-01-02 15:04:05', position='Query'),
}

model DescribeServiceEventResponseBody = {
  events?: [ 
    {
      message?: string(name='Message', example='{\\"versionId\\":1,\\"message\\":\\"Stage scale complete\\",\\"availableInstance\\":1,\\"unavailableInstance\\":0}'),
      reason?: string(name='Reason', example='Updating'),
      time?: string(name='Time', example='2022-04-09 06:30:00'),
      type?: string(name='Type', example='Normal'),
    }
  ](name='Events'),
  pageNum?: long(name='PageNum', example='1'),
  requestId?: string(name='RequestId', example='3D491C94-6239-5318-B4B4-799D859***'),
  totalCount?: long(name='TotalCount', example='29'),
  totalPageNum?: long(name='TotalPageNum', example='12'),
}

model DescribeServiceEventResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeServiceEventResponseBody(name='body'),
}

async function describeServiceEvent(request: DescribeServiceEventRequest): DescribeServiceEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeServiceEvent', 'GET', '/api/v2/services/{ClusterId}/{ServiceName}/events', 'json', false, 'json', request);
}

model DescribeServiceInstanceDiagnosisRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', example='foo', position='Path'),
  instanceName: string(name='InstanceName', example='foo-69xxxx4f4-5w9r9', position='Path'),
}

model DescribeServiceInstanceDiagnosisResponseBody = {
  diagnosis?: {
    advices?: [ string ](name='Advices'),
    causes?: [ string ](name='Causes'),
    error?: string(name='Error', example='Container worker0 failed to pull image.'),
  }(name='Diagnosis'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82***'),
}

model DescribeServiceInstanceDiagnosisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeServiceInstanceDiagnosisResponseBody(name='body'),
}

async function describeServiceInstanceDiagnosis(request: DescribeServiceInstanceDiagnosisRequest): DescribeServiceInstanceDiagnosisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeServiceInstanceDiagnosis', 'GET', '/api/v2/services/{ClusterId}/{ServiceName}/instances/{InstanceName}/diagnosis', 'json', false, 'json', request);
}

model DescribeServiceLogRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', example='echo', position='Path'),
  containerName?: string(name='ContainerName', example='worker0', position='Query'),
  endTime?: string(name='EndTime', example='2006-01-02 15:04:05', position='Query'),
  instanceName?: string(name='InstanceName', example='echo-da290ac8-7fckm', position='Query'),
  ip?: string(name='Ip', example='10.0.0.1', position='Query'),
  keyword?: string(name='Keyword', example='key', position='Query'),
  pageNum?: long(name='PageNum', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='500', position='Query'),
  previous?: boolean(name='Previous', example='true', position='Query'),
  startTime?: string(name='StartTime', example='2006-01-02 15:04:05', position='Query'),
}

model DescribeServiceLogResponseBody = {
  logs?: [ string ](name='Logs'),
  pageNum?: long(name='PageNum', example='1'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82********'),
  totalCount?: long(name='TotalCount', example='1'),
  totalPageNum?: long(name='TotalPageNum', example='500'),
}

model DescribeServiceLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeServiceLogResponseBody(name='body'),
}

async function describeServiceLog(request: DescribeServiceLogRequest): DescribeServiceLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeServiceLog', 'GET', '/api/v2/services/{ClusterId}/{ServiceName}/logs', 'json', false, 'json', request);
}

model DescribeServiceMirrorRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', example='foo', position='Path'),
}

model DescribeServiceMirrorResponseBody = {
  ratio?: string(name='Ratio', example='50'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82****'),
  serviceName?: string(name='ServiceName', example='foo'),
  target?: string(name='Target', example='foo2,foo3'),
}

model DescribeServiceMirrorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeServiceMirrorResponseBody(name='body'),
}

async function describeServiceMirror(request: DescribeServiceMirrorRequest): DescribeServiceMirrorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeServiceMirror', 'GET', '/api/v2/services/{ClusterId}/{ServiceName}/mirror', 'json', false, 'json', request);
}

model DevelopServiceRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', example='echo', position='Path'),
  exit?: string(name='Exit', description='Specifies whether to exit development mode. Valid values:

*   true
*   false (default)', example='true', position='Query'),
}

model DevelopServiceResponseBody = {
  message?: string(name='Message', example='Success'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82****'),
}

model DevelopServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DevelopServiceResponseBody(name='body'),
}

async function developService(request: DevelopServiceRequest): DevelopServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DevelopService', 'PUT', '/api/v2/services/{ClusterId}/{ServiceName}/develop', 'json', false, 'json', request);
}

model ListBenchmarkTaskRequest {
  filter?: string(name='Filter', description='The keyword used to query required stress testing tasks. If this parameter is specified, the system returns stress testing tasks based on the names of the stress testing tasks in the matched Elastic Algorithm service (EAS).', example='test_bench', position='Query'),
  pageNumber?: string(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries per page. Default value: 100.', example='10', position='Query'),
  serviceName?: string(name='ServiceName', description='The name of the EAS service that corresponds to the stress testing task. For more information about how to query the service name, see [ListServices](~~412109~~).', example='test_bench_srv', position='Query'),
}

model ListBenchmarkTaskResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
  tasks?: [ 
    {
      availableAgent?: long(name='AvailableAgent', example='2'),
      createTime?: string(name='CreateTime', example='2020-12-04T02:43:15Z'),
      message?: string(name='Message', example='Benchmark task [benchmark-larec-test-1076] is Running'),
      region?: string(name='Region', example='cn-shanghai'),
      serviceName?: string(name='ServiceName', example='test_quota'),
      status?: string(name='Status', example='Running'),
      taskId?: string(name='TaskId', example='eas-b-gv4y86uvgt****i'),
      taskName?: string(name='TaskName', example='benchmark-larec-test-1076'),
      updateTime?: string(name='UpdateTime', example='2020-06-24T03:11:30Z'),
    }
  ](name='Tasks', description='The time when the stress testing task was updated.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model ListBenchmarkTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListBenchmarkTaskResponseBody(name='body'),
}

async function listBenchmarkTask(request: ListBenchmarkTaskRequest): ListBenchmarkTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListBenchmarkTask', 'GET', '/api/v2/benchmark-tasks', 'json', false, 'json', request);
}

model ListGatewayIntranetLinkedVpcRequest {
  clusterId?: string(name='ClusterId', description='The region ID of the private gateway.', example='cn-hangzhou', position='Path'),
  gatewayId?: string(name='GatewayId', description='The private gateway ID.', example='gw-1uhcqmsc7x22******', position='Path'),
}

model ListGatewayIntranetLinkedVpcResponseBody = {
  gatewayId?: string(name='GatewayId', description='The private gateway ID.', example='gw-1uhcqmsc7x22******'),
  intranetLinkedVpcList?: [ 
    {
      ip?: string(name='Ip', description='The IP address.', example='192.168.10.11'),
      securityGroupId?: string(name='SecurityGroupId', description='The security group ID.', example='sg-2ze4pgstgszvgq******'),
      status?: string(name='Status', description='The state of the private gateway.

Valid values:

*   Creating

    <!-- -->

    :

    <!-- -->

    The private gateway is being created.

    <!-- -->

*   Running

    <!-- -->

    :

    <!-- -->

    The private gateway is running.

    <!-- -->', example='Running'),
      vSwitchId?: string(name='VSwitchId', description='The vSwitch ID.', example='vsw-8vb2qjoiio6m9pg******'),
      vpcId?: string(name='VpcId', description='The virtual private cloud (VPC) ID.', example='vpc-2zetuli9ws0qgjd******'),
    }
  ](name='IntranetLinkedVpcList', description='The internal endpoints.'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model ListGatewayIntranetLinkedVpcResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListGatewayIntranetLinkedVpcResponseBody(name='body'),
}

async function listGatewayIntranetLinkedVpc(request: ListGatewayIntranetLinkedVpcRequest): ListGatewayIntranetLinkedVpcResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListGatewayIntranetLinkedVpc', 'GET', '/api/v2/gateways/{ClusterId}/{GatewayId}/intranet_endpoint_linked_vpc', 'json', false, 'json', request);
}

model ListGroupsRequest {
  filter?: string(name='Filter', example='foo', position='Query'),
  pageNumber?: string(name='PageNumber', example='1', position='Query'),
  pageSize?: string(name='PageSize', example='20', position='Query'),
  workspaceId?: string(name='WorkspaceId', position='Query'),
}

model ListGroupsResponseBody = {
  groups?: [
    Group
  ](name='Groups'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82****'),
  totalCount?: long(name='TotalCount', example='5'),
}

model ListGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListGroupsResponseBody(name='body'),
}

async function listGroups(request: ListGroupsRequest): ListGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListGroups', 'GET', '/api/v2/groups', 'json', false, 'json', request);
}

model ListResourceInstanceWorkerRequest {
  clusterId: string(name='ClusterId', description='The ID of the cluster to which the resource group belongs.', example='cn-shanghai', position='Path'),
  resourceId: string(name='ResourceId', description='The ID of the resource group. For more information about how to query the ID of a resource group, see [ListResources](~~412133~~).', example='eas-r-adfabas', position='Path'),
  instanceName: string(name='InstanceName', description='The name of the instance in a resource group. For more information about how to query the instance name, see [ListResourceInstances](~~412129~~).', example='cne10', position='Path'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 100.', example='20', position='Query'),
}

model ListResourceInstanceWorkerResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
  pods?: [
    ResourceInstanceWorker
  ](name='Pods', description='The workers.'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model ListResourceInstanceWorkerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListResourceInstanceWorkerResponseBody(name='body'),
}

async function listResourceInstanceWorker(request: ListResourceInstanceWorkerRequest): ListResourceInstanceWorkerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListResourceInstanceWorker', 'GET', '/api/v2/resources/{ClusterId}/{ResourceId}/instance/{InstanceName}/workers', 'json', false, 'json', request);
}

model ListResourceInstancesRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  resourceId: string(name='ResourceId', example='iot', position='Path'),
  chargeType?: string(name='ChargeType', example='PrePaid', position='Query'),
  filter?: string(name='Filter', example='10.224.xx.xx', position='Query'),
  instanceIP?: string(name='InstanceIP', example='10.224.xx.xx', position='Query'),
  instanceId?: string(name='InstanceId', example='i-bp1jd6x3uotsv****', position='Query'),
  instanceName?: string(name='InstanceName', example='e-xxxx***', position='Query'),
  instanceStatus?: string(name='InstanceStatus', example='Ready', position='Query'),
  order?: string(name='Order', example='desc', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  sort?: string(name='Sort', example='CreateTime', position='Query'),
}

model ListResourceInstancesResponseBody = {
  instances?: [
    ResourceInstance
  ](name='Instances'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82****'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model ListResourceInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListResourceInstancesResponseBody(name='body'),
}

async function listResourceInstances(request: ListResourceInstancesRequest): ListResourceInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListResourceInstances', 'GET', '/api/v2/resources/{ClusterId}/{ResourceId}/instances', 'json', false, 'json', request);
}

model ListResourceServicesRequest {
  clusterId: string(name='ClusterId', description='The ID of the region to which the resource group belongs.', example='cn-shanghai', position='Path'),
  resourceId: string(name='ResourceId', description='The ID of the resource group. For more information about how to query the ID of a resource group, see [ListResources](~~412133~~).', example='iot', position='Path'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 100.', example='20', position='Query'),
}

model ListResourceServicesResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
  services?: [
    Service
  ](name='Services', description='The services.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model ListResourceServicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListResourceServicesResponseBody(name='body'),
}

async function listResourceServices(request: ListResourceServicesRequest): ListResourceServicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListResourceServices', 'GET', '/api/v2/resources/{ClusterId}/{ResourceId}/services', 'json', false, 'json', request);
}

model ListResourcesRequest {
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 100.', example='20', position='Query'),
  resourceId?: string(name='ResourceId', description='The ID of the resource group. You can call the [CreateResource](~~412111~~) operation to query the ID of the resource group.', example='eas-r-h7lcw24dyqztwxxxxxx', position='Query'),
  resourceName?: string(name='ResourceName', description='The name of the resource group. You can call the [CreateResource](~~412111~~) operation to query the name of the resource group.', example='MyResource', position='Query'),
  resourceType?: string(name='ResourceType', example='Dedicated', position='Query'),
}

model ListResourcesResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
  resources?: [
    Resource
  ](name='Resources', description='The resource groups.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model ListResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListResourcesResponseBody(name='body'),
}

async function listResources(request: ListResourcesRequest): ListResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListResources', 'GET', '/api/v2/resources', 'json', false, 'json', request);
}

model ListServiceContainersRequest {
  clusterId?: string(name='ClusterId', example='cn-shanghai', position='Path'),
  serviceName?: string(name='ServiceName', example='foo', position='Path'),
  instanceName?: string(name='InstanceName', example='foo-69xxxx4f4-5w9r9', position='Path'),
}

model ListServiceContainersResponseBody = {
  containers?: [
    ContainerInfo
  ](name='Containers', description='The containers of the service.'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82****'),
  serviceName?: string(name='ServiceName', example='foo'),
}

model ListServiceContainersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListServiceContainersResponseBody(name='body'),
}

async function listServiceContainers(request: ListServiceContainersRequest): ListServiceContainersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListServiceContainers', 'GET', '/api/v2/services/{ClusterId}/{ServiceName}/instances/{InstanceName}/containers', 'json', false, 'json', request);
}

model ListServiceInstancesRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', example='foo', position='Path'),
  filter?: string(name='Filter', example='10.118.xx.xx', position='Query'),
  hostIP?: string(name='HostIP', example='10.224.xx.xx', position='Query'),
  instanceIP?: string(name='InstanceIP', example='10.224.xx.xx', position='Query'),
  instanceName?: string(name='InstanceName', example='foo-bdc5xxxx-8l7rk', position='Query'),
  instanceStatus?: string(name='InstanceStatus', example='Running', position='Query'),
  instanceType?: string(name='InstanceType', example='ecs.c7.large', position='Query'),
  isSpot?: boolean(name='IsSpot', example='false', position='Query'),
  order?: string(name='Order', description='The sorting order.

Valid values:

*   asc: The instances are sorted in ascending order.

    <!-- -->

    <!-- -->

    <!-- -->

*   desc

    <!-- -->

    : The instances are sorted in descending order.

    <!-- -->

    <!-- -->', example='desc', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  resourceType?: string(name='ResourceType', example='PublicResource', position='Query'),
  role?: string(name='Role', example='Queue', position='Query'),
  sort?: string(name='Sort', example='StartTime', position='Query'),
}

model ListServiceInstancesResponseBody = {
  instances?: [
    Instance
  ](name='Instances'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82****'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListServiceInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListServiceInstancesResponseBody(name='body'),
}

async function listServiceInstances(request: ListServiceInstancesRequest): ListServiceInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListServiceInstances', 'GET', '/api/v2/services/{ClusterId}/{ServiceName}/instances', 'json', false, 'json', request);
}

model ListServiceVersionsRequest {
  clusterId: string(name='ClusterId', example='cn-hangzhou', position='Path'),
  serviceName: string(name='ServiceName', example='test_oss', position='Path'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
}

model ListServiceVersionsResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='E089D584-B6F4-50C4-9902-DA2295B7****'),
  totalCount?: long(name='TotalCount', example='166'),
  versions?: [ 
    {
      buildTime?: string(name='BuildTime', example='2022-08-29T22:02:14Z'),
      imageAvailable?: string(name='ImageAvailable', example='true'),
      imageId?: int32(name='ImageId', example='4'),
      message?: string(name='Message', example='Service is Running'),
      serviceRunnable?: string(name='ServiceRunnable', example='true'),
    }
  ](name='Versions'),
}

model ListServiceVersionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListServiceVersionsResponseBody(name='body'),
}

async function listServiceVersions(request: ListServiceVersionsRequest): ListServiceVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListServiceVersions', 'GET', '/api/v2/services/{ClusterId}/{ServiceName}/versions', 'json', false, 'json', request);
}

model ListServicesRequest {
  filter?: string(name='Filter', description='{
  "RequestId": "40325405-579C-4D82-9624-EC2B1779848E",
  "Services": [
    {
      "ServiceId": "200516454695942578",
      "ServiceName": "vipserver",
      "ParentUid": "1628454689805075",
      "CallerUid": "eas",
      "CurrentVersion": 1,
      "Cpu": 1,
      "Gpu": 0,
      "Memory": 900,
      "Image": "registry.cn-zhangjiakou.aliyuncs.com/eas/ndisearch_v1_inner_zhangbei:v0.0.3-20200302145109",
      "Resource": "seccontent_inner_2080ti_5",
      "Namespace": "vipserver",
      "CreateTime": "2019-10-25T10:37:53Z",
      "UpdateTime": "2019-10-30T16:50:59Z",
      "TotalInstance": 1,
      "RunningInstance": 1,
      "PendingInstance": 0,
      "LatestVersion": 1,
      "Status": "Running",
      "Reason": "RUNNING",
      "Message": "Service is now scaling",
      "AccessToken": "",
      "Weight": 0
    },
    {
      "ServiceId": 97097,
      "ServiceName": "a1",
      "CallerUid": "eas",
      "CurrentVersion": 1,
      "Cpu": 1,
      "Gpu": 0,
      "Memory": 900,
      "Image": "registry.cn-hangzhou.aliyuncs.com/eas/pi_imemb_tb:v0.0.1-20191023130701",
      "Resource": "seccontent_inner_b",
      "Namespace": "a1",
      "CreateTime": "2020-05-26T18:03:11Z",
      "UpdateTime": "2020-05-26T18:03:11Z",
      "TotalInstance": 1,
      "RunningInstance": 0,
      "PendingInstance": 1,
      "LatestVersion": 1,
      "Status": "Failed",
      "Reason": "FAILED",
      "Message": "the server could not find the requested resource (post services.meta.k8s.io)",
      "AccessToken": "regression_test_token",
      "Weight": 0
    }
  ],
  "PageNumber": 1,
  "PageSize": 2,
  "TotalCount": 2
}', example='foo', position='Query'),
  groupName?: string(name='GroupName', example='foo', position='Query'),
  label?: map[string]string(name='Label', shrink='json', position='Query'),
  order?: string(name='Order', description='所属的group。', example='asc', position='Query'),
  pageNumber?: int32(name='PageNumber', description='376577', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='100', position='Query'),
  parentServiceUid?: string(name='ParentServiceUid', position='Query'),
  resourceName?: string(name='ResourceName', description='服务所属的资源组名称或ID。', example='eas-r-hd0qwy8cxxxx', position='Query'),
  serviceName?: string(name='ServiceName', description='服务名。', example='echo_test', position='Query'),
  serviceStatus?: string(name='ServiceStatus', description='服务运行的状态。', example='Running', position='Query'),
  serviceType?: string(name='ServiceType', position='Query'),
  serviceUid?: string(name='ServiceUid', example='eas-m-c9iw3yitxxxx', position='Query'),
  sort?: string(name='Sort', description='服务的类型定义。', example='CreateTime', position='Query'),
  workspaceId?: string(name='WorkspaceId', position='Query'),
}

model ListServicesResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='100'),
  requestId?: string(name='RequestId', description='请求ID。', example='40325405-579C-4D82****'),
  services?: [
    Service
  ](name='Services', description='服务列表。'),
  totalCount?: int32(name='TotalCount', description='服务总数。', example='2'),
}

model ListServicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListServicesResponseBody(name='body'),
}

async function listServices(request: ListServicesRequest): ListServicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListServices', 'GET', '/api/v2/services', 'json', false, 'json', request);
}

model ReleaseServiceRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', example='foo', position='Path'),
  trafficState?: string(name='TrafficState', example='grouping', position='Body'),
  weight?: int32(name='Weight', example='100', position='Body'),
}

model ReleaseServiceResponseBody = {
  message?: string(name='Message', example='Releasing service [foo] in region [cn-shanghai] with weight [40], service status: [Running]'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82****'),
}

model ReleaseServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleaseServiceResponseBody(name='body'),
}

async function releaseService(request: ReleaseServiceRequest): ReleaseServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ReleaseService', 'PUT', '/api/v2/services/{ClusterId}/{ServiceName}/release', 'json', false, 'json', request);
}

model RestartServiceRequest {
  clusterId: string(name='ClusterId', description='The ID of the region where the service is deployed.', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='The service name. For more information about how to query the service name, see [ListServices](~~412109~~).', example='foo', position='Path'),
}

model RestartServiceResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Service is restarting'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model RestartServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RestartServiceResponseBody(name='body'),
}

async function restartService(request: RestartServiceRequest): RestartServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RestartService', 'PUT', '/api/v2/services/{ClusterId}/{ServiceName}/restart', 'json', false, 'json', request);
}

model StartBenchmarkTaskRequest {
  clusterId: string(name='ClusterId', description='The ID of the region where the stress testing task is performed.', example='cn-shanghai', position='Path'),
  taskName: string(name='TaskName', description='The name of the stress testing task. For more information about how to query the name of a stress testing task, see [ListBenchmarkTask](~~432976~~).', example='benchmark-larec-test-3bc6', position='Path'),
}

model StartBenchmarkTaskResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Benchmark task [benchmark-larec-test-1076] is Starting'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model StartBenchmarkTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartBenchmarkTaskResponseBody(name='body'),
}

async function startBenchmarkTask(request: StartBenchmarkTaskRequest): StartBenchmarkTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartBenchmarkTask', 'PUT', '/api/v2/benchmark-tasks/{ClusterId}/{TaskName}/start', 'json', false, 'json', request);
}

model StartServiceRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', example='foo', position='Path'),
}

model StartServiceResponseBody = {
  message?: string(name='Message', example='Service [foo] in region [cn-shanghai] is starting'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82****'),
}

model StartServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartServiceResponseBody(name='body'),
}

async function startService(request: StartServiceRequest): StartServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartService', 'PUT', '/api/v2/services/{ClusterId}/{ServiceName}/start', 'json', false, 'json', request);
}

model StopBenchmarkTaskRequest {
  clusterId: string(name='ClusterId', description='The ID of the region where the stress testing task is performed.', example='cn-shanghai', position='Path'),
  taskName: string(name='TaskName', description='The name of the stress testing task. For more information about how to query the name of a stress testing task, see [ListBenchmarkTask](~~432976~~).', example='benchmark-larec-test-dbe5', position='Path'),
}

model StopBenchmarkTaskResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Benchmark task [benchmark-larec-test-1076] is Stopping'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model StopBenchmarkTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopBenchmarkTaskResponseBody(name='body'),
}

async function stopBenchmarkTask(request: StopBenchmarkTaskRequest): StopBenchmarkTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopBenchmarkTask', 'PUT', '/api/v2/benchmark-tasks/{ClusterId}/{TaskName}/stop', 'json', false, 'json', request);
}

model StopServiceRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', example='foo', position='Path'),
}

model StopServiceResponseBody = {
  message?: string(name='Message', example='Succeed to auto scale service [foo]'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82****'),
}

model StopServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopServiceResponseBody(name='body'),
}

async function stopService(request: StopServiceRequest): StopServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopService', 'PUT', '/api/v2/services/{ClusterId}/{ServiceName}/stop', 'json', false, 'json', request);
}

model UpdateAppServiceRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', example='foo', position='Path'),
  quotaId?: string(name='QuotaId', description='The quota ID.', example='abcdef', position='Query'),
  workspaceId?: string(name='WorkspaceId', description='The workspace ID.', example='123456', position='Query'),
  appType?: string(name='AppType', description='The application type.

Valid values:

*   LLM

    <!-- -->

    :

    <!-- -->

    the large language model (LLM) application

    <!-- -->', example='LLM', position='Body'),
  appVersion?: string(name='AppVersion', description='The application version.', example='v1', position='Body'),
  config?: map[string]any(name='Config', description='Additional configurations that are required for the service deployment.', position='Body'),
  replicas?: string(name='Replicas', description='The number of instances.', example='1', position='Body'),
  serviceSpec?: string(name='ServiceSpec', description='The service specifications.', example='llama_7b_fp16', position='Body'),
}

model UpdateAppServiceResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Succee'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82****'),
}

model UpdateAppServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAppServiceResponseBody(name='body'),
}

async function updateAppService(request: UpdateAppServiceRequest): UpdateAppServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateAppService', 'PUT', '/api/v2/app_services/{ClusterId}/{ServiceName}', 'json', false, 'json', request);
}

model UpdateBenchmarkTaskRequest {
  clusterId: string(name='ClusterId', description='The ID of the region where the stress testing task is performed.', example='cn-shanghai', position='Path'),
  taskName: string(name='TaskName', description='The name of the stress testing task.', example='benchmark-larec-test-645c', position='Path'),
  body?: string(name='body', description='The request body. The body includes the parameters that are set to create a stress testing task.', example='{
    "base":  {
         "qps": 200
    }
}', position='Body'),
}

model UpdateBenchmarkTaskResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Benchmark task [benchmark-larec-test-1076] is Updating'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82***'),
}

model UpdateBenchmarkTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateBenchmarkTaskResponseBody(name='body'),
}

async function updateBenchmarkTask(request: UpdateBenchmarkTaskRequest): UpdateBenchmarkTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateBenchmarkTask', 'PUT', '/api/v2/benchmark-tasks/{ClusterId}/{TaskName}', 'json', false, 'json', request);
}

model UpdateGatewayRequest {
  gatewayId: string(name='GatewayId', description='The ID of the private gateway.', example='gw-1uhcqmsc7x22******', position='Path'),
  clusterId: string(name='ClusterId', description='The region of the private gateway.', example='cn-hangzhou', position='Path'),
  enableInternet?: boolean(name='EnableInternet', description='Specifies whether to enable Internet access. Default value: false.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='false', position='Body'),
  enableIntranet?: boolean(name='EnableIntranet', description='Specifies whether to enable internal network access. Default value: true.', example='true', position='Body'),
  instanceType?: string(name='InstanceType', description='The instance type used for the private gateway.', example='ecs.c6.4xlarge', position='Body'),
  name?: string(name='Name', description='The private gateway alias.', example='mygateway1', position='Body'),
}

model UpdateGatewayResponseBody = {
  gatewayId?: string(name='GatewayId', description='The ID of the gateway.', example='gw-1uhcqmsc7x22******'),
  message?: string(name='Message', description='The returned message.', example='Gateway is updated'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='40325405-579C-4D82***'),
}

model UpdateGatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateGatewayResponseBody(name='body'),
}

async function updateGateway(request: UpdateGatewayRequest): UpdateGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateGateway', 'PUT', '/api/v2/gateways/{ClusterId}/{GatewayId}', 'json', false, 'json', request);
}

model UpdateResourceRequest {
  clusterId: string(name='ClusterId', description='The ID of the region to which the resource group belongs.', example='cn-shanghai', position='Path'),
  resourceId: string(name='ResourceId', description='The ID of the resource group. For more information about how to query the ID of a resource group, see [ListResources](~~412133~~).', example='eas-r-asdasdasd', position='Path'),
  resourceName?: string(name='ResourceName', description='The new name of the resource group after the update. The name can be up to 27 characters in length.', example='iot', position='Body'),
  selfManagedResourceOptions?: {
    nodeMatchLabels?: map[string]string(name='NodeMatchLabels', description='The key-value pairs for matched nodes.'),
    nodeTolerations?: [ 
      {
        effect?: string(name='effect', description='The effect.

Valid values:
- PreferNoSchedule
- NoSchedule
- NoExecute', example='NoSchedule'),
        key?: string(name='key', description='The name of the key.', example='key1'),
        operator?: string(name='operator', description='Relationship between key names and key values.
Valid values:
- Equal
- Exists', example='Equal'),
        value?: string(name='value', description='The name of the value.', example='value1'),
      }
    ](name='NodeTolerations', description='Tolerations for nodes.'),
  }(name='SelfManagedResourceOptions', description='The configurable options for self managed resource group.', position='Body'),
}

model UpdateResourceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
  resourceId?: string(name='ResourceId', description='The ID of the resource group.', example='eas-r-asdasdasd'),
  resourceName?: string(name='ResourceName', description='The name of the resource group.', example='iot'),
}

model UpdateResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateResourceResponseBody(name='body'),
}

async function updateResource(request: UpdateResourceRequest): UpdateResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateResource', 'PUT', '/api/v2/resources/{ClusterId}/{ResourceId}', 'json', false, 'json', request);
}

model UpdateResourceDLinkRequest {
  clusterId: string(name='ClusterId', description='The ID of the region to which the resource group belongs.', example='cn-shanghai', position='Path'),
  resourceId: string(name='ResourceId', description='The ID of the resource group. For more information about how to query the ID of a resource group, see [ListResources](~~412133~~).', example='iot', position='Path'),
  destinationCIDRs?: string(name='DestinationCIDRs', description='The CIDR blocks of the clients that you want to connect to. After this parameter is specified, the CIDR blocks are added to the back-to-origin route of the server. Either this parameter or the VSwitchIdList parameter can be used to determine CIDR blocks.', example='72.16.0.0/16', position='Body'),
  securityGroupId: string(name='SecurityGroupId', description='The ID of the security group to which the Elastic Compute Service (ECS) instance belongs.', example='sg-bp149cedsfx2rfspd2d', position='Body'),
  vSwitchId: string(name='VSwitchId', description='The ID of the peer primary vSwitch. After this parameter is specified, an elastic network interface (ENI) is created in the VSwitch.', example='vpc-uf66uio7md****', position='Body'),
  vSwitchIdList?: [ string ](name='VSwitchIdList', description='The vSwitches of the clients that you want to connect to. After this parameter is specified, the CIDR blocks of these vSwitches are added to the back-to-origin route of the server.', position='Body'),
}

model UpdateResourceDLinkResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Network interfaces are updating'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model UpdateResourceDLinkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateResourceDLinkResponseBody(name='body'),
}

async function updateResourceDLink(request: UpdateResourceDLinkRequest): UpdateResourceDLinkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateResourceDLink', 'PUT', '/api/v2/resources/{ClusterId}/{ResourceId}/dlink', 'json', false, 'json', request);
}

model UpdateResourceInstanceRequest {
  clusterId: string(name='ClusterId', example='cn-beijing', position='Path'),
  resourceId: string(name='ResourceId', example='eas-r-asdasdasd', position='Path'),
  instanceId: string(name='InstanceId', example='eas-i-asdasdasd', position='Path'),
  action: string(name='Action', example='Cordon', position='Body'),
}

model UpdateResourceInstanceResponseBody = {
  instanceId?: string(name='InstanceId', example='eas-i-asdasdasd'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82****'),
  resourceId?: string(name='ResourceId', example='eas-r-asdasdasd'),
}

model UpdateResourceInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateResourceInstanceResponseBody(name='body'),
}

async function updateResourceInstance(request: UpdateResourceInstanceRequest): UpdateResourceInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateResourceInstance', 'PUT', '/api/v2/resources/{ClusterId}/{ResourceId}/instances/{InstanceId}', 'json', false, 'json', request);
}

model UpdateServiceRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', example='foo', position='Path'),
  updateType?: string(name='UpdateType', position='Query'),
  body?: string(name='body', example='{   "name": "foo",   "model_path": "http://path/to/model.tar.gz",   "processor": "tensorflow_cpu",   "metadata": {     "instance": 2,     "memory": 7000,     "cpu": 4   } }', position='Body'),
}

model UpdateServiceResponseBody = {
  message?: string(name='Message', example='Succeed to update service [foo] in region [cn-shanghai]'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82****'),
}

model UpdateServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateServiceResponseBody(name='body'),
}

async function updateService(request: UpdateServiceRequest): UpdateServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateService', 'PUT', '/api/v2/services/{ClusterId}/{ServiceName}', 'json', false, 'json', request);
}

model UpdateServiceAutoScalerRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', example='foo', position='Path'),
  behavior?: {
    onZero?: {
      scaleDownGracePeriodSeconds?: int32(name='scaleDownGracePeriodSeconds', example='600'),
      scaleUpActivationReplicas?: int32(name='scaleUpActivationReplicas', example='1'),
    }(name='onZero'),
    scaleDown?: {
      stabilizationWindowSeconds?: int32(name='stabilizationWindowSeconds', example='300'),
    }(name='scaleDown'),
    scaleUp?: {
      stabilizationWindowSeconds?: int32(name='stabilizationWindowSeconds', example='0'),
    }(name='scaleUp'),
  }(name='behavior', position='Body'),
  max: int32(name='max', example='8', position='Body'),
  min: int32(name='min', example='2', position='Body'),
  scaleStrategies: [ 
    {
      metricName: string(name='metricName', example='qps'),
      service?: string(name='service', example='demo_svc'),
      threshold: float(name='threshold', example='100'),
    }
  ](name='scaleStrategies', position='Body'),
}

model UpdateServiceAutoScalerResponseBody = {
  message?: string(name='Message', example='Update auto scale for service [foo] successfully'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82****'),
}

model UpdateServiceAutoScalerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateServiceAutoScalerResponseBody(name='body'),
}

async function updateServiceAutoScaler(request: UpdateServiceAutoScalerRequest): UpdateServiceAutoScalerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateServiceAutoScaler', 'PUT', '/api/v2/services/{ClusterId}/{ServiceName}/autoscaler', 'json', false, 'json', request);
}

model UpdateServiceCronScalerRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', example='foo', position='Path'),
  excludeDates?: [ string ](name='ExcludeDates', position='Body'),
  scaleJobs: [ 
    {
      name?: string(name='Name', example='scale-job-1'),
      schedule: string(name='Schedule', example='0 18 * * * *'),
      targetSize: int32(name='TargetSize', example='2'),
    }
  ](name='ScaleJobs', position='Body'),
}

model UpdateServiceCronScalerResponseBody = {
  message?: string(name='Message', example='Update cron scaler for service [foo] successfully'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82****'),
}

model UpdateServiceCronScalerResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateServiceCronScalerResponseBody(name='body'),
}

async function updateServiceCronScaler(request: UpdateServiceCronScalerRequest): UpdateServiceCronScalerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateServiceCronScaler', 'PUT', '/api/v2/services/{ClusterId}/{ServiceName}/cronscaler', 'json', false, 'json', request);
}

model UpdateServiceInstanceRequest {
  clusterId: string(name='ClusterId', description='The region ID of the service.', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='The service name.', example='foo', position='Path'),
  instanceName: string(name='InstanceName', description='The name of the service instance.', example='foo-69xxxx4f4-5w9r9', position='Path'),
  isolate?: boolean(name='Isolate', description='Specifies whether to isolate the service instance.', example='true', position='Body'),
}

model UpdateServiceInstanceResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Success'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model UpdateServiceInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateServiceInstanceResponseBody(name='body'),
}

async function updateServiceInstance(request: UpdateServiceInstanceRequest): UpdateServiceInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateServiceInstance', 'PUT', '/api/v2/services/{ClusterId}/{ServiceName}/instances/{InstanceName}', 'json', false, 'json', request);
}

model UpdateServiceLabelRequest {
  clusterId: string(name='ClusterId', description='The ID of the region where the service is deployed.', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='The service name. For more information about how to query the service name, see [ListServices](~~412109~~).', example='foo', position='Path'),
  labels: map[string]string(name='Labels', description='The custom service tags.', position='Body'),
}

model UpdateServiceLabelResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Succeed to update service [service_from_XXXX] labels.'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model UpdateServiceLabelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateServiceLabelResponseBody(name='body'),
}

async function updateServiceLabel(request: UpdateServiceLabelRequest): UpdateServiceLabelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateServiceLabel', 'PUT', '/api/v2/services/{ClusterId}/{ServiceName}/label', 'json', false, 'json', request);
}

model UpdateServiceMirrorRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', example='foo', position='Path'),
  ratio?: int32(name='Ratio', example='30', position='Body'),
  target?: [ string ](name='Target', position='Body'),
}

model UpdateServiceMirrorResponseBody = {
  message?: string(name='Message', example='Traffic mirroring is updating for service [foo] in region [cn-shanghia], ratio [70%]'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82***'),
}

model UpdateServiceMirrorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateServiceMirrorResponseBody(name='body'),
}

async function updateServiceMirror(request: UpdateServiceMirrorRequest): UpdateServiceMirrorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateServiceMirror', 'PUT', '/api/v2/services/{ClusterId}/{ServiceName}/mirror', 'json', false, 'json', request);
}

model UpdateServiceSafetyLockRequest {
  clusterId: string(name='ClusterId', example='cn-beijing', position='Path'),
  serviceName: string(name='ServiceName', example='foo', position='Path'),
  lock: string(name='Lock', description='The lock scope. Valid values:

*   all: locks all operations.
*   dangerous: locks high-risk operations such as delete and stop operations.
*   none: locks no operations.', example='dangerous', position='Body'),
}

model UpdateServiceSafetyLockResponseBody = {
  message?: string(name='Message', example='service safety lock updated to dangerous'),
  requestId?: string(name='RequestId', example='E089D584-B6F4-50C4-9902-DA2295B7****'),
}

model UpdateServiceSafetyLockResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateServiceSafetyLockResponseBody(name='body'),
}

async function updateServiceSafetyLock(request: UpdateServiceSafetyLockRequest): UpdateServiceSafetyLockResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateServiceSafetyLock', 'PUT', '/api/v2/services/{ClusterId}/{ServiceName}/lock', 'json', false, 'json', request);
}

model UpdateServiceVersionRequest {
  clusterId: string(name='ClusterId', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', example='echo', position='Path'),
  version: int32(name='Version', example='1', position='Body'),
}

model UpdateServiceVersionResponseBody = {
  message?: string(name='Message', example='Service [foo] in region [cn-shanghai] is starting'),
  requestId?: string(name='RequestId', example='40325405-579C-4D82****'),
}

model UpdateServiceVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateServiceVersionResponseBody(name='body'),
}

async function updateServiceVersion(request: UpdateServiceVersionRequest): UpdateServiceVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateServiceVersion', 'PUT', '/api/v2/services/{ClusterId}/{ServiceName}/version', 'json', false, 'json', request);
}

