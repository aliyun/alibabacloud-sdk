/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'eas';
  @version = '2021-07-01';
  @endpointRule = 'regional';
  @endpointMap = {
    'cn-beijing' = 'pai-eas.cn-beijing.aliyuncs.com',
    'cn-zhangjiakou' = 'pai-eas.cn-zhangjiakou.aliyuncs.com',
    'cn-hangzhou' = 'pai-eas.cn-hangzhou.aliyuncs.com',
    'cn-shanghai' = 'pai-eas.cn-shanghai.aliyuncs.com',
    'cn-shenzhen' = 'pai-eas.cn-shenzhen.aliyuncs.com',
    'cn-hongkong' = 'pai-eas.cn-hongkong.aliyuncs.com',
    'ap-southeast-1' = 'pai-eas.ap-southeast-1.aliyuncs.com',
    'ap-southeast-5' = 'pai-eas.ap-southeast-5.aliyuncs.com',
    'us-east-1' = 'pai-eas.us-east-1.aliyuncs.com',
    'us-west-1' = 'pai-eas.us-west-1.aliyuncs.com',
    'eu-central-1' = 'pai-eas.eu-central-1.aliyuncs.com',
    'ap-south-1' = 'pai-eas.ap-south-1.aliyuncs.com',
    'cn-shanghai-finance-1' = 'pai-eas.cn-shanghai-finance-1.aliyuncs.com',
    'cn-north-2-gov-1' = 'pai-eas.cn-north-2-gov-1.aliyuncs.com',
    'cn-chengdu' = 'pai-eas.cn-chengdu.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model ContainerInfo {
  currentReaon?: string(name='CurrentReaon'),
  currentStatus?: string(name='CurrentStatus'),
  currentTimestamp?: string(name='CurrentTimestamp'),
  image?: string(name='Image'),
  lastReason?: string(name='LastReason'),
  lastStatus?: string(name='LastStatus'),
  lastTimestamp?: string(name='LastTimestamp'),
  name?: string(name='Name'),
  port?: int32(name='Port'),
  ready?: boolean(name='Ready'),
  restartCount?: int32(name='RestartCount'),
}

model Group {
  accessToken?: string(name='AccessToken'),
  clusterId?: string(name='ClusterId'),
  createTime?: string(name='CreateTime'),
  internetEndpoint?: string(name='InternetEndpoint'),
  intranetEndpoint?: string(name='IntranetEndpoint'),
  name?: string(name='Name'),
  queueService?: string(name='QueueService'),
  trafficMode?: string(name='TrafficMode'),
  updateTime?: string(name='UpdateTime'),
}

model Instance {
  currentAmount?: float(name='CurrentAmount', example='0.444'),
  externalIP?: string(name='ExternalIP', example='192.168.1.100'),
  externalInstancePort?: int32(name='ExternalInstancePort', example='8080'),
  hostIP?: string(name='HostIP'),
  hostName?: string(name='HostName'),
  innerIP?: string(name='InnerIP'),
  instanceName?: string(name='InstanceName'),
  instancePort?: int32(name='InstancePort'),
  instanceType?: string(name='InstanceType', example='ecs.c7.large'),
  isSpot?: boolean(name='IsSpot', example='false'),
  isolated?: boolean(name='Isolated', example='false'),
  lastState?: [  map[string]any ](name='LastState'),
  namespace?: string(name='Namespace'),
  originalAmount?: float(name='OriginalAmount', example='2.2'),
  readyProcesses?: int32(name='ReadyProcesses'),
  reason?: string(name='Reason'),
  resourceType?: string(name='ResourceType', example='PublicResource'),
  restartCount?: int32(name='RestartCount'),
  role?: string(name='Role', example='Standard'),
  startAt?: string(name='StartAt', deprecated='true'),
  startTime?: string(name='StartTime'),
  status?: string(name='Status'),
  tenantHostIP?: string(name='TenantHostIP', example='192.168.0.39'),
  tenantInstanceIP?: string(name='TenantInstanceIP', example='192.168.0.39'),
  totalProcesses?: int32(name='TotalProcesses'),
  zone?: string(name='Zone', example='cn-shanghai-a'),
}

model Resource {
  clusterId?: string(name='ClusterId'),
  cpuCount?: int32(name='CpuCount'),
  createTime?: string(name='CreateTime'),
  extraData?: map[string]any(name='ExtraData'),
  gpuCount?: int32(name='GpuCount'),
  instanceCount?: int32(name='InstanceCount'),
  message?: string(name='Message'),
  postPaidInstanceCount?: int32(name='PostPaidInstanceCount'),
  prePaidInstanceCount?: int32(name='PrePaidInstanceCount'),
  resourceId?: string(name='ResourceId'),
  resourceName?: string(name='ResourceName'),
  resourceType?: string(name='ResourceType'),
  status?: string(name='Status'),
  updateTime?: string(name='UpdateTime'),
  vendor?: string(name='Vendor'),
}

model ResourceInstance {
  arch?: string(name='Arch'),
  autoRenewal?: boolean(name='AutoRenewal'),
  chargeType?: string(name='ChargeType'),
  createTime?: string(name='CreateTime'),
  expiredTime?: string(name='ExpiredTime'),
  instanceCpuCount?: int32(name='InstanceCpuCount'),
  instanceGpuCount?: int32(name='InstanceGpuCount'),
  instanceGpuMemory?: string(name='InstanceGpuMemory'),
  instanceId?: string(name='InstanceId'),
  instanceIp?: string(name='InstanceIp'),
  instanceMemory?: string(name='InstanceMemory'),
  instanceName?: string(name='InstanceName'),
  instanceStatus?: string(name='InstanceStatus'),
  instanceSystemDiskSize?: int32(name='InstanceSystemDiskSize'),
  instanceTenantIp?: string(name='InstanceTenantIp'),
  instanceType?: string(name='InstanceType'),
  instanceUsedCpu?: float(name='InstanceUsedCpu'),
  instanceUsedGpu?: float(name='InstanceUsedGpu'),
  instanceUsedGpuMemory?: string(name='InstanceUsedGpuMemory'),
  instanceUsedMemory?: string(name='InstanceUsedMemory'),
  labels?: [ 
    {
      labelKey?: string(name='LabelKey'),
      labelValue?: string(name='LabelValue'),
    }
  ](name='Labels'),
  region?: string(name='Region'),
  resourceId?: string(name='ResourceId'),
  zone?: string(name='Zone'),
}

model ResourceInstanceWorker {
  cpuLimit?: int32(name='CpuLimit'),
  cpuRequest?: int32(name='CpuRequest'),
  gpuLimit?: int32(name='GpuLimit'),
  gpuRequest?: int32(name='GpuRequest'),
  memoryLimit?: int32(name='MemoryLimit'),
  memoryRquest?: int32(name='MemoryRquest'),
  name?: string(name='Name'),
  ready?: boolean(name='Ready'),
  restartCount?: int32(name='RestartCount'),
  serviceName?: string(name='ServiceName'),
  startTime?: string(name='StartTime'),
  status?: string(name='Status'),
}

model Service {
  accessToken?: string(name='AccessToken'),
  appConfig?: string(name='AppConfig'),
  appSpecName?: string(name='AppSpecName'),
  appType?: string(name='AppType'),
  appVersion?: string(name='AppVersion'),
  callerUid?: string(name='CallerUid'),
  cpu?: int32(name='Cpu'),
  createTime?: string(name='CreateTime'),
  currentVersion?: int32(name='CurrentVersion'),
  extraData?: string(name='ExtraData'),
  gateway?: string(name='Gateway'),
  gpu?: int32(name='Gpu'),
  image?: string(name='Image'),
  internetEndpoint?: string(name='InternetEndpoint'),
  intranetEndpoint?: string(name='IntranetEndpoint'),
  labels?: [ 
    {
      labelKey?: string(name='LabelKey'),
      labelValue?: string(name='LabelValue'),
    }
  ](name='Labels'),
  latestVersion?: int32(name='LatestVersion'),
  memory?: int32(name='Memory'),
  message?: string(name='Message'),
  namespace?: string(name='Namespace'),
  parentUid?: string(name='ParentUid'),
  pendingInstance?: int32(name='PendingInstance'),
  quotaId?: string(name='QuotaId'),
  reason?: string(name='Reason'),
  region?: string(name='Region'),
  requestId?: string(name='RequestId'),
  resource?: string(name='Resource'),
  resourceAlias?: string(name='ResourceAlias'),
  role?: string(name='Role'),
  roleAttrs?: string(name='RoleAttrs'),
  runningInstance?: int32(name='RunningInstance'),
  safetyLock?: string(name='SafetyLock'),
  secondaryInternetEndpoint?: string(name='SecondaryInternetEndpoint'),
  secondaryIntranetEndpoint?: string(name='SecondaryIntranetEndpoint'),
  serviceConfig?: string(name='ServiceConfig'),
  serviceGroup?: string(name='ServiceGroup'),
  serviceId?: string(name='ServiceId'),
  serviceName?: string(name='ServiceName'),
  serviceUid?: string(name='ServiceUid'),
  source?: string(name='Source'),
  status?: string(name='Status'),
  totalInstance?: int32(name='TotalInstance'),
  trafficState?: string(name='TrafficState'),
  updateTime?: string(name='UpdateTime'),
  weight?: int32(name='Weight'),
  workspaceId?: string(name='WorkspaceId'),
}

model AttachGatewayDomainRequest {
  clusterId: string(name='ClusterId', description='The region where the private gateway resides.

This parameter is required.', example='cn-shanghai', position='Path'),
  gatewayId: string(name='GatewayId', description='The ID of the private gateway. To obtain the private gateway ID, see the GatewayId parameter in the response parameters of the [ListGateway](https://apiworkbench.aliyun-inc.com/document/eas/2021-07-01/ListGateway?spm=openapi-amp.newDocPublishment.0.0.765e281fL2IcjJ\\&ampEnv=online) operation.

This parameter is required.', example='gw-1uhcqmsc7x22******', position='Path'),
  customDomain: {
    certificateId?: string(name='CertificateId', description='The ID of the SSL certificate bound to the domain name. Obtain the certificate ID after you upload or purchase a certificate in the [Certificate Management Service](https://yundunnext.console.aliyun.com/?spm=5176.2020520163.console-base_help.2.4b3baJixaJixOc\\&p=cas) console.', example='1473**25'),
    domain: string(name='Domain', description='The custom domain name.

This parameter is required.', example='test.com'),
    type: string(name='Type', description='The domain name type.

Valid value:

*   intranet: internal network.
*   internet: public network.

This parameter is required.', example='intranet'),
  }(name='CustomDomain', description='The custom domain name information.

This parameter is required.', shrink='json', position='Query'),
}

model AttachGatewayDomainResponseBody = {
  gatewayId?: string(name='GatewayId', description='The ID of the private gateway. To obtain the private gateway ID, see the GatewayId parameter in the response parameters of the [ListGateway](https://apiworkbench.aliyun-inc.com/document/eas/2021-07-01/ListGateway?spm=openapi-amp.newDocPublishment.0.0.765e281fL2IcjJ\\&ampEnv=online) operation.', example='gw-1uhcqmsc7x22******'),
  message?: string(name='Message', description='The error message.', example='Successfully update custom endpoint for gateway gw-1uhcqmsc7x22******'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='40325405-579C-4D82****'),
}

model AttachGatewayDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AttachGatewayDomainResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AttachGatewayDomain  AttachGatewayDomainRequest
  * @return AttachGatewayDomainResponse
 */
async function attachGatewayDomain(request: AttachGatewayDomainRequest): AttachGatewayDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AttachGatewayDomain', 'PUT', '/api/v2/gateways/{ClusterId}/{GatewayId}/domain/attach', 'json', false, 'json', request);
}

model CloneServiceRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.

This parameter is required.', example='cn-hangzhou', position='Path'),
  serviceName: string(name='ServiceName', description='The service name. For more information about how to query the service name, see [ListServices](https://help.aliyun.com/document_detail/412109.html).

This parameter is required.', example='foo', position='Path'),
  labels?: map[string]string(name='Labels', description='The label of the service to be cloned.', shrink='json', position='Query'),
  body?: string(name='body', description='The request body. For more information, see [CreateService](https://help.aliyun.com/document_detail/412086.html).', example='{   "name": "foo",   "model_path": "http://path/to/model.tar.gz",   "processor": "tensorflow_cpu",   "metadata": {     "instance": 2,     "memory": 7000,     "cpu": 4   } }', position='Body'),
}

model CloneServiceResponseBody = {
  internetEndpoint?: string(name='InternetEndpoint', description='The public endpoint of the service.', example='http://10123*****.cn-shanghai.aliyuncs.com/api/predict/echo'),
  intranetEndpoint?: string(name='IntranetEndpoint', description='The private endpoint of the service.', example='http://10123*****.vpc.cn-shanghai.aliyuncs.com/api/predict/echo'),
  requestId?: string(name='RequestId', description='Id of the request', example='40325405-579C-4D82****'),
  serviceId?: string(name='ServiceId', description='The service ID.', example='eas-m-r9knx7n9guf2p*****'),
  serviceName?: string(name='ServiceName', description='The service name.', example='foo'),
  status?: string(name='Status', description='The service status.', example='Creating'),
}

model CloneServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CloneServiceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CloneService  CloneServiceRequest
  * @return CloneServiceResponse
 */
async function cloneService(request: CloneServiceRequest): CloneServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CloneService', 'POST', '/api/v2/services/{ClusterId}/{ServiceName}/clone', 'json', false, 'json', request);
}

model CommitServiceRequest {
  clusterId?: string(name='ClusterId', description='The ID of the region where the service is deployed.', example='cn-beijing', position='Path'),
  serviceName?: string(name='ServiceName', description='The service name. For more information about how to query the service name, see [ListServices](https://help.aliyun.com/document_detail/412109.html).', example='foo', position='Path'),
}

model CommitServiceResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Success'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model CommitServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CommitServiceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CommitService  CommitServiceRequest
  * @return CommitServiceResponse
 */
async function commitService(request: CommitServiceRequest): CommitServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CommitService', 'PUT', '/api/v2/services/{ClusterId}/{ServiceName}/commit', 'json', false, 'json', request);
}

model CreateAclPolicyRequest {
  clusterId: string(name='ClusterId', description='The region ID of the private gateway.

This parameter is required.', example='cn-wulanchabu', position='Path'),
  gatewayId: string(name='GatewayId', description='The private gateway ID. To obtain the private gateway ID, see the private_gateway_id parameter in the response parameters of the ListResources operation.

This parameter is required.', example='gw-1uhcqmsc7x22******', position='Path'),
  aclPolicyList: [ 
    {
      comment?: string(name='Comment', description='The comment on the IP CIDR block in the VPC that can access the private gateway.', example='default'),
      entry: string(name='Entry', description='The IP CIDR block in the VPC that can access the private gateway.

This parameter is required.', example='10.23.XX.XX/32'),
    }
  ](name='AclPolicyList', description='The whitelisted IP CIDR blocks in the VPC that can access the private gateway.

This parameter is required.', shrink='json', position='Query'),
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC). For more information about how to obtain the VPC ID, see DescribeVpcs.', example='vpc-uf66uio7md****', position='Query'),
}

model CreateAclPolicyResponseBody = {
  gatewayId?: string(name='GatewayId', description='The private gateway ID.', example='gw-1uhcqmsc7x22******'),
  message?: string(name='Message', description='The returned message.', example='Successfully add acl policy for gateway'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model CreateAclPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAclPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateAclPolicy  CreateAclPolicyRequest
  * @return CreateAclPolicyResponse
 */
async function createAclPolicy(request: CreateAclPolicyRequest): CreateAclPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateAclPolicy', 'POST', '/api/v2/gateways/{ClusterId}/{GatewayId}/acl_policy', 'json', false, 'json', request);
}

model CreateAppServiceRequest {
  quotaId?: string(name='QuotaId', description='The quota ID.', example='abcdef', position='Query'),
  workspaceId?: string(name='WorkspaceId', description='The workspace ID.', example='123456', position='Query'),
  appType: string(name='AppType', description='The application service type.

Valid values:

*   LLM

    <!-- -->

    <!-- -->

    <!-- -->

This parameter is required.', example='LLM', position='Body'),
  appVersion?: string(name='AppVersion', description='The application version.', example='v1', position='Body'),
  config?: map[string]any(name='Config', description='The additional configurations that are required for service deployment.', position='Body'),
  replicas: int32(name='Replicas', description='The number of instances.

This parameter is required.', example='1', position='Body'),
  serviceName: string(name='ServiceName', description='The service name.

This parameter is required.', example='foo', position='Body'),
  serviceSpec: string(name='ServiceSpec', description='The service specifications. Valid values:

*   llama_7b_fp16
*   llama_7b_int8
*   llama_13b_fp16
*   llama_7b_int8
*   chatglm_6b_fp16
*   chatglm_6b_int8
*   chatglm2_6b_fp16
*   baichuan_7b_int8
*   baichuan_13b_fp16
*   baichuan_7b_fp16

This parameter is required.', example='llama_7b_fp16', position='Body'),
}

model CreateAppServiceResponseBody = {
  internetEndpoint?: string(name='InternetEndpoint', description='The public endpoint of the service.', example='http://pai-eas.cn-shanghai.****'),
  intranetEndpoint?: string(name='IntranetEndpoint', description='The internal endpoint of the service.', example='http://pai-eas-vpc.cn-shanghai.****'),
  region?: string(name='Region', description='The region ID of the service.', example='cn-shanghai'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
  serviceId?: string(name='ServiceId', description='The service ID.', example='eas-m-aaxxxddf'),
  serviceName?: string(name='ServiceName', description='The service name.', example='foo'),
  status?: string(name='Status', description='The service state.', example='Creating'),
}

model CreateAppServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAppServiceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateAppService  CreateAppServiceRequest
  * @return CreateAppServiceResponse
 */
async function createAppService(request: CreateAppServiceRequest): CreateAppServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateAppService', 'POST', '/api/v2/app_services', 'json', false, 'json', request);
}

model CreateBenchmarkTaskRequest {
  body?: string(name='body', description='The request body. The body includes the parameters that are set to create a stress testing task.', example='{
    "base": {
        "duration": 600
    },
    "service": {
        "serviceName": "test_service",
        "requestToken": "test_token"
    },
    "data": {
        "path": "https://larec-benchmark-cd.oss-cn-chengdu.aliyuncs.com/youbei/sv_dbmtl/data/youbei.warmup.tf.bin",
        "dataType": "binary"
    },
    "optional": {
       "maxRt": 100
    }
}', position='Body'),
}

model CreateBenchmarkTaskResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Benchmark  task [foo] is Creating'),
  region?: string(name='Region', description='The ID of the region where the stress testing task is performed.', example='cn-shanghai'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82********'),
  taskName?: string(name='TaskName', description='The name of the stress testing task.', example='benchmark-larec-test-1076'),
}

model CreateBenchmarkTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateBenchmarkTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateBenchmarkTask  CreateBenchmarkTaskRequest
  * @return CreateBenchmarkTaskResponse
 */
async function createBenchmarkTask(request: CreateBenchmarkTaskRequest): CreateBenchmarkTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateBenchmarkTask', 'POST', '/api/v2/benchmark-tasks', 'json', false, 'json', request);
}

model CreateGatewayRequest {
  resourceName?: string(name='ResourceName', description='The resource group ID. To obtain a resource group ID, see the ResourceId field in the response of the [ListResources](https://help.aliyun.com/document_detail/412133.html) operation.', example='eas-r-4gt8twzwllfo******', position='Query'),
  autoRenewal?: boolean(name='AutoRenewal', description='Specifies whether to enable auto-renewal. Valid values:

*   false (default)
*   true', position='Body'),
  chargeType?: string(name='ChargeType', description='The billing method. Valid values:

*   PrePaid: subscription.
*   PostPaid: pay-as-you-go.', example='PostPaid', position='Body'),
  enableInternet?: boolean(name='EnableInternet', description='Specifies whether to enable Internet access. Default value: false.

Valid values:

*   true
*   false', example='false', position='Body'),
  enableIntranet?: boolean(name='EnableIntranet', description='Specifies whether to enable private access. Default value: true.

Valid values:

*   true
*   false', example='true', position='Body'),
  instanceType: string(name='InstanceType', description='The instance type used by the private gateway. Valid values:

*   2c4g
*   4c8g
*   8c16g
*   16c32g

This parameter is required.', example='ecs.c6.4xlarge', position='Body'),
  name?: string(name='Name', description='The alias of the private gateway.', example='mygateway1', position='Body'),
  replicas?: int32(name='Replicas', description='The number of nodes in the private gateway.', example='2', position='Body'),
}

model CreateGatewayResponseBody = {
  clusterId?: string(name='ClusterId', description='The region ID of the private gateway.', example='cn-hangzhou'),
  gatewayId?: string(name='GatewayId', description='The private gateway ID.', example='gw-1uhcqmsc7x22******'),
  message?: string(name='Message', description='The returned message.', example='Successfully create gateway.'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model CreateGatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateGatewayResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateGateway  CreateGatewayRequest
  * @return CreateGatewayResponse
 */
async function createGateway(request: CreateGatewayRequest): CreateGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateGateway', 'POST', '/api/v2/gateways', 'json', false, 'json', request);
}

model CreateGatewayIntranetLinkedVpcRequest {
  clusterId: string(name='ClusterId', description='The region ID of the private gateway.

This parameter is required.', example='cn-hangzhou', position='Path'),
  gatewayId: string(name='GatewayId', description='The private gateway ID.

This parameter is required.', example='gw-1uhcqmsc7x22******', position='Path'),
  accountId?: string(name='AccountId', position='Query'),
  enableAuthoritativeDns?: boolean(name='EnableAuthoritativeDns', position='Query'),
  vSwitchId?: string(name='VSwitchId', description='The vSwitch ID.', example='vsw-8vbqn2at0kljjxxxx****', position='Query'),
  vpcId?: string(name='VpcId', description='The virtual private cloud (VPC) ID.', example='vpc-uf66uio7md****', position='Query'),
}

model CreateGatewayIntranetLinkedVpcResponseBody = {
  gatewayId?: string(name='GatewayId', description='The private gateway ID.', example='gw-1uhcqmsc7x22******'),
  message?: string(name='Message', description='The returned message.', example='Successfully add intranet linked vpc for gateway'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model CreateGatewayIntranetLinkedVpcResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateGatewayIntranetLinkedVpcResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateGatewayIntranetLinkedVpc  CreateGatewayIntranetLinkedVpcRequest
  * @return CreateGatewayIntranetLinkedVpcResponse
 */
async function createGatewayIntranetLinkedVpc(request: CreateGatewayIntranetLinkedVpcRequest): CreateGatewayIntranetLinkedVpcResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateGatewayIntranetLinkedVpc', 'POST', '/api/v2/gateways/{ClusterId}/{GatewayId}/intranet_endpoint_linked_vpc', 'json', false, 'json', request);
}

model CreateGatewayIntranetLinkedVpcPeerRequest {
  clusterId?: string(name='ClusterId', description='The region where the private gateway resides.', example='cn-wulanchabu', position='Path'),
  gatewayId?: string(name='GatewayId', description='The ID of the private gateway. To obtain the private gateway ID, see [ListGateway](https://help.aliyun.com/document_detail/2841911.html).', example='gw-1uhcqmsc7x22******', position='Path'),
  peerVpcs?: [ 
    {
      region?: string(name='Region', description='The region where the VPC peer resides.', example='cn-shanghai'),
      vpcId?: string(name='VpcId', description='The ID of the VPC peer. To obtain the VPC ID, see [DescribeVpcs](https://help.aliyun.com/document_detail/35739.html).', example='vpc-uf66uio7md****'),
    }
  ](name='PeerVpcs', description='The list of VPC peers.', shrink='json', position='Query'),
  vpcId?: string(name='VpcId', description='The VPC ID. To obtain the VPC ID, see [ListGatewayIntranetLinkedVpc](https://help.aliyun.com/document_detail/2621223.html).', example='vpc-2zetuli9ws0qgjd******', position='Query'),
}

model CreateGatewayIntranetLinkedVpcPeerResponseBody = {
  gatewayId?: string(name='GatewayId', description='The ID of the private gateway.', example='gw-1uhcqmsc7x22******'),
  message?: string(name='Message', description='The message that is returned.', example='Successfully add intranet linked vpc Peer for gateway'),
  requestId?: string(name='requestId', description='The ID of the request.', example='40325405-579C-4D82****'),
}

model CreateGatewayIntranetLinkedVpcPeerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateGatewayIntranetLinkedVpcPeerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateGatewayIntranetLinkedVpcPeer  CreateGatewayIntranetLinkedVpcPeerRequest
  * @return CreateGatewayIntranetLinkedVpcPeerResponse
 */
async function createGatewayIntranetLinkedVpcPeer(request: CreateGatewayIntranetLinkedVpcPeerRequest): CreateGatewayIntranetLinkedVpcPeerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateGatewayIntranetLinkedVpcPeer', 'POST', '/api/v2/gateways/{ClusterId}/{GatewayId}/intranet_endpoint_linked_vpc_peer', 'json', false, 'json', request);
}

model CreateResourceRequest {
  autoRenewal?: boolean(name='AutoRenewal', description='Specifies whether to enable auto-renewal. Valid values:

*   false (default)
*   true', example='false', position='Body'),
  chargeType?: string(name='ChargeType', description='The billing method. Valid values:

*   PrePaid: the subscription billing method.
*   PostPaid: the pay-as-you-go billing method.

>  This parameter is required when the ResourceType parameter is set to Dedicated.', example='PostPaid', position='Body'),
  ecsInstanceCount?: int32(name='EcsInstanceCount', description='The number of ECS instances.

>  This parameter is required when the ResourceType parameter is set to Dedicated.', example='5', position='Body'),
  ecsInstanceType?: string(name='EcsInstanceType', description='The type of the Elastic Compute Service (ECS) instance.

>  This parameter is required when the ResourceType parameter is set to Dedicated.', example='ecs.c6.8xlarge', position='Body'),
  labels?: map[string]string(name='Labels', description='The labels.', position='Body'),
  resourceName?: string(name='ResourceName', example='MyResource', position='Body'),
  resourceType?: string(name='ResourceType', description='The type of the resource group. Valid values:

*   Dedicated: the dedicated resource group.
*   SelfManaged: the self-managed resource group.

>  If you use a self-managed resource group, you must configure a whitelist.', example='Dedicated', position='Body'),
  selfManagedResourceOptions?: {
    externalClusterId?: string(name='ExternalClusterId', description='The ID of the self-managed cluster.', example='cf0386f250f2545689ca7fdd1cd******'),
    nodeMatchLabels?: map[string]string(name='NodeMatchLabels', description='The tag key-value pairs of the node.'),
    nodeTolerations?: [ 
      {
        effect?: string(name='effect', description='The effect.

Valid values:

*   PreferNoSchedule
*   NoSchedule
*   NoExecute', example='NoSchedule'),
        key?: string(name='key', description='The key name.', example='key1'),
        operator?: string(name='operator', description='The relationship between key names and key values.

Valid values:

*   Equal
*   Exists', example='Equal'),
        value?: string(name='value', description='The key value.', example='value1'),
      }
    ](name='NodeTolerations', description='The tolerations for the node taint.'),
    roleName?: string(name='RoleName', description='The name of the RAM user to which the permissions on Elastic Algorithm Service (EAS) of Platform for AI (PAI) are granted.', example='clusterrole'),
  }(name='SelfManagedResourceOptions', description='The configurations of the self-managed resource group.', position='Body'),
  systemDiskSize?: int32(name='SystemDiskSize', description='The size of the system disk. Unit: GiB. Valid values: 200 to 2000. Default value: 200.', example='200', minimum=200, maximum=2000, position='Body'),
  zone?: string(name='Zone', description='The ID of the zone in which the instance resides.', example='cn-shanghai-f', position='Body'),
}

model CreateResourceResponseBody = {
  clusterId?: string(name='ClusterId', description='The ID of the cluster to which the resource group belongs.', example='cn-shanghai'),
  instanceIds?: [ string ](name='InstanceIds', description='The instance IDs.'),
  ownerUid?: string(name='OwnerUid', description='The user ID (UID) of the resource group owner.', example='14401087478****'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
  resourceId?: string(name='ResourceId', description='The ID of the resource group.', example='eas-r-h7lcw24dyqztwxxxxxx'),
  resourceName?: string(name='ResourceName', description='The name of the resource group.', example='MyResource'),
}

model CreateResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateResourceResponseBody(name='body'),
}

/**
  * @description **Before you call this operation, make sure that you are familiar with the [billing](https://help.aliyun.com/document_detail/144261.html) of Elastic Algorithm Service (EAS).
  * @param request  the request parameters of CreateResource  CreateResourceRequest
  * @return CreateResourceResponse
 */
async function createResource(request: CreateResourceRequest): CreateResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateResource', 'POST', '/api/v2/resources', 'json', false, 'json', request);
}

model CreateResourceInstancesRequest {
  clusterId: string(name='ClusterId', description='The ID of the region to which the resource group belongs.

This parameter is required.', example='cn-shanghai', position='Path'),
  resourceId: string(name='ResourceId', description='The ID of the resource group. For more information about how to query the ID of a resource group, see [ListResources](https://help.aliyun.com/document_detail/412133.html).

This parameter is required.', example='eas-r-asdasdasd', position='Path'),
  autoRenewal?: boolean(name='AutoRenewal', description='Specifies whether to enable auto-renewal. Valid values:

*   false (default)
*   true', example='false', position='Body'),
  chargeType: string(name='ChargeType', description='The billing method of the instance. Valid values:

*   PrePaid: subscription.
*   PostPaid: pay-as-you-go.

This parameter is required.', example='PrePaid', position='Body'),
  ecsInstanceCount: int32(name='EcsInstanceCount', description='The number of instances that you want to create. Valid values: 1 to 100.

This parameter is required.', example='5', position='Body'),
  ecsInstanceType: string(name='EcsInstanceType', description='The type of the Elastic Compute Service (ECS) instance.

This parameter is required.', example='ecs.s6-c1m2.xlarge', position='Body'),
  labels?: map[string]string(name='Labels', description='The custom service tag.', position='Body'),
  systemDiskSize?: int32(name='SystemDiskSize', description='The size of the system disk. Unit: GiB. Valid values: 200 to 2000. Default value: 200.', example='200', minimum=200, maximum=2000, position='Body'),
  userData?: string(name='UserData', description='The user-defined information. This parameter is not in use.', example='x112223333', deprecated='true', position='Body'),
  zone?: string(name='Zone', description='The zone to which the instance belongs.', example='cn-shanghai-f', position='Body'),
}

model CreateResourceInstancesResponseBody = {
  instanceIds?: [ string ](name='InstanceIds', description='The instance IDs.'),
  message?: string(name='Message', description='The returned message.', example='Create 5 new ecs instance(s) in resource [eas-r-asdasdasd] successfully'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model CreateResourceInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateResourceInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateResourceInstances  CreateResourceInstancesRequest
  * @return CreateResourceInstancesResponse
 */
async function createResourceInstances(request: CreateResourceInstancesRequest): CreateResourceInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateResourceInstances', 'POST', '/api/v2/resources/{ClusterId}/{ResourceId}/instances', 'json', false, 'json', request);
}

model CreateResourceLogRequest {
  clusterId: string(name='ClusterId', description='The ID of the region to which the resource group belongs.

This parameter is required.', example='cn-shanghai', position='Path'),
  resourceId: string(name='ResourceId', description='The ID of the resource group. For more information about how to query the ID of a resource group, see [ListResources](https://help.aliyun.com/document_detail/412133.html).

This parameter is required.', example='eas-r-asdasdasd', position='Path'),
  logStore: string(name='LogStore', description='The Logstore of Log Service. For more information about how to query a Logstore, see [ListLogStores](https://help.aliyun.com/document_detail/426970.html).

This parameter is required.', example='access_log', position='Body'),
  projectName: string(name='ProjectName', description='The Log Service project that is associated with the resource group. For more information about how to query the project, see [ListProject](https://help.aliyun.com/document_detail/74955.html).

This parameter is required.', example='eas-r-asdasdasd-sls', position='Body'),
}

model CreateResourceLogResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Resource [eas-r-asdasdasd] is deleted.'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model CreateResourceLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateResourceLogResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateResourceLog  CreateResourceLogRequest
  * @return CreateResourceLogResponse
 */
async function createResourceLog(request: CreateResourceLogRequest): CreateResourceLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateResourceLog', 'POST', '/api/v2/resources/{ClusterId}/{ResourceId}/log', 'json', false, 'json', request);
}

model CreateServiceRequest {
  develop?: string(name='Develop', description='Specifies whether to enter development mode.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true', position='Query'),
  labels?: map[string]string(name='Labels', description='The custom label.', shrink='json', position='Query'),
  workspaceId?: string(name='WorkspaceId', description='The workspace ID.', example='123456', position='Query'),
  body?: string(name='body', description='The request body. For more information about the key request parameters, see **Table 1. Request body parameters** and **Table 2. Metadata parameters**. For more information about all related parameters, see [Parameters of model services](https://help.aliyun.com/document_detail/450525.html).', example='Service deployment by using an image:
{
  "name": "foo",
  "metadata": {
    "instance": 2,
    "memory": 7000,
    "cpu": 4
    },
  "containers": [
    {
      "image": "****",
      "script": "**** --listen=0.0.0.0 --server_port=8000 --headless",
      "port": 8000
    }
  ],
  "storage": [
    {
      "oss": {
        "path": "oss://examplebuket/data111/",
        "readOnly": false
      },
      "properties": {
        "resource_type": "model"
      },
      "mount_path": "/data"
    }
  ]
}
AI-Web application deployment by using an image:
{
  "name": "foo",
  "metadata": {
    "instance": 1,
    "memory": 7000,
    "cpu": 4,
    "enable_webservice": true
  },
  "containers": [
    {
      "image": "****",
      "script": "**** --listen=0.0.0.0 --server_port=8000 --headless",
      "port": 8000
    }
  ],
  "storage": [
    {
      "oss": {
        "path": "oss://examplebucket/data111/",
        "readOnly": false
      },
      "properties": {
      "resource_type": "model"
      },
      "mount_path": "/data"
    }
  ]
}
Service deployment by using models and processors:
{
  "metadata": {
    "instance": 1,
    "memory": 7000,
    "cpu": 4
  },
  "name": "foo",
  "model_config": {},
  "processor_type": "python",
  "processor_path": "oss://****",
  "processor_entry": "a.py",
  "model_path": "oss://****"
}', position='Body'),
}

model CreateServiceResponseBody = {
  internetEndpoint?: string(name='InternetEndpoint', description='The public endpoint of the created service.', example='http://pai-eas.vpc.cn-shanghai.****'),
  intranetEndpoint?: string(name='IntranetEndpoint', description='The internal endpoint of the created service.', example='http://pai-eas.cn-shanghai.****'),
  region?: string(name='Region', description='The region ID of the created service.', example='cn-shanghai'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
  serviceId?: string(name='ServiceId', description='The ID of the created service.', example='eas-m-aaxxxddf'),
  serviceName?: string(name='ServiceName', description='The name of the created service.', example='yourname'),
  status?: string(name='Status', description='The service state.', example='Creating'),
}

model CreateServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateServiceResponseBody(name='body'),
}

/**
  * @description **Before you call this operation, make sure that you are familiar with the [billing](https://help.aliyun.com/document_detail/144261.html) of Elastic Algorithm Service (EAS).
  * @param request  the request parameters of CreateService  CreateServiceRequest
  * @return CreateServiceResponse
 */
async function createService(request: CreateServiceRequest): CreateServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateService', 'POST', '/api/v2/services', 'json', false, 'json', request);
}

model CreateServiceAutoScalerRequest {
  clusterId: string(name='ClusterId', description='The ID of the region where the service is deployed.

This parameter is required.', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='The service name. For more information about how to query the service name, see [ListServices](https://help.aliyun.com/document_detail/412109.html).

This parameter is required.', example='foo', position='Path'),
  behavior?: {
    onZero?: {
      scaleDownGracePeriodSeconds?: int32(name='scaleDownGracePeriodSeconds', description='The time window that is required before the number of instances is reduced to 0. The number of instances can be reduced to 0 only if no request is available or no traffic exists in the specified time window. Default value: 600.', example='600'),
      scaleUpActivationReplicas?: int32(name='scaleUpActivationReplicas', description='The number of instances that you want to create at a time if the number of instances is 0. Default value: 1.', example='1'),
    }(name='onZero', description='The operation that reduces the number of instances to 0.'),
    scaleDown?: {
      stabilizationWindowSeconds?: int32(name='stabilizationWindowSeconds', description='The time window that is required before the scale-in operation is performed. The scale-in operation can be performed only if the specified metric drops below the specified threshold in the specified time window. Default value: 300.', example='300'),
    }(name='scaleDown', description='The scale-in operation.'),
    scaleUp?: {
      stabilizationWindowSeconds?: int32(name='stabilizationWindowSeconds', description='The time window that is required before the scale-out operation is performed. The scale-out operation can be performed only if the specified metric exceeds the specified threshold in the specified time window. Default value: 0.', example='0'),
    }(name='scaleUp', description='The scale-out operation.'),
  }(name='behavior', description='The Autoscaler operation.', position='Body'),
  max: int32(name='max', description='The maximum number of instances in the service. The value of max must be greater than the value of min.

This parameter is required.', example='8', position='Body'),
  min: int32(name='min', description='The minimum number of instances in the service.

This parameter is required.', example='2', position='Body'),
  scaleStrategies: [ 
    {
      metricName: string(name='metricName', description='The name of the metric for triggering auto scaling. Valid values:

*   qps: the queries per second (qps) for an individual instance.
*   cpu: the cpu utilization.
* gpu[util]: gpu utilization.

This parameter is required.', example='qps'),
      service?: string(name='service', description='The service for which the metric is specified. If you do not set this parameter, the current service is specified by default.', example='demo_svc'),
      threshold: float(name='threshold', description='The threshold of the metric that triggers auto scaling.

*   If you set metricName to qps, scale-out is triggered when the average qps for a single instance is greater than this threshold.
*   If you set metricName to cpu, scale-out is triggered when the average cpu utilization for a single instance is greater than this threshold.
*   If you set metricName to gpu, scale-out is triggered when the average gpu utilization for a single instance is greater than this threshold.

This parameter is required.', example='10'),
    }
  ](name='scaleStrategies', description='The service for which the metric is specified. If you do not set this parameter, the current service is specified by default.

This parameter is required.', position='Body'),
}

model CreateServiceAutoScalerResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Succeed to auto scale service [foo]'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model CreateServiceAutoScalerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateServiceAutoScalerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateServiceAutoScaler  CreateServiceAutoScalerRequest
  * @return CreateServiceAutoScalerResponse
 */
async function createServiceAutoScaler(request: CreateServiceAutoScalerRequest): CreateServiceAutoScalerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateServiceAutoScaler', 'POST', '/api/v2/services/{ClusterId}/{ServiceName}/autoscaler', 'json', false, 'json', request);
}

model CreateServiceCronScalerRequest {
  clusterId: string(name='ClusterId', description='The region ID of the service.

This parameter is required.', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='The service name. For more information about how to query the service name, see [ListServices](https://help.aliyun.com/document_detail/412109.html).

This parameter is required.', example='foo', position='Path'),
  excludeDates?: [ string ](name='ExcludeDates', description='The points in time that are excluded when you schedule a CronHPA job. The points in time must be specified by using a cron expression.', position='Body'),
  scaleJobs: [ 
    {
      name?: string(name='Name', description='The name of the CronHPA job.', example='scale-job-1'),
      schedule: string(name='Schedule', description='The cron expression that is used to configure the execution time of the CronHPA job. For more information about how to configure cron expressions, see **Description of special characters** in this topic.

This parameter is required.', example='0 18 * * * *'),
      targetSize: int32(name='TargetSize', description='The number of instances that you want to configure for the CronHPA job.

This parameter is required.', example='1'),
    }
  ](name='ScaleJobs', description='The description of the CronHPA job.

This parameter is required.', position='Body'),
}

model CreateServiceCronScalerResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Create cron scaler for service [foo] successfully'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model CreateServiceCronScalerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateServiceCronScalerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateServiceCronScaler  CreateServiceCronScalerRequest
  * @return CreateServiceCronScalerResponse
 */
async function createServiceCronScaler(request: CreateServiceCronScalerRequest): CreateServiceCronScalerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateServiceCronScaler', 'POST', '/api/v2/services/{ClusterId}/{ServiceName}/cronscaler', 'json', false, 'json', request);
}

model CreateServiceMirrorRequest {
  clusterId: string(name='ClusterId', description='The ID of the region where the service is deployed.

This parameter is required.', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='The service name. For more information about how to query the service name, see [ListServices](https://help.aliyun.com/document_detail/412109.html).

This parameter is required.', example='foo', position='Path'),
  ratio?: int32(name='Ratio', description='The percentage of the traffic that is mirrored to the destination service. Valid values: 0 to 100.', example='30', position='Body'),
  target?: [ string ](name='Target', description='The instances.', position='Body'),
}

model CreateServiceMirrorResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Traffic mirroring is ON for service [foo] in region [cn-shanghia], ratio [70%]'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82***'),
}

model CreateServiceMirrorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateServiceMirrorResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateServiceMirror  CreateServiceMirrorRequest
  * @return CreateServiceMirrorResponse
 */
async function createServiceMirror(request: CreateServiceMirrorRequest): CreateServiceMirrorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateServiceMirror', 'POST', '/api/v2/services/{ClusterId}/{ServiceName}/mirror', 'json', false, 'json', request);
}

model CreateVirtualResourceRequest {
  disableSpotProtectionPeriod?: boolean(name='DisableSpotProtectionPeriod', description='Specifies whether to disable the retention period of preemptible instances.', example='true', position='Body'),
  resources?: [ 
    {
      instanceType?: string(name='InstanceType', description='The instance type of the public resource group.

>  You must specify one and only one of the InstanceType, ResourceId, and QuotaId parameters.', example='ecs.s6-c1m2.xlarge'),
      priority?: int32(name='Priority', description='The priority of resource scheduling. A greater number indicates a higher priority.', example='6'),
      quotaId?: string(name='QuotaId', description='The ID of the Lingjun resource quota.

>  You must specify one and only one of the InstanceType, ResourceId, and QuotaId parameters.', example='quota185lqxxxxxx'),
      region?: string(name='Region', description='The region in which the resource resides.', example='cn-hangzhou'),
      resourceId?: string(name='ResourceId', description='The ID of the dedicated resource group. For information about how to obtain the ID of a dedicated resource group, see [ListResources](https://help.aliyun.com/document_detail/412133.html).

>  You must specify one and only one of the InstanceType, ResourceId, and QuotaId parameters.', example='eas-r-g55ieatgg3buxxxxxx'),
      spotPriceLimit?: float(name='SpotPriceLimit', description='The maximum price of preemptible instances in a public resource group.

>  If you leave this parameter empty, preemptible instances are not used.', example='10.05'),
    }
  ](name='Resources', description='The resources in the virtual resource group.', position='Body'),
  virtualResourceName?: string(name='VirtualResourceName', description='The name of the virtual resource group. Default value: the ID of the virtual resource group.', example='MyVirtualResource', position='Body'),
}

model CreateVirtualResourceResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Successfully created virtual resource eas-vr-npovr28onap1xxxxxx'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='40325405-579C-4D82***'),
  virtualResourceId?: string(name='VirtualResourceId', description='The ID of the virtual resource group.', example='eas-vr-npovr28onap1xxxxxx'),
}

model CreateVirtualResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateVirtualResourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateVirtualResource  CreateVirtualResourceRequest
  * @return CreateVirtualResourceResponse
 */
async function createVirtualResource(request: CreateVirtualResourceRequest): CreateVirtualResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateVirtualResource', 'POST', '/api/v2/virtualresources', 'json', false, 'json', request);
}

model DeleteAclPolicyRequest {
  clusterId: string(name='ClusterId', description='The region ID of the private gateway.

This parameter is required.', example='cn-wulanchabu', position='Path'),
  gatewayId: string(name='GatewayId', description='The private gateway ID. To obtain the private gateway ID, see the private_gateway_id parameter in the response parameters of the ListResources operation.

This parameter is required.', example='gw-1uhcqmsc7x22******', position='Path'),
  aclPolicyList?: [ 
    {
      comment?: string(name='Comment', description='The comment on the IP CIDR block in the VPC that can access the private gateway.', example='default'),
      entry?: string(name='Entry', description='The IP CIDR block in the VPC that can access the private gateway.', example='10.23.XX.XX/32'),
    }
  ](name='AclPolicyList', description='The whitelisted IP CIDR blocks in the VPC that can access the private gateway.', shrink='json', position='Query'),
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC). For more information about how to obtain the VPC ID, see DescribeVpcs.', example='vpc-uf66uio7md****', position='Query'),
}

model DeleteAclPolicyResponseBody = {
  gatewayId?: string(name='GatewayId', description='The private gateway ID.', example='gw-1uhcqmsc7x22******'),
  message?: string(name='Message', description='The returned message.', example='Successfully delete acl policy for gateway'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model DeleteAclPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAclPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteAclPolicy  DeleteAclPolicyRequest
  * @return DeleteAclPolicyResponse
 */
async function deleteAclPolicy(request: DeleteAclPolicyRequest): DeleteAclPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteAclPolicy', 'DELETE', '/api/v2/gateways/{ClusterId}/{GatewayId}/acl_policy', 'json', false, 'json', request);
}

model DeleteBenchmarkTaskRequest {
  clusterId: string(name='ClusterId', description='The ID of the region where the stress testing task is performed.

This parameter is required.', example='cn-shanghai', position='Path'),
  taskName: string(name='TaskName', description='The name of the stress testing task. For more information about how to query the name of a stress testing task, see [ListBenchmarkTask](https://help.aliyun.com/document_detail/432976.html).

This parameter is required.', example='benchmark-larec-test-2b11', position='Path'),
}

model DeleteBenchmarkTaskResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Benchmark task [benchmark-test-service-234c] is Deleting'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model DeleteBenchmarkTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteBenchmarkTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteBenchmarkTask  DeleteBenchmarkTaskRequest
  * @return DeleteBenchmarkTaskResponse
 */
async function deleteBenchmarkTask(request: DeleteBenchmarkTaskRequest): DeleteBenchmarkTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteBenchmarkTask', 'DELETE', '/api/v2/benchmark-tasks/{ClusterId}/{TaskName}', 'json', false, 'json', request);
}

model DeleteGatewayRequest {
  clusterId: string(name='ClusterId', description='The region ID of the private gateway.

This parameter is required.', example='cn-hangzhou', position='Path'),
  gatewayId: string(name='GatewayId', description='The private gateway ID.

This parameter is required.', example='gw-1uhcqmsc7x22******', position='Path'),
}

model DeleteGatewayResponseBody = {
  gatewayId?: string(name='GatewayId', description='The private gateway ID.', example='gw-1uhcqmsc7x22******'),
  message?: string(name='Message', description='The returned message.', example='Gateway is deleted.'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model DeleteGatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteGatewayResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteGateway  DeleteGatewayRequest
  * @return DeleteGatewayResponse
 */
async function deleteGateway(request: DeleteGatewayRequest): DeleteGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteGateway', 'DELETE', '/api/v2/gateways/{ClusterId}/{GatewayId}', 'json', false, 'json', request);
}

model DeleteGatewayIntranetLinkedVpcRequest {
  clusterId: string(name='ClusterId', description='The region ID of the private gateway.

This parameter is required.', example='cn-hangzhou', position='Path'),
  gatewayId: string(name='GatewayId', description='The private gateway ID.

This parameter is required.', example='gw-1uhcqmsc7x22******', position='Path'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-8vbqn2at0kljjxxxx****', position='Query'),
  vpcId?: string(name='VpcId', description='The virtual private cloud (VPC) ID.', example='vpc-uf66uio7md****', position='Query'),
}

model DeleteGatewayIntranetLinkedVpcResponseBody = {
  gatewayId?: string(name='GatewayId', description='The private gateway ID.', example='gw-1uhcqmsc7x22******'),
  message?: string(name='Message', description='The returned message.', example='Successfully delete intranet linked vpc for gateway'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model DeleteGatewayIntranetLinkedVpcResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteGatewayIntranetLinkedVpcResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteGatewayIntranetLinkedVpc  DeleteGatewayIntranetLinkedVpcRequest
  * @return DeleteGatewayIntranetLinkedVpcResponse
 */
async function deleteGatewayIntranetLinkedVpc(request: DeleteGatewayIntranetLinkedVpcRequest): DeleteGatewayIntranetLinkedVpcResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteGatewayIntranetLinkedVpc', 'DELETE', '/api/v2/gateways/{ClusterId}/{GatewayId}/intranet_endpoint_linked_vpc', 'json', false, 'json', request);
}

model DeleteGatewayIntranetLinkedVpcPeerRequest {
  clusterId?: string(name='ClusterId', description='The region where the private gateway resides.', example='cn-wulanchabu', position='Path'),
  gatewayId?: string(name='GatewayId', description='The ID of the private gateway. To obtain the private gateway ID, see [ListGateway](https://help.aliyun.com/document_detail/2841911.html).', example='gw-1uhcqmsc7x22******', position='Path'),
  peerVpcs?: [ 
    {
      region?: string(name='Region', description='The region where the VPC peer resides.', example='cn-shanghai'),
      vpcId?: string(name='VpcId', description='The ID of the VPC peer.', example='vpc-uf66uio7md****'),
    }
  ](name='PeerVpcs', description='The VPC peer.', shrink='json', position='Query'),
  vpcId?: string(name='VpcId', description='The ID of the associated VPC. To obtain the VPC ID, see [ListGatewayIntranetLinkedVpc](https://help.aliyun.com/document_detail/2621223.html).', example='vpc-2zetuli9ws0qgjd******', position='Query'),
}

model DeleteGatewayIntranetLinkedVpcPeerResponseBody = {
  gatewayId?: string(name='GatewayId', description='The ID of the private gateway.', example='gw-1uhcqmsc7x22******'),
  message?: string(name='Message', description='The message that is returned.', example='Successfully delete intranet linked vpc Peer for gateway'),
  requestId?: string(name='requestId', description='The ID of the request.', example='40325405-579C-4D82****'),
}

model DeleteGatewayIntranetLinkedVpcPeerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteGatewayIntranetLinkedVpcPeerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteGatewayIntranetLinkedVpcPeer  DeleteGatewayIntranetLinkedVpcPeerRequest
  * @return DeleteGatewayIntranetLinkedVpcPeerResponse
 */
async function deleteGatewayIntranetLinkedVpcPeer(request: DeleteGatewayIntranetLinkedVpcPeerRequest): DeleteGatewayIntranetLinkedVpcPeerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteGatewayIntranetLinkedVpcPeer', 'DELETE', '/api/v2/gateways/{ClusterId}/{GatewayId}/intranet_endpoint_linked_vpc_peer', 'json', false, 'json', request);
}

model DeleteResourceRequest {
  clusterId: string(name='ClusterId', description='The ID of the region to which the resource group belongs.

This parameter is required.', example='cn-shanghai', position='Path'),
  resourceId: string(name='ResourceId', description='The ID of the resource group. For more information about how to query the ID of a resource group, see [ListResources](https://help.aliyun.com/document_detail/412133.html).

This parameter is required.', example='eas-r-asdasdasd', position='Path'),
}

model DeleteResourceResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Resource [eas-r-asdasdasd] is deleted.'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82-9624-EC2B1779848E'),
}

model DeleteResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteResourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteResource  DeleteResourceRequest
  * @return DeleteResourceResponse
 */
async function deleteResource(request: DeleteResourceRequest): DeleteResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteResource', 'DELETE', '/api/v2/resources/{ClusterId}/{ResourceId}', 'json', false, 'json', request);
}

model DeleteResourceDLinkRequest {
  clusterId: string(name='ClusterId', description='The ID of the region to which the resource group belongs.

This parameter is required.', example='cn-shanghai', position='Path'),
  resourceId: string(name='ResourceId', description='The ID of the resource group. For more information about how to query the ID of a resource group, see [ListResources](https://help.aliyun.com/document_detail/412133.html).

This parameter is required.', example='eas-r-asdasdasd', position='Path'),
}

model DeleteResourceDLinkResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Network interfaces are deleting'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model DeleteResourceDLinkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteResourceDLinkResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteResourceDLink  DeleteResourceDLinkRequest
  * @return DeleteResourceDLinkResponse
 */
async function deleteResourceDLink(request: DeleteResourceDLinkRequest): DeleteResourceDLinkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteResourceDLink', 'DELETE', '/api/v2/resources/{ClusterId}/{ResourceId}/dlink', 'json', false, 'json', request);
}

model DeleteResourceInstanceLabelRequest {
  clusterId: string(name='ClusterId', description='The region ID of the resource group.

This parameter is required.', example='cn-shanghai', position='Path'),
  resourceId: string(name='ResourceId', description='The resource group ID. For more information about how to obtain the resource group ID, see [ListResources](https://help.aliyun.com/document_detail/412133.html).

This parameter is required.', example='eas-r-h7lcw24dyqztwxxxxxx', position='Path'),
  allInstances?: boolean(name='AllInstances', description='Specifies whether the delete operation takes effect on all instances in the resource group. If you set this parameter to true, the InstanceIds parameter does not take effect.', position='Query'),
  instanceIds?: [ string ](name='InstanceIds', description='The instance IDs.', shrink='simple', position='Query'),
  keys?: [ string ](name='Keys', description='The keys of the tags that you want to delete.', shrink='simple', position='Query'),
}

model DeleteResourceInstanceLabelResponseBody = {
  message?: string(name='Message', description='The message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82********'),
}

model DeleteResourceInstanceLabelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteResourceInstanceLabelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteResourceInstanceLabel  DeleteResourceInstanceLabelRequest
  * @return DeleteResourceInstanceLabelResponse
 */
async function deleteResourceInstanceLabel(request: DeleteResourceInstanceLabelRequest): DeleteResourceInstanceLabelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteResourceInstanceLabel', 'DELETE', '/api/v2/resources/{ClusterId}/{ResourceId}/label', 'json', false, 'json', request);
}

model DeleteResourceInstancesRequest {
  clusterId: string(name='ClusterId', description='The ID of the region to which the resource group belongs.

This parameter is required.', example='cn-shanghai', position='Path'),
  resourceId: string(name='ResourceId', description='The ID of the resource group. For more information about how to query the ID of a resource group, see [ListResources](https://help.aliyun.com/document_detail/412133.html).

This parameter is required.', example='eas-r-asdasdasd', position='Path'),
  allFailed?: boolean(name='AllFailed', description='Specifies whether to delete all the instances that fail to be created. Valid values:

*   true
*   false', example='true', position='Query'),
  instanceList?: string(name='InstanceList', description='The instances. Separate multiple instances with commas (,), such as `instanceId1,instanceId2`. For more information about how to query the instances, see [ListResourceInstances](https://help.aliyun.com/document_detail/412129.html).', example='eas-i-xxxxxxx,eas-i-xxxxxxx', position='Query'),
}

model DeleteResourceInstancesResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Instances eas-i-011227132046,eas-i-011227132046 are deleting'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model DeleteResourceInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteResourceInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteResourceInstances  DeleteResourceInstancesRequest
  * @return DeleteResourceInstancesResponse
 */
async function deleteResourceInstances(request: DeleteResourceInstancesRequest): DeleteResourceInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteResourceInstances', 'DELETE', '/api/v2/resources/{ClusterId}/{ResourceId}/instances', 'json', false, 'json', request);
}

model DeleteResourceLogRequest {
  clusterId: string(name='ClusterId', description='The ID of the region to which the resource group belongs.

This parameter is required.', example='cn-shanghai', position='Path'),
  resourceId: string(name='ResourceId', description='The ID of the resource group. For more information about how to query the ID of a resource group, see [ListResources](https://help.aliyun.com/document_detail/412133.html).

This parameter is required.', example='eas-r-asdasdasd', position='Path'),
}

model DeleteResourceLogResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Log service for resource [eas-r-asdasdasd] is deleting'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model DeleteResourceLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteResourceLogResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteResourceLog  DeleteResourceLogRequest
  * @return DeleteResourceLogResponse
 */
async function deleteResourceLog(request: DeleteResourceLogRequest): DeleteResourceLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteResourceLog', 'DELETE', '/api/v2/resources/{ClusterId}/{ResourceId}/log', 'json', false, 'json', request);
}

model DeleteServiceRequest {
  clusterId: string(name='ClusterId', description='The ID of the region where the service is deployed.

This parameter is required.', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='The service name. For more information about how to query the service name, see [ListServices](https://help.aliyun.com/document_detail/412109.html).

This parameter is required.', example='foo', position='Path'),
}

model DeleteServiceResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Service [foo] in region [cn-shanghai] is terminating'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model DeleteServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteServiceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteService  DeleteServiceRequest
  * @return DeleteServiceResponse
 */
async function deleteService(request: DeleteServiceRequest): DeleteServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteService', 'DELETE', '/api/v2/services/{ClusterId}/{ServiceName}', 'json', false, 'json', request);
}

model DeleteServiceAutoScalerRequest {
  clusterId: string(name='ClusterId', description='The ID of the region where the service is deployed.

This parameter is required.', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='The service name. For more information about how to query the service name, see [ListServices](https://help.aliyun.com/document_detail/412109.html).

This parameter is required.', example='foo', position='Path'),
}

model DeleteServiceAutoScalerResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Autoscaler for service [foo] deleted successfully'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model DeleteServiceAutoScalerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteServiceAutoScalerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteServiceAutoScaler  DeleteServiceAutoScalerRequest
  * @return DeleteServiceAutoScalerResponse
 */
async function deleteServiceAutoScaler(request: DeleteServiceAutoScalerRequest): DeleteServiceAutoScalerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteServiceAutoScaler', 'DELETE', '/api/v2/services/{ClusterId}/{ServiceName}/autoscaler', 'json', false, 'json', request);
}

model DeleteServiceCronScalerRequest {
  clusterId: string(name='ClusterId', description='The ID of the region where the service is deployed.

This parameter is required.', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='The service name. For more information about how to query the service name, see [ListServices](https://help.aliyun.com/document_detail/412109.html).

This parameter is required.', example='foo', position='Path'),
}

model DeleteServiceCronScalerResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Cronscaler for service [foo] deleted successfully'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model DeleteServiceCronScalerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteServiceCronScalerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteServiceCronScaler  DeleteServiceCronScalerRequest
  * @return DeleteServiceCronScalerResponse
 */
async function deleteServiceCronScaler(request: DeleteServiceCronScalerRequest): DeleteServiceCronScalerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteServiceCronScaler', 'DELETE', '/api/v2/services/{ClusterId}/{ServiceName}/cronscaler', 'json', false, 'json', request);
}

model DeleteServiceInstancesRequest {
  clusterId: string(name='ClusterId', description='The ID of the region where the service is deployed.

This parameter is required.', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='The service name. For more information about how to query the service name, see [ListServices](https://help.aliyun.com/document_detail/412109.html).

This parameter is required.', example='foo', position='Path'),
  container?: string(name='Container', description='The name of the container whose process needs to be restarted. This parameter takes effect only if the SoftRestart parameter is set to true.', example='worker0', position='Query'),
  instanceList: string(name='InstanceList', description='The instances that you want to restart. Separate multiple instance names with commas (,). For more information about how to query the instance name, see [ListServiceInstances](https://help.aliyun.com/document_detail/412108.html).

This parameter is required.', example='foo-rdsbxxxx,foo-rdsaxxxx', position='Query'),
  softRestart?: boolean(name='SoftRestart', description='Specifies whether to restart only the container process without recreating the instance. Default value: false. Valid values: true and false.', example='true', position='Query'),
}

model DeleteServiceInstancesResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Instance(s) [foo-rdsb,foo-rdsa]  for service [foo] in region [cn-shanghai] was deleted successfully'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model DeleteServiceInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteServiceInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteServiceInstances  DeleteServiceInstancesRequest
  * @return DeleteServiceInstancesResponse
 */
async function deleteServiceInstances(request: DeleteServiceInstancesRequest): DeleteServiceInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteServiceInstances', 'DELETE', '/api/v2/services/{ClusterId}/{ServiceName}/instances', 'json', false, 'json', request);
}

model DeleteServiceLabelRequest {
  clusterId: string(name='ClusterId', description='The ID of the region where the service is deployed.

This parameter is required.', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='The service name. For more information about how to query the service name, see [ListServices](https://help.aliyun.com/document_detail/412109.html).

This parameter is required.', example='foo', position='Path'),
  keys: [ string ](name='Keys', description='The service tags that you want to delete.

This parameter is required.', shrink='simple', position='Query'),
}

model DeleteServiceLabelResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Succeed to delete service [service_from_zxxx] labels.'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model DeleteServiceLabelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteServiceLabelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteServiceLabel  DeleteServiceLabelRequest
  * @return DeleteServiceLabelResponse
 */
async function deleteServiceLabel(request: DeleteServiceLabelRequest): DeleteServiceLabelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteServiceLabel', 'DELETE', '/api/v2/services/{ClusterId}/{ServiceName}/label', 'json', false, 'json', request);
}

model DeleteServiceMirrorRequest {
  clusterId: string(name='ClusterId', description='The ID of the region where the service is deployed.

This parameter is required.', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='The service name. For more information about how to query the service name, see [ListServices](https://help.aliyun.com/document_detail/412109.html).

This parameter is required.', example='foo', position='Path'),
}

model DeleteServiceMirrorResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Traffic mirroring is OFF for service [foo] in region [cn-shanghia], ratio [70%]'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82***'),
}

model DeleteServiceMirrorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteServiceMirrorResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteServiceMirror  DeleteServiceMirrorRequest
  * @return DeleteServiceMirrorResponse
 */
async function deleteServiceMirror(request: DeleteServiceMirrorRequest): DeleteServiceMirrorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteServiceMirror', 'DELETE', '/api/v2/services/{ClusterId}/{ServiceName}/mirror', 'json', false, 'json', request);
}

model DeleteVirtualResourceRequest {
  clusterId: string(name='ClusterId', description='The ID of the region to which the virtual resource group belongs.

This parameter is required.', example='cn-shanghai', position='Path'),
  virtualResourceId: string(name='VirtualResourceId', description='The ID of the virtual resource group.

This parameter is required.', example='eas-vr-npovr28onap1xxxxxx', position='Path'),
}

model DeleteVirtualResourceResponseBody = {
  message?: string(name='Message', description='The information about the operation result.', example='Successfully deleted virtual resource eas-vr-npovr28onap1xxxxxx'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='40325405-579C-4D82***'),
}

model DeleteVirtualResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteVirtualResourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteVirtualResource  DeleteVirtualResourceRequest
  * @return DeleteVirtualResourceResponse
 */
async function deleteVirtualResource(request: DeleteVirtualResourceRequest): DeleteVirtualResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteVirtualResource', 'DELETE', '/api/v2/virtualresources/{ClusterId}/{VirtualResourceId}', 'json', false, 'json', request);
}

model DescribeBenchmarkTaskRequest {
  clusterId: string(name='ClusterId', description='The ID of the region where the stress testing task is performed.

This parameter is required.', example='cn-shanghai', position='Path'),
  taskName: string(name='TaskName', description='The name of the stress testing task. For more information about how to query the name of a stress testing task, see [ListBenchmarkTask](https://help.aliyun.com/document_detail/432976.html).

This parameter is required.', example='benchmark-larec-test-eac4', position='Path'),
}

model DescribeBenchmarkTaskResponseBody = {
  availableAgent?: long(name='AvailableAgent', description='The number of instances that you can test.', example='4'),
  callerUid?: string(name='CallerUid', description='The ID of the operation caller.', example='1640133467****'),
  desiredAgent?: long(name='DesiredAgent', description='The number of instances that you want to test.', example='4'),
  endpoint?: string(name='Endpoint', description='The endpoint of the service gateway.', example='192342311234.pai-eas.cn-chengdu.aliyuncs.com'),
  message?: string(name='Message', description='The returned message.', example='Benchmar task is Running'),
  parentUid?: string(name='ParentUid', description='The ID of the Alibaba Cloud account that is used to call the operation.', example='1029728669****'),
  reason?: string(name='Reason', description='The event or reason that causes the current state of the stress testing task.', example='RUNNING'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
  serviceName?: string(name='ServiceName', description='The name of the service that you want to test.', example='foo'),
  status?: string(name='Status', description='The state of the stress testing task.

Valid values:

*   Creating

    <!-- -->

    <!-- -->

    <!-- -->

*   Starting

    <!-- -->

    <!-- -->

    <!-- -->

*   DeleteFailed

    <!-- -->

    <!-- -->

    <!-- -->

*   Running

    <!-- -->

    <!-- -->

    <!-- -->

*   Stopping

    <!-- -->

    <!-- -->

    <!-- -->

*   Error

    <!-- -->

    <!-- -->

    <!-- -->

*   Updating

    <!-- -->

    <!-- -->

    <!-- -->

*   Deleting

    <!-- -->

    <!-- -->

    <!-- -->

*   CreateFailed

    <!-- -->

    <!-- -->

    <!-- -->', example='Running'),
  taskId?: string(name='TaskId', description='The ID of the stress testing task.', example='eas-b-gv4y86u****'),
  taskName?: string(name='TaskName', description='The name of the stress testing task.', example='benchmark-larec-test-ae70'),
  token?: string(name='Token', description='The token for authentication when a stress testing task is created.', example='6062787a-9301****'),
}

model DescribeBenchmarkTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeBenchmarkTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeBenchmarkTask  DescribeBenchmarkTaskRequest
  * @return DescribeBenchmarkTaskResponse
 */
async function describeBenchmarkTask(request: DescribeBenchmarkTaskRequest): DescribeBenchmarkTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeBenchmarkTask', 'GET', '/api/v2/benchmark-tasks/{ClusterId}/{TaskName}', 'json', false, 'json', request);
}

model DescribeBenchmarkTaskReportRequest {
  clusterId: string(name='ClusterId', description='The ID of the region where the stress testing task is performed.

This parameter is required.', example='cn-shanghai', position='Path'),
  taskName: string(name='TaskName', description='The name of the stress testing task. For more information about how to query the name of a stress testing task, see [ListBenchmarkTask](https://help.aliyun.com/document_detail/432976.html).

This parameter is required.', example='benchmark-larec-test-015d', position='Path'),
  reportType?: string(name='ReportType', description='The report type of the stress testing task. Valid values: RAW and Report.', example='report', position='Query'),
}

model DescribeBenchmarkTaskReportResponseBody = {
  data?: any(name='Data', description='If the value of ReportType is set to RAW, the details about the stress testing report are returned.', example='{
    "TimestampList": ["int64"],
    "QPSList": ["float32"],
    "RTList": [
      {
        "AVG": "float32",
        "TP100": "float32",
        "TP99": "float32",
        "TP90": "float32",
        "TP50": "float32",
        "TP10": "float32"
      }
    ],
    "TrafficList": [
      {
        "Send": "float64",
        "Receive": "float64"
      }
    ],
    "StatusCode": {
      "200": "uint64",
      "450": "uint64",
      "500": "uint64"
    },
    "Count": "uint64",
    "Total": "float64",
    "MinRT": "float32",
    "AvgRT": "float32",
    "MaxRT": "float32",
    "QPS": "float32",
    "TotalSend": "float64",
    "TotalReceive": "float64",
    "RTDistribution": [
      {
        "Latency": "float32",
        "Percentage": "int"
      }
    ],
    "RTHistogram": [
      {
        "Count": "int",
        "Mark": "float32",
        "Frequency": "float32"
      }
    ]
  }'),
  reportUrl?: string(name='ReportUrl', description='If the value of ReportType is set to Report, the URL of the stress testing report is returned.', example='http://eas-benchmark.oss-cn-chengdu.aliyuncs.com/summary/benchmark-larec-test-015d-10007.html'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82********'),
}

model DescribeBenchmarkTaskReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeBenchmarkTaskReportResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeBenchmarkTaskReport  DescribeBenchmarkTaskReportRequest
  * @return DescribeBenchmarkTaskReportResponse
 */
async function describeBenchmarkTaskReport(request: DescribeBenchmarkTaskReportRequest): DescribeBenchmarkTaskReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeBenchmarkTaskReport', 'GET', '/api/v2/benchmark-tasks/{ClusterId}/{TaskName}/report', 'json', false, 'json', request);
}

model DescribeGatewayRequest {
  clusterId: string(name='ClusterId', description='The region ID of the private gateway.

This parameter is required.', example='cn-hangzhou', position='Path'),
  gatewayId: string(name='GatewayId', description='The ID of the private gateway. For more information about the private gateway ID, see the private_gateway_id parameter returned by [ListResources](https://help.aliyun.com/document_detail/412133.html).

This parameter is required.', example='gw-1uhcqmsc7x22******', position='Path'),
}

model DescribeGatewayResponseBody = {
  chargeType?: string(name='ChargeType'),
  createTime?: string(name='CreateTime', description='The time when the private gateway was created. The time is displayed in UTC.', example='2020-05-19T14:19:42Z'),
  externalClusterId?: string(name='ExternalClusterId', description='The ID of the self-managed cluster.', example='c935eadf284c14c2da57a2a13ad6******'),
  gatewayId?: string(name='GatewayId', description='The ID of the private gateway.', example='gw-1uhcqmsc7x22******'),
  gatewayName?: string(name='GatewayName', description='The alias of the private gateway.', example='mygateway1'),
  instanceType?: string(name='InstanceType', description='The instance type used by the private gateway.

Valid values:

*   8c16g
*   4c8g
*   2c4g
*   16c32g', example='ecs.c6.4xlarge'),
  internetDomain?: string(name='InternetDomain', description='The public endpoint.', example='gw-1uhcqmsc7x22******-1801786532******.cn-hangzhou.pai-eas.aliyuncs.com'),
  internetEnabled?: boolean(name='InternetEnabled', description='Indicates whether Internet access is enabled.', example='true'),
  internetStatus?: string(name='InternetStatus', description='Indicates whether Internet access is enabled.

Valid values:

*   Creating: Internet access is being enabled.
*   Failed: Internet access failed to be enabled or deleted.
*   Running: Internet access is running.
*   Deleted: Internet access is deleted.
*   Deleting: Internet access is being deleted.', example='Running'),
  intranetDomain?: string(name='IntranetDomain', description='The internal endpoint.', example='gw-1uhcqmsc7x22******-1801786532******-vpc.cn-hangzhou.pai-eas.aliyuncs.com'),
  isDefault?: boolean(name='IsDefault', description='Indicates whether it is the default private gateway.', example='true'),
  replicas?: int32(name='Replicas', description='The number of nodes in the private gateway.', example='2'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
  SSLRedirectionEnabled?: boolean(name='SSLRedirectionEnabled', description='Indicates whether the HTTP to HTTPS redirection is enabled.', example='true'),
  status?: string(name='Status', description='The status of the private gateway.

Valid values:

*   Creating
*   Stopped
*   Failed
*   Running
*   Deleted
*   Deleting
*   Waiting', example='PrivateGatewayRunning'),
  updateTime?: string(name='UpdateTime', description='The time when the private gateway was updated. The time is displayed in UTC.', example='2021-02-24T11:52:17Z'),
}

model DescribeGatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGatewayResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeGateway  DescribeGatewayRequest
  * @return DescribeGatewayResponse
 */
async function describeGateway(request: DescribeGatewayRequest): DescribeGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeGateway', 'GET', '/api/v2/gateways/{ClusterId}/{GatewayId}', 'json', false, 'json', request);
}

model DescribeGroupRequest {
  clusterId: string(name='ClusterId', description='The ID of the region to which the service group belongs.

This parameter is required.', example='cn-shanghai', position='Path'),
  groupName: string(name='GroupName', description='The name of the service group. For more information about how to query the group name, see [ListServices](https://help.aliyun.com/document_detail/412109.html).

This parameter is required.', example='foo', position='Path'),
}

model DescribeGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Group  
}

/**
  * @param request  the request parameters of DescribeGroup  DescribeGroupRequest
  * @return DescribeGroupResponse
 */
async function describeGroup(request: DescribeGroupRequest): DescribeGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeGroup', 'GET', '/api/v2/groups/{ClusterId}/{GroupName}', 'json', false, 'json', request);
}

model DescribeGroupEndpointsRequest {
  clusterId?: string(name='ClusterId', description='The region ID.', example='cn-hangzhou', position='Path'),
  groupName: string(name='GroupName', description='The service group name. For more information about how to obtain the service group name, see [ListServices](https://help.aliyun.com/document_detail/412109.html).

This parameter is required.', example='xx_test_group', position='Path'),
}

model DescribeGroupEndpointsResponseBody = {
  accessToken?: string(name='AccessToken', description='The service token.', example='Nzc5N2FhNTM4OTQ0YzBmYTIy****ZTUxN2NkYjg4MTJmMWQxZmY1****'),
  endpoints?: [ 
    {
      backendId?: string(name='BackendId'),
      endpointType?: string(name='EndpointType'),
      internetEndpoints?: [ string ](name='InternetEndpoints'),
      intranetEndpoints?: [ string ](name='IntranetEndpoints'),
      pathType?: string(name='PathType'),
      port?: int32(name='Port'),
    }
  ](name='Endpoints', description='The endpoints of the service group.'),
  message?: string(name='Message', description='The response message.', example='Execution successful.'),
  requestId?: string(name='RequestId', description='The request ID.', example='890772EF-3AD6-129A-8E15-8F349C944783'),
}

model DescribeGroupEndpointsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGroupEndpointsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeGroupEndpoints  DescribeGroupEndpointsRequest
  * @return DescribeGroupEndpointsResponse
 */
async function describeGroupEndpoints(request: DescribeGroupEndpointsRequest): DescribeGroupEndpointsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeGroupEndpoints', 'GET', '/api/v2/groups/{ClusterId}/{GroupName}/endpoints', 'json', false, 'json', request);
}

model DescribeMachineSpecRequest {
  instanceTypes?: [ string ](name='InstanceTypes', description='This parameter is deprecated.', deprecated='true', shrink='simple', position='Query'),
}

model DescribeMachineSpecResponseBody = {
  instanceMetas?: [ 
    {
      CPU?: int32(name='CPU', description='The number of CPU cores in the instance type.', example='32'),
      GPU?: string(name='GPU', description='The GPU type in the instance type. If the instance type is not a GPU-based instance type, this parameter does not exist.', example='GU30'),
      GPUAmount?: int32(name='GPUAmount', description='The number of GPUs in the instance type.', example='1'),
      GPUMemory?: float(name='GPUMemory', description='The GPU memory in the instance type. Unit: GB.', example='24'),
      instanceType?: string(name='InstanceType', description='The name of the instance type.', example='ml.gu7i.c32m188.1-gu30'),
      isAvailable?: boolean(name='IsAvailable', description='Indicates whether the instance type is available.', example='true'),
      memory?: float(name='Memory', description='The memory size in the instance type. Unit: GB.', example='188'),
      nonProtectSpotDiscount?: float(name='NonProtectSpotDiscount', description='The minimum discount that can be accepted when the preemptible instance type does not include a usage duration. 0.1 indicates one fold. If this parameter is not returned, the bidding feature is not supported.', example='0.1'),
      spotDiscount?: float(name='SpotDiscount', description='The minimum discount that can be accepted when the preemptible instance type has the 1-hour protection duration. 0.1 indicates one fold. If this parameter is not returned, the bidding feature is not supported.', example='0.12'),
      stockStatus?: string(name='StockStatus', description='The inventory status of the instance type.

Valid values:

*   WithStock
*   ClosedWithStock
*   NoStock', example='WithStock'),
      vendor?: string(name='Vendor', description='The source of the instance type.

Valid values:

*   ECS
*   BareMetal
*   Lingjun', example='ECS'),
    }
  ](name='InstanceMetas', description='The instance types when the resources are specified.'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82***'),
  types?: [ 
    {
      CPU?: int32(name='CPU', description='Valid values:', example='1'),
      memory?: [ int32 ](name='Memory', description='The optional values for memory when CPU is set to a specific value as above.'),
    }
  ](name='Types', description='The values that can be supported when the number of CPUs and memory size are specified for deployment.'),
}

model DescribeMachineSpecResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMachineSpecResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeMachineSpec  DescribeMachineSpecRequest
  * @return DescribeMachineSpecResponse
 */
async function describeMachineSpec(request: DescribeMachineSpecRequest): DescribeMachineSpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeMachineSpec', 'GET', '/api/v2/public/instance_types', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      regionId?: string(name='RegionId', description='The region ID.', example='cn-shanghai'),
      regionName?: string(name='RegionName', description='The region name.'),
    }
  ](name='Regions', description='The available regions.'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model DescribeRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRegions  DescribeRegionsRequest
  * @return DescribeRegionsResponse
 */
async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeRegions', 'GET', '/api/v2/regions', 'json', false, 'json', request);
}

model DescribeResourceRequest {
  clusterId: string(name='ClusterId', description='The ID of the cluster to which the resource group belongs.

This parameter is required.', example='cn-shanghai', position='Path'),
  resourceId: string(name='ResourceId', description='The ID of the resource group. For more information about how to query the ID of a resource group, see [ListResources](https://help.aliyun.com/document_detail/412133.html).

This parameter is required.', example='eas-r-asdasdasd', position='Path'),
}

model DescribeResourceResponseBody = {
  clusterId?: string(name='ClusterId', description='The ID of the cluster to which the resource group belongs.', example='cn-beijing'),
  cpuCount?: int32(name='CpuCount', description='The total number of CPU cores.', example='16'),
  cpuUsed?: int32(name='CpuUsed', description='The number of vCPUs that is used.', example='8'),
  createTime?: string(name='CreateTime', description='The time when the resource group was created.', example='2020-05-19T14:19:42Z'),
  extraData?: string(name='ExtraData', description='The additional information, such as the connection status of a virtual private cloud (VPC) and the log status of Log Service.', example='{"vswitch_id":"vsw-bp17uo6xebcusy****","gpu_share":true,"aux_vswitch_id_list":["vsw-bp13b3pvjap3vxn****","vsw-bp1nls8o5hk8mt8*****"],"security_group_id":"sg-bp1j1z7297hcink*****","vpc_id":"vpc-bp1kjr3rfyhx01*****","destination_cidr":"172.16.0.12/28","role_arn":"acs:ram::1157703270*****:role/AliyunServiceRoleForPaiEas","sls_project":"","sls_logstore":"","sls_status":"ResourceReady","sls_message":"","update_time":""}'),
  gpuCount?: int32(name='GpuCount', description='The total number of GPUs.', example='1'),
  gpuUsed?: float(name='GpuUsed', description='The number of GPUs that is used.', example='2'),
  instanceCount?: int32(name='InstanceCount', description='The total number of instances in the resource group.', example='4'),
  memory?: int32(name='Memory', description='The total memory size. Unit: MB.', example='8192'),
  memoryUsed?: int32(name='MemoryUsed', description='The size of memory that is used. Unit: MB.', example='2048'),
  message?: string(name='Message', description='The returned message.', example='Resource is ready'),
  ownerUid?: string(name='OwnerUid', description='The ID of the resource group owner.', example='14401087478****'),
  postPaidInstanceCount?: int32(name='PostPaidInstanceCount', description='The total number of pay-as-you-go instances in the resource group.', example='3'),
  prePaidInstanceCount?: int32(name='PrePaidInstanceCount', description='The total number of subscription instances in the resource group.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='902976F2-6FAF-5404-8A4D-6CC223***'),
  resourceId?: string(name='ResourceId', description='The ID of the Elastic Algorithm Service (EAS) resource.', example='eas-r-glkfpsxuw57x1h*****'),
  resourceName?: string(name='ResourceName', description='The name of the EAS resource.', example='my-resouce****'),
  resourceType?: string(name='ResourceType', description='The type of the resource group. Valid values:

*   Dedicated: the dedicated resource group.
*   SelfManaged: the self-managed resource group.', example='Dedicated'),
  status?: string(name='Status', description='The state of the resource group.', example='ResourceReady'),
  updateTime?: string(name='UpdateTime', description='The time when the resource group was last updated.', example='2021-02-24T11:52:17Z'),
}

model DescribeResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeResourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeResource  DescribeResourceRequest
  * @return DescribeResourceResponse
 */
async function describeResource(request: DescribeResourceRequest): DescribeResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeResource', 'GET', '/api/v2/resources/{ClusterId}/{ResourceId}', 'json', false, 'json', request);
}

model DescribeResourceDLinkRequest {
  clusterId: string(name='ClusterId', description='The ID of the region to which the resource group belongs.

This parameter is required.', example='cn-shanghai', position='Path'),
  resourceId: string(name='ResourceId', description='The ID of the resource group. For more information about how to query the ID of a resource group, see [ListResources](https://help.aliyun.com/document_detail/412133.html).

This parameter is required.', example='eas-r-adfabas', position='Path'),
}

model DescribeResourceDLinkResponseBody = {
  auxVSwitchList?: [ string ](name='AuxVSwitchList', description='The IDs of the secondary vSwitches that are directly connected.'),
  destinationCIDRs?: string(name='DestinationCIDRs', description='The CIDR blocks of the clients that you want to connect to. After this parameter is specified, the CIDR blocks are added to the back-to-origin route of the server. Either this parameter or the VSwitchIdList parameter can be used to determine CIDR blocks.', example='72.16.0.0/16'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
  securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group that is directly connected.', example='sg-bp1j1z7297hcink9d****'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the primary vSwitch that is directly connected.', example='vsw-8vbqn2at0kljjxxxx****'),
  vpcId?: string(name='VpcId', description='The ID of the VPC that is directly connected.', example='vpc-uf66uio7md****'),
}

model DescribeResourceDLinkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeResourceDLinkResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeResourceDLink  DescribeResourceDLinkRequest
  * @return DescribeResourceDLinkResponse
 */
async function describeResourceDLink(request: DescribeResourceDLinkRequest): DescribeResourceDLinkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeResourceDLink', 'GET', '/api/v2/resources/{ClusterId}/{ResourceId}/dlink', 'json', false, 'json', request);
}

model DescribeResourceLogRequest {
  clusterId: string(name='ClusterId', description='The ID of the region to which the resource group belongs.

This parameter is required.', example='cn-shanghai', position='Path'),
  resourceId: string(name='ResourceId', description='The ID of the resource group. For more information about how to query the ID of a resource group, see [ListResources](https://help.aliyun.com/document_detail/412133.html).

This parameter is required.', example='eas-r-asdasdasd', position='Path'),
}

model DescribeResourceLogResponseBody = {
  logStore?: string(name='LogStore', description='The Logstore of Log Service.', example='access_log'),
  message?: string(name='Message', description='The returned message.', example='Network interfaces are updating'),
  projectName?: string(name='ProjectName', description='The Log Service project that is associated with the resource group.', example='eas-r-asdasdasd-sls'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
  status?: string(name='Status', description='The state of the resource group.', example='ResourceReady'),
}

model DescribeResourceLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeResourceLogResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeResourceLog  DescribeResourceLogRequest
  * @return DescribeResourceLogResponse
 */
async function describeResourceLog(request: DescribeResourceLogRequest): DescribeResourceLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeResourceLog', 'GET', '/api/v2/resources/{ClusterId}/{ResourceId}/log', 'json', false, 'json', request);
}

model DescribeServiceRequest {
  clusterId: string(name='ClusterId', description='The ID of the region where the service is deployed.

This parameter is required.', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='The service name. For more information about how to query the service name, see [ListServices](https://help.aliyun.com/document_detail/412109.html).

This parameter is required.', example='foo', position='Path'),
}

model DescribeServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Service  
}

/**
  * @param request  the request parameters of DescribeService  DescribeServiceRequest
  * @return DescribeServiceResponse
 */
async function describeService(request: DescribeServiceRequest): DescribeServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeService', 'GET', '/api/v2/services/{ClusterId}/{ServiceName}', 'json', false, 'json', request);
}

model DescribeServiceAutoScalerRequest {
  clusterId: string(name='ClusterId', description='The region ID of the service.

This parameter is required.', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='The service name. For more information about how to query the service name, see [ListServices](https://help.aliyun.com/document_detail/412109.html).

This parameter is required.', example='echo', position='Path'),
}

model DescribeServiceAutoScalerResponseBody = {
  behavior?: map[string]any(name='Behavior', description='The additional information about the Autoscaler policy, such as the interval of triggering Autoscaler.', example='{
  "behavior": {
    "scaleDown": {
      "stabilizationWindowSeconds": 150
    }
  }
}'),
  currentMetrics?: [ 
    {
      metricName?: string(name='metricName', description='The metric name. Valid values:

*   QPS
*   CPU', example='qps'),
      service?: string(name='service', description='The service for which the metric is specified.', example='demo_svc'),
      value?: float(name='value', description='The metric value.', example='10'),
    }
  ](name='CurrentMetrics', description='The metrics.'),
  maxReplica?: int32(name='MaxReplica', description='The maximum number of instances in the service.', example='8'),
  minReplica?: int32(name='MinReplica', description='The minimum number of instances in the service.', example='3'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
  scaleStrategies?: [ 
    {
      metricName?: string(name='metricName', description='The metric name. Valid values:

*   QPS: the queries per second (QPS) for an individual instance.
*   CPU: the CPU utilization.', example='QPS'),
      service?: string(name='service', description='The service for which the metric is specified. If you do not set this parameter, the current service is specified by default.', example='demo_svc'),
      threshold?: float(name='threshold', description='The threshold of the metric that triggers auto scaling.

*   If you set metricName to QPS, scale-out is triggered when the average QPS for a single instance is greater than this threshold.
*   If you set metricName to CPU, scale-out is triggered when the average CPU utilization for a single instance is greater than this threshold.', example='10'),
    }
  ](name='ScaleStrategies', description='The auto scaling policies.'),
  serviceName?: string(name='ServiceName', description='The service name.', example='foo'),
}

model DescribeServiceAutoScalerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeServiceAutoScalerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeServiceAutoScaler  DescribeServiceAutoScalerRequest
  * @return DescribeServiceAutoScalerResponse
 */
async function describeServiceAutoScaler(request: DescribeServiceAutoScalerRequest): DescribeServiceAutoScalerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeServiceAutoScaler', 'GET', '/api/v2/services/{ClusterId}/{ServiceName}/autoscaler', 'json', false, 'json', request);
}

model DescribeServiceCronScalerRequest {
  clusterId: string(name='ClusterId', description='The region ID of the service.

This parameter is required.', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='The service name. For more information about how to query the service name, see [ListServices](https://help.aliyun.com/document_detail/412109.html).

This parameter is required.', example='foo', position='Path'),
}

model DescribeServiceCronScalerResponseBody = {
  excludeDates?: [ string ](name='ExcludeDates', description='The points in time that are excluded when you schedule a CronHPA job. The points in time must be specified by using a cron expression.'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
  scaleJobs?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the most recent CronHPA job was created. The time is displayed in UTC.', example='2020-06-24T02:11:30Z'),
      lastProbeTime?: string(name='LastProbeTime', description='The time when the most recent CronHPA job ran. The time is displayed in UTC.', example='2022-02-24T06:31:00Z'),
      message?: string(name='Message', description='The returned message.', example='"cron hpa job scale-jobs-0 executed successfully. current replicas:3, desired replicas:2."'),
      name?: string(name='Name', description='The name of the CronHPA job.', example='scale-job-1'),
      schedule?: string(name='Schedule', description='The cron expression that is used to configure the execution time of the CronHPA job.', example='0 18 * * * *'),
      state?: string(name='State', description='The status of the most recent CronHPA job.', example='Succeed'),
      targetSize?: int32(name='TargetSize', description='The number of instances that you expect to configure for the CronHPA job.', example='1'),
    }
  ](name='ScaleJobs', description='The CronHPA jobs.'),
  serviceName?: string(name='ServiceName', description='The service name.', example='foo'),
}

model DescribeServiceCronScalerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeServiceCronScalerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeServiceCronScaler  DescribeServiceCronScalerRequest
  * @return DescribeServiceCronScalerResponse
 */
async function describeServiceCronScaler(request: DescribeServiceCronScalerRequest): DescribeServiceCronScalerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeServiceCronScaler', 'GET', '/api/v2/services/{ClusterId}/{ServiceName}/cronscaler', 'json', false, 'json', request);
}

model DescribeServiceDiagnosisRequest {
  clusterId: string(name='ClusterId', description='The ID of the region where the service is deployed.

This parameter is required.', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='The service name.

This parameter is required.', example='foo', position='Path'),
}

model DescribeServiceDiagnosisResponseBody = {
  diagnosisList?: [ 
    {
      advices?: [ string ](name='Advices', description='The suggestions about how to handle the errors.'),
      causes?: [ string ](name='Causes', description='The causes of the errors.'),
      error?: string(name='Error', description='The error message.', example='Container worker0 failed to pull image.'),
    }
  ](name='DiagnosisList', description='The diagnostics list.'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model DescribeServiceDiagnosisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeServiceDiagnosisResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeServiceDiagnosis  DescribeServiceDiagnosisRequest
  * @return DescribeServiceDiagnosisResponse
 */
async function describeServiceDiagnosis(request: DescribeServiceDiagnosisRequest): DescribeServiceDiagnosisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeServiceDiagnosis', 'GET', '/api/v2/services/{ClusterId}/{ServiceName}/diagnosis', 'json', false, 'json', request);
}

model DescribeServiceEndpointsRequest {
  clusterId?: string(name='ClusterId', description='The region ID.', example='cn-hangzhou', position='Path'),
  serviceName: string(name='ServiceName', description='The service name. For more information about how to obtain the service name, see [ListServices](https://help.aliyun.com/document_detail/412109.html).

This parameter is required.', example='service_name', position='Path'),
}

model DescribeServiceEndpointsResponseBody = {
  accessToken?: string(name='AccessToken', description='The service token.', example='Nzc5N2FhN****TQ0YzBmYTIyN2MxZTUxN2NkYjg4MTJmMWQxZmY1****'),
  endpoints?: [ 
    {
      backendId?: string(name='BackendId'),
      endpointType?: string(name='EndpointType'),
      internetEndpoints?: [ string ](name='InternetEndpoints'),
      intranetEndpoints?: [ string ](name='IntranetEndpoints'),
      pathType?: string(name='PathType'),
      port?: int32(name='Port'),
    }
  ](name='Endpoints', description='The service endpoints.'),
  message?: string(name='Message', description='The returned message.', example='Execution successful.'),
  requestId?: string(name='RequestId', description='The request ID.', example='739998B5-FB39-12A3-8323-0FA340317298'),
}

model DescribeServiceEndpointsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeServiceEndpointsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeServiceEndpoints  DescribeServiceEndpointsRequest
  * @return DescribeServiceEndpointsResponse
 */
async function describeServiceEndpoints(request: DescribeServiceEndpointsRequest): DescribeServiceEndpointsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeServiceEndpoints', 'GET', '/api/v2/services/{ClusterId}/{ServiceName}/endpoints', 'json', false, 'json', request);
}

model DescribeServiceEventRequest {
  clusterId: string(name='ClusterId', description='The region ID of the service.

This parameter is required.', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='The service name. For more information about how to query the service name, see [ListServices](https://help.aliyun.com/document_detail/412109.html).

This parameter is required.', example='foo', position='Path'),
  endTime?: string(name='EndTime', description='The end of the time range to query. By default, the current point in time is the end of the time range to query.', example='2006-01-02 15:04:05', position='Query'),
  eventType?: string(name='EventType', description='The event type. Valid values:

*   Normal
*   Warning', example='Normal', position='Query'),
  instanceName?: string(name='InstanceName', description='The instance name. For more information about how to obtain the instance name, see [ListServiceInstances](https://help.aliyun.com/document_detail/412108.html).', example='echo-test-784xxxx85d-hhnd8', position='Query'),
  pageNum?: string(name='PageNum', description='The page number. Default value: 1.', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries per page. Default value: 100.', example='20', position='Query'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. The time must be in UTC. The default value is seven days ago.', example='2006-01-02 15:04:05', position='Query'),
}

model DescribeServiceEventResponseBody = {
  events?: [ 
    {
      message?: string(name='Message', description='The returned message. The message is formatted and returned in the JSON format.', example='{\\"versionId\\":1,\\"message\\":\\"Stage scale complete\\",\\"availableInstance\\":1,\\"unavailableInstance\\":0}'),
      reason?: string(name='Reason', description='The cause of the event. The information about the change in the service status is returned.', example='Updating'),
      time?: string(name='Time', description='The time when the event occurred. The time must be in UTC.', example='2022-04-09 06:30:00'),
      type?: string(name='Type', description='The event type. Valid values:

*   Normal
*   Warning', example='Normal'),
    }
  ](name='Events', description='The events.'),
  pageNum?: long(name='PageNum', description='The page number.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='3D491C94-6239-5318-B4B4-799D859***'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='29'),
  totalPageNum?: long(name='TotalPageNum', description='The total number of pages returned.', example='12'),
}

model DescribeServiceEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeServiceEventResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeServiceEvent  DescribeServiceEventRequest
  * @return DescribeServiceEventResponse
 */
async function describeServiceEvent(request: DescribeServiceEventRequest): DescribeServiceEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeServiceEvent', 'GET', '/api/v2/services/{ClusterId}/{ServiceName}/events', 'json', false, 'json', request);
}

model DescribeServiceInstanceDiagnosisRequest {
  clusterId: string(name='ClusterId', description='The ID of the region where the service is deployed.

This parameter is required.', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='The service name.

This parameter is required.', example='foo', position='Path'),
  instanceName: string(name='InstanceName', description='The name of the instance that runs the service.

This parameter is required.', example='foo-69xxxx4f4-5w9r9', position='Path'),
}

model DescribeServiceInstanceDiagnosisResponseBody = {
  diagnosis?: {
    advices?: [ string ](name='Advices', description='The solutions to the errors.'),
    causes?: [ string ](name='Causes', description='The causes of the errors.'),
    error?: string(name='Error', description='The error message.', example='Container worker0 failed to pull image.'),
  }(name='Diagnosis', description='The diagnostics information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82***'),
}

model DescribeServiceInstanceDiagnosisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeServiceInstanceDiagnosisResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeServiceInstanceDiagnosis  DescribeServiceInstanceDiagnosisRequest
  * @return DescribeServiceInstanceDiagnosisResponse
 */
async function describeServiceInstanceDiagnosis(request: DescribeServiceInstanceDiagnosisRequest): DescribeServiceInstanceDiagnosisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeServiceInstanceDiagnosis', 'GET', '/api/v2/services/{ClusterId}/{ServiceName}/instances/{InstanceName}/diagnosis', 'json', false, 'json', request);
}

model DescribeServiceLogRequest {
  clusterId: string(name='ClusterId', description='The ID of the region where the service is deployed.

This parameter is required.', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='The service name. For more information about how to query the service name, see [ListServices](https://help.aliyun.com/document_detail/412109.html).

This parameter is required.', example='echo', position='Path'),
  containerName?: string(name='ContainerName', description='The name of the container that runs the service.', example='worker0', position='Query'),
  endTime?: string(name='EndTime', description='The end of the time range to query. The time must be in UTC.', example='2006-01-02 15:04:05', position='Query'),
  instanceName?: string(name='InstanceName', description='The name of the instance that runs the service. For more information about how to query the instance name, see [ListServiceInstances](https://help.aliyun.com/document_detail/412108.html).', example='echo-da290ac8-7fckm', position='Query'),
  ip?: string(name='Ip', description='The IP address of the instance whose logs you want to query. For more information about how to query the IP address of an instance, see [ListServiceInstances](https://help.aliyun.com/document_detail/412108.html).', example='10.0.0.1', position='Query'),
  keyword?: string(name='Keyword', description='The keyword that you use to query the logs of the service.', example='key', position='Query'),
  pageNum?: long(name='PageNum', description='The page number. Default value: 1.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries per page. Default value: 500.', example='500', position='Query'),
  previous?: boolean(name='Previous', description='Specifies whether to query the logs that are generated before the instance last restarts. This parameter is available only if the instance restarts.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true', position='Query'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. The time must be in Coordinated Universal Time (UTC).', example='2006-01-02 15:04:05', position='Query'),
}

model DescribeServiceLogResponseBody = {
  logs?: [ string ](name='Logs', description='The returned logs.'),
  pageNum?: long(name='PageNum', description='The page number.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82********'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='1'),
  totalPageNum?: long(name='TotalPageNum', description='The total number of pages returned.', example='500'),
}

model DescribeServiceLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeServiceLogResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeServiceLog  DescribeServiceLogRequest
  * @return DescribeServiceLogResponse
 */
async function describeServiceLog(request: DescribeServiceLogRequest): DescribeServiceLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeServiceLog', 'GET', '/api/v2/services/{ClusterId}/{ServiceName}/logs', 'json', false, 'json', request);
}

model DescribeServiceMirrorRequest {
  clusterId: string(name='ClusterId', description='The ID of the region where the service is deployed.

This parameter is required.', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='The service name. For more information about how to query the service name, see [ListServices](https://help.aliyun.com/document_detail/412109.html).

This parameter is required.', example='foo', position='Path'),
}

model DescribeServiceMirrorResponseBody = {
  ratio?: string(name='Ratio', description='The percentage of traffic that you want to mirror. Valid values: 0 to 100.', example='50'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
  serviceName?: string(name='ServiceName', description='The service name.', example='foo'),
  target?: string(name='Target', description='The destination services to which you want to mirror traffic.', example='foo2,foo3'),
}

model DescribeServiceMirrorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeServiceMirrorResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeServiceMirror  DescribeServiceMirrorRequest
  * @return DescribeServiceMirrorResponse
 */
async function describeServiceMirror(request: DescribeServiceMirrorRequest): DescribeServiceMirrorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeServiceMirror', 'GET', '/api/v2/services/{ClusterId}/{ServiceName}/mirror', 'json', false, 'json', request);
}

model DescribeServiceSignedUrlRequest {
  clusterId?: string(name='ClusterId', description='The region in which the service resides.', example='cn-hangzhou', position='Path'),
  serviceName?: string(name='ServiceName', description='The service name.', example='foo', position='Path'),
  expire?: long(name='Expire', description='The period of time for which the URL expires.', example='43200', position='Query'),
  internal?: boolean(name='Internal', description='Specifies whether to use the VPC connection.', example='false', position='Query'),
  type?: string(name='Type', description='The page type.

Valid values:

*   webview
*   monitor', example='webview', position='Query'),
}

model DescribeServiceSignedUrlResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='40325405-579C-4D82****'),
  signedUrl?: string(name='SignedUrl', description='The service URL.', example='https://foo-115**.console.cn-hangzhou.eas.pai-ml.com?expire=1735202661&signature=ey*******'),
}

model DescribeServiceSignedUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeServiceSignedUrlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeServiceSignedUrl  DescribeServiceSignedUrlRequest
  * @return DescribeServiceSignedUrlResponse
 */
async function describeServiceSignedUrl(request: DescribeServiceSignedUrlRequest): DescribeServiceSignedUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeServiceSignedUrl', 'GET', '/api/v2/services/{ClusterId}/{ServiceName}/signed_url', 'json', false, 'json', request);
}

model DescribeSpotDiscountHistoryRequest {
  instanceType: string(name='InstanceType', description='The type of the Elastic Algorithm Service (EAS) instance.

This parameter is required.', example='ecs.c6.4xlarge', position='Query'),
  isProtect?: boolean(name='IsProtect', description='Specifies whether the preemptible instance has a protection period. During the 1-hour protection period of the preemptible instance, the preemptible instance will not be released.', example='false', position='Query'),
}

model DescribeSpotDiscountHistoryResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82***'),
  spotDiscounts?: [ 
    {
      instanceType?: string(name='InstanceType', description='The type of the ECS instance.', example='ecs.c7.large'),
      spotDiscount?: string(name='SpotDiscount', description='The discount for the preemptible instance. For example, 0.1 represents a 90% discount.', example='0.1'),
      timestamp?: string(name='Timestamp', description='The time when the discount is available. The time must be in UTC.', example='2024-04-10T10:00:00Z'),
      zoneId?: string(name='ZoneId', description='The zone ID.', example='cn-hangzhou-i'),
    }
  ](name='SpotDiscounts', description='The discount for the preemptible instance.'),
}

model DescribeSpotDiscountHistoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSpotDiscountHistoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSpotDiscountHistory  DescribeSpotDiscountHistoryRequest
  * @return DescribeSpotDiscountHistoryResponse
 */
async function describeSpotDiscountHistory(request: DescribeSpotDiscountHistoryRequest): DescribeSpotDiscountHistoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeSpotDiscountHistory', 'GET', '/api/v2/public/spot_discount', 'json', false, 'json', request);
}

model DescribeVirtualResourceRequest {
  clusterId: string(name='ClusterId', description='The ID of the region to which the virtual resource group belongs.

This parameter is required.', example='cn-shanghai', position='Path'),
  virtualResourceId: string(name='VirtualResourceId', description='The ID of the virtual resource group.

This parameter is required.', example='eas-vr-npovr28onap1xxxxxx', position='Path'),
}

model DescribeVirtualResourceResponseBody = {
  createTime?: string(name='CreateTime', description='The time when the virtual resource group was created.', example='2024-10-16T17:52:49Z'),
  disableSpotProtectionPeriod?: boolean(name='DisableSpotProtectionPeriod', description='Indicates whether the retention period of preemptible instances was disabled.', example='true'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='40325405-579C-4D82****'),
  resources?: [ 
    {
      instanceType?: string(name='InstanceType', description='The instance type of the public resource group.', example='ecs.s6-c1m2.xlarge'),
      priority?: int32(name='Priority', description='The priority of resource scheduling. A greater number specifies a higher priority.', example='3'),
      quotaId?: string(name='QuotaId', description='The instance type of the public resource group.', example='quota185lqxxxxxx'),
      region?: string(name='Region', description='The region where the resource resides.', example='cn-hangzhou'),
      resourceId?: string(name='ResourceId', description='The ID of the dedicated resource group.', example='eas-r-g55ieatgg3buxxxxxx'),
      spotPriceLimit?: float(name='SpotPriceLimit', description='The maximum price of preemptible instances in a public resource group.', example='10.05'),
    }
  ](name='Resources', description='The list of resources in the virtual resource group.'),
  serviceCount?: int32(name='ServiceCount', description='The number of deployed services.', example='1'),
  updateTime?: string(name='UpdateTime', description='The time when the virtual resource group was last updated.', example='2024-10-16T19:52:49Z'),
  virtualResourceId?: string(name='VirtualResourceId', description='The ID of the virtual resource group.', example='eas-vr-npovr28onap1xxxxxx'),
  virtualResourceName?: string(name='VirtualResourceName', description='The name of the virtual resource group.', example='MyVirtualResource'),
}

model DescribeVirtualResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVirtualResourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVirtualResource  DescribeVirtualResourceRequest
  * @return DescribeVirtualResourceResponse
 */
async function describeVirtualResource(request: DescribeVirtualResourceRequest): DescribeVirtualResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeVirtualResource', 'GET', '/api/v2/virtualresources/{ClusterId}/{VirtualResourceId}', 'json', false, 'json', request);
}

model DetachGatewayDomainRequest {
  clusterId: string(name='ClusterId', description='The region where the private gateway resides.

This parameter is required.', example='cn-shanghai', position='Path'),
  gatewayId: string(name='GatewayId', description='The ID of the private gateway. To obtain the private gateway ID, see the GatewayId parameter in the response parameters of the [ListGateway](https://apiworkbench.aliyun-inc.com/document/eas/2021-07-01/ListGateway?spm=openapi-amp.newDocPublishment.0.0.765e281fL2IcjJ\\&ampEnv=online) operation.

This parameter is required.', example='gw-1uhcqmsc7x22******', position='Path'),
  customDomain: {
    domain: string(name='Domain', description='The custom domain name.

This parameter is required.', example='test.com'),
    type: string(name='Type', description='The domain name type.

Valid value:

*   intranet: internal network.
*   internet: public network.

This parameter is required.', example='intranet'),
  }(name='CustomDomain', description='The custom domain name information.

This parameter is required.', shrink='json', position='Query'),
}

model DetachGatewayDomainResponseBody = {
  gatewayId?: string(name='GatewayId', description='The ID of the private gateway. To obtain the private gateway ID, see the GatewayId parameter in the response parameters of the [ListGateway](https://apiworkbench.aliyun-inc.com/document/eas/2021-07-01/ListGateway?spm=openapi-amp.newDocPublishment.0.0.765e281fL2IcjJ\\&ampEnv=online) operation.', example='gw-1uhcqmsc7x22******'),
  message?: string(name='Message', description='The message that is returned.', example='Successfully delete custom endpoint for gateway gw-1uhcqmsc7x22******'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='40325405-579C-4D82****'),
}

model DetachGatewayDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetachGatewayDomainResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DetachGatewayDomain  DetachGatewayDomainRequest
  * @return DetachGatewayDomainResponse
 */
async function detachGatewayDomain(request: DetachGatewayDomainRequest): DetachGatewayDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DetachGatewayDomain', 'PUT', '/api/v2/gateways/{ClusterId}/{GatewayId}/domain/detach', 'json', false, 'json', request);
}

model DevelopServiceRequest {
  clusterId: string(name='ClusterId', description='The ID of the region where the service is deployed.

This parameter is required.', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='The service name. For more information about how to query the service name, see [ListServices](https://help.aliyun.com/document_detail/412109.html).

This parameter is required.', example='echo', position='Path'),
  exit?: string(name='Exit', description='Specifies whether to exit development mode. Valid values:

*   true: exits development mode.
*   false (default): enters development mode.', example='true', position='Query'),
}

model DevelopServiceResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Success'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model DevelopServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DevelopServiceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DevelopService  DevelopServiceRequest
  * @return DevelopServiceResponse
 */
async function developService(request: DevelopServiceRequest): DevelopServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DevelopService', 'PUT', '/api/v2/services/{ClusterId}/{ServiceName}/develop', 'json', false, 'json', request);
}

model ListAclPolicyRequest {
  clusterId: string(name='ClusterId', description='The region where the private gateway resides.

This parameter is required.', example='cn-wulanchabu', position='Path'),
  gatewayId: string(name='GatewayId', description='The private gateway ID. To obtain the private gateway ID, see the private_gateway_id parameter in the response parameters of the ListResources operation.

This parameter is required.', example='gw-1uhcqmsc7x22******', position='Path'),
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC). For more information about how to obtain the VPC ID, see DescribeVpcs.', example='vpc-uf66uio7md****', position='Query'),
}

model ListAclPolicyResponseBody = {
  gatewayId?: string(name='GatewayId', description='The private gateway ID.', example='gw-1uhcqmsc7x22******'),
  internetAclPolicyList?: [ 
    {
      aclPolicyList?: [ 
        {
          comment?: string(name='Comment', description='The comment on the IP CIDR block in the VPC that can access the private gateway over the Internet.', example='default'),
          entry?: string(name='Entry', description='The IP CIDR block in the VPC that can access the private gateway over the Internet.', example='10.23.XX.XX/32'),
        }
      ](name='AclPolicyList', description='The whitelisted IP CIDR blocks in the VPC that can access the private gateway over the Internet.'),
    }
  ](name='InternetAclPolicyList', description='The access control policies of the private gateway over the Internet.'),
  intranetVpcAclPolicyList?: [ 
    {
      aclPolicyList?: [ 
        {
          comment?: string(name='Comment', description='The comment on the IP CIDR block in the VPC that can access the private gateway over the internal network.', example='Test Entry'),
          entry?: string(name='Entry', description='The IP CIDR block in the VPC that can access the private gateway over the internal network.', example='192.168.XX.XX/24'),
        }
      ](name='AclPolicyList', description='The whitelisted IP CIDR blocks in the VPC that can access the private gateway over the internal network.'),
      vpcId?: string(name='VpcId', description='The VPC ID. For more information about how to obtain the VPC ID, see DescribeVpcs.', example='vpc-uf66uio7md****'),
    }
  ](name='IntranetVpcAclPolicyList', description='The access control policies of the private gateway over the internal network.'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model ListAclPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAclPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAclPolicy  ListAclPolicyRequest
  * @return ListAclPolicyResponse
 */
async function listAclPolicy(request: ListAclPolicyRequest): ListAclPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListAclPolicy', 'GET', '/api/v2/gateways/{ClusterId}/{GatewayId}/acl_policy', 'json', false, 'json', request);
}

model ListBenchmarkTaskRequest {
  filter?: string(name='Filter', description='The keyword used to query required stress testing tasks. If this parameter is specified, the system returns stress testing tasks based on the names of the stress testing tasks in the matched Elastic Algorithm Service (EAS).', example='test_bench', position='Query'),
  pageNumber?: string(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries per page. Default value: 100.', example='10', position='Query'),
  serviceName?: string(name='ServiceName', description='The name of the EAS service that corresponds to the stress testing task. For more information about how to query the service name, see [ListServices](https://help.aliyun.com/document_detail/412109.html).', example='test_bench_srv', position='Query'),
}

model ListBenchmarkTaskResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
  tasks?: [ 
    {
      availableAgent?: long(name='AvailableAgent', description='The number of instances that are available for stress testing.', example='2'),
      createTime?: string(name='CreateTime', description='The time when the stress testing task was created.', example='2020-12-04T02:43:15Z'),
      message?: string(name='Message', description='The returned message.', example='Benchmark task [benchmark-larec-test-1076] is Running'),
      region?: string(name='Region', description='The region ID of the stress testing task.', example='cn-shanghai'),
      serviceName?: string(name='ServiceName', description='The name of the service on which you want to perform a stress testing.', example='test_quota'),
      status?: string(name='Status', description='The state of the stress testing task.

Valid values:

*   Creating

    <!-- -->

    <!-- -->

    <!-- -->

*   Starting

    <!-- -->

    <!-- -->

    <!-- -->

*   DeleteFailed

    <!-- -->

    <!-- -->

    <!-- -->

*   Running

    <!-- -->

    <!-- -->

    <!-- -->

*   Stopping

    <!-- -->

    <!-- -->

    <!-- -->

*   Error

    <!-- -->

    <!-- -->

    <!-- -->

*   Updating

    <!-- -->

    <!-- -->

    <!-- -->

*   Deleting

    <!-- -->

    <!-- -->

    <!-- -->

*   CreateFailed

    <!-- -->

    <!-- -->

    <!-- -->', example='Running'),
      taskId?: string(name='TaskId', description='The ID of the stress testing task.', example='eas-b-gv4y86uvgt****i'),
      taskName?: string(name='TaskName', description='The name of the stress testing task.', example='benchmark-larec-test-1076'),
      updateTime?: string(name='UpdateTime', description='The time when the stress testing task was updated.', example='2020-06-24T03:11:30Z'),
    }
  ](name='Tasks', description='The stress testing tasks.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model ListBenchmarkTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListBenchmarkTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListBenchmarkTask  ListBenchmarkTaskRequest
  * @return ListBenchmarkTaskResponse
 */
async function listBenchmarkTask(request: ListBenchmarkTaskRequest): ListBenchmarkTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListBenchmarkTask', 'GET', '/api/v2/benchmark-tasks', 'json', false, 'json', request);
}

model ListGatewayRequest {
  gatewayId?: string(name='GatewayId', description='The private gateway ID. To obtain the private gateway ID, see the private_gateway_id parameter in the response parameters of the ListResources operation.', example='gw-1uhcqmsc7x22******', position='Query'),
  gatewayName?: string(name='GatewayName', description='The private gateway alias.', example='mygateway1', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 100.', example='100', position='Query'),
  resourceName?: string(name='ResourceName', description='The ID of the resource group. To obtain a resource group ID, see the ResourceId field in the response of the [ListResources](https://help.aliyun.com/document_detail/412133.html) operation.', example='eas-r-4gt8twzwllfo******', position='Query'),
}

model ListGatewayResponseBody = {
  gateways?: [ 
    {
      chargeType?: string(name='ChargeType', description='The billing method. Valid values:

*   PrePaid: subscription.
*   PostPaid: pay-as-you-go.', example='PostPaid'),
      createTime?: string(name='CreateTime', description='The time when the private gateway was created. The time is displayed in UTC.', example='2020-05-19T14:19:42Z'),
      gatewayId?: string(name='GatewayId', description='The private gateway ID.', example='gw-1uhcqmsc7x22******'),
      gatewayName?: string(name='GatewayName', description='The private gateway alias.', example='mygateway1'),
      instanceType?: string(name='InstanceType', description='The type of instances used for the private gateway.', example='2c4g'),
      internetDomain?: string(name='InternetDomain', description='The public endpoint.', example='gw-1uhcqmsc7x22******-1801786532******.cn-wulanchabu.pai-eas.aliyuncs.com'),
      internetEnabled?: boolean(name='InternetEnabled', description='Indicates whether Internet access is enabled.', example='true'),
      intranetDomain?: string(name='IntranetDomain', description='The internal endpoint.', example='gw-1uhcqmsc7x22******-1801786532******-vpc.cn-wulanchabu.pai-eas.aliyuncs.com'),
      isDefault?: boolean(name='IsDefault', description='Indicates whether it is the default private gateway.', example='true'),
      replicas?: int32(name='Replicas', description='The number of nodes in the private gateway.', example='2'),
      SSLRedirectionEnabled?: boolean(name='SSLRedirectionEnabled', description='Specifies whether to enable HTTP to HTTPS redirection.', example='true'),
      status?: string(name='Status', description='The state of the private gateway.

Valid values:

*   Creating
*   Stopped
*   Failed
*   Running
*   Deleted
*   Deleting
*   Waiting', example='Running'),
      updateTime?: string(name='UpdateTime', description='The time when the private gateway was updated. The time is displayed in UTC.', example='2021-02-24T11:52:17Z'),
    }
  ](name='Gateways', description='The private gateways.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='100'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
  totalCount?: long(name='TotalCount', description='The total number of private gateways returned.', example='5'),
}

model ListGatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListGatewayResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListGateway  ListGatewayRequest
  * @return ListGatewayResponse
 */
async function listGateway(request: ListGatewayRequest): ListGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListGateway', 'GET', '/api/v2/gateways', 'json', false, 'json', request);
}

model ListGatewayDomainsRequest {
  clusterId: string(name='ClusterId', description='The region where the private gateway resides.

This parameter is required.', example='cn-shanghai', position='Path'),
  gatewayId: string(name='GatewayId', description='The ID of the private gateway. To obtain the private gateway ID, see the GatewayId parameter in the response parameters of the [ListGateway](https://apiworkbench.aliyun-inc.com/document/eas/2021-07-01/ListGateway?spm=openapi-amp.newDocPublishment.0.0.765e281fL2IcjJ\\&ampEnv=online) operation.

This parameter is required.', example='gw-1uhcqmsc7x22******', position='Path'),
}

model ListGatewayDomainsResponseBody = {
  customDomains?: [ 
    {
      certificateEndDate?: string(name='CertificateEndDate'),
      certificateId?: string(name='CertificateId', description='The ID of the SSL certificate bound to the domain name. Obtain the certificate ID after you upload or purchase a certificate in the [Certificate Management Service](https://yundunnext.console.aliyun.com/?spm=5176.2020520163.console-base_help.2.4b3baJixaJixOc\\&p=cas) console.', example='1473**25'),
      certificateName?: string(name='CertificateName'),
      certificateStartDate?: string(name='CertificateStartDate'),
      certificateStatus?: string(name='CertificateStatus'),
      createTime?: string(name='CreateTime'),
      domain?: string(name='Domain', description='The custom domain name.', example='test.com'),
      type?: string(name='Type', description='The domain name type.

Valid value:

*   intranet: internal network.
*   internet: public network.', example='intranet'),
      updateTime?: string(name='UpdateTime'),
    }
  ](name='CustomDomains', description='The custom domain names.'),
  message?: string(name='Message', description='The message that is returned.', example='Successfully get custom domains'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='40325405-579C-4D82****'),
}

model ListGatewayDomainsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListGatewayDomainsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListGatewayDomains  ListGatewayDomainsRequest
  * @return ListGatewayDomainsResponse
 */
async function listGatewayDomains(request: ListGatewayDomainsRequest): ListGatewayDomainsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListGatewayDomains', 'GET', '/api/v2/gateways/{ClusterId}/{GatewayId}/domains', 'json', false, 'json', request);
}

model ListGatewayIntranetLinkedVpcRequest {
  clusterId?: string(name='ClusterId', description='The region ID of the private gateway.', example='cn-hangzhou', position='Path'),
  gatewayId?: string(name='GatewayId', description='The private gateway ID.', example='gw-1uhcqmsc7x22******', position='Path'),
}

model ListGatewayIntranetLinkedVpcResponseBody = {
  gatewayId?: string(name='GatewayId', description='The private gateway ID.', example='gw-1uhcqmsc7x22******'),
  intranetLinkedVpcList?: [ 
    {
      accountId?: string(name='AccountId'),
      authoritativeDnsEnabled?: boolean(name='AuthoritativeDnsEnabled'),
      ip?: string(name='Ip', description='The IP address.', example='192.168.10.11'),
      securityGroupId?: string(name='SecurityGroupId', description='The security group ID.', example='sg-2ze4pgstgszvgq******'),
      status?: string(name='Status', description='The state of the private gateway.

Valid values:

*   Creating

    <!-- -->

    :

    <!-- -->

    The private gateway is being created.

    <!-- -->

*   Running

    <!-- -->

    :

    <!-- -->

    The private gateway is running.

    <!-- -->', example='Running'),
      vSwitchId?: string(name='VSwitchId', description='The vSwitch ID.', example='vsw-8vb2qjoiio6m9pg******'),
      vpcId?: string(name='VpcId', description='The virtual private cloud (VPC) ID.', example='vpc-2zetuli9ws0qgjd******'),
    }
  ](name='IntranetLinkedVpcList', description='The internal endpoints.'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model ListGatewayIntranetLinkedVpcResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListGatewayIntranetLinkedVpcResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListGatewayIntranetLinkedVpc  ListGatewayIntranetLinkedVpcRequest
  * @return ListGatewayIntranetLinkedVpcResponse
 */
async function listGatewayIntranetLinkedVpc(request: ListGatewayIntranetLinkedVpcRequest): ListGatewayIntranetLinkedVpcResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListGatewayIntranetLinkedVpc', 'GET', '/api/v2/gateways/{ClusterId}/{GatewayId}/intranet_endpoint_linked_vpc', 'json', false, 'json', request);
}

model ListGatewayIntranetLinkedVpcPeerRequest {
  clusterId?: string(name='ClusterId', description='The region where the private gateway resides.', example='cn-wulanchabu', position='Path'),
  gatewayId?: string(name='GatewayId', description='The ID of the private gateway. To obtain the private gateway ID, see [ListGateway](https://help.aliyun.com/document_detail/2841911.html).', example='gw-1uhcqmsc7x22******', position='Path'),
  vpcId?: string(name='VpcId', description='The ID of the associated VPC. To obtain the VPC ID, see [ListGatewayIntranetLinkedVpc](https://help.aliyun.com/document_detail/2621223.html).

*   If you specify a VPC ID, only VPC peers corresponding to the ID are queried.
*   Otherwise, all VPC peers are queried.', example='vpc-2zetuli9ws0qgjd******', position='Query'),
}

model ListGatewayIntranetLinkedVpcPeerResponseBody = {
  gatewayId?: string(name='GatewayId', description='The ID of the private gateway.', example='gw-1uhcqmsc7x22******'),
  peerVpcList?: [ 
    {
      peerVpcs?: [ 
        {
          region?: string(name='Region', description='The region where the VPC peer resides.', example='cn-shanghai'),
          status?: string(name='Status'),
          vpcId?: string(name='VpcId', description='The ID of the VPC peer.', example='vpc-uf66uio7md****'),
        }
      ](name='PeerVpcs', description='The IDs of the VPC peers.'),
      vpcId?: string(name='VpcId', description='The VPC ID.', example='vpc-2zetuli9ws0qgjd******'),
    }
  ](name='PeerVpcList', description='The VPC peers.'),
  requestId?: string(name='requestId', description='The ID of the request.', example='40325405-579C-4D82****'),
}

model ListGatewayIntranetLinkedVpcPeerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListGatewayIntranetLinkedVpcPeerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListGatewayIntranetLinkedVpcPeer  ListGatewayIntranetLinkedVpcPeerRequest
  * @return ListGatewayIntranetLinkedVpcPeerResponse
 */
async function listGatewayIntranetLinkedVpcPeer(request: ListGatewayIntranetLinkedVpcPeerRequest): ListGatewayIntranetLinkedVpcPeerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListGatewayIntranetLinkedVpcPeer', 'GET', '/api/v2/gateways/{ClusterId}/{GatewayId}/intranet_endpoint_linked_vpc_peer', 'json', false, 'json', request);
}

model ListGatewayIntranetSupportedZoneRequest {
  gatewayId?: string(name='GatewayId', description='The private gateway ID. For more information about how to obtain the private gateway ID, see the GatewayId parameter in the response parameters of the [ListGateway](https://apiworkbench.aliyun-inc.com/document/eas/2021-07-01/ListGateway?spm=openapi-amp.newDocPublishment.0.0.765e281fL2IcjJ\\&ampEnv=online) operation.', example='gw-1uhcqmsc7x22******', position='Path'),
  clusterId?: string(name='ClusterId', description='The region ID of the private gateway.', example='cn-wulanchabu', position='Path'),
}

model ListGatewayIntranetSupportedZoneResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
  zones?: [ string ](name='Zones', description='The zones that are supported by the region.'),
}

model ListGatewayIntranetSupportedZoneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListGatewayIntranetSupportedZoneResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListGatewayIntranetSupportedZone  ListGatewayIntranetSupportedZoneRequest
  * @return ListGatewayIntranetSupportedZoneResponse
 */
async function listGatewayIntranetSupportedZone(request: ListGatewayIntranetSupportedZoneRequest): ListGatewayIntranetSupportedZoneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListGatewayIntranetSupportedZone', 'GET', '/api/v2/gateways/{ClusterId}/{GatewayId}/intranet_supported_zone', 'json', false, 'json', request);
}

model ListGroupsRequest {
  filter?: string(name='Filter', description='The name of the filter that is used to filter out unwanted service groups. Fuzzy match is supported.', example='foo', position='Query'),
  pageNumber?: string(name='PageNumber', description='The page number. Default value: 1.', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries per page. Default value: 100.', example='20', position='Query'),
  workspaceId?: string(name='WorkspaceId', description='The workspace ID.', example='123***', position='Query'),
}

model ListGroupsResponseBody = {
  groups?: [
    Group
  ](name='Groups', description='The service groups.'),
  pageNumber?: long(name='PageNumber', description='The page number.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page.', example='20'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='5'),
}

model ListGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListGroupsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListGroups  ListGroupsRequest
  * @return ListGroupsResponse
 */
async function listGroups(request: ListGroupsRequest): ListGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListGroups', 'GET', '/api/v2/groups', 'json', false, 'json', request);
}

model ListResourceInstanceWorkerRequest {
  clusterId: string(name='ClusterId', description='The ID of the cluster to which the resource group belongs.

This parameter is required.', example='cn-shanghai', position='Path'),
  resourceId: string(name='ResourceId', description='The ID of the resource group. For more information about how to query the ID of a resource group, see [ListResources](https://help.aliyun.com/document_detail/412133.html).

This parameter is required.', example='eas-r-adfabas', position='Path'),
  instanceName: string(name='InstanceName', description='The name of the instance in a resource group. For more information about how to obtain the instance name, see [ListServiceInstances](https://help.aliyun.com/document_detail/412129.html). HostName in the returned result indicates the name of the instance.

This parameter is required.', example='cne10', position='Path'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 100.', example='20', position='Query'),
  workerName?: string(name='WorkerName', description='The worker name.', example='test-fd95xxxxx-xxxxxx', position='Query'),
}

model ListResourceInstanceWorkerResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
  pods?: [
    ResourceInstanceWorker
  ](name='Pods', description='The workers.'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model ListResourceInstanceWorkerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListResourceInstanceWorkerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListResourceInstanceWorker  ListResourceInstanceWorkerRequest
  * @return ListResourceInstanceWorkerResponse
 */
async function listResourceInstanceWorker(request: ListResourceInstanceWorkerRequest): ListResourceInstanceWorkerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListResourceInstanceWorker', 'GET', '/api/v2/resources/{ClusterId}/{ResourceId}/instance/{InstanceName}/workers', 'json', false, 'json', request);
}

model ListResourceInstancesRequest {
  clusterId: string(name='ClusterId', description='The ID of the region to which the resource group belongs.

This parameter is required.', example='cn-shanghai', position='Path'),
  resourceId: string(name='ResourceId', description='The ID of the resource group. For more information about how to query the ID of a resource group, see [ListResources](https://help.aliyun.com/document_detail/412133.html).

This parameter is required.', example='iot', position='Path'),
  chargeType?: string(name='ChargeType', description='The billing method of the instance. Valid values:

*   PrePaid: subscription.
*   PostPaid: pay-as-you-go.', example='PrePaid', position='Query'),
  filter?: string(name='Filter', description='The keyword used to query instances. Instances can be queried by instance ID or instance IP address.', example='10.224.xx.xx', position='Query'),
  instanceIP?: string(name='InstanceIP', description='The IP address of the instance.', example='10.224.xx.xx', position='Query'),
  instanceId?: string(name='InstanceId', description='The instance ID. For more information about how to query the instance ID, see [ListResourceInstances](https://help.aliyun.com/document_detail/412129.html).', example='i-bp1jd6x3uotsv****', position='Query'),
  instanceName?: string(name='InstanceName', description='The instance name.', example='e-xxxx***', position='Query'),
  instanceStatus?: string(name='InstanceStatus', description='The instance state.

Valid values:

*   Ready-SchedulingDisabled

    <!-- -->

    :

    <!-- -->

    The instance is available but unschedulable

    <!-- -->

    .

*   Ready

    <!-- -->

    : The instance

    <!-- -->

    is running

    <!-- -->

    .

*   NotReady

    <!-- -->

    : The instance is unready.

    <!-- -->

    <!-- -->

*   Stopped

    <!-- -->

    : The instance has stopped.

    <!-- -->

    <!-- -->

*   NotReady-SchedulingDisabled

    <!-- -->

    :

    <!-- -->

    The instance is unavailable and unschedulable

    <!-- -->

    .

*   Attaching

    <!-- -->

    : The instance

    <!-- -->

    is starting

    <!-- -->

    .

*   Deleting

    <!-- -->

    : The instance is being deleted.

    <!-- -->

    <!-- -->

*   CreateFailed: The instance failed to be created.

    <!-- -->

    <!-- -->

    <!-- -->', example='Ready', position='Query'),
  label?: map[string]string(name='Label', description='The tag.', shrink='json', position='Query'),
  order?: string(name='Order', description='The sorting order.

Valid values:

*   asc: The instances are sorted in ascending order.

    <!-- -->

    <!-- -->

    <!-- -->

*   desc

    <!-- -->

    : The instances are sorted in descending order.

    <!-- -->

    <!-- -->', example='desc', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 100.', example='20', position='Query'),
  sort?: string(name='Sort', description='The field that you use to sort the query results.

Valid values:

*   CreateTime

    <!-- -->

    : The instances are sorted based on the time when the instances were created.

    <!-- -->

    <!-- -->

*   MemoryUsed

    <!-- -->

    :

    <!-- -->

    The instances are sorted based on the memory usage of the instances

    <!-- -->

    .

*   GpuUsed

    <!-- -->

    : The instances are sorted based on the

    <!-- -->

    GPU usage of the instances.

    <!-- -->

*   ExpireTime: The instances are sorted based on the time when the instances expired.

    <!-- -->

    <!-- -->

    <!-- -->

*   CpuUsed

    <!-- -->

    :

    <!-- -->

    The instances are sorted based on the CPU utilization of the instances.

    <!-- -->', example='CreateTime', position='Query'),
}

model ListResourceInstancesResponseBody = {
  instances?: [
    ResourceInstance
  ](name='Instances', description='The instances.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model ListResourceInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListResourceInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListResourceInstances  ListResourceInstancesRequest
  * @return ListResourceInstancesResponse
 */
async function listResourceInstances(request: ListResourceInstancesRequest): ListResourceInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListResourceInstances', 'GET', '/api/v2/resources/{ClusterId}/{ResourceId}/instances', 'json', false, 'json', request);
}

model ListResourceServicesRequest {
  clusterId: string(name='ClusterId', description='The ID of the region to which the resource group belongs.

This parameter is required.', example='cn-shanghai', position='Path'),
  resourceId: string(name='ResourceId', description='The ID of the resource group. For more information about how to query the ID of a resource group, see [ListResources](https://help.aliyun.com/document_detail/412133.html).

This parameter is required.', example='iot', position='Path'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 100.', example='20', position='Query'),
}

model ListResourceServicesResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
  services?: [
    Service
  ](name='Services', description='The services.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model ListResourceServicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListResourceServicesResponseBody(name='body'),
}

/**
  * @deprecated OpenAPI ListResourceServices is deprecated, please use eas::2021-07-01::ListServices instead.  * @param request  the request parameters of ListResourceServices  ListResourceServicesRequest
  * @return ListResourceServicesResponse
 */
// Deprecated
async function listResourceServices(request: ListResourceServicesRequest): ListResourceServicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListResourceServices', 'GET', '/api/v2/resources/{ClusterId}/{ResourceId}/services', 'json', false, 'json', request);
}

model ListResourcesRequest {
  order?: string(name='Order', description='The sorting order. Valid values:

*   Desc
*   Asc', example='Desc', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 100.', example='20', position='Query'),
  resourceId?: string(name='ResourceId', description='The ID of the resource group. You can call the [CreateResource](https://help.aliyun.com/document_detail/412111.html) operation to query the ID of the resource group.', example='eas-r-h7lcw24dyqztwxxxxxx', position='Query'),
  resourceName?: string(name='ResourceName', description='The name of the resource group. You can call the [CreateResource](https://help.aliyun.com/document_detail/412111.html) operation to query the name of the resource group.', example='MyResource', position='Query'),
  resourceStatus?: string(name='ResourceStatus', description='The resource group status.', example='ResourceReady', position='Query'),
  resourceType?: string(name='ResourceType', description='The type of the resource group. Valid values:

*   Dedicated: the dedicated resource group.
*   SelfManaged: the self-managed resource group.', example='Dedicated', position='Query'),
  sort?: string(name='Sort', description='The condition by which the results are sorted. By default, the query results are sorted by the timestamp type in descending order.

Valid values:

*   PrePaidInstanceCount
*   CpuCount
*   Memory
*   CreateTime
*   PostPaidInstanceCount
*   MemoryUsed
*   GpuCount
*   GpuUsed
*   CpuUsed
*   ServiceCount', example='CreateTime', position='Query'),
}

model ListResourcesResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
  resources?: [
    Resource
  ](name='Resources', description='The resource groups.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model ListResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListResources  ListResourcesRequest
  * @return ListResourcesResponse
 */
async function listResources(request: ListResourcesRequest): ListResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListResources', 'GET', '/api/v2/resources', 'json', false, 'json', request);
}

model ListServiceContainersRequest {
  clusterId: string(name='ClusterId', description='The region ID of the service.

This parameter is required.', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='The service name.

This parameter is required.', example='foo', position='Path'),
  instanceName: string(name='InstanceName', description='The name of the instance that runs the service.

This parameter is required.', example='foo-69xxxx4f4-5w9r9', position='Path'),
}

model ListServiceContainersResponseBody = {
  containers?: [
    ContainerInfo
  ](name='Containers', description='The containers of the service.'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
  serviceName?: string(name='ServiceName', description='The service name.', example='foo'),
}

model ListServiceContainersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListServiceContainersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListServiceContainers  ListServiceContainersRequest
  * @return ListServiceContainersResponse
 */
async function listServiceContainers(request: ListServiceContainersRequest): ListServiceContainersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListServiceContainers', 'GET', '/api/v2/services/{ClusterId}/{ServiceName}/instances/{InstanceName}/containers', 'json', false, 'json', request);
}

model ListServiceInstancesRequest {
  clusterId: string(name='ClusterId', description='The ID of the region where the service is deployed.

This parameter is required.', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='The service name. For more information about how to query the service name, see [ListServices](https://help.aliyun.com/document_detail/412109.html).

This parameter is required.', example='foo', position='Path'),
  filter?: string(name='Filter', description='The keyword used to query instances. Instances can be queried based on instance name, instance IP address, IP address of the server where the instance resides, and instance type.', example='10.118.xx.xx', position='Query'),
  hostIP?: string(name='HostIP', description='The IP address of the server where the instance resides.', example='10.224.xx.xx', position='Query'),
  instanceIP?: string(name='InstanceIP', description='The IP address of the instance.', example='10.224.xx.xx', position='Query'),
  instanceName?: string(name='InstanceName', description='The instance name.', example='foo-bdc5xxxx-8l7rk', position='Query'),
  instanceStatus?: string(name='InstanceStatus', description='The instance state.', example='Running', position='Query'),
  instanceType?: string(name='InstanceType', description='The instance type.', example='ecs.c7.large', position='Query'),
  isSpot?: boolean(name='IsSpot', description='Specifies whether the instance is a preemptible instance.', example='false', position='Query'),
  order?: string(name='Order', description='The sorting order.

Valid values:

*   asc

    <!-- -->

    :

    <!-- -->

    <!-- -->

    The instances are sorted in ascending order.

*   desc

    <!-- -->

    :

    <!-- -->

    <!-- -->

    The instances are sorted in descending order.', example='desc', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 100.', example='20', position='Query'),
  resourceType?: string(name='ResourceType', description='The type of the resource group to which the instance belongs.

Valid values:

*   PublicResource

    <!-- -->

    <!-- -->

    <!-- -->

*   DedicatedResource

    <!-- -->

    <!-- -->

    <!-- -->', example='PublicResource', position='Query'),
  role?: string(name='Role', description='The service role.

Valid values:

*   DataSet

    <!-- -->

    :

    <!-- -->

    dataset service

    <!-- -->

    .

*   SDProxy

    <!-- -->

    :

    <!-- -->

    Stable-Diffusion proxy service

    <!-- -->

    .

*   Standard

    <!-- -->

    :

    <!-- -->

    standard service

    <!-- -->

    .

*   Queue

    <!-- -->

    :

    <!-- -->

    queue service

    <!-- -->

    .', example='Queue', position='Query'),
  sort?: string(name='Sort', description='The field that you use to sort the query results.

*   Set the value to StartTime.

    <!-- -->

    <!-- -->

    The value specifies that the query results are sorted based on the time when the instances were created

    <!-- -->

    .', example='StartTime', position='Query'),
}

model ListServiceInstancesResponseBody = {
  instances?: [
    Instance
  ](name='Instances', description='The instances.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model ListServiceInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListServiceInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListServiceInstances  ListServiceInstancesRequest
  * @return ListServiceInstancesResponse
 */
async function listServiceInstances(request: ListServiceInstancesRequest): ListServiceInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListServiceInstances', 'GET', '/api/v2/services/{ClusterId}/{ServiceName}/instances', 'json', false, 'json', request);
}

model ListServiceVersionsRequest {
  clusterId: string(name='ClusterId', description='The ID of the region in which the service resides.

This parameter is required.', example='cn-hangzhou', position='Path'),
  serviceName: string(name='ServiceName', description='The service name. For more information about how to query the service name, see [ListServices](https://help.aliyun.com/document_detail/412109.html).

This parameter is required.', example='test_oss', position='Path'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 100.', example='10', position='Query'),
}

model ListServiceVersionsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='E089D584-B6F4-50C4-9902-DA2295B7****'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='166'),
  versions?: [ 
    {
      buildTime?: string(name='BuildTime', description='The time when the service version was created. The time is displayed in UTC.', example='2022-08-29T22:02:14Z'),
      imageAvailable?: string(name='ImageAvailable', description='Indicates whether the image is available. Valid values:

*   true: The image is available.
*   false: The image is unavailable.
*   unknown: The availability of the image is unknown.', example='true'),
      imageId?: int32(name='ImageId', description='The image ID.', example='4'),
      message?: string(name='Message', description='The returned message.', example='Service is Running'),
      serviceConfig?: string(name='ServiceConfig', description='The service deployment configurations. This parameter is returned only if the service is deployed by using a custom image.', example='{
    "metadata": {
        "cpu": 1,
        "instance": 1,
        "memory": 1024
    },
    "name": "echo"
}'),
      serviceRunnable?: string(name='ServiceRunnable', description='Indicates whether Elastic Algorithm service (EAS) is activated. Valid values:

*   true: EAS is activated.
*   false: EAS is not activated.
*   unknown: The activation of EAS is unknown.', example='true'),
    }
  ](name='Versions', description='The historical versions of the service.'),
}

model ListServiceVersionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListServiceVersionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListServiceVersions  ListServiceVersionsRequest
  * @return ListServiceVersionsResponse
 */
async function listServiceVersions(request: ListServiceVersionsRequest): ListServiceVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListServiceVersions', 'GET', '/api/v2/services/{ClusterId}/{ServiceName}/versions', 'json', false, 'json', request);
}

model ListServicesRequest {
  filter?: string(name='Filter', description='The field that is used for fuzzy matches. The system performs fuzzy matches only by service name.', example='foo', position='Query'),
  gateway?: string(name='Gateway', description='The private gateway ID.', example='gw-1uhcqmsc7x22******', position='Query'),
  groupName?: string(name='GroupName', description='The name of the service group. For more information about how to query the name of a service group, see [ListServices](https://help.aliyun.com/document_detail/412109.html).', example='foo', position='Query'),
  includeNoWorkspace?: boolean(name='IncludeNoWorkspace', position='Query'),
  label?: map[string]string(name='Label', description='The tag that is used to filter services.', shrink='json', position='Query'),
  order?: string(name='Order', description='The sorting order. Valid values:

*   desc (default): The query results are sorted in descending order.
*   asc: The query results are sorted in ascending order.', example='asc', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 100.', example='100', position='Query'),
  parentServiceUid?: string(name='ParentServiceUid', description='The ID of the primary service that corresponds to the Band member service.', example='eas-m-ijafy3c8cxxxx', position='Query'),
  quotaId?: string(name='QuotaId', description='The quota ID.', example='quota12345', position='Query'),
  resourceAliasName?: string(name='ResourceAliasName', position='Query'),
  resourceId?: string(name='ResourceId', position='Query'),
  resourceName?: string(name='ResourceName', description='The name or ID of the resource group to which the service belongs.', example='eas-r-hd0qwy8cxxxx', deprecated='true', position='Query'),
  resourceType?: string(name='ResourceType', position='Query'),
  role?: string(name='Role', description='The server role.

Valid values:

*   DataLoader
*   FrontEnd
*   DataSet
*   SDProxy
*   LLMSscheduler
*   ScalableJob
*   LLMGateway
*   Job
*   Queue', example='LLMGateway', position='Query'),
  serviceName?: string(name='ServiceName', description='The service name.', example='echo_test', position='Query'),
  serviceStatus?: string(name='ServiceStatus', description='The service state.

Valid values:

*   Creating

    <!-- -->

    <!-- -->

    <!-- -->

*   Stopped

    <!-- -->

    <!-- -->

    <!-- -->

*   Failed

    <!-- -->

    <!-- -->

    <!-- -->

*   Complete

    <!-- -->

    <!-- -->

    <!-- -->

*   Cloning

    <!-- -->

    <!-- -->

    <!-- -->

*   Stopping

    <!-- -->

    <!-- -->

    <!-- -->

*   Updating

    <!-- -->

    <!-- -->

    <!-- -->

*   Waiting

    <!-- -->

    <!-- -->

    <!-- -->

*   HotUpdate

    <!-- -->

    <!-- -->

    <!-- -->

*   Committing

    <!-- -->

    <!-- -->

    <!-- -->

*   Starting

    <!-- -->

    <!-- -->

    <!-- -->

*   DeleteFailed

    <!-- -->

    <!-- -->

    <!-- -->

*   Running

    <!-- -->

    <!-- -->

    <!-- -->

*   Developing

    <!-- -->

    <!-- -->

    <!-- -->

*   Scaling

    <!-- -->

    <!-- -->

    <!-- -->

*   Deleted

    <!-- -->

    <!-- -->

    <!-- -->

*   Pending

    <!-- -->

    <!-- -->

    <!-- -->

*   Deleting

    <!-- -->

    <!-- -->

    <!-- -->', example='Running', position='Query'),
  serviceType?: string(name='ServiceType', description='The service type. Valid values:

*   Async
*   Standard
*   Offline Task
*   Proxima

Valid values:

*   Async

    <!-- -->

    <!-- -->

    <!-- -->

*   Standard

    <!-- -->

    <!-- -->

    <!-- -->

*   OfflineTask

    <!-- -->

    <!-- -->

    <!-- -->

*   Proxima

    <!-- -->

    <!-- -->

    <!-- -->', example='Standard', position='Query'),
  serviceUid?: string(name='ServiceUid', description='The user ID (UID) of the service.', example='eas-m-c9iw3yitxxxx', position='Query'),
  sort?: string(name='Sort', description='The sort field. By default, the query results are sorted by the timestamp type in descending order.', example='CreateTime', position='Query'),
  workspaceId?: string(name='WorkspaceId', description='The workspace ID.', example='123456', position='Query'),
}

model ListServicesResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='100'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
  services?: [
    Service
  ](name='Services', description='The services.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model ListServicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListServicesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListServices  ListServicesRequest
  * @return ListServicesResponse
 */
async function listServices(request: ListServicesRequest): ListServicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListServices', 'GET', '/api/v2/services', 'json', false, 'json', request);
}

model ListTenantAddonsRequest {
}

model ListTenantAddonsResponseBody = {
  addons?: [ 
    {
      attributes?: map[string]string(name='Attributes', description='The attributes of the plug-in.'),
      name?: string(name='Name', description='The name of the plug-in.', example='prometheus_discovery'),
    }
  ](name='Addons', description='The information about the plug-in.'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model ListTenantAddonsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTenantAddonsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTenantAddons  ListTenantAddonsRequest
  * @return ListTenantAddonsResponse
 */
async function listTenantAddons(request: ListTenantAddonsRequest): ListTenantAddonsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTenantAddons', 'GET', '/api/v2/tenantaddons', 'json', false, 'json', request);
}

model ListVirtualResourceRequest {
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 100.', example='20', position='Query'),
  virtualResourceId?: string(name='VirtualResourceId', description='The ID of the virtual resource group.', example='eas-vr-npovr28onap1xxxxxx', position='Query'),
  virtualResourceName?: string(name='VirtualResourceName', description='The name of the virtual resource group.', example='MyVirtualResource', position='Query'),
}

model ListVirtualResourceResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='40325405-579C-4D82****'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  virtualResources?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the virtual resource group was created.', example='2024-10-16T17:52:49Z'),
      serviceCount?: int32(name='ServiceCount', description='The number of deployed services.', example='1'),
      updateTime?: string(name='UpdateTime', description='The time when the virtual resource group was last updated.', example='2024-10-16T19:52:49Z'),
      virtualResourceId?: string(name='VirtualResourceId', description='The ID of the virtual resource group.', example='eas-vr-npovr28onap1xxxxxx'),
      virtualResourceName?: string(name='VirtualResourceName', description='The name of the virtual resource group.', example='MyVirtualResource'),
    }
  ](name='VirtualResources', description='The virtual resource groups.'),
}

model ListVirtualResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListVirtualResourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListVirtualResource  ListVirtualResourceRequest
  * @return ListVirtualResourceResponse
 */
async function listVirtualResource(request: ListVirtualResourceRequest): ListVirtualResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListVirtualResource', 'GET', '/api/v2/virtualresources', 'json', false, 'json', request);
}

model ReinstallTenantAddonRequest {
  clusterId: string(name='ClusterId', description='The region ID of the service.

This parameter is required.', example='cn-hangzhou', position='Path'),
  tenantAddonName: string(name='TenantAddonName', description='The plug-in name.

This parameter is required.', example='prometheus_discovery', position='Path'),
}

model ReinstallTenantAddonResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Addon prometheus_discovery is successfully reinstalled'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model ReinstallTenantAddonResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReinstallTenantAddonResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ReinstallTenantAddon  ReinstallTenantAddonRequest
  * @return ReinstallTenantAddonResponse
 */
async function reinstallTenantAddon(request: ReinstallTenantAddonRequest): ReinstallTenantAddonResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ReinstallTenantAddon', 'PUT', '/api/v2/tenantaddons/{ClusterId}/{TenantAddonName}/reinstall', 'json', false, 'json', request);
}

model ReleaseServiceRequest {
  clusterId: string(name='ClusterId', description='The ID of the region where the service is deployed.

This parameter is required.', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='The service name. For more information about how to query the service name, see [ListServices](https://help.aliyun.com/document_detail/412109.html).

This parameter is required.', example='foo', position='Path'),
  trafficState?: string(name='TrafficState', description='The traffic state. Valid values:

*   standalone: independent traffic.
*   grouping: grouped traffic.', example='grouping', position='Body'),
  weight?: int32(name='Weight', description='The weight of the service. Valid values: [-1, 1000].', example='100', position='Body'),
}

model ReleaseServiceResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Releasing service [foo] in region [cn-shanghai] with weight [40], service status: [Running]'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model ReleaseServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReleaseServiceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ReleaseService  ReleaseServiceRequest
  * @return ReleaseServiceResponse
 */
async function releaseService(request: ReleaseServiceRequest): ReleaseServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ReleaseService', 'PUT', '/api/v2/services/{ClusterId}/{ServiceName}/release', 'json', false, 'json', request);
}

model RestartServiceRequest {
  clusterId: string(name='ClusterId', description='The ID of the region in which the service resides.

This parameter is required.', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='The service name. For more information about how to query the service name, see [ListServices](https://help.aliyun.com/document_detail/412109.html).

This parameter is required.', example='foo', position='Path'),
}

model RestartServiceResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Service is restarting'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model RestartServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RestartServiceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RestartService  RestartServiceRequest
  * @return RestartServiceResponse
 */
async function restartService(request: RestartServiceRequest): RestartServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RestartService', 'PUT', '/api/v2/services/{ClusterId}/{ServiceName}/restart', 'json', false, 'json', request);
}

model StartBenchmarkTaskRequest {
  clusterId: string(name='ClusterId', description='The ID of the region where the stress testing task is performed.

This parameter is required.', example='cn-shanghai', position='Path'),
  taskName: string(name='TaskName', description='The name of the stress testing task. For more information about how to query the name of a stress testing task, see [ListBenchmarkTask](https://help.aliyun.com/document_detail/432976.html).

This parameter is required.', example='benchmark-larec-test-3bc6', position='Path'),
}

model StartBenchmarkTaskResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Benchmark task [benchmark-larec-test-1076] is Starting'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model StartBenchmarkTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartBenchmarkTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartBenchmarkTask  StartBenchmarkTaskRequest
  * @return StartBenchmarkTaskResponse
 */
async function startBenchmarkTask(request: StartBenchmarkTaskRequest): StartBenchmarkTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartBenchmarkTask', 'PUT', '/api/v2/benchmark-tasks/{ClusterId}/{TaskName}/start', 'json', false, 'json', request);
}

model StartServiceRequest {
  clusterId: string(name='ClusterId', description='The ID of the region where the service is deployed.

This parameter is required.', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='The service name. For more information about how to query the service name, see [ListServices](https://help.aliyun.com/document_detail/412109.html).

This parameter is required.', example='foo', position='Path'),
}

model StartServiceResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Service [foo] in region [cn-shanghai] is starting'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model StartServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartServiceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartService  StartServiceRequest
  * @return StartServiceResponse
 */
async function startService(request: StartServiceRequest): StartServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartService', 'PUT', '/api/v2/services/{ClusterId}/{ServiceName}/start', 'json', false, 'json', request);
}

model StopBenchmarkTaskRequest {
  clusterId: string(name='ClusterId', description='The ID of the region where the stress testing task is performed.

This parameter is required.', example='cn-shanghai', position='Path'),
  taskName: string(name='TaskName', description='The name of the stress testing task. For more information about how to query the name of a stress testing task, see [ListBenchmarkTask](https://help.aliyun.com/document_detail/432976.html).

This parameter is required.', example='benchmark-larec-test-dbe5', position='Path'),
}

model StopBenchmarkTaskResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Benchmark task [benchmark-larec-test-1076] is Stopping'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model StopBenchmarkTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopBenchmarkTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopBenchmarkTask  StopBenchmarkTaskRequest
  * @return StopBenchmarkTaskResponse
 */
async function stopBenchmarkTask(request: StopBenchmarkTaskRequest): StopBenchmarkTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopBenchmarkTask', 'PUT', '/api/v2/benchmark-tasks/{ClusterId}/{TaskName}/stop', 'json', false, 'json', request);
}

model StopServiceRequest {
  clusterId: string(name='ClusterId', description='The ID of the region where the service is deployed.

This parameter is required.', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='The service name. For more information about how to query the service name, see [ListServices](https://help.aliyun.com/document_detail/412109.html).

This parameter is required.', example='foo', position='Path'),
}

model StopServiceResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Succeed to auto scale service [foo]'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model StopServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopServiceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopService  StopServiceRequest
  * @return StopServiceResponse
 */
async function stopService(request: StopServiceRequest): StopServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopService', 'PUT', '/api/v2/services/{ClusterId}/{ServiceName}/stop', 'json', false, 'json', request);
}

model UpdateAppServiceRequest {
  clusterId: string(name='ClusterId', description='The region ID of the service.

This parameter is required.', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='The service name.

This parameter is required.', example='foo', position='Path'),
  quotaId?: string(name='QuotaId', description='The quota ID.', example='abcdef', position='Query'),
  workspaceId?: string(name='WorkspaceId', description='The workspace ID.', example='123456', position='Query'),
  appType?: string(name='AppType', description='The application type.

Valid values:

*   LLM: the large language model (LLM) application

    <!-- -->

    <!-- -->

    <!-- -->', example='LLM', position='Body'),
  appVersion?: string(name='AppVersion', description='The application version.', example='v1', position='Body'),
  config?: map[string]any(name='Config', description='The additional configurations that are required for service deployment.', position='Body'),
  replicas?: int32(name='Replicas', description='The number of instances. This value must be greater than 0.', example='1', position='Body'),
  serviceSpec?: string(name='ServiceSpec', description='The service specifications. Valid values:

*   llama_7b_fp16
*   llama_7b_int8
*   llama_13b_fp16
*   llama_7b_int8
*   chatglm_6b_fp16
*   chatglm_6b_int8
*   chatglm2_6b_fp16
*   baichuan_7b_int8
*   baichuan_13b_fp16
*   baichuan_7b_fp16', example='llama_7b_fp16', position='Body'),
}

model UpdateAppServiceResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Success'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model UpdateAppServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAppServiceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateAppService  UpdateAppServiceRequest
  * @return UpdateAppServiceResponse
 */
async function updateAppService(request: UpdateAppServiceRequest): UpdateAppServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateAppService', 'PUT', '/api/v2/app_services/{ClusterId}/{ServiceName}', 'json', false, 'json', request);
}

model UpdateBenchmarkTaskRequest {
  clusterId: string(name='ClusterId', description='The ID of the region where the stress testing task is performed.

This parameter is required.', example='cn-shanghai', position='Path'),
  taskName: string(name='TaskName', description='The name of the stress testing task.

This parameter is required.', example='benchmark-larec-test-645c', position='Path'),
  body?: string(name='body', description='The request body. The body includes the parameters that are set to create a stress testing task. For more information, see **Table 1. Fields in the base parameter**.', example='{
    "base":  {
         "qps": 200
    }
}', position='Body'),
}

model UpdateBenchmarkTaskResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Benchmark task [benchmark-larec-test-1076] is Updating'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82***'),
}

model UpdateBenchmarkTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateBenchmarkTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateBenchmarkTask  UpdateBenchmarkTaskRequest
  * @return UpdateBenchmarkTaskResponse
 */
async function updateBenchmarkTask(request: UpdateBenchmarkTaskRequest): UpdateBenchmarkTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateBenchmarkTask', 'PUT', '/api/v2/benchmark-tasks/{ClusterId}/{TaskName}', 'json', false, 'json', request);
}

model UpdateGatewayRequest {
  gatewayId: string(name='GatewayId', description='The private gateway ID. For more information about how to query the ID of a private gateway, see the private_gateway_id parameter returned by [ListResources](https://help.aliyun.com/document_detail/412133.html).

This parameter is required.', example='gw-1uhcqmsc7x22******', position='Path'),
  clusterId: string(name='ClusterId', description='The region ID of the private gateway.

This parameter is required.', example='cn-hangzhou', position='Path'),
  enableInternet?: boolean(name='EnableInternet', description='Specifies whether to enable Internet access. Default value: false.

Valid values:

*   true
*   false', example='false', position='Body'),
  enableIntranet?: boolean(name='EnableIntranet', description='Specifies whether to enable private access. Default value: true.

Valid values:

*   true
*   false', example='true', position='Body'),
  enableSSLRedirection?: boolean(name='EnableSSLRedirection', description='Specifies whether to enable HTTP to HTTPS redirection. Default value: false.', example='false', position='Body'),
  instanceType?: string(name='InstanceType', description='The instance type used by the private gateway. Valid values:

*   2c4g
*   4c8g
*   8c16g
*   16c32g', example='ecs.c6.4xlarge', position='Body'),
  isDefault?: boolean(name='IsDefault', description='Specifies whether it is the default private gateway.', example='true', position='Body'),
  name?: string(name='Name', description='The alias of the private gateway.', example='mygateway1', position='Body'),
  replicas?: int32(name='Replicas', description='The number of nodes in the private gateway.', example='2', position='Body'),
}

model UpdateGatewayResponseBody = {
  gatewayId?: string(name='GatewayId', description='The ID of the gateway.', example='gw-1uhcqmsc7x22******'),
  message?: string(name='Message', description='The returned message.', example='Gateway is updated'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='40325405-579C-4D82***'),
}

model UpdateGatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateGatewayResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateGateway  UpdateGatewayRequest
  * @return UpdateGatewayResponse
 */
async function updateGateway(request: UpdateGatewayRequest): UpdateGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateGateway', 'PUT', '/api/v2/gateways/{ClusterId}/{GatewayId}', 'json', false, 'json', request);
}

model UpdateGroupRequest {
  clusterId: string(name='ClusterId', description='The ID of the region in which the service group resides.

This parameter is required.', example='cn-wulanchabu', position='Path'),
  groupName: string(name='GroupName', description='The service group name. For more information about how to obtain the service group name, see ListServices.

This parameter is required.', example='foo', position='Path'),
  trafficMode?: string(name='TrafficMode', description='The traffic mode. Valid values: auto and customized. auto: The traffic is automatically allocated based on the proportion of the number of instances to the total number of instances. customized: The traffic is allocated based on a custom weight.', example='auto', position='Body'),
}

model UpdateGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='40325405-579C-4D82****'),
}

model UpdateGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateGroup  UpdateGroupRequest
  * @return UpdateGroupResponse
 */
async function updateGroup(request: UpdateGroupRequest): UpdateGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateGroup', 'PUT', '/api/v2/groups/{ClusterId}/{GroupName}', 'json', false, 'json', request);
}

model UpdateResourceRequest {
  clusterId: string(name='ClusterId', description='The ID of the region to which the resource group belongs.

This parameter is required.', example='cn-shanghai', position='Path'),
  resourceId: string(name='ResourceId', description='The ID of the resource group. For more information about how to query the ID of a resource group, see [ListResources](https://help.aliyun.com/document_detail/412133.html).

This parameter is required.', example='eas-r-asdasdasd', position='Path'),
  resourceName?: string(name='ResourceName', description='The new name of the resource group after the update. The name can be up to 27 characters in length.', example='iot', position='Body'),
  selfManagedResourceOptions?: {
    nodeMatchLabels?: map[string]string(name='NodeMatchLabels', description='Tag tag key-value pairs for nodes.'),
    nodeTolerations?: [ 
      {
        effect?: string(name='effect', description='The effect.
Valid values:
- PreferNoSchedule
- NoSchedule
- NoExecute', example='NoSchedule'),
        key?: string(name='key', description='The key name.', example='key1'),
        operator?: string(name='operator', description='Relationship between key names and key values.
Valid values:
- Equal
- Exists', example='Equal'),
        value?: string(name='value', description='The key value.', example='value1'),
      }
    ](name='NodeTolerations', description='Tolerations for nodes.'),
  }(name='SelfManagedResourceOptions', description='The configuration items of the self-managed resource group.', position='Body'),
}

model UpdateResourceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
  resourceId?: string(name='ResourceId', description='The ID of the resource group.', example='eas-r-asdasdasd'),
  resourceName?: string(name='ResourceName', description='The name of the resource group.', example='iot'),
}

model UpdateResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateResourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateResource  UpdateResourceRequest
  * @return UpdateResourceResponse
 */
async function updateResource(request: UpdateResourceRequest): UpdateResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateResource', 'PUT', '/api/v2/resources/{ClusterId}/{ResourceId}', 'json', false, 'json', request);
}

model UpdateResourceDLinkRequest {
  clusterId: string(name='ClusterId', description='The ID of the region to which the resource group belongs.

This parameter is required.', example='cn-shanghai', position='Path'),
  resourceId: string(name='ResourceId', description='The ID of the resource group. For more information about how to query the ID of a resource group, see [ListResources](https://help.aliyun.com/document_detail/412133.html).

This parameter is required.', example='iot', position='Path'),
  destinationCIDRs?: string(name='DestinationCIDRs', description='The CIDR blocks of the clients that you want to connect to. After this parameter is specified, the CIDR blocks are added to the back-to-origin route of the server. Either this parameter or the VSwitchIdList parameter can be used to determine CIDR blocks.', example='72.16.0.0/16', position='Body'),
  securityGroupId: string(name='SecurityGroupId', description='The ID of the security group to which the Elastic Compute Service (ECS) instance belongs.

This parameter is required.', example='sg-bp149cedsfx2rfspd2d', position='Body'),
  vSwitchId: string(name='VSwitchId', description='The ID of the peer primary vSwitch. After this parameter is specified, an elastic network interface (ENI) is created in the VSwitch.

This parameter is required.', example='vpc-uf66uio7md****', position='Body'),
  vSwitchIdList?: [ string ](name='VSwitchIdList', description='The vSwitches of the clients that you want to connect to. After this parameter is specified, the CIDR blocks of these vSwitches are added to the back-to-origin route of the server.', position='Body'),
}

model UpdateResourceDLinkResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Network interfaces are updating'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model UpdateResourceDLinkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateResourceDLinkResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateResourceDLink  UpdateResourceDLinkRequest
  * @return UpdateResourceDLinkResponse
 */
async function updateResourceDLink(request: UpdateResourceDLinkRequest): UpdateResourceDLinkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateResourceDLink', 'PUT', '/api/v2/resources/{ClusterId}/{ResourceId}/dlink', 'json', false, 'json', request);
}

model UpdateResourceInstanceRequest {
  clusterId: string(name='ClusterId', description='The ID of the region to which the instance belongs.

This parameter is required.', example='cn-beijing', position='Path'),
  resourceId: string(name='ResourceId', description='The ID of the resource group to which the instance belongs. For more information about how to query the ID of a resource group, see [ListResources](https://help.aliyun.com/document_detail/412133.html).

This parameter is required.', example='eas-r-asdasdasd', position='Path'),
  instanceId: string(name='InstanceId', description='The instance ID. For more information about how to query the instance ID, see [ListResourceInstances](https://help.aliyun.com/document_detail/412129.html).

This parameter is required.', example='eas-i-asdasdasd', position='Path'),
  action: string(name='Action', description='The operation that updates the scheduling state of the instance in a dedicated resource group. Valid values:

*   Uncordon: allows scheduling the service to this instance.
*   Cordon: prohibits scheduling the service to this instance.
*   Drain: evicts the service that has been scheduled to this instance.

This parameter is required.', example='Cordon', position='Body'),
}

model UpdateResourceInstanceResponseBody = {
  instanceId?: string(name='InstanceId', description='The instance ID.', example='eas-i-asdasdasd'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
  resourceId?: string(name='ResourceId', description='The ID of the resource group.', example='eas-r-asdasdasd'),
}

model UpdateResourceInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateResourceInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateResourceInstance  UpdateResourceInstanceRequest
  * @return UpdateResourceInstanceResponse
 */
async function updateResourceInstance(request: UpdateResourceInstanceRequest): UpdateResourceInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateResourceInstance', 'PUT', '/api/v2/resources/{ClusterId}/{ResourceId}/instances/{InstanceId}', 'json', false, 'json', request);
}

model UpdateResourceInstanceLabelRequest {
  clusterId: string(name='ClusterId', description='The region ID.

This parameter is required.', example='cn-shanghai', position='Path'),
  resourceId: string(name='ResourceId', description='The resource group ID.

This parameter is required.', example='eas-r-asdasdasd', position='Path'),
  allInstances?: boolean(name='AllInstances', description='Specifies whether the modification takes effect on all instances in the resource group. If you set this parameter to true, the InstanceIds parameter does not take effect.', example='false', position='Query'),
  instanceIds?: [ string ](name='InstanceIds', description='The instance IDs.', shrink='simple', position='Query'),
  labels?: map[string]string(name='Labels', description='The custom tag.', position='Body'),
}

model UpdateResourceInstanceLabelResponseBody = {
  message?: string(name='Message', description='The message.', example='Success'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model UpdateResourceInstanceLabelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateResourceInstanceLabelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateResourceInstanceLabel  UpdateResourceInstanceLabelRequest
  * @return UpdateResourceInstanceLabelResponse
 */
async function updateResourceInstanceLabel(request: UpdateResourceInstanceLabelRequest): UpdateResourceInstanceLabelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateResourceInstanceLabel', 'PUT', '/api/v2/resources/{ClusterId}/{ResourceId}/label', 'json', false, 'json', request);
}

model UpdateServiceRequest {
  clusterId: string(name='ClusterId', description='The region ID of the service.

This parameter is required.', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='The service name. For more information about how to query the service name, see [ListServices](https://help.aliyun.com/document_detail/412109.html).

This parameter is required.', example='foo', position='Path'),
  updateType?: string(name='UpdateType', description='The type of the service update. Valid values: merge and replace. By default, merge is used if you do not specify this parameter.

*   merge: If the JSON string configured for the existing service is `{"a":"b"}` and the JSON string specified in the body parameter is `{"c":"d"}`, the JSON string is `{"a":"b","c":"d"}` after the service update.
*   replace: If the JSON string configured for the existing service is `{"a":"b"}` and the JSON string specified in the body parameter is `{"c":"d"}`, the JSON string is `{"c":"d"}` after the service update.', example='merge', position='Query'),
  body?: string(name='body', description='The request body. The body includes the request parameters that you want to update. For more information about the request parameters, see [CreateService](https://help.aliyun.com/document_detail/412086.html).', example='{   "name": "foo",   "model_path": "http://path/to/model.tar.gz",   "processor": "tensorflow_cpu",   "metadata": {     "instance": 2,     "memory": 7000,     "cpu": 4   } }', position='Body'),
}

model UpdateServiceResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Succeed to update service [foo] in region [cn-shanghai]'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model UpdateServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateServiceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateService  UpdateServiceRequest
  * @return UpdateServiceResponse
 */
async function updateService(request: UpdateServiceRequest): UpdateServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateService', 'PUT', '/api/v2/services/{ClusterId}/{ServiceName}', 'json', false, 'json', request);
}

model UpdateServiceAutoScalerRequest {
  clusterId: string(name='ClusterId', description='The region ID of the service.

This parameter is required.', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='The service name. For more information about how to query the service name, see [ListServices](https://help.aliyun.com/document_detail/412109.html).

This parameter is required.', example='foo', position='Path'),
  behavior?: {
    onZero?: {
      scaleDownGracePeriodSeconds?: int32(name='scaleDownGracePeriodSeconds', description='The time window that is required before the number of instances is reduced to 0. Default value: 600. The number of instances can be reduced to 0 only if no request is available or no traffic exists in the specified time window.', example='600'),
      scaleUpActivationReplicas?: int32(name='scaleUpActivationReplicas', description='The number of instances that you want to create at a time if the number of instances is scaled out from 0. Default value: 1.', example='1'),
    }(name='onZero', description='The operation that reduces the number of instances to 0.'),
    scaleDown?: {
      stabilizationWindowSeconds?: int32(name='stabilizationWindowSeconds', description='The time window that is required before the scale-in operation is performed. Default value: 300. The scale-in operation can be performed only if the specified metric drops below the threshold in the specified time window.', example='300'),
    }(name='scaleDown', description='The scale-in operation.'),
    scaleUp?: {
      stabilizationWindowSeconds?: int32(name='stabilizationWindowSeconds', description='The time window that is required before the scale-out operation is performed. Default value: 0. The scale-out operation can be performed only if the specified metric exceeds the specified threshold in the specified time window.', example='0'),
    }(name='scaleUp', description='The scale-out operation.'),
  }(name='behavior', description='The Autoscaler operation.', position='Body'),
  max: int32(name='max', description='The maximum number of instances. The value must be greater than that of the min parameter.

This parameter is required.', example='8', position='Body'),
  min: int32(name='min', description='The minimum number of instances. The value must be greater than 0.

This parameter is required.', example='2', position='Body'),
  scaleStrategies: [ 
    {
      metricName: string(name='metricName', description='The name of the metric for triggering auto scaling. Valid values:

*   qps: the queries per second (QPS) for an individual instance.
*   cpu: the CPU utilization.

This parameter is required.', example='qps'),
      service?: string(name='service', description='The service for which the metric is specified. If you do not set this parameter, the current service is specified by default.', example='demo_svc'),
      threshold: float(name='threshold', description='The threshold of the metric that triggers auto scaling.

*   If you set metricName to QPS, scale-out is triggered when the average QPS for a single instance is greater than this threshold.
*   If you set metricName to CPU, scale-out is triggered when the average CPU utilization for a single instance is greater than this threshold.

This parameter is required.', example='100'),
    }
  ](name='scaleStrategies', description='The auto scaling policies.

This parameter is required.', position='Body'),
}

model UpdateServiceAutoScalerResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Update auto scale for service [foo] successfully'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model UpdateServiceAutoScalerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateServiceAutoScalerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateServiceAutoScaler  UpdateServiceAutoScalerRequest
  * @return UpdateServiceAutoScalerResponse
 */
async function updateServiceAutoScaler(request: UpdateServiceAutoScalerRequest): UpdateServiceAutoScalerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateServiceAutoScaler', 'PUT', '/api/v2/services/{ClusterId}/{ServiceName}/autoscaler', 'json', false, 'json', request);
}

model UpdateServiceCronScalerRequest {
  clusterId: string(name='ClusterId', description='The region ID of the service.

This parameter is required.', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='The service name. For more information about how to query the service name, see [ListServices](https://help.aliyun.com/document_detail/412109.html).

This parameter is required.', example='foo', position='Path'),
  excludeDates?: [ string ](name='ExcludeDates', description='The points in time that are excluded when you schedule a CronHPA job. The points in time must be specified by using a cron expression.', position='Body'),
  scaleJobs: [ 
    {
      name?: string(name='Name', description='The name of the CronHPA job.', example='scale-job-1'),
      schedule: string(name='Schedule', description='The cron expression that is used to configure the execution time of the CronHPA job. For more information about how to configure cron expressions, see **Description of special characters** in this topic.

This parameter is required.', example='0 18 * * * *'),
      targetSize: int32(name='TargetSize', description='The number of instances that you want to configure for the CronHPA job.

This parameter is required.', example='2'),
    }
  ](name='ScaleJobs', description='The description of the CronHPA job.

This parameter is required.', position='Body'),
}

model UpdateServiceCronScalerResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Update cron scaler for service [foo] successfully'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model UpdateServiceCronScalerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateServiceCronScalerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateServiceCronScaler  UpdateServiceCronScalerRequest
  * @return UpdateServiceCronScalerResponse
 */
async function updateServiceCronScaler(request: UpdateServiceCronScalerRequest): UpdateServiceCronScalerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateServiceCronScaler', 'PUT', '/api/v2/services/{ClusterId}/{ServiceName}/cronscaler', 'json', false, 'json', request);
}

model UpdateServiceInstanceRequest {
  clusterId: string(name='ClusterId', description='The region ID of the service.

This parameter is required.', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='The service name. For more information about how to query the service name, see [ListServices](https://help.aliyun.com/document_detail/412109.html).

This parameter is required.', example='foo', position='Path'),
  instanceName: string(name='InstanceName', description='The instance name. For more information about how to query the instance name, see [ListServiceInstances](https://help.aliyun.com/document_detail/412108.html).

This parameter is required.', example='foo-69xxxx4f4-5w9r9', position='Path'),
  isolate?: boolean(name='Isolate', description='Specifies whether to isolate the service instance. Valid values:

*   true
*   false', example='true', position='Body'),
}

model UpdateServiceInstanceResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Success'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model UpdateServiceInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateServiceInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateServiceInstance  UpdateServiceInstanceRequest
  * @return UpdateServiceInstanceResponse
 */
async function updateServiceInstance(request: UpdateServiceInstanceRequest): UpdateServiceInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateServiceInstance', 'PUT', '/api/v2/services/{ClusterId}/{ServiceName}/instances/{InstanceName}', 'json', false, 'json', request);
}

model UpdateServiceLabelRequest {
  clusterId: string(name='ClusterId', description='The ID of the region where the service is deployed.

This parameter is required.', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='The service name. For more information about how to query the service name, see [ListServices](https://help.aliyun.com/document_detail/412109.html).

This parameter is required.', example='foo', position='Path'),
  labels: map[string]string(name='Labels', description='The custom service tags.

This parameter is required.', position='Body'),
}

model UpdateServiceLabelResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Succeed to update service [service_from_XXXX] labels.'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model UpdateServiceLabelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateServiceLabelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateServiceLabel  UpdateServiceLabelRequest
  * @return UpdateServiceLabelResponse
 */
async function updateServiceLabel(request: UpdateServiceLabelRequest): UpdateServiceLabelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateServiceLabel', 'PUT', '/api/v2/services/{ClusterId}/{ServiceName}/label', 'json', false, 'json', request);
}

model UpdateServiceMirrorRequest {
  clusterId: string(name='ClusterId', description='The ID of the region where the service is deployed.

This parameter is required.', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='The service name. For more information about how to query the service name, see [ListServices](https://help.aliyun.com/document_detail/412109.html).

This parameter is required.', example='foo', position='Path'),
  ratio?: int32(name='Ratio', description='The percentage of traffic that you want to mirror. Valid values: 0 to 100.', example='30', position='Body'),
  target?: [ string ](name='Target', description='The service instances.', position='Body'),
}

model UpdateServiceMirrorResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Traffic mirroring is updating for service [foo] in region [cn-shanghia], ratio [70%]'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82***'),
}

model UpdateServiceMirrorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateServiceMirrorResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateServiceMirror  UpdateServiceMirrorRequest
  * @return UpdateServiceMirrorResponse
 */
async function updateServiceMirror(request: UpdateServiceMirrorRequest): UpdateServiceMirrorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateServiceMirror', 'PUT', '/api/v2/services/{ClusterId}/{ServiceName}/mirror', 'json', false, 'json', request);
}

model UpdateServiceSafetyLockRequest {
  clusterId: string(name='ClusterId', description='The ID of the region where the service is deployed.

This parameter is required.', example='cn-beijing', position='Path'),
  serviceName: string(name='ServiceName', description='The service name. For more information about how to query the service name, see [ListServices](https://help.aliyun.com/document_detail/412109.html).

This parameter is required.', example='foo', position='Path'),
  lock: string(name='Lock', description='The lock scope. Valid values:

*   all: locks all operations.
*   dangerous: locks dangerous operations such as delete and stop operations.
*   none: locks no operations.

This parameter is required.', example='dangerous', position='Body'),
}

model UpdateServiceSafetyLockResponseBody = {
  message?: string(name='Message', description='The returned message.', example='service safety lock updated to dangerous'),
  requestId?: string(name='RequestId', description='The request ID.', example='E089D584-B6F4-50C4-9902-DA2295B7****'),
}

model UpdateServiceSafetyLockResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateServiceSafetyLockResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateServiceSafetyLock  UpdateServiceSafetyLockRequest
  * @return UpdateServiceSafetyLockResponse
 */
async function updateServiceSafetyLock(request: UpdateServiceSafetyLockRequest): UpdateServiceSafetyLockResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateServiceSafetyLock', 'PUT', '/api/v2/services/{ClusterId}/{ServiceName}/lock', 'json', false, 'json', request);
}

model UpdateServiceVersionRequest {
  clusterId: string(name='ClusterId', description='The ID of the region where the service is deployed.

This parameter is required.', example='cn-shanghai', position='Path'),
  serviceName: string(name='ServiceName', description='The service name. For more information about how to query the service name, see [ListServices](https://help.aliyun.com/document_detail/412109.html).

This parameter is required.', example='echo', position='Path'),
  version: int32(name='Version', description='The destination version of the service. The value must be of the INT type. The value must be greater than 0 and smaller than the current version of the service.

This parameter is required.', example='1', position='Body'),
}

model UpdateServiceVersionResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Service [foo] in region [cn-shanghai] is starting'),
  requestId?: string(name='RequestId', description='The request ID.', example='40325405-579C-4D82****'),
}

model UpdateServiceVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateServiceVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateServiceVersion  UpdateServiceVersionRequest
  * @return UpdateServiceVersionResponse
 */
async function updateServiceVersion(request: UpdateServiceVersionRequest): UpdateServiceVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateServiceVersion', 'PUT', '/api/v2/services/{ClusterId}/{ServiceName}/version', 'json', false, 'json', request);
}

model UpdateVirtualResourceRequest {
  clusterId: string(name='ClusterId', description='The ID of the region to which the virtual resource group belongs.

This parameter is required.', example='cn-hangzhou', position='Path'),
  virtualResourceId: string(name='VirtualResourceId', description='The ID of the virtual resource group.

This parameter is required.', example='eas-vr-npovr28onap1xxxxxx', position='Path'),
  disableSpotProtectionPeriod?: boolean(name='DisableSpotProtectionPeriod', description='Specifies whether to disable the retention period of preemptible instances.', example='true', position='Body'),
  resources?: [ 
    {
      instanceType?: string(name='InstanceType', description='The instance type of the public resource group.

>  You must specify one and only one of the InstanceType, ResourceId, and QuotaId parameters.', example='ecs.s6-c1m2.xlarge'),
      priority?: int32(name='Priority', description='The priority of resource scheduling. A greater number indicates a higher priority.', example='6'),
      quotaId?: string(name='QuotaId', description='The ID of the Lingjun resource quota.

>  You must specify one and only one of the InstanceType, ResourceId, and QuotaId parameters.', example='quota185lqf994k6'),
      region?: string(name='Region', description='The region in which the resource resides.', example='cn-hangzhou'),
      resourceId?: string(name='ResourceId', description='The ID of the dedicated resource group. For information about how to obtain the ID of a dedicated resource group, see [ListResources](https://help.aliyun.com/document_detail/412133.html).

>  You must specify one and only one of the InstanceType, ResourceId, and QuotaId parameters.', example='eas-r-g55ieatgg3butwrn7a'),
      spotPriceLimit?: float(name='SpotPriceLimit', description='The maximum price of preemptible instances in a public resource group.

>  If you leave this parameter empty, preemptible instances are not used.', example='10.05'),
    }
  ](name='Resources', description='The resources in the virtual resource group.

>  If you specify this parameter, previous data is overwritten.', position='Body'),
  virtualResourceName?: string(name='VirtualResourceName', description='The new name of the virtual resource group.', example='NewMyVirtualResource', position='Body'),
}

model UpdateVirtualResourceResponseBody = {
  message?: string(name='Message', description='The returned message.', example='Successfully updated virtual resource eas-vr-npovr28onap1xxxxxx'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='40325405-579C-4D82****'),
}

model UpdateVirtualResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateVirtualResourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateVirtualResource  UpdateVirtualResourceRequest
  * @return UpdateVirtualResourceResponse
 */
async function updateVirtualResource(request: UpdateVirtualResourceRequest): UpdateVirtualResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateVirtualResource', 'PUT', '/api/v2/virtualresources/{ClusterId}/{VirtualResourceId}', 'json', false, 'json', request);
}

