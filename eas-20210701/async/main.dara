/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'eas';
  @version = '2021-07-01';
  @endpointRule = 'regional';
  @endpointMap = {
    cn-beijing = 'pai-eas.cn-beijing.aliyuncs.com',
    cn-zhangjiakou = 'pai-eas.cn-zhangjiakou.aliyuncs.com',
    cn-hangzhou = 'pai-eas.cn-hangzhou.aliyuncs.com',
    cn-shanghai = 'pai-eas.cn-shanghai.aliyuncs.com',
    cn-shenzhen = 'pai-eas.cn-shenzhen.aliyuncs.com',
    cn-hongkong = 'pai-eas.cn-hongkong.aliyuncs.com',
    ap-southeast-1 = 'pai-eas.ap-southeast-1.aliyuncs.com',
    ap-southeast-5 = 'pai-eas.ap-southeast-5.aliyuncs.com',
    us-east-1 = 'pai-eas.us-east-1.aliyuncs.com',
    us-west-1 = 'pai-eas.us-west-1.aliyuncs.com',
    eu-central-1 = 'pai-eas.eu-central-1.aliyuncs.com',
    ap-south-1 = 'pai-eas.ap-south-1.aliyuncs.com',
    cn-shanghai-finance-1 = 'pai-eas.cn-shanghai-finance-1.aliyuncs.com',
    cn-north-2-gov-1 = 'pai-eas.cn-north-2-gov-1.aliyuncs.com',
    cn-chengdu = 'pai-eas.cn-chengdu.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model Instance {
  hostIP?: string(name='HostIP', description='实例所在的宿主机IP'),
  hostName?: string(name='HostName', description='实例所在的宿主机名字'),
  innerIP?: string(name='InnerIP', description='实例的内网IP'),
  instanceName?: string(name='InstanceName', description='实例的名字'),
  instancePort?: int32(name='InstancePort', description='实例的网络端口'),
  lastState?: [  map[string]any ](name='LastState', description='实例上一次退出的状态'),
  namespace?: string(name='Namespace', description='实例的命名空间'),
  readyProcesses?: int32(name='ReadyProcesses', description='实例已经启动完成的进程数'),
  reason?: string(name='Reason', description='实例当前状态的标识'),
  restartCount?: int32(name='RestartCount', description='实例重启次数'),
  startAt?: string(name='StartAt', description='实例的启动时间'),
  status?: string(name='Status', description='实例状态'),
  totalProcesses?: int32(name='TotalProcesses', description='实例总的进程数'),
}

model Resource {
  clusterId?: string(name='ClusterId', description='资源组所在的集群'),
  cpuCount?: int32(name='CpuCount', description='资源组CPU数量'),
  createTime?: string(name='CreateTime', description='资源组创建时间'),
  extraData?: map[string]any(name='ExtraData', description='资源组自定义数据'),
  gpuCount?: int32(name='GpuCount', description='资源组GPU个数'),
  instanceCount?: int32(name='InstanceCount', description='资源组实例个数'),
  message?: string(name='Message', description='资源组摘要信息'),
  postPaidInstanceCount?: int32(name='PostPaidInstanceCount', description='资源组按量付费实例个数'),
  prePaidInstanceCount?: int32(name='PrePaidInstanceCount', description='资源组预付费实例个数'),
  resourceId?: string(name='ResourceId', description='资源组ID'),
  resourceName?: string(name='ResourceName', description='资源组名字'),
  status?: string(name='Status', description='资源组的状态'),
  updateTime?: string(name='UpdateTime', description='资源组更新时间'),
}

model ResourceInstance {
  autoRenewal?: boolean(name='AutoRenewal', description='实例是否自动续费'),
  chargeType?: string(name='ChargeType', description='实例的计费类型'),
  createTime?: string(name='CreateTime', description='实例的创建时间'),
  expiredTime?: string(name='ExpiredTime', description='实例过期时间'),
  instanceCpuCount?: int32(name='InstanceCpuCount', description='实例的Cpu个数'),
  instanceGpuCount?: int32(name='InstanceGpuCount', description='实例的Gpu个数'),
  instanceId?: string(name='InstanceId', description='实例ID'),
  instanceIp?: string(name='InstanceIp', description='实例IP'),
  instanceMemory?: string(name='InstanceMemory', description='实例的内存大小'),
  instanceName?: string(name='InstanceName', description='实例名称'),
  instanceStatus?: string(name='InstanceStatus', description='实例状态'),
  instanceType?: string(name='InstanceType', description='实例的机型'),
  instanceUsedCpu?: float(name='InstanceUsedCpu', description='实例被使用的CPU数量'),
  instanceUsedGpu?: int32(name='InstanceUsedGpu', description='实例被使用的GPU数量'),
  instanceUsedMemory?: string(name='InstanceUsedMemory', description='实例被使用的内存大小'),
}

model ResourceInstanceWorker {
  cpuLimit?: int32(name='CpuLimit', description='CpuLimit'),
  cpuRequest?: int32(name='CpuRequest', description='CpuRequest'),
  gpuLimit?: int32(name='GpuLimit', description='GpuLimit'),
  gpuRequest?: int32(name='GpuRequest', description='GpuRequest'),
  memoryLimit?: int32(name='MemoryLimit', description='MemoryLimit'),
  memoryRquest?: int32(name='MemoryRquest', description='MemoryRquest'),
  name?: string(name='Name', description='pod名'),
  ready?: boolean(name='Ready', description='是否ready'),
  restartCount?: int32(name='RestartCount', description='RestartCount'),
  serviceName?: string(name='ServiceName', description='服务名'),
  startTime?: string(name='StartTime', description='StartTime'),
  status?: string(name='Status', description='pod状态'),
}

model Service {
  accessToken?: string(name='AccessToken', description='服务的请求Token'),
  callerUid?: string(name='CallerUid', description='服务创建账号的UID'),
  cpu?: int32(name='Cpu', description='每个实例申请的cpu'),
  createTime?: string(name='CreateTime', description='服务的创建时间'),
  currentVersion?: int32(name='CurrentVersion', description='当前运行的模型版本'),
  extraData?: string(name='ExtraData', description='服务的额外信息'),
  gpu?: int32(name='Gpu', description='每个实例申请的gpu'),
  image?: string(name='Image', description='服务的数据镜像'),
  internetEndpoint?: string(name='InternetEndpoint', description='服务的公网endpoint'),
  intranetEndpoint?: string(name='IntranetEndpoint', description='服务内网endpoint'),
  latestVersion?: int32(name='LatestVersion', description='服务最新版本号'),
  memory?: int32(name='Memory', description='每个worker需要的内存大小，单位为M'),
  message?: string(name='Message', description='服务的摘要信息'),
  namespace?: string(name='Namespace', description='服务所在的命名空间'),
  parentUid?: string(name='ParentUid', description='服务创建账号的主账号UID'),
  pendingInstance?: int32(name='PendingInstance', description='被挂起的服务的实例个数'),
  reason?: string(name='Reason', description='服务的状态信息'),
  region?: string(name='Region', description='服务所在的区域'),
  requestId?: string(name='RequestId', description='请求ID'),
  resource?: string(name='Resource', description='服务所在的资源组'),
  resourceAlias?: string(name='ResourceAlias', description='服务所在的资源组别名'),
  runningInstance?: int32(name='RunningInstance', description='正在运行的服务的实例个数'),
  serviceConfig?: string(name='ServiceConfig', description='服务的配置信息'),
  serviceGroup?: string(name='ServiceGroup', description='服务所在分组'),
  serviceId?: string(name='ServiceId', description='服务ID'),
  serviceName?: string(name='ServiceName', description='服务的名字'),
  source?: string(name='Source', description='服务的部署来源'),
  status?: string(name='Status', description='服务的状态'),
  totalInstance?: int32(name='TotalInstance', description='服务的所有实例总个数'),
  updateTime?: string(name='UpdateTime', description='服务的更新时间'),
  weight?: int32(name='Weight', description='服务灰度发布的权重值'),
}

model CreateBenchmarkTaskRequest {
  body?: string(name='body', position='Body'),
}

model CreateBenchmarkTaskResponseBody = {
  message?: string(name='Message'),
  name?: string(name='Name'),
  region?: string(name='Region'),
  requestId?: string(name='RequestId'),
}

model CreateBenchmarkTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateBenchmarkTaskResponseBody(name='body'),
}

async function createBenchmarkTask(request: CreateBenchmarkTaskRequest): CreateBenchmarkTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateBenchmarkTask', 'POST', '/api/v2/benchmark-tasks', 'json', false, 'json', request);
}

model CreateResourceRequest {
  autoRenewal?: boolean(name='AutoRenewal', description='是否自动续费', position='Body'),
  chargeType: string(name='ChargeType', description='付费类型，预付费PrePaid，后付费PostPaid', position='Body'),
  ecsInstanceCount: int32(name='EcsInstanceCount', description='实例数量', position='Body'),
  ecsInstanceType: string(name='EcsInstanceType', description='实例机型，对应ecs机型', position='Body'),
}

model CreateResourceResponseBody = {
  clusterId?: string(name='ClusterId', description='资源组所在集群ID'),
  ownerUid?: string(name='OwnerUid', description='资源组的Owner UID'),
  requestId?: string(name='RequestId', description='Id of the request'),
  resourceId?: string(name='ResourceId', description='资源组ID'),
  resourceName?: string(name='ResourceName', description='资源组名称'),
}

model CreateResourceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateResourceResponseBody(name='body'),
}

async function createResource(request: CreateResourceRequest): CreateResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateResource', 'POST', '/api/v2/resources', 'json', false, 'json', request);
}

model CreateResourceInstancesRequest {
  clusterId: string(name='ClusterId', description='资源组所在的集群ID', position='Path'),
  resourceId: string(name='ResourceId', description='资源组ID', position='Path'),
  autoRenewal?: boolean(name='AutoRenewal', description='是否自动续费', position='Body'),
  chargeType: string(name='ChargeType', description='付费类型，预付费PrePaid，后付费PostPaid', position='Body'),
  ecsInstanceCount: int32(name='EcsInstanceCount', description='新创建的实例个数，(0, 100]', position='Body'),
  ecsInstanceType: string(name='EcsInstanceType', description='实例机型，对应ecs机型', position='Body'),
  userData?: string(name='UserData', description='用户自这义数据，小于 16KB', position='Body'),
}

model CreateResourceInstancesResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateResourceInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: CreateResourceInstancesResponseBody(name='body'),
}

async function createResourceInstances(request: CreateResourceInstancesRequest): CreateResourceInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateResourceInstances', 'POST', '/api/v2/resources/{ClusterId}/{ResourceId}/instances', 'json', false, 'json', request);
}

model CreateResourceLogRequest {
  clusterId: string(name='ClusterId', position='Path'),
  resourceId: string(name='ResourceId', position='Path'),
  logStore?: string(name='LogStore', description='sls日志库', position='Body'),
  projectName?: string(name='ProjectName', description='资源组对应的sls日志管理项目', position='Body'),
}

model CreateResourceLogResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateResourceLogResponse = {
  headers: map[string]string(name='headers'),
  body: CreateResourceLogResponseBody(name='body'),
}

async function createResourceLog(request: CreateResourceLogRequest): CreateResourceLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateResourceLog', 'POST', '/api/v2/resources/{ClusterId}/{ResourceId}/log', 'json', false, 'json', request);
}

model CreateServiceRequest {
  body?: string(name='body', position='Body'),
}

model CreateServiceResponseBody = {
  internetEndpoint?: string(name='InternetEndpoint'),
  intranetEndpoint?: string(name='IntranetEndpoint'),
  region?: string(name='Region'),
  requestId?: string(name='RequestId', description='Id of the request'),
  serviceId?: string(name='ServiceId'),
  serviceName?: string(name='ServiceName'),
  status?: string(name='Status'),
}

model CreateServiceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateServiceResponseBody(name='body'),
}

async function createService(request: CreateServiceRequest): CreateServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateService', 'POST', '/api/v2/services', 'json', false, 'json', request);
}

model CreateServiceAutoScalerRequest {
  clusterId: string(name='ClusterId', description='服务所在区域', position='Path'),
  serviceName: string(name='ServiceName', description='服务名字', position='Path'),
  max: int32(name='max', description='最大 replica 数，需要大于MinReplica', position='Body'),
  min: int32(name='min', description='最小 replica 数，需要大于0', position='Body'),
  strategies: {
    cpu?: float(name='cpu', description='最大 replica 数，需要大于MinReplica'),
    qps?: float(name='qps', description='每个实例支持的最大qps数，超出即扩容'),
  }(name='strategies', description='map 类型的策略定义', position='Body'),
}

model CreateServiceAutoScalerResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateServiceAutoScalerResponse = {
  headers: map[string]string(name='headers'),
  body: CreateServiceAutoScalerResponseBody(name='body'),
}

async function createServiceAutoScaler(request: CreateServiceAutoScalerRequest): CreateServiceAutoScalerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateServiceAutoScaler', 'POST', '/api/v2/services/{ClusterId}/{ServiceName}/autoscaler', 'json', false, 'json', request);
}

model CreateServiceCronScalerRequest {
  clusterId: string(name='ClusterId', description='服务所在区域', position='Path'),
  serviceName: string(name='ServiceName', description='服务名字', position='Path'),
  excludeDates?: [ string ](name='ExcludeDates', description='需要排除的时间点的cron表达式', position='Body'),
  scaleJobs: [ 
    {
      name?: string(name='Name'),
      schedule: string(name='Schedule', description='要执行伸缩任务的cron表达式'),
      targetSize: int32(name='TargetSize', description='执行伸缩任务的目标replica'),
    }
  ](name='ScaleJobs', description='定时伸缩任务描述', position='Body'),
}

model CreateServiceCronScalerResponseBody = {
  message?: string(name='Message', description='操作成功消息'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model CreateServiceCronScalerResponse = {
  headers: map[string]string(name='headers'),
  body: CreateServiceCronScalerResponseBody(name='body'),
}

async function createServiceCronScaler(request: CreateServiceCronScalerRequest): CreateServiceCronScalerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateServiceCronScaler', 'POST', '/api/v2/services/{ClusterId}/{ServiceName}/cronscaler', 'json', false, 'json', request);
}

model CreateServiceMirrorRequest {
  clusterId: string(name='ClusterId', description='服务所在区域', position='Path'),
  serviceName: string(name='ServiceName', description='服务名字', position='Path'),
  ratio?: int32(name='Ratio', description='比例 [0, 100]', position='Body'),
  target?: [ string ](name='Target', description='服务实例列表', position='Body'),
}

model CreateServiceMirrorResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateServiceMirrorResponse = {
  headers: map[string]string(name='headers'),
  body: CreateServiceMirrorResponseBody(name='body'),
}

async function createServiceMirror(request: CreateServiceMirrorRequest): CreateServiceMirrorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateServiceMirror', 'POST', '/api/v2/services/{ClusterId}/{ServiceName}/mirror', 'json', false, 'json', request);
}

model DeleteBenchmarkTaskRequest {
  clusterId: string(name='ClusterId', position='Path'),
  taskName: string(name='TaskName', position='Path'),
}

model DeleteBenchmarkTaskResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeleteBenchmarkTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteBenchmarkTaskResponseBody(name='body'),
}

async function deleteBenchmarkTask(request: DeleteBenchmarkTaskRequest): DeleteBenchmarkTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteBenchmarkTask', 'DELETE', '/api/v2/benchmark-tasks/{ClusterId}/{TaskName}', 'json', false, 'json', request);
}

model DeleteResourceRequest {
  clusterId: string(name='ClusterId', description='资源组所在的集群ID', position='Path'),
  resourceId: string(name='ResourceId', description='资源组的ID', position='Path'),
}

model DeleteResourceResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteResourceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteResourceResponseBody(name='body'),
}

async function deleteResource(request: DeleteResourceRequest): DeleteResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteResource', 'DELETE', '/api/v2/resources/{ClusterId}/{ResourceId}', 'json', false, 'json', request);
}

model DeleteResourceDLinkRequest {
  clusterId: string(name='ClusterId', description='资源组所在的集群ID', position='Path'),
  resourceId: string(name='ResourceId', description='资源组的ID', position='Path'),
}

model DeleteResourceDLinkResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteResourceDLinkResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteResourceDLinkResponseBody(name='body'),
}

async function deleteResourceDLink(request: DeleteResourceDLinkRequest): DeleteResourceDLinkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteResourceDLink', 'DELETE', '/api/v2/resources/{ClusterId}/{ResourceId}/dlink', 'json', false, 'json', request);
}

model DeleteResourceInstancesRequest {
  clusterId: string(name='ClusterId', position='Path'),
  resourceId: string(name='ResourceId', position='Path'),
  allFailed?: boolean(name='AllFailed', position='Query'),
  instanceList?: string(name='InstanceList', position='Query'),
}

model DeleteResourceInstancesResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteResourceInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteResourceInstancesResponseBody(name='body'),
}

async function deleteResourceInstances(request: DeleteResourceInstancesRequest): DeleteResourceInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteResourceInstances', 'DELETE', '/api/v2/resources/{ClusterId}/{ResourceId}/instances', 'json', false, 'json', request);
}

model DeleteResourceLogRequest {
  clusterId: string(name='ClusterId', position='Path'),
  resourceId: string(name='ResourceId', position='Path'),
}

model DeleteResourceLogResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteResourceLogResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteResourceLogResponseBody(name='body'),
}

async function deleteResourceLog(request: DeleteResourceLogRequest): DeleteResourceLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteResourceLog', 'DELETE', '/api/v2/resources/{ClusterId}/{ResourceId}/log', 'json', false, 'json', request);
}

model DeleteServiceRequest {
  clusterId: string(name='ClusterId', position='Path'),
  serviceName: string(name='ServiceName', position='Path'),
}

model DeleteServiceResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteServiceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteServiceResponseBody(name='body'),
}

async function deleteService(request: DeleteServiceRequest): DeleteServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteService', 'DELETE', '/api/v2/services/{ClusterId}/{ServiceName}', 'json', false, 'json', request);
}

model DeleteServiceAutoScalerRequest {
  clusterId: string(name='ClusterId', description='服务所在区域', position='Path'),
  serviceName: string(name='ServiceName', description='服务名字', position='Path'),
}

model DeleteServiceAutoScalerResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteServiceAutoScalerResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteServiceAutoScalerResponseBody(name='body'),
}

async function deleteServiceAutoScaler(request: DeleteServiceAutoScalerRequest): DeleteServiceAutoScalerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteServiceAutoScaler', 'DELETE', '/api/v2/services/{ClusterId}/{ServiceName}/autoscaler', 'json', false, 'json', request);
}

model DeleteServiceCronScalerRequest {
  clusterId: string(name='ClusterId', position='Path'),
  serviceName: string(name='ServiceName', position='Path'),
}

model DeleteServiceCronScalerResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteServiceCronScalerResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteServiceCronScalerResponseBody(name='body'),
}

async function deleteServiceCronScaler(request: DeleteServiceCronScalerRequest): DeleteServiceCronScalerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteServiceCronScaler', 'DELETE', '/api/v2/services/{ClusterId}/{ServiceName}/cronscaler', 'json', false, 'json', request);
}

model DeleteServiceInstancesRequest {
  clusterId: string(name='ClusterId', description='服务所在区域', position='Path'),
  serviceName: string(name='ServiceName', description='服务名字', position='Path'),
  instanceList: string(name='InstanceList', description='删除的实例列表，多个实例名字之间逗号隔开', position='Query'),
}

model DeleteServiceInstancesResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteServiceInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteServiceInstancesResponseBody(name='body'),
}

async function deleteServiceInstances(request: DeleteServiceInstancesRequest): DeleteServiceInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteServiceInstances', 'DELETE', '/api/v2/services/{ClusterId}/{ServiceName}/instances', 'json', false, 'json', request);
}

model DeleteServiceMirrorRequest {
  clusterId: string(name='ClusterId', description='服务所在区域', position='Path'),
  serviceName: string(name='ServiceName', description='服务名字', position='Path'),
}

model DeleteServiceMirrorResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteServiceMirrorResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteServiceMirrorResponseBody(name='body'),
}

async function deleteServiceMirror(request: DeleteServiceMirrorRequest): DeleteServiceMirrorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteServiceMirror', 'DELETE', '/api/v2/services/{ClusterId}/{ServiceName}/mirror', 'json', false, 'json', request);
}

model DescribeBenchmarkTaskRequest {
  clusterId: string(name='ClusterId', position='Path'),
  taskName: string(name='TaskName', position='Path'),
}

model DescribeBenchmarkTaskResponseBody = {
  availableAgent?: long(name='AvailableAgent'),
  callerUid?: string(name='CallerUid'),
  desiredAgent?: long(name='DesiredAgent'),
  message?: string(name='Message'),
  parentUid?: string(name='ParentUid'),
  reason?: string(name='Reason'),
  requestId?: string(name='RequestId'),
  serviceName?: string(name='ServiceName'),
  status?: string(name='Status'),
  taskId?: string(name='TaskId'),
  taskName?: string(name='TaskName'),
  token?: string(name='Token'),
}

model DescribeBenchmarkTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBenchmarkTaskResponseBody(name='body'),
}

async function describeBenchmarkTask(request: DescribeBenchmarkTaskRequest): DescribeBenchmarkTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeBenchmarkTask', 'GET', '/api/v2/benchmark-tasks/{ClusterId}/{TaskName}', 'json', false, 'json', request);
}

model DescribeBenchmarkTaskReportRequest {
  clusterId: string(name='ClusterId', position='Path'),
  taskName: string(name='TaskName', position='Path'),
}

model DescribeBenchmarkTaskReportResponseBody = {
  reportUrl?: string(name='ReportUrl'),
  requestId?: string(name='RequestId'),
}

model DescribeBenchmarkTaskReportResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBenchmarkTaskReportResponseBody(name='body'),
}

async function describeBenchmarkTaskReport(request: DescribeBenchmarkTaskReportRequest): DescribeBenchmarkTaskReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeBenchmarkTaskReport', 'GET', '/api/v2/benchmark-tasks/{ClusterId}/{TaskName}/report', 'json', false, 'json', request);
}

model DescribeResourceRequest {
  clusterId: string(name='ClusterId', description='资源组所在的集群ID', position='Path'),
  resourceId: string(name='ResourceId', description='资源组的ID', position='Path'),
}

model DescribeResourceResponseBody = {
  clusterId?: string(name='ClusterId'),
  cpuCount?: int32(name='CpuCount'),
  createTime?: string(name='CreateTime'),
  extraData?: string(name='ExtraData'),
  gpuCount?: int32(name='GpuCount'),
  instanceCount?: int32(name='InstanceCount'),
  message?: string(name='Message'),
  ownerUid?: string(name='OwnerUid'),
  postPaidInstanceCount?: int32(name='PostPaidInstanceCount'),
  prePaidInstanceCount?: int32(name='PrePaidInstanceCount'),
  requestId?: string(name='RequestId'),
  resourceId?: string(name='ResourceId'),
  resourceName?: string(name='ResourceName'),
  status?: string(name='Status'),
  updateTime?: string(name='UpdateTime'),
}

model DescribeResourceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeResourceResponseBody(name='body'),
}

async function describeResource(request: DescribeResourceRequest): DescribeResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeResource', 'GET', '/api/v2/resources/{ClusterId}/{ResourceId}', 'json', false, 'json', request);
}

model DescribeResourceDLinkRequest {
  clusterId: string(name='ClusterId', description='资源组所在的集群ID', position='Path'),
  resourceId: string(name='ResourceId', description='资源组的ID', position='Path'),
}

model DescribeResourceDLinkResponseBody = {
  auxVSwitchList?: [ string ](name='AuxVSwitchList', description='已打通直连的副VSwitch ID'),
  destinationCIDRs?: string(name='DestinationCIDRs', description='要打通的客户端的网段信息，会将该网段加入到服务端的回包路由中，与VSwitchIdList可二选一'),
  requestId?: string(name='RequestId', description='Id of the request'),
  securityGroupId?: string(name='SecurityGroupId', description='已打通直连的安全组'),
  vSwitchId?: string(name='VSwitchId', description='已打通直连的主VSwitch ID'),
  vpcId?: string(name='VpcId', description='已打通直接的Vpc ID'),
}

model DescribeResourceDLinkResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeResourceDLinkResponseBody(name='body'),
}

async function describeResourceDLink(request: DescribeResourceDLinkRequest): DescribeResourceDLinkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeResourceDLink', 'GET', '/api/v2/resources/{ClusterId}/{ResourceId}/dlink', 'json', false, 'json', request);
}

model DescribeResourceLogRequest {
  clusterId: string(name='ClusterId', description='资源组所在的集群ID', position='Path'),
  resourceId: string(name='ResourceId', description='资源组的ID', position='Path'),
}

model DescribeResourceLogResponseBody = {
  logStore?: string(name='LogStore', description='sls日志库'),
  message?: string(name='Message', description='sls日志信息'),
  projectName?: string(name='ProjectName', description='资源组对应的sls日志管理项目'),
  requestId?: string(name='RequestId', description='Id of the request'),
  status?: string(name='Status', description='资源组状态'),
}

model DescribeResourceLogResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeResourceLogResponseBody(name='body'),
}

async function describeResourceLog(request: DescribeResourceLogRequest): DescribeResourceLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeResourceLog', 'GET', '/api/v2/resources/{ClusterId}/{ResourceId}/log', 'json', false, 'json', request);
}

model DescribeServiceRequest {
  clusterId: string(name='ClusterId', position='Path'),
  serviceName: string(name='ServiceName', position='Path'),
}

model DescribeServiceResponse = {
  headers: map[string]string(name='headers'),
  body: Service  
}

async function describeService(request: DescribeServiceRequest): DescribeServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeService', 'GET', '/api/v2/services/{ClusterId}/{ServiceName}', 'json', false, 'json', request);
}

model DescribeServiceAutoScalerRequest {
  clusterId: string(name='ClusterId', position='Path'),
  serviceName: string(name='ServiceName', position='Path'),
}

model DescribeServiceAutoScalerResponseBody = {
  behavior?: map[string]any(name='Behavior'),
  currentValues?: map[string]any(name='CurrentValues'),
  maxReplica?: int32(name='MaxReplica', description='服务最大实例数'),
  minReplica?: int32(name='MinReplica', description='服务最小实例数'),
  requestId?: string(name='RequestId', description='Id of the request'),
  serviceName?: string(name='ServiceName', description='服务名字'),
  strategies?: map[string]any(name='Strategies', description='扩缩控制器控制策略'),
}

model DescribeServiceAutoScalerResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeServiceAutoScalerResponseBody(name='body'),
}

async function describeServiceAutoScaler(request: DescribeServiceAutoScalerRequest): DescribeServiceAutoScalerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeServiceAutoScaler', 'GET', '/api/v2/services/{ClusterId}/{ServiceName}/autoscaler', 'json', false, 'json', request);
}

model DescribeServiceCronScalerRequest {
  clusterId?: string(name='ClusterId', position='Path'),
  serviceName?: string(name='ServiceName', position='Path'),
}

model DescribeServiceCronScalerResponseBody = {
  excludeDates?: [ string ](name='ExcludeDates'),
  requestId?: string(name='RequestId'),
  scaleJobs?: [ 
    {
      createTime?: string(name='CreateTime'),
      lastProbeTime?: string(name='LastProbeTime'),
      message?: string(name='Message'),
      name?: string(name='Name'),
      schedule?: string(name='Schedule'),
      state?: string(name='State'),
      targetSize?: int32(name='TargetSize'),
    }
  ](name='ScaleJobs'),
  serviceName?: string(name='ServiceName'),
}

model DescribeServiceCronScalerResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeServiceCronScalerResponseBody(name='body'),
}

async function describeServiceCronScaler(request: DescribeServiceCronScalerRequest): DescribeServiceCronScalerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeServiceCronScaler', 'GET', '/api/v2/services/{ClusterId}/{ServiceName}/cronscaler', 'json', false, 'json', request);
}

model DescribeServiceLogRequest {
  clusterId: string(name='ClusterId', position='Path'),
  serviceName: string(name='ServiceName', position='Path'),
  endTime?: string(name='EndTime', description='查询的结束时间', position='Query'),
  ip?: string(name='Ip', description='要查询的机器ip', position='Query'),
  keyword?: string(name='Keyword', description='查询的关键字', position='Query'),
  pageNum?: long(name='PageNum', description='请求的页码（默认为1）', position='Query'),
  pageSize?: long(name='PageSize', description='每页的大小（默认为500）', position='Query'),
  startTime?: string(name='StartTime', description='查询的开始时间', position='Query'),
}

model DescribeServiceLogResponseBody = {
  logs?: [ string ](name='Logs', description='返回的日志信息'),
  pageNum?: long(name='PageNum', description='当前页码'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: long(name='TotalCount', description='总计数量'),
  totalPageNum?: long(name='TotalPageNum', description='总计页码'),
}

model DescribeServiceLogResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeServiceLogResponseBody(name='body'),
}

async function describeServiceLog(request: DescribeServiceLogRequest): DescribeServiceLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeServiceLog', 'GET', '/api/v2/services/{ClusterId}/{ServiceName}/logs', 'json', false, 'json', request);
}

model DescribeServiceMirrorRequest {
  clusterId: string(name='ClusterId', description='服务所在区域', position='Path'),
  serviceName: string(name='ServiceName', description='服务名字', position='Path'),
}

model DescribeServiceMirrorResponseBody = {
  ratio?: string(name='Ratio', description='比例[0,100]'),
  requestId?: string(name='RequestId', description='Id of the request'),
  serviceName?: string(name='ServiceName', description='服务名字'),
  target?: string(name='Target', description='设置流量镜像对服务列表'),
}

model DescribeServiceMirrorResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeServiceMirrorResponseBody(name='body'),
}

async function describeServiceMirror(request: DescribeServiceMirrorRequest): DescribeServiceMirrorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeServiceMirror', 'GET', '/api/v2/services/{ClusterId}/{ServiceName}/mirror', 'json', false, 'json', request);
}

model ListBenchmarkTaskRequest {
}

model ListBenchmarkTaskResponseBody = {
  requestId?: string(name='RequestId'),
  tasks?: [ 
    {
      availableAgent?: long(name='AvailableAgent'),
      createTime?: string(name='CreateTime'),
      message?: string(name='Message'),
      region?: string(name='Region'),
      serviceName?: string(name='ServiceName'),
      status?: string(name='Status'),
      taskId?: string(name='TaskId'),
      taskName?: string(name='TaskName'),
      updateTime?: string(name='UpdateTime'),
    }
  ](name='Tasks'),
}

model ListBenchmarkTaskResponse = {
  headers: map[string]string(name='headers'),
  body: ListBenchmarkTaskResponseBody(name='body'),
}

async function listBenchmarkTask(request: ListBenchmarkTaskRequest): ListBenchmarkTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListBenchmarkTask', 'GET', '/api/v2/benchmark-tasks', 'json', false, 'json', request);
}

model ListResourceInstanceWorkerRequest {
  clusterId: string(name='ClusterId', position='Path'),
  resourceId: string(name='ResourceId', position='Path'),
  instanceName: string(name='InstanceName', position='Path'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model ListResourceInstanceWorkerResponseBody = {
  pageNumber?: int32(name='PageNumber', description='当前页码'),
  pageSize?: int32(name='PageSize', description='每页大小'),
  pods?: [
    ResourceInstanceWorker
  ](name='Pods', description='pod列表'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: int32(name='TotalCount', description='pod总数'),
}

model ListResourceInstanceWorkerResponse = {
  headers: map[string]string(name='headers'),
  body: ListResourceInstanceWorkerResponseBody(name='body'),
}

async function listResourceInstanceWorker(request: ListResourceInstanceWorkerRequest): ListResourceInstanceWorkerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListResourceInstanceWorker', 'GET', '/api/v2/resources/{ClusterId}/{ResourceId}/instance/{InstanceName}/workers', 'json', false, 'json', request);
}

model ListResourceInstancesRequest {
  clusterId: string(name='ClusterId', description='资源组所在的集群ID', position='Path'),
  resourceId: string(name='ResourceId', description='资源组的ID', position='Path'),
  chargeType?: string(name='ChargeType', description='付费类型
PrePaid预付费
PostPaid后付费', position='Query'),
  pageNumber?: int32(name='PageNumber', description='请求的页码（默认为1）', position='Query'),
  pageSize?: int32(name='PageSize', description='每页的大小（默认为100）', position='Query'),
}

model ListResourceInstancesResponseBody = {
  instances?: [
    ResourceInstance
  ](name='Instances'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: int32(name='TotalCount'),
}

model ListResourceInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ListResourceInstancesResponseBody(name='body'),
}

async function listResourceInstances(request: ListResourceInstancesRequest): ListResourceInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListResourceInstances', 'GET', '/api/v2/resources/{ClusterId}/{ResourceId}/instances', 'json', false, 'json', request);
}

model ListResourceServicesRequest {
  clusterId: string(name='ClusterId', description='资源组所在的集群ID', position='Path'),
  resourceId: string(name='ResourceId', description='资源组的ID', position='Path'),
  pageNumber?: int32(name='PageNumber', description='请求的页码（默认为1）', position='Query'),
  pageSize?: int32(name='PageSize', description='每页的大小（默认为100）', position='Query'),
}

model ListResourceServicesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId', description='Id of the request'),
  services?: [
    Service
  ](name='Services'),
  totalCount?: int32(name='TotalCount'),
}

model ListResourceServicesResponse = {
  headers: map[string]string(name='headers'),
  body: ListResourceServicesResponseBody(name='body'),
}

async function listResourceServices(request: ListResourceServicesRequest): ListResourceServicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListResourceServices', 'GET', '/api/v2/resources/{ClusterId}/{ResourceId}/services', 'json', false, 'json', request);
}

model ListResourcesRequest {
  pageNumber?: int32(name='PageNumber', description='请求的页码（默认为1）', position='Query'),
  pageSize?: int32(name='PageSize', description='每页的大小（默认为100）', position='Query'),
}

model ListResourcesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId', description='Id of the request'),
  resources?: [
    Resource
  ](name='Resources'),
  totalCount?: int32(name='TotalCount'),
}

model ListResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListResourcesResponseBody(name='body'),
}

async function listResources(request: ListResourcesRequest): ListResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListResources', 'GET', '/api/v2/resources', 'json', false, 'json', request);
}

model ListServiceInstancesRequest {
  clusterId: string(name='ClusterId', description='服务所在区域', position='Path'),
  serviceName: string(name='ServiceName', description='服务名字', position='Path'),
  pageNumber?: int32(name='PageNumber', description='请求的页码（默认为1）', position='Query'),
  pageSize?: int32(name='PageSize', description='每页的大小（默认为100）', position='Query'),
}

model ListServiceInstancesResponseBody = {
  instances?: [
    Instance
  ](name='Instances'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: int32(name='TotalCount'),
}

model ListServiceInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ListServiceInstancesResponseBody(name='body'),
}

async function listServiceInstances(request: ListServiceInstancesRequest): ListServiceInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListServiceInstances', 'GET', '/api/v2/services/{ClusterId}/{ServiceName}/instances', 'json', false, 'json', request);
}

model ListServicesRequest {
  filter?: string(name='Filter', description='模糊匹配字段（只支持按服务名字模糊匹配）', position='Query'),
  order?: string(name='Order', description='排序方式（默认降序）', position='Query'),
  pageNumber?: int32(name='PageNumber', description='请求的页码（默认为1）', position='Query'),
  pageSize?: int32(name='PageSize', description='每页的大小（默认为100）', position='Query'),
  sort?: string(name='Sort', description='排序字段 （时间戳类型默认倒序排序）', position='Query'),
}

model ListServicesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId', description='Id of the request'),
  services?: [
    Service
  ](name='Services'),
  totalCount?: int32(name='TotalCount'),
}

model ListServicesResponse = {
  headers: map[string]string(name='headers'),
  body: ListServicesResponseBody(name='body'),
}

async function listServices(request: ListServicesRequest): ListServicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListServices', 'GET', '/api/v2/services', 'json', false, 'json', request);
}

model ReleaseServiceRequest {
  clusterId: string(name='ClusterId', description='服务所在区域', position='Path'),
  serviceName: string(name='ServiceName', description='服务名字', position='Path'),
  trafficState?: string(name='TrafficState', position='Body'),
  weight?: int32(name='Weight', description='灰度权重，范围 [0, 100]', position='Body'),
}

model ReleaseServiceResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ReleaseServiceResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseServiceResponseBody(name='body'),
}

async function releaseService(request: ReleaseServiceRequest): ReleaseServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ReleaseService', 'PUT', '/api/v2/services/{ClusterId}/{ServiceName}/release', 'json', false, 'json', request);
}

model StartBenchmarkTaskRequest {
  clusterId: string(name='ClusterId', position='Path'),
  taskName: string(name='TaskName', position='Path'),
}

model StartBenchmarkTaskResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model StartBenchmarkTaskResponse = {
  headers: map[string]string(name='headers'),
  body: StartBenchmarkTaskResponseBody(name='body'),
}

async function startBenchmarkTask(request: StartBenchmarkTaskRequest): StartBenchmarkTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartBenchmarkTask', 'PUT', '/api/v2/benchmark-tasks/{ClusterId}/{TaskName}/start', 'json', false, 'json', request);
}

model StartServiceRequest {
  clusterId: string(name='ClusterId', description='服务所在区域', position='Path'),
  serviceName: string(name='ServiceName', description='服务名字', position='Path'),
}

model StartServiceResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model StartServiceResponse = {
  headers: map[string]string(name='headers'),
  body: StartServiceResponseBody(name='body'),
}

async function startService(request: StartServiceRequest): StartServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartService', 'PUT', '/api/v2/services/{ClusterId}/{ServiceName}/start', 'json', false, 'json', request);
}

model StopBenchmarkTaskRequest {
  clusterId: string(name='ClusterId', position='Path'),
  taskName: string(name='TaskName', position='Path'),
}

model StopBenchmarkTaskResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model StopBenchmarkTaskResponse = {
  headers: map[string]string(name='headers'),
  body: StopBenchmarkTaskResponseBody(name='body'),
}

async function stopBenchmarkTask(request: StopBenchmarkTaskRequest): StopBenchmarkTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopBenchmarkTask', 'PUT', '/api/v2/benchmark-tasks/{ClusterId}/{TaskName}/stop', 'json', false, 'json', request);
}

model StopServiceRequest {
  clusterId: string(name='ClusterId', description='服务所在区域', position='Path'),
  serviceName: string(name='ServiceName', description='服务名字', position='Path'),
}

model StopServiceResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model StopServiceResponse = {
  headers: map[string]string(name='headers'),
  body: StopServiceResponseBody(name='body'),
}

async function stopService(request: StopServiceRequest): StopServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopService', 'PUT', '/api/v2/services/{ClusterId}/{ServiceName}/stop', 'json', false, 'json', request);
}

model UpdateBenchmarkTaskRequest {
  clusterId: string(name='ClusterId', position='Path'),
  taskName: string(name='TaskName', position='Path'),
  body?: string(name='body', position='Body'),
}

model UpdateBenchmarkTaskResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UpdateBenchmarkTaskResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateBenchmarkTaskResponseBody(name='body'),
}

async function updateBenchmarkTask(request: UpdateBenchmarkTaskRequest): UpdateBenchmarkTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateBenchmarkTask', 'PUT', '/api/v2/benchmark-tasks/{ClusterId}/{TaskName}', 'json', false, 'json', request);
}

model UpdateResourceRequest {
  clusterId: string(name='ClusterId', description='资源组所在的集群ID', position='Path'),
  resourceId: string(name='ResourceId', description='资源组的ID', position='Path'),
  resourceName: string(name='ResourceName', description='新的资源组名称', position='Body'),
}

model UpdateResourceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  resourceId?: string(name='ResourceId'),
  resourceName?: string(name='ResourceName'),
}

model UpdateResourceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateResourceResponseBody(name='body'),
}

async function updateResource(request: UpdateResourceRequest): UpdateResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateResource', 'PUT', '/api/v2/resources/{ClusterId}/{ResourceId}', 'json', false, 'json', request);
}

model UpdateResourceDLinkRequest {
  clusterId: string(name='ClusterId', description='资源组所在的集群ID', position='Path'),
  resourceId: string(name='ResourceId', description='资源组的Id', position='Path'),
  destinationCIDRs?: string(name='DestinationCIDRs', description='要打通的客户端的网段信息，会将该网段加入到服务端的回包路由中，与VSwitchIdList可二选一', position='Body'),
  securityGroupId: string(name='SecurityGroupId', description='客户端ECS归属的安全组', position='Body'),
  vSwitchId: string(name='VSwitchId', description='对端的主VSwitchID，会在该vswitch中创建ENI', position='Body'),
  vSwitchIdList?: [ string ](name='VSwitchIdList', description='要打通的客户端的vswitch列表，会将这些vswitch对应的网段加入到服务端的回包路由中', position='Body'),
}

model UpdateResourceDLinkResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateResourceDLinkResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateResourceDLinkResponseBody(name='body'),
}

async function updateResourceDLink(request: UpdateResourceDLinkRequest): UpdateResourceDLinkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateResourceDLink', 'PUT', '/api/v2/resources/{ClusterId}/{ResourceId}/dlink', 'json', false, 'json', request);
}

model UpdateServiceRequest {
  clusterId?: string(name='ClusterId', position='Path'),
  serviceName?: string(name='ServiceName', position='Path'),
  body?: string(name='body', position='Body'),
}

model UpdateServiceResponseBody = {
  message?: string(name='Message', description='请求返回消息。'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model UpdateServiceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateServiceResponseBody(name='body'),
}

async function updateService(request: UpdateServiceRequest): UpdateServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateService', 'PUT', '/api/v2/services/{ClusterId}/{ServiceName}', 'json', false, 'json', request);
}

model UpdateServiceAutoScalerRequest {
  clusterId: string(name='ClusterId', position='Path'),
  serviceName: string(name='ServiceName', position='Path'),
  max: int32(name='max', description='最大 replica 数，需要大于MinReplica', position='Body'),
  min: int32(name='min', description='最小 replica 数，需要大于0', position='Body'),
  strategies: {
    cpu?: float(name='cpu', description='最大 replica 数，需要大于MinReplica'),
    qps?: float(name='qps', description='每个实例支持的最大qps数，超出即扩容'),
  }(name='strategies', description='map 类型的策略定义', position='Body'),
}

model UpdateServiceAutoScalerResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateServiceAutoScalerResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateServiceAutoScalerResponseBody(name='body'),
}

async function updateServiceAutoScaler(request: UpdateServiceAutoScalerRequest): UpdateServiceAutoScalerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateServiceAutoScaler', 'PUT', '/api/v2/services/{ClusterId}/{ServiceName}/autoscaler', 'json', false, 'json', request);
}

model UpdateServiceCronScalerRequest {
  clusterId: string(name='ClusterId', description='服务所在区域', position='Path'),
  serviceName: string(name='ServiceName', description='服务名字', position='Path'),
  excludeDates?: [ string ](name='ExcludeDates', description='需要排除的时间点的cron表达式', position='Body'),
  scaleJobs: [ 
    {
      name?: string(name='Name'),
      schedule: string(name='Schedule', description='要执行伸缩任务的cron表达式'),
      targetSize: int32(name='TargetSize', description='执行伸缩任务的目标replica'),
    }
  ](name='ScaleJobs', description='定时伸缩任务描述', position='Body'),
}

model UpdateServiceCronScalerResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateServiceCronScalerResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateServiceCronScalerResponseBody(name='body'),
}

async function updateServiceCronScaler(request: UpdateServiceCronScalerRequest): UpdateServiceCronScalerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateServiceCronScaler', 'PUT', '/api/v2/services/{ClusterId}/{ServiceName}/cronscaler', 'json', false, 'json', request);
}

model UpdateServiceMirrorRequest {
  clusterId: string(name='ClusterId', description='服务所在区域', position='Path'),
  serviceName: string(name='ServiceName', description='服务名字', position='Path'),
  ratio?: int32(name='Ratio', description='比例 [0, 100]', position='Body'),
  target?: [ string ](name='Target', description='服务实例列表', position='Body'),
}

model UpdateServiceMirrorResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateServiceMirrorResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateServiceMirrorResponseBody(name='body'),
}

async function updateServiceMirror(request: UpdateServiceMirrorRequest): UpdateServiceMirrorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateServiceMirror', 'PUT', '/api/v2/services/{ClusterId}/{ServiceName}/mirror', 'json', false, 'json', request);
}

model UpdateServiceVersionRequest {
  clusterId: string(name='ClusterId', description='服务所在区域', position='Path'),
  serviceName: string(name='ServiceName', description='服务名字', position='Path'),
  version: int32(name='Version', position='Body'),
}

model UpdateServiceVersionResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateServiceVersionResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateServiceVersionResponseBody(name='body'),
}

async function updateServiceVersion(request: UpdateServiceVersionRequest): UpdateServiceVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateServiceVersion', 'PUT', '/api/v2/services/{ClusterId}/{ServiceName}/version', 'json', false, 'json', request);
}

