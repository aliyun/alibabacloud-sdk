/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-2-pop = 'clickhouse.aliyuncs.com',
    ap-southeast-1 = 'clickhouse.aliyuncs.com',
    cn-beijing = 'clickhouse.aliyuncs.com',
    cn-beijing-finance-1 = 'clickhouse.aliyuncs.com',
    cn-beijing-finance-pop = 'clickhouse.aliyuncs.com',
    cn-beijing-gov-1 = 'clickhouse.aliyuncs.com',
    cn-beijing-nu16-b01 = 'clickhouse.aliyuncs.com',
    cn-edge-1 = 'clickhouse.aliyuncs.com',
    cn-fujian = 'clickhouse.aliyuncs.com',
    cn-haidian-cm12-c01 = 'clickhouse.aliyuncs.com',
    cn-hangzhou = 'clickhouse.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'clickhouse.aliyuncs.com',
    cn-hangzhou-finance = 'clickhouse.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'clickhouse.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'clickhouse.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'clickhouse.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'clickhouse.aliyuncs.com',
    cn-hangzhou-test-306 = 'clickhouse.aliyuncs.com',
    cn-hongkong = 'clickhouse.aliyuncs.com',
    cn-hongkong-finance-pop = 'clickhouse.aliyuncs.com',
    cn-north-2-gov-1 = 'clickhouse.aliyuncs.com',
    cn-qingdao = 'clickhouse.aliyuncs.com',
    cn-qingdao-nebula = 'clickhouse.aliyuncs.com',
    cn-shanghai = 'clickhouse.aliyuncs.com',
    cn-shanghai-et15-b01 = 'clickhouse.aliyuncs.com',
    cn-shanghai-et2-b01 = 'clickhouse.aliyuncs.com',
    cn-shanghai-finance-1 = 'clickhouse.aliyuncs.com',
    cn-shanghai-inner = 'clickhouse.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'clickhouse.aliyuncs.com',
    cn-shenzhen = 'clickhouse.aliyuncs.com',
    cn-shenzhen-finance-1 = 'clickhouse.aliyuncs.com',
    cn-shenzhen-inner = 'clickhouse.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'clickhouse.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'clickhouse.aliyuncs.com',
    cn-wuhan = 'clickhouse.aliyuncs.com',
    cn-yushanfang = 'clickhouse.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'clickhouse.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'clickhouse.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'clickhouse.aliyuncs.com',
    eu-west-1-oxs = 'clickhouse.aliyuncs.com',
    me-east-1 = 'clickhouse.aliyuncs.com',
    rus-west-1-pop = 'clickhouse.aliyuncs.com',
    us-east-1 = 'clickhouse.aliyuncs.com',
    us-west-1 = 'clickhouse.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('clickhouse', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateAccountRequest {
  account?: string(name='Account', description='This parameter is required.', example='test1'),
  accountType?: string(name='AccountType', description='This parameter is required.', example='NormalAccount'),
  DBInstanceId?: string(name='DBInstanceId', description='This parameter is required.', example='cc-bp100p4q1g9z3****'),
  description?: string(name='Description'),
  dmlAuthSetting?: {
    allowDatabases?: [ string ](name='AllowDatabases'),
    allowDictionaries?: [ string ](name='AllowDictionaries'),
    ddlAuthority?: boolean(name='DdlAuthority', example='true'),
    dmlAuthority?: int32(name='DmlAuthority', example='0'),
  }(name='DmlAuthSetting'),
  password?: string(name='Password', description='This parameter is required.', example='a1b2c3d4@'),
  product?: string(name='Product', example='clickhouse'),
  regionId?: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou'),
}

model CreateAccountShrinkRequest {
  account?: string(name='Account', description='This parameter is required.', example='test1'),
  accountType?: string(name='AccountType', description='This parameter is required.', example='NormalAccount'),
  DBInstanceId?: string(name='DBInstanceId', description='This parameter is required.', example='cc-bp100p4q1g9z3****'),
  description?: string(name='Description'),
  dmlAuthSettingShrink?: string(name='DmlAuthSetting'),
  password?: string(name='Password', description='This parameter is required.', example='a1b2c3d4@'),
  product?: string(name='Product', example='clickhouse'),
  regionId?: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou'),
}

model CreateAccountResponseBody = {
  data?: {
    account?: string(name='Account', example='test1'),
    DBInstanceId?: string(name='DBInstanceId', example='cc-bp100p4q1g9z3****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='2FED790E-FB61-4721-8C1C-07C627FA5A19'),
}

model CreateAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAccountResponseBody(name='body'),
}

/**
 * @summary 创建账号
 *
 * @param tmpReq CreateAccountRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateAccountResponse
 */
async function createAccountWithOptions(tmpReq: CreateAccountRequest, runtime: Util.RuntimeOptions): CreateAccountResponse {
  Util.validateModel(tmpReq);
  var request = new CreateAccountShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.dmlAuthSetting)) {
    request.dmlAuthSettingShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dmlAuthSetting, 'DmlAuthSetting', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.account)) {
    query['Account'] = request.account;
  }
  if (!Util.isUnset(request.accountType)) {
    query['AccountType'] = request.accountType;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.dmlAuthSettingShrink)) {
    query['DmlAuthSetting'] = request.dmlAuthSettingShrink;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.product)) {
    query['Product'] = request.product;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAccount',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建账号
 *
 * @param request CreateAccountRequest
 * @return CreateAccountResponse
 */
async function createAccount(request: CreateAccountRequest): CreateAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAccountWithOptions(request, runtime);
}

model CreateDBRequest {
  comment?: string(name='Comment', example='test'),
  DBInstanceId?: string(name='DBInstanceId', description='This parameter is required.', example='cc-bp100p4q1g9z3****'),
  DBName?: string(name='DBName', description='This parameter is required.', example='testdb001'),
  regionId?: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou'),
}

model CreateDBResponseBody = {
  data?: {
    DBInstanceId?: string(name='DBInstanceId', example='cc-bp100p4q1g9z3****'),
    DBName?: string(name='DBName', example='testdb001'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='94F92113-FF63-5E57-8401-6FE123AD11DD'),
}

model CreateDBResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDBResponseBody(name='body'),
}

/**
 * @summary 创建数据库
 *
 * @param request CreateDBRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDBResponse
 */
async function createDBWithOptions(request: CreateDBRequest, runtime: Util.RuntimeOptions): CreateDBResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.comment)) {
    query['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.DBName)) {
    query['DBName'] = request.DBName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDB',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建数据库
 *
 * @param request CreateDBRequest
 * @return CreateDBResponse
 */
async function createDB(request: CreateDBRequest): CreateDBResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDBWithOptions(request, runtime);
}

model CreateDBInstanceRequest {
  clientToken?: string(name='ClientToken', example='AB'),
  DBInstanceDescription?: string(name='DBInstanceDescription'),
  engine?: string(name='Engine', example='clickhouse'),
  engineVersion?: string(name='EngineVersion', example='23.8'),
  multiZone?: [ 
    {
      vSwitchIds?: [ string ](name='VSwitchIds'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-h'),
    }
  ](name='MultiZone'),
  regionId?: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou'),
  scaleMax?: string(name='ScaleMax', example='32'),
  scaleMin?: string(name='ScaleMin', example='8'),
  vpcId?: string(name='VpcId', description='VPC ID。', example='vpc-uf6xmupdn7v6ui9f****'),
  vswitchId?: string(name='VswitchId', example='vsw-uf632qye9oqt4x4sr****'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-h'),
}

model CreateDBInstanceShrinkRequest {
  clientToken?: string(name='ClientToken', example='AB'),
  DBInstanceDescription?: string(name='DBInstanceDescription'),
  engine?: string(name='Engine', example='clickhouse'),
  engineVersion?: string(name='EngineVersion', example='23.8'),
  multiZoneShrink?: string(name='MultiZone'),
  regionId?: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou'),
  scaleMax?: string(name='ScaleMax', example='32'),
  scaleMin?: string(name='ScaleMin', example='8'),
  vpcId?: string(name='VpcId', description='VPC ID。', example='vpc-uf6xmupdn7v6ui9f****'),
  vswitchId?: string(name='VswitchId', example='vsw-uf632qye9oqt4x4sr****'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-h'),
}

model CreateDBInstanceResponseBody = {
  data?: {
    connectionString?: string(name='ConnectionString', example='cc-bp100p4q1g9z3****-clickhouse.clickhouseserver.rds.aliyuncs.com'),
    DBInstanceId?: string(name='DBInstanceId', example='cc-bp100p4q1g9z3****'),
    orderId?: long(name='OrderId', example='21154955706****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='F5178C10-1407-4987-9133-DE4DC9119F75'),
}

model CreateDBInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDBInstanceResponseBody(name='body'),
}

/**
 * @summary 创建企业版Clickhouse实例
 *
 * @param tmpReq CreateDBInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDBInstanceResponse
 */
async function createDBInstanceWithOptions(tmpReq: CreateDBInstanceRequest, runtime: Util.RuntimeOptions): CreateDBInstanceResponse {
  Util.validateModel(tmpReq);
  var request = new CreateDBInstanceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.multiZone)) {
    request.multiZoneShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.multiZone, 'MultiZone', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.DBInstanceDescription)) {
    query['DBInstanceDescription'] = request.DBInstanceDescription;
  }
  if (!Util.isUnset(request.engine)) {
    query['Engine'] = request.engine;
  }
  if (!Util.isUnset(request.engineVersion)) {
    query['EngineVersion'] = request.engineVersion;
  }
  if (!Util.isUnset(request.multiZoneShrink)) {
    query['MultiZone'] = request.multiZoneShrink;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.scaleMax)) {
    query['ScaleMax'] = request.scaleMax;
  }
  if (!Util.isUnset(request.scaleMin)) {
    query['ScaleMin'] = request.scaleMin;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.vswitchId)) {
    query['VswitchId'] = request.vswitchId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDBInstance',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建企业版Clickhouse实例
 *
 * @param request CreateDBInstanceRequest
 * @return CreateDBInstanceResponse
 */
async function createDBInstance(request: CreateDBInstanceRequest): CreateDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDBInstanceWithOptions(request, runtime);
}

model CreateEndpointRequest {
  connectionPrefix?: string(name='ConnectionPrefix', example='cc-bp100p4q1g9z3****-clickhouse.clickhouseserver.rds.aliyuncs.com'),
  DBInstanceId?: string(name='DBInstanceId', description='This parameter is required.', example='cc-bp100p4q1g9z3****'),
  DBInstanceNetType?: string(name='DBInstanceNetType', example='Public'),
  regionId?: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou'),
}

model CreateEndpointResponseBody = {
  requestId?: string(name='RequestId', example='2FED790E-FB61-4721-8C1C-07C627FA5A19'),
}

model CreateEndpointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateEndpointResponseBody(name='body'),
}

/**
 * @summary 创建链接地址
 *
 * @param request CreateEndpointRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateEndpointResponse
 */
async function createEndpointWithOptions(request: CreateEndpointRequest, runtime: Util.RuntimeOptions): CreateEndpointResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionPrefix)) {
    query['ConnectionPrefix'] = request.connectionPrefix;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.DBInstanceNetType)) {
    query['DBInstanceNetType'] = request.DBInstanceNetType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateEndpoint',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建链接地址
 *
 * @param request CreateEndpointRequest
 * @return CreateEndpointResponse
 */
async function createEndpoint(request: CreateEndpointRequest): CreateEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEndpointWithOptions(request, runtime);
}

model DeleteAccountRequest {
  account?: string(name='Account', description='This parameter is required.', example='test'),
  DBInstanceId?: string(name='DBInstanceId', description='This parameter is required.', example='cc-bp100p4q1g9z3****'),
  product?: string(name='Product', example='clickhouse'),
  regionId?: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou'),
}

model DeleteAccountResponseBody = {
  data?: {
    account?: string(name='Account', example='test1'),
    DBInstanceId?: string(name='DBInstanceId', example='cc-bp100p4q1g9z3****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='21D06907-CEA5-561D-B6B1-198BCCE99ED1'),
}

model DeleteAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAccountResponseBody(name='body'),
}

/**
 * @summary 删除账号
 *
 * @param request DeleteAccountRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteAccountResponse
 */
async function deleteAccountWithOptions(request: DeleteAccountRequest, runtime: Util.RuntimeOptions): DeleteAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.account)) {
    query['Account'] = request.account;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.product)) {
    query['Product'] = request.product;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAccount',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除账号
 *
 * @param request DeleteAccountRequest
 * @return DeleteAccountResponse
 */
async function deleteAccount(request: DeleteAccountRequest): DeleteAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAccountWithOptions(request, runtime);
}

model DeleteDBRequest {
  DBInstanceId?: string(name='DBInstanceId', description='This parameter is required.', example='cc-bp100p4q1g9z3****'),
  DBName?: string(name='DBName', description='This parameter is required.', example='testdb001'),
  regionId?: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou'),
}

model DeleteDBResponseBody = {
  data?: {
    DBInstanceId?: string(name='DBInstanceId', example='cc-bp100p4q1g9z3****'),
    DBName?: string(name='DBName', example='testdb001'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='06798FEE-BEF2-5FAF-A30D-728973BBE97C'),
}

model DeleteDBResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDBResponseBody(name='body'),
}

/**
 * @summary 删除数据库
 *
 * @param request DeleteDBRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDBResponse
 */
async function deleteDBWithOptions(request: DeleteDBRequest, runtime: Util.RuntimeOptions): DeleteDBResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.DBName)) {
    query['DBName'] = request.DBName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDB',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除数据库
 *
 * @param request DeleteDBRequest
 * @return DeleteDBResponse
 */
async function deleteDB(request: DeleteDBRequest): DeleteDBResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDBWithOptions(request, runtime);
}

model DeleteDBInstanceRequest {
  DBInstanceId?: string(name='DBInstanceId', description='This parameter is required.', example='cc-bp100p4q1g9z3****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DeleteDBInstanceResponseBody = {
  data?: {
    DBInstanceId?: string(name='DBInstanceId', example='cc-bp100p4q1g9z3****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='D0CEC6AC-7760-409A-A0D5-E6CD8660E9CC'),
}

model DeleteDBInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDBInstanceResponseBody(name='body'),
}

/**
 * @summary 释放实例
 *
 * @param request DeleteDBInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDBInstanceResponse
 */
async function deleteDBInstanceWithOptions(request: DeleteDBInstanceRequest, runtime: Util.RuntimeOptions): DeleteDBInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDBInstance',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 释放实例
 *
 * @param request DeleteDBInstanceRequest
 * @return DeleteDBInstanceResponse
 */
async function deleteDBInstance(request: DeleteDBInstanceRequest): DeleteDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDBInstanceWithOptions(request, runtime);
}

model DeleteEndpointRequest {
  connectionString?: string(name='ConnectionString', example='cc-bp100p4q1g9z3****-clickhouse.clickhouseserver.rds.aliyuncs.com'),
  DBInstanceId?: string(name='DBInstanceId', description='This parameter is required.', example='cc-bp100p4q1g9z3****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DeleteEndpointResponseBody = {
  requestId?: string(name='RequestId', example='F5178C10-1407-4987-9133-DE4DC9119F75'),
}

model DeleteEndpointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEndpointResponseBody(name='body'),
}

/**
 * @summary 删除链接地址
 *
 * @param request DeleteEndpointRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteEndpointResponse
 */
async function deleteEndpointWithOptions(request: DeleteEndpointRequest, runtime: Util.RuntimeOptions): DeleteEndpointResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionString)) {
    query['ConnectionString'] = request.connectionString;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEndpoint',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除链接地址
 *
 * @param request DeleteEndpointRequest
 * @return DeleteEndpointResponse
 */
async function deleteEndpoint(request: DeleteEndpointRequest): DeleteEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEndpointWithOptions(request, runtime);
}

model DescribeAccountAuthorityRequest {
  account?: string(name='Account', description='This parameter is required.', example='test1'),
  DBInstanceId?: string(name='DBInstanceId', description='This parameter is required.', example='cc-bp100p4q1g9z3****'),
  regionId?: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou'),
}

model DescribeAccountAuthorityResponseBody = {
  data?: {
    account?: string(name='Account', example='test1'),
    allowDatabases?: [ string ](name='AllowDatabases'),
    allowDictionaries?: [ string ](name='AllowDictionaries'),
    DBInstanceId?: string(name='DBInstanceId', example='cc-bp100p4q1g9z3****'),
    ddlAuthority?: boolean(name='DdlAuthority', example='true'),
    dmlAuthority?: int32(name='DmlAuthority', example='0'),
    totalDatabases?: [ string ](name='TotalDatabases'),
    totalDictionaries?: [ string ](name='TotalDictionaries'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='F5178C10-1407-4987-9133-DE4DC9119F75'),
}

model DescribeAccountAuthorityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAccountAuthorityResponseBody(name='body'),
}

/**
 * @summary 查询账号的授权信息
 *
 * @param request DescribeAccountAuthorityRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAccountAuthorityResponse
 */
async function describeAccountAuthorityWithOptions(request: DescribeAccountAuthorityRequest, runtime: Util.RuntimeOptions): DescribeAccountAuthorityResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.account)) {
    query['Account'] = request.account;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAccountAuthority',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询账号的授权信息
 *
 * @param request DescribeAccountAuthorityRequest
 * @return DescribeAccountAuthorityResponse
 */
async function describeAccountAuthority(request: DescribeAccountAuthorityRequest): DescribeAccountAuthorityResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccountAuthorityWithOptions(request, runtime);
}

model DescribeAccountsRequest {
  DBInstanceId?: string(name='DBInstanceId', description='This parameter is required.', example='cc-bp100p4q1g9z3****'),
  pageNumber?: string(name='PageNumber', example='1'),
  pageSize?: string(name='PageSize', example='30'),
  product?: string(name='Product', example='clickhouse'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeAccountsResponseBody = {
  data?: {
    accounts?: [ 
      {
        account?: string(name='Account', example='test'),
        accountType?: string(name='AccountType', example='NormalAccount'),
        description?: string(name='Description'),
        status?: string(name='Status', example='1'),
      }
    ](name='Accounts'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='30'),
    totalCount?: int32(name='TotalCount', example='1'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='F5178C10-1407-4987-9133-DE4DC9119F75'),
}

model DescribeAccountsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAccountsResponseBody(name='body'),
}

/**
 * @summary 查询账号列表
 *
 * @param request DescribeAccountsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAccountsResponse
 */
async function describeAccountsWithOptions(request: DescribeAccountsRequest, runtime: Util.RuntimeOptions): DescribeAccountsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.product)) {
    query['Product'] = request.product;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAccounts',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询账号列表
 *
 * @param request DescribeAccountsRequest
 * @return DescribeAccountsResponse
 */
async function describeAccounts(request: DescribeAccountsRequest): DescribeAccountsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccountsWithOptions(request, runtime);
}

model DescribeDBInstanceAttributeRequest {
  DBInstanceId?: string(name='DBInstanceId', description='This parameter is required.', example='cc-bp100p4q1g9z3****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeDBInstanceAttributeResponseBody = {
  data?: {
    aliUid?: long(name='AliUid', example='140692647406****'),
    bid?: string(name='Bid', example='PD39050615820269****'),
    chargeType?: string(name='ChargeType', example='PrePaid'),
    createTime?: string(name='CreateTime', example='2023-09-14T08:14:48Z'),
    DBInstanceId?: string(name='DBInstanceId', example='cc-bp100p4q1g9z3****'),
    deletionProtection?: boolean(name='DeletionProtection', example='0/1'),
    description?: string(name='Description'),
    engine?: string(name='Engine', example='clickhouse'),
    engineMinorVersion?: string(name='EngineMinorVersion', example='23.8.1.41495_6'),
    engineVersion?: string(name='EngineVersion', example='23.8'),
    expireTime?: string(name='ExpireTime', example='2024-04-17T08:14:48Z'),
    latestEngineMinorVersion?: string(name='LatestEngineMinorVersion'),
    lockMode?: string(name='LockMode', example='0'),
    lockReason?: string(name='LockReason', example='nolock'),
    maintainEndTime?: string(name='MaintainEndTime', example='21:00'),
    maintainStartTime?: string(name='MaintainStartTime', example='12:00'),
    nodes?: [ 
      {
        nodeStatus?: string(name='NodeStatus', example='active'),
        zoneId?: string(name='ZoneId'),
      }
    ](name='Nodes'),
    objectStoreSize?: string(name='ObjectStoreSize', example='13'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmzygvt54****'),
    scaleMax?: int32(name='ScaleMax', example='32'),
    scaleMin?: int32(name='ScaleMin', example='8'),
    status?: string(name='Status', example='active'),
    storageSize?: int32(name='StorageSize', example='12'),
    storageType?: string(name='StorageType', example='100'),
    tags?: [ 
      {
        key?: string(name='Key', example='id'),
        value?: string(name='Value', example='ck'),
      }
    ](name='Tags'),
    vSwitchId?: string(name='VSwitchId', example='vsw-uf67ij56zm9x4uc6hmilg'),
    vpcId?: string(name='VpcId', description='VPC ID。', example='vpc-wz9duj8xd6r1gzhsg*****'),
    zoneId?: string(name='ZoneId', example='cn-hangzhou-h'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='2FED790E-FB61-4721-8C1C-07C627FA5A19'),
}

model DescribeDBInstanceAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDBInstanceAttributeResponseBody(name='body'),
}

/**
 * @summary 查询实例详情
 *
 * @param request DescribeDBInstanceAttributeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeDBInstanceAttributeResponse
 */
async function describeDBInstanceAttributeWithOptions(request: DescribeDBInstanceAttributeRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstanceAttribute',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询实例详情
 *
 * @param request DescribeDBInstanceAttributeRequest
 * @return DescribeDBInstanceAttributeResponse
 */
async function describeDBInstanceAttribute(request: DescribeDBInstanceAttributeRequest): DescribeDBInstanceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceAttributeWithOptions(request, runtime);
}

model DescribeDBInstanceDataSourcesRequest {
  DBInstanceId?: string(name='DBInstanceId', description='This parameter is required.', example='cc-bp100p4q1g9z3****'),
  DBName?: string(name='DBName', example='dbtest'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  tableName?: string(name='TableName', example='tableTest'),
}

model DescribeDBInstanceDataSourcesResponseBody = {
  data?: {
    columns?: [ 
      {
        columnName?: string(name='ColumnName', example='c31'),
        comment?: string(name='Comment'),
        DBName?: string(name='DBName', example='dbtest'),
        primaryKey?: string(name='PrimaryKey', example='false'),
        tableName?: string(name='TableName', example='tableTest'),
        type?: string(name='Type', example='UInt64'),
      }
    ](name='Columns'),
    DBInstanceId?: string(name='DBInstanceId', example='cc-bp100p4q1g9z3****'),
    schemas?: string(name='Schemas', example='default'),
    tables?: [ string ](name='Tables'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='F543E6CC-6868-523D-8D28-0E92CF977ED2'),
}

model DescribeDBInstanceDataSourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDBInstanceDataSourcesResponseBody(name='body'),
}

/**
 * @summary 查询DB或者Table数据结构
 *
 * @param request DescribeDBInstanceDataSourcesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeDBInstanceDataSourcesResponse
 */
async function describeDBInstanceDataSourcesWithOptions(request: DescribeDBInstanceDataSourcesRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceDataSourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.DBName)) {
    query['DBName'] = request.DBName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstanceDataSources',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询DB或者Table数据结构
 *
 * @param request DescribeDBInstanceDataSourcesRequest
 * @return DescribeDBInstanceDataSourcesResponse
 */
async function describeDBInstanceDataSources(request: DescribeDBInstanceDataSourcesRequest): DescribeDBInstanceDataSourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceDataSourcesWithOptions(request, runtime);
}

model DescribeDBInstancesRequest {
  DBInstanceIds?: string(name='DBInstanceIds', example='cc-xxxxx,cx-xxxx'),
  DBInstanceStatus?: string(name='DBInstanceStatus', example='active'),
  description?: string(name='Description', example='test'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='30'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-4690g37929****'),
}

model DescribeDBInstancesResponseBody = {
  data?: {
    DBInstances?: [ 
      {
        aliUid?: string(name='AliUid', example='1294****'),
        bid?: string(name='Bid', example='186681****'),
        chargeType?: string(name='ChargeType', example='PostPaid'),
        createTime?: string(name='CreateTime', example='2022-12-04 21:16:15'),
        DBInstanceId?: string(name='DBInstanceId', example='cc-xxxxxxx'),
        deletionProtection?: string(name='DeletionProtection', example='False'),
        description?: string(name='Description', example='test_desc'),
        engine?: string(name='Engine', example='clickhouse'),
        engineVersion?: string(name='EngineVersion', example='22.8'),
        expireTime?: string(name='ExpireTime', example='2024-02-16 11:51:06'),
        lockMode?: string(name='LockMode', example='0'),
        lockReason?: string(name='LockReason', example='null'),
        maintainEndTime?: string(name='MaintainEndTime', example='04:00:00Z'),
        maintainStartTime?: string(name='MaintainStartTime', example='00:00Z'),
        regionId?: string(name='RegionId', example='cn-hangzhou'),
        resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmzy****'),
        scaleMax?: int32(name='ScaleMax', example='13'),
        scaleMin?: int32(name='ScaleMin', example='1'),
        status?: string(name='Status', example='active'),
        tags?: [ 
          {
            key?: string(name='Key', example='tag'),
            value?: string(name='Value', example='test'),
          }
        ](name='Tags'),
        vSwitchId?: string(name='VSwitchId', example='vsw-8vb5mw****'),
        vpcId?: string(name='VpcId', description='VPC ID。', example='vpc-uf6kg****'),
        zoneId?: string(name='ZoneId', example='cn-hangzhou-i'),
      }
    ](name='DBInstances'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='30'),
    totalCount?: string(name='TotalCount', example='1'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='xxx-xxx-xxx'),
}

model DescribeDBInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDBInstancesResponseBody(name='body'),
}

/**
 * @summary 查询实例列表
 *
 * @param request DescribeDBInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeDBInstancesResponse
 */
async function describeDBInstancesWithOptions(request: DescribeDBInstancesRequest, runtime: Util.RuntimeOptions): DescribeDBInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceIds)) {
    query['DBInstanceIds'] = request.DBInstanceIds;
  }
  if (!Util.isUnset(request.DBInstanceStatus)) {
    query['DBInstanceStatus'] = request.DBInstanceStatus;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDBInstances',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询实例列表
 *
 * @param request DescribeDBInstancesRequest
 * @return DescribeDBInstancesResponse
 */
async function describeDBInstances(request: DescribeDBInstancesRequest): DescribeDBInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstancesWithOptions(request, runtime);
}

model DescribeEndpointsRequest {
  DBInstanceId?: string(name='DBInstanceId', description='This parameter is required.', example='cc-xxxxx'),
  regionId?: string(name='RegionId', example='cn-beijing'),
}

model DescribeEndpointsResponseBody = {
  data?: {
    endpoints?: [ 
      {
        connectionString?: string(name='ConnectionString', example='cc-****-clickhouse.clickhouseserver.pre.rds.aliyuncs.com'),
        IPAddress?: string(name='IPAddress', example='172.30.XX.XX'),
        netType?: string(name='NetType', example='VPC'),
        ports?: [ 
          {
            port?: int32(name='Port', example='8123'),
            protocol?: string(name='Protocol', example='HttpPort'),
          }
        ](name='Ports'),
        status?: string(name='Status', example='active'),
        vSwitchId?: string(name='VSwitchId', example='vsw-0xi8829****'),
        vpcId?: string(name='VpcId', description='VPC ID。', example='vpc-uf61z****'),
        vpcInstanceId?: string(name='VpcInstanceId', example='vpc-uf61z****'),
      }
    ](name='Endpoints'),
    instanceNetworkType?: string(name='InstanceNetworkType', example='VPC'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='xxx-xxx-xxx'),
}

model DescribeEndpointsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEndpointsResponseBody(name='body'),
}

/**
 * @summary 查询实例访问地址
 *
 * @param request DescribeEndpointsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeEndpointsResponse
 */
async function describeEndpointsWithOptions(request: DescribeEndpointsRequest, runtime: Util.RuntimeOptions): DescribeEndpointsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEndpoints',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询实例访问地址
 *
 * @param request DescribeEndpointsRequest
 * @return DescribeEndpointsResponse
 */
async function describeEndpoints(request: DescribeEndpointsRequest): DescribeEndpointsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEndpointsWithOptions(request, runtime);
}

model DescribeProcessListRequest {
  DBInstanceId?: string(name='DBInstanceId', description='This parameter is required.', example='cc-xxxxx'),
  initialQueryId?: string(name='InitialQueryId', example='1'),
  initialUser?: string(name='InitialUser', example='testuser'),
  keyword?: string(name='Keyword', example='SELECT'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='30'),
  queryDurationMs?: string(name='QueryDurationMs', example='1000'),
  queryOrder?: long(name='QueryOrder', example='id'),
  regionId?: string(name='RegionId', example='cn-beijing'),
}

model DescribeProcessListResponseBody = {
  data?: {
    DBInstanceID?: int32(name='DBInstanceID', example='cc-xxxx'),
    DBInstanceName?: string(name='DBInstanceName'),
    resultSet?: [ 
      {
        initialAddress?: string(name='InitialAddress', example='0:0:0:0:0:ffff:1edd65ea'),
        initialQueryId?: string(name='InitialQueryId', example='\\\\"79f7e40b-87e2-4ef4-b6df-21889a3a030e\\\\"'),
        initialUser?: string(name='InitialUser', example='bany'),
        query?: string(name='Query', example='select * from test'),
        queryDurationMs?: long(name='QueryDurationMs', example='1000'),
        queryStartTime?: string(name='QueryStartTime', example='2023-07-23T10:13:23Z'),
      }
    ](name='ResultSet'),
    totalCount?: int32(name='TotalCount', example='1'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='xxx-xxx-xxx'),
}

model DescribeProcessListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeProcessListResponseBody(name='body'),
}

/**
 * @summary 查看正在运行的查询
 *
 * @param request DescribeProcessListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeProcessListResponse
 */
async function describeProcessListWithOptions(request: DescribeProcessListRequest, runtime: Util.RuntimeOptions): DescribeProcessListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.initialQueryId)) {
    query['InitialQueryId'] = request.initialQueryId;
  }
  if (!Util.isUnset(request.initialUser)) {
    query['InitialUser'] = request.initialUser;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryDurationMs)) {
    query['QueryDurationMs'] = request.queryDurationMs;
  }
  if (!Util.isUnset(request.queryOrder)) {
    query['QueryOrder'] = request.queryOrder;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeProcessList',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看正在运行的查询
 *
 * @param request DescribeProcessListRequest
 * @return DescribeProcessListResponse
 */
async function describeProcessList(request: DescribeProcessListRequest): DescribeProcessListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeProcessListWithOptions(request, runtime);
}

model DescribeSecurityIPListRequest {
  DBInstanceId?: string(name='DBInstanceId', description='This parameter is required.', example='cc-bp100p4q1g9z3****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeSecurityIPListResponseBody = {
  data?: {
    DBInstanceID?: int32(name='DBInstanceID', example='cc-bp100p4q1g9z3****'),
    DBInstanceName?: string(name='DBInstanceName'),
    groupItems?: [ 
      {
        groupName?: string(name='GroupName', example='default'),
        groupTag?: string(name='GroupTag', example='test'),
        securityIPList?: string(name='SecurityIPList', example='127.0.XX.XX'),
        securityIPType?: string(name='SecurityIPType', example='ipv4'),
        whitelistNetType?: string(name='WhitelistNetType', example='mix'),
      }
    ](name='GroupItems'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='D0CEC6AC-7760-409A-A0D5-E6CD8660E9CC'),
}

model DescribeSecurityIPListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSecurityIPListResponseBody(name='body'),
}

/**
 * @summary 查询白名单
 *
 * @param request DescribeSecurityIPListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSecurityIPListResponse
 */
async function describeSecurityIPListWithOptions(request: DescribeSecurityIPListRequest, runtime: Util.RuntimeOptions): DescribeSecurityIPListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSecurityIPList',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询白名单
 *
 * @param request DescribeSecurityIPListRequest
 * @return DescribeSecurityIPListResponse
 */
async function describeSecurityIPList(request: DescribeSecurityIPListRequest): DescribeSecurityIPListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecurityIPListWithOptions(request, runtime);
}

model DescribeSlowLogRecordsRequest {
  DBInstanceId?: string(name='DBInstanceId', description='This parameter is required.', example='cc-bp100p4q1g9z3****'),
  endTime?: string(name='EndTime', example='2023-09-15 16:00:00'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='30'),
  queryDurationMs?: string(name='QueryDurationMs', example='3000'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  startTime?: string(name='StartTime', example='2023-09-11 16:00:00'),
}

model DescribeSlowLogRecordsResponseBody = {
  data?: {
    DBInstanceID?: int32(name='DBInstanceID', example='cc-bp100p4q1g9z32****'),
    DBInstanceName?: string(name='DBInstanceName'),
    resultSet?: [ 
      {
        initialAddress?: string(name='InitialAddress', example='0:0:0:0:0:ffff:1edd65ea'),
        initialQueryId?: string(name='InitialQueryId', example='\\\\"ae915a3ad30e77e67a7215d05b658cc6\\\\"'),
        initialUser?: string(name='InitialUser', example='bany'),
        memoryUsage?: long(name='MemoryUsage', example='4941696'),
        query?: string(name='Query', example='select * from test'),
        queryDurationMs?: long(name='QueryDurationMs', example='3000'),
        queryStartTime?: string(name='QueryStartTime', example='2023-09-11 16:00:00'),
        readBytes?: long(name='ReadBytes', example='4507128020832'),
        readRows?: long(name='ReadRows', example='10'),
        resultBytes?: long(name='ResultBytes', example='10'),
        type?: string(name='Type', example='ExceptionWhileProcessing'),
      }
    ](name='ResultSet'),
    totalCount?: int32(name='TotalCount', example='1'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='DF203CC8-5F68-5E3F-8050-3C77DD65731A'),
}

model DescribeSlowLogRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSlowLogRecordsResponseBody(name='body'),
}

/**
 * @summary 查看慢日志明细
 *
 * @param request DescribeSlowLogRecordsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSlowLogRecordsResponse
 */
async function describeSlowLogRecordsWithOptions(request: DescribeSlowLogRecordsRequest, runtime: Util.RuntimeOptions): DescribeSlowLogRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryDurationMs)) {
    query['QueryDurationMs'] = request.queryDurationMs;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSlowLogRecords',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看慢日志明细
 *
 * @param request DescribeSlowLogRecordsRequest
 * @return DescribeSlowLogRecordsResponse
 */
async function describeSlowLogRecords(request: DescribeSlowLogRecordsRequest): DescribeSlowLogRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSlowLogRecordsWithOptions(request, runtime);
}

model DescribeSlowLogTrendRequest {
  DBInstanceId?: string(name='DBInstanceId', description='This parameter is required.', example='cc-bp100p4q1g9z3****'),
  endTime?: string(name='EndTime', example='2023-06-07 10:03:00'),
  product?: string(name='Product', example='clickhouse'),
  queryDurationMs?: string(name='QueryDurationMs', example='3000'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  startTime?: string(name='StartTime', example='2023-04-13 17:48:00'),
}

model DescribeSlowLogTrendResponseBody = {
  data?: {
    DBInstanceID?: int32(name='DBInstanceID', example='cc-bp100p4q1g9z3****'),
    DBInstanceName?: string(name='DBInstanceName'),
    resultSet?: [ 
      {
        avgQueryDurationMs?: long(name='AvgQueryDurationMs', example='2000'),
        cnt?: long(name='Cnt', example='1'),
        maxQueryDurationMs?: long(name='MaxQueryDurationMs', example='3000'),
        minQueryDurationMs?: long(name='MinQueryDurationMs', example='1000'),
        queryStartTime?: string(name='QueryStartTime', example='2023-04-13 17:48:00'),
      }
    ](name='ResultSet'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='7D3ECB0E-98CA-5E08-A9CA-F70C5A1E9BDF'),
}

model DescribeSlowLogTrendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSlowLogTrendResponseBody(name='body'),
}

/**
 * @summary 慢查询趋势
 *
 * @param request DescribeSlowLogTrendRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSlowLogTrendResponse
 */
async function describeSlowLogTrendWithOptions(request: DescribeSlowLogTrendRequest, runtime: Util.RuntimeOptions): DescribeSlowLogTrendResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.product)) {
    query['Product'] = request.product;
  }
  if (!Util.isUnset(request.queryDurationMs)) {
    query['QueryDurationMs'] = request.queryDurationMs;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSlowLogTrend',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 慢查询趋势
 *
 * @param request DescribeSlowLogTrendRequest
 * @return DescribeSlowLogTrendResponse
 */
async function describeSlowLogTrend(request: DescribeSlowLogTrendRequest): DescribeSlowLogTrendResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSlowLogTrendWithOptions(request, runtime);
}

model KillProcessRequest {
  DBInstanceId?: string(name='DBInstanceId', description='This parameter is required.', example='cc-xxxxxxx'),
  initialQueryId?: string(name='InitialQueryId', example='1'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model KillProcessResponseBody = {
  data?: {
    count?: long(name='Count', example='1'),
    DBInstanceID?: int32(name='DBInstanceID', example='cc-xxxxxxx'),
    DBInstanceName?: string(name='DBInstanceName', example='cc-xxxxxxx'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='xxx-xxx-xxx'),
}

model KillProcessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: KillProcessResponseBody(name='body'),
}

/**
 * @summary 终止正在进行的任务
 *
 * @param request KillProcessRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return KillProcessResponse
 */
async function killProcessWithOptions(request: KillProcessRequest, runtime: Util.RuntimeOptions): KillProcessResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.initialQueryId)) {
    query['InitialQueryId'] = request.initialQueryId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'KillProcess',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 终止正在进行的任务
 *
 * @param request KillProcessRequest
 * @return KillProcessResponse
 */
async function killProcess(request: KillProcessRequest): KillProcessResponse {
  var runtime = new Util.RuntimeOptions{};
  return killProcessWithOptions(request, runtime);
}

model ModifyAccountAuthorityRequest {
  account?: string(name='Account', description='This parameter is required.', example='test1'),
  DBInstanceId?: string(name='DBInstanceId', description='This parameter is required.', example='cc-bp100p4q1g9z3****'),
  dmlAuthSetting?: {
    allowDatabases?: [ string ](name='AllowDatabases'),
    allowDictionaries?: [ string ](name='AllowDictionaries'),
    ddlAuthority?: boolean(name='DdlAuthority', description='This parameter is required.', example='true'),
    dmlAuthority?: int32(name='DmlAuthority', description='This parameter is required.', example='0'),
  }(name='DmlAuthSetting', description='This parameter is required.'),
  regionId?: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou'),
}

model ModifyAccountAuthorityShrinkRequest {
  account?: string(name='Account', description='This parameter is required.', example='test1'),
  DBInstanceId?: string(name='DBInstanceId', description='This parameter is required.', example='cc-bp100p4q1g9z3****'),
  dmlAuthSettingShrink?: string(name='DmlAuthSetting', description='This parameter is required.'),
  regionId?: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou'),
}

model ModifyAccountAuthorityResponseBody = {
  data?: {
    account?: string(name='Account', example='test1'),
    DBInstanceId?: string(name='DBInstanceId', example='cc-bp100p4q1g9z3****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='05321590-BB65-4720-8CB6-8218E041CDD0'),
}

model ModifyAccountAuthorityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAccountAuthorityResponseBody(name='body'),
}

/**
 * @summary 修改账号的授权信息
 *
 * @param tmpReq ModifyAccountAuthorityRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyAccountAuthorityResponse
 */
async function modifyAccountAuthorityWithOptions(tmpReq: ModifyAccountAuthorityRequest, runtime: Util.RuntimeOptions): ModifyAccountAuthorityResponse {
  Util.validateModel(tmpReq);
  var request = new ModifyAccountAuthorityShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.dmlAuthSetting)) {
    request.dmlAuthSettingShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dmlAuthSetting, 'DmlAuthSetting', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.account)) {
    query['Account'] = request.account;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.dmlAuthSettingShrink)) {
    query['DmlAuthSetting'] = request.dmlAuthSettingShrink;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAccountAuthority',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改账号的授权信息
 *
 * @param request ModifyAccountAuthorityRequest
 * @return ModifyAccountAuthorityResponse
 */
async function modifyAccountAuthority(request: ModifyAccountAuthorityRequest): ModifyAccountAuthorityResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAccountAuthorityWithOptions(request, runtime);
}

model ModifyAccountDescriptionRequest {
  account?: string(name='Account', description='This parameter is required.', example='testuser'),
  DBInstanceId?: string(name='DBInstanceId', description='This parameter is required.', example='cc-xxxxxxx'),
  description?: string(name='Description', description='This parameter is required.', example='test'),
  regionId?: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou'),
}

model ModifyAccountDescriptionResponseBody = {
  data?: {
    account?: string(name='Account', example='testuser'),
    DBInstanceId?: string(name='DBInstanceId', example='cc-xxxxx'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='xxx-xxx-xxx'),
}

model ModifyAccountDescriptionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAccountDescriptionResponseBody(name='body'),
}

/**
 * @summary 修改账号备注
 *
 * @param request ModifyAccountDescriptionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyAccountDescriptionResponse
 */
async function modifyAccountDescriptionWithOptions(request: ModifyAccountDescriptionRequest, runtime: Util.RuntimeOptions): ModifyAccountDescriptionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.account)) {
    query['Account'] = request.account;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAccountDescription',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改账号备注
 *
 * @param request ModifyAccountDescriptionRequest
 * @return ModifyAccountDescriptionResponse
 */
async function modifyAccountDescription(request: ModifyAccountDescriptionRequest): ModifyAccountDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAccountDescriptionWithOptions(request, runtime);
}

model ModifyDBInstanceAttributeRequest {
  attributeType?: string(name='AttributeType', description='This parameter is required.', example='DBInstanceDescription'),
  attributeValue?: string(name='AttributeValue', description='This parameter is required.', example='test'),
  DBInstanceId?: string(name='DBInstanceId', description='This parameter is required.', example='cc-xxxxx'),
  product?: string(name='Product', example='clickhouse'),
  regionId?: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou'),
}

model ModifyDBInstanceAttributeResponseBody = {
  requestId?: string(name='RequestId', example='xxx-xxx-xxx'),
}

model ModifyDBInstanceAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDBInstanceAttributeResponseBody(name='body'),
}

/**
 * @summary 修改实例的配置属性，包括名称、运维时间等
 *
 * @param request ModifyDBInstanceAttributeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyDBInstanceAttributeResponse
 */
async function modifyDBInstanceAttributeWithOptions(request: ModifyDBInstanceAttributeRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.attributeType)) {
    query['AttributeType'] = request.attributeType;
  }
  if (!Util.isUnset(request.attributeValue)) {
    query['AttributeValue'] = request.attributeValue;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.product)) {
    query['Product'] = request.product;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDBInstanceAttribute',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改实例的配置属性，包括名称、运维时间等
 *
 * @param request ModifyDBInstanceAttributeRequest
 * @return ModifyDBInstanceAttributeResponse
 */
async function modifyDBInstanceAttribute(request: ModifyDBInstanceAttributeRequest): ModifyDBInstanceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceAttributeWithOptions(request, runtime);
}

model ModifyDBInstanceClassRequest {
  DBInstanceId?: string(name='DBInstanceId', description='This parameter is required.', example='cc-xxxxxxx'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  scaleMax?: long(name='ScaleMax', example='32'),
  scaleMin?: long(name='ScaleMin', example='2'),
}

model ModifyDBInstanceClassResponseBody = {
  data?: {
    DBInstanceID?: long(name='DBInstanceID', example='cc-xxxxxxx'),
    DBInstanceName?: string(name='DBInstanceName', example='cc-xxxxxxx'),
    scaleMax?: long(name='ScaleMax', example='32'),
    scaleMin?: long(name='ScaleMin', example='2'),
    taskId?: long(name='TaskId', example='10000****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='xxx-xxx-xxx'),
}

model ModifyDBInstanceClassResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDBInstanceClassResponseBody(name='body'),
}

/**
 * @summary 修改实例弹性配置
 *
 * @param request ModifyDBInstanceClassRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyDBInstanceClassResponse
 */
async function modifyDBInstanceClassWithOptions(request: ModifyDBInstanceClassRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceClassResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDBInstanceClass',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改实例弹性配置
 *
 * @param request ModifyDBInstanceClassRequest
 * @return ModifyDBInstanceClassResponse
 */
async function modifyDBInstanceClass(request: ModifyDBInstanceClassRequest): ModifyDBInstanceClassResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceClassWithOptions(request, runtime);
}

model ModifyDBInstanceConnectionStringRequest {
  connectionString?: string(name='ConnectionString', example='cc-2ze34****-clickhouse..clickhouseserver.pre.rds.aliyuncs.com'),
  connectionStringPrefix?: string(name='ConnectionStringPrefix', example='cc-****-clickhouse'),
  DBInstanceId?: string(name='DBInstanceId', description='This parameter is required.', example='cc-xxxxx'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ModifyDBInstanceConnectionStringResponseBody = {
  data?: {
    connectionString?: string(name='ConnectionString', example='cc-2ze34****-clickhouse..clickhouseserver.pre.rds.aliyuncs.com'),
    DBInstanceID?: int32(name='DBInstanceID', example='cc-xxxxx'),
    DBInstanceName?: string(name='DBInstanceName', example='cc-xxxxx'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='xxx-xxx-xxx'),
}

model ModifyDBInstanceConnectionStringResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDBInstanceConnectionStringResponseBody(name='body'),
}

/**
 * @summary 修改链接地址
 *
 * @param request ModifyDBInstanceConnectionStringRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyDBInstanceConnectionStringResponse
 */
async function modifyDBInstanceConnectionStringWithOptions(request: ModifyDBInstanceConnectionStringRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceConnectionStringResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectionString)) {
    query['ConnectionString'] = request.connectionString;
  }
  if (!Util.isUnset(request.connectionStringPrefix)) {
    query['ConnectionStringPrefix'] = request.connectionStringPrefix;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDBInstanceConnectionString',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改链接地址
 *
 * @param request ModifyDBInstanceConnectionStringRequest
 * @return ModifyDBInstanceConnectionStringResponse
 */
async function modifyDBInstanceConnectionString(request: ModifyDBInstanceConnectionStringRequest): ModifyDBInstanceConnectionStringResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceConnectionStringWithOptions(request, runtime);
}

model ModifySecurityIPListRequest {
  DBInstanceId?: string(name='DBInstanceId', description='This parameter is required.', example='cc-xxxxx'),
  groupName?: string(name='GroupName', example='test'),
  modifyMode?: string(name='ModifyMode', example='0'),
  regionId?: string(name='RegionId', example='cn-beijing'),
  securityIPList?: string(name='SecurityIPList', example='192.168.0.0/24,172.16.0.0/24'),
}

model ModifySecurityIPListResponseBody = {
  data?: {
    DBInstanceID?: int32(name='DBInstanceID', example='cc-xxxx'),
    DBInstanceName?: string(name='DBInstanceName', example='cc-xxxx'),
    groupName?: string(name='GroupName', example='test'),
    groupTag?: string(name='GroupTag', example='test'),
    securityIPList?: string(name='SecurityIPList', example='192.168.0.0/24,172.16.0.0/24'),
    securityIPType?: string(name='SecurityIPType', example='ipv4'),
    taskId?: int32(name='TaskId', example='1'),
    whitelistNetType?: string(name='WhitelistNetType', example='mix'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='xxx-xxx-xxx'),
}

model ModifySecurityIPListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifySecurityIPListResponseBody(name='body'),
}

/**
 * @summary 变更白名单
 *
 * @param request ModifySecurityIPListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifySecurityIPListResponse
 */
async function modifySecurityIPListWithOptions(request: ModifySecurityIPListRequest, runtime: Util.RuntimeOptions): ModifySecurityIPListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.modifyMode)) {
    query['ModifyMode'] = request.modifyMode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.securityIPList)) {
    query['SecurityIPList'] = request.securityIPList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySecurityIPList',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 变更白名单
 *
 * @param request ModifySecurityIPListRequest
 * @return ModifySecurityIPListResponse
 */
async function modifySecurityIPList(request: ModifySecurityIPListRequest): ModifySecurityIPListResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySecurityIPListWithOptions(request, runtime);
}

model ResetAccountPasswordRequest {
  account?: string(name='Account', description='This parameter is required.', example='test1'),
  DBInstanceId?: string(name='DBInstanceId', description='This parameter is required.', example='cc-bp100p4q1g9z3****'),
  password?: string(name='Password', description='This parameter is required.', example='123456Aa'),
  product?: string(name='Product', example='clickhouse'),
  regionId?: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou'),
}

model ResetAccountPasswordResponseBody = {
  data?: {
    account?: string(name='Account', example='test1'),
    DBInstanceId?: string(name='DBInstanceId', example='cc-bp100p4q1g9z3****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='5A6A077A-577C-536E-AC13-8E715D7A34C8'),
}

model ResetAccountPasswordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetAccountPasswordResponseBody(name='body'),
}

/**
 * @summary 重置账号密码
 *
 * @param request ResetAccountPasswordRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ResetAccountPasswordResponse
 */
async function resetAccountPasswordWithOptions(request: ResetAccountPasswordRequest, runtime: Util.RuntimeOptions): ResetAccountPasswordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.account)) {
    query['Account'] = request.account;
  }
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.product)) {
    query['Product'] = request.product;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetAccountPassword',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 重置账号密码
 *
 * @param request ResetAccountPasswordRequest
 * @return ResetAccountPasswordResponse
 */
async function resetAccountPassword(request: ResetAccountPasswordRequest): ResetAccountPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetAccountPasswordWithOptions(request, runtime);
}

model RestartDBInstanceRequest {
  DBInstanceId?: string(name='DBInstanceId', description='This parameter is required.', example='cc-bp100p4q1g9z3****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model RestartDBInstanceResponseBody = {
  data?: {
    DBInstanceID?: long(name='DBInstanceID', example='cc-bp100p4q1g9z3****'),
    DBInstanceName?: string(name='DBInstanceName'),
    taskId?: long(name='TaskId', example='100001080'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='D0CEC6AC-7760-409A-A0D5-E6CD8660E9CC'),
}

model RestartDBInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RestartDBInstanceResponseBody(name='body'),
}

/**
 * @summary 重启实例
 *
 * @param request RestartDBInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RestartDBInstanceResponse
 */
async function restartDBInstanceWithOptions(request: RestartDBInstanceRequest, runtime: Util.RuntimeOptions): RestartDBInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RestartDBInstance',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 重启实例
 *
 * @param request RestartDBInstanceRequest
 * @return RestartDBInstanceResponse
 */
async function restartDBInstance(request: RestartDBInstanceRequest): RestartDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return restartDBInstanceWithOptions(request, runtime);
}

model StartDBInstanceRequest {
  DBInstanceId?: string(name='DBInstanceId', description='This parameter is required.', example='cc-bp100p4q1g9z3****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model StartDBInstanceResponseBody = {
  data?: {
    DBInstanceID?: long(name='DBInstanceID', example='cc-bp100p4q1g9z3****'),
    DBInstanceName?: string(name='DBInstanceName'),
    taskId?: long(name='TaskId', example='100000837'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='F5178C10-1407-4987-9133-DE4DC9119F76'),
}

model StartDBInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartDBInstanceResponseBody(name='body'),
}

/**
 * @summary 启动实例
 *
 * @param request StartDBInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StartDBInstanceResponse
 */
async function startDBInstanceWithOptions(request: StartDBInstanceRequest, runtime: Util.RuntimeOptions): StartDBInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartDBInstance',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 启动实例
 *
 * @param request StartDBInstanceRequest
 * @return StartDBInstanceResponse
 */
async function startDBInstance(request: StartDBInstanceRequest): StartDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return startDBInstanceWithOptions(request, runtime);
}

model StopDBInstanceRequest {
  DBInstanceId?: string(name='DBInstanceId', description='This parameter is required.', example='cc-bp100p4q1g9z3****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model StopDBInstanceResponseBody = {
  data?: {
    DBInstanceID?: long(name='DBInstanceID', example='cc-bp100p4q1g9z3****'),
    DBInstanceName?: string(name='DBInstanceName'),
    taskId?: long(name='TaskId', example='100000785'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='2FED790E-FB61-4721-8C1C-07C627FA5A19'),
}

model StopDBInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopDBInstanceResponseBody(name='body'),
}

/**
 * @summary 暂停实例
 *
 * @param request StopDBInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StopDBInstanceResponse
 */
async function stopDBInstanceWithOptions(request: StopDBInstanceRequest, runtime: Util.RuntimeOptions): StopDBInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopDBInstance',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 暂停实例
 *
 * @param request StopDBInstanceRequest
 * @return StopDBInstanceResponse
 */
async function stopDBInstance(request: StopDBInstanceRequest): StopDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopDBInstanceWithOptions(request, runtime);
}

model UpgradeMinorVersionRequest {
  DBInstanceId?: string(name='DBInstanceId', description='This parameter is required.', example='cc-bp1jyis8p15we****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  switchTime?: string(name='SwitchTime', example='2023-01-09T05:00:00Z'),
  switchTimeMode?: string(name='SwitchTimeMode', example='Immediate'),
  targetMinorVersion?: string(name='TargetMinorVersion', example='23.8.1.41495_6'),
}

model UpgradeMinorVersionResponseBody = {
  data?: {
    DBInstanceName?: string(name='DBInstanceName', example='cc-uf6x229yeq166****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='FE242962-6DA3-5FC8-9691-37B62A3210F7'),
}

model UpgradeMinorVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpgradeMinorVersionResponseBody(name='body'),
}

/**
 * @summary 升级实例内核小版本
 *
 * @param request UpgradeMinorVersionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpgradeMinorVersionResponse
 */
async function upgradeMinorVersionWithOptions(request: UpgradeMinorVersionRequest, runtime: Util.RuntimeOptions): UpgradeMinorVersionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.switchTime)) {
    query['SwitchTime'] = request.switchTime;
  }
  if (!Util.isUnset(request.switchTimeMode)) {
    query['SwitchTimeMode'] = request.switchTimeMode;
  }
  if (!Util.isUnset(request.targetMinorVersion)) {
    query['TargetMinorVersion'] = request.targetMinorVersion;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpgradeMinorVersion',
    version = '2023-05-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 升级实例内核小版本
 *
 * @param request UpgradeMinorVersionRequest
 * @return UpgradeMinorVersionResponse
 */
async function upgradeMinorVersion(request: UpgradeMinorVersionRequest): UpgradeMinorVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeMinorVersionWithOptions(request, runtime);
}

